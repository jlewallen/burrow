<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="1226"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0000%" y="421" width="0.0816%" height="15" fill="rgb(251,86,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="469" width="0.1631%" height="15" fill="rgb(244,144,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0000%" y="453" width="0.1631%" height="15" fill="rgb(232,161,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="0.0000%" y="437" width="0.1631%" height="15" fill="rgb(247,34,51)" fg:x="0" fg:w="2"/><text x="0.2500%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0816%" y="421" width="0.0816%" height="15" fill="rgb(225,132,2)" fg:x="1" fg:w="1"/><text x="0.3316%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0816%" y="405" width="0.0816%" height="15" fill="rgb(209,159,44)" fg:x="1" fg:w="1"/><text x="0.3316%" y="415.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0000%" y="485" width="0.2447%" height="15" fill="rgb(251,214,1)" fg:x="0" fg:w="3"/><text x="0.2500%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1631%" y="469" width="0.0816%" height="15" fill="rgb(247,84,47)" fg:x="2" fg:w="1"/><text x="0.4131%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2447%" y="485" width="0.0816%" height="15" fill="rgb(240,111,43)" fg:x="3" fg:w="1"/><text x="0.4947%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="0.0000%" y="549" width="0.4078%" height="15" fill="rgb(215,214,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (5 samples, 0.41%)</title><rect x="0.0000%" y="533" width="0.4078%" height="15" fill="rgb(248,207,23)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="0.0000%" y="517" width="0.4078%" height="15" fill="rgb(214,186,4)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.41%)</title><rect x="0.0000%" y="501" width="0.4078%" height="15" fill="rgb(220,133,22)" fg:x="0" fg:w="5"/><text x="0.2500%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="0.3263%" y="485" width="0.0816%" height="15" fill="rgb(239,134,19)" fg:x="4" fg:w="1"/><text x="0.5763%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3263%" y="469" width="0.0816%" height="15" fill="rgb(250,140,9)" fg:x="4" fg:w="1"/><text x="0.5763%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="0.4894%" y="485" width="0.0816%" height="15" fill="rgb(225,59,14)" fg:x="6" fg:w="1"/><text x="0.7394%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.4894%" y="469" width="0.0816%" height="15" fill="rgb(214,152,51)" fg:x="6" fg:w="1"/><text x="0.7394%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.5710%" y="405" width="0.0816%" height="15" fill="rgb(251,227,43)" fg:x="7" fg:w="1"/><text x="0.8210%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5710%" y="389" width="0.0816%" height="15" fill="rgb(241,96,17)" fg:x="7" fg:w="1"/><text x="0.8210%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5710%" y="373" width="0.0816%" height="15" fill="rgb(234,198,43)" fg:x="7" fg:w="1"/><text x="0.8210%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5710%" y="357" width="0.0816%" height="15" fill="rgb(220,108,29)" fg:x="7" fg:w="1"/><text x="0.8210%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5710%" y="341" width="0.0816%" height="15" fill="rgb(226,163,33)" fg:x="7" fg:w="1"/><text x="0.8210%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.5710%" y="325" width="0.0816%" height="15" fill="rgb(205,194,45)" fg:x="7" fg:w="1"/><text x="0.8210%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.33%)</title><rect x="0.5710%" y="469" width="0.3263%" height="15" fill="rgb(206,143,44)" fg:x="7" fg:w="4"/><text x="0.8210%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.33%)</title><rect x="0.5710%" y="453" width="0.3263%" height="15" fill="rgb(236,136,36)" fg:x="7" fg:w="4"/><text x="0.8210%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="0.5710%" y="437" width="0.3263%" height="15" fill="rgb(249,172,42)" fg:x="7" fg:w="4"/><text x="0.8210%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="0.5710%" y="421" width="0.3263%" height="15" fill="rgb(216,139,23)" fg:x="7" fg:w="4"/><text x="0.8210%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="0.6525%" y="405" width="0.2447%" height="15" fill="rgb(207,166,20)" fg:x="8" fg:w="3"/><text x="0.9025%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="0.6525%" y="389" width="0.2447%" height="15" fill="rgb(210,209,22)" fg:x="8" fg:w="3"/><text x="0.9025%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.8972%" y="357" width="0.0816%" height="15" fill="rgb(232,118,20)" fg:x="11" fg:w="1"/><text x="1.1472%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.8972%" y="341" width="0.0816%" height="15" fill="rgb(238,113,42)" fg:x="11" fg:w="1"/><text x="1.1472%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (7 samples, 0.57%)</title><rect x="0.4894%" y="517" width="0.5710%" height="15" fill="rgb(231,42,5)" fg:x="6" fg:w="7"/><text x="0.7394%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (7 samples, 0.57%)</title><rect x="0.4894%" y="501" width="0.5710%" height="15" fill="rgb(243,166,24)" fg:x="6" fg:w="7"/><text x="0.7394%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.49%)</title><rect x="0.5710%" y="485" width="0.4894%" height="15" fill="rgb(237,226,12)" fg:x="7" fg:w="6"/><text x="0.8210%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="0.8972%" y="469" width="0.1631%" height="15" fill="rgb(229,133,24)" fg:x="11" fg:w="2"/><text x="1.1472%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.8972%" y="453" width="0.1631%" height="15" fill="rgb(238,33,43)" fg:x="11" fg:w="2"/><text x="1.1472%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.8972%" y="437" width="0.1631%" height="15" fill="rgb(227,59,38)" fg:x="11" fg:w="2"/><text x="1.1472%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.8972%" y="421" width="0.1631%" height="15" fill="rgb(230,97,0)" fg:x="11" fg:w="2"/><text x="1.1472%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.8972%" y="405" width="0.1631%" height="15" fill="rgb(250,173,50)" fg:x="11" fg:w="2"/><text x="1.1472%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.8972%" y="389" width="0.1631%" height="15" fill="rgb(240,15,50)" fg:x="11" fg:w="2"/><text x="1.1472%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.8972%" y="373" width="0.1631%" height="15" fill="rgb(221,93,22)" fg:x="11" fg:w="2"/><text x="1.1472%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9788%" y="357" width="0.0816%" height="15" fill="rgb(245,180,53)" fg:x="12" fg:w="1"/><text x="1.2288%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9788%" y="341" width="0.0816%" height="15" fill="rgb(231,88,51)" fg:x="12" fg:w="1"/><text x="1.2288%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9788%" y="325" width="0.0816%" height="15" fill="rgb(240,58,21)" fg:x="12" fg:w="1"/><text x="1.2288%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="1.0604%" y="517" width="0.1631%" height="15" fill="rgb(237,21,10)" fg:x="13" fg:w="2"/><text x="1.3104%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="1.2235%" y="485" width="0.0816%" height="15" fill="rgb(218,43,11)" fg:x="15" fg:w="1"/><text x="1.4735%" y="495.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="1.2235%" y="469" width="0.0816%" height="15" fill="rgb(218,221,29)" fg:x="15" fg:w="1"/><text x="1.4735%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="1.2235%" y="453" width="0.0816%" height="15" fill="rgb(214,118,42)" fg:x="15" fg:w="1"/><text x="1.4735%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.2235%" y="437" width="0.0816%" height="15" fill="rgb(251,200,26)" fg:x="15" fg:w="1"/><text x="1.4735%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.2235%" y="421" width="0.0816%" height="15" fill="rgb(237,101,39)" fg:x="15" fg:w="1"/><text x="1.4735%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.2235%" y="405" width="0.0816%" height="15" fill="rgb(251,117,11)" fg:x="15" fg:w="1"/><text x="1.4735%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.2235%" y="389" width="0.0816%" height="15" fill="rgb(216,223,23)" fg:x="15" fg:w="1"/><text x="1.4735%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.2235%" y="373" width="0.0816%" height="15" fill="rgb(251,54,12)" fg:x="15" fg:w="1"/><text x="1.4735%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.2235%" y="357" width="0.0816%" height="15" fill="rgb(254,176,54)" fg:x="15" fg:w="1"/><text x="1.4735%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.2235%" y="341" width="0.0816%" height="15" fill="rgb(210,32,8)" fg:x="15" fg:w="1"/><text x="1.4735%" y="351.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.3051%" y="469" width="0.0816%" height="15" fill="rgb(235,52,38)" fg:x="16" fg:w="1"/><text x="1.5551%" y="479.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.3051%" y="453" width="0.0816%" height="15" fill="rgb(231,4,44)" fg:x="16" fg:w="1"/><text x="1.5551%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.3051%" y="437" width="0.0816%" height="15" fill="rgb(249,2,32)" fg:x="16" fg:w="1"/><text x="1.5551%" y="447.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (21 samples, 1.71%)</title><rect x="0.4078%" y="549" width="1.7129%" height="15" fill="rgb(224,65,26)" fg:x="5" fg:w="21"/><text x="0.6578%" y="559.50"></text></g><g><title>engine::session::Session::new (21 samples, 1.71%)</title><rect x="0.4078%" y="533" width="1.7129%" height="15" fill="rgb(250,73,40)" fg:x="5" fg:w="21"/><text x="0.6578%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (11 samples, 0.90%)</title><rect x="1.2235%" y="517" width="0.8972%" height="15" fill="rgb(253,177,16)" fg:x="15" fg:w="11"/><text x="1.4735%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.90%)</title><rect x="1.2235%" y="501" width="0.8972%" height="15" fill="rgb(217,32,34)" fg:x="15" fg:w="11"/><text x="1.4735%" y="511.50"></text></g><g><title>libloading::os::unix::Library::open (10 samples, 0.82%)</title><rect x="1.3051%" y="485" width="0.8157%" height="15" fill="rgb(212,7,10)" fg:x="16" fg:w="10"/><text x="1.5551%" y="495.50"></text></g><g><title>dlopen (9 samples, 0.73%)</title><rect x="1.3866%" y="469" width="0.7341%" height="15" fill="rgb(245,89,8)" fg:x="17" fg:w="9"/><text x="1.6366%" y="479.50"></text></g><g><title>_dl_catch_error (9 samples, 0.73%)</title><rect x="1.3866%" y="453" width="0.7341%" height="15" fill="rgb(237,16,53)" fg:x="17" fg:w="9"/><text x="1.6366%" y="463.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.73%)</title><rect x="1.3866%" y="437" width="0.7341%" height="15" fill="rgb(250,204,30)" fg:x="17" fg:w="9"/><text x="1.6366%" y="447.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.73%)</title><rect x="1.3866%" y="421" width="0.7341%" height="15" fill="rgb(208,77,27)" fg:x="17" fg:w="9"/><text x="1.6366%" y="431.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.73%)</title><rect x="1.3866%" y="405" width="0.7341%" height="15" fill="rgb(250,204,28)" fg:x="17" fg:w="9"/><text x="1.6366%" y="415.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.1207%" y="501" width="0.0816%" height="15" fill="rgb(244,63,21)" fg:x="26" fg:w="1"/><text x="2.3707%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="2.1207%" y="485" width="0.0816%" height="15" fill="rgb(236,85,44)" fg:x="26" fg:w="1"/><text x="2.3707%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="2.1207%" y="469" width="0.0816%" height="15" fill="rgb(215,98,4)" fg:x="26" fg:w="1"/><text x="2.3707%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.2838%" y="437" width="0.0816%" height="15" fill="rgb(235,38,11)" fg:x="28" fg:w="1"/><text x="2.5338%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="2.3654%" y="437" width="0.2447%" height="15" fill="rgb(254,186,25)" fg:x="29" fg:w="3"/><text x="2.6154%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.4470%" y="421" width="0.1631%" height="15" fill="rgb(225,55,31)" fg:x="30" fg:w="2"/><text x="2.6970%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.5285%" y="405" width="0.0816%" height="15" fill="rgb(211,15,21)" fg:x="31" fg:w="1"/><text x="2.7785%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.5285%" y="389" width="0.0816%" height="15" fill="rgb(215,187,41)" fg:x="31" fg:w="1"/><text x="2.7785%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.5285%" y="373" width="0.0816%" height="15" fill="rgb(248,69,32)" fg:x="31" fg:w="1"/><text x="2.7785%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.5285%" y="357" width="0.0816%" height="15" fill="rgb(252,102,52)" fg:x="31" fg:w="1"/><text x="2.7785%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.6101%" y="421" width="0.0816%" height="15" fill="rgb(253,140,32)" fg:x="32" fg:w="1"/><text x="2.8601%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6101%" y="405" width="0.0816%" height="15" fill="rgb(216,56,42)" fg:x="32" fg:w="1"/><text x="2.8601%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6101%" y="389" width="0.0816%" height="15" fill="rgb(216,184,14)" fg:x="32" fg:w="1"/><text x="2.8601%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.6101%" y="373" width="0.0816%" height="15" fill="rgb(237,187,27)" fg:x="32" fg:w="1"/><text x="2.8601%" y="383.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.6101%" y="357" width="0.0816%" height="15" fill="rgb(219,65,3)" fg:x="32" fg:w="1"/><text x="2.8601%" y="367.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.6101%" y="341" width="0.0816%" height="15" fill="rgb(245,83,25)" fg:x="32" fg:w="1"/><text x="2.8601%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.6101%" y="325" width="0.0816%" height="15" fill="rgb(214,205,45)" fg:x="32" fg:w="1"/><text x="2.8601%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.6917%" y="405" width="0.0816%" height="15" fill="rgb(241,20,18)" fg:x="33" fg:w="1"/><text x="2.9417%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.6917%" y="389" width="0.0816%" height="15" fill="rgb(232,163,23)" fg:x="33" fg:w="1"/><text x="2.9417%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.6917%" y="373" width="0.0816%" height="15" fill="rgb(214,5,46)" fg:x="33" fg:w="1"/><text x="2.9417%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6917%" y="421" width="0.1631%" height="15" fill="rgb(229,78,17)" fg:x="33" fg:w="2"/><text x="2.9417%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7732%" y="405" width="0.0816%" height="15" fill="rgb(248,89,10)" fg:x="34" fg:w="1"/><text x="3.0232%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.7732%" y="389" width="0.0816%" height="15" fill="rgb(248,54,15)" fg:x="34" fg:w="1"/><text x="3.0232%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="2.2023%" y="469" width="0.7341%" height="15" fill="rgb(223,116,6)" fg:x="27" fg:w="9"/><text x="2.4523%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="2.2023%" y="453" width="0.7341%" height="15" fill="rgb(205,125,38)" fg:x="27" fg:w="9"/><text x="2.4523%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="2.6101%" y="437" width="0.3263%" height="15" fill="rgb(251,78,38)" fg:x="32" fg:w="4"/><text x="2.8601%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8548%" y="421" width="0.0816%" height="15" fill="rgb(253,78,28)" fg:x="35" fg:w="1"/><text x="3.1048%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.9364%" y="469" width="0.1631%" height="15" fill="rgb(209,120,3)" fg:x="36" fg:w="2"/><text x="3.1864%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.9364%" y="453" width="0.1631%" height="15" fill="rgb(238,229,9)" fg:x="36" fg:w="2"/><text x="3.1864%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.9364%" y="437" width="0.1631%" height="15" fill="rgb(253,159,18)" fg:x="36" fg:w="2"/><text x="3.1864%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0179%" y="421" width="0.0816%" height="15" fill="rgb(244,42,34)" fg:x="37" fg:w="1"/><text x="3.2679%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="3.3442%" y="421" width="0.2447%" height="15" fill="rgb(224,8,7)" fg:x="41" fg:w="3"/><text x="3.5942%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="3.3442%" y="405" width="0.2447%" height="15" fill="rgb(210,201,45)" fg:x="41" fg:w="3"/><text x="3.5942%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="3.3442%" y="389" width="0.2447%" height="15" fill="rgb(252,185,21)" fg:x="41" fg:w="3"/><text x="3.5942%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.24%)</title><rect x="3.3442%" y="373" width="0.2447%" height="15" fill="rgb(223,131,1)" fg:x="41" fg:w="3"/><text x="3.5942%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="3.3442%" y="357" width="0.2447%" height="15" fill="rgb(245,141,16)" fg:x="41" fg:w="3"/><text x="3.5942%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="3.4258%" y="341" width="0.1631%" height="15" fill="rgb(229,55,45)" fg:x="42" fg:w="2"/><text x="3.6758%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.4258%" y="325" width="0.1631%" height="15" fill="rgb(208,92,15)" fg:x="42" fg:w="2"/><text x="3.6758%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5073%" y="309" width="0.0816%" height="15" fill="rgb(234,185,47)" fg:x="43" fg:w="1"/><text x="3.7573%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.5889%" y="389" width="0.0816%" height="15" fill="rgb(253,104,50)" fg:x="44" fg:w="1"/><text x="3.8389%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.5889%" y="373" width="0.0816%" height="15" fill="rgb(205,70,7)" fg:x="44" fg:w="1"/><text x="3.8389%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5889%" y="357" width="0.0816%" height="15" fill="rgb(240,178,43)" fg:x="44" fg:w="1"/><text x="3.8389%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.5889%" y="341" width="0.0816%" height="15" fill="rgb(214,112,2)" fg:x="44" fg:w="1"/><text x="3.8389%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5889%" y="325" width="0.0816%" height="15" fill="rgb(206,46,17)" fg:x="44" fg:w="1"/><text x="3.8389%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5889%" y="309" width="0.0816%" height="15" fill="rgb(225,220,16)" fg:x="44" fg:w="1"/><text x="3.8389%" y="319.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.63%)</title><rect x="2.1207%" y="533" width="1.6313%" height="15" fill="rgb(238,65,40)" fg:x="26" fg:w="20"/><text x="2.3707%" y="543.50"></text></g><g><title>engine::session::Session::save_entity_changes (20 samples, 1.63%)</title><rect x="2.1207%" y="517" width="1.6313%" height="15" fill="rgb(230,151,21)" fg:x="26" fg:w="20"/><text x="2.3707%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (19 samples, 1.55%)</title><rect x="2.2023%" y="501" width="1.5498%" height="15" fill="rgb(218,58,49)" fg:x="27" fg:w="19"/><text x="2.4523%" y="511.50"></text></g><g><title>engine::session::Session::check_for_changes (19 samples, 1.55%)</title><rect x="2.2023%" y="485" width="1.5498%" height="15" fill="rgb(219,179,14)" fg:x="27" fg:w="19"/><text x="2.4523%" y="495.50"></text></g><g><title>kernel::compare::any_entity_changes (8 samples, 0.65%)</title><rect x="3.0995%" y="469" width="0.6525%" height="15" fill="rgb(223,72,1)" fg:x="38" fg:w="8"/><text x="3.3495%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="3.1811%" y="453" width="0.5710%" height="15" fill="rgb(238,126,10)" fg:x="39" fg:w="7"/><text x="3.4311%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="3.2626%" y="437" width="0.4894%" height="15" fill="rgb(224,206,38)" fg:x="40" fg:w="6"/><text x="3.5126%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.5889%" y="421" width="0.1631%" height="15" fill="rgb(212,201,54)" fg:x="44" fg:w="2"/><text x="3.8389%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="3.5889%" y="405" width="0.1631%" height="15" fill="rgb(218,154,48)" fg:x="44" fg:w="2"/><text x="3.8389%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.6705%" y="389" width="0.0816%" height="15" fill="rgb(232,93,24)" fg:x="45" fg:w="1"/><text x="3.9205%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6705%" y="373" width="0.0816%" height="15" fill="rgb(245,30,21)" fg:x="45" fg:w="1"/><text x="3.9205%" y="383.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="3.7520%" y="533" width="0.0816%" height="15" fill="rgb(242,148,29)" fg:x="46" fg:w="1"/><text x="4.0020%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.7520%" y="517" width="0.0816%" height="15" fill="rgb(244,153,54)" fg:x="46" fg:w="1"/><text x="4.0020%" y="527.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.7520%" y="501" width="0.0816%" height="15" fill="rgb(252,87,22)" fg:x="46" fg:w="1"/><text x="4.0020%" y="511.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="3.7520%" y="485" width="0.0816%" height="15" fill="rgb(210,51,29)" fg:x="46" fg:w="1"/><text x="4.0020%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7520%" y="469" width="0.0816%" height="15" fill="rgb(242,136,47)" fg:x="46" fg:w="1"/><text x="4.0020%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7520%" y="453" width="0.0816%" height="15" fill="rgb(238,68,4)" fg:x="46" fg:w="1"/><text x="4.0020%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.7520%" y="437" width="0.0816%" height="15" fill="rgb(242,161,30)" fg:x="46" fg:w="1"/><text x="4.0020%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.7520%" y="421" width="0.0816%" height="15" fill="rgb(218,58,44)" fg:x="46" fg:w="1"/><text x="4.0020%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.7520%" y="405" width="0.0816%" height="15" fill="rgb(252,125,32)" fg:x="46" fg:w="1"/><text x="4.0020%" y="415.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.8336%" y="533" width="0.0816%" height="15" fill="rgb(219,178,0)" fg:x="47" fg:w="1"/><text x="4.0836%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.8336%" y="517" width="0.0816%" height="15" fill="rgb(213,152,7)" fg:x="47" fg:w="1"/><text x="4.0836%" y="527.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.8336%" y="501" width="0.0816%" height="15" fill="rgb(249,109,34)" fg:x="47" fg:w="1"/><text x="4.0836%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8336%" y="485" width="0.0816%" height="15" fill="rgb(232,96,21)" fg:x="47" fg:w="1"/><text x="4.0836%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8336%" y="469" width="0.0816%" height="15" fill="rgb(228,27,39)" fg:x="47" fg:w="1"/><text x="4.0836%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8336%" y="453" width="0.0816%" height="15" fill="rgb(211,182,52)" fg:x="47" fg:w="1"/><text x="4.0836%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.8336%" y="437" width="0.0816%" height="15" fill="rgb(234,178,38)" fg:x="47" fg:w="1"/><text x="4.0836%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.8336%" y="421" width="0.0816%" height="15" fill="rgb(221,111,3)" fg:x="47" fg:w="1"/><text x="4.0836%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.8336%" y="405" width="0.0816%" height="15" fill="rgb(228,175,21)" fg:x="47" fg:w="1"/><text x="4.0836%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.8336%" y="389" width="0.0816%" height="15" fill="rgb(228,174,43)" fg:x="47" fg:w="1"/><text x="4.0836%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.8336%" y="373" width="0.0816%" height="15" fill="rgb(211,191,0)" fg:x="47" fg:w="1"/><text x="4.0836%" y="383.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.9152%" y="533" width="0.0816%" height="15" fill="rgb(253,117,3)" fg:x="48" fg:w="1"/><text x="4.1652%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="3.9152%" y="517" width="0.0816%" height="15" fill="rgb(241,127,19)" fg:x="48" fg:w="1"/><text x="4.1652%" y="527.50"></text></g><g><title>kernel::model::Props::set_property (1 samples, 0.08%)</title><rect x="3.9152%" y="501" width="0.0816%" height="15" fill="rgb(218,103,12)" fg:x="48" fg:w="1"/><text x="4.1652%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9152%" y="485" width="0.0816%" height="15" fill="rgb(236,214,43)" fg:x="48" fg:w="1"/><text x="4.1652%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9152%" y="469" width="0.0816%" height="15" fill="rgb(244,144,19)" fg:x="48" fg:w="1"/><text x="4.1652%" y="479.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9967%" y="469" width="0.0816%" height="15" fill="rgb(246,188,10)" fg:x="49" fg:w="1"/><text x="4.2467%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9967%" y="453" width="0.0816%" height="15" fill="rgb(212,193,33)" fg:x="49" fg:w="1"/><text x="4.2467%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9967%" y="437" width="0.0816%" height="15" fill="rgb(241,51,29)" fg:x="49" fg:w="1"/><text x="4.2467%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.9967%" y="421" width="0.0816%" height="15" fill="rgb(211,58,19)" fg:x="49" fg:w="1"/><text x="4.2467%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.9967%" y="405" width="0.0816%" height="15" fill="rgb(229,111,26)" fg:x="49" fg:w="1"/><text x="4.2467%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.9967%" y="389" width="0.0816%" height="15" fill="rgb(213,115,40)" fg:x="49" fg:w="1"/><text x="4.2467%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.9967%" y="373" width="0.0816%" height="15" fill="rgb(209,56,44)" fg:x="49" fg:w="1"/><text x="4.2467%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.9967%" y="357" width="0.0816%" height="15" fill="rgb(230,108,32)" fg:x="49" fg:w="1"/><text x="4.2467%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.9967%" y="341" width="0.0816%" height="15" fill="rgb(216,165,31)" fg:x="49" fg:w="1"/><text x="4.2467%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.9967%" y="325" width="0.0816%" height="15" fill="rgb(218,122,21)" fg:x="49" fg:w="1"/><text x="4.2467%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.9967%" y="309" width="0.0816%" height="15" fill="rgb(223,224,47)" fg:x="49" fg:w="1"/><text x="4.2467%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.9967%" y="293" width="0.0816%" height="15" fill="rgb(238,102,44)" fg:x="49" fg:w="1"/><text x="4.2467%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9967%" y="277" width="0.0816%" height="15" fill="rgb(236,46,40)" fg:x="49" fg:w="1"/><text x="4.2467%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.0783%" y="453" width="0.0816%" height="15" fill="rgb(247,202,50)" fg:x="50" fg:w="1"/><text x="4.3283%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="4.0783%" y="437" width="0.0816%" height="15" fill="rgb(209,99,20)" fg:x="50" fg:w="1"/><text x="4.3283%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0783%" y="421" width="0.0816%" height="15" fill="rgb(252,27,34)" fg:x="50" fg:w="1"/><text x="4.3283%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.0783%" y="405" width="0.0816%" height="15" fill="rgb(215,206,23)" fg:x="50" fg:w="1"/><text x="4.3283%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.0783%" y="389" width="0.0816%" height="15" fill="rgb(212,135,36)" fg:x="50" fg:w="1"/><text x="4.3283%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.0783%" y="373" width="0.0816%" height="15" fill="rgb(240,189,1)" fg:x="50" fg:w="1"/><text x="4.3283%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.0783%" y="357" width="0.0816%" height="15" fill="rgb(242,56,20)" fg:x="50" fg:w="1"/><text x="4.3283%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.0783%" y="341" width="0.0816%" height="15" fill="rgb(247,132,33)" fg:x="50" fg:w="1"/><text x="4.3283%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.0783%" y="325" width="0.0816%" height="15" fill="rgb(208,149,11)" fg:x="50" fg:w="1"/><text x="4.3283%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.0783%" y="309" width="0.0816%" height="15" fill="rgb(211,33,11)" fg:x="50" fg:w="1"/><text x="4.3283%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.0783%" y="293" width="0.0816%" height="15" fill="rgb(221,29,38)" fg:x="50" fg:w="1"/><text x="4.3283%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.0783%" y="277" width="0.0816%" height="15" fill="rgb(206,182,49)" fg:x="50" fg:w="1"/><text x="4.3283%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.0783%" y="261" width="0.0816%" height="15" fill="rgb(216,140,1)" fg:x="50" fg:w="1"/><text x="4.3283%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0783%" y="245" width="0.0816%" height="15" fill="rgb(232,57,40)" fg:x="50" fg:w="1"/><text x="4.3283%" y="255.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="3.9967%" y="517" width="0.2447%" height="15" fill="rgb(224,186,18)" fg:x="49" fg:w="3"/><text x="4.2467%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="3.9967%" y="501" width="0.2447%" height="15" fill="rgb(215,121,11)" fg:x="49" fg:w="3"/><text x="4.2467%" y="511.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="3.9967%" y="485" width="0.2447%" height="15" fill="rgb(245,147,10)" fg:x="49" fg:w="3"/><text x="4.2467%" y="495.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="4.0783%" y="469" width="0.1631%" height="15" fill="rgb(238,153,13)" fg:x="50" fg:w="2"/><text x="4.3283%" y="479.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="4.1599%" y="453" width="0.0816%" height="15" fill="rgb(233,108,0)" fg:x="51" fg:w="1"/><text x="4.4099%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.3230%" y="485" width="0.0816%" height="15" fill="rgb(212,157,17)" fg:x="53" fg:w="1"/><text x="4.5730%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.3230%" y="469" width="0.0816%" height="15" fill="rgb(225,213,38)" fg:x="53" fg:w="1"/><text x="4.5730%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="4.3230%" y="453" width="0.0816%" height="15" fill="rgb(248,16,11)" fg:x="53" fg:w="1"/><text x="4.5730%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.3230%" y="437" width="0.0816%" height="15" fill="rgb(241,33,4)" fg:x="53" fg:w="1"/><text x="4.5730%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3230%" y="421" width="0.0816%" height="15" fill="rgb(222,26,43)" fg:x="53" fg:w="1"/><text x="4.5730%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4046%" y="405" width="0.0816%" height="15" fill="rgb(243,29,36)" fg:x="54" fg:w="1"/><text x="4.6546%" y="415.50"></text></g><g><title>engine::identifiers::model::set_gid (2 samples, 0.16%)</title><rect x="4.4046%" y="485" width="0.1631%" height="15" fill="rgb(241,9,27)" fg:x="54" fg:w="2"/><text x="4.6546%" y="495.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="4.4046%" y="469" width="0.1631%" height="15" fill="rgb(205,117,26)" fg:x="54" fg:w="2"/><text x="4.6546%" y="479.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="4.4046%" y="453" width="0.1631%" height="15" fill="rgb(209,80,39)" fg:x="54" fg:w="2"/><text x="4.6546%" y="463.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (2 samples, 0.16%)</title><rect x="4.4046%" y="437" width="0.1631%" height="15" fill="rgb(239,155,6)" fg:x="54" fg:w="2"/><text x="4.6546%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="4.4046%" y="421" width="0.1631%" height="15" fill="rgb(212,104,12)" fg:x="54" fg:w="2"/><text x="4.6546%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4861%" y="405" width="0.0816%" height="15" fill="rgb(234,204,3)" fg:x="55" fg:w="1"/><text x="4.7361%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5677%" y="421" width="0.0816%" height="15" fill="rgb(251,218,7)" fg:x="56" fg:w="1"/><text x="4.8177%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5677%" y="405" width="0.0816%" height="15" fill="rgb(221,81,32)" fg:x="56" fg:w="1"/><text x="4.8177%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5677%" y="389" width="0.0816%" height="15" fill="rgb(214,152,26)" fg:x="56" fg:w="1"/><text x="4.8177%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5677%" y="373" width="0.0816%" height="15" fill="rgb(223,22,3)" fg:x="56" fg:w="1"/><text x="4.8177%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="4.5677%" y="437" width="0.1631%" height="15" fill="rgb(207,174,7)" fg:x="56" fg:w="2"/><text x="4.8177%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6493%" y="421" width="0.0816%" height="15" fill="rgb(224,19,52)" fg:x="57" fg:w="1"/><text x="4.8993%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6493%" y="405" width="0.0816%" height="15" fill="rgb(228,24,14)" fg:x="57" fg:w="1"/><text x="4.8993%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6493%" y="389" width="0.0816%" height="15" fill="rgb(230,153,43)" fg:x="57" fg:w="1"/><text x="4.8993%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.7308%" y="421" width="0.0816%" height="15" fill="rgb(231,106,12)" fg:x="58" fg:w="1"/><text x="4.9808%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.8124%" y="421" width="0.1631%" height="15" fill="rgb(215,92,2)" fg:x="59" fg:w="2"/><text x="5.0624%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.8124%" y="405" width="0.1631%" height="15" fill="rgb(249,143,25)" fg:x="59" fg:w="2"/><text x="5.0624%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.8124%" y="389" width="0.1631%" height="15" fill="rgb(252,7,35)" fg:x="59" fg:w="2"/><text x="5.0624%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8940%" y="373" width="0.0816%" height="15" fill="rgb(216,69,40)" fg:x="60" fg:w="1"/><text x="5.1440%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9755%" y="421" width="0.0816%" height="15" fill="rgb(240,36,33)" fg:x="61" fg:w="1"/><text x="5.2255%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.9755%" y="405" width="0.0816%" height="15" fill="rgb(231,128,14)" fg:x="61" fg:w="1"/><text x="5.2255%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9755%" y="389" width="0.0816%" height="15" fill="rgb(245,143,14)" fg:x="61" fg:w="1"/><text x="5.2255%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9755%" y="373" width="0.0816%" height="15" fill="rgb(222,130,28)" fg:x="61" fg:w="1"/><text x="5.2255%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9755%" y="357" width="0.0816%" height="15" fill="rgb(212,10,48)" fg:x="61" fg:w="1"/><text x="5.2255%" y="367.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9755%" y="341" width="0.0816%" height="15" fill="rgb(254,118,45)" fg:x="61" fg:w="1"/><text x="5.2255%" y="351.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="4.5677%" y="453" width="0.6525%" height="15" fill="rgb(228,6,45)" fg:x="56" fg:w="8"/><text x="4.8177%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="4.7308%" y="437" width="0.4894%" height="15" fill="rgb(241,18,35)" fg:x="58" fg:w="6"/><text x="4.9808%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.0571%" y="421" width="0.1631%" height="15" fill="rgb(227,214,53)" fg:x="62" fg:w="2"/><text x="5.3071%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.0571%" y="405" width="0.1631%" height="15" fill="rgb(224,107,51)" fg:x="62" fg:w="2"/><text x="5.3071%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.0571%" y="389" width="0.1631%" height="15" fill="rgb(248,60,28)" fg:x="62" fg:w="2"/><text x="5.3071%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="5.0571%" y="373" width="0.1631%" height="15" fill="rgb(249,101,23)" fg:x="62" fg:w="2"/><text x="5.3071%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="5.0571%" y="357" width="0.1631%" height="15" fill="rgb(228,51,19)" fg:x="62" fg:w="2"/><text x="5.3071%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.1387%" y="341" width="0.0816%" height="15" fill="rgb(213,20,6)" fg:x="63" fg:w="1"/><text x="5.3887%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2202%" y="421" width="0.0816%" height="15" fill="rgb(212,124,10)" fg:x="64" fg:w="1"/><text x="5.4702%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.2202%" y="453" width="0.1631%" height="15" fill="rgb(248,3,40)" fg:x="64" fg:w="2"/><text x="5.4702%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="5.2202%" y="437" width="0.1631%" height="15" fill="rgb(223,178,23)" fg:x="64" fg:w="2"/><text x="5.4702%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3018%" y="421" width="0.0816%" height="15" fill="rgb(240,132,45)" fg:x="65" fg:w="1"/><text x="5.5518%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.3018%" y="405" width="0.0816%" height="15" fill="rgb(245,164,36)" fg:x="65" fg:w="1"/><text x="5.5518%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3834%" y="405" width="0.0816%" height="15" fill="rgb(231,188,53)" fg:x="66" fg:w="1"/><text x="5.6334%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4649%" y="405" width="0.0816%" height="15" fill="rgb(237,198,39)" fg:x="67" fg:w="1"/><text x="5.7149%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4649%" y="389" width="0.0816%" height="15" fill="rgb(223,120,35)" fg:x="67" fg:w="1"/><text x="5.7149%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5465%" y="405" width="0.0816%" height="15" fill="rgb(253,107,49)" fg:x="68" fg:w="1"/><text x="5.7965%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5465%" y="389" width="0.0816%" height="15" fill="rgb(216,44,31)" fg:x="68" fg:w="1"/><text x="5.7965%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.5465%" y="373" width="0.0816%" height="15" fill="rgb(253,87,21)" fg:x="68" fg:w="1"/><text x="5.7965%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.6281%" y="357" width="0.1631%" height="15" fill="rgb(226,18,2)" fg:x="69" fg:w="2"/><text x="5.8781%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.7912%" y="341" width="0.0816%" height="15" fill="rgb(216,8,46)" fg:x="71" fg:w="1"/><text x="6.0412%" y="351.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="5.7912%" y="325" width="0.0816%" height="15" fill="rgb(226,140,39)" fg:x="71" fg:w="1"/><text x="6.0412%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.33%)</title><rect x="5.6281%" y="405" width="0.3263%" height="15" fill="rgb(221,194,54)" fg:x="69" fg:w="4"/><text x="5.8781%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="5.6281%" y="389" width="0.3263%" height="15" fill="rgb(213,92,11)" fg:x="69" fg:w="4"/><text x="5.8781%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="5.6281%" y="373" width="0.3263%" height="15" fill="rgb(229,162,46)" fg:x="69" fg:w="4"/><text x="5.8781%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7912%" y="357" width="0.1631%" height="15" fill="rgb(214,111,36)" fg:x="71" fg:w="2"/><text x="6.0412%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.8728%" y="341" width="0.0816%" height="15" fill="rgb(207,6,21)" fg:x="72" fg:w="1"/><text x="6.1228%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8728%" y="325" width="0.0816%" height="15" fill="rgb(213,127,38)" fg:x="72" fg:w="1"/><text x="6.1228%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8728%" y="309" width="0.0816%" height="15" fill="rgb(238,118,32)" fg:x="72" fg:w="1"/><text x="6.1228%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8728%" y="293" width="0.0816%" height="15" fill="rgb(240,139,39)" fg:x="72" fg:w="1"/><text x="6.1228%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9543%" y="405" width="0.0816%" height="15" fill="rgb(235,10,37)" fg:x="73" fg:w="1"/><text x="6.2043%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.9543%" y="389" width="0.0816%" height="15" fill="rgb(249,171,38)" fg:x="73" fg:w="1"/><text x="6.2043%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9543%" y="373" width="0.0816%" height="15" fill="rgb(242,144,32)" fg:x="73" fg:w="1"/><text x="6.2043%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.0359%" y="373" width="0.0816%" height="15" fill="rgb(217,117,21)" fg:x="74" fg:w="1"/><text x="6.2859%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0359%" y="357" width="0.0816%" height="15" fill="rgb(249,87,1)" fg:x="74" fg:w="1"/><text x="6.2859%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0359%" y="341" width="0.0816%" height="15" fill="rgb(248,196,48)" fg:x="74" fg:w="1"/><text x="6.2859%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0359%" y="325" width="0.0816%" height="15" fill="rgb(251,206,33)" fg:x="74" fg:w="1"/><text x="6.2859%" y="335.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.96%)</title><rect x="4.2414%" y="517" width="1.9576%" height="15" fill="rgb(232,141,28)" fg:x="52" fg:w="24"/><text x="4.4914%" y="527.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (24 samples, 1.96%)</title><rect x="4.2414%" y="501" width="1.9576%" height="15" fill="rgb(209,167,14)" fg:x="52" fg:w="24"/><text x="4.4914%" y="511.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (20 samples, 1.63%)</title><rect x="4.5677%" y="485" width="1.6313%" height="15" fill="rgb(225,11,50)" fg:x="56" fg:w="20"/><text x="4.8177%" y="495.50"></text></g><g><title>engine::session::Session::check_for_changes (20 samples, 1.63%)</title><rect x="4.5677%" y="469" width="1.6313%" height="15" fill="rgb(209,50,20)" fg:x="56" fg:w="20"/><text x="4.8177%" y="479.50"></text></g><g><title>kernel::compare::any_entity_changes (10 samples, 0.82%)</title><rect x="5.3834%" y="453" width="0.8157%" height="15" fill="rgb(212,17,46)" fg:x="66" fg:w="10"/><text x="5.6334%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (10 samples, 0.82%)</title><rect x="5.3834%" y="437" width="0.8157%" height="15" fill="rgb(216,101,39)" fg:x="66" fg:w="10"/><text x="5.6334%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.82%)</title><rect x="5.3834%" y="421" width="0.8157%" height="15" fill="rgb(212,228,48)" fg:x="66" fg:w="10"/><text x="5.6334%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="6.0359%" y="405" width="0.1631%" height="15" fill="rgb(250,6,50)" fg:x="74" fg:w="2"/><text x="6.2859%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0359%" y="389" width="0.1631%" height="15" fill="rgb(250,160,48)" fg:x="74" fg:w="2"/><text x="6.2859%" y="399.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.1175%" y="373" width="0.0816%" height="15" fill="rgb(244,216,33)" fg:x="75" fg:w="1"/><text x="6.3675%" y="383.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (28 samples, 2.28%)</title><rect x="3.9967%" y="533" width="2.2838%" height="15" fill="rgb(207,157,5)" fg:x="49" fg:w="28"/><text x="4.2467%" y="543.50">p..</text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="6.1990%" y="517" width="0.0816%" height="15" fill="rgb(228,199,8)" fg:x="76" fg:w="1"/><text x="6.4490%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.1990%" y="501" width="0.0816%" height="15" fill="rgb(227,80,20)" fg:x="76" fg:w="1"/><text x="6.4490%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="6.1990%" y="485" width="0.0816%" height="15" fill="rgb(222,9,33)" fg:x="76" fg:w="1"/><text x="6.4490%" y="495.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (52 samples, 4.24%)</title><rect x="2.1207%" y="549" width="4.2414%" height="15" fill="rgb(239,44,28)" fg:x="26" fg:w="52"/><text x="2.3707%" y="559.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="6.2806%" y="533" width="0.0816%" height="15" fill="rgb(249,187,43)" fg:x="77" fg:w="1"/><text x="6.5306%" y="543.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="6.2806%" y="517" width="0.0816%" height="15" fill="rgb(216,141,28)" fg:x="77" fg:w="1"/><text x="6.5306%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="6.2806%" y="501" width="0.0816%" height="15" fill="rgb(230,154,53)" fg:x="77" fg:w="1"/><text x="6.5306%" y="511.50"></text></g><g><title>kernel::model::Props::set_property (1 samples, 0.08%)</title><rect x="6.2806%" y="485" width="0.0816%" height="15" fill="rgb(227,82,4)" fg:x="77" fg:w="1"/><text x="6.5306%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2806%" y="469" width="0.0816%" height="15" fill="rgb(220,107,16)" fg:x="77" fg:w="1"/><text x="6.5306%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.2806%" y="453" width="0.0816%" height="15" fill="rgb(207,187,2)" fg:x="77" fg:w="1"/><text x="6.5306%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.3622%" y="517" width="0.1631%" height="15" fill="rgb(210,162,52)" fg:x="78" fg:w="2"/><text x="6.6122%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.3622%" y="501" width="0.1631%" height="15" fill="rgb(217,216,49)" fg:x="78" fg:w="2"/><text x="6.6122%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.3622%" y="485" width="0.1631%" height="15" fill="rgb(218,146,49)" fg:x="78" fg:w="2"/><text x="6.6122%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.3622%" y="469" width="0.1631%" height="15" fill="rgb(216,55,40)" fg:x="78" fg:w="2"/><text x="6.6122%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="6.5253%" y="485" width="0.0816%" height="15" fill="rgb(208,196,21)" fg:x="80" fg:w="1"/><text x="6.7753%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.5253%" y="517" width="0.1631%" height="15" fill="rgb(242,117,42)" fg:x="80" fg:w="2"/><text x="6.7753%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="6.5253%" y="501" width="0.1631%" height="15" fill="rgb(210,11,23)" fg:x="80" fg:w="2"/><text x="6.7753%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6069%" y="485" width="0.0816%" height="15" fill="rgb(217,110,2)" fg:x="81" fg:w="1"/><text x="6.8569%" y="495.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="6.6884%" y="517" width="0.0816%" height="15" fill="rgb(229,77,54)" fg:x="82" fg:w="1"/><text x="6.9384%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="6.6884%" y="501" width="0.0816%" height="15" fill="rgb(218,53,16)" fg:x="82" fg:w="1"/><text x="6.9384%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.6884%" y="485" width="0.0816%" height="15" fill="rgb(215,38,13)" fg:x="82" fg:w="1"/><text x="6.9384%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6884%" y="469" width="0.0816%" height="15" fill="rgb(235,42,18)" fg:x="82" fg:w="1"/><text x="6.9384%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6884%" y="453" width="0.0816%" height="15" fill="rgb(219,66,54)" fg:x="82" fg:w="1"/><text x="6.9384%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.8515%" y="437" width="0.1631%" height="15" fill="rgb(222,205,4)" fg:x="84" fg:w="2"/><text x="7.1015%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.9331%" y="421" width="0.0816%" height="15" fill="rgb(227,213,46)" fg:x="85" fg:w="1"/><text x="7.1831%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.9331%" y="405" width="0.0816%" height="15" fill="rgb(250,145,42)" fg:x="85" fg:w="1"/><text x="7.1831%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.0147%" y="421" width="0.0816%" height="15" fill="rgb(219,15,2)" fg:x="86" fg:w="1"/><text x="7.2647%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.0147%" y="405" width="0.0816%" height="15" fill="rgb(231,181,52)" fg:x="86" fg:w="1"/><text x="7.2647%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.0147%" y="389" width="0.0816%" height="15" fill="rgb(235,1,42)" fg:x="86" fg:w="1"/><text x="7.2647%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.0147%" y="373" width="0.0816%" height="15" fill="rgb(249,88,27)" fg:x="86" fg:w="1"/><text x="7.2647%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0962%" y="421" width="0.0816%" height="15" fill="rgb(235,145,16)" fg:x="87" fg:w="1"/><text x="7.3462%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.0962%" y="405" width="0.0816%" height="15" fill="rgb(237,114,19)" fg:x="87" fg:w="1"/><text x="7.3462%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.0962%" y="389" width="0.0816%" height="15" fill="rgb(238,51,50)" fg:x="87" fg:w="1"/><text x="7.3462%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.0147%" y="437" width="0.2447%" height="15" fill="rgb(205,194,25)" fg:x="86" fg:w="3"/><text x="7.2647%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1778%" y="421" width="0.0816%" height="15" fill="rgb(215,203,17)" fg:x="88" fg:w="1"/><text x="7.4278%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.1778%" y="405" width="0.0816%" height="15" fill="rgb(233,112,49)" fg:x="88" fg:w="1"/><text x="7.4278%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.1778%" y="389" width="0.0816%" height="15" fill="rgb(241,130,26)" fg:x="88" fg:w="1"/><text x="7.4278%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="6.7700%" y="485" width="0.5710%" height="15" fill="rgb(252,223,19)" fg:x="83" fg:w="7"/><text x="7.0200%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="6.8515%" y="469" width="0.4894%" height="15" fill="rgb(211,95,25)" fg:x="84" fg:w="6"/><text x="7.1015%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="6.8515%" y="453" width="0.4894%" height="15" fill="rgb(251,182,27)" fg:x="84" fg:w="6"/><text x="7.1015%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2594%" y="437" width="0.0816%" height="15" fill="rgb(238,24,4)" fg:x="89" fg:w="1"/><text x="7.5094%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.2594%" y="421" width="0.0816%" height="15" fill="rgb(224,220,25)" fg:x="89" fg:w="1"/><text x="7.5094%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2594%" y="405" width="0.0816%" height="15" fill="rgb(239,133,26)" fg:x="89" fg:w="1"/><text x="7.5094%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3409%" y="453" width="0.0816%" height="15" fill="rgb(211,94,48)" fg:x="90" fg:w="1"/><text x="7.5909%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.5041%" y="437" width="0.0816%" height="15" fill="rgb(239,87,6)" fg:x="92" fg:w="1"/><text x="7.7541%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6672%" y="405" width="0.0816%" height="15" fill="rgb(227,62,0)" fg:x="94" fg:w="1"/><text x="7.9172%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6672%" y="389" width="0.0816%" height="15" fill="rgb(211,226,4)" fg:x="94" fg:w="1"/><text x="7.9172%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="7.3409%" y="485" width="0.4894%" height="15" fill="rgb(253,38,52)" fg:x="90" fg:w="6"/><text x="7.5909%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="7.3409%" y="469" width="0.4894%" height="15" fill="rgb(229,126,40)" fg:x="90" fg:w="6"/><text x="7.5909%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="7.4225%" y="453" width="0.4078%" height="15" fill="rgb(229,165,44)" fg:x="91" fg:w="5"/><text x="7.6725%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.5856%" y="437" width="0.2447%" height="15" fill="rgb(247,95,47)" fg:x="93" fg:w="3"/><text x="7.8356%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.6672%" y="421" width="0.1631%" height="15" fill="rgb(216,140,30)" fg:x="94" fg:w="2"/><text x="7.9172%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.7488%" y="405" width="0.0816%" height="15" fill="rgb(246,214,8)" fg:x="95" fg:w="1"/><text x="7.9988%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.7488%" y="389" width="0.0816%" height="15" fill="rgb(227,224,15)" fg:x="95" fg:w="1"/><text x="7.9988%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8303%" y="469" width="0.0816%" height="15" fill="rgb(233,175,4)" fg:x="96" fg:w="1"/><text x="8.0803%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.9119%" y="437" width="0.0816%" height="15" fill="rgb(221,66,45)" fg:x="97" fg:w="1"/><text x="8.1619%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.9935%" y="421" width="0.0816%" height="15" fill="rgb(221,178,18)" fg:x="98" fg:w="1"/><text x="8.2435%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.9935%" y="405" width="0.0816%" height="15" fill="rgb(213,81,29)" fg:x="98" fg:w="1"/><text x="8.2435%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.1566%" y="373" width="0.0816%" height="15" fill="rgb(220,89,49)" fg:x="100" fg:w="1"/><text x="8.4066%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="7.9119%" y="469" width="0.4894%" height="15" fill="rgb(227,60,33)" fg:x="97" fg:w="6"/><text x="8.1619%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="7.9119%" y="453" width="0.4894%" height="15" fill="rgb(205,113,12)" fg:x="97" fg:w="6"/><text x="8.1619%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="7.9935%" y="437" width="0.4078%" height="15" fill="rgb(211,32,1)" fg:x="98" fg:w="5"/><text x="8.2435%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="8.0750%" y="421" width="0.3263%" height="15" fill="rgb(246,2,12)" fg:x="99" fg:w="4"/><text x="8.3250%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="8.0750%" y="405" width="0.3263%" height="15" fill="rgb(243,37,27)" fg:x="99" fg:w="4"/><text x="8.3250%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.1566%" y="389" width="0.2447%" height="15" fill="rgb(248,211,31)" fg:x="100" fg:w="3"/><text x="8.4066%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.2382%" y="373" width="0.1631%" height="15" fill="rgb(242,146,47)" fg:x="101" fg:w="2"/><text x="8.4882%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.2382%" y="357" width="0.1631%" height="15" fill="rgb(206,70,20)" fg:x="101" fg:w="2"/><text x="8.4882%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5644%" y="437" width="0.0816%" height="15" fill="rgb(215,10,51)" fg:x="105" fg:w="1"/><text x="8.8144%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6460%" y="437" width="0.0816%" height="15" fill="rgb(243,178,53)" fg:x="106" fg:w="1"/><text x="8.8960%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.6460%" y="421" width="0.0816%" height="15" fill="rgb(233,221,20)" fg:x="106" fg:w="1"/><text x="8.8960%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7276%" y="437" width="0.0816%" height="15" fill="rgb(218,95,35)" fg:x="107" fg:w="1"/><text x="8.9776%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7276%" y="421" width="0.0816%" height="15" fill="rgb(229,13,5)" fg:x="107" fg:w="1"/><text x="8.9776%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7276%" y="405" width="0.0816%" height="15" fill="rgb(252,164,30)" fg:x="107" fg:w="1"/><text x="8.9776%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7276%" y="389" width="0.0816%" height="15" fill="rgb(232,68,36)" fg:x="107" fg:w="1"/><text x="8.9776%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7276%" y="373" width="0.0816%" height="15" fill="rgb(219,59,54)" fg:x="107" fg:w="1"/><text x="8.9776%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8091%" y="405" width="0.0816%" height="15" fill="rgb(250,92,33)" fg:x="108" fg:w="1"/><text x="9.0591%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="9.0538%" y="389" width="0.4078%" height="15" fill="rgb(229,162,54)" fg:x="111" fg:w="5"/><text x="9.3038%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.33%)</title><rect x="9.1354%" y="373" width="0.3263%" height="15" fill="rgb(244,114,52)" fg:x="112" fg:w="4"/><text x="9.3854%" y="383.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="9.1354%" y="357" width="0.3263%" height="15" fill="rgb(212,211,43)" fg:x="112" fg:w="4"/><text x="9.3854%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (11 samples, 0.90%)</title><rect x="8.8091%" y="437" width="0.8972%" height="15" fill="rgb(226,147,8)" fg:x="108" fg:w="11"/><text x="9.0591%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.90%)</title><rect x="8.8091%" y="421" width="0.8972%" height="15" fill="rgb(226,23,13)" fg:x="108" fg:w="11"/><text x="9.0591%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.82%)</title><rect x="8.8907%" y="405" width="0.8157%" height="15" fill="rgb(240,63,4)" fg:x="109" fg:w="10"/><text x="9.1407%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.24%)</title><rect x="9.4617%" y="389" width="0.2447%" height="15" fill="rgb(221,1,32)" fg:x="116" fg:w="3"/><text x="9.7117%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.5432%" y="373" width="0.1631%" height="15" fill="rgb(242,117,10)" fg:x="117" fg:w="2"/><text x="9.7932%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.6248%" y="357" width="0.0816%" height="15" fill="rgb(249,172,44)" fg:x="118" fg:w="1"/><text x="9.8748%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.6248%" y="341" width="0.0816%" height="15" fill="rgb(244,46,45)" fg:x="118" fg:w="1"/><text x="9.8748%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.6248%" y="325" width="0.0816%" height="15" fill="rgb(206,43,17)" fg:x="118" fg:w="1"/><text x="9.8748%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="9.7879%" y="405" width="0.0816%" height="15" fill="rgb(239,218,39)" fg:x="120" fg:w="1"/><text x="10.0379%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8695%" y="389" width="0.0816%" height="15" fill="rgb(208,169,54)" fg:x="121" fg:w="1"/><text x="10.1195%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8695%" y="373" width="0.0816%" height="15" fill="rgb(247,25,42)" fg:x="121" fg:w="1"/><text x="10.1195%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8695%" y="357" width="0.0816%" height="15" fill="rgb(226,23,31)" fg:x="121" fg:w="1"/><text x="10.1195%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.9511%" y="389" width="0.1631%" height="15" fill="rgb(247,16,28)" fg:x="122" fg:w="2"/><text x="10.2011%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.9511%" y="373" width="0.1631%" height="15" fill="rgb(231,147,38)" fg:x="122" fg:w="2"/><text x="10.2011%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.0326%" y="357" width="0.0816%" height="15" fill="rgb(253,81,48)" fg:x="123" fg:w="1"/><text x="10.2826%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0326%" y="341" width="0.0816%" height="15" fill="rgb(249,222,43)" fg:x="123" fg:w="1"/><text x="10.2826%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0326%" y="325" width="0.0816%" height="15" fill="rgb(221,3,27)" fg:x="123" fg:w="1"/><text x="10.2826%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.0326%" y="309" width="0.0816%" height="15" fill="rgb(228,180,5)" fg:x="123" fg:w="1"/><text x="10.2826%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="9.8695%" y="405" width="0.3263%" height="15" fill="rgb(227,131,42)" fg:x="121" fg:w="4"/><text x="10.1195%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1142%" y="389" width="0.0816%" height="15" fill="rgb(212,3,39)" fg:x="124" fg:w="1"/><text x="10.3642%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.1142%" y="373" width="0.0816%" height="15" fill="rgb(226,45,5)" fg:x="124" fg:w="1"/><text x="10.3642%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1142%" y="357" width="0.0816%" height="15" fill="rgb(215,167,45)" fg:x="124" fg:w="1"/><text x="10.3642%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1142%" y="341" width="0.0816%" height="15" fill="rgb(250,218,53)" fg:x="124" fg:w="1"/><text x="10.3642%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (23 samples, 1.88%)</title><rect x="8.4013%" y="469" width="1.8760%" height="15" fill="rgb(207,140,0)" fg:x="103" fg:w="23"/><text x="8.6513%" y="479.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (23 samples, 1.88%)</title><rect x="8.4013%" y="453" width="1.8760%" height="15" fill="rgb(238,133,51)" fg:x="103" fg:w="23"/><text x="8.6513%" y="463.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.57%)</title><rect x="9.7064%" y="437" width="0.5710%" height="15" fill="rgb(218,203,53)" fg:x="119" fg:w="7"/><text x="9.9564%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (6 samples, 0.49%)</title><rect x="9.7879%" y="421" width="0.4894%" height="15" fill="rgb(226,184,25)" fg:x="120" fg:w="6"/><text x="10.0379%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.1958%" y="405" width="0.0816%" height="15" fill="rgb(231,121,21)" fg:x="125" fg:w="1"/><text x="10.4458%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1958%" y="389" width="0.0816%" height="15" fill="rgb(251,14,34)" fg:x="125" fg:w="1"/><text x="10.4458%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.3589%" y="389" width="0.0816%" height="15" fill="rgb(249,193,11)" fg:x="127" fg:w="1"/><text x="10.6089%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.5220%" y="325" width="0.0816%" height="15" fill="rgb(220,172,37)" fg:x="129" fg:w="1"/><text x="10.7720%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.5220%" y="309" width="0.0816%" height="15" fill="rgb(231,229,43)" fg:x="129" fg:w="1"/><text x="10.7720%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.5220%" y="293" width="0.0816%" height="15" fill="rgb(250,161,5)" fg:x="129" fg:w="1"/><text x="10.7720%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.6036%" y="309" width="0.0816%" height="15" fill="rgb(218,225,18)" fg:x="130" fg:w="1"/><text x="10.8536%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6036%" y="293" width="0.0816%" height="15" fill="rgb(245,45,42)" fg:x="130" fg:w="1"/><text x="10.8536%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="10.4405%" y="373" width="0.4078%" height="15" fill="rgb(211,115,1)" fg:x="128" fg:w="5"/><text x="10.6905%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="10.4405%" y="357" width="0.4078%" height="15" fill="rgb(248,133,52)" fg:x="128" fg:w="5"/><text x="10.6905%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="10.4405%" y="341" width="0.4078%" height="15" fill="rgb(238,100,21)" fg:x="128" fg:w="5"/><text x="10.6905%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.6036%" y="325" width="0.2447%" height="15" fill="rgb(247,144,11)" fg:x="130" fg:w="3"/><text x="10.8536%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.6852%" y="309" width="0.1631%" height="15" fill="rgb(206,164,16)" fg:x="131" fg:w="2"/><text x="10.9352%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.8483%" y="373" width="0.0816%" height="15" fill="rgb(222,34,3)" fg:x="133" fg:w="1"/><text x="11.0983%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8483%" y="357" width="0.0816%" height="15" fill="rgb(248,82,4)" fg:x="133" fg:w="1"/><text x="11.0983%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.73%)</title><rect x="10.2773%" y="405" width="0.7341%" height="15" fill="rgb(228,81,46)" fg:x="126" fg:w="9"/><text x="10.5273%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="10.4405%" y="389" width="0.5710%" height="15" fill="rgb(227,67,47)" fg:x="128" fg:w="7"/><text x="10.6905%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9299%" y="373" width="0.0816%" height="15" fill="rgb(215,93,53)" fg:x="134" fg:w="1"/><text x="11.1799%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9299%" y="357" width="0.0816%" height="15" fill="rgb(248,194,39)" fg:x="134" fg:w="1"/><text x="11.1799%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9299%" y="341" width="0.0816%" height="15" fill="rgb(215,5,19)" fg:x="134" fg:w="1"/><text x="11.1799%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.82%)</title><rect x="10.2773%" y="469" width="0.8157%" height="15" fill="rgb(226,215,51)" fg:x="126" fg:w="10"/><text x="10.5273%" y="479.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.82%)</title><rect x="10.2773%" y="453" width="0.8157%" height="15" fill="rgb(225,56,26)" fg:x="126" fg:w="10"/><text x="10.5273%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.82%)</title><rect x="10.2773%" y="437" width="0.8157%" height="15" fill="rgb(222,75,29)" fg:x="126" fg:w="10"/><text x="10.5273%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.82%)</title><rect x="10.2773%" y="421" width="0.8157%" height="15" fill="rgb(236,139,6)" fg:x="126" fg:w="10"/><text x="10.5273%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.0114%" y="405" width="0.0816%" height="15" fill="rgb(223,137,36)" fg:x="135" fg:w="1"/><text x="11.2614%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0114%" y="389" width="0.0816%" height="15" fill="rgb(226,99,2)" fg:x="135" fg:w="1"/><text x="11.2614%" y="399.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (55 samples, 4.49%)</title><rect x="6.7700%" y="517" width="4.4861%" height="15" fill="rgb(206,133,23)" fg:x="83" fg:w="55"/><text x="7.0200%" y="527.50">engin..</text></g><g><title>engine::session::Session::check_for_changes (55 samples, 4.49%)</title><rect x="6.7700%" y="501" width="4.4861%" height="15" fill="rgb(243,173,15)" fg:x="83" fg:w="55"/><text x="7.0200%" y="511.50">engin..</text></g><g><title>kernel::compare::any_entity_changes (42 samples, 3.43%)</title><rect x="7.8303%" y="485" width="3.4258%" height="15" fill="rgb(228,69,28)" fg:x="96" fg:w="42"/><text x="8.0803%" y="495.50">ker..</text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="11.0930%" y="469" width="0.1631%" height="15" fill="rgb(212,51,22)" fg:x="136" fg:w="2"/><text x="11.3430%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="11.0930%" y="453" width="0.1631%" height="15" fill="rgb(227,113,0)" fg:x="136" fg:w="2"/><text x="11.3430%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1746%" y="437" width="0.0816%" height="15" fill="rgb(252,84,27)" fg:x="137" fg:w="1"/><text x="11.4246%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1746%" y="421" width="0.0816%" height="15" fill="rgb(223,145,39)" fg:x="137" fg:w="1"/><text x="11.4246%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="11.1746%" y="405" width="0.0816%" height="15" fill="rgb(239,219,30)" fg:x="137" fg:w="1"/><text x="11.4246%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1746%" y="389" width="0.0816%" height="15" fill="rgb(224,196,39)" fg:x="137" fg:w="1"/><text x="11.4246%" y="399.50"></text></g><g><title>engine::session::Session::save_entity_changes (62 samples, 5.06%)</title><rect x="6.3622%" y="533" width="5.0571%" height="15" fill="rgb(205,35,43)" fg:x="78" fg:w="62"/><text x="6.6122%" y="543.50">engine..</text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="11.2561%" y="517" width="0.1631%" height="15" fill="rgb(228,201,21)" fg:x="138" fg:w="2"/><text x="11.5061%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="11.2561%" y="501" width="0.1631%" height="15" fill="rgb(237,118,16)" fg:x="138" fg:w="2"/><text x="11.5061%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="11.3377%" y="485" width="0.0816%" height="15" fill="rgb(241,17,19)" fg:x="139" fg:w="1"/><text x="11.5877%" y="495.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="11.3377%" y="469" width="0.0816%" height="15" fill="rgb(214,10,25)" fg:x="139" fg:w="1"/><text x="11.5877%" y="479.50"></text></g><g><title>engine::session::Session::close (63 samples, 5.14%)</title><rect x="6.3622%" y="549" width="5.1387%" height="15" fill="rgb(238,37,29)" fg:x="78" fg:w="63"/><text x="6.6122%" y="559.50">engine..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="11.4192%" y="533" width="0.0816%" height="15" fill="rgb(253,83,25)" fg:x="140" fg:w="1"/><text x="11.6692%" y="543.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="11.4192%" y="517" width="0.0816%" height="15" fill="rgb(234,192,12)" fg:x="140" fg:w="1"/><text x="11.6692%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="11.4192%" y="501" width="0.0816%" height="15" fill="rgb(241,216,45)" fg:x="140" fg:w="1"/><text x="11.6692%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="11.4192%" y="485" width="0.0816%" height="15" fill="rgb(242,22,33)" fg:x="140" fg:w="1"/><text x="11.6692%" y="495.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="11.4192%" y="469" width="0.0816%" height="15" fill="rgb(231,105,49)" fg:x="140" fg:w="1"/><text x="11.6692%" y="479.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="11.5008%" y="501" width="0.0816%" height="15" fill="rgb(218,204,15)" fg:x="141" fg:w="1"/><text x="11.7508%" y="511.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5008%" y="485" width="0.0816%" height="15" fill="rgb(235,138,41)" fg:x="141" fg:w="1"/><text x="11.7508%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="11.7455%" y="469" width="0.0816%" height="15" fill="rgb(246,0,9)" fg:x="144" fg:w="1"/><text x="11.9955%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="11.7455%" y="453" width="0.0816%" height="15" fill="rgb(210,74,4)" fg:x="144" fg:w="1"/><text x="11.9955%" y="463.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="11.7455%" y="437" width="0.0816%" height="15" fill="rgb(250,60,41)" fg:x="144" fg:w="1"/><text x="11.9955%" y="447.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.7455%" y="421" width="0.0816%" height="15" fill="rgb(220,115,12)" fg:x="144" fg:w="1"/><text x="11.9955%" y="431.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="11.9086%" y="293" width="0.0816%" height="15" fill="rgb(237,100,13)" fg:x="146" fg:w="1"/><text x="12.1586%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="11.9086%" y="325" width="0.1631%" height="15" fill="rgb(213,55,26)" fg:x="146" fg:w="2"/><text x="12.1586%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="11.9086%" y="309" width="0.1631%" height="15" fill="rgb(216,17,4)" fg:x="146" fg:w="2"/><text x="12.1586%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="11.9902%" y="293" width="0.0816%" height="15" fill="rgb(220,153,47)" fg:x="147" fg:w="1"/><text x="12.2402%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="11.9902%" y="277" width="0.0816%" height="15" fill="rgb(215,131,9)" fg:x="147" fg:w="1"/><text x="12.2402%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="11.9086%" y="389" width="0.2447%" height="15" fill="rgb(233,46,42)" fg:x="146" fg:w="3"/><text x="12.1586%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="11.9086%" y="373" width="0.2447%" height="15" fill="rgb(226,86,7)" fg:x="146" fg:w="3"/><text x="12.1586%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="11.9086%" y="357" width="0.2447%" height="15" fill="rgb(239,226,21)" fg:x="146" fg:w="3"/><text x="12.1586%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="11.9086%" y="341" width="0.2447%" height="15" fill="rgb(244,137,22)" fg:x="146" fg:w="3"/><text x="12.1586%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="12.0718%" y="325" width="0.0816%" height="15" fill="rgb(211,139,35)" fg:x="148" fg:w="1"/><text x="12.3218%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.1533%" y="389" width="0.0816%" height="15" fill="rgb(214,62,50)" fg:x="149" fg:w="1"/><text x="12.4033%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="12.2349%" y="357" width="0.0816%" height="15" fill="rgb(212,113,44)" fg:x="150" fg:w="1"/><text x="12.4849%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="12.2349%" y="341" width="0.0816%" height="15" fill="rgb(226,150,43)" fg:x="150" fg:w="1"/><text x="12.4849%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="12.3165%" y="341" width="0.0816%" height="15" fill="rgb(250,71,37)" fg:x="151" fg:w="1"/><text x="12.5665%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.3980%" y="325" width="0.0816%" height="15" fill="rgb(219,76,19)" fg:x="152" fg:w="1"/><text x="12.6480%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="12.2349%" y="389" width="0.3263%" height="15" fill="rgb(250,39,11)" fg:x="150" fg:w="4"/><text x="12.4849%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="12.2349%" y="373" width="0.3263%" height="15" fill="rgb(230,64,31)" fg:x="150" fg:w="4"/><text x="12.4849%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="12.3165%" y="357" width="0.2447%" height="15" fill="rgb(208,222,23)" fg:x="151" fg:w="3"/><text x="12.5665%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="12.3980%" y="341" width="0.1631%" height="15" fill="rgb(227,125,18)" fg:x="152" fg:w="2"/><text x="12.6480%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4796%" y="325" width="0.0816%" height="15" fill="rgb(234,210,9)" fg:x="153" fg:w="1"/><text x="12.7296%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.7243%" y="341" width="0.0816%" height="15" fill="rgb(217,127,24)" fg:x="156" fg:w="1"/><text x="12.9743%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8059%" y="341" width="0.0816%" height="15" fill="rgb(239,141,48)" fg:x="157" fg:w="1"/><text x="13.0559%" y="351.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="12.8874%" y="341" width="0.0816%" height="15" fill="rgb(227,109,8)" fg:x="158" fg:w="1"/><text x="13.1374%" y="351.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="12.8874%" y="325" width="0.0816%" height="15" fill="rgb(235,184,23)" fg:x="158" fg:w="1"/><text x="13.1374%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8874%" y="309" width="0.0816%" height="15" fill="rgb(227,226,48)" fg:x="158" fg:w="1"/><text x="13.1374%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2137%" y="325" width="0.0816%" height="15" fill="rgb(206,150,11)" fg:x="162" fg:w="1"/><text x="13.4637%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.2953%" y="309" width="0.1631%" height="15" fill="rgb(254,2,33)" fg:x="163" fg:w="2"/><text x="13.5453%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (32 samples, 2.61%)</title><rect x="13.2953%" y="325" width="2.6101%" height="15" fill="rgb(243,160,20)" fg:x="163" fg:w="32"/><text x="13.5453%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (30 samples, 2.45%)</title><rect x="13.4584%" y="309" width="2.4470%" height="15" fill="rgb(218,208,30)" fg:x="165" fg:w="30"/><text x="13.7084%" y="319.50">co..</text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="15.9054%" y="325" width="0.0816%" height="15" fill="rgb(224,120,49)" fg:x="195" fg:w="1"/><text x="16.1554%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="15.9054%" y="309" width="0.0816%" height="15" fill="rgb(246,12,2)" fg:x="195" fg:w="1"/><text x="16.1554%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="15.9054%" y="293" width="0.0816%" height="15" fill="rgb(236,117,3)" fg:x="195" fg:w="1"/><text x="16.1554%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.90%)</title><rect x="15.9869%" y="325" width="0.8972%" height="15" fill="rgb(216,128,52)" fg:x="196" fg:w="11"/><text x="16.2369%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="16.2316%" y="309" width="0.6525%" height="15" fill="rgb(246,145,19)" fg:x="199" fg:w="8"/><text x="16.4816%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="16.8026%" y="293" width="0.0816%" height="15" fill="rgb(222,11,46)" fg:x="206" fg:w="1"/><text x="17.0526%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="16.8842%" y="325" width="0.0816%" height="15" fill="rgb(245,82,36)" fg:x="207" fg:w="1"/><text x="17.1342%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="16.9657%" y="325" width="0.0816%" height="15" fill="rgb(250,73,51)" fg:x="208" fg:w="1"/><text x="17.2157%" y="335.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="16.9657%" y="309" width="0.0816%" height="15" fill="rgb(221,189,23)" fg:x="208" fg:w="1"/><text x="17.2157%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="17.2104%" y="277" width="0.0816%" height="15" fill="rgb(210,33,7)" fg:x="211" fg:w="1"/><text x="17.4604%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="17.2920%" y="277" width="0.0816%" height="15" fill="rgb(210,107,22)" fg:x="212" fg:w="1"/><text x="17.5420%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.2920%" y="261" width="0.0816%" height="15" fill="rgb(222,116,37)" fg:x="212" fg:w="1"/><text x="17.5420%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.2920%" y="245" width="0.0816%" height="15" fill="rgb(254,17,48)" fg:x="212" fg:w="1"/><text x="17.5420%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2920%" y="229" width="0.0816%" height="15" fill="rgb(224,36,32)" fg:x="212" fg:w="1"/><text x="17.5420%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.5367%" y="261" width="0.0816%" height="15" fill="rgb(232,90,46)" fg:x="215" fg:w="1"/><text x="17.7867%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="17.6183%" y="261" width="0.2447%" height="15" fill="rgb(241,66,40)" fg:x="216" fg:w="3"/><text x="17.8683%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.8630%" y="261" width="0.0816%" height="15" fill="rgb(249,184,29)" fg:x="219" fg:w="1"/><text x="18.1130%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="17.9445%" y="261" width="0.0816%" height="15" fill="rgb(231,181,1)" fg:x="220" fg:w="1"/><text x="18.1945%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.9445%" y="245" width="0.0816%" height="15" fill="rgb(224,94,2)" fg:x="220" fg:w="1"/><text x="18.1945%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.9445%" y="229" width="0.0816%" height="15" fill="rgb(229,170,15)" fg:x="220" fg:w="1"/><text x="18.1945%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.9445%" y="213" width="0.0816%" height="15" fill="rgb(240,127,35)" fg:x="220" fg:w="1"/><text x="18.1945%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="18.1892%" y="229" width="0.1631%" height="15" fill="rgb(248,196,34)" fg:x="223" fg:w="2"/><text x="18.4392%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.2708%" y="213" width="0.0816%" height="15" fill="rgb(236,137,7)" fg:x="224" fg:w="1"/><text x="18.5208%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2708%" y="197" width="0.0816%" height="15" fill="rgb(235,127,16)" fg:x="224" fg:w="1"/><text x="18.5208%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.41%)</title><rect x="18.0261%" y="261" width="0.4078%" height="15" fill="rgb(250,192,54)" fg:x="221" fg:w="5"/><text x="18.2761%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.41%)</title><rect x="18.0261%" y="245" width="0.4078%" height="15" fill="rgb(218,98,20)" fg:x="221" fg:w="5"/><text x="18.2761%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="18.3524%" y="229" width="0.0816%" height="15" fill="rgb(230,176,47)" fg:x="225" fg:w="1"/><text x="18.6024%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="18.3524%" y="213" width="0.0816%" height="15" fill="rgb(244,2,33)" fg:x="225" fg:w="1"/><text x="18.6024%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.3524%" y="197" width="0.0816%" height="15" fill="rgb(231,100,17)" fg:x="225" fg:w="1"/><text x="18.6024%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.3524%" y="181" width="0.0816%" height="15" fill="rgb(245,23,12)" fg:x="225" fg:w="1"/><text x="18.6024%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.3524%" y="165" width="0.0816%" height="15" fill="rgb(249,55,22)" fg:x="225" fg:w="1"/><text x="18.6024%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="18.4339%" y="245" width="0.1631%" height="15" fill="rgb(207,134,9)" fg:x="226" fg:w="2"/><text x="18.6839%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.4339%" y="229" width="0.1631%" height="15" fill="rgb(218,134,0)" fg:x="226" fg:w="2"/><text x="18.6839%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.4339%" y="213" width="0.1631%" height="15" fill="rgb(213,212,33)" fg:x="226" fg:w="2"/><text x="18.6839%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="18.5971%" y="245" width="0.0816%" height="15" fill="rgb(252,106,18)" fg:x="228" fg:w="1"/><text x="18.8471%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.5971%" y="229" width="0.0816%" height="15" fill="rgb(208,126,42)" fg:x="228" fg:w="1"/><text x="18.8471%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.5971%" y="213" width="0.0816%" height="15" fill="rgb(246,175,29)" fg:x="228" fg:w="1"/><text x="18.8471%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.5971%" y="197" width="0.0816%" height="15" fill="rgb(215,13,50)" fg:x="228" fg:w="1"/><text x="18.8471%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (96 samples, 7.83%)</title><rect x="18.4339%" y="261" width="7.8303%" height="15" fill="rgb(216,172,15)" fg:x="226" fg:w="96"/><text x="18.6839%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (93 samples, 7.59%)</title><rect x="18.6786%" y="245" width="7.5856%" height="15" fill="rgb(212,103,13)" fg:x="229" fg:w="93"/><text x="18.9286%" y="255.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (93 samples, 7.59%)</title><rect x="18.6786%" y="229" width="7.5856%" height="15" fill="rgb(231,171,36)" fg:x="229" fg:w="93"/><text x="18.9286%" y="239.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="26.2643%" y="261" width="0.3263%" height="15" fill="rgb(250,123,20)" fg:x="322" fg:w="4"/><text x="26.5143%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5090%" y="245" width="0.0816%" height="15" fill="rgb(212,53,50)" fg:x="325" fg:w="1"/><text x="26.7590%" y="255.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="26.5905%" y="261" width="0.0816%" height="15" fill="rgb(243,54,12)" fg:x="326" fg:w="1"/><text x="26.8405%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 9.71%)</title><rect x="17.1289%" y="309" width="9.7064%" height="15" fill="rgb(234,101,34)" fg:x="210" fg:w="119"/><text x="17.3789%" y="319.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (118 samples, 9.62%)</title><rect x="17.2104%" y="293" width="9.6248%" height="15" fill="rgb(254,67,22)" fg:x="211" fg:w="118"/><text x="17.4604%" y="303.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (116 samples, 9.46%)</title><rect x="17.3736%" y="277" width="9.4617%" height="15" fill="rgb(250,35,47)" fg:x="213" fg:w="116"/><text x="17.6236%" y="287.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="26.6721%" y="261" width="0.1631%" height="15" fill="rgb(226,126,38)" fg:x="327" fg:w="2"/><text x="26.9221%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="26.6721%" y="245" width="0.1631%" height="15" fill="rgb(216,138,53)" fg:x="327" fg:w="2"/><text x="26.9221%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="26.6721%" y="229" width="0.1631%" height="15" fill="rgb(246,199,43)" fg:x="327" fg:w="2"/><text x="26.9221%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.6721%" y="213" width="0.1631%" height="15" fill="rgb(232,125,11)" fg:x="327" fg:w="2"/><text x="26.9221%" y="223.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="26.9984%" y="293" width="0.1631%" height="15" fill="rgb(218,219,45)" fg:x="331" fg:w="2"/><text x="27.2484%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1615%" y="293" width="0.0816%" height="15" fill="rgb(216,102,54)" fg:x="333" fg:w="1"/><text x="27.4115%" y="303.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.08%)</title><rect x="27.2431%" y="293" width="0.0816%" height="15" fill="rgb(250,228,7)" fg:x="334" fg:w="1"/><text x="27.4931%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.08%)</title><rect x="27.2431%" y="277" width="0.0816%" height="15" fill="rgb(226,125,25)" fg:x="334" fg:w="1"/><text x="27.4931%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="27.3246%" y="293" width="0.3263%" height="15" fill="rgb(224,165,27)" fg:x="335" fg:w="4"/><text x="27.5746%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="27.4062%" y="277" width="0.2447%" height="15" fill="rgb(233,86,3)" fg:x="336" fg:w="3"/><text x="27.6562%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="27.4878%" y="261" width="0.1631%" height="15" fill="rgb(228,116,20)" fg:x="337" fg:w="2"/><text x="27.7378%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="27.4878%" y="245" width="0.1631%" height="15" fill="rgb(209,192,17)" fg:x="337" fg:w="2"/><text x="27.7378%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (17 samples, 1.39%)</title><rect x="26.8352%" y="309" width="1.3866%" height="15" fill="rgb(224,88,34)" fg:x="329" fg:w="17"/><text x="27.0852%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.57%)</title><rect x="27.6509%" y="293" width="0.5710%" height="15" fill="rgb(233,38,6)" fg:x="339" fg:w="7"/><text x="27.9009%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.1403%" y="277" width="0.0816%" height="15" fill="rgb(212,59,30)" fg:x="345" fg:w="1"/><text x="28.3903%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="28.2219%" y="309" width="0.0816%" height="15" fill="rgb(213,80,3)" fg:x="346" fg:w="1"/><text x="28.4719%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="28.3034%" y="309" width="0.0816%" height="15" fill="rgb(251,178,7)" fg:x="347" fg:w="1"/><text x="28.5534%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (190 samples, 15.50%)</title><rect x="12.9690%" y="341" width="15.4976%" height="15" fill="rgb(213,154,26)" fg:x="159" fg:w="190"/><text x="13.2190%" y="351.50">regex_automata::meta::st..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (140 samples, 11.42%)</title><rect x="17.0473%" y="325" width="11.4192%" height="15" fill="rgb(238,165,49)" fg:x="209" fg:w="140"/><text x="17.2973%" y="335.50">regex_automata::n..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="28.3850%" y="309" width="0.0816%" height="15" fill="rgb(248,91,46)" fg:x="348" fg:w="1"/><text x="28.6350%" y="319.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="28.3850%" y="293" width="0.0816%" height="15" fill="rgb(244,21,52)" fg:x="348" fg:w="1"/><text x="28.6350%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="28.5481%" y="293" width="0.0816%" height="15" fill="rgb(247,122,20)" fg:x="350" fg:w="1"/><text x="28.7981%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.5481%" y="277" width="0.0816%" height="15" fill="rgb(218,27,9)" fg:x="350" fg:w="1"/><text x="28.7981%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.5481%" y="261" width="0.0816%" height="15" fill="rgb(246,7,6)" fg:x="350" fg:w="1"/><text x="28.7981%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5481%" y="245" width="0.0816%" height="15" fill="rgb(227,135,54)" fg:x="350" fg:w="1"/><text x="28.7981%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="28.6297%" y="293" width="0.0816%" height="15" fill="rgb(247,14,11)" fg:x="351" fg:w="1"/><text x="28.8797%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="28.6297%" y="277" width="0.0816%" height="15" fill="rgb(206,149,34)" fg:x="351" fg:w="1"/><text x="28.8797%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="28.6297%" y="261" width="0.0816%" height="15" fill="rgb(227,228,4)" fg:x="351" fg:w="1"/><text x="28.8797%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="28.7113%" y="293" width="0.0816%" height="15" fill="rgb(238,218,28)" fg:x="352" fg:w="1"/><text x="28.9613%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.65%)</title><rect x="28.5481%" y="309" width="0.6525%" height="15" fill="rgb(252,86,40)" fg:x="350" fg:w="8"/><text x="28.7981%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.41%)</title><rect x="28.7928%" y="293" width="0.4078%" height="15" fill="rgb(251,225,11)" fg:x="353" fg:w="5"/><text x="29.0428%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="28.8744%" y="277" width="0.3263%" height="15" fill="rgb(206,46,49)" fg:x="354" fg:w="4"/><text x="29.1244%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="28.8744%" y="261" width="0.3263%" height="15" fill="rgb(245,128,24)" fg:x="354" fg:w="4"/><text x="29.1244%" y="271.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="28.8744%" y="245" width="0.3263%" height="15" fill="rgb(219,177,34)" fg:x="354" fg:w="4"/><text x="29.1244%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="29.2007%" y="309" width="0.0816%" height="15" fill="rgb(218,60,48)" fg:x="358" fg:w="1"/><text x="29.4507%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.06%)</title><rect x="28.4666%" y="341" width="1.0604%" height="15" fill="rgb(221,11,5)" fg:x="349" fg:w="13"/><text x="28.7166%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.06%)</title><rect x="28.4666%" y="325" width="1.0604%" height="15" fill="rgb(220,148,13)" fg:x="349" fg:w="13"/><text x="28.7166%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="29.2822%" y="309" width="0.2447%" height="15" fill="rgb(210,16,3)" fg:x="359" fg:w="3"/><text x="29.5322%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="29.4454%" y="293" width="0.0816%" height="15" fill="rgb(236,80,2)" fg:x="361" fg:w="1"/><text x="29.6954%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.5269%" y="293" width="0.0816%" height="15" fill="rgb(239,129,19)" fg:x="362" fg:w="1"/><text x="29.7769%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.6085%" y="293" width="0.1631%" height="15" fill="rgb(220,106,35)" fg:x="363" fg:w="2"/><text x="29.8585%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.6900%" y="277" width="0.0816%" height="15" fill="rgb(252,139,45)" fg:x="364" fg:w="1"/><text x="29.9400%" y="287.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="29.6900%" y="261" width="0.0816%" height="15" fill="rgb(229,8,36)" fg:x="364" fg:w="1"/><text x="29.9400%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="29.6900%" y="245" width="0.0816%" height="15" fill="rgb(230,126,33)" fg:x="364" fg:w="1"/><text x="29.9400%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="29.7716%" y="293" width="0.1631%" height="15" fill="rgb(239,140,21)" fg:x="365" fg:w="2"/><text x="30.0216%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.49%)</title><rect x="29.5269%" y="309" width="0.4894%" height="15" fill="rgb(254,104,9)" fg:x="362" fg:w="6"/><text x="29.7769%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="29.9347%" y="293" width="0.0816%" height="15" fill="rgb(239,52,14)" fg:x="367" fg:w="1"/><text x="30.1847%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="30.0163%" y="309" width="0.0816%" height="15" fill="rgb(208,227,44)" fg:x="368" fg:w="1"/><text x="30.2663%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="30.0163%" y="293" width="0.0816%" height="15" fill="rgb(246,18,19)" fg:x="368" fg:w="1"/><text x="30.2663%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (217 samples, 17.70%)</title><rect x="12.5612%" y="389" width="17.6998%" height="15" fill="rgb(235,228,25)" fg:x="154" fg:w="217"/><text x="12.8112%" y="399.50">regex::regex::string::Regex..</text></g><g><title>regex::builders::Builder::build_one_string (217 samples, 17.70%)</title><rect x="12.5612%" y="373" width="17.6998%" height="15" fill="rgb(240,156,20)" fg:x="154" fg:w="217"/><text x="12.8112%" y="383.50">regex::builders::Builder::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (216 samples, 17.62%)</title><rect x="12.6427%" y="357" width="17.6183%" height="15" fill="rgb(224,8,20)" fg:x="155" fg:w="216"/><text x="12.8927%" y="367.50">regex_automata::meta::regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.73%)</title><rect x="29.5269%" y="341" width="0.7341%" height="15" fill="rgb(214,12,52)" fg:x="362" fg:w="9"/><text x="29.7769%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.73%)</title><rect x="29.5269%" y="325" width="0.7341%" height="15" fill="rgb(211,220,47)" fg:x="362" fg:w="9"/><text x="29.7769%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="30.0979%" y="309" width="0.1631%" height="15" fill="rgb(250,173,5)" fg:x="369" fg:w="2"/><text x="30.3479%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="30.1794%" y="293" width="0.0816%" height="15" fill="rgb(250,125,52)" fg:x="370" fg:w="1"/><text x="30.4294%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.2610%" y="325" width="0.0816%" height="15" fill="rgb(209,133,18)" fg:x="371" fg:w="1"/><text x="30.5110%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.2610%" y="309" width="0.0816%" height="15" fill="rgb(216,173,22)" fg:x="371" fg:w="1"/><text x="30.5110%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.5057%" y="309" width="0.0816%" height="15" fill="rgb(205,3,22)" fg:x="374" fg:w="1"/><text x="30.7557%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.5057%" y="293" width="0.0816%" height="15" fill="rgb(248,22,20)" fg:x="374" fg:w="1"/><text x="30.7557%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.5057%" y="277" width="0.0816%" height="15" fill="rgb(233,6,29)" fg:x="374" fg:w="1"/><text x="30.7557%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.5873%" y="309" width="0.0816%" height="15" fill="rgb(240,22,54)" fg:x="375" fg:w="1"/><text x="30.8373%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.5873%" y="293" width="0.0816%" height="15" fill="rgb(231,133,32)" fg:x="375" fg:w="1"/><text x="30.8373%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5873%" y="277" width="0.0816%" height="15" fill="rgb(248,193,4)" fg:x="375" fg:w="1"/><text x="30.8373%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6688%" y="309" width="0.0816%" height="15" fill="rgb(211,178,46)" fg:x="376" fg:w="1"/><text x="30.9188%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="30.3426%" y="325" width="0.6525%" height="15" fill="rgb(224,5,42)" fg:x="372" fg:w="8"/><text x="30.5926%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="30.7504%" y="309" width="0.2447%" height="15" fill="rgb(239,176,25)" fg:x="377" fg:w="3"/><text x="31.0004%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (236 samples, 19.25%)</title><rect x="11.9086%" y="405" width="19.2496%" height="15" fill="rgb(245,187,50)" fg:x="146" fg:w="236"/><text x="12.1586%" y="415.50">indefinite::helper::Helper::ge..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.90%)</title><rect x="30.2610%" y="389" width="0.8972%" height="15" fill="rgb(248,24,15)" fg:x="371" fg:w="11"/><text x="30.5110%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.90%)</title><rect x="30.2610%" y="373" width="0.8972%" height="15" fill="rgb(205,166,13)" fg:x="371" fg:w="11"/><text x="30.5110%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.90%)</title><rect x="30.2610%" y="357" width="0.8972%" height="15" fill="rgb(208,114,23)" fg:x="371" fg:w="11"/><text x="30.5110%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.90%)</title><rect x="30.2610%" y="341" width="0.8972%" height="15" fill="rgb(239,127,18)" fg:x="371" fg:w="11"/><text x="30.5110%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="30.9951%" y="325" width="0.1631%" height="15" fill="rgb(219,154,28)" fg:x="380" fg:w="2"/><text x="31.2451%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.9951%" y="309" width="0.1631%" height="15" fill="rgb(225,157,23)" fg:x="380" fg:w="2"/><text x="31.2451%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.9951%" y="293" width="0.1631%" height="15" fill="rgb(219,8,6)" fg:x="380" fg:w="2"/><text x="31.2451%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="31.0767%" y="277" width="0.0816%" height="15" fill="rgb(212,47,6)" fg:x="381" fg:w="1"/><text x="31.3267%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="31.0767%" y="261" width="0.0816%" height="15" fill="rgb(224,190,4)" fg:x="381" fg:w="1"/><text x="31.3267%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.1582%" y="389" width="0.0816%" height="15" fill="rgb(239,183,29)" fg:x="382" fg:w="1"/><text x="31.4082%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="31.2398%" y="357" width="0.1631%" height="15" fill="rgb(213,57,7)" fg:x="383" fg:w="2"/><text x="31.4898%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="31.2398%" y="341" width="0.1631%" height="15" fill="rgb(216,148,1)" fg:x="383" fg:w="2"/><text x="31.4898%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="31.2398%" y="325" width="0.1631%" height="15" fill="rgb(236,182,29)" fg:x="383" fg:w="2"/><text x="31.4898%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.3214%" y="309" width="0.0816%" height="15" fill="rgb(244,120,48)" fg:x="384" fg:w="1"/><text x="31.5714%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.4029%" y="341" width="0.0816%" height="15" fill="rgb(206,71,34)" fg:x="385" fg:w="1"/><text x="31.6529%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.6476%" y="325" width="0.0816%" height="15" fill="rgb(242,32,6)" fg:x="388" fg:w="1"/><text x="31.8976%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.6476%" y="309" width="0.0816%" height="15" fill="rgb(241,35,3)" fg:x="388" fg:w="1"/><text x="31.8976%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (10 samples, 0.82%)</title><rect x="31.2398%" y="389" width="0.8157%" height="15" fill="rgb(222,62,19)" fg:x="383" fg:w="10"/><text x="31.4898%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (10 samples, 0.82%)</title><rect x="31.2398%" y="373" width="0.8157%" height="15" fill="rgb(223,110,41)" fg:x="383" fg:w="10"/><text x="31.4898%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (8 samples, 0.65%)</title><rect x="31.4029%" y="357" width="0.6525%" height="15" fill="rgb(208,224,4)" fg:x="385" fg:w="8"/><text x="31.6529%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (7 samples, 0.57%)</title><rect x="31.4845%" y="341" width="0.5710%" height="15" fill="rgb(241,137,19)" fg:x="386" fg:w="7"/><text x="31.7345%" y="351.50"></text></g><g><title>__libc_free (4 samples, 0.33%)</title><rect x="31.7292%" y="325" width="0.3263%" height="15" fill="rgb(244,24,17)" fg:x="389" fg:w="4"/><text x="31.9792%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="32.1370%" y="325" width="0.0816%" height="15" fill="rgb(245,178,49)" fg:x="394" fg:w="1"/><text x="32.3870%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.1370%" y="309" width="0.0816%" height="15" fill="rgb(219,160,38)" fg:x="394" fg:w="1"/><text x="32.3870%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="32.0555%" y="341" width="0.2447%" height="15" fill="rgb(228,137,14)" fg:x="393" fg:w="3"/><text x="32.3055%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="32.2186%" y="325" width="0.0816%" height="15" fill="rgb(237,134,11)" fg:x="395" fg:w="1"/><text x="32.4686%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.41%)</title><rect x="32.0555%" y="373" width="0.4078%" height="15" fill="rgb(211,126,44)" fg:x="393" fg:w="5"/><text x="32.3055%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="32.0555%" y="357" width="0.4078%" height="15" fill="rgb(226,171,33)" fg:x="393" fg:w="5"/><text x="32.3055%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="32.3002%" y="341" width="0.1631%" height="15" fill="rgb(253,99,13)" fg:x="396" fg:w="2"/><text x="32.5502%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.3817%" y="325" width="0.0816%" height="15" fill="rgb(244,48,7)" fg:x="397" fg:w="1"/><text x="32.6317%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.3817%" y="309" width="0.0816%" height="15" fill="rgb(244,217,54)" fg:x="397" fg:w="1"/><text x="32.6317%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.3817%" y="293" width="0.0816%" height="15" fill="rgb(224,15,18)" fg:x="397" fg:w="1"/><text x="32.6317%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.7080%" y="293" width="0.1631%" height="15" fill="rgb(244,99,12)" fg:x="401" fg:w="2"/><text x="32.9580%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.7896%" y="277" width="0.0816%" height="15" fill="rgb(233,226,8)" fg:x="402" fg:w="1"/><text x="33.0396%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.8711%" y="293" width="0.1631%" height="15" fill="rgb(229,211,3)" fg:x="403" fg:w="2"/><text x="33.1211%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.22%)</title><rect x="32.0555%" y="389" width="1.2235%" height="15" fill="rgb(216,140,21)" fg:x="393" fg:w="15"/><text x="32.3055%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.82%)</title><rect x="32.4633%" y="373" width="0.8157%" height="15" fill="rgb(234,122,30)" fg:x="398" fg:w="10"/><text x="32.7133%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.82%)</title><rect x="32.4633%" y="357" width="0.8157%" height="15" fill="rgb(236,25,46)" fg:x="398" fg:w="10"/><text x="32.7133%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.82%)</title><rect x="32.4633%" y="341" width="0.8157%" height="15" fill="rgb(217,52,54)" fg:x="398" fg:w="10"/><text x="32.7133%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.82%)</title><rect x="32.4633%" y="325" width="0.8157%" height="15" fill="rgb(222,29,26)" fg:x="398" fg:w="10"/><text x="32.7133%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.82%)</title><rect x="32.4633%" y="309" width="0.8157%" height="15" fill="rgb(216,177,29)" fg:x="398" fg:w="10"/><text x="32.7133%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="33.0343%" y="293" width="0.2447%" height="15" fill="rgb(247,136,51)" fg:x="405" fg:w="3"/><text x="33.2843%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.3605%" y="325" width="0.0816%" height="15" fill="rgb(231,47,47)" fg:x="409" fg:w="1"/><text x="33.6105%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.3605%" y="309" width="0.0816%" height="15" fill="rgb(211,192,36)" fg:x="409" fg:w="1"/><text x="33.6105%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="33.3605%" y="341" width="0.1631%" height="15" fill="rgb(229,156,32)" fg:x="409" fg:w="2"/><text x="33.6105%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="33.4421%" y="325" width="0.0816%" height="15" fill="rgb(248,213,20)" fg:x="410" fg:w="1"/><text x="33.6921%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.6868%" y="309" width="0.0816%" height="15" fill="rgb(217,64,7)" fg:x="413" fg:w="1"/><text x="33.9368%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7684%" y="309" width="0.0816%" height="15" fill="rgb(232,142,8)" fg:x="414" fg:w="1"/><text x="34.0184%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.41%)</title><rect x="33.5237%" y="341" width="0.4078%" height="15" fill="rgb(224,92,44)" fg:x="411" fg:w="5"/><text x="33.7737%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="33.6052%" y="325" width="0.3263%" height="15" fill="rgb(214,169,17)" fg:x="412" fg:w="4"/><text x="33.8552%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="33.8499%" y="309" width="0.0816%" height="15" fill="rgb(210,59,37)" fg:x="415" fg:w="1"/><text x="34.0999%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.8499%" y="293" width="0.0816%" height="15" fill="rgb(214,116,48)" fg:x="415" fg:w="1"/><text x="34.0999%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.0946%" y="309" width="0.0816%" height="15" fill="rgb(244,191,6)" fg:x="418" fg:w="1"/><text x="34.3446%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (35 samples, 2.85%)</title><rect x="34.0946%" y="325" width="2.8548%" height="15" fill="rgb(241,50,52)" fg:x="418" fg:w="35"/><text x="34.3446%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (34 samples, 2.77%)</title><rect x="34.1762%" y="309" width="2.7732%" height="15" fill="rgb(236,75,39)" fg:x="419" fg:w="34"/><text x="34.4262%" y="319.50">co..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.7863%" y="293" width="0.1631%" height="15" fill="rgb(236,99,0)" fg:x="451" fg:w="2"/><text x="37.0363%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="36.9494%" y="309" width="0.4894%" height="15" fill="rgb(207,202,15)" fg:x="453" fg:w="6"/><text x="37.1994%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.57%)</title><rect x="36.9494%" y="325" width="0.5710%" height="15" fill="rgb(233,207,14)" fg:x="453" fg:w="7"/><text x="37.1994%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="37.4388%" y="309" width="0.0816%" height="15" fill="rgb(226,27,51)" fg:x="459" fg:w="1"/><text x="37.6888%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="37.4388%" y="293" width="0.0816%" height="15" fill="rgb(206,104,42)" fg:x="459" fg:w="1"/><text x="37.6888%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="37.4388%" y="277" width="0.0816%" height="15" fill="rgb(212,225,4)" fg:x="459" fg:w="1"/><text x="37.6888%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="37.5204%" y="309" width="0.0816%" height="15" fill="rgb(233,96,42)" fg:x="460" fg:w="1"/><text x="37.7704%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="37.5204%" y="293" width="0.0816%" height="15" fill="rgb(229,21,32)" fg:x="460" fg:w="1"/><text x="37.7704%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="38.0914%" y="293" width="0.0816%" height="15" fill="rgb(226,216,24)" fg:x="467" fg:w="1"/><text x="38.3414%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.0914%" y="277" width="0.0816%" height="15" fill="rgb(221,163,17)" fg:x="467" fg:w="1"/><text x="38.3414%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="38.1729%" y="293" width="0.0816%" height="15" fill="rgb(216,216,42)" fg:x="468" fg:w="1"/><text x="38.4229%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.1729%" y="277" width="0.0816%" height="15" fill="rgb(240,118,7)" fg:x="468" fg:w="1"/><text x="38.4229%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.1729%" y="261" width="0.0816%" height="15" fill="rgb(221,67,37)" fg:x="468" fg:w="1"/><text x="38.4229%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.1729%" y="245" width="0.0816%" height="15" fill="rgb(241,32,44)" fg:x="468" fg:w="1"/><text x="38.4229%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.57%)</title><rect x="38.2545%" y="293" width="0.5710%" height="15" fill="rgb(235,204,43)" fg:x="469" fg:w="7"/><text x="38.5045%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.33%)</title><rect x="38.4992%" y="277" width="0.3263%" height="15" fill="rgb(213,116,10)" fg:x="472" fg:w="4"/><text x="38.7492%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="38.5808%" y="261" width="0.2447%" height="15" fill="rgb(239,15,48)" fg:x="473" fg:w="3"/><text x="38.8308%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="38.5808%" y="245" width="0.2447%" height="15" fill="rgb(207,123,36)" fg:x="473" fg:w="3"/><text x="38.8308%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="38.5808%" y="229" width="0.2447%" height="15" fill="rgb(209,103,30)" fg:x="473" fg:w="3"/><text x="38.8308%" y="239.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.08%)</title><rect x="38.8254%" y="277" width="0.0816%" height="15" fill="rgb(238,100,19)" fg:x="476" fg:w="1"/><text x="39.0754%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.9070%" y="261" width="0.0816%" height="15" fill="rgb(244,30,14)" fg:x="477" fg:w="1"/><text x="39.1570%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (26 samples, 2.12%)</title><rect x="37.5204%" y="325" width="2.1207%" height="15" fill="rgb(249,174,6)" fg:x="460" fg:w="26"/><text x="37.7704%" y="335.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (25 samples, 2.04%)</title><rect x="37.6020%" y="309" width="2.0392%" height="15" fill="rgb(235,213,41)" fg:x="461" fg:w="25"/><text x="37.8520%" y="319.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.82%)</title><rect x="38.8254%" y="293" width="0.8157%" height="15" fill="rgb(213,118,6)" fg:x="476" fg:w="10"/><text x="39.0754%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.73%)</title><rect x="38.9070%" y="277" width="0.7341%" height="15" fill="rgb(235,44,51)" fg:x="477" fg:w="9"/><text x="39.1570%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.65%)</title><rect x="38.9886%" y="261" width="0.6525%" height="15" fill="rgb(217,9,53)" fg:x="478" fg:w="8"/><text x="39.2386%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="39.7227%" y="277" width="0.0816%" height="15" fill="rgb(237,172,34)" fg:x="487" fg:w="1"/><text x="39.9727%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.7227%" y="261" width="0.0816%" height="15" fill="rgb(206,206,11)" fg:x="487" fg:w="1"/><text x="39.9727%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.7227%" y="245" width="0.0816%" height="15" fill="rgb(214,149,29)" fg:x="487" fg:w="1"/><text x="39.9727%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.7227%" y="229" width="0.0816%" height="15" fill="rgb(208,123,3)" fg:x="487" fg:w="1"/><text x="39.9727%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="39.8042%" y="229" width="0.2447%" height="15" fill="rgb(229,126,4)" fg:x="488" fg:w="3"/><text x="40.0542%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.8858%" y="213" width="0.1631%" height="15" fill="rgb(222,92,36)" fg:x="489" fg:w="2"/><text x="40.1358%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.8858%" y="197" width="0.1631%" height="15" fill="rgb(216,39,41)" fg:x="489" fg:w="2"/><text x="40.1358%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.9674%" y="181" width="0.0816%" height="15" fill="rgb(253,127,28)" fg:x="490" fg:w="1"/><text x="40.2174%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.73%)</title><rect x="40.6199%" y="213" width="0.7341%" height="15" fill="rgb(249,152,51)" fg:x="498" fg:w="9"/><text x="40.8699%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="41.3540%" y="213" width="0.2447%" height="15" fill="rgb(209,123,42)" fg:x="507" fg:w="3"/><text x="41.6040%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.57%)</title><rect x="41.5987%" y="213" width="0.5710%" height="15" fill="rgb(241,118,22)" fg:x="510" fg:w="7"/><text x="41.8487%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="41.9250%" y="197" width="0.2447%" height="15" fill="rgb(208,25,7)" fg:x="514" fg:w="3"/><text x="42.1750%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="41.9250%" y="181" width="0.2447%" height="15" fill="rgb(243,144,39)" fg:x="514" fg:w="3"/><text x="42.1750%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="41.9250%" y="165" width="0.2447%" height="15" fill="rgb(250,50,5)" fg:x="514" fg:w="3"/><text x="42.1750%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="42.1697%" y="213" width="0.2447%" height="15" fill="rgb(207,67,11)" fg:x="517" fg:w="3"/><text x="42.4197%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.8222%" y="181" width="0.0816%" height="15" fill="rgb(245,204,40)" fg:x="525" fg:w="1"/><text x="43.0722%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="42.9038%" y="149" width="0.3263%" height="15" fill="rgb(238,228,24)" fg:x="526" fg:w="4"/><text x="43.1538%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.65%)</title><rect x="42.9038%" y="181" width="0.6525%" height="15" fill="rgb(217,116,22)" fg:x="526" fg:w="8"/><text x="43.1538%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.65%)</title><rect x="42.9038%" y="165" width="0.6525%" height="15" fill="rgb(234,98,12)" fg:x="526" fg:w="8"/><text x="43.1538%" y="175.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="43.2300%" y="149" width="0.3263%" height="15" fill="rgb(242,170,50)" fg:x="530" fg:w="4"/><text x="43.4800%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (17 samples, 1.39%)</title><rect x="42.4144%" y="213" width="1.3866%" height="15" fill="rgb(235,7,5)" fg:x="520" fg:w="17"/><text x="42.6644%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (16 samples, 1.31%)</title><rect x="42.4959%" y="197" width="1.3051%" height="15" fill="rgb(241,114,28)" fg:x="521" fg:w="16"/><text x="42.7459%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="43.5563%" y="181" width="0.2447%" height="15" fill="rgb(246,112,42)" fg:x="534" fg:w="3"/><text x="43.8063%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.7194%" y="165" width="0.0816%" height="15" fill="rgb(248,228,14)" fg:x="536" fg:w="1"/><text x="43.9694%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="43.8010%" y="213" width="0.1631%" height="15" fill="rgb(208,133,18)" fg:x="537" fg:w="2"/><text x="44.0510%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="43.8010%" y="197" width="0.1631%" height="15" fill="rgb(207,35,49)" fg:x="537" fg:w="2"/><text x="44.0510%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="43.8825%" y="181" width="0.0816%" height="15" fill="rgb(205,68,36)" fg:x="538" fg:w="1"/><text x="44.1325%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (74 samples, 6.04%)</title><rect x="43.9641%" y="213" width="6.0359%" height="15" fill="rgb(245,62,40)" fg:x="539" fg:w="74"/><text x="44.2141%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (74 samples, 6.04%)</title><rect x="43.9641%" y="197" width="6.0359%" height="15" fill="rgb(228,27,24)" fg:x="539" fg:w="74"/><text x="44.2141%" y="207.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (74 samples, 6.04%)</title><rect x="43.9641%" y="181" width="6.0359%" height="15" fill="rgb(253,19,12)" fg:x="539" fg:w="74"/><text x="44.2141%" y="191.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="50.0000%" y="213" width="0.4078%" height="15" fill="rgb(232,28,20)" fg:x="613" fg:w="5"/><text x="50.2500%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="50.2447%" y="197" width="0.1631%" height="15" fill="rgb(218,35,51)" fg:x="616" fg:w="2"/><text x="50.4947%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="50.4078%" y="213" width="0.1631%" height="15" fill="rgb(212,90,40)" fg:x="618" fg:w="2"/><text x="50.6578%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (138 samples, 11.26%)</title><rect x="39.6411%" y="309" width="11.2561%" height="15" fill="rgb(220,172,12)" fg:x="486" fg:w="138"/><text x="39.8911%" y="319.50">&lt;core::iter::adap..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (137 samples, 11.17%)</title><rect x="39.7227%" y="293" width="11.1746%" height="15" fill="rgb(226,159,20)" fg:x="487" fg:w="137"/><text x="39.9727%" y="303.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (136 samples, 11.09%)</title><rect x="39.8042%" y="277" width="11.0930%" height="15" fill="rgb(234,205,16)" fg:x="488" fg:w="136"/><text x="40.0542%" y="287.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (136 samples, 11.09%)</title><rect x="39.8042%" y="261" width="11.0930%" height="15" fill="rgb(207,9,39)" fg:x="488" fg:w="136"/><text x="40.0542%" y="271.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (136 samples, 11.09%)</title><rect x="39.8042%" y="245" width="11.0930%" height="15" fill="rgb(249,143,15)" fg:x="488" fg:w="136"/><text x="40.0542%" y="255.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (133 samples, 10.85%)</title><rect x="40.0489%" y="229" width="10.8483%" height="15" fill="rgb(253,133,29)" fg:x="491" fg:w="133"/><text x="40.2989%" y="239.50">regex_automata::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.33%)</title><rect x="50.5710%" y="213" width="0.3263%" height="15" fill="rgb(221,187,0)" fg:x="620" fg:w="4"/><text x="50.8210%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="50.7341%" y="197" width="0.1631%" height="15" fill="rgb(205,204,26)" fg:x="622" fg:w="2"/><text x="50.9841%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8157%" y="181" width="0.0816%" height="15" fill="rgb(224,68,54)" fg:x="623" fg:w="1"/><text x="51.0657%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.2235%" y="293" width="0.0816%" height="15" fill="rgb(209,67,4)" fg:x="628" fg:w="1"/><text x="51.4735%" y="303.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="51.5498%" y="245" width="0.0816%" height="15" fill="rgb(228,229,18)" fg:x="632" fg:w="1"/><text x="51.7998%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.49%)</title><rect x="51.3051%" y="293" width="0.4894%" height="15" fill="rgb(231,89,13)" fg:x="629" fg:w="6"/><text x="51.5551%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="51.4682%" y="277" width="0.3263%" height="15" fill="rgb(210,182,18)" fg:x="631" fg:w="4"/><text x="51.7182%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="51.5498%" y="261" width="0.2447%" height="15" fill="rgb(240,105,2)" fg:x="632" fg:w="3"/><text x="51.7998%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="51.6313%" y="245" width="0.1631%" height="15" fill="rgb(207,170,50)" fg:x="633" fg:w="2"/><text x="51.8813%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (10 samples, 0.82%)</title><rect x="51.7945%" y="293" width="0.8157%" height="15" fill="rgb(232,133,24)" fg:x="635" fg:w="10"/><text x="52.0445%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.5285%" y="277" width="0.0816%" height="15" fill="rgb(235,166,27)" fg:x="644" fg:w="1"/><text x="52.7785%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.5285%" y="261" width="0.0816%" height="15" fill="rgb(209,19,13)" fg:x="644" fg:w="1"/><text x="52.7785%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (230 samples, 18.76%)</title><rect x="33.9315%" y="341" width="18.7602%" height="15" fill="rgb(226,79,39)" fg:x="416" fg:w="230"/><text x="34.1815%" y="351.50">regex_automata::meta::strateg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (160 samples, 13.05%)</title><rect x="39.6411%" y="325" width="13.0506%" height="15" fill="rgb(222,163,10)" fg:x="486" fg:w="160"/><text x="39.8911%" y="335.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (22 samples, 1.79%)</title><rect x="50.8972%" y="309" width="1.7945%" height="15" fill="rgb(214,44,19)" fg:x="624" fg:w="22"/><text x="51.1472%" y="319.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="52.6101%" y="293" width="0.0816%" height="15" fill="rgb(210,217,13)" fg:x="645" fg:w="1"/><text x="52.8601%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="52.8548%" y="277" width="0.3263%" height="15" fill="rgb(237,61,54)" fg:x="648" fg:w="4"/><text x="53.1048%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="52.8548%" y="261" width="0.3263%" height="15" fill="rgb(226,184,24)" fg:x="648" fg:w="4"/><text x="53.1048%" y="271.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="52.8548%" y="245" width="0.3263%" height="15" fill="rgb(223,226,4)" fg:x="648" fg:w="4"/><text x="53.1048%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="52.8548%" y="309" width="0.4078%" height="15" fill="rgb(210,26,41)" fg:x="648" fg:w="5"/><text x="53.1048%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.41%)</title><rect x="52.8548%" y="293" width="0.4078%" height="15" fill="rgb(220,221,6)" fg:x="648" fg:w="5"/><text x="53.1048%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="53.1811%" y="277" width="0.0816%" height="15" fill="rgb(225,89,49)" fg:x="652" fg:w="1"/><text x="53.4311%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="53.2626%" y="309" width="0.0816%" height="15" fill="rgb(218,70,45)" fg:x="653" fg:w="1"/><text x="53.5126%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="53.3442%" y="309" width="0.0816%" height="15" fill="rgb(238,166,21)" fg:x="654" fg:w="1"/><text x="53.5942%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.90%)</title><rect x="52.6917%" y="341" width="0.8972%" height="15" fill="rgb(224,141,44)" fg:x="646" fg:w="11"/><text x="52.9417%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.90%)</title><rect x="52.6917%" y="325" width="0.8972%" height="15" fill="rgb(230,12,49)" fg:x="646" fg:w="11"/><text x="52.9417%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="53.4258%" y="309" width="0.1631%" height="15" fill="rgb(212,174,12)" fg:x="655" fg:w="2"/><text x="53.6758%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.41%)</title><rect x="53.7520%" y="293" width="0.4078%" height="15" fill="rgb(246,67,9)" fg:x="659" fg:w="5"/><text x="54.0020%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="54.0783%" y="277" width="0.0816%" height="15" fill="rgb(239,35,23)" fg:x="663" fg:w="1"/><text x="54.3283%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.57%)</title><rect x="53.6705%" y="309" width="0.5710%" height="15" fill="rgb(211,167,0)" fg:x="658" fg:w="7"/><text x="53.9205%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="54.1599%" y="293" width="0.0816%" height="15" fill="rgb(225,119,45)" fg:x="664" fg:w="1"/><text x="54.4099%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.1599%" y="277" width="0.0816%" height="15" fill="rgb(210,162,6)" fg:x="664" fg:w="1"/><text x="54.4099%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="54.2414%" y="309" width="0.0816%" height="15" fill="rgb(208,118,35)" fg:x="665" fg:w="1"/><text x="54.4914%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (286 samples, 23.33%)</title><rect x="31.1582%" y="405" width="23.3279%" height="15" fill="rgb(239,4,53)" fg:x="382" fg:w="286"/><text x="31.4082%" y="415.50">indefinite::rules::number::Number::ch..</text></g><g><title>regex::regex::string::Regex::new (260 samples, 21.21%)</title><rect x="33.2790%" y="389" width="21.2072%" height="15" fill="rgb(213,130,21)" fg:x="408" fg:w="260"/><text x="33.5290%" y="399.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (260 samples, 21.21%)</title><rect x="33.2790%" y="373" width="21.2072%" height="15" fill="rgb(235,148,0)" fg:x="408" fg:w="260"/><text x="33.5290%" y="383.50">regex::builders::Builder::build_o..</text></g><g><title>regex_automata::meta::regex::Builder::build (260 samples, 21.21%)</title><rect x="33.2790%" y="357" width="21.2072%" height="15" fill="rgb(244,224,18)" fg:x="408" fg:w="260"/><text x="33.5290%" y="367.50">regex_automata::meta::regex::Buil..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.90%)</title><rect x="53.5889%" y="341" width="0.8972%" height="15" fill="rgb(211,214,4)" fg:x="657" fg:w="11"/><text x="53.8389%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.90%)</title><rect x="53.5889%" y="325" width="0.8972%" height="15" fill="rgb(206,119,25)" fg:x="657" fg:w="11"/><text x="53.8389%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="54.3230%" y="309" width="0.1631%" height="15" fill="rgb(243,93,47)" fg:x="666" fg:w="2"/><text x="54.5730%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="54.4046%" y="293" width="0.0816%" height="15" fill="rgb(224,194,6)" fg:x="667" fg:w="1"/><text x="54.6546%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.4046%" y="277" width="0.0816%" height="15" fill="rgb(243,229,6)" fg:x="667" fg:w="1"/><text x="54.6546%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.4046%" y="261" width="0.0816%" height="15" fill="rgb(207,23,50)" fg:x="667" fg:w="1"/><text x="54.6546%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.4046%" y="245" width="0.0816%" height="15" fill="rgb(253,192,32)" fg:x="667" fg:w="1"/><text x="54.6546%" y="255.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="54.4861%" y="389" width="0.0816%" height="15" fill="rgb(213,21,6)" fg:x="668" fg:w="1"/><text x="54.7361%" y="399.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (1 samples, 0.08%)</title><rect x="54.4861%" y="373" width="0.0816%" height="15" fill="rgb(243,151,13)" fg:x="668" fg:w="1"/><text x="54.7361%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="54.5677%" y="373" width="0.1631%" height="15" fill="rgb(233,165,41)" fg:x="669" fg:w="2"/><text x="54.8177%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="54.5677%" y="357" width="0.1631%" height="15" fill="rgb(246,176,45)" fg:x="669" fg:w="2"/><text x="54.8177%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="54.6493%" y="341" width="0.0816%" height="15" fill="rgb(217,170,52)" fg:x="670" fg:w="1"/><text x="54.8993%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.7308%" y="341" width="0.0816%" height="15" fill="rgb(214,203,54)" fg:x="671" fg:w="1"/><text x="54.9808%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="54.7308%" y="325" width="0.0816%" height="15" fill="rgb(248,215,49)" fg:x="671" fg:w="1"/><text x="54.9808%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.7308%" y="309" width="0.0816%" height="15" fill="rgb(208,46,10)" fg:x="671" fg:w="1"/><text x="54.9808%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.7308%" y="293" width="0.0816%" height="15" fill="rgb(254,5,31)" fg:x="671" fg:w="1"/><text x="54.9808%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="54.7308%" y="373" width="0.3263%" height="15" fill="rgb(222,104,33)" fg:x="671" fg:w="4"/><text x="54.9808%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="54.7308%" y="357" width="0.3263%" height="15" fill="rgb(248,49,16)" fg:x="671" fg:w="4"/><text x="54.9808%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="54.8124%" y="341" width="0.2447%" height="15" fill="rgb(232,198,41)" fg:x="672" fg:w="3"/><text x="55.0624%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="54.8124%" y="325" width="0.2447%" height="15" fill="rgb(214,125,3)" fg:x="672" fg:w="3"/><text x="55.0624%" y="335.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="54.8124%" y="309" width="0.2447%" height="15" fill="rgb(229,220,28)" fg:x="672" fg:w="3"/><text x="55.0624%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0571%" y="325" width="0.0816%" height="15" fill="rgb(222,64,37)" fg:x="675" fg:w="1"/><text x="55.3071%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.0571%" y="309" width="0.0816%" height="15" fill="rgb(249,184,13)" fg:x="675" fg:w="1"/><text x="55.3071%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="55.1387%" y="325" width="0.0816%" height="15" fill="rgb(252,176,6)" fg:x="676" fg:w="1"/><text x="55.3887%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.1387%" y="309" width="0.0816%" height="15" fill="rgb(228,153,7)" fg:x="676" fg:w="1"/><text x="55.3887%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="55.1387%" y="293" width="0.0816%" height="15" fill="rgb(242,193,5)" fg:x="676" fg:w="1"/><text x="55.3887%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.1387%" y="277" width="0.0816%" height="15" fill="rgb(232,140,9)" fg:x="676" fg:w="1"/><text x="55.3887%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.1387%" y="261" width="0.0816%" height="15" fill="rgb(213,222,16)" fg:x="676" fg:w="1"/><text x="55.3887%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.1387%" y="245" width="0.0816%" height="15" fill="rgb(222,75,50)" fg:x="676" fg:w="1"/><text x="55.3887%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="55.2202%" y="325" width="0.0816%" height="15" fill="rgb(205,180,2)" fg:x="677" fg:w="1"/><text x="55.4702%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.2202%" y="309" width="0.0816%" height="15" fill="rgb(216,34,7)" fg:x="677" fg:w="1"/><text x="55.4702%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.5465%" y="309" width="0.1631%" height="15" fill="rgb(253,16,32)" fg:x="681" fg:w="2"/><text x="55.7965%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="55.7096%" y="309" width="0.0816%" height="15" fill="rgb(208,97,28)" fg:x="683" fg:w="1"/><text x="55.9596%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="55.7912%" y="309" width="0.1631%" height="15" fill="rgb(225,92,11)" fg:x="684" fg:w="2"/><text x="56.0412%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="55.7912%" y="293" width="0.1631%" height="15" fill="rgb(243,38,12)" fg:x="684" fg:w="2"/><text x="56.0412%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.9543%" y="277" width="0.0816%" height="15" fill="rgb(208,139,16)" fg:x="686" fg:w="1"/><text x="56.2043%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.9543%" y="261" width="0.0816%" height="15" fill="rgb(227,24,9)" fg:x="686" fg:w="1"/><text x="56.2043%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.9543%" y="245" width="0.0816%" height="15" fill="rgb(206,62,11)" fg:x="686" fg:w="1"/><text x="56.2043%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.9543%" y="229" width="0.0816%" height="15" fill="rgb(228,134,27)" fg:x="686" fg:w="1"/><text x="56.2043%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="55.9543%" y="293" width="0.1631%" height="15" fill="rgb(205,55,33)" fg:x="686" fg:w="2"/><text x="56.2043%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="56.0359%" y="277" width="0.0816%" height="15" fill="rgb(243,75,43)" fg:x="687" fg:w="1"/><text x="56.2859%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="56.0359%" y="261" width="0.0816%" height="15" fill="rgb(223,27,42)" fg:x="687" fg:w="1"/><text x="56.2859%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="56.0359%" y="245" width="0.0816%" height="15" fill="rgb(232,189,33)" fg:x="687" fg:w="1"/><text x="56.2859%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.1175%" y="277" width="0.0816%" height="15" fill="rgb(210,9,39)" fg:x="688" fg:w="1"/><text x="56.3675%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (15 samples, 1.22%)</title><rect x="55.3018%" y="325" width="1.2235%" height="15" fill="rgb(242,85,26)" fg:x="678" fg:w="15"/><text x="55.5518%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.57%)</title><rect x="55.9543%" y="309" width="0.5710%" height="15" fill="rgb(248,44,4)" fg:x="686" fg:w="7"/><text x="56.2043%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="56.1175%" y="293" width="0.4078%" height="15" fill="rgb(250,96,46)" fg:x="688" fg:w="5"/><text x="56.3675%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="56.1990%" y="277" width="0.3263%" height="15" fill="rgb(229,116,26)" fg:x="689" fg:w="4"/><text x="56.4490%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.4437%" y="261" width="0.0816%" height="15" fill="rgb(246,94,34)" fg:x="692" fg:w="1"/><text x="56.6937%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.4437%" y="245" width="0.0816%" height="15" fill="rgb(251,73,21)" fg:x="692" fg:w="1"/><text x="56.6937%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4437%" y="229" width="0.0816%" height="15" fill="rgb(254,121,25)" fg:x="692" fg:w="1"/><text x="56.6937%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="56.6884%" y="277" width="0.1631%" height="15" fill="rgb(215,161,49)" fg:x="695" fg:w="2"/><text x="56.9384%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="56.7700%" y="261" width="0.0816%" height="15" fill="rgb(221,43,13)" fg:x="696" fg:w="1"/><text x="57.0200%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="56.5253%" y="293" width="0.4894%" height="15" fill="rgb(249,5,37)" fg:x="693" fg:w="6"/><text x="56.7753%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="56.8515%" y="277" width="0.1631%" height="15" fill="rgb(226,25,44)" fg:x="697" fg:w="2"/><text x="57.1015%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="56.8515%" y="261" width="0.1631%" height="15" fill="rgb(238,189,16)" fg:x="697" fg:w="2"/><text x="57.1015%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.8515%" y="245" width="0.1631%" height="15" fill="rgb(251,186,8)" fg:x="697" fg:w="2"/><text x="57.1015%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.8515%" y="229" width="0.1631%" height="15" fill="rgb(254,34,31)" fg:x="697" fg:w="2"/><text x="57.1015%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="56.5253%" y="325" width="0.5710%" height="15" fill="rgb(225,215,27)" fg:x="693" fg:w="7"/><text x="56.7753%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="56.5253%" y="309" width="0.5710%" height="15" fill="rgb(221,192,48)" fg:x="693" fg:w="7"/><text x="56.7753%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="57.0147%" y="293" width="0.0816%" height="15" fill="rgb(219,137,20)" fg:x="699" fg:w="1"/><text x="57.2647%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="57.1778%" y="293" width="0.1631%" height="15" fill="rgb(219,84,11)" fg:x="701" fg:w="2"/><text x="57.4278%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="57.1778%" y="277" width="0.1631%" height="15" fill="rgb(224,10,23)" fg:x="701" fg:w="2"/><text x="57.4278%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.2594%" y="261" width="0.0816%" height="15" fill="rgb(248,22,39)" fg:x="702" fg:w="1"/><text x="57.5094%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2594%" y="245" width="0.0816%" height="15" fill="rgb(212,154,20)" fg:x="702" fg:w="1"/><text x="57.5094%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.2594%" y="229" width="0.0816%" height="15" fill="rgb(236,199,50)" fg:x="702" fg:w="1"/><text x="57.5094%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (29 samples, 2.37%)</title><rect x="55.0571%" y="373" width="2.3654%" height="15" fill="rgb(211,9,17)" fg:x="675" fg:w="29"/><text x="55.3071%" y="383.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (29 samples, 2.37%)</title><rect x="55.0571%" y="357" width="2.3654%" height="15" fill="rgb(243,216,36)" fg:x="675" fg:w="29"/><text x="55.3071%" y="367.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.37%)</title><rect x="55.0571%" y="341" width="2.3654%" height="15" fill="rgb(250,2,10)" fg:x="675" fg:w="29"/><text x="55.3071%" y="351.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="57.0962%" y="325" width="0.3263%" height="15" fill="rgb(226,50,48)" fg:x="700" fg:w="4"/><text x="57.3462%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="57.0962%" y="309" width="0.3263%" height="15" fill="rgb(243,81,16)" fg:x="700" fg:w="4"/><text x="57.3462%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="57.3409%" y="293" width="0.0816%" height="15" fill="rgb(250,14,2)" fg:x="703" fg:w="1"/><text x="57.5909%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="57.3409%" y="277" width="0.0816%" height="15" fill="rgb(233,135,29)" fg:x="703" fg:w="1"/><text x="57.5909%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="57.5041%" y="309" width="0.5710%" height="15" fill="rgb(224,64,43)" fg:x="705" fg:w="7"/><text x="57.7541%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="57.8303%" y="293" width="0.2447%" height="15" fill="rgb(238,84,13)" fg:x="709" fg:w="3"/><text x="58.0803%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.65%)</title><rect x="57.5041%" y="325" width="0.6525%" height="15" fill="rgb(253,48,26)" fg:x="705" fg:w="8"/><text x="57.7541%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="58.0750%" y="309" width="0.0816%" height="15" fill="rgb(205,223,31)" fg:x="712" fg:w="1"/><text x="58.3250%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.0750%" y="293" width="0.0816%" height="15" fill="rgb(221,41,32)" fg:x="712" fg:w="1"/><text x="58.3250%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.0750%" y="277" width="0.0816%" height="15" fill="rgb(213,158,31)" fg:x="712" fg:w="1"/><text x="58.3250%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.0750%" y="261" width="0.0816%" height="15" fill="rgb(245,126,43)" fg:x="712" fg:w="1"/><text x="58.3250%" y="271.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (45 samples, 3.67%)</title><rect x="54.5677%" y="389" width="3.6705%" height="15" fill="rgb(227,7,22)" fg:x="669" fg:w="45"/><text x="54.8177%" y="399.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.82%)</title><rect x="57.4225%" y="373" width="0.8157%" height="15" fill="rgb(252,90,44)" fg:x="704" fg:w="10"/><text x="57.6725%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.82%)</title><rect x="57.4225%" y="357" width="0.8157%" height="15" fill="rgb(253,91,0)" fg:x="704" fg:w="10"/><text x="57.6725%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.82%)</title><rect x="57.4225%" y="341" width="0.8157%" height="15" fill="rgb(252,175,49)" fg:x="704" fg:w="10"/><text x="57.6725%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="58.1566%" y="325" width="0.0816%" height="15" fill="rgb(246,150,1)" fg:x="713" fg:w="1"/><text x="58.4066%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="58.1566%" y="309" width="0.0816%" height="15" fill="rgb(241,192,25)" fg:x="713" fg:w="1"/><text x="58.4066%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.1566%" y="293" width="0.0816%" height="15" fill="rgb(239,187,11)" fg:x="713" fg:w="1"/><text x="58.4066%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.1566%" y="277" width="0.0816%" height="15" fill="rgb(218,202,51)" fg:x="713" fg:w="1"/><text x="58.4066%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1566%" y="261" width="0.0816%" height="15" fill="rgb(225,176,8)" fg:x="713" fg:w="1"/><text x="58.4066%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (572 samples, 46.66%)</title><rect x="11.6639%" y="485" width="46.6558%" height="15" fill="rgb(219,122,41)" fg:x="143" fg:w="572"/><text x="11.9139%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replie..</text></g><g><title>plugins_core::looking::model::qualify_name (570 samples, 46.49%)</title><rect x="11.8271%" y="469" width="46.4927%" height="15" fill="rgb(248,140,20)" fg:x="145" fg:w="570"/><text x="12.0771%" y="479.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (570 samples, 46.49%)</title><rect x="11.8271%" y="453" width="46.4927%" height="15" fill="rgb(245,41,37)" fg:x="145" fg:w="570"/><text x="12.0771%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (570 samples, 46.49%)</title><rect x="11.8271%" y="437" width="46.4927%" height="15" fill="rgb(235,82,39)" fg:x="145" fg:w="570"/><text x="12.0771%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (569 samples, 46.41%)</title><rect x="11.9086%" y="421" width="46.4111%" height="15" fill="rgb(230,108,42)" fg:x="146" fg:w="569"/><text x="12.1586%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (47 samples, 3.83%)</title><rect x="54.4861%" y="405" width="3.8336%" height="15" fill="rgb(215,150,50)" fg:x="668" fg:w="47"/><text x="54.7361%" y="415.50">inde..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="58.2382%" y="389" width="0.0816%" height="15" fill="rgb(233,212,5)" fg:x="714" fg:w="1"/><text x="58.4882%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.3197%" y="453" width="0.1631%" height="15" fill="rgb(245,80,22)" fg:x="715" fg:w="2"/><text x="58.5697%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.4013%" y="437" width="0.0816%" height="15" fill="rgb(238,129,16)" fg:x="716" fg:w="1"/><text x="58.6513%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.4013%" y="421" width="0.0816%" height="15" fill="rgb(240,19,0)" fg:x="716" fg:w="1"/><text x="58.6513%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.5644%" y="421" width="0.0816%" height="15" fill="rgb(232,42,35)" fg:x="718" fg:w="1"/><text x="58.8144%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.5644%" y="405" width="0.0816%" height="15" fill="rgb(223,130,24)" fg:x="718" fg:w="1"/><text x="58.8144%" y="415.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (579 samples, 47.23%)</title><rect x="11.5008%" y="517" width="47.2268%" height="15" fill="rgb(237,16,22)" fg:x="141" fg:w="579"/><text x="11.7508%" y="527.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (578 samples, 47.15%)</title><rect x="11.5824%" y="501" width="47.1452%" height="15" fill="rgb(248,192,20)" fg:x="142" fg:w="578"/><text x="11.8324%" y="511.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.41%)</title><rect x="58.3197%" y="485" width="0.4078%" height="15" fill="rgb(233,167,2)" fg:x="715" fg:w="5"/><text x="58.5697%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.41%)</title><rect x="58.3197%" y="469" width="0.4078%" height="15" fill="rgb(252,71,44)" fg:x="715" fg:w="5"/><text x="58.5697%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="58.4829%" y="453" width="0.2447%" height="15" fill="rgb(238,37,47)" fg:x="717" fg:w="3"/><text x="58.7329%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.4829%" y="437" width="0.2447%" height="15" fill="rgb(214,202,54)" fg:x="717" fg:w="3"/><text x="58.7329%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="58.6460%" y="421" width="0.0816%" height="15" fill="rgb(254,165,40)" fg:x="719" fg:w="1"/><text x="58.8960%" y="431.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="58.7276%" y="469" width="0.0816%" height="15" fill="rgb(246,173,38)" fg:x="720" fg:w="1"/><text x="58.9776%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.7276%" y="453" width="0.0816%" height="15" fill="rgb(215,3,27)" fg:x="720" fg:w="1"/><text x="58.9776%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="58.7276%" y="437" width="0.0816%" height="15" fill="rgb(239,169,51)" fg:x="720" fg:w="1"/><text x="58.9776%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="58.8091%" y="453" width="0.0816%" height="15" fill="rgb(212,5,25)" fg:x="721" fg:w="1"/><text x="59.0591%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="58.8091%" y="437" width="0.0816%" height="15" fill="rgb(243,45,17)" fg:x="721" fg:w="1"/><text x="59.0591%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.8091%" y="421" width="0.0816%" height="15" fill="rgb(242,97,9)" fg:x="721" fg:w="1"/><text x="59.0591%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.8091%" y="405" width="0.0816%" height="15" fill="rgb(228,71,31)" fg:x="721" fg:w="1"/><text x="59.0591%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.8091%" y="389" width="0.0816%" height="15" fill="rgb(252,184,16)" fg:x="721" fg:w="1"/><text x="59.0591%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.8091%" y="373" width="0.0816%" height="15" fill="rgb(236,169,46)" fg:x="721" fg:w="1"/><text x="59.0591%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.8091%" y="357" width="0.0816%" height="15" fill="rgb(207,17,47)" fg:x="721" fg:w="1"/><text x="59.0591%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.8091%" y="341" width="0.0816%" height="15" fill="rgb(206,201,28)" fg:x="721" fg:w="1"/><text x="59.0591%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.8091%" y="325" width="0.0816%" height="15" fill="rgb(224,184,23)" fg:x="721" fg:w="1"/><text x="59.0591%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="58.8091%" y="309" width="0.0816%" height="15" fill="rgb(208,139,48)" fg:x="721" fg:w="1"/><text x="59.0591%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="58.9723%" y="309" width="0.0816%" height="15" fill="rgb(208,130,10)" fg:x="723" fg:w="1"/><text x="59.2223%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="58.9723%" y="293" width="0.0816%" height="15" fill="rgb(211,213,45)" fg:x="723" fg:w="1"/><text x="59.2223%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="59.0538%" y="277" width="0.0816%" height="15" fill="rgb(235,100,30)" fg:x="724" fg:w="1"/><text x="59.3038%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="59.0538%" y="309" width="0.1631%" height="15" fill="rgb(206,144,31)" fg:x="724" fg:w="2"/><text x="59.3038%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="59.0538%" y="293" width="0.1631%" height="15" fill="rgb(224,200,26)" fg:x="724" fg:w="2"/><text x="59.3038%" y="303.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="59.1354%" y="277" width="0.0816%" height="15" fill="rgb(247,104,53)" fg:x="725" fg:w="1"/><text x="59.3854%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="58.9723%" y="325" width="0.3263%" height="15" fill="rgb(220,14,17)" fg:x="723" fg:w="4"/><text x="59.2223%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.2170%" y="309" width="0.0816%" height="15" fill="rgb(230,140,40)" fg:x="726" fg:w="1"/><text x="59.4670%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.2170%" y="293" width="0.0816%" height="15" fill="rgb(229,2,41)" fg:x="726" fg:w="1"/><text x="59.4670%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.2170%" y="277" width="0.0816%" height="15" fill="rgb(232,89,16)" fg:x="726" fg:w="1"/><text x="59.4670%" y="287.50"></text></g><g><title>engine::internal::Entities::prepare_entity (8 samples, 0.65%)</title><rect x="58.7276%" y="485" width="0.6525%" height="15" fill="rgb(247,59,52)" fg:x="720" fg:w="8"/><text x="58.9776%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.57%)</title><rect x="58.8091%" y="469" width="0.5710%" height="15" fill="rgb(226,110,21)" fg:x="721" fg:w="7"/><text x="59.0591%" y="479.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="58.8907%" y="453" width="0.4894%" height="15" fill="rgb(224,176,43)" fg:x="722" fg:w="6"/><text x="59.1407%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.49%)</title><rect x="58.8907%" y="437" width="0.4894%" height="15" fill="rgb(221,73,6)" fg:x="722" fg:w="6"/><text x="59.1407%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="58.8907%" y="421" width="0.4894%" height="15" fill="rgb(232,78,19)" fg:x="722" fg:w="6"/><text x="59.1407%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.49%)</title><rect x="58.8907%" y="405" width="0.4894%" height="15" fill="rgb(233,112,48)" fg:x="722" fg:w="6"/><text x="59.1407%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="58.9723%" y="389" width="0.4078%" height="15" fill="rgb(243,131,47)" fg:x="723" fg:w="5"/><text x="59.2223%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.41%)</title><rect x="58.9723%" y="373" width="0.4078%" height="15" fill="rgb(226,51,1)" fg:x="723" fg:w="5"/><text x="59.2223%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="58.9723%" y="357" width="0.4078%" height="15" fill="rgb(247,58,7)" fg:x="723" fg:w="5"/><text x="59.2223%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.41%)</title><rect x="58.9723%" y="341" width="0.4078%" height="15" fill="rgb(209,7,32)" fg:x="723" fg:w="5"/><text x="59.2223%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.2985%" y="325" width="0.0816%" height="15" fill="rgb(209,39,41)" fg:x="727" fg:w="1"/><text x="59.5485%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.2985%" y="309" width="0.0816%" height="15" fill="rgb(226,182,46)" fg:x="727" fg:w="1"/><text x="59.5485%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.2985%" y="293" width="0.0816%" height="15" fill="rgb(230,219,10)" fg:x="727" fg:w="1"/><text x="59.5485%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="59.2985%" y="277" width="0.0816%" height="15" fill="rgb(227,175,30)" fg:x="727" fg:w="1"/><text x="59.5485%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (9 samples, 0.73%)</title><rect x="58.7276%" y="501" width="0.7341%" height="15" fill="rgb(217,2,50)" fg:x="720" fg:w="9"/><text x="58.9776%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="59.3801%" y="485" width="0.0816%" height="15" fill="rgb(229,160,0)" fg:x="728" fg:w="1"/><text x="59.6301%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="59.3801%" y="469" width="0.0816%" height="15" fill="rgb(207,78,37)" fg:x="728" fg:w="1"/><text x="59.6301%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="59.3801%" y="453" width="0.0816%" height="15" fill="rgb(225,57,0)" fg:x="728" fg:w="1"/><text x="59.6301%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="59.3801%" y="437" width="0.0816%" height="15" fill="rgb(232,154,2)" fg:x="728" fg:w="1"/><text x="59.6301%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="59.3801%" y="421" width="0.0816%" height="15" fill="rgb(241,212,25)" fg:x="728" fg:w="1"/><text x="59.6301%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="59.3801%" y="405" width="0.0816%" height="15" fill="rgb(226,69,20)" fg:x="728" fg:w="1"/><text x="59.6301%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="59.3801%" y="389" width="0.0816%" height="15" fill="rgb(247,184,54)" fg:x="728" fg:w="1"/><text x="59.6301%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="59.3801%" y="373" width="0.0816%" height="15" fill="rgb(210,145,0)" fg:x="728" fg:w="1"/><text x="59.6301%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="59.3801%" y="357" width="0.0816%" height="15" fill="rgb(253,82,12)" fg:x="728" fg:w="1"/><text x="59.6301%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="59.3801%" y="341" width="0.0816%" height="15" fill="rgb(245,42,11)" fg:x="728" fg:w="1"/><text x="59.6301%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="59.3801%" y="325" width="0.0816%" height="15" fill="rgb(219,147,32)" fg:x="728" fg:w="1"/><text x="59.6301%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="59.3801%" y="309" width="0.0816%" height="15" fill="rgb(246,12,7)" fg:x="728" fg:w="1"/><text x="59.6301%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="59.3801%" y="293" width="0.0816%" height="15" fill="rgb(243,50,9)" fg:x="728" fg:w="1"/><text x="59.6301%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.3801%" y="277" width="0.0816%" height="15" fill="rgb(219,149,6)" fg:x="728" fg:w="1"/><text x="59.6301%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="59.3801%" y="261" width="0.0816%" height="15" fill="rgb(241,51,42)" fg:x="728" fg:w="1"/><text x="59.6301%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="59.3801%" y="245" width="0.0816%" height="15" fill="rgb(226,128,27)" fg:x="728" fg:w="1"/><text x="59.6301%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="59.3801%" y="229" width="0.0816%" height="15" fill="rgb(244,144,4)" fg:x="728" fg:w="1"/><text x="59.6301%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.3801%" y="213" width="0.0816%" height="15" fill="rgb(221,4,13)" fg:x="728" fg:w="1"/><text x="59.6301%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="59.3801%" y="197" width="0.0816%" height="15" fill="rgb(208,170,28)" fg:x="728" fg:w="1"/><text x="59.6301%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.3801%" y="181" width="0.0816%" height="15" fill="rgb(226,131,13)" fg:x="728" fg:w="1"/><text x="59.6301%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="59.3801%" y="165" width="0.0816%" height="15" fill="rgb(215,72,41)" fg:x="728" fg:w="1"/><text x="59.6301%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="59.3801%" y="149" width="0.0816%" height="15" fill="rgb(243,108,20)" fg:x="728" fg:w="1"/><text x="59.6301%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="59.3801%" y="133" width="0.0816%" height="15" fill="rgb(230,189,17)" fg:x="728" fg:w="1"/><text x="59.6301%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.3801%" y="117" width="0.0816%" height="15" fill="rgb(220,50,17)" fg:x="728" fg:w="1"/><text x="59.6301%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.4617%" y="501" width="0.0816%" height="15" fill="rgb(248,152,48)" fg:x="729" fg:w="1"/><text x="59.7117%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.6248%" y="325" width="0.0816%" height="15" fill="rgb(244,91,11)" fg:x="731" fg:w="1"/><text x="59.8748%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.6248%" y="309" width="0.0816%" height="15" fill="rgb(220,157,5)" fg:x="731" fg:w="1"/><text x="59.8748%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.6248%" y="293" width="0.0816%" height="15" fill="rgb(253,137,8)" fg:x="731" fg:w="1"/><text x="59.8748%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.6248%" y="277" width="0.0816%" height="15" fill="rgb(217,137,51)" fg:x="731" fg:w="1"/><text x="59.8748%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.6248%" y="261" width="0.0816%" height="15" fill="rgb(218,209,53)" fg:x="731" fg:w="1"/><text x="59.8748%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="59.6248%" y="437" width="0.1631%" height="15" fill="rgb(249,137,25)" fg:x="731" fg:w="2"/><text x="59.8748%" y="447.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="59.6248%" y="421" width="0.1631%" height="15" fill="rgb(239,155,26)" fg:x="731" fg:w="2"/><text x="59.8748%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="59.6248%" y="405" width="0.1631%" height="15" fill="rgb(227,85,46)" fg:x="731" fg:w="2"/><text x="59.8748%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="59.6248%" y="389" width="0.1631%" height="15" fill="rgb(251,107,43)" fg:x="731" fg:w="2"/><text x="59.8748%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="59.6248%" y="373" width="0.1631%" height="15" fill="rgb(234,170,33)" fg:x="731" fg:w="2"/><text x="59.8748%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.6248%" y="357" width="0.1631%" height="15" fill="rgb(206,29,35)" fg:x="731" fg:w="2"/><text x="59.8748%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.6248%" y="341" width="0.1631%" height="15" fill="rgb(227,138,25)" fg:x="731" fg:w="2"/><text x="59.8748%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.7064%" y="325" width="0.0816%" height="15" fill="rgb(249,131,35)" fg:x="732" fg:w="1"/><text x="59.9564%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.7064%" y="309" width="0.0816%" height="15" fill="rgb(239,6,40)" fg:x="732" fg:w="1"/><text x="59.9564%" y="319.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (4 samples, 0.33%)</title><rect x="59.5432%" y="501" width="0.3263%" height="15" fill="rgb(246,136,47)" fg:x="730" fg:w="4"/><text x="59.7932%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.33%)</title><rect x="59.5432%" y="485" width="0.3263%" height="15" fill="rgb(253,58,26)" fg:x="730" fg:w="4"/><text x="59.7932%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="59.5432%" y="469" width="0.3263%" height="15" fill="rgb(237,141,10)" fg:x="730" fg:w="4"/><text x="59.7932%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.33%)</title><rect x="59.5432%" y="453" width="0.3263%" height="15" fill="rgb(234,156,12)" fg:x="730" fg:w="4"/><text x="59.7932%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.7879%" y="437" width="0.0816%" height="15" fill="rgb(243,224,36)" fg:x="733" fg:w="1"/><text x="60.0379%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.7879%" y="421" width="0.0816%" height="15" fill="rgb(205,229,51)" fg:x="733" fg:w="1"/><text x="60.0379%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.7879%" y="405" width="0.0816%" height="15" fill="rgb(223,189,4)" fg:x="733" fg:w="1"/><text x="60.0379%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.7879%" y="389" width="0.0816%" height="15" fill="rgb(249,167,54)" fg:x="733" fg:w="1"/><text x="60.0379%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.7879%" y="373" width="0.0816%" height="15" fill="rgb(218,34,28)" fg:x="733" fg:w="1"/><text x="60.0379%" y="383.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (15 samples, 1.22%)</title><rect x="58.7276%" y="517" width="1.2235%" height="15" fill="rgb(232,109,42)" fg:x="720" fg:w="15"/><text x="58.9776%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="59.8695%" y="501" width="0.0816%" height="15" fill="rgb(248,214,46)" fg:x="734" fg:w="1"/><text x="60.1195%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0326%" y="421" width="0.0816%" height="15" fill="rgb(244,216,40)" fg:x="736" fg:w="1"/><text x="60.2826%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.0326%" y="453" width="0.2447%" height="15" fill="rgb(231,226,31)" fg:x="736" fg:w="3"/><text x="60.2826%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.0326%" y="437" width="0.2447%" height="15" fill="rgb(238,38,43)" fg:x="736" fg:w="3"/><text x="60.2826%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (2 samples, 0.16%)</title><rect x="60.1142%" y="421" width="0.1631%" height="15" fill="rgb(208,88,43)" fg:x="737" fg:w="2"/><text x="60.3642%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.1142%" y="405" width="0.1631%" height="15" fill="rgb(205,136,37)" fg:x="737" fg:w="2"/><text x="60.3642%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="60.1142%" y="389" width="0.1631%" height="15" fill="rgb(237,34,14)" fg:x="737" fg:w="2"/><text x="60.3642%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (5 samples, 0.41%)</title><rect x="59.9511%" y="485" width="0.4078%" height="15" fill="rgb(236,193,44)" fg:x="735" fg:w="5"/><text x="60.2011%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="59.9511%" y="469" width="0.4078%" height="15" fill="rgb(231,48,10)" fg:x="735" fg:w="5"/><text x="60.2011%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2773%" y="453" width="0.0816%" height="15" fill="rgb(213,141,34)" fg:x="739" fg:w="1"/><text x="60.5273%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.3589%" y="453" width="0.1631%" height="15" fill="rgb(249,130,34)" fg:x="740" fg:w="2"/><text x="60.6089%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4405%" y="437" width="0.0816%" height="15" fill="rgb(219,42,41)" fg:x="741" fg:w="1"/><text x="60.6905%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.5220%" y="405" width="0.0816%" height="15" fill="rgb(224,100,54)" fg:x="742" fg:w="1"/><text x="60.7720%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.5220%" y="389" width="0.0816%" height="15" fill="rgb(229,200,27)" fg:x="742" fg:w="1"/><text x="60.7720%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5220%" y="373" width="0.0816%" height="15" fill="rgb(217,118,10)" fg:x="742" fg:w="1"/><text x="60.7720%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6036%" y="389" width="0.0816%" height="15" fill="rgb(206,22,3)" fg:x="743" fg:w="1"/><text x="60.8536%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.6852%" y="373" width="0.0816%" height="15" fill="rgb(232,163,46)" fg:x="744" fg:w="1"/><text x="60.9352%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="60.6852%" y="357" width="0.0816%" height="15" fill="rgb(206,95,13)" fg:x="744" fg:w="1"/><text x="60.9352%" y="367.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="60.6852%" y="341" width="0.0816%" height="15" fill="rgb(253,154,18)" fg:x="744" fg:w="1"/><text x="60.9352%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="60.6852%" y="325" width="0.0816%" height="15" fill="rgb(219,32,23)" fg:x="744" fg:w="1"/><text x="60.9352%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="60.6852%" y="309" width="0.0816%" height="15" fill="rgb(230,191,45)" fg:x="744" fg:w="1"/><text x="60.9352%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="60.6852%" y="293" width="0.0816%" height="15" fill="rgb(229,64,36)" fg:x="744" fg:w="1"/><text x="60.9352%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.6852%" y="277" width="0.0816%" height="15" fill="rgb(205,129,25)" fg:x="744" fg:w="1"/><text x="60.9352%" y="287.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.6852%" y="261" width="0.0816%" height="15" fill="rgb(254,112,7)" fg:x="744" fg:w="1"/><text x="60.9352%" y="271.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.6852%" y="245" width="0.0816%" height="15" fill="rgb(226,53,48)" fg:x="744" fg:w="1"/><text x="60.9352%" y="255.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="60.6852%" y="229" width="0.0816%" height="15" fill="rgb(214,153,38)" fg:x="744" fg:w="1"/><text x="60.9352%" y="239.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="60.6852%" y="213" width="0.0816%" height="15" fill="rgb(243,101,7)" fg:x="744" fg:w="1"/><text x="60.9352%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.6852%" y="197" width="0.0816%" height="15" fill="rgb(240,140,22)" fg:x="744" fg:w="1"/><text x="60.9352%" y="207.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="60.6852%" y="181" width="0.0816%" height="15" fill="rgb(235,114,2)" fg:x="744" fg:w="1"/><text x="60.9352%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="60.6852%" y="165" width="0.0816%" height="15" fill="rgb(242,59,12)" fg:x="744" fg:w="1"/><text x="60.9352%" y="175.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="60.6852%" y="149" width="0.0816%" height="15" fill="rgb(252,134,9)" fg:x="744" fg:w="1"/><text x="60.9352%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="60.6852%" y="133" width="0.0816%" height="15" fill="rgb(236,4,44)" fg:x="744" fg:w="1"/><text x="60.9352%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="60.6852%" y="117" width="0.0816%" height="15" fill="rgb(254,172,41)" fg:x="744" fg:w="1"/><text x="60.9352%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="60.6852%" y="101" width="0.0816%" height="15" fill="rgb(244,63,20)" fg:x="744" fg:w="1"/><text x="60.9352%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.6852%" y="85" width="0.0816%" height="15" fill="rgb(250,73,31)" fg:x="744" fg:w="1"/><text x="60.9352%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7667%" y="357" width="0.0816%" height="15" fill="rgb(241,38,36)" fg:x="745" fg:w="1"/><text x="61.0167%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="60.6852%" y="389" width="0.2447%" height="15" fill="rgb(245,211,2)" fg:x="744" fg:w="3"/><text x="60.9352%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.7667%" y="373" width="0.1631%" height="15" fill="rgb(206,120,28)" fg:x="745" fg:w="2"/><text x="61.0167%" y="383.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="60.8483%" y="357" width="0.0816%" height="15" fill="rgb(211,59,34)" fg:x="746" fg:w="1"/><text x="61.0983%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="60.8483%" y="341" width="0.0816%" height="15" fill="rgb(233,168,5)" fg:x="746" fg:w="1"/><text x="61.0983%" y="351.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="60.8483%" y="325" width="0.0816%" height="15" fill="rgb(234,33,13)" fg:x="746" fg:w="1"/><text x="61.0983%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="60.8483%" y="309" width="0.0816%" height="15" fill="rgb(231,150,26)" fg:x="746" fg:w="1"/><text x="61.0983%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="60.8483%" y="293" width="0.0816%" height="15" fill="rgb(217,191,4)" fg:x="746" fg:w="1"/><text x="61.0983%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8483%" y="277" width="0.0816%" height="15" fill="rgb(246,198,38)" fg:x="746" fg:w="1"/><text x="61.0983%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8483%" y="261" width="0.0816%" height="15" fill="rgb(245,64,37)" fg:x="746" fg:w="1"/><text x="61.0983%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.8483%" y="245" width="0.0816%" height="15" fill="rgb(250,30,36)" fg:x="746" fg:w="1"/><text x="61.0983%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.8483%" y="229" width="0.0816%" height="15" fill="rgb(217,86,53)" fg:x="746" fg:w="1"/><text x="61.0983%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.8483%" y="213" width="0.0816%" height="15" fill="rgb(228,157,16)" fg:x="746" fg:w="1"/><text x="61.0983%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8483%" y="197" width="0.0816%" height="15" fill="rgb(217,59,31)" fg:x="746" fg:w="1"/><text x="61.0983%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8483%" y="181" width="0.0816%" height="15" fill="rgb(237,138,41)" fg:x="746" fg:w="1"/><text x="61.0983%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.8483%" y="165" width="0.0816%" height="15" fill="rgb(227,91,49)" fg:x="746" fg:w="1"/><text x="61.0983%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.8483%" y="149" width="0.0816%" height="15" fill="rgb(247,21,44)" fg:x="746" fg:w="1"/><text x="61.0983%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.8483%" y="133" width="0.0816%" height="15" fill="rgb(219,210,51)" fg:x="746" fg:w="1"/><text x="61.0983%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.8483%" y="117" width="0.0816%" height="15" fill="rgb(209,140,6)" fg:x="746" fg:w="1"/><text x="61.0983%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8483%" y="101" width="0.0816%" height="15" fill="rgb(221,188,24)" fg:x="746" fg:w="1"/><text x="61.0983%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="60.9299%" y="389" width="0.0816%" height="15" fill="rgb(232,154,20)" fg:x="747" fg:w="1"/><text x="61.1799%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (6 samples, 0.49%)</title><rect x="60.6036%" y="405" width="0.4894%" height="15" fill="rgb(244,137,50)" fg:x="743" fg:w="6"/><text x="60.8536%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="61.0114%" y="389" width="0.0816%" height="15" fill="rgb(225,185,43)" fg:x="748" fg:w="1"/><text x="61.2614%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="61.0114%" y="373" width="0.0816%" height="15" fill="rgb(213,205,38)" fg:x="748" fg:w="1"/><text x="61.2614%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0114%" y="357" width="0.0816%" height="15" fill="rgb(236,73,12)" fg:x="748" fg:w="1"/><text x="61.2614%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0114%" y="341" width="0.0816%" height="15" fill="rgb(235,219,13)" fg:x="748" fg:w="1"/><text x="61.2614%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.0114%" y="325" width="0.0816%" height="15" fill="rgb(218,59,36)" fg:x="748" fg:w="1"/><text x="61.2614%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.0930%" y="341" width="0.0816%" height="15" fill="rgb(205,110,39)" fg:x="749" fg:w="1"/><text x="61.3430%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.0930%" y="325" width="0.0816%" height="15" fill="rgb(218,206,42)" fg:x="749" fg:w="1"/><text x="61.3430%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.0930%" y="309" width="0.0816%" height="15" fill="rgb(248,125,24)" fg:x="749" fg:w="1"/><text x="61.3430%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.0930%" y="293" width="0.0816%" height="15" fill="rgb(242,28,27)" fg:x="749" fg:w="1"/><text x="61.3430%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.0930%" y="277" width="0.0816%" height="15" fill="rgb(216,228,15)" fg:x="749" fg:w="1"/><text x="61.3430%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.0930%" y="261" width="0.0816%" height="15" fill="rgb(235,116,46)" fg:x="749" fg:w="1"/><text x="61.3430%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.0930%" y="245" width="0.0816%" height="15" fill="rgb(224,18,32)" fg:x="749" fg:w="1"/><text x="61.3430%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.0930%" y="229" width="0.0816%" height="15" fill="rgb(252,5,12)" fg:x="749" fg:w="1"/><text x="61.3430%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="61.0930%" y="357" width="0.2447%" height="15" fill="rgb(251,36,5)" fg:x="749" fg:w="3"/><text x="61.3430%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.1746%" y="341" width="0.1631%" height="15" fill="rgb(217,53,14)" fg:x="750" fg:w="2"/><text x="61.4246%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.2561%" y="325" width="0.0816%" height="15" fill="rgb(215,86,45)" fg:x="751" fg:w="1"/><text x="61.5061%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2561%" y="309" width="0.0816%" height="15" fill="rgb(242,169,11)" fg:x="751" fg:w="1"/><text x="61.5061%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.2561%" y="293" width="0.0816%" height="15" fill="rgb(211,213,45)" fg:x="751" fg:w="1"/><text x="61.5061%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.2561%" y="277" width="0.0816%" height="15" fill="rgb(205,88,11)" fg:x="751" fg:w="1"/><text x="61.5061%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.2561%" y="261" width="0.0816%" height="15" fill="rgb(252,69,26)" fg:x="751" fg:w="1"/><text x="61.5061%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.2561%" y="245" width="0.0816%" height="15" fill="rgb(246,123,37)" fg:x="751" fg:w="1"/><text x="61.5061%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.2561%" y="229" width="0.0816%" height="15" fill="rgb(212,205,5)" fg:x="751" fg:w="1"/><text x="61.5061%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.2561%" y="213" width="0.0816%" height="15" fill="rgb(253,148,0)" fg:x="751" fg:w="1"/><text x="61.5061%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.2561%" y="197" width="0.0816%" height="15" fill="rgb(239,22,4)" fg:x="751" fg:w="1"/><text x="61.5061%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.2561%" y="181" width="0.0816%" height="15" fill="rgb(226,26,53)" fg:x="751" fg:w="1"/><text x="61.5061%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.2561%" y="165" width="0.0816%" height="15" fill="rgb(225,229,45)" fg:x="751" fg:w="1"/><text x="61.5061%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.2561%" y="149" width="0.0816%" height="15" fill="rgb(220,60,37)" fg:x="751" fg:w="1"/><text x="61.5061%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2561%" y="133" width="0.0816%" height="15" fill="rgb(217,180,35)" fg:x="751" fg:w="1"/><text x="61.5061%" y="143.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="61.3377%" y="261" width="0.0816%" height="15" fill="rgb(229,7,53)" fg:x="752" fg:w="1"/><text x="61.5877%" y="271.50"></text></g><g><title>&lt;kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="61.5008%" y="181" width="0.0816%" height="15" fill="rgb(254,137,3)" fg:x="754" fg:w="1"/><text x="61.7508%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.5824%" y="181" width="0.0816%" height="15" fill="rgb(215,140,41)" fg:x="755" fg:w="1"/><text x="61.8324%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="61.6639%" y="37" width="0.0816%" height="15" fill="rgb(250,80,15)" fg:x="756" fg:w="1"/><text x="61.9139%" y="47.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="61.6639%" y="181" width="0.1631%" height="15" fill="rgb(252,191,6)" fg:x="756" fg:w="2"/><text x="61.9139%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.6639%" y="165" width="0.1631%" height="15" fill="rgb(246,217,18)" fg:x="756" fg:w="2"/><text x="61.9139%" y="175.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="61.6639%" y="149" width="0.1631%" height="15" fill="rgb(223,93,7)" fg:x="756" fg:w="2"/><text x="61.9139%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.6639%" y="133" width="0.1631%" height="15" fill="rgb(225,55,52)" fg:x="756" fg:w="2"/><text x="61.9139%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.6639%" y="117" width="0.1631%" height="15" fill="rgb(240,31,24)" fg:x="756" fg:w="2"/><text x="61.9139%" y="127.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="61.6639%" y="101" width="0.1631%" height="15" fill="rgb(205,56,52)" fg:x="756" fg:w="2"/><text x="61.9139%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.6639%" y="85" width="0.1631%" height="15" fill="rgb(246,146,12)" fg:x="756" fg:w="2"/><text x="61.9139%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.6639%" y="69" width="0.1631%" height="15" fill="rgb(239,84,36)" fg:x="756" fg:w="2"/><text x="61.9139%" y="79.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.6639%" y="53" width="0.1631%" height="15" fill="rgb(207,41,40)" fg:x="756" fg:w="2"/><text x="61.9139%" y="63.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.7455%" y="37" width="0.0816%" height="15" fill="rgb(241,179,25)" fg:x="757" fg:w="1"/><text x="61.9955%" y="47.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.8271%" y="149" width="0.0816%" height="15" fill="rgb(210,0,34)" fg:x="758" fg:w="1"/><text x="62.0771%" y="159.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (7 samples, 0.57%)</title><rect x="61.4192%" y="245" width="0.5710%" height="15" fill="rgb(225,217,29)" fg:x="753" fg:w="7"/><text x="61.6692%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (7 samples, 0.57%)</title><rect x="61.4192%" y="229" width="0.5710%" height="15" fill="rgb(216,191,38)" fg:x="753" fg:w="7"/><text x="61.6692%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="61.5008%" y="213" width="0.4894%" height="15" fill="rgb(232,140,52)" fg:x="754" fg:w="6"/><text x="61.7508%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="61.5008%" y="197" width="0.4894%" height="15" fill="rgb(223,158,51)" fg:x="754" fg:w="6"/><text x="61.7508%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.8271%" y="181" width="0.1631%" height="15" fill="rgb(235,29,51)" fg:x="758" fg:w="2"/><text x="62.0771%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.8271%" y="165" width="0.1631%" height="15" fill="rgb(215,181,18)" fg:x="758" fg:w="2"/><text x="62.0771%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="61.9086%" y="149" width="0.0816%" height="15" fill="rgb(227,125,34)" fg:x="759" fg:w="1"/><text x="62.1586%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.9086%" y="133" width="0.0816%" height="15" fill="rgb(230,197,49)" fg:x="759" fg:w="1"/><text x="62.1586%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.9086%" y="117" width="0.0816%" height="15" fill="rgb(239,141,16)" fg:x="759" fg:w="1"/><text x="62.1586%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.9086%" y="101" width="0.0816%" height="15" fill="rgb(225,105,43)" fg:x="759" fg:w="1"/><text x="62.1586%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.9086%" y="85" width="0.0816%" height="15" fill="rgb(214,131,14)" fg:x="759" fg:w="1"/><text x="62.1586%" y="95.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.9086%" y="69" width="0.0816%" height="15" fill="rgb(229,177,11)" fg:x="759" fg:w="1"/><text x="62.1586%" y="79.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.9086%" y="53" width="0.0816%" height="15" fill="rgb(231,180,14)" fg:x="759" fg:w="1"/><text x="62.1586%" y="63.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.9086%" y="37" width="0.0816%" height="15" fill="rgb(232,88,2)" fg:x="759" fg:w="1"/><text x="62.1586%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.9902%" y="197" width="0.0816%" height="15" fill="rgb(205,220,8)" fg:x="760" fg:w="1"/><text x="62.2402%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.9902%" y="181" width="0.0816%" height="15" fill="rgb(225,23,53)" fg:x="760" fg:w="1"/><text x="62.2402%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0718%" y="165" width="0.0816%" height="15" fill="rgb(213,62,29)" fg:x="761" fg:w="1"/><text x="62.3218%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0718%" y="149" width="0.0816%" height="15" fill="rgb(227,75,7)" fg:x="761" fg:w="1"/><text x="62.3218%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.0718%" y="133" width="0.0816%" height="15" fill="rgb(207,105,14)" fg:x="761" fg:w="1"/><text x="62.3218%" y="143.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (11 samples, 0.90%)</title><rect x="61.3377%" y="357" width="0.8972%" height="15" fill="rgb(245,62,29)" fg:x="752" fg:w="11"/><text x="61.5877%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.90%)</title><rect x="61.3377%" y="341" width="0.8972%" height="15" fill="rgb(236,202,4)" fg:x="752" fg:w="11"/><text x="61.5877%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.90%)</title><rect x="61.3377%" y="325" width="0.8972%" height="15" fill="rgb(250,67,1)" fg:x="752" fg:w="11"/><text x="61.5877%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.90%)</title><rect x="61.3377%" y="309" width="0.8972%" height="15" fill="rgb(253,115,44)" fg:x="752" fg:w="11"/><text x="61.5877%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.90%)</title><rect x="61.3377%" y="293" width="0.8972%" height="15" fill="rgb(251,139,18)" fg:x="752" fg:w="11"/><text x="61.5877%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (11 samples, 0.90%)</title><rect x="61.3377%" y="277" width="0.8972%" height="15" fill="rgb(218,22,32)" fg:x="752" fg:w="11"/><text x="61.5877%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (10 samples, 0.82%)</title><rect x="61.4192%" y="261" width="0.8157%" height="15" fill="rgb(243,53,5)" fg:x="753" fg:w="10"/><text x="61.6692%" y="271.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="61.9902%" y="245" width="0.2447%" height="15" fill="rgb(227,56,16)" fg:x="760" fg:w="3"/><text x="62.2402%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.9902%" y="229" width="0.2447%" height="15" fill="rgb(245,53,0)" fg:x="760" fg:w="3"/><text x="62.2402%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="61.9902%" y="213" width="0.2447%" height="15" fill="rgb(216,170,35)" fg:x="760" fg:w="3"/><text x="62.2402%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.0718%" y="197" width="0.1631%" height="15" fill="rgb(211,200,8)" fg:x="761" fg:w="2"/><text x="62.3218%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.0718%" y="181" width="0.1631%" height="15" fill="rgb(228,204,44)" fg:x="761" fg:w="2"/><text x="62.3218%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1533%" y="165" width="0.0816%" height="15" fill="rgb(214,121,17)" fg:x="762" fg:w="1"/><text x="62.4033%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1533%" y="149" width="0.0816%" height="15" fill="rgb(233,64,38)" fg:x="762" fg:w="1"/><text x="62.4033%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1533%" y="133" width="0.0816%" height="15" fill="rgb(253,54,19)" fg:x="762" fg:w="1"/><text x="62.4033%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1533%" y="117" width="0.0816%" height="15" fill="rgb(253,94,18)" fg:x="762" fg:w="1"/><text x="62.4033%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1533%" y="101" width="0.0816%" height="15" fill="rgb(227,57,52)" fg:x="762" fg:w="1"/><text x="62.4033%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1533%" y="85" width="0.0816%" height="15" fill="rgb(230,228,50)" fg:x="762" fg:w="1"/><text x="62.4033%" y="95.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.1533%" y="69" width="0.0816%" height="15" fill="rgb(217,205,27)" fg:x="762" fg:w="1"/><text x="62.4033%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.1533%" y="53" width="0.0816%" height="15" fill="rgb(252,71,50)" fg:x="762" fg:w="1"/><text x="62.4033%" y="63.50"></text></g><g><title>plugins_core::tools::get_contained_keys (15 samples, 1.22%)</title><rect x="61.0930%" y="405" width="1.2235%" height="15" fill="rgb(209,86,4)" fg:x="749" fg:w="15"/><text x="61.3430%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (15 samples, 1.22%)</title><rect x="61.0930%" y="389" width="1.2235%" height="15" fill="rgb(229,94,0)" fg:x="749" fg:w="15"/><text x="61.3430%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (15 samples, 1.22%)</title><rect x="61.0930%" y="373" width="1.2235%" height="15" fill="rgb(252,223,21)" fg:x="749" fg:w="15"/><text x="61.3430%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2349%" y="357" width="0.0816%" height="15" fill="rgb(230,210,4)" fg:x="763" fg:w="1"/><text x="62.4849%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2349%" y="341" width="0.0816%" height="15" fill="rgb(240,149,38)" fg:x="763" fg:w="1"/><text x="62.4849%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.2349%" y="325" width="0.0816%" height="15" fill="rgb(254,105,20)" fg:x="763" fg:w="1"/><text x="62.4849%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.2349%" y="309" width="0.0816%" height="15" fill="rgb(253,87,46)" fg:x="763" fg:w="1"/><text x="62.4849%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="62.2349%" y="293" width="0.0816%" height="15" fill="rgb(253,116,33)" fg:x="763" fg:w="1"/><text x="62.4849%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2349%" y="277" width="0.0816%" height="15" fill="rgb(229,198,5)" fg:x="763" fg:w="1"/><text x="62.4849%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2349%" y="261" width="0.0816%" height="15" fill="rgb(242,38,37)" fg:x="763" fg:w="1"/><text x="62.4849%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.2349%" y="245" width="0.0816%" height="15" fill="rgb(242,69,53)" fg:x="763" fg:w="1"/><text x="62.4849%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3980%" y="357" width="0.0816%" height="15" fill="rgb(249,80,16)" fg:x="765" fg:w="1"/><text x="62.6480%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.3980%" y="341" width="0.0816%" height="15" fill="rgb(206,128,11)" fg:x="765" fg:w="1"/><text x="62.6480%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3980%" y="325" width="0.0816%" height="15" fill="rgb(212,35,20)" fg:x="765" fg:w="1"/><text x="62.6480%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.3980%" y="309" width="0.0816%" height="15" fill="rgb(236,79,13)" fg:x="765" fg:w="1"/><text x="62.6480%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.3980%" y="293" width="0.0816%" height="15" fill="rgb(233,123,3)" fg:x="765" fg:w="1"/><text x="62.6480%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.3980%" y="277" width="0.0816%" height="15" fill="rgb(214,93,52)" fg:x="765" fg:w="1"/><text x="62.6480%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.3980%" y="261" width="0.0816%" height="15" fill="rgb(251,37,40)" fg:x="765" fg:w="1"/><text x="62.6480%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.3980%" y="245" width="0.0816%" height="15" fill="rgb(227,80,54)" fg:x="765" fg:w="1"/><text x="62.6480%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.3980%" y="229" width="0.0816%" height="15" fill="rgb(254,48,11)" fg:x="765" fg:w="1"/><text x="62.6480%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.3980%" y="213" width="0.0816%" height="15" fill="rgb(235,193,26)" fg:x="765" fg:w="1"/><text x="62.6480%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.3980%" y="197" width="0.0816%" height="15" fill="rgb(229,99,21)" fg:x="765" fg:w="1"/><text x="62.6480%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.3980%" y="181" width="0.0816%" height="15" fill="rgb(211,140,41)" fg:x="765" fg:w="1"/><text x="62.6480%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.3980%" y="165" width="0.0816%" height="15" fill="rgb(240,227,30)" fg:x="765" fg:w="1"/><text x="62.6480%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.3980%" y="149" width="0.0816%" height="15" fill="rgb(215,224,45)" fg:x="765" fg:w="1"/><text x="62.6480%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3980%" y="133" width="0.0816%" height="15" fill="rgb(206,123,31)" fg:x="765" fg:w="1"/><text x="62.6480%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.04%)</title><rect x="60.5220%" y="437" width="2.0392%" height="15" fill="rgb(210,138,16)" fg:x="742" fg:w="25"/><text x="60.7720%" y="447.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (25 samples, 2.04%)</title><rect x="60.5220%" y="421" width="2.0392%" height="15" fill="rgb(228,57,28)" fg:x="742" fg:w="25"/><text x="60.7720%" y="431.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (3 samples, 0.24%)</title><rect x="62.3165%" y="405" width="0.2447%" height="15" fill="rgb(242,170,10)" fg:x="764" fg:w="3"/><text x="62.5665%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="62.3165%" y="389" width="0.2447%" height="15" fill="rgb(228,214,39)" fg:x="764" fg:w="3"/><text x="62.5665%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="62.3165%" y="373" width="0.2447%" height="15" fill="rgb(218,179,33)" fg:x="764" fg:w="3"/><text x="62.5665%" y="383.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="62.4796%" y="357" width="0.0816%" height="15" fill="rgb(235,193,39)" fg:x="766" fg:w="1"/><text x="62.7296%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="62.4796%" y="341" width="0.0816%" height="15" fill="rgb(219,221,36)" fg:x="766" fg:w="1"/><text x="62.7296%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="62.4796%" y="325" width="0.0816%" height="15" fill="rgb(248,218,19)" fg:x="766" fg:w="1"/><text x="62.7296%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="62.4796%" y="309" width="0.0816%" height="15" fill="rgb(205,50,9)" fg:x="766" fg:w="1"/><text x="62.7296%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="62.4796%" y="293" width="0.0816%" height="15" fill="rgb(238,81,28)" fg:x="766" fg:w="1"/><text x="62.7296%" y="303.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="62.4796%" y="277" width="0.0816%" height="15" fill="rgb(235,110,19)" fg:x="766" fg:w="1"/><text x="62.7296%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5612%" y="389" width="0.0816%" height="15" fill="rgb(214,7,14)" fg:x="767" fg:w="1"/><text x="62.8112%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.5612%" y="373" width="0.0816%" height="15" fill="rgb(211,77,3)" fg:x="767" fg:w="1"/><text x="62.8112%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.5612%" y="357" width="0.0816%" height="15" fill="rgb(229,5,9)" fg:x="767" fg:w="1"/><text x="62.8112%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.5612%" y="341" width="0.0816%" height="15" fill="rgb(225,90,11)" fg:x="767" fg:w="1"/><text x="62.8112%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.5612%" y="325" width="0.0816%" height="15" fill="rgb(242,56,8)" fg:x="767" fg:w="1"/><text x="62.8112%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.5612%" y="309" width="0.0816%" height="15" fill="rgb(249,212,39)" fg:x="767" fg:w="1"/><text x="62.8112%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.5612%" y="293" width="0.0816%" height="15" fill="rgb(236,90,9)" fg:x="767" fg:w="1"/><text x="62.8112%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.5612%" y="277" width="0.0816%" height="15" fill="rgb(206,88,35)" fg:x="767" fg:w="1"/><text x="62.8112%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.5612%" y="261" width="0.0816%" height="15" fill="rgb(205,126,30)" fg:x="767" fg:w="1"/><text x="62.8112%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.5612%" y="245" width="0.0816%" height="15" fill="rgb(230,176,12)" fg:x="767" fg:w="1"/><text x="62.8112%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.5612%" y="229" width="0.0816%" height="15" fill="rgb(243,19,9)" fg:x="767" fg:w="1"/><text x="62.8112%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.5612%" y="213" width="0.0816%" height="15" fill="rgb(245,171,17)" fg:x="767" fg:w="1"/><text x="62.8112%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="62.5612%" y="197" width="0.0816%" height="15" fill="rgb(227,52,21)" fg:x="767" fg:w="1"/><text x="62.8112%" y="207.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="62.6427%" y="373" width="0.1631%" height="15" fill="rgb(238,69,14)" fg:x="768" fg:w="2"/><text x="62.8927%" y="383.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="62.6427%" y="357" width="0.1631%" height="15" fill="rgb(241,156,39)" fg:x="768" fg:w="2"/><text x="62.8927%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7243%" y="341" width="0.0816%" height="15" fill="rgb(212,227,28)" fg:x="769" fg:w="1"/><text x="62.9743%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7243%" y="325" width="0.0816%" height="15" fill="rgb(209,118,27)" fg:x="769" fg:w="1"/><text x="62.9743%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7243%" y="309" width="0.0816%" height="15" fill="rgb(226,102,5)" fg:x="769" fg:w="1"/><text x="62.9743%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.7243%" y="293" width="0.0816%" height="15" fill="rgb(223,34,3)" fg:x="769" fg:w="1"/><text x="62.9743%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.7243%" y="277" width="0.0816%" height="15" fill="rgb(221,81,38)" fg:x="769" fg:w="1"/><text x="62.9743%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.7243%" y="261" width="0.0816%" height="15" fill="rgb(236,219,28)" fg:x="769" fg:w="1"/><text x="62.9743%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.7243%" y="245" width="0.0816%" height="15" fill="rgb(213,200,14)" fg:x="769" fg:w="1"/><text x="62.9743%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.7243%" y="229" width="0.0816%" height="15" fill="rgb(240,33,19)" fg:x="769" fg:w="1"/><text x="62.9743%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="62.6427%" y="389" width="0.2447%" height="15" fill="rgb(233,113,27)" fg:x="768" fg:w="3"/><text x="62.8927%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="62.8059%" y="373" width="0.0816%" height="15" fill="rgb(220,221,18)" fg:x="770" fg:w="1"/><text x="63.0559%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.8059%" y="357" width="0.0816%" height="15" fill="rgb(238,92,8)" fg:x="770" fg:w="1"/><text x="63.0559%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.8059%" y="341" width="0.0816%" height="15" fill="rgb(222,164,16)" fg:x="770" fg:w="1"/><text x="63.0559%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.8059%" y="325" width="0.0816%" height="15" fill="rgb(241,119,3)" fg:x="770" fg:w="1"/><text x="63.0559%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.8059%" y="309" width="0.0816%" height="15" fill="rgb(241,44,8)" fg:x="770" fg:w="1"/><text x="63.0559%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="62.8059%" y="293" width="0.0816%" height="15" fill="rgb(230,36,40)" fg:x="770" fg:w="1"/><text x="63.0559%" y="303.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="62.8059%" y="277" width="0.0816%" height="15" fill="rgb(243,16,36)" fg:x="770" fg:w="1"/><text x="63.0559%" y="287.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.8059%" y="261" width="0.0816%" height="15" fill="rgb(231,4,26)" fg:x="770" fg:w="1"/><text x="63.0559%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.8059%" y="245" width="0.0816%" height="15" fill="rgb(240,9,31)" fg:x="770" fg:w="1"/><text x="63.0559%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.8059%" y="229" width="0.0816%" height="15" fill="rgb(207,173,15)" fg:x="770" fg:w="1"/><text x="63.0559%" y="239.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="62.8059%" y="213" width="0.0816%" height="15" fill="rgb(224,192,53)" fg:x="770" fg:w="1"/><text x="63.0559%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="62.8059%" y="197" width="0.0816%" height="15" fill="rgb(223,67,28)" fg:x="770" fg:w="1"/><text x="63.0559%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.8059%" y="181" width="0.0816%" height="15" fill="rgb(211,20,47)" fg:x="770" fg:w="1"/><text x="63.0559%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="62.8059%" y="165" width="0.0816%" height="15" fill="rgb(240,228,2)" fg:x="770" fg:w="1"/><text x="63.0559%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.8059%" y="149" width="0.0816%" height="15" fill="rgb(248,151,12)" fg:x="770" fg:w="1"/><text x="63.0559%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.9690%" y="277" width="0.0816%" height="15" fill="rgb(244,8,39)" fg:x="772" fg:w="1"/><text x="63.2190%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.9690%" y="261" width="0.0816%" height="15" fill="rgb(222,26,8)" fg:x="772" fg:w="1"/><text x="63.2190%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="63.1321%" y="181" width="0.0816%" height="15" fill="rgb(213,106,44)" fg:x="774" fg:w="1"/><text x="63.3821%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.1321%" y="165" width="0.0816%" height="15" fill="rgb(214,129,20)" fg:x="774" fg:w="1"/><text x="63.3821%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="63.1321%" y="149" width="0.0816%" height="15" fill="rgb(212,32,13)" fg:x="774" fg:w="1"/><text x="63.3821%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="63.1321%" y="229" width="0.1631%" height="15" fill="rgb(208,168,33)" fg:x="774" fg:w="2"/><text x="63.3821%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="63.1321%" y="213" width="0.1631%" height="15" fill="rgb(231,207,8)" fg:x="774" fg:w="2"/><text x="63.3821%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="63.1321%" y="197" width="0.1631%" height="15" fill="rgb(235,219,23)" fg:x="774" fg:w="2"/><text x="63.3821%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.2137%" y="181" width="0.0816%" height="15" fill="rgb(226,216,26)" fg:x="775" fg:w="1"/><text x="63.4637%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.2137%" y="165" width="0.0816%" height="15" fill="rgb(239,137,16)" fg:x="775" fg:w="1"/><text x="63.4637%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="63.2137%" y="149" width="0.0816%" height="15" fill="rgb(207,12,36)" fg:x="775" fg:w="1"/><text x="63.4637%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.33%)</title><rect x="63.0506%" y="277" width="0.3263%" height="15" fill="rgb(210,214,24)" fg:x="773" fg:w="4"/><text x="63.3006%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="63.1321%" y="261" width="0.2447%" height="15" fill="rgb(206,56,30)" fg:x="774" fg:w="3"/><text x="63.3821%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="63.1321%" y="245" width="0.2447%" height="15" fill="rgb(228,143,26)" fg:x="774" fg:w="3"/><text x="63.3821%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.2953%" y="229" width="0.0816%" height="15" fill="rgb(216,218,46)" fg:x="776" fg:w="1"/><text x="63.5453%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2953%" y="213" width="0.0816%" height="15" fill="rgb(206,6,19)" fg:x="776" fg:w="1"/><text x="63.5453%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.57%)</title><rect x="62.9690%" y="293" width="0.5710%" height="15" fill="rgb(239,177,51)" fg:x="772" fg:w="7"/><text x="63.2190%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="63.3768%" y="277" width="0.1631%" height="15" fill="rgb(216,55,25)" fg:x="777" fg:w="2"/><text x="63.6268%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4584%" y="261" width="0.0816%" height="15" fill="rgb(231,163,29)" fg:x="778" fg:w="1"/><text x="63.7084%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.73%)</title><rect x="62.8874%" y="373" width="0.7341%" height="15" fill="rgb(232,149,50)" fg:x="771" fg:w="9"/><text x="63.1374%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="62.8874%" y="357" width="0.7341%" height="15" fill="rgb(223,142,48)" fg:x="771" fg:w="9"/><text x="63.1374%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.73%)</title><rect x="62.8874%" y="341" width="0.7341%" height="15" fill="rgb(245,83,23)" fg:x="771" fg:w="9"/><text x="63.1374%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="62.9690%" y="325" width="0.6525%" height="15" fill="rgb(224,63,2)" fg:x="772" fg:w="8"/><text x="63.2190%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="62.9690%" y="309" width="0.6525%" height="15" fill="rgb(218,65,53)" fg:x="772" fg:w="8"/><text x="63.2190%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="63.5400%" y="293" width="0.0816%" height="15" fill="rgb(221,84,29)" fg:x="779" fg:w="1"/><text x="63.7900%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5400%" y="277" width="0.0816%" height="15" fill="rgb(234,0,32)" fg:x="779" fg:w="1"/><text x="63.7900%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.6215%" y="325" width="0.0816%" height="15" fill="rgb(206,20,16)" fg:x="780" fg:w="1"/><text x="63.8715%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="63.7031%" y="325" width="0.1631%" height="15" fill="rgb(244,172,18)" fg:x="781" fg:w="2"/><text x="63.9531%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="63.7031%" y="309" width="0.1631%" height="15" fill="rgb(254,133,1)" fg:x="781" fg:w="2"/><text x="63.9531%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="63.7031%" y="293" width="0.1631%" height="15" fill="rgb(222,206,41)" fg:x="781" fg:w="2"/><text x="63.9531%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8662%" y="293" width="0.0816%" height="15" fill="rgb(212,3,42)" fg:x="783" fg:w="1"/><text x="64.1162%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8662%" y="277" width="0.0816%" height="15" fill="rgb(241,11,4)" fg:x="783" fg:w="1"/><text x="64.1162%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="63.9478%" y="261" width="0.0816%" height="15" fill="rgb(205,19,26)" fg:x="784" fg:w="1"/><text x="64.1978%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.9478%" y="245" width="0.0816%" height="15" fill="rgb(210,179,32)" fg:x="784" fg:w="1"/><text x="64.1978%" y="255.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="63.8662%" y="325" width="0.2447%" height="15" fill="rgb(227,116,49)" fg:x="783" fg:w="3"/><text x="64.1162%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="63.8662%" y="309" width="0.2447%" height="15" fill="rgb(211,146,6)" fg:x="783" fg:w="3"/><text x="64.1162%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="63.9478%" y="293" width="0.1631%" height="15" fill="rgb(219,44,39)" fg:x="784" fg:w="2"/><text x="64.1978%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="63.9478%" y="277" width="0.1631%" height="15" fill="rgb(234,128,11)" fg:x="784" fg:w="2"/><text x="64.1978%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.0294%" y="261" width="0.0816%" height="15" fill="rgb(220,183,53)" fg:x="785" fg:w="1"/><text x="64.2794%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="64.1925%" y="309" width="0.0816%" height="15" fill="rgb(213,219,32)" fg:x="787" fg:w="1"/><text x="64.4425%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (3 samples, 0.24%)</title><rect x="64.1109%" y="325" width="0.2447%" height="15" fill="rgb(232,156,16)" fg:x="786" fg:w="3"/><text x="64.3609%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.2741%" y="309" width="0.0816%" height="15" fill="rgb(246,135,34)" fg:x="788" fg:w="1"/><text x="64.5241%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2741%" y="293" width="0.0816%" height="15" fill="rgb(241,99,0)" fg:x="788" fg:w="1"/><text x="64.5241%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2741%" y="277" width="0.0816%" height="15" fill="rgb(222,103,45)" fg:x="788" fg:w="1"/><text x="64.5241%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2741%" y="261" width="0.0816%" height="15" fill="rgb(212,57,4)" fg:x="788" fg:w="1"/><text x="64.5241%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="64.3556%" y="293" width="0.0816%" height="15" fill="rgb(215,68,47)" fg:x="789" fg:w="1"/><text x="64.6056%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="64.4372%" y="277" width="0.2447%" height="15" fill="rgb(230,84,2)" fg:x="790" fg:w="3"/><text x="64.6872%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="64.4372%" y="261" width="0.2447%" height="15" fill="rgb(220,102,14)" fg:x="790" fg:w="3"/><text x="64.6872%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="64.4372%" y="245" width="0.2447%" height="15" fill="rgb(240,10,32)" fg:x="790" fg:w="3"/><text x="64.6872%" y="255.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="64.6819%" y="277" width="0.0816%" height="15" fill="rgb(215,47,27)" fg:x="793" fg:w="1"/><text x="64.9319%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="64.6819%" y="261" width="0.0816%" height="15" fill="rgb(233,188,43)" fg:x="793" fg:w="1"/><text x="64.9319%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="64.7635%" y="261" width="0.0816%" height="15" fill="rgb(253,190,1)" fg:x="794" fg:w="1"/><text x="65.0135%" y="271.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="64.7635%" y="245" width="0.0816%" height="15" fill="rgb(206,114,52)" fg:x="794" fg:w="1"/><text x="65.0135%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7635%" y="229" width="0.0816%" height="15" fill="rgb(233,120,37)" fg:x="794" fg:w="1"/><text x="65.0135%" y="239.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="64.4372%" y="293" width="0.4894%" height="15" fill="rgb(214,52,39)" fg:x="790" fg:w="6"/><text x="64.6872%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="64.7635%" y="277" width="0.1631%" height="15" fill="rgb(223,80,29)" fg:x="794" fg:w="2"/><text x="65.0135%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="64.8450%" y="261" width="0.0816%" height="15" fill="rgb(230,101,40)" fg:x="795" fg:w="1"/><text x="65.0950%" y="271.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (26 samples, 2.12%)</title><rect x="62.8874%" y="389" width="2.1207%" height="15" fill="rgb(219,211,8)" fg:x="771" fg:w="26"/><text x="63.1374%" y="399.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (17 samples, 1.39%)</title><rect x="63.6215%" y="373" width="1.3866%" height="15" fill="rgb(252,126,28)" fg:x="780" fg:w="17"/><text x="63.8715%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (17 samples, 1.39%)</title><rect x="63.6215%" y="357" width="1.3866%" height="15" fill="rgb(215,56,38)" fg:x="780" fg:w="17"/><text x="63.8715%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.39%)</title><rect x="63.6215%" y="341" width="1.3866%" height="15" fill="rgb(249,55,44)" fg:x="780" fg:w="17"/><text x="63.8715%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.65%)</title><rect x="64.3556%" y="325" width="0.6525%" height="15" fill="rgb(220,221,32)" fg:x="789" fg:w="8"/><text x="64.6056%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (8 samples, 0.65%)</title><rect x="64.3556%" y="309" width="0.6525%" height="15" fill="rgb(212,216,41)" fg:x="789" fg:w="8"/><text x="64.6056%" y="319.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="64.9266%" y="293" width="0.0816%" height="15" fill="rgb(228,213,43)" fg:x="796" fg:w="1"/><text x="65.1766%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9266%" y="277" width="0.0816%" height="15" fill="rgb(211,31,26)" fg:x="796" fg:w="1"/><text x="65.1766%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (798 samples, 65.09%)</title><rect x="0.0000%" y="597" width="65.0897%" height="15" fill="rgb(229,202,19)" fg:x="0" fg:w="798"/><text x="0.2500%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (798 samples, 65.09%)</title><rect x="0.0000%" y="581" width="65.0897%" height="15" fill="rgb(229,105,46)" fg:x="0" fg:w="798"/><text x="0.2500%" y="591.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (798 samples, 65.09%)</title><rect x="0.0000%" y="565" width="65.0897%" height="15" fill="rgb(235,108,1)" fg:x="0" fg:w="798"/><text x="0.2500%" y="575.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (657 samples, 53.59%)</title><rect x="11.5008%" y="549" width="53.5889%" height="15" fill="rgb(245,111,35)" fg:x="141" fg:w="657"/><text x="11.7508%" y="559.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (657 samples, 53.59%)</title><rect x="11.5008%" y="533" width="53.5889%" height="15" fill="rgb(219,185,31)" fg:x="141" fg:w="657"/><text x="11.7508%" y="543.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (63 samples, 5.14%)</title><rect x="59.9511%" y="517" width="5.1387%" height="15" fill="rgb(214,4,43)" fg:x="735" fg:w="63"/><text x="60.2011%" y="527.50">kernel..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (63 samples, 5.14%)</title><rect x="59.9511%" y="501" width="5.1387%" height="15" fill="rgb(235,227,40)" fg:x="735" fg:w="63"/><text x="60.2011%" y="511.50">&lt;plugi..</text></g><g><title>plugins_rpc::querying::have_surroundings (58 samples, 4.73%)</title><rect x="60.3589%" y="485" width="4.7308%" height="15" fill="rgb(230,88,30)" fg:x="740" fg:w="58"/><text x="60.6089%" y="495.50">plugin..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (58 samples, 4.73%)</title><rect x="60.3589%" y="469" width="4.7308%" height="15" fill="rgb(216,217,1)" fg:x="740" fg:w="58"/><text x="60.6089%" y="479.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (56 samples, 4.57%)</title><rect x="60.5220%" y="453" width="4.5677%" height="15" fill="rgb(248,139,50)" fg:x="742" fg:w="56"/><text x="60.7720%" y="463.50">core:..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (31 samples, 2.53%)</title><rect x="62.5612%" y="437" width="2.5285%" height="15" fill="rgb(233,1,21)" fg:x="767" fg:w="31"/><text x="62.8112%" y="447.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 2.53%)</title><rect x="62.5612%" y="421" width="2.5285%" height="15" fill="rgb(215,183,12)" fg:x="767" fg:w="31"/><text x="62.8112%" y="431.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (31 samples, 2.53%)</title><rect x="62.5612%" y="405" width="2.5285%" height="15" fill="rgb(229,104,42)" fg:x="767" fg:w="31"/><text x="62.8112%" y="415.50">pl..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.0082%" y="389" width="0.0816%" height="15" fill="rgb(243,34,48)" fg:x="797" fg:w="1"/><text x="65.2582%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1713%" y="501" width="0.0816%" height="15" fill="rgb(239,11,44)" fg:x="799" fg:w="1"/><text x="65.4213%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.1713%" y="549" width="0.2447%" height="15" fill="rgb(231,98,35)" fg:x="799" fg:w="3"/><text x="65.4213%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (3 samples, 0.24%)</title><rect x="65.1713%" y="533" width="0.2447%" height="15" fill="rgb(233,28,25)" fg:x="799" fg:w="3"/><text x="65.4213%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.1713%" y="517" width="0.2447%" height="15" fill="rgb(234,123,11)" fg:x="799" fg:w="3"/><text x="65.4213%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="65.2529%" y="501" width="0.1631%" height="15" fill="rgb(220,69,3)" fg:x="800" fg:w="2"/><text x="65.5029%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.3344%" y="485" width="0.0816%" height="15" fill="rgb(214,64,36)" fg:x="801" fg:w="1"/><text x="65.5844%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.3344%" y="469" width="0.0816%" height="15" fill="rgb(211,138,32)" fg:x="801" fg:w="1"/><text x="65.5844%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.3344%" y="453" width="0.0816%" height="15" fill="rgb(213,118,47)" fg:x="801" fg:w="1"/><text x="65.5844%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.3344%" y="437" width="0.0816%" height="15" fill="rgb(243,124,49)" fg:x="801" fg:w="1"/><text x="65.5844%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.3344%" y="421" width="0.0816%" height="15" fill="rgb(221,30,28)" fg:x="801" fg:w="1"/><text x="65.5844%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="65.4160%" y="517" width="0.0816%" height="15" fill="rgb(246,37,13)" fg:x="802" fg:w="1"/><text x="65.6660%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="65.4160%" y="501" width="0.0816%" height="15" fill="rgb(249,66,14)" fg:x="802" fg:w="1"/><text x="65.6660%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="65.4160%" y="485" width="0.0816%" height="15" fill="rgb(213,166,5)" fg:x="802" fg:w="1"/><text x="65.6660%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="65.4160%" y="469" width="0.0816%" height="15" fill="rgb(221,66,24)" fg:x="802" fg:w="1"/><text x="65.6660%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="65.4160%" y="453" width="0.0816%" height="15" fill="rgb(210,132,17)" fg:x="802" fg:w="1"/><text x="65.6660%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4160%" y="437" width="0.0816%" height="15" fill="rgb(243,202,5)" fg:x="802" fg:w="1"/><text x="65.6660%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4160%" y="421" width="0.0816%" height="15" fill="rgb(233,70,48)" fg:x="802" fg:w="1"/><text x="65.6660%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.4160%" y="405" width="0.0816%" height="15" fill="rgb(238,41,26)" fg:x="802" fg:w="1"/><text x="65.6660%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4160%" y="389" width="0.0816%" height="15" fill="rgb(241,19,31)" fg:x="802" fg:w="1"/><text x="65.6660%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.4160%" y="373" width="0.0816%" height="15" fill="rgb(214,76,10)" fg:x="802" fg:w="1"/><text x="65.6660%" y="383.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="65.9054%" y="389" width="0.0816%" height="15" fill="rgb(254,202,22)" fg:x="808" fg:w="1"/><text x="66.1554%" y="399.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (8 samples, 0.65%)</title><rect x="65.4160%" y="549" width="0.6525%" height="15" fill="rgb(214,72,24)" fg:x="802" fg:w="8"/><text x="65.6660%" y="559.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.65%)</title><rect x="65.4160%" y="533" width="0.6525%" height="15" fill="rgb(221,92,46)" fg:x="802" fg:w="8"/><text x="65.6660%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.57%)</title><rect x="65.4976%" y="517" width="0.5710%" height="15" fill="rgb(246,13,50)" fg:x="803" fg:w="7"/><text x="65.7476%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.57%)</title><rect x="65.4976%" y="501" width="0.5710%" height="15" fill="rgb(240,165,38)" fg:x="803" fg:w="7"/><text x="65.7476%" y="511.50"></text></g><g><title>libloading::os::unix::Library::open (7 samples, 0.57%)</title><rect x="65.4976%" y="485" width="0.5710%" height="15" fill="rgb(241,24,51)" fg:x="803" fg:w="7"/><text x="65.7476%" y="495.50"></text></g><g><title>dlopen (7 samples, 0.57%)</title><rect x="65.4976%" y="469" width="0.5710%" height="15" fill="rgb(227,51,44)" fg:x="803" fg:w="7"/><text x="65.7476%" y="479.50"></text></g><g><title>_dl_catch_error (7 samples, 0.57%)</title><rect x="65.4976%" y="453" width="0.5710%" height="15" fill="rgb(231,121,3)" fg:x="803" fg:w="7"/><text x="65.7476%" y="463.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.57%)</title><rect x="65.4976%" y="437" width="0.5710%" height="15" fill="rgb(245,3,41)" fg:x="803" fg:w="7"/><text x="65.7476%" y="447.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.57%)</title><rect x="65.4976%" y="421" width="0.5710%" height="15" fill="rgb(214,13,26)" fg:x="803" fg:w="7"/><text x="65.7476%" y="431.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.57%)</title><rect x="65.4976%" y="405" width="0.5710%" height="15" fill="rgb(252,75,11)" fg:x="803" fg:w="7"/><text x="65.7476%" y="415.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="65.9869%" y="389" width="0.0816%" height="15" fill="rgb(218,226,17)" fg:x="809" fg:w="1"/><text x="66.2369%" y="399.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="65.9869%" y="373" width="0.0816%" height="15" fill="rgb(248,89,38)" fg:x="809" fg:w="1"/><text x="66.2369%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="66.1501%" y="533" width="0.0816%" height="15" fill="rgb(237,73,46)" fg:x="811" fg:w="1"/><text x="66.4001%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="66.1501%" y="517" width="0.0816%" height="15" fill="rgb(242,78,33)" fg:x="811" fg:w="1"/><text x="66.4001%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.1501%" y="501" width="0.0816%" height="15" fill="rgb(235,60,3)" fg:x="811" fg:w="1"/><text x="66.4001%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="66.2316%" y="501" width="0.0816%" height="15" fill="rgb(216,172,19)" fg:x="812" fg:w="1"/><text x="66.4816%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.2316%" y="485" width="0.0816%" height="15" fill="rgb(227,6,42)" fg:x="812" fg:w="1"/><text x="66.4816%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.2316%" y="469" width="0.0816%" height="15" fill="rgb(223,207,42)" fg:x="812" fg:w="1"/><text x="66.4816%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="66.3132%" y="421" width="0.0816%" height="15" fill="rgb(246,138,30)" fg:x="813" fg:w="1"/><text x="66.5632%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="66.3132%" y="405" width="0.0816%" height="15" fill="rgb(251,199,47)" fg:x="813" fg:w="1"/><text x="66.5632%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="66.3132%" y="389" width="0.0816%" height="15" fill="rgb(228,218,44)" fg:x="813" fg:w="1"/><text x="66.5632%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.3132%" y="373" width="0.0816%" height="15" fill="rgb(220,68,6)" fg:x="813" fg:w="1"/><text x="66.5632%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.3132%" y="357" width="0.0816%" height="15" fill="rgb(240,60,26)" fg:x="813" fg:w="1"/><text x="66.5632%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.3132%" y="341" width="0.0816%" height="15" fill="rgb(211,200,19)" fg:x="813" fg:w="1"/><text x="66.5632%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="66.3132%" y="437" width="0.1631%" height="15" fill="rgb(242,145,30)" fg:x="813" fg:w="2"/><text x="66.5632%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.3948%" y="421" width="0.0816%" height="15" fill="rgb(225,64,13)" fg:x="814" fg:w="1"/><text x="66.6448%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="66.3132%" y="453" width="0.2447%" height="15" fill="rgb(218,103,35)" fg:x="813" fg:w="3"/><text x="66.5632%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.4763%" y="437" width="0.0816%" height="15" fill="rgb(216,93,46)" fg:x="815" fg:w="1"/><text x="66.7263%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.33%)</title><rect x="66.3132%" y="469" width="0.3263%" height="15" fill="rgb(225,159,27)" fg:x="813" fg:w="4"/><text x="66.5632%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.5579%" y="453" width="0.0816%" height="15" fill="rgb(225,204,11)" fg:x="816" fg:w="1"/><text x="66.8079%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6395%" y="421" width="0.0816%" height="15" fill="rgb(205,56,4)" fg:x="817" fg:w="1"/><text x="66.8895%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.7210%" y="421" width="0.0816%" height="15" fill="rgb(206,6,35)" fg:x="818" fg:w="1"/><text x="66.9710%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7210%" y="405" width="0.0816%" height="15" fill="rgb(247,73,52)" fg:x="818" fg:w="1"/><text x="66.9710%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.8026%" y="405" width="0.0816%" height="15" fill="rgb(246,97,4)" fg:x="819" fg:w="1"/><text x="67.0526%" y="415.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.73%)</title><rect x="66.2316%" y="533" width="0.7341%" height="15" fill="rgb(212,37,15)" fg:x="812" fg:w="9"/><text x="66.4816%" y="543.50"></text></g><g><title>engine::session::Session::save_entity_changes (9 samples, 0.73%)</title><rect x="66.2316%" y="517" width="0.7341%" height="15" fill="rgb(208,130,40)" fg:x="812" fg:w="9"/><text x="66.4816%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.65%)</title><rect x="66.3132%" y="501" width="0.6525%" height="15" fill="rgb(236,55,29)" fg:x="813" fg:w="8"/><text x="66.5632%" y="511.50"></text></g><g><title>engine::session::Session::check_for_changes (8 samples, 0.65%)</title><rect x="66.3132%" y="485" width="0.6525%" height="15" fill="rgb(209,156,45)" fg:x="813" fg:w="8"/><text x="66.5632%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="66.6395%" y="469" width="0.3263%" height="15" fill="rgb(249,107,4)" fg:x="817" fg:w="4"/><text x="66.8895%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="66.6395%" y="453" width="0.3263%" height="15" fill="rgb(227,7,13)" fg:x="817" fg:w="4"/><text x="66.8895%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="66.6395%" y="437" width="0.3263%" height="15" fill="rgb(250,129,14)" fg:x="817" fg:w="4"/><text x="66.8895%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.8026%" y="421" width="0.1631%" height="15" fill="rgb(229,92,13)" fg:x="819" fg:w="2"/><text x="67.0526%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.8842%" y="405" width="0.0816%" height="15" fill="rgb(245,98,39)" fg:x="820" fg:w="1"/><text x="67.1342%" y="415.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="66.9657%" y="533" width="0.0816%" height="15" fill="rgb(234,135,48)" fg:x="821" fg:w="1"/><text x="67.2157%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.9657%" y="517" width="0.0816%" height="15" fill="rgb(230,98,28)" fg:x="821" fg:w="1"/><text x="67.2157%" y="527.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.9657%" y="501" width="0.0816%" height="15" fill="rgb(223,121,0)" fg:x="821" fg:w="1"/><text x="67.2157%" y="511.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="66.9657%" y="485" width="0.0816%" height="15" fill="rgb(234,173,33)" fg:x="821" fg:w="1"/><text x="67.2157%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.9657%" y="469" width="0.0816%" height="15" fill="rgb(245,47,8)" fg:x="821" fg:w="1"/><text x="67.2157%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="67.0473%" y="517" width="0.0816%" height="15" fill="rgb(205,17,20)" fg:x="822" fg:w="1"/><text x="67.2973%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.0473%" y="501" width="0.0816%" height="15" fill="rgb(232,151,16)" fg:x="822" fg:w="1"/><text x="67.2973%" y="511.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="67.0473%" y="485" width="0.0816%" height="15" fill="rgb(208,30,32)" fg:x="822" fg:w="1"/><text x="67.2973%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="67.0473%" y="469" width="0.0816%" height="15" fill="rgb(254,26,3)" fg:x="822" fg:w="1"/><text x="67.2973%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="67.0473%" y="453" width="0.0816%" height="15" fill="rgb(240,177,30)" fg:x="822" fg:w="1"/><text x="67.2973%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="67.0473%" y="437" width="0.0816%" height="15" fill="rgb(248,76,44)" fg:x="822" fg:w="1"/><text x="67.2973%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="67.0473%" y="421" width="0.0816%" height="15" fill="rgb(241,186,54)" fg:x="822" fg:w="1"/><text x="67.2973%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="67.0473%" y="405" width="0.0816%" height="15" fill="rgb(249,171,29)" fg:x="822" fg:w="1"/><text x="67.2973%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="67.0473%" y="389" width="0.0816%" height="15" fill="rgb(237,151,44)" fg:x="822" fg:w="1"/><text x="67.2973%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.0473%" y="373" width="0.0816%" height="15" fill="rgb(228,174,30)" fg:x="822" fg:w="1"/><text x="67.2973%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.0473%" y="357" width="0.0816%" height="15" fill="rgb(252,14,37)" fg:x="822" fg:w="1"/><text x="67.2973%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="67.0473%" y="341" width="0.0816%" height="15" fill="rgb(207,111,40)" fg:x="822" fg:w="1"/><text x="67.2973%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.0473%" y="325" width="0.0816%" height="15" fill="rgb(248,171,54)" fg:x="822" fg:w="1"/><text x="67.2973%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.0473%" y="309" width="0.0816%" height="15" fill="rgb(211,127,2)" fg:x="822" fg:w="1"/><text x="67.2973%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.1289%" y="485" width="0.0816%" height="15" fill="rgb(236,87,47)" fg:x="823" fg:w="1"/><text x="67.3789%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="67.1289%" y="469" width="0.0816%" height="15" fill="rgb(223,190,45)" fg:x="823" fg:w="1"/><text x="67.3789%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="67.1289%" y="453" width="0.0816%" height="15" fill="rgb(215,5,16)" fg:x="823" fg:w="1"/><text x="67.3789%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.1289%" y="437" width="0.0816%" height="15" fill="rgb(252,82,33)" fg:x="823" fg:w="1"/><text x="67.3789%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.1289%" y="421" width="0.0816%" height="15" fill="rgb(247,213,44)" fg:x="823" fg:w="1"/><text x="67.3789%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1289%" y="405" width="0.0816%" height="15" fill="rgb(205,196,44)" fg:x="823" fg:w="1"/><text x="67.3789%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.2104%" y="421" width="0.1631%" height="15" fill="rgb(237,96,54)" fg:x="824" fg:w="2"/><text x="67.4604%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.2104%" y="405" width="0.1631%" height="15" fill="rgb(230,113,34)" fg:x="824" fg:w="2"/><text x="67.4604%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="67.2104%" y="389" width="0.1631%" height="15" fill="rgb(221,224,12)" fg:x="824" fg:w="2"/><text x="67.4604%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="67.2104%" y="373" width="0.1631%" height="15" fill="rgb(219,112,44)" fg:x="824" fg:w="2"/><text x="67.4604%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="67.2104%" y="437" width="0.2447%" height="15" fill="rgb(210,31,13)" fg:x="824" fg:w="3"/><text x="67.4604%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.3736%" y="421" width="0.0816%" height="15" fill="rgb(230,25,16)" fg:x="826" fg:w="1"/><text x="67.6236%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.3736%" y="405" width="0.0816%" height="15" fill="rgb(246,108,53)" fg:x="826" fg:w="1"/><text x="67.6236%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.3736%" y="389" width="0.0816%" height="15" fill="rgb(241,172,50)" fg:x="826" fg:w="1"/><text x="67.6236%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.4551%" y="421" width="0.0816%" height="15" fill="rgb(235,141,10)" fg:x="827" fg:w="1"/><text x="67.7051%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.4551%" y="405" width="0.0816%" height="15" fill="rgb(220,174,43)" fg:x="827" fg:w="1"/><text x="67.7051%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="67.5367%" y="405" width="0.0816%" height="15" fill="rgb(215,181,40)" fg:x="828" fg:w="1"/><text x="67.7867%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5367%" y="389" width="0.0816%" height="15" fill="rgb(230,97,2)" fg:x="828" fg:w="1"/><text x="67.7867%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.5367%" y="373" width="0.0816%" height="15" fill="rgb(211,25,27)" fg:x="828" fg:w="1"/><text x="67.7867%" y="383.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.5367%" y="357" width="0.0816%" height="15" fill="rgb(230,87,26)" fg:x="828" fg:w="1"/><text x="67.7867%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.5367%" y="421" width="0.1631%" height="15" fill="rgb(227,160,17)" fg:x="828" fg:w="2"/><text x="67.7867%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.6183%" y="405" width="0.0816%" height="15" fill="rgb(244,85,34)" fg:x="829" fg:w="1"/><text x="67.8683%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.6183%" y="389" width="0.0816%" height="15" fill="rgb(207,70,0)" fg:x="829" fg:w="1"/><text x="67.8683%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="67.2104%" y="453" width="0.5710%" height="15" fill="rgb(223,129,7)" fg:x="824" fg:w="7"/><text x="67.4604%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="67.4551%" y="437" width="0.3263%" height="15" fill="rgb(246,105,7)" fg:x="827" fg:w="4"/><text x="67.7051%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.6998%" y="421" width="0.0816%" height="15" fill="rgb(215,154,42)" fg:x="830" fg:w="1"/><text x="67.9498%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.6998%" y="405" width="0.0816%" height="15" fill="rgb(220,215,30)" fg:x="830" fg:w="1"/><text x="67.9498%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.6998%" y="389" width="0.0816%" height="15" fill="rgb(228,81,51)" fg:x="830" fg:w="1"/><text x="67.9498%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8630%" y="373" width="0.0816%" height="15" fill="rgb(247,71,54)" fg:x="832" fg:w="1"/><text x="68.1130%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.8630%" y="357" width="0.0816%" height="15" fill="rgb(234,176,34)" fg:x="832" fg:w="1"/><text x="68.1130%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.8630%" y="341" width="0.0816%" height="15" fill="rgb(241,103,54)" fg:x="832" fg:w="1"/><text x="68.1130%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.7814%" y="453" width="0.2447%" height="15" fill="rgb(228,22,34)" fg:x="831" fg:w="3"/><text x="68.0314%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="67.7814%" y="437" width="0.2447%" height="15" fill="rgb(241,179,48)" fg:x="831" fg:w="3"/><text x="68.0314%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.7814%" y="421" width="0.2447%" height="15" fill="rgb(235,167,37)" fg:x="831" fg:w="3"/><text x="68.0314%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.7814%" y="405" width="0.2447%" height="15" fill="rgb(213,109,30)" fg:x="831" fg:w="3"/><text x="68.0314%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.7814%" y="389" width="0.2447%" height="15" fill="rgb(222,172,16)" fg:x="831" fg:w="3"/><text x="68.0314%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.9445%" y="373" width="0.0816%" height="15" fill="rgb(233,192,5)" fg:x="833" fg:w="1"/><text x="68.1945%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9445%" y="357" width="0.0816%" height="15" fill="rgb(247,189,41)" fg:x="833" fg:w="1"/><text x="68.1945%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="68.0261%" y="357" width="0.0816%" height="15" fill="rgb(218,134,47)" fg:x="834" fg:w="1"/><text x="68.2761%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="68.0261%" y="405" width="0.1631%" height="15" fill="rgb(216,29,3)" fg:x="834" fg:w="2"/><text x="68.2761%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="68.0261%" y="389" width="0.1631%" height="15" fill="rgb(246,140,12)" fg:x="834" fg:w="2"/><text x="68.2761%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="68.0261%" y="373" width="0.1631%" height="15" fill="rgb(230,136,11)" fg:x="834" fg:w="2"/><text x="68.2761%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1077%" y="357" width="0.0816%" height="15" fill="rgb(247,22,47)" fg:x="835" fg:w="1"/><text x="68.3577%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.1077%" y="341" width="0.0816%" height="15" fill="rgb(218,84,22)" fg:x="835" fg:w="1"/><text x="68.3577%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1077%" y="325" width="0.0816%" height="15" fill="rgb(216,87,39)" fg:x="835" fg:w="1"/><text x="68.3577%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1077%" y="309" width="0.0816%" height="15" fill="rgb(221,178,8)" fg:x="835" fg:w="1"/><text x="68.3577%" y="319.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.22%)</title><rect x="67.1289%" y="517" width="1.2235%" height="15" fill="rgb(230,42,11)" fg:x="823" fg:w="15"/><text x="67.3789%" y="527.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.22%)</title><rect x="67.1289%" y="501" width="1.2235%" height="15" fill="rgb(237,229,4)" fg:x="823" fg:w="15"/><text x="67.3789%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.14%)</title><rect x="67.2104%" y="485" width="1.1419%" height="15" fill="rgb(222,31,33)" fg:x="824" fg:w="14"/><text x="67.4604%" y="495.50"></text></g><g><title>engine::session::Session::check_for_changes (14 samples, 1.14%)</title><rect x="67.2104%" y="469" width="1.1419%" height="15" fill="rgb(210,17,39)" fg:x="824" fg:w="14"/><text x="67.4604%" y="479.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.33%)</title><rect x="68.0261%" y="453" width="0.3263%" height="15" fill="rgb(244,93,20)" fg:x="834" fg:w="4"/><text x="68.2761%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="68.0261%" y="437" width="0.3263%" height="15" fill="rgb(210,40,47)" fg:x="834" fg:w="4"/><text x="68.2761%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="68.0261%" y="421" width="0.3263%" height="15" fill="rgb(239,211,47)" fg:x="834" fg:w="4"/><text x="68.2761%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="68.1892%" y="405" width="0.1631%" height="15" fill="rgb(251,223,49)" fg:x="836" fg:w="2"/><text x="68.4392%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="68.1892%" y="389" width="0.1631%" height="15" fill="rgb(221,149,5)" fg:x="836" fg:w="2"/><text x="68.4392%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.1892%" y="373" width="0.1631%" height="15" fill="rgb(219,224,51)" fg:x="836" fg:w="2"/><text x="68.4392%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.2708%" y="357" width="0.0816%" height="15" fill="rgb(223,7,8)" fg:x="837" fg:w="1"/><text x="68.5208%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2708%" y="341" width="0.0816%" height="15" fill="rgb(241,217,22)" fg:x="837" fg:w="1"/><text x="68.5208%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.2708%" y="325" width="0.0816%" height="15" fill="rgb(248,209,0)" fg:x="837" fg:w="1"/><text x="68.5208%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2708%" y="309" width="0.0816%" height="15" fill="rgb(217,205,4)" fg:x="837" fg:w="1"/><text x="68.5208%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2708%" y="293" width="0.0816%" height="15" fill="rgb(228,124,39)" fg:x="837" fg:w="1"/><text x="68.5208%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.2708%" y="277" width="0.0816%" height="15" fill="rgb(250,116,42)" fg:x="837" fg:w="1"/><text x="68.5208%" y="287.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="68.3524%" y="517" width="0.0816%" height="15" fill="rgb(223,202,9)" fg:x="838" fg:w="1"/><text x="68.6024%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="68.3524%" y="501" width="0.0816%" height="15" fill="rgb(242,222,40)" fg:x="838" fg:w="1"/><text x="68.6024%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="68.3524%" y="485" width="0.0816%" height="15" fill="rgb(229,99,46)" fg:x="838" fg:w="1"/><text x="68.6024%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.3524%" y="469" width="0.0816%" height="15" fill="rgb(225,56,46)" fg:x="838" fg:w="1"/><text x="68.6024%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3524%" y="453" width="0.0816%" height="15" fill="rgb(227,94,5)" fg:x="838" fg:w="1"/><text x="68.6024%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3524%" y="437" width="0.0816%" height="15" fill="rgb(205,112,38)" fg:x="838" fg:w="1"/><text x="68.6024%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.3524%" y="421" width="0.0816%" height="15" fill="rgb(231,133,46)" fg:x="838" fg:w="1"/><text x="68.6024%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3524%" y="405" width="0.0816%" height="15" fill="rgb(217,16,9)" fg:x="838" fg:w="1"/><text x="68.6024%" y="415.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="68.4339%" y="517" width="0.0816%" height="15" fill="rgb(249,173,9)" fg:x="839" fg:w="1"/><text x="68.6839%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="68.4339%" y="501" width="0.0816%" height="15" fill="rgb(205,163,53)" fg:x="839" fg:w="1"/><text x="68.6839%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="68.4339%" y="485" width="0.0816%" height="15" fill="rgb(217,54,41)" fg:x="839" fg:w="1"/><text x="68.6839%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.4339%" y="469" width="0.0816%" height="15" fill="rgb(228,216,12)" fg:x="839" fg:w="1"/><text x="68.6839%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (31 samples, 2.53%)</title><rect x="66.0685%" y="549" width="2.5285%" height="15" fill="rgb(244,228,15)" fg:x="810" fg:w="31"/><text x="66.3185%" y="559.50">&lt;t..</text></g><g><title>plugins_core::build::BuildSurroundings::build (19 samples, 1.55%)</title><rect x="67.0473%" y="533" width="1.5498%" height="15" fill="rgb(221,176,53)" fg:x="822" fg:w="19"/><text x="67.2973%" y="543.50"></text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="68.5155%" y="517" width="0.0816%" height="15" fill="rgb(205,94,34)" fg:x="840" fg:w="1"/><text x="68.7655%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="68.5155%" y="501" width="0.0816%" height="15" fill="rgb(213,110,48)" fg:x="840" fg:w="1"/><text x="68.7655%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="68.5155%" y="485" width="0.0816%" height="15" fill="rgb(236,142,28)" fg:x="840" fg:w="1"/><text x="68.7655%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="68.5155%" y="469" width="0.0816%" height="15" fill="rgb(225,135,29)" fg:x="840" fg:w="1"/><text x="68.7655%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5155%" y="453" width="0.0816%" height="15" fill="rgb(252,45,31)" fg:x="840" fg:w="1"/><text x="68.7655%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.5155%" y="437" width="0.0816%" height="15" fill="rgb(211,187,50)" fg:x="840" fg:w="1"/><text x="68.7655%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.5155%" y="421" width="0.0816%" height="15" fill="rgb(229,109,7)" fg:x="840" fg:w="1"/><text x="68.7655%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.5155%" y="405" width="0.0816%" height="15" fill="rgb(251,131,51)" fg:x="840" fg:w="1"/><text x="68.7655%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.5155%" y="389" width="0.0816%" height="15" fill="rgb(251,180,35)" fg:x="840" fg:w="1"/><text x="68.7655%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5155%" y="373" width="0.0816%" height="15" fill="rgb(211,46,32)" fg:x="840" fg:w="1"/><text x="68.7655%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.5155%" y="357" width="0.0816%" height="15" fill="rgb(248,123,17)" fg:x="840" fg:w="1"/><text x="68.7655%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.5155%" y="341" width="0.0816%" height="15" fill="rgb(227,141,18)" fg:x="840" fg:w="1"/><text x="68.7655%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.5155%" y="325" width="0.0816%" height="15" fill="rgb(216,102,9)" fg:x="840" fg:w="1"/><text x="68.7655%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.5155%" y="309" width="0.0816%" height="15" fill="rgb(253,47,13)" fg:x="840" fg:w="1"/><text x="68.7655%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.5155%" y="293" width="0.0816%" height="15" fill="rgb(226,93,23)" fg:x="840" fg:w="1"/><text x="68.7655%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5155%" y="277" width="0.0816%" height="15" fill="rgb(247,104,17)" fg:x="840" fg:w="1"/><text x="68.7655%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5971%" y="533" width="0.0816%" height="15" fill="rgb(233,203,26)" fg:x="841" fg:w="1"/><text x="68.8471%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (2 samples, 0.16%)</title><rect x="68.5971%" y="549" width="0.1631%" height="15" fill="rgb(244,98,49)" fg:x="841" fg:w="2"/><text x="68.8471%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="68.6786%" y="533" width="0.0816%" height="15" fill="rgb(235,134,22)" fg:x="842" fg:w="1"/><text x="68.9286%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6786%" y="517" width="0.0816%" height="15" fill="rgb(221,70,32)" fg:x="842" fg:w="1"/><text x="68.9286%" y="527.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="68.7602%" y="517" width="0.0816%" height="15" fill="rgb(238,15,50)" fg:x="843" fg:w="1"/><text x="69.0102%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="68.7602%" y="501" width="0.0816%" height="15" fill="rgb(215,221,48)" fg:x="843" fg:w="1"/><text x="69.0102%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="68.7602%" y="485" width="0.0816%" height="15" fill="rgb(236,73,3)" fg:x="843" fg:w="1"/><text x="69.0102%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7602%" y="469" width="0.0816%" height="15" fill="rgb(250,107,11)" fg:x="843" fg:w="1"/><text x="69.0102%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7602%" y="453" width="0.0816%" height="15" fill="rgb(242,39,14)" fg:x="843" fg:w="1"/><text x="69.0102%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.8418%" y="453" width="0.0816%" height="15" fill="rgb(248,164,37)" fg:x="844" fg:w="1"/><text x="69.0918%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="68.8418%" y="485" width="0.4078%" height="15" fill="rgb(217,60,12)" fg:x="844" fg:w="5"/><text x="69.0918%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="68.8418%" y="469" width="0.4078%" height="15" fill="rgb(240,125,29)" fg:x="844" fg:w="5"/><text x="69.0918%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="68.9233%" y="453" width="0.3263%" height="15" fill="rgb(208,207,28)" fg:x="845" fg:w="4"/><text x="69.1733%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="68.9233%" y="437" width="0.3263%" height="15" fill="rgb(209,159,27)" fg:x="845" fg:w="4"/><text x="69.1733%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="68.9233%" y="421" width="0.3263%" height="15" fill="rgb(251,176,53)" fg:x="845" fg:w="4"/><text x="69.1733%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.0865%" y="405" width="0.1631%" height="15" fill="rgb(211,85,7)" fg:x="847" fg:w="2"/><text x="69.3365%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.1680%" y="389" width="0.0816%" height="15" fill="rgb(216,64,54)" fg:x="848" fg:w="1"/><text x="69.4180%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.1680%" y="373" width="0.0816%" height="15" fill="rgb(217,54,24)" fg:x="848" fg:w="1"/><text x="69.4180%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2496%" y="485" width="0.0816%" height="15" fill="rgb(208,206,53)" fg:x="849" fg:w="1"/><text x="69.4996%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.2496%" y="469" width="0.0816%" height="15" fill="rgb(251,74,39)" fg:x="849" fg:w="1"/><text x="69.4996%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2496%" y="453" width="0.0816%" height="15" fill="rgb(226,47,5)" fg:x="849" fg:w="1"/><text x="69.4996%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.2496%" y="437" width="0.0816%" height="15" fill="rgb(234,111,33)" fg:x="849" fg:w="1"/><text x="69.4996%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2496%" y="421" width="0.0816%" height="15" fill="rgb(251,14,10)" fg:x="849" fg:w="1"/><text x="69.4996%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.4127%" y="437" width="0.0816%" height="15" fill="rgb(232,43,0)" fg:x="851" fg:w="1"/><text x="69.6627%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4943%" y="421" width="0.0816%" height="15" fill="rgb(222,68,43)" fg:x="852" fg:w="1"/><text x="69.7443%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="69.3312%" y="469" width="0.3263%" height="15" fill="rgb(217,24,23)" fg:x="850" fg:w="4"/><text x="69.5812%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="69.3312%" y="453" width="0.3263%" height="15" fill="rgb(229,209,14)" fg:x="850" fg:w="4"/><text x="69.5812%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.4943%" y="437" width="0.1631%" height="15" fill="rgb(250,149,48)" fg:x="852" fg:w="2"/><text x="69.7443%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5759%" y="421" width="0.0816%" height="15" fill="rgb(210,120,37)" fg:x="853" fg:w="1"/><text x="69.8259%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5759%" y="405" width="0.0816%" height="15" fill="rgb(210,21,8)" fg:x="853" fg:w="1"/><text x="69.8259%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5759%" y="389" width="0.0816%" height="15" fill="rgb(243,145,7)" fg:x="853" fg:w="1"/><text x="69.8259%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.5759%" y="373" width="0.0816%" height="15" fill="rgb(238,178,32)" fg:x="853" fg:w="1"/><text x="69.8259%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5759%" y="357" width="0.0816%" height="15" fill="rgb(222,4,10)" fg:x="853" fg:w="1"/><text x="69.8259%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="69.6574%" y="437" width="0.4078%" height="15" fill="rgb(239,7,37)" fg:x="854" fg:w="5"/><text x="69.9074%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="69.8206%" y="421" width="0.2447%" height="15" fill="rgb(215,31,37)" fg:x="856" fg:w="3"/><text x="70.0706%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="69.9837%" y="405" width="0.0816%" height="15" fill="rgb(224,83,33)" fg:x="858" fg:w="1"/><text x="70.2337%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0653%" y="437" width="0.0816%" height="15" fill="rgb(239,55,3)" fg:x="859" fg:w="1"/><text x="70.3153%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.0653%" y="421" width="0.0816%" height="15" fill="rgb(247,92,11)" fg:x="859" fg:w="1"/><text x="70.3153%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0653%" y="405" width="0.0816%" height="15" fill="rgb(239,200,7)" fg:x="859" fg:w="1"/><text x="70.3153%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1468%" y="405" width="0.0816%" height="15" fill="rgb(227,115,8)" fg:x="860" fg:w="1"/><text x="70.3968%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="70.1468%" y="437" width="0.1631%" height="15" fill="rgb(215,189,27)" fg:x="860" fg:w="2"/><text x="70.3968%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.1468%" y="421" width="0.1631%" height="15" fill="rgb(251,216,39)" fg:x="860" fg:w="2"/><text x="70.3968%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.2284%" y="405" width="0.0816%" height="15" fill="rgb(207,29,47)" fg:x="861" fg:w="1"/><text x="70.4784%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2284%" y="389" width="0.0816%" height="15" fill="rgb(210,71,34)" fg:x="861" fg:w="1"/><text x="70.4784%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2284%" y="373" width="0.0816%" height="15" fill="rgb(253,217,51)" fg:x="861" fg:w="1"/><text x="70.4784%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2284%" y="357" width="0.0816%" height="15" fill="rgb(222,117,46)" fg:x="861" fg:w="1"/><text x="70.4784%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (10 samples, 0.82%)</title><rect x="69.6574%" y="469" width="0.8157%" height="15" fill="rgb(226,132,6)" fg:x="854" fg:w="10"/><text x="69.9074%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.82%)</title><rect x="69.6574%" y="453" width="0.8157%" height="15" fill="rgb(254,145,51)" fg:x="854" fg:w="10"/><text x="69.9074%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="70.3100%" y="437" width="0.1631%" height="15" fill="rgb(231,199,27)" fg:x="862" fg:w="2"/><text x="70.5600%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="70.3100%" y="421" width="0.1631%" height="15" fill="rgb(245,158,14)" fg:x="862" fg:w="2"/><text x="70.5600%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.3100%" y="405" width="0.1631%" height="15" fill="rgb(240,113,14)" fg:x="862" fg:w="2"/><text x="70.5600%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="70.3100%" y="389" width="0.1631%" height="15" fill="rgb(210,20,13)" fg:x="862" fg:w="2"/><text x="70.5600%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.3100%" y="373" width="0.1631%" height="15" fill="rgb(241,144,13)" fg:x="862" fg:w="2"/><text x="70.5600%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3915%" y="357" width="0.0816%" height="15" fill="rgb(235,43,34)" fg:x="863" fg:w="1"/><text x="70.6415%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.3915%" y="341" width="0.0816%" height="15" fill="rgb(208,36,20)" fg:x="863" fg:w="1"/><text x="70.6415%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3915%" y="325" width="0.0816%" height="15" fill="rgb(239,204,10)" fg:x="863" fg:w="1"/><text x="70.6415%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="70.4731%" y="469" width="0.0816%" height="15" fill="rgb(217,84,43)" fg:x="864" fg:w="1"/><text x="70.7231%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.4731%" y="453" width="0.0816%" height="15" fill="rgb(241,170,50)" fg:x="864" fg:w="1"/><text x="70.7231%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4731%" y="437" width="0.0816%" height="15" fill="rgb(226,205,29)" fg:x="864" fg:w="1"/><text x="70.7231%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4731%" y="421" width="0.0816%" height="15" fill="rgb(233,113,1)" fg:x="864" fg:w="1"/><text x="70.7231%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4731%" y="405" width="0.0816%" height="15" fill="rgb(253,98,13)" fg:x="864" fg:w="1"/><text x="70.7231%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4731%" y="389" width="0.0816%" height="15" fill="rgb(211,115,12)" fg:x="864" fg:w="1"/><text x="70.7231%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.4731%" y="373" width="0.0816%" height="15" fill="rgb(208,12,16)" fg:x="864" fg:w="1"/><text x="70.7231%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4731%" y="357" width="0.0816%" height="15" fill="rgb(237,193,54)" fg:x="864" fg:w="1"/><text x="70.7231%" y="367.50"></text></g><g><title>kernel::compare::any_entity_changes (17 samples, 1.39%)</title><rect x="69.3312%" y="485" width="1.3866%" height="15" fill="rgb(243,22,42)" fg:x="850" fg:w="17"/><text x="69.5812%" y="495.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="70.5546%" y="469" width="0.1631%" height="15" fill="rgb(233,151,36)" fg:x="865" fg:w="2"/><text x="70.8046%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="70.5546%" y="453" width="0.1631%" height="15" fill="rgb(237,57,45)" fg:x="865" fg:w="2"/><text x="70.8046%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="70.5546%" y="437" width="0.1631%" height="15" fill="rgb(221,88,17)" fg:x="865" fg:w="2"/><text x="70.8046%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="70.5546%" y="421" width="0.1631%" height="15" fill="rgb(230,79,15)" fg:x="865" fg:w="2"/><text x="70.8046%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="70.5546%" y="405" width="0.1631%" height="15" fill="rgb(213,57,13)" fg:x="865" fg:w="2"/><text x="70.8046%" y="415.50"></text></g><g><title>engine::session::Session::close (25 samples, 2.04%)</title><rect x="68.7602%" y="549" width="2.0392%" height="15" fill="rgb(222,116,39)" fg:x="843" fg:w="25"/><text x="69.0102%" y="559.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (25 samples, 2.04%)</title><rect x="68.7602%" y="533" width="2.0392%" height="15" fill="rgb(245,107,2)" fg:x="843" fg:w="25"/><text x="69.0102%" y="543.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (24 samples, 1.96%)</title><rect x="68.8418%" y="517" width="1.9576%" height="15" fill="rgb(238,1,10)" fg:x="844" fg:w="24"/><text x="69.0918%" y="527.50">e..</text></g><g><title>engine::session::Session::check_for_changes (24 samples, 1.96%)</title><rect x="68.8418%" y="501" width="1.9576%" height="15" fill="rgb(249,4,48)" fg:x="844" fg:w="24"/><text x="69.0918%" y="511.50">e..</text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="70.7178%" y="485" width="0.0816%" height="15" fill="rgb(223,151,18)" fg:x="867" fg:w="1"/><text x="70.9678%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7178%" y="469" width="0.0816%" height="15" fill="rgb(227,65,43)" fg:x="867" fg:w="1"/><text x="70.9678%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.7178%" y="453" width="0.0816%" height="15" fill="rgb(218,40,45)" fg:x="867" fg:w="1"/><text x="70.9678%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.7178%" y="437" width="0.0816%" height="15" fill="rgb(252,121,31)" fg:x="867" fg:w="1"/><text x="70.9678%" y="447.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="70.7993%" y="501" width="0.0816%" height="15" fill="rgb(219,158,43)" fg:x="868" fg:w="1"/><text x="71.0493%" y="511.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7993%" y="485" width="0.0816%" height="15" fill="rgb(231,162,42)" fg:x="868" fg:w="1"/><text x="71.0493%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7993%" y="469" width="0.0816%" height="15" fill="rgb(217,179,25)" fg:x="868" fg:w="1"/><text x="71.0493%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7993%" y="453" width="0.0816%" height="15" fill="rgb(206,212,31)" fg:x="868" fg:w="1"/><text x="71.0493%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.7993%" y="437" width="0.0816%" height="15" fill="rgb(235,144,12)" fg:x="868" fg:w="1"/><text x="71.0493%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.7993%" y="421" width="0.0816%" height="15" fill="rgb(213,51,10)" fg:x="868" fg:w="1"/><text x="71.0493%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.7993%" y="405" width="0.0816%" height="15" fill="rgb(231,145,14)" fg:x="868" fg:w="1"/><text x="71.0493%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7993%" y="389" width="0.0816%" height="15" fill="rgb(235,15,28)" fg:x="868" fg:w="1"/><text x="71.0493%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7993%" y="373" width="0.0816%" height="15" fill="rgb(237,206,10)" fg:x="868" fg:w="1"/><text x="71.0493%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.7993%" y="357" width="0.0816%" height="15" fill="rgb(236,227,27)" fg:x="868" fg:w="1"/><text x="71.0493%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.7993%" y="341" width="0.0816%" height="15" fill="rgb(246,83,35)" fg:x="868" fg:w="1"/><text x="71.0493%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.7993%" y="325" width="0.0816%" height="15" fill="rgb(220,136,24)" fg:x="868" fg:w="1"/><text x="71.0493%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.7993%" y="309" width="0.0816%" height="15" fill="rgb(217,3,25)" fg:x="868" fg:w="1"/><text x="71.0493%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7993%" y="293" width="0.0816%" height="15" fill="rgb(239,24,14)" fg:x="868" fg:w="1"/><text x="71.0493%" y="303.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="70.8809%" y="405" width="0.0816%" height="15" fill="rgb(244,16,53)" fg:x="869" fg:w="1"/><text x="71.1309%" y="415.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="70.8809%" y="389" width="0.0816%" height="15" fill="rgb(208,175,44)" fg:x="869" fg:w="1"/><text x="71.1309%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="70.8809%" y="373" width="0.0816%" height="15" fill="rgb(252,18,48)" fg:x="869" fg:w="1"/><text x="71.1309%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8809%" y="357" width="0.0816%" height="15" fill="rgb(234,199,32)" fg:x="869" fg:w="1"/><text x="71.1309%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8809%" y="341" width="0.0816%" height="15" fill="rgb(225,77,54)" fg:x="869" fg:w="1"/><text x="71.1309%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.8809%" y="325" width="0.0816%" height="15" fill="rgb(225,42,25)" fg:x="869" fg:w="1"/><text x="71.1309%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.8809%" y="309" width="0.0816%" height="15" fill="rgb(242,227,46)" fg:x="869" fg:w="1"/><text x="71.1309%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.8809%" y="293" width="0.0816%" height="15" fill="rgb(246,197,35)" fg:x="869" fg:w="1"/><text x="71.1309%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.8809%" y="277" width="0.0816%" height="15" fill="rgb(215,159,26)" fg:x="869" fg:w="1"/><text x="71.1309%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8809%" y="261" width="0.0816%" height="15" fill="rgb(212,194,50)" fg:x="869" fg:w="1"/><text x="71.1309%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.9625%" y="389" width="0.0816%" height="15" fill="rgb(246,132,1)" fg:x="870" fg:w="1"/><text x="71.2125%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.9625%" y="373" width="0.0816%" height="15" fill="rgb(217,71,7)" fg:x="870" fg:w="1"/><text x="71.2125%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="70.9625%" y="357" width="0.0816%" height="15" fill="rgb(252,59,32)" fg:x="870" fg:w="1"/><text x="71.2125%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="70.9625%" y="341" width="0.0816%" height="15" fill="rgb(253,204,25)" fg:x="870" fg:w="1"/><text x="71.2125%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="70.9625%" y="325" width="0.0816%" height="15" fill="rgb(232,21,16)" fg:x="870" fg:w="1"/><text x="71.2125%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="70.9625%" y="309" width="0.0816%" height="15" fill="rgb(248,90,29)" fg:x="870" fg:w="1"/><text x="71.2125%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9625%" y="293" width="0.0816%" height="15" fill="rgb(249,223,7)" fg:x="870" fg:w="1"/><text x="71.2125%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9625%" y="277" width="0.0816%" height="15" fill="rgb(231,119,42)" fg:x="870" fg:w="1"/><text x="71.2125%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.9625%" y="261" width="0.0816%" height="15" fill="rgb(215,41,35)" fg:x="870" fg:w="1"/><text x="71.2125%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.9625%" y="245" width="0.0816%" height="15" fill="rgb(220,44,45)" fg:x="870" fg:w="1"/><text x="71.2125%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.0440%" y="373" width="0.0816%" height="15" fill="rgb(253,197,36)" fg:x="871" fg:w="1"/><text x="71.2940%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="71.1256%" y="357" width="0.0816%" height="15" fill="rgb(245,225,54)" fg:x="872" fg:w="1"/><text x="71.3756%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="71.1256%" y="341" width="0.0816%" height="15" fill="rgb(239,94,37)" fg:x="872" fg:w="1"/><text x="71.3756%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="71.0440%" y="389" width="0.2447%" height="15" fill="rgb(242,217,10)" fg:x="871" fg:w="3"/><text x="71.2940%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="71.1256%" y="373" width="0.1631%" height="15" fill="rgb(250,193,7)" fg:x="872" fg:w="2"/><text x="71.3756%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="71.2072%" y="357" width="0.0816%" height="15" fill="rgb(230,104,19)" fg:x="873" fg:w="1"/><text x="71.4572%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="71.2072%" y="341" width="0.0816%" height="15" fill="rgb(230,181,4)" fg:x="873" fg:w="1"/><text x="71.4572%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2072%" y="325" width="0.0816%" height="15" fill="rgb(216,219,49)" fg:x="873" fg:w="1"/><text x="71.4572%" y="335.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.3703%" y="293" width="0.0816%" height="15" fill="rgb(254,144,0)" fg:x="875" fg:w="1"/><text x="71.6203%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.24%)</title><rect x="71.3703%" y="309" width="0.2447%" height="15" fill="rgb(205,209,38)" fg:x="875" fg:w="3"/><text x="71.6203%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="71.4519%" y="293" width="0.1631%" height="15" fill="rgb(240,21,42)" fg:x="876" fg:w="2"/><text x="71.7019%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.5334%" y="277" width="0.0816%" height="15" fill="rgb(241,132,3)" fg:x="877" fg:w="1"/><text x="71.7834%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.5334%" y="261" width="0.0816%" height="15" fill="rgb(225,14,2)" fg:x="877" fg:w="1"/><text x="71.7834%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (5 samples, 0.41%)</title><rect x="71.2887%" y="341" width="0.4078%" height="15" fill="rgb(210,141,35)" fg:x="874" fg:w="5"/><text x="71.5387%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="71.2887%" y="325" width="0.4078%" height="15" fill="rgb(251,14,44)" fg:x="874" fg:w="5"/><text x="71.5387%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="71.6150%" y="309" width="0.0816%" height="15" fill="rgb(247,48,18)" fg:x="878" fg:w="1"/><text x="71.8650%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.6150%" y="293" width="0.0816%" height="15" fill="rgb(225,0,40)" fg:x="878" fg:w="1"/><text x="71.8650%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7781%" y="325" width="0.0816%" height="15" fill="rgb(221,31,33)" fg:x="880" fg:w="1"/><text x="72.0281%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.49%)</title><rect x="71.8597%" y="325" width="0.4894%" height="15" fill="rgb(237,42,40)" fg:x="881" fg:w="6"/><text x="72.1097%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.49%)</title><rect x="71.8597%" y="309" width="0.4894%" height="15" fill="rgb(233,51,29)" fg:x="881" fg:w="6"/><text x="72.1097%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2675%" y="293" width="0.0816%" height="15" fill="rgb(226,58,20)" fg:x="886" fg:w="1"/><text x="72.5175%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="72.3491%" y="309" width="0.0816%" height="15" fill="rgb(208,98,7)" fg:x="887" fg:w="1"/><text x="72.5991%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="72.3491%" y="293" width="0.0816%" height="15" fill="rgb(228,143,44)" fg:x="887" fg:w="1"/><text x="72.5991%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3491%" y="277" width="0.0816%" height="15" fill="rgb(246,55,38)" fg:x="887" fg:w="1"/><text x="72.5991%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="72.3491%" y="325" width="0.4078%" height="15" fill="rgb(247,87,16)" fg:x="887" fg:w="5"/><text x="72.5991%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="72.4307%" y="309" width="0.3263%" height="15" fill="rgb(234,129,42)" fg:x="888" fg:w="4"/><text x="72.6807%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="72.7569%" y="325" width="0.0816%" height="15" fill="rgb(220,82,16)" fg:x="892" fg:w="1"/><text x="73.0069%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="72.8385%" y="325" width="0.0816%" height="15" fill="rgb(211,88,4)" fg:x="893" fg:w="1"/><text x="73.0885%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="72.8385%" y="309" width="0.0816%" height="15" fill="rgb(248,151,21)" fg:x="893" fg:w="1"/><text x="73.0885%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="72.8385%" y="293" width="0.0816%" height="15" fill="rgb(238,163,6)" fg:x="893" fg:w="1"/><text x="73.0885%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="73.0832%" y="261" width="0.2447%" height="15" fill="rgb(209,183,11)" fg:x="896" fg:w="3"/><text x="73.3332%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="73.0832%" y="245" width="0.2447%" height="15" fill="rgb(219,37,20)" fg:x="896" fg:w="3"/><text x="73.3332%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="73.0832%" y="229" width="0.2447%" height="15" fill="rgb(210,158,4)" fg:x="896" fg:w="3"/><text x="73.3332%" y="239.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="73.0832%" y="213" width="0.2447%" height="15" fill="rgb(221,167,53)" fg:x="896" fg:w="3"/><text x="73.3332%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="73.3279%" y="261" width="0.1631%" height="15" fill="rgb(237,151,45)" fg:x="899" fg:w="2"/><text x="73.5779%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="73.4095%" y="245" width="0.0816%" height="15" fill="rgb(231,39,3)" fg:x="900" fg:w="1"/><text x="73.6595%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4910%" y="229" width="0.0816%" height="15" fill="rgb(212,167,28)" fg:x="901" fg:w="1"/><text x="73.7410%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (58 samples, 4.73%)</title><rect x="73.4910%" y="261" width="4.7308%" height="15" fill="rgb(232,178,8)" fg:x="901" fg:w="58"/><text x="73.7410%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (58 samples, 4.73%)</title><rect x="73.4910%" y="245" width="4.7308%" height="15" fill="rgb(225,151,20)" fg:x="901" fg:w="58"/><text x="73.7410%" y="255.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (57 samples, 4.65%)</title><rect x="73.5726%" y="229" width="4.6493%" height="15" fill="rgb(238,3,37)" fg:x="902" fg:w="57"/><text x="73.8226%" y="239.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="78.2219%" y="261" width="0.4078%" height="15" fill="rgb(251,147,42)" fg:x="959" fg:w="5"/><text x="78.4719%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5481%" y="245" width="0.0816%" height="15" fill="rgb(208,173,10)" fg:x="963" fg:w="1"/><text x="78.7981%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 5.79%)</title><rect x="72.9201%" y="309" width="5.7912%" height="15" fill="rgb(246,225,4)" fg:x="894" fg:w="71"/><text x="73.1701%" y="319.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.79%)</title><rect x="72.9201%" y="293" width="5.7912%" height="15" fill="rgb(248,102,6)" fg:x="894" fg:w="71"/><text x="73.1701%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.79%)</title><rect x="72.9201%" y="277" width="5.7912%" height="15" fill="rgb(232,6,21)" fg:x="894" fg:w="71"/><text x="73.1701%" y="287.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="78.6297%" y="261" width="0.0816%" height="15" fill="rgb(221,179,22)" fg:x="964" fg:w="1"/><text x="78.8797%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.6297%" y="245" width="0.0816%" height="15" fill="rgb(252,50,20)" fg:x="964" fg:w="1"/><text x="78.8797%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.6297%" y="229" width="0.0816%" height="15" fill="rgb(222,56,38)" fg:x="964" fg:w="1"/><text x="78.8797%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6297%" y="213" width="0.0816%" height="15" fill="rgb(206,193,29)" fg:x="964" fg:w="1"/><text x="78.8797%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.7113%" y="293" width="0.0816%" height="15" fill="rgb(239,192,45)" fg:x="965" fg:w="1"/><text x="78.9613%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="78.7928%" y="293" width="0.0816%" height="15" fill="rgb(254,18,36)" fg:x="966" fg:w="1"/><text x="79.0428%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="78.7113%" y="309" width="0.2447%" height="15" fill="rgb(221,127,11)" fg:x="965" fg:w="3"/><text x="78.9613%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="78.8744%" y="293" width="0.0816%" height="15" fill="rgb(234,146,35)" fg:x="967" fg:w="1"/><text x="79.1244%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (75 samples, 6.12%)</title><rect x="72.9201%" y="325" width="6.1175%" height="15" fill="rgb(254,201,37)" fg:x="894" fg:w="75"/><text x="73.1701%" y="335.50">regex_au..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="78.9560%" y="309" width="0.0816%" height="15" fill="rgb(211,202,23)" fg:x="968" fg:w="1"/><text x="79.2060%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (92 samples, 7.50%)</title><rect x="71.6966%" y="341" width="7.5041%" height="15" fill="rgb(237,91,2)" fg:x="879" fg:w="92"/><text x="71.9466%" y="351.50">regex_auto..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="79.0375%" y="325" width="0.1631%" height="15" fill="rgb(226,228,36)" fg:x="969" fg:w="2"/><text x="79.2875%" y="335.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="79.1191%" y="309" width="0.0816%" height="15" fill="rgb(213,63,50)" fg:x="970" fg:w="1"/><text x="79.3691%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="79.2007%" y="293" width="0.0816%" height="15" fill="rgb(235,194,19)" fg:x="971" fg:w="1"/><text x="79.4507%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="79.2007%" y="341" width="0.3263%" height="15" fill="rgb(207,204,18)" fg:x="971" fg:w="4"/><text x="79.4507%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="79.2007%" y="325" width="0.3263%" height="15" fill="rgb(248,8,7)" fg:x="971" fg:w="4"/><text x="79.4507%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.33%)</title><rect x="79.2007%" y="309" width="0.3263%" height="15" fill="rgb(223,145,47)" fg:x="971" fg:w="4"/><text x="79.4507%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="79.2822%" y="293" width="0.2447%" height="15" fill="rgb(228,84,11)" fg:x="972" fg:w="3"/><text x="79.5322%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="79.2822%" y="277" width="0.2447%" height="15" fill="rgb(218,76,45)" fg:x="972" fg:w="3"/><text x="79.5322%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="79.2822%" y="261" width="0.2447%" height="15" fill="rgb(223,80,15)" fg:x="972" fg:w="3"/><text x="79.5322%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="79.2822%" y="245" width="0.2447%" height="15" fill="rgb(219,218,33)" fg:x="972" fg:w="3"/><text x="79.5322%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (102 samples, 8.32%)</title><rect x="71.2887%" y="389" width="8.3197%" height="15" fill="rgb(208,51,11)" fg:x="874" fg:w="102"/><text x="71.5387%" y="399.50">regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (102 samples, 8.32%)</title><rect x="71.2887%" y="373" width="8.3197%" height="15" fill="rgb(229,165,39)" fg:x="874" fg:w="102"/><text x="71.5387%" y="383.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (102 samples, 8.32%)</title><rect x="71.2887%" y="357" width="8.3197%" height="15" fill="rgb(241,100,24)" fg:x="874" fg:w="102"/><text x="71.5387%" y="367.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="79.5269%" y="341" width="0.0816%" height="15" fill="rgb(228,14,23)" fg:x="975" fg:w="1"/><text x="79.7769%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="79.5269%" y="325" width="0.0816%" height="15" fill="rgb(247,116,52)" fg:x="975" fg:w="1"/><text x="79.7769%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="79.5269%" y="309" width="0.0816%" height="15" fill="rgb(216,149,33)" fg:x="975" fg:w="1"/><text x="79.7769%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="79.5269%" y="293" width="0.0816%" height="15" fill="rgb(238,142,29)" fg:x="975" fg:w="1"/><text x="79.7769%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6085%" y="325" width="0.0816%" height="15" fill="rgb(224,83,40)" fg:x="976" fg:w="1"/><text x="79.8585%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.6085%" y="309" width="0.0816%" height="15" fill="rgb(234,165,11)" fg:x="976" fg:w="1"/><text x="79.8585%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.6085%" y="293" width="0.0816%" height="15" fill="rgb(215,96,23)" fg:x="976" fg:w="1"/><text x="79.8585%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (111 samples, 9.05%)</title><rect x="70.9625%" y="405" width="9.0538%" height="15" fill="rgb(233,179,26)" fg:x="870" fg:w="111"/><text x="71.2125%" y="415.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="79.6085%" y="389" width="0.4078%" height="15" fill="rgb(225,129,33)" fg:x="976" fg:w="5"/><text x="79.8585%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="79.6085%" y="373" width="0.4078%" height="15" fill="rgb(237,49,13)" fg:x="976" fg:w="5"/><text x="79.8585%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="79.6085%" y="357" width="0.4078%" height="15" fill="rgb(211,3,31)" fg:x="976" fg:w="5"/><text x="79.8585%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="79.6085%" y="341" width="0.4078%" height="15" fill="rgb(216,152,19)" fg:x="976" fg:w="5"/><text x="79.8585%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="79.6900%" y="325" width="0.3263%" height="15" fill="rgb(251,121,35)" fg:x="977" fg:w="4"/><text x="79.9400%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="79.9347%" y="309" width="0.0816%" height="15" fill="rgb(210,217,47)" fg:x="980" fg:w="1"/><text x="80.1847%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.6688%" y="293" width="0.0816%" height="15" fill="rgb(244,116,22)" fg:x="989" fg:w="1"/><text x="80.9188%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6688%" y="277" width="0.0816%" height="15" fill="rgb(228,17,21)" fg:x="989" fg:w="1"/><text x="80.9188%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.6688%" y="261" width="0.0816%" height="15" fill="rgb(240,149,34)" fg:x="989" fg:w="1"/><text x="80.9188%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.98%)</title><rect x="80.0979%" y="309" width="0.9788%" height="15" fill="rgb(208,125,47)" fg:x="982" fg:w="12"/><text x="80.3479%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.33%)</title><rect x="80.7504%" y="293" width="0.3263%" height="15" fill="rgb(249,186,39)" fg:x="990" fg:w="4"/><text x="81.0004%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (14 samples, 1.14%)</title><rect x="80.0163%" y="389" width="1.1419%" height="15" fill="rgb(240,220,33)" fg:x="981" fg:w="14"/><text x="80.2663%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.14%)</title><rect x="80.0163%" y="373" width="1.1419%" height="15" fill="rgb(243,110,23)" fg:x="981" fg:w="14"/><text x="80.2663%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.14%)</title><rect x="80.0163%" y="357" width="1.1419%" height="15" fill="rgb(219,163,46)" fg:x="981" fg:w="14"/><text x="80.2663%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.14%)</title><rect x="80.0163%" y="341" width="1.1419%" height="15" fill="rgb(216,126,30)" fg:x="981" fg:w="14"/><text x="80.2663%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.14%)</title><rect x="80.0163%" y="325" width="1.1419%" height="15" fill="rgb(208,139,11)" fg:x="981" fg:w="14"/><text x="80.2663%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="81.0767%" y="309" width="0.0816%" height="15" fill="rgb(213,118,36)" fg:x="994" fg:w="1"/><text x="81.3267%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.0767%" y="293" width="0.0816%" height="15" fill="rgb(226,43,17)" fg:x="994" fg:w="1"/><text x="81.3267%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.0767%" y="277" width="0.0816%" height="15" fill="rgb(254,217,4)" fg:x="994" fg:w="1"/><text x="81.3267%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.0767%" y="261" width="0.0816%" height="15" fill="rgb(210,134,47)" fg:x="994" fg:w="1"/><text x="81.3267%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3214%" y="341" width="0.0816%" height="15" fill="rgb(237,24,49)" fg:x="997" fg:w="1"/><text x="81.5714%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="81.4029%" y="341" width="0.0816%" height="15" fill="rgb(251,39,46)" fg:x="998" fg:w="1"/><text x="81.6529%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.4029%" y="325" width="0.0816%" height="15" fill="rgb(251,220,3)" fg:x="998" fg:w="1"/><text x="81.6529%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="81.4029%" y="309" width="0.0816%" height="15" fill="rgb(228,105,12)" fg:x="998" fg:w="1"/><text x="81.6529%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.4029%" y="293" width="0.0816%" height="15" fill="rgb(215,196,1)" fg:x="998" fg:w="1"/><text x="81.6529%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="81.4029%" y="277" width="0.0816%" height="15" fill="rgb(214,33,39)" fg:x="998" fg:w="1"/><text x="81.6529%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.4029%" y="261" width="0.0816%" height="15" fill="rgb(220,19,52)" fg:x="998" fg:w="1"/><text x="81.6529%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7292%" y="309" width="0.0816%" height="15" fill="rgb(221,78,38)" fg:x="1002" fg:w="1"/><text x="81.9792%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="81.8108%" y="309" width="0.0816%" height="15" fill="rgb(253,30,16)" fg:x="1003" fg:w="1"/><text x="82.0608%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.82%)</title><rect x="81.7292%" y="325" width="0.8157%" height="15" fill="rgb(242,65,0)" fg:x="1002" fg:w="10"/><text x="81.9792%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.65%)</title><rect x="81.8923%" y="309" width="0.6525%" height="15" fill="rgb(235,201,12)" fg:x="1004" fg:w="8"/><text x="82.1423%" y="319.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="82.3002%" y="293" width="0.2447%" height="15" fill="rgb(233,161,9)" fg:x="1009" fg:w="3"/><text x="82.5502%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="82.5449%" y="325" width="0.1631%" height="15" fill="rgb(241,207,41)" fg:x="1012" fg:w="2"/><text x="82.7949%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="82.5449%" y="309" width="0.1631%" height="15" fill="rgb(212,69,46)" fg:x="1012" fg:w="2"/><text x="82.7949%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="82.9527%" y="293" width="0.0816%" height="15" fill="rgb(239,69,45)" fg:x="1017" fg:w="1"/><text x="83.2027%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.9527%" y="277" width="0.0816%" height="15" fill="rgb(242,117,48)" fg:x="1017" fg:w="1"/><text x="83.2027%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.9527%" y="261" width="0.0816%" height="15" fill="rgb(228,41,36)" fg:x="1017" fg:w="1"/><text x="83.2027%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.9527%" y="245" width="0.0816%" height="15" fill="rgb(212,3,32)" fg:x="1017" fg:w="1"/><text x="83.2027%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.33%)</title><rect x="83.0343%" y="293" width="0.3263%" height="15" fill="rgb(233,41,49)" fg:x="1018" fg:w="4"/><text x="83.2843%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="83.1974%" y="277" width="0.1631%" height="15" fill="rgb(252,170,49)" fg:x="1020" fg:w="2"/><text x="83.4474%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.3605%" y="261" width="0.0816%" height="15" fill="rgb(229,53,26)" fg:x="1022" fg:w="1"/><text x="83.6105%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.98%)</title><rect x="82.7080%" y="325" width="0.9788%" height="15" fill="rgb(217,157,12)" fg:x="1014" fg:w="12"/><text x="82.9580%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.90%)</title><rect x="82.7896%" y="309" width="0.8972%" height="15" fill="rgb(227,17,9)" fg:x="1015" fg:w="11"/><text x="83.0396%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.33%)</title><rect x="83.3605%" y="293" width="0.3263%" height="15" fill="rgb(218,84,12)" fg:x="1022" fg:w="4"/><text x="83.6105%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.33%)</title><rect x="83.3605%" y="277" width="0.3263%" height="15" fill="rgb(212,79,24)" fg:x="1022" fg:w="4"/><text x="83.6105%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="83.4421%" y="261" width="0.2447%" height="15" fill="rgb(217,222,37)" fg:x="1023" fg:w="3"/><text x="83.6921%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="83.8499%" y="277" width="0.0816%" height="15" fill="rgb(246,208,8)" fg:x="1028" fg:w="1"/><text x="84.0999%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.8499%" y="261" width="0.0816%" height="15" fill="rgb(244,133,10)" fg:x="1028" fg:w="1"/><text x="84.0999%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.8499%" y="245" width="0.0816%" height="15" fill="rgb(209,219,41)" fg:x="1028" fg:w="1"/><text x="84.0999%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8499%" y="229" width="0.0816%" height="15" fill="rgb(253,175,45)" fg:x="1028" fg:w="1"/><text x="84.0999%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.0131%" y="229" width="0.0816%" height="15" fill="rgb(235,100,37)" fg:x="1030" fg:w="1"/><text x="84.2631%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="85.0734%" y="213" width="0.5710%" height="15" fill="rgb(225,87,19)" fg:x="1043" fg:w="7"/><text x="85.3234%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.33%)</title><rect x="85.6444%" y="213" width="0.3263%" height="15" fill="rgb(217,152,17)" fg:x="1050" fg:w="4"/><text x="85.8944%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.8891%" y="197" width="0.0816%" height="15" fill="rgb(235,72,13)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.8891%" y="181" width="0.0816%" height="15" fill="rgb(233,140,18)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.8891%" y="165" width="0.0816%" height="15" fill="rgb(207,212,28)" fg:x="1053" fg:w="1"/><text x="86.1391%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="85.9706%" y="213" width="0.1631%" height="15" fill="rgb(220,130,25)" fg:x="1054" fg:w="2"/><text x="86.2206%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.0522%" y="197" width="0.0816%" height="15" fill="rgb(205,55,34)" fg:x="1055" fg:w="1"/><text x="86.3022%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0522%" y="181" width="0.0816%" height="15" fill="rgb(237,54,35)" fg:x="1055" fg:w="1"/><text x="86.3022%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.0522%" y="165" width="0.0816%" height="15" fill="rgb(208,67,23)" fg:x="1055" fg:w="1"/><text x="86.3022%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="86.7863%" y="149" width="0.1631%" height="15" fill="rgb(206,207,50)" fg:x="1064" fg:w="2"/><text x="87.0363%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="86.6232%" y="181" width="0.4078%" height="15" fill="rgb(213,211,42)" fg:x="1062" fg:w="5"/><text x="86.8732%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="86.7047%" y="165" width="0.3263%" height="15" fill="rgb(252,197,50)" fg:x="1063" fg:w="4"/><text x="86.9547%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="86.9494%" y="149" width="0.0816%" height="15" fill="rgb(251,211,41)" fg:x="1066" fg:w="1"/><text x="87.1994%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (13 samples, 1.06%)</title><rect x="86.1338%" y="213" width="1.0604%" height="15" fill="rgb(229,211,5)" fg:x="1056" fg:w="13"/><text x="86.3838%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.06%)</title><rect x="86.1338%" y="197" width="1.0604%" height="15" fill="rgb(239,36,31)" fg:x="1056" fg:w="13"/><text x="86.3838%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="87.0310%" y="181" width="0.1631%" height="15" fill="rgb(248,67,31)" fg:x="1067" fg:w="2"/><text x="87.2810%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (51 samples, 4.16%)</title><rect x="87.1941%" y="213" width="4.1599%" height="15" fill="rgb(249,55,44)" fg:x="1069" fg:w="51"/><text x="87.4441%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (51 samples, 4.16%)</title><rect x="87.1941%" y="197" width="4.1599%" height="15" fill="rgb(216,82,12)" fg:x="1069" fg:w="51"/><text x="87.4441%" y="207.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (51 samples, 4.16%)</title><rect x="87.1941%" y="181" width="4.1599%" height="15" fill="rgb(242,174,1)" fg:x="1069" fg:w="51"/><text x="87.4441%" y="191.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="91.3540%" y="213" width="0.3263%" height="15" fill="rgb(208,120,29)" fg:x="1120" fg:w="4"/><text x="91.6040%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8434%" y="165" width="0.0816%" height="15" fill="rgb(221,105,43)" fg:x="1126" fg:w="1"/><text x="92.0934%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 8.16%)</title><rect x="83.8499%" y="309" width="8.1566%" height="15" fill="rgb(234,124,22)" fg:x="1028" fg:w="100"/><text x="84.0999%" y="319.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (100 samples, 8.16%)</title><rect x="83.8499%" y="293" width="8.1566%" height="15" fill="rgb(212,23,30)" fg:x="1028" fg:w="100"/><text x="84.0999%" y="303.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (99 samples, 8.08%)</title><rect x="83.9315%" y="277" width="8.0750%" height="15" fill="rgb(219,122,53)" fg:x="1029" fg:w="99"/><text x="84.1815%" y="287.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (99 samples, 8.08%)</title><rect x="83.9315%" y="261" width="8.0750%" height="15" fill="rgb(248,84,24)" fg:x="1029" fg:w="99"/><text x="84.1815%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (98 samples, 7.99%)</title><rect x="84.0131%" y="245" width="7.9935%" height="15" fill="rgb(245,115,18)" fg:x="1030" fg:w="98"/><text x="84.2631%" y="255.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (97 samples, 7.91%)</title><rect x="84.0946%" y="229" width="7.9119%" height="15" fill="rgb(227,176,51)" fg:x="1031" fg:w="97"/><text x="84.3446%" y="239.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.33%)</title><rect x="91.6803%" y="213" width="0.3263%" height="15" fill="rgb(229,63,42)" fg:x="1124" fg:w="4"/><text x="91.9303%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.8434%" y="197" width="0.1631%" height="15" fill="rgb(247,202,24)" fg:x="1126" fg:w="2"/><text x="92.0934%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.8434%" y="181" width="0.1631%" height="15" fill="rgb(244,173,20)" fg:x="1126" fg:w="2"/><text x="92.0934%" y="191.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="91.9250%" y="165" width="0.0816%" height="15" fill="rgb(242,81,47)" fg:x="1127" fg:w="1"/><text x="92.1750%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="92.2512%" y="293" width="0.1631%" height="15" fill="rgb(231,185,54)" fg:x="1131" fg:w="2"/><text x="92.5012%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="92.4144%" y="293" width="0.4078%" height="15" fill="rgb(243,55,32)" fg:x="1133" fg:w="5"/><text x="92.6644%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.6591%" y="277" width="0.1631%" height="15" fill="rgb(208,167,19)" fg:x="1136" fg:w="2"/><text x="92.9091%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.6591%" y="261" width="0.1631%" height="15" fill="rgb(231,72,35)" fg:x="1136" fg:w="2"/><text x="92.9091%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="92.6591%" y="245" width="0.1631%" height="15" fill="rgb(250,173,51)" fg:x="1136" fg:w="2"/><text x="92.9091%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="92.8222%" y="293" width="0.2447%" height="15" fill="rgb(209,5,22)" fg:x="1138" fg:w="3"/><text x="93.0722%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (143 samples, 11.66%)</title><rect x="81.4845%" y="341" width="11.6639%" height="15" fill="rgb(250,174,19)" fg:x="999" fg:w="143"/><text x="81.7345%" y="351.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (116 samples, 9.46%)</title><rect x="83.6868%" y="325" width="9.4617%" height="15" fill="rgb(217,3,49)" fg:x="1026" fg:w="116"/><text x="83.9368%" y="335.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.14%)</title><rect x="92.0065%" y="309" width="1.1419%" height="15" fill="rgb(218,225,5)" fg:x="1128" fg:w="14"/><text x="92.2565%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="93.0669%" y="293" width="0.0816%" height="15" fill="rgb(236,89,11)" fg:x="1141" fg:w="1"/><text x="93.3169%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="93.1485%" y="293" width="0.0816%" height="15" fill="rgb(206,33,28)" fg:x="1142" fg:w="1"/><text x="93.3985%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="93.1485%" y="277" width="0.0816%" height="15" fill="rgb(241,56,42)" fg:x="1142" fg:w="1"/><text x="93.3985%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="93.1485%" y="309" width="0.1631%" height="15" fill="rgb(222,44,11)" fg:x="1142" fg:w="2"/><text x="93.3985%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="93.2300%" y="293" width="0.0816%" height="15" fill="rgb(234,111,20)" fg:x="1143" fg:w="1"/><text x="93.4800%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.2300%" y="277" width="0.0816%" height="15" fill="rgb(237,77,6)" fg:x="1143" fg:w="1"/><text x="93.4800%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.2300%" y="261" width="0.0816%" height="15" fill="rgb(235,111,23)" fg:x="1143" fg:w="1"/><text x="93.4800%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.2300%" y="245" width="0.0816%" height="15" fill="rgb(251,135,29)" fg:x="1143" fg:w="1"/><text x="93.4800%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="93.3116%" y="309" width="0.0816%" height="15" fill="rgb(217,57,1)" fg:x="1144" fg:w="1"/><text x="93.5616%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="93.3931%" y="309" width="0.0816%" height="15" fill="rgb(249,119,31)" fg:x="1145" fg:w="1"/><text x="93.6431%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="93.1485%" y="341" width="0.4078%" height="15" fill="rgb(233,164,33)" fg:x="1142" fg:w="5"/><text x="93.3985%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="93.1485%" y="325" width="0.4078%" height="15" fill="rgb(250,217,43)" fg:x="1142" fg:w="5"/><text x="93.3985%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="93.4747%" y="309" width="0.0816%" height="15" fill="rgb(232,154,50)" fg:x="1146" fg:w="1"/><text x="93.7247%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.4747%" y="293" width="0.0816%" height="15" fill="rgb(227,190,8)" fg:x="1146" fg:w="1"/><text x="93.7247%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="93.5563%" y="293" width="0.1631%" height="15" fill="rgb(209,217,32)" fg:x="1147" fg:w="2"/><text x="93.8063%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="93.5563%" y="277" width="0.1631%" height="15" fill="rgb(243,203,50)" fg:x="1147" fg:w="2"/><text x="93.8063%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.6378%" y="261" width="0.0816%" height="15" fill="rgb(232,152,27)" fg:x="1148" fg:w="1"/><text x="93.8878%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="93.5563%" y="309" width="0.2447%" height="15" fill="rgb(240,34,29)" fg:x="1147" fg:w="3"/><text x="93.8063%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="93.7194%" y="293" width="0.0816%" height="15" fill="rgb(215,185,52)" fg:x="1149" fg:w="1"/><text x="93.9694%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="93.7194%" y="277" width="0.0816%" height="15" fill="rgb(240,89,49)" fg:x="1149" fg:w="1"/><text x="93.9694%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (170 samples, 13.87%)</title><rect x="80.0163%" y="405" width="13.8662%" height="15" fill="rgb(225,12,52)" fg:x="981" fg:w="170"/><text x="80.2663%" y="415.50">indefinite::rules::nu..</text></g><g><title>regex::regex::string::Regex::new (156 samples, 12.72%)</title><rect x="81.1582%" y="389" width="12.7243%" height="15" fill="rgb(239,128,45)" fg:x="995" fg:w="156"/><text x="81.4082%" y="399.50">regex::regex::strin..</text></g><g><title>regex::builders::Builder::build_one_string (156 samples, 12.72%)</title><rect x="81.1582%" y="373" width="12.7243%" height="15" fill="rgb(211,78,47)" fg:x="995" fg:w="156"/><text x="81.4082%" y="383.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (156 samples, 12.72%)</title><rect x="81.1582%" y="357" width="12.7243%" height="15" fill="rgb(232,31,21)" fg:x="995" fg:w="156"/><text x="81.4082%" y="367.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="93.5563%" y="341" width="0.3263%" height="15" fill="rgb(222,168,14)" fg:x="1147" fg:w="4"/><text x="93.8063%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="93.5563%" y="325" width="0.3263%" height="15" fill="rgb(209,128,24)" fg:x="1147" fg:w="4"/><text x="93.8063%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="93.8010%" y="309" width="0.0816%" height="15" fill="rgb(249,35,13)" fg:x="1150" fg:w="1"/><text x="94.0510%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="93.8010%" y="293" width="0.0816%" height="15" fill="rgb(218,7,2)" fg:x="1150" fg:w="1"/><text x="94.0510%" y="303.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="93.8010%" y="277" width="0.0816%" height="15" fill="rgb(238,107,27)" fg:x="1150" fg:w="1"/><text x="94.0510%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="93.8825%" y="373" width="0.0816%" height="15" fill="rgb(217,88,38)" fg:x="1151" fg:w="1"/><text x="94.1325%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="93.8825%" y="357" width="0.0816%" height="15" fill="rgb(230,207,0)" fg:x="1151" fg:w="1"/><text x="94.1325%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="93.8825%" y="341" width="0.0816%" height="15" fill="rgb(249,64,54)" fg:x="1151" fg:w="1"/><text x="94.1325%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="93.8825%" y="325" width="0.0816%" height="15" fill="rgb(231,7,11)" fg:x="1151" fg:w="1"/><text x="94.1325%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.8825%" y="309" width="0.0816%" height="15" fill="rgb(205,149,21)" fg:x="1151" fg:w="1"/><text x="94.1325%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.8825%" y="293" width="0.0816%" height="15" fill="rgb(215,126,34)" fg:x="1151" fg:w="1"/><text x="94.1325%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.8825%" y="277" width="0.0816%" height="15" fill="rgb(241,132,45)" fg:x="1151" fg:w="1"/><text x="94.1325%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9641%" y="293" width="0.0816%" height="15" fill="rgb(252,69,32)" fg:x="1152" fg:w="1"/><text x="94.2141%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.9641%" y="277" width="0.0816%" height="15" fill="rgb(232,204,19)" fg:x="1152" fg:w="1"/><text x="94.2141%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="93.9641%" y="341" width="0.1631%" height="15" fill="rgb(249,15,47)" fg:x="1152" fg:w="2"/><text x="94.2141%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="93.9641%" y="325" width="0.1631%" height="15" fill="rgb(209,227,23)" fg:x="1152" fg:w="2"/><text x="94.2141%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="93.9641%" y="309" width="0.1631%" height="15" fill="rgb(248,92,24)" fg:x="1152" fg:w="2"/><text x="94.2141%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.0457%" y="293" width="0.0816%" height="15" fill="rgb(247,59,2)" fg:x="1153" fg:w="1"/><text x="94.2957%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="93.9641%" y="373" width="0.2447%" height="15" fill="rgb(221,30,5)" fg:x="1152" fg:w="3"/><text x="94.2141%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="93.9641%" y="357" width="0.2447%" height="15" fill="rgb(208,108,53)" fg:x="1152" fg:w="3"/><text x="94.2141%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="94.1272%" y="341" width="0.0816%" height="15" fill="rgb(211,183,26)" fg:x="1154" fg:w="1"/><text x="94.3772%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="94.1272%" y="325" width="0.0816%" height="15" fill="rgb(232,132,4)" fg:x="1154" fg:w="1"/><text x="94.3772%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.1272%" y="309" width="0.0816%" height="15" fill="rgb(253,128,37)" fg:x="1154" fg:w="1"/><text x="94.3772%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="94.2904%" y="309" width="0.0816%" height="15" fill="rgb(221,58,24)" fg:x="1156" fg:w="1"/><text x="94.5404%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.2904%" y="293" width="0.0816%" height="15" fill="rgb(230,54,45)" fg:x="1156" fg:w="1"/><text x="94.5404%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="94.4535%" y="293" width="0.0816%" height="15" fill="rgb(254,21,18)" fg:x="1158" fg:w="1"/><text x="94.7035%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.4535%" y="277" width="0.0816%" height="15" fill="rgb(221,108,0)" fg:x="1158" fg:w="1"/><text x="94.7035%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="94.3719%" y="309" width="0.2447%" height="15" fill="rgb(206,95,1)" fg:x="1157" fg:w="3"/><text x="94.6219%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="94.5351%" y="293" width="0.0816%" height="15" fill="rgb(237,52,5)" fg:x="1159" fg:w="1"/><text x="94.7851%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.6166%" y="293" width="0.0816%" height="15" fill="rgb(218,150,34)" fg:x="1160" fg:w="1"/><text x="94.8666%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="94.6166%" y="277" width="0.0816%" height="15" fill="rgb(235,194,28)" fg:x="1160" fg:w="1"/><text x="94.8666%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.6166%" y="261" width="0.0816%" height="15" fill="rgb(245,92,18)" fg:x="1160" fg:w="1"/><text x="94.8666%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.6166%" y="245" width="0.0816%" height="15" fill="rgb(253,203,53)" fg:x="1160" fg:w="1"/><text x="94.8666%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.6166%" y="229" width="0.0816%" height="15" fill="rgb(249,185,47)" fg:x="1160" fg:w="1"/><text x="94.8666%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6166%" y="213" width="0.0816%" height="15" fill="rgb(252,194,52)" fg:x="1160" fg:w="1"/><text x="94.8666%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6166%" y="197" width="0.0816%" height="15" fill="rgb(210,53,36)" fg:x="1160" fg:w="1"/><text x="94.8666%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.6166%" y="181" width="0.0816%" height="15" fill="rgb(237,37,25)" fg:x="1160" fg:w="1"/><text x="94.8666%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="94.6982%" y="277" width="0.0816%" height="15" fill="rgb(242,116,27)" fg:x="1161" fg:w="1"/><text x="94.9482%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6982%" y="261" width="0.0816%" height="15" fill="rgb(213,185,26)" fg:x="1161" fg:w="1"/><text x="94.9482%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6982%" y="245" width="0.0816%" height="15" fill="rgb(225,204,8)" fg:x="1161" fg:w="1"/><text x="94.9482%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="94.7798%" y="277" width="0.2447%" height="15" fill="rgb(254,111,37)" fg:x="1162" fg:w="3"/><text x="95.0298%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.98%)</title><rect x="94.2088%" y="325" width="0.9788%" height="15" fill="rgb(242,35,9)" fg:x="1155" fg:w="12"/><text x="94.4588%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.57%)</title><rect x="94.6166%" y="309" width="0.5710%" height="15" fill="rgb(232,138,49)" fg:x="1160" fg:w="7"/><text x="94.8666%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="94.6982%" y="293" width="0.4894%" height="15" fill="rgb(247,56,4)" fg:x="1161" fg:w="6"/><text x="94.9482%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="95.0245%" y="277" width="0.1631%" height="15" fill="rgb(226,179,17)" fg:x="1165" fg:w="2"/><text x="95.2745%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.1876%" y="325" width="0.1631%" height="15" fill="rgb(216,163,45)" fg:x="1167" fg:w="2"/><text x="95.4376%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.1876%" y="309" width="0.1631%" height="15" fill="rgb(211,157,3)" fg:x="1167" fg:w="2"/><text x="95.4376%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.2692%" y="293" width="0.0816%" height="15" fill="rgb(234,44,20)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.2692%" y="277" width="0.0816%" height="15" fill="rgb(254,138,23)" fg:x="1168" fg:w="1"/><text x="95.5192%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3507%" y="261" width="0.0816%" height="15" fill="rgb(206,119,39)" fg:x="1169" fg:w="1"/><text x="95.6007%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3507%" y="245" width="0.0816%" height="15" fill="rgb(231,105,52)" fg:x="1169" fg:w="1"/><text x="95.6007%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.3507%" y="229" width="0.0816%" height="15" fill="rgb(250,20,5)" fg:x="1169" fg:w="1"/><text x="95.6007%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.3507%" y="293" width="0.1631%" height="15" fill="rgb(215,198,30)" fg:x="1169" fg:w="2"/><text x="95.6007%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="95.3507%" y="277" width="0.1631%" height="15" fill="rgb(246,142,8)" fg:x="1169" fg:w="2"/><text x="95.6007%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="95.4323%" y="261" width="0.0816%" height="15" fill="rgb(243,26,38)" fg:x="1170" fg:w="1"/><text x="95.6823%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (17 samples, 1.39%)</title><rect x="94.2088%" y="373" width="1.3866%" height="15" fill="rgb(205,133,28)" fg:x="1155" fg:w="17"/><text x="94.4588%" y="383.50"></text></g><g><title>regex::builders::Builder::build_one_string (17 samples, 1.39%)</title><rect x="94.2088%" y="357" width="1.3866%" height="15" fill="rgb(212,34,0)" fg:x="1155" fg:w="17"/><text x="94.4588%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.39%)</title><rect x="94.2088%" y="341" width="1.3866%" height="15" fill="rgb(251,226,22)" fg:x="1155" fg:w="17"/><text x="94.4588%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.3507%" y="325" width="0.2447%" height="15" fill="rgb(252,119,9)" fg:x="1169" fg:w="3"/><text x="95.6007%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.3507%" y="309" width="0.2447%" height="15" fill="rgb(213,150,50)" fg:x="1169" fg:w="3"/><text x="95.6007%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.5139%" y="293" width="0.0816%" height="15" fill="rgb(212,24,39)" fg:x="1171" fg:w="1"/><text x="95.7639%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.5139%" y="277" width="0.0816%" height="15" fill="rgb(213,46,39)" fg:x="1171" fg:w="1"/><text x="95.7639%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.5139%" y="261" width="0.0816%" height="15" fill="rgb(239,106,12)" fg:x="1171" fg:w="1"/><text x="95.7639%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (307 samples, 25.04%)</title><rect x="70.8809%" y="485" width="25.0408%" height="15" fill="rgb(249,229,21)" fg:x="869" fg:w="307"/><text x="71.1309%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plugins..</text></g><g><title>plugins_core::looking::model::qualify_name (307 samples, 25.04%)</title><rect x="70.8809%" y="469" width="25.0408%" height="15" fill="rgb(212,158,3)" fg:x="869" fg:w="307"/><text x="71.1309%" y="479.50">plugins_core::looking::model::qualify_na..</text></g><g><title>indefinite::indefinite (307 samples, 25.04%)</title><rect x="70.8809%" y="453" width="25.0408%" height="15" fill="rgb(253,26,48)" fg:x="869" fg:w="307"/><text x="71.1309%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (307 samples, 25.04%)</title><rect x="70.8809%" y="437" width="25.0408%" height="15" fill="rgb(238,178,20)" fg:x="869" fg:w="307"/><text x="71.1309%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (307 samples, 25.04%)</title><rect x="70.8809%" y="421" width="25.0408%" height="15" fill="rgb(208,86,15)" fg:x="869" fg:w="307"/><text x="71.1309%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (25 samples, 2.04%)</title><rect x="93.8825%" y="405" width="2.0392%" height="15" fill="rgb(239,42,53)" fg:x="1151" fg:w="25"/><text x="94.1325%" y="415.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (25 samples, 2.04%)</title><rect x="93.8825%" y="389" width="2.0392%" height="15" fill="rgb(245,226,8)" fg:x="1151" fg:w="25"/><text x="94.1325%" y="399.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="95.5954%" y="373" width="0.3263%" height="15" fill="rgb(216,176,32)" fg:x="1172" fg:w="4"/><text x="95.8454%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="95.5954%" y="357" width="0.3263%" height="15" fill="rgb(231,186,21)" fg:x="1172" fg:w="4"/><text x="95.8454%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="95.5954%" y="341" width="0.3263%" height="15" fill="rgb(205,95,49)" fg:x="1172" fg:w="4"/><text x="95.8454%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="95.5954%" y="325" width="0.3263%" height="15" fill="rgb(217,145,8)" fg:x="1172" fg:w="4"/><text x="95.8454%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="95.5954%" y="309" width="0.3263%" height="15" fill="rgb(239,144,48)" fg:x="1172" fg:w="4"/><text x="95.8454%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="95.7586%" y="293" width="0.1631%" height="15" fill="rgb(214,189,23)" fg:x="1174" fg:w="2"/><text x="96.0086%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="95.8401%" y="277" width="0.0816%" height="15" fill="rgb(229,157,17)" fg:x="1175" fg:w="1"/><text x="96.0901%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.9217%" y="453" width="0.0816%" height="15" fill="rgb(230,5,48)" fg:x="1176" fg:w="1"/><text x="96.1717%" y="463.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (310 samples, 25.29%)</title><rect x="70.7993%" y="517" width="25.2855%" height="15" fill="rgb(224,156,48)" fg:x="868" fg:w="310"/><text x="71.0493%" y="527.50">&lt;plugins_core::looking::actions::LookAct..</text></g><g><title>plugins_core::looking::model::new_area_observation (309 samples, 25.20%)</title><rect x="70.8809%" y="501" width="25.2039%" height="15" fill="rgb(223,14,29)" fg:x="869" fg:w="309"/><text x="71.1309%" y="511.50">plugins_core::looking::model::new_area_o..</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="95.9217%" y="485" width="0.1631%" height="15" fill="rgb(229,96,36)" fg:x="1176" fg:w="2"/><text x="96.1717%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="95.9217%" y="469" width="0.1631%" height="15" fill="rgb(231,102,53)" fg:x="1176" fg:w="2"/><text x="96.1717%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="96.0033%" y="453" width="0.0816%" height="15" fill="rgb(210,77,38)" fg:x="1177" fg:w="1"/><text x="96.2533%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="96.0033%" y="437" width="0.0816%" height="15" fill="rgb(235,131,6)" fg:x="1177" fg:w="1"/><text x="96.2533%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.0033%" y="421" width="0.0816%" height="15" fill="rgb(252,55,38)" fg:x="1177" fg:w="1"/><text x="96.2533%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="96.0033%" y="405" width="0.0816%" height="15" fill="rgb(246,38,14)" fg:x="1177" fg:w="1"/><text x="96.2533%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="96.0033%" y="389" width="0.0816%" height="15" fill="rgb(242,27,5)" fg:x="1177" fg:w="1"/><text x="96.2533%" y="399.50"></text></g><g><title>kernel::model::EntityRef::has_entity (1 samples, 0.08%)</title><rect x="96.0033%" y="373" width="0.0816%" height="15" fill="rgb(228,65,35)" fg:x="1177" fg:w="1"/><text x="96.2533%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="96.0848%" y="501" width="0.0816%" height="15" fill="rgb(245,93,11)" fg:x="1178" fg:w="1"/><text x="96.3348%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="96.0848%" y="485" width="0.0816%" height="15" fill="rgb(213,1,31)" fg:x="1178" fg:w="1"/><text x="96.3348%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="96.1664%" y="421" width="0.0816%" height="15" fill="rgb(237,205,14)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.1664%" y="405" width="0.0816%" height="15" fill="rgb(232,118,45)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.1664%" y="389" width="0.0816%" height="15" fill="rgb(218,5,6)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.1664%" y="373" width="0.0816%" height="15" fill="rgb(251,87,51)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.1664%" y="357" width="0.0816%" height="15" fill="rgb(207,225,20)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.1664%" y="341" width="0.0816%" height="15" fill="rgb(222,78,54)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.1664%" y="325" width="0.0816%" height="15" fill="rgb(232,85,16)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.1664%" y="309" width="0.0816%" height="15" fill="rgb(244,25,33)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.1664%" y="293" width="0.0816%" height="15" fill="rgb(233,24,36)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.1664%" y="277" width="0.0816%" height="15" fill="rgb(253,49,54)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.1664%" y="261" width="0.0816%" height="15" fill="rgb(245,12,22)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.1664%" y="245" width="0.0816%" height="15" fill="rgb(253,141,28)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1664%" y="229" width="0.0816%" height="15" fill="rgb(225,207,27)" fg:x="1179" fg:w="1"/><text x="96.4164%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3295%" y="325" width="0.0816%" height="15" fill="rgb(220,84,2)" fg:x="1181" fg:w="1"/><text x="96.5795%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.4111%" y="325" width="0.0816%" height="15" fill="rgb(224,37,37)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.4111%" y="309" width="0.0816%" height="15" fill="rgb(220,143,18)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.4111%" y="293" width="0.0816%" height="15" fill="rgb(210,88,33)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.4111%" y="277" width="0.0816%" height="15" fill="rgb(219,87,51)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.4111%" y="261" width="0.0816%" height="15" fill="rgb(211,7,35)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.4111%" y="245" width="0.0816%" height="15" fill="rgb(232,77,2)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.4111%" y="229" width="0.0816%" height="15" fill="rgb(249,94,25)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4111%" y="213" width="0.0816%" height="15" fill="rgb(215,112,2)" fg:x="1182" fg:w="1"/><text x="96.6611%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.41%)</title><rect x="96.1664%" y="437" width="0.4078%" height="15" fill="rgb(226,115,48)" fg:x="1179" fg:w="5"/><text x="96.4164%" y="447.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.33%)</title><rect x="96.2480%" y="421" width="0.3263%" height="15" fill="rgb(249,196,10)" fg:x="1180" fg:w="4"/><text x="96.4980%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.33%)</title><rect x="96.2480%" y="405" width="0.3263%" height="15" fill="rgb(237,109,14)" fg:x="1180" fg:w="4"/><text x="96.4980%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.33%)</title><rect x="96.2480%" y="389" width="0.3263%" height="15" fill="rgb(217,103,53)" fg:x="1180" fg:w="4"/><text x="96.4980%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.33%)</title><rect x="96.2480%" y="373" width="0.3263%" height="15" fill="rgb(244,137,9)" fg:x="1180" fg:w="4"/><text x="96.4980%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="96.2480%" y="357" width="0.3263%" height="15" fill="rgb(227,201,3)" fg:x="1180" fg:w="4"/><text x="96.4980%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="96.2480%" y="341" width="0.3263%" height="15" fill="rgb(243,94,6)" fg:x="1180" fg:w="4"/><text x="96.4980%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.4927%" y="325" width="0.0816%" height="15" fill="rgb(235,118,5)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.4927%" y="309" width="0.0816%" height="15" fill="rgb(247,10,30)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.4927%" y="293" width="0.0816%" height="15" fill="rgb(205,26,28)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.4927%" y="277" width="0.0816%" height="15" fill="rgb(206,99,35)" fg:x="1183" fg:w="1"/><text x="96.7427%" y="287.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (7 samples, 0.57%)</title><rect x="96.0848%" y="517" width="0.5710%" height="15" fill="rgb(238,130,40)" fg:x="1178" fg:w="7"/><text x="96.3348%" y="527.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (6 samples, 0.49%)</title><rect x="96.1664%" y="501" width="0.4894%" height="15" fill="rgb(224,126,31)" fg:x="1179" fg:w="6"/><text x="96.4164%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.49%)</title><rect x="96.1664%" y="485" width="0.4894%" height="15" fill="rgb(254,105,17)" fg:x="1179" fg:w="6"/><text x="96.4164%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="96.1664%" y="469" width="0.4894%" height="15" fill="rgb(216,87,36)" fg:x="1179" fg:w="6"/><text x="96.4164%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.49%)</title><rect x="96.1664%" y="453" width="0.4894%" height="15" fill="rgb(240,21,12)" fg:x="1179" fg:w="6"/><text x="96.4164%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.5742%" y="437" width="0.0816%" height="15" fill="rgb(245,192,34)" fg:x="1184" fg:w="1"/><text x="96.8242%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5742%" y="421" width="0.0816%" height="15" fill="rgb(226,100,49)" fg:x="1184" fg:w="1"/><text x="96.8242%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (1 samples, 0.08%)</title><rect x="96.6558%" y="485" width="0.0816%" height="15" fill="rgb(245,188,27)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6558%" y="469" width="0.0816%" height="15" fill="rgb(212,170,8)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6558%" y="453" width="0.0816%" height="15" fill="rgb(217,113,29)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6558%" y="437" width="0.0816%" height="15" fill="rgb(237,30,3)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="96.6558%" y="421" width="0.0816%" height="15" fill="rgb(227,19,28)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6558%" y="405" width="0.0816%" height="15" fill="rgb(239,172,45)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="96.6558%" y="389" width="0.0816%" height="15" fill="rgb(254,55,39)" fg:x="1185" fg:w="1"/><text x="96.9058%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.7374%" y="453" width="0.0816%" height="15" fill="rgb(249,208,12)" fg:x="1186" fg:w="1"/><text x="96.9874%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.7374%" y="437" width="0.0816%" height="15" fill="rgb(240,52,13)" fg:x="1186" fg:w="1"/><text x="96.9874%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(rpc_proto::LookupBy,core::option::Option&lt;(kernel::model::entry::Entry,rpc_proto::Json)&gt;)&gt;&gt; (1 samples, 0.08%)</title><rect x="96.7374%" y="421" width="0.0816%" height="15" fill="rgb(252,149,13)" fg:x="1186" fg:w="1"/><text x="96.9874%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="96.8189%" y="453" width="0.0816%" height="15" fill="rgb(232,81,48)" fg:x="1187" fg:w="1"/><text x="97.0689%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.8189%" y="437" width="0.0816%" height="15" fill="rgb(222,144,2)" fg:x="1187" fg:w="1"/><text x="97.0689%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.9821%" y="389" width="0.0816%" height="15" fill="rgb(216,81,32)" fg:x="1189" fg:w="1"/><text x="97.2321%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.0636%" y="373" width="0.1631%" height="15" fill="rgb(244,78,51)" fg:x="1190" fg:w="2"/><text x="97.3136%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="97.1452%" y="357" width="0.0816%" height="15" fill="rgb(217,66,21)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="367.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="97.1452%" y="341" width="0.0816%" height="15" fill="rgb(247,101,42)" fg:x="1191" fg:w="1"/><text x="97.3952%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2268%" y="309" width="0.0816%" height="15" fill="rgb(227,81,39)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2268%" y="293" width="0.0816%" height="15" fill="rgb(220,223,44)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2268%" y="277" width="0.0816%" height="15" fill="rgb(205,218,2)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2268%" y="261" width="0.0816%" height="15" fill="rgb(212,207,28)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.2268%" y="245" width="0.0816%" height="15" fill="rgb(224,12,41)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.2268%" y="229" width="0.0816%" height="15" fill="rgb(216,118,12)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.2268%" y="213" width="0.0816%" height="15" fill="rgb(252,97,46)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2268%" y="197" width="0.0816%" height="15" fill="rgb(244,206,19)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2268%" y="181" width="0.0816%" height="15" fill="rgb(231,84,31)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.2268%" y="165" width="0.0816%" height="15" fill="rgb(244,133,0)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.2268%" y="149" width="0.0816%" height="15" fill="rgb(223,15,50)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.2268%" y="133" width="0.0816%" height="15" fill="rgb(250,118,49)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.2268%" y="117" width="0.0816%" height="15" fill="rgb(248,25,38)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2268%" y="101" width="0.0816%" height="15" fill="rgb(215,70,14)" fg:x="1192" fg:w="1"/><text x="97.4768%" y="111.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="97.3083%" y="293" width="0.0816%" height="15" fill="rgb(215,28,15)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3083%" y="277" width="0.0816%" height="15" fill="rgb(243,6,28)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3083%" y="261" width="0.0816%" height="15" fill="rgb(222,130,1)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.3083%" y="245" width="0.0816%" height="15" fill="rgb(236,166,44)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.3083%" y="229" width="0.0816%" height="15" fill="rgb(221,108,14)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.3083%" y="213" width="0.0816%" height="15" fill="rgb(252,3,45)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.3083%" y="197" width="0.0816%" height="15" fill="rgb(237,68,30)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.3083%" y="181" width="0.0816%" height="15" fill="rgb(211,79,22)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.3083%" y="165" width="0.0816%" height="15" fill="rgb(252,185,21)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.3083%" y="149" width="0.0816%" height="15" fill="rgb(225,189,26)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.3083%" y="133" width="0.0816%" height="15" fill="rgb(241,30,40)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.3083%" y="117" width="0.0816%" height="15" fill="rgb(235,215,44)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3083%" y="101" width="0.0816%" height="15" fill="rgb(205,8,29)" fg:x="1193" fg:w="1"/><text x="97.5583%" y="111.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.57%)</title><rect x="96.9005%" y="405" width="0.5710%" height="15" fill="rgb(241,137,42)" fg:x="1188" fg:w="7"/><text x="97.1505%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.41%)</title><rect x="97.0636%" y="389" width="0.4078%" height="15" fill="rgb(237,155,2)" fg:x="1190" fg:w="5"/><text x="97.3136%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="97.2268%" y="373" width="0.2447%" height="15" fill="rgb(245,29,42)" fg:x="1192" fg:w="3"/><text x="97.4768%" y="383.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="97.2268%" y="357" width="0.2447%" height="15" fill="rgb(234,101,35)" fg:x="1192" fg:w="3"/><text x="97.4768%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.24%)</title><rect x="97.2268%" y="341" width="0.2447%" height="15" fill="rgb(228,64,37)" fg:x="1192" fg:w="3"/><text x="97.4768%" y="351.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="97.2268%" y="325" width="0.2447%" height="15" fill="rgb(217,214,36)" fg:x="1192" fg:w="3"/><text x="97.4768%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="97.3083%" y="309" width="0.1631%" height="15" fill="rgb(243,70,3)" fg:x="1193" fg:w="2"/><text x="97.5583%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.3899%" y="293" width="0.0816%" height="15" fill="rgb(253,158,52)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.3899%" y="277" width="0.0816%" height="15" fill="rgb(234,111,54)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="287.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.3899%" y="261" width="0.0816%" height="15" fill="rgb(217,70,32)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.3899%" y="245" width="0.0816%" height="15" fill="rgb(234,18,33)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3899%" y="229" width="0.0816%" height="15" fill="rgb(234,12,49)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.3899%" y="213" width="0.0816%" height="15" fill="rgb(236,10,21)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3899%" y="197" width="0.0816%" height="15" fill="rgb(248,182,45)" fg:x="1194" fg:w="1"/><text x="97.6399%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4715%" y="357" width="0.0816%" height="15" fill="rgb(217,95,36)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4715%" y="341" width="0.0816%" height="15" fill="rgb(212,110,31)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4715%" y="325" width="0.0816%" height="15" fill="rgb(206,32,53)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4715%" y="309" width="0.0816%" height="15" fill="rgb(246,141,37)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4715%" y="293" width="0.0816%" height="15" fill="rgb(219,16,7)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.4715%" y="277" width="0.0816%" height="15" fill="rgb(230,205,45)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.4715%" y="261" width="0.0816%" height="15" fill="rgb(231,43,49)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.4715%" y="245" width="0.0816%" height="15" fill="rgb(212,106,34)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4715%" y="229" width="0.0816%" height="15" fill="rgb(206,83,17)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4715%" y="213" width="0.0816%" height="15" fill="rgb(244,154,49)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.4715%" y="197" width="0.0816%" height="15" fill="rgb(244,149,49)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.4715%" y="181" width="0.0816%" height="15" fill="rgb(227,134,18)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.4715%" y="165" width="0.0816%" height="15" fill="rgb(237,116,36)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.4715%" y="149" width="0.0816%" height="15" fill="rgb(205,129,40)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4715%" y="133" width="0.0816%" height="15" fill="rgb(236,178,4)" fg:x="1195" fg:w="1"/><text x="97.7215%" y="143.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="97.5530%" y="261" width="0.0816%" height="15" fill="rgb(251,76,53)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5530%" y="245" width="0.0816%" height="15" fill="rgb(242,92,40)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5530%" y="229" width="0.0816%" height="15" fill="rgb(209,45,30)" fg:x="1196" fg:w="1"/><text x="97.8030%" y="239.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.6346%" y="245" width="0.0816%" height="15" fill="rgb(218,157,36)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.6346%" y="229" width="0.0816%" height="15" fill="rgb(222,186,16)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6346%" y="213" width="0.0816%" height="15" fill="rgb(254,72,35)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6346%" y="197" width="0.0816%" height="15" fill="rgb(224,25,35)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6346%" y="181" width="0.0816%" height="15" fill="rgb(206,135,52)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6346%" y="165" width="0.0816%" height="15" fill="rgb(229,174,47)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.6346%" y="149" width="0.0816%" height="15" fill="rgb(242,184,21)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6346%" y="133" width="0.0816%" height="15" fill="rgb(213,22,45)" fg:x="1197" fg:w="1"/><text x="97.8846%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.7162%" y="165" width="0.0816%" height="15" fill="rgb(237,81,54)" fg:x="1198" fg:w="1"/><text x="97.9662%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7977%" y="165" width="0.0816%" height="15" fill="rgb(248,177,18)" fg:x="1199" fg:w="1"/><text x="98.0477%" y="175.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.41%)</title><rect x="97.5530%" y="357" width="0.4078%" height="15" fill="rgb(254,31,16)" fg:x="1196" fg:w="5"/><text x="97.8030%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.41%)</title><rect x="97.5530%" y="341" width="0.4078%" height="15" fill="rgb(235,20,31)" fg:x="1196" fg:w="5"/><text x="97.8030%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="97.5530%" y="325" width="0.4078%" height="15" fill="rgb(240,56,43)" fg:x="1196" fg:w="5"/><text x="97.8030%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.41%)</title><rect x="97.5530%" y="309" width="0.4078%" height="15" fill="rgb(237,197,51)" fg:x="1196" fg:w="5"/><text x="97.8030%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.41%)</title><rect x="97.5530%" y="293" width="0.4078%" height="15" fill="rgb(241,162,44)" fg:x="1196" fg:w="5"/><text x="97.8030%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.41%)</title><rect x="97.5530%" y="277" width="0.4078%" height="15" fill="rgb(224,23,20)" fg:x="1196" fg:w="5"/><text x="97.8030%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.33%)</title><rect x="97.6346%" y="261" width="0.3263%" height="15" fill="rgb(250,109,34)" fg:x="1197" fg:w="4"/><text x="97.8846%" y="271.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.7162%" y="245" width="0.2447%" height="15" fill="rgb(214,175,50)" fg:x="1198" fg:w="3"/><text x="97.9662%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.7162%" y="229" width="0.2447%" height="15" fill="rgb(213,182,5)" fg:x="1198" fg:w="3"/><text x="97.9662%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.7162%" y="213" width="0.2447%" height="15" fill="rgb(209,199,19)" fg:x="1198" fg:w="3"/><text x="97.9662%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.7162%" y="197" width="0.2447%" height="15" fill="rgb(236,224,42)" fg:x="1198" fg:w="3"/><text x="97.9662%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.7162%" y="181" width="0.2447%" height="15" fill="rgb(246,226,29)" fg:x="1198" fg:w="3"/><text x="97.9662%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8793%" y="165" width="0.0816%" height="15" fill="rgb(227,223,11)" fg:x="1200" fg:w="1"/><text x="98.1293%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8793%" y="149" width="0.0816%" height="15" fill="rgb(219,7,51)" fg:x="1200" fg:w="1"/><text x="98.1293%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.8793%" y="133" width="0.0816%" height="15" fill="rgb(245,167,10)" fg:x="1200" fg:w="1"/><text x="98.1293%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8793%" y="117" width="0.0816%" height="15" fill="rgb(237,224,16)" fg:x="1200" fg:w="1"/><text x="98.1293%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9608%" y="325" width="0.0816%" height="15" fill="rgb(226,132,13)" fg:x="1201" fg:w="1"/><text x="98.2108%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.0424%" y="325" width="0.0816%" height="15" fill="rgb(214,140,3)" fg:x="1202" fg:w="1"/><text x="98.2924%" y="335.50"></text></g><g><title>plugins_core::tools::get_contained_keys (9 samples, 0.73%)</title><rect x="97.4715%" y="405" width="0.7341%" height="15" fill="rgb(221,177,4)" fg:x="1195" fg:w="9"/><text x="97.7215%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.73%)</title><rect x="97.4715%" y="389" width="0.7341%" height="15" fill="rgb(238,139,3)" fg:x="1195" fg:w="9"/><text x="97.7215%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (9 samples, 0.73%)</title><rect x="97.4715%" y="373" width="0.7341%" height="15" fill="rgb(216,17,39)" fg:x="1195" fg:w="9"/><text x="97.7215%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.9608%" y="357" width="0.2447%" height="15" fill="rgb(238,120,9)" fg:x="1201" fg:w="3"/><text x="98.2108%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.9608%" y="341" width="0.2447%" height="15" fill="rgb(244,92,53)" fg:x="1201" fg:w="3"/><text x="98.2108%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.1240%" y="325" width="0.0816%" height="15" fill="rgb(224,148,33)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.1240%" y="309" width="0.0816%" height="15" fill="rgb(243,6,36)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.1240%" y="293" width="0.0816%" height="15" fill="rgb(230,102,11)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1240%" y="277" width="0.0816%" height="15" fill="rgb(234,148,36)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1240%" y="261" width="0.0816%" height="15" fill="rgb(251,153,25)" fg:x="1203" fg:w="1"/><text x="98.3740%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2055%" y="357" width="0.0816%" height="15" fill="rgb(215,129,8)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2055%" y="341" width="0.0816%" height="15" fill="rgb(224,128,35)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2055%" y="325" width="0.0816%" height="15" fill="rgb(237,56,52)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2055%" y="309" width="0.0816%" height="15" fill="rgb(234,213,19)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2055%" y="293" width="0.0816%" height="15" fill="rgb(252,82,23)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2055%" y="277" width="0.0816%" height="15" fill="rgb(254,201,21)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2055%" y="261" width="0.0816%" height="15" fill="rgb(250,186,11)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2055%" y="245" width="0.0816%" height="15" fill="rgb(211,174,5)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2055%" y="229" width="0.0816%" height="15" fill="rgb(214,121,10)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2055%" y="213" width="0.0816%" height="15" fill="rgb(241,66,2)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2055%" y="197" width="0.0816%" height="15" fill="rgb(220,167,19)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2055%" y="181" width="0.0816%" height="15" fill="rgb(231,54,50)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2055%" y="165" width="0.0816%" height="15" fill="rgb(239,217,53)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2055%" y="149" width="0.0816%" height="15" fill="rgb(248,8,0)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2055%" y="133" width="0.0816%" height="15" fill="rgb(229,118,37)" fg:x="1204" fg:w="1"/><text x="98.4555%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.47%)</title><rect x="96.9005%" y="437" width="1.4682%" height="15" fill="rgb(253,223,43)" fg:x="1188" fg:w="18"/><text x="97.1505%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.47%)</title><rect x="96.9005%" y="421" width="1.4682%" height="15" fill="rgb(211,77,36)" fg:x="1188" fg:w="18"/><text x="97.1505%" y="431.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="98.2055%" y="405" width="0.1631%" height="15" fill="rgb(219,3,53)" fg:x="1204" fg:w="2"/><text x="98.4555%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="98.2055%" y="389" width="0.1631%" height="15" fill="rgb(244,45,42)" fg:x="1204" fg:w="2"/><text x="98.4555%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="98.2055%" y="373" width="0.1631%" height="15" fill="rgb(225,95,27)" fg:x="1204" fg:w="2"/><text x="98.4555%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2871%" y="357" width="0.0816%" height="15" fill="rgb(207,74,8)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2871%" y="341" width="0.0816%" height="15" fill="rgb(243,63,36)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2871%" y="325" width="0.0816%" height="15" fill="rgb(211,180,12)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.2871%" y="309" width="0.0816%" height="15" fill="rgb(254,166,49)" fg:x="1205" fg:w="1"/><text x="98.5371%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.3687%" y="389" width="0.1631%" height="15" fill="rgb(205,19,0)" fg:x="1206" fg:w="2"/><text x="98.6187%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4502%" y="373" width="0.0816%" height="15" fill="rgb(224,172,32)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4502%" y="357" width="0.0816%" height="15" fill="rgb(254,136,30)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4502%" y="341" width="0.0816%" height="15" fill="rgb(246,19,35)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4502%" y="325" width="0.0816%" height="15" fill="rgb(219,24,36)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4502%" y="309" width="0.0816%" height="15" fill="rgb(251,55,1)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4502%" y="293" width="0.0816%" height="15" fill="rgb(218,117,39)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.4502%" y="277" width="0.0816%" height="15" fill="rgb(248,169,11)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.4502%" y="261" width="0.0816%" height="15" fill="rgb(244,40,44)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.4502%" y="245" width="0.0816%" height="15" fill="rgb(234,62,37)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.4502%" y="229" width="0.0816%" height="15" fill="rgb(207,117,42)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4502%" y="213" width="0.0816%" height="15" fill="rgb(213,43,2)" fg:x="1207" fg:w="1"/><text x="98.7002%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.5318%" y="389" width="0.0816%" height="15" fill="rgb(244,202,51)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="98.5318%" y="373" width="0.0816%" height="15" fill="rgb(253,174,46)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5318%" y="357" width="0.0816%" height="15" fill="rgb(251,23,1)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5318%" y="341" width="0.0816%" height="15" fill="rgb(253,26,1)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.5318%" y="325" width="0.0816%" height="15" fill="rgb(216,89,31)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.5318%" y="309" width="0.0816%" height="15" fill="rgb(209,109,5)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.5318%" y="293" width="0.0816%" height="15" fill="rgb(229,63,13)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5318%" y="277" width="0.0816%" height="15" fill="rgb(238,137,54)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5318%" y="261" width="0.0816%" height="15" fill="rgb(228,1,9)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.5318%" y="245" width="0.0816%" height="15" fill="rgb(249,120,48)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.5318%" y="229" width="0.0816%" height="15" fill="rgb(209,72,36)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.5318%" y="213" width="0.0816%" height="15" fill="rgb(247,98,49)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.5318%" y="197" width="0.0816%" height="15" fill="rgb(233,75,36)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5318%" y="181" width="0.0816%" height="15" fill="rgb(225,14,24)" fg:x="1208" fg:w="1"/><text x="98.7818%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7765%" y="213" width="0.0816%" height="15" fill="rgb(237,193,20)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7765%" y="197" width="0.0816%" height="15" fill="rgb(239,122,19)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7765%" y="181" width="0.0816%" height="15" fill="rgb(231,220,10)" fg:x="1211" fg:w="1"/><text x="99.0265%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.0212%" y="133" width="0.0816%" height="15" fill="rgb(220,66,15)" fg:x="1214" fg:w="1"/><text x="99.2712%" y="143.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="98.7765%" y="229" width="0.4078%" height="15" fill="rgb(215,171,52)" fg:x="1211" fg:w="5"/><text x="99.0265%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="98.8581%" y="213" width="0.3263%" height="15" fill="rgb(241,169,50)" fg:x="1212" fg:w="4"/><text x="99.1081%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="98.8581%" y="197" width="0.3263%" height="15" fill="rgb(236,189,0)" fg:x="1212" fg:w="4"/><text x="99.1081%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.9396%" y="181" width="0.2447%" height="15" fill="rgb(217,147,20)" fg:x="1213" fg:w="3"/><text x="99.1896%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.9396%" y="165" width="0.2447%" height="15" fill="rgb(206,188,39)" fg:x="1213" fg:w="3"/><text x="99.1896%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.9396%" y="149" width="0.2447%" height="15" fill="rgb(227,118,25)" fg:x="1213" fg:w="3"/><text x="99.1896%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1028%" y="133" width="0.0816%" height="15" fill="rgb(248,171,40)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.1028%" y="117" width="0.0816%" height="15" fill="rgb(251,90,54)" fg:x="1215" fg:w="1"/><text x="99.3528%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.49%)</title><rect x="98.7765%" y="245" width="0.4894%" height="15" fill="rgb(234,11,46)" fg:x="1211" fg:w="6"/><text x="99.0265%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1843%" y="229" width="0.0816%" height="15" fill="rgb(229,134,13)" fg:x="1216" fg:w="1"/><text x="99.4343%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="98.6949%" y="277" width="0.6525%" height="15" fill="rgb(223,129,3)" fg:x="1210" fg:w="8"/><text x="98.9449%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="98.7765%" y="261" width="0.5710%" height="15" fill="rgb(221,124,13)" fg:x="1211" fg:w="7"/><text x="99.0265%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.2659%" y="245" width="0.0816%" height="15" fill="rgb(234,3,18)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2659%" y="229" width="0.0816%" height="15" fill="rgb(249,199,20)" fg:x="1217" fg:w="1"/><text x="99.5159%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.73%)</title><rect x="98.6949%" y="373" width="0.7341%" height="15" fill="rgb(224,134,6)" fg:x="1210" fg:w="9"/><text x="98.9449%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="98.6949%" y="357" width="0.7341%" height="15" fill="rgb(254,83,26)" fg:x="1210" fg:w="9"/><text x="98.9449%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.73%)</title><rect x="98.6949%" y="341" width="0.7341%" height="15" fill="rgb(217,88,9)" fg:x="1210" fg:w="9"/><text x="98.9449%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.73%)</title><rect x="98.6949%" y="325" width="0.7341%" height="15" fill="rgb(225,73,2)" fg:x="1210" fg:w="9"/><text x="98.9449%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="98.6949%" y="309" width="0.7341%" height="15" fill="rgb(226,44,39)" fg:x="1210" fg:w="9"/><text x="98.9449%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.73%)</title><rect x="98.6949%" y="293" width="0.7341%" height="15" fill="rgb(228,53,17)" fg:x="1210" fg:w="9"/><text x="98.9449%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.3475%" y="277" width="0.0816%" height="15" fill="rgb(212,27,27)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3475%" y="261" width="0.0816%" height="15" fill="rgb(241,50,6)" fg:x="1218" fg:w="1"/><text x="99.5975%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4290%" y="325" width="0.0816%" height="15" fill="rgb(225,28,51)" fg:x="1219" fg:w="1"/><text x="99.6790%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="99.5106%" y="325" width="0.1631%" height="15" fill="rgb(215,33,16)" fg:x="1220" fg:w="2"/><text x="99.7606%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.5106%" y="309" width="0.1631%" height="15" fill="rgb(243,40,39)" fg:x="1220" fg:w="2"/><text x="99.7606%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5922%" y="293" width="0.0816%" height="15" fill="rgb(225,11,42)" fg:x="1221" fg:w="1"/><text x="99.8422%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6737%" y="325" width="0.0816%" height="15" fill="rgb(241,220,38)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.6737%" y="309" width="0.0816%" height="15" fill="rgb(244,52,35)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6737%" y="293" width="0.0816%" height="15" fill="rgb(246,42,46)" fg:x="1222" fg:w="1"/><text x="99.9237%" y="303.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (15 samples, 1.22%)</title><rect x="98.6134%" y="389" width="1.2235%" height="15" fill="rgb(205,184,13)" fg:x="1209" fg:w="15"/><text x="98.8634%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (5 samples, 0.41%)</title><rect x="99.4290%" y="373" width="0.4078%" height="15" fill="rgb(209,48,36)" fg:x="1219" fg:w="5"/><text x="99.6790%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="99.4290%" y="357" width="0.4078%" height="15" fill="rgb(244,34,51)" fg:x="1219" fg:w="5"/><text x="99.6790%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="99.4290%" y="341" width="0.4078%" height="15" fill="rgb(221,107,33)" fg:x="1219" fg:w="5"/><text x="99.6790%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.7553%" y="325" width="0.0816%" height="15" fill="rgb(224,203,12)" fg:x="1223" fg:w="1"/><text x="100.0053%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="99.7553%" y="309" width="0.0816%" height="15" fill="rgb(230,215,18)" fg:x="1223" fg:w="1"/><text x="100.0053%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.7553%" y="293" width="0.0816%" height="15" fill="rgb(206,185,35)" fg:x="1223" fg:w="1"/><text x="100.0053%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.7553%" y="277" width="0.0816%" height="15" fill="rgb(228,140,34)" fg:x="1223" fg:w="1"/><text x="100.0053%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (37 samples, 3.02%)</title><rect x="96.9005%" y="453" width="3.0179%" height="15" fill="rgb(208,93,13)" fg:x="1188" fg:w="37"/><text x="97.1505%" y="463.50">cor..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (19 samples, 1.55%)</title><rect x="98.3687%" y="437" width="1.5498%" height="15" fill="rgb(221,193,39)" fg:x="1206" fg:w="19"/><text x="98.6187%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19 samples, 1.55%)</title><rect x="98.3687%" y="421" width="1.5498%" height="15" fill="rgb(241,132,34)" fg:x="1206" fg:w="19"/><text x="98.6187%" y="431.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (19 samples, 1.55%)</title><rect x="98.3687%" y="405" width="1.5498%" height="15" fill="rgb(221,141,10)" fg:x="1206" fg:w="19"/><text x="98.6187%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="99.8369%" y="389" width="0.0816%" height="15" fill="rgb(226,90,31)" fg:x="1224" fg:w="1"/><text x="100.0869%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="99.8369%" y="373" width="0.0816%" height="15" fill="rgb(243,75,5)" fg:x="1224" fg:w="1"/><text x="100.0869%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8369%" y="357" width="0.0816%" height="15" fill="rgb(227,156,21)" fg:x="1224" fg:w="1"/><text x="100.0869%" y="367.50"></text></g><g><title>all (1,226 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(250,195,8)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="911.50"></text></g><g><title>simple-a8fb0ec0 (1,226 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(220,134,5)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="895.50">simple-a8fb0ec0</text></g><g><title>_start (1,226 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(246,106,34)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="879.50">_start</text></g><g><title>__libc_start_main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(205,1,4)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="863.50">__libc_start_main</text></g><g><title>main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(224,151,29)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (1,226 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(251,196,0)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,226 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(212,127,0)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,226 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(236,71,53)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,226 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(227,99,0)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,226 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(239,89,21)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,226 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(243,122,19)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,226 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(229,192,45)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,226 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(235,165,35)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,226 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(253,202,0)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,226 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(235,51,20)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="687.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,226 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(218,95,46)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,226 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(212,81,10)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="655.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,226 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(240,59,0)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="639.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,226 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(212,191,42)" fg:x="0" fg:w="1226"/><text x="0.2500%" y="623.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (428 samples, 34.91%)</title><rect x="65.0897%" y="597" width="34.9103%" height="15" fill="rgb(233,140,3)" fg:x="798" fg:w="428"/><text x="65.3397%" y="607.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routin..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (428 samples, 34.91%)</title><rect x="65.0897%" y="581" width="34.9103%" height="15" fill="rgb(215,69,23)" fg:x="798" fg:w="428"/><text x="65.3397%" y="591.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (428 samples, 34.91%)</title><rect x="65.0897%" y="565" width="34.9103%" height="15" fill="rgb(240,202,20)" fg:x="798" fg:w="428"/><text x="65.3397%" y="575.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (358 samples, 29.20%)</title><rect x="70.7993%" y="549" width="29.2007%" height="15" fill="rgb(209,146,50)" fg:x="868" fg:w="358"/><text x="71.0493%" y="559.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (358 samples, 29.20%)</title><rect x="70.7993%" y="533" width="29.2007%" height="15" fill="rgb(253,102,54)" fg:x="868" fg:w="358"/><text x="71.0493%" y="543.50">engine::perform::StandardPerformer::evaluate_an..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (41 samples, 3.34%)</title><rect x="96.6558%" y="517" width="3.3442%" height="15" fill="rgb(250,173,47)" fg:x="1185" fg:w="41"/><text x="96.9058%" y="527.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (41 samples, 3.34%)</title><rect x="96.6558%" y="501" width="3.3442%" height="15" fill="rgb(232,142,7)" fg:x="1185" fg:w="41"/><text x="96.9058%" y="511.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (40 samples, 3.26%)</title><rect x="96.7374%" y="485" width="3.2626%" height="15" fill="rgb(230,157,47)" fg:x="1186" fg:w="40"/><text x="96.9874%" y="495.50">plu..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (40 samples, 3.26%)</title><rect x="96.7374%" y="469" width="3.2626%" height="15" fill="rgb(214,177,35)" fg:x="1186" fg:w="40"/><text x="96.9874%" y="479.50">&lt;pl..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9184%" y="453" width="0.0816%" height="15" fill="rgb(234,119,46)" fg:x="1225" fg:w="1"/><text x="100.1684%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.9184%" y="437" width="0.0816%" height="15" fill="rgb(241,180,50)" fg:x="1225" fg:w="1"/><text x="100.1684%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.9184%" y="421" width="0.0816%" height="15" fill="rgb(221,54,25)" fg:x="1225" fg:w="1"/><text x="100.1684%" y="431.50"></text></g></svg></svg>