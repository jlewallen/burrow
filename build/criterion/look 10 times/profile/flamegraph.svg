<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="997.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="997.00"> </text><svg id="frames" x="10" width="1180" total_samples="1246"><g><title>&lt;engine::session::Session as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="597" width="0.0803%" height="15" fill="rgb(240,189,1)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>kernel::session::set_my_session (1 samples, 0.08%)</title><rect x="0.0000%" y="581" width="0.0803%" height="15" fill="rgb(242,56,20)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0803%" y="501" width="0.0803%" height="15" fill="rgb(247,132,33)" fg:x="1" fg:w="1"/><text x="0.3303%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1605%" y="485" width="0.0803%" height="15" fill="rgb(208,149,11)" fg:x="2" fg:w="1"/><text x="0.4105%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1605%" y="469" width="0.0803%" height="15" fill="rgb(211,33,11)" fg:x="2" fg:w="1"/><text x="0.4105%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1605%" y="453" width="0.0803%" height="15" fill="rgb(221,29,38)" fg:x="2" fg:w="1"/><text x="0.4105%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1605%" y="437" width="0.0803%" height="15" fill="rgb(206,182,49)" fg:x="2" fg:w="1"/><text x="0.4105%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2408%" y="469" width="0.0803%" height="15" fill="rgb(216,140,1)" fg:x="3" fg:w="1"/><text x="0.4908%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0000%" y="613" width="0.4013%" height="15" fill="rgb(232,57,40)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (4 samples, 0.32%)</title><rect x="0.0803%" y="597" width="0.3210%" height="15" fill="rgb(224,186,18)" fg:x="1" fg:w="4"/><text x="0.3303%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0803%" y="581" width="0.3210%" height="15" fill="rgb(215,121,11)" fg:x="1" fg:w="4"/><text x="0.3303%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.0803%" y="565" width="0.3210%" height="15" fill="rgb(245,147,10)" fg:x="1" fg:w="4"/><text x="0.3303%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0803%" y="549" width="0.3210%" height="15" fill="rgb(238,153,13)" fg:x="1" fg:w="4"/><text x="0.3303%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0803%" y="533" width="0.3210%" height="15" fill="rgb(233,108,0)" fg:x="1" fg:w="4"/><text x="0.3303%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0803%" y="517" width="0.3210%" height="15" fill="rgb(212,157,17)" fg:x="1" fg:w="4"/><text x="0.3303%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.1605%" y="501" width="0.2408%" height="15" fill="rgb(225,213,38)" fg:x="2" fg:w="3"/><text x="0.4105%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.2408%" y="485" width="0.1605%" height="15" fill="rgb(248,16,11)" fg:x="3" fg:w="2"/><text x="0.4908%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3210%" y="469" width="0.0803%" height="15" fill="rgb(241,33,4)" fg:x="4" fg:w="1"/><text x="0.5710%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3210%" y="453" width="0.0803%" height="15" fill="rgb(222,26,43)" fg:x="4" fg:w="1"/><text x="0.5710%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.4013%" y="533" width="0.0803%" height="15" fill="rgb(243,29,36)" fg:x="5" fg:w="1"/><text x="0.6513%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="0.4013%" y="517" width="0.0803%" height="15" fill="rgb(241,9,27)" fg:x="5" fg:w="1"/><text x="0.6513%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.4013%" y="501" width="0.0803%" height="15" fill="rgb(205,117,26)" fg:x="5" fg:w="1"/><text x="0.6513%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.4013%" y="485" width="0.0803%" height="15" fill="rgb(209,80,39)" fg:x="5" fg:w="1"/><text x="0.6513%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.4013%" y="469" width="0.0803%" height="15" fill="rgb(239,155,6)" fg:x="5" fg:w="1"/><text x="0.6513%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4013%" y="453" width="0.0803%" height="15" fill="rgb(212,104,12)" fg:x="5" fg:w="1"/><text x="0.6513%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4013%" y="437" width="0.0803%" height="15" fill="rgb(234,204,3)" fg:x="5" fg:w="1"/><text x="0.6513%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4013%" y="421" width="0.0803%" height="15" fill="rgb(251,218,7)" fg:x="5" fg:w="1"/><text x="0.6513%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4013%" y="405" width="0.0803%" height="15" fill="rgb(221,81,32)" fg:x="5" fg:w="1"/><text x="0.6513%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4013%" y="389" width="0.0803%" height="15" fill="rgb(214,152,26)" fg:x="5" fg:w="1"/><text x="0.6513%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4013%" y="373" width="0.0803%" height="15" fill="rgb(223,22,3)" fg:x="5" fg:w="1"/><text x="0.6513%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.4815%" y="533" width="0.0803%" height="15" fill="rgb(207,174,7)" fg:x="6" fg:w="1"/><text x="0.7315%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.4815%" y="517" width="0.0803%" height="15" fill="rgb(224,19,52)" fg:x="6" fg:w="1"/><text x="0.7315%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.4815%" y="501" width="0.0803%" height="15" fill="rgb(228,24,14)" fg:x="6" fg:w="1"/><text x="0.7315%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.4815%" y="485" width="0.0803%" height="15" fill="rgb(230,153,43)" fg:x="6" fg:w="1"/><text x="0.7315%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="0.5618%" y="517" width="0.0803%" height="15" fill="rgb(231,106,12)" fg:x="7" fg:w="1"/><text x="0.8118%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5618%" y="501" width="0.0803%" height="15" fill="rgb(215,92,2)" fg:x="7" fg:w="1"/><text x="0.8118%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5618%" y="485" width="0.0803%" height="15" fill="rgb(249,143,25)" fg:x="7" fg:w="1"/><text x="0.8118%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5618%" y="469" width="0.0803%" height="15" fill="rgb(252,7,35)" fg:x="7" fg:w="1"/><text x="0.8118%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5618%" y="453" width="0.0803%" height="15" fill="rgb(216,69,40)" fg:x="7" fg:w="1"/><text x="0.8118%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5618%" y="437" width="0.0803%" height="15" fill="rgb(240,36,33)" fg:x="7" fg:w="1"/><text x="0.8118%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5618%" y="421" width="0.0803%" height="15" fill="rgb(231,128,14)" fg:x="7" fg:w="1"/><text x="0.8118%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6421%" y="485" width="0.0803%" height="15" fill="rgb(245,143,14)" fg:x="8" fg:w="1"/><text x="0.8921%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (5 samples, 0.40%)</title><rect x="0.4013%" y="581" width="0.4013%" height="15" fill="rgb(222,130,28)" fg:x="5" fg:w="5"/><text x="0.6513%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="0.4013%" y="565" width="0.4013%" height="15" fill="rgb(212,10,48)" fg:x="5" fg:w="5"/><text x="0.6513%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="0.4013%" y="549" width="0.4013%" height="15" fill="rgb(254,118,45)" fg:x="5" fg:w="5"/><text x="0.6513%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="0.5618%" y="533" width="0.2408%" height="15" fill="rgb(228,6,45)" fg:x="7" fg:w="3"/><text x="0.8118%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.6421%" y="517" width="0.1605%" height="15" fill="rgb(241,18,35)" fg:x="8" fg:w="2"/><text x="0.8921%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.6421%" y="501" width="0.1605%" height="15" fill="rgb(227,214,53)" fg:x="8" fg:w="2"/><text x="0.8921%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.7223%" y="485" width="0.0803%" height="15" fill="rgb(224,107,51)" fg:x="9" fg:w="1"/><text x="0.9723%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7223%" y="469" width="0.0803%" height="15" fill="rgb(248,60,28)" fg:x="9" fg:w="1"/><text x="0.9723%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7223%" y="453" width="0.0803%" height="15" fill="rgb(249,101,23)" fg:x="9" fg:w="1"/><text x="0.9723%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7223%" y="437" width="0.0803%" height="15" fill="rgb(228,51,19)" fg:x="9" fg:w="1"/><text x="0.9723%" y="447.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="0.8026%" y="581" width="0.0803%" height="15" fill="rgb(213,20,6)" fg:x="10" fg:w="1"/><text x="1.0526%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="0.8026%" y="565" width="0.0803%" height="15" fill="rgb(212,124,10)" fg:x="10" fg:w="1"/><text x="1.0526%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.8026%" y="549" width="0.0803%" height="15" fill="rgb(248,3,40)" fg:x="10" fg:w="1"/><text x="1.0526%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8026%" y="533" width="0.0803%" height="15" fill="rgb(223,178,23)" fg:x="10" fg:w="1"/><text x="1.0526%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8026%" y="517" width="0.0803%" height="15" fill="rgb(240,132,45)" fg:x="10" fg:w="1"/><text x="1.0526%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8026%" y="501" width="0.0803%" height="15" fill="rgb(245,164,36)" fg:x="10" fg:w="1"/><text x="1.0526%" y="511.50"></text></g><g><title>&lt;alloc::ffi::c_str::CString as core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="1.1236%" y="533" width="0.0803%" height="15" fill="rgb(231,188,53)" fg:x="14" fg:w="1"/><text x="1.3736%" y="543.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl alloc::borrow::ToOwned for core::ffi::c_str::CStr&gt;::to_owned (1 samples, 0.08%)</title><rect x="1.1236%" y="517" width="0.0803%" height="15" fill="rgb(237,198,39)" fg:x="14" fg:w="1"/><text x="1.3736%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.08%)</title><rect x="1.1236%" y="501" width="0.0803%" height="15" fill="rgb(223,120,35)" fg:x="14" fg:w="1"/><text x="1.3736%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="1.1236%" y="485" width="0.0803%" height="15" fill="rgb(253,107,49)" fg:x="14" fg:w="1"/><text x="1.3736%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (1 samples, 0.08%)</title><rect x="1.1236%" y="469" width="0.0803%" height="15" fill="rgb(216,44,31)" fg:x="14" fg:w="1"/><text x="1.3736%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="1.1236%" y="453" width="0.0803%" height="15" fill="rgb(253,87,21)" fg:x="14" fg:w="1"/><text x="1.3736%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.1236%" y="437" width="0.0803%" height="15" fill="rgb(226,18,2)" fg:x="14" fg:w="1"/><text x="1.3736%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.1236%" y="421" width="0.0803%" height="15" fill="rgb(216,8,46)" fg:x="14" fg:w="1"/><text x="1.3736%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.1236%" y="405" width="0.0803%" height="15" fill="rgb(226,140,39)" fg:x="14" fg:w="1"/><text x="1.3736%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.1236%" y="389" width="0.0803%" height="15" fill="rgb(221,194,54)" fg:x="14" fg:w="1"/><text x="1.3736%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.1236%" y="373" width="0.0803%" height="15" fill="rgb(213,92,11)" fg:x="14" fg:w="1"/><text x="1.3736%" y="383.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.2039%" y="533" width="0.0803%" height="15" fill="rgb(229,162,46)" fg:x="15" fg:w="1"/><text x="1.4539%" y="543.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.2039%" y="517" width="0.0803%" height="15" fill="rgb(214,111,36)" fg:x="15" fg:w="1"/><text x="1.4539%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.80%)</title><rect x="0.8828%" y="565" width="0.8026%" height="15" fill="rgb(207,6,21)" fg:x="11" fg:w="10"/><text x="1.1328%" y="575.50"></text></g><g><title>libloading::os::unix::Library::open (8 samples, 0.64%)</title><rect x="1.0433%" y="549" width="0.6421%" height="15" fill="rgb(213,127,38)" fg:x="13" fg:w="8"/><text x="1.2933%" y="559.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="1.2841%" y="533" width="0.4013%" height="15" fill="rgb(238,118,32)" fg:x="16" fg:w="5"/><text x="1.5341%" y="543.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="1.2841%" y="517" width="0.4013%" height="15" fill="rgb(240,139,39)" fg:x="16" fg:w="5"/><text x="1.5341%" y="527.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.2841%" y="501" width="0.4013%" height="15" fill="rgb(235,10,37)" fg:x="16" fg:w="5"/><text x="1.5341%" y="511.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.2841%" y="485" width="0.4013%" height="15" fill="rgb(249,171,38)" fg:x="16" fg:w="5"/><text x="1.5341%" y="495.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.2841%" y="469" width="0.4013%" height="15" fill="rgb(242,144,32)" fg:x="16" fg:w="5"/><text x="1.5341%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (11 samples, 0.88%)</title><rect x="0.8828%" y="581" width="0.8828%" height="15" fill="rgb(217,117,21)" fg:x="11" fg:w="11"/><text x="1.1328%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.6854%" y="565" width="0.0803%" height="15" fill="rgb(249,87,1)" fg:x="21" fg:w="1"/><text x="1.9354%" y="575.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.6854%" y="549" width="0.0803%" height="15" fill="rgb(248,196,48)" fg:x="21" fg:w="1"/><text x="1.9354%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (18 samples, 1.44%)</title><rect x="0.4013%" y="613" width="1.4446%" height="15" fill="rgb(251,206,33)" fg:x="5" fg:w="18"/><text x="0.6513%" y="623.50"></text></g><g><title>engine::session::Session::new (18 samples, 1.44%)</title><rect x="0.4013%" y="597" width="1.4446%" height="15" fill="rgb(232,141,28)" fg:x="5" fg:w="18"/><text x="0.6513%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="1.7657%" y="581" width="0.0803%" height="15" fill="rgb(209,167,14)" fg:x="22" fg:w="1"/><text x="2.0157%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="1.7657%" y="565" width="0.0803%" height="15" fill="rgb(225,11,50)" fg:x="22" fg:w="1"/><text x="2.0157%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.7657%" y="549" width="0.0803%" height="15" fill="rgb(209,50,20)" fg:x="22" fg:w="1"/><text x="2.0157%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.7657%" y="533" width="0.0803%" height="15" fill="rgb(212,17,46)" fg:x="22" fg:w="1"/><text x="2.0157%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.7657%" y="517" width="0.0803%" height="15" fill="rgb(216,101,39)" fg:x="22" fg:w="1"/><text x="2.0157%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.7657%" y="501" width="0.0803%" height="15" fill="rgb(212,228,48)" fg:x="22" fg:w="1"/><text x="2.0157%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.8459%" y="597" width="0.0803%" height="15" fill="rgb(250,6,50)" fg:x="23" fg:w="1"/><text x="2.0959%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.9262%" y="565" width="0.0803%" height="15" fill="rgb(250,160,48)" fg:x="24" fg:w="1"/><text x="2.1762%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.9262%" y="549" width="0.0803%" height="15" fill="rgb(244,216,33)" fg:x="24" fg:w="1"/><text x="2.1762%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.9262%" y="533" width="0.0803%" height="15" fill="rgb(207,157,5)" fg:x="24" fg:w="1"/><text x="2.1762%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.9262%" y="517" width="0.0803%" height="15" fill="rgb(228,199,8)" fg:x="24" fg:w="1"/><text x="2.1762%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.9262%" y="501" width="0.0803%" height="15" fill="rgb(227,80,20)" fg:x="24" fg:w="1"/><text x="2.1762%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.9262%" y="485" width="0.0803%" height="15" fill="rgb(222,9,33)" fg:x="24" fg:w="1"/><text x="2.1762%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.9262%" y="469" width="0.0803%" height="15" fill="rgb(239,44,28)" fg:x="24" fg:w="1"/><text x="2.1762%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.9262%" y="453" width="0.0803%" height="15" fill="rgb(249,187,43)" fg:x="24" fg:w="1"/><text x="2.1762%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.9262%" y="437" width="0.0803%" height="15" fill="rgb(216,141,28)" fg:x="24" fg:w="1"/><text x="2.1762%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.9262%" y="421" width="0.0803%" height="15" fill="rgb(230,154,53)" fg:x="24" fg:w="1"/><text x="2.1762%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.9262%" y="405" width="0.0803%" height="15" fill="rgb(227,82,4)" fg:x="24" fg:w="1"/><text x="2.1762%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.9262%" y="389" width="0.0803%" height="15" fill="rgb(220,107,16)" fg:x="24" fg:w="1"/><text x="2.1762%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.9262%" y="373" width="0.0803%" height="15" fill="rgb(207,187,2)" fg:x="24" fg:w="1"/><text x="2.1762%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.0064%" y="501" width="0.0803%" height="15" fill="rgb(210,162,52)" fg:x="25" fg:w="1"/><text x="2.2564%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0064%" y="485" width="0.0803%" height="15" fill="rgb(217,216,49)" fg:x="25" fg:w="1"/><text x="2.2564%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0064%" y="469" width="0.0803%" height="15" fill="rgb(218,146,49)" fg:x="25" fg:w="1"/><text x="2.2564%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.0064%" y="453" width="0.0803%" height="15" fill="rgb(216,55,40)" fg:x="25" fg:w="1"/><text x="2.2564%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.0867%" y="485" width="0.0803%" height="15" fill="rgb(208,196,21)" fg:x="26" fg:w="1"/><text x="2.3367%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.0867%" y="469" width="0.0803%" height="15" fill="rgb(242,117,42)" fg:x="26" fg:w="1"/><text x="2.3367%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.0867%" y="453" width="0.0803%" height="15" fill="rgb(210,11,23)" fg:x="26" fg:w="1"/><text x="2.3367%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.0064%" y="517" width="0.2408%" height="15" fill="rgb(217,110,2)" fg:x="25" fg:w="3"/><text x="2.2564%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0867%" y="501" width="0.1605%" height="15" fill="rgb(229,77,54)" fg:x="26" fg:w="2"/><text x="2.3367%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1669%" y="485" width="0.0803%" height="15" fill="rgb(218,53,16)" fg:x="27" fg:w="1"/><text x="2.4169%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.1669%" y="469" width="0.0803%" height="15" fill="rgb(215,38,13)" fg:x="27" fg:w="1"/><text x="2.4169%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="2.0064%" y="533" width="0.3210%" height="15" fill="rgb(235,42,18)" fg:x="25" fg:w="4"/><text x="2.2564%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2472%" y="517" width="0.0803%" height="15" fill="rgb(219,66,54)" fg:x="28" fg:w="1"/><text x="2.4972%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2472%" y="501" width="0.0803%" height="15" fill="rgb(222,205,4)" fg:x="28" fg:w="1"/><text x="2.4972%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2472%" y="485" width="0.0803%" height="15" fill="rgb(227,213,46)" fg:x="28" fg:w="1"/><text x="2.4972%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3274%" y="501" width="0.0803%" height="15" fill="rgb(250,145,42)" fg:x="29" fg:w="1"/><text x="2.5774%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.3274%" y="533" width="0.1605%" height="15" fill="rgb(219,15,2)" fg:x="29" fg:w="2"/><text x="2.5774%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.3274%" y="517" width="0.1605%" height="15" fill="rgb(231,181,52)" fg:x="29" fg:w="2"/><text x="2.5774%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.4077%" y="501" width="0.0803%" height="15" fill="rgb(235,1,42)" fg:x="30" fg:w="1"/><text x="2.6577%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4077%" y="485" width="0.0803%" height="15" fill="rgb(249,88,27)" fg:x="30" fg:w="1"/><text x="2.6577%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4880%" y="485" width="0.0803%" height="15" fill="rgb(235,145,16)" fg:x="31" fg:w="1"/><text x="2.7380%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4880%" y="469" width="0.0803%" height="15" fill="rgb(237,114,19)" fg:x="31" fg:w="1"/><text x="2.7380%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.4880%" y="453" width="0.0803%" height="15" fill="rgb(238,51,50)" fg:x="31" fg:w="1"/><text x="2.7380%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5682%" y="485" width="0.0803%" height="15" fill="rgb(205,194,25)" fg:x="32" fg:w="1"/><text x="2.8182%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.5682%" y="469" width="0.0803%" height="15" fill="rgb(215,203,17)" fg:x="32" fg:w="1"/><text x="2.8182%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5682%" y="453" width="0.0803%" height="15" fill="rgb(233,112,49)" fg:x="32" fg:w="1"/><text x="2.8182%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="2.6485%" y="437" width="0.1605%" height="15" fill="rgb(241,130,26)" fg:x="33" fg:w="2"/><text x="2.8985%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7287%" y="421" width="0.0803%" height="15" fill="rgb(252,223,19)" fg:x="34" fg:w="1"/><text x="2.9787%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.7287%" y="405" width="0.0803%" height="15" fill="rgb(211,95,25)" fg:x="34" fg:w="1"/><text x="2.9787%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7287%" y="389" width="0.0803%" height="15" fill="rgb(251,182,27)" fg:x="34" fg:w="1"/><text x="2.9787%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7287%" y="373" width="0.0803%" height="15" fill="rgb(238,24,4)" fg:x="34" fg:w="1"/><text x="2.9787%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9695%" y="405" width="0.0803%" height="15" fill="rgb(224,220,25)" fg:x="37" fg:w="1"/><text x="3.2195%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9695%" y="389" width="0.0803%" height="15" fill="rgb(239,133,26)" fg:x="37" fg:w="1"/><text x="3.2195%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9695%" y="373" width="0.0803%" height="15" fill="rgb(211,94,48)" fg:x="37" fg:w="1"/><text x="3.2195%" y="383.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="1.9262%" y="597" width="1.2039%" height="15" fill="rgb(239,87,6)" fg:x="24" fg:w="15"/><text x="2.1762%" y="607.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.20%)</title><rect x="1.9262%" y="581" width="1.2039%" height="15" fill="rgb(227,62,0)" fg:x="24" fg:w="15"/><text x="2.1762%" y="591.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (14 samples, 1.12%)</title><rect x="2.0064%" y="565" width="1.1236%" height="15" fill="rgb(211,226,4)" fg:x="25" fg:w="14"/><text x="2.2564%" y="575.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="2.0064%" y="549" width="1.1236%" height="15" fill="rgb(253,38,52)" fg:x="25" fg:w="14"/><text x="2.2564%" y="559.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="2.4880%" y="533" width="0.6421%" height="15" fill="rgb(229,126,40)" fg:x="31" fg:w="8"/><text x="2.7380%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="2.4880%" y="517" width="0.6421%" height="15" fill="rgb(229,165,44)" fg:x="31" fg:w="8"/><text x="2.7380%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="2.4880%" y="501" width="0.6421%" height="15" fill="rgb(247,95,47)" fg:x="31" fg:w="8"/><text x="2.7380%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="2.6485%" y="485" width="0.4815%" height="15" fill="rgb(216,140,30)" fg:x="33" fg:w="6"/><text x="2.8985%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="2.6485%" y="469" width="0.4815%" height="15" fill="rgb(246,214,8)" fg:x="33" fg:w="6"/><text x="2.8985%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="2.6485%" y="453" width="0.4815%" height="15" fill="rgb(227,224,15)" fg:x="33" fg:w="6"/><text x="2.8985%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="2.8090%" y="437" width="0.3210%" height="15" fill="rgb(233,175,4)" fg:x="35" fg:w="4"/><text x="3.0590%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.9695%" y="421" width="0.1605%" height="15" fill="rgb(221,66,45)" fg:x="37" fg:w="2"/><text x="3.2195%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0498%" y="405" width="0.0803%" height="15" fill="rgb(221,178,18)" fg:x="38" fg:w="1"/><text x="3.2998%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0498%" y="389" width="0.0803%" height="15" fill="rgb(213,81,29)" fg:x="38" fg:w="1"/><text x="3.2998%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0498%" y="373" width="0.0803%" height="15" fill="rgb(220,89,49)" fg:x="38" fg:w="1"/><text x="3.2998%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0498%" y="357" width="0.0803%" height="15" fill="rgb(227,60,33)" fg:x="38" fg:w="1"/><text x="3.2998%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0498%" y="341" width="0.0803%" height="15" fill="rgb(205,113,12)" fg:x="38" fg:w="1"/><text x="3.2998%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0498%" y="325" width="0.0803%" height="15" fill="rgb(211,32,1)" fg:x="38" fg:w="1"/><text x="3.2998%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0498%" y="309" width="0.0803%" height="15" fill="rgb(246,2,12)" fg:x="38" fg:w="1"/><text x="3.2998%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0498%" y="293" width="0.0803%" height="15" fill="rgb(243,37,27)" fg:x="38" fg:w="1"/><text x="3.2998%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0498%" y="277" width="0.0803%" height="15" fill="rgb(248,211,31)" fg:x="38" fg:w="1"/><text x="3.2998%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.1300%" y="581" width="0.0803%" height="15" fill="rgb(242,146,47)" fg:x="39" fg:w="1"/><text x="3.3800%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.1300%" y="565" width="0.0803%" height="15" fill="rgb(206,70,20)" fg:x="39" fg:w="1"/><text x="3.3800%" y="575.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.1300%" y="549" width="0.0803%" height="15" fill="rgb(215,10,51)" fg:x="39" fg:w="1"/><text x="3.3800%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.1300%" y="533" width="0.0803%" height="15" fill="rgb(243,178,53)" fg:x="39" fg:w="1"/><text x="3.3800%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.1300%" y="517" width="0.0803%" height="15" fill="rgb(233,221,20)" fg:x="39" fg:w="1"/><text x="3.3800%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.1300%" y="501" width="0.0803%" height="15" fill="rgb(218,95,35)" fg:x="39" fg:w="1"/><text x="3.3800%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.1300%" y="485" width="0.0803%" height="15" fill="rgb(229,13,5)" fg:x="39" fg:w="1"/><text x="3.3800%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.1300%" y="469" width="0.0803%" height="15" fill="rgb(252,164,30)" fg:x="39" fg:w="1"/><text x="3.3800%" y="479.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="3.1300%" y="453" width="0.0803%" height="15" fill="rgb(232,68,36)" fg:x="39" fg:w="1"/><text x="3.3800%" y="463.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2905%" y="549" width="0.0803%" height="15" fill="rgb(219,59,54)" fg:x="41" fg:w="1"/><text x="3.5405%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.2905%" y="565" width="0.1605%" height="15" fill="rgb(250,92,33)" fg:x="41" fg:w="2"/><text x="3.5405%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3708%" y="549" width="0.0803%" height="15" fill="rgb(229,162,54)" fg:x="42" fg:w="1"/><text x="3.6208%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.3708%" y="533" width="0.0803%" height="15" fill="rgb(244,114,52)" fg:x="42" fg:w="1"/><text x="3.6208%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3708%" y="517" width="0.0803%" height="15" fill="rgb(212,211,43)" fg:x="42" fg:w="1"/><text x="3.6208%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.4510%" y="517" width="0.0803%" height="15" fill="rgb(226,147,8)" fg:x="43" fg:w="1"/><text x="3.7010%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="3.4510%" y="501" width="0.0803%" height="15" fill="rgb(226,23,13)" fg:x="43" fg:w="1"/><text x="3.7010%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.5313%" y="501" width="0.0803%" height="15" fill="rgb(240,63,4)" fg:x="44" fg:w="1"/><text x="3.7813%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="3.1300%" y="597" width="0.5618%" height="15" fill="rgb(221,1,32)" fg:x="39" fg:w="7"/><text x="3.3800%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="3.2103%" y="581" width="0.4815%" height="15" fill="rgb(242,117,10)" fg:x="40" fg:w="6"/><text x="3.4603%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="3.4510%" y="565" width="0.2408%" height="15" fill="rgb(249,172,44)" fg:x="43" fg:w="3"/><text x="3.7010%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="3.4510%" y="549" width="0.2408%" height="15" fill="rgb(244,46,45)" fg:x="43" fg:w="3"/><text x="3.7010%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="3.4510%" y="533" width="0.2408%" height="15" fill="rgb(206,43,17)" fg:x="43" fg:w="3"/><text x="3.7010%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="3.5313%" y="517" width="0.1605%" height="15" fill="rgb(239,218,39)" fg:x="44" fg:w="2"/><text x="3.7813%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6116%" y="501" width="0.0803%" height="15" fill="rgb(208,169,54)" fg:x="45" fg:w="1"/><text x="3.8616%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6116%" y="485" width="0.0803%" height="15" fill="rgb(247,25,42)" fg:x="45" fg:w="1"/><text x="3.8616%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6116%" y="469" width="0.0803%" height="15" fill="rgb(226,23,31)" fg:x="45" fg:w="1"/><text x="3.8616%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6116%" y="453" width="0.0803%" height="15" fill="rgb(247,16,28)" fg:x="45" fg:w="1"/><text x="3.8616%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6116%" y="437" width="0.0803%" height="15" fill="rgb(231,147,38)" fg:x="45" fg:w="1"/><text x="3.8616%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6116%" y="421" width="0.0803%" height="15" fill="rgb(253,81,48)" fg:x="45" fg:w="1"/><text x="3.8616%" y="431.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.6918%" y="549" width="0.0803%" height="15" fill="rgb(249,222,43)" fg:x="46" fg:w="1"/><text x="3.9418%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.6918%" y="533" width="0.0803%" height="15" fill="rgb(221,3,27)" fg:x="46" fg:w="1"/><text x="3.9418%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.6918%" y="517" width="0.0803%" height="15" fill="rgb(228,180,5)" fg:x="46" fg:w="1"/><text x="3.9418%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.6918%" y="501" width="0.0803%" height="15" fill="rgb(227,131,42)" fg:x="46" fg:w="1"/><text x="3.9418%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="3.6918%" y="485" width="0.0803%" height="15" fill="rgb(212,3,39)" fg:x="46" fg:w="1"/><text x="3.9418%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.6918%" y="469" width="0.0803%" height="15" fill="rgb(226,45,5)" fg:x="46" fg:w="1"/><text x="3.9418%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6918%" y="453" width="0.0803%" height="15" fill="rgb(215,167,45)" fg:x="46" fg:w="1"/><text x="3.9418%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6918%" y="437" width="0.0803%" height="15" fill="rgb(250,218,53)" fg:x="46" fg:w="1"/><text x="3.9418%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.6918%" y="421" width="0.0803%" height="15" fill="rgb(207,140,0)" fg:x="46" fg:w="1"/><text x="3.9418%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.6918%" y="405" width="0.0803%" height="15" fill="rgb(238,133,51)" fg:x="46" fg:w="1"/><text x="3.9418%" y="415.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="3.6918%" y="597" width="0.1605%" height="15" fill="rgb(218,203,53)" fg:x="46" fg:w="2"/><text x="3.9418%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.6918%" y="581" width="0.1605%" height="15" fill="rgb(226,184,25)" fg:x="46" fg:w="2"/><text x="3.9418%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.6918%" y="565" width="0.1605%" height="15" fill="rgb(231,121,21)" fg:x="46" fg:w="2"/><text x="3.9418%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="3.7721%" y="549" width="0.0803%" height="15" fill="rgb(251,14,34)" fg:x="47" fg:w="1"/><text x="4.0221%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.7721%" y="533" width="0.0803%" height="15" fill="rgb(249,193,11)" fg:x="47" fg:w="1"/><text x="4.0221%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.8523%" y="597" width="0.0803%" height="15" fill="rgb(220,172,37)" fg:x="48" fg:w="1"/><text x="4.1023%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.8523%" y="581" width="0.0803%" height="15" fill="rgb(231,229,43)" fg:x="48" fg:w="1"/><text x="4.1023%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.8523%" y="565" width="0.0803%" height="15" fill="rgb(250,161,5)" fg:x="48" fg:w="1"/><text x="4.1023%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8523%" y="549" width="0.0803%" height="15" fill="rgb(218,225,18)" fg:x="48" fg:w="1"/><text x="4.1023%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.0128%" y="469" width="0.0803%" height="15" fill="rgb(245,45,42)" fg:x="50" fg:w="1"/><text x="4.2628%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0128%" y="453" width="0.0803%" height="15" fill="rgb(211,115,1)" fg:x="50" fg:w="1"/><text x="4.2628%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0128%" y="437" width="0.0803%" height="15" fill="rgb(248,133,52)" fg:x="50" fg:w="1"/><text x="4.2628%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="4.0128%" y="581" width="0.1605%" height="15" fill="rgb(238,100,21)" fg:x="50" fg:w="2"/><text x="4.2628%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.0128%" y="565" width="0.1605%" height="15" fill="rgb(247,144,11)" fg:x="50" fg:w="2"/><text x="4.2628%" y="575.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="4.0128%" y="549" width="0.1605%" height="15" fill="rgb(206,164,16)" fg:x="50" fg:w="2"/><text x="4.2628%" y="559.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="4.0128%" y="533" width="0.1605%" height="15" fill="rgb(222,34,3)" fg:x="50" fg:w="2"/><text x="4.2628%" y="543.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="4.0128%" y="517" width="0.1605%" height="15" fill="rgb(248,82,4)" fg:x="50" fg:w="2"/><text x="4.2628%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="4.0128%" y="501" width="0.1605%" height="15" fill="rgb(228,81,46)" fg:x="50" fg:w="2"/><text x="4.2628%" y="511.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="4.0128%" y="485" width="0.1605%" height="15" fill="rgb(227,67,47)" fg:x="50" fg:w="2"/><text x="4.2628%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.0931%" y="469" width="0.0803%" height="15" fill="rgb(215,93,53)" fg:x="51" fg:w="1"/><text x="4.3431%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0931%" y="453" width="0.0803%" height="15" fill="rgb(248,194,39)" fg:x="51" fg:w="1"/><text x="4.3431%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0931%" y="437" width="0.0803%" height="15" fill="rgb(215,5,19)" fg:x="51" fg:w="1"/><text x="4.3431%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0931%" y="421" width="0.0803%" height="15" fill="rgb(226,215,51)" fg:x="51" fg:w="1"/><text x="4.3431%" y="431.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.1734%" y="549" width="0.0803%" height="15" fill="rgb(225,56,26)" fg:x="52" fg:w="1"/><text x="4.4234%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1734%" y="533" width="0.0803%" height="15" fill="rgb(222,75,29)" fg:x="52" fg:w="1"/><text x="4.4234%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1734%" y="517" width="0.0803%" height="15" fill="rgb(236,139,6)" fg:x="52" fg:w="1"/><text x="4.4234%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.2536%" y="549" width="0.0803%" height="15" fill="rgb(223,137,36)" fg:x="53" fg:w="1"/><text x="4.5036%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.2536%" y="533" width="0.0803%" height="15" fill="rgb(226,99,2)" fg:x="53" fg:w="1"/><text x="4.5036%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="4.2536%" y="517" width="0.0803%" height="15" fill="rgb(206,133,23)" fg:x="53" fg:w="1"/><text x="4.5036%" y="527.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="4.3339%" y="549" width="0.0803%" height="15" fill="rgb(243,173,15)" fg:x="54" fg:w="1"/><text x="4.5839%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.3339%" y="533" width="0.0803%" height="15" fill="rgb(228,69,28)" fg:x="54" fg:w="1"/><text x="4.5839%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.4141%" y="501" width="0.1605%" height="15" fill="rgb(212,51,22)" fg:x="55" fg:w="2"/><text x="4.6641%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4944%" y="485" width="0.0803%" height="15" fill="rgb(227,113,0)" fg:x="56" fg:w="1"/><text x="4.7444%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="4.4141%" y="517" width="0.2408%" height="15" fill="rgb(252,84,27)" fg:x="55" fg:w="3"/><text x="4.6641%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5746%" y="501" width="0.0803%" height="15" fill="rgb(223,145,39)" fg:x="57" fg:w="1"/><text x="4.8246%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5746%" y="485" width="0.0803%" height="15" fill="rgb(239,219,30)" fg:x="57" fg:w="1"/><text x="4.8246%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6549%" y="517" width="0.0803%" height="15" fill="rgb(224,196,39)" fg:x="58" fg:w="1"/><text x="4.9049%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.6549%" y="501" width="0.0803%" height="15" fill="rgb(205,35,43)" fg:x="58" fg:w="1"/><text x="4.9049%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6549%" y="485" width="0.0803%" height="15" fill="rgb(228,201,21)" fg:x="58" fg:w="1"/><text x="4.9049%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6549%" y="469" width="0.0803%" height="15" fill="rgb(237,118,16)" fg:x="58" fg:w="1"/><text x="4.9049%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6549%" y="453" width="0.0803%" height="15" fill="rgb(241,17,19)" fg:x="58" fg:w="1"/><text x="4.9049%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.6549%" y="437" width="0.0803%" height="15" fill="rgb(214,10,25)" fg:x="58" fg:w="1"/><text x="4.9049%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6549%" y="421" width="0.0803%" height="15" fill="rgb(238,37,29)" fg:x="58" fg:w="1"/><text x="4.9049%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.7352%" y="469" width="0.0803%" height="15" fill="rgb(253,83,25)" fg:x="59" fg:w="1"/><text x="4.9852%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8154%" y="469" width="0.0803%" height="15" fill="rgb(234,192,12)" fg:x="60" fg:w="1"/><text x="5.0654%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.8154%" y="453" width="0.0803%" height="15" fill="rgb(241,216,45)" fg:x="60" fg:w="1"/><text x="5.0654%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8154%" y="437" width="0.0803%" height="15" fill="rgb(242,22,33)" fg:x="60" fg:w="1"/><text x="5.0654%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="4.8957%" y="469" width="0.1605%" height="15" fill="rgb(231,105,49)" fg:x="61" fg:w="2"/><text x="5.1457%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.9759%" y="453" width="0.0803%" height="15" fill="rgb(218,204,15)" fg:x="62" fg:w="1"/><text x="5.2259%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9759%" y="437" width="0.0803%" height="15" fill="rgb(235,138,41)" fg:x="62" fg:w="1"/><text x="5.2259%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1364%" y="421" width="0.0803%" height="15" fill="rgb(246,0,9)" fg:x="64" fg:w="1"/><text x="5.3864%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1364%" y="405" width="0.0803%" height="15" fill="rgb(210,74,4)" fg:x="64" fg:w="1"/><text x="5.3864%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.1364%" y="389" width="0.0803%" height="15" fill="rgb(250,60,41)" fg:x="64" fg:w="1"/><text x="5.3864%" y="399.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="4.1734%" y="581" width="1.2039%" height="15" fill="rgb(220,115,12)" fg:x="52" fg:w="15"/><text x="4.4234%" y="591.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.20%)</title><rect x="4.1734%" y="565" width="1.2039%" height="15" fill="rgb(237,100,13)" fg:x="52" fg:w="15"/><text x="4.4234%" y="575.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="4.4141%" y="549" width="0.9631%" height="15" fill="rgb(213,55,26)" fg:x="55" fg:w="12"/><text x="4.6641%" y="559.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="4.4141%" y="533" width="0.9631%" height="15" fill="rgb(216,17,4)" fg:x="55" fg:w="12"/><text x="4.6641%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="4.7352%" y="517" width="0.6421%" height="15" fill="rgb(220,153,47)" fg:x="59" fg:w="8"/><text x="4.9852%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="4.7352%" y="501" width="0.6421%" height="15" fill="rgb(215,131,9)" fg:x="59" fg:w="8"/><text x="4.9852%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="4.7352%" y="485" width="0.6421%" height="15" fill="rgb(233,46,42)" fg:x="59" fg:w="8"/><text x="4.9852%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="5.0562%" y="469" width="0.3210%" height="15" fill="rgb(226,86,7)" fg:x="63" fg:w="4"/><text x="5.3062%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="5.0562%" y="453" width="0.3210%" height="15" fill="rgb(239,226,21)" fg:x="63" fg:w="4"/><text x="5.3062%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.1364%" y="437" width="0.2408%" height="15" fill="rgb(244,137,22)" fg:x="64" fg:w="3"/><text x="5.3864%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.2167%" y="421" width="0.1605%" height="15" fill="rgb(211,139,35)" fg:x="65" fg:w="2"/><text x="5.4667%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.2167%" y="405" width="0.1605%" height="15" fill="rgb(214,62,50)" fg:x="65" fg:w="2"/><text x="5.4667%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2970%" y="389" width="0.0803%" height="15" fill="rgb(212,113,44)" fg:x="66" fg:w="1"/><text x="5.5470%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2970%" y="373" width="0.0803%" height="15" fill="rgb(226,150,43)" fg:x="66" fg:w="1"/><text x="5.5470%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2970%" y="357" width="0.0803%" height="15" fill="rgb(250,71,37)" fg:x="66" fg:w="1"/><text x="5.5470%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2970%" y="341" width="0.0803%" height="15" fill="rgb(219,76,19)" fg:x="66" fg:w="1"/><text x="5.5470%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2970%" y="325" width="0.0803%" height="15" fill="rgb(250,39,11)" fg:x="66" fg:w="1"/><text x="5.5470%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2970%" y="309" width="0.0803%" height="15" fill="rgb(230,64,31)" fg:x="66" fg:w="1"/><text x="5.5470%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.2970%" y="293" width="0.0803%" height="15" fill="rgb(208,222,23)" fg:x="66" fg:w="1"/><text x="5.5470%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="5.2970%" y="277" width="0.0803%" height="15" fill="rgb(227,125,18)" fg:x="66" fg:w="1"/><text x="5.5470%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4575%" y="469" width="0.0803%" height="15" fill="rgb(234,210,9)" fg:x="68" fg:w="1"/><text x="5.7075%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4575%" y="453" width="0.0803%" height="15" fill="rgb(217,127,24)" fg:x="68" fg:w="1"/><text x="5.7075%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4575%" y="437" width="0.0803%" height="15" fill="rgb(239,141,48)" fg:x="68" fg:w="1"/><text x="5.7075%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4575%" y="421" width="0.0803%" height="15" fill="rgb(227,109,8)" fg:x="68" fg:w="1"/><text x="5.7075%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4575%" y="405" width="0.0803%" height="15" fill="rgb(235,184,23)" fg:x="68" fg:w="1"/><text x="5.7075%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4575%" y="389" width="0.0803%" height="15" fill="rgb(227,226,48)" fg:x="68" fg:w="1"/><text x="5.7075%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="5.3772%" y="517" width="0.2408%" height="15" fill="rgb(206,150,11)" fg:x="67" fg:w="3"/><text x="5.6272%" y="527.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="5.3772%" y="501" width="0.2408%" height="15" fill="rgb(254,2,33)" fg:x="67" fg:w="3"/><text x="5.6272%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="5.3772%" y="485" width="0.2408%" height="15" fill="rgb(243,160,20)" fg:x="67" fg:w="3"/><text x="5.6272%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.5377%" y="469" width="0.0803%" height="15" fill="rgb(218,208,30)" fg:x="69" fg:w="1"/><text x="5.7877%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.5377%" y="453" width="0.0803%" height="15" fill="rgb(224,120,49)" fg:x="69" fg:w="1"/><text x="5.7877%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.5377%" y="437" width="0.0803%" height="15" fill="rgb(246,12,2)" fg:x="69" fg:w="1"/><text x="5.7877%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.5377%" y="421" width="0.0803%" height="15" fill="rgb(236,117,3)" fg:x="69" fg:w="1"/><text x="5.7877%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.5377%" y="405" width="0.0803%" height="15" fill="rgb(216,128,52)" fg:x="69" fg:w="1"/><text x="5.7877%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.5377%" y="389" width="0.0803%" height="15" fill="rgb(246,145,19)" fg:x="69" fg:w="1"/><text x="5.7877%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.5377%" y="373" width="0.0803%" height="15" fill="rgb(222,11,46)" fg:x="69" fg:w="1"/><text x="5.7877%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.5377%" y="357" width="0.0803%" height="15" fill="rgb(245,82,36)" fg:x="69" fg:w="1"/><text x="5.7877%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.5377%" y="341" width="0.0803%" height="15" fill="rgb(250,73,51)" fg:x="69" fg:w="1"/><text x="5.7877%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.5377%" y="325" width="0.0803%" height="15" fill="rgb(221,189,23)" fg:x="69" fg:w="1"/><text x="5.7877%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.5377%" y="309" width="0.0803%" height="15" fill="rgb(210,33,7)" fg:x="69" fg:w="1"/><text x="5.7877%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="5.3772%" y="565" width="0.4013%" height="15" fill="rgb(210,107,22)" fg:x="67" fg:w="5"/><text x="5.6272%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="5.3772%" y="549" width="0.4013%" height="15" fill="rgb(222,116,37)" fg:x="67" fg:w="5"/><text x="5.6272%" y="559.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="5.3772%" y="533" width="0.4013%" height="15" fill="rgb(254,17,48)" fg:x="67" fg:w="5"/><text x="5.6272%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="5.6180%" y="517" width="0.1605%" height="15" fill="rgb(224,36,32)" fg:x="70" fg:w="2"/><text x="5.8680%" y="527.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="5.6180%" y="501" width="0.1605%" height="15" fill="rgb(232,90,46)" fg:x="70" fg:w="2"/><text x="5.8680%" y="511.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="5.6180%" y="485" width="0.1605%" height="15" fill="rgb(241,66,40)" fg:x="70" fg:w="2"/><text x="5.8680%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6180%" y="469" width="0.1605%" height="15" fill="rgb(249,184,29)" fg:x="70" fg:w="2"/><text x="5.8680%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6180%" y="453" width="0.1605%" height="15" fill="rgb(231,181,1)" fg:x="70" fg:w="2"/><text x="5.8680%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6180%" y="437" width="0.1605%" height="15" fill="rgb(224,94,2)" fg:x="70" fg:w="2"/><text x="5.8680%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6180%" y="421" width="0.1605%" height="15" fill="rgb(229,170,15)" fg:x="70" fg:w="2"/><text x="5.8680%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="5.6180%" y="405" width="0.1605%" height="15" fill="rgb(240,127,35)" fg:x="70" fg:w="2"/><text x="5.8680%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.6180%" y="389" width="0.1605%" height="15" fill="rgb(248,196,34)" fg:x="70" fg:w="2"/><text x="5.8680%" y="399.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.7785%" y="549" width="0.0803%" height="15" fill="rgb(236,137,7)" fg:x="72" fg:w="1"/><text x="6.0285%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.7785%" y="533" width="0.0803%" height="15" fill="rgb(235,127,16)" fg:x="72" fg:w="1"/><text x="6.0285%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.7785%" y="517" width="0.0803%" height="15" fill="rgb(250,192,54)" fg:x="72" fg:w="1"/><text x="6.0285%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.7785%" y="501" width="0.0803%" height="15" fill="rgb(218,98,20)" fg:x="72" fg:w="1"/><text x="6.0285%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.7785%" y="485" width="0.0803%" height="15" fill="rgb(230,176,47)" fg:x="72" fg:w="1"/><text x="6.0285%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7785%" y="469" width="0.0803%" height="15" fill="rgb(244,2,33)" fg:x="72" fg:w="1"/><text x="6.0285%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7785%" y="453" width="0.0803%" height="15" fill="rgb(231,100,17)" fg:x="72" fg:w="1"/><text x="6.0285%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7785%" y="437" width="0.0803%" height="15" fill="rgb(245,23,12)" fg:x="72" fg:w="1"/><text x="6.0285%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7785%" y="421" width="0.0803%" height="15" fill="rgb(249,55,22)" fg:x="72" fg:w="1"/><text x="6.0285%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.7785%" y="405" width="0.0803%" height="15" fill="rgb(207,134,9)" fg:x="72" fg:w="1"/><text x="6.0285%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7785%" y="389" width="0.0803%" height="15" fill="rgb(218,134,0)" fg:x="72" fg:w="1"/><text x="6.0285%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7785%" y="373" width="0.0803%" height="15" fill="rgb(213,212,33)" fg:x="72" fg:w="1"/><text x="6.0285%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7785%" y="357" width="0.0803%" height="15" fill="rgb(252,106,18)" fg:x="72" fg:w="1"/><text x="6.0285%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7785%" y="341" width="0.0803%" height="15" fill="rgb(208,126,42)" fg:x="72" fg:w="1"/><text x="6.0285%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7785%" y="325" width="0.0803%" height="15" fill="rgb(246,175,29)" fg:x="72" fg:w="1"/><text x="6.0285%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.7785%" y="309" width="0.0803%" height="15" fill="rgb(215,13,50)" fg:x="72" fg:w="1"/><text x="6.0285%" y="319.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.8587%" y="549" width="0.0803%" height="15" fill="rgb(216,172,15)" fg:x="73" fg:w="1"/><text x="6.1087%" y="559.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8587%" y="533" width="0.0803%" height="15" fill="rgb(212,103,13)" fg:x="73" fg:w="1"/><text x="6.1087%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.8587%" y="517" width="0.0803%" height="15" fill="rgb(231,171,36)" fg:x="73" fg:w="1"/><text x="6.1087%" y="527.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="5.8587%" y="501" width="0.0803%" height="15" fill="rgb(250,123,20)" fg:x="73" fg:w="1"/><text x="6.1087%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.8587%" y="485" width="0.0803%" height="15" fill="rgb(212,53,50)" fg:x="73" fg:w="1"/><text x="6.1087%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.64%)</title><rect x="5.3772%" y="581" width="0.6421%" height="15" fill="rgb(243,54,12)" fg:x="67" fg:w="8"/><text x="5.6272%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="5.7785%" y="565" width="0.2408%" height="15" fill="rgb(234,101,34)" fg:x="72" fg:w="3"/><text x="6.0285%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="5.9390%" y="549" width="0.0803%" height="15" fill="rgb(254,67,22)" fg:x="74" fg:w="1"/><text x="6.1890%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="5.9390%" y="533" width="0.0803%" height="15" fill="rgb(250,35,47)" fg:x="74" fg:w="1"/><text x="6.1890%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.9390%" y="517" width="0.0803%" height="15" fill="rgb(226,126,38)" fg:x="74" fg:w="1"/><text x="6.1890%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="6.0193%" y="581" width="0.0803%" height="15" fill="rgb(216,138,53)" fg:x="75" fg:w="1"/><text x="6.2693%" y="591.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="6.0995%" y="549" width="0.0803%" height="15" fill="rgb(246,199,43)" fg:x="76" fg:w="1"/><text x="6.3495%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0995%" y="533" width="0.0803%" height="15" fill="rgb(232,125,11)" fg:x="76" fg:w="1"/><text x="6.3495%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.0995%" y="517" width="0.0803%" height="15" fill="rgb(218,219,45)" fg:x="76" fg:w="1"/><text x="6.3495%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="6.0995%" y="581" width="0.1605%" height="15" fill="rgb(216,102,54)" fg:x="76" fg:w="2"/><text x="6.3495%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="6.0995%" y="565" width="0.1605%" height="15" fill="rgb(250,228,7)" fg:x="76" fg:w="2"/><text x="6.3495%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.1798%" y="549" width="0.0803%" height="15" fill="rgb(226,125,25)" fg:x="77" fg:w="1"/><text x="6.4298%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.1798%" y="533" width="0.0803%" height="15" fill="rgb(224,165,27)" fg:x="77" fg:w="1"/><text x="6.4298%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1798%" y="517" width="0.0803%" height="15" fill="rgb(233,86,3)" fg:x="77" fg:w="1"/><text x="6.4298%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1798%" y="501" width="0.0803%" height="15" fill="rgb(228,116,20)" fg:x="77" fg:w="1"/><text x="6.4298%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1798%" y="485" width="0.0803%" height="15" fill="rgb(209,192,17)" fg:x="77" fg:w="1"/><text x="6.4298%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1798%" y="469" width="0.0803%" height="15" fill="rgb(224,88,34)" fg:x="77" fg:w="1"/><text x="6.4298%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.1798%" y="453" width="0.0803%" height="15" fill="rgb(233,38,6)" fg:x="77" fg:w="1"/><text x="6.4298%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1798%" y="437" width="0.0803%" height="15" fill="rgb(212,59,30)" fg:x="77" fg:w="1"/><text x="6.4298%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.1798%" y="421" width="0.0803%" height="15" fill="rgb(213,80,3)" fg:x="77" fg:w="1"/><text x="6.4298%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1798%" y="405" width="0.0803%" height="15" fill="rgb(251,178,7)" fg:x="77" fg:w="1"/><text x="6.4298%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.2600%" y="565" width="0.0803%" height="15" fill="rgb(213,154,26)" fg:x="78" fg:w="1"/><text x="6.5100%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.2600%" y="549" width="0.0803%" height="15" fill="rgb(238,165,49)" fg:x="78" fg:w="1"/><text x="6.5100%" y="559.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.2600%" y="533" width="0.0803%" height="15" fill="rgb(248,91,46)" fg:x="78" fg:w="1"/><text x="6.5100%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.2600%" y="517" width="0.0803%" height="15" fill="rgb(244,21,52)" fg:x="78" fg:w="1"/><text x="6.5100%" y="527.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.2600%" y="501" width="0.0803%" height="15" fill="rgb(247,122,20)" fg:x="78" fg:w="1"/><text x="6.5100%" y="511.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.2600%" y="485" width="0.0803%" height="15" fill="rgb(218,27,9)" fg:x="78" fg:w="1"/><text x="6.5100%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2600%" y="469" width="0.0803%" height="15" fill="rgb(246,7,6)" fg:x="78" fg:w="1"/><text x="6.5100%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.2600%" y="453" width="0.0803%" height="15" fill="rgb(227,135,54)" fg:x="78" fg:w="1"/><text x="6.5100%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2600%" y="437" width="0.0803%" height="15" fill="rgb(247,14,11)" fg:x="78" fg:w="1"/><text x="6.5100%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3403%" y="421" width="0.0803%" height="15" fill="rgb(206,149,34)" fg:x="79" fg:w="1"/><text x="6.5903%" y="431.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.3403%" y="549" width="0.1605%" height="15" fill="rgb(227,228,4)" fg:x="79" fg:w="2"/><text x="6.5903%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.3403%" y="533" width="0.1605%" height="15" fill="rgb(238,218,28)" fg:x="79" fg:w="2"/><text x="6.5903%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.3403%" y="517" width="0.1605%" height="15" fill="rgb(252,86,40)" fg:x="79" fg:w="2"/><text x="6.5903%" y="527.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.3403%" y="501" width="0.1605%" height="15" fill="rgb(251,225,11)" fg:x="79" fg:w="2"/><text x="6.5903%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.3403%" y="485" width="0.1605%" height="15" fill="rgb(206,46,49)" fg:x="79" fg:w="2"/><text x="6.5903%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.3403%" y="469" width="0.1605%" height="15" fill="rgb(245,128,24)" fg:x="79" fg:w="2"/><text x="6.5903%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.3403%" y="453" width="0.1605%" height="15" fill="rgb(219,177,34)" fg:x="79" fg:w="2"/><text x="6.5903%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.3403%" y="437" width="0.1605%" height="15" fill="rgb(218,60,48)" fg:x="79" fg:w="2"/><text x="6.5903%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4205%" y="421" width="0.0803%" height="15" fill="rgb(221,11,5)" fg:x="80" fg:w="1"/><text x="6.6705%" y="431.50"></text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.48%)</title><rect x="6.2600%" y="581" width="0.4815%" height="15" fill="rgb(220,148,13)" fg:x="78" fg:w="6"/><text x="6.5100%" y="591.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="6.3403%" y="565" width="0.4013%" height="15" fill="rgb(210,16,3)" fg:x="79" fg:w="5"/><text x="6.5903%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="6.5008%" y="549" width="0.2408%" height="15" fill="rgb(236,80,2)" fg:x="81" fg:w="3"/><text x="6.7508%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="6.5008%" y="533" width="0.2408%" height="15" fill="rgb(239,129,19)" fg:x="81" fg:w="3"/><text x="6.7508%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.5811%" y="517" width="0.1605%" height="15" fill="rgb(220,106,35)" fg:x="82" fg:w="2"/><text x="6.8311%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.6613%" y="501" width="0.0803%" height="15" fill="rgb(252,139,45)" fg:x="83" fg:w="1"/><text x="6.9113%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6613%" y="485" width="0.0803%" height="15" fill="rgb(229,8,36)" fg:x="83" fg:w="1"/><text x="6.9113%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.6613%" y="469" width="0.0803%" height="15" fill="rgb(230,126,33)" fg:x="83" fg:w="1"/><text x="6.9113%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.7416%" y="517" width="0.0803%" height="15" fill="rgb(239,140,21)" fg:x="84" fg:w="1"/><text x="6.9916%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7416%" y="501" width="0.0803%" height="15" fill="rgb(254,104,9)" fg:x="84" fg:w="1"/><text x="6.9916%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7416%" y="485" width="0.0803%" height="15" fill="rgb(239,52,14)" fg:x="84" fg:w="1"/><text x="6.9916%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7416%" y="469" width="0.0803%" height="15" fill="rgb(208,227,44)" fg:x="84" fg:w="1"/><text x="6.9916%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7416%" y="453" width="0.0803%" height="15" fill="rgb(246,18,19)" fg:x="84" fg:w="1"/><text x="6.9916%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7416%" y="437" width="0.0803%" height="15" fill="rgb(235,228,25)" fg:x="84" fg:w="1"/><text x="6.9916%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7416%" y="421" width="0.0803%" height="15" fill="rgb(240,156,20)" fg:x="84" fg:w="1"/><text x="6.9916%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8218%" y="453" width="0.0803%" height="15" fill="rgb(224,8,20)" fg:x="85" fg:w="1"/><text x="7.0718%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8218%" y="437" width="0.0803%" height="15" fill="rgb(214,12,52)" fg:x="85" fg:w="1"/><text x="7.0718%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8218%" y="421" width="0.0803%" height="15" fill="rgb(211,220,47)" fg:x="85" fg:w="1"/><text x="7.0718%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8218%" y="405" width="0.0803%" height="15" fill="rgb(250,173,5)" fg:x="85" fg:w="1"/><text x="7.0718%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.8218%" y="469" width="0.1605%" height="15" fill="rgb(250,125,52)" fg:x="85" fg:w="2"/><text x="7.0718%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9021%" y="453" width="0.0803%" height="15" fill="rgb(209,133,18)" fg:x="86" fg:w="1"/><text x="7.1521%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="6.7416%" y="565" width="0.3210%" height="15" fill="rgb(216,173,22)" fg:x="84" fg:w="4"/><text x="6.9916%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="6.7416%" y="549" width="0.3210%" height="15" fill="rgb(205,3,22)" fg:x="84" fg:w="4"/><text x="6.9916%" y="559.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="6.7416%" y="533" width="0.3210%" height="15" fill="rgb(248,22,20)" fg:x="84" fg:w="4"/><text x="6.9916%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="6.8218%" y="517" width="0.2408%" height="15" fill="rgb(233,6,29)" fg:x="85" fg:w="3"/><text x="7.0718%" y="527.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="6.8218%" y="501" width="0.2408%" height="15" fill="rgb(240,22,54)" fg:x="85" fg:w="3"/><text x="7.0718%" y="511.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="6.8218%" y="485" width="0.2408%" height="15" fill="rgb(231,133,32)" fg:x="85" fg:w="3"/><text x="7.0718%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="6.9823%" y="469" width="0.0803%" height="15" fill="rgb(248,193,4)" fg:x="87" fg:w="1"/><text x="7.2323%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.9823%" y="453" width="0.0803%" height="15" fill="rgb(211,178,46)" fg:x="87" fg:w="1"/><text x="7.2323%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9823%" y="437" width="0.0803%" height="15" fill="rgb(224,5,42)" fg:x="87" fg:w="1"/><text x="7.2323%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9823%" y="421" width="0.0803%" height="15" fill="rgb(239,176,25)" fg:x="87" fg:w="1"/><text x="7.2323%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (40 samples, 3.21%)</title><rect x="3.9326%" y="597" width="3.2103%" height="15" fill="rgb(245,187,50)" fg:x="49" fg:w="40"/><text x="4.1826%" y="607.50">plu..</text></g><g><title>plugins_core::build::Build::with_username (5 samples, 0.40%)</title><rect x="6.7416%" y="581" width="0.4013%" height="15" fill="rgb(248,24,15)" fg:x="84" fg:w="5"/><text x="6.9916%" y="591.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="7.0626%" y="565" width="0.0803%" height="15" fill="rgb(205,166,13)" fg:x="88" fg:w="1"/><text x="7.3126%" y="575.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="7.0626%" y="549" width="0.0803%" height="15" fill="rgb(208,114,23)" fg:x="88" fg:w="1"/><text x="7.3126%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0626%" y="533" width="0.0803%" height="15" fill="rgb(239,127,18)" fg:x="88" fg:w="1"/><text x="7.3126%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.0626%" y="517" width="0.0803%" height="15" fill="rgb(219,154,28)" fg:x="88" fg:w="1"/><text x="7.3126%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (67 samples, 5.38%)</title><rect x="1.8459%" y="613" width="5.3772%" height="15" fill="rgb(225,157,23)" fg:x="23" fg:w="67"/><text x="2.0959%" y="623.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="7.1429%" y="597" width="0.0803%" height="15" fill="rgb(219,8,6)" fg:x="89" fg:w="1"/><text x="7.3929%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="7.1429%" y="581" width="0.0803%" height="15" fill="rgb(212,47,6)" fg:x="89" fg:w="1"/><text x="7.3929%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.1429%" y="565" width="0.0803%" height="15" fill="rgb(224,190,4)" fg:x="89" fg:w="1"/><text x="7.3929%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.1429%" y="549" width="0.0803%" height="15" fill="rgb(239,183,29)" fg:x="89" fg:w="1"/><text x="7.3929%" y="559.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.1429%" y="533" width="0.0803%" height="15" fill="rgb(213,57,7)" fg:x="89" fg:w="1"/><text x="7.3929%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.1429%" y="517" width="0.0803%" height="15" fill="rgb(216,148,1)" fg:x="89" fg:w="1"/><text x="7.3929%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.1429%" y="501" width="0.0803%" height="15" fill="rgb(236,182,29)" fg:x="89" fg:w="1"/><text x="7.3929%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.1429%" y="485" width="0.0803%" height="15" fill="rgb(244,120,48)" fg:x="89" fg:w="1"/><text x="7.3929%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1429%" y="469" width="0.0803%" height="15" fill="rgb(206,71,34)" fg:x="89" fg:w="1"/><text x="7.3929%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1429%" y="453" width="0.0803%" height="15" fill="rgb(242,32,6)" fg:x="89" fg:w="1"/><text x="7.3929%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1429%" y="437" width="0.0803%" height="15" fill="rgb(241,35,3)" fg:x="89" fg:w="1"/><text x="7.3929%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1429%" y="421" width="0.0803%" height="15" fill="rgb(222,62,19)" fg:x="89" fg:w="1"/><text x="7.3929%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.1429%" y="405" width="0.0803%" height="15" fill="rgb(223,110,41)" fg:x="89" fg:w="1"/><text x="7.3929%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1429%" y="389" width="0.0803%" height="15" fill="rgb(208,224,4)" fg:x="89" fg:w="1"/><text x="7.3929%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1429%" y="373" width="0.0803%" height="15" fill="rgb(241,137,19)" fg:x="89" fg:w="1"/><text x="7.3929%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1429%" y="357" width="0.0803%" height="15" fill="rgb(244,24,17)" fg:x="89" fg:w="1"/><text x="7.3929%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="7.2231%" y="597" width="0.1605%" height="15" fill="rgb(245,178,49)" fg:x="90" fg:w="2"/><text x="7.4731%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="7.2231%" y="581" width="0.1605%" height="15" fill="rgb(219,160,38)" fg:x="90" fg:w="2"/><text x="7.4731%" y="591.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="7.2231%" y="565" width="0.1605%" height="15" fill="rgb(228,137,14)" fg:x="90" fg:w="2"/><text x="7.4731%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="7.2231%" y="549" width="0.1605%" height="15" fill="rgb(237,134,11)" fg:x="90" fg:w="2"/><text x="7.4731%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="7.2231%" y="533" width="0.1605%" height="15" fill="rgb(211,126,44)" fg:x="90" fg:w="2"/><text x="7.4731%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="7.2231%" y="517" width="0.1605%" height="15" fill="rgb(226,171,33)" fg:x="90" fg:w="2"/><text x="7.4731%" y="527.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="7.3034%" y="501" width="0.0803%" height="15" fill="rgb(253,99,13)" fg:x="91" fg:w="1"/><text x="7.5534%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.3836%" y="437" width="0.0803%" height="15" fill="rgb(244,48,7)" fg:x="92" fg:w="1"/><text x="7.6336%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.3836%" y="421" width="0.0803%" height="15" fill="rgb(244,217,54)" fg:x="92" fg:w="1"/><text x="7.6336%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.3836%" y="405" width="0.0803%" height="15" fill="rgb(224,15,18)" fg:x="92" fg:w="1"/><text x="7.6336%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.3836%" y="389" width="0.0803%" height="15" fill="rgb(244,99,12)" fg:x="92" fg:w="1"/><text x="7.6336%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.3836%" y="373" width="0.0803%" height="15" fill="rgb(233,226,8)" fg:x="92" fg:w="1"/><text x="7.6336%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.3836%" y="357" width="0.0803%" height="15" fill="rgb(229,211,3)" fg:x="92" fg:w="1"/><text x="7.6336%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.3836%" y="341" width="0.0803%" height="15" fill="rgb(216,140,21)" fg:x="92" fg:w="1"/><text x="7.6336%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="7.3836%" y="581" width="0.1605%" height="15" fill="rgb(234,122,30)" fg:x="92" fg:w="2"/><text x="7.6336%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="7.3836%" y="565" width="0.1605%" height="15" fill="rgb(236,25,46)" fg:x="92" fg:w="2"/><text x="7.6336%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="7.3836%" y="549" width="0.1605%" height="15" fill="rgb(217,52,54)" fg:x="92" fg:w="2"/><text x="7.6336%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="7.3836%" y="533" width="0.1605%" height="15" fill="rgb(222,29,26)" fg:x="92" fg:w="2"/><text x="7.6336%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="7.3836%" y="517" width="0.1605%" height="15" fill="rgb(216,177,29)" fg:x="92" fg:w="2"/><text x="7.6336%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="7.3836%" y="501" width="0.1605%" height="15" fill="rgb(247,136,51)" fg:x="92" fg:w="2"/><text x="7.6336%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="7.3836%" y="485" width="0.1605%" height="15" fill="rgb(231,47,47)" fg:x="92" fg:w="2"/><text x="7.6336%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="7.3836%" y="469" width="0.1605%" height="15" fill="rgb(211,192,36)" fg:x="92" fg:w="2"/><text x="7.6336%" y="479.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="7.3836%" y="453" width="0.1605%" height="15" fill="rgb(229,156,32)" fg:x="92" fg:w="2"/><text x="7.6336%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.4639%" y="437" width="0.0803%" height="15" fill="rgb(248,213,20)" fg:x="93" fg:w="1"/><text x="7.7139%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4639%" y="421" width="0.0803%" height="15" fill="rgb(217,64,7)" fg:x="93" fg:w="1"/><text x="7.7139%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4639%" y="405" width="0.0803%" height="15" fill="rgb(232,142,8)" fg:x="93" fg:w="1"/><text x="7.7139%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.4639%" y="389" width="0.0803%" height="15" fill="rgb(224,92,44)" fg:x="93" fg:w="1"/><text x="7.7139%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.4639%" y="373" width="0.0803%" height="15" fill="rgb(214,169,17)" fg:x="93" fg:w="1"/><text x="7.7139%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.4639%" y="357" width="0.0803%" height="15" fill="rgb(210,59,37)" fg:x="93" fg:w="1"/><text x="7.7139%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.4639%" y="341" width="0.0803%" height="15" fill="rgb(214,116,48)" fg:x="93" fg:w="1"/><text x="7.7139%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.4639%" y="325" width="0.0803%" height="15" fill="rgb(244,191,6)" fg:x="93" fg:w="1"/><text x="7.7139%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.4639%" y="309" width="0.0803%" height="15" fill="rgb(241,50,52)" fg:x="93" fg:w="1"/><text x="7.7139%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.4639%" y="293" width="0.0803%" height="15" fill="rgb(236,75,39)" fg:x="93" fg:w="1"/><text x="7.7139%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="7.4639%" y="277" width="0.0803%" height="15" fill="rgb(236,99,0)" fg:x="93" fg:w="1"/><text x="7.7139%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.4639%" y="261" width="0.0803%" height="15" fill="rgb(207,202,15)" fg:x="93" fg:w="1"/><text x="7.7139%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="7.4639%" y="245" width="0.0803%" height="15" fill="rgb(233,207,14)" fg:x="93" fg:w="1"/><text x="7.7139%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="7.4639%" y="229" width="0.0803%" height="15" fill="rgb(226,27,51)" fg:x="93" fg:w="1"/><text x="7.7139%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="7.4639%" y="213" width="0.0803%" height="15" fill="rgb(206,104,42)" fg:x="93" fg:w="1"/><text x="7.7139%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.4639%" y="197" width="0.0803%" height="15" fill="rgb(212,225,4)" fg:x="93" fg:w="1"/><text x="7.7139%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5441%" y="581" width="0.0803%" height="15" fill="rgb(233,96,42)" fg:x="94" fg:w="1"/><text x="7.7941%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="7.6244%" y="549" width="0.0803%" height="15" fill="rgb(229,21,32)" fg:x="95" fg:w="1"/><text x="7.8744%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.6244%" y="581" width="0.1605%" height="15" fill="rgb(226,216,24)" fg:x="95" fg:w="2"/><text x="7.8744%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="7.6244%" y="565" width="0.1605%" height="15" fill="rgb(221,163,17)" fg:x="95" fg:w="2"/><text x="7.8744%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.7047%" y="549" width="0.0803%" height="15" fill="rgb(216,216,42)" fg:x="96" fg:w="1"/><text x="7.9547%" y="559.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="7.7849%" y="581" width="0.0803%" height="15" fill="rgb(240,118,7)" fg:x="97" fg:w="1"/><text x="8.0349%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="7.7849%" y="565" width="0.0803%" height="15" fill="rgb(221,67,37)" fg:x="97" fg:w="1"/><text x="8.0349%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.7849%" y="549" width="0.0803%" height="15" fill="rgb(241,32,44)" fg:x="97" fg:w="1"/><text x="8.0349%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="7.8652%" y="533" width="0.2408%" height="15" fill="rgb(235,204,43)" fg:x="98" fg:w="3"/><text x="8.1152%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="7.8652%" y="517" width="0.2408%" height="15" fill="rgb(213,116,10)" fg:x="98" fg:w="3"/><text x="8.1152%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.9454%" y="501" width="0.1605%" height="15" fill="rgb(239,15,48)" fg:x="99" fg:w="2"/><text x="8.1954%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.9454%" y="485" width="0.1605%" height="15" fill="rgb(207,123,36)" fg:x="99" fg:w="2"/><text x="8.1954%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.9454%" y="469" width="0.1605%" height="15" fill="rgb(209,103,30)" fg:x="99" fg:w="2"/><text x="8.1954%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.0257%" y="453" width="0.0803%" height="15" fill="rgb(238,100,19)" fg:x="100" fg:w="1"/><text x="8.2757%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.1059%" y="517" width="0.0803%" height="15" fill="rgb(244,30,14)" fg:x="101" fg:w="1"/><text x="8.3559%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1059%" y="501" width="0.0803%" height="15" fill="rgb(249,174,6)" fg:x="101" fg:w="1"/><text x="8.3559%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1059%" y="485" width="0.0803%" height="15" fill="rgb(235,213,41)" fg:x="101" fg:w="1"/><text x="8.3559%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1059%" y="469" width="0.0803%" height="15" fill="rgb(213,118,6)" fg:x="101" fg:w="1"/><text x="8.3559%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.1862%" y="517" width="0.1605%" height="15" fill="rgb(235,44,51)" fg:x="102" fg:w="2"/><text x="8.4362%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.1862%" y="501" width="0.1605%" height="15" fill="rgb(217,9,53)" fg:x="102" fg:w="2"/><text x="8.4362%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.1862%" y="485" width="0.1605%" height="15" fill="rgb(237,172,34)" fg:x="102" fg:w="2"/><text x="8.4362%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2665%" y="469" width="0.0803%" height="15" fill="rgb(206,206,11)" fg:x="103" fg:w="1"/><text x="8.5165%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.2665%" y="453" width="0.0803%" height="15" fill="rgb(214,149,29)" fg:x="103" fg:w="1"/><text x="8.5165%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.2665%" y="437" width="0.0803%" height="15" fill="rgb(208,123,3)" fg:x="103" fg:w="1"/><text x="8.5165%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2665%" y="421" width="0.0803%" height="15" fill="rgb(229,126,4)" fg:x="103" fg:w="1"/><text x="8.5165%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.3467%" y="501" width="0.0803%" height="15" fill="rgb(222,92,36)" fg:x="104" fg:w="1"/><text x="8.5967%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.3467%" y="517" width="0.1605%" height="15" fill="rgb(216,39,41)" fg:x="104" fg:w="2"/><text x="8.5967%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4270%" y="501" width="0.0803%" height="15" fill="rgb(253,127,28)" fg:x="105" fg:w="1"/><text x="8.6770%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4270%" y="485" width="0.0803%" height="15" fill="rgb(249,152,51)" fg:x="105" fg:w="1"/><text x="8.6770%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4270%" y="469" width="0.0803%" height="15" fill="rgb(209,123,42)" fg:x="105" fg:w="1"/><text x="8.6770%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="7.8652%" y="549" width="0.7223%" height="15" fill="rgb(241,118,22)" fg:x="98" fg:w="9"/><text x="8.1152%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.1059%" y="533" width="0.4815%" height="15" fill="rgb(208,25,7)" fg:x="101" fg:w="6"/><text x="8.3559%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5072%" y="517" width="0.0803%" height="15" fill="rgb(243,144,39)" fg:x="106" fg:w="1"/><text x="8.7572%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5875%" y="517" width="0.0803%" height="15" fill="rgb(250,50,5)" fg:x="107" fg:w="1"/><text x="8.8375%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.5875%" y="549" width="0.1605%" height="15" fill="rgb(207,67,11)" fg:x="107" fg:w="2"/><text x="8.8375%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.5875%" y="533" width="0.1605%" height="15" fill="rgb(245,204,40)" fg:x="107" fg:w="2"/><text x="8.8375%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6677%" y="517" width="0.0803%" height="15" fill="rgb(238,228,24)" fg:x="108" fg:w="1"/><text x="8.9177%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.8283%" y="469" width="0.1605%" height="15" fill="rgb(217,116,22)" fg:x="110" fg:w="2"/><text x="9.0783%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9888%" y="469" width="0.0803%" height="15" fill="rgb(234,98,12)" fg:x="112" fg:w="1"/><text x="9.2388%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8283%" y="517" width="0.3210%" height="15" fill="rgb(242,170,50)" fg:x="110" fg:w="4"/><text x="9.0783%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="8.8283%" y="501" width="0.3210%" height="15" fill="rgb(235,7,5)" fg:x="110" fg:w="4"/><text x="9.0783%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8283%" y="485" width="0.3210%" height="15" fill="rgb(241,114,28)" fg:x="110" fg:w="4"/><text x="9.0783%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0690%" y="469" width="0.0803%" height="15" fill="rgb(246,112,42)" fg:x="113" fg:w="1"/><text x="9.3190%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0690%" y="453" width="0.0803%" height="15" fill="rgb(248,228,14)" fg:x="113" fg:w="1"/><text x="9.3190%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.1493%" y="501" width="0.1605%" height="15" fill="rgb(208,133,18)" fg:x="114" fg:w="2"/><text x="9.3993%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.2295%" y="485" width="0.0803%" height="15" fill="rgb(207,35,49)" fg:x="115" fg:w="1"/><text x="9.4795%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="8.7480%" y="533" width="0.6421%" height="15" fill="rgb(205,68,36)" fg:x="109" fg:w="8"/><text x="8.9980%" y="543.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="9.1493%" y="517" width="0.2408%" height="15" fill="rgb(245,62,40)" fg:x="114" fg:w="3"/><text x="9.3993%" y="527.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="9.3098%" y="501" width="0.0803%" height="15" fill="rgb(228,27,24)" fg:x="116" fg:w="1"/><text x="9.5598%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3900%" y="501" width="0.0803%" height="15" fill="rgb(253,19,12)" fg:x="117" fg:w="1"/><text x="9.6400%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4703%" y="501" width="0.0803%" height="15" fill="rgb(232,28,20)" fg:x="118" fg:w="1"/><text x="9.7203%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4703%" y="485" width="0.0803%" height="15" fill="rgb(218,35,51)" fg:x="118" fg:w="1"/><text x="9.7203%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4703%" y="469" width="0.0803%" height="15" fill="rgb(212,90,40)" fg:x="118" fg:w="1"/><text x="9.7203%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4703%" y="453" width="0.0803%" height="15" fill="rgb(220,172,12)" fg:x="118" fg:w="1"/><text x="9.7203%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4703%" y="437" width="0.0803%" height="15" fill="rgb(226,159,20)" fg:x="118" fg:w="1"/><text x="9.7203%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.6308%" y="469" width="0.0803%" height="15" fill="rgb(234,205,16)" fg:x="120" fg:w="1"/><text x="9.8808%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7111%" y="453" width="0.0803%" height="15" fill="rgb(207,9,39)" fg:x="121" fg:w="1"/><text x="9.9611%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7111%" y="437" width="0.0803%" height="15" fill="rgb(249,143,15)" fg:x="121" fg:w="1"/><text x="9.9611%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7111%" y="421" width="0.0803%" height="15" fill="rgb(253,133,29)" fg:x="121" fg:w="1"/><text x="9.9611%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7913%" y="421" width="0.0803%" height="15" fill="rgb(221,187,0)" fg:x="122" fg:w="1"/><text x="10.0413%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7913%" y="405" width="0.0803%" height="15" fill="rgb(205,204,26)" fg:x="122" fg:w="1"/><text x="10.0413%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7913%" y="389" width="0.0803%" height="15" fill="rgb(224,68,54)" fg:x="122" fg:w="1"/><text x="10.0413%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.8716%" y="405" width="0.0803%" height="15" fill="rgb(209,67,4)" fg:x="123" fg:w="1"/><text x="10.1216%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0321%" y="357" width="0.0803%" height="15" fill="rgb(228,229,18)" fg:x="125" fg:w="1"/><text x="10.2821%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0321%" y="341" width="0.0803%" height="15" fill="rgb(231,89,13)" fg:x="125" fg:w="1"/><text x="10.2821%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="9.7111%" y="469" width="0.5618%" height="15" fill="rgb(210,182,18)" fg:x="121" fg:w="7"/><text x="9.9611%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="9.7913%" y="453" width="0.4815%" height="15" fill="rgb(240,105,2)" fg:x="122" fg:w="6"/><text x="10.0413%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="9.7913%" y="437" width="0.4815%" height="15" fill="rgb(207,170,50)" fg:x="122" fg:w="6"/><text x="10.0413%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="9.8716%" y="421" width="0.4013%" height="15" fill="rgb(232,133,24)" fg:x="123" fg:w="5"/><text x="10.1216%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="9.9518%" y="405" width="0.3210%" height="15" fill="rgb(235,166,27)" fg:x="124" fg:w="4"/><text x="10.2018%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="9.9518%" y="389" width="0.3210%" height="15" fill="rgb(209,19,13)" fg:x="124" fg:w="4"/><text x="10.2018%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="9.9518%" y="373" width="0.3210%" height="15" fill="rgb(226,79,39)" fg:x="124" fg:w="4"/><text x="10.2018%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.1124%" y="357" width="0.1605%" height="15" fill="rgb(222,163,10)" fg:x="126" fg:w="2"/><text x="10.3624%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.1926%" y="341" width="0.0803%" height="15" fill="rgb(214,44,19)" fg:x="127" fg:w="1"/><text x="10.4426%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1926%" y="325" width="0.0803%" height="15" fill="rgb(210,217,13)" fg:x="127" fg:w="1"/><text x="10.4426%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1926%" y="309" width="0.0803%" height="15" fill="rgb(237,61,54)" fg:x="127" fg:w="1"/><text x="10.4426%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1926%" y="293" width="0.0803%" height="15" fill="rgb(226,184,24)" fg:x="127" fg:w="1"/><text x="10.4426%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.80%)</title><rect x="9.5506%" y="485" width="0.8026%" height="15" fill="rgb(223,226,4)" fg:x="119" fg:w="10"/><text x="9.8006%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.2729%" y="469" width="0.0803%" height="15" fill="rgb(210,26,41)" fg:x="128" fg:w="1"/><text x="10.5229%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2729%" y="453" width="0.0803%" height="15" fill="rgb(220,221,6)" fg:x="128" fg:w="1"/><text x="10.5229%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="9.3900%" y="533" width="1.0433%" height="15" fill="rgb(225,89,49)" fg:x="117" fg:w="13"/><text x="9.6400%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="9.3900%" y="517" width="1.0433%" height="15" fill="rgb(218,70,45)" fg:x="117" fg:w="13"/><text x="9.6400%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.88%)</title><rect x="9.5506%" y="501" width="0.8828%" height="15" fill="rgb(238,166,21)" fg:x="119" fg:w="11"/><text x="9.8006%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3531%" y="485" width="0.0803%" height="15" fill="rgb(224,141,44)" fg:x="129" fg:w="1"/><text x="10.6031%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3531%" y="469" width="0.0803%" height="15" fill="rgb(230,12,49)" fg:x="129" fg:w="1"/><text x="10.6031%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3531%" y="453" width="0.0803%" height="15" fill="rgb(212,174,12)" fg:x="129" fg:w="1"/><text x="10.6031%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.4334%" y="309" width="0.2408%" height="15" fill="rgb(246,67,9)" fg:x="130" fg:w="3"/><text x="10.6834%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.5939%" y="293" width="0.0803%" height="15" fill="rgb(239,35,23)" fg:x="132" fg:w="1"/><text x="10.8439%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.5939%" y="277" width="0.0803%" height="15" fill="rgb(211,167,0)" fg:x="132" fg:w="1"/><text x="10.8439%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.4334%" y="405" width="0.3210%" height="15" fill="rgb(225,119,45)" fg:x="130" fg:w="4"/><text x="10.6834%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.4334%" y="389" width="0.3210%" height="15" fill="rgb(210,162,6)" fg:x="130" fg:w="4"/><text x="10.6834%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.4334%" y="373" width="0.3210%" height="15" fill="rgb(208,118,35)" fg:x="130" fg:w="4"/><text x="10.6834%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.4334%" y="357" width="0.3210%" height="15" fill="rgb(239,4,53)" fg:x="130" fg:w="4"/><text x="10.6834%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.4334%" y="341" width="0.3210%" height="15" fill="rgb(213,130,21)" fg:x="130" fg:w="4"/><text x="10.6834%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.4334%" y="325" width="0.3210%" height="15" fill="rgb(235,148,0)" fg:x="130" fg:w="4"/><text x="10.6834%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.6742%" y="309" width="0.0803%" height="15" fill="rgb(244,224,18)" fg:x="133" fg:w="1"/><text x="10.9242%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.6742%" y="293" width="0.0803%" height="15" fill="rgb(211,214,4)" fg:x="133" fg:w="1"/><text x="10.9242%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="10.4334%" y="437" width="0.4013%" height="15" fill="rgb(206,119,25)" fg:x="130" fg:w="5"/><text x="10.6834%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="10.4334%" y="421" width="0.4013%" height="15" fill="rgb(243,93,47)" fg:x="130" fg:w="5"/><text x="10.6834%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.7544%" y="405" width="0.0803%" height="15" fill="rgb(224,194,6)" fg:x="134" fg:w="1"/><text x="11.0044%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.7544%" y="389" width="0.0803%" height="15" fill="rgb(243,229,6)" fg:x="134" fg:w="1"/><text x="11.0044%" y="399.50"></text></g><g><title>engine::session::Session::close (46 samples, 3.69%)</title><rect x="7.2231%" y="613" width="3.6918%" height="15" fill="rgb(207,23,50)" fg:x="90" fg:w="46"/><text x="7.4731%" y="623.50">engi..</text></g><g><title>engine::session::Session::save_entity_changes (44 samples, 3.53%)</title><rect x="7.3836%" y="597" width="3.5313%" height="15" fill="rgb(253,192,32)" fg:x="92" fg:w="44"/><text x="7.6336%" y="607.50">eng..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (38 samples, 3.05%)</title><rect x="7.8652%" y="581" width="3.0498%" height="15" fill="rgb(213,21,6)" fg:x="98" fg:w="38"/><text x="8.1152%" y="591.50">eng..</text></g><g><title>engine::session::SavesEntities::check_for_changes (38 samples, 3.05%)</title><rect x="7.8652%" y="565" width="3.0498%" height="15" fill="rgb(243,151,13)" fg:x="98" fg:w="38"/><text x="8.1152%" y="575.50">eng..</text></g><g><title>kernel::model::any_entity_changes (27 samples, 2.17%)</title><rect x="8.7480%" y="549" width="2.1669%" height="15" fill="rgb(233,165,41)" fg:x="109" fg:w="27"/><text x="8.9980%" y="559.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="10.4334%" y="533" width="0.4815%" height="15" fill="rgb(246,176,45)" fg:x="130" fg:w="6"/><text x="10.6834%" y="543.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="10.4334%" y="517" width="0.4815%" height="15" fill="rgb(217,170,52)" fg:x="130" fg:w="6"/><text x="10.6834%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="10.4334%" y="501" width="0.4815%" height="15" fill="rgb(214,203,54)" fg:x="130" fg:w="6"/><text x="10.6834%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="10.4334%" y="485" width="0.4815%" height="15" fill="rgb(248,215,49)" fg:x="130" fg:w="6"/><text x="10.6834%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="10.4334%" y="469" width="0.4815%" height="15" fill="rgb(208,46,10)" fg:x="130" fg:w="6"/><text x="10.6834%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="10.4334%" y="453" width="0.4815%" height="15" fill="rgb(254,5,31)" fg:x="130" fg:w="6"/><text x="10.6834%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8347%" y="437" width="0.0803%" height="15" fill="rgb(222,104,33)" fg:x="135" fg:w="1"/><text x="11.0847%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8347%" y="421" width="0.0803%" height="15" fill="rgb(248,49,16)" fg:x="135" fg:w="1"/><text x="11.0847%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8347%" y="405" width="0.0803%" height="15" fill="rgb(232,198,41)" fg:x="135" fg:w="1"/><text x="11.0847%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="11.0754%" y="469" width="0.0803%" height="15" fill="rgb(214,125,3)" fg:x="138" fg:w="1"/><text x="11.3254%" y="479.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="11.0754%" y="453" width="0.0803%" height="15" fill="rgb(229,220,28)" fg:x="138" fg:w="1"/><text x="11.3254%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.0754%" y="437" width="0.0803%" height="15" fill="rgb(222,64,37)" fg:x="138" fg:w="1"/><text x="11.3254%" y="447.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.0754%" y="421" width="0.0803%" height="15" fill="rgb(249,184,13)" fg:x="138" fg:w="1"/><text x="11.3254%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.0754%" y="405" width="0.0803%" height="15" fill="rgb(252,176,6)" fg:x="138" fg:w="1"/><text x="11.3254%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0754%" y="389" width="0.0803%" height="15" fill="rgb(228,153,7)" fg:x="138" fg:w="1"/><text x="11.3254%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0754%" y="373" width="0.0803%" height="15" fill="rgb(242,193,5)" fg:x="138" fg:w="1"/><text x="11.3254%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0754%" y="357" width="0.0803%" height="15" fill="rgb(232,140,9)" fg:x="138" fg:w="1"/><text x="11.3254%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0754%" y="341" width="0.0803%" height="15" fill="rgb(213,222,16)" fg:x="138" fg:w="1"/><text x="11.3254%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.0754%" y="325" width="0.0803%" height="15" fill="rgb(222,75,50)" fg:x="138" fg:w="1"/><text x="11.3254%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0754%" y="309" width="0.0803%" height="15" fill="rgb(205,180,2)" fg:x="138" fg:w="1"/><text x="11.3254%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="11.0754%" y="517" width="0.1605%" height="15" fill="rgb(216,34,7)" fg:x="138" fg:w="2"/><text x="11.3254%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="11.0754%" y="501" width="0.1605%" height="15" fill="rgb(253,16,32)" fg:x="138" fg:w="2"/><text x="11.3254%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="11.0754%" y="485" width="0.1605%" height="15" fill="rgb(208,97,28)" fg:x="138" fg:w="2"/><text x="11.3254%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="11.1557%" y="469" width="0.0803%" height="15" fill="rgb(225,92,11)" fg:x="139" fg:w="1"/><text x="11.4057%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.1557%" y="453" width="0.0803%" height="15" fill="rgb(243,38,12)" fg:x="139" fg:w="1"/><text x="11.4057%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1557%" y="437" width="0.0803%" height="15" fill="rgb(208,139,16)" fg:x="139" fg:w="1"/><text x="11.4057%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.1557%" y="421" width="0.0803%" height="15" fill="rgb(227,24,9)" fg:x="139" fg:w="1"/><text x="11.4057%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1557%" y="405" width="0.0803%" height="15" fill="rgb(206,62,11)" fg:x="139" fg:w="1"/><text x="11.4057%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.1557%" y="389" width="0.0803%" height="15" fill="rgb(228,134,27)" fg:x="139" fg:w="1"/><text x="11.4057%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.1557%" y="373" width="0.0803%" height="15" fill="rgb(205,55,33)" fg:x="139" fg:w="1"/><text x="11.4057%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.1557%" y="357" width="0.0803%" height="15" fill="rgb(243,75,43)" fg:x="139" fg:w="1"/><text x="11.4057%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="11.1557%" y="341" width="0.0803%" height="15" fill="rgb(223,27,42)" fg:x="139" fg:w="1"/><text x="11.4057%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.40%)</title><rect x="10.9149%" y="581" width="0.4013%" height="15" fill="rgb(232,189,33)" fg:x="136" fg:w="5"/><text x="11.1649%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (5 samples, 0.40%)</title><rect x="10.9149%" y="565" width="0.4013%" height="15" fill="rgb(210,9,39)" fg:x="136" fg:w="5"/><text x="11.1649%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="10.9149%" y="549" width="0.4013%" height="15" fill="rgb(242,85,26)" fg:x="136" fg:w="5"/><text x="11.1649%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="10.9952%" y="533" width="0.3210%" height="15" fill="rgb(248,44,4)" fg:x="137" fg:w="4"/><text x="11.2452%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.2360%" y="517" width="0.0803%" height="15" fill="rgb(250,96,46)" fg:x="140" fg:w="1"/><text x="11.4860%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2360%" y="501" width="0.0803%" height="15" fill="rgb(229,116,26)" fg:x="140" fg:w="1"/><text x="11.4860%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.2360%" y="485" width="0.0803%" height="15" fill="rgb(246,94,34)" fg:x="140" fg:w="1"/><text x="11.4860%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.2360%" y="469" width="0.0803%" height="15" fill="rgb(251,73,21)" fg:x="140" fg:w="1"/><text x="11.4860%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2360%" y="453" width="0.0803%" height="15" fill="rgb(254,121,25)" fg:x="140" fg:w="1"/><text x="11.4860%" y="463.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3162%" y="581" width="0.0803%" height="15" fill="rgb(215,161,49)" fg:x="141" fg:w="1"/><text x="11.5662%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3162%" y="565" width="0.0803%" height="15" fill="rgb(221,43,13)" fg:x="141" fg:w="1"/><text x="11.5662%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.4767%" y="549" width="0.0803%" height="15" fill="rgb(249,5,37)" fg:x="143" fg:w="1"/><text x="11.7267%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="11.5570%" y="485" width="0.1605%" height="15" fill="rgb(226,25,44)" fg:x="144" fg:w="2"/><text x="11.8070%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6372%" y="469" width="0.0803%" height="15" fill="rgb(238,189,16)" fg:x="145" fg:w="1"/><text x="11.8872%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (4 samples, 0.32%)</title><rect x="11.5570%" y="549" width="0.3210%" height="15" fill="rgb(251,186,8)" fg:x="144" fg:w="4"/><text x="11.8070%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="11.5570%" y="533" width="0.3210%" height="15" fill="rgb(254,34,31)" fg:x="144" fg:w="4"/><text x="11.8070%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="11.5570%" y="517" width="0.3210%" height="15" fill="rgb(225,215,27)" fg:x="144" fg:w="4"/><text x="11.8070%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="11.5570%" y="501" width="0.3210%" height="15" fill="rgb(221,192,48)" fg:x="144" fg:w="4"/><text x="11.8070%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.7175%" y="485" width="0.1605%" height="15" fill="rgb(219,137,20)" fg:x="146" fg:w="2"/><text x="11.9675%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.1188%" y="517" width="0.0803%" height="15" fill="rgb(219,84,11)" fg:x="151" fg:w="1"/><text x="12.3688%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1188%" y="501" width="0.0803%" height="15" fill="rgb(224,10,23)" fg:x="151" fg:w="1"/><text x="12.3688%" y="511.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="12.1990%" y="517" width="0.0803%" height="15" fill="rgb(248,22,39)" fg:x="152" fg:w="1"/><text x="12.4490%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.3596%" y="437" width="0.0803%" height="15" fill="rgb(212,154,20)" fg:x="154" fg:w="1"/><text x="12.6096%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="12.3596%" y="421" width="0.0803%" height="15" fill="rgb(236,199,50)" fg:x="154" fg:w="1"/><text x="12.6096%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="12.3596%" y="405" width="0.0803%" height="15" fill="rgb(211,9,17)" fg:x="154" fg:w="1"/><text x="12.6096%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="12.3596%" y="389" width="0.0803%" height="15" fill="rgb(243,216,36)" fg:x="154" fg:w="1"/><text x="12.6096%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.3596%" y="373" width="0.0803%" height="15" fill="rgb(250,2,10)" fg:x="154" fg:w="1"/><text x="12.6096%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="12.3596%" y="453" width="0.2408%" height="15" fill="rgb(226,50,48)" fg:x="154" fg:w="3"/><text x="12.6096%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="12.4398%" y="437" width="0.1605%" height="15" fill="rgb(243,81,16)" fg:x="155" fg:w="2"/><text x="12.6898%" y="447.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="12.4398%" y="421" width="0.1605%" height="15" fill="rgb(250,14,2)" fg:x="155" fg:w="2"/><text x="12.6898%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="12.4398%" y="405" width="0.1605%" height="15" fill="rgb(233,135,29)" fg:x="155" fg:w="2"/><text x="12.6898%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.5201%" y="389" width="0.0803%" height="15" fill="rgb(224,64,43)" fg:x="156" fg:w="1"/><text x="12.7701%" y="399.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.6003%" y="421" width="0.0803%" height="15" fill="rgb(238,84,13)" fg:x="157" fg:w="1"/><text x="12.8503%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.6003%" y="405" width="0.0803%" height="15" fill="rgb(253,48,26)" fg:x="157" fg:w="1"/><text x="12.8503%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.6003%" y="389" width="0.0803%" height="15" fill="rgb(205,223,31)" fg:x="157" fg:w="1"/><text x="12.8503%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.6806%" y="421" width="0.0803%" height="15" fill="rgb(221,41,32)" fg:x="158" fg:w="1"/><text x="12.9306%" y="431.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.56%)</title><rect x="12.2793%" y="469" width="0.5618%" height="15" fill="rgb(213,158,31)" fg:x="153" fg:w="7"/><text x="12.5293%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="12.6003%" y="453" width="0.2408%" height="15" fill="rgb(245,126,43)" fg:x="157" fg:w="3"/><text x="12.8503%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="12.6003%" y="437" width="0.2408%" height="15" fill="rgb(227,7,22)" fg:x="157" fg:w="3"/><text x="12.8503%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7608%" y="421" width="0.0803%" height="15" fill="rgb(252,90,44)" fg:x="159" fg:w="1"/><text x="13.0108%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7608%" y="405" width="0.0803%" height="15" fill="rgb(253,91,0)" fg:x="159" fg:w="1"/><text x="13.0108%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="12.7608%" y="389" width="0.0803%" height="15" fill="rgb(252,175,49)" fg:x="159" fg:w="1"/><text x="13.0108%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="12.7608%" y="373" width="0.0803%" height="15" fill="rgb(246,150,1)" fg:x="159" fg:w="1"/><text x="13.0108%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="12.7608%" y="357" width="0.0803%" height="15" fill="rgb(241,192,25)" fg:x="159" fg:w="1"/><text x="13.0108%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7608%" y="341" width="0.0803%" height="15" fill="rgb(239,187,11)" fg:x="159" fg:w="1"/><text x="13.0108%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7608%" y="325" width="0.0803%" height="15" fill="rgb(218,202,51)" fg:x="159" fg:w="1"/><text x="13.0108%" y="335.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8411%" y="421" width="0.0803%" height="15" fill="rgb(225,176,8)" fg:x="160" fg:w="1"/><text x="13.0911%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8411%" y="405" width="0.0803%" height="15" fill="rgb(219,122,41)" fg:x="160" fg:w="1"/><text x="13.0911%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8411%" y="389" width="0.0803%" height="15" fill="rgb(248,140,20)" fg:x="160" fg:w="1"/><text x="13.0911%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8411%" y="373" width="0.0803%" height="15" fill="rgb(245,41,37)" fg:x="160" fg:w="1"/><text x="13.0911%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8411%" y="357" width="0.0803%" height="15" fill="rgb(235,82,39)" fg:x="160" fg:w="1"/><text x="13.0911%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8411%" y="341" width="0.0803%" height="15" fill="rgb(230,108,42)" fg:x="160" fg:w="1"/><text x="13.0911%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8411%" y="325" width="0.0803%" height="15" fill="rgb(215,150,50)" fg:x="160" fg:w="1"/><text x="13.0911%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8411%" y="309" width="0.0803%" height="15" fill="rgb(233,212,5)" fg:x="160" fg:w="1"/><text x="13.0911%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8411%" y="293" width="0.0803%" height="15" fill="rgb(245,80,22)" fg:x="160" fg:w="1"/><text x="13.0911%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8411%" y="277" width="0.0803%" height="15" fill="rgb(238,129,16)" fg:x="160" fg:w="1"/><text x="13.0911%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8411%" y="261" width="0.0803%" height="15" fill="rgb(240,19,0)" fg:x="160" fg:w="1"/><text x="13.0911%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.8411%" y="245" width="0.0803%" height="15" fill="rgb(232,42,35)" fg:x="160" fg:w="1"/><text x="13.0911%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.8411%" y="229" width="0.0803%" height="15" fill="rgb(223,130,24)" fg:x="160" fg:w="1"/><text x="13.0911%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.8411%" y="213" width="0.0803%" height="15" fill="rgb(237,16,22)" fg:x="160" fg:w="1"/><text x="13.0911%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.8411%" y="197" width="0.0803%" height="15" fill="rgb(248,192,20)" fg:x="160" fg:w="1"/><text x="13.0911%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8411%" y="181" width="0.0803%" height="15" fill="rgb(233,167,2)" fg:x="160" fg:w="1"/><text x="13.0911%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.0016%" y="277" width="0.0803%" height="15" fill="rgb(252,71,44)" fg:x="162" fg:w="1"/><text x="13.2516%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.0016%" y="261" width="0.0803%" height="15" fill="rgb(238,37,47)" fg:x="162" fg:w="1"/><text x="13.2516%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.0016%" y="293" width="0.1605%" height="15" fill="rgb(214,202,54)" fg:x="162" fg:w="2"/><text x="13.2516%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.0819%" y="277" width="0.0803%" height="15" fill="rgb(254,165,40)" fg:x="163" fg:w="1"/><text x="13.3319%" y="287.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.0819%" y="261" width="0.0803%" height="15" fill="rgb(246,173,38)" fg:x="163" fg:w="1"/><text x="13.3319%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0819%" y="245" width="0.0803%" height="15" fill="rgb(215,3,27)" fg:x="163" fg:w="1"/><text x="13.3319%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0819%" y="229" width="0.0803%" height="15" fill="rgb(239,169,51)" fg:x="163" fg:w="1"/><text x="13.3319%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0819%" y="213" width="0.0803%" height="15" fill="rgb(212,5,25)" fg:x="163" fg:w="1"/><text x="13.3319%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0819%" y="197" width="0.0803%" height="15" fill="rgb(243,45,17)" fg:x="163" fg:w="1"/><text x="13.3319%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.0819%" y="181" width="0.0803%" height="15" fill="rgb(242,97,9)" fg:x="163" fg:w="1"/><text x="13.3319%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0819%" y="165" width="0.0803%" height="15" fill="rgb(228,71,31)" fg:x="163" fg:w="1"/><text x="13.3319%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0819%" y="149" width="0.0803%" height="15" fill="rgb(252,184,16)" fg:x="163" fg:w="1"/><text x="13.3319%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0819%" y="133" width="0.0803%" height="15" fill="rgb(236,169,46)" fg:x="163" fg:w="1"/><text x="13.3319%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0819%" y="117" width="0.0803%" height="15" fill="rgb(207,17,47)" fg:x="163" fg:w="1"/><text x="13.3319%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0819%" y="101" width="0.0803%" height="15" fill="rgb(206,201,28)" fg:x="163" fg:w="1"/><text x="13.3319%" y="111.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="13.0016%" y="325" width="0.2408%" height="15" fill="rgb(224,184,23)" fg:x="162" fg:w="3"/><text x="13.2516%" y="335.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="13.0016%" y="309" width="0.2408%" height="15" fill="rgb(208,139,48)" fg:x="162" fg:w="3"/><text x="13.2516%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.1621%" y="293" width="0.0803%" height="15" fill="rgb(208,130,10)" fg:x="164" fg:w="1"/><text x="13.4121%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.1621%" y="277" width="0.0803%" height="15" fill="rgb(211,213,45)" fg:x="164" fg:w="1"/><text x="13.4121%" y="287.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.1621%" y="261" width="0.0803%" height="15" fill="rgb(235,100,30)" fg:x="164" fg:w="1"/><text x="13.4121%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1621%" y="245" width="0.0803%" height="15" fill="rgb(206,144,31)" fg:x="164" fg:w="1"/><text x="13.4121%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1621%" y="229" width="0.0803%" height="15" fill="rgb(224,200,26)" fg:x="164" fg:w="1"/><text x="13.4121%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1621%" y="213" width="0.0803%" height="15" fill="rgb(247,104,53)" fg:x="164" fg:w="1"/><text x="13.4121%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1621%" y="197" width="0.0803%" height="15" fill="rgb(220,14,17)" fg:x="164" fg:w="1"/><text x="13.4121%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.1621%" y="181" width="0.0803%" height="15" fill="rgb(230,140,40)" fg:x="164" fg:w="1"/><text x="13.4121%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1621%" y="165" width="0.0803%" height="15" fill="rgb(229,2,41)" fg:x="164" fg:w="1"/><text x="13.4121%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1621%" y="149" width="0.0803%" height="15" fill="rgb(232,89,16)" fg:x="164" fg:w="1"/><text x="13.4121%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1621%" y="133" width="0.0803%" height="15" fill="rgb(247,59,52)" fg:x="164" fg:w="1"/><text x="13.4121%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.2424%" y="325" width="0.0803%" height="15" fill="rgb(226,110,21)" fg:x="165" fg:w="1"/><text x="13.4924%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.2424%" y="309" width="0.0803%" height="15" fill="rgb(224,176,43)" fg:x="165" fg:w="1"/><text x="13.4924%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.2424%" y="293" width="0.0803%" height="15" fill="rgb(221,73,6)" fg:x="165" fg:w="1"/><text x="13.4924%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2424%" y="277" width="0.0803%" height="15" fill="rgb(232,78,19)" fg:x="165" fg:w="1"/><text x="13.4924%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.2424%" y="261" width="0.0803%" height="15" fill="rgb(233,112,48)" fg:x="165" fg:w="1"/><text x="13.4924%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2424%" y="245" width="0.0803%" height="15" fill="rgb(243,131,47)" fg:x="165" fg:w="1"/><text x="13.4924%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2424%" y="229" width="0.0803%" height="15" fill="rgb(226,51,1)" fg:x="165" fg:w="1"/><text x="13.4924%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.2424%" y="213" width="0.0803%" height="15" fill="rgb(247,58,7)" fg:x="165" fg:w="1"/><text x="13.4924%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.2424%" y="197" width="0.0803%" height="15" fill="rgb(209,7,32)" fg:x="165" fg:w="1"/><text x="13.4924%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.2424%" y="181" width="0.0803%" height="15" fill="rgb(209,39,41)" fg:x="165" fg:w="1"/><text x="13.4924%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2424%" y="165" width="0.0803%" height="15" fill="rgb(226,182,46)" fg:x="165" fg:w="1"/><text x="13.4924%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2424%" y="149" width="0.0803%" height="15" fill="rgb(230,219,10)" fg:x="165" fg:w="1"/><text x="13.4924%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.2424%" y="133" width="0.0803%" height="15" fill="rgb(227,175,30)" fg:x="165" fg:w="1"/><text x="13.4924%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.2424%" y="117" width="0.0803%" height="15" fill="rgb(217,2,50)" fg:x="165" fg:w="1"/><text x="13.4924%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.2424%" y="101" width="0.0803%" height="15" fill="rgb(229,160,0)" fg:x="165" fg:w="1"/><text x="13.4924%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.2424%" y="85" width="0.0803%" height="15" fill="rgb(207,78,37)" fg:x="165" fg:w="1"/><text x="13.4924%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2424%" y="69" width="0.0803%" height="15" fill="rgb(225,57,0)" fg:x="165" fg:w="1"/><text x="13.4924%" y="79.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="13.3226%" y="325" width="0.1605%" height="15" fill="rgb(232,154,2)" fg:x="166" fg:w="2"/><text x="13.5726%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.3226%" y="309" width="0.1605%" height="15" fill="rgb(241,212,25)" fg:x="166" fg:w="2"/><text x="13.5726%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.3226%" y="293" width="0.1605%" height="15" fill="rgb(226,69,20)" fg:x="166" fg:w="2"/><text x="13.5726%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="13.3226%" y="277" width="0.1605%" height="15" fill="rgb(247,184,54)" fg:x="166" fg:w="2"/><text x="13.5726%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.3226%" y="261" width="0.1605%" height="15" fill="rgb(210,145,0)" fg:x="166" fg:w="2"/><text x="13.5726%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.4831%" y="261" width="0.0803%" height="15" fill="rgb(253,82,12)" fg:x="168" fg:w="1"/><text x="13.7331%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4831%" y="245" width="0.0803%" height="15" fill="rgb(245,42,11)" fg:x="168" fg:w="1"/><text x="13.7331%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.6437%" y="165" width="0.0803%" height="15" fill="rgb(219,147,32)" fg:x="170" fg:w="1"/><text x="13.8937%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6437%" y="149" width="0.0803%" height="15" fill="rgb(246,12,7)" fg:x="170" fg:w="1"/><text x="13.8937%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7239%" y="165" width="0.0803%" height="15" fill="rgb(243,50,9)" fg:x="171" fg:w="1"/><text x="13.9739%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7239%" y="149" width="0.0803%" height="15" fill="rgb(219,149,6)" fg:x="171" fg:w="1"/><text x="13.9739%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7239%" y="133" width="0.0803%" height="15" fill="rgb(241,51,42)" fg:x="171" fg:w="1"/><text x="13.9739%" y="143.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="13.4831%" y="309" width="0.4013%" height="15" fill="rgb(226,128,27)" fg:x="168" fg:w="5"/><text x="13.7331%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="13.4831%" y="293" width="0.4013%" height="15" fill="rgb(244,144,4)" fg:x="168" fg:w="5"/><text x="13.7331%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="13.4831%" y="277" width="0.4013%" height="15" fill="rgb(221,4,13)" fg:x="168" fg:w="5"/><text x="13.7331%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="13.5634%" y="261" width="0.3210%" height="15" fill="rgb(208,170,28)" fg:x="169" fg:w="4"/><text x="13.8134%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="13.6437%" y="245" width="0.2408%" height="15" fill="rgb(226,131,13)" fg:x="170" fg:w="3"/><text x="13.8937%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="13.6437%" y="229" width="0.2408%" height="15" fill="rgb(215,72,41)" fg:x="170" fg:w="3"/><text x="13.8937%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="13.6437%" y="213" width="0.2408%" height="15" fill="rgb(243,108,20)" fg:x="170" fg:w="3"/><text x="13.8937%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="13.6437%" y="197" width="0.2408%" height="15" fill="rgb(230,189,17)" fg:x="170" fg:w="3"/><text x="13.8937%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="13.6437%" y="181" width="0.2408%" height="15" fill="rgb(220,50,17)" fg:x="170" fg:w="3"/><text x="13.8937%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8042%" y="165" width="0.0803%" height="15" fill="rgb(248,152,48)" fg:x="172" fg:w="1"/><text x="14.0542%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8042%" y="149" width="0.0803%" height="15" fill="rgb(244,91,11)" fg:x="172" fg:w="1"/><text x="14.0542%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8042%" y="133" width="0.0803%" height="15" fill="rgb(220,157,5)" fg:x="172" fg:w="1"/><text x="14.0542%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8042%" y="117" width="0.0803%" height="15" fill="rgb(253,137,8)" fg:x="172" fg:w="1"/><text x="14.0542%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8042%" y="101" width="0.0803%" height="15" fill="rgb(217,137,51)" fg:x="172" fg:w="1"/><text x="14.0542%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8042%" y="85" width="0.0803%" height="15" fill="rgb(218,209,53)" fg:x="172" fg:w="1"/><text x="14.0542%" y="95.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8042%" y="69" width="0.0803%" height="15" fill="rgb(249,137,25)" fg:x="172" fg:w="1"/><text x="14.0542%" y="79.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="13.8844%" y="277" width="0.0803%" height="15" fill="rgb(239,155,26)" fg:x="173" fg:w="1"/><text x="14.1344%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="13.9647%" y="277" width="0.1605%" height="15" fill="rgb(227,85,46)" fg:x="174" fg:w="2"/><text x="14.2147%" y="287.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (16 samples, 1.28%)</title><rect x="12.9213%" y="421" width="1.2841%" height="15" fill="rgb(251,107,43)" fg:x="161" fg:w="16"/><text x="13.1713%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.20%)</title><rect x="13.0016%" y="405" width="1.2039%" height="15" fill="rgb(234,170,33)" fg:x="162" fg:w="15"/><text x="13.2516%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="13.0016%" y="389" width="1.2039%" height="15" fill="rgb(206,29,35)" fg:x="162" fg:w="15"/><text x="13.2516%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (15 samples, 1.20%)</title><rect x="13.0016%" y="373" width="1.2039%" height="15" fill="rgb(227,138,25)" fg:x="162" fg:w="15"/><text x="13.2516%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (15 samples, 1.20%)</title><rect x="13.0016%" y="357" width="1.2039%" height="15" fill="rgb(249,131,35)" fg:x="162" fg:w="15"/><text x="13.2516%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="13.0016%" y="341" width="1.2039%" height="15" fill="rgb(239,6,40)" fg:x="162" fg:w="15"/><text x="13.2516%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_str (9 samples, 0.72%)</title><rect x="13.4831%" y="325" width="0.7223%" height="15" fill="rgb(246,136,47)" fg:x="168" fg:w="9"/><text x="13.7331%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="13.8844%" y="309" width="0.3210%" height="15" fill="rgb(253,58,26)" fg:x="173" fg:w="4"/><text x="14.1344%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.8844%" y="293" width="0.3210%" height="15" fill="rgb(237,141,10)" fg:x="173" fg:w="4"/><text x="14.1344%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.1252%" y="277" width="0.0803%" height="15" fill="rgb(234,156,12)" fg:x="176" fg:w="1"/><text x="14.3752%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.1252%" y="261" width="0.0803%" height="15" fill="rgb(243,224,36)" fg:x="176" fg:w="1"/><text x="14.3752%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.1252%" y="245" width="0.0803%" height="15" fill="rgb(205,229,51)" fg:x="176" fg:w="1"/><text x="14.3752%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.1252%" y="229" width="0.0803%" height="15" fill="rgb(223,189,4)" fg:x="176" fg:w="1"/><text x="14.3752%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.1252%" y="213" width="0.0803%" height="15" fill="rgb(249,167,54)" fg:x="176" fg:w="1"/><text x="14.3752%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.1252%" y="197" width="0.0803%" height="15" fill="rgb(218,34,28)" fg:x="176" fg:w="1"/><text x="14.3752%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.1252%" y="181" width="0.0803%" height="15" fill="rgb(232,109,42)" fg:x="176" fg:w="1"/><text x="14.3752%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.1252%" y="165" width="0.0803%" height="15" fill="rgb(248,214,46)" fg:x="176" fg:w="1"/><text x="14.3752%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.1252%" y="149" width="0.0803%" height="15" fill="rgb(244,216,40)" fg:x="176" fg:w="1"/><text x="14.3752%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.1252%" y="133" width="0.0803%" height="15" fill="rgb(231,226,31)" fg:x="176" fg:w="1"/><text x="14.3752%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.1252%" y="117" width="0.0803%" height="15" fill="rgb(238,38,43)" fg:x="176" fg:w="1"/><text x="14.3752%" y="127.50"></text></g><g><title>plugins_core::tools::get_contained_keys (18 samples, 1.44%)</title><rect x="12.8411%" y="469" width="1.4446%" height="15" fill="rgb(208,88,43)" fg:x="160" fg:w="18"/><text x="13.0911%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope (18 samples, 1.44%)</title><rect x="12.8411%" y="453" width="1.4446%" height="15" fill="rgb(205,136,37)" fg:x="160" fg:w="18"/><text x="13.0911%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (18 samples, 1.44%)</title><rect x="12.8411%" y="437" width="1.4446%" height="15" fill="rgb(237,34,14)" fg:x="160" fg:w="18"/><text x="13.0911%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.2055%" y="421" width="0.0803%" height="15" fill="rgb(236,193,44)" fg:x="177" fg:w="1"/><text x="14.4555%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.2055%" y="405" width="0.0803%" height="15" fill="rgb(231,48,10)" fg:x="177" fg:w="1"/><text x="14.4555%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2857%" y="453" width="0.0803%" height="15" fill="rgb(213,141,34)" fg:x="178" fg:w="1"/><text x="14.5357%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 2.17%)</title><rect x="12.2793%" y="501" width="2.1669%" height="15" fill="rgb(249,130,34)" fg:x="153" fg:w="27"/><text x="12.5293%" y="511.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 2.17%)</title><rect x="12.2793%" y="485" width="2.1669%" height="15" fill="rgb(219,42,41)" fg:x="153" fg:w="27"/><text x="12.5293%" y="495.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="14.2857%" y="469" width="0.1605%" height="15" fill="rgb(224,100,54)" fg:x="178" fg:w="2"/><text x="14.5357%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="14.3660%" y="453" width="0.0803%" height="15" fill="rgb(229,200,27)" fg:x="179" fg:w="1"/><text x="14.6160%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.3660%" y="437" width="0.0803%" height="15" fill="rgb(217,118,10)" fg:x="179" fg:w="1"/><text x="14.6160%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3660%" y="421" width="0.0803%" height="15" fill="rgb(206,22,3)" fg:x="179" fg:w="1"/><text x="14.6160%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3660%" y="405" width="0.0803%" height="15" fill="rgb(232,163,46)" fg:x="179" fg:w="1"/><text x="14.6160%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3660%" y="389" width="0.0803%" height="15" fill="rgb(206,95,13)" fg:x="179" fg:w="1"/><text x="14.6160%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3660%" y="373" width="0.0803%" height="15" fill="rgb(253,154,18)" fg:x="179" fg:w="1"/><text x="14.6160%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="14.5265%" y="453" width="0.1605%" height="15" fill="rgb(219,32,23)" fg:x="181" fg:w="2"/><text x="14.7765%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="14.5265%" y="437" width="0.1605%" height="15" fill="rgb(230,191,45)" fg:x="181" fg:w="2"/><text x="14.7765%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="14.5265%" y="421" width="0.1605%" height="15" fill="rgb(229,64,36)" fg:x="181" fg:w="2"/><text x="14.7765%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="14.5265%" y="405" width="0.1605%" height="15" fill="rgb(205,129,25)" fg:x="181" fg:w="2"/><text x="14.7765%" y="415.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.5265%" y="389" width="0.1605%" height="15" fill="rgb(254,112,7)" fg:x="181" fg:w="2"/><text x="14.7765%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="14.5265%" y="373" width="0.1605%" height="15" fill="rgb(226,53,48)" fg:x="181" fg:w="2"/><text x="14.7765%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="14.5265%" y="357" width="0.1605%" height="15" fill="rgb(214,153,38)" fg:x="181" fg:w="2"/><text x="14.7765%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="14.5265%" y="341" width="0.1605%" height="15" fill="rgb(243,101,7)" fg:x="181" fg:w="2"/><text x="14.7765%" y="351.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.5265%" y="325" width="0.1605%" height="15" fill="rgb(240,140,22)" fg:x="181" fg:w="2"/><text x="14.7765%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="14.5265%" y="309" width="0.1605%" height="15" fill="rgb(235,114,2)" fg:x="181" fg:w="2"/><text x="14.7765%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="14.5265%" y="293" width="0.1605%" height="15" fill="rgb(242,59,12)" fg:x="181" fg:w="2"/><text x="14.7765%" y="303.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="14.5265%" y="277" width="0.1605%" height="15" fill="rgb(252,134,9)" fg:x="181" fg:w="2"/><text x="14.7765%" y="287.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.5265%" y="261" width="0.1605%" height="15" fill="rgb(236,4,44)" fg:x="181" fg:w="2"/><text x="14.7765%" y="271.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="14.5265%" y="245" width="0.1605%" height="15" fill="rgb(254,172,41)" fg:x="181" fg:w="2"/><text x="14.7765%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.6067%" y="229" width="0.0803%" height="15" fill="rgb(244,63,20)" fg:x="182" fg:w="1"/><text x="14.8567%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.6067%" y="213" width="0.0803%" height="15" fill="rgb(250,73,31)" fg:x="182" fg:w="1"/><text x="14.8567%" y="223.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="14.6067%" y="197" width="0.0803%" height="15" fill="rgb(241,38,36)" fg:x="182" fg:w="1"/><text x="14.8567%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="14.6067%" y="181" width="0.0803%" height="15" fill="rgb(245,211,2)" fg:x="182" fg:w="1"/><text x="14.8567%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.6067%" y="165" width="0.0803%" height="15" fill="rgb(206,120,28)" fg:x="182" fg:w="1"/><text x="14.8567%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="14.6067%" y="149" width="0.0803%" height="15" fill="rgb(211,59,34)" fg:x="182" fg:w="1"/><text x="14.8567%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.6067%" y="133" width="0.0803%" height="15" fill="rgb(233,168,5)" fg:x="182" fg:w="1"/><text x="14.8567%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.1685%" y="245" width="0.0803%" height="15" fill="rgb(234,33,13)" fg:x="189" fg:w="1"/><text x="15.4185%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="15.3291%" y="117" width="0.0803%" height="15" fill="rgb(231,150,26)" fg:x="191" fg:w="1"/><text x="15.5791%" y="127.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.3291%" y="101" width="0.0803%" height="15" fill="rgb(217,191,4)" fg:x="191" fg:w="1"/><text x="15.5791%" y="111.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="15.3291%" y="149" width="0.1605%" height="15" fill="rgb(246,198,38)" fg:x="191" fg:w="2"/><text x="15.5791%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="15.3291%" y="133" width="0.1605%" height="15" fill="rgb(245,64,37)" fg:x="191" fg:w="2"/><text x="15.5791%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.4093%" y="117" width="0.0803%" height="15" fill="rgb(250,30,36)" fg:x="192" fg:w="1"/><text x="15.6593%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4093%" y="101" width="0.0803%" height="15" fill="rgb(217,86,53)" fg:x="192" fg:w="1"/><text x="15.6593%" y="111.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="15.2488%" y="197" width="0.3210%" height="15" fill="rgb(228,157,16)" fg:x="190" fg:w="4"/><text x="15.4988%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="15.3291%" y="181" width="0.2408%" height="15" fill="rgb(217,59,31)" fg:x="191" fg:w="3"/><text x="15.5791%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="15.3291%" y="165" width="0.2408%" height="15" fill="rgb(237,138,41)" fg:x="191" fg:w="3"/><text x="15.5791%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.4896%" y="149" width="0.0803%" height="15" fill="rgb(227,91,49)" fg:x="193" fg:w="1"/><text x="15.7396%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.40%)</title><rect x="15.2488%" y="245" width="0.4013%" height="15" fill="rgb(247,21,44)" fg:x="190" fg:w="5"/><text x="15.4988%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="15.2488%" y="229" width="0.4013%" height="15" fill="rgb(219,210,51)" fg:x="190" fg:w="5"/><text x="15.4988%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="15.2488%" y="213" width="0.4013%" height="15" fill="rgb(209,140,6)" fg:x="190" fg:w="5"/><text x="15.4988%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5698%" y="197" width="0.0803%" height="15" fill="rgb(221,188,24)" fg:x="194" fg:w="1"/><text x="15.8198%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.5698%" y="181" width="0.0803%" height="15" fill="rgb(232,154,20)" fg:x="194" fg:w="1"/><text x="15.8198%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.5698%" y="165" width="0.0803%" height="15" fill="rgb(244,137,50)" fg:x="194" fg:w="1"/><text x="15.8198%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.6501%" y="245" width="0.0803%" height="15" fill="rgb(225,185,43)" fg:x="195" fg:w="1"/><text x="15.9001%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="15.0883%" y="277" width="0.7223%" height="15" fill="rgb(213,205,38)" fg:x="188" fg:w="9"/><text x="15.3383%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.72%)</title><rect x="15.0883%" y="261" width="0.7223%" height="15" fill="rgb(236,73,12)" fg:x="188" fg:w="9"/><text x="15.3383%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7303%" y="245" width="0.0803%" height="15" fill="rgb(235,219,13)" fg:x="196" fg:w="1"/><text x="15.9803%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.7303%" y="229" width="0.0803%" height="15" fill="rgb(218,59,36)" fg:x="196" fg:w="1"/><text x="15.9803%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (11 samples, 0.88%)</title><rect x="15.0883%" y="293" width="0.8828%" height="15" fill="rgb(205,110,39)" fg:x="188" fg:w="11"/><text x="15.3383%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="15.8106%" y="277" width="0.1605%" height="15" fill="rgb(218,206,42)" fg:x="197" fg:w="2"/><text x="16.0606%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="15.8106%" y="261" width="0.1605%" height="15" fill="rgb(248,125,24)" fg:x="197" fg:w="2"/><text x="16.0606%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="15.8106%" y="245" width="0.1605%" height="15" fill="rgb(242,28,27)" fg:x="197" fg:w="2"/><text x="16.0606%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="15.8106%" y="229" width="0.1605%" height="15" fill="rgb(216,228,15)" fg:x="197" fg:w="2"/><text x="16.0606%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="15.8106%" y="213" width="0.1605%" height="15" fill="rgb(235,116,46)" fg:x="197" fg:w="2"/><text x="16.0606%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8909%" y="197" width="0.0803%" height="15" fill="rgb(224,18,32)" fg:x="198" fg:w="1"/><text x="16.1409%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.12%)</title><rect x="14.9278%" y="341" width="1.1236%" height="15" fill="rgb(252,5,12)" fg:x="186" fg:w="14"/><text x="15.1778%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (14 samples, 1.12%)</title><rect x="14.9278%" y="325" width="1.1236%" height="15" fill="rgb(251,36,5)" fg:x="186" fg:w="14"/><text x="15.1778%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="15.0080%" y="309" width="1.0433%" height="15" fill="rgb(217,53,14)" fg:x="187" fg:w="13"/><text x="15.2580%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9711%" y="293" width="0.0803%" height="15" fill="rgb(215,86,45)" fg:x="199" fg:w="1"/><text x="16.2211%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.9711%" y="277" width="0.0803%" height="15" fill="rgb(242,169,11)" fg:x="199" fg:w="1"/><text x="16.2211%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.9711%" y="261" width="0.0803%" height="15" fill="rgb(211,213,45)" fg:x="199" fg:w="1"/><text x="16.2211%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (17 samples, 1.36%)</title><rect x="14.7673%" y="389" width="1.3644%" height="15" fill="rgb(205,88,11)" fg:x="184" fg:w="17"/><text x="15.0173%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="14.8475%" y="373" width="1.2841%" height="15" fill="rgb(252,69,26)" fg:x="185" fg:w="16"/><text x="15.0975%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.28%)</title><rect x="14.8475%" y="357" width="1.2841%" height="15" fill="rgb(246,123,37)" fg:x="185" fg:w="16"/><text x="15.0975%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0514%" y="341" width="0.0803%" height="15" fill="rgb(212,205,5)" fg:x="200" fg:w="1"/><text x="16.3014%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (18 samples, 1.44%)</title><rect x="14.7673%" y="437" width="1.4446%" height="15" fill="rgb(253,148,0)" fg:x="184" fg:w="18"/><text x="15.0173%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.44%)</title><rect x="14.7673%" y="421" width="1.4446%" height="15" fill="rgb(239,22,4)" fg:x="184" fg:w="18"/><text x="15.0173%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.44%)</title><rect x="14.7673%" y="405" width="1.4446%" height="15" fill="rgb(226,26,53)" fg:x="184" fg:w="18"/><text x="15.0173%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.1316%" y="389" width="0.0803%" height="15" fill="rgb(225,229,45)" fg:x="201" fg:w="1"/><text x="16.3816%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.1316%" y="373" width="0.0803%" height="15" fill="rgb(220,60,37)" fg:x="201" fg:w="1"/><text x="16.3816%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.2119%" y="389" width="0.1605%" height="15" fill="rgb(217,180,35)" fg:x="202" fg:w="2"/><text x="16.4619%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3724%" y="389" width="0.0803%" height="15" fill="rgb(229,7,53)" fg:x="204" fg:w="1"/><text x="16.6224%" y="399.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4526%" y="389" width="0.0803%" height="15" fill="rgb(254,137,3)" fg:x="205" fg:w="1"/><text x="16.7026%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.4526%" y="373" width="0.0803%" height="15" fill="rgb(215,140,41)" fg:x="205" fg:w="1"/><text x="16.7026%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.6934%" y="341" width="0.0803%" height="15" fill="rgb(250,80,15)" fg:x="208" fg:w="1"/><text x="16.9434%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6934%" y="325" width="0.0803%" height="15" fill="rgb(252,191,6)" fg:x="208" fg:w="1"/><text x="16.9434%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.6934%" y="309" width="0.0803%" height="15" fill="rgb(246,217,18)" fg:x="208" fg:w="1"/><text x="16.9434%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7737%" y="309" width="0.0803%" height="15" fill="rgb(223,93,7)" fg:x="209" fg:w="1"/><text x="17.0237%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7737%" y="293" width="0.0803%" height="15" fill="rgb(225,55,52)" fg:x="209" fg:w="1"/><text x="17.0237%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7737%" y="277" width="0.0803%" height="15" fill="rgb(240,31,24)" fg:x="209" fg:w="1"/><text x="17.0237%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.8539%" y="261" width="0.0803%" height="15" fill="rgb(205,56,52)" fg:x="210" fg:w="1"/><text x="17.1039%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="16.8539%" y="293" width="0.2408%" height="15" fill="rgb(246,146,12)" fg:x="210" fg:w="3"/><text x="17.1039%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="16.8539%" y="277" width="0.2408%" height="15" fill="rgb(239,84,36)" fg:x="210" fg:w="3"/><text x="17.1039%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.9342%" y="261" width="0.1605%" height="15" fill="rgb(207,41,40)" fg:x="211" fg:w="2"/><text x="17.1842%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 2.73%)</title><rect x="14.5265%" y="485" width="2.7287%" height="15" fill="rgb(241,179,25)" fg:x="181" fg:w="34"/><text x="14.7765%" y="495.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (34 samples, 2.73%)</title><rect x="14.5265%" y="469" width="2.7287%" height="15" fill="rgb(210,0,34)" fg:x="181" fg:w="34"/><text x="14.7765%" y="479.50">pl..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (32 samples, 2.57%)</title><rect x="14.6870%" y="453" width="2.5682%" height="15" fill="rgb(225,217,29)" fg:x="183" fg:w="32"/><text x="14.9370%" y="463.50">&lt;r..</text></g><g><title>kernel::model::EntityPtr::to_json_value (13 samples, 1.04%)</title><rect x="16.2119%" y="437" width="1.0433%" height="15" fill="rgb(216,191,38)" fg:x="202" fg:w="13"/><text x="16.4619%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="16.2119%" y="421" width="1.0433%" height="15" fill="rgb(232,140,52)" fg:x="202" fg:w="13"/><text x="16.4619%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="16.2119%" y="405" width="1.0433%" height="15" fill="rgb(223,158,51)" fg:x="202" fg:w="13"/><text x="16.4619%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="16.5329%" y="389" width="0.7223%" height="15" fill="rgb(235,29,51)" fg:x="206" fg:w="9"/><text x="16.7829%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="16.6132%" y="373" width="0.6421%" height="15" fill="rgb(215,181,18)" fg:x="207" fg:w="8"/><text x="16.8632%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="16.6934%" y="357" width="0.5618%" height="15" fill="rgb(227,125,34)" fg:x="208" fg:w="7"/><text x="16.9434%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="16.7737%" y="341" width="0.4815%" height="15" fill="rgb(230,197,49)" fg:x="209" fg:w="6"/><text x="17.0237%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="16.7737%" y="325" width="0.4815%" height="15" fill="rgb(239,141,16)" fg:x="209" fg:w="6"/><text x="17.0237%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="16.8539%" y="309" width="0.4013%" height="15" fill="rgb(225,105,43)" fg:x="210" fg:w="5"/><text x="17.1039%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.0947%" y="293" width="0.1605%" height="15" fill="rgb(214,131,14)" fg:x="213" fg:w="2"/><text x="17.3447%" y="303.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (66 samples, 5.30%)</title><rect x="12.0385%" y="533" width="5.2970%" height="15" fill="rgb(229,177,11)" fg:x="150" fg:w="66"/><text x="12.2885%" y="543.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (63 samples, 5.06%)</title><rect x="12.2793%" y="517" width="5.0562%" height="15" fill="rgb(231,180,14)" fg:x="153" fg:w="63"/><text x="12.5293%" y="527.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (36 samples, 2.89%)</title><rect x="14.4462%" y="501" width="2.8892%" height="15" fill="rgb(232,88,2)" fg:x="180" fg:w="36"/><text x="14.6962%" y="511.50">al..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2552%" y="485" width="0.0803%" height="15" fill="rgb(205,220,8)" fg:x="215" fg:w="1"/><text x="17.5052%" y="495.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (75 samples, 6.02%)</title><rect x="11.3965%" y="581" width="6.0193%" height="15" fill="rgb(225,23,53)" fg:x="142" fg:w="75"/><text x="11.6465%" y="591.50">kernel::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (74 samples, 5.94%)</title><rect x="11.4767%" y="565" width="5.9390%" height="15" fill="rgb(213,62,29)" fg:x="143" fg:w="74"/><text x="11.7267%" y="575.50">&lt;plugins..</text></g><g><title>plugins_rpc::querying::have_surroundings (69 samples, 5.54%)</title><rect x="11.8780%" y="549" width="5.5377%" height="15" fill="rgb(227,75,7)" fg:x="148" fg:w="69"/><text x="12.1280%" y="559.50">plugins..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.3355%" y="533" width="0.0803%" height="15" fill="rgb(207,105,14)" fg:x="216" fg:w="1"/><text x="17.5855%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.3355%" y="517" width="0.0803%" height="15" fill="rgb(245,62,29)" fg:x="216" fg:w="1"/><text x="17.5855%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.3355%" y="501" width="0.0803%" height="15" fill="rgb(236,202,4)" fg:x="216" fg:w="1"/><text x="17.5855%" y="511.50"></text></g><g><title>kernel::surround::Surroundings::unpack (2 samples, 0.16%)</title><rect x="17.5762%" y="437" width="0.1605%" height="15" fill="rgb(250,67,1)" fg:x="219" fg:w="2"/><text x="17.8262%" y="447.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.5762%" y="421" width="0.1605%" height="15" fill="rgb(253,115,44)" fg:x="219" fg:w="2"/><text x="17.8262%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6565%" y="405" width="0.0803%" height="15" fill="rgb(251,139,18)" fg:x="220" fg:w="1"/><text x="17.9065%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6565%" y="389" width="0.0803%" height="15" fill="rgb(218,22,32)" fg:x="220" fg:w="1"/><text x="17.9065%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.6565%" y="373" width="0.0803%" height="15" fill="rgb(243,53,5)" fg:x="220" fg:w="1"/><text x="17.9065%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.6565%" y="357" width="0.0803%" height="15" fill="rgb(227,56,16)" fg:x="220" fg:w="1"/><text x="17.9065%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.6565%" y="341" width="0.0803%" height="15" fill="rgb(245,53,0)" fg:x="220" fg:w="1"/><text x="17.9065%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.6565%" y="325" width="0.0803%" height="15" fill="rgb(216,170,35)" fg:x="220" fg:w="1"/><text x="17.9065%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.6565%" y="309" width="0.0803%" height="15" fill="rgb(211,200,8)" fg:x="220" fg:w="1"/><text x="17.9065%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.6565%" y="293" width="0.0803%" height="15" fill="rgb(228,204,44)" fg:x="220" fg:w="1"/><text x="17.9065%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.6565%" y="277" width="0.0803%" height="15" fill="rgb(214,121,17)" fg:x="220" fg:w="1"/><text x="17.9065%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.6565%" y="261" width="0.0803%" height="15" fill="rgb(233,64,38)" fg:x="220" fg:w="1"/><text x="17.9065%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.6565%" y="245" width="0.0803%" height="15" fill="rgb(253,54,19)" fg:x="220" fg:w="1"/><text x="17.9065%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6565%" y="229" width="0.0803%" height="15" fill="rgb(253,94,18)" fg:x="220" fg:w="1"/><text x="17.9065%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.8170%" y="389" width="0.0803%" height="15" fill="rgb(227,57,52)" fg:x="222" fg:w="1"/><text x="18.0670%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8973%" y="357" width="0.0803%" height="15" fill="rgb(230,228,50)" fg:x="223" fg:w="1"/><text x="18.1473%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8973%" y="341" width="0.0803%" height="15" fill="rgb(217,205,27)" fg:x="223" fg:w="1"/><text x="18.1473%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8973%" y="325" width="0.0803%" height="15" fill="rgb(252,71,50)" fg:x="223" fg:w="1"/><text x="18.1473%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8973%" y="309" width="0.0803%" height="15" fill="rgb(209,86,4)" fg:x="223" fg:w="1"/><text x="18.1473%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8973%" y="293" width="0.0803%" height="15" fill="rgb(229,94,0)" fg:x="223" fg:w="1"/><text x="18.1473%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="17.8170%" y="405" width="0.2408%" height="15" fill="rgb(252,223,21)" fg:x="222" fg:w="3"/><text x="18.0670%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.8973%" y="389" width="0.1605%" height="15" fill="rgb(230,210,4)" fg:x="223" fg:w="2"/><text x="18.1473%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="17.8973%" y="373" width="0.1605%" height="15" fill="rgb(240,149,38)" fg:x="223" fg:w="2"/><text x="18.1473%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.9775%" y="357" width="0.0803%" height="15" fill="rgb(254,105,20)" fg:x="224" fg:w="1"/><text x="18.2275%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9775%" y="341" width="0.0803%" height="15" fill="rgb(253,87,46)" fg:x="224" fg:w="1"/><text x="18.2275%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.9775%" y="325" width="0.0803%" height="15" fill="rgb(253,116,33)" fg:x="224" fg:w="1"/><text x="18.2275%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9775%" y="309" width="0.0803%" height="15" fill="rgb(229,198,5)" fg:x="224" fg:w="1"/><text x="18.2275%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.9775%" y="293" width="0.0803%" height="15" fill="rgb(242,38,37)" fg:x="224" fg:w="1"/><text x="18.2275%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9775%" y="277" width="0.0803%" height="15" fill="rgb(242,69,53)" fg:x="224" fg:w="1"/><text x="18.2275%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="17.9775%" y="261" width="0.0803%" height="15" fill="rgb(249,80,16)" fg:x="224" fg:w="1"/><text x="18.2275%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0578%" y="389" width="0.0803%" height="15" fill="rgb(206,128,11)" fg:x="225" fg:w="1"/><text x="18.3078%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0578%" y="373" width="0.0803%" height="15" fill="rgb(212,35,20)" fg:x="225" fg:w="1"/><text x="18.3078%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.0578%" y="357" width="0.0803%" height="15" fill="rgb(236,79,13)" fg:x="225" fg:w="1"/><text x="18.3078%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.0578%" y="341" width="0.0803%" height="15" fill="rgb(233,123,3)" fg:x="225" fg:w="1"/><text x="18.3078%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.0578%" y="325" width="0.0803%" height="15" fill="rgb(214,93,52)" fg:x="225" fg:w="1"/><text x="18.3078%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.0578%" y="309" width="0.0803%" height="15" fill="rgb(251,37,40)" fg:x="225" fg:w="1"/><text x="18.3078%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.0578%" y="293" width="0.0803%" height="15" fill="rgb(227,80,54)" fg:x="225" fg:w="1"/><text x="18.3078%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.2183%" y="293" width="0.0803%" height="15" fill="rgb(254,48,11)" fg:x="227" fg:w="1"/><text x="18.4683%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="18.2183%" y="309" width="0.2408%" height="15" fill="rgb(235,193,26)" fg:x="227" fg:w="3"/><text x="18.4683%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="18.2986%" y="293" width="0.1605%" height="15" fill="rgb(229,99,21)" fg:x="228" fg:w="2"/><text x="18.5486%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.3788%" y="277" width="0.0803%" height="15" fill="rgb(211,140,41)" fg:x="229" fg:w="1"/><text x="18.6288%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.3788%" y="261" width="0.0803%" height="15" fill="rgb(240,227,30)" fg:x="229" fg:w="1"/><text x="18.6288%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.3788%" y="245" width="0.0803%" height="15" fill="rgb(215,224,45)" fg:x="229" fg:w="1"/><text x="18.6288%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.3788%" y="229" width="0.0803%" height="15" fill="rgb(206,123,31)" fg:x="229" fg:w="1"/><text x="18.6288%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.3788%" y="213" width="0.0803%" height="15" fill="rgb(210,138,16)" fg:x="229" fg:w="1"/><text x="18.6288%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.3788%" y="197" width="0.0803%" height="15" fill="rgb(228,57,28)" fg:x="229" fg:w="1"/><text x="18.6288%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.3788%" y="181" width="0.0803%" height="15" fill="rgb(242,170,10)" fg:x="229" fg:w="1"/><text x="18.6288%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.3788%" y="165" width="0.0803%" height="15" fill="rgb(228,214,39)" fg:x="229" fg:w="1"/><text x="18.6288%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.3788%" y="149" width="0.0803%" height="15" fill="rgb(218,179,33)" fg:x="229" fg:w="1"/><text x="18.6288%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.3788%" y="133" width="0.0803%" height="15" fill="rgb(235,193,39)" fg:x="229" fg:w="1"/><text x="18.6288%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4591%" y="229" width="0.0803%" height="15" fill="rgb(219,221,36)" fg:x="230" fg:w="1"/><text x="18.7091%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.4591%" y="213" width="0.0803%" height="15" fill="rgb(248,218,19)" fg:x="230" fg:w="1"/><text x="18.7091%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.4591%" y="197" width="0.0803%" height="15" fill="rgb(205,50,9)" fg:x="230" fg:w="1"/><text x="18.7091%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.4591%" y="181" width="0.0803%" height="15" fill="rgb(238,81,28)" fg:x="230" fg:w="1"/><text x="18.7091%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.4591%" y="165" width="0.0803%" height="15" fill="rgb(235,110,19)" fg:x="230" fg:w="1"/><text x="18.7091%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.4591%" y="149" width="0.0803%" height="15" fill="rgb(214,7,14)" fg:x="230" fg:w="1"/><text x="18.7091%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4591%" y="133" width="0.0803%" height="15" fill="rgb(211,77,3)" fg:x="230" fg:w="1"/><text x="18.7091%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="18.1380%" y="357" width="0.4815%" height="15" fill="rgb(229,5,9)" fg:x="226" fg:w="6"/><text x="18.3880%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="18.2183%" y="341" width="0.4013%" height="15" fill="rgb(225,90,11)" fg:x="227" fg:w="5"/><text x="18.4683%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="18.2183%" y="325" width="0.4013%" height="15" fill="rgb(242,56,8)" fg:x="227" fg:w="5"/><text x="18.4683%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="18.4591%" y="309" width="0.1605%" height="15" fill="rgb(249,212,39)" fg:x="230" fg:w="2"/><text x="18.7091%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="18.4591%" y="293" width="0.1605%" height="15" fill="rgb(236,90,9)" fg:x="230" fg:w="2"/><text x="18.7091%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="18.4591%" y="277" width="0.1605%" height="15" fill="rgb(206,88,35)" fg:x="230" fg:w="2"/><text x="18.7091%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="18.4591%" y="261" width="0.1605%" height="15" fill="rgb(205,126,30)" fg:x="230" fg:w="2"/><text x="18.7091%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="18.4591%" y="245" width="0.1605%" height="15" fill="rgb(230,176,12)" fg:x="230" fg:w="2"/><text x="18.7091%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.5393%" y="229" width="0.0803%" height="15" fill="rgb(243,19,9)" fg:x="231" fg:w="1"/><text x="18.7893%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.5393%" y="213" width="0.0803%" height="15" fill="rgb(245,171,17)" fg:x="231" fg:w="1"/><text x="18.7893%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.6196%" y="309" width="0.0803%" height="15" fill="rgb(227,52,21)" fg:x="232" fg:w="1"/><text x="18.8696%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6196%" y="293" width="0.0803%" height="15" fill="rgb(238,69,14)" fg:x="232" fg:w="1"/><text x="18.8696%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (2 samples, 0.16%)</title><rect x="18.6196%" y="357" width="0.1605%" height="15" fill="rgb(241,156,39)" fg:x="232" fg:w="2"/><text x="18.8696%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="18.6196%" y="341" width="0.1605%" height="15" fill="rgb(212,227,28)" fg:x="232" fg:w="2"/><text x="18.8696%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="18.6196%" y="325" width="0.1605%" height="15" fill="rgb(209,118,27)" fg:x="232" fg:w="2"/><text x="18.8696%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.6998%" y="309" width="0.0803%" height="15" fill="rgb(226,102,5)" fg:x="233" fg:w="1"/><text x="18.9498%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="18.6998%" y="293" width="0.0803%" height="15" fill="rgb(223,34,3)" fg:x="233" fg:w="1"/><text x="18.9498%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.6998%" y="277" width="0.0803%" height="15" fill="rgb(221,81,38)" fg:x="233" fg:w="1"/><text x="18.9498%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6998%" y="261" width="0.0803%" height="15" fill="rgb(236,219,28)" fg:x="233" fg:w="1"/><text x="18.9498%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8604%" y="261" width="0.0803%" height="15" fill="rgb(213,200,14)" fg:x="235" fg:w="1"/><text x="19.1104%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.9406%" y="229" width="0.0803%" height="15" fill="rgb(240,33,19)" fg:x="236" fg:w="1"/><text x="19.1906%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (14 samples, 1.12%)</title><rect x="18.0578%" y="405" width="1.1236%" height="15" fill="rgb(233,113,27)" fg:x="225" fg:w="14"/><text x="18.3078%" y="415.50"></text></g><g><title>kernel::model::props::load_props (13 samples, 1.04%)</title><rect x="18.1380%" y="389" width="1.0433%" height="15" fill="rgb(220,221,18)" fg:x="226" fg:w="13"/><text x="18.3880%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (13 samples, 1.04%)</title><rect x="18.1380%" y="373" width="1.0433%" height="15" fill="rgb(238,92,8)" fg:x="226" fg:w="13"/><text x="18.3880%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="18.7801%" y="357" width="0.4013%" height="15" fill="rgb(222,164,16)" fg:x="234" fg:w="5"/><text x="19.0301%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="18.7801%" y="341" width="0.4013%" height="15" fill="rgb(241,119,3)" fg:x="234" fg:w="5"/><text x="19.0301%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="18.7801%" y="325" width="0.4013%" height="15" fill="rgb(241,44,8)" fg:x="234" fg:w="5"/><text x="19.0301%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="18.7801%" y="309" width="0.4013%" height="15" fill="rgb(230,36,40)" fg:x="234" fg:w="5"/><text x="19.0301%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="18.8604%" y="293" width="0.3210%" height="15" fill="rgb(243,16,36)" fg:x="235" fg:w="4"/><text x="19.1104%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="18.8604%" y="277" width="0.3210%" height="15" fill="rgb(231,4,26)" fg:x="235" fg:w="4"/><text x="19.1104%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="18.9406%" y="261" width="0.2408%" height="15" fill="rgb(240,9,31)" fg:x="236" fg:w="3"/><text x="19.1906%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="18.9406%" y="245" width="0.2408%" height="15" fill="rgb(207,173,15)" fg:x="236" fg:w="3"/><text x="19.1906%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="19.0209%" y="229" width="0.1605%" height="15" fill="rgb(224,192,53)" fg:x="237" fg:w="2"/><text x="19.2709%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.1011%" y="213" width="0.0803%" height="15" fill="rgb(223,67,28)" fg:x="238" fg:w="1"/><text x="19.3511%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.1814%" y="325" width="0.0803%" height="15" fill="rgb(211,20,47)" fg:x="239" fg:w="1"/><text x="19.4314%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.1814%" y="309" width="0.0803%" height="15" fill="rgb(240,228,2)" fg:x="239" fg:w="1"/><text x="19.4314%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.1814%" y="293" width="0.0803%" height="15" fill="rgb(248,151,12)" fg:x="239" fg:w="1"/><text x="19.4314%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4222%" y="229" width="0.0803%" height="15" fill="rgb(244,8,39)" fg:x="242" fg:w="1"/><text x="19.6722%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4222%" y="213" width="0.0803%" height="15" fill="rgb(222,26,8)" fg:x="242" fg:w="1"/><text x="19.6722%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="19.2616%" y="261" width="0.3210%" height="15" fill="rgb(213,106,44)" fg:x="240" fg:w="4"/><text x="19.5116%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="19.4222%" y="245" width="0.1605%" height="15" fill="rgb(214,129,20)" fg:x="242" fg:w="2"/><text x="19.6722%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="19.5024%" y="229" width="0.0803%" height="15" fill="rgb(212,32,13)" fg:x="243" fg:w="1"/><text x="19.7524%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="19.2616%" y="325" width="0.4013%" height="15" fill="rgb(208,168,33)" fg:x="240" fg:w="5"/><text x="19.5116%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="19.2616%" y="309" width="0.4013%" height="15" fill="rgb(231,207,8)" fg:x="240" fg:w="5"/><text x="19.5116%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="19.2616%" y="293" width="0.4013%" height="15" fill="rgb(235,219,23)" fg:x="240" fg:w="5"/><text x="19.5116%" y="303.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.40%)</title><rect x="19.2616%" y="277" width="0.4013%" height="15" fill="rgb(226,216,26)" fg:x="240" fg:w="5"/><text x="19.5116%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="19.5827%" y="261" width="0.0803%" height="15" fill="rgb(239,137,16)" fg:x="244" fg:w="1"/><text x="19.8327%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="19.5827%" y="245" width="0.0803%" height="15" fill="rgb(207,12,36)" fg:x="244" fg:w="1"/><text x="19.8327%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.5827%" y="229" width="0.0803%" height="15" fill="rgb(210,214,24)" fg:x="244" fg:w="1"/><text x="19.8327%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.5827%" y="213" width="0.0803%" height="15" fill="rgb(206,56,30)" fg:x="244" fg:w="1"/><text x="19.8327%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5827%" y="197" width="0.0803%" height="15" fill="rgb(228,143,26)" fg:x="244" fg:w="1"/><text x="19.8327%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="19.9037%" y="261" width="0.2408%" height="15" fill="rgb(216,218,46)" fg:x="248" fg:w="3"/><text x="20.1537%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (35 samples, 2.81%)</title><rect x="20.1445%" y="261" width="2.8090%" height="15" fill="rgb(206,6,19)" fg:x="251" fg:w="35"/><text x="20.3945%" y="271.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (35 samples, 2.81%)</title><rect x="20.1445%" y="245" width="2.8090%" height="15" fill="rgb(239,177,51)" fg:x="251" fg:w="35"/><text x="20.3945%" y="255.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.8732%" y="229" width="0.0803%" height="15" fill="rgb(216,55,25)" fg:x="285" fg:w="1"/><text x="23.1232%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="22.9535%" y="261" width="0.0803%" height="15" fill="rgb(231,163,29)" fg:x="286" fg:w="1"/><text x="23.2035%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="22.9535%" y="245" width="0.0803%" height="15" fill="rgb(232,149,50)" fg:x="286" fg:w="1"/><text x="23.2035%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="22.9535%" y="229" width="0.0803%" height="15" fill="rgb(223,142,48)" fg:x="286" fg:w="1"/><text x="23.2035%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="23.4350%" y="229" width="0.0803%" height="15" fill="rgb(245,83,23)" fg:x="292" fg:w="1"/><text x="23.6850%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.5152%" y="213" width="0.0803%" height="15" fill="rgb(224,63,2)" fg:x="293" fg:w="1"/><text x="23.7652%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="23.1942%" y="245" width="0.5618%" height="15" fill="rgb(218,65,53)" fg:x="289" fg:w="7"/><text x="23.4442%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (3 samples, 0.24%)</title><rect x="23.5152%" y="229" width="0.2408%" height="15" fill="rgb(221,84,29)" fg:x="293" fg:w="3"/><text x="23.7652%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="23.5955%" y="213" width="0.1605%" height="15" fill="rgb(234,0,32)" fg:x="294" fg:w="2"/><text x="23.8455%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.6758%" y="197" width="0.0803%" height="15" fill="rgb(206,20,16)" fg:x="295" fg:w="1"/><text x="23.9258%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6758%" y="181" width="0.0803%" height="15" fill="rgb(244,172,18)" fg:x="295" fg:w="1"/><text x="23.9258%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.80%)</title><rect x="23.0337%" y="261" width="0.8026%" height="15" fill="rgb(254,133,1)" fg:x="287" fg:w="10"/><text x="23.2837%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="23.7560%" y="245" width="0.0803%" height="15" fill="rgb(222,206,41)" fg:x="296" fg:w="1"/><text x="24.0060%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="23.9165%" y="213" width="0.0803%" height="15" fill="rgb(212,3,42)" fg:x="298" fg:w="1"/><text x="24.1665%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.3981%" y="197" width="0.0803%" height="15" fill="rgb(241,11,4)" fg:x="304" fg:w="1"/><text x="24.6481%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="24.4783%" y="197" width="0.1605%" height="15" fill="rgb(205,19,26)" fg:x="305" fg:w="2"/><text x="24.7283%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.5586%" y="181" width="0.0803%" height="15" fill="rgb(210,179,32)" fg:x="306" fg:w="1"/><text x="24.8086%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.5586%" y="165" width="0.0803%" height="15" fill="rgb(227,116,49)" fg:x="306" fg:w="1"/><text x="24.8086%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.5586%" y="149" width="0.0803%" height="15" fill="rgb(211,146,6)" fg:x="306" fg:w="1"/><text x="24.8086%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="24.6388%" y="197" width="0.1605%" height="15" fill="rgb(219,44,39)" fg:x="307" fg:w="2"/><text x="24.8888%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="24.7191%" y="181" width="0.0803%" height="15" fill="rgb(234,128,11)" fg:x="308" fg:w="1"/><text x="24.9691%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="24.7191%" y="165" width="0.0803%" height="15" fill="rgb(220,183,53)" fg:x="308" fg:w="1"/><text x="24.9691%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7994%" y="165" width="0.0803%" height="15" fill="rgb(213,219,32)" fg:x="309" fg:w="1"/><text x="25.0494%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (121 samples, 9.71%)</title><rect x="24.7994%" y="197" width="9.7111%" height="15" fill="rgb(232,156,16)" fg:x="309" fg:w="121"/><text x="25.0494%" y="207.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (121 samples, 9.71%)</title><rect x="24.7994%" y="181" width="9.7111%" height="15" fill="rgb(246,135,34)" fg:x="309" fg:w="121"/><text x="25.0494%" y="191.50">regex_automata..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (120 samples, 9.63%)</title><rect x="24.8796%" y="165" width="9.6308%" height="15" fill="rgb(241,99,0)" fg:x="310" fg:w="120"/><text x="25.1296%" y="175.50">alloc::vec::Ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="34.5104%" y="197" width="0.4013%" height="15" fill="rgb(222,103,45)" fg:x="430" fg:w="5"/><text x="34.7604%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.8315%" y="181" width="0.0803%" height="15" fill="rgb(212,57,4)" fg:x="434" fg:w="1"/><text x="35.0815%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 11.16%)</title><rect x="23.9165%" y="245" width="11.1557%" height="15" fill="rgb(215,68,47)" fg:x="298" fg:w="139"/><text x="24.1665%" y="255.50">&lt;core::iter::ada..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (139 samples, 11.16%)</title><rect x="23.9165%" y="229" width="11.1557%" height="15" fill="rgb(230,84,2)" fg:x="298" fg:w="139"/><text x="24.1665%" y="239.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (138 samples, 11.08%)</title><rect x="23.9968%" y="213" width="11.0754%" height="15" fill="rgb(220,102,14)" fg:x="299" fg:w="138"/><text x="24.2468%" y="223.50">regex_automata::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="34.9117%" y="197" width="0.1605%" height="15" fill="rgb(240,10,32)" fg:x="435" fg:w="2"/><text x="35.1617%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="34.9117%" y="181" width="0.1605%" height="15" fill="rgb(215,47,27)" fg:x="435" fg:w="2"/><text x="35.1617%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.9117%" y="165" width="0.1605%" height="15" fill="rgb(233,188,43)" fg:x="435" fg:w="2"/><text x="35.1617%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="34.9117%" y="149" width="0.1605%" height="15" fill="rgb(253,190,1)" fg:x="435" fg:w="2"/><text x="35.1617%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.0722%" y="245" width="0.0803%" height="15" fill="rgb(206,114,52)" fg:x="437" fg:w="1"/><text x="35.3222%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="35.2327%" y="229" width="0.0803%" height="15" fill="rgb(233,120,37)" fg:x="439" fg:w="1"/><text x="35.4827%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.6340%" y="181" width="0.0803%" height="15" fill="rgb(214,52,39)" fg:x="444" fg:w="1"/><text x="35.8840%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="35.3130%" y="229" width="0.4815%" height="15" fill="rgb(223,80,29)" fg:x="440" fg:w="6"/><text x="35.5630%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="35.5538%" y="213" width="0.2408%" height="15" fill="rgb(230,101,40)" fg:x="443" fg:w="3"/><text x="35.8038%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.6340%" y="197" width="0.1605%" height="15" fill="rgb(219,211,8)" fg:x="444" fg:w="2"/><text x="35.8840%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.7143%" y="181" width="0.0803%" height="15" fill="rgb(252,126,28)" fg:x="445" fg:w="1"/><text x="35.9643%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.1156%" y="213" width="0.1605%" height="15" fill="rgb(215,56,38)" fg:x="450" fg:w="2"/><text x="36.3656%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="35.7945%" y="229" width="0.6421%" height="15" fill="rgb(249,55,44)" fg:x="446" fg:w="8"/><text x="36.0445%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="36.2761%" y="213" width="0.1605%" height="15" fill="rgb(220,221,32)" fg:x="452" fg:w="2"/><text x="36.5261%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.3563%" y="197" width="0.0803%" height="15" fill="rgb(212,216,41)" fg:x="453" fg:w="1"/><text x="36.6063%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.3563%" y="181" width="0.0803%" height="15" fill="rgb(228,213,43)" fg:x="453" fg:w="1"/><text x="36.6063%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="36.4366%" y="229" width="0.1605%" height="15" fill="rgb(211,31,26)" fg:x="454" fg:w="2"/><text x="36.6866%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.52%)</title><rect x="35.1525%" y="245" width="1.5249%" height="15" fill="rgb(229,202,19)" fg:x="438" fg:w="19"/><text x="35.4025%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="36.5971%" y="229" width="0.0803%" height="15" fill="rgb(229,105,46)" fg:x="456" fg:w="1"/><text x="36.8471%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="36.6774%" y="229" width="0.0803%" height="15" fill="rgb(235,108,1)" fg:x="457" fg:w="1"/><text x="36.9274%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (162 samples, 13.00%)</title><rect x="23.8363%" y="261" width="13.0016%" height="15" fill="rgb(245,111,35)" fg:x="297" fg:w="162"/><text x="24.0863%" y="271.50">regex_automata::nfa:..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="36.6774%" y="245" width="0.1605%" height="15" fill="rgb(219,185,31)" fg:x="457" fg:w="2"/><text x="36.9274%" y="255.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="36.7576%" y="229" width="0.0803%" height="15" fill="rgb(214,4,43)" fg:x="458" fg:w="1"/><text x="37.0076%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.7576%" y="213" width="0.0803%" height="15" fill="rgb(235,227,40)" fg:x="458" fg:w="1"/><text x="37.0076%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.7576%" y="197" width="0.0803%" height="15" fill="rgb(230,88,30)" fg:x="458" fg:w="1"/><text x="37.0076%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (213 samples, 17.09%)</title><rect x="19.8234%" y="277" width="17.0947%" height="15" fill="rgb(216,217,1)" fg:x="247" fg:w="213"/><text x="20.0734%" y="287.50">regex_automata::meta::stra..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="36.8379%" y="261" width="0.0803%" height="15" fill="rgb(248,139,50)" fg:x="459" fg:w="1"/><text x="37.0879%" y="271.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="36.8379%" y="245" width="0.0803%" height="15" fill="rgb(233,1,21)" fg:x="459" fg:w="1"/><text x="37.0879%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="37.0787%" y="229" width="0.0803%" height="15" fill="rgb(215,183,12)" fg:x="462" fg:w="1"/><text x="37.3287%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="37.0787%" y="213" width="0.0803%" height="15" fill="rgb(229,104,42)" fg:x="462" fg:w="1"/><text x="37.3287%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (221 samples, 17.74%)</title><rect x="19.6629%" y="325" width="17.7368%" height="15" fill="rgb(243,34,48)" fg:x="245" fg:w="221"/><text x="19.9129%" y="335.50">&lt;regex::regex::string::Regex..</text></g><g><title>regex::builders::Builder::build_one_string (221 samples, 17.74%)</title><rect x="19.6629%" y="309" width="17.7368%" height="15" fill="rgb(239,11,44)" fg:x="245" fg:w="221"/><text x="19.9129%" y="319.50">regex::builders::Builder::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (221 samples, 17.74%)</title><rect x="19.6629%" y="293" width="17.7368%" height="15" fill="rgb(231,98,35)" fg:x="245" fg:w="221"/><text x="19.9129%" y="303.50">regex_automata::meta::regex:..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="36.9181%" y="277" width="0.4815%" height="15" fill="rgb(233,28,25)" fg:x="460" fg:w="6"/><text x="37.1681%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="36.9181%" y="261" width="0.4815%" height="15" fill="rgb(234,123,11)" fg:x="460" fg:w="6"/><text x="37.1681%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="36.9181%" y="245" width="0.4815%" height="15" fill="rgb(220,69,3)" fg:x="460" fg:w="6"/><text x="37.1681%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="37.1589%" y="229" width="0.2408%" height="15" fill="rgb(214,64,36)" fg:x="463" fg:w="3"/><text x="37.4089%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="37.2392%" y="213" width="0.1605%" height="15" fill="rgb(211,138,32)" fg:x="464" fg:w="2"/><text x="37.4892%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.2392%" y="197" width="0.1605%" height="15" fill="rgb(213,118,47)" fg:x="464" fg:w="2"/><text x="37.4892%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="37.2392%" y="181" width="0.1605%" height="15" fill="rgb(243,124,49)" fg:x="464" fg:w="2"/><text x="37.4892%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="37.3997%" y="309" width="0.0803%" height="15" fill="rgb(221,30,28)" fg:x="466" fg:w="1"/><text x="37.6497%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.4799%" y="245" width="0.0803%" height="15" fill="rgb(246,37,13)" fg:x="467" fg:w="1"/><text x="37.7299%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="37.4799%" y="293" width="0.1605%" height="15" fill="rgb(249,66,14)" fg:x="467" fg:w="2"/><text x="37.7299%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="37.4799%" y="277" width="0.1605%" height="15" fill="rgb(213,166,5)" fg:x="467" fg:w="2"/><text x="37.7299%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="37.4799%" y="261" width="0.1605%" height="15" fill="rgb(221,66,24)" fg:x="467" fg:w="2"/><text x="37.7299%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.5602%" y="245" width="0.0803%" height="15" fill="rgb(210,132,17)" fg:x="468" fg:w="1"/><text x="37.8102%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="37.3997%" y="325" width="0.4815%" height="15" fill="rgb(243,202,5)" fg:x="466" fg:w="6"/><text x="37.6497%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="37.4799%" y="309" width="0.4013%" height="15" fill="rgb(233,70,48)" fg:x="467" fg:w="5"/><text x="37.7299%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="37.6404%" y="293" width="0.2408%" height="15" fill="rgb(238,41,26)" fg:x="469" fg:w="3"/><text x="37.8904%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="37.6404%" y="277" width="0.2408%" height="15" fill="rgb(241,19,31)" fg:x="469" fg:w="3"/><text x="37.8904%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="37.9615%" y="261" width="0.6421%" height="15" fill="rgb(214,76,10)" fg:x="473" fg:w="8"/><text x="38.2115%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="38.4430%" y="245" width="0.1605%" height="15" fill="rgb(254,202,22)" fg:x="479" fg:w="2"/><text x="38.6930%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5233%" y="229" width="0.0803%" height="15" fill="rgb(214,72,24)" fg:x="480" fg:w="1"/><text x="38.7733%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.5233%" y="213" width="0.0803%" height="15" fill="rgb(221,92,46)" fg:x="480" fg:w="1"/><text x="38.7733%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (245 samples, 19.66%)</title><rect x="19.1814%" y="341" width="19.6629%" height="15" fill="rgb(246,13,50)" fg:x="239" fg:w="245"/><text x="19.4314%" y="351.50">indefinite::helper::Helper::get..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="37.8812%" y="325" width="0.9631%" height="15" fill="rgb(240,165,38)" fg:x="472" fg:w="12"/><text x="38.1312%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="37.9615%" y="309" width="0.8828%" height="15" fill="rgb(241,24,51)" fg:x="473" fg:w="11"/><text x="38.2115%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="37.9615%" y="293" width="0.8828%" height="15" fill="rgb(227,51,44)" fg:x="473" fg:w="11"/><text x="38.2115%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="37.9615%" y="277" width="0.8828%" height="15" fill="rgb(231,121,3)" fg:x="473" fg:w="11"/><text x="38.2115%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="38.6035%" y="261" width="0.2408%" height="15" fill="rgb(245,3,41)" fg:x="481" fg:w="3"/><text x="38.8535%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="38.6035%" y="245" width="0.2408%" height="15" fill="rgb(214,13,26)" fg:x="481" fg:w="3"/><text x="38.8535%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="38.6035%" y="229" width="0.2408%" height="15" fill="rgb(252,75,11)" fg:x="481" fg:w="3"/><text x="38.8535%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="38.6035%" y="213" width="0.2408%" height="15" fill="rgb(218,226,17)" fg:x="481" fg:w="3"/><text x="38.8535%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.0048%" y="245" width="0.0803%" height="15" fill="rgb(248,89,38)" fg:x="486" fg:w="1"/><text x="39.2548%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="38.9246%" y="277" width="0.2408%" height="15" fill="rgb(237,73,46)" fg:x="485" fg:w="3"/><text x="39.1746%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="38.9246%" y="261" width="0.2408%" height="15" fill="rgb(242,78,33)" fg:x="485" fg:w="3"/><text x="39.1746%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.0851%" y="245" width="0.0803%" height="15" fill="rgb(235,60,3)" fg:x="487" fg:w="1"/><text x="39.3351%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="39.3258%" y="245" width="0.0803%" height="15" fill="rgb(216,172,19)" fg:x="490" fg:w="1"/><text x="39.5758%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="39.3258%" y="229" width="0.0803%" height="15" fill="rgb(227,6,42)" fg:x="490" fg:w="1"/><text x="39.5758%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="39.1653%" y="277" width="0.4013%" height="15" fill="rgb(223,207,42)" fg:x="488" fg:w="5"/><text x="39.4153%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="39.1653%" y="261" width="0.4013%" height="15" fill="rgb(246,138,30)" fg:x="488" fg:w="5"/><text x="39.4153%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="39.4061%" y="245" width="0.1605%" height="15" fill="rgb(251,199,47)" fg:x="491" fg:w="2"/><text x="39.6561%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="39.4061%" y="229" width="0.1605%" height="15" fill="rgb(228,218,44)" fg:x="491" fg:w="2"/><text x="39.6561%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="39.4864%" y="213" width="0.0803%" height="15" fill="rgb(220,68,6)" fg:x="492" fg:w="1"/><text x="39.7364%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="39.4864%" y="197" width="0.0803%" height="15" fill="rgb(240,60,26)" fg:x="492" fg:w="1"/><text x="39.7364%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.8876%" y="261" width="0.0803%" height="15" fill="rgb(211,200,19)" fg:x="497" fg:w="1"/><text x="40.1376%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.9679%" y="245" width="0.0803%" height="15" fill="rgb(242,145,30)" fg:x="498" fg:w="1"/><text x="40.2179%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (34 samples, 2.73%)</title><rect x="39.9679%" y="261" width="2.7287%" height="15" fill="rgb(225,64,13)" fg:x="498" fg:w="34"/><text x="40.2179%" y="271.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (33 samples, 2.65%)</title><rect x="40.0482%" y="245" width="2.6485%" height="15" fill="rgb(218,103,35)" fg:x="499" fg:w="33"/><text x="40.2982%" y="255.50">co..</text></g><g><title>__libc_free (7 samples, 0.56%)</title><rect x="42.1348%" y="229" width="0.5618%" height="15" fill="rgb(216,93,46)" fg:x="525" fg:w="7"/><text x="42.3848%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="42.6966%" y="261" width="0.0803%" height="15" fill="rgb(225,159,27)" fg:x="532" fg:w="1"/><text x="42.9466%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="42.8571%" y="245" width="0.4815%" height="15" fill="rgb(225,204,11)" fg:x="534" fg:w="6"/><text x="43.1071%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="43.2584%" y="229" width="0.0803%" height="15" fill="rgb(205,56,4)" fg:x="539" fg:w="1"/><text x="43.5084%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.2584%" y="213" width="0.0803%" height="15" fill="rgb(206,6,35)" fg:x="539" fg:w="1"/><text x="43.5084%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="42.7769%" y="261" width="0.6421%" height="15" fill="rgb(247,73,52)" fg:x="533" fg:w="8"/><text x="43.0269%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="43.3387%" y="245" width="0.0803%" height="15" fill="rgb(246,97,4)" fg:x="540" fg:w="1"/><text x="43.5887%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.4992%" y="229" width="0.0803%" height="15" fill="rgb(212,37,15)" fg:x="542" fg:w="1"/><text x="43.7492%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.56%)</title><rect x="44.1413%" y="197" width="0.5618%" height="15" fill="rgb(208,130,40)" fg:x="550" fg:w="7"/><text x="44.3913%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="44.1413%" y="181" width="0.5618%" height="15" fill="rgb(236,55,29)" fg:x="550" fg:w="7"/><text x="44.3913%" y="191.50"></text></g><g><title>realloc (7 samples, 0.56%)</title><rect x="44.1413%" y="165" width="0.5618%" height="15" fill="rgb(209,156,45)" fg:x="550" fg:w="7"/><text x="44.3913%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (15 samples, 1.20%)</title><rect x="43.5795%" y="229" width="1.2039%" height="15" fill="rgb(249,107,4)" fg:x="543" fg:w="15"/><text x="43.8295%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (11 samples, 0.88%)</title><rect x="43.9005%" y="213" width="0.8828%" height="15" fill="rgb(227,7,13)" fg:x="547" fg:w="11"/><text x="44.1505%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.7030%" y="197" width="0.0803%" height="15" fill="rgb(250,129,14)" fg:x="557" fg:w="1"/><text x="44.9530%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.7030%" y="181" width="0.0803%" height="15" fill="rgb(229,92,13)" fg:x="557" fg:w="1"/><text x="44.9530%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.7030%" y="165" width="0.0803%" height="15" fill="rgb(245,98,39)" fg:x="557" fg:w="1"/><text x="44.9530%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="44.7833%" y="213" width="0.3210%" height="15" fill="rgb(234,135,48)" fg:x="558" fg:w="4"/><text x="45.0333%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="44.7833%" y="197" width="0.3210%" height="15" fill="rgb(230,98,28)" fg:x="558" fg:w="4"/><text x="45.0333%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (22 samples, 1.77%)</title><rect x="43.4189%" y="261" width="1.7657%" height="15" fill="rgb(223,121,0)" fg:x="541" fg:w="22"/><text x="43.6689%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (21 samples, 1.69%)</title><rect x="43.4992%" y="245" width="1.6854%" height="15" fill="rgb(234,173,33)" fg:x="542" fg:w="21"/><text x="43.7492%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="44.7833%" y="229" width="0.4013%" height="15" fill="rgb(245,47,8)" fg:x="558" fg:w="5"/><text x="45.0333%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="45.1043%" y="213" width="0.0803%" height="15" fill="rgb(205,17,20)" fg:x="562" fg:w="1"/><text x="45.3543%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="45.1846%" y="245" width="0.0803%" height="15" fill="rgb(232,151,16)" fg:x="563" fg:w="1"/><text x="45.4346%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="45.1846%" y="261" width="0.1605%" height="15" fill="rgb(208,30,32)" fg:x="563" fg:w="2"/><text x="45.4346%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="45.2648%" y="245" width="0.0803%" height="15" fill="rgb(254,26,3)" fg:x="564" fg:w="1"/><text x="45.5148%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="45.2648%" y="229" width="0.0803%" height="15" fill="rgb(240,177,30)" fg:x="564" fg:w="1"/><text x="45.5148%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="45.4254%" y="197" width="0.0803%" height="15" fill="rgb(248,76,44)" fg:x="566" fg:w="1"/><text x="45.6754%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="45.5056%" y="181" width="0.0803%" height="15" fill="rgb(241,186,54)" fg:x="567" fg:w="1"/><text x="45.7556%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.5056%" y="165" width="0.0803%" height="15" fill="rgb(249,171,29)" fg:x="567" fg:w="1"/><text x="45.7556%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="46.6292%" y="149" width="0.7223%" height="15" fill="rgb(237,151,44)" fg:x="581" fg:w="9"/><text x="46.8792%" y="159.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="47.3515%" y="149" width="0.4013%" height="15" fill="rgb(228,174,30)" fg:x="590" fg:w="5"/><text x="47.6015%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (14 samples, 1.12%)</title><rect x="47.7528%" y="149" width="1.1236%" height="15" fill="rgb(252,14,37)" fg:x="595" fg:w="14"/><text x="48.0028%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="48.3146%" y="133" width="0.5618%" height="15" fill="rgb(207,111,40)" fg:x="602" fg:w="7"/><text x="48.5646%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="48.3146%" y="117" width="0.5618%" height="15" fill="rgb(248,171,54)" fg:x="602" fg:w="7"/><text x="48.5646%" y="127.50"></text></g><g><title>realloc (7 samples, 0.56%)</title><rect x="48.3146%" y="101" width="0.5618%" height="15" fill="rgb(211,127,2)" fg:x="602" fg:w="7"/><text x="48.5646%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="48.8764%" y="149" width="0.3210%" height="15" fill="rgb(236,87,47)" fg:x="609" fg:w="4"/><text x="49.1264%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.1172%" y="133" width="0.0803%" height="15" fill="rgb(223,190,45)" fg:x="612" fg:w="1"/><text x="49.3672%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.1172%" y="117" width="0.0803%" height="15" fill="rgb(215,5,16)" fg:x="612" fg:w="1"/><text x="49.3672%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.1172%" y="101" width="0.0803%" height="15" fill="rgb(252,82,33)" fg:x="612" fg:w="1"/><text x="49.3672%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="49.6790%" y="117" width="0.1605%" height="15" fill="rgb(247,213,44)" fg:x="619" fg:w="2"/><text x="49.9290%" y="127.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="49.9197%" y="85" width="0.2408%" height="15" fill="rgb(205,196,44)" fg:x="622" fg:w="3"/><text x="50.1697%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="49.8395%" y="117" width="0.4013%" height="15" fill="rgb(237,96,54)" fg:x="621" fg:w="5"/><text x="50.0895%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="49.8395%" y="101" width="0.4013%" height="15" fill="rgb(230,113,34)" fg:x="621" fg:w="5"/><text x="50.0895%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.1605%" y="85" width="0.0803%" height="15" fill="rgb(221,224,12)" fg:x="625" fg:w="1"/><text x="50.4105%" y="95.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="50.5618%" y="53" width="0.0803%" height="15" fill="rgb(219,112,44)" fg:x="630" fg:w="1"/><text x="50.8118%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="50.5618%" y="37" width="0.0803%" height="15" fill="rgb(210,31,13)" fg:x="630" fg:w="1"/><text x="50.8118%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (19 samples, 1.52%)</title><rect x="49.1974%" y="149" width="1.5249%" height="15" fill="rgb(230,25,16)" fg:x="613" fg:w="19"/><text x="49.4474%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (15 samples, 1.20%)</title><rect x="49.5185%" y="133" width="1.2039%" height="15" fill="rgb(246,108,53)" fg:x="617" fg:w="15"/><text x="49.7685%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="50.2408%" y="117" width="0.4815%" height="15" fill="rgb(241,172,50)" fg:x="626" fg:w="6"/><text x="50.4908%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="50.5618%" y="101" width="0.1605%" height="15" fill="rgb(235,141,10)" fg:x="630" fg:w="2"/><text x="50.8118%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="50.5618%" y="85" width="0.1605%" height="15" fill="rgb(220,174,43)" fg:x="630" fg:w="2"/><text x="50.8118%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.5618%" y="69" width="0.1605%" height="15" fill="rgb(215,181,40)" fg:x="630" fg:w="2"/><text x="50.8118%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.6421%" y="53" width="0.0803%" height="15" fill="rgb(230,97,2)" fg:x="631" fg:w="1"/><text x="50.8921%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (117 samples, 9.39%)</title><rect x="50.7223%" y="149" width="9.3900%" height="15" fill="rgb(211,25,27)" fg:x="632" fg:w="117"/><text x="50.9723%" y="159.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (117 samples, 9.39%)</title><rect x="50.7223%" y="133" width="9.3900%" height="15" fill="rgb(230,87,26)" fg:x="632" fg:w="117"/><text x="50.9723%" y="143.50">regex_automat..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (117 samples, 9.39%)</title><rect x="50.7223%" y="117" width="9.3900%" height="15" fill="rgb(227,160,17)" fg:x="632" fg:w="117"/><text x="50.9723%" y="127.50">alloc::vec::V..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="60.1124%" y="149" width="0.0803%" height="15" fill="rgb(244,85,34)" fg:x="749" fg:w="1"/><text x="60.3624%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="60.1926%" y="149" width="0.1605%" height="15" fill="rgb(207,70,0)" fg:x="750" fg:w="2"/><text x="60.4426%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 15.57%)</title><rect x="45.3451%" y="245" width="15.5698%" height="15" fill="rgb(223,129,7)" fg:x="565" fg:w="194"/><text x="45.5951%" y="255.50">&lt;core::iter::adapters::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (194 samples, 15.57%)</title><rect x="45.3451%" y="229" width="15.5698%" height="15" fill="rgb(246,105,7)" fg:x="565" fg:w="194"/><text x="45.5951%" y="239.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (194 samples, 15.57%)</title><rect x="45.3451%" y="213" width="15.5698%" height="15" fill="rgb(215,154,42)" fg:x="565" fg:w="194"/><text x="45.5951%" y="223.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (192 samples, 15.41%)</title><rect x="45.5056%" y="197" width="15.4093%" height="15" fill="rgb(220,215,30)" fg:x="567" fg:w="192"/><text x="45.7556%" y="207.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (191 samples, 15.33%)</title><rect x="45.5859%" y="181" width="15.3291%" height="15" fill="rgb(228,81,51)" fg:x="568" fg:w="191"/><text x="45.8359%" y="191.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (190 samples, 15.25%)</title><rect x="45.6661%" y="165" width="15.2488%" height="15" fill="rgb(247,71,54)" fg:x="569" fg:w="190"/><text x="45.9161%" y="175.50">regex_automata::nfa::th..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.56%)</title><rect x="60.3531%" y="149" width="0.5618%" height="15" fill="rgb(234,176,34)" fg:x="752" fg:w="7"/><text x="60.6031%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="60.5939%" y="133" width="0.3210%" height="15" fill="rgb(241,103,54)" fg:x="755" fg:w="4"/><text x="60.8439%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.7544%" y="117" width="0.1605%" height="15" fill="rgb(228,22,34)" fg:x="757" fg:w="2"/><text x="61.0044%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8347%" y="101" width="0.0803%" height="15" fill="rgb(241,179,48)" fg:x="758" fg:w="1"/><text x="61.0847%" y="111.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="61.1557%" y="229" width="0.1605%" height="15" fill="rgb(235,167,37)" fg:x="762" fg:w="2"/><text x="61.4057%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="61.3162%" y="229" width="0.2408%" height="15" fill="rgb(213,109,30)" fg:x="764" fg:w="3"/><text x="61.5662%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (14 samples, 1.12%)</title><rect x="61.5570%" y="229" width="1.1236%" height="15" fill="rgb(222,172,16)" fg:x="767" fg:w="14"/><text x="61.8070%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="62.3596%" y="213" width="0.3210%" height="15" fill="rgb(233,192,5)" fg:x="777" fg:w="4"/><text x="62.6096%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="62.3596%" y="197" width="0.3210%" height="15" fill="rgb(247,189,41)" fg:x="777" fg:w="4"/><text x="62.6096%" y="207.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="62.3596%" y="181" width="0.3210%" height="15" fill="rgb(218,134,47)" fg:x="777" fg:w="4"/><text x="62.6096%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="62.6806%" y="229" width="0.4815%" height="15" fill="rgb(216,29,3)" fg:x="781" fg:w="6"/><text x="62.9306%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="63.1621%" y="229" width="0.0803%" height="15" fill="rgb(246,140,12)" fg:x="787" fg:w="1"/><text x="63.4121%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.3226%" y="213" width="0.1605%" height="15" fill="rgb(230,136,11)" fg:x="789" fg:w="2"/><text x="63.5726%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (299 samples, 24.00%)</title><rect x="39.5666%" y="277" width="23.9968%" height="15" fill="rgb(247,22,47)" fg:x="493" fg:w="299"/><text x="39.8166%" y="287.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (227 samples, 18.22%)</title><rect x="45.3451%" y="261" width="18.2183%" height="15" fill="rgb(218,84,22)" fg:x="565" fg:w="227"/><text x="45.5951%" y="271.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (33 samples, 2.65%)</title><rect x="60.9149%" y="245" width="2.6485%" height="15" fill="rgb(216,87,39)" fg:x="759" fg:w="33"/><text x="61.1649%" y="255.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (4 samples, 0.32%)</title><rect x="63.2424%" y="229" width="0.3210%" height="15" fill="rgb(221,178,8)" fg:x="788" fg:w="4"/><text x="63.4924%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.4831%" y="213" width="0.0803%" height="15" fill="rgb(230,42,11)" fg:x="791" fg:w="1"/><text x="63.7331%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.4831%" y="197" width="0.0803%" height="15" fill="rgb(237,229,4)" fg:x="791" fg:w="1"/><text x="63.7331%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.4831%" y="181" width="0.0803%" height="15" fill="rgb(222,31,33)" fg:x="791" fg:w="1"/><text x="63.7331%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="63.8844%" y="245" width="0.0803%" height="15" fill="rgb(210,17,39)" fg:x="796" fg:w="1"/><text x="64.1344%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.0449%" y="229" width="0.0803%" height="15" fill="rgb(244,93,20)" fg:x="798" fg:w="1"/><text x="64.2949%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="64.1252%" y="213" width="0.0803%" height="15" fill="rgb(210,40,47)" fg:x="799" fg:w="1"/><text x="64.3752%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="64.1252%" y="197" width="0.0803%" height="15" fill="rgb(239,211,47)" fg:x="799" fg:w="1"/><text x="64.3752%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="64.1252%" y="229" width="0.1605%" height="15" fill="rgb(251,223,49)" fg:x="799" fg:w="2"/><text x="64.3752%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="64.2055%" y="213" width="0.0803%" height="15" fill="rgb(221,149,5)" fg:x="800" fg:w="1"/><text x="64.4555%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="63.9647%" y="245" width="0.4013%" height="15" fill="rgb(219,224,51)" fg:x="797" fg:w="5"/><text x="64.2147%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="64.2857%" y="229" width="0.0803%" height="15" fill="rgb(223,7,8)" fg:x="801" fg:w="1"/><text x="64.5357%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.2857%" y="213" width="0.0803%" height="15" fill="rgb(241,217,22)" fg:x="801" fg:w="1"/><text x="64.5357%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.2857%" y="197" width="0.0803%" height="15" fill="rgb(248,209,0)" fg:x="801" fg:w="1"/><text x="64.5357%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2857%" y="181" width="0.0803%" height="15" fill="rgb(217,205,4)" fg:x="801" fg:w="1"/><text x="64.5357%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="64.3660%" y="245" width="0.1605%" height="15" fill="rgb(228,124,39)" fg:x="802" fg:w="2"/><text x="64.6160%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="64.3660%" y="229" width="0.1605%" height="15" fill="rgb(250,116,42)" fg:x="802" fg:w="2"/><text x="64.6160%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.04%)</title><rect x="63.5634%" y="277" width="1.0433%" height="15" fill="rgb(223,202,9)" fg:x="792" fg:w="13"/><text x="63.8134%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.04%)</title><rect x="63.5634%" y="261" width="1.0433%" height="15" fill="rgb(242,222,40)" fg:x="792" fg:w="13"/><text x="63.8134%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.5265%" y="245" width="0.0803%" height="15" fill="rgb(229,99,46)" fg:x="804" fg:w="1"/><text x="64.7765%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="64.5265%" y="229" width="0.0803%" height="15" fill="rgb(225,56,46)" fg:x="804" fg:w="1"/><text x="64.7765%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="64.6870%" y="229" width="0.1605%" height="15" fill="rgb(227,94,5)" fg:x="806" fg:w="2"/><text x="64.9370%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="64.6870%" y="213" width="0.1605%" height="15" fill="rgb(205,112,38)" fg:x="806" fg:w="2"/><text x="64.9370%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="64.8475%" y="229" width="0.0803%" height="15" fill="rgb(231,133,46)" fg:x="808" fg:w="1"/><text x="65.0975%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="64.8475%" y="213" width="0.0803%" height="15" fill="rgb(217,16,9)" fg:x="808" fg:w="1"/><text x="65.0975%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="64.6870%" y="245" width="0.3210%" height="15" fill="rgb(249,173,9)" fg:x="806" fg:w="4"/><text x="64.9370%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="64.9278%" y="229" width="0.0803%" height="15" fill="rgb(205,163,53)" fg:x="809" fg:w="1"/><text x="65.1778%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="65.0080%" y="245" width="0.1605%" height="15" fill="rgb(217,54,41)" fg:x="810" fg:w="2"/><text x="65.2580%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="65.0883%" y="229" width="0.0803%" height="15" fill="rgb(228,216,12)" fg:x="811" fg:w="1"/><text x="65.3383%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (330 samples, 26.48%)</title><rect x="38.8443%" y="325" width="26.4848%" height="15" fill="rgb(244,228,15)" fg:x="484" fg:w="330"/><text x="39.0943%" y="335.50">&lt;regex::regex::string::Regex as core::str:..</text></g><g><title>regex::builders::Builder::build_one_string (330 samples, 26.48%)</title><rect x="38.8443%" y="309" width="26.4848%" height="15" fill="rgb(221,176,53)" fg:x="484" fg:w="330"/><text x="39.0943%" y="319.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (330 samples, 26.48%)</title><rect x="38.8443%" y="293" width="26.4848%" height="15" fill="rgb(205,94,34)" fg:x="484" fg:w="330"/><text x="39.0943%" y="303.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="64.6067%" y="277" width="0.7223%" height="15" fill="rgb(213,110,48)" fg:x="805" fg:w="9"/><text x="64.8567%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="64.6067%" y="261" width="0.7223%" height="15" fill="rgb(236,142,28)" fg:x="805" fg:w="9"/><text x="64.8567%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="65.1685%" y="245" width="0.1605%" height="15" fill="rgb(225,135,29)" fg:x="812" fg:w="2"/><text x="65.4185%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2 samples, 0.16%)</title><rect x="65.1685%" y="229" width="0.1605%" height="15" fill="rgb(252,45,31)" fg:x="812" fg:w="2"/><text x="65.4185%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.1685%" y="213" width="0.1605%" height="15" fill="rgb(211,187,50)" fg:x="812" fg:w="2"/><text x="65.4185%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.1685%" y="197" width="0.1605%" height="15" fill="rgb(229,109,7)" fg:x="812" fg:w="2"/><text x="65.4185%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.2488%" y="181" width="0.0803%" height="15" fill="rgb(251,131,51)" fg:x="813" fg:w="1"/><text x="65.4988%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.3291%" y="277" width="0.0803%" height="15" fill="rgb(251,180,35)" fg:x="814" fg:w="1"/><text x="65.5791%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.3291%" y="261" width="0.0803%" height="15" fill="rgb(211,46,32)" fg:x="814" fg:w="1"/><text x="65.5791%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.4093%" y="245" width="0.0803%" height="15" fill="rgb(248,123,17)" fg:x="815" fg:w="1"/><text x="65.6593%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="65.3291%" y="293" width="0.2408%" height="15" fill="rgb(227,141,18)" fg:x="814" fg:w="3"/><text x="65.5791%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="65.4093%" y="277" width="0.1605%" height="15" fill="rgb(216,102,9)" fg:x="815" fg:w="2"/><text x="65.6593%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="65.4093%" y="261" width="0.1605%" height="15" fill="rgb(253,47,13)" fg:x="815" fg:w="2"/><text x="65.6593%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4896%" y="245" width="0.0803%" height="15" fill="rgb(226,93,23)" fg:x="816" fg:w="1"/><text x="65.7396%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="65.5698%" y="277" width="0.0803%" height="15" fill="rgb(247,104,17)" fg:x="817" fg:w="1"/><text x="65.8198%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5698%" y="261" width="0.0803%" height="15" fill="rgb(233,203,26)" fg:x="817" fg:w="1"/><text x="65.8198%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="65.3291%" y="325" width="0.4013%" height="15" fill="rgb(244,98,49)" fg:x="814" fg:w="5"/><text x="65.5791%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="65.3291%" y="309" width="0.4013%" height="15" fill="rgb(235,134,22)" fg:x="814" fg:w="5"/><text x="65.5791%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="65.5698%" y="293" width="0.1605%" height="15" fill="rgb(221,70,32)" fg:x="817" fg:w="2"/><text x="65.8198%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="65.6501%" y="277" width="0.0803%" height="15" fill="rgb(238,15,50)" fg:x="818" fg:w="1"/><text x="65.9001%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.6501%" y="261" width="0.0803%" height="15" fill="rgb(215,221,48)" fg:x="818" fg:w="1"/><text x="65.9001%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="65.7303%" y="309" width="0.1605%" height="15" fill="rgb(236,73,3)" fg:x="819" fg:w="2"/><text x="65.9803%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="65.7303%" y="293" width="0.1605%" height="15" fill="rgb(250,107,11)" fg:x="819" fg:w="2"/><text x="65.9803%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="65.7303%" y="277" width="0.1605%" height="15" fill="rgb(242,39,14)" fg:x="819" fg:w="2"/><text x="65.9803%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="65.7303%" y="261" width="0.1605%" height="15" fill="rgb(248,164,37)" fg:x="819" fg:w="2"/><text x="65.9803%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3724%" y="197" width="0.0803%" height="15" fill="rgb(217,60,12)" fg:x="827" fg:w="1"/><text x="66.6224%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="66.2921%" y="229" width="0.3210%" height="15" fill="rgb(240,125,29)" fg:x="826" fg:w="4"/><text x="66.5421%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="66.2921%" y="213" width="0.3210%" height="15" fill="rgb(208,207,28)" fg:x="826" fg:w="4"/><text x="66.5421%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="66.4526%" y="197" width="0.1605%" height="15" fill="rgb(209,159,27)" fg:x="828" fg:w="2"/><text x="66.7026%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="66.6132%" y="213" width="0.1605%" height="15" fill="rgb(251,176,53)" fg:x="830" fg:w="2"/><text x="66.8632%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="66.6132%" y="229" width="0.2408%" height="15" fill="rgb(211,85,7)" fg:x="830" fg:w="3"/><text x="66.8632%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.7737%" y="213" width="0.0803%" height="15" fill="rgb(216,64,54)" fg:x="832" fg:w="1"/><text x="67.0237%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.7737%" y="197" width="0.0803%" height="15" fill="rgb(217,54,24)" fg:x="832" fg:w="1"/><text x="67.0237%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.36%)</title><rect x="65.9711%" y="245" width="1.3644%" height="15" fill="rgb(208,206,53)" fg:x="822" fg:w="17"/><text x="66.2211%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="66.8539%" y="229" width="0.4815%" height="15" fill="rgb(251,74,39)" fg:x="833" fg:w="6"/><text x="67.1039%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.44%)</title><rect x="65.9711%" y="261" width="1.4446%" height="15" fill="rgb(226,47,5)" fg:x="822" fg:w="18"/><text x="66.2211%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="67.3355%" y="245" width="0.0803%" height="15" fill="rgb(234,111,33)" fg:x="839" fg:w="1"/><text x="67.5855%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (357 samples, 28.65%)</title><rect x="38.8443%" y="341" width="28.6517%" height="15" fill="rgb(251,14,10)" fg:x="484" fg:w="357"/><text x="39.0943%" y="351.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (22 samples, 1.77%)</title><rect x="65.7303%" y="325" width="1.7657%" height="15" fill="rgb(232,43,0)" fg:x="819" fg:w="22"/><text x="65.9803%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (20 samples, 1.61%)</title><rect x="65.8909%" y="309" width="1.6051%" height="15" fill="rgb(222,68,43)" fg:x="821" fg:w="20"/><text x="66.1409%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (20 samples, 1.61%)</title><rect x="65.8909%" y="293" width="1.6051%" height="15" fill="rgb(217,24,23)" fg:x="821" fg:w="20"/><text x="66.1409%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (20 samples, 1.61%)</title><rect x="65.8909%" y="277" width="1.6051%" height="15" fill="rgb(229,209,14)" fg:x="821" fg:w="20"/><text x="66.1409%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="67.4157%" y="261" width="0.0803%" height="15" fill="rgb(250,149,48)" fg:x="840" fg:w="1"/><text x="67.6657%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="67.4157%" y="245" width="0.0803%" height="15" fill="rgb(210,120,37)" fg:x="840" fg:w="1"/><text x="67.6657%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.4157%" y="229" width="0.0803%" height="15" fill="rgb(210,21,8)" fg:x="840" fg:w="1"/><text x="67.6657%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.4157%" y="213" width="0.0803%" height="15" fill="rgb(243,145,7)" fg:x="840" fg:w="1"/><text x="67.6657%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4157%" y="197" width="0.0803%" height="15" fill="rgb(238,178,32)" fg:x="840" fg:w="1"/><text x="67.6657%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4960%" y="325" width="0.0803%" height="15" fill="rgb(222,4,10)" fg:x="841" fg:w="1"/><text x="67.7460%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.6565%" y="261" width="0.0803%" height="15" fill="rgb(239,7,37)" fg:x="843" fg:w="1"/><text x="67.9065%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.6565%" y="245" width="0.0803%" height="15" fill="rgb(215,31,37)" fg:x="843" fg:w="1"/><text x="67.9065%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.7368%" y="197" width="0.0803%" height="15" fill="rgb(224,83,33)" fg:x="844" fg:w="1"/><text x="67.9868%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="67.7368%" y="261" width="0.1605%" height="15" fill="rgb(239,55,3)" fg:x="844" fg:w="2"/><text x="67.9868%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.7368%" y="245" width="0.1605%" height="15" fill="rgb(247,92,11)" fg:x="844" fg:w="2"/><text x="67.9868%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="67.7368%" y="229" width="0.1605%" height="15" fill="rgb(239,200,7)" fg:x="844" fg:w="2"/><text x="67.9868%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.7368%" y="213" width="0.1605%" height="15" fill="rgb(227,115,8)" fg:x="844" fg:w="2"/><text x="67.9868%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8170%" y="197" width="0.0803%" height="15" fill="rgb(215,189,27)" fg:x="845" fg:w="1"/><text x="68.0670%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.1380%" y="245" width="0.1605%" height="15" fill="rgb(251,216,39)" fg:x="849" fg:w="2"/><text x="68.3880%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="68.2986%" y="245" width="0.0803%" height="15" fill="rgb(207,29,47)" fg:x="851" fg:w="1"/><text x="68.5486%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2986%" y="229" width="0.0803%" height="15" fill="rgb(210,71,34)" fg:x="851" fg:w="1"/><text x="68.5486%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="68.4591%" y="229" width="0.5618%" height="15" fill="rgb(253,217,51)" fg:x="853" fg:w="7"/><text x="68.7091%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.72%)</title><rect x="68.3788%" y="245" width="0.7223%" height="15" fill="rgb(222,117,46)" fg:x="852" fg:w="9"/><text x="68.6288%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="69.0209%" y="229" width="0.0803%" height="15" fill="rgb(226,132,6)" fg:x="860" fg:w="1"/><text x="69.2709%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="69.0209%" y="213" width="0.0803%" height="15" fill="rgb(254,145,51)" fg:x="860" fg:w="1"/><text x="69.2709%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="69.1011%" y="245" width="0.0803%" height="15" fill="rgb(231,199,27)" fg:x="861" fg:w="1"/><text x="69.3511%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="69.1011%" y="229" width="0.0803%" height="15" fill="rgb(245,158,14)" fg:x="861" fg:w="1"/><text x="69.3511%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="69.1011%" y="213" width="0.0803%" height="15" fill="rgb(240,113,14)" fg:x="861" fg:w="1"/><text x="69.3511%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="69.2616%" y="229" width="0.1605%" height="15" fill="rgb(210,20,13)" fg:x="863" fg:w="2"/><text x="69.5116%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="69.2616%" y="213" width="0.1605%" height="15" fill="rgb(241,144,13)" fg:x="863" fg:w="2"/><text x="69.5116%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="69.2616%" y="197" width="0.1605%" height="15" fill="rgb(235,43,34)" fg:x="863" fg:w="2"/><text x="69.5116%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="69.2616%" y="181" width="0.1605%" height="15" fill="rgb(208,36,20)" fg:x="863" fg:w="2"/><text x="69.5116%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="69.3419%" y="165" width="0.0803%" height="15" fill="rgb(239,204,10)" fg:x="864" fg:w="1"/><text x="69.5919%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.3419%" y="149" width="0.0803%" height="15" fill="rgb(217,84,43)" fg:x="864" fg:w="1"/><text x="69.5919%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.3419%" y="133" width="0.0803%" height="15" fill="rgb(241,170,50)" fg:x="864" fg:w="1"/><text x="69.5919%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.3419%" y="117" width="0.0803%" height="15" fill="rgb(226,205,29)" fg:x="864" fg:w="1"/><text x="69.5919%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5827%" y="213" width="0.0803%" height="15" fill="rgb(233,113,1)" fg:x="867" fg:w="1"/><text x="69.8327%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="69.6629%" y="213" width="0.1605%" height="15" fill="rgb(253,98,13)" fg:x="868" fg:w="2"/><text x="69.9129%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.01%)</title><rect x="67.8973%" y="261" width="2.0064%" height="15" fill="rgb(211,115,12)" fg:x="846" fg:w="25"/><text x="68.1473%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="69.1814%" y="245" width="0.7223%" height="15" fill="rgb(208,12,16)" fg:x="862" fg:w="9"/><text x="69.4314%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="69.4222%" y="229" width="0.4815%" height="15" fill="rgb(237,193,54)" fg:x="865" fg:w="6"/><text x="69.6722%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="69.8234%" y="213" width="0.0803%" height="15" fill="rgb(243,22,42)" fg:x="870" fg:w="1"/><text x="70.0734%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="69.8234%" y="197" width="0.0803%" height="15" fill="rgb(233,151,36)" fg:x="870" fg:w="1"/><text x="70.0734%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.8234%" y="181" width="0.0803%" height="15" fill="rgb(237,57,45)" fg:x="870" fg:w="1"/><text x="70.0734%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.8234%" y="165" width="0.0803%" height="15" fill="rgb(221,88,17)" fg:x="870" fg:w="1"/><text x="70.0734%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8234%" y="149" width="0.0803%" height="15" fill="rgb(230,79,15)" fg:x="870" fg:w="1"/><text x="70.0734%" y="159.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (3 samples, 0.24%)</title><rect x="69.9037%" y="213" width="0.2408%" height="15" fill="rgb(213,57,13)" fg:x="871" fg:w="3"/><text x="70.1537%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="69.9037%" y="197" width="0.2408%" height="15" fill="rgb(222,116,39)" fg:x="871" fg:w="3"/><text x="70.1537%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="69.9037%" y="181" width="0.2408%" height="15" fill="rgb(245,107,2)" fg:x="871" fg:w="3"/><text x="70.1537%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="69.9037%" y="165" width="0.2408%" height="15" fill="rgb(238,1,10)" fg:x="871" fg:w="3"/><text x="70.1537%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="70.1445%" y="213" width="0.0803%" height="15" fill="rgb(249,4,48)" fg:x="874" fg:w="1"/><text x="70.3945%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="70.2247%" y="213" width="0.0803%" height="15" fill="rgb(223,151,18)" fg:x="875" fg:w="1"/><text x="70.4747%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="70.2247%" y="197" width="0.0803%" height="15" fill="rgb(227,65,43)" fg:x="875" fg:w="1"/><text x="70.4747%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="69.9037%" y="261" width="0.4815%" height="15" fill="rgb(218,40,45)" fg:x="871" fg:w="6"/><text x="70.1537%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="69.9037%" y="245" width="0.4815%" height="15" fill="rgb(252,121,31)" fg:x="871" fg:w="6"/><text x="70.1537%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="69.9037%" y="229" width="0.4815%" height="15" fill="rgb(219,158,43)" fg:x="871" fg:w="6"/><text x="70.1537%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="70.3050%" y="213" width="0.0803%" height="15" fill="rgb(231,162,42)" fg:x="876" fg:w="1"/><text x="70.5550%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="70.3852%" y="261" width="0.2408%" height="15" fill="rgb(217,179,25)" fg:x="877" fg:w="3"/><text x="70.6352%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="70.3852%" y="245" width="0.2408%" height="15" fill="rgb(206,212,31)" fg:x="877" fg:w="3"/><text x="70.6352%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="70.3852%" y="229" width="0.2408%" height="15" fill="rgb(235,144,12)" fg:x="877" fg:w="3"/><text x="70.6352%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="70.3852%" y="213" width="0.2408%" height="15" fill="rgb(213,51,10)" fg:x="877" fg:w="3"/><text x="70.6352%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (39 samples, 3.13%)</title><rect x="67.5762%" y="277" width="3.1300%" height="15" fill="rgb(231,145,14)" fg:x="842" fg:w="39"/><text x="67.8262%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::build (1 samples, 0.08%)</title><rect x="70.6260%" y="261" width="0.0803%" height="15" fill="rgb(235,15,28)" fg:x="880" fg:w="1"/><text x="70.8760%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (40 samples, 3.21%)</title><rect x="67.5762%" y="309" width="3.2103%" height="15" fill="rgb(237,206,10)" fg:x="842" fg:w="40"/><text x="67.8262%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (40 samples, 3.21%)</title><rect x="67.5762%" y="293" width="3.2103%" height="15" fill="rgb(236,227,27)" fg:x="842" fg:w="40"/><text x="67.8262%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="70.7063%" y="277" width="0.0803%" height="15" fill="rgb(246,83,35)" fg:x="881" fg:w="1"/><text x="70.9563%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7865%" y="261" width="0.0803%" height="15" fill="rgb(220,136,24)" fg:x="882" fg:w="1"/><text x="71.0365%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8668%" y="261" width="0.0803%" height="15" fill="rgb(217,3,25)" fg:x="883" fg:w="1"/><text x="71.1168%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8668%" y="245" width="0.0803%" height="15" fill="rgb(239,24,14)" fg:x="883" fg:w="1"/><text x="71.1168%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.8668%" y="229" width="0.0803%" height="15" fill="rgb(244,16,53)" fg:x="883" fg:w="1"/><text x="71.1168%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="70.7865%" y="309" width="0.2408%" height="15" fill="rgb(208,175,44)" fg:x="882" fg:w="3"/><text x="71.0365%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="70.7865%" y="293" width="0.2408%" height="15" fill="rgb(252,18,48)" fg:x="882" fg:w="3"/><text x="71.0365%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="70.7865%" y="277" width="0.2408%" height="15" fill="rgb(234,199,32)" fg:x="882" fg:w="3"/><text x="71.0365%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="70.9470%" y="261" width="0.0803%" height="15" fill="rgb(225,77,54)" fg:x="884" fg:w="1"/><text x="71.1970%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="71.0273%" y="277" width="0.0803%" height="15" fill="rgb(225,42,25)" fg:x="885" fg:w="1"/><text x="71.2773%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="71.0273%" y="261" width="0.0803%" height="15" fill="rgb(242,227,46)" fg:x="885" fg:w="1"/><text x="71.2773%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="71.0273%" y="245" width="0.0803%" height="15" fill="rgb(246,197,35)" fg:x="885" fg:w="1"/><text x="71.2773%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="71.0273%" y="309" width="0.1605%" height="15" fill="rgb(215,159,26)" fg:x="885" fg:w="2"/><text x="71.2773%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="71.0273%" y="293" width="0.1605%" height="15" fill="rgb(212,194,50)" fg:x="885" fg:w="2"/><text x="71.2773%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="71.1075%" y="277" width="0.0803%" height="15" fill="rgb(246,132,1)" fg:x="886" fg:w="1"/><text x="71.3575%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="71.1075%" y="261" width="0.0803%" height="15" fill="rgb(217,71,7)" fg:x="886" fg:w="1"/><text x="71.3575%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1075%" y="245" width="0.0803%" height="15" fill="rgb(252,59,32)" fg:x="886" fg:w="1"/><text x="71.3575%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="71.1878%" y="245" width="0.6421%" height="15" fill="rgb(253,204,25)" fg:x="887" fg:w="8"/><text x="71.4378%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="71.6693%" y="229" width="0.1605%" height="15" fill="rgb(232,21,16)" fg:x="893" fg:w="2"/><text x="71.9193%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="71.6693%" y="213" width="0.1605%" height="15" fill="rgb(248,90,29)" fg:x="893" fg:w="2"/><text x="71.9193%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7496%" y="197" width="0.0803%" height="15" fill="rgb(249,223,7)" fg:x="894" fg:w="1"/><text x="71.9996%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (54 samples, 4.33%)</title><rect x="67.5762%" y="325" width="4.3339%" height="15" fill="rgb(231,119,42)" fg:x="842" fg:w="54"/><text x="67.8262%" y="335.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="71.1878%" y="309" width="0.7223%" height="15" fill="rgb(215,41,35)" fg:x="887" fg:w="9"/><text x="71.4378%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="71.1878%" y="293" width="0.7223%" height="15" fill="rgb(220,44,45)" fg:x="887" fg:w="9"/><text x="71.4378%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="71.1878%" y="277" width="0.7223%" height="15" fill="rgb(253,197,36)" fg:x="887" fg:w="9"/><text x="71.4378%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="71.1878%" y="261" width="0.7223%" height="15" fill="rgb(245,225,54)" fg:x="887" fg:w="9"/><text x="71.4378%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="71.8299%" y="245" width="0.0803%" height="15" fill="rgb(239,94,37)" fg:x="895" fg:w="1"/><text x="72.0799%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (679 samples, 54.49%)</title><rect x="17.7368%" y="421" width="54.4944%" height="15" fill="rgb(242,217,10)" fg:x="221" fg:w="679"/><text x="17.9868%" y="431.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEn..</text></g><g><title>plugins_core::looking::model::qualify_name (661 samples, 53.05%)</title><rect x="19.1814%" y="405" width="53.0498%" height="15" fill="rgb(250,193,7)" fg:x="239" fg:w="661"/><text x="19.4314%" y="415.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (661 samples, 53.05%)</title><rect x="19.1814%" y="389" width="53.0498%" height="15" fill="rgb(230,104,19)" fg:x="239" fg:w="661"/><text x="19.4314%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (661 samples, 53.05%)</title><rect x="19.1814%" y="373" width="53.0498%" height="15" fill="rgb(230,181,4)" fg:x="239" fg:w="661"/><text x="19.4314%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (661 samples, 53.05%)</title><rect x="19.1814%" y="357" width="53.0498%" height="15" fill="rgb(216,219,49)" fg:x="239" fg:w="661"/><text x="19.4314%" y="367.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (59 samples, 4.74%)</title><rect x="67.4960%" y="341" width="4.7352%" height="15" fill="rgb(254,144,0)" fg:x="841" fg:w="59"/><text x="67.7460%" y="351.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (4 samples, 0.32%)</title><rect x="71.9101%" y="325" width="0.3210%" height="15" fill="rgb(205,209,38)" fg:x="896" fg:w="4"/><text x="72.1601%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="72.2311%" y="389" width="0.1605%" height="15" fill="rgb(240,21,42)" fg:x="900" fg:w="2"/><text x="72.4811%" y="399.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="72.3114%" y="373" width="0.0803%" height="15" fill="rgb(241,132,3)" fg:x="901" fg:w="1"/><text x="72.5614%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.3114%" y="357" width="0.0803%" height="15" fill="rgb(225,14,2)" fg:x="901" fg:w="1"/><text x="72.5614%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.3114%" y="341" width="0.0803%" height="15" fill="rgb(210,141,35)" fg:x="901" fg:w="1"/><text x="72.5614%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (3 samples, 0.24%)</title><rect x="72.2311%" y="421" width="0.2408%" height="15" fill="rgb(251,14,44)" fg:x="900" fg:w="3"/><text x="72.4811%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="72.2311%" y="405" width="0.2408%" height="15" fill="rgb(247,48,18)" fg:x="900" fg:w="3"/><text x="72.4811%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="72.3917%" y="389" width="0.0803%" height="15" fill="rgb(225,0,40)" fg:x="902" fg:w="1"/><text x="72.6417%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3917%" y="373" width="0.0803%" height="15" fill="rgb(221,31,33)" fg:x="902" fg:w="1"/><text x="72.6417%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3917%" y="357" width="0.0803%" height="15" fill="rgb(237,42,40)" fg:x="902" fg:w="1"/><text x="72.6417%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.3917%" y="341" width="0.0803%" height="15" fill="rgb(233,51,29)" fg:x="902" fg:w="1"/><text x="72.6417%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.3917%" y="325" width="0.0803%" height="15" fill="rgb(226,58,20)" fg:x="902" fg:w="1"/><text x="72.6417%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.3917%" y="309" width="0.0803%" height="15" fill="rgb(208,98,7)" fg:x="902" fg:w="1"/><text x="72.6417%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.3917%" y="293" width="0.0803%" height="15" fill="rgb(228,143,44)" fg:x="902" fg:w="1"/><text x="72.6417%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.3917%" y="277" width="0.0803%" height="15" fill="rgb(246,55,38)" fg:x="902" fg:w="1"/><text x="72.6417%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.3917%" y="261" width="0.0803%" height="15" fill="rgb(247,87,16)" fg:x="902" fg:w="1"/><text x="72.6417%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.3917%" y="245" width="0.0803%" height="15" fill="rgb(234,129,42)" fg:x="902" fg:w="1"/><text x="72.6417%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.3917%" y="229" width="0.0803%" height="15" fill="rgb(220,82,16)" fg:x="902" fg:w="1"/><text x="72.6417%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.3917%" y="213" width="0.0803%" height="15" fill="rgb(211,88,4)" fg:x="902" fg:w="1"/><text x="72.6417%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3917%" y="197" width="0.0803%" height="15" fill="rgb(248,151,21)" fg:x="902" fg:w="1"/><text x="72.6417%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="72.4719%" y="421" width="0.0803%" height="15" fill="rgb(238,163,6)" fg:x="903" fg:w="1"/><text x="72.7219%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.4719%" y="405" width="0.0803%" height="15" fill="rgb(209,183,11)" fg:x="903" fg:w="1"/><text x="72.7219%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (770 samples, 61.80%)</title><rect x="10.9149%" y="597" width="61.7978%" height="15" fill="rgb(219,37,20)" fg:x="136" fg:w="770"/><text x="11.1649%" y="607.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (689 samples, 55.30%)</title><rect x="17.4157%" y="581" width="55.2970%" height="15" fill="rgb(210,158,4)" fg:x="217" fg:w="689"/><text x="17.6657%" y="591.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (688 samples, 55.22%)</title><rect x="17.4960%" y="565" width="55.2167%" height="15" fill="rgb(221,167,53)" fg:x="218" fg:w="688"/><text x="17.7460%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (688 samples, 55.22%)</title><rect x="17.4960%" y="549" width="55.2167%" height="15" fill="rgb(237,151,45)" fg:x="218" fg:w="688"/><text x="17.7460%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (687 samples, 55.14%)</title><rect x="17.5762%" y="533" width="55.1364%" height="15" fill="rgb(231,39,3)" fg:x="219" fg:w="687"/><text x="17.8262%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (687 samples, 55.14%)</title><rect x="17.5762%" y="517" width="55.1364%" height="15" fill="rgb(212,167,28)" fg:x="219" fg:w="687"/><text x="17.8262%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (687 samples, 55.14%)</title><rect x="17.5762%" y="501" width="55.1364%" height="15" fill="rgb(232,178,8)" fg:x="219" fg:w="687"/><text x="17.8262%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (687 samples, 55.14%)</title><rect x="17.5762%" y="485" width="55.1364%" height="15" fill="rgb(225,151,20)" fg:x="219" fg:w="687"/><text x="17.8262%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (687 samples, 55.14%)</title><rect x="17.5762%" y="469" width="55.1364%" height="15" fill="rgb(238,3,37)" fg:x="219" fg:w="687"/><text x="17.8262%" y="479.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (687 samples, 55.14%)</title><rect x="17.5762%" y="453" width="55.1364%" height="15" fill="rgb(251,147,42)" fg:x="219" fg:w="687"/><text x="17.8262%" y="463.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (685 samples, 54.98%)</title><rect x="17.7368%" y="437" width="54.9759%" height="15" fill="rgb(208,173,10)" fg:x="221" fg:w="685"/><text x="17.9868%" y="447.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="72.5522%" y="421" width="0.1605%" height="15" fill="rgb(246,225,4)" fg:x="904" fg:w="2"/><text x="72.8022%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.6324%" y="405" width="0.0803%" height="15" fill="rgb(248,102,6)" fg:x="905" fg:w="1"/><text x="72.8824%" y="415.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6324%" y="389" width="0.0803%" height="15" fill="rgb(232,6,21)" fg:x="905" fg:w="1"/><text x="72.8824%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6324%" y="373" width="0.0803%" height="15" fill="rgb(221,179,22)" fg:x="905" fg:w="1"/><text x="72.8824%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6324%" y="357" width="0.0803%" height="15" fill="rgb(252,50,20)" fg:x="905" fg:w="1"/><text x="72.8824%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6324%" y="341" width="0.0803%" height="15" fill="rgb(222,56,38)" fg:x="905" fg:w="1"/><text x="72.8824%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6324%" y="325" width="0.0803%" height="15" fill="rgb(206,193,29)" fg:x="905" fg:w="1"/><text x="72.8824%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6324%" y="309" width="0.0803%" height="15" fill="rgb(239,192,45)" fg:x="905" fg:w="1"/><text x="72.8824%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.6324%" y="293" width="0.0803%" height="15" fill="rgb(254,18,36)" fg:x="905" fg:w="1"/><text x="72.8824%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.6324%" y="277" width="0.0803%" height="15" fill="rgb(221,127,11)" fg:x="905" fg:w="1"/><text x="72.8824%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.6324%" y="261" width="0.0803%" height="15" fill="rgb(234,146,35)" fg:x="905" fg:w="1"/><text x="72.8824%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.6324%" y="245" width="0.0803%" height="15" fill="rgb(254,201,37)" fg:x="905" fg:w="1"/><text x="72.8824%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.6324%" y="229" width="0.0803%" height="15" fill="rgb(211,202,23)" fg:x="905" fg:w="1"/><text x="72.8824%" y="239.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="72.7127%" y="549" width="0.0803%" height="15" fill="rgb(237,91,2)" fg:x="906" fg:w="1"/><text x="72.9627%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.7127%" y="533" width="0.0803%" height="15" fill="rgb(226,228,36)" fg:x="906" fg:w="1"/><text x="72.9627%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.7127%" y="517" width="0.0803%" height="15" fill="rgb(213,63,50)" fg:x="906" fg:w="1"/><text x="72.9627%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="72.7127%" y="501" width="0.0803%" height="15" fill="rgb(235,194,19)" fg:x="906" fg:w="1"/><text x="72.9627%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.7127%" y="485" width="0.0803%" height="15" fill="rgb(207,204,18)" fg:x="906" fg:w="1"/><text x="72.9627%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7929%" y="485" width="0.0803%" height="15" fill="rgb(248,8,7)" fg:x="907" fg:w="1"/><text x="73.0429%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="72.7929%" y="533" width="0.1605%" height="15" fill="rgb(223,145,47)" fg:x="907" fg:w="2"/><text x="73.0429%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.7929%" y="517" width="0.1605%" height="15" fill="rgb(228,84,11)" fg:x="907" fg:w="2"/><text x="73.0429%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.7929%" y="501" width="0.1605%" height="15" fill="rgb(218,76,45)" fg:x="907" fg:w="2"/><text x="73.0429%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.8732%" y="485" width="0.0803%" height="15" fill="rgb(223,80,15)" fg:x="908" fg:w="1"/><text x="73.1232%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8732%" y="469" width="0.0803%" height="15" fill="rgb(219,218,33)" fg:x="908" fg:w="1"/><text x="73.1232%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.8732%" y="453" width="0.0803%" height="15" fill="rgb(208,51,11)" fg:x="908" fg:w="1"/><text x="73.1232%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8732%" y="437" width="0.0803%" height="15" fill="rgb(229,165,39)" fg:x="908" fg:w="1"/><text x="73.1232%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.8732%" y="421" width="0.0803%" height="15" fill="rgb(241,100,24)" fg:x="908" fg:w="1"/><text x="73.1232%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.8732%" y="405" width="0.0803%" height="15" fill="rgb(228,14,23)" fg:x="908" fg:w="1"/><text x="73.1232%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8732%" y="389" width="0.0803%" height="15" fill="rgb(247,116,52)" fg:x="908" fg:w="1"/><text x="73.1232%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8732%" y="373" width="0.0803%" height="15" fill="rgb(216,149,33)" fg:x="908" fg:w="1"/><text x="73.1232%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8732%" y="357" width="0.0803%" height="15" fill="rgb(238,142,29)" fg:x="908" fg:w="1"/><text x="73.1232%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="72.9535%" y="501" width="0.0803%" height="15" fill="rgb(224,83,40)" fg:x="909" fg:w="1"/><text x="73.2035%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.0337%" y="453" width="0.0803%" height="15" fill="rgb(234,165,11)" fg:x="910" fg:w="1"/><text x="73.2837%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.0337%" y="437" width="0.0803%" height="15" fill="rgb(215,96,23)" fg:x="910" fg:w="1"/><text x="73.2837%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.0337%" y="421" width="0.0803%" height="15" fill="rgb(233,179,26)" fg:x="910" fg:w="1"/><text x="73.2837%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="72.7127%" y="565" width="0.4815%" height="15" fill="rgb(225,129,33)" fg:x="906" fg:w="6"/><text x="72.9627%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_str (5 samples, 0.40%)</title><rect x="72.7929%" y="549" width="0.4013%" height="15" fill="rgb(237,49,13)" fg:x="907" fg:w="5"/><text x="73.0429%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="72.9535%" y="533" width="0.2408%" height="15" fill="rgb(211,3,31)" fg:x="909" fg:w="3"/><text x="73.2035%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="72.9535%" y="517" width="0.2408%" height="15" fill="rgb(216,152,19)" fg:x="909" fg:w="3"/><text x="73.2035%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="73.0337%" y="501" width="0.1605%" height="15" fill="rgb(251,121,35)" fg:x="910" fg:w="2"/><text x="73.2837%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.0337%" y="485" width="0.1605%" height="15" fill="rgb(210,217,47)" fg:x="910" fg:w="2"/><text x="73.2837%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.0337%" y="469" width="0.1605%" height="15" fill="rgb(244,116,22)" fg:x="910" fg:w="2"/><text x="73.2837%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1140%" y="453" width="0.0803%" height="15" fill="rgb(228,17,21)" fg:x="911" fg:w="1"/><text x="73.3640%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1140%" y="437" width="0.0803%" height="15" fill="rgb(240,149,34)" fg:x="911" fg:w="1"/><text x="73.3640%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.1140%" y="421" width="0.0803%" height="15" fill="rgb(208,125,47)" fg:x="911" fg:w="1"/><text x="73.3640%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1140%" y="405" width="0.0803%" height="15" fill="rgb(249,186,39)" fg:x="911" fg:w="1"/><text x="73.3640%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1140%" y="389" width="0.0803%" height="15" fill="rgb(240,220,33)" fg:x="911" fg:w="1"/><text x="73.3640%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.1140%" y="373" width="0.0803%" height="15" fill="rgb(243,110,23)" fg:x="911" fg:w="1"/><text x="73.3640%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1140%" y="357" width="0.0803%" height="15" fill="rgb(219,163,46)" fg:x="911" fg:w="1"/><text x="73.3640%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1140%" y="341" width="0.0803%" height="15" fill="rgb(216,126,30)" fg:x="911" fg:w="1"/><text x="73.3640%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.1140%" y="325" width="0.0803%" height="15" fill="rgb(208,139,11)" fg:x="911" fg:w="1"/><text x="73.3640%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1140%" y="309" width="0.0803%" height="15" fill="rgb(213,118,36)" fg:x="911" fg:w="1"/><text x="73.3640%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.1140%" y="293" width="0.0803%" height="15" fill="rgb(226,43,17)" fg:x="911" fg:w="1"/><text x="73.3640%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.1140%" y="277" width="0.0803%" height="15" fill="rgb(254,217,4)" fg:x="911" fg:w="1"/><text x="73.3640%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1140%" y="261" width="0.0803%" height="15" fill="rgb(210,134,47)" fg:x="911" fg:w="1"/><text x="73.3640%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="72.7127%" y="581" width="0.5618%" height="15" fill="rgb(237,24,49)" fg:x="906" fg:w="7"/><text x="72.9627%" y="591.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="73.1942%" y="565" width="0.0803%" height="15" fill="rgb(251,39,46)" fg:x="912" fg:w="1"/><text x="73.4442%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.1942%" y="549" width="0.0803%" height="15" fill="rgb(251,220,3)" fg:x="912" fg:w="1"/><text x="73.4442%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (8 samples, 0.64%)</title><rect x="72.7127%" y="597" width="0.6421%" height="15" fill="rgb(228,105,12)" fg:x="906" fg:w="8"/><text x="72.9627%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="73.2745%" y="581" width="0.0803%" height="15" fill="rgb(215,196,1)" fg:x="913" fg:w="1"/><text x="73.5245%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.2745%" y="565" width="0.0803%" height="15" fill="rgb(214,33,39)" fg:x="913" fg:w="1"/><text x="73.5245%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.2745%" y="549" width="0.0803%" height="15" fill="rgb(220,19,52)" fg:x="913" fg:w="1"/><text x="73.5245%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.2745%" y="533" width="0.0803%" height="15" fill="rgb(221,78,38)" fg:x="913" fg:w="1"/><text x="73.5245%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.2745%" y="517" width="0.0803%" height="15" fill="rgb(253,30,16)" fg:x="913" fg:w="1"/><text x="73.5245%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.2745%" y="501" width="0.0803%" height="15" fill="rgb(242,65,0)" fg:x="913" fg:w="1"/><text x="73.5245%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.2745%" y="485" width="0.0803%" height="15" fill="rgb(235,201,12)" fg:x="913" fg:w="1"/><text x="73.5245%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.2745%" y="469" width="0.0803%" height="15" fill="rgb(233,161,9)" fg:x="913" fg:w="1"/><text x="73.5245%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.2745%" y="453" width="0.0803%" height="15" fill="rgb(241,207,41)" fg:x="913" fg:w="1"/><text x="73.5245%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="73.2745%" y="437" width="0.0803%" height="15" fill="rgb(212,69,46)" fg:x="913" fg:w="1"/><text x="73.5245%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.2745%" y="421" width="0.0803%" height="15" fill="rgb(239,69,45)" fg:x="913" fg:w="1"/><text x="73.5245%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.2745%" y="405" width="0.0803%" height="15" fill="rgb(242,117,48)" fg:x="913" fg:w="1"/><text x="73.5245%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.2745%" y="389" width="0.0803%" height="15" fill="rgb(228,41,36)" fg:x="913" fg:w="1"/><text x="73.5245%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.2745%" y="373" width="0.0803%" height="15" fill="rgb(212,3,32)" fg:x="913" fg:w="1"/><text x="73.5245%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.2745%" y="357" width="0.0803%" height="15" fill="rgb(233,41,49)" fg:x="913" fg:w="1"/><text x="73.5245%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="73.2745%" y="341" width="0.0803%" height="15" fill="rgb(252,170,49)" fg:x="913" fg:w="1"/><text x="73.5245%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="73.2745%" y="325" width="0.0803%" height="15" fill="rgb(229,53,26)" fg:x="913" fg:w="1"/><text x="73.5245%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="73.2745%" y="309" width="0.0803%" height="15" fill="rgb(217,157,12)" fg:x="913" fg:w="1"/><text x="73.5245%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="73.2745%" y="293" width="0.0803%" height="15" fill="rgb(227,17,9)" fg:x="913" fg:w="1"/><text x="73.5245%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="73.2745%" y="277" width="0.0803%" height="15" fill="rgb(218,84,12)" fg:x="913" fg:w="1"/><text x="73.5245%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="73.2745%" y="261" width="0.0803%" height="15" fill="rgb(212,79,24)" fg:x="913" fg:w="1"/><text x="73.5245%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.2745%" y="245" width="0.0803%" height="15" fill="rgb(217,222,37)" fg:x="913" fg:w="1"/><text x="73.5245%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="73.2745%" y="229" width="0.0803%" height="15" fill="rgb(246,208,8)" fg:x="913" fg:w="1"/><text x="73.5245%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.2745%" y="213" width="0.0803%" height="15" fill="rgb(244,133,10)" fg:x="913" fg:w="1"/><text x="73.5245%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="73.2745%" y="197" width="0.0803%" height="15" fill="rgb(209,219,41)" fg:x="913" fg:w="1"/><text x="73.5245%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="73.2745%" y="181" width="0.0803%" height="15" fill="rgb(253,175,45)" fg:x="913" fg:w="1"/><text x="73.5245%" y="191.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="73.2745%" y="165" width="0.0803%" height="15" fill="rgb(235,100,37)" fg:x="913" fg:w="1"/><text x="73.5245%" y="175.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="73.3547%" y="597" width="0.0803%" height="15" fill="rgb(225,87,19)" fg:x="914" fg:w="1"/><text x="73.6047%" y="607.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="73.3547%" y="581" width="0.0803%" height="15" fill="rgb(217,152,17)" fg:x="914" fg:w="1"/><text x="73.6047%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="73.3547%" y="565" width="0.0803%" height="15" fill="rgb(235,72,13)" fg:x="914" fg:w="1"/><text x="73.6047%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.3547%" y="549" width="0.0803%" height="15" fill="rgb(233,140,18)" fg:x="914" fg:w="1"/><text x="73.6047%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.3547%" y="533" width="0.0803%" height="15" fill="rgb(207,212,28)" fg:x="914" fg:w="1"/><text x="73.6047%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.3547%" y="517" width="0.0803%" height="15" fill="rgb(220,130,25)" fg:x="914" fg:w="1"/><text x="73.6047%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (916 samples, 73.52%)</title><rect x="0.0000%" y="661" width="73.5152%" height="15" fill="rgb(205,55,34)" fg:x="0" fg:w="916"/><text x="0.2500%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (916 samples, 73.52%)</title><rect x="0.0000%" y="645" width="73.5152%" height="15" fill="rgb(237,54,35)" fg:x="0" fg:w="916"/><text x="0.2500%" y="655.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (916 samples, 73.52%)</title><rect x="0.0000%" y="629" width="73.5152%" height="15" fill="rgb(208,67,23)" fg:x="0" fg:w="916"/><text x="0.2500%" y="639.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (780 samples, 62.60%)</title><rect x="10.9149%" y="613" width="62.6003%" height="15" fill="rgb(206,207,50)" fg:x="136" fg:w="780"/><text x="11.1649%" y="623.50">engine::session::Session::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="73.4350%" y="597" width="0.0803%" height="15" fill="rgb(213,211,42)" fg:x="915" fg:w="1"/><text x="73.6850%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="73.4350%" y="581" width="0.0803%" height="15" fill="rgb(252,197,50)" fg:x="915" fg:w="1"/><text x="73.6850%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.5152%" y="501" width="0.0803%" height="15" fill="rgb(251,211,41)" fg:x="916" fg:w="1"/><text x="73.7652%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5152%" y="485" width="0.0803%" height="15" fill="rgb(229,211,5)" fg:x="916" fg:w="1"/><text x="73.7652%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.5955%" y="485" width="0.0803%" height="15" fill="rgb(239,36,31)" fg:x="917" fg:w="1"/><text x="73.8455%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.5152%" y="613" width="0.2408%" height="15" fill="rgb(248,67,31)" fg:x="916" fg:w="3"/><text x="73.7652%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="73.5152%" y="597" width="0.2408%" height="15" fill="rgb(249,55,44)" fg:x="916" fg:w="3"/><text x="73.7652%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.5152%" y="581" width="0.2408%" height="15" fill="rgb(216,82,12)" fg:x="916" fg:w="3"/><text x="73.7652%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="73.5152%" y="565" width="0.2408%" height="15" fill="rgb(242,174,1)" fg:x="916" fg:w="3"/><text x="73.7652%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.5152%" y="549" width="0.2408%" height="15" fill="rgb(208,120,29)" fg:x="916" fg:w="3"/><text x="73.7652%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.5152%" y="533" width="0.2408%" height="15" fill="rgb(221,105,43)" fg:x="916" fg:w="3"/><text x="73.7652%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.5152%" y="517" width="0.2408%" height="15" fill="rgb(234,124,22)" fg:x="916" fg:w="3"/><text x="73.7652%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.5955%" y="501" width="0.1605%" height="15" fill="rgb(212,23,30)" fg:x="917" fg:w="2"/><text x="73.8455%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.6758%" y="485" width="0.0803%" height="15" fill="rgb(219,122,53)" fg:x="918" fg:w="1"/><text x="73.9258%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.6758%" y="469" width="0.0803%" height="15" fill="rgb(248,84,24)" fg:x="918" fg:w="1"/><text x="73.9258%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.6758%" y="453" width="0.0803%" height="15" fill="rgb(245,115,18)" fg:x="918" fg:w="1"/><text x="73.9258%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6758%" y="437" width="0.0803%" height="15" fill="rgb(227,176,51)" fg:x="918" fg:w="1"/><text x="73.9258%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.7560%" y="533" width="0.0803%" height="15" fill="rgb(229,63,42)" fg:x="919" fg:w="1"/><text x="74.0060%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.7560%" y="517" width="0.0803%" height="15" fill="rgb(247,202,24)" fg:x="919" fg:w="1"/><text x="74.0060%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.7560%" y="501" width="0.0803%" height="15" fill="rgb(244,173,20)" fg:x="919" fg:w="1"/><text x="74.0060%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.7560%" y="485" width="0.0803%" height="15" fill="rgb(242,81,47)" fg:x="919" fg:w="1"/><text x="74.0060%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.7560%" y="469" width="0.0803%" height="15" fill="rgb(231,185,54)" fg:x="919" fg:w="1"/><text x="74.0060%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.7560%" y="453" width="0.0803%" height="15" fill="rgb(243,55,32)" fg:x="919" fg:w="1"/><text x="74.0060%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7560%" y="437" width="0.0803%" height="15" fill="rgb(208,167,19)" fg:x="919" fg:w="1"/><text x="74.0060%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.7560%" y="421" width="0.0803%" height="15" fill="rgb(231,72,35)" fg:x="919" fg:w="1"/><text x="74.0060%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7560%" y="405" width="0.0803%" height="15" fill="rgb(250,173,51)" fg:x="919" fg:w="1"/><text x="74.0060%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.7560%" y="389" width="0.0803%" height="15" fill="rgb(209,5,22)" fg:x="919" fg:w="1"/><text x="74.0060%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7560%" y="373" width="0.0803%" height="15" fill="rgb(250,174,19)" fg:x="919" fg:w="1"/><text x="74.0060%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.7560%" y="357" width="0.0803%" height="15" fill="rgb(217,3,49)" fg:x="919" fg:w="1"/><text x="74.0060%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7560%" y="341" width="0.0803%" height="15" fill="rgb(218,225,5)" fg:x="919" fg:w="1"/><text x="74.0060%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.7560%" y="325" width="0.0803%" height="15" fill="rgb(236,89,11)" fg:x="919" fg:w="1"/><text x="74.0060%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7560%" y="309" width="0.0803%" height="15" fill="rgb(206,33,28)" fg:x="919" fg:w="1"/><text x="74.0060%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="73.7560%" y="293" width="0.0803%" height="15" fill="rgb(241,56,42)" fg:x="919" fg:w="1"/><text x="74.0060%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.7560%" y="277" width="0.0803%" height="15" fill="rgb(222,44,11)" fg:x="919" fg:w="1"/><text x="74.0060%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="73.7560%" y="581" width="0.1605%" height="15" fill="rgb(234,111,20)" fg:x="919" fg:w="2"/><text x="74.0060%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="73.7560%" y="565" width="0.1605%" height="15" fill="rgb(237,77,6)" fg:x="919" fg:w="2"/><text x="74.0060%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="73.7560%" y="549" width="0.1605%" height="15" fill="rgb(235,111,23)" fg:x="919" fg:w="2"/><text x="74.0060%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="73.8363%" y="533" width="0.0803%" height="15" fill="rgb(251,135,29)" fg:x="920" fg:w="1"/><text x="74.0863%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8363%" y="517" width="0.0803%" height="15" fill="rgb(217,57,1)" fg:x="920" fg:w="1"/><text x="74.0863%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8363%" y="501" width="0.0803%" height="15" fill="rgb(249,119,31)" fg:x="920" fg:w="1"/><text x="74.0863%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.8363%" y="485" width="0.0803%" height="15" fill="rgb(233,164,33)" fg:x="920" fg:w="1"/><text x="74.0863%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8363%" y="469" width="0.0803%" height="15" fill="rgb(250,217,43)" fg:x="920" fg:w="1"/><text x="74.0863%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8363%" y="453" width="0.0803%" height="15" fill="rgb(232,154,50)" fg:x="920" fg:w="1"/><text x="74.0863%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8363%" y="437" width="0.0803%" height="15" fill="rgb(227,190,8)" fg:x="920" fg:w="1"/><text x="74.0863%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8363%" y="421" width="0.0803%" height="15" fill="rgb(209,217,32)" fg:x="920" fg:w="1"/><text x="74.0863%" y="431.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="73.9165%" y="581" width="0.0803%" height="15" fill="rgb(243,203,50)" fg:x="921" fg:w="1"/><text x="74.1665%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="73.9165%" y="565" width="0.0803%" height="15" fill="rgb(232,152,27)" fg:x="921" fg:w="1"/><text x="74.1665%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.9165%" y="549" width="0.0803%" height="15" fill="rgb(240,34,29)" fg:x="921" fg:w="1"/><text x="74.1665%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9165%" y="533" width="0.0803%" height="15" fill="rgb(215,185,52)" fg:x="921" fg:w="1"/><text x="74.1665%" y="543.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="73.9968%" y="533" width="0.1605%" height="15" fill="rgb(240,89,49)" fg:x="922" fg:w="2"/><text x="74.2468%" y="543.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="73.9968%" y="517" width="0.1605%" height="15" fill="rgb(225,12,52)" fg:x="922" fg:w="2"/><text x="74.2468%" y="527.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="73.9968%" y="581" width="0.4013%" height="15" fill="rgb(239,128,45)" fg:x="922" fg:w="5"/><text x="74.2468%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="73.9968%" y="565" width="0.4013%" height="15" fill="rgb(211,78,47)" fg:x="922" fg:w="5"/><text x="74.2468%" y="575.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.40%)</title><rect x="73.9968%" y="549" width="0.4013%" height="15" fill="rgb(232,31,21)" fg:x="922" fg:w="5"/><text x="74.2468%" y="559.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="74.1573%" y="533" width="0.2408%" height="15" fill="rgb(222,168,14)" fg:x="924" fg:w="3"/><text x="74.4073%" y="543.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="74.1573%" y="517" width="0.2408%" height="15" fill="rgb(209,128,24)" fg:x="924" fg:w="3"/><text x="74.4073%" y="527.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="74.1573%" y="501" width="0.2408%" height="15" fill="rgb(249,35,13)" fg:x="924" fg:w="3"/><text x="74.4073%" y="511.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="74.1573%" y="485" width="0.2408%" height="15" fill="rgb(218,7,2)" fg:x="924" fg:w="3"/><text x="74.4073%" y="495.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="74.1573%" y="469" width="0.2408%" height="15" fill="rgb(238,107,27)" fg:x="924" fg:w="3"/><text x="74.4073%" y="479.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.72%)</title><rect x="73.7560%" y="613" width="0.7223%" height="15" fill="rgb(217,88,38)" fg:x="919" fg:w="9"/><text x="74.0060%" y="623.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.72%)</title><rect x="73.7560%" y="597" width="0.7223%" height="15" fill="rgb(230,207,0)" fg:x="919" fg:w="9"/><text x="74.0060%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="74.3981%" y="581" width="0.0803%" height="15" fill="rgb(249,64,54)" fg:x="927" fg:w="1"/><text x="74.6481%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="74.3981%" y="565" width="0.0803%" height="15" fill="rgb(231,7,11)" fg:x="927" fg:w="1"/><text x="74.6481%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.3981%" y="549" width="0.0803%" height="15" fill="rgb(205,149,21)" fg:x="927" fg:w="1"/><text x="74.6481%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.3981%" y="533" width="0.0803%" height="15" fill="rgb(215,126,34)" fg:x="927" fg:w="1"/><text x="74.6481%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="74.4783%" y="597" width="0.0803%" height="15" fill="rgb(241,132,45)" fg:x="928" fg:w="1"/><text x="74.7283%" y="607.50"></text></g><g><title>engine::session::Session::flush (1 samples, 0.08%)</title><rect x="74.5586%" y="597" width="0.0803%" height="15" fill="rgb(252,69,32)" fg:x="929" fg:w="1"/><text x="74.8086%" y="607.50"></text></g><g><title>engine::session::Session::save_entity_changes (1 samples, 0.08%)</title><rect x="74.5586%" y="581" width="0.0803%" height="15" fill="rgb(232,204,19)" fg:x="929" fg:w="1"/><text x="74.8086%" y="591.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (1 samples, 0.08%)</title><rect x="74.5586%" y="565" width="0.0803%" height="15" fill="rgb(249,15,47)" fg:x="929" fg:w="1"/><text x="74.8086%" y="575.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (1 samples, 0.08%)</title><rect x="74.5586%" y="549" width="0.0803%" height="15" fill="rgb(209,227,23)" fg:x="929" fg:w="1"/><text x="74.8086%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5586%" y="533" width="0.0803%" height="15" fill="rgb(248,92,24)" fg:x="929" fg:w="1"/><text x="74.8086%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.5586%" y="517" width="0.0803%" height="15" fill="rgb(247,59,2)" fg:x="929" fg:w="1"/><text x="74.8086%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5586%" y="501" width="0.0803%" height="15" fill="rgb(221,30,5)" fg:x="929" fg:w="1"/><text x="74.8086%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5586%" y="485" width="0.0803%" height="15" fill="rgb(208,108,53)" fg:x="929" fg:w="1"/><text x="74.8086%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5586%" y="469" width="0.0803%" height="15" fill="rgb(211,183,26)" fg:x="929" fg:w="1"/><text x="74.8086%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.6388%" y="581" width="0.0803%" height="15" fill="rgb(232,132,4)" fg:x="930" fg:w="1"/><text x="74.8888%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.6388%" y="565" width="0.0803%" height="15" fill="rgb(253,128,37)" fg:x="930" fg:w="1"/><text x="74.8888%" y="575.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.6388%" y="549" width="0.0803%" height="15" fill="rgb(221,58,24)" fg:x="930" fg:w="1"/><text x="74.8888%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.6388%" y="533" width="0.0803%" height="15" fill="rgb(230,54,45)" fg:x="930" fg:w="1"/><text x="74.8888%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="74.6388%" y="517" width="0.0803%" height="15" fill="rgb(254,21,18)" fg:x="930" fg:w="1"/><text x="74.8888%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.6388%" y="501" width="0.0803%" height="15" fill="rgb(221,108,0)" fg:x="930" fg:w="1"/><text x="74.8888%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6388%" y="485" width="0.0803%" height="15" fill="rgb(206,95,1)" fg:x="930" fg:w="1"/><text x="74.8888%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.6388%" y="469" width="0.0803%" height="15" fill="rgb(237,52,5)" fg:x="930" fg:w="1"/><text x="74.8888%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6388%" y="453" width="0.0803%" height="15" fill="rgb(218,150,34)" fg:x="930" fg:w="1"/><text x="74.8888%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.6388%" y="437" width="0.0803%" height="15" fill="rgb(235,194,28)" fg:x="930" fg:w="1"/><text x="74.8888%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.6388%" y="421" width="0.0803%" height="15" fill="rgb(245,92,18)" fg:x="930" fg:w="1"/><text x="74.8888%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6388%" y="405" width="0.0803%" height="15" fill="rgb(253,203,53)" fg:x="930" fg:w="1"/><text x="74.8888%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.6388%" y="389" width="0.0803%" height="15" fill="rgb(249,185,47)" fg:x="930" fg:w="1"/><text x="74.8888%" y="399.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6388%" y="373" width="0.0803%" height="15" fill="rgb(252,194,52)" fg:x="930" fg:w="1"/><text x="74.8888%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.6388%" y="357" width="0.0803%" height="15" fill="rgb(210,53,36)" fg:x="930" fg:w="1"/><text x="74.8888%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.6388%" y="341" width="0.0803%" height="15" fill="rgb(237,37,25)" fg:x="930" fg:w="1"/><text x="74.8888%" y="351.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="74.7191%" y="565" width="0.0803%" height="15" fill="rgb(242,116,27)" fg:x="931" fg:w="1"/><text x="74.9691%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="74.7191%" y="549" width="0.0803%" height="15" fill="rgb(213,185,26)" fg:x="931" fg:w="1"/><text x="74.9691%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="74.7191%" y="533" width="0.0803%" height="15" fill="rgb(225,204,8)" fg:x="931" fg:w="1"/><text x="74.9691%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.7191%" y="517" width="0.0803%" height="15" fill="rgb(254,111,37)" fg:x="931" fg:w="1"/><text x="74.9691%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.7191%" y="501" width="0.0803%" height="15" fill="rgb(242,35,9)" fg:x="931" fg:w="1"/><text x="74.9691%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7191%" y="485" width="0.0803%" height="15" fill="rgb(232,138,49)" fg:x="931" fg:w="1"/><text x="74.9691%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7191%" y="469" width="0.0803%" height="15" fill="rgb(247,56,4)" fg:x="931" fg:w="1"/><text x="74.9691%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7191%" y="453" width="0.0803%" height="15" fill="rgb(226,179,17)" fg:x="931" fg:w="1"/><text x="74.9691%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.7191%" y="437" width="0.0803%" height="15" fill="rgb(216,163,45)" fg:x="931" fg:w="1"/><text x="74.9691%" y="447.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.7994%" y="565" width="0.0803%" height="15" fill="rgb(211,157,3)" fg:x="932" fg:w="1"/><text x="75.0494%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7994%" y="549" width="0.0803%" height="15" fill="rgb(234,44,20)" fg:x="932" fg:w="1"/><text x="75.0494%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.7994%" y="533" width="0.0803%" height="15" fill="rgb(254,138,23)" fg:x="932" fg:w="1"/><text x="75.0494%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7994%" y="517" width="0.0803%" height="15" fill="rgb(206,119,39)" fg:x="932" fg:w="1"/><text x="75.0494%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.7994%" y="501" width="0.0803%" height="15" fill="rgb(231,105,52)" fg:x="932" fg:w="1"/><text x="75.0494%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="74.6388%" y="597" width="0.3210%" height="15" fill="rgb(250,20,5)" fg:x="930" fg:w="4"/><text x="74.8888%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="74.7191%" y="581" width="0.2408%" height="15" fill="rgb(215,198,30)" fg:x="931" fg:w="3"/><text x="74.9691%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="74.8796%" y="565" width="0.0803%" height="15" fill="rgb(246,142,8)" fg:x="933" fg:w="1"/><text x="75.1296%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="74.8796%" y="549" width="0.0803%" height="15" fill="rgb(243,26,38)" fg:x="933" fg:w="1"/><text x="75.1296%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="74.8796%" y="533" width="0.0803%" height="15" fill="rgb(205,133,28)" fg:x="933" fg:w="1"/><text x="75.1296%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.8796%" y="517" width="0.0803%" height="15" fill="rgb(212,34,0)" fg:x="933" fg:w="1"/><text x="75.1296%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.8796%" y="501" width="0.0803%" height="15" fill="rgb(251,226,22)" fg:x="933" fg:w="1"/><text x="75.1296%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.8796%" y="485" width="0.0803%" height="15" fill="rgb(252,119,9)" fg:x="933" fg:w="1"/><text x="75.1296%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="74.8796%" y="469" width="0.0803%" height="15" fill="rgb(213,150,50)" fg:x="933" fg:w="1"/><text x="75.1296%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.8796%" y="453" width="0.0803%" height="15" fill="rgb(212,24,39)" fg:x="933" fg:w="1"/><text x="75.1296%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8796%" y="437" width="0.0803%" height="15" fill="rgb(213,46,39)" fg:x="933" fg:w="1"/><text x="75.1296%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8796%" y="421" width="0.0803%" height="15" fill="rgb(239,106,12)" fg:x="933" fg:w="1"/><text x="75.1296%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8796%" y="405" width="0.0803%" height="15" fill="rgb(249,229,21)" fg:x="933" fg:w="1"/><text x="75.1296%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8796%" y="389" width="0.0803%" height="15" fill="rgb(212,158,3)" fg:x="933" fg:w="1"/><text x="75.1296%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.8796%" y="373" width="0.0803%" height="15" fill="rgb(253,26,48)" fg:x="933" fg:w="1"/><text x="75.1296%" y="383.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="74.9599%" y="597" width="0.0803%" height="15" fill="rgb(238,178,20)" fg:x="934" fg:w="1"/><text x="75.2099%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.9599%" y="581" width="0.0803%" height="15" fill="rgb(208,86,15)" fg:x="934" fg:w="1"/><text x="75.2099%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.9599%" y="565" width="0.0803%" height="15" fill="rgb(239,42,53)" fg:x="934" fg:w="1"/><text x="75.2099%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="74.9599%" y="549" width="0.0803%" height="15" fill="rgb(245,226,8)" fg:x="934" fg:w="1"/><text x="75.2099%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="74.9599%" y="533" width="0.0803%" height="15" fill="rgb(216,176,32)" fg:x="934" fg:w="1"/><text x="75.2099%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.0401%" y="517" width="0.0803%" height="15" fill="rgb(231,186,21)" fg:x="935" fg:w="1"/><text x="75.2901%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.0401%" y="501" width="0.0803%" height="15" fill="rgb(205,95,49)" fg:x="935" fg:w="1"/><text x="75.2901%" y="511.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="75.0401%" y="485" width="0.0803%" height="15" fill="rgb(217,145,8)" fg:x="935" fg:w="1"/><text x="75.2901%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="75.0401%" y="469" width="0.0803%" height="15" fill="rgb(239,144,48)" fg:x="935" fg:w="1"/><text x="75.2901%" y="479.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.0401%" y="453" width="0.0803%" height="15" fill="rgb(214,189,23)" fg:x="935" fg:w="1"/><text x="75.2901%" y="463.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.0401%" y="437" width="0.0803%" height="15" fill="rgb(229,157,17)" fg:x="935" fg:w="1"/><text x="75.2901%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0401%" y="421" width="0.0803%" height="15" fill="rgb(230,5,48)" fg:x="935" fg:w="1"/><text x="75.2901%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0401%" y="405" width="0.0803%" height="15" fill="rgb(224,156,48)" fg:x="935" fg:w="1"/><text x="75.2901%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0401%" y="389" width="0.0803%" height="15" fill="rgb(223,14,29)" fg:x="935" fg:w="1"/><text x="75.2901%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0401%" y="373" width="0.0803%" height="15" fill="rgb(229,96,36)" fg:x="935" fg:w="1"/><text x="75.2901%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0401%" y="357" width="0.0803%" height="15" fill="rgb(231,102,53)" fg:x="935" fg:w="1"/><text x="75.2901%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="75.0401%" y="581" width="0.1605%" height="15" fill="rgb(210,77,38)" fg:x="935" fg:w="2"/><text x="75.2901%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="75.0401%" y="565" width="0.1605%" height="15" fill="rgb(235,131,6)" fg:x="935" fg:w="2"/><text x="75.2901%" y="575.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="75.0401%" y="549" width="0.1605%" height="15" fill="rgb(252,55,38)" fg:x="935" fg:w="2"/><text x="75.2901%" y="559.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="75.0401%" y="533" width="0.1605%" height="15" fill="rgb(246,38,14)" fg:x="935" fg:w="2"/><text x="75.2901%" y="543.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="75.1204%" y="517" width="0.0803%" height="15" fill="rgb(242,27,5)" fg:x="936" fg:w="1"/><text x="75.3704%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="75.1204%" y="501" width="0.0803%" height="15" fill="rgb(228,65,35)" fg:x="936" fg:w="1"/><text x="75.3704%" y="511.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.1204%" y="485" width="0.0803%" height="15" fill="rgb(245,93,11)" fg:x="936" fg:w="1"/><text x="75.3704%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.1204%" y="469" width="0.0803%" height="15" fill="rgb(213,1,31)" fg:x="936" fg:w="1"/><text x="75.3704%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.1204%" y="453" width="0.0803%" height="15" fill="rgb(237,205,14)" fg:x="936" fg:w="1"/><text x="75.3704%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.1204%" y="437" width="0.0803%" height="15" fill="rgb(232,118,45)" fg:x="936" fg:w="1"/><text x="75.3704%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1204%" y="421" width="0.0803%" height="15" fill="rgb(218,5,6)" fg:x="936" fg:w="1"/><text x="75.3704%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1204%" y="405" width="0.0803%" height="15" fill="rgb(251,87,51)" fg:x="936" fg:w="1"/><text x="75.3704%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1204%" y="389" width="0.0803%" height="15" fill="rgb(207,225,20)" fg:x="936" fg:w="1"/><text x="75.3704%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1204%" y="373" width="0.0803%" height="15" fill="rgb(222,78,54)" fg:x="936" fg:w="1"/><text x="75.3704%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1204%" y="357" width="0.0803%" height="15" fill="rgb(232,85,16)" fg:x="936" fg:w="1"/><text x="75.3704%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.2006%" y="549" width="0.0803%" height="15" fill="rgb(244,25,33)" fg:x="937" fg:w="1"/><text x="75.4506%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="75.2006%" y="533" width="0.0803%" height="15" fill="rgb(233,24,36)" fg:x="937" fg:w="1"/><text x="75.4506%" y="543.50"></text></g><g><title>engine::session::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="75.2006%" y="517" width="0.0803%" height="15" fill="rgb(253,49,54)" fg:x="937" fg:w="1"/><text x="75.4506%" y="527.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="75.2006%" y="501" width="0.0803%" height="15" fill="rgb(245,12,22)" fg:x="937" fg:w="1"/><text x="75.4506%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.2809%" y="485" width="0.0803%" height="15" fill="rgb(253,141,28)" fg:x="938" fg:w="1"/><text x="75.5309%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.2809%" y="469" width="0.0803%" height="15" fill="rgb(225,207,27)" fg:x="938" fg:w="1"/><text x="75.5309%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.2809%" y="453" width="0.0803%" height="15" fill="rgb(220,84,2)" fg:x="938" fg:w="1"/><text x="75.5309%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.2809%" y="437" width="0.0803%" height="15" fill="rgb(224,37,37)" fg:x="938" fg:w="1"/><text x="75.5309%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.2809%" y="421" width="0.0803%" height="15" fill="rgb(220,143,18)" fg:x="938" fg:w="1"/><text x="75.5309%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.2809%" y="405" width="0.0803%" height="15" fill="rgb(210,88,33)" fg:x="938" fg:w="1"/><text x="75.5309%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.2809%" y="389" width="0.0803%" height="15" fill="rgb(219,87,51)" fg:x="938" fg:w="1"/><text x="75.5309%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="75.2809%" y="517" width="0.1605%" height="15" fill="rgb(211,7,35)" fg:x="938" fg:w="2"/><text x="75.5309%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.2809%" y="501" width="0.1605%" height="15" fill="rgb(232,77,2)" fg:x="938" fg:w="2"/><text x="75.5309%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.3612%" y="485" width="0.0803%" height="15" fill="rgb(249,94,25)" fg:x="939" fg:w="1"/><text x="75.6112%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.3612%" y="469" width="0.0803%" height="15" fill="rgb(215,112,2)" fg:x="939" fg:w="1"/><text x="75.6112%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.3612%" y="453" width="0.0803%" height="15" fill="rgb(226,115,48)" fg:x="939" fg:w="1"/><text x="75.6112%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.3612%" y="437" width="0.0803%" height="15" fill="rgb(249,196,10)" fg:x="939" fg:w="1"/><text x="75.6112%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.3612%" y="421" width="0.0803%" height="15" fill="rgb(237,109,14)" fg:x="939" fg:w="1"/><text x="75.6112%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.3612%" y="405" width="0.0803%" height="15" fill="rgb(217,103,53)" fg:x="939" fg:w="1"/><text x="75.6112%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4414%" y="469" width="0.0803%" height="15" fill="rgb(244,137,9)" fg:x="940" fg:w="1"/><text x="75.6914%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.5217%" y="469" width="0.0803%" height="15" fill="rgb(227,201,3)" fg:x="941" fg:w="1"/><text x="75.7717%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5217%" y="453" width="0.0803%" height="15" fill="rgb(243,94,6)" fg:x="941" fg:w="1"/><text x="75.7717%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.4414%" y="517" width="0.2408%" height="15" fill="rgb(235,118,5)" fg:x="940" fg:w="3"/><text x="75.6914%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.4414%" y="501" width="0.2408%" height="15" fill="rgb(247,10,30)" fg:x="940" fg:w="3"/><text x="75.6914%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.4414%" y="485" width="0.2408%" height="15" fill="rgb(205,26,28)" fg:x="940" fg:w="3"/><text x="75.6914%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.6019%" y="469" width="0.0803%" height="15" fill="rgb(206,99,35)" fg:x="942" fg:w="1"/><text x="75.8519%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.6019%" y="453" width="0.0803%" height="15" fill="rgb(238,130,40)" fg:x="942" fg:w="1"/><text x="75.8519%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6019%" y="437" width="0.0803%" height="15" fill="rgb(224,126,31)" fg:x="942" fg:w="1"/><text x="75.8519%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6822%" y="469" width="0.0803%" height="15" fill="rgb(254,105,17)" fg:x="943" fg:w="1"/><text x="75.9322%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.6822%" y="453" width="0.0803%" height="15" fill="rgb(216,87,36)" fg:x="943" fg:w="1"/><text x="75.9322%" y="463.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="75.2006%" y="581" width="0.6421%" height="15" fill="rgb(240,21,12)" fg:x="937" fg:w="8"/><text x="75.4506%" y="591.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.64%)</title><rect x="75.2006%" y="565" width="0.6421%" height="15" fill="rgb(245,192,34)" fg:x="937" fg:w="8"/><text x="75.4506%" y="575.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (7 samples, 0.56%)</title><rect x="75.2809%" y="549" width="0.5618%" height="15" fill="rgb(226,100,49)" fg:x="938" fg:w="7"/><text x="75.5309%" y="559.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (7 samples, 0.56%)</title><rect x="75.2809%" y="533" width="0.5618%" height="15" fill="rgb(245,188,27)" fg:x="938" fg:w="7"/><text x="75.5309%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="75.6822%" y="517" width="0.1605%" height="15" fill="rgb(212,170,8)" fg:x="943" fg:w="2"/><text x="75.9322%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="75.6822%" y="501" width="0.1605%" height="15" fill="rgb(217,113,29)" fg:x="943" fg:w="2"/><text x="75.9322%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="75.6822%" y="485" width="0.1605%" height="15" fill="rgb(237,30,3)" fg:x="943" fg:w="2"/><text x="75.9322%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.7624%" y="469" width="0.0803%" height="15" fill="rgb(227,19,28)" fg:x="944" fg:w="1"/><text x="76.0124%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="75.7624%" y="453" width="0.0803%" height="15" fill="rgb(239,172,45)" fg:x="944" fg:w="1"/><text x="76.0124%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.7624%" y="437" width="0.0803%" height="15" fill="rgb(254,55,39)" fg:x="944" fg:w="1"/><text x="76.0124%" y="447.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="75.8427%" y="581" width="0.0803%" height="15" fill="rgb(249,208,12)" fg:x="945" fg:w="1"/><text x="76.0927%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="75.8427%" y="565" width="0.0803%" height="15" fill="rgb(240,52,13)" fg:x="945" fg:w="1"/><text x="76.0927%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="75.8427%" y="549" width="0.0803%" height="15" fill="rgb(252,149,13)" fg:x="945" fg:w="1"/><text x="76.0927%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="75.8427%" y="533" width="0.0803%" height="15" fill="rgb(232,81,48)" fg:x="945" fg:w="1"/><text x="76.0927%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.8427%" y="517" width="0.0803%" height="15" fill="rgb(222,144,2)" fg:x="945" fg:w="1"/><text x="76.0927%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.8427%" y="501" width="0.0803%" height="15" fill="rgb(216,81,32)" fg:x="945" fg:w="1"/><text x="76.0927%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.8427%" y="485" width="0.0803%" height="15" fill="rgb(244,78,51)" fg:x="945" fg:w="1"/><text x="76.0927%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.8427%" y="469" width="0.0803%" height="15" fill="rgb(217,66,21)" fg:x="945" fg:w="1"/><text x="76.0927%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8427%" y="453" width="0.0803%" height="15" fill="rgb(247,101,42)" fg:x="945" fg:w="1"/><text x="76.0927%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8427%" y="437" width="0.0803%" height="15" fill="rgb(227,81,39)" fg:x="945" fg:w="1"/><text x="76.0927%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8427%" y="421" width="0.0803%" height="15" fill="rgb(220,223,44)" fg:x="945" fg:w="1"/><text x="76.0927%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8427%" y="405" width="0.0803%" height="15" fill="rgb(205,218,2)" fg:x="945" fg:w="1"/><text x="76.0927%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.8427%" y="389" width="0.0803%" height="15" fill="rgb(212,207,28)" fg:x="945" fg:w="1"/><text x="76.0927%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8427%" y="373" width="0.0803%" height="15" fill="rgb(224,12,41)" fg:x="945" fg:w="1"/><text x="76.0927%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8427%" y="357" width="0.0803%" height="15" fill="rgb(216,118,12)" fg:x="945" fg:w="1"/><text x="76.0927%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.8427%" y="341" width="0.0803%" height="15" fill="rgb(252,97,46)" fg:x="945" fg:w="1"/><text x="76.0927%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.8427%" y="325" width="0.0803%" height="15" fill="rgb(244,206,19)" fg:x="945" fg:w="1"/><text x="76.0927%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.8427%" y="309" width="0.0803%" height="15" fill="rgb(231,84,31)" fg:x="945" fg:w="1"/><text x="76.0927%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.8427%" y="293" width="0.0803%" height="15" fill="rgb(244,133,0)" fg:x="945" fg:w="1"/><text x="76.0927%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.8427%" y="277" width="0.0803%" height="15" fill="rgb(223,15,50)" fg:x="945" fg:w="1"/><text x="76.0927%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.8427%" y="261" width="0.0803%" height="15" fill="rgb(250,118,49)" fg:x="945" fg:w="1"/><text x="76.0927%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.8427%" y="245" width="0.0803%" height="15" fill="rgb(248,25,38)" fg:x="945" fg:w="1"/><text x="76.0927%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.8427%" y="229" width="0.0803%" height="15" fill="rgb(215,70,14)" fg:x="945" fg:w="1"/><text x="76.0927%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.8427%" y="213" width="0.0803%" height="15" fill="rgb(215,28,15)" fg:x="945" fg:w="1"/><text x="76.0927%" y="223.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="75.9230%" y="581" width="0.0803%" height="15" fill="rgb(243,6,28)" fg:x="946" fg:w="1"/><text x="76.1730%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.9230%" y="565" width="0.0803%" height="15" fill="rgb(222,130,1)" fg:x="946" fg:w="1"/><text x="76.1730%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="75.9230%" y="549" width="0.0803%" height="15" fill="rgb(236,166,44)" fg:x="946" fg:w="1"/><text x="76.1730%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9230%" y="533" width="0.0803%" height="15" fill="rgb(221,108,14)" fg:x="946" fg:w="1"/><text x="76.1730%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9230%" y="517" width="0.0803%" height="15" fill="rgb(252,3,45)" fg:x="946" fg:w="1"/><text x="76.1730%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.9230%" y="501" width="0.0803%" height="15" fill="rgb(237,68,30)" fg:x="946" fg:w="1"/><text x="76.1730%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.9230%" y="485" width="0.0803%" height="15" fill="rgb(211,79,22)" fg:x="946" fg:w="1"/><text x="76.1730%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.9230%" y="469" width="0.0803%" height="15" fill="rgb(252,185,21)" fg:x="946" fg:w="1"/><text x="76.1730%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.9230%" y="453" width="0.0803%" height="15" fill="rgb(225,189,26)" fg:x="946" fg:w="1"/><text x="76.1730%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.9230%" y="437" width="0.0803%" height="15" fill="rgb(241,30,40)" fg:x="946" fg:w="1"/><text x="76.1730%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.9230%" y="421" width="0.0803%" height="15" fill="rgb(235,215,44)" fg:x="946" fg:w="1"/><text x="76.1730%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.9230%" y="405" width="0.0803%" height="15" fill="rgb(205,8,29)" fg:x="946" fg:w="1"/><text x="76.1730%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.9230%" y="389" width="0.0803%" height="15" fill="rgb(241,137,42)" fg:x="946" fg:w="1"/><text x="76.1730%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.9230%" y="373" width="0.0803%" height="15" fill="rgb(237,155,2)" fg:x="946" fg:w="1"/><text x="76.1730%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9230%" y="357" width="0.0803%" height="15" fill="rgb(245,29,42)" fg:x="946" fg:w="1"/><text x="76.1730%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.0032%" y="517" width="0.0803%" height="15" fill="rgb(234,101,35)" fg:x="947" fg:w="1"/><text x="76.2532%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.0032%" y="501" width="0.0803%" height="15" fill="rgb(228,64,37)" fg:x="947" fg:w="1"/><text x="76.2532%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.0032%" y="485" width="0.0803%" height="15" fill="rgb(217,214,36)" fg:x="947" fg:w="1"/><text x="76.2532%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0032%" y="469" width="0.0803%" height="15" fill="rgb(243,70,3)" fg:x="947" fg:w="1"/><text x="76.2532%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0032%" y="453" width="0.0803%" height="15" fill="rgb(253,158,52)" fg:x="947" fg:w="1"/><text x="76.2532%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0032%" y="437" width="0.0803%" height="15" fill="rgb(234,111,54)" fg:x="947" fg:w="1"/><text x="76.2532%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0032%" y="421" width="0.0803%" height="15" fill="rgb(217,70,32)" fg:x="947" fg:w="1"/><text x="76.2532%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.0032%" y="405" width="0.0803%" height="15" fill="rgb(234,18,33)" fg:x="947" fg:w="1"/><text x="76.2532%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0032%" y="389" width="0.0803%" height="15" fill="rgb(234,12,49)" fg:x="947" fg:w="1"/><text x="76.2532%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0032%" y="373" width="0.0803%" height="15" fill="rgb(236,10,21)" fg:x="947" fg:w="1"/><text x="76.2532%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0032%" y="357" width="0.0803%" height="15" fill="rgb(248,182,45)" fg:x="947" fg:w="1"/><text x="76.2532%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0032%" y="341" width="0.0803%" height="15" fill="rgb(217,95,36)" fg:x="947" fg:w="1"/><text x="76.2532%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0032%" y="325" width="0.0803%" height="15" fill="rgb(212,110,31)" fg:x="947" fg:w="1"/><text x="76.2532%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.0032%" y="309" width="0.0803%" height="15" fill="rgb(206,32,53)" fg:x="947" fg:w="1"/><text x="76.2532%" y="319.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="76.0032%" y="581" width="0.1605%" height="15" fill="rgb(246,141,37)" fg:x="947" fg:w="2"/><text x="76.2532%" y="591.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="76.0032%" y="565" width="0.1605%" height="15" fill="rgb(219,16,7)" fg:x="947" fg:w="2"/><text x="76.2532%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="76.0032%" y="549" width="0.1605%" height="15" fill="rgb(230,205,45)" fg:x="947" fg:w="2"/><text x="76.2532%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="76.0032%" y="533" width="0.1605%" height="15" fill="rgb(231,43,49)" fg:x="947" fg:w="2"/><text x="76.2532%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.0835%" y="517" width="0.0803%" height="15" fill="rgb(212,106,34)" fg:x="948" fg:w="1"/><text x="76.3335%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.0835%" y="501" width="0.0803%" height="15" fill="rgb(206,83,17)" fg:x="948" fg:w="1"/><text x="76.3335%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.0835%" y="485" width="0.0803%" height="15" fill="rgb(244,154,49)" fg:x="948" fg:w="1"/><text x="76.3335%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0835%" y="469" width="0.0803%" height="15" fill="rgb(244,149,49)" fg:x="948" fg:w="1"/><text x="76.3335%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0835%" y="453" width="0.0803%" height="15" fill="rgb(227,134,18)" fg:x="948" fg:w="1"/><text x="76.3335%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0835%" y="437" width="0.0803%" height="15" fill="rgb(237,116,36)" fg:x="948" fg:w="1"/><text x="76.3335%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0835%" y="421" width="0.0803%" height="15" fill="rgb(205,129,40)" fg:x="948" fg:w="1"/><text x="76.3335%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.0835%" y="405" width="0.0803%" height="15" fill="rgb(236,178,4)" fg:x="948" fg:w="1"/><text x="76.3335%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0835%" y="389" width="0.0803%" height="15" fill="rgb(251,76,53)" fg:x="948" fg:w="1"/><text x="76.3335%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0835%" y="373" width="0.0803%" height="15" fill="rgb(242,92,40)" fg:x="948" fg:w="1"/><text x="76.3335%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0835%" y="357" width="0.0803%" height="15" fill="rgb(209,45,30)" fg:x="948" fg:w="1"/><text x="76.3335%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0835%" y="341" width="0.0803%" height="15" fill="rgb(218,157,36)" fg:x="948" fg:w="1"/><text x="76.3335%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0835%" y="325" width="0.0803%" height="15" fill="rgb(222,186,16)" fg:x="948" fg:w="1"/><text x="76.3335%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.0835%" y="309" width="0.0803%" height="15" fill="rgb(254,72,35)" fg:x="948" fg:w="1"/><text x="76.3335%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.1637%" y="565" width="0.0803%" height="15" fill="rgb(224,25,35)" fg:x="949" fg:w="1"/><text x="76.4137%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="76.1637%" y="549" width="0.0803%" height="15" fill="rgb(206,135,52)" fg:x="949" fg:w="1"/><text x="76.4137%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="76.1637%" y="533" width="0.0803%" height="15" fill="rgb(229,174,47)" fg:x="949" fg:w="1"/><text x="76.4137%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.1637%" y="517" width="0.0803%" height="15" fill="rgb(242,184,21)" fg:x="949" fg:w="1"/><text x="76.4137%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.1637%" y="501" width="0.0803%" height="15" fill="rgb(213,22,45)" fg:x="949" fg:w="1"/><text x="76.4137%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.1637%" y="485" width="0.0803%" height="15" fill="rgb(237,81,54)" fg:x="949" fg:w="1"/><text x="76.4137%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.1637%" y="469" width="0.0803%" height="15" fill="rgb(248,177,18)" fg:x="949" fg:w="1"/><text x="76.4137%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="76.1637%" y="453" width="0.0803%" height="15" fill="rgb(254,31,16)" fg:x="949" fg:w="1"/><text x="76.4137%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="76.1637%" y="437" width="0.0803%" height="15" fill="rgb(235,20,31)" fg:x="949" fg:w="1"/><text x="76.4137%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.1637%" y="421" width="0.0803%" height="15" fill="rgb(240,56,43)" fg:x="949" fg:w="1"/><text x="76.4137%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.1637%" y="405" width="0.0803%" height="15" fill="rgb(237,197,51)" fg:x="949" fg:w="1"/><text x="76.4137%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.1637%" y="389" width="0.0803%" height="15" fill="rgb(241,162,44)" fg:x="949" fg:w="1"/><text x="76.4137%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.1637%" y="373" width="0.0803%" height="15" fill="rgb(224,23,20)" fg:x="949" fg:w="1"/><text x="76.4137%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="76.1637%" y="357" width="0.0803%" height="15" fill="rgb(250,109,34)" fg:x="949" fg:w="1"/><text x="76.4137%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="76.1637%" y="341" width="0.0803%" height="15" fill="rgb(214,175,50)" fg:x="949" fg:w="1"/><text x="76.4137%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="76.1637%" y="325" width="0.0803%" height="15" fill="rgb(213,182,5)" fg:x="949" fg:w="1"/><text x="76.4137%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="76.1637%" y="309" width="0.0803%" height="15" fill="rgb(209,199,19)" fg:x="949" fg:w="1"/><text x="76.4137%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="76.1637%" y="293" width="0.0803%" height="15" fill="rgb(236,224,42)" fg:x="949" fg:w="1"/><text x="76.4137%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="76.1637%" y="277" width="0.0803%" height="15" fill="rgb(246,226,29)" fg:x="949" fg:w="1"/><text x="76.4137%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.1637%" y="261" width="0.0803%" height="15" fill="rgb(227,223,11)" fg:x="949" fg:w="1"/><text x="76.4137%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="76.1637%" y="245" width="0.0803%" height="15" fill="rgb(219,7,51)" fg:x="949" fg:w="1"/><text x="76.4137%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.1637%" y="229" width="0.0803%" height="15" fill="rgb(245,167,10)" fg:x="949" fg:w="1"/><text x="76.4137%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="76.1637%" y="213" width="0.0803%" height="15" fill="rgb(237,224,16)" fg:x="949" fg:w="1"/><text x="76.4137%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="76.1637%" y="197" width="0.0803%" height="15" fill="rgb(226,132,13)" fg:x="949" fg:w="1"/><text x="76.4137%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="76.1637%" y="181" width="0.0803%" height="15" fill="rgb(214,140,3)" fg:x="949" fg:w="1"/><text x="76.4137%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.1637%" y="165" width="0.0803%" height="15" fill="rgb(221,177,4)" fg:x="949" fg:w="1"/><text x="76.4137%" y="175.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (16 samples, 1.28%)</title><rect x="75.0401%" y="597" width="1.2841%" height="15" fill="rgb(238,139,3)" fg:x="935" fg:w="16"/><text x="75.2901%" y="607.50"></text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="76.1637%" y="581" width="0.1605%" height="15" fill="rgb(216,17,39)" fg:x="949" fg:w="2"/><text x="76.4137%" y="591.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="76.2440%" y="565" width="0.0803%" height="15" fill="rgb(238,120,9)" fg:x="950" fg:w="1"/><text x="76.4940%" y="575.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="76.2440%" y="549" width="0.0803%" height="15" fill="rgb(244,92,53)" fg:x="950" fg:w="1"/><text x="76.4940%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2440%" y="533" width="0.0803%" height="15" fill="rgb(224,148,33)" fg:x="950" fg:w="1"/><text x="76.4940%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2440%" y="517" width="0.0803%" height="15" fill="rgb(243,6,36)" fg:x="950" fg:w="1"/><text x="76.4940%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="76.2440%" y="501" width="0.0803%" height="15" fill="rgb(230,102,11)" fg:x="950" fg:w="1"/><text x="76.4940%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="76.3242%" y="597" width="0.0803%" height="15" fill="rgb(234,148,36)" fg:x="951" fg:w="1"/><text x="76.5742%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="76.3242%" y="581" width="0.0803%" height="15" fill="rgb(251,153,25)" fg:x="951" fg:w="1"/><text x="76.5742%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.3242%" y="565" width="0.0803%" height="15" fill="rgb(215,129,8)" fg:x="951" fg:w="1"/><text x="76.5742%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.3242%" y="549" width="0.0803%" height="15" fill="rgb(224,128,35)" fg:x="951" fg:w="1"/><text x="76.5742%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (25 samples, 2.01%)</title><rect x="74.4783%" y="613" width="2.0064%" height="15" fill="rgb(237,56,52)" fg:x="928" fg:w="25"/><text x="74.7283%" y="623.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="76.4045%" y="597" width="0.0803%" height="15" fill="rgb(234,213,19)" fg:x="952" fg:w="1"/><text x="76.6545%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="76.4848%" y="613" width="0.0803%" height="15" fill="rgb(252,82,23)" fg:x="953" fg:w="1"/><text x="76.7348%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.4848%" y="597" width="0.0803%" height="15" fill="rgb(254,201,21)" fg:x="953" fg:w="1"/><text x="76.7348%" y="607.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.4848%" y="581" width="0.0803%" height="15" fill="rgb(250,186,11)" fg:x="953" fg:w="1"/><text x="76.7348%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.4848%" y="565" width="0.0803%" height="15" fill="rgb(211,174,5)" fg:x="953" fg:w="1"/><text x="76.7348%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4848%" y="549" width="0.0803%" height="15" fill="rgb(214,121,10)" fg:x="953" fg:w="1"/><text x="76.7348%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="76.6453%" y="549" width="0.0803%" height="15" fill="rgb(241,66,2)" fg:x="955" fg:w="1"/><text x="76.8953%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6453%" y="533" width="0.0803%" height="15" fill="rgb(220,167,19)" fg:x="955" fg:w="1"/><text x="76.8953%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6453%" y="517" width="0.0803%" height="15" fill="rgb(231,54,50)" fg:x="955" fg:w="1"/><text x="76.8953%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6453%" y="501" width="0.0803%" height="15" fill="rgb(239,217,53)" fg:x="955" fg:w="1"/><text x="76.8953%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6453%" y="485" width="0.0803%" height="15" fill="rgb(248,8,0)" fg:x="955" fg:w="1"/><text x="76.8953%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6453%" y="469" width="0.0803%" height="15" fill="rgb(229,118,37)" fg:x="955" fg:w="1"/><text x="76.8953%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6453%" y="453" width="0.0803%" height="15" fill="rgb(253,223,43)" fg:x="955" fg:w="1"/><text x="76.8953%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.6453%" y="437" width="0.0803%" height="15" fill="rgb(211,77,36)" fg:x="955" fg:w="1"/><text x="76.8953%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.6453%" y="421" width="0.0803%" height="15" fill="rgb(219,3,53)" fg:x="955" fg:w="1"/><text x="76.8953%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.6453%" y="405" width="0.0803%" height="15" fill="rgb(244,45,42)" fg:x="955" fg:w="1"/><text x="76.8953%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.6453%" y="389" width="0.0803%" height="15" fill="rgb(225,95,27)" fg:x="955" fg:w="1"/><text x="76.8953%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.6453%" y="373" width="0.0803%" height="15" fill="rgb(207,74,8)" fg:x="955" fg:w="1"/><text x="76.8953%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.6453%" y="357" width="0.0803%" height="15" fill="rgb(243,63,36)" fg:x="955" fg:w="1"/><text x="76.8953%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7255%" y="485" width="0.0803%" height="15" fill="rgb(211,180,12)" fg:x="956" fg:w="1"/><text x="76.9755%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7255%" y="469" width="0.0803%" height="15" fill="rgb(254,166,49)" fg:x="956" fg:w="1"/><text x="76.9755%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="76.7255%" y="533" width="0.1605%" height="15" fill="rgb(205,19,0)" fg:x="956" fg:w="2"/><text x="76.9755%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.7255%" y="517" width="0.1605%" height="15" fill="rgb(224,172,32)" fg:x="956" fg:w="2"/><text x="76.9755%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.7255%" y="501" width="0.1605%" height="15" fill="rgb(254,136,30)" fg:x="956" fg:w="2"/><text x="76.9755%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.8058%" y="485" width="0.0803%" height="15" fill="rgb(246,19,35)" fg:x="957" fg:w="1"/><text x="77.0558%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.8058%" y="469" width="0.0803%" height="15" fill="rgb(219,24,36)" fg:x="957" fg:w="1"/><text x="77.0558%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8058%" y="453" width="0.0803%" height="15" fill="rgb(251,55,1)" fg:x="957" fg:w="1"/><text x="77.0558%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8860%" y="501" width="0.0803%" height="15" fill="rgb(218,117,39)" fg:x="958" fg:w="1"/><text x="77.1360%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9663%" y="501" width="0.0803%" height="15" fill="rgb(248,169,11)" fg:x="959" fg:w="1"/><text x="77.2163%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.0465%" y="469" width="0.0803%" height="15" fill="rgb(244,40,44)" fg:x="960" fg:w="1"/><text x="77.2965%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="76.8860%" y="533" width="0.3210%" height="15" fill="rgb(234,62,37)" fg:x="958" fg:w="4"/><text x="77.1360%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="76.8860%" y="517" width="0.3210%" height="15" fill="rgb(207,117,42)" fg:x="958" fg:w="4"/><text x="77.1360%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="77.0465%" y="501" width="0.1605%" height="15" fill="rgb(213,43,2)" fg:x="960" fg:w="2"/><text x="77.2965%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="77.0465%" y="485" width="0.1605%" height="15" fill="rgb(244,202,51)" fg:x="960" fg:w="2"/><text x="77.2965%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1268%" y="469" width="0.0803%" height="15" fill="rgb(253,174,46)" fg:x="961" fg:w="1"/><text x="77.3768%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1268%" y="453" width="0.0803%" height="15" fill="rgb(251,23,1)" fg:x="961" fg:w="1"/><text x="77.3768%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1268%" y="437" width="0.0803%" height="15" fill="rgb(253,26,1)" fg:x="961" fg:w="1"/><text x="77.3768%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1268%" y="421" width="0.0803%" height="15" fill="rgb(216,89,31)" fg:x="961" fg:w="1"/><text x="77.3768%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1268%" y="405" width="0.0803%" height="15" fill="rgb(209,109,5)" fg:x="961" fg:w="1"/><text x="77.3768%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1268%" y="389" width="0.0803%" height="15" fill="rgb(229,63,13)" fg:x="961" fg:w="1"/><text x="77.3768%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1268%" y="373" width="0.0803%" height="15" fill="rgb(238,137,54)" fg:x="961" fg:w="1"/><text x="77.3768%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1268%" y="357" width="0.0803%" height="15" fill="rgb(228,1,9)" fg:x="961" fg:w="1"/><text x="77.3768%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1268%" y="341" width="0.0803%" height="15" fill="rgb(249,120,48)" fg:x="961" fg:w="1"/><text x="77.3768%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1268%" y="325" width="0.0803%" height="15" fill="rgb(209,72,36)" fg:x="961" fg:w="1"/><text x="77.3768%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.2071%" y="437" width="0.0803%" height="15" fill="rgb(247,98,49)" fg:x="962" fg:w="1"/><text x="77.4571%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.2071%" y="421" width="0.0803%" height="15" fill="rgb(233,75,36)" fg:x="962" fg:w="1"/><text x="77.4571%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.2071%" y="405" width="0.0803%" height="15" fill="rgb(225,14,24)" fg:x="962" fg:w="1"/><text x="77.4571%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.2071%" y="389" width="0.0803%" height="15" fill="rgb(237,193,20)" fg:x="962" fg:w="1"/><text x="77.4571%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.2071%" y="373" width="0.0803%" height="15" fill="rgb(239,122,19)" fg:x="962" fg:w="1"/><text x="77.4571%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.2071%" y="469" width="0.2408%" height="15" fill="rgb(231,220,10)" fg:x="962" fg:w="3"/><text x="77.4571%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.2071%" y="453" width="0.2408%" height="15" fill="rgb(220,66,15)" fg:x="962" fg:w="3"/><text x="77.4571%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="77.2873%" y="437" width="0.1605%" height="15" fill="rgb(215,171,52)" fg:x="963" fg:w="2"/><text x="77.5373%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.3676%" y="421" width="0.0803%" height="15" fill="rgb(241,169,50)" fg:x="964" fg:w="1"/><text x="77.6176%" y="431.50"></text></g><g><title>engine::session::Session::close (12 samples, 0.96%)</title><rect x="76.5650%" y="613" width="0.9631%" height="15" fill="rgb(236,189,0)" fg:x="954" fg:w="12"/><text x="76.8150%" y="623.50"></text></g><g><title>engine::session::Session::save_entity_changes (12 samples, 0.96%)</title><rect x="76.5650%" y="597" width="0.9631%" height="15" fill="rgb(217,147,20)" fg:x="954" fg:w="12"/><text x="76.8150%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="76.5650%" y="581" width="0.9631%" height="15" fill="rgb(206,188,39)" fg:x="954" fg:w="12"/><text x="76.8150%" y="591.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="76.5650%" y="565" width="0.9631%" height="15" fill="rgb(227,118,25)" fg:x="954" fg:w="12"/><text x="76.8150%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="76.7255%" y="549" width="0.8026%" height="15" fill="rgb(248,171,40)" fg:x="956" fg:w="10"/><text x="76.9755%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="77.2071%" y="533" width="0.3210%" height="15" fill="rgb(251,90,54)" fg:x="962" fg:w="4"/><text x="77.4571%" y="543.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="77.2071%" y="517" width="0.3210%" height="15" fill="rgb(234,11,46)" fg:x="962" fg:w="4"/><text x="77.4571%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="77.2071%" y="501" width="0.3210%" height="15" fill="rgb(229,134,13)" fg:x="962" fg:w="4"/><text x="77.4571%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="77.2071%" y="485" width="0.3210%" height="15" fill="rgb(223,129,3)" fg:x="962" fg:w="4"/><text x="77.4571%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4478%" y="469" width="0.0803%" height="15" fill="rgb(221,124,13)" fg:x="965" fg:w="1"/><text x="77.6978%" y="479.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="77.5281%" y="581" width="0.0803%" height="15" fill="rgb(234,3,18)" fg:x="966" fg:w="1"/><text x="77.7781%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="77.5281%" y="565" width="0.0803%" height="15" fill="rgb(249,199,20)" fg:x="966" fg:w="1"/><text x="77.7781%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="77.5281%" y="549" width="0.0803%" height="15" fill="rgb(224,134,6)" fg:x="966" fg:w="1"/><text x="77.7781%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.5281%" y="533" width="0.0803%" height="15" fill="rgb(254,83,26)" fg:x="966" fg:w="1"/><text x="77.7781%" y="543.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5281%" y="517" width="0.0803%" height="15" fill="rgb(217,88,9)" fg:x="966" fg:w="1"/><text x="77.7781%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.5281%" y="501" width="0.0803%" height="15" fill="rgb(225,73,2)" fg:x="966" fg:w="1"/><text x="77.7781%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (1 samples, 0.08%)</title><rect x="77.6083%" y="549" width="0.0803%" height="15" fill="rgb(226,44,39)" fg:x="967" fg:w="1"/><text x="77.8583%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6083%" y="533" width="0.0803%" height="15" fill="rgb(228,53,17)" fg:x="967" fg:w="1"/><text x="77.8583%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6083%" y="517" width="0.0803%" height="15" fill="rgb(212,27,27)" fg:x="967" fg:w="1"/><text x="77.8583%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6083%" y="501" width="0.0803%" height="15" fill="rgb(241,50,6)" fg:x="967" fg:w="1"/><text x="77.8583%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6083%" y="485" width="0.0803%" height="15" fill="rgb(225,28,51)" fg:x="967" fg:w="1"/><text x="77.8583%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6083%" y="469" width="0.0803%" height="15" fill="rgb(215,33,16)" fg:x="967" fg:w="1"/><text x="77.8583%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6083%" y="453" width="0.0803%" height="15" fill="rgb(243,40,39)" fg:x="967" fg:w="1"/><text x="77.8583%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.6083%" y="437" width="0.0803%" height="15" fill="rgb(225,11,42)" fg:x="967" fg:w="1"/><text x="77.8583%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6083%" y="421" width="0.0803%" height="15" fill="rgb(241,220,38)" fg:x="967" fg:w="1"/><text x="77.8583%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.7689%" y="517" width="0.1605%" height="15" fill="rgb(244,52,35)" fg:x="969" fg:w="2"/><text x="78.0189%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.7689%" y="501" width="0.1605%" height="15" fill="rgb(246,42,46)" fg:x="969" fg:w="2"/><text x="78.0189%" y="511.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="78.0096%" y="357" width="0.0803%" height="15" fill="rgb(205,184,13)" fg:x="972" fg:w="1"/><text x="78.2596%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0096%" y="341" width="0.0803%" height="15" fill="rgb(209,48,36)" fg:x="972" fg:w="1"/><text x="78.2596%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0096%" y="325" width="0.0803%" height="15" fill="rgb(244,34,51)" fg:x="972" fg:w="1"/><text x="78.2596%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.0096%" y="309" width="0.0803%" height="15" fill="rgb(221,107,33)" fg:x="972" fg:w="1"/><text x="78.2596%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.0096%" y="293" width="0.0803%" height="15" fill="rgb(224,203,12)" fg:x="972" fg:w="1"/><text x="78.2596%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.0096%" y="277" width="0.0803%" height="15" fill="rgb(230,215,18)" fg:x="972" fg:w="1"/><text x="78.2596%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.0096%" y="261" width="0.0803%" height="15" fill="rgb(206,185,35)" fg:x="972" fg:w="1"/><text x="78.2596%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.0096%" y="245" width="0.0803%" height="15" fill="rgb(228,140,34)" fg:x="972" fg:w="1"/><text x="78.2596%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.0096%" y="229" width="0.0803%" height="15" fill="rgb(208,93,13)" fg:x="972" fg:w="1"/><text x="78.2596%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.0096%" y="213" width="0.0803%" height="15" fill="rgb(221,193,39)" fg:x="972" fg:w="1"/><text x="78.2596%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.0096%" y="197" width="0.0803%" height="15" fill="rgb(241,132,34)" fg:x="972" fg:w="1"/><text x="78.2596%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.0096%" y="181" width="0.0803%" height="15" fill="rgb(221,141,10)" fg:x="972" fg:w="1"/><text x="78.2596%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0096%" y="165" width="0.0803%" height="15" fill="rgb(226,90,31)" fg:x="972" fg:w="1"/><text x="78.2596%" y="175.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (2 samples, 0.16%)</title><rect x="78.0096%" y="469" width="0.1605%" height="15" fill="rgb(243,75,5)" fg:x="972" fg:w="2"/><text x="78.2596%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="78.0096%" y="453" width="0.1605%" height="15" fill="rgb(227,156,21)" fg:x="972" fg:w="2"/><text x="78.2596%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="78.0096%" y="437" width="0.1605%" height="15" fill="rgb(250,195,8)" fg:x="972" fg:w="2"/><text x="78.2596%" y="447.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="78.0096%" y="421" width="0.1605%" height="15" fill="rgb(220,134,5)" fg:x="972" fg:w="2"/><text x="78.2596%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="78.0096%" y="405" width="0.1605%" height="15" fill="rgb(246,106,34)" fg:x="972" fg:w="2"/><text x="78.2596%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="78.0096%" y="389" width="0.1605%" height="15" fill="rgb(205,1,4)" fg:x="972" fg:w="2"/><text x="78.2596%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="78.0096%" y="373" width="0.1605%" height="15" fill="rgb(224,151,29)" fg:x="972" fg:w="2"/><text x="78.2596%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="78.0899%" y="357" width="0.0803%" height="15" fill="rgb(251,196,0)" fg:x="973" fg:w="1"/><text x="78.3399%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="78.0899%" y="341" width="0.0803%" height="15" fill="rgb(212,127,0)" fg:x="973" fg:w="1"/><text x="78.3399%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="78.0899%" y="325" width="0.0803%" height="15" fill="rgb(236,71,53)" fg:x="973" fg:w="1"/><text x="78.3399%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.0899%" y="309" width="0.0803%" height="15" fill="rgb(227,99,0)" fg:x="973" fg:w="1"/><text x="78.3399%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.0899%" y="293" width="0.0803%" height="15" fill="rgb(239,89,21)" fg:x="973" fg:w="1"/><text x="78.3399%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.0899%" y="277" width="0.0803%" height="15" fill="rgb(243,122,19)" fg:x="973" fg:w="1"/><text x="78.3399%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.0899%" y="261" width="0.0803%" height="15" fill="rgb(229,192,45)" fg:x="973" fg:w="1"/><text x="78.3399%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.0899%" y="245" width="0.0803%" height="15" fill="rgb(235,165,35)" fg:x="973" fg:w="1"/><text x="78.3399%" y="255.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.1701%" y="325" width="0.0803%" height="15" fill="rgb(253,202,0)" fg:x="974" fg:w="1"/><text x="78.4201%" y="335.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="78.1701%" y="309" width="0.0803%" height="15" fill="rgb(235,51,20)" fg:x="974" fg:w="1"/><text x="78.4201%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.1701%" y="293" width="0.0803%" height="15" fill="rgb(218,95,46)" fg:x="974" fg:w="1"/><text x="78.4201%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.1701%" y="277" width="0.0803%" height="15" fill="rgb(212,81,10)" fg:x="974" fg:w="1"/><text x="78.4201%" y="287.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.1701%" y="261" width="0.0803%" height="15" fill="rgb(240,59,0)" fg:x="974" fg:w="1"/><text x="78.4201%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1701%" y="245" width="0.0803%" height="15" fill="rgb(212,191,42)" fg:x="974" fg:w="1"/><text x="78.4201%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1701%" y="229" width="0.0803%" height="15" fill="rgb(233,140,3)" fg:x="974" fg:w="1"/><text x="78.4201%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1701%" y="213" width="0.0803%" height="15" fill="rgb(215,69,23)" fg:x="974" fg:w="1"/><text x="78.4201%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1701%" y="197" width="0.0803%" height="15" fill="rgb(240,202,20)" fg:x="974" fg:w="1"/><text x="78.4201%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1701%" y="181" width="0.0803%" height="15" fill="rgb(209,146,50)" fg:x="974" fg:w="1"/><text x="78.4201%" y="191.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="78.2504%" y="309" width="0.1605%" height="15" fill="rgb(253,102,54)" fg:x="975" fg:w="2"/><text x="78.5004%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.2504%" y="293" width="0.1605%" height="15" fill="rgb(250,173,47)" fg:x="975" fg:w="2"/><text x="78.5004%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.2504%" y="277" width="0.1605%" height="15" fill="rgb(232,142,7)" fg:x="975" fg:w="2"/><text x="78.5004%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.2504%" y="261" width="0.1605%" height="15" fill="rgb(230,157,47)" fg:x="975" fg:w="2"/><text x="78.5004%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.2504%" y="245" width="0.1605%" height="15" fill="rgb(214,177,35)" fg:x="975" fg:w="2"/><text x="78.5004%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.3307%" y="229" width="0.0803%" height="15" fill="rgb(234,119,46)" fg:x="976" fg:w="1"/><text x="78.5807%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.3307%" y="213" width="0.0803%" height="15" fill="rgb(241,180,50)" fg:x="976" fg:w="1"/><text x="78.5807%" y="223.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (4 samples, 0.32%)</title><rect x="78.1701%" y="421" width="0.3210%" height="15" fill="rgb(221,54,25)" fg:x="974" fg:w="4"/><text x="78.4201%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="78.1701%" y="405" width="0.3210%" height="15" fill="rgb(209,157,44)" fg:x="974" fg:w="4"/><text x="78.4201%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="78.1701%" y="389" width="0.3210%" height="15" fill="rgb(246,115,41)" fg:x="974" fg:w="4"/><text x="78.4201%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="78.1701%" y="373" width="0.3210%" height="15" fill="rgb(229,86,1)" fg:x="974" fg:w="4"/><text x="78.4201%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="78.1701%" y="357" width="0.3210%" height="15" fill="rgb(240,108,53)" fg:x="974" fg:w="4"/><text x="78.4201%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="78.1701%" y="341" width="0.3210%" height="15" fill="rgb(227,134,2)" fg:x="974" fg:w="4"/><text x="78.4201%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="78.2504%" y="325" width="0.2408%" height="15" fill="rgb(213,129,25)" fg:x="975" fg:w="3"/><text x="78.5004%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.4109%" y="309" width="0.0803%" height="15" fill="rgb(226,35,21)" fg:x="977" fg:w="1"/><text x="78.6609%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4109%" y="293" width="0.0803%" height="15" fill="rgb(208,129,26)" fg:x="977" fg:w="1"/><text x="78.6609%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.4109%" y="277" width="0.0803%" height="15" fill="rgb(224,83,6)" fg:x="977" fg:w="1"/><text x="78.6609%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4109%" y="261" width="0.0803%" height="15" fill="rgb(227,52,39)" fg:x="977" fg:w="1"/><text x="78.6609%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4109%" y="245" width="0.0803%" height="15" fill="rgb(241,30,17)" fg:x="977" fg:w="1"/><text x="78.6609%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.4109%" y="229" width="0.0803%" height="15" fill="rgb(246,186,42)" fg:x="977" fg:w="1"/><text x="78.6609%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="77.9294%" y="501" width="0.6421%" height="15" fill="rgb(221,169,15)" fg:x="971" fg:w="8"/><text x="78.1794%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.64%)</title><rect x="77.9294%" y="485" width="0.6421%" height="15" fill="rgb(235,108,21)" fg:x="971" fg:w="8"/><text x="78.1794%" y="495.50"></text></g><g><title>plugins_core::tools::get_contained_keys (5 samples, 0.40%)</title><rect x="78.1701%" y="469" width="0.4013%" height="15" fill="rgb(219,148,30)" fg:x="974" fg:w="5"/><text x="78.4201%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="78.1701%" y="453" width="0.4013%" height="15" fill="rgb(220,109,5)" fg:x="974" fg:w="5"/><text x="78.4201%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="78.1701%" y="437" width="0.4013%" height="15" fill="rgb(213,203,48)" fg:x="974" fg:w="5"/><text x="78.4201%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.4912%" y="421" width="0.0803%" height="15" fill="rgb(244,71,33)" fg:x="978" fg:w="1"/><text x="78.7412%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4912%" y="405" width="0.0803%" height="15" fill="rgb(209,23,2)" fg:x="978" fg:w="1"/><text x="78.7412%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="78.4912%" y="389" width="0.0803%" height="15" fill="rgb(219,97,7)" fg:x="978" fg:w="1"/><text x="78.7412%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="78.4912%" y="373" width="0.0803%" height="15" fill="rgb(216,161,23)" fg:x="978" fg:w="1"/><text x="78.7412%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.6517%" y="245" width="0.0803%" height="15" fill="rgb(207,45,42)" fg:x="980" fg:w="1"/><text x="78.9017%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.6517%" y="229" width="0.0803%" height="15" fill="rgb(241,61,4)" fg:x="980" fg:w="1"/><text x="78.9017%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="78.6517%" y="213" width="0.0803%" height="15" fill="rgb(236,170,1)" fg:x="980" fg:w="1"/><text x="78.9017%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.6517%" y="197" width="0.0803%" height="15" fill="rgb(239,72,5)" fg:x="980" fg:w="1"/><text x="78.9017%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.6517%" y="181" width="0.0803%" height="15" fill="rgb(214,13,50)" fg:x="980" fg:w="1"/><text x="78.9017%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="78.6517%" y="165" width="0.0803%" height="15" fill="rgb(224,88,9)" fg:x="980" fg:w="1"/><text x="78.9017%" y="175.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.6517%" y="149" width="0.0803%" height="15" fill="rgb(238,192,34)" fg:x="980" fg:w="1"/><text x="78.9017%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.6517%" y="133" width="0.0803%" height="15" fill="rgb(217,203,50)" fg:x="980" fg:w="1"/><text x="78.9017%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="78.6517%" y="117" width="0.0803%" height="15" fill="rgb(241,123,32)" fg:x="980" fg:w="1"/><text x="78.9017%" y="127.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.6517%" y="101" width="0.0803%" height="15" fill="rgb(248,151,39)" fg:x="980" fg:w="1"/><text x="78.9017%" y="111.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.6517%" y="85" width="0.0803%" height="15" fill="rgb(208,89,6)" fg:x="980" fg:w="1"/><text x="78.9017%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="78.6517%" y="69" width="0.0803%" height="15" fill="rgb(254,43,26)" fg:x="980" fg:w="1"/><text x="78.9017%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="78.6517%" y="309" width="0.1605%" height="15" fill="rgb(216,158,13)" fg:x="980" fg:w="2"/><text x="78.9017%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="78.6517%" y="293" width="0.1605%" height="15" fill="rgb(212,47,37)" fg:x="980" fg:w="2"/><text x="78.9017%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="78.6517%" y="277" width="0.1605%" height="15" fill="rgb(254,16,10)" fg:x="980" fg:w="2"/><text x="78.9017%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="78.6517%" y="261" width="0.1605%" height="15" fill="rgb(223,228,16)" fg:x="980" fg:w="2"/><text x="78.9017%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.7319%" y="245" width="0.0803%" height="15" fill="rgb(249,108,50)" fg:x="981" fg:w="1"/><text x="78.9819%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.7319%" y="229" width="0.0803%" height="15" fill="rgb(208,220,5)" fg:x="981" fg:w="1"/><text x="78.9819%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.7319%" y="213" width="0.0803%" height="15" fill="rgb(217,89,48)" fg:x="981" fg:w="1"/><text x="78.9819%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="78.5714%" y="389" width="0.3210%" height="15" fill="rgb(212,113,41)" fg:x="979" fg:w="4"/><text x="78.8214%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="78.5714%" y="373" width="0.3210%" height="15" fill="rgb(231,127,5)" fg:x="979" fg:w="4"/><text x="78.8214%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="78.5714%" y="357" width="0.3210%" height="15" fill="rgb(217,141,17)" fg:x="979" fg:w="4"/><text x="78.8214%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="78.6517%" y="341" width="0.2408%" height="15" fill="rgb(245,125,54)" fg:x="980" fg:w="3"/><text x="78.9017%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="78.6517%" y="325" width="0.2408%" height="15" fill="rgb(248,125,3)" fg:x="980" fg:w="3"/><text x="78.9017%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="78.8122%" y="309" width="0.0803%" height="15" fill="rgb(236,119,51)" fg:x="982" fg:w="1"/><text x="79.0622%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.8122%" y="293" width="0.0803%" height="15" fill="rgb(239,99,8)" fg:x="982" fg:w="1"/><text x="79.0622%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="78.5714%" y="405" width="0.4013%" height="15" fill="rgb(224,228,4)" fg:x="979" fg:w="5"/><text x="78.8214%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8925%" y="389" width="0.0803%" height="15" fill="rgb(220,131,45)" fg:x="983" fg:w="1"/><text x="79.1425%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.8925%" y="373" width="0.0803%" height="15" fill="rgb(215,62,5)" fg:x="983" fg:w="1"/><text x="79.1425%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="78.5714%" y="437" width="0.4815%" height="15" fill="rgb(253,12,24)" fg:x="979" fg:w="6"/><text x="78.8214%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="78.5714%" y="421" width="0.4815%" height="15" fill="rgb(248,120,50)" fg:x="979" fg:w="6"/><text x="78.8214%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="78.9727%" y="405" width="0.0803%" height="15" fill="rgb(245,194,10)" fg:x="984" fg:w="1"/><text x="79.2227%" y="415.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="79.1332%" y="389" width="0.2408%" height="15" fill="rgb(241,149,38)" fg:x="986" fg:w="3"/><text x="79.3832%" y="399.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3740%" y="389" width="0.0803%" height="15" fill="rgb(219,215,7)" fg:x="989" fg:w="1"/><text x="79.6240%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.3740%" y="373" width="0.0803%" height="15" fill="rgb(208,120,31)" fg:x="989" fg:w="1"/><text x="79.6240%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3740%" y="357" width="0.0803%" height="15" fill="rgb(244,30,8)" fg:x="989" fg:w="1"/><text x="79.6240%" y="367.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.4543%" y="389" width="0.1605%" height="15" fill="rgb(238,35,44)" fg:x="990" fg:w="2"/><text x="79.7043%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.4543%" y="373" width="0.1605%" height="15" fill="rgb(243,218,37)" fg:x="990" fg:w="2"/><text x="79.7043%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5345%" y="357" width="0.0803%" height="15" fill="rgb(218,169,10)" fg:x="991" fg:w="1"/><text x="79.7845%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.6148%" y="325" width="0.0803%" height="15" fill="rgb(221,144,10)" fg:x="992" fg:w="1"/><text x="79.8648%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6148%" y="309" width="0.0803%" height="15" fill="rgb(226,41,38)" fg:x="992" fg:w="1"/><text x="79.8648%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.6148%" y="293" width="0.0803%" height="15" fill="rgb(228,3,1)" fg:x="992" fg:w="1"/><text x="79.8648%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6148%" y="277" width="0.0803%" height="15" fill="rgb(209,129,12)" fg:x="992" fg:w="1"/><text x="79.8648%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.6148%" y="261" width="0.0803%" height="15" fill="rgb(213,136,33)" fg:x="992" fg:w="1"/><text x="79.8648%" y="271.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6148%" y="245" width="0.0803%" height="15" fill="rgb(209,181,29)" fg:x="992" fg:w="1"/><text x="79.8648%" y="255.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (26 samples, 2.09%)</title><rect x="77.6886%" y="533" width="2.0867%" height="15" fill="rgb(234,173,18)" fg:x="968" fg:w="26"/><text x="77.9386%" y="543.50">&lt;..</text></g><g><title>core::iter::adapters::try_process (23 samples, 1.85%)</title><rect x="77.9294%" y="517" width="1.8459%" height="15" fill="rgb(227,73,47)" fg:x="971" fg:w="23"/><text x="78.1794%" y="527.50">c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="78.5714%" y="501" width="1.2039%" height="15" fill="rgb(234,9,34)" fg:x="979" fg:w="15"/><text x="78.8214%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 1.20%)</title><rect x="78.5714%" y="485" width="1.2039%" height="15" fill="rgb(235,172,15)" fg:x="979" fg:w="15"/><text x="78.8214%" y="495.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (15 samples, 1.20%)</title><rect x="78.5714%" y="469" width="1.2039%" height="15" fill="rgb(245,61,2)" fg:x="979" fg:w="15"/><text x="78.8214%" y="479.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (15 samples, 1.20%)</title><rect x="78.5714%" y="453" width="1.2039%" height="15" fill="rgb(238,39,47)" fg:x="979" fg:w="15"/><text x="78.8214%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (9 samples, 0.72%)</title><rect x="79.0530%" y="437" width="0.7223%" height="15" fill="rgb(234,37,24)" fg:x="985" fg:w="9"/><text x="79.3030%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="79.0530%" y="421" width="0.7223%" height="15" fill="rgb(248,223,24)" fg:x="985" fg:w="9"/><text x="79.3030%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="79.1332%" y="405" width="0.6421%" height="15" fill="rgb(223,12,15)" fg:x="986" fg:w="8"/><text x="79.3832%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="79.6148%" y="389" width="0.1605%" height="15" fill="rgb(249,6,3)" fg:x="992" fg:w="2"/><text x="79.8648%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="79.6148%" y="373" width="0.1605%" height="15" fill="rgb(237,105,33)" fg:x="992" fg:w="2"/><text x="79.8648%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.6148%" y="357" width="0.1605%" height="15" fill="rgb(252,208,35)" fg:x="992" fg:w="2"/><text x="79.8648%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="79.6148%" y="341" width="0.1605%" height="15" fill="rgb(215,181,35)" fg:x="992" fg:w="2"/><text x="79.8648%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6950%" y="325" width="0.0803%" height="15" fill="rgb(246,212,3)" fg:x="993" fg:w="1"/><text x="79.9450%" y="335.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (28 samples, 2.25%)</title><rect x="77.6083%" y="581" width="2.2472%" height="15" fill="rgb(247,156,24)" fg:x="967" fg:w="28"/><text x="77.8583%" y="591.50">k..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (28 samples, 2.25%)</title><rect x="77.6083%" y="565" width="2.2472%" height="15" fill="rgb(248,9,31)" fg:x="967" fg:w="28"/><text x="77.8583%" y="575.50">&lt;..</text></g><g><title>plugins_rpc::querying::have_surroundings (27 samples, 2.17%)</title><rect x="77.6886%" y="549" width="2.1669%" height="15" fill="rgb(234,26,45)" fg:x="968" fg:w="27"/><text x="77.9386%" y="559.50">p..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.7753%" y="533" width="0.0803%" height="15" fill="rgb(249,11,32)" fg:x="994" fg:w="1"/><text x="80.0253%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9358%" y="357" width="0.0803%" height="15" fill="rgb(249,162,33)" fg:x="996" fg:w="1"/><text x="80.1858%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9358%" y="341" width="0.0803%" height="15" fill="rgb(232,4,32)" fg:x="996" fg:w="1"/><text x="80.1858%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9358%" y="325" width="0.0803%" height="15" fill="rgb(212,5,45)" fg:x="996" fg:w="1"/><text x="80.1858%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9358%" y="309" width="0.0803%" height="15" fill="rgb(227,95,13)" fg:x="996" fg:w="1"/><text x="80.1858%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9358%" y="293" width="0.0803%" height="15" fill="rgb(223,205,10)" fg:x="996" fg:w="1"/><text x="80.1858%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="79.9358%" y="405" width="0.1605%" height="15" fill="rgb(222,178,8)" fg:x="996" fg:w="2"/><text x="80.1858%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="79.9358%" y="389" width="0.1605%" height="15" fill="rgb(216,13,22)" fg:x="996" fg:w="2"/><text x="80.1858%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="79.9358%" y="373" width="0.1605%" height="15" fill="rgb(240,167,12)" fg:x="996" fg:w="2"/><text x="80.1858%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0161%" y="357" width="0.0803%" height="15" fill="rgb(235,68,35)" fg:x="997" fg:w="1"/><text x="80.2661%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0161%" y="341" width="0.0803%" height="15" fill="rgb(253,40,27)" fg:x="997" fg:w="1"/><text x="80.2661%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0161%" y="325" width="0.0803%" height="15" fill="rgb(214,19,28)" fg:x="997" fg:w="1"/><text x="80.2661%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0161%" y="309" width="0.0803%" height="15" fill="rgb(210,167,45)" fg:x="997" fg:w="1"/><text x="80.2661%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.0161%" y="293" width="0.0803%" height="15" fill="rgb(232,97,40)" fg:x="997" fg:w="1"/><text x="80.2661%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0161%" y="277" width="0.0803%" height="15" fill="rgb(250,35,23)" fg:x="997" fg:w="1"/><text x="80.2661%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0161%" y="261" width="0.0803%" height="15" fill="rgb(248,47,53)" fg:x="997" fg:w="1"/><text x="80.2661%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0161%" y="245" width="0.0803%" height="15" fill="rgb(226,58,50)" fg:x="997" fg:w="1"/><text x="80.2661%" y="255.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="80.0963%" y="389" width="0.0803%" height="15" fill="rgb(217,105,26)" fg:x="998" fg:w="1"/><text x="80.3463%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.0963%" y="373" width="0.0803%" height="15" fill="rgb(208,64,1)" fg:x="998" fg:w="1"/><text x="80.3463%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1766%" y="357" width="0.0803%" height="15" fill="rgb(214,80,1)" fg:x="999" fg:w="1"/><text x="80.4266%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1766%" y="341" width="0.0803%" height="15" fill="rgb(206,175,26)" fg:x="999" fg:w="1"/><text x="80.4266%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1766%" y="325" width="0.0803%" height="15" fill="rgb(235,156,37)" fg:x="999" fg:w="1"/><text x="80.4266%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1766%" y="309" width="0.0803%" height="15" fill="rgb(213,100,9)" fg:x="999" fg:w="1"/><text x="80.4266%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1766%" y="293" width="0.0803%" height="15" fill="rgb(241,15,13)" fg:x="999" fg:w="1"/><text x="80.4266%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2568%" y="261" width="0.0803%" height="15" fill="rgb(205,97,43)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.2568%" y="245" width="0.0803%" height="15" fill="rgb(216,106,32)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.2568%" y="229" width="0.0803%" height="15" fill="rgb(226,200,8)" fg:x="1000" fg:w="1"/><text x="80.5068%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="80.0963%" y="405" width="0.3210%" height="15" fill="rgb(244,54,29)" fg:x="998" fg:w="4"/><text x="80.3463%" y="415.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="80.1766%" y="389" width="0.2408%" height="15" fill="rgb(252,169,12)" fg:x="999" fg:w="3"/><text x="80.4266%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="80.1766%" y="373" width="0.2408%" height="15" fill="rgb(231,199,11)" fg:x="999" fg:w="3"/><text x="80.4266%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.2568%" y="357" width="0.1605%" height="15" fill="rgb(233,191,18)" fg:x="1000" fg:w="2"/><text x="80.5068%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2568%" y="341" width="0.1605%" height="15" fill="rgb(215,83,47)" fg:x="1000" fg:w="2"/><text x="80.5068%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.2568%" y="325" width="0.1605%" height="15" fill="rgb(251,67,19)" fg:x="1000" fg:w="2"/><text x="80.5068%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2568%" y="309" width="0.1605%" height="15" fill="rgb(240,7,20)" fg:x="1000" fg:w="2"/><text x="80.5068%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="80.2568%" y="293" width="0.1605%" height="15" fill="rgb(210,150,26)" fg:x="1000" fg:w="2"/><text x="80.5068%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2568%" y="277" width="0.1605%" height="15" fill="rgb(228,75,42)" fg:x="1000" fg:w="2"/><text x="80.5068%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3371%" y="261" width="0.0803%" height="15" fill="rgb(237,134,48)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3371%" y="245" width="0.0803%" height="15" fill="rgb(205,80,50)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3371%" y="229" width="0.0803%" height="15" fill="rgb(217,74,48)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3371%" y="213" width="0.0803%" height="15" fill="rgb(205,82,50)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="80.3371%" y="197" width="0.0803%" height="15" fill="rgb(228,1,33)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="207.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="80.3371%" y="181" width="0.0803%" height="15" fill="rgb(214,50,23)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="191.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.3371%" y="165" width="0.0803%" height="15" fill="rgb(210,62,9)" fg:x="1001" fg:w="1"/><text x="80.5871%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.4173%" y="277" width="0.0803%" height="15" fill="rgb(210,104,37)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4173%" y="261" width="0.0803%" height="15" fill="rgb(232,104,43)" fg:x="1002" fg:w="1"/><text x="80.6673%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4976%" y="277" width="0.0803%" height="15" fill="rgb(244,52,6)" fg:x="1003" fg:w="1"/><text x="80.7476%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="80.5778%" y="277" width="0.1605%" height="15" fill="rgb(211,174,52)" fg:x="1004" fg:w="2"/><text x="80.8278%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.6581%" y="261" width="0.0803%" height="15" fill="rgb(229,48,4)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.6581%" y="245" width="0.0803%" height="15" fill="rgb(205,155,16)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.6581%" y="229" width="0.0803%" height="15" fill="rgb(211,141,53)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6581%" y="213" width="0.0803%" height="15" fill="rgb(240,148,11)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.6581%" y="197" width="0.0803%" height="15" fill="rgb(214,45,23)" fg:x="1005" fg:w="1"/><text x="80.9081%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="80.8989%" y="261" width="0.8026%" height="15" fill="rgb(248,74,26)" fg:x="1008" fg:w="10"/><text x="81.1489%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="80.8989%" y="245" width="0.8026%" height="15" fill="rgb(218,121,16)" fg:x="1008" fg:w="10"/><text x="81.1489%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.6212%" y="229" width="0.0803%" height="15" fill="rgb(218,10,47)" fg:x="1017" fg:w="1"/><text x="81.8712%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="81.7014%" y="261" width="0.1605%" height="15" fill="rgb(227,99,14)" fg:x="1018" fg:w="2"/><text x="81.9514%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="81.7014%" y="245" width="0.1605%" height="15" fill="rgb(229,83,46)" fg:x="1018" fg:w="2"/><text x="81.9514%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.37%)</title><rect x="82.0225%" y="197" width="3.3708%" height="15" fill="rgb(228,25,1)" fg:x="1022" fg:w="42"/><text x="82.2725%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (42 samples, 3.37%)</title><rect x="82.0225%" y="181" width="3.3708%" height="15" fill="rgb(252,190,15)" fg:x="1022" fg:w="42"/><text x="82.2725%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (42 samples, 3.37%)</title><rect x="82.0225%" y="165" width="3.3708%" height="15" fill="rgb(213,103,51)" fg:x="1022" fg:w="42"/><text x="82.2725%" y="175.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="85.3933%" y="197" width="0.0803%" height="15" fill="rgb(220,38,44)" fg:x="1064" fg:w="1"/><text x="85.6433%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.69%)</title><rect x="81.8620%" y="245" width="3.6918%" height="15" fill="rgb(210,45,26)" fg:x="1020" fg:w="46"/><text x="82.1120%" y="255.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (45 samples, 3.61%)</title><rect x="81.9422%" y="229" width="3.6116%" height="15" fill="rgb(205,95,48)" fg:x="1021" fg:w="45"/><text x="82.1922%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (45 samples, 3.61%)</title><rect x="81.9422%" y="213" width="3.6116%" height="15" fill="rgb(225,179,37)" fg:x="1021" fg:w="45"/><text x="82.1922%" y="223.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="85.4735%" y="197" width="0.0803%" height="15" fill="rgb(230,209,3)" fg:x="1065" fg:w="1"/><text x="85.7235%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5538%" y="229" width="0.0803%" height="15" fill="rgb(248,12,46)" fg:x="1066" fg:w="1"/><text x="85.8038%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.6340%" y="229" width="0.0803%" height="15" fill="rgb(234,18,0)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.6340%" y="213" width="0.0803%" height="15" fill="rgb(238,197,14)" fg:x="1067" fg:w="1"/><text x="85.8840%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="85.7143%" y="229" width="0.0803%" height="15" fill="rgb(251,162,48)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.7143%" y="213" width="0.0803%" height="15" fill="rgb(237,73,42)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.7143%" y="197" width="0.0803%" height="15" fill="rgb(211,108,8)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.7143%" y="181" width="0.0803%" height="15" fill="rgb(213,45,22)" fg:x="1068" fg:w="1"/><text x="85.9643%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="85.5538%" y="245" width="0.6421%" height="15" fill="rgb(252,154,5)" fg:x="1066" fg:w="8"/><text x="85.8038%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="85.7945%" y="229" width="0.4013%" height="15" fill="rgb(221,79,52)" fg:x="1069" fg:w="5"/><text x="86.0445%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (69 samples, 5.54%)</title><rect x="80.7384%" y="277" width="5.5377%" height="15" fill="rgb(229,220,36)" fg:x="1006" fg:w="69"/><text x="80.9884%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (55 samples, 4.41%)</title><rect x="81.8620%" y="261" width="4.4141%" height="15" fill="rgb(211,17,16)" fg:x="1020" fg:w="55"/><text x="82.1120%" y="271.50">regex..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="86.1958%" y="245" width="0.0803%" height="15" fill="rgb(222,55,31)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="255.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="86.1958%" y="229" width="0.0803%" height="15" fill="rgb(221,221,31)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.1958%" y="213" width="0.0803%" height="15" fill="rgb(227,168,26)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.1958%" y="197" width="0.0803%" height="15" fill="rgb(224,139,9)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.1958%" y="181" width="0.0803%" height="15" fill="rgb(254,172,0)" fg:x="1074" fg:w="1"/><text x="86.4458%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="86.2761%" y="229" width="0.0803%" height="15" fill="rgb(235,203,1)" fg:x="1075" fg:w="1"/><text x="86.5261%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="86.2761%" y="213" width="0.0803%" height="15" fill="rgb(216,205,24)" fg:x="1075" fg:w="1"/><text x="86.5261%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="86.2761%" y="277" width="0.1605%" height="15" fill="rgb(233,24,6)" fg:x="1075" fg:w="2"/><text x="86.5261%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="86.2761%" y="261" width="0.1605%" height="15" fill="rgb(244,110,9)" fg:x="1075" fg:w="2"/><text x="86.5261%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="86.2761%" y="245" width="0.1605%" height="15" fill="rgb(239,222,42)" fg:x="1075" fg:w="2"/><text x="86.5261%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="86.3563%" y="229" width="0.0803%" height="15" fill="rgb(218,145,13)" fg:x="1076" fg:w="1"/><text x="86.6063%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.3563%" y="213" width="0.0803%" height="15" fill="rgb(207,69,11)" fg:x="1076" fg:w="1"/><text x="86.6063%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3563%" y="197" width="0.0803%" height="15" fill="rgb(220,223,22)" fg:x="1076" fg:w="1"/><text x="86.6063%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3563%" y="181" width="0.0803%" height="15" fill="rgb(245,102,5)" fg:x="1076" fg:w="1"/><text x="86.6063%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.4366%" y="245" width="0.0803%" height="15" fill="rgb(211,148,2)" fg:x="1077" fg:w="1"/><text x="86.6866%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.4366%" y="229" width="0.0803%" height="15" fill="rgb(241,13,44)" fg:x="1077" fg:w="1"/><text x="86.6866%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.4366%" y="213" width="0.0803%" height="15" fill="rgb(219,137,21)" fg:x="1077" fg:w="1"/><text x="86.6866%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.4366%" y="197" width="0.0803%" height="15" fill="rgb(242,206,5)" fg:x="1077" fg:w="1"/><text x="86.6866%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.4366%" y="181" width="0.0803%" height="15" fill="rgb(217,114,22)" fg:x="1077" fg:w="1"/><text x="86.6866%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (77 samples, 6.18%)</title><rect x="80.4173%" y="325" width="6.1798%" height="15" fill="rgb(253,206,42)" fg:x="1002" fg:w="77"/><text x="80.6673%" y="335.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (77 samples, 6.18%)</title><rect x="80.4173%" y="309" width="6.1798%" height="15" fill="rgb(236,102,18)" fg:x="1002" fg:w="77"/><text x="80.6673%" y="319.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (77 samples, 6.18%)</title><rect x="80.4173%" y="293" width="6.1798%" height="15" fill="rgb(208,59,49)" fg:x="1002" fg:w="77"/><text x="80.6673%" y="303.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="86.4366%" y="277" width="0.1605%" height="15" fill="rgb(215,194,28)" fg:x="1077" fg:w="2"/><text x="86.6866%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.4366%" y="261" width="0.1605%" height="15" fill="rgb(243,207,11)" fg:x="1077" fg:w="2"/><text x="86.6866%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="86.5169%" y="245" width="0.0803%" height="15" fill="rgb(254,179,35)" fg:x="1078" fg:w="1"/><text x="86.7669%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="86.5169%" y="229" width="0.0803%" height="15" fill="rgb(235,97,3)" fg:x="1078" fg:w="1"/><text x="86.7669%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="86.5169%" y="213" width="0.0803%" height="15" fill="rgb(215,155,33)" fg:x="1078" fg:w="1"/><text x="86.7669%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.5971%" y="293" width="0.0803%" height="15" fill="rgb(223,128,12)" fg:x="1079" fg:w="1"/><text x="86.8471%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="86.5971%" y="277" width="0.0803%" height="15" fill="rgb(208,157,18)" fg:x="1079" fg:w="1"/><text x="86.8471%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.5971%" y="261" width="0.0803%" height="15" fill="rgb(249,70,54)" fg:x="1079" fg:w="1"/><text x="86.8471%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.5971%" y="245" width="0.0803%" height="15" fill="rgb(244,118,24)" fg:x="1079" fg:w="1"/><text x="86.8471%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.6774%" y="277" width="0.0803%" height="15" fill="rgb(211,54,0)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.6774%" y="261" width="0.0803%" height="15" fill="rgb(245,137,45)" fg:x="1080" fg:w="1"/><text x="86.9274%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="86.5971%" y="325" width="0.2408%" height="15" fill="rgb(232,154,31)" fg:x="1079" fg:w="3"/><text x="86.8471%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="86.5971%" y="309" width="0.2408%" height="15" fill="rgb(253,6,39)" fg:x="1079" fg:w="3"/><text x="86.8471%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="86.6774%" y="293" width="0.1605%" height="15" fill="rgb(234,183,24)" fg:x="1080" fg:w="2"/><text x="86.9274%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="86.7576%" y="277" width="0.0803%" height="15" fill="rgb(252,84,40)" fg:x="1081" fg:w="1"/><text x="87.0076%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.7576%" y="261" width="0.0803%" height="15" fill="rgb(224,65,2)" fg:x="1081" fg:w="1"/><text x="87.0076%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="86.8379%" y="277" width="0.2408%" height="15" fill="rgb(229,38,24)" fg:x="1082" fg:w="3"/><text x="87.0879%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="86.8379%" y="261" width="0.2408%" height="15" fill="rgb(218,131,50)" fg:x="1082" fg:w="3"/><text x="87.0879%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.9984%" y="245" width="0.0803%" height="15" fill="rgb(233,106,18)" fg:x="1084" fg:w="1"/><text x="87.2484%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (84 samples, 6.74%)</title><rect x="80.4173%" y="341" width="6.7416%" height="15" fill="rgb(220,216,11)" fg:x="1002" fg:w="84"/><text x="80.6673%" y="351.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="86.8379%" y="325" width="0.3210%" height="15" fill="rgb(251,100,45)" fg:x="1082" fg:w="4"/><text x="87.0879%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="86.8379%" y="309" width="0.3210%" height="15" fill="rgb(235,143,32)" fg:x="1082" fg:w="4"/><text x="87.0879%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="86.8379%" y="293" width="0.3210%" height="15" fill="rgb(248,124,34)" fg:x="1082" fg:w="4"/><text x="87.0879%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="87.0787%" y="277" width="0.0803%" height="15" fill="rgb(225,221,4)" fg:x="1085" fg:w="1"/><text x="87.3287%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.0787%" y="261" width="0.0803%" height="15" fill="rgb(242,27,43)" fg:x="1085" fg:w="1"/><text x="87.3287%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="87.1589%" y="261" width="0.9631%" height="15" fill="rgb(227,54,8)" fg:x="1086" fg:w="12"/><text x="87.4089%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="87.1589%" y="245" width="0.9631%" height="15" fill="rgb(253,139,49)" fg:x="1086" fg:w="12"/><text x="87.4089%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.0417%" y="229" width="0.0803%" height="15" fill="rgb(231,26,43)" fg:x="1097" fg:w="1"/><text x="88.2917%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="88.1220%" y="261" width="0.3210%" height="15" fill="rgb(207,121,39)" fg:x="1098" fg:w="4"/><text x="88.3720%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="88.2022%" y="245" width="0.2408%" height="15" fill="rgb(223,101,35)" fg:x="1099" fg:w="3"/><text x="88.4522%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="88.4430%" y="229" width="0.3210%" height="15" fill="rgb(232,87,23)" fg:x="1102" fg:w="4"/><text x="88.6930%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="88.5233%" y="213" width="0.2408%" height="15" fill="rgb(225,180,29)" fg:x="1103" fg:w="3"/><text x="88.7733%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="88.5233%" y="197" width="0.2408%" height="15" fill="rgb(225,25,17)" fg:x="1103" fg:w="3"/><text x="88.7733%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="88.5233%" y="181" width="0.2408%" height="15" fill="rgb(223,8,52)" fg:x="1103" fg:w="3"/><text x="88.7733%" y="191.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="88.5233%" y="165" width="0.2408%" height="15" fill="rgb(246,42,21)" fg:x="1103" fg:w="3"/><text x="88.7733%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="88.7640%" y="229" width="0.2408%" height="15" fill="rgb(205,64,43)" fg:x="1106" fg:w="3"/><text x="89.0140%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="88.7640%" y="213" width="0.2408%" height="15" fill="rgb(221,160,13)" fg:x="1106" fg:w="3"/><text x="89.0140%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="88.7640%" y="197" width="0.2408%" height="15" fill="rgb(239,58,35)" fg:x="1106" fg:w="3"/><text x="89.0140%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.72%)</title><rect x="88.4430%" y="261" width="0.7223%" height="15" fill="rgb(251,26,40)" fg:x="1102" fg:w="9"/><text x="88.6930%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="88.4430%" y="245" width="0.7223%" height="15" fill="rgb(247,0,4)" fg:x="1102" fg:w="9"/><text x="88.6930%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="89.0048%" y="229" width="0.1605%" height="15" fill="rgb(218,130,10)" fg:x="1109" fg:w="2"/><text x="89.2548%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="89.2456%" y="197" width="0.0803%" height="15" fill="rgb(239,32,7)" fg:x="1112" fg:w="1"/><text x="89.4956%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="89.9679%" y="149" width="0.2408%" height="15" fill="rgb(210,192,24)" fg:x="1121" fg:w="3"/><text x="90.2179%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="90.2087%" y="149" width="0.3210%" height="15" fill="rgb(226,212,17)" fg:x="1124" fg:w="4"/><text x="90.4587%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.3692%" y="133" width="0.1605%" height="15" fill="rgb(219,201,28)" fg:x="1126" fg:w="2"/><text x="90.6192%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.3692%" y="117" width="0.1605%" height="15" fill="rgb(235,207,41)" fg:x="1126" fg:w="2"/><text x="90.6192%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.3692%" y="101" width="0.1605%" height="15" fill="rgb(241,95,54)" fg:x="1126" fg:w="2"/><text x="90.6192%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6902%" y="117" width="0.0803%" height="15" fill="rgb(248,12,23)" fg:x="1130" fg:w="1"/><text x="90.9402%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.6902%" y="101" width="0.0803%" height="15" fill="rgb(228,173,4)" fg:x="1130" fg:w="1"/><text x="90.9402%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.6902%" y="85" width="0.0803%" height="15" fill="rgb(254,99,5)" fg:x="1130" fg:w="1"/><text x="90.9402%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="90.5297%" y="149" width="0.4013%" height="15" fill="rgb(212,184,17)" fg:x="1128" fg:w="5"/><text x="90.7797%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="90.5297%" y="133" width="0.4013%" height="15" fill="rgb(252,174,1)" fg:x="1128" fg:w="5"/><text x="90.7797%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="90.7705%" y="117" width="0.1605%" height="15" fill="rgb(241,118,51)" fg:x="1131" fg:w="2"/><text x="91.0205%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.8507%" y="101" width="0.0803%" height="15" fill="rgb(227,94,47)" fg:x="1132" fg:w="1"/><text x="91.1007%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (53 samples, 4.25%)</title><rect x="90.9310%" y="149" width="4.2536%" height="15" fill="rgb(229,104,2)" fg:x="1133" fg:w="53"/><text x="91.1810%" y="159.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (53 samples, 4.25%)</title><rect x="90.9310%" y="133" width="4.2536%" height="15" fill="rgb(219,28,31)" fg:x="1133" fg:w="53"/><text x="91.1810%" y="143.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (53 samples, 4.25%)</title><rect x="90.9310%" y="117" width="4.2536%" height="15" fill="rgb(233,109,36)" fg:x="1133" fg:w="53"/><text x="91.1810%" y="127.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="95.1846%" y="149" width="0.0803%" height="15" fill="rgb(246,88,11)" fg:x="1186" fg:w="1"/><text x="95.4346%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 6.26%)</title><rect x="89.1653%" y="245" width="6.2600%" height="15" fill="rgb(209,212,17)" fg:x="1111" fg:w="78"/><text x="89.4153%" y="255.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.18%)</title><rect x="89.2456%" y="229" width="6.1798%" height="15" fill="rgb(243,59,29)" fg:x="1112" fg:w="77"/><text x="89.4956%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.18%)</title><rect x="89.2456%" y="213" width="6.1798%" height="15" fill="rgb(244,205,48)" fg:x="1112" fg:w="77"/><text x="89.4956%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (76 samples, 6.10%)</title><rect x="89.3258%" y="197" width="6.0995%" height="15" fill="rgb(227,30,6)" fg:x="1113" fg:w="76"/><text x="89.5758%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (76 samples, 6.10%)</title><rect x="89.3258%" y="181" width="6.0995%" height="15" fill="rgb(220,205,48)" fg:x="1113" fg:w="76"/><text x="89.5758%" y="191.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (76 samples, 6.10%)</title><rect x="89.3258%" y="165" width="6.0995%" height="15" fill="rgb(250,94,14)" fg:x="1113" fg:w="76"/><text x="89.5758%" y="175.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="95.2648%" y="149" width="0.1605%" height="15" fill="rgb(216,119,42)" fg:x="1187" fg:w="2"/><text x="95.5148%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.2648%" y="133" width="0.1605%" height="15" fill="rgb(232,155,0)" fg:x="1187" fg:w="2"/><text x="95.5148%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.2648%" y="117" width="0.1605%" height="15" fill="rgb(212,24,32)" fg:x="1187" fg:w="2"/><text x="95.5148%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3451%" y="101" width="0.0803%" height="15" fill="rgb(216,69,20)" fg:x="1188" fg:w="1"/><text x="95.5951%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="95.4254%" y="229" width="0.1605%" height="15" fill="rgb(229,73,31)" fg:x="1189" fg:w="2"/><text x="95.6754%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.4254%" y="213" width="0.1605%" height="15" fill="rgb(224,219,20)" fg:x="1189" fg:w="2"/><text x="95.6754%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.4254%" y="197" width="0.1605%" height="15" fill="rgb(215,146,41)" fg:x="1189" fg:w="2"/><text x="95.6754%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="95.4254%" y="181" width="0.1605%" height="15" fill="rgb(244,71,31)" fg:x="1189" fg:w="2"/><text x="95.6754%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (82 samples, 6.58%)</title><rect x="89.1653%" y="261" width="6.5811%" height="15" fill="rgb(224,24,11)" fg:x="1111" fg:w="82"/><text x="89.4153%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="95.4254%" y="245" width="0.3210%" height="15" fill="rgb(229,76,15)" fg:x="1189" fg:w="4"/><text x="95.6754%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="95.5859%" y="229" width="0.1605%" height="15" fill="rgb(209,93,2)" fg:x="1191" fg:w="2"/><text x="95.8359%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (108 samples, 8.67%)</title><rect x="87.1589%" y="277" width="8.6677%" height="15" fill="rgb(216,200,50)" fg:x="1086" fg:w="108"/><text x="87.4089%" y="287.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.7464%" y="261" width="0.0803%" height="15" fill="rgb(211,67,34)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="95.7464%" y="245" width="0.0803%" height="15" fill="rgb(225,87,47)" fg:x="1193" fg:w="1"/><text x="95.9964%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.9069%" y="245" width="0.0803%" height="15" fill="rgb(217,185,16)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.9069%" y="229" width="0.0803%" height="15" fill="rgb(205,0,0)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9069%" y="213" width="0.0803%" height="15" fill="rgb(207,116,45)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9069%" y="197" width="0.0803%" height="15" fill="rgb(221,156,26)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9069%" y="181" width="0.0803%" height="15" fill="rgb(213,140,4)" fg:x="1195" fg:w="1"/><text x="96.1569%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="95.9872%" y="245" width="0.1605%" height="15" fill="rgb(231,224,15)" fg:x="1196" fg:w="2"/><text x="96.2372%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="95.9872%" y="229" width="0.1605%" height="15" fill="rgb(244,76,20)" fg:x="1196" fg:w="2"/><text x="96.2372%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="95.8266%" y="277" width="0.4013%" height="15" fill="rgb(238,117,7)" fg:x="1194" fg:w="5"/><text x="96.0766%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="95.8266%" y="261" width="0.4013%" height="15" fill="rgb(235,1,10)" fg:x="1194" fg:w="5"/><text x="96.0766%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.1477%" y="245" width="0.0803%" height="15" fill="rgb(216,165,6)" fg:x="1198" fg:w="1"/><text x="96.3977%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5490%" y="213" width="0.0803%" height="15" fill="rgb(246,91,35)" fg:x="1203" fg:w="1"/><text x="96.7990%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5490%" y="197" width="0.0803%" height="15" fill="rgb(228,96,24)" fg:x="1203" fg:w="1"/><text x="96.7990%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.5490%" y="181" width="0.0803%" height="15" fill="rgb(254,217,53)" fg:x="1203" fg:w="1"/><text x="96.7990%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="96.2279%" y="245" width="0.4815%" height="15" fill="rgb(209,60,0)" fg:x="1199" fg:w="6"/><text x="96.4779%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="96.2279%" y="229" width="0.4815%" height="15" fill="rgb(250,93,26)" fg:x="1199" fg:w="6"/><text x="96.4779%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.6292%" y="213" width="0.0803%" height="15" fill="rgb(211,9,40)" fg:x="1204" fg:w="1"/><text x="96.8792%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.7095%" y="245" width="0.0803%" height="15" fill="rgb(242,57,20)" fg:x="1205" fg:w="1"/><text x="96.9595%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (121 samples, 9.71%)</title><rect x="87.1589%" y="325" width="9.7111%" height="15" fill="rgb(248,85,48)" fg:x="1086" fg:w="121"/><text x="87.4089%" y="335.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (121 samples, 9.71%)</title><rect x="87.1589%" y="309" width="9.7111%" height="15" fill="rgb(212,117,2)" fg:x="1086" fg:w="121"/><text x="87.4089%" y="319.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (121 samples, 9.71%)</title><rect x="87.1589%" y="293" width="9.7111%" height="15" fill="rgb(243,19,3)" fg:x="1086" fg:w="121"/><text x="87.4089%" y="303.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="96.2279%" y="277" width="0.6421%" height="15" fill="rgb(232,217,24)" fg:x="1199" fg:w="8"/><text x="96.4779%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="96.2279%" y="261" width="0.6421%" height="15" fill="rgb(224,175,40)" fg:x="1199" fg:w="8"/><text x="96.4779%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.7897%" y="245" width="0.0803%" height="15" fill="rgb(212,162,32)" fg:x="1206" fg:w="1"/><text x="97.0397%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="96.8700%" y="325" width="0.1605%" height="15" fill="rgb(215,9,4)" fg:x="1207" fg:w="2"/><text x="97.1200%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="96.8700%" y="309" width="0.1605%" height="15" fill="rgb(242,42,7)" fg:x="1207" fg:w="2"/><text x="97.1200%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="96.8700%" y="293" width="0.1605%" height="15" fill="rgb(242,184,45)" fg:x="1207" fg:w="2"/><text x="97.1200%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="96.8700%" y="277" width="0.1605%" height="15" fill="rgb(228,111,51)" fg:x="1207" fg:w="2"/><text x="97.1200%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.0305%" y="309" width="0.0803%" height="15" fill="rgb(236,147,17)" fg:x="1209" fg:w="1"/><text x="97.2805%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.0305%" y="293" width="0.0803%" height="15" fill="rgb(210,75,22)" fg:x="1209" fg:w="1"/><text x="97.2805%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (133 samples, 10.67%)</title><rect x="87.1589%" y="341" width="10.6742%" height="15" fill="rgb(217,159,45)" fg:x="1086" fg:w="133"/><text x="87.4089%" y="351.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.80%)</title><rect x="97.0305%" y="325" width="0.8026%" height="15" fill="rgb(245,165,53)" fg:x="1209" fg:w="10"/><text x="97.2805%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="97.1108%" y="309" width="0.7223%" height="15" fill="rgb(251,190,50)" fg:x="1210" fg:w="9"/><text x="97.3608%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="97.1108%" y="293" width="0.7223%" height="15" fill="rgb(208,203,29)" fg:x="1210" fg:w="9"/><text x="97.3608%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="97.1108%" y="277" width="0.7223%" height="15" fill="rgb(207,209,35)" fg:x="1210" fg:w="9"/><text x="97.3608%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="97.1108%" y="261" width="0.7223%" height="15" fill="rgb(230,144,49)" fg:x="1210" fg:w="9"/><text x="97.3608%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="97.1910%" y="245" width="0.6421%" height="15" fill="rgb(229,31,6)" fg:x="1211" fg:w="8"/><text x="97.4410%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.7528%" y="229" width="0.0803%" height="15" fill="rgb(251,129,24)" fg:x="1218" fg:w="1"/><text x="98.0028%" y="239.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="97.8331%" y="325" width="0.0803%" height="15" fill="rgb(235,105,15)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="335.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="97.8331%" y="309" width="0.0803%" height="15" fill="rgb(216,52,43)" fg:x="1219" fg:w="1"/><text x="98.0831%" y="319.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="97.9133%" y="293" width="0.0803%" height="15" fill="rgb(238,144,41)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="97.9133%" y="277" width="0.0803%" height="15" fill="rgb(243,63,9)" fg:x="1220" fg:w="1"/><text x="98.1633%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9936%" y="261" width="0.0803%" height="15" fill="rgb(246,208,1)" fg:x="1221" fg:w="1"/><text x="98.2436%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="98.0738%" y="261" width="0.0803%" height="15" fill="rgb(233,182,18)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.0738%" y="245" width="0.0803%" height="15" fill="rgb(242,224,8)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="98.0738%" y="229" width="0.0803%" height="15" fill="rgb(243,54,37)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.0738%" y="213" width="0.0803%" height="15" fill="rgb(233,192,12)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.0738%" y="197" width="0.0803%" height="15" fill="rgb(251,192,53)" fg:x="1222" fg:w="1"/><text x="98.3238%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="98.2343%" y="245" width="0.0803%" height="15" fill="rgb(246,141,26)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="98.2343%" y="229" width="0.0803%" height="15" fill="rgb(239,195,19)" fg:x="1224" fg:w="1"/><text x="98.4843%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="98.3146%" y="245" width="0.1605%" height="15" fill="rgb(241,16,39)" fg:x="1225" fg:w="2"/><text x="98.5646%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="98.3146%" y="229" width="0.1605%" height="15" fill="rgb(223,13,53)" fg:x="1225" fg:w="2"/><text x="98.5646%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="98.3146%" y="213" width="0.1605%" height="15" fill="rgb(214,227,0)" fg:x="1225" fg:w="2"/><text x="98.5646%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="98.3146%" y="197" width="0.1605%" height="15" fill="rgb(228,103,26)" fg:x="1225" fg:w="2"/><text x="98.5646%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="98.3146%" y="181" width="0.1605%" height="15" fill="rgb(254,177,53)" fg:x="1225" fg:w="2"/><text x="98.5646%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.3949%" y="165" width="0.0803%" height="15" fill="rgb(208,201,34)" fg:x="1226" fg:w="1"/><text x="98.6449%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.40%)</title><rect x="98.1541%" y="261" width="0.4013%" height="15" fill="rgb(212,39,5)" fg:x="1223" fg:w="5"/><text x="98.4041%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="98.4751%" y="245" width="0.0803%" height="15" fill="rgb(246,117,3)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="98.4751%" y="229" width="0.0803%" height="15" fill="rgb(244,118,39)" fg:x="1227" fg:w="1"/><text x="98.7251%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="98.5554%" y="213" width="0.0803%" height="15" fill="rgb(241,64,10)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="98.5554%" y="197" width="0.0803%" height="15" fill="rgb(229,39,44)" fg:x="1228" fg:w="1"/><text x="98.8054%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="98.5554%" y="261" width="0.1605%" height="15" fill="rgb(230,226,3)" fg:x="1228" fg:w="2"/><text x="98.8054%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="98.5554%" y="245" width="0.1605%" height="15" fill="rgb(222,13,42)" fg:x="1228" fg:w="2"/><text x="98.8054%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="98.5554%" y="229" width="0.1605%" height="15" fill="rgb(247,180,54)" fg:x="1228" fg:w="2"/><text x="98.8054%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="98.6356%" y="213" width="0.0803%" height="15" fill="rgb(205,96,16)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.6356%" y="197" width="0.0803%" height="15" fill="rgb(205,100,21)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.6356%" y="181" width="0.0803%" height="15" fill="rgb(248,51,4)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6356%" y="165" width="0.0803%" height="15" fill="rgb(217,197,30)" fg:x="1229" fg:w="1"/><text x="98.8856%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="98.7159%" y="229" width="0.1605%" height="15" fill="rgb(240,179,40)" fg:x="1230" fg:w="2"/><text x="98.9659%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="98.7159%" y="213" width="0.1605%" height="15" fill="rgb(212,185,35)" fg:x="1230" fg:w="2"/><text x="98.9659%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (13 samples, 1.04%)</title><rect x="97.9133%" y="309" width="1.0433%" height="15" fill="rgb(251,222,31)" fg:x="1220" fg:w="13"/><text x="98.1633%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (12 samples, 0.96%)</title><rect x="97.9936%" y="293" width="0.9631%" height="15" fill="rgb(208,140,36)" fg:x="1221" fg:w="12"/><text x="98.2436%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (12 samples, 0.96%)</title><rect x="97.9936%" y="277" width="0.9631%" height="15" fill="rgb(220,148,1)" fg:x="1221" fg:w="12"/><text x="98.2436%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="98.7159%" y="261" width="0.2408%" height="15" fill="rgb(254,4,28)" fg:x="1230" fg:w="3"/><text x="98.9659%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="98.7159%" y="245" width="0.2408%" height="15" fill="rgb(222,185,44)" fg:x="1230" fg:w="3"/><text x="98.9659%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="98.8764%" y="229" width="0.0803%" height="15" fill="rgb(215,74,39)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8764%" y="213" width="0.0803%" height="15" fill="rgb(247,86,4)" fg:x="1232" fg:w="1"/><text x="99.1264%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.9567%" y="277" width="0.0803%" height="15" fill="rgb(231,105,32)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="98.9567%" y="261" width="0.0803%" height="15" fill="rgb(222,65,35)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.9567%" y="245" width="0.0803%" height="15" fill="rgb(218,145,35)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.9567%" y="229" width="0.0803%" height="15" fill="rgb(208,7,15)" fg:x="1233" fg:w="1"/><text x="99.2067%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="98.9567%" y="309" width="0.1605%" height="15" fill="rgb(209,83,13)" fg:x="1233" fg:w="2"/><text x="99.2067%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="98.9567%" y="293" width="0.1605%" height="15" fill="rgb(218,3,10)" fg:x="1233" fg:w="2"/><text x="99.2067%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="99.0369%" y="277" width="0.0803%" height="15" fill="rgb(211,219,4)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="99.0369%" y="261" width="0.0803%" height="15" fill="rgb(228,194,12)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0369%" y="245" width="0.0803%" height="15" fill="rgb(210,175,7)" fg:x="1234" fg:w="1"/><text x="99.2869%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (17 samples, 1.36%)</title><rect x="97.9133%" y="325" width="1.3644%" height="15" fill="rgb(243,132,6)" fg:x="1220" fg:w="17"/><text x="98.1633%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="99.1172%" y="309" width="0.1605%" height="15" fill="rgb(207,72,18)" fg:x="1235" fg:w="2"/><text x="99.3672%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="99.1172%" y="293" width="0.1605%" height="15" fill="rgb(236,1,18)" fg:x="1235" fg:w="2"/><text x="99.3672%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="99.1974%" y="277" width="0.0803%" height="15" fill="rgb(227,0,18)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="99.1974%" y="261" width="0.0803%" height="15" fill="rgb(247,37,5)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="99.1974%" y="245" width="0.0803%" height="15" fill="rgb(237,179,24)" fg:x="1236" fg:w="1"/><text x="99.4474%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (243 samples, 19.50%)</title><rect x="79.9358%" y="421" width="19.5024%" height="15" fill="rgb(226,53,20)" fg:x="996" fg:w="243"/><text x="80.1858%" y="431.50">&lt;&amp;kernel::model::entry::Entry a..</text></g><g><title>plugins_core::looking::model::qualify_name (237 samples, 19.02%)</title><rect x="80.4173%" y="405" width="19.0209%" height="15" fill="rgb(247,75,7)" fg:x="1002" fg:w="237"/><text x="80.6673%" y="415.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (237 samples, 19.02%)</title><rect x="80.4173%" y="389" width="19.0209%" height="15" fill="rgb(233,96,12)" fg:x="1002" fg:w="237"/><text x="80.6673%" y="399.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (237 samples, 19.02%)</title><rect x="80.4173%" y="373" width="19.0209%" height="15" fill="rgb(224,125,0)" fg:x="1002" fg:w="237"/><text x="80.6673%" y="383.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (237 samples, 19.02%)</title><rect x="80.4173%" y="357" width="19.0209%" height="15" fill="rgb(224,92,25)" fg:x="1002" fg:w="237"/><text x="80.6673%" y="367.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (20 samples, 1.61%)</title><rect x="97.8331%" y="341" width="1.6051%" height="15" fill="rgb(224,42,24)" fg:x="1219" fg:w="20"/><text x="98.0831%" y="351.50"></text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="99.2777%" y="325" width="0.1605%" height="15" fill="rgb(234,132,49)" fg:x="1237" fg:w="2"/><text x="99.5277%" y="335.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.4382%" y="389" width="0.1605%" height="15" fill="rgb(248,100,35)" fg:x="1239" fg:w="2"/><text x="99.6882%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.4382%" y="373" width="0.1605%" height="15" fill="rgb(239,94,40)" fg:x="1239" fg:w="2"/><text x="99.6882%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.4382%" y="357" width="0.1605%" height="15" fill="rgb(235,139,28)" fg:x="1239" fg:w="2"/><text x="99.6882%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5185%" y="341" width="0.0803%" height="15" fill="rgb(217,144,7)" fg:x="1240" fg:w="1"/><text x="99.7685%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="99.5987%" y="341" width="0.0803%" height="15" fill="rgb(227,55,4)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.5987%" y="325" width="0.0803%" height="15" fill="rgb(252,82,54)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="335.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="99.5987%" y="309" width="0.0803%" height="15" fill="rgb(245,172,4)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.5987%" y="293" width="0.0803%" height="15" fill="rgb(207,26,27)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.5987%" y="277" width="0.0803%" height="15" fill="rgb(252,98,18)" fg:x="1241" fg:w="1"/><text x="99.8487%" y="287.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="99.5987%" y="389" width="0.1605%" height="15" fill="rgb(244,8,26)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="99.5987%" y="373" width="0.1605%" height="15" fill="rgb(237,173,45)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.5987%" y="357" width="0.1605%" height="15" fill="rgb(208,213,49)" fg:x="1241" fg:w="2"/><text x="99.8487%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6790%" y="341" width="0.0803%" height="15" fill="rgb(212,122,37)" fg:x="1242" fg:w="1"/><text x="99.9290%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (278 samples, 22.31%)</title><rect x="77.5281%" y="597" width="22.3114%" height="15" fill="rgb(213,80,17)" fg:x="966" fg:w="278"/><text x="77.7781%" y="607.50">&lt;engine::session::Session as kernel..</text></g><g><title>kernel::plugins::mw::apply_middleware (249 samples, 19.98%)</title><rect x="79.8555%" y="581" width="19.9839%" height="15" fill="rgb(206,210,43)" fg:x="995" fg:w="249"/><text x="80.1055%" y="591.50">kernel::plugins::mw::apply_midd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (249 samples, 19.98%)</title><rect x="79.8555%" y="565" width="19.9839%" height="15" fill="rgb(229,214,3)" fg:x="995" fg:w="249"/><text x="80.1055%" y="575.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (249 samples, 19.98%)</title><rect x="79.8555%" y="549" width="19.9839%" height="15" fill="rgb(235,213,29)" fg:x="995" fg:w="249"/><text x="80.1055%" y="559.50">&lt;plugins_dynlib::DynamicMiddlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (249 samples, 19.98%)</title><rect x="79.8555%" y="533" width="19.9839%" height="15" fill="rgb(248,135,26)" fg:x="995" fg:w="249"/><text x="80.1055%" y="543.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (249 samples, 19.98%)</title><rect x="79.8555%" y="517" width="19.9839%" height="15" fill="rgb(242,188,12)" fg:x="995" fg:w="249"/><text x="80.1055%" y="527.50">core::ops::function::FnOnce::ca..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (249 samples, 19.98%)</title><rect x="79.8555%" y="501" width="19.9839%" height="15" fill="rgb(245,38,12)" fg:x="995" fg:w="249"/><text x="80.1055%" y="511.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (248 samples, 19.90%)</title><rect x="79.9358%" y="485" width="19.9037%" height="15" fill="rgb(218,42,13)" fg:x="996" fg:w="248"/><text x="80.1858%" y="495.50">core::ops::function::FnOnce::ca..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (248 samples, 19.90%)</title><rect x="79.9358%" y="469" width="19.9037%" height="15" fill="rgb(238,132,49)" fg:x="996" fg:w="248"/><text x="80.1858%" y="479.50">&lt;engine::session::state::State ..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (248 samples, 19.90%)</title><rect x="79.9358%" y="453" width="19.9037%" height="15" fill="rgb(209,196,19)" fg:x="996" fg:w="248"/><text x="80.1858%" y="463.50">&lt;plugins_core::looking::actions..</text></g><g><title>plugins_core::looking::model::new_area_observation (248 samples, 19.90%)</title><rect x="79.9358%" y="437" width="19.9037%" height="15" fill="rgb(244,131,22)" fg:x="996" fg:w="248"/><text x="80.1858%" y="447.50">plugins_core::looking::model::n..</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="99.4382%" y="421" width="0.4013%" height="15" fill="rgb(223,18,34)" fg:x="1239" fg:w="5"/><text x="99.6882%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="99.4382%" y="405" width="0.4013%" height="15" fill="rgb(252,124,54)" fg:x="1239" fg:w="5"/><text x="99.6882%" y="415.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.7592%" y="389" width="0.0803%" height="15" fill="rgb(229,106,42)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.7592%" y="373" width="0.0803%" height="15" fill="rgb(221,129,1)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.7592%" y="357" width="0.0803%" height="15" fill="rgb(229,74,15)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="99.7592%" y="341" width="0.0803%" height="15" fill="rgb(210,206,50)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.7592%" y="325" width="0.0803%" height="15" fill="rgb(251,114,31)" fg:x="1243" fg:w="1"/><text x="100.0092%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.8395%" y="549" width="0.0803%" height="15" fill="rgb(215,225,28)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.8395%" y="533" width="0.0803%" height="15" fill="rgb(237,109,14)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.8395%" y="517" width="0.0803%" height="15" fill="rgb(230,13,37)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.8395%" y="501" width="0.0803%" height="15" fill="rgb(231,40,28)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.8395%" y="485" width="0.0803%" height="15" fill="rgb(231,202,18)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8395%" y="469" width="0.0803%" height="15" fill="rgb(225,33,18)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8395%" y="453" width="0.0803%" height="15" fill="rgb(223,64,47)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8395%" y="437" width="0.0803%" height="15" fill="rgb(234,114,13)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8395%" y="421" width="0.0803%" height="15" fill="rgb(248,56,40)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.8395%" y="405" width="0.0803%" height="15" fill="rgb(221,194,21)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8395%" y="389" width="0.0803%" height="15" fill="rgb(242,108,46)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8395%" y="373" width="0.0803%" height="15" fill="rgb(220,106,10)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8395%" y="357" width="0.0803%" height="15" fill="rgb(211,88,4)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8395%" y="341" width="0.0803%" height="15" fill="rgb(214,95,34)" fg:x="1244" fg:w="1"/><text x="100.0895%" y="351.50"></text></g><g><title>all (1,246 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(250,160,33)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="975.50"></text></g><g><title>simple-484c7248 (1,246 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(225,29,10)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="959.50">simple-484c7248</text></g><g><title>_start (1,246 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(224,28,30)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="943.50">_start</text></g><g><title>__libc_start_main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(231,77,4)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="927.50">__libc_start_main</text></g><g><title>main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(209,63,21)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (1,246 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(226,22,11)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(216,82,30)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(246,227,38)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(251,203,53)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="847.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(254,101,1)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="831.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,246 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(241,180,5)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,246 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(218,168,4)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,246 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(224,223,32)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,246 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(236,106,22)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,246 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(206,121,5)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,246 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(233,87,28)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,246 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(236,137,17)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="719.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,246 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(209,183,38)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="703.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,246 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(206,162,44)" fg:x="0" fg:w="1246"/><text x="0.2500%" y="687.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (330 samples, 26.48%)</title><rect x="73.5152%" y="661" width="26.4848%" height="15" fill="rgb(237,70,39)" fg:x="916" fg:w="330"/><text x="73.7652%" y="671.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cr..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (330 samples, 26.48%)</title><rect x="73.5152%" y="645" width="26.4848%" height="15" fill="rgb(212,176,5)" fg:x="916" fg:w="330"/><text x="73.7652%" y="655.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (330 samples, 26.48%)</title><rect x="73.5152%" y="629" width="26.4848%" height="15" fill="rgb(232,95,16)" fg:x="916" fg:w="330"/><text x="73.7652%" y="639.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (280 samples, 22.47%)</title><rect x="77.5281%" y="613" width="22.4719%" height="15" fill="rgb(219,115,35)" fg:x="966" fg:w="280"/><text x="77.7781%" y="623.50">engine::session::Session::evaluate_a..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="99.8395%" y="597" width="0.1605%" height="15" fill="rgb(251,67,27)" fg:x="1244" fg:w="2"/><text x="100.0895%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.8395%" y="581" width="0.1605%" height="15" fill="rgb(222,95,40)" fg:x="1244" fg:w="2"/><text x="100.0895%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.8395%" y="565" width="0.1605%" height="15" fill="rgb(250,35,16)" fg:x="1244" fg:w="2"/><text x="100.0895%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="99.9197%" y="549" width="0.0803%" height="15" fill="rgb(224,86,44)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9197%" y="533" width="0.0803%" height="15" fill="rgb(237,53,53)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9197%" y="517" width="0.0803%" height="15" fill="rgb(208,171,33)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.9197%" y="501" width="0.0803%" height="15" fill="rgb(222,64,27)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9197%" y="485" width="0.0803%" height="15" fill="rgb(221,121,35)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9197%" y="469" width="0.0803%" height="15" fill="rgb(228,137,42)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9197%" y="453" width="0.0803%" height="15" fill="rgb(227,54,21)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9197%" y="437" width="0.0803%" height="15" fill="rgb(240,168,33)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9197%" y="421" width="0.0803%" height="15" fill="rgb(243,159,6)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9197%" y="405" width="0.0803%" height="15" fill="rgb(205,211,41)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.9197%" y="389" width="0.0803%" height="15" fill="rgb(253,30,1)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9197%" y="373" width="0.0803%" height="15" fill="rgb(226,80,18)" fg:x="1245" fg:w="1"/><text x="100.1697%" y="383.50"></text></g></svg></svg>