<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1173.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1173.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::perform::StandardPerformer&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0000%" y="773" width="0.0801%" height="15" fill="rgb(237,226,12)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="757" width="0.0801%" height="15" fill="rgb(229,133,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="741" width="0.0801%" height="15" fill="rgb(238,33,43)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0801%" y="645" width="0.0801%" height="15" fill="rgb(227,59,38)" fg:x="1" fg:w="1"/><text x="0.3301%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0000%" y="789" width="0.2402%" height="15" fill="rgb(230,97,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (2 samples, 0.16%)</title><rect x="0.0801%" y="773" width="0.1601%" height="15" fill="rgb(250,173,50)" fg:x="1" fg:w="2"/><text x="0.3301%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0801%" y="757" width="0.1601%" height="15" fill="rgb(240,15,50)" fg:x="1" fg:w="2"/><text x="0.3301%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="0.0801%" y="741" width="0.1601%" height="15" fill="rgb(221,93,22)" fg:x="1" fg:w="2"/><text x="0.3301%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0801%" y="725" width="0.1601%" height="15" fill="rgb(245,180,53)" fg:x="1" fg:w="2"/><text x="0.3301%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0801%" y="709" width="0.1601%" height="15" fill="rgb(231,88,51)" fg:x="1" fg:w="2"/><text x="0.3301%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (2 samples, 0.16%)</title><rect x="0.0801%" y="693" width="0.1601%" height="15" fill="rgb(240,58,21)" fg:x="1" fg:w="2"/><text x="0.3301%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="0.0801%" y="677" width="0.1601%" height="15" fill="rgb(237,21,10)" fg:x="1" fg:w="2"/><text x="0.3301%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0801%" y="661" width="0.1601%" height="15" fill="rgb(218,43,11)" fg:x="1" fg:w="2"/><text x="0.3301%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1601%" y="645" width="0.0801%" height="15" fill="rgb(218,221,29)" fg:x="2" fg:w="1"/><text x="0.4101%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.2402%" y="709" width="0.0801%" height="15" fill="rgb(214,118,42)" fg:x="3" fg:w="1"/><text x="0.4902%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="0.2402%" y="693" width="0.0801%" height="15" fill="rgb(251,200,26)" fg:x="3" fg:w="1"/><text x="0.4902%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="0.2402%" y="677" width="0.0801%" height="15" fill="rgb(237,101,39)" fg:x="3" fg:w="1"/><text x="0.4902%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.2402%" y="661" width="0.0801%" height="15" fill="rgb(251,117,11)" fg:x="3" fg:w="1"/><text x="0.4902%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.2402%" y="645" width="0.0801%" height="15" fill="rgb(216,223,23)" fg:x="3" fg:w="1"/><text x="0.4902%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.2402%" y="629" width="0.0801%" height="15" fill="rgb(251,54,12)" fg:x="3" fg:w="1"/><text x="0.4902%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.2402%" y="613" width="0.0801%" height="15" fill="rgb(254,176,54)" fg:x="3" fg:w="1"/><text x="0.4902%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.2402%" y="597" width="0.0801%" height="15" fill="rgb(210,32,8)" fg:x="3" fg:w="1"/><text x="0.4902%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.2402%" y="581" width="0.0801%" height="15" fill="rgb(235,52,38)" fg:x="3" fg:w="1"/><text x="0.4902%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.2402%" y="565" width="0.0801%" height="15" fill="rgb(231,4,44)" fg:x="3" fg:w="1"/><text x="0.4902%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.2402%" y="549" width="0.0801%" height="15" fill="rgb(249,2,32)" fg:x="3" fg:w="1"/><text x="0.4902%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.2402%" y="533" width="0.0801%" height="15" fill="rgb(224,65,26)" fg:x="3" fg:w="1"/><text x="0.4902%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.2402%" y="517" width="0.0801%" height="15" fill="rgb(250,73,40)" fg:x="3" fg:w="1"/><text x="0.4902%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.2402%" y="501" width="0.0801%" height="15" fill="rgb(253,177,16)" fg:x="3" fg:w="1"/><text x="0.4902%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.2402%" y="485" width="0.0801%" height="15" fill="rgb(217,32,34)" fg:x="3" fg:w="1"/><text x="0.4902%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="0.2402%" y="469" width="0.0801%" height="15" fill="rgb(212,7,10)" fg:x="3" fg:w="1"/><text x="0.4902%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="0.2402%" y="453" width="0.0801%" height="15" fill="rgb(245,89,8)" fg:x="3" fg:w="1"/><text x="0.4902%" y="463.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="0.2402%" y="437" width="0.0801%" height="15" fill="rgb(237,16,53)" fg:x="3" fg:w="1"/><text x="0.4902%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.3203%" y="709" width="0.0801%" height="15" fill="rgb(250,204,30)" fg:x="4" fg:w="1"/><text x="0.5703%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.3203%" y="693" width="0.0801%" height="15" fill="rgb(208,77,27)" fg:x="4" fg:w="1"/><text x="0.5703%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.3203%" y="677" width="0.0801%" height="15" fill="rgb(250,204,28)" fg:x="4" fg:w="1"/><text x="0.5703%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.3203%" y="661" width="0.0801%" height="15" fill="rgb(244,63,21)" fg:x="4" fg:w="1"/><text x="0.5703%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="0.2402%" y="757" width="0.3203%" height="15" fill="rgb(236,85,44)" fg:x="3" fg:w="4"/><text x="0.4902%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="0.2402%" y="741" width="0.3203%" height="15" fill="rgb(215,98,4)" fg:x="3" fg:w="4"/><text x="0.4902%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="0.2402%" y="725" width="0.3203%" height="15" fill="rgb(235,38,11)" fg:x="3" fg:w="4"/><text x="0.4902%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="0.4003%" y="709" width="0.1601%" height="15" fill="rgb(254,186,25)" fg:x="5" fg:w="2"/><text x="0.6503%" y="719.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="0.4804%" y="693" width="0.0801%" height="15" fill="rgb(225,55,31)" fg:x="6" fg:w="1"/><text x="0.7304%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="0.4804%" y="677" width="0.0801%" height="15" fill="rgb(211,15,21)" fg:x="6" fg:w="1"/><text x="0.7304%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4804%" y="661" width="0.0801%" height="15" fill="rgb(215,187,41)" fg:x="6" fg:w="1"/><text x="0.7304%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4804%" y="645" width="0.0801%" height="15" fill="rgb(248,69,32)" fg:x="6" fg:w="1"/><text x="0.7304%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4804%" y="629" width="0.0801%" height="15" fill="rgb(252,102,52)" fg:x="6" fg:w="1"/><text x="0.7304%" y="639.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="0.6405%" y="709" width="0.1601%" height="15" fill="rgb(253,140,32)" fg:x="8" fg:w="2"/><text x="0.8905%" y="719.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="0.6405%" y="693" width="0.1601%" height="15" fill="rgb(216,56,42)" fg:x="8" fg:w="2"/><text x="0.8905%" y="703.50"></text></g><g><title>__pthread_mutex_lock (1 samples, 0.08%)</title><rect x="0.8807%" y="645" width="0.0801%" height="15" fill="rgb(216,184,14)" fg:x="11" fg:w="1"/><text x="1.1307%" y="655.50"></text></g><g><title>libloading::os::unix::Library::open (12 samples, 0.96%)</title><rect x="0.5604%" y="725" width="0.9608%" height="15" fill="rgb(237,187,27)" fg:x="7" fg:w="12"/><text x="0.8104%" y="735.50"></text></g><g><title>dlopen (9 samples, 0.72%)</title><rect x="0.8006%" y="709" width="0.7206%" height="15" fill="rgb(219,65,3)" fg:x="10" fg:w="9"/><text x="1.0506%" y="719.50"></text></g><g><title>_dl_catch_error (9 samples, 0.72%)</title><rect x="0.8006%" y="693" width="0.7206%" height="15" fill="rgb(245,83,25)" fg:x="10" fg:w="9"/><text x="1.0506%" y="703.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.72%)</title><rect x="0.8006%" y="677" width="0.7206%" height="15" fill="rgb(214,205,45)" fg:x="10" fg:w="9"/><text x="1.0506%" y="687.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="0.8807%" y="661" width="0.6405%" height="15" fill="rgb(241,20,18)" fg:x="11" fg:w="8"/><text x="1.1307%" y="671.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.56%)</title><rect x="0.9608%" y="645" width="0.5604%" height="15" fill="rgb(232,163,23)" fg:x="12" fg:w="7"/><text x="1.2108%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4412%" y="629" width="0.0801%" height="15" fill="rgb(214,5,46)" fg:x="18" fg:w="1"/><text x="1.6912%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (17 samples, 1.36%)</title><rect x="0.2402%" y="789" width="1.3611%" height="15" fill="rgb(229,78,17)" fg:x="3" fg:w="17"/><text x="0.4902%" y="799.50"></text></g><g><title>engine::session::Session::new (17 samples, 1.36%)</title><rect x="0.2402%" y="773" width="1.3611%" height="15" fill="rgb(248,89,10)" fg:x="3" fg:w="17"/><text x="0.4902%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (13 samples, 1.04%)</title><rect x="0.5604%" y="757" width="1.0408%" height="15" fill="rgb(248,54,15)" fg:x="7" fg:w="13"/><text x="0.8104%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (13 samples, 1.04%)</title><rect x="0.5604%" y="741" width="1.0408%" height="15" fill="rgb(223,116,6)" fg:x="7" fg:w="13"/><text x="0.8104%" y="751.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="1.5212%" y="725" width="0.0801%" height="15" fill="rgb(205,125,38)" fg:x="19" fg:w="1"/><text x="1.7712%" y="735.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="1.5212%" y="709" width="0.0801%" height="15" fill="rgb(251,78,38)" fg:x="19" fg:w="1"/><text x="1.7712%" y="719.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.5212%" y="693" width="0.0801%" height="15" fill="rgb(253,78,28)" fg:x="19" fg:w="1"/><text x="1.7712%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.08%)</title><rect x="1.5212%" y="677" width="0.0801%" height="15" fill="rgb(209,120,3)" fg:x="19" fg:w="1"/><text x="1.7712%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.08%)</title><rect x="1.5212%" y="661" width="0.0801%" height="15" fill="rgb(238,229,9)" fg:x="19" fg:w="1"/><text x="1.7712%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.6013%" y="741" width="0.0801%" height="15" fill="rgb(253,159,18)" fg:x="20" fg:w="1"/><text x="1.8513%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="1.6013%" y="725" width="0.0801%" height="15" fill="rgb(244,42,34)" fg:x="20" fg:w="1"/><text x="1.8513%" y="735.50"></text></g><g><title>engine::session::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="1.6013%" y="709" width="0.0801%" height="15" fill="rgb(224,8,7)" fg:x="20" fg:w="1"/><text x="1.8513%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="1.6013%" y="693" width="0.0801%" height="15" fill="rgb(210,201,45)" fg:x="20" fg:w="1"/><text x="1.8513%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.6013%" y="677" width="0.0801%" height="15" fill="rgb(252,185,21)" fg:x="20" fg:w="1"/><text x="1.8513%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="1.6813%" y="693" width="0.1601%" height="15" fill="rgb(223,131,1)" fg:x="21" fg:w="2"/><text x="1.9313%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7614%" y="677" width="0.0801%" height="15" fill="rgb(245,141,16)" fg:x="22" fg:w="1"/><text x="2.0114%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.7614%" y="661" width="0.0801%" height="15" fill="rgb(229,55,45)" fg:x="22" fg:w="1"/><text x="2.0114%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.7614%" y="645" width="0.0801%" height="15" fill="rgb(208,92,15)" fg:x="22" fg:w="1"/><text x="2.0114%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.7614%" y="629" width="0.0801%" height="15" fill="rgb(234,185,47)" fg:x="22" fg:w="1"/><text x="2.0114%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8415%" y="661" width="0.0801%" height="15" fill="rgb(253,104,50)" fg:x="23" fg:w="1"/><text x="2.0915%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8415%" y="645" width="0.0801%" height="15" fill="rgb(205,70,7)" fg:x="23" fg:w="1"/><text x="2.0915%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8415%" y="629" width="0.0801%" height="15" fill="rgb(240,178,43)" fg:x="23" fg:w="1"/><text x="2.0915%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8415%" y="613" width="0.0801%" height="15" fill="rgb(214,112,2)" fg:x="23" fg:w="1"/><text x="2.0915%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8415%" y="597" width="0.0801%" height="15" fill="rgb(206,46,17)" fg:x="23" fg:w="1"/><text x="2.0915%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="1.6813%" y="709" width="0.3203%" height="15" fill="rgb(225,220,16)" fg:x="21" fg:w="4"/><text x="1.9313%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8415%" y="693" width="0.1601%" height="15" fill="rgb(238,65,40)" fg:x="23" fg:w="2"/><text x="2.0915%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8415%" y="677" width="0.1601%" height="15" fill="rgb(230,151,21)" fg:x="23" fg:w="2"/><text x="2.0915%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9215%" y="661" width="0.0801%" height="15" fill="rgb(218,58,49)" fg:x="24" fg:w="1"/><text x="2.1715%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9215%" y="645" width="0.0801%" height="15" fill="rgb(219,179,14)" fg:x="24" fg:w="1"/><text x="2.1715%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.0817%" y="613" width="0.0801%" height="15" fill="rgb(223,72,1)" fg:x="26" fg:w="1"/><text x="2.3317%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0817%" y="597" width="0.0801%" height="15" fill="rgb(238,126,10)" fg:x="26" fg:w="1"/><text x="2.3317%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.0016%" y="709" width="0.2402%" height="15" fill="rgb(224,206,38)" fg:x="25" fg:w="3"/><text x="2.2516%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="2.0016%" y="693" width="0.2402%" height="15" fill="rgb(212,201,54)" fg:x="25" fg:w="3"/><text x="2.2516%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.0016%" y="677" width="0.2402%" height="15" fill="rgb(218,154,48)" fg:x="25" fg:w="3"/><text x="2.2516%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.0817%" y="661" width="0.1601%" height="15" fill="rgb(232,93,24)" fg:x="26" fg:w="2"/><text x="2.3317%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.0817%" y="645" width="0.1601%" height="15" fill="rgb(245,30,21)" fg:x="26" fg:w="2"/><text x="2.3317%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.0817%" y="629" width="0.1601%" height="15" fill="rgb(242,148,29)" fg:x="26" fg:w="2"/><text x="2.3317%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.1617%" y="613" width="0.0801%" height="15" fill="rgb(244,153,54)" fg:x="27" fg:w="1"/><text x="2.4117%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.1617%" y="597" width="0.0801%" height="15" fill="rgb(252,87,22)" fg:x="27" fg:w="1"/><text x="2.4117%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1617%" y="581" width="0.0801%" height="15" fill="rgb(210,51,29)" fg:x="27" fg:w="1"/><text x="2.4117%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.4019%" y="613" width="0.0801%" height="15" fill="rgb(242,136,47)" fg:x="30" fg:w="1"/><text x="2.6519%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4019%" y="597" width="0.0801%" height="15" fill="rgb(238,68,4)" fg:x="30" fg:w="1"/><text x="2.6519%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4019%" y="581" width="0.0801%" height="15" fill="rgb(242,161,30)" fg:x="30" fg:w="1"/><text x="2.6519%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4019%" y="565" width="0.0801%" height="15" fill="rgb(218,58,44)" fg:x="30" fg:w="1"/><text x="2.6519%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4820%" y="581" width="0.0801%" height="15" fill="rgb(252,125,32)" fg:x="31" fg:w="1"/><text x="2.7320%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4820%" y="565" width="0.0801%" height="15" fill="rgb(219,178,0)" fg:x="31" fg:w="1"/><text x="2.7320%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4820%" y="549" width="0.0801%" height="15" fill="rgb(213,152,7)" fg:x="31" fg:w="1"/><text x="2.7320%" y="559.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.04%)</title><rect x="1.6013%" y="773" width="1.0408%" height="15" fill="rgb(249,109,34)" fg:x="20" fg:w="13"/><text x="1.8513%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.04%)</title><rect x="1.6013%" y="757" width="1.0408%" height="15" fill="rgb(232,96,21)" fg:x="20" fg:w="13"/><text x="1.8513%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="1.6813%" y="741" width="0.9608%" height="15" fill="rgb(228,27,39)" fg:x="21" fg:w="12"/><text x="1.9313%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="1.6813%" y="725" width="0.9608%" height="15" fill="rgb(211,182,52)" fg:x="21" fg:w="12"/><text x="1.9313%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="2.2418%" y="709" width="0.4003%" height="15" fill="rgb(234,178,38)" fg:x="28" fg:w="5"/><text x="2.4918%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="2.2418%" y="693" width="0.4003%" height="15" fill="rgb(221,111,3)" fg:x="28" fg:w="5"/><text x="2.4918%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="2.2418%" y="677" width="0.4003%" height="15" fill="rgb(228,175,21)" fg:x="28" fg:w="5"/><text x="2.4918%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="2.3219%" y="661" width="0.3203%" height="15" fill="rgb(228,174,43)" fg:x="29" fg:w="4"/><text x="2.5719%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="2.3219%" y="645" width="0.3203%" height="15" fill="rgb(211,191,0)" fg:x="29" fg:w="4"/><text x="2.5719%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="2.4019%" y="629" width="0.2402%" height="15" fill="rgb(253,117,3)" fg:x="30" fg:w="3"/><text x="2.6519%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4820%" y="613" width="0.1601%" height="15" fill="rgb(241,127,19)" fg:x="31" fg:w="2"/><text x="2.7320%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4820%" y="597" width="0.1601%" height="15" fill="rgb(218,103,12)" fg:x="31" fg:w="2"/><text x="2.7320%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5620%" y="581" width="0.0801%" height="15" fill="rgb(236,214,43)" fg:x="32" fg:w="1"/><text x="2.8120%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.5620%" y="565" width="0.0801%" height="15" fill="rgb(244,144,19)" fg:x="32" fg:w="1"/><text x="2.8120%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5620%" y="549" width="0.0801%" height="15" fill="rgb(246,188,10)" fg:x="32" fg:w="1"/><text x="2.8120%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5620%" y="533" width="0.0801%" height="15" fill="rgb(212,193,33)" fg:x="32" fg:w="1"/><text x="2.8120%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="2.6421%" y="741" width="0.0801%" height="15" fill="rgb(241,51,29)" fg:x="33" fg:w="1"/><text x="2.8921%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="2.6421%" y="725" width="0.0801%" height="15" fill="rgb(211,58,19)" fg:x="33" fg:w="1"/><text x="2.8921%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="2.6421%" y="709" width="0.0801%" height="15" fill="rgb(229,111,26)" fg:x="33" fg:w="1"/><text x="2.8921%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.6421%" y="693" width="0.0801%" height="15" fill="rgb(213,115,40)" fg:x="33" fg:w="1"/><text x="2.8921%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.6421%" y="677" width="0.0801%" height="15" fill="rgb(209,56,44)" fg:x="33" fg:w="1"/><text x="2.8921%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6421%" y="661" width="0.0801%" height="15" fill="rgb(230,108,32)" fg:x="33" fg:w="1"/><text x="2.8921%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.6421%" y="645" width="0.0801%" height="15" fill="rgb(216,165,31)" fg:x="33" fg:w="1"/><text x="2.8921%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6421%" y="629" width="0.0801%" height="15" fill="rgb(218,122,21)" fg:x="33" fg:w="1"/><text x="2.8921%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6421%" y="613" width="0.0801%" height="15" fill="rgb(223,224,47)" fg:x="33" fg:w="1"/><text x="2.8921%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6421%" y="597" width="0.0801%" height="15" fill="rgb(238,102,44)" fg:x="33" fg:w="1"/><text x="2.8921%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.6421%" y="581" width="0.0801%" height="15" fill="rgb(236,46,40)" fg:x="33" fg:w="1"/><text x="2.8921%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6421%" y="565" width="0.0801%" height="15" fill="rgb(247,202,50)" fg:x="33" fg:w="1"/><text x="2.8921%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="2.6421%" y="773" width="0.1601%" height="15" fill="rgb(209,99,20)" fg:x="33" fg:w="2"/><text x="2.8921%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="2.6421%" y="757" width="0.1601%" height="15" fill="rgb(252,27,34)" fg:x="33" fg:w="2"/><text x="2.8921%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.7222%" y="741" width="0.0801%" height="15" fill="rgb(215,206,23)" fg:x="34" fg:w="1"/><text x="2.9722%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.7222%" y="725" width="0.0801%" height="15" fill="rgb(212,135,36)" fg:x="34" fg:w="1"/><text x="2.9722%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="2.7222%" y="709" width="0.0801%" height="15" fill="rgb(240,189,1)" fg:x="34" fg:w="1"/><text x="2.9722%" y="719.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="2.8022%" y="773" width="0.0801%" height="15" fill="rgb(242,56,20)" fg:x="35" fg:w="1"/><text x="3.0522%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="2.8022%" y="757" width="0.0801%" height="15" fill="rgb(247,132,33)" fg:x="35" fg:w="1"/><text x="3.0522%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="2.8022%" y="741" width="0.0801%" height="15" fill="rgb(208,149,11)" fg:x="35" fg:w="1"/><text x="3.0522%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="2.8022%" y="725" width="0.0801%" height="15" fill="rgb(211,33,11)" fg:x="35" fg:w="1"/><text x="3.0522%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.8022%" y="709" width="0.0801%" height="15" fill="rgb(221,29,38)" fg:x="35" fg:w="1"/><text x="3.0522%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.8022%" y="693" width="0.0801%" height="15" fill="rgb(206,182,49)" fg:x="35" fg:w="1"/><text x="3.0522%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.8022%" y="677" width="0.0801%" height="15" fill="rgb(216,140,1)" fg:x="35" fg:w="1"/><text x="3.0522%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8022%" y="661" width="0.0801%" height="15" fill="rgb(232,57,40)" fg:x="35" fg:w="1"/><text x="3.0522%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8022%" y="645" width="0.0801%" height="15" fill="rgb(224,186,18)" fg:x="35" fg:w="1"/><text x="3.0522%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8022%" y="629" width="0.0801%" height="15" fill="rgb(215,121,11)" fg:x="35" fg:w="1"/><text x="3.0522%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8022%" y="613" width="0.0801%" height="15" fill="rgb(245,147,10)" fg:x="35" fg:w="1"/><text x="3.0522%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8022%" y="597" width="0.0801%" height="15" fill="rgb(238,153,13)" fg:x="35" fg:w="1"/><text x="3.0522%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8022%" y="581" width="0.0801%" height="15" fill="rgb(233,108,0)" fg:x="35" fg:w="1"/><text x="3.0522%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.8022%" y="565" width="0.0801%" height="15" fill="rgb(212,157,17)" fg:x="35" fg:w="1"/><text x="3.0522%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.8022%" y="549" width="0.0801%" height="15" fill="rgb(225,213,38)" fg:x="35" fg:w="1"/><text x="3.0522%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.8022%" y="533" width="0.0801%" height="15" fill="rgb(248,16,11)" fg:x="35" fg:w="1"/><text x="3.0522%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.8022%" y="517" width="0.0801%" height="15" fill="rgb(241,33,4)" fg:x="35" fg:w="1"/><text x="3.0522%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.8022%" y="501" width="0.0801%" height="15" fill="rgb(222,26,43)" fg:x="35" fg:w="1"/><text x="3.0522%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.8022%" y="485" width="0.0801%" height="15" fill="rgb(243,29,36)" fg:x="35" fg:w="1"/><text x="3.0522%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.8022%" y="469" width="0.0801%" height="15" fill="rgb(241,9,27)" fg:x="35" fg:w="1"/><text x="3.0522%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.8022%" y="453" width="0.0801%" height="15" fill="rgb(205,117,26)" fg:x="35" fg:w="1"/><text x="3.0522%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.8022%" y="437" width="0.0801%" height="15" fill="rgb(209,80,39)" fg:x="35" fg:w="1"/><text x="3.0522%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8022%" y="421" width="0.0801%" height="15" fill="rgb(239,155,6)" fg:x="35" fg:w="1"/><text x="3.0522%" y="431.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="2.8823%" y="757" width="0.2402%" height="15" fill="rgb(212,104,12)" fg:x="36" fg:w="3"/><text x="3.1323%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="2.8823%" y="741" width="0.2402%" height="15" fill="rgb(234,204,3)" fg:x="36" fg:w="3"/><text x="3.1323%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="2.8823%" y="725" width="0.2402%" height="15" fill="rgb(251,218,7)" fg:x="36" fg:w="3"/><text x="3.1323%" y="735.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="2.8823%" y="709" width="0.2402%" height="15" fill="rgb(221,81,32)" fg:x="36" fg:w="3"/><text x="3.1323%" y="719.50"></text></g><g><title>plugins_core::tools::leads_to (3 samples, 0.24%)</title><rect x="2.8823%" y="693" width="0.2402%" height="15" fill="rgb(214,152,26)" fg:x="36" fg:w="3"/><text x="3.1323%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="2.8823%" y="677" width="0.2402%" height="15" fill="rgb(223,22,3)" fg:x="36" fg:w="3"/><text x="3.1323%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="2.8823%" y="661" width="0.2402%" height="15" fill="rgb(207,174,7)" fg:x="36" fg:w="3"/><text x="3.1323%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="2.8823%" y="645" width="0.2402%" height="15" fill="rgb(224,19,52)" fg:x="36" fg:w="3"/><text x="3.1323%" y="655.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="2.8823%" y="629" width="0.2402%" height="15" fill="rgb(228,24,14)" fg:x="36" fg:w="3"/><text x="3.1323%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="2.8823%" y="613" width="0.2402%" height="15" fill="rgb(230,153,43)" fg:x="36" fg:w="3"/><text x="3.1323%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0424%" y="597" width="0.0801%" height="15" fill="rgb(231,106,12)" fg:x="38" fg:w="1"/><text x="3.2924%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.0424%" y="581" width="0.0801%" height="15" fill="rgb(215,92,2)" fg:x="38" fg:w="1"/><text x="3.2924%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0424%" y="565" width="0.0801%" height="15" fill="rgb(249,143,25)" fg:x="38" fg:w="1"/><text x="3.2924%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0424%" y="549" width="0.0801%" height="15" fill="rgb(252,7,35)" fg:x="38" fg:w="1"/><text x="3.2924%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0424%" y="533" width="0.0801%" height="15" fill="rgb(216,69,40)" fg:x="38" fg:w="1"/><text x="3.2924%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.0424%" y="517" width="0.0801%" height="15" fill="rgb(240,36,33)" fg:x="38" fg:w="1"/><text x="3.2924%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0424%" y="501" width="0.0801%" height="15" fill="rgb(231,128,14)" fg:x="38" fg:w="1"/><text x="3.2924%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.2026%" y="725" width="0.0801%" height="15" fill="rgb(245,143,14)" fg:x="40" fg:w="1"/><text x="3.4526%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.2026%" y="709" width="0.0801%" height="15" fill="rgb(222,130,28)" fg:x="40" fg:w="1"/><text x="3.4526%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2026%" y="693" width="0.0801%" height="15" fill="rgb(212,10,48)" fg:x="40" fg:w="1"/><text x="3.4526%" y="703.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.2026%" y="677" width="0.0801%" height="15" fill="rgb(254,118,45)" fg:x="40" fg:w="1"/><text x="3.4526%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2826%" y="709" width="0.0801%" height="15" fill="rgb(228,6,45)" fg:x="41" fg:w="1"/><text x="3.5326%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3627%" y="709" width="0.0801%" height="15" fill="rgb(241,18,35)" fg:x="42" fg:w="1"/><text x="3.6127%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.3627%" y="693" width="0.0801%" height="15" fill="rgb(227,214,53)" fg:x="42" fg:w="1"/><text x="3.6127%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.3627%" y="677" width="0.0801%" height="15" fill="rgb(224,107,51)" fg:x="42" fg:w="1"/><text x="3.6127%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="3.2826%" y="725" width="0.2402%" height="15" fill="rgb(248,60,28)" fg:x="41" fg:w="3"/><text x="3.5326%" y="735.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="3.4428%" y="709" width="0.0801%" height="15" fill="rgb(249,101,23)" fg:x="43" fg:w="1"/><text x="3.6928%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4428%" y="693" width="0.0801%" height="15" fill="rgb(228,51,19)" fg:x="43" fg:w="1"/><text x="3.6928%" y="703.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.5228%" y="725" width="0.0801%" height="15" fill="rgb(213,20,6)" fg:x="44" fg:w="1"/><text x="3.7728%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.5228%" y="709" width="0.0801%" height="15" fill="rgb(212,124,10)" fg:x="44" fg:w="1"/><text x="3.7728%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5228%" y="693" width="0.0801%" height="15" fill="rgb(248,3,40)" fg:x="44" fg:w="1"/><text x="3.7728%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.6029%" y="661" width="0.1601%" height="15" fill="rgb(223,178,23)" fg:x="45" fg:w="2"/><text x="3.8529%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6829%" y="645" width="0.0801%" height="15" fill="rgb(240,132,45)" fg:x="46" fg:w="1"/><text x="3.9329%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6829%" y="629" width="0.0801%" height="15" fill="rgb(245,164,36)" fg:x="46" fg:w="1"/><text x="3.9329%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6829%" y="613" width="0.0801%" height="15" fill="rgb(231,188,53)" fg:x="46" fg:w="1"/><text x="3.9329%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.6829%" y="597" width="0.0801%" height="15" fill="rgb(237,198,39)" fg:x="46" fg:w="1"/><text x="3.9329%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.6829%" y="581" width="0.0801%" height="15" fill="rgb(223,120,35)" fg:x="46" fg:w="1"/><text x="3.9329%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.6829%" y="565" width="0.0801%" height="15" fill="rgb(253,107,49)" fg:x="46" fg:w="1"/><text x="3.9329%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.7630%" y="661" width="0.1601%" height="15" fill="rgb(216,44,31)" fg:x="47" fg:w="2"/><text x="4.0130%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.7630%" y="645" width="0.1601%" height="15" fill="rgb(253,87,21)" fg:x="47" fg:w="2"/><text x="4.0130%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.7630%" y="629" width="0.1601%" height="15" fill="rgb(226,18,2)" fg:x="47" fg:w="2"/><text x="4.0130%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8431%" y="613" width="0.0801%" height="15" fill="rgb(216,8,46)" fg:x="48" fg:w="1"/><text x="4.0931%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8431%" y="597" width="0.0801%" height="15" fill="rgb(226,140,39)" fg:x="48" fg:w="1"/><text x="4.0931%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.8431%" y="581" width="0.0801%" height="15" fill="rgb(221,194,54)" fg:x="48" fg:w="1"/><text x="4.0931%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.8431%" y="565" width="0.0801%" height="15" fill="rgb(213,92,11)" fg:x="48" fg:w="1"/><text x="4.0931%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="3.6029%" y="693" width="0.4804%" height="15" fill="rgb(229,162,46)" fg:x="45" fg:w="6"/><text x="3.8529%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="3.6029%" y="677" width="0.4804%" height="15" fill="rgb(214,111,36)" fg:x="45" fg:w="6"/><text x="3.8529%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.9231%" y="661" width="0.1601%" height="15" fill="rgb(207,6,21)" fg:x="49" fg:w="2"/><text x="4.1731%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.0833%" y="661" width="0.0801%" height="15" fill="rgb(213,127,38)" fg:x="51" fg:w="1"/><text x="4.3333%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0833%" y="645" width="0.0801%" height="15" fill="rgb(238,118,32)" fg:x="51" fg:w="1"/><text x="4.3333%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.0833%" y="693" width="0.2402%" height="15" fill="rgb(240,139,39)" fg:x="51" fg:w="3"/><text x="4.3333%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="4.0833%" y="677" width="0.2402%" height="15" fill="rgb(235,10,37)" fg:x="51" fg:w="3"/><text x="4.3333%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.1633%" y="661" width="0.1601%" height="15" fill="rgb(249,171,38)" fg:x="52" fg:w="2"/><text x="4.4133%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.2434%" y="645" width="0.0801%" height="15" fill="rgb(242,144,32)" fg:x="53" fg:w="1"/><text x="4.4934%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.2434%" y="629" width="0.0801%" height="15" fill="rgb(217,117,21)" fg:x="53" fg:w="1"/><text x="4.4934%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.2434%" y="613" width="0.0801%" height="15" fill="rgb(249,87,1)" fg:x="53" fg:w="1"/><text x="4.4934%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.2434%" y="597" width="0.0801%" height="15" fill="rgb(248,196,48)" fg:x="53" fg:w="1"/><text x="4.4934%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.2434%" y="581" width="0.0801%" height="15" fill="rgb(251,206,33)" fg:x="53" fg:w="1"/><text x="4.4934%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.2434%" y="565" width="0.0801%" height="15" fill="rgb(232,141,28)" fg:x="53" fg:w="1"/><text x="4.4934%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.3235%" y="645" width="0.1601%" height="15" fill="rgb(209,167,14)" fg:x="54" fg:w="2"/><text x="4.5735%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4836%" y="597" width="0.0801%" height="15" fill="rgb(225,11,50)" fg:x="56" fg:w="1"/><text x="4.7336%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.7238%" y="581" width="0.0801%" height="15" fill="rgb(209,50,20)" fg:x="59" fg:w="1"/><text x="4.9738%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8038%" y="565" width="0.0801%" height="15" fill="rgb(212,17,46)" fg:x="60" fg:w="1"/><text x="5.0538%" y="575.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.84%)</title><rect x="3.1225%" y="757" width="1.8415%" height="15" fill="rgb(216,101,39)" fg:x="39" fg:w="23"/><text x="3.3725%" y="767.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (23 samples, 1.84%)</title><rect x="3.1225%" y="741" width="1.8415%" height="15" fill="rgb(212,228,48)" fg:x="39" fg:w="23"/><text x="3.3725%" y="751.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (17 samples, 1.36%)</title><rect x="3.6029%" y="725" width="1.3611%" height="15" fill="rgb(250,6,50)" fg:x="45" fg:w="17"/><text x="3.8529%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (17 samples, 1.36%)</title><rect x="3.6029%" y="709" width="1.3611%" height="15" fill="rgb(250,160,48)" fg:x="45" fg:w="17"/><text x="3.8529%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="4.3235%" y="693" width="0.6405%" height="15" fill="rgb(244,216,33)" fg:x="54" fg:w="8"/><text x="4.5735%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="4.3235%" y="677" width="0.6405%" height="15" fill="rgb(207,157,5)" fg:x="54" fg:w="8"/><text x="4.5735%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="4.3235%" y="661" width="0.6405%" height="15" fill="rgb(228,199,8)" fg:x="54" fg:w="8"/><text x="4.5735%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="4.4836%" y="645" width="0.4804%" height="15" fill="rgb(227,80,20)" fg:x="56" fg:w="6"/><text x="4.7336%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="4.4836%" y="629" width="0.4804%" height="15" fill="rgb(222,9,33)" fg:x="56" fg:w="6"/><text x="4.7336%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="4.4836%" y="613" width="0.4804%" height="15" fill="rgb(239,44,28)" fg:x="56" fg:w="6"/><text x="4.7336%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="4.5637%" y="597" width="0.4003%" height="15" fill="rgb(249,187,43)" fg:x="57" fg:w="5"/><text x="4.8137%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="4.8038%" y="581" width="0.1601%" height="15" fill="rgb(216,141,28)" fg:x="60" fg:w="2"/><text x="5.0538%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8839%" y="565" width="0.0801%" height="15" fill="rgb(230,154,53)" fg:x="61" fg:w="1"/><text x="5.1339%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.8839%" y="549" width="0.0801%" height="15" fill="rgb(227,82,4)" fg:x="61" fg:w="1"/><text x="5.1339%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8839%" y="533" width="0.0801%" height="15" fill="rgb(220,107,16)" fg:x="61" fg:w="1"/><text x="5.1339%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.8839%" y="517" width="0.0801%" height="15" fill="rgb(207,187,2)" fg:x="61" fg:w="1"/><text x="5.1339%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8839%" y="501" width="0.0801%" height="15" fill="rgb(210,162,52)" fg:x="61" fg:w="1"/><text x="5.1339%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9640%" y="645" width="0.0801%" height="15" fill="rgb(217,216,49)" fg:x="62" fg:w="1"/><text x="5.2140%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9640%" y="629" width="0.0801%" height="15" fill="rgb(218,146,49)" fg:x="62" fg:w="1"/><text x="5.2140%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9640%" y="613" width="0.0801%" height="15" fill="rgb(216,55,40)" fg:x="62" fg:w="1"/><text x="5.2140%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9640%" y="597" width="0.0801%" height="15" fill="rgb(208,196,21)" fg:x="62" fg:w="1"/><text x="5.2140%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.9640%" y="581" width="0.0801%" height="15" fill="rgb(242,117,42)" fg:x="62" fg:w="1"/><text x="5.2140%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.9640%" y="565" width="0.0801%" height="15" fill="rgb(210,11,23)" fg:x="62" fg:w="1"/><text x="5.2140%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.9640%" y="549" width="0.0801%" height="15" fill="rgb(217,110,2)" fg:x="62" fg:w="1"/><text x="5.2140%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.9640%" y="533" width="0.0801%" height="15" fill="rgb(229,77,54)" fg:x="62" fg:w="1"/><text x="5.2140%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.9640%" y="517" width="0.0801%" height="15" fill="rgb(218,53,16)" fg:x="62" fg:w="1"/><text x="5.2140%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.9640%" y="501" width="0.0801%" height="15" fill="rgb(215,38,13)" fg:x="62" fg:w="1"/><text x="5.2140%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.9640%" y="485" width="0.0801%" height="15" fill="rgb(235,42,18)" fg:x="62" fg:w="1"/><text x="5.2140%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.9640%" y="469" width="0.0801%" height="15" fill="rgb(219,66,54)" fg:x="62" fg:w="1"/><text x="5.2140%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.9640%" y="453" width="0.0801%" height="15" fill="rgb(222,205,4)" fg:x="62" fg:w="1"/><text x="5.2140%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.9640%" y="437" width="0.0801%" height="15" fill="rgb(227,213,46)" fg:x="62" fg:w="1"/><text x="5.2140%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.9640%" y="421" width="0.0801%" height="15" fill="rgb(250,145,42)" fg:x="62" fg:w="1"/><text x="5.2140%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9640%" y="405" width="0.0801%" height="15" fill="rgb(219,15,2)" fg:x="62" fg:w="1"/><text x="5.2140%" y="415.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.9640%" y="709" width="0.1601%" height="15" fill="rgb(231,181,52)" fg:x="62" fg:w="2"/><text x="5.2140%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.9640%" y="693" width="0.1601%" height="15" fill="rgb(235,1,42)" fg:x="62" fg:w="2"/><text x="5.2140%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.9640%" y="677" width="0.1601%" height="15" fill="rgb(249,88,27)" fg:x="62" fg:w="2"/><text x="5.2140%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.9640%" y="661" width="0.1601%" height="15" fill="rgb(235,145,16)" fg:x="62" fg:w="2"/><text x="5.2140%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.0440%" y="645" width="0.0801%" height="15" fill="rgb(237,114,19)" fg:x="63" fg:w="1"/><text x="5.2940%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.0440%" y="629" width="0.0801%" height="15" fill="rgb(238,51,50)" fg:x="63" fg:w="1"/><text x="5.2940%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.0440%" y="613" width="0.0801%" height="15" fill="rgb(205,194,25)" fg:x="63" fg:w="1"/><text x="5.2940%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.0440%" y="597" width="0.0801%" height="15" fill="rgb(215,203,17)" fg:x="63" fg:w="1"/><text x="5.2940%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.0440%" y="581" width="0.0801%" height="15" fill="rgb(233,112,49)" fg:x="63" fg:w="1"/><text x="5.2940%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.0440%" y="565" width="0.0801%" height="15" fill="rgb(241,130,26)" fg:x="63" fg:w="1"/><text x="5.2940%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.0440%" y="549" width="0.0801%" height="15" fill="rgb(252,223,19)" fg:x="63" fg:w="1"/><text x="5.2940%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="4.9640%" y="741" width="0.3203%" height="15" fill="rgb(211,95,25)" fg:x="62" fg:w="4"/><text x="5.2140%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="4.9640%" y="725" width="0.3203%" height="15" fill="rgb(251,182,27)" fg:x="62" fg:w="4"/><text x="5.2140%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="5.1241%" y="709" width="0.1601%" height="15" fill="rgb(238,24,4)" fg:x="64" fg:w="2"/><text x="5.3741%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.1241%" y="693" width="0.1601%" height="15" fill="rgb(224,220,25)" fg:x="64" fg:w="2"/><text x="5.3741%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.1241%" y="677" width="0.1601%" height="15" fill="rgb(239,133,26)" fg:x="64" fg:w="2"/><text x="5.3741%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="5.1241%" y="661" width="0.1601%" height="15" fill="rgb(211,94,48)" fg:x="64" fg:w="2"/><text x="5.3741%" y="671.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.1241%" y="645" width="0.1601%" height="15" fill="rgb(239,87,6)" fg:x="64" fg:w="2"/><text x="5.3741%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2842%" y="725" width="0.0801%" height="15" fill="rgb(227,62,0)" fg:x="66" fg:w="1"/><text x="5.5342%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.3643%" y="693" width="0.0801%" height="15" fill="rgb(211,226,4)" fg:x="67" fg:w="1"/><text x="5.6143%" y="703.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="5.3643%" y="677" width="0.0801%" height="15" fill="rgb(253,38,52)" fg:x="67" fg:w="1"/><text x="5.6143%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="5.3643%" y="725" width="0.1601%" height="15" fill="rgb(229,126,40)" fg:x="67" fg:w="2"/><text x="5.6143%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="5.3643%" y="709" width="0.1601%" height="15" fill="rgb(229,165,44)" fg:x="67" fg:w="2"/><text x="5.6143%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.4444%" y="693" width="0.0801%" height="15" fill="rgb(247,95,47)" fg:x="68" fg:w="1"/><text x="5.6944%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.4444%" y="677" width="0.0801%" height="15" fill="rgb(216,140,30)" fg:x="68" fg:w="1"/><text x="5.6944%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.4444%" y="661" width="0.0801%" height="15" fill="rgb(246,214,8)" fg:x="68" fg:w="1"/><text x="5.6944%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.4444%" y="645" width="0.0801%" height="15" fill="rgb(227,224,15)" fg:x="68" fg:w="1"/><text x="5.6944%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.4444%" y="629" width="0.0801%" height="15" fill="rgb(233,175,4)" fg:x="68" fg:w="1"/><text x="5.6944%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.4444%" y="613" width="0.0801%" height="15" fill="rgb(221,66,45)" fg:x="68" fg:w="1"/><text x="5.6944%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.4444%" y="597" width="0.0801%" height="15" fill="rgb(221,178,18)" fg:x="68" fg:w="1"/><text x="5.6944%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.4444%" y="581" width="0.0801%" height="15" fill="rgb(213,81,29)" fg:x="68" fg:w="1"/><text x="5.6944%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.4444%" y="565" width="0.0801%" height="15" fill="rgb(220,89,49)" fg:x="68" fg:w="1"/><text x="5.6944%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.5244%" y="725" width="0.0801%" height="15" fill="rgb(227,60,33)" fg:x="69" fg:w="1"/><text x="5.7744%" y="735.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5244%" y="709" width="0.0801%" height="15" fill="rgb(205,113,12)" fg:x="69" fg:w="1"/><text x="5.7744%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5244%" y="693" width="0.0801%" height="15" fill="rgb(211,32,1)" fg:x="69" fg:w="1"/><text x="5.7744%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5244%" y="677" width="0.0801%" height="15" fill="rgb(246,2,12)" fg:x="69" fg:w="1"/><text x="5.7744%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5244%" y="661" width="0.0801%" height="15" fill="rgb(243,37,27)" fg:x="69" fg:w="1"/><text x="5.7744%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.5244%" y="645" width="0.0801%" height="15" fill="rgb(248,211,31)" fg:x="69" fg:w="1"/><text x="5.7744%" y="655.50"></text></g><g><title>plugins_core::build::Build::holding (9 samples, 0.72%)</title><rect x="4.9640%" y="757" width="0.7206%" height="15" fill="rgb(242,146,47)" fg:x="62" fg:w="9"/><text x="5.2140%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="5.2842%" y="741" width="0.4003%" height="15" fill="rgb(206,70,20)" fg:x="66" fg:w="5"/><text x="5.5342%" y="751.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="5.6045%" y="725" width="0.0801%" height="15" fill="rgb(215,10,51)" fg:x="70" fg:w="1"/><text x="5.8545%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.6045%" y="709" width="0.0801%" height="15" fill="rgb(243,178,53)" fg:x="70" fg:w="1"/><text x="5.8545%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.6045%" y="693" width="0.0801%" height="15" fill="rgb(233,221,20)" fg:x="70" fg:w="1"/><text x="5.8545%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.6045%" y="677" width="0.0801%" height="15" fill="rgb(218,95,35)" fg:x="70" fg:w="1"/><text x="5.8545%" y="687.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="5.6045%" y="661" width="0.0801%" height="15" fill="rgb(229,13,5)" fg:x="70" fg:w="1"/><text x="5.8545%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.6045%" y="645" width="0.0801%" height="15" fill="rgb(252,164,30)" fg:x="70" fg:w="1"/><text x="5.8545%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="5.6045%" y="629" width="0.0801%" height="15" fill="rgb(232,68,36)" fg:x="70" fg:w="1"/><text x="5.8545%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="5.6845%" y="757" width="0.0801%" height="15" fill="rgb(219,59,54)" fg:x="71" fg:w="1"/><text x="5.9345%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.6845%" y="741" width="0.0801%" height="15" fill="rgb(250,92,33)" fg:x="71" fg:w="1"/><text x="5.9345%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.6845%" y="725" width="0.0801%" height="15" fill="rgb(229,162,54)" fg:x="71" fg:w="1"/><text x="5.9345%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.6845%" y="709" width="0.0801%" height="15" fill="rgb(244,114,52)" fg:x="71" fg:w="1"/><text x="5.9345%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.6845%" y="693" width="0.0801%" height="15" fill="rgb(212,211,43)" fg:x="71" fg:w="1"/><text x="5.9345%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.6845%" y="677" width="0.0801%" height="15" fill="rgb(226,147,8)" fg:x="71" fg:w="1"/><text x="5.9345%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.6845%" y="661" width="0.0801%" height="15" fill="rgb(226,23,13)" fg:x="71" fg:w="1"/><text x="5.9345%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6845%" y="645" width="0.0801%" height="15" fill="rgb(240,63,4)" fg:x="71" fg:w="1"/><text x="5.9345%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="5.7646%" y="757" width="0.2402%" height="15" fill="rgb(221,1,32)" fg:x="72" fg:w="3"/><text x="6.0146%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (3 samples, 0.24%)</title><rect x="5.7646%" y="741" width="0.2402%" height="15" fill="rgb(242,117,10)" fg:x="72" fg:w="3"/><text x="6.0146%" y="751.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="5.7646%" y="725" width="0.2402%" height="15" fill="rgb(249,172,44)" fg:x="72" fg:w="3"/><text x="6.0146%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="5.7646%" y="709" width="0.2402%" height="15" fill="rgb(244,46,45)" fg:x="72" fg:w="3"/><text x="6.0146%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (3 samples, 0.24%)</title><rect x="5.7646%" y="693" width="0.2402%" height="15" fill="rgb(206,43,17)" fg:x="72" fg:w="3"/><text x="6.0146%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.8447%" y="677" width="0.1601%" height="15" fill="rgb(239,218,39)" fg:x="73" fg:w="2"/><text x="6.0947%" y="687.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="5.8447%" y="661" width="0.1601%" height="15" fill="rgb(208,169,54)" fg:x="73" fg:w="2"/><text x="6.0947%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.8447%" y="645" width="0.1601%" height="15" fill="rgb(247,25,42)" fg:x="73" fg:w="2"/><text x="6.0947%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="5.8447%" y="629" width="0.1601%" height="15" fill="rgb(226,23,31)" fg:x="73" fg:w="2"/><text x="6.0947%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.0048%" y="741" width="0.0801%" height="15" fill="rgb(247,16,28)" fg:x="75" fg:w="1"/><text x="6.2548%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.0048%" y="725" width="0.0801%" height="15" fill="rgb(231,147,38)" fg:x="75" fg:w="1"/><text x="6.2548%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.0048%" y="709" width="0.0801%" height="15" fill="rgb(253,81,48)" fg:x="75" fg:w="1"/><text x="6.2548%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.0048%" y="693" width="0.0801%" height="15" fill="rgb(249,222,43)" fg:x="75" fg:w="1"/><text x="6.2548%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.0048%" y="677" width="0.0801%" height="15" fill="rgb(221,3,27)" fg:x="75" fg:w="1"/><text x="6.2548%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.0048%" y="661" width="0.0801%" height="15" fill="rgb(228,180,5)" fg:x="75" fg:w="1"/><text x="6.2548%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.0048%" y="645" width="0.0801%" height="15" fill="rgb(227,131,42)" fg:x="75" fg:w="1"/><text x="6.2548%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.0048%" y="629" width="0.0801%" height="15" fill="rgb(212,3,39)" fg:x="75" fg:w="1"/><text x="6.2548%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0048%" y="613" width="0.0801%" height="15" fill="rgb(226,45,5)" fg:x="75" fg:w="1"/><text x="6.2548%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="6.0849%" y="725" width="0.1601%" height="15" fill="rgb(215,167,45)" fg:x="76" fg:w="2"/><text x="6.3349%" y="735.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0849%" y="709" width="0.1601%" height="15" fill="rgb(250,218,53)" fg:x="76" fg:w="2"/><text x="6.3349%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.0849%" y="693" width="0.1601%" height="15" fill="rgb(207,140,0)" fg:x="76" fg:w="2"/><text x="6.3349%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.1649%" y="677" width="0.0801%" height="15" fill="rgb(238,133,51)" fg:x="77" fg:w="1"/><text x="6.4149%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.1649%" y="661" width="0.0801%" height="15" fill="rgb(218,203,53)" fg:x="77" fg:w="1"/><text x="6.4149%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1649%" y="645" width="0.0801%" height="15" fill="rgb(226,184,25)" fg:x="77" fg:w="1"/><text x="6.4149%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.2450%" y="677" width="0.0801%" height="15" fill="rgb(231,121,21)" fg:x="78" fg:w="1"/><text x="6.4950%" y="687.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="6.2450%" y="661" width="0.0801%" height="15" fill="rgb(251,14,34)" fg:x="78" fg:w="1"/><text x="6.4950%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4051%" y="613" width="0.0801%" height="15" fill="rgb(249,193,11)" fg:x="80" fg:w="1"/><text x="6.6551%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4051%" y="597" width="0.0801%" height="15" fill="rgb(220,172,37)" fg:x="80" fg:w="1"/><text x="6.6551%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4051%" y="581" width="0.0801%" height="15" fill="rgb(231,229,43)" fg:x="80" fg:w="1"/><text x="6.6551%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4051%" y="565" width="0.0801%" height="15" fill="rgb(250,161,5)" fg:x="80" fg:w="1"/><text x="6.6551%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4051%" y="549" width="0.0801%" height="15" fill="rgb(218,225,18)" fg:x="80" fg:w="1"/><text x="6.6551%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4051%" y="533" width="0.0801%" height="15" fill="rgb(245,45,42)" fg:x="80" fg:w="1"/><text x="6.6551%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.4051%" y="517" width="0.0801%" height="15" fill="rgb(211,115,1)" fg:x="80" fg:w="1"/><text x="6.6551%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.4051%" y="501" width="0.0801%" height="15" fill="rgb(248,133,52)" fg:x="80" fg:w="1"/><text x="6.6551%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.4051%" y="485" width="0.0801%" height="15" fill="rgb(238,100,21)" fg:x="80" fg:w="1"/><text x="6.6551%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4051%" y="469" width="0.0801%" height="15" fill="rgb(247,144,11)" fg:x="80" fg:w="1"/><text x="6.6551%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4051%" y="453" width="0.0801%" height="15" fill="rgb(206,164,16)" fg:x="80" fg:w="1"/><text x="6.6551%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.4051%" y="437" width="0.0801%" height="15" fill="rgb(222,34,3)" fg:x="80" fg:w="1"/><text x="6.6551%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.4051%" y="421" width="0.0801%" height="15" fill="rgb(248,82,4)" fg:x="80" fg:w="1"/><text x="6.6551%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.4051%" y="405" width="0.0801%" height="15" fill="rgb(228,81,46)" fg:x="80" fg:w="1"/><text x="6.6551%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.4051%" y="389" width="0.0801%" height="15" fill="rgb(227,67,47)" fg:x="80" fg:w="1"/><text x="6.6551%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4051%" y="373" width="0.0801%" height="15" fill="rgb(215,93,53)" fg:x="80" fg:w="1"/><text x="6.6551%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.4051%" y="629" width="0.1601%" height="15" fill="rgb(248,194,39)" fg:x="80" fg:w="2"/><text x="6.6551%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4852%" y="613" width="0.0801%" height="15" fill="rgb(215,5,19)" fg:x="81" fg:w="1"/><text x="6.7352%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4852%" y="597" width="0.0801%" height="15" fill="rgb(226,215,51)" fg:x="81" fg:w="1"/><text x="6.7352%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.4852%" y="581" width="0.0801%" height="15" fill="rgb(225,56,26)" fg:x="81" fg:w="1"/><text x="6.7352%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.4852%" y="565" width="0.0801%" height="15" fill="rgb(222,75,29)" fg:x="81" fg:w="1"/><text x="6.7352%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.4852%" y="549" width="0.0801%" height="15" fill="rgb(236,139,6)" fg:x="81" fg:w="1"/><text x="6.7352%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4852%" y="533" width="0.0801%" height="15" fill="rgb(223,137,36)" fg:x="81" fg:w="1"/><text x="6.7352%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.4852%" y="517" width="0.0801%" height="15" fill="rgb(226,99,2)" fg:x="81" fg:w="1"/><text x="6.7352%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.4852%" y="501" width="0.0801%" height="15" fill="rgb(206,133,23)" fg:x="81" fg:w="1"/><text x="6.7352%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.4852%" y="485" width="0.0801%" height="15" fill="rgb(243,173,15)" fg:x="81" fg:w="1"/><text x="6.7352%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.4852%" y="469" width="0.0801%" height="15" fill="rgb(228,69,28)" fg:x="81" fg:w="1"/><text x="6.7352%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.4852%" y="453" width="0.0801%" height="15" fill="rgb(212,51,22)" fg:x="81" fg:w="1"/><text x="6.7352%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4852%" y="437" width="0.0801%" height="15" fill="rgb(227,113,0)" fg:x="81" fg:w="1"/><text x="6.7352%" y="447.50"></text></g><g><title>plugins_core::build::Build::occupying (9 samples, 0.72%)</title><rect x="6.0048%" y="757" width="0.7206%" height="15" fill="rgb(252,84,27)" fg:x="75" fg:w="9"/><text x="6.2548%" y="767.50"></text></g><g><title>plugins_core::tools::set_occupying (8 samples, 0.64%)</title><rect x="6.0849%" y="741" width="0.6405%" height="15" fill="rgb(223,145,39)" fg:x="76" fg:w="8"/><text x="6.3349%" y="751.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (6 samples, 0.48%)</title><rect x="6.2450%" y="725" width="0.4804%" height="15" fill="rgb(239,219,30)" fg:x="78" fg:w="6"/><text x="6.4950%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (6 samples, 0.48%)</title><rect x="6.2450%" y="709" width="0.4804%" height="15" fill="rgb(224,196,39)" fg:x="78" fg:w="6"/><text x="6.4950%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (6 samples, 0.48%)</title><rect x="6.2450%" y="693" width="0.4804%" height="15" fill="rgb(205,35,43)" fg:x="78" fg:w="6"/><text x="6.4950%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="6.3251%" y="677" width="0.4003%" height="15" fill="rgb(228,201,21)" fg:x="79" fg:w="5"/><text x="6.5751%" y="687.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="6.3251%" y="661" width="0.4003%" height="15" fill="rgb(237,118,16)" fg:x="79" fg:w="5"/><text x="6.5751%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="6.3251%" y="645" width="0.4003%" height="15" fill="rgb(241,17,19)" fg:x="79" fg:w="5"/><text x="6.5751%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.5653%" y="629" width="0.1601%" height="15" fill="rgb(214,10,25)" fg:x="82" fg:w="2"/><text x="6.8153%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="6.5653%" y="613" width="0.1601%" height="15" fill="rgb(238,37,29)" fg:x="82" fg:w="2"/><text x="6.8153%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.5653%" y="597" width="0.1601%" height="15" fill="rgb(253,83,25)" fg:x="82" fg:w="2"/><text x="6.8153%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.5653%" y="581" width="0.1601%" height="15" fill="rgb(234,192,12)" fg:x="82" fg:w="2"/><text x="6.8153%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.5653%" y="565" width="0.1601%" height="15" fill="rgb(241,216,45)" fg:x="82" fg:w="2"/><text x="6.8153%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.5653%" y="549" width="0.1601%" height="15" fill="rgb(242,22,33)" fg:x="82" fg:w="2"/><text x="6.8153%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.7254%" y="741" width="0.0801%" height="15" fill="rgb(231,105,49)" fg:x="84" fg:w="1"/><text x="6.9754%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="6.7254%" y="725" width="0.0801%" height="15" fill="rgb(218,204,15)" fg:x="84" fg:w="1"/><text x="6.9754%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="6.7254%" y="709" width="0.0801%" height="15" fill="rgb(235,138,41)" fg:x="84" fg:w="1"/><text x="6.9754%" y="719.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="6.7254%" y="693" width="0.0801%" height="15" fill="rgb(246,0,9)" fg:x="84" fg:w="1"/><text x="6.9754%" y="703.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (50 samples, 4.00%)</title><rect x="2.8823%" y="773" width="4.0032%" height="15" fill="rgb(210,74,4)" fg:x="36" fg:w="50"/><text x="3.1323%" y="783.50">plug..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="6.7254%" y="757" width="0.1601%" height="15" fill="rgb(250,60,41)" fg:x="84" fg:w="2"/><text x="6.9754%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="6.8054%" y="741" width="0.0801%" height="15" fill="rgb(220,115,12)" fg:x="85" fg:w="1"/><text x="7.0554%" y="751.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="6.8054%" y="725" width="0.0801%" height="15" fill="rgb(237,100,13)" fg:x="85" fg:w="1"/><text x="7.0554%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.8054%" y="709" width="0.0801%" height="15" fill="rgb(213,55,26)" fg:x="85" fg:w="1"/><text x="7.0554%" y="719.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8054%" y="693" width="0.0801%" height="15" fill="rgb(216,17,4)" fg:x="85" fg:w="1"/><text x="7.0554%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8054%" y="677" width="0.0801%" height="15" fill="rgb(220,153,47)" fg:x="85" fg:w="1"/><text x="7.0554%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.8855%" y="741" width="0.1601%" height="15" fill="rgb(215,131,9)" fg:x="86" fg:w="2"/><text x="7.1355%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="6.8855%" y="725" width="0.1601%" height="15" fill="rgb(233,46,42)" fg:x="86" fg:w="2"/><text x="7.1355%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="6.9656%" y="709" width="0.0801%" height="15" fill="rgb(226,86,7)" fg:x="87" fg:w="1"/><text x="7.2156%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.9656%" y="693" width="0.0801%" height="15" fill="rgb(239,226,21)" fg:x="87" fg:w="1"/><text x="7.2156%" y="703.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="6.9656%" y="677" width="0.0801%" height="15" fill="rgb(244,137,22)" fg:x="87" fg:w="1"/><text x="7.2156%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (70 samples, 5.60%)</title><rect x="1.6013%" y="789" width="5.6045%" height="15" fill="rgb(211,139,35)" fg:x="20" fg:w="70"/><text x="1.8513%" y="799.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="6.8855%" y="773" width="0.3203%" height="15" fill="rgb(214,62,50)" fg:x="86" fg:w="4"/><text x="7.1355%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="6.8855%" y="757" width="0.3203%" height="15" fill="rgb(212,113,44)" fg:x="86" fg:w="4"/><text x="7.1355%" y="767.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="7.0456%" y="741" width="0.1601%" height="15" fill="rgb(226,150,43)" fg:x="88" fg:w="2"/><text x="7.2956%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (2 samples, 0.16%)</title><rect x="7.0456%" y="725" width="0.1601%" height="15" fill="rgb(250,71,37)" fg:x="88" fg:w="2"/><text x="7.2956%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (2 samples, 0.16%)</title><rect x="7.0456%" y="709" width="0.1601%" height="15" fill="rgb(219,76,19)" fg:x="88" fg:w="2"/><text x="7.2956%" y="719.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (2 samples, 0.16%)</title><rect x="7.0456%" y="693" width="0.1601%" height="15" fill="rgb(250,39,11)" fg:x="88" fg:w="2"/><text x="7.2956%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="7.2058%" y="789" width="0.0801%" height="15" fill="rgb(230,64,31)" fg:x="90" fg:w="1"/><text x="7.4558%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="7.2058%" y="773" width="0.0801%" height="15" fill="rgb(208,222,23)" fg:x="90" fg:w="1"/><text x="7.4558%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3659%" y="741" width="0.0801%" height="15" fill="rgb(227,125,18)" fg:x="92" fg:w="1"/><text x="7.6159%" y="751.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="7.3659%" y="757" width="0.1601%" height="15" fill="rgb(234,210,9)" fg:x="92" fg:w="2"/><text x="7.6159%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4460%" y="741" width="0.0801%" height="15" fill="rgb(217,127,24)" fg:x="93" fg:w="1"/><text x="7.6960%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4460%" y="725" width="0.0801%" height="15" fill="rgb(239,141,48)" fg:x="93" fg:w="1"/><text x="7.6960%" y="735.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="7.5260%" y="757" width="0.1601%" height="15" fill="rgb(227,109,8)" fg:x="94" fg:w="2"/><text x="7.7760%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="7.5260%" y="741" width="0.1601%" height="15" fill="rgb(235,184,23)" fg:x="94" fg:w="2"/><text x="7.7760%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.5260%" y="725" width="0.1601%" height="15" fill="rgb(227,226,48)" fg:x="94" fg:w="2"/><text x="7.7760%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.5260%" y="709" width="0.1601%" height="15" fill="rgb(206,150,11)" fg:x="94" fg:w="2"/><text x="7.7760%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.5260%" y="693" width="0.1601%" height="15" fill="rgb(254,2,33)" fg:x="94" fg:w="2"/><text x="7.7760%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="7.5260%" y="677" width="0.1601%" height="15" fill="rgb(243,160,20)" fg:x="94" fg:w="2"/><text x="7.7760%" y="687.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="7.6061%" y="661" width="0.0801%" height="15" fill="rgb(218,208,30)" fg:x="95" fg:w="1"/><text x="7.8561%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.6861%" y="741" width="0.0801%" height="15" fill="rgb(224,120,49)" fg:x="96" fg:w="1"/><text x="7.9361%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.6861%" y="725" width="0.0801%" height="15" fill="rgb(246,12,2)" fg:x="96" fg:w="1"/><text x="7.9361%" y="735.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.6861%" y="709" width="0.0801%" height="15" fill="rgb(236,117,3)" fg:x="96" fg:w="1"/><text x="7.9361%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7662%" y="725" width="0.0801%" height="15" fill="rgb(216,128,52)" fg:x="97" fg:w="1"/><text x="8.0162%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7662%" y="709" width="0.0801%" height="15" fill="rgb(246,145,19)" fg:x="97" fg:w="1"/><text x="8.0162%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.7662%" y="693" width="0.0801%" height="15" fill="rgb(222,11,46)" fg:x="97" fg:w="1"/><text x="8.0162%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.7662%" y="677" width="0.0801%" height="15" fill="rgb(245,82,36)" fg:x="97" fg:w="1"/><text x="8.0162%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.7662%" y="661" width="0.0801%" height="15" fill="rgb(250,73,51)" fg:x="97" fg:w="1"/><text x="8.0162%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.7662%" y="645" width="0.0801%" height="15" fill="rgb(221,189,23)" fg:x="97" fg:w="1"/><text x="8.0162%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.7662%" y="629" width="0.0801%" height="15" fill="rgb(210,33,7)" fg:x="97" fg:w="1"/><text x="8.0162%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8463%" y="693" width="0.0801%" height="15" fill="rgb(210,107,22)" fg:x="98" fg:w="1"/><text x="8.0963%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8463%" y="677" width="0.0801%" height="15" fill="rgb(222,116,37)" fg:x="98" fg:w="1"/><text x="8.0963%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8463%" y="661" width="0.0801%" height="15" fill="rgb(254,17,48)" fg:x="98" fg:w="1"/><text x="8.0963%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8463%" y="645" width="0.0801%" height="15" fill="rgb(224,36,32)" fg:x="98" fg:w="1"/><text x="8.0963%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.8463%" y="629" width="0.0801%" height="15" fill="rgb(232,90,46)" fg:x="98" fg:w="1"/><text x="8.0963%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.8463%" y="613" width="0.0801%" height="15" fill="rgb(241,66,40)" fg:x="98" fg:w="1"/><text x="8.0963%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.8463%" y="597" width="0.0801%" height="15" fill="rgb(249,184,29)" fg:x="98" fg:w="1"/><text x="8.0963%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.0064%" y="677" width="0.0801%" height="15" fill="rgb(231,181,1)" fg:x="100" fg:w="1"/><text x="8.2564%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9263%" y="693" width="0.2402%" height="15" fill="rgb(224,94,2)" fg:x="99" fg:w="3"/><text x="8.1763%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0865%" y="677" width="0.0801%" height="15" fill="rgb(229,170,15)" fg:x="101" fg:w="1"/><text x="8.3365%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0865%" y="661" width="0.0801%" height="15" fill="rgb(240,127,35)" fg:x="101" fg:w="1"/><text x="8.3365%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0865%" y="645" width="0.0801%" height="15" fill="rgb(248,196,34)" fg:x="101" fg:w="1"/><text x="8.3365%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0865%" y="629" width="0.0801%" height="15" fill="rgb(236,137,7)" fg:x="101" fg:w="1"/><text x="8.3365%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0865%" y="613" width="0.0801%" height="15" fill="rgb(235,127,16)" fg:x="101" fg:w="1"/><text x="8.3365%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0865%" y="597" width="0.0801%" height="15" fill="rgb(250,192,54)" fg:x="101" fg:w="1"/><text x="8.3365%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="7.8463%" y="725" width="0.4003%" height="15" fill="rgb(218,98,20)" fg:x="98" fg:w="5"/><text x="8.0963%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="7.8463%" y="709" width="0.4003%" height="15" fill="rgb(230,176,47)" fg:x="98" fg:w="5"/><text x="8.0963%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1665%" y="693" width="0.0801%" height="15" fill="rgb(244,2,33)" fg:x="102" fg:w="1"/><text x="8.4165%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="725" width="0.1601%" height="15" fill="rgb(231,100,17)" fg:x="103" fg:w="2"/><text x="8.4966%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="709" width="0.1601%" height="15" fill="rgb(245,23,12)" fg:x="103" fg:w="2"/><text x="8.4966%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="693" width="0.1601%" height="15" fill="rgb(249,55,22)" fg:x="103" fg:w="2"/><text x="8.4966%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3267%" y="677" width="0.0801%" height="15" fill="rgb(207,134,9)" fg:x="104" fg:w="1"/><text x="8.5767%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3267%" y="661" width="0.0801%" height="15" fill="rgb(218,134,0)" fg:x="104" fg:w="1"/><text x="8.5767%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3267%" y="645" width="0.0801%" height="15" fill="rgb(213,212,33)" fg:x="104" fg:w="1"/><text x="8.5767%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3267%" y="629" width="0.0801%" height="15" fill="rgb(252,106,18)" fg:x="104" fg:w="1"/><text x="8.5767%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.4868%" y="645" width="0.0801%" height="15" fill="rgb(208,126,42)" fg:x="106" fg:w="1"/><text x="8.7368%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.4067%" y="693" width="0.2402%" height="15" fill="rgb(246,175,29)" fg:x="105" fg:w="3"/><text x="8.6567%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="8.4067%" y="677" width="0.2402%" height="15" fill="rgb(215,13,50)" fg:x="105" fg:w="3"/><text x="8.6567%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.4868%" y="661" width="0.1601%" height="15" fill="rgb(216,172,15)" fg:x="106" fg:w="2"/><text x="8.7368%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5669%" y="645" width="0.0801%" height="15" fill="rgb(212,103,13)" fg:x="107" fg:w="1"/><text x="8.8169%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5669%" y="629" width="0.0801%" height="15" fill="rgb(231,171,36)" fg:x="107" fg:w="1"/><text x="8.8169%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5669%" y="613" width="0.0801%" height="15" fill="rgb(250,123,20)" fg:x="107" fg:w="1"/><text x="8.8169%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5669%" y="597" width="0.0801%" height="15" fill="rgb(212,53,50)" fg:x="107" fg:w="1"/><text x="8.8169%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5669%" y="581" width="0.0801%" height="15" fill="rgb(243,54,12)" fg:x="107" fg:w="1"/><text x="8.8169%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5669%" y="565" width="0.0801%" height="15" fill="rgb(234,101,34)" fg:x="107" fg:w="1"/><text x="8.8169%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="8.4067%" y="709" width="0.5604%" height="15" fill="rgb(254,67,22)" fg:x="105" fg:w="7"/><text x="8.6567%" y="719.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="8.6469%" y="693" width="0.3203%" height="15" fill="rgb(250,35,47)" fg:x="108" fg:w="4"/><text x="8.8969%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="8.6469%" y="677" width="0.3203%" height="15" fill="rgb(226,126,38)" fg:x="108" fg:w="4"/><text x="8.8969%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="8.6469%" y="661" width="0.3203%" height="15" fill="rgb(216,138,53)" fg:x="108" fg:w="4"/><text x="8.8969%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="8.6469%" y="645" width="0.3203%" height="15" fill="rgb(246,199,43)" fg:x="108" fg:w="4"/><text x="8.8969%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="8.7270%" y="629" width="0.2402%" height="15" fill="rgb(232,125,11)" fg:x="109" fg:w="3"/><text x="8.9770%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8871%" y="613" width="0.0801%" height="15" fill="rgb(218,219,45)" fg:x="111" fg:w="1"/><text x="9.1371%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8871%" y="597" width="0.0801%" height="15" fill="rgb(216,102,54)" fg:x="111" fg:w="1"/><text x="9.1371%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="8.8871%" y="581" width="0.0801%" height="15" fill="rgb(250,228,7)" fg:x="111" fg:w="1"/><text x="9.1371%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.0472%" y="677" width="0.1601%" height="15" fill="rgb(226,125,25)" fg:x="113" fg:w="2"/><text x="9.2972%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1273%" y="661" width="0.0801%" height="15" fill="rgb(224,165,27)" fg:x="114" fg:w="1"/><text x="9.3773%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.1273%" y="645" width="0.0801%" height="15" fill="rgb(233,86,3)" fg:x="114" fg:w="1"/><text x="9.3773%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2074%" y="677" width="0.0801%" height="15" fill="rgb(228,116,20)" fg:x="115" fg:w="1"/><text x="9.4574%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.2074%" y="661" width="0.0801%" height="15" fill="rgb(209,192,17)" fg:x="115" fg:w="1"/><text x="9.4574%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2074%" y="645" width="0.0801%" height="15" fill="rgb(224,88,34)" fg:x="115" fg:w="1"/><text x="9.4574%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2074%" y="629" width="0.0801%" height="15" fill="rgb(233,38,6)" fg:x="115" fg:w="1"/><text x="9.4574%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="9.2074%" y="613" width="0.0801%" height="15" fill="rgb(212,59,30)" fg:x="115" fg:w="1"/><text x="9.4574%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="9.2074%" y="597" width="0.0801%" height="15" fill="rgb(213,80,3)" fg:x="115" fg:w="1"/><text x="9.4574%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="9.3675%" y="661" width="0.4804%" height="15" fill="rgb(251,178,7)" fg:x="117" fg:w="6"/><text x="9.6175%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="9.4476%" y="645" width="0.4003%" height="15" fill="rgb(213,154,26)" fg:x="118" fg:w="5"/><text x="9.6976%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="9.4476%" y="629" width="0.4003%" height="15" fill="rgb(238,165,49)" fg:x="118" fg:w="5"/><text x="9.6976%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="9.4476%" y="613" width="0.4003%" height="15" fill="rgb(248,91,46)" fg:x="118" fg:w="5"/><text x="9.6976%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.6077%" y="597" width="0.2402%" height="15" fill="rgb(244,21,52)" fg:x="120" fg:w="3"/><text x="9.8577%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="9.6878%" y="581" width="0.1601%" height="15" fill="rgb(247,122,20)" fg:x="121" fg:w="2"/><text x="9.9378%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.6878%" y="565" width="0.1601%" height="15" fill="rgb(218,27,9)" fg:x="121" fg:w="2"/><text x="9.9378%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="9.6878%" y="549" width="0.1601%" height="15" fill="rgb(246,7,6)" fg:x="121" fg:w="2"/><text x="9.9378%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.6878%" y="533" width="0.1601%" height="15" fill="rgb(227,135,54)" fg:x="121" fg:w="2"/><text x="9.9378%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.6878%" y="517" width="0.1601%" height="15" fill="rgb(247,14,11)" fg:x="121" fg:w="2"/><text x="9.9378%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="9.6878%" y="501" width="0.1601%" height="15" fill="rgb(206,149,34)" fg:x="121" fg:w="2"/><text x="9.9378%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.96%)</title><rect x="8.9672%" y="709" width="0.9608%" height="15" fill="rgb(227,228,4)" fg:x="112" fg:w="12"/><text x="9.2172%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.96%)</title><rect x="8.9672%" y="693" width="0.9608%" height="15" fill="rgb(238,218,28)" fg:x="112" fg:w="12"/><text x="9.2172%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="9.2874%" y="677" width="0.6405%" height="15" fill="rgb(252,86,40)" fg:x="116" fg:w="8"/><text x="9.5374%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8479%" y="661" width="0.0801%" height="15" fill="rgb(251,225,11)" fg:x="123" fg:w="1"/><text x="10.0979%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8479%" y="645" width="0.0801%" height="15" fill="rgb(206,46,49)" fg:x="123" fg:w="1"/><text x="10.0979%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8479%" y="629" width="0.0801%" height="15" fill="rgb(245,128,24)" fg:x="123" fg:w="1"/><text x="10.0979%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.0080%" y="533" width="0.0801%" height="15" fill="rgb(219,177,34)" fg:x="125" fg:w="1"/><text x="10.2580%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0080%" y="517" width="0.0801%" height="15" fill="rgb(218,60,48)" fg:x="125" fg:w="1"/><text x="10.2580%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.0080%" y="565" width="0.1601%" height="15" fill="rgb(221,11,5)" fg:x="125" fg:w="2"/><text x="10.2580%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.0080%" y="549" width="0.1601%" height="15" fill="rgb(220,148,13)" fg:x="125" fg:w="2"/><text x="10.2580%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0881%" y="533" width="0.0801%" height="15" fill="rgb(210,16,3)" fg:x="126" fg:w="1"/><text x="10.3381%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.3283%" y="453" width="0.0801%" height="15" fill="rgb(236,80,2)" fg:x="129" fg:w="1"/><text x="10.5783%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.2482%" y="517" width="0.2402%" height="15" fill="rgb(239,129,19)" fg:x="128" fg:w="3"/><text x="10.4982%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.2482%" y="501" width="0.2402%" height="15" fill="rgb(220,106,35)" fg:x="128" fg:w="3"/><text x="10.4982%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.2482%" y="485" width="0.2402%" height="15" fill="rgb(252,139,45)" fg:x="128" fg:w="3"/><text x="10.4982%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.2482%" y="469" width="0.2402%" height="15" fill="rgb(229,8,36)" fg:x="128" fg:w="3"/><text x="10.4982%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4083%" y="453" width="0.0801%" height="15" fill="rgb(230,126,33)" fg:x="130" fg:w="1"/><text x="10.6583%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4083%" y="437" width="0.0801%" height="15" fill="rgb(239,140,21)" fg:x="130" fg:w="1"/><text x="10.6583%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4083%" y="421" width="0.0801%" height="15" fill="rgb(254,104,9)" fg:x="130" fg:w="1"/><text x="10.6583%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="10.1681%" y="565" width="0.4003%" height="15" fill="rgb(239,52,14)" fg:x="127" fg:w="5"/><text x="10.4181%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="10.1681%" y="549" width="0.4003%" height="15" fill="rgb(208,227,44)" fg:x="127" fg:w="5"/><text x="10.4181%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.2482%" y="533" width="0.3203%" height="15" fill="rgb(246,18,19)" fg:x="128" fg:w="4"/><text x="10.4982%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.4884%" y="517" width="0.0801%" height="15" fill="rgb(235,228,25)" fg:x="131" fg:w="1"/><text x="10.7384%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.4884%" y="501" width="0.0801%" height="15" fill="rgb(240,156,20)" fg:x="131" fg:w="1"/><text x="10.7384%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="10.0080%" y="581" width="0.6405%" height="15" fill="rgb(224,8,20)" fg:x="125" fg:w="8"/><text x="10.2580%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.5685%" y="565" width="0.0801%" height="15" fill="rgb(214,12,52)" fg:x="132" fg:w="1"/><text x="10.8185%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="9.9279%" y="613" width="0.8006%" height="15" fill="rgb(211,220,47)" fg:x="124" fg:w="10"/><text x="10.1779%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="10.0080%" y="597" width="0.7206%" height="15" fill="rgb(250,173,5)" fg:x="125" fg:w="9"/><text x="10.2580%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6485%" y="581" width="0.0801%" height="15" fill="rgb(250,125,52)" fg:x="133" fg:w="1"/><text x="10.8985%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6485%" y="565" width="0.0801%" height="15" fill="rgb(209,133,18)" fg:x="133" fg:w="1"/><text x="10.8985%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="10.6485%" y="549" width="0.0801%" height="15" fill="rgb(216,173,22)" fg:x="133" fg:w="1"/><text x="10.8985%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.96%)</title><rect x="9.9279%" y="645" width="0.9608%" height="15" fill="rgb(205,3,22)" fg:x="124" fg:w="12"/><text x="10.1779%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.96%)</title><rect x="9.9279%" y="629" width="0.9608%" height="15" fill="rgb(248,22,20)" fg:x="124" fg:w="12"/><text x="10.1779%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.7286%" y="613" width="0.1601%" height="15" fill="rgb(233,6,29)" fg:x="134" fg:w="2"/><text x="10.9786%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8086%" y="597" width="0.0801%" height="15" fill="rgb(240,22,54)" fg:x="135" fg:w="1"/><text x="11.0586%" y="607.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (41 samples, 3.28%)</title><rect x="7.6861%" y="757" width="3.2826%" height="15" fill="rgb(231,133,32)" fg:x="96" fg:w="41"/><text x="7.9361%" y="767.50">eng..</text></g><g><title>engine::session::SavesEntities::check_for_changes (40 samples, 3.20%)</title><rect x="7.7662%" y="741" width="3.2026%" height="15" fill="rgb(248,193,4)" fg:x="97" fg:w="40"/><text x="8.0162%" y="751.50">eng..</text></g><g><title>kernel::model::any_entity_changes (32 samples, 2.56%)</title><rect x="8.4067%" y="725" width="2.5620%" height="15" fill="rgb(211,178,46)" fg:x="105" fg:w="32"/><text x="8.6567%" y="735.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (13 samples, 1.04%)</title><rect x="9.9279%" y="709" width="1.0408%" height="15" fill="rgb(224,5,42)" fg:x="124" fg:w="13"/><text x="10.1779%" y="719.50"></text></g><g><title>serde_json::de::from_trait (13 samples, 1.04%)</title><rect x="9.9279%" y="693" width="1.0408%" height="15" fill="rgb(239,176,25)" fg:x="124" fg:w="13"/><text x="10.1779%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="9.9279%" y="677" width="1.0408%" height="15" fill="rgb(245,187,50)" fg:x="124" fg:w="13"/><text x="10.1779%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.04%)</title><rect x="9.9279%" y="661" width="1.0408%" height="15" fill="rgb(248,24,15)" fg:x="124" fg:w="13"/><text x="10.1779%" y="671.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.8887%" y="645" width="0.0801%" height="15" fill="rgb(205,166,13)" fg:x="136" fg:w="1"/><text x="11.1387%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="10.9688%" y="725" width="0.0801%" height="15" fill="rgb(208,114,23)" fg:x="137" fg:w="1"/><text x="11.2188%" y="735.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="10.9688%" y="709" width="0.0801%" height="15" fill="rgb(239,127,18)" fg:x="137" fg:w="1"/><text x="11.2188%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.9688%" y="693" width="0.0801%" height="15" fill="rgb(219,154,28)" fg:x="137" fg:w="1"/><text x="11.2188%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.9688%" y="677" width="0.0801%" height="15" fill="rgb(225,157,23)" fg:x="137" fg:w="1"/><text x="11.2188%" y="687.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.0488%" y="597" width="0.0801%" height="15" fill="rgb(219,8,6)" fg:x="138" fg:w="1"/><text x="11.2988%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.0488%" y="581" width="0.0801%" height="15" fill="rgb(212,47,6)" fg:x="138" fg:w="1"/><text x="11.2988%" y="591.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="11.0488%" y="565" width="0.0801%" height="15" fill="rgb(224,190,4)" fg:x="138" fg:w="1"/><text x="11.2988%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="11.0488%" y="549" width="0.0801%" height="15" fill="rgb(239,183,29)" fg:x="138" fg:w="1"/><text x="11.2988%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="11.0488%" y="533" width="0.0801%" height="15" fill="rgb(213,57,7)" fg:x="138" fg:w="1"/><text x="11.2988%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="11.0488%" y="517" width="0.0801%" height="15" fill="rgb(216,148,1)" fg:x="138" fg:w="1"/><text x="11.2988%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.0488%" y="501" width="0.0801%" height="15" fill="rgb(236,182,29)" fg:x="138" fg:w="1"/><text x="11.2988%" y="511.50"></text></g><g><title>engine::session::Session::close (49 samples, 3.92%)</title><rect x="7.2858%" y="789" width="3.9231%" height="15" fill="rgb(244,120,48)" fg:x="91" fg:w="49"/><text x="7.5358%" y="799.50">engi..</text></g><g><title>engine::session::Session::save_entity_changes (48 samples, 3.84%)</title><rect x="7.3659%" y="773" width="3.8431%" height="15" fill="rgb(206,71,34)" fg:x="92" fg:w="48"/><text x="7.6159%" y="783.50">engi..</text></g><g><title>engine::session::Session::world (3 samples, 0.24%)</title><rect x="10.9688%" y="757" width="0.2402%" height="15" fill="rgb(242,32,6)" fg:x="137" fg:w="3"/><text x="11.2188%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="10.9688%" y="741" width="0.2402%" height="15" fill="rgb(241,35,3)" fg:x="137" fg:w="3"/><text x="11.2188%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="11.0488%" y="725" width="0.1601%" height="15" fill="rgb(222,62,19)" fg:x="138" fg:w="2"/><text x="11.2988%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="11.0488%" y="709" width="0.1601%" height="15" fill="rgb(223,110,41)" fg:x="138" fg:w="2"/><text x="11.2988%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="11.0488%" y="693" width="0.1601%" height="15" fill="rgb(208,224,4)" fg:x="138" fg:w="2"/><text x="11.2988%" y="703.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="11.0488%" y="677" width="0.1601%" height="15" fill="rgb(241,137,19)" fg:x="138" fg:w="2"/><text x="11.2988%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="11.0488%" y="661" width="0.1601%" height="15" fill="rgb(244,24,17)" fg:x="138" fg:w="2"/><text x="11.2988%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="11.0488%" y="645" width="0.1601%" height="15" fill="rgb(245,178,49)" fg:x="138" fg:w="2"/><text x="11.2988%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="11.0488%" y="629" width="0.1601%" height="15" fill="rgb(219,160,38)" fg:x="138" fg:w="2"/><text x="11.2988%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="11.0488%" y="613" width="0.1601%" height="15" fill="rgb(228,137,14)" fg:x="138" fg:w="2"/><text x="11.2988%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.1289%" y="597" width="0.0801%" height="15" fill="rgb(237,134,11)" fg:x="139" fg:w="1"/><text x="11.3789%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.1289%" y="581" width="0.0801%" height="15" fill="rgb(211,126,44)" fg:x="139" fg:w="1"/><text x="11.3789%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.2890%" y="629" width="0.0801%" height="15" fill="rgb(226,171,33)" fg:x="141" fg:w="1"/><text x="11.5390%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2890%" y="613" width="0.0801%" height="15" fill="rgb(253,99,13)" fg:x="141" fg:w="1"/><text x="11.5390%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="11.2890%" y="645" width="0.1601%" height="15" fill="rgb(244,48,7)" fg:x="141" fg:w="2"/><text x="11.5390%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.3691%" y="629" width="0.0801%" height="15" fill="rgb(244,217,54)" fg:x="142" fg:w="1"/><text x="11.6191%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.3691%" y="613" width="0.0801%" height="15" fill="rgb(224,15,18)" fg:x="142" fg:w="1"/><text x="11.6191%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.3691%" y="597" width="0.0801%" height="15" fill="rgb(244,99,12)" fg:x="142" fg:w="1"/><text x="11.6191%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="11.4492%" y="645" width="0.0801%" height="15" fill="rgb(233,226,8)" fg:x="143" fg:w="1"/><text x="11.6992%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4492%" y="629" width="0.0801%" height="15" fill="rgb(229,211,3)" fg:x="143" fg:w="1"/><text x="11.6992%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.7694%" y="549" width="0.1601%" height="15" fill="rgb(216,140,21)" fg:x="147" fg:w="2"/><text x="12.0194%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8495%" y="533" width="0.0801%" height="15" fill="rgb(234,122,30)" fg:x="148" fg:w="1"/><text x="12.0995%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.8495%" y="517" width="0.0801%" height="15" fill="rgb(236,25,46)" fg:x="148" fg:w="1"/><text x="12.0995%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.8495%" y="501" width="0.0801%" height="15" fill="rgb(217,52,54)" fg:x="148" fg:w="1"/><text x="12.0995%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.8495%" y="485" width="0.0801%" height="15" fill="rgb(222,29,26)" fg:x="148" fg:w="1"/><text x="12.0995%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.8495%" y="469" width="0.0801%" height="15" fill="rgb(216,177,29)" fg:x="148" fg:w="1"/><text x="12.0995%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8495%" y="453" width="0.0801%" height="15" fill="rgb(247,136,51)" fg:x="148" fg:w="1"/><text x="12.0995%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8495%" y="437" width="0.0801%" height="15" fill="rgb(231,47,47)" fg:x="148" fg:w="1"/><text x="12.0995%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.8495%" y="421" width="0.0801%" height="15" fill="rgb(211,192,36)" fg:x="148" fg:w="1"/><text x="12.0995%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.8495%" y="405" width="0.0801%" height="15" fill="rgb(229,156,32)" fg:x="148" fg:w="1"/><text x="12.0995%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.8495%" y="389" width="0.0801%" height="15" fill="rgb(248,213,20)" fg:x="148" fg:w="1"/><text x="12.0995%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.8495%" y="373" width="0.0801%" height="15" fill="rgb(217,64,7)" fg:x="148" fg:w="1"/><text x="12.0995%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8495%" y="357" width="0.0801%" height="15" fill="rgb(232,142,8)" fg:x="148" fg:w="1"/><text x="12.0995%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="11.7694%" y="565" width="0.3203%" height="15" fill="rgb(224,92,44)" fg:x="147" fg:w="4"/><text x="12.0194%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.9295%" y="549" width="0.1601%" height="15" fill="rgb(214,169,17)" fg:x="149" fg:w="2"/><text x="12.1795%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="11.6894%" y="581" width="0.4804%" height="15" fill="rgb(210,59,37)" fg:x="146" fg:w="6"/><text x="11.9394%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0897%" y="565" width="0.0801%" height="15" fill="rgb(214,116,48)" fg:x="151" fg:w="1"/><text x="12.3397%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0897%" y="549" width="0.0801%" height="15" fill="rgb(244,191,6)" fg:x="151" fg:w="1"/><text x="12.3397%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0897%" y="533" width="0.0801%" height="15" fill="rgb(241,50,52)" fg:x="151" fg:w="1"/><text x="12.3397%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0897%" y="517" width="0.0801%" height="15" fill="rgb(236,75,39)" fg:x="151" fg:w="1"/><text x="12.3397%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0897%" y="501" width="0.0801%" height="15" fill="rgb(236,99,0)" fg:x="151" fg:w="1"/><text x="12.3397%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0897%" y="485" width="0.0801%" height="15" fill="rgb(207,202,15)" fg:x="151" fg:w="1"/><text x="12.3397%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0897%" y="469" width="0.0801%" height="15" fill="rgb(233,207,14)" fg:x="151" fg:w="1"/><text x="12.3397%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.0897%" y="453" width="0.0801%" height="15" fill="rgb(226,27,51)" fg:x="151" fg:w="1"/><text x="12.3397%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.0897%" y="437" width="0.0801%" height="15" fill="rgb(206,104,42)" fg:x="151" fg:w="1"/><text x="12.3397%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.0897%" y="421" width="0.0801%" height="15" fill="rgb(212,225,4)" fg:x="151" fg:w="1"/><text x="12.3397%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.0897%" y="405" width="0.0801%" height="15" fill="rgb(233,96,42)" fg:x="151" fg:w="1"/><text x="12.3397%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0897%" y="389" width="0.0801%" height="15" fill="rgb(229,21,32)" fg:x="151" fg:w="1"/><text x="12.3397%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.56%)</title><rect x="11.6894%" y="597" width="0.5604%" height="15" fill="rgb(226,216,24)" fg:x="146" fg:w="7"/><text x="11.9394%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1697%" y="581" width="0.0801%" height="15" fill="rgb(221,163,17)" fg:x="152" fg:w="1"/><text x="12.4197%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1697%" y="565" width="0.0801%" height="15" fill="rgb(216,216,42)" fg:x="152" fg:w="1"/><text x="12.4197%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.1697%" y="549" width="0.0801%" height="15" fill="rgb(240,118,7)" fg:x="152" fg:w="1"/><text x="12.4197%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.1697%" y="533" width="0.0801%" height="15" fill="rgb(221,67,37)" fg:x="152" fg:w="1"/><text x="12.4197%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.1697%" y="517" width="0.0801%" height="15" fill="rgb(241,32,44)" fg:x="152" fg:w="1"/><text x="12.4197%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1697%" y="501" width="0.0801%" height="15" fill="rgb(235,204,43)" fg:x="152" fg:w="1"/><text x="12.4197%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1697%" y="485" width="0.0801%" height="15" fill="rgb(213,116,10)" fg:x="152" fg:w="1"/><text x="12.4197%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.1697%" y="469" width="0.0801%" height="15" fill="rgb(239,15,48)" fg:x="152" fg:w="1"/><text x="12.4197%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.1697%" y="453" width="0.0801%" height="15" fill="rgb(207,123,36)" fg:x="152" fg:w="1"/><text x="12.4197%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.1697%" y="437" width="0.0801%" height="15" fill="rgb(209,103,30)" fg:x="152" fg:w="1"/><text x="12.4197%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.1697%" y="421" width="0.0801%" height="15" fill="rgb(238,100,19)" fg:x="152" fg:w="1"/><text x="12.4197%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1697%" y="405" width="0.0801%" height="15" fill="rgb(244,30,14)" fg:x="152" fg:w="1"/><text x="12.4197%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (10 samples, 0.80%)</title><rect x="11.6093%" y="613" width="0.8006%" height="15" fill="rgb(249,174,6)" fg:x="145" fg:w="10"/><text x="11.8593%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="12.2498%" y="597" width="0.1601%" height="15" fill="rgb(235,213,41)" fg:x="153" fg:w="2"/><text x="12.4998%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3299%" y="581" width="0.0801%" height="15" fill="rgb(213,118,6)" fg:x="154" fg:w="1"/><text x="12.5799%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.3299%" y="565" width="0.0801%" height="15" fill="rgb(235,44,51)" fg:x="154" fg:w="1"/><text x="12.5799%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.3299%" y="549" width="0.0801%" height="15" fill="rgb(217,9,53)" fg:x="154" fg:w="1"/><text x="12.5799%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.3299%" y="533" width="0.0801%" height="15" fill="rgb(237,172,34)" fg:x="154" fg:w="1"/><text x="12.5799%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.3299%" y="517" width="0.0801%" height="15" fill="rgb(206,206,11)" fg:x="154" fg:w="1"/><text x="12.5799%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.3299%" y="501" width="0.0801%" height="15" fill="rgb(214,149,29)" fg:x="154" fg:w="1"/><text x="12.5799%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="11.5292%" y="645" width="0.9608%" height="15" fill="rgb(208,123,3)" fg:x="144" fg:w="12"/><text x="11.7792%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (12 samples, 0.96%)</title><rect x="11.5292%" y="629" width="0.9608%" height="15" fill="rgb(229,126,4)" fg:x="144" fg:w="12"/><text x="11.7792%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4099%" y="613" width="0.0801%" height="15" fill="rgb(222,92,36)" fg:x="155" fg:w="1"/><text x="12.6599%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4099%" y="597" width="0.0801%" height="15" fill="rgb(216,39,41)" fg:x="155" fg:w="1"/><text x="12.6599%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.4099%" y="581" width="0.0801%" height="15" fill="rgb(253,127,28)" fg:x="155" fg:w="1"/><text x="12.6599%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.4099%" y="565" width="0.0801%" height="15" fill="rgb(249,152,51)" fg:x="155" fg:w="1"/><text x="12.6599%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.4099%" y="549" width="0.0801%" height="15" fill="rgb(209,123,42)" fg:x="155" fg:w="1"/><text x="12.6599%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.4099%" y="533" width="0.0801%" height="15" fill="rgb(241,118,22)" fg:x="155" fg:w="1"/><text x="12.6599%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.4099%" y="517" width="0.0801%" height="15" fill="rgb(208,25,7)" fg:x="155" fg:w="1"/><text x="12.6599%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.4900%" y="485" width="0.0801%" height="15" fill="rgb(243,144,39)" fg:x="156" fg:w="1"/><text x="12.7400%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="12.4900%" y="501" width="0.1601%" height="15" fill="rgb(250,50,5)" fg:x="156" fg:w="2"/><text x="12.7400%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.5701%" y="485" width="0.0801%" height="15" fill="rgb(207,67,11)" fg:x="157" fg:w="1"/><text x="12.8201%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.5701%" y="469" width="0.0801%" height="15" fill="rgb(245,204,40)" fg:x="157" fg:w="1"/><text x="12.8201%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.5701%" y="453" width="0.0801%" height="15" fill="rgb(238,228,24)" fg:x="157" fg:w="1"/><text x="12.8201%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5701%" y="437" width="0.0801%" height="15" fill="rgb(217,116,22)" fg:x="157" fg:w="1"/><text x="12.8201%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.5701%" y="421" width="0.0801%" height="15" fill="rgb(234,98,12)" fg:x="157" fg:w="1"/><text x="12.8201%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5701%" y="405" width="0.0801%" height="15" fill="rgb(242,170,50)" fg:x="157" fg:w="1"/><text x="12.8201%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.5701%" y="389" width="0.0801%" height="15" fill="rgb(235,7,5)" fg:x="157" fg:w="1"/><text x="12.8201%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5701%" y="373" width="0.0801%" height="15" fill="rgb(241,114,28)" fg:x="157" fg:w="1"/><text x="12.8201%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5701%" y="357" width="0.0801%" height="15" fill="rgb(246,112,42)" fg:x="157" fg:w="1"/><text x="12.8201%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.5701%" y="341" width="0.0801%" height="15" fill="rgb(248,228,14)" fg:x="157" fg:w="1"/><text x="12.8201%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="12.4900%" y="533" width="0.2402%" height="15" fill="rgb(208,133,18)" fg:x="156" fg:w="3"/><text x="12.7400%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="12.4900%" y="517" width="0.2402%" height="15" fill="rgb(207,35,49)" fg:x="156" fg:w="3"/><text x="12.7400%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.6501%" y="501" width="0.0801%" height="15" fill="rgb(205,68,36)" fg:x="158" fg:w="1"/><text x="12.9001%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.6501%" y="485" width="0.0801%" height="15" fill="rgb(245,62,40)" fg:x="158" fg:w="1"/><text x="12.9001%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.7302%" y="389" width="0.0801%" height="15" fill="rgb(228,27,24)" fg:x="159" fg:w="1"/><text x="12.9802%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.7302%" y="373" width="0.0801%" height="15" fill="rgb(253,19,12)" fg:x="159" fg:w="1"/><text x="12.9802%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.7302%" y="357" width="0.0801%" height="15" fill="rgb(232,28,20)" fg:x="159" fg:w="1"/><text x="12.9802%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.7302%" y="341" width="0.0801%" height="15" fill="rgb(218,35,51)" fg:x="159" fg:w="1"/><text x="12.9802%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.7302%" y="325" width="0.0801%" height="15" fill="rgb(212,90,40)" fg:x="159" fg:w="1"/><text x="12.9802%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.7302%" y="309" width="0.0801%" height="15" fill="rgb(220,172,12)" fg:x="159" fg:w="1"/><text x="12.9802%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.7302%" y="293" width="0.0801%" height="15" fill="rgb(226,159,20)" fg:x="159" fg:w="1"/><text x="12.9802%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="12.4900%" y="581" width="0.4003%" height="15" fill="rgb(234,205,16)" fg:x="156" fg:w="5"/><text x="12.7400%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="12.4900%" y="565" width="0.4003%" height="15" fill="rgb(207,9,39)" fg:x="156" fg:w="5"/><text x="12.7400%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="12.4900%" y="549" width="0.4003%" height="15" fill="rgb(249,143,15)" fg:x="156" fg:w="5"/><text x="12.7400%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="12.7302%" y="533" width="0.1601%" height="15" fill="rgb(253,133,29)" fg:x="159" fg:w="2"/><text x="12.9802%" y="543.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="12.7302%" y="517" width="0.1601%" height="15" fill="rgb(221,187,0)" fg:x="159" fg:w="2"/><text x="12.9802%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.7302%" y="501" width="0.1601%" height="15" fill="rgb(205,204,26)" fg:x="159" fg:w="2"/><text x="12.9802%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.7302%" y="485" width="0.1601%" height="15" fill="rgb(224,68,54)" fg:x="159" fg:w="2"/><text x="12.9802%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.7302%" y="469" width="0.1601%" height="15" fill="rgb(209,67,4)" fg:x="159" fg:w="2"/><text x="12.9802%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.7302%" y="453" width="0.1601%" height="15" fill="rgb(228,229,18)" fg:x="159" fg:w="2"/><text x="12.9802%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.7302%" y="437" width="0.1601%" height="15" fill="rgb(231,89,13)" fg:x="159" fg:w="2"/><text x="12.9802%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.7302%" y="421" width="0.1601%" height="15" fill="rgb(210,182,18)" fg:x="159" fg:w="2"/><text x="12.9802%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.7302%" y="405" width="0.1601%" height="15" fill="rgb(240,105,2)" fg:x="159" fg:w="2"/><text x="12.9802%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="12.8102%" y="389" width="0.0801%" height="15" fill="rgb(207,170,50)" fg:x="160" fg:w="1"/><text x="13.0602%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.48%)</title><rect x="12.4900%" y="629" width="0.4804%" height="15" fill="rgb(232,133,24)" fg:x="156" fg:w="6"/><text x="12.7400%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="12.4900%" y="613" width="0.4804%" height="15" fill="rgb(235,166,27)" fg:x="156" fg:w="6"/><text x="12.7400%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="12.4900%" y="597" width="0.4804%" height="15" fill="rgb(209,19,13)" fg:x="156" fg:w="6"/><text x="12.7400%" y="607.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8903%" y="581" width="0.0801%" height="15" fill="rgb(226,79,39)" fg:x="161" fg:w="1"/><text x="13.1403%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8903%" y="565" width="0.0801%" height="15" fill="rgb(222,163,10)" fg:x="161" fg:w="1"/><text x="13.1403%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8903%" y="549" width="0.0801%" height="15" fill="rgb(214,44,19)" fg:x="161" fg:w="1"/><text x="13.1403%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8903%" y="533" width="0.0801%" height="15" fill="rgb(210,217,13)" fg:x="161" fg:w="1"/><text x="13.1403%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8903%" y="517" width="0.0801%" height="15" fill="rgb(237,61,54)" fg:x="161" fg:w="1"/><text x="13.1403%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8903%" y="501" width="0.0801%" height="15" fill="rgb(226,184,24)" fg:x="161" fg:w="1"/><text x="13.1403%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8903%" y="485" width="0.0801%" height="15" fill="rgb(223,226,4)" fg:x="161" fg:w="1"/><text x="13.1403%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8903%" y="469" width="0.0801%" height="15" fill="rgb(210,26,41)" fg:x="161" fg:w="1"/><text x="13.1403%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8903%" y="453" width="0.0801%" height="15" fill="rgb(220,221,6)" fg:x="161" fg:w="1"/><text x="13.1403%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8903%" y="437" width="0.0801%" height="15" fill="rgb(225,89,49)" fg:x="161" fg:w="1"/><text x="13.1403%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.8903%" y="421" width="0.0801%" height="15" fill="rgb(218,70,45)" fg:x="161" fg:w="1"/><text x="13.1403%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.8903%" y="405" width="0.0801%" height="15" fill="rgb(238,166,21)" fg:x="161" fg:w="1"/><text x="13.1403%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.8903%" y="389" width="0.0801%" height="15" fill="rgb(224,141,44)" fg:x="161" fg:w="1"/><text x="13.1403%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.8903%" y="373" width="0.0801%" height="15" fill="rgb(230,12,49)" fg:x="161" fg:w="1"/><text x="13.1403%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8903%" y="357" width="0.0801%" height="15" fill="rgb(212,174,12)" fg:x="161" fg:w="1"/><text x="13.1403%" y="367.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (7 samples, 0.56%)</title><rect x="12.4900%" y="645" width="0.5604%" height="15" fill="rgb(246,67,9)" fg:x="156" fg:w="7"/><text x="12.7400%" y="655.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="12.9704%" y="629" width="0.0801%" height="15" fill="rgb(239,35,23)" fg:x="162" fg:w="1"/><text x="13.2204%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="12.9704%" y="613" width="0.0801%" height="15" fill="rgb(211,167,0)" fg:x="162" fg:w="1"/><text x="13.2204%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="12.9704%" y="597" width="0.0801%" height="15" fill="rgb(225,119,45)" fg:x="162" fg:w="1"/><text x="13.2204%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.9704%" y="581" width="0.0801%" height="15" fill="rgb(210,162,6)" fg:x="162" fg:w="1"/><text x="13.2204%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.9704%" y="565" width="0.0801%" height="15" fill="rgb(208,118,35)" fg:x="162" fg:w="1"/><text x="13.2204%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.9704%" y="549" width="0.0801%" height="15" fill="rgb(239,4,53)" fg:x="162" fg:w="1"/><text x="13.2204%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.9704%" y="533" width="0.0801%" height="15" fill="rgb(213,130,21)" fg:x="162" fg:w="1"/><text x="13.2204%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="12.9704%" y="517" width="0.0801%" height="15" fill="rgb(235,148,0)" fg:x="162" fg:w="1"/><text x="13.2204%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="12.9704%" y="501" width="0.0801%" height="15" fill="rgb(244,224,18)" fg:x="162" fg:w="1"/><text x="13.2204%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="13.1305%" y="485" width="0.2402%" height="15" fill="rgb(211,214,4)" fg:x="164" fg:w="3"/><text x="13.3805%" y="495.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="13.1305%" y="469" width="0.2402%" height="15" fill="rgb(206,119,25)" fg:x="164" fg:w="3"/><text x="13.3805%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="13.1305%" y="453" width="0.2402%" height="15" fill="rgb(243,93,47)" fg:x="164" fg:w="3"/><text x="13.3805%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.2106%" y="437" width="0.1601%" height="15" fill="rgb(224,194,6)" fg:x="165" fg:w="2"/><text x="13.4606%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3707%" y="469" width="0.0801%" height="15" fill="rgb(243,229,6)" fg:x="167" fg:w="1"/><text x="13.6207%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3707%" y="453" width="0.0801%" height="15" fill="rgb(207,23,50)" fg:x="167" fg:w="1"/><text x="13.6207%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.3707%" y="437" width="0.0801%" height="15" fill="rgb(253,192,32)" fg:x="167" fg:w="1"/><text x="13.6207%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.3707%" y="421" width="0.0801%" height="15" fill="rgb(213,21,6)" fg:x="167" fg:w="1"/><text x="13.6207%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.3707%" y="405" width="0.0801%" height="15" fill="rgb(243,151,13)" fg:x="167" fg:w="1"/><text x="13.6207%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.3707%" y="389" width="0.0801%" height="15" fill="rgb(233,165,41)" fg:x="167" fg:w="1"/><text x="13.6207%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.3707%" y="373" width="0.0801%" height="15" fill="rgb(246,176,45)" fg:x="167" fg:w="1"/><text x="13.6207%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="13.4508%" y="469" width="0.0801%" height="15" fill="rgb(217,170,52)" fg:x="168" fg:w="1"/><text x="13.7008%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5308%" y="373" width="0.0801%" height="15" fill="rgb(214,203,54)" fg:x="169" fg:w="1"/><text x="13.7808%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5308%" y="357" width="0.0801%" height="15" fill="rgb(248,215,49)" fg:x="169" fg:w="1"/><text x="13.7808%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5308%" y="341" width="0.0801%" height="15" fill="rgb(208,46,10)" fg:x="169" fg:w="1"/><text x="13.7808%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5308%" y="325" width="0.0801%" height="15" fill="rgb(254,5,31)" fg:x="169" fg:w="1"/><text x="13.7808%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5308%" y="309" width="0.0801%" height="15" fill="rgb(222,104,33)" fg:x="169" fg:w="1"/><text x="13.7808%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.5308%" y="293" width="0.0801%" height="15" fill="rgb(248,49,16)" fg:x="169" fg:w="1"/><text x="13.7808%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.5308%" y="277" width="0.0801%" height="15" fill="rgb(232,198,41)" fg:x="169" fg:w="1"/><text x="13.7808%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.5308%" y="405" width="0.1601%" height="15" fill="rgb(214,125,3)" fg:x="169" fg:w="2"/><text x="13.7808%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.5308%" y="389" width="0.1601%" height="15" fill="rgb(229,220,28)" fg:x="169" fg:w="2"/><text x="13.7808%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6109%" y="373" width="0.0801%" height="15" fill="rgb(222,64,37)" fg:x="170" fg:w="1"/><text x="13.8609%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.5308%" y="437" width="0.2402%" height="15" fill="rgb(249,184,13)" fg:x="169" fg:w="3"/><text x="13.7808%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.5308%" y="421" width="0.2402%" height="15" fill="rgb(252,176,6)" fg:x="169" fg:w="3"/><text x="13.7808%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6910%" y="405" width="0.0801%" height="15" fill="rgb(228,153,7)" fg:x="171" fg:w="1"/><text x="13.9410%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6910%" y="389" width="0.0801%" height="15" fill="rgb(242,193,5)" fg:x="171" fg:w="1"/><text x="13.9410%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.6910%" y="373" width="0.0801%" height="15" fill="rgb(232,140,9)" fg:x="171" fg:w="1"/><text x="13.9410%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.6910%" y="357" width="0.0801%" height="15" fill="rgb(213,222,16)" fg:x="171" fg:w="1"/><text x="13.9410%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.6910%" y="341" width="0.0801%" height="15" fill="rgb(222,75,50)" fg:x="171" fg:w="1"/><text x="13.9410%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.6910%" y="325" width="0.0801%" height="15" fill="rgb(205,180,2)" fg:x="171" fg:w="1"/><text x="13.9410%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.6910%" y="309" width="0.0801%" height="15" fill="rgb(216,34,7)" fg:x="171" fg:w="1"/><text x="13.9410%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.7710%" y="405" width="0.0801%" height="15" fill="rgb(253,16,32)" fg:x="172" fg:w="1"/><text x="14.0210%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (9 samples, 0.72%)</title><rect x="13.3707%" y="485" width="0.7206%" height="15" fill="rgb(208,97,28)" fg:x="167" fg:w="9"/><text x="13.6207%" y="495.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.56%)</title><rect x="13.5308%" y="469" width="0.5604%" height="15" fill="rgb(225,92,11)" fg:x="169" fg:w="7"/><text x="13.7808%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="13.5308%" y="453" width="0.5604%" height="15" fill="rgb(243,38,12)" fg:x="169" fg:w="7"/><text x="13.7808%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="13.7710%" y="437" width="0.3203%" height="15" fill="rgb(208,139,16)" fg:x="172" fg:w="4"/><text x="14.0210%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.7710%" y="421" width="0.3203%" height="15" fill="rgb(227,24,9)" fg:x="172" fg:w="4"/><text x="14.0210%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="13.8511%" y="405" width="0.2402%" height="15" fill="rgb(206,62,11)" fg:x="173" fg:w="3"/><text x="14.1011%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.8511%" y="389" width="0.2402%" height="15" fill="rgb(228,134,27)" fg:x="173" fg:w="3"/><text x="14.1011%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="13.9311%" y="373" width="0.1601%" height="15" fill="rgb(205,55,33)" fg:x="174" fg:w="2"/><text x="14.1811%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.9311%" y="357" width="0.1601%" height="15" fill="rgb(243,75,43)" fg:x="174" fg:w="2"/><text x="14.1811%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.9311%" y="341" width="0.1601%" height="15" fill="rgb(223,27,42)" fg:x="174" fg:w="2"/><text x="14.1811%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.9311%" y="325" width="0.1601%" height="15" fill="rgb(232,189,33)" fg:x="174" fg:w="2"/><text x="14.1811%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.0112%" y="309" width="0.0801%" height="15" fill="rgb(210,9,39)" fg:x="175" fg:w="1"/><text x="14.2612%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0112%" y="293" width="0.0801%" height="15" fill="rgb(242,85,26)" fg:x="175" fg:w="1"/><text x="14.2612%" y="303.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="14.0913%" y="485" width="0.1601%" height="15" fill="rgb(248,44,4)" fg:x="176" fg:w="2"/><text x="14.3413%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="14.0913%" y="469" width="0.1601%" height="15" fill="rgb(250,96,46)" fg:x="176" fg:w="2"/><text x="14.3413%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="14.0913%" y="453" width="0.1601%" height="15" fill="rgb(229,116,26)" fg:x="176" fg:w="2"/><text x="14.3413%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="14.0913%" y="437" width="0.1601%" height="15" fill="rgb(246,94,34)" fg:x="176" fg:w="2"/><text x="14.3413%" y="447.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="14.0913%" y="421" width="0.1601%" height="15" fill="rgb(251,73,21)" fg:x="176" fg:w="2"/><text x="14.3413%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.1713%" y="405" width="0.0801%" height="15" fill="rgb(254,121,25)" fg:x="177" fg:w="1"/><text x="14.4213%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.1713%" y="389" width="0.0801%" height="15" fill="rgb(215,161,49)" fg:x="177" fg:w="1"/><text x="14.4213%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.1713%" y="373" width="0.0801%" height="15" fill="rgb(221,43,13)" fg:x="177" fg:w="1"/><text x="14.4213%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.1713%" y="357" width="0.0801%" height="15" fill="rgb(249,5,37)" fg:x="177" fg:w="1"/><text x="14.4213%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="14.1713%" y="341" width="0.0801%" height="15" fill="rgb(226,25,44)" fg:x="177" fg:w="1"/><text x="14.4213%" y="351.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="14.1713%" y="325" width="0.0801%" height="15" fill="rgb(238,189,16)" fg:x="177" fg:w="1"/><text x="14.4213%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="14.1713%" y="309" width="0.0801%" height="15" fill="rgb(251,186,8)" fg:x="177" fg:w="1"/><text x="14.4213%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.2514%" y="437" width="0.0801%" height="15" fill="rgb(254,34,31)" fg:x="178" fg:w="1"/><text x="14.5014%" y="447.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="14.2514%" y="421" width="0.0801%" height="15" fill="rgb(225,215,27)" fg:x="178" fg:w="1"/><text x="14.5014%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="14.2514%" y="405" width="0.0801%" height="15" fill="rgb(221,192,48)" fg:x="178" fg:w="1"/><text x="14.5014%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2514%" y="389" width="0.0801%" height="15" fill="rgb(219,137,20)" fg:x="178" fg:w="1"/><text x="14.5014%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2514%" y="373" width="0.0801%" height="15" fill="rgb(219,84,11)" fg:x="178" fg:w="1"/><text x="14.5014%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.2514%" y="357" width="0.0801%" height="15" fill="rgb(224,10,23)" fg:x="178" fg:w="1"/><text x="14.5014%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="14.7318%" y="309" width="0.0801%" height="15" fill="rgb(248,22,39)" fg:x="184" fg:w="1"/><text x="14.9818%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="14.5717%" y="405" width="0.3203%" height="15" fill="rgb(212,154,20)" fg:x="182" fg:w="4"/><text x="14.8217%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="14.5717%" y="389" width="0.3203%" height="15" fill="rgb(236,199,50)" fg:x="182" fg:w="4"/><text x="14.8217%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="14.5717%" y="373" width="0.3203%" height="15" fill="rgb(211,9,17)" fg:x="182" fg:w="4"/><text x="14.8217%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="14.5717%" y="357" width="0.3203%" height="15" fill="rgb(243,216,36)" fg:x="182" fg:w="4"/><text x="14.8217%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="14.5717%" y="341" width="0.3203%" height="15" fill="rgb(250,2,10)" fg:x="182" fg:w="4"/><text x="14.8217%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="14.7318%" y="325" width="0.1601%" height="15" fill="rgb(226,50,48)" fg:x="184" fg:w="2"/><text x="14.9818%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8118%" y="309" width="0.0801%" height="15" fill="rgb(243,81,16)" fg:x="185" fg:w="1"/><text x="15.0618%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.8118%" y="293" width="0.0801%" height="15" fill="rgb(250,14,2)" fg:x="185" fg:w="1"/><text x="15.0618%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.8118%" y="277" width="0.0801%" height="15" fill="rgb(233,135,29)" fg:x="185" fg:w="1"/><text x="15.0618%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.9720%" y="357" width="0.1601%" height="15" fill="rgb(224,64,43)" fg:x="187" fg:w="2"/><text x="15.2220%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="15.1321%" y="357" width="0.0801%" height="15" fill="rgb(238,84,13)" fg:x="189" fg:w="1"/><text x="15.3821%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.1321%" y="341" width="0.0801%" height="15" fill="rgb(253,48,26)" fg:x="189" fg:w="1"/><text x="15.3821%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="15.2122%" y="357" width="0.0801%" height="15" fill="rgb(205,223,31)" fg:x="190" fg:w="1"/><text x="15.4622%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6926%" y="341" width="0.0801%" height="15" fill="rgb(221,41,32)" fg:x="196" fg:w="1"/><text x="15.9426%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (30 samples, 2.40%)</title><rect x="15.7726%" y="341" width="2.4019%" height="15" fill="rgb(213,158,31)" fg:x="197" fg:w="30"/><text x="16.0226%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (30 samples, 2.40%)</title><rect x="15.7726%" y="325" width="2.4019%" height="15" fill="rgb(245,126,43)" fg:x="197" fg:w="30"/><text x="16.0226%" y="335.50">co..</text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="17.9343%" y="309" width="0.2402%" height="15" fill="rgb(227,7,22)" fg:x="224" fg:w="3"/><text x="18.1843%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="18.4147%" y="325" width="0.4003%" height="15" fill="rgb(252,90,44)" fg:x="230" fg:w="5"/><text x="18.6647%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="18.7350%" y="309" width="0.0801%" height="15" fill="rgb(253,91,0)" fg:x="234" fg:w="1"/><text x="18.9850%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.72%)</title><rect x="18.1745%" y="341" width="0.7206%" height="15" fill="rgb(252,175,49)" fg:x="227" fg:w="9"/><text x="18.4245%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="18.8151%" y="325" width="0.0801%" height="15" fill="rgb(246,150,1)" fg:x="235" fg:w="1"/><text x="19.0651%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="18.8151%" y="309" width="0.0801%" height="15" fill="rgb(241,192,25)" fg:x="235" fg:w="1"/><text x="19.0651%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="19.0552%" y="309" width="0.0801%" height="15" fill="rgb(239,187,11)" fg:x="238" fg:w="1"/><text x="19.3052%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.2954%" y="277" width="0.0801%" height="15" fill="rgb(218,202,51)" fg:x="241" fg:w="1"/><text x="19.5454%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="19.3755%" y="277" width="0.1601%" height="15" fill="rgb(225,176,8)" fg:x="242" fg:w="2"/><text x="19.6255%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="19.3755%" y="261" width="0.1601%" height="15" fill="rgb(219,122,41)" fg:x="242" fg:w="2"/><text x="19.6255%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="19.3755%" y="245" width="0.1601%" height="15" fill="rgb(248,140,20)" fg:x="242" fg:w="2"/><text x="19.6255%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="19.3755%" y="229" width="0.1601%" height="15" fill="rgb(245,41,37)" fg:x="242" fg:w="2"/><text x="19.6255%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="19.5356%" y="277" width="0.2402%" height="15" fill="rgb(235,82,39)" fg:x="244" fg:w="3"/><text x="19.7856%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="19.5356%" y="261" width="0.2402%" height="15" fill="rgb(230,108,42)" fg:x="244" fg:w="3"/><text x="19.7856%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="19.6157%" y="245" width="0.1601%" height="15" fill="rgb(215,150,50)" fg:x="245" fg:w="2"/><text x="19.8657%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.6958%" y="229" width="0.0801%" height="15" fill="rgb(233,212,5)" fg:x="246" fg:w="1"/><text x="19.9458%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6958%" y="213" width="0.0801%" height="15" fill="rgb(245,80,22)" fg:x="246" fg:w="1"/><text x="19.9458%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.7758%" y="261" width="0.0801%" height="15" fill="rgb(238,129,16)" fg:x="247" fg:w="1"/><text x="20.0258%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.7758%" y="245" width="0.0801%" height="15" fill="rgb(240,19,0)" fg:x="247" fg:w="1"/><text x="20.0258%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.7758%" y="229" width="0.0801%" height="15" fill="rgb(232,42,35)" fg:x="247" fg:w="1"/><text x="20.0258%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="19.8559%" y="261" width="0.0801%" height="15" fill="rgb(223,130,24)" fg:x="248" fg:w="1"/><text x="20.1059%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.8559%" y="245" width="0.0801%" height="15" fill="rgb(237,16,22)" fg:x="248" fg:w="1"/><text x="20.1059%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (155 samples, 12.41%)</title><rect x="19.7758%" y="277" width="12.4099%" height="15" fill="rgb(248,192,20)" fg:x="247" fg:w="155"/><text x="20.0258%" y="287.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (153 samples, 12.25%)</title><rect x="19.9359%" y="261" width="12.2498%" height="15" fill="rgb(233,167,2)" fg:x="249" fg:w="153"/><text x="20.1859%" y="271.50">regex_automata::nf..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (153 samples, 12.25%)</title><rect x="19.9359%" y="245" width="12.2498%" height="15" fill="rgb(252,71,44)" fg:x="249" fg:w="153"/><text x="20.1859%" y="255.50">alloc::vec::Vec&lt;T,..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="32.1857%" y="277" width="0.4804%" height="15" fill="rgb(238,37,47)" fg:x="402" fg:w="6"/><text x="32.4357%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.5060%" y="261" width="0.1601%" height="15" fill="rgb(214,202,54)" fg:x="406" fg:w="2"/><text x="32.7560%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (172 samples, 13.77%)</title><rect x="18.9752%" y="325" width="13.7710%" height="15" fill="rgb(254,165,40)" fg:x="237" fg:w="172"/><text x="19.2252%" y="335.50">&lt;core::iter::adapters..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (170 samples, 13.61%)</title><rect x="19.1353%" y="309" width="13.6109%" height="15" fill="rgb(246,173,38)" fg:x="239" fg:w="170"/><text x="19.3853%" y="319.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (170 samples, 13.61%)</title><rect x="19.1353%" y="293" width="13.6109%" height="15" fill="rgb(215,3,27)" fg:x="239" fg:w="170"/><text x="19.3853%" y="303.50">regex_automata::nfa::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="32.6661%" y="277" width="0.0801%" height="15" fill="rgb(239,169,51)" fg:x="408" fg:w="1"/><text x="32.9161%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.6661%" y="261" width="0.0801%" height="15" fill="rgb(212,5,25)" fg:x="408" fg:w="1"/><text x="32.9161%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="33.2266%" y="309" width="0.0801%" height="15" fill="rgb(243,45,17)" fg:x="415" fg:w="1"/><text x="33.4766%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.2266%" y="293" width="0.0801%" height="15" fill="rgb(242,97,9)" fg:x="415" fg:w="1"/><text x="33.4766%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="33.3066%" y="309" width="0.1601%" height="15" fill="rgb(228,71,31)" fg:x="416" fg:w="2"/><text x="33.5566%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="32.7462%" y="325" width="0.8807%" height="15" fill="rgb(252,184,16)" fg:x="409" fg:w="11"/><text x="32.9962%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="33.4668%" y="309" width="0.1601%" height="15" fill="rgb(236,169,46)" fg:x="418" fg:w="2"/><text x="33.7168%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="33.4668%" y="293" width="0.1601%" height="15" fill="rgb(207,17,47)" fg:x="418" fg:w="2"/><text x="33.7168%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="33.4668%" y="277" width="0.1601%" height="15" fill="rgb(206,201,28)" fg:x="418" fg:w="2"/><text x="33.7168%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.5468%" y="261" width="0.0801%" height="15" fill="rgb(224,184,23)" fg:x="419" fg:w="1"/><text x="33.7968%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.5468%" y="245" width="0.0801%" height="15" fill="rgb(208,139,48)" fg:x="419" fg:w="1"/><text x="33.7968%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="33.6269%" y="325" width="0.2402%" height="15" fill="rgb(208,130,10)" fg:x="420" fg:w="3"/><text x="33.8769%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="33.6269%" y="309" width="0.2402%" height="15" fill="rgb(211,213,45)" fg:x="420" fg:w="3"/><text x="33.8769%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.7870%" y="293" width="0.0801%" height="15" fill="rgb(235,100,30)" fg:x="422" fg:w="1"/><text x="34.0370%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (188 samples, 15.05%)</title><rect x="18.8951%" y="341" width="15.0520%" height="15" fill="rgb(206,144,31)" fg:x="236" fg:w="188"/><text x="19.1451%" y="351.50">regex_automata::nfa::th..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="33.8671%" y="325" width="0.0801%" height="15" fill="rgb(224,200,26)" fg:x="423" fg:w="1"/><text x="34.1171%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="33.9472%" y="341" width="0.0801%" height="15" fill="rgb(247,104,53)" fg:x="424" fg:w="1"/><text x="34.1972%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="33.9472%" y="325" width="0.0801%" height="15" fill="rgb(220,14,17)" fg:x="424" fg:w="1"/><text x="34.1972%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="33.9472%" y="309" width="0.0801%" height="15" fill="rgb(230,140,40)" fg:x="424" fg:w="1"/><text x="34.1972%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.9472%" y="293" width="0.0801%" height="15" fill="rgb(229,2,41)" fg:x="424" fg:w="1"/><text x="34.1972%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (236 samples, 18.90%)</title><rect x="15.2922%" y="357" width="18.8951%" height="15" fill="rgb(232,89,16)" fg:x="191" fg:w="236"/><text x="15.5422%" y="367.50">regex_automata::meta::strategy..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="34.0272%" y="341" width="0.1601%" height="15" fill="rgb(247,59,52)" fg:x="425" fg:w="2"/><text x="34.2772%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="34.2674%" y="277" width="0.0801%" height="15" fill="rgb(226,110,21)" fg:x="428" fg:w="1"/><text x="34.5174%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="34.2674%" y="309" width="0.1601%" height="15" fill="rgb(224,176,43)" fg:x="428" fg:w="2"/><text x="34.5174%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="34.2674%" y="293" width="0.1601%" height="15" fill="rgb(221,73,6)" fg:x="428" fg:w="2"/><text x="34.5174%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="34.3475%" y="277" width="0.0801%" height="15" fill="rgb(232,78,19)" fg:x="429" fg:w="1"/><text x="34.5975%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="34.1873%" y="325" width="0.4003%" height="15" fill="rgb(233,112,48)" fg:x="427" fg:w="5"/><text x="34.4373%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="34.4275%" y="309" width="0.1601%" height="15" fill="rgb(243,131,47)" fg:x="430" fg:w="2"/><text x="34.6775%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.5076%" y="293" width="0.0801%" height="15" fill="rgb(226,51,1)" fg:x="431" fg:w="1"/><text x="34.7576%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5076%" y="277" width="0.0801%" height="15" fill="rgb(247,58,7)" fg:x="431" fg:w="1"/><text x="34.7576%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5076%" y="261" width="0.0801%" height="15" fill="rgb(209,7,32)" fg:x="431" fg:w="1"/><text x="34.7576%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="34.1873%" y="357" width="0.4804%" height="15" fill="rgb(209,39,41)" fg:x="427" fg:w="6"/><text x="34.4373%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="34.1873%" y="341" width="0.4804%" height="15" fill="rgb(226,182,46)" fg:x="427" fg:w="6"/><text x="34.4373%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="34.5877%" y="325" width="0.0801%" height="15" fill="rgb(230,219,10)" fg:x="432" fg:w="1"/><text x="34.8377%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="34.6677%" y="325" width="0.0801%" height="15" fill="rgb(227,175,30)" fg:x="433" fg:w="1"/><text x="34.9177%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.6677%" y="309" width="0.0801%" height="15" fill="rgb(217,2,50)" fg:x="433" fg:w="1"/><text x="34.9177%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.6677%" y="293" width="0.0801%" height="15" fill="rgb(229,160,0)" fg:x="433" fg:w="1"/><text x="34.9177%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.6677%" y="277" width="0.0801%" height="15" fill="rgb(207,78,37)" fg:x="433" fg:w="1"/><text x="34.9177%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (249 samples, 19.94%)</title><rect x="14.8919%" y="373" width="19.9359%" height="15" fill="rgb(225,57,0)" fg:x="186" fg:w="249"/><text x="15.1419%" y="383.50">regex_automata::meta::regex::Bu..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="34.6677%" y="357" width="0.1601%" height="15" fill="rgb(232,154,2)" fg:x="433" fg:w="2"/><text x="34.9177%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="34.6677%" y="341" width="0.1601%" height="15" fill="rgb(241,212,25)" fg:x="433" fg:w="2"/><text x="34.9177%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="34.7478%" y="325" width="0.0801%" height="15" fill="rgb(226,69,20)" fg:x="434" fg:w="1"/><text x="34.9978%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (250 samples, 20.02%)</title><rect x="14.8919%" y="405" width="20.0160%" height="15" fill="rgb(247,184,54)" fg:x="186" fg:w="250"/><text x="15.1419%" y="415.50">&lt;regex::regex::string::Regex as..</text></g><g><title>regex::builders::Builder::build_one_string (250 samples, 20.02%)</title><rect x="14.8919%" y="389" width="20.0160%" height="15" fill="rgb(210,145,0)" fg:x="186" fg:w="250"/><text x="15.1419%" y="399.50">regex::builders::Builder::build..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="34.8279%" y="373" width="0.0801%" height="15" fill="rgb(253,82,12)" fg:x="435" fg:w="1"/><text x="35.0779%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="34.9079%" y="405" width="0.1601%" height="15" fill="rgb(245,42,11)" fg:x="436" fg:w="2"/><text x="35.1579%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="34.9079%" y="389" width="0.1601%" height="15" fill="rgb(219,147,32)" fg:x="436" fg:w="2"/><text x="35.1579%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="34.9079%" y="373" width="0.1601%" height="15" fill="rgb(246,12,7)" fg:x="436" fg:w="2"/><text x="35.1579%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="34.9079%" y="357" width="0.1601%" height="15" fill="rgb(243,50,9)" fg:x="436" fg:w="2"/><text x="35.1579%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.9880%" y="341" width="0.0801%" height="15" fill="rgb(219,149,6)" fg:x="437" fg:w="1"/><text x="35.2380%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.8687%" y="325" width="0.0801%" height="15" fill="rgb(241,51,42)" fg:x="448" fg:w="1"/><text x="36.1187%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.8687%" y="309" width="0.0801%" height="15" fill="rgb(226,128,27)" fg:x="448" fg:w="1"/><text x="36.1187%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.8687%" y="293" width="0.0801%" height="15" fill="rgb(244,144,4)" fg:x="448" fg:w="1"/><text x="36.1187%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.9488%" y="325" width="0.0801%" height="15" fill="rgb(221,4,13)" fg:x="449" fg:w="1"/><text x="36.1988%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.9488%" y="309" width="0.0801%" height="15" fill="rgb(208,170,28)" fg:x="449" fg:w="1"/><text x="36.1988%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.9488%" y="293" width="0.0801%" height="15" fill="rgb(226,131,13)" fg:x="449" fg:w="1"/><text x="36.1988%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.0288%" y="325" width="0.0801%" height="15" fill="rgb(215,72,41)" fg:x="450" fg:w="1"/><text x="36.2788%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.12%)</title><rect x="35.1481%" y="341" width="1.1209%" height="15" fill="rgb(243,108,20)" fg:x="439" fg:w="14"/><text x="35.3981%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="36.1089%" y="325" width="0.1601%" height="15" fill="rgb(230,189,17)" fg:x="451" fg:w="2"/><text x="36.3589%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (273 samples, 21.86%)</title><rect x="14.4916%" y="421" width="21.8575%" height="15" fill="rgb(220,50,17)" fg:x="181" fg:w="273"/><text x="14.7416%" y="431.50">indefinite::helper::Helper::get_fir..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.28%)</title><rect x="35.0681%" y="405" width="1.2810%" height="15" fill="rgb(248,152,48)" fg:x="438" fg:w="16"/><text x="35.3181%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.28%)</title><rect x="35.0681%" y="389" width="1.2810%" height="15" fill="rgb(244,91,11)" fg:x="438" fg:w="16"/><text x="35.3181%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.28%)</title><rect x="35.0681%" y="373" width="1.2810%" height="15" fill="rgb(220,157,5)" fg:x="438" fg:w="16"/><text x="35.3181%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.28%)</title><rect x="35.0681%" y="357" width="1.2810%" height="15" fill="rgb(253,137,8)" fg:x="438" fg:w="16"/><text x="35.3181%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="36.2690%" y="341" width="0.0801%" height="15" fill="rgb(217,137,51)" fg:x="453" fg:w="1"/><text x="36.5190%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.2690%" y="325" width="0.0801%" height="15" fill="rgb(218,209,53)" fg:x="453" fg:w="1"/><text x="36.5190%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.2690%" y="309" width="0.0801%" height="15" fill="rgb(249,137,25)" fg:x="453" fg:w="1"/><text x="36.5190%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2690%" y="293" width="0.0801%" height="15" fill="rgb(239,155,26)" fg:x="453" fg:w="1"/><text x="36.5190%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="36.3491%" y="325" width="0.1601%" height="15" fill="rgb(227,85,46)" fg:x="454" fg:w="2"/><text x="36.5991%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="36.3491%" y="357" width="0.3203%" height="15" fill="rgb(251,107,43)" fg:x="454" fg:w="4"/><text x="36.5991%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="36.3491%" y="341" width="0.3203%" height="15" fill="rgb(234,170,33)" fg:x="454" fg:w="4"/><text x="36.5991%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="36.5092%" y="325" width="0.1601%" height="15" fill="rgb(206,29,35)" fg:x="456" fg:w="2"/><text x="36.7592%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="36.5092%" y="309" width="0.1601%" height="15" fill="rgb(227,138,25)" fg:x="456" fg:w="2"/><text x="36.7592%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="36.5893%" y="293" width="0.0801%" height="15" fill="rgb(249,131,35)" fg:x="457" fg:w="1"/><text x="36.8393%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.5893%" y="277" width="0.0801%" height="15" fill="rgb(239,6,40)" fg:x="457" fg:w="1"/><text x="36.8393%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.5893%" y="261" width="0.0801%" height="15" fill="rgb(246,136,47)" fg:x="457" fg:w="1"/><text x="36.8393%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.5893%" y="245" width="0.0801%" height="15" fill="rgb(253,58,26)" fg:x="457" fg:w="1"/><text x="36.8393%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="36.6693%" y="357" width="0.1601%" height="15" fill="rgb(237,141,10)" fg:x="458" fg:w="2"/><text x="36.9193%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="36.7494%" y="341" width="0.0801%" height="15" fill="rgb(234,156,12)" fg:x="459" fg:w="1"/><text x="36.9994%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.7494%" y="325" width="0.0801%" height="15" fill="rgb(243,224,36)" fg:x="459" fg:w="1"/><text x="36.9994%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.8295%" y="341" width="0.0801%" height="15" fill="rgb(205,229,51)" fg:x="460" fg:w="1"/><text x="37.0795%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="36.9095%" y="341" width="0.1601%" height="15" fill="rgb(223,189,4)" fg:x="461" fg:w="2"/><text x="37.1595%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.3098%" y="325" width="0.0801%" height="15" fill="rgb(249,167,54)" fg:x="466" fg:w="1"/><text x="37.5598%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (38 samples, 3.04%)</title><rect x="37.0697%" y="341" width="3.0424%" height="15" fill="rgb(218,34,28)" fg:x="463" fg:w="38"/><text x="37.3197%" y="351.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (34 samples, 2.72%)</title><rect x="37.3899%" y="325" width="2.7222%" height="15" fill="rgb(232,109,42)" fg:x="467" fg:w="34"/><text x="37.6399%" y="335.50">co..</text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="39.8719%" y="309" width="0.2402%" height="15" fill="rgb(248,214,46)" fg:x="498" fg:w="3"/><text x="40.1219%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="40.1121%" y="325" width="0.2402%" height="15" fill="rgb(244,216,40)" fg:x="501" fg:w="3"/><text x="40.3621%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="40.2722%" y="309" width="0.0801%" height="15" fill="rgb(231,226,31)" fg:x="503" fg:w="1"/><text x="40.5222%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="40.1121%" y="341" width="0.3203%" height="15" fill="rgb(238,38,43)" fg:x="501" fg:w="4"/><text x="40.3621%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.3523%" y="325" width="0.0801%" height="15" fill="rgb(208,88,43)" fg:x="504" fg:w="1"/><text x="40.6023%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="41.0729%" y="309" width="0.1601%" height="15" fill="rgb(205,136,37)" fg:x="513" fg:w="2"/><text x="41.3229%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="41.0729%" y="293" width="0.1601%" height="15" fill="rgb(237,34,14)" fg:x="513" fg:w="2"/><text x="41.3229%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.0729%" y="277" width="0.1601%" height="15" fill="rgb(236,193,44)" fg:x="513" fg:w="2"/><text x="41.3229%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.1529%" y="261" width="0.0801%" height="15" fill="rgb(231,48,10)" fg:x="514" fg:w="1"/><text x="41.4029%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.80%)</title><rect x="41.8735%" y="277" width="0.8006%" height="15" fill="rgb(213,141,34)" fg:x="523" fg:w="10"/><text x="42.1235%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.72%)</title><rect x="41.9536%" y="261" width="0.7206%" height="15" fill="rgb(249,130,34)" fg:x="524" fg:w="9"/><text x="42.2036%" y="271.50"></text></g><g><title>realloc (9 samples, 0.72%)</title><rect x="41.9536%" y="245" width="0.7206%" height="15" fill="rgb(219,42,41)" fg:x="524" fg:w="9"/><text x="42.2036%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (19 samples, 1.52%)</title><rect x="41.2330%" y="309" width="1.5212%" height="15" fill="rgb(224,100,54)" fg:x="515" fg:w="19"/><text x="41.4830%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (18 samples, 1.44%)</title><rect x="41.3131%" y="293" width="1.4412%" height="15" fill="rgb(229,200,27)" fg:x="516" fg:w="18"/><text x="41.5631%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.6741%" y="277" width="0.0801%" height="15" fill="rgb(217,118,10)" fg:x="533" fg:w="1"/><text x="42.9241%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.6741%" y="261" width="0.0801%" height="15" fill="rgb(206,22,3)" fg:x="533" fg:w="1"/><text x="42.9241%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.6741%" y="245" width="0.0801%" height="15" fill="rgb(232,163,46)" fg:x="533" fg:w="1"/><text x="42.9241%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="42.7542%" y="293" width="0.3203%" height="15" fill="rgb(206,95,13)" fg:x="534" fg:w="4"/><text x="43.0042%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="42.7542%" y="277" width="0.3203%" height="15" fill="rgb(253,154,18)" fg:x="534" fg:w="4"/><text x="43.0042%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="42.7542%" y="309" width="0.4003%" height="15" fill="rgb(219,32,23)" fg:x="534" fg:w="5"/><text x="43.0042%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="43.0745%" y="293" width="0.0801%" height="15" fill="rgb(230,191,45)" fg:x="538" fg:w="1"/><text x="43.3245%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (38 samples, 3.04%)</title><rect x="40.4323%" y="341" width="3.0424%" height="15" fill="rgb(229,64,36)" fg:x="505" fg:w="38"/><text x="40.6823%" y="351.50">reg..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (36 samples, 2.88%)</title><rect x="40.5925%" y="325" width="2.8823%" height="15" fill="rgb(205,129,25)" fg:x="507" fg:w="36"/><text x="40.8425%" y="335.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (4 samples, 0.32%)</title><rect x="43.1545%" y="309" width="0.3203%" height="15" fill="rgb(254,112,7)" fg:x="539" fg:w="4"/><text x="43.4045%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.3947%" y="293" width="0.0801%" height="15" fill="rgb(226,53,48)" fg:x="542" fg:w="1"/><text x="43.6447%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="43.7150%" y="261" width="0.0801%" height="15" fill="rgb(214,153,38)" fg:x="546" fg:w="1"/><text x="43.9650%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="45.4764%" y="229" width="0.7206%" height="15" fill="rgb(243,101,7)" fg:x="568" fg:w="9"/><text x="45.7264%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="46.1970%" y="229" width="0.2402%" height="15" fill="rgb(240,140,22)" fg:x="577" fg:w="3"/><text x="46.4470%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.64%)</title><rect x="46.4371%" y="229" width="0.6405%" height="15" fill="rgb(235,114,2)" fg:x="580" fg:w="8"/><text x="46.6871%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="46.5973%" y="213" width="0.4804%" height="15" fill="rgb(242,59,12)" fg:x="582" fg:w="6"/><text x="46.8473%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="46.5973%" y="197" width="0.4804%" height="15" fill="rgb(252,134,9)" fg:x="582" fg:w="6"/><text x="46.8473%" y="207.50"></text></g><g><title>realloc (6 samples, 0.48%)</title><rect x="46.5973%" y="181" width="0.4804%" height="15" fill="rgb(236,4,44)" fg:x="582" fg:w="6"/><text x="46.8473%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="47.0777%" y="229" width="0.3203%" height="15" fill="rgb(254,172,41)" fg:x="588" fg:w="4"/><text x="47.3277%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="47.2378%" y="213" width="0.1601%" height="15" fill="rgb(244,63,20)" fg:x="590" fg:w="2"/><text x="47.4878%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="47.2378%" y="197" width="0.1601%" height="15" fill="rgb(250,73,31)" fg:x="590" fg:w="2"/><text x="47.4878%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="47.2378%" y="181" width="0.1601%" height="15" fill="rgb(241,38,36)" fg:x="590" fg:w="2"/><text x="47.4878%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="47.7982%" y="197" width="0.1601%" height="15" fill="rgb(245,211,2)" fg:x="597" fg:w="2"/><text x="48.0482%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="48.1185%" y="165" width="0.1601%" height="15" fill="rgb(206,120,28)" fg:x="601" fg:w="2"/><text x="48.3685%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="47.9584%" y="197" width="0.4003%" height="15" fill="rgb(211,59,34)" fg:x="599" fg:w="5"/><text x="48.2084%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="47.9584%" y="181" width="0.4003%" height="15" fill="rgb(233,168,5)" fg:x="599" fg:w="5"/><text x="48.2084%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.2786%" y="165" width="0.0801%" height="15" fill="rgb(234,33,13)" fg:x="603" fg:w="1"/><text x="48.5286%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="48.9191%" y="181" width="0.1601%" height="15" fill="rgb(231,150,26)" fg:x="611" fg:w="2"/><text x="49.1691%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (22 samples, 1.76%)</title><rect x="47.3979%" y="229" width="1.7614%" height="15" fill="rgb(217,191,4)" fg:x="592" fg:w="22"/><text x="47.6479%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (18 samples, 1.44%)</title><rect x="47.7182%" y="213" width="1.4412%" height="15" fill="rgb(246,198,38)" fg:x="596" fg:w="18"/><text x="47.9682%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.80%)</title><rect x="48.3587%" y="197" width="0.8006%" height="15" fill="rgb(245,64,37)" fg:x="604" fg:w="10"/><text x="48.6087%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="49.0793%" y="181" width="0.0801%" height="15" fill="rgb(250,30,36)" fg:x="613" fg:w="1"/><text x="49.3293%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.0793%" y="165" width="0.0801%" height="15" fill="rgb(217,86,53)" fg:x="613" fg:w="1"/><text x="49.3293%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.0793%" y="149" width="0.0801%" height="15" fill="rgb(228,157,16)" fg:x="613" fg:w="1"/><text x="49.3293%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.0793%" y="133" width="0.0801%" height="15" fill="rgb(217,59,31)" fg:x="613" fg:w="1"/><text x="49.3293%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="49.1593%" y="229" width="0.0801%" height="15" fill="rgb(237,138,41)" fg:x="614" fg:w="1"/><text x="49.4093%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="49.1593%" y="213" width="0.0801%" height="15" fill="rgb(227,91,49)" fg:x="614" fg:w="1"/><text x="49.4093%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="49.1593%" y="197" width="0.0801%" height="15" fill="rgb(247,21,44)" fg:x="614" fg:w="1"/><text x="49.4093%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.2394%" y="213" width="0.0801%" height="15" fill="rgb(219,210,51)" fg:x="615" fg:w="1"/><text x="49.4894%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2394%" y="197" width="0.0801%" height="15" fill="rgb(209,140,6)" fg:x="615" fg:w="1"/><text x="49.4894%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.2394%" y="181" width="0.0801%" height="15" fill="rgb(221,188,24)" fg:x="615" fg:w="1"/><text x="49.4894%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (127 samples, 10.17%)</title><rect x="49.2394%" y="229" width="10.1681%" height="15" fill="rgb(232,154,20)" fg:x="615" fg:w="127"/><text x="49.4894%" y="239.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (126 samples, 10.09%)</title><rect x="49.3195%" y="213" width="10.0881%" height="15" fill="rgb(244,137,50)" fg:x="616" fg:w="126"/><text x="49.5695%" y="223.50">regex_automata:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (126 samples, 10.09%)</title><rect x="49.3195%" y="197" width="10.0881%" height="15" fill="rgb(225,185,43)" fg:x="616" fg:w="126"/><text x="49.5695%" y="207.50">alloc::vec::Vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="59.4075%" y="229" width="0.1601%" height="15" fill="rgb(213,205,38)" fg:x="742" fg:w="2"/><text x="59.6575%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4876%" y="213" width="0.0801%" height="15" fill="rgb(236,73,12)" fg:x="743" fg:w="1"/><text x="59.7376%" y="223.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="59.5677%" y="229" width="0.0801%" height="15" fill="rgb(235,219,13)" fg:x="744" fg:w="1"/><text x="59.8177%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (208 samples, 16.65%)</title><rect x="43.7150%" y="325" width="16.6533%" height="15" fill="rgb(218,59,36)" fg:x="546" fg:w="208"/><text x="43.9650%" y="335.50">&lt;core::iter::adapters::map..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (208 samples, 16.65%)</title><rect x="43.7150%" y="309" width="16.6533%" height="15" fill="rgb(205,110,39)" fg:x="546" fg:w="208"/><text x="43.9650%" y="319.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (208 samples, 16.65%)</title><rect x="43.7150%" y="293" width="16.6533%" height="15" fill="rgb(218,206,42)" fg:x="546" fg:w="208"/><text x="43.9650%" y="303.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (208 samples, 16.65%)</title><rect x="43.7150%" y="277" width="16.6533%" height="15" fill="rgb(248,125,24)" fg:x="546" fg:w="208"/><text x="43.9650%" y="287.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (207 samples, 16.57%)</title><rect x="43.7950%" y="261" width="16.5733%" height="15" fill="rgb(242,28,27)" fg:x="547" fg:w="207"/><text x="44.0450%" y="271.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (207 samples, 16.57%)</title><rect x="43.7950%" y="245" width="16.5733%" height="15" fill="rgb(216,228,15)" fg:x="547" fg:w="207"/><text x="44.0450%" y="255.50">regex_automata::nfa::thomp..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (9 samples, 0.72%)</title><rect x="59.6477%" y="229" width="0.7206%" height="15" fill="rgb(235,116,46)" fg:x="745" fg:w="9"/><text x="59.8977%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="59.8879%" y="213" width="0.4804%" height="15" fill="rgb(224,18,32)" fg:x="748" fg:w="6"/><text x="60.1379%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="59.9680%" y="197" width="0.4003%" height="15" fill="rgb(252,5,12)" fg:x="749" fg:w="5"/><text x="60.2180%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2882%" y="181" width="0.0801%" height="15" fill="rgb(251,36,5)" fg:x="753" fg:w="1"/><text x="60.5382%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="60.4484%" y="309" width="0.2402%" height="15" fill="rgb(217,53,14)" fg:x="755" fg:w="3"/><text x="60.6984%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="60.6886%" y="309" width="0.0801%" height="15" fill="rgb(215,86,45)" fg:x="758" fg:w="1"/><text x="60.9386%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="60.7686%" y="309" width="0.4003%" height="15" fill="rgb(242,169,11)" fg:x="759" fg:w="5"/><text x="61.0186%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.0889%" y="293" width="0.0801%" height="15" fill="rgb(211,213,45)" fg:x="763" fg:w="1"/><text x="61.3389%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.0889%" y="277" width="0.0801%" height="15" fill="rgb(205,88,11)" fg:x="763" fg:w="1"/><text x="61.3389%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.0889%" y="261" width="0.0801%" height="15" fill="rgb(252,69,26)" fg:x="763" fg:w="1"/><text x="61.3389%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8094%" y="293" width="0.0801%" height="15" fill="rgb(246,123,37)" fg:x="772" fg:w="1"/><text x="62.0594%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (10 samples, 0.80%)</title><rect x="61.1689%" y="309" width="0.8006%" height="15" fill="rgb(212,205,5)" fg:x="764" fg:w="10"/><text x="61.4189%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.8895%" y="293" width="0.0801%" height="15" fill="rgb(253,148,0)" fg:x="773" fg:w="1"/><text x="62.1395%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="61.9696%" y="309" width="0.0801%" height="15" fill="rgb(239,22,4)" fg:x="774" fg:w="1"/><text x="62.2196%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (316 samples, 25.30%)</title><rect x="36.8295%" y="357" width="25.3002%" height="15" fill="rgb(226,26,53)" fg:x="460" fg:w="316"/><text x="37.0795%" y="367.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (233 samples, 18.65%)</title><rect x="43.4748%" y="341" width="18.6549%" height="15" fill="rgb(225,229,45)" fg:x="543" fg:w="233"/><text x="43.7248%" y="351.50">regex_automata::nfa::thompson..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (22 samples, 1.76%)</title><rect x="60.3683%" y="325" width="1.7614%" height="15" fill="rgb(220,60,37)" fg:x="754" fg:w="22"/><text x="60.6183%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="62.0496%" y="309" width="0.0801%" height="15" fill="rgb(217,180,35)" fg:x="775" fg:w="1"/><text x="62.2996%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.0496%" y="293" width="0.0801%" height="15" fill="rgb(229,7,53)" fg:x="775" fg:w="1"/><text x="62.2996%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.0496%" y="277" width="0.0801%" height="15" fill="rgb(254,137,3)" fg:x="775" fg:w="1"/><text x="62.2996%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.0496%" y="261" width="0.0801%" height="15" fill="rgb(215,140,41)" fg:x="775" fg:w="1"/><text x="62.2996%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="62.2098%" y="325" width="0.4003%" height="15" fill="rgb(250,80,15)" fg:x="777" fg:w="5"/><text x="62.4598%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="62.3699%" y="309" width="0.2402%" height="15" fill="rgb(252,191,6)" fg:x="779" fg:w="3"/><text x="62.6199%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="62.3699%" y="293" width="0.2402%" height="15" fill="rgb(246,217,18)" fg:x="779" fg:w="3"/><text x="62.6199%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="62.3699%" y="277" width="0.2402%" height="15" fill="rgb(223,93,7)" fg:x="779" fg:w="3"/><text x="62.6199%" y="287.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="62.3699%" y="261" width="0.2402%" height="15" fill="rgb(225,55,52)" fg:x="779" fg:w="3"/><text x="62.6199%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="62.6101%" y="325" width="0.0801%" height="15" fill="rgb(240,31,24)" fg:x="782" fg:w="1"/><text x="62.8601%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="62.1297%" y="357" width="0.7206%" height="15" fill="rgb(205,56,52)" fg:x="776" fg:w="9"/><text x="62.3797%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="62.1297%" y="341" width="0.7206%" height="15" fill="rgb(246,146,12)" fg:x="776" fg:w="9"/><text x="62.3797%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="62.6902%" y="325" width="0.1601%" height="15" fill="rgb(239,84,36)" fg:x="783" fg:w="2"/><text x="62.9402%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="62.7702%" y="309" width="0.0801%" height="15" fill="rgb(207,41,40)" fg:x="784" fg:w="1"/><text x="63.0202%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.0905%" y="293" width="0.1601%" height="15" fill="rgb(241,179,25)" fg:x="788" fg:w="2"/><text x="63.3405%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.0905%" y="277" width="0.1601%" height="15" fill="rgb(210,0,34)" fg:x="788" fg:w="2"/><text x="63.3405%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.0905%" y="261" width="0.1601%" height="15" fill="rgb(225,217,29)" fg:x="788" fg:w="2"/><text x="63.3405%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="63.0104%" y="309" width="0.4003%" height="15" fill="rgb(216,191,38)" fg:x="787" fg:w="5"/><text x="63.2604%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="63.2506%" y="293" width="0.1601%" height="15" fill="rgb(232,140,52)" fg:x="790" fg:w="2"/><text x="63.5006%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.2506%" y="277" width="0.1601%" height="15" fill="rgb(223,158,51)" fg:x="790" fg:w="2"/><text x="63.5006%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="62.9303%" y="325" width="0.5604%" height="15" fill="rgb(235,29,51)" fg:x="786" fg:w="7"/><text x="63.1803%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="63.4107%" y="309" width="0.0801%" height="15" fill="rgb(215,181,18)" fg:x="792" fg:w="1"/><text x="63.6607%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="63.4107%" y="293" width="0.0801%" height="15" fill="rgb(227,125,34)" fg:x="792" fg:w="1"/><text x="63.6607%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.4107%" y="277" width="0.0801%" height="15" fill="rgb(230,197,49)" fg:x="792" fg:w="1"/><text x="63.6607%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="63.6509%" y="309" width="0.0801%" height="15" fill="rgb(239,141,16)" fg:x="795" fg:w="1"/><text x="63.9009%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="63.4908%" y="325" width="0.3203%" height="15" fill="rgb(225,105,43)" fg:x="793" fg:w="4"/><text x="63.7408%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="63.7310%" y="309" width="0.0801%" height="15" fill="rgb(214,131,14)" fg:x="796" fg:w="1"/><text x="63.9810%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (344 samples, 27.54%)</title><rect x="36.3491%" y="405" width="27.5420%" height="15" fill="rgb(229,177,11)" fg:x="454" fg:w="344"/><text x="36.5991%" y="415.50">&lt;regex::regex::string::Regex as core::str::t..</text></g><g><title>regex::builders::Builder::build_one_string (344 samples, 27.54%)</title><rect x="36.3491%" y="389" width="27.5420%" height="15" fill="rgb(231,180,14)" fg:x="454" fg:w="344"/><text x="36.5991%" y="399.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (344 samples, 27.54%)</title><rect x="36.3491%" y="373" width="27.5420%" height="15" fill="rgb(232,88,2)" fg:x="454" fg:w="344"/><text x="36.5991%" y="383.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.04%)</title><rect x="62.8503%" y="357" width="1.0408%" height="15" fill="rgb(205,220,8)" fg:x="785" fg:w="13"/><text x="63.1003%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.04%)</title><rect x="62.8503%" y="341" width="1.0408%" height="15" fill="rgb(225,23,53)" fg:x="785" fg:w="13"/><text x="63.1003%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="63.8110%" y="325" width="0.0801%" height="15" fill="rgb(213,62,29)" fg:x="797" fg:w="1"/><text x="64.0610%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.9712%" y="357" width="0.0801%" height="15" fill="rgb(227,75,7)" fg:x="799" fg:w="1"/><text x="64.2212%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.9712%" y="341" width="0.0801%" height="15" fill="rgb(207,105,14)" fg:x="799" fg:w="1"/><text x="64.2212%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="63.8911%" y="373" width="0.3203%" height="15" fill="rgb(245,62,29)" fg:x="798" fg:w="4"/><text x="64.1411%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="64.0512%" y="357" width="0.1601%" height="15" fill="rgb(236,202,4)" fg:x="800" fg:w="2"/><text x="64.3012%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="64.0512%" y="341" width="0.1601%" height="15" fill="rgb(250,67,1)" fg:x="800" fg:w="2"/><text x="64.3012%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.0512%" y="325" width="0.1601%" height="15" fill="rgb(253,115,44)" fg:x="800" fg:w="2"/><text x="64.3012%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.0512%" y="309" width="0.1601%" height="15" fill="rgb(251,139,18)" fg:x="800" fg:w="2"/><text x="64.3012%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2114%" y="357" width="0.0801%" height="15" fill="rgb(218,22,32)" fg:x="802" fg:w="1"/><text x="64.4614%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.2914%" y="341" width="0.0801%" height="15" fill="rgb(243,53,5)" fg:x="803" fg:w="1"/><text x="64.5414%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="63.8911%" y="405" width="0.6405%" height="15" fill="rgb(227,56,16)" fg:x="798" fg:w="8"/><text x="64.1411%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="63.8911%" y="389" width="0.6405%" height="15" fill="rgb(245,53,0)" fg:x="798" fg:w="8"/><text x="64.1411%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="64.2114%" y="373" width="0.3203%" height="15" fill="rgb(216,170,35)" fg:x="802" fg:w="4"/><text x="64.4614%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="64.2914%" y="357" width="0.2402%" height="15" fill="rgb(211,200,8)" fg:x="803" fg:w="3"/><text x="64.5414%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="64.3715%" y="341" width="0.1601%" height="15" fill="rgb(228,204,44)" fg:x="804" fg:w="2"/><text x="64.6215%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="64.5316%" y="389" width="0.2402%" height="15" fill="rgb(214,121,17)" fg:x="806" fg:w="3"/><text x="64.7816%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="64.6117%" y="373" width="0.1601%" height="15" fill="rgb(233,64,38)" fg:x="807" fg:w="2"/><text x="64.8617%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="64.6117%" y="357" width="0.1601%" height="15" fill="rgb(253,54,19)" fg:x="807" fg:w="2"/><text x="64.8617%" y="367.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="64.6918%" y="341" width="0.0801%" height="15" fill="rgb(253,94,18)" fg:x="808" fg:w="1"/><text x="64.9418%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.7326%" y="309" width="0.0801%" height="15" fill="rgb(227,57,52)" fg:x="821" fg:w="1"/><text x="65.9826%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7326%" y="293" width="0.0801%" height="15" fill="rgb(230,228,50)" fg:x="821" fg:w="1"/><text x="65.9826%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.7326%" y="277" width="0.0801%" height="15" fill="rgb(217,205,27)" fg:x="821" fg:w="1"/><text x="65.9826%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.36%)</title><rect x="64.8519%" y="325" width="1.3611%" height="15" fill="rgb(252,71,50)" fg:x="810" fg:w="17"/><text x="65.1019%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.40%)</title><rect x="65.8127%" y="309" width="0.4003%" height="15" fill="rgb(209,86,4)" fg:x="822" fg:w="5"/><text x="66.0627%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (19 samples, 1.52%)</title><rect x="64.8519%" y="341" width="1.5212%" height="15" fill="rgb(229,94,0)" fg:x="810" fg:w="19"/><text x="65.1019%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="66.2130%" y="325" width="0.1601%" height="15" fill="rgb(252,223,21)" fg:x="827" fg:w="2"/><text x="66.4630%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.2930%" y="309" width="0.0801%" height="15" fill="rgb(230,210,4)" fg:x="828" fg:w="1"/><text x="66.5430%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2930%" y="293" width="0.0801%" height="15" fill="rgb(240,149,38)" fg:x="828" fg:w="1"/><text x="66.5430%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2930%" y="277" width="0.0801%" height="15" fill="rgb(254,105,20)" fg:x="828" fg:w="1"/><text x="66.5430%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (376 samples, 30.10%)</title><rect x="36.3491%" y="421" width="30.1041%" height="15" fill="rgb(253,87,46)" fg:x="454" fg:w="376"/><text x="36.5991%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (24 samples, 1.92%)</title><rect x="64.5316%" y="405" width="1.9215%" height="15" fill="rgb(253,116,33)" fg:x="806" fg:w="24"/><text x="64.7816%" y="415.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.68%)</title><rect x="64.7718%" y="389" width="1.6813%" height="15" fill="rgb(229,198,5)" fg:x="809" fg:w="21"/><text x="65.0218%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.68%)</title><rect x="64.7718%" y="373" width="1.6813%" height="15" fill="rgb(242,38,37)" fg:x="809" fg:w="21"/><text x="65.0218%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (20 samples, 1.60%)</title><rect x="64.8519%" y="357" width="1.6013%" height="15" fill="rgb(242,69,53)" fg:x="810" fg:w="20"/><text x="65.1019%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="66.3731%" y="341" width="0.0801%" height="15" fill="rgb(249,80,16)" fg:x="829" fg:w="1"/><text x="66.6231%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5332%" y="373" width="0.0801%" height="15" fill="rgb(206,128,11)" fg:x="831" fg:w="1"/><text x="66.7832%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6934%" y="341" width="0.0801%" height="15" fill="rgb(212,35,20)" fg:x="833" fg:w="1"/><text x="66.9434%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.8535%" y="309" width="0.0801%" height="15" fill="rgb(236,79,13)" fg:x="835" fg:w="1"/><text x="67.1035%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.8535%" y="293" width="0.0801%" height="15" fill="rgb(233,123,3)" fg:x="835" fg:w="1"/><text x="67.1035%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8535%" y="277" width="0.0801%" height="15" fill="rgb(214,93,52)" fg:x="835" fg:w="1"/><text x="67.1035%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.8535%" y="261" width="0.0801%" height="15" fill="rgb(251,37,40)" fg:x="835" fg:w="1"/><text x="67.1035%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="66.9335%" y="309" width="0.0801%" height="15" fill="rgb(227,80,54)" fg:x="836" fg:w="1"/><text x="67.1835%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="66.7734%" y="341" width="0.3203%" height="15" fill="rgb(254,48,11)" fg:x="834" fg:w="4"/><text x="67.0234%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="66.7734%" y="325" width="0.3203%" height="15" fill="rgb(235,193,26)" fg:x="834" fg:w="4"/><text x="67.0234%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="67.0136%" y="309" width="0.0801%" height="15" fill="rgb(229,99,21)" fg:x="837" fg:w="1"/><text x="67.2636%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.0136%" y="293" width="0.0801%" height="15" fill="rgb(211,140,41)" fg:x="837" fg:w="1"/><text x="67.2636%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="67.0937%" y="325" width="0.0801%" height="15" fill="rgb(240,227,30)" fg:x="838" fg:w="1"/><text x="67.3437%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.3339%" y="293" width="0.0801%" height="15" fill="rgb(215,224,45)" fg:x="841" fg:w="1"/><text x="67.5839%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="67.1737%" y="309" width="0.3203%" height="15" fill="rgb(206,123,31)" fg:x="839" fg:w="4"/><text x="67.4237%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="67.4139%" y="293" width="0.0801%" height="15" fill="rgb(210,138,16)" fg:x="842" fg:w="1"/><text x="67.6639%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="67.4139%" y="277" width="0.0801%" height="15" fill="rgb(228,57,28)" fg:x="842" fg:w="1"/><text x="67.6639%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="67.1737%" y="325" width="0.4003%" height="15" fill="rgb(242,170,10)" fg:x="839" fg:w="5"/><text x="67.4237%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="67.4940%" y="309" width="0.0801%" height="15" fill="rgb(228,214,39)" fg:x="843" fg:w="1"/><text x="67.7440%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="67.4940%" y="293" width="0.0801%" height="15" fill="rgb(218,179,33)" fg:x="843" fg:w="1"/><text x="67.7440%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.4940%" y="277" width="0.0801%" height="15" fill="rgb(235,193,39)" fg:x="843" fg:w="1"/><text x="67.7440%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="67.5741%" y="325" width="0.1601%" height="15" fill="rgb(219,221,36)" fg:x="844" fg:w="2"/><text x="67.8241%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="67.6541%" y="309" width="0.0801%" height="15" fill="rgb(248,218,19)" fg:x="845" fg:w="1"/><text x="67.9041%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="67.6541%" y="293" width="0.0801%" height="15" fill="rgb(205,50,9)" fg:x="845" fg:w="1"/><text x="67.9041%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="67.6541%" y="277" width="0.0801%" height="15" fill="rgb(238,81,28)" fg:x="845" fg:w="1"/><text x="67.9041%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.6541%" y="261" width="0.0801%" height="15" fill="rgb(235,110,19)" fg:x="845" fg:w="1"/><text x="67.9041%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6541%" y="245" width="0.0801%" height="15" fill="rgb(214,7,14)" fg:x="845" fg:w="1"/><text x="67.9041%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6541%" y="229" width="0.0801%" height="15" fill="rgb(211,77,3)" fg:x="845" fg:w="1"/><text x="67.9041%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="67.7342%" y="309" width="0.0801%" height="15" fill="rgb(229,5,9)" fg:x="846" fg:w="1"/><text x="67.9842%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.7342%" y="293" width="0.0801%" height="15" fill="rgb(225,90,11)" fg:x="846" fg:w="1"/><text x="67.9842%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7342%" y="277" width="0.0801%" height="15" fill="rgb(242,56,8)" fg:x="846" fg:w="1"/><text x="67.9842%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="67.8143%" y="293" width="0.1601%" height="15" fill="rgb(249,212,39)" fg:x="847" fg:w="2"/><text x="68.0643%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="67.9744%" y="293" width="0.0801%" height="15" fill="rgb(236,90,9)" fg:x="849" fg:w="1"/><text x="68.2244%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.9744%" y="277" width="0.0801%" height="15" fill="rgb(206,88,35)" fg:x="849" fg:w="1"/><text x="68.2244%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.9744%" y="261" width="0.0801%" height="15" fill="rgb(205,126,30)" fg:x="849" fg:w="1"/><text x="68.2244%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.9744%" y="245" width="0.0801%" height="15" fill="rgb(230,176,12)" fg:x="849" fg:w="1"/><text x="68.2244%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="68.0544%" y="293" width="0.1601%" height="15" fill="rgb(243,19,9)" fg:x="850" fg:w="2"/><text x="68.3044%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (15 samples, 1.20%)</title><rect x="67.0937%" y="341" width="1.2010%" height="15" fill="rgb(245,171,17)" fg:x="838" fg:w="15"/><text x="67.3437%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="67.7342%" y="325" width="0.5604%" height="15" fill="rgb(227,52,21)" fg:x="846" fg:w="7"/><text x="67.9842%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="67.8143%" y="309" width="0.4804%" height="15" fill="rgb(238,69,14)" fg:x="847" fg:w="6"/><text x="68.0643%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="68.2146%" y="293" width="0.0801%" height="15" fill="rgb(241,156,39)" fg:x="852" fg:w="1"/><text x="68.4646%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.2946%" y="309" width="0.0801%" height="15" fill="rgb(212,227,28)" fg:x="853" fg:w="1"/><text x="68.5446%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.2946%" y="293" width="0.0801%" height="15" fill="rgb(209,118,27)" fg:x="853" fg:w="1"/><text x="68.5446%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="68.5348%" y="293" width="0.0801%" height="15" fill="rgb(226,102,5)" fg:x="856" fg:w="1"/><text x="68.7848%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.5348%" y="277" width="0.0801%" height="15" fill="rgb(223,34,3)" fg:x="856" fg:w="1"/><text x="68.7848%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5348%" y="261" width="0.0801%" height="15" fill="rgb(221,81,38)" fg:x="856" fg:w="1"/><text x="68.7848%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5348%" y="245" width="0.0801%" height="15" fill="rgb(236,219,28)" fg:x="856" fg:w="1"/><text x="68.7848%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="68.6149%" y="293" width="0.0801%" height="15" fill="rgb(213,200,14)" fg:x="857" fg:w="1"/><text x="68.8649%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="68.6950%" y="293" width="0.0801%" height="15" fill="rgb(240,33,19)" fg:x="858" fg:w="1"/><text x="68.9450%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="68.3747%" y="309" width="0.4804%" height="15" fill="rgb(233,113,27)" fg:x="854" fg:w="6"/><text x="68.6247%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="68.7750%" y="293" width="0.0801%" height="15" fill="rgb(220,221,18)" fg:x="859" fg:w="1"/><text x="69.0250%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.7750%" y="277" width="0.0801%" height="15" fill="rgb(238,92,8)" fg:x="859" fg:w="1"/><text x="69.0250%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.7750%" y="261" width="0.0801%" height="15" fill="rgb(222,164,16)" fg:x="859" fg:w="1"/><text x="69.0250%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7750%" y="245" width="0.0801%" height="15" fill="rgb(241,119,3)" fg:x="859" fg:w="1"/><text x="69.0250%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="68.2946%" y="341" width="0.6405%" height="15" fill="rgb(241,44,8)" fg:x="853" fg:w="8"/><text x="68.5446%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="68.2946%" y="325" width="0.6405%" height="15" fill="rgb(230,36,40)" fg:x="853" fg:w="8"/><text x="68.5446%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="68.8551%" y="309" width="0.0801%" height="15" fill="rgb(243,16,36)" fg:x="860" fg:w="1"/><text x="69.1051%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="68.8551%" y="293" width="0.0801%" height="15" fill="rgb(231,4,26)" fg:x="860" fg:w="1"/><text x="69.1051%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="68.9351%" y="309" width="0.0801%" height="15" fill="rgb(240,9,31)" fg:x="861" fg:w="1"/><text x="69.1851%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="68.9351%" y="293" width="0.0801%" height="15" fill="rgb(207,173,15)" fg:x="861" fg:w="1"/><text x="69.1851%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="69.0152%" y="293" width="0.1601%" height="15" fill="rgb(224,192,53)" fg:x="862" fg:w="2"/><text x="69.2652%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.0152%" y="277" width="0.1601%" height="15" fill="rgb(223,67,28)" fg:x="862" fg:w="2"/><text x="69.2652%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="69.0152%" y="261" width="0.1601%" height="15" fill="rgb(211,20,47)" fg:x="862" fg:w="2"/><text x="69.2652%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="69.0152%" y="309" width="0.3203%" height="15" fill="rgb(240,228,2)" fg:x="862" fg:w="4"/><text x="69.2652%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="69.1753%" y="293" width="0.1601%" height="15" fill="rgb(248,151,12)" fg:x="864" fg:w="2"/><text x="69.4253%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (36 samples, 2.88%)</title><rect x="66.5332%" y="389" width="2.8823%" height="15" fill="rgb(244,8,39)" fg:x="831" fg:w="36"/><text x="66.7832%" y="399.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (35 samples, 2.80%)</title><rect x="66.6133%" y="373" width="2.8022%" height="15" fill="rgb(222,26,8)" fg:x="832" fg:w="35"/><text x="66.8633%" y="383.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (35 samples, 2.80%)</title><rect x="66.6133%" y="357" width="2.8022%" height="15" fill="rgb(213,106,44)" fg:x="832" fg:w="35"/><text x="66.8633%" y="367.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="68.9351%" y="341" width="0.4804%" height="15" fill="rgb(214,129,20)" fg:x="861" fg:w="6"/><text x="69.1851%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="68.9351%" y="325" width="0.4804%" height="15" fill="rgb(212,32,13)" fg:x="861" fg:w="6"/><text x="69.1851%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.3355%" y="309" width="0.0801%" height="15" fill="rgb(208,168,33)" fg:x="866" fg:w="1"/><text x="69.5855%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.3355%" y="293" width="0.0801%" height="15" fill="rgb(231,207,8)" fg:x="866" fg:w="1"/><text x="69.5855%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3355%" y="277" width="0.0801%" height="15" fill="rgb(235,219,23)" fg:x="866" fg:w="1"/><text x="69.5855%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="69.4155%" y="357" width="0.0801%" height="15" fill="rgb(226,216,26)" fg:x="867" fg:w="1"/><text x="69.6655%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="69.4155%" y="341" width="0.0801%" height="15" fill="rgb(239,137,16)" fg:x="867" fg:w="1"/><text x="69.6655%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="69.4155%" y="389" width="0.3203%" height="15" fill="rgb(207,12,36)" fg:x="867" fg:w="4"/><text x="69.6655%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="69.4155%" y="373" width="0.3203%" height="15" fill="rgb(210,214,24)" fg:x="867" fg:w="4"/><text x="69.6655%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="69.4956%" y="357" width="0.2402%" height="15" fill="rgb(206,56,30)" fg:x="868" fg:w="3"/><text x="69.7456%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="69.6557%" y="341" width="0.0801%" height="15" fill="rgb(228,143,26)" fg:x="870" fg:w="1"/><text x="69.9057%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.7358%" y="389" width="0.0801%" height="15" fill="rgb(216,218,46)" fg:x="871" fg:w="1"/><text x="69.9858%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8159%" y="373" width="0.0801%" height="15" fill="rgb(206,6,19)" fg:x="872" fg:w="1"/><text x="70.0659%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.8959%" y="309" width="0.0801%" height="15" fill="rgb(239,177,51)" fg:x="873" fg:w="1"/><text x="70.1459%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="69.8959%" y="357" width="0.1601%" height="15" fill="rgb(216,55,25)" fg:x="873" fg:w="2"/><text x="70.1459%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="69.8959%" y="341" width="0.1601%" height="15" fill="rgb(231,163,29)" fg:x="873" fg:w="2"/><text x="70.1459%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="69.8959%" y="325" width="0.1601%" height="15" fill="rgb(232,149,50)" fg:x="873" fg:w="2"/><text x="70.1459%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9760%" y="309" width="0.0801%" height="15" fill="rgb(223,142,48)" fg:x="874" fg:w="1"/><text x="70.2260%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.2162%" y="325" width="0.0801%" height="15" fill="rgb(245,83,23)" fg:x="877" fg:w="1"/><text x="70.4662%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="70.0560%" y="341" width="0.3203%" height="15" fill="rgb(224,63,2)" fg:x="875" fg:w="4"/><text x="70.3060%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.2962%" y="325" width="0.0801%" height="15" fill="rgb(218,65,53)" fg:x="878" fg:w="1"/><text x="70.5462%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="69.8159%" y="389" width="0.6405%" height="15" fill="rgb(221,84,29)" fg:x="872" fg:w="8"/><text x="70.0659%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="69.8959%" y="373" width="0.5604%" height="15" fill="rgb(234,0,32)" fg:x="873" fg:w="7"/><text x="70.1459%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="70.0560%" y="357" width="0.4003%" height="15" fill="rgb(206,20,16)" fg:x="875" fg:w="5"/><text x="70.3060%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="70.3763%" y="341" width="0.0801%" height="15" fill="rgb(244,172,18)" fg:x="879" fg:w="1"/><text x="70.6263%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4564%" y="325" width="0.0801%" height="15" fill="rgb(254,133,1)" fg:x="880" fg:w="1"/><text x="70.7064%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.4564%" y="309" width="0.0801%" height="15" fill="rgb(222,206,41)" fg:x="880" fg:w="1"/><text x="70.7064%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.7766%" y="309" width="0.0801%" height="15" fill="rgb(212,3,42)" fg:x="884" fg:w="1"/><text x="71.0266%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="70.8567%" y="309" width="0.2402%" height="15" fill="rgb(241,11,4)" fg:x="885" fg:w="3"/><text x="71.1067%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="70.9367%" y="293" width="0.1601%" height="15" fill="rgb(205,19,26)" fg:x="886" fg:w="2"/><text x="71.1867%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.0168%" y="277" width="0.0801%" height="15" fill="rgb(210,179,32)" fg:x="887" fg:w="1"/><text x="71.2668%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="70.4564%" y="341" width="0.7206%" height="15" fill="rgb(227,116,49)" fg:x="880" fg:w="9"/><text x="70.7064%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="70.5364%" y="325" width="0.6405%" height="15" fill="rgb(211,146,6)" fg:x="881" fg:w="8"/><text x="70.7864%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="71.0969%" y="309" width="0.0801%" height="15" fill="rgb(219,44,39)" fg:x="888" fg:w="1"/><text x="71.3469%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (60 samples, 4.80%)</title><rect x="66.4532%" y="405" width="4.8038%" height="15" fill="rgb(234,128,11)" fg:x="830" fg:w="60"/><text x="66.7032%" y="415.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="70.4564%" y="389" width="0.8006%" height="15" fill="rgb(220,183,53)" fg:x="880" fg:w="10"/><text x="70.7064%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="70.4564%" y="373" width="0.8006%" height="15" fill="rgb(213,219,32)" fg:x="880" fg:w="10"/><text x="70.7064%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="70.4564%" y="357" width="0.8006%" height="15" fill="rgb(232,156,16)" fg:x="880" fg:w="10"/><text x="70.7064%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="71.1769%" y="341" width="0.0801%" height="15" fill="rgb(246,135,34)" fg:x="889" fg:w="1"/><text x="71.4269%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="71.1769%" y="325" width="0.0801%" height="15" fill="rgb(241,99,0)" fg:x="889" fg:w="1"/><text x="71.4269%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.1769%" y="309" width="0.0801%" height="15" fill="rgb(222,103,45)" fg:x="889" fg:w="1"/><text x="71.4269%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (728 samples, 58.29%)</title><rect x="13.0504%" y="501" width="58.2866%" height="15" fill="rgb(212,57,4)" fg:x="163" fg:w="728"/><text x="13.3004%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;..</text></g><g><title>plugins_core::looking::model::qualify_name (713 samples, 57.09%)</title><rect x="14.2514%" y="485" width="57.0857%" height="15" fill="rgb(215,68,47)" fg:x="178" fg:w="713"/><text x="14.5014%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (713 samples, 57.09%)</title><rect x="14.2514%" y="469" width="57.0857%" height="15" fill="rgb(230,84,2)" fg:x="178" fg:w="713"/><text x="14.5014%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (713 samples, 57.09%)</title><rect x="14.2514%" y="453" width="57.0857%" height="15" fill="rgb(220,102,14)" fg:x="178" fg:w="713"/><text x="14.5014%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (712 samples, 57.01%)</title><rect x="14.3315%" y="437" width="57.0056%" height="15" fill="rgb(240,10,32)" fg:x="179" fg:w="712"/><text x="14.5815%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (61 samples, 4.88%)</title><rect x="66.4532%" y="421" width="4.8839%" height="15" fill="rgb(215,47,27)" fg:x="830" fg:w="61"/><text x="66.7032%" y="431.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="71.2570%" y="405" width="0.0801%" height="15" fill="rgb(233,188,43)" fg:x="890" fg:w="1"/><text x="71.5070%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (3 samples, 0.24%)</title><rect x="71.3371%" y="501" width="0.2402%" height="15" fill="rgb(253,190,1)" fg:x="891" fg:w="3"/><text x="71.5871%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="71.3371%" y="485" width="0.2402%" height="15" fill="rgb(206,114,52)" fg:x="891" fg:w="3"/><text x="71.5871%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="71.3371%" y="469" width="0.2402%" height="15" fill="rgb(233,120,37)" fg:x="891" fg:w="3"/><text x="71.5871%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="71.3371%" y="453" width="0.2402%" height="15" fill="rgb(214,52,39)" fg:x="891" fg:w="3"/><text x="71.5871%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="71.3371%" y="437" width="0.2402%" height="15" fill="rgb(223,80,29)" fg:x="891" fg:w="3"/><text x="71.5871%" y="447.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="71.3371%" y="421" width="0.2402%" height="15" fill="rgb(230,101,40)" fg:x="891" fg:w="3"/><text x="71.5871%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="71.3371%" y="405" width="0.2402%" height="15" fill="rgb(219,211,8)" fg:x="891" fg:w="3"/><text x="71.5871%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="71.3371%" y="389" width="0.2402%" height="15" fill="rgb(252,126,28)" fg:x="891" fg:w="3"/><text x="71.5871%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="71.3371%" y="373" width="0.2402%" height="15" fill="rgb(215,56,38)" fg:x="891" fg:w="3"/><text x="71.5871%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="71.4171%" y="357" width="0.1601%" height="15" fill="rgb(249,55,44)" fg:x="892" fg:w="2"/><text x="71.6671%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5773%" y="501" width="0.0801%" height="15" fill="rgb(220,221,32)" fg:x="894" fg:w="1"/><text x="71.8273%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="71.6573%" y="501" width="0.0801%" height="15" fill="rgb(212,216,41)" fg:x="895" fg:w="1"/><text x="71.9073%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="501" width="0.0801%" height="15" fill="rgb(228,213,43)" fg:x="896" fg:w="1"/><text x="71.9874%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="485" width="0.0801%" height="15" fill="rgb(211,31,26)" fg:x="896" fg:w="1"/><text x="71.9874%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="71.8175%" y="373" width="0.1601%" height="15" fill="rgb(229,202,19)" fg:x="897" fg:w="2"/><text x="72.0675%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.9776%" y="325" width="0.0801%" height="15" fill="rgb(229,105,46)" fg:x="899" fg:w="1"/><text x="72.2276%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.9776%" y="309" width="0.0801%" height="15" fill="rgb(235,108,1)" fg:x="899" fg:w="1"/><text x="72.2276%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.9776%" y="293" width="0.0801%" height="15" fill="rgb(245,111,35)" fg:x="899" fg:w="1"/><text x="72.2276%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.9776%" y="277" width="0.0801%" height="15" fill="rgb(219,185,31)" fg:x="899" fg:w="1"/><text x="72.2276%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9776%" y="261" width="0.0801%" height="15" fill="rgb(214,4,43)" fg:x="899" fg:w="1"/><text x="72.2276%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.9776%" y="245" width="0.0801%" height="15" fill="rgb(235,227,40)" fg:x="899" fg:w="1"/><text x="72.2276%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9776%" y="229" width="0.0801%" height="15" fill="rgb(230,88,30)" fg:x="899" fg:w="1"/><text x="72.2276%" y="239.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="71.9776%" y="357" width="0.1601%" height="15" fill="rgb(216,217,1)" fg:x="899" fg:w="2"/><text x="72.2276%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="71.9776%" y="341" width="0.1601%" height="15" fill="rgb(248,139,50)" fg:x="899" fg:w="2"/><text x="72.2276%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.0576%" y="325" width="0.0801%" height="15" fill="rgb(233,1,21)" fg:x="900" fg:w="1"/><text x="72.3076%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.0576%" y="309" width="0.0801%" height="15" fill="rgb(215,183,12)" fg:x="900" fg:w="1"/><text x="72.3076%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.0576%" y="293" width="0.0801%" height="15" fill="rgb(229,104,42)" fg:x="900" fg:w="1"/><text x="72.3076%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0576%" y="277" width="0.0801%" height="15" fill="rgb(243,34,48)" fg:x="900" fg:w="1"/><text x="72.3076%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0576%" y="261" width="0.0801%" height="15" fill="rgb(239,11,44)" fg:x="900" fg:w="1"/><text x="72.3076%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0576%" y="245" width="0.0801%" height="15" fill="rgb(231,98,35)" fg:x="900" fg:w="1"/><text x="72.3076%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0576%" y="229" width="0.0801%" height="15" fill="rgb(233,28,25)" fg:x="900" fg:w="1"/><text x="72.3076%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0576%" y="213" width="0.0801%" height="15" fill="rgb(234,123,11)" fg:x="900" fg:w="1"/><text x="72.3076%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.0576%" y="197" width="0.0801%" height="15" fill="rgb(220,69,3)" fg:x="900" fg:w="1"/><text x="72.3076%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.0576%" y="181" width="0.0801%" height="15" fill="rgb(214,64,36)" fg:x="900" fg:w="1"/><text x="72.3076%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.0576%" y="165" width="0.0801%" height="15" fill="rgb(211,138,32)" fg:x="900" fg:w="1"/><text x="72.3076%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.0576%" y="149" width="0.0801%" height="15" fill="rgb(213,118,47)" fg:x="900" fg:w="1"/><text x="72.3076%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.0576%" y="133" width="0.0801%" height="15" fill="rgb(243,124,49)" fg:x="900" fg:w="1"/><text x="72.3076%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.0576%" y="117" width="0.0801%" height="15" fill="rgb(221,30,28)" fg:x="900" fg:w="1"/><text x="72.3076%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.0576%" y="101" width="0.0801%" height="15" fill="rgb(246,37,13)" fg:x="900" fg:w="1"/><text x="72.3076%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.0576%" y="85" width="0.0801%" height="15" fill="rgb(249,66,14)" fg:x="900" fg:w="1"/><text x="72.3076%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.0576%" y="69" width="0.0801%" height="15" fill="rgb(213,166,5)" fg:x="900" fg:w="1"/><text x="72.3076%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.0576%" y="53" width="0.0801%" height="15" fill="rgb(221,66,24)" fg:x="900" fg:w="1"/><text x="72.3076%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0576%" y="37" width="0.0801%" height="15" fill="rgb(210,132,17)" fg:x="900" fg:w="1"/><text x="72.3076%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="72.1377%" y="357" width="0.1601%" height="15" fill="rgb(243,202,5)" fg:x="901" fg:w="2"/><text x="72.3877%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="72.1377%" y="341" width="0.1601%" height="15" fill="rgb(233,70,48)" fg:x="901" fg:w="2"/><text x="72.3877%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="72.1377%" y="325" width="0.1601%" height="15" fill="rgb(238,41,26)" fg:x="901" fg:w="2"/><text x="72.3877%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.1377%" y="309" width="0.1601%" height="15" fill="rgb(241,19,31)" fg:x="901" fg:w="2"/><text x="72.3877%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1377%" y="293" width="0.1601%" height="15" fill="rgb(214,76,10)" fg:x="901" fg:w="2"/><text x="72.3877%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.1377%" y="277" width="0.1601%" height="15" fill="rgb(254,202,22)" fg:x="901" fg:w="2"/><text x="72.3877%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1377%" y="261" width="0.1601%" height="15" fill="rgb(214,72,24)" fg:x="901" fg:w="2"/><text x="72.3877%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="72.1377%" y="245" width="0.1601%" height="15" fill="rgb(221,92,46)" fg:x="901" fg:w="2"/><text x="72.3877%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1377%" y="229" width="0.1601%" height="15" fill="rgb(246,13,50)" fg:x="901" fg:w="2"/><text x="72.3877%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2178%" y="213" width="0.0801%" height="15" fill="rgb(240,165,38)" fg:x="902" fg:w="1"/><text x="72.4678%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2178%" y="197" width="0.0801%" height="15" fill="rgb(241,24,51)" fg:x="902" fg:w="1"/><text x="72.4678%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.2978%" y="245" width="0.0801%" height="15" fill="rgb(227,51,44)" fg:x="903" fg:w="1"/><text x="72.5478%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.3779%" y="197" width="0.0801%" height="15" fill="rgb(231,121,3)" fg:x="904" fg:w="1"/><text x="72.6279%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3779%" y="181" width="0.0801%" height="15" fill="rgb(245,3,41)" fg:x="904" fg:w="1"/><text x="72.6279%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="72.3779%" y="165" width="0.0801%" height="15" fill="rgb(214,13,26)" fg:x="904" fg:w="1"/><text x="72.6279%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3779%" y="149" width="0.0801%" height="15" fill="rgb(252,75,11)" fg:x="904" fg:w="1"/><text x="72.6279%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.3779%" y="229" width="0.1601%" height="15" fill="rgb(218,226,17)" fg:x="904" fg:w="2"/><text x="72.6279%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.3779%" y="213" width="0.1601%" height="15" fill="rgb(248,89,38)" fg:x="904" fg:w="2"/><text x="72.6279%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="72.4580%" y="197" width="0.0801%" height="15" fill="rgb(237,73,46)" fg:x="905" fg:w="1"/><text x="72.7080%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.4580%" y="181" width="0.0801%" height="15" fill="rgb(242,78,33)" fg:x="905" fg:w="1"/><text x="72.7080%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.4580%" y="165" width="0.0801%" height="15" fill="rgb(235,60,3)" fg:x="905" fg:w="1"/><text x="72.7080%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.4580%" y="149" width="0.0801%" height="15" fill="rgb(216,172,19)" fg:x="905" fg:w="1"/><text x="72.7080%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4580%" y="133" width="0.0801%" height="15" fill="rgb(227,6,42)" fg:x="905" fg:w="1"/><text x="72.7080%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4580%" y="117" width="0.0801%" height="15" fill="rgb(223,207,42)" fg:x="905" fg:w="1"/><text x="72.7080%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5380%" y="181" width="0.0801%" height="15" fill="rgb(246,138,30)" fg:x="906" fg:w="1"/><text x="72.7880%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="72.5380%" y="229" width="0.1601%" height="15" fill="rgb(251,199,47)" fg:x="906" fg:w="2"/><text x="72.7880%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.5380%" y="213" width="0.1601%" height="15" fill="rgb(228,218,44)" fg:x="906" fg:w="2"/><text x="72.7880%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="72.5380%" y="197" width="0.1601%" height="15" fill="rgb(220,68,6)" fg:x="906" fg:w="2"/><text x="72.7880%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.6181%" y="181" width="0.0801%" height="15" fill="rgb(240,60,26)" fg:x="907" fg:w="1"/><text x="72.8681%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.6181%" y="165" width="0.0801%" height="15" fill="rgb(211,200,19)" fg:x="907" fg:w="1"/><text x="72.8681%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.6181%" y="149" width="0.0801%" height="15" fill="rgb(242,145,30)" fg:x="907" fg:w="1"/><text x="72.8681%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6181%" y="133" width="0.0801%" height="15" fill="rgb(225,64,13)" fg:x="907" fg:w="1"/><text x="72.8681%" y="143.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (6 samples, 0.48%)</title><rect x="72.2978%" y="341" width="0.4804%" height="15" fill="rgb(218,103,35)" fg:x="903" fg:w="6"/><text x="72.5478%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (6 samples, 0.48%)</title><rect x="72.2978%" y="325" width="0.4804%" height="15" fill="rgb(216,93,46)" fg:x="903" fg:w="6"/><text x="72.5478%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="72.2978%" y="309" width="0.4804%" height="15" fill="rgb(225,159,27)" fg:x="903" fg:w="6"/><text x="72.5478%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="72.2978%" y="293" width="0.4804%" height="15" fill="rgb(225,204,11)" fg:x="903" fg:w="6"/><text x="72.5478%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="72.2978%" y="277" width="0.4804%" height="15" fill="rgb(205,56,4)" fg:x="903" fg:w="6"/><text x="72.5478%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="72.2978%" y="261" width="0.4804%" height="15" fill="rgb(206,6,35)" fg:x="903" fg:w="6"/><text x="72.5478%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="72.3779%" y="245" width="0.4003%" height="15" fill="rgb(247,73,52)" fg:x="904" fg:w="5"/><text x="72.6279%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6982%" y="229" width="0.0801%" height="15" fill="rgb(246,97,4)" fg:x="908" fg:w="1"/><text x="72.9482%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6982%" y="213" width="0.0801%" height="15" fill="rgb(212,37,15)" fg:x="908" fg:w="1"/><text x="72.9482%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.6982%" y="197" width="0.0801%" height="15" fill="rgb(208,130,40)" fg:x="908" fg:w="1"/><text x="72.9482%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.6982%" y="181" width="0.0801%" height="15" fill="rgb(236,55,29)" fg:x="908" fg:w="1"/><text x="72.9482%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6982%" y="165" width="0.0801%" height="15" fill="rgb(209,156,45)" fg:x="908" fg:w="1"/><text x="72.9482%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7782%" y="261" width="0.0801%" height="15" fill="rgb(249,107,4)" fg:x="909" fg:w="1"/><text x="73.0282%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7782%" y="245" width="0.0801%" height="15" fill="rgb(227,7,13)" fg:x="909" fg:w="1"/><text x="73.0282%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7782%" y="229" width="0.0801%" height="15" fill="rgb(250,129,14)" fg:x="909" fg:w="1"/><text x="73.0282%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8583%" y="229" width="0.0801%" height="15" fill="rgb(229,92,13)" fg:x="910" fg:w="1"/><text x="73.1083%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.9384%" y="213" width="0.0801%" height="15" fill="rgb(245,98,39)" fg:x="911" fg:w="1"/><text x="73.1884%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.9384%" y="197" width="0.0801%" height="15" fill="rgb(234,135,48)" fg:x="911" fg:w="1"/><text x="73.1884%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (16 samples, 1.28%)</title><rect x="71.8175%" y="389" width="1.2810%" height="15" fill="rgb(230,98,28)" fg:x="897" fg:w="16"/><text x="72.0675%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (14 samples, 1.12%)</title><rect x="71.9776%" y="373" width="1.1209%" height="15" fill="rgb(223,121,0)" fg:x="899" fg:w="14"/><text x="72.2276%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (10 samples, 0.80%)</title><rect x="72.2978%" y="357" width="0.8006%" height="15" fill="rgb(234,173,33)" fg:x="903" fg:w="10"/><text x="72.5478%" y="367.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="72.7782%" y="341" width="0.3203%" height="15" fill="rgb(245,47,8)" fg:x="909" fg:w="4"/><text x="73.0282%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="72.7782%" y="325" width="0.3203%" height="15" fill="rgb(205,17,20)" fg:x="909" fg:w="4"/><text x="73.0282%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="72.7782%" y="309" width="0.3203%" height="15" fill="rgb(232,151,16)" fg:x="909" fg:w="4"/><text x="73.0282%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="72.7782%" y="293" width="0.3203%" height="15" fill="rgb(208,30,32)" fg:x="909" fg:w="4"/><text x="73.0282%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="72.7782%" y="277" width="0.3203%" height="15" fill="rgb(254,26,3)" fg:x="909" fg:w="4"/><text x="73.0282%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="72.8583%" y="261" width="0.2402%" height="15" fill="rgb(240,177,30)" fg:x="910" fg:w="3"/><text x="73.1083%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.8583%" y="245" width="0.2402%" height="15" fill="rgb(248,76,44)" fg:x="910" fg:w="3"/><text x="73.1083%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.9384%" y="229" width="0.1601%" height="15" fill="rgb(241,186,54)" fg:x="911" fg:w="2"/><text x="73.1884%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0184%" y="213" width="0.0801%" height="15" fill="rgb(249,171,29)" fg:x="912" fg:w="1"/><text x="73.2684%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0184%" y="197" width="0.0801%" height="15" fill="rgb(237,151,44)" fg:x="912" fg:w="1"/><text x="73.2684%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0184%" y="181" width="0.0801%" height="15" fill="rgb(228,174,30)" fg:x="912" fg:w="1"/><text x="73.2684%" y="191.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (17 samples, 1.36%)</title><rect x="71.8175%" y="469" width="1.3611%" height="15" fill="rgb(252,14,37)" fg:x="897" fg:w="17"/><text x="72.0675%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.36%)</title><rect x="71.8175%" y="453" width="1.3611%" height="15" fill="rgb(207,111,40)" fg:x="897" fg:w="17"/><text x="72.0675%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="71.8175%" y="437" width="1.3611%" height="15" fill="rgb(248,171,54)" fg:x="897" fg:w="17"/><text x="72.0675%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.36%)</title><rect x="71.8175%" y="421" width="1.3611%" height="15" fill="rgb(211,127,2)" fg:x="897" fg:w="17"/><text x="72.0675%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (17 samples, 1.36%)</title><rect x="71.8175%" y="405" width="1.3611%" height="15" fill="rgb(236,87,47)" fg:x="897" fg:w="17"/><text x="72.0675%" y="415.50"></text></g><g><title>engine::session::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="73.0985%" y="389" width="0.0801%" height="15" fill="rgb(223,190,45)" fg:x="913" fg:w="1"/><text x="73.3485%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2586%" y="437" width="0.0801%" height="15" fill="rgb(215,5,16)" fg:x="915" fg:w="1"/><text x="73.5086%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.3387%" y="437" width="0.0801%" height="15" fill="rgb(252,82,33)" fg:x="916" fg:w="1"/><text x="73.5887%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.4187%" y="437" width="0.0801%" height="15" fill="rgb(247,213,44)" fg:x="917" fg:w="1"/><text x="73.6687%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.4187%" y="421" width="0.0801%" height="15" fill="rgb(205,196,44)" fg:x="917" fg:w="1"/><text x="73.6687%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4187%" y="405" width="0.0801%" height="15" fill="rgb(237,96,54)" fg:x="917" fg:w="1"/><text x="73.6687%" y="415.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (779 samples, 62.37%)</title><rect x="11.2090%" y="661" width="62.3699%" height="15" fill="rgb(230,113,34)" fg:x="140" fg:w="779"/><text x="11.4590%" y="671.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (756 samples, 60.53%)</title><rect x="13.0504%" y="645" width="60.5284%" height="15" fill="rgb(221,224,12)" fg:x="163" fg:w="756"/><text x="13.3004%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (756 samples, 60.53%)</title><rect x="13.0504%" y="629" width="60.5284%" height="15" fill="rgb(219,112,44)" fg:x="163" fg:w="756"/><text x="13.3004%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (756 samples, 60.53%)</title><rect x="13.0504%" y="613" width="60.5284%" height="15" fill="rgb(210,31,13)" fg:x="163" fg:w="756"/><text x="13.3004%" y="623.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (756 samples, 60.53%)</title><rect x="13.0504%" y="597" width="60.5284%" height="15" fill="rgb(230,25,16)" fg:x="163" fg:w="756"/><text x="13.3004%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (756 samples, 60.53%)</title><rect x="13.0504%" y="581" width="60.5284%" height="15" fill="rgb(246,108,53)" fg:x="163" fg:w="756"/><text x="13.3004%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (756 samples, 60.53%)</title><rect x="13.0504%" y="565" width="60.5284%" height="15" fill="rgb(241,172,50)" fg:x="163" fg:w="756"/><text x="13.3004%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (756 samples, 60.53%)</title><rect x="13.0504%" y="549" width="60.5284%" height="15" fill="rgb(235,141,10)" fg:x="163" fg:w="756"/><text x="13.3004%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (756 samples, 60.53%)</title><rect x="13.0504%" y="533" width="60.5284%" height="15" fill="rgb(220,174,43)" fg:x="163" fg:w="756"/><text x="13.3004%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (756 samples, 60.53%)</title><rect x="13.0504%" y="517" width="60.5284%" height="15" fill="rgb(215,181,40)" fg:x="163" fg:w="756"/><text x="13.3004%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (22 samples, 1.76%)</title><rect x="71.8175%" y="501" width="1.7614%" height="15" fill="rgb(230,97,2)" fg:x="897" fg:w="22"/><text x="72.0675%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (22 samples, 1.76%)</title><rect x="71.8175%" y="485" width="1.7614%" height="15" fill="rgb(211,25,27)" fg:x="897" fg:w="22"/><text x="72.0675%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="73.1785%" y="469" width="0.4003%" height="15" fill="rgb(230,87,26)" fg:x="914" fg:w="5"/><text x="73.4285%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.1785%" y="453" width="0.4003%" height="15" fill="rgb(227,160,17)" fg:x="914" fg:w="5"/><text x="73.4285%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="73.4988%" y="437" width="0.0801%" height="15" fill="rgb(244,85,34)" fg:x="918" fg:w="1"/><text x="73.7488%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.4988%" y="421" width="0.0801%" height="15" fill="rgb(207,70,0)" fg:x="918" fg:w="1"/><text x="73.7488%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.4988%" y="405" width="0.0801%" height="15" fill="rgb(223,129,7)" fg:x="918" fg:w="1"/><text x="73.7488%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.4988%" y="389" width="0.0801%" height="15" fill="rgb(246,105,7)" fg:x="918" fg:w="1"/><text x="73.7488%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.4988%" y="373" width="0.0801%" height="15" fill="rgb(215,154,42)" fg:x="918" fg:w="1"/><text x="73.7488%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.4988%" y="357" width="0.0801%" height="15" fill="rgb(220,215,30)" fg:x="918" fg:w="1"/><text x="73.7488%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.7390%" y="565" width="0.0801%" height="15" fill="rgb(228,81,51)" fg:x="921" fg:w="1"/><text x="73.9890%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.7390%" y="549" width="0.0801%" height="15" fill="rgb(247,71,54)" fg:x="921" fg:w="1"/><text x="73.9890%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.7390%" y="533" width="0.0801%" height="15" fill="rgb(234,176,34)" fg:x="921" fg:w="1"/><text x="73.9890%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7390%" y="517" width="0.0801%" height="15" fill="rgb(241,103,54)" fg:x="921" fg:w="1"/><text x="73.9890%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7390%" y="501" width="0.0801%" height="15" fill="rgb(228,22,34)" fg:x="921" fg:w="1"/><text x="73.9890%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7390%" y="485" width="0.0801%" height="15" fill="rgb(241,179,48)" fg:x="921" fg:w="1"/><text x="73.9890%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7390%" y="469" width="0.0801%" height="15" fill="rgb(235,167,37)" fg:x="921" fg:w="1"/><text x="73.9890%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="73.7390%" y="597" width="0.1601%" height="15" fill="rgb(213,109,30)" fg:x="921" fg:w="2"/><text x="73.9890%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="73.7390%" y="581" width="0.1601%" height="15" fill="rgb(222,172,16)" fg:x="921" fg:w="2"/><text x="73.9890%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.8191%" y="565" width="0.0801%" height="15" fill="rgb(233,192,5)" fg:x="922" fg:w="1"/><text x="74.0691%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.8191%" y="549" width="0.0801%" height="15" fill="rgb(247,189,41)" fg:x="922" fg:w="1"/><text x="74.0691%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.8191%" y="533" width="0.0801%" height="15" fill="rgb(218,134,47)" fg:x="922" fg:w="1"/><text x="74.0691%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8191%" y="517" width="0.0801%" height="15" fill="rgb(216,29,3)" fg:x="922" fg:w="1"/><text x="74.0691%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8191%" y="501" width="0.0801%" height="15" fill="rgb(246,140,12)" fg:x="922" fg:w="1"/><text x="74.0691%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8191%" y="485" width="0.0801%" height="15" fill="rgb(230,136,11)" fg:x="922" fg:w="1"/><text x="74.0691%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8191%" y="469" width="0.0801%" height="15" fill="rgb(247,22,47)" fg:x="922" fg:w="1"/><text x="74.0691%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.8191%" y="453" width="0.0801%" height="15" fill="rgb(218,84,22)" fg:x="922" fg:w="1"/><text x="74.0691%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8191%" y="437" width="0.0801%" height="15" fill="rgb(216,87,39)" fg:x="922" fg:w="1"/><text x="74.0691%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8191%" y="421" width="0.0801%" height="15" fill="rgb(221,178,8)" fg:x="922" fg:w="1"/><text x="74.0691%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8191%" y="405" width="0.0801%" height="15" fill="rgb(230,42,11)" fg:x="922" fg:w="1"/><text x="74.0691%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8191%" y="389" width="0.0801%" height="15" fill="rgb(237,229,4)" fg:x="922" fg:w="1"/><text x="74.0691%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8191%" y="373" width="0.0801%" height="15" fill="rgb(222,31,33)" fg:x="922" fg:w="1"/><text x="74.0691%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.8191%" y="357" width="0.0801%" height="15" fill="rgb(210,17,39)" fg:x="922" fg:w="1"/><text x="74.0691%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8191%" y="341" width="0.0801%" height="15" fill="rgb(244,93,20)" fg:x="922" fg:w="1"/><text x="74.0691%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.8991%" y="597" width="0.0801%" height="15" fill="rgb(210,40,47)" fg:x="923" fg:w="1"/><text x="74.1491%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.8991%" y="581" width="0.0801%" height="15" fill="rgb(239,211,47)" fg:x="923" fg:w="1"/><text x="74.1491%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.8991%" y="565" width="0.0801%" height="15" fill="rgb(251,223,49)" fg:x="923" fg:w="1"/><text x="74.1491%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8991%" y="549" width="0.0801%" height="15" fill="rgb(221,149,5)" fg:x="923" fg:w="1"/><text x="74.1491%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8991%" y="533" width="0.0801%" height="15" fill="rgb(219,224,51)" fg:x="923" fg:w="1"/><text x="74.1491%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8991%" y="517" width="0.0801%" height="15" fill="rgb(223,7,8)" fg:x="923" fg:w="1"/><text x="74.1491%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8991%" y="501" width="0.0801%" height="15" fill="rgb(241,217,22)" fg:x="923" fg:w="1"/><text x="74.1491%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.8991%" y="485" width="0.0801%" height="15" fill="rgb(248,209,0)" fg:x="923" fg:w="1"/><text x="74.1491%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8991%" y="469" width="0.0801%" height="15" fill="rgb(217,205,4)" fg:x="923" fg:w="1"/><text x="74.1491%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8991%" y="453" width="0.0801%" height="15" fill="rgb(228,124,39)" fg:x="923" fg:w="1"/><text x="74.1491%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8991%" y="437" width="0.0801%" height="15" fill="rgb(250,116,42)" fg:x="923" fg:w="1"/><text x="74.1491%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8991%" y="421" width="0.0801%" height="15" fill="rgb(223,202,9)" fg:x="923" fg:w="1"/><text x="74.1491%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.9792%" y="517" width="0.0801%" height="15" fill="rgb(242,222,40)" fg:x="924" fg:w="1"/><text x="74.2292%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9792%" y="501" width="0.0801%" height="15" fill="rgb(229,99,46)" fg:x="924" fg:w="1"/><text x="74.2292%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.9792%" y="485" width="0.0801%" height="15" fill="rgb(225,56,46)" fg:x="924" fg:w="1"/><text x="74.2292%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.9792%" y="469" width="0.0801%" height="15" fill="rgb(227,94,5)" fg:x="924" fg:w="1"/><text x="74.2292%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="73.9792%" y="581" width="0.1601%" height="15" fill="rgb(205,112,38)" fg:x="924" fg:w="2"/><text x="74.2292%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="73.9792%" y="565" width="0.1601%" height="15" fill="rgb(231,133,46)" fg:x="924" fg:w="2"/><text x="74.2292%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.9792%" y="549" width="0.1601%" height="15" fill="rgb(217,16,9)" fg:x="924" fg:w="2"/><text x="74.2292%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.9792%" y="533" width="0.1601%" height="15" fill="rgb(249,173,9)" fg:x="924" fg:w="2"/><text x="74.2292%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0592%" y="517" width="0.0801%" height="15" fill="rgb(205,163,53)" fg:x="925" fg:w="1"/><text x="74.3092%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0592%" y="501" width="0.0801%" height="15" fill="rgb(217,54,41)" fg:x="925" fg:w="1"/><text x="74.3092%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.0592%" y="485" width="0.0801%" height="15" fill="rgb(228,216,12)" fg:x="925" fg:w="1"/><text x="74.3092%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.1393%" y="373" width="0.0801%" height="15" fill="rgb(244,228,15)" fg:x="926" fg:w="1"/><text x="74.3893%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.1393%" y="357" width="0.0801%" height="15" fill="rgb(221,176,53)" fg:x="926" fg:w="1"/><text x="74.3893%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.64%)</title><rect x="73.6589%" y="629" width="0.6405%" height="15" fill="rgb(205,94,34)" fg:x="920" fg:w="8"/><text x="73.9089%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="73.6589%" y="613" width="0.6405%" height="15" fill="rgb(213,110,48)" fg:x="920" fg:w="8"/><text x="73.9089%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="73.9792%" y="597" width="0.3203%" height="15" fill="rgb(236,142,28)" fg:x="924" fg:w="4"/><text x="74.2292%" y="607.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="74.1393%" y="581" width="0.1601%" height="15" fill="rgb(225,135,29)" fg:x="926" fg:w="2"/><text x="74.3893%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1393%" y="565" width="0.1601%" height="15" fill="rgb(252,45,31)" fg:x="926" fg:w="2"/><text x="74.3893%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1393%" y="549" width="0.1601%" height="15" fill="rgb(211,187,50)" fg:x="926" fg:w="2"/><text x="74.3893%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1393%" y="533" width="0.1601%" height="15" fill="rgb(229,109,7)" fg:x="926" fg:w="2"/><text x="74.3893%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1393%" y="517" width="0.1601%" height="15" fill="rgb(251,131,51)" fg:x="926" fg:w="2"/><text x="74.3893%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1393%" y="501" width="0.1601%" height="15" fill="rgb(251,180,35)" fg:x="926" fg:w="2"/><text x="74.3893%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1393%" y="485" width="0.1601%" height="15" fill="rgb(211,46,32)" fg:x="926" fg:w="2"/><text x="74.3893%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1393%" y="469" width="0.1601%" height="15" fill="rgb(248,123,17)" fg:x="926" fg:w="2"/><text x="74.3893%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1393%" y="453" width="0.1601%" height="15" fill="rgb(227,141,18)" fg:x="926" fg:w="2"/><text x="74.3893%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1393%" y="437" width="0.1601%" height="15" fill="rgb(216,102,9)" fg:x="926" fg:w="2"/><text x="74.3893%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1393%" y="421" width="0.1601%" height="15" fill="rgb(253,47,13)" fg:x="926" fg:w="2"/><text x="74.3893%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.1393%" y="405" width="0.1601%" height="15" fill="rgb(226,93,23)" fg:x="926" fg:w="2"/><text x="74.3893%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1393%" y="389" width="0.1601%" height="15" fill="rgb(247,104,17)" fg:x="926" fg:w="2"/><text x="74.3893%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.2194%" y="373" width="0.0801%" height="15" fill="rgb(233,203,26)" fg:x="927" fg:w="1"/><text x="74.4694%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2194%" y="357" width="0.0801%" height="15" fill="rgb(244,98,49)" fg:x="927" fg:w="1"/><text x="74.4694%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.2194%" y="341" width="0.0801%" height="15" fill="rgb(235,134,22)" fg:x="927" fg:w="1"/><text x="74.4694%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (929 samples, 74.38%)</title><rect x="0.0000%" y="837" width="74.3795%" height="15" fill="rgb(221,70,32)" fg:x="0" fg:w="929"/><text x="0.2500%" y="847.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (929 samples, 74.38%)</title><rect x="0.0000%" y="821" width="74.3795%" height="15" fill="rgb(238,15,50)" fg:x="0" fg:w="929"/><text x="0.2500%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (929 samples, 74.38%)</title><rect x="0.0000%" y="805" width="74.3795%" height="15" fill="rgb(215,221,48)" fg:x="0" fg:w="929"/><text x="0.2500%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (789 samples, 63.17%)</title><rect x="11.2090%" y="789" width="63.1705%" height="15" fill="rgb(236,73,3)" fg:x="140" fg:w="789"/><text x="11.4590%" y="799.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (789 samples, 63.17%)</title><rect x="11.2090%" y="773" width="63.1705%" height="15" fill="rgb(250,107,11)" fg:x="140" fg:w="789"/><text x="11.4590%" y="783.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (789 samples, 63.17%)</title><rect x="11.2090%" y="757" width="63.1705%" height="15" fill="rgb(242,39,14)" fg:x="140" fg:w="789"/><text x="11.4590%" y="767.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (789 samples, 63.17%)</title><rect x="11.2090%" y="741" width="63.1705%" height="15" fill="rgb(248,164,37)" fg:x="140" fg:w="789"/><text x="11.4590%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (789 samples, 63.17%)</title><rect x="11.2090%" y="725" width="63.1705%" height="15" fill="rgb(217,60,12)" fg:x="140" fg:w="789"/><text x="11.4590%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (789 samples, 63.17%)</title><rect x="11.2090%" y="709" width="63.1705%" height="15" fill="rgb(240,125,29)" fg:x="140" fg:w="789"/><text x="11.4590%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (789 samples, 63.17%)</title><rect x="11.2090%" y="693" width="63.1705%" height="15" fill="rgb(208,207,28)" fg:x="140" fg:w="789"/><text x="11.4590%" y="703.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (789 samples, 63.17%)</title><rect x="11.2090%" y="677" width="63.1705%" height="15" fill="rgb(209,159,27)" fg:x="140" fg:w="789"/><text x="11.4590%" y="687.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (10 samples, 0.80%)</title><rect x="73.5789%" y="661" width="0.8006%" height="15" fill="rgb(251,176,53)" fg:x="919" fg:w="10"/><text x="73.8289%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (9 samples, 0.72%)</title><rect x="73.6589%" y="645" width="0.7206%" height="15" fill="rgb(211,85,7)" fg:x="920" fg:w="9"/><text x="73.9089%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="74.2994%" y="629" width="0.0801%" height="15" fill="rgb(216,64,54)" fg:x="928" fg:w="1"/><text x="74.5494%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2994%" y="613" width="0.0801%" height="15" fill="rgb(217,54,24)" fg:x="928" fg:w="1"/><text x="74.5494%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2994%" y="597" width="0.0801%" height="15" fill="rgb(208,206,53)" fg:x="928" fg:w="1"/><text x="74.5494%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.2994%" y="581" width="0.0801%" height="15" fill="rgb(251,74,39)" fg:x="928" fg:w="1"/><text x="74.5494%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.2994%" y="565" width="0.0801%" height="15" fill="rgb(226,47,5)" fg:x="928" fg:w="1"/><text x="74.5494%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.2994%" y="549" width="0.0801%" height="15" fill="rgb(234,111,33)" fg:x="928" fg:w="1"/><text x="74.5494%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.2994%" y="533" width="0.0801%" height="15" fill="rgb(251,14,10)" fg:x="928" fg:w="1"/><text x="74.5494%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.2994%" y="517" width="0.0801%" height="15" fill="rgb(232,43,0)" fg:x="928" fg:w="1"/><text x="74.5494%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3795%" y="789" width="0.0801%" height="15" fill="rgb(222,68,43)" fg:x="929" fg:w="1"/><text x="74.6295%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (1 samples, 0.08%)</title><rect x="74.3795%" y="773" width="0.0801%" height="15" fill="rgb(217,24,23)" fg:x="929" fg:w="1"/><text x="74.6295%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3795%" y="757" width="0.0801%" height="15" fill="rgb(229,209,14)" fg:x="929" fg:w="1"/><text x="74.6295%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="74.3795%" y="741" width="0.0801%" height="15" fill="rgb(250,149,48)" fg:x="929" fg:w="1"/><text x="74.6295%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3795%" y="725" width="0.0801%" height="15" fill="rgb(210,120,37)" fg:x="929" fg:w="1"/><text x="74.6295%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3795%" y="709" width="0.0801%" height="15" fill="rgb(210,21,8)" fg:x="929" fg:w="1"/><text x="74.6295%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="74.3795%" y="693" width="0.0801%" height="15" fill="rgb(243,145,7)" fg:x="929" fg:w="1"/><text x="74.6295%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.3795%" y="677" width="0.0801%" height="15" fill="rgb(238,178,32)" fg:x="929" fg:w="1"/><text x="74.6295%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3795%" y="661" width="0.0801%" height="15" fill="rgb(222,4,10)" fg:x="929" fg:w="1"/><text x="74.6295%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3795%" y="645" width="0.0801%" height="15" fill="rgb(239,7,37)" fg:x="929" fg:w="1"/><text x="74.6295%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3795%" y="629" width="0.0801%" height="15" fill="rgb(215,31,37)" fg:x="929" fg:w="1"/><text x="74.6295%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="74.4596%" y="757" width="0.0801%" height="15" fill="rgb(224,83,33)" fg:x="930" fg:w="1"/><text x="74.7096%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="74.4596%" y="741" width="0.0801%" height="15" fill="rgb(239,55,3)" fg:x="930" fg:w="1"/><text x="74.7096%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="74.4596%" y="725" width="0.0801%" height="15" fill="rgb(247,92,11)" fg:x="930" fg:w="1"/><text x="74.7096%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.4596%" y="709" width="0.0801%" height="15" fill="rgb(239,200,7)" fg:x="930" fg:w="1"/><text x="74.7096%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.4596%" y="693" width="0.0801%" height="15" fill="rgb(227,115,8)" fg:x="930" fg:w="1"/><text x="74.7096%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.4596%" y="677" width="0.0801%" height="15" fill="rgb(215,189,27)" fg:x="930" fg:w="1"/><text x="74.7096%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4596%" y="661" width="0.0801%" height="15" fill="rgb(251,216,39)" fg:x="930" fg:w="1"/><text x="74.7096%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4596%" y="645" width="0.0801%" height="15" fill="rgb(207,29,47)" fg:x="930" fg:w="1"/><text x="74.7096%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4596%" y="629" width="0.0801%" height="15" fill="rgb(210,71,34)" fg:x="930" fg:w="1"/><text x="74.7096%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4596%" y="613" width="0.0801%" height="15" fill="rgb(253,217,51)" fg:x="930" fg:w="1"/><text x="74.7096%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4596%" y="597" width="0.0801%" height="15" fill="rgb(222,117,46)" fg:x="930" fg:w="1"/><text x="74.7096%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4596%" y="581" width="0.0801%" height="15" fill="rgb(226,132,6)" fg:x="930" fg:w="1"/><text x="74.7096%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.4596%" y="565" width="0.0801%" height="15" fill="rgb(254,145,51)" fg:x="930" fg:w="1"/><text x="74.7096%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.4596%" y="549" width="0.0801%" height="15" fill="rgb(231,199,27)" fg:x="930" fg:w="1"/><text x="74.7096%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.4596%" y="533" width="0.0801%" height="15" fill="rgb(245,158,14)" fg:x="930" fg:w="1"/><text x="74.7096%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.4596%" y="517" width="0.0801%" height="15" fill="rgb(240,113,14)" fg:x="930" fg:w="1"/><text x="74.7096%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.4596%" y="501" width="0.0801%" height="15" fill="rgb(210,20,13)" fg:x="930" fg:w="1"/><text x="74.7096%" y="511.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="74.5396%" y="757" width="0.0801%" height="15" fill="rgb(241,144,13)" fg:x="931" fg:w="1"/><text x="74.7896%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="74.5396%" y="741" width="0.0801%" height="15" fill="rgb(235,43,34)" fg:x="931" fg:w="1"/><text x="74.7896%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.5396%" y="725" width="0.0801%" height="15" fill="rgb(208,36,20)" fg:x="931" fg:w="1"/><text x="74.7896%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.5396%" y="709" width="0.0801%" height="15" fill="rgb(239,204,10)" fg:x="931" fg:w="1"/><text x="74.7896%" y="719.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="74.6197%" y="757" width="0.0801%" height="15" fill="rgb(217,84,43)" fg:x="932" fg:w="1"/><text x="74.8697%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="74.6197%" y="741" width="0.0801%" height="15" fill="rgb(241,170,50)" fg:x="932" fg:w="1"/><text x="74.8697%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="74.6197%" y="725" width="0.0801%" height="15" fill="rgb(226,205,29)" fg:x="932" fg:w="1"/><text x="74.8697%" y="735.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="74.6197%" y="709" width="0.0801%" height="15" fill="rgb(233,113,1)" fg:x="932" fg:w="1"/><text x="74.8697%" y="719.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="74.6197%" y="693" width="0.0801%" height="15" fill="rgb(253,98,13)" fg:x="932" fg:w="1"/><text x="74.8697%" y="703.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="74.6197%" y="677" width="0.0801%" height="15" fill="rgb(211,115,12)" fg:x="932" fg:w="1"/><text x="74.8697%" y="687.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="74.6197%" y="661" width="0.0801%" height="15" fill="rgb(208,12,16)" fg:x="932" fg:w="1"/><text x="74.8697%" y="671.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="74.6197%" y="645" width="0.0801%" height="15" fill="rgb(237,193,54)" fg:x="932" fg:w="1"/><text x="74.8697%" y="655.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (1 samples, 0.08%)</title><rect x="74.6197%" y="629" width="0.0801%" height="15" fill="rgb(243,22,42)" fg:x="932" fg:w="1"/><text x="74.8697%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.40%)</title><rect x="74.4596%" y="789" width="0.4003%" height="15" fill="rgb(233,151,36)" fg:x="930" fg:w="5"/><text x="74.7096%" y="799.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.40%)</title><rect x="74.4596%" y="773" width="0.4003%" height="15" fill="rgb(237,57,45)" fg:x="930" fg:w="5"/><text x="74.7096%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="74.6998%" y="757" width="0.1601%" height="15" fill="rgb(221,88,17)" fg:x="933" fg:w="2"/><text x="74.9498%" y="767.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="74.6998%" y="741" width="0.1601%" height="15" fill="rgb(230,79,15)" fg:x="933" fg:w="2"/><text x="74.9498%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="74.6998%" y="725" width="0.1601%" height="15" fill="rgb(213,57,13)" fg:x="933" fg:w="2"/><text x="74.9498%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.7798%" y="709" width="0.0801%" height="15" fill="rgb(222,116,39)" fg:x="934" fg:w="1"/><text x="75.0298%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.7798%" y="693" width="0.0801%" height="15" fill="rgb(245,107,2)" fg:x="934" fg:w="1"/><text x="75.0298%" y="703.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.7798%" y="677" width="0.0801%" height="15" fill="rgb(238,1,10)" fg:x="934" fg:w="1"/><text x="75.0298%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="74.8599%" y="709" width="0.1601%" height="15" fill="rgb(249,4,48)" fg:x="935" fg:w="2"/><text x="75.1099%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.8599%" y="693" width="0.1601%" height="15" fill="rgb(223,151,18)" fg:x="935" fg:w="2"/><text x="75.1099%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.8599%" y="677" width="0.1601%" height="15" fill="rgb(227,65,43)" fg:x="935" fg:w="2"/><text x="75.1099%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9400%" y="661" width="0.0801%" height="15" fill="rgb(218,40,45)" fg:x="936" fg:w="1"/><text x="75.1900%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9400%" y="645" width="0.0801%" height="15" fill="rgb(252,121,31)" fg:x="936" fg:w="1"/><text x="75.1900%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.9400%" y="629" width="0.0801%" height="15" fill="rgb(219,158,43)" fg:x="936" fg:w="1"/><text x="75.1900%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.0200%" y="613" width="0.0801%" height="15" fill="rgb(231,162,42)" fg:x="937" fg:w="1"/><text x="75.2700%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0200%" y="597" width="0.0801%" height="15" fill="rgb(217,179,25)" fg:x="937" fg:w="1"/><text x="75.2700%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0200%" y="581" width="0.0801%" height="15" fill="rgb(206,212,31)" fg:x="937" fg:w="1"/><text x="75.2700%" y="591.50"></text></g><g><title>engine::session::Session::flush (4 samples, 0.32%)</title><rect x="74.8599%" y="773" width="0.3203%" height="15" fill="rgb(235,144,12)" fg:x="935" fg:w="4"/><text x="75.1099%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (4 samples, 0.32%)</title><rect x="74.8599%" y="757" width="0.3203%" height="15" fill="rgb(213,51,10)" fg:x="935" fg:w="4"/><text x="75.1099%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (4 samples, 0.32%)</title><rect x="74.8599%" y="741" width="0.3203%" height="15" fill="rgb(231,145,14)" fg:x="935" fg:w="4"/><text x="75.1099%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (4 samples, 0.32%)</title><rect x="74.8599%" y="725" width="0.3203%" height="15" fill="rgb(235,15,28)" fg:x="935" fg:w="4"/><text x="75.1099%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="75.0200%" y="709" width="0.1601%" height="15" fill="rgb(237,206,10)" fg:x="937" fg:w="2"/><text x="75.2700%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="75.0200%" y="693" width="0.1601%" height="15" fill="rgb(236,227,27)" fg:x="937" fg:w="2"/><text x="75.2700%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="75.0200%" y="677" width="0.1601%" height="15" fill="rgb(246,83,35)" fg:x="937" fg:w="2"/><text x="75.2700%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="75.0200%" y="661" width="0.1601%" height="15" fill="rgb(220,136,24)" fg:x="937" fg:w="2"/><text x="75.2700%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="75.0200%" y="645" width="0.1601%" height="15" fill="rgb(217,3,25)" fg:x="937" fg:w="2"/><text x="75.2700%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.0200%" y="629" width="0.1601%" height="15" fill="rgb(239,24,14)" fg:x="937" fg:w="2"/><text x="75.2700%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.1001%" y="613" width="0.0801%" height="15" fill="rgb(244,16,53)" fg:x="938" fg:w="1"/><text x="75.3501%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.1001%" y="597" width="0.0801%" height="15" fill="rgb(208,175,44)" fg:x="938" fg:w="1"/><text x="75.3501%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.1001%" y="581" width="0.0801%" height="15" fill="rgb(252,18,48)" fg:x="938" fg:w="1"/><text x="75.3501%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.1001%" y="565" width="0.0801%" height="15" fill="rgb(234,199,32)" fg:x="938" fg:w="1"/><text x="75.3501%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1001%" y="549" width="0.0801%" height="15" fill="rgb(225,77,54)" fg:x="938" fg:w="1"/><text x="75.3501%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1001%" y="533" width="0.0801%" height="15" fill="rgb(225,42,25)" fg:x="938" fg:w="1"/><text x="75.3501%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1001%" y="517" width="0.0801%" height="15" fill="rgb(242,227,46)" fg:x="938" fg:w="1"/><text x="75.3501%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.1801%" y="741" width="0.0801%" height="15" fill="rgb(246,197,35)" fg:x="939" fg:w="1"/><text x="75.4301%" y="751.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1801%" y="725" width="0.0801%" height="15" fill="rgb(215,159,26)" fg:x="939" fg:w="1"/><text x="75.4301%" y="735.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="75.1801%" y="773" width="0.1601%" height="15" fill="rgb(212,194,50)" fg:x="939" fg:w="2"/><text x="75.4301%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="75.1801%" y="757" width="0.1601%" height="15" fill="rgb(246,132,1)" fg:x="939" fg:w="2"/><text x="75.4301%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="75.2602%" y="741" width="0.0801%" height="15" fill="rgb(217,71,7)" fg:x="940" fg:w="1"/><text x="75.5102%" y="751.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="75.2602%" y="725" width="0.0801%" height="15" fill="rgb(252,59,32)" fg:x="940" fg:w="1"/><text x="75.5102%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.2602%" y="709" width="0.0801%" height="15" fill="rgb(253,204,25)" fg:x="940" fg:w="1"/><text x="75.5102%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="75.2602%" y="693" width="0.0801%" height="15" fill="rgb(232,21,16)" fg:x="940" fg:w="1"/><text x="75.5102%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.3403%" y="709" width="0.0801%" height="15" fill="rgb(248,90,29)" fg:x="941" fg:w="1"/><text x="75.5903%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.3403%" y="693" width="0.0801%" height="15" fill="rgb(249,223,7)" fg:x="941" fg:w="1"/><text x="75.5903%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.3403%" y="677" width="0.0801%" height="15" fill="rgb(231,119,42)" fg:x="941" fg:w="1"/><text x="75.5903%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3403%" y="661" width="0.0801%" height="15" fill="rgb(215,41,35)" fg:x="941" fg:w="1"/><text x="75.5903%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3403%" y="645" width="0.0801%" height="15" fill="rgb(220,44,45)" fg:x="941" fg:w="1"/><text x="75.5903%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3403%" y="629" width="0.0801%" height="15" fill="rgb(253,197,36)" fg:x="941" fg:w="1"/><text x="75.5903%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3403%" y="613" width="0.0801%" height="15" fill="rgb(245,225,54)" fg:x="941" fg:w="1"/><text x="75.5903%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="75.3403%" y="773" width="0.1601%" height="15" fill="rgb(239,94,37)" fg:x="941" fg:w="2"/><text x="75.5903%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="75.3403%" y="757" width="0.1601%" height="15" fill="rgb(242,217,10)" fg:x="941" fg:w="2"/><text x="75.5903%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="75.3403%" y="741" width="0.1601%" height="15" fill="rgb(250,193,7)" fg:x="941" fg:w="2"/><text x="75.5903%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="75.3403%" y="725" width="0.1601%" height="15" fill="rgb(230,104,19)" fg:x="941" fg:w="2"/><text x="75.5903%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="75.4203%" y="709" width="0.0801%" height="15" fill="rgb(230,181,4)" fg:x="942" fg:w="1"/><text x="75.6703%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.4203%" y="693" width="0.0801%" height="15" fill="rgb(216,219,49)" fg:x="942" fg:w="1"/><text x="75.6703%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.4203%" y="677" width="0.0801%" height="15" fill="rgb(254,144,0)" fg:x="942" fg:w="1"/><text x="75.6703%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4203%" y="661" width="0.0801%" height="15" fill="rgb(205,209,38)" fg:x="942" fg:w="1"/><text x="75.6703%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4203%" y="645" width="0.0801%" height="15" fill="rgb(240,21,42)" fg:x="942" fg:w="1"/><text x="75.6703%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="75.4203%" y="629" width="0.0801%" height="15" fill="rgb(241,132,3)" fg:x="942" fg:w="1"/><text x="75.6703%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4203%" y="613" width="0.0801%" height="15" fill="rgb(225,14,2)" fg:x="942" fg:w="1"/><text x="75.6703%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.4203%" y="597" width="0.0801%" height="15" fill="rgb(210,141,35)" fg:x="942" fg:w="1"/><text x="75.6703%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="75.4203%" y="581" width="0.0801%" height="15" fill="rgb(251,14,44)" fg:x="942" fg:w="1"/><text x="75.6703%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4203%" y="565" width="0.0801%" height="15" fill="rgb(247,48,18)" fg:x="942" fg:w="1"/><text x="75.6703%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="75.5004%" y="757" width="0.0801%" height="15" fill="rgb(225,0,40)" fg:x="943" fg:w="1"/><text x="75.7504%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.5004%" y="741" width="0.0801%" height="15" fill="rgb(221,31,33)" fg:x="943" fg:w="1"/><text x="75.7504%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="75.5004%" y="725" width="0.0801%" height="15" fill="rgb(237,42,40)" fg:x="943" fg:w="1"/><text x="75.7504%" y="735.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="75.5004%" y="709" width="0.0801%" height="15" fill="rgb(233,51,29)" fg:x="943" fg:w="1"/><text x="75.7504%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.5004%" y="693" width="0.0801%" height="15" fill="rgb(226,58,20)" fg:x="943" fg:w="1"/><text x="75.7504%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.5004%" y="677" width="0.0801%" height="15" fill="rgb(208,98,7)" fg:x="943" fg:w="1"/><text x="75.7504%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.5805%" y="725" width="0.0801%" height="15" fill="rgb(228,143,44)" fg:x="944" fg:w="1"/><text x="75.8305%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="75.5805%" y="709" width="0.0801%" height="15" fill="rgb(246,55,38)" fg:x="944" fg:w="1"/><text x="75.8305%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="75.5805%" y="693" width="0.0801%" height="15" fill="rgb(247,87,16)" fg:x="944" fg:w="1"/><text x="75.8305%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5805%" y="677" width="0.0801%" height="15" fill="rgb(234,129,42)" fg:x="944" fg:w="1"/><text x="75.8305%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5805%" y="661" width="0.0801%" height="15" fill="rgb(220,82,16)" fg:x="944" fg:w="1"/><text x="75.8305%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.5805%" y="645" width="0.0801%" height="15" fill="rgb(211,88,4)" fg:x="944" fg:w="1"/><text x="75.8305%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.5805%" y="629" width="0.0801%" height="15" fill="rgb(248,151,21)" fg:x="944" fg:w="1"/><text x="75.8305%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.5805%" y="613" width="0.0801%" height="15" fill="rgb(238,163,6)" fg:x="944" fg:w="1"/><text x="75.8305%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.5805%" y="597" width="0.0801%" height="15" fill="rgb(209,183,11)" fg:x="944" fg:w="1"/><text x="75.8305%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.5805%" y="581" width="0.0801%" height="15" fill="rgb(219,37,20)" fg:x="944" fg:w="1"/><text x="75.8305%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.5805%" y="565" width="0.0801%" height="15" fill="rgb(210,158,4)" fg:x="944" fg:w="1"/><text x="75.8305%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.5805%" y="549" width="0.0801%" height="15" fill="rgb(221,167,53)" fg:x="944" fg:w="1"/><text x="75.8305%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.5805%" y="533" width="0.0801%" height="15" fill="rgb(237,151,45)" fg:x="944" fg:w="1"/><text x="75.8305%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.5805%" y="517" width="0.0801%" height="15" fill="rgb(231,39,3)" fg:x="944" fg:w="1"/><text x="75.8305%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5805%" y="501" width="0.0801%" height="15" fill="rgb(212,167,28)" fg:x="944" fg:w="1"/><text x="75.8305%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.7406%" y="677" width="0.0801%" height="15" fill="rgb(232,178,8)" fg:x="946" fg:w="1"/><text x="75.9906%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.7406%" y="661" width="0.0801%" height="15" fill="rgb(225,151,20)" fg:x="946" fg:w="1"/><text x="75.9906%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.7406%" y="645" width="0.0801%" height="15" fill="rgb(238,3,37)" fg:x="946" fg:w="1"/><text x="75.9906%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="75.6605%" y="693" width="0.2402%" height="15" fill="rgb(251,147,42)" fg:x="945" fg:w="3"/><text x="75.9105%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8207%" y="677" width="0.0801%" height="15" fill="rgb(208,173,10)" fg:x="947" fg:w="1"/><text x="76.0707%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8207%" y="661" width="0.0801%" height="15" fill="rgb(246,225,4)" fg:x="947" fg:w="1"/><text x="76.0707%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.8207%" y="645" width="0.0801%" height="15" fill="rgb(248,102,6)" fg:x="947" fg:w="1"/><text x="76.0707%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8207%" y="629" width="0.0801%" height="15" fill="rgb(232,6,21)" fg:x="947" fg:w="1"/><text x="76.0707%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.8207%" y="613" width="0.0801%" height="15" fill="rgb(221,179,22)" fg:x="947" fg:w="1"/><text x="76.0707%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.8207%" y="597" width="0.0801%" height="15" fill="rgb(252,50,20)" fg:x="947" fg:w="1"/><text x="76.0707%" y="607.50"></text></g><g><title>engine::session::Session::flush (5 samples, 0.40%)</title><rect x="75.5805%" y="757" width="0.4003%" height="15" fill="rgb(222,56,38)" fg:x="944" fg:w="5"/><text x="75.8305%" y="767.50"></text></g><g><title>engine::session::Session::save_entity_changes (5 samples, 0.40%)</title><rect x="75.5805%" y="741" width="0.4003%" height="15" fill="rgb(206,193,29)" fg:x="944" fg:w="5"/><text x="75.8305%" y="751.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (4 samples, 0.32%)</title><rect x="75.6605%" y="725" width="0.3203%" height="15" fill="rgb(239,192,45)" fg:x="945" fg:w="4"/><text x="75.9105%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (4 samples, 0.32%)</title><rect x="75.6605%" y="709" width="0.3203%" height="15" fill="rgb(254,18,36)" fg:x="945" fg:w="4"/><text x="75.9105%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="75.9007%" y="693" width="0.0801%" height="15" fill="rgb(221,127,11)" fg:x="948" fg:w="1"/><text x="76.1507%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9007%" y="677" width="0.0801%" height="15" fill="rgb(234,146,35)" fg:x="948" fg:w="1"/><text x="76.1507%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.9007%" y="661" width="0.0801%" height="15" fill="rgb(254,201,37)" fg:x="948" fg:w="1"/><text x="76.1507%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.9007%" y="645" width="0.0801%" height="15" fill="rgb(211,202,23)" fg:x="948" fg:w="1"/><text x="76.1507%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="75.9007%" y="629" width="0.0801%" height="15" fill="rgb(237,91,2)" fg:x="948" fg:w="1"/><text x="76.1507%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9808%" y="645" width="0.0801%" height="15" fill="rgb(226,228,36)" fg:x="949" fg:w="1"/><text x="76.2308%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9808%" y="629" width="0.0801%" height="15" fill="rgb(213,63,50)" fg:x="949" fg:w="1"/><text x="76.2308%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9808%" y="613" width="0.0801%" height="15" fill="rgb(235,194,19)" fg:x="949" fg:w="1"/><text x="76.2308%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9808%" y="597" width="0.0801%" height="15" fill="rgb(207,204,18)" fg:x="949" fg:w="1"/><text x="76.2308%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9808%" y="581" width="0.0801%" height="15" fill="rgb(248,8,7)" fg:x="949" fg:w="1"/><text x="76.2308%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9808%" y="565" width="0.0801%" height="15" fill="rgb(223,145,47)" fg:x="949" fg:w="1"/><text x="76.2308%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.9808%" y="549" width="0.0801%" height="15" fill="rgb(228,84,11)" fg:x="949" fg:w="1"/><text x="76.2308%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.9808%" y="533" width="0.0801%" height="15" fill="rgb(218,76,45)" fg:x="949" fg:w="1"/><text x="76.2308%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.9808%" y="517" width="0.0801%" height="15" fill="rgb(223,80,15)" fg:x="949" fg:w="1"/><text x="76.2308%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.9808%" y="501" width="0.0801%" height="15" fill="rgb(219,218,33)" fg:x="949" fg:w="1"/><text x="76.2308%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.9808%" y="485" width="0.0801%" height="15" fill="rgb(208,51,11)" fg:x="949" fg:w="1"/><text x="76.2308%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.9808%" y="469" width="0.0801%" height="15" fill="rgb(229,165,39)" fg:x="949" fg:w="1"/><text x="76.2308%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.9808%" y="453" width="0.0801%" height="15" fill="rgb(241,100,24)" fg:x="949" fg:w="1"/><text x="76.2308%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.9808%" y="437" width="0.0801%" height="15" fill="rgb(228,14,23)" fg:x="949" fg:w="1"/><text x="76.2308%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.9808%" y="421" width="0.0801%" height="15" fill="rgb(247,116,52)" fg:x="949" fg:w="1"/><text x="76.2308%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="75.9808%" y="405" width="0.0801%" height="15" fill="rgb(216,149,33)" fg:x="949" fg:w="1"/><text x="76.2308%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="75.9808%" y="389" width="0.0801%" height="15" fill="rgb(238,142,29)" fg:x="949" fg:w="1"/><text x="76.2308%" y="399.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="75.9808%" y="725" width="0.1601%" height="15" fill="rgb(224,83,40)" fg:x="949" fg:w="2"/><text x="76.2308%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="75.9808%" y="709" width="0.1601%" height="15" fill="rgb(234,165,11)" fg:x="949" fg:w="2"/><text x="76.2308%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="75.9808%" y="693" width="0.1601%" height="15" fill="rgb(215,96,23)" fg:x="949" fg:w="2"/><text x="76.2308%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.9808%" y="677" width="0.1601%" height="15" fill="rgb(233,179,26)" fg:x="949" fg:w="2"/><text x="76.2308%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.9808%" y="661" width="0.1601%" height="15" fill="rgb(225,129,33)" fg:x="949" fg:w="2"/><text x="76.2308%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.0608%" y="645" width="0.0801%" height="15" fill="rgb(237,49,13)" fg:x="950" fg:w="1"/><text x="76.3108%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0608%" y="629" width="0.0801%" height="15" fill="rgb(211,3,31)" fg:x="950" fg:w="1"/><text x="76.3108%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.0608%" y="613" width="0.0801%" height="15" fill="rgb(216,152,19)" fg:x="950" fg:w="1"/><text x="76.3108%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0608%" y="597" width="0.0801%" height="15" fill="rgb(251,121,35)" fg:x="950" fg:w="1"/><text x="76.3108%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.0608%" y="581" width="0.0801%" height="15" fill="rgb(210,217,47)" fg:x="950" fg:w="1"/><text x="76.3108%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0608%" y="565" width="0.0801%" height="15" fill="rgb(244,116,22)" fg:x="950" fg:w="1"/><text x="76.3108%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.0608%" y="549" width="0.0801%" height="15" fill="rgb(228,17,21)" fg:x="950" fg:w="1"/><text x="76.3108%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0608%" y="533" width="0.0801%" height="15" fill="rgb(240,149,34)" fg:x="950" fg:w="1"/><text x="76.3108%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.0608%" y="517" width="0.0801%" height="15" fill="rgb(208,125,47)" fg:x="950" fg:w="1"/><text x="76.3108%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0608%" y="501" width="0.0801%" height="15" fill="rgb(249,186,39)" fg:x="950" fg:w="1"/><text x="76.3108%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.0608%" y="485" width="0.0801%" height="15" fill="rgb(240,220,33)" fg:x="950" fg:w="1"/><text x="76.3108%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0608%" y="469" width="0.0801%" height="15" fill="rgb(243,110,23)" fg:x="950" fg:w="1"/><text x="76.3108%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="75.9808%" y="757" width="0.2402%" height="15" fill="rgb(219,163,46)" fg:x="949" fg:w="3"/><text x="76.2308%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="75.9808%" y="741" width="0.2402%" height="15" fill="rgb(216,126,30)" fg:x="949" fg:w="3"/><text x="76.2308%" y="751.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="76.1409%" y="725" width="0.0801%" height="15" fill="rgb(208,139,11)" fg:x="951" fg:w="1"/><text x="76.3909%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="76.1409%" y="709" width="0.0801%" height="15" fill="rgb(213,118,36)" fg:x="951" fg:w="1"/><text x="76.3909%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="76.1409%" y="693" width="0.0801%" height="15" fill="rgb(226,43,17)" fg:x="951" fg:w="1"/><text x="76.3909%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.1409%" y="677" width="0.0801%" height="15" fill="rgb(254,217,4)" fg:x="951" fg:w="1"/><text x="76.3909%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.1409%" y="661" width="0.0801%" height="15" fill="rgb(210,134,47)" fg:x="951" fg:w="1"/><text x="76.3909%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.1409%" y="645" width="0.0801%" height="15" fill="rgb(237,24,49)" fg:x="951" fg:w="1"/><text x="76.3909%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.1409%" y="629" width="0.0801%" height="15" fill="rgb(251,39,46)" fg:x="951" fg:w="1"/><text x="76.3909%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1409%" y="613" width="0.0801%" height="15" fill="rgb(251,220,3)" fg:x="951" fg:w="1"/><text x="76.3909%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.1409%" y="597" width="0.0801%" height="15" fill="rgb(228,105,12)" fg:x="951" fg:w="1"/><text x="76.3909%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1409%" y="581" width="0.0801%" height="15" fill="rgb(215,196,1)" fg:x="951" fg:w="1"/><text x="76.3909%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.1409%" y="565" width="0.0801%" height="15" fill="rgb(214,33,39)" fg:x="951" fg:w="1"/><text x="76.3909%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1409%" y="549" width="0.0801%" height="15" fill="rgb(220,19,52)" fg:x="951" fg:w="1"/><text x="76.3909%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.1409%" y="533" width="0.0801%" height="15" fill="rgb(221,78,38)" fg:x="951" fg:w="1"/><text x="76.3909%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1409%" y="517" width="0.0801%" height="15" fill="rgb(253,30,16)" fg:x="951" fg:w="1"/><text x="76.3909%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1409%" y="501" width="0.0801%" height="15" fill="rgb(242,65,0)" fg:x="951" fg:w="1"/><text x="76.3909%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="76.2210%" y="757" width="0.0801%" height="15" fill="rgb(235,201,12)" fg:x="952" fg:w="1"/><text x="76.4710%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="76.2210%" y="741" width="0.0801%" height="15" fill="rgb(233,161,9)" fg:x="952" fg:w="1"/><text x="76.4710%" y="751.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="76.2210%" y="725" width="0.0801%" height="15" fill="rgb(241,207,41)" fg:x="952" fg:w="1"/><text x="76.4710%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.2210%" y="709" width="0.0801%" height="15" fill="rgb(212,69,46)" fg:x="952" fg:w="1"/><text x="76.4710%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2210%" y="693" width="0.0801%" height="15" fill="rgb(239,69,45)" fg:x="952" fg:w="1"/><text x="76.4710%" y="703.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (11 samples, 0.88%)</title><rect x="75.5004%" y="773" width="0.8807%" height="15" fill="rgb(242,117,48)" fg:x="943" fg:w="11"/><text x="75.7504%" y="783.50"></text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="76.3010%" y="757" width="0.0801%" height="15" fill="rgb(228,41,36)" fg:x="953" fg:w="1"/><text x="76.5510%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="76.3010%" y="741" width="0.0801%" height="15" fill="rgb(212,3,32)" fg:x="953" fg:w="1"/><text x="76.5510%" y="751.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="76.3010%" y="725" width="0.0801%" height="15" fill="rgb(233,41,49)" fg:x="953" fg:w="1"/><text x="76.5510%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="76.3010%" y="709" width="0.0801%" height="15" fill="rgb(252,170,49)" fg:x="953" fg:w="1"/><text x="76.5510%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.3010%" y="693" width="0.0801%" height="15" fill="rgb(229,53,26)" fg:x="953" fg:w="1"/><text x="76.5510%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.3010%" y="677" width="0.0801%" height="15" fill="rgb(217,157,12)" fg:x="953" fg:w="1"/><text x="76.5510%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="76.3010%" y="661" width="0.0801%" height="15" fill="rgb(227,17,9)" fg:x="953" fg:w="1"/><text x="76.5510%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3811%" y="645" width="0.0801%" height="15" fill="rgb(218,84,12)" fg:x="954" fg:w="1"/><text x="76.6311%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3811%" y="629" width="0.0801%" height="15" fill="rgb(212,79,24)" fg:x="954" fg:w="1"/><text x="76.6311%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3811%" y="613" width="0.0801%" height="15" fill="rgb(217,222,37)" fg:x="954" fg:w="1"/><text x="76.6311%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3811%" y="597" width="0.0801%" height="15" fill="rgb(246,208,8)" fg:x="954" fg:w="1"/><text x="76.6311%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3811%" y="581" width="0.0801%" height="15" fill="rgb(244,133,10)" fg:x="954" fg:w="1"/><text x="76.6311%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="76.4612%" y="645" width="0.0801%" height="15" fill="rgb(209,219,41)" fg:x="955" fg:w="1"/><text x="76.7112%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.4612%" y="629" width="0.0801%" height="15" fill="rgb(253,175,45)" fg:x="955" fg:w="1"/><text x="76.7112%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="76.4612%" y="613" width="0.0801%" height="15" fill="rgb(235,100,37)" fg:x="955" fg:w="1"/><text x="76.7112%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.4612%" y="597" width="0.0801%" height="15" fill="rgb(225,87,19)" fg:x="955" fg:w="1"/><text x="76.7112%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.4612%" y="581" width="0.0801%" height="15" fill="rgb(217,152,17)" fg:x="955" fg:w="1"/><text x="76.7112%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="76.4612%" y="565" width="0.0801%" height="15" fill="rgb(235,72,13)" fg:x="955" fg:w="1"/><text x="76.7112%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.4612%" y="549" width="0.0801%" height="15" fill="rgb(233,140,18)" fg:x="955" fg:w="1"/><text x="76.7112%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.4612%" y="533" width="0.0801%" height="15" fill="rgb(207,212,28)" fg:x="955" fg:w="1"/><text x="76.7112%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.4612%" y="517" width="0.0801%" height="15" fill="rgb(220,130,25)" fg:x="955" fg:w="1"/><text x="76.7112%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4612%" y="501" width="0.0801%" height="15" fill="rgb(205,55,34)" fg:x="955" fg:w="1"/><text x="76.7112%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (22 samples, 1.76%)</title><rect x="74.8599%" y="789" width="1.7614%" height="15" fill="rgb(237,54,35)" fg:x="935" fg:w="22"/><text x="75.1099%" y="799.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="76.3811%" y="773" width="0.2402%" height="15" fill="rgb(208,67,23)" fg:x="954" fg:w="3"/><text x="76.6311%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="76.3811%" y="757" width="0.2402%" height="15" fill="rgb(206,207,50)" fg:x="954" fg:w="3"/><text x="76.6311%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="76.3811%" y="741" width="0.2402%" height="15" fill="rgb(213,211,42)" fg:x="954" fg:w="3"/><text x="76.6311%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="76.3811%" y="725" width="0.2402%" height="15" fill="rgb(252,197,50)" fg:x="954" fg:w="3"/><text x="76.6311%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="76.3811%" y="709" width="0.2402%" height="15" fill="rgb(251,211,41)" fg:x="954" fg:w="3"/><text x="76.6311%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="76.3811%" y="693" width="0.2402%" height="15" fill="rgb(229,211,5)" fg:x="954" fg:w="3"/><text x="76.6311%" y="703.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="76.3811%" y="677" width="0.2402%" height="15" fill="rgb(239,36,31)" fg:x="954" fg:w="3"/><text x="76.6311%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="76.3811%" y="661" width="0.2402%" height="15" fill="rgb(248,67,31)" fg:x="954" fg:w="3"/><text x="76.6311%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5412%" y="645" width="0.0801%" height="15" fill="rgb(249,55,44)" fg:x="956" fg:w="1"/><text x="76.7912%" y="655.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="76.6213%" y="757" width="0.0801%" height="15" fill="rgb(216,82,12)" fg:x="957" fg:w="1"/><text x="76.8713%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="76.6213%" y="741" width="0.0801%" height="15" fill="rgb(242,174,1)" fg:x="957" fg:w="1"/><text x="76.8713%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.6213%" y="725" width="0.0801%" height="15" fill="rgb(208,120,29)" fg:x="957" fg:w="1"/><text x="76.8713%" y="735.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6213%" y="709" width="0.0801%" height="15" fill="rgb(221,105,43)" fg:x="957" fg:w="1"/><text x="76.8713%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6213%" y="693" width="0.0801%" height="15" fill="rgb(234,124,22)" fg:x="957" fg:w="1"/><text x="76.8713%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7014%" y="693" width="0.0801%" height="15" fill="rgb(212,23,30)" fg:x="958" fg:w="1"/><text x="76.9514%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7014%" y="677" width="0.0801%" height="15" fill="rgb(219,122,53)" fg:x="958" fg:w="1"/><text x="76.9514%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7014%" y="661" width="0.0801%" height="15" fill="rgb(248,84,24)" fg:x="958" fg:w="1"/><text x="76.9514%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7014%" y="645" width="0.0801%" height="15" fill="rgb(245,115,18)" fg:x="958" fg:w="1"/><text x="76.9514%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7014%" y="629" width="0.0801%" height="15" fill="rgb(227,176,51)" fg:x="958" fg:w="1"/><text x="76.9514%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7014%" y="613" width="0.0801%" height="15" fill="rgb(229,63,42)" fg:x="958" fg:w="1"/><text x="76.9514%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="76.7014%" y="725" width="0.1601%" height="15" fill="rgb(247,202,24)" fg:x="958" fg:w="2"/><text x="76.9514%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7014%" y="709" width="0.1601%" height="15" fill="rgb(244,173,20)" fg:x="958" fg:w="2"/><text x="76.9514%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7814%" y="693" width="0.0801%" height="15" fill="rgb(242,81,47)" fg:x="959" fg:w="1"/><text x="77.0314%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.7814%" y="677" width="0.0801%" height="15" fill="rgb(231,185,54)" fg:x="959" fg:w="1"/><text x="77.0314%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8615%" y="677" width="0.0801%" height="15" fill="rgb(243,55,32)" fg:x="960" fg:w="1"/><text x="77.1115%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.8615%" y="725" width="0.1601%" height="15" fill="rgb(208,167,19)" fg:x="960" fg:w="2"/><text x="77.1115%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.8615%" y="709" width="0.1601%" height="15" fill="rgb(231,72,35)" fg:x="960" fg:w="2"/><text x="77.1115%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.8615%" y="693" width="0.1601%" height="15" fill="rgb(250,173,51)" fg:x="960" fg:w="2"/><text x="77.1115%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9416%" y="677" width="0.0801%" height="15" fill="rgb(209,5,22)" fg:x="961" fg:w="1"/><text x="77.1916%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9416%" y="661" width="0.0801%" height="15" fill="rgb(250,174,19)" fg:x="961" fg:w="1"/><text x="77.1916%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9416%" y="645" width="0.0801%" height="15" fill="rgb(217,3,49)" fg:x="961" fg:w="1"/><text x="77.1916%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9416%" y="629" width="0.0801%" height="15" fill="rgb(218,225,5)" fg:x="961" fg:w="1"/><text x="77.1916%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9416%" y="613" width="0.0801%" height="15" fill="rgb(236,89,11)" fg:x="961" fg:w="1"/><text x="77.1916%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9416%" y="597" width="0.0801%" height="15" fill="rgb(206,33,28)" fg:x="961" fg:w="1"/><text x="77.1916%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1017%" y="677" width="0.0801%" height="15" fill="rgb(241,56,42)" fg:x="963" fg:w="1"/><text x="77.3517%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.1017%" y="661" width="0.0801%" height="15" fill="rgb(222,44,11)" fg:x="963" fg:w="1"/><text x="77.3517%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1017%" y="645" width="0.0801%" height="15" fill="rgb(234,111,20)" fg:x="963" fg:w="1"/><text x="77.3517%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="77.0216%" y="709" width="0.2402%" height="15" fill="rgb(237,77,6)" fg:x="962" fg:w="3"/><text x="77.2716%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="77.0216%" y="693" width="0.2402%" height="15" fill="rgb(235,111,23)" fg:x="962" fg:w="3"/><text x="77.2716%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.1817%" y="677" width="0.0801%" height="15" fill="rgb(251,135,29)" fg:x="964" fg:w="1"/><text x="77.4317%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="77.1817%" y="661" width="0.0801%" height="15" fill="rgb(217,57,1)" fg:x="964" fg:w="1"/><text x="77.4317%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1817%" y="645" width="0.0801%" height="15" fill="rgb(249,119,31)" fg:x="964" fg:w="1"/><text x="77.4317%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1817%" y="629" width="0.0801%" height="15" fill="rgb(233,164,33)" fg:x="964" fg:w="1"/><text x="77.4317%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1817%" y="613" width="0.0801%" height="15" fill="rgb(250,217,43)" fg:x="964" fg:w="1"/><text x="77.4317%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1817%" y="597" width="0.0801%" height="15" fill="rgb(232,154,50)" fg:x="964" fg:w="1"/><text x="77.4317%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1817%" y="581" width="0.0801%" height="15" fill="rgb(227,190,8)" fg:x="964" fg:w="1"/><text x="77.4317%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1817%" y="565" width="0.0801%" height="15" fill="rgb(209,217,32)" fg:x="964" fg:w="1"/><text x="77.4317%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1817%" y="549" width="0.0801%" height="15" fill="rgb(243,203,50)" fg:x="964" fg:w="1"/><text x="77.4317%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1817%" y="533" width="0.0801%" height="15" fill="rgb(232,152,27)" fg:x="964" fg:w="1"/><text x="77.4317%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1817%" y="517" width="0.0801%" height="15" fill="rgb(240,34,29)" fg:x="964" fg:w="1"/><text x="77.4317%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1817%" y="501" width="0.0801%" height="15" fill="rgb(215,185,52)" fg:x="964" fg:w="1"/><text x="77.4317%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1817%" y="485" width="0.0801%" height="15" fill="rgb(240,89,49)" fg:x="964" fg:w="1"/><text x="77.4317%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1817%" y="469" width="0.0801%" height="15" fill="rgb(225,12,52)" fg:x="964" fg:w="1"/><text x="77.4317%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.2618%" y="645" width="0.1601%" height="15" fill="rgb(239,128,45)" fg:x="965" fg:w="2"/><text x="77.5118%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.2618%" y="629" width="0.1601%" height="15" fill="rgb(211,78,47)" fg:x="965" fg:w="2"/><text x="77.5118%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.2618%" y="613" width="0.1601%" height="15" fill="rgb(232,31,21)" fg:x="965" fg:w="2"/><text x="77.5118%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.2618%" y="597" width="0.1601%" height="15" fill="rgb(222,168,14)" fg:x="965" fg:w="2"/><text x="77.5118%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.3419%" y="581" width="0.0801%" height="15" fill="rgb(209,128,24)" fg:x="966" fg:w="1"/><text x="77.5919%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.3419%" y="565" width="0.0801%" height="15" fill="rgb(249,35,13)" fg:x="966" fg:w="1"/><text x="77.5919%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.3419%" y="549" width="0.0801%" height="15" fill="rgb(218,7,2)" fg:x="966" fg:w="1"/><text x="77.5919%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.3419%" y="533" width="0.0801%" height="15" fill="rgb(238,107,27)" fg:x="966" fg:w="1"/><text x="77.5919%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.3419%" y="517" width="0.0801%" height="15" fill="rgb(217,88,38)" fg:x="966" fg:w="1"/><text x="77.5919%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3419%" y="501" width="0.0801%" height="15" fill="rgb(230,207,0)" fg:x="966" fg:w="1"/><text x="77.5919%" y="511.50"></text></g><g><title>engine::session::Session::close (11 samples, 0.88%)</title><rect x="76.6213%" y="789" width="0.8807%" height="15" fill="rgb(249,64,54)" fg:x="957" fg:w="11"/><text x="76.8713%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (11 samples, 0.88%)</title><rect x="76.6213%" y="773" width="0.8807%" height="15" fill="rgb(231,7,11)" fg:x="957" fg:w="11"/><text x="76.8713%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (10 samples, 0.80%)</title><rect x="76.7014%" y="757" width="0.8006%" height="15" fill="rgb(205,149,21)" fg:x="958" fg:w="10"/><text x="76.9514%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (10 samples, 0.80%)</title><rect x="76.7014%" y="741" width="0.8006%" height="15" fill="rgb(215,126,34)" fg:x="958" fg:w="10"/><text x="76.9514%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="77.0216%" y="725" width="0.4804%" height="15" fill="rgb(241,132,45)" fg:x="962" fg:w="6"/><text x="77.2716%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="77.2618%" y="709" width="0.2402%" height="15" fill="rgb(252,69,32)" fg:x="965" fg:w="3"/><text x="77.5118%" y="719.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="77.2618%" y="693" width="0.2402%" height="15" fill="rgb(232,204,19)" fg:x="965" fg:w="3"/><text x="77.5118%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.2618%" y="677" width="0.2402%" height="15" fill="rgb(249,15,47)" fg:x="965" fg:w="3"/><text x="77.5118%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.2618%" y="661" width="0.2402%" height="15" fill="rgb(209,227,23)" fg:x="965" fg:w="3"/><text x="77.5118%" y="671.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.4219%" y="645" width="0.0801%" height="15" fill="rgb(248,92,24)" fg:x="967" fg:w="1"/><text x="77.6719%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4219%" y="629" width="0.0801%" height="15" fill="rgb(247,59,2)" fg:x="967" fg:w="1"/><text x="77.6719%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (2 samples, 0.16%)</title><rect x="77.5020%" y="645" width="0.1601%" height="15" fill="rgb(221,30,5)" fg:x="968" fg:w="2"/><text x="77.7520%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (2 samples, 0.16%)</title><rect x="77.5020%" y="629" width="0.1601%" height="15" fill="rgb(208,108,53)" fg:x="968" fg:w="2"/><text x="77.7520%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.5020%" y="613" width="0.1601%" height="15" fill="rgb(211,183,26)" fg:x="968" fg:w="2"/><text x="77.7520%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.5020%" y="597" width="0.1601%" height="15" fill="rgb(232,132,4)" fg:x="968" fg:w="2"/><text x="77.7520%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.5020%" y="581" width="0.1601%" height="15" fill="rgb(253,128,37)" fg:x="968" fg:w="2"/><text x="77.7520%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.5020%" y="565" width="0.1601%" height="15" fill="rgb(221,58,24)" fg:x="968" fg:w="2"/><text x="77.7520%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5821%" y="549" width="0.0801%" height="15" fill="rgb(230,54,45)" fg:x="969" fg:w="1"/><text x="77.8321%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.5821%" y="533" width="0.0801%" height="15" fill="rgb(254,21,18)" fg:x="969" fg:w="1"/><text x="77.8321%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.5821%" y="517" width="0.0801%" height="15" fill="rgb(221,108,0)" fg:x="969" fg:w="1"/><text x="77.8321%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.5821%" y="501" width="0.0801%" height="15" fill="rgb(206,95,1)" fg:x="969" fg:w="1"/><text x="77.8321%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.5821%" y="485" width="0.0801%" height="15" fill="rgb(237,52,5)" fg:x="969" fg:w="1"/><text x="77.8321%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.5821%" y="469" width="0.0801%" height="15" fill="rgb(218,150,34)" fg:x="969" fg:w="1"/><text x="77.8321%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.5821%" y="453" width="0.0801%" height="15" fill="rgb(235,194,28)" fg:x="969" fg:w="1"/><text x="77.8321%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.5821%" y="437" width="0.0801%" height="15" fill="rgb(245,92,18)" fg:x="969" fg:w="1"/><text x="77.8321%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.5821%" y="421" width="0.0801%" height="15" fill="rgb(253,203,53)" fg:x="969" fg:w="1"/><text x="77.8321%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.5821%" y="405" width="0.0801%" height="15" fill="rgb(249,185,47)" fg:x="969" fg:w="1"/><text x="77.8321%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.5821%" y="389" width="0.0801%" height="15" fill="rgb(252,194,52)" fg:x="969" fg:w="1"/><text x="77.8321%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5821%" y="373" width="0.0801%" height="15" fill="rgb(210,53,36)" fg:x="969" fg:w="1"/><text x="77.8321%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="77.6621%" y="533" width="0.0801%" height="15" fill="rgb(237,37,25)" fg:x="970" fg:w="1"/><text x="77.9121%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="77.6621%" y="517" width="0.0801%" height="15" fill="rgb(242,116,27)" fg:x="970" fg:w="1"/><text x="77.9121%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.6621%" y="501" width="0.0801%" height="15" fill="rgb(213,185,26)" fg:x="970" fg:w="1"/><text x="77.9121%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.6621%" y="485" width="0.0801%" height="15" fill="rgb(225,204,8)" fg:x="970" fg:w="1"/><text x="77.9121%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.6621%" y="469" width="0.0801%" height="15" fill="rgb(254,111,37)" fg:x="970" fg:w="1"/><text x="77.9121%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.6621%" y="453" width="0.0801%" height="15" fill="rgb(242,35,9)" fg:x="970" fg:w="1"/><text x="77.9121%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6621%" y="437" width="0.0801%" height="15" fill="rgb(232,138,49)" fg:x="970" fg:w="1"/><text x="77.9121%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.6621%" y="421" width="0.0801%" height="15" fill="rgb(247,56,4)" fg:x="970" fg:w="1"/><text x="77.9121%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6621%" y="405" width="0.0801%" height="15" fill="rgb(226,179,17)" fg:x="970" fg:w="1"/><text x="77.9121%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.6621%" y="389" width="0.0801%" height="15" fill="rgb(216,163,45)" fg:x="970" fg:w="1"/><text x="77.9121%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6621%" y="373" width="0.0801%" height="15" fill="rgb(211,157,3)" fg:x="970" fg:w="1"/><text x="77.9121%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.6621%" y="357" width="0.0801%" height="15" fill="rgb(234,44,20)" fg:x="970" fg:w="1"/><text x="77.9121%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6621%" y="341" width="0.0801%" height="15" fill="rgb(254,138,23)" fg:x="970" fg:w="1"/><text x="77.9121%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="405" width="0.0801%" height="15" fill="rgb(206,119,39)" fg:x="971" fg:w="1"/><text x="77.9922%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7422%" y="389" width="0.0801%" height="15" fill="rgb(231,105,52)" fg:x="971" fg:w="1"/><text x="77.9922%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="373" width="0.0801%" height="15" fill="rgb(250,20,5)" fg:x="971" fg:w="1"/><text x="77.9922%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7422%" y="357" width="0.0801%" height="15" fill="rgb(215,198,30)" fg:x="971" fg:w="1"/><text x="77.9922%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.8223%" y="373" width="0.0801%" height="15" fill="rgb(246,142,8)" fg:x="972" fg:w="1"/><text x="78.0723%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.8223%" y="357" width="0.0801%" height="15" fill="rgb(243,26,38)" fg:x="972" fg:w="1"/><text x="78.0723%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="77.7422%" y="517" width="0.2402%" height="15" fill="rgb(205,133,28)" fg:x="971" fg:w="3"/><text x="77.9922%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="77.7422%" y="501" width="0.2402%" height="15" fill="rgb(212,34,0)" fg:x="971" fg:w="3"/><text x="77.9922%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="77.7422%" y="485" width="0.2402%" height="15" fill="rgb(251,226,22)" fg:x="971" fg:w="3"/><text x="77.9922%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="77.7422%" y="469" width="0.2402%" height="15" fill="rgb(252,119,9)" fg:x="971" fg:w="3"/><text x="77.9922%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="77.7422%" y="453" width="0.2402%" height="15" fill="rgb(213,150,50)" fg:x="971" fg:w="3"/><text x="77.9922%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="77.7422%" y="437" width="0.2402%" height="15" fill="rgb(212,24,39)" fg:x="971" fg:w="3"/><text x="77.9922%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="77.7422%" y="421" width="0.2402%" height="15" fill="rgb(213,46,39)" fg:x="971" fg:w="3"/><text x="77.9922%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8223%" y="405" width="0.1601%" height="15" fill="rgb(239,106,12)" fg:x="972" fg:w="2"/><text x="78.0723%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.8223%" y="389" width="0.1601%" height="15" fill="rgb(249,229,21)" fg:x="972" fg:w="2"/><text x="78.0723%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.9023%" y="373" width="0.0801%" height="15" fill="rgb(212,158,3)" fg:x="973" fg:w="1"/><text x="78.1523%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9023%" y="357" width="0.0801%" height="15" fill="rgb(253,26,48)" fg:x="973" fg:w="1"/><text x="78.1523%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9023%" y="341" width="0.0801%" height="15" fill="rgb(238,178,20)" fg:x="973" fg:w="1"/><text x="78.1523%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.9023%" y="325" width="0.0801%" height="15" fill="rgb(208,86,15)" fg:x="973" fg:w="1"/><text x="78.1523%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9023%" y="309" width="0.0801%" height="15" fill="rgb(239,42,53)" fg:x="973" fg:w="1"/><text x="78.1523%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9023%" y="293" width="0.0801%" height="15" fill="rgb(245,226,8)" fg:x="973" fg:w="1"/><text x="78.1523%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.9023%" y="277" width="0.0801%" height="15" fill="rgb(216,176,32)" fg:x="973" fg:w="1"/><text x="78.1523%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9023%" y="261" width="0.0801%" height="15" fill="rgb(231,186,21)" fg:x="973" fg:w="1"/><text x="78.1523%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9023%" y="245" width="0.0801%" height="15" fill="rgb(205,95,49)" fg:x="973" fg:w="1"/><text x="78.1523%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="77.9023%" y="229" width="0.0801%" height="15" fill="rgb(217,145,8)" fg:x="973" fg:w="1"/><text x="78.1523%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.9023%" y="213" width="0.0801%" height="15" fill="rgb(239,144,48)" fg:x="973" fg:w="1"/><text x="78.1523%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9023%" y="197" width="0.0801%" height="15" fill="rgb(214,189,23)" fg:x="973" fg:w="1"/><text x="78.1523%" y="207.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.40%)</title><rect x="77.6621%" y="645" width="0.4003%" height="15" fill="rgb(229,157,17)" fg:x="970" fg:w="5"/><text x="77.9121%" y="655.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (5 samples, 0.40%)</title><rect x="77.6621%" y="629" width="0.4003%" height="15" fill="rgb(230,5,48)" fg:x="970" fg:w="5"/><text x="77.9121%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="77.6621%" y="613" width="0.4003%" height="15" fill="rgb(224,156,48)" fg:x="970" fg:w="5"/><text x="77.9121%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="77.6621%" y="597" width="0.4003%" height="15" fill="rgb(223,14,29)" fg:x="970" fg:w="5"/><text x="77.9121%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="77.6621%" y="581" width="0.4003%" height="15" fill="rgb(229,96,36)" fg:x="970" fg:w="5"/><text x="77.9121%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="77.6621%" y="565" width="0.4003%" height="15" fill="rgb(231,102,53)" fg:x="970" fg:w="5"/><text x="77.9121%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="77.6621%" y="549" width="0.4003%" height="15" fill="rgb(210,77,38)" fg:x="970" fg:w="5"/><text x="77.9121%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="77.7422%" y="533" width="0.3203%" height="15" fill="rgb(235,131,6)" fg:x="971" fg:w="4"/><text x="77.9922%" y="543.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="77.9824%" y="517" width="0.0801%" height="15" fill="rgb(252,55,38)" fg:x="974" fg:w="1"/><text x="78.2324%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.9824%" y="501" width="0.0801%" height="15" fill="rgb(246,38,14)" fg:x="974" fg:w="1"/><text x="78.2324%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9824%" y="485" width="0.0801%" height="15" fill="rgb(242,27,5)" fg:x="974" fg:w="1"/><text x="78.2324%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.9824%" y="469" width="0.0801%" height="15" fill="rgb(228,65,35)" fg:x="974" fg:w="1"/><text x="78.2324%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9824%" y="453" width="0.0801%" height="15" fill="rgb(245,93,11)" fg:x="974" fg:w="1"/><text x="78.2324%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.9824%" y="437" width="0.0801%" height="15" fill="rgb(213,1,31)" fg:x="974" fg:w="1"/><text x="78.2324%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.9824%" y="421" width="0.0801%" height="15" fill="rgb(237,205,14)" fg:x="974" fg:w="1"/><text x="78.2324%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="78.0624%" y="517" width="0.0801%" height="15" fill="rgb(232,118,45)" fg:x="975" fg:w="1"/><text x="78.3124%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0624%" y="501" width="0.0801%" height="15" fill="rgb(218,5,6)" fg:x="975" fg:w="1"/><text x="78.3124%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="78.1425%" y="485" width="0.0801%" height="15" fill="rgb(251,87,51)" fg:x="976" fg:w="1"/><text x="78.3925%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.1425%" y="469" width="0.0801%" height="15" fill="rgb(207,225,20)" fg:x="976" fg:w="1"/><text x="78.3925%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.1425%" y="453" width="0.0801%" height="15" fill="rgb(222,78,54)" fg:x="976" fg:w="1"/><text x="78.3925%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1425%" y="437" width="0.0801%" height="15" fill="rgb(232,85,16)" fg:x="976" fg:w="1"/><text x="78.3925%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1425%" y="421" width="0.0801%" height="15" fill="rgb(244,25,33)" fg:x="976" fg:w="1"/><text x="78.3925%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1425%" y="405" width="0.0801%" height="15" fill="rgb(233,24,36)" fg:x="976" fg:w="1"/><text x="78.3925%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1425%" y="389" width="0.0801%" height="15" fill="rgb(253,49,54)" fg:x="976" fg:w="1"/><text x="78.3925%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1425%" y="373" width="0.0801%" height="15" fill="rgb(245,12,22)" fg:x="976" fg:w="1"/><text x="78.3925%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1425%" y="357" width="0.0801%" height="15" fill="rgb(253,141,28)" fg:x="976" fg:w="1"/><text x="78.3925%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.1425%" y="341" width="0.0801%" height="15" fill="rgb(225,207,27)" fg:x="976" fg:w="1"/><text x="78.3925%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.1425%" y="325" width="0.0801%" height="15" fill="rgb(220,84,2)" fg:x="976" fg:w="1"/><text x="78.3925%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.1425%" y="309" width="0.0801%" height="15" fill="rgb(224,37,37)" fg:x="976" fg:w="1"/><text x="78.3925%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="78.1425%" y="293" width="0.0801%" height="15" fill="rgb(220,143,18)" fg:x="976" fg:w="1"/><text x="78.3925%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.1425%" y="277" width="0.0801%" height="15" fill="rgb(210,88,33)" fg:x="976" fg:w="1"/><text x="78.3925%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2226%" y="341" width="0.0801%" height="15" fill="rgb(219,87,51)" fg:x="977" fg:w="1"/><text x="78.4726%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="78.2226%" y="485" width="0.1601%" height="15" fill="rgb(211,7,35)" fg:x="977" fg:w="2"/><text x="78.4726%" y="495.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="78.2226%" y="469" width="0.1601%" height="15" fill="rgb(232,77,2)" fg:x="977" fg:w="2"/><text x="78.4726%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="78.2226%" y="453" width="0.1601%" height="15" fill="rgb(249,94,25)" fg:x="977" fg:w="2"/><text x="78.4726%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.2226%" y="437" width="0.1601%" height="15" fill="rgb(215,112,2)" fg:x="977" fg:w="2"/><text x="78.4726%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.2226%" y="421" width="0.1601%" height="15" fill="rgb(226,115,48)" fg:x="977" fg:w="2"/><text x="78.4726%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.2226%" y="405" width="0.1601%" height="15" fill="rgb(249,196,10)" fg:x="977" fg:w="2"/><text x="78.4726%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.2226%" y="389" width="0.1601%" height="15" fill="rgb(237,109,14)" fg:x="977" fg:w="2"/><text x="78.4726%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.2226%" y="373" width="0.1601%" height="15" fill="rgb(217,103,53)" fg:x="977" fg:w="2"/><text x="78.4726%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.2226%" y="357" width="0.1601%" height="15" fill="rgb(244,137,9)" fg:x="977" fg:w="2"/><text x="78.4726%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.3026%" y="341" width="0.0801%" height="15" fill="rgb(227,201,3)" fg:x="978" fg:w="1"/><text x="78.5526%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3026%" y="325" width="0.0801%" height="15" fill="rgb(243,94,6)" fg:x="978" fg:w="1"/><text x="78.5526%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3026%" y="309" width="0.0801%" height="15" fill="rgb(235,118,5)" fg:x="978" fg:w="1"/><text x="78.5526%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3026%" y="293" width="0.0801%" height="15" fill="rgb(247,10,30)" fg:x="978" fg:w="1"/><text x="78.5526%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.3026%" y="277" width="0.0801%" height="15" fill="rgb(205,26,28)" fg:x="978" fg:w="1"/><text x="78.5526%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.3827%" y="357" width="0.0801%" height="15" fill="rgb(206,99,35)" fg:x="979" fg:w="1"/><text x="78.6327%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.3827%" y="341" width="0.0801%" height="15" fill="rgb(238,130,40)" fg:x="979" fg:w="1"/><text x="78.6327%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="78.3827%" y="325" width="0.0801%" height="15" fill="rgb(224,126,31)" fg:x="979" fg:w="1"/><text x="78.6327%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.3827%" y="309" width="0.0801%" height="15" fill="rgb(254,105,17)" fg:x="979" fg:w="1"/><text x="78.6327%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.3827%" y="293" width="0.0801%" height="15" fill="rgb(216,87,36)" fg:x="979" fg:w="1"/><text x="78.6327%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.3827%" y="277" width="0.0801%" height="15" fill="rgb(240,21,12)" fg:x="979" fg:w="1"/><text x="78.6327%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.3827%" y="261" width="0.0801%" height="15" fill="rgb(245,192,34)" fg:x="979" fg:w="1"/><text x="78.6327%" y="271.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="78.3827%" y="485" width="0.1601%" height="15" fill="rgb(226,100,49)" fg:x="979" fg:w="2"/><text x="78.6327%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="78.3827%" y="469" width="0.1601%" height="15" fill="rgb(245,188,27)" fg:x="979" fg:w="2"/><text x="78.6327%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="78.3827%" y="453" width="0.1601%" height="15" fill="rgb(212,170,8)" fg:x="979" fg:w="2"/><text x="78.6327%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="78.3827%" y="437" width="0.1601%" height="15" fill="rgb(217,113,29)" fg:x="979" fg:w="2"/><text x="78.6327%" y="447.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="78.3827%" y="421" width="0.1601%" height="15" fill="rgb(237,30,3)" fg:x="979" fg:w="2"/><text x="78.6327%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="78.3827%" y="405" width="0.1601%" height="15" fill="rgb(227,19,28)" fg:x="979" fg:w="2"/><text x="78.6327%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="78.3827%" y="389" width="0.1601%" height="15" fill="rgb(239,172,45)" fg:x="979" fg:w="2"/><text x="78.6327%" y="399.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="78.3827%" y="373" width="0.1601%" height="15" fill="rgb(254,55,39)" fg:x="979" fg:w="2"/><text x="78.6327%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.4628%" y="357" width="0.0801%" height="15" fill="rgb(249,208,12)" fg:x="980" fg:w="1"/><text x="78.7128%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="78.4628%" y="341" width="0.0801%" height="15" fill="rgb(240,52,13)" fg:x="980" fg:w="1"/><text x="78.7128%" y="351.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="78.4628%" y="325" width="0.0801%" height="15" fill="rgb(252,149,13)" fg:x="980" fg:w="1"/><text x="78.7128%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="78.4628%" y="309" width="0.0801%" height="15" fill="rgb(232,81,48)" fg:x="980" fg:w="1"/><text x="78.7128%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.5428%" y="437" width="0.0801%" height="15" fill="rgb(222,144,2)" fg:x="981" fg:w="1"/><text x="78.7928%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.5428%" y="421" width="0.0801%" height="15" fill="rgb(216,81,32)" fg:x="981" fg:w="1"/><text x="78.7928%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.5428%" y="405" width="0.0801%" height="15" fill="rgb(244,78,51)" fg:x="981" fg:w="1"/><text x="78.7928%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.5428%" y="389" width="0.0801%" height="15" fill="rgb(217,66,21)" fg:x="981" fg:w="1"/><text x="78.7928%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="78.7030%" y="405" width="0.1601%" height="15" fill="rgb(247,101,42)" fg:x="983" fg:w="2"/><text x="78.9530%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="78.7030%" y="389" width="0.1601%" height="15" fill="rgb(227,81,39)" fg:x="983" fg:w="2"/><text x="78.9530%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="78.7030%" y="373" width="0.1601%" height="15" fill="rgb(220,223,44)" fg:x="983" fg:w="2"/><text x="78.9530%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="78.7030%" y="357" width="0.1601%" height="15" fill="rgb(205,218,2)" fg:x="983" fg:w="2"/><text x="78.9530%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="78.7030%" y="341" width="0.1601%" height="15" fill="rgb(212,207,28)" fg:x="983" fg:w="2"/><text x="78.9530%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="78.7830%" y="325" width="0.0801%" height="15" fill="rgb(224,12,41)" fg:x="984" fg:w="1"/><text x="79.0330%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="78.7830%" y="309" width="0.0801%" height="15" fill="rgb(216,118,12)" fg:x="984" fg:w="1"/><text x="79.0330%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.8631%" y="389" width="0.0801%" height="15" fill="rgb(252,97,46)" fg:x="985" fg:w="1"/><text x="79.1131%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="78.9432%" y="357" width="0.0801%" height="15" fill="rgb(244,206,19)" fg:x="986" fg:w="1"/><text x="79.1932%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.9432%" y="341" width="0.0801%" height="15" fill="rgb(231,84,31)" fg:x="986" fg:w="1"/><text x="79.1932%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.04%)</title><rect x="79.2634%" y="341" width="1.0408%" height="15" fill="rgb(244,133,0)" fg:x="990" fg:w="13"/><text x="79.5134%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="79.3435%" y="325" width="0.9608%" height="15" fill="rgb(223,15,50)" fg:x="991" fg:w="12"/><text x="79.5935%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="80.3042%" y="341" width="0.1601%" height="15" fill="rgb(250,118,49)" fg:x="1003" fg:w="2"/><text x="80.5542%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="80.3843%" y="325" width="0.0801%" height="15" fill="rgb(248,25,38)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="80.4644%" y="277" width="0.0801%" height="15" fill="rgb(215,70,14)" fg:x="1005" fg:w="1"/><text x="80.7144%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="80.4644%" y="261" width="0.0801%" height="15" fill="rgb(215,28,15)" fg:x="1005" fg:w="1"/><text x="80.7144%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="80.4644%" y="245" width="0.0801%" height="15" fill="rgb(243,6,28)" fg:x="1005" fg:w="1"/><text x="80.7144%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.5444%" y="261" width="0.0801%" height="15" fill="rgb(222,130,1)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.5444%" y="245" width="0.0801%" height="15" fill="rgb(236,166,44)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5444%" y="229" width="0.0801%" height="15" fill="rgb(221,108,14)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.5444%" y="213" width="0.0801%" height="15" fill="rgb(252,3,45)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (51 samples, 4.08%)</title><rect x="80.5444%" y="277" width="4.0833%" height="15" fill="rgb(237,68,30)" fg:x="1006" fg:w="51"/><text x="80.7944%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (50 samples, 4.00%)</title><rect x="80.6245%" y="261" width="4.0032%" height="15" fill="rgb(211,79,22)" fg:x="1007" fg:w="50"/><text x="80.8745%" y="271.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (50 samples, 4.00%)</title><rect x="80.6245%" y="245" width="4.0032%" height="15" fill="rgb(252,185,21)" fg:x="1007" fg:w="50"/><text x="80.8745%" y="255.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="84.6277%" y="277" width="0.0801%" height="15" fill="rgb(225,189,26)" fg:x="1057" fg:w="1"/><text x="84.8777%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 4.32%)</title><rect x="80.4644%" y="325" width="4.3235%" height="15" fill="rgb(241,30,40)" fg:x="1005" fg:w="54"/><text x="80.7144%" y="335.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.32%)</title><rect x="80.4644%" y="309" width="4.3235%" height="15" fill="rgb(235,215,44)" fg:x="1005" fg:w="54"/><text x="80.7144%" y="319.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.32%)</title><rect x="80.4644%" y="293" width="4.3235%" height="15" fill="rgb(205,8,29)" fg:x="1005" fg:w="54"/><text x="80.7144%" y="303.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="84.7078%" y="277" width="0.0801%" height="15" fill="rgb(241,137,42)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="84.8679%" y="309" width="0.2402%" height="15" fill="rgb(237,155,2)" fg:x="1060" fg:w="3"/><text x="85.1179%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.9480%" y="293" width="0.1601%" height="15" fill="rgb(245,29,42)" fg:x="1061" fg:w="2"/><text x="85.1980%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.0280%" y="277" width="0.0801%" height="15" fill="rgb(234,101,35)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.0280%" y="261" width="0.0801%" height="15" fill="rgb(228,64,37)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="85.1081%" y="309" width="0.2402%" height="15" fill="rgb(217,214,36)" fg:x="1063" fg:w="3"/><text x="85.3581%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="84.7878%" y="325" width="0.6405%" height="15" fill="rgb(243,70,3)" fg:x="1059" fg:w="8"/><text x="85.0378%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.3483%" y="309" width="0.0801%" height="15" fill="rgb(253,158,52)" fg:x="1066" fg:w="1"/><text x="85.5983%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3483%" y="293" width="0.0801%" height="15" fill="rgb(234,111,54)" fg:x="1066" fg:w="1"/><text x="85.5983%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (63 samples, 5.04%)</title><rect x="80.4644%" y="341" width="5.0440%" height="15" fill="rgb(217,70,32)" fg:x="1005" fg:w="63"/><text x="80.7144%" y="351.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="85.4283%" y="325" width="0.0801%" height="15" fill="rgb(234,18,33)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="85.4283%" y="309" width="0.0801%" height="15" fill="rgb(234,12,49)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.4283%" y="293" width="0.0801%" height="15" fill="rgb(236,10,21)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4283%" y="277" width="0.0801%" height="15" fill="rgb(248,182,45)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (82 samples, 6.57%)</title><rect x="79.0232%" y="357" width="6.5653%" height="15" fill="rgb(217,95,36)" fg:x="987" fg:w="82"/><text x="79.2732%" y="367.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="85.5084%" y="341" width="0.0801%" height="15" fill="rgb(212,110,31)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="85.5084%" y="325" width="0.0801%" height="15" fill="rgb(206,32,53)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="85.5084%" y="309" width="0.0801%" height="15" fill="rgb(246,141,37)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.5084%" y="293" width="0.0801%" height="15" fill="rgb(219,16,7)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.5084%" y="277" width="0.0801%" height="15" fill="rgb(230,205,45)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5084%" y="261" width="0.0801%" height="15" fill="rgb(231,43,49)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="85.5885%" y="325" width="0.1601%" height="15" fill="rgb(212,106,34)" fg:x="1069" fg:w="2"/><text x="85.8385%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="85.6685%" y="309" width="0.0801%" height="15" fill="rgb(206,83,17)" fg:x="1070" fg:w="1"/><text x="85.9185%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.6685%" y="293" width="0.0801%" height="15" fill="rgb(244,154,49)" fg:x="1070" fg:w="1"/><text x="85.9185%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.6685%" y="277" width="0.0801%" height="15" fill="rgb(244,149,49)" fg:x="1070" fg:w="1"/><text x="85.9185%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.6685%" y="261" width="0.0801%" height="15" fill="rgb(227,134,18)" fg:x="1070" fg:w="1"/><text x="85.9185%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="85.5885%" y="357" width="0.2402%" height="15" fill="rgb(237,116,36)" fg:x="1069" fg:w="3"/><text x="85.8385%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="85.5885%" y="341" width="0.2402%" height="15" fill="rgb(205,129,40)" fg:x="1069" fg:w="3"/><text x="85.8385%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.7486%" y="325" width="0.0801%" height="15" fill="rgb(236,178,4)" fg:x="1071" fg:w="1"/><text x="85.9986%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="85.7486%" y="309" width="0.0801%" height="15" fill="rgb(251,76,53)" fg:x="1071" fg:w="1"/><text x="85.9986%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="85.9087%" y="325" width="0.0801%" height="15" fill="rgb(242,92,40)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="85.9087%" y="309" width="0.0801%" height="15" fill="rgb(209,45,30)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="85.9087%" y="293" width="0.0801%" height="15" fill="rgb(218,157,36)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (90 samples, 7.21%)</title><rect x="78.8631%" y="405" width="7.2058%" height="15" fill="rgb(222,186,16)" fg:x="985" fg:w="90"/><text x="79.1131%" y="415.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (89 samples, 7.13%)</title><rect x="78.9432%" y="389" width="7.1257%" height="15" fill="rgb(254,72,35)" fg:x="986" fg:w="89"/><text x="79.1932%" y="399.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (89 samples, 7.13%)</title><rect x="78.9432%" y="373" width="7.1257%" height="15" fill="rgb(224,25,35)" fg:x="986" fg:w="89"/><text x="79.1932%" y="383.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="85.8287%" y="357" width="0.2402%" height="15" fill="rgb(206,135,52)" fg:x="1072" fg:w="3"/><text x="86.0787%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="85.9087%" y="341" width="0.1601%" height="15" fill="rgb(229,174,47)" fg:x="1073" fg:w="2"/><text x="86.1587%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="85.9888%" y="325" width="0.0801%" height="15" fill="rgb(242,184,21)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="85.9888%" y="309" width="0.0801%" height="15" fill="rgb(213,22,45)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.9888%" y="293" width="0.0801%" height="15" fill="rgb(237,81,54)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.9888%" y="277" width="0.0801%" height="15" fill="rgb(248,177,18)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9888%" y="261" width="0.0801%" height="15" fill="rgb(254,31,16)" fg:x="1074" fg:w="1"/><text x="86.2388%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="86.0689%" y="405" width="0.0801%" height="15" fill="rgb(235,20,31)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="86.0689%" y="389" width="0.0801%" height="15" fill="rgb(240,56,43)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.0689%" y="373" width="0.0801%" height="15" fill="rgb(237,197,51)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="86.0689%" y="357" width="0.0801%" height="15" fill="rgb(241,162,44)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.0689%" y="341" width="0.0801%" height="15" fill="rgb(224,23,20)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.0689%" y="325" width="0.0801%" height="15" fill="rgb(250,109,34)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.2290%" y="325" width="0.0801%" height="15" fill="rgb(214,175,50)" fg:x="1077" fg:w="1"/><text x="86.4790%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2290%" y="309" width="0.0801%" height="15" fill="rgb(213,182,5)" fg:x="1077" fg:w="1"/><text x="86.4790%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.2290%" y="293" width="0.0801%" height="15" fill="rgb(209,199,19)" fg:x="1077" fg:w="1"/><text x="86.4790%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="86.1489%" y="341" width="0.2402%" height="15" fill="rgb(236,224,42)" fg:x="1076" fg:w="3"/><text x="86.3989%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.3090%" y="325" width="0.0801%" height="15" fill="rgb(246,226,29)" fg:x="1078" fg:w="1"/><text x="86.5590%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="86.3090%" y="309" width="0.0801%" height="15" fill="rgb(227,223,11)" fg:x="1078" fg:w="1"/><text x="86.5590%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (97 samples, 7.77%)</title><rect x="78.7030%" y="421" width="7.7662%" height="15" fill="rgb(219,7,51)" fg:x="983" fg:w="97"/><text x="78.9530%" y="431.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="86.1489%" y="405" width="0.3203%" height="15" fill="rgb(245,167,10)" fg:x="1076" fg:w="4"/><text x="86.3989%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="86.1489%" y="389" width="0.3203%" height="15" fill="rgb(237,224,16)" fg:x="1076" fg:w="4"/><text x="86.3989%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="86.1489%" y="373" width="0.3203%" height="15" fill="rgb(226,132,13)" fg:x="1076" fg:w="4"/><text x="86.3989%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="86.1489%" y="357" width="0.3203%" height="15" fill="rgb(214,140,3)" fg:x="1076" fg:w="4"/><text x="86.3989%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="86.3891%" y="341" width="0.0801%" height="15" fill="rgb(221,177,4)" fg:x="1079" fg:w="1"/><text x="86.6391%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.3891%" y="325" width="0.0801%" height="15" fill="rgb(238,139,3)" fg:x="1079" fg:w="1"/><text x="86.6391%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3891%" y="309" width="0.0801%" height="15" fill="rgb(216,17,39)" fg:x="1079" fg:w="1"/><text x="86.6391%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.5492%" y="325" width="0.0801%" height="15" fill="rgb(238,120,9)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="86.5492%" y="357" width="0.1601%" height="15" fill="rgb(244,92,53)" fg:x="1081" fg:w="2"/><text x="86.7992%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="86.5492%" y="341" width="0.1601%" height="15" fill="rgb(224,148,33)" fg:x="1081" fg:w="2"/><text x="86.7992%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.6293%" y="325" width="0.0801%" height="15" fill="rgb(243,6,36)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.6293%" y="309" width="0.0801%" height="15" fill="rgb(230,102,11)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.6293%" y="293" width="0.0801%" height="15" fill="rgb(234,148,36)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="86.7094%" y="341" width="0.8006%" height="15" fill="rgb(251,153,25)" fg:x="1083" fg:w="10"/><text x="86.9594%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="86.7094%" y="325" width="0.8006%" height="15" fill="rgb(215,129,8)" fg:x="1083" fg:w="10"/><text x="86.9594%" y="335.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="87.2698%" y="309" width="0.2402%" height="15" fill="rgb(224,128,35)" fg:x="1090" fg:w="3"/><text x="87.5198%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="87.5100%" y="309" width="0.2402%" height="15" fill="rgb(237,56,52)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="87.5100%" y="293" width="0.2402%" height="15" fill="rgb(234,213,19)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="87.5100%" y="277" width="0.2402%" height="15" fill="rgb(252,82,23)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="87.5100%" y="261" width="0.2402%" height="15" fill="rgb(254,201,21)" fg:x="1093" fg:w="3"/><text x="87.7600%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="87.7502%" y="309" width="0.4804%" height="15" fill="rgb(250,186,11)" fg:x="1096" fg:w="6"/><text x="88.0002%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="87.8303%" y="293" width="0.4003%" height="15" fill="rgb(211,174,5)" fg:x="1097" fg:w="5"/><text x="88.0803%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="87.9103%" y="277" width="0.3203%" height="15" fill="rgb(214,121,10)" fg:x="1098" fg:w="4"/><text x="88.1603%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="87.9103%" y="261" width="0.3203%" height="15" fill="rgb(241,66,2)" fg:x="1098" fg:w="4"/><text x="88.1603%" y="271.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="87.9103%" y="245" width="0.3203%" height="15" fill="rgb(220,167,19)" fg:x="1098" fg:w="4"/><text x="88.1603%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="88.2306%" y="309" width="0.0801%" height="15" fill="rgb(231,54,50)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="88.2306%" y="293" width="0.0801%" height="15" fill="rgb(239,217,53)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="88.2306%" y="277" width="0.0801%" height="15" fill="rgb(248,8,0)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.88%)</title><rect x="87.5100%" y="341" width="0.8807%" height="15" fill="rgb(229,118,37)" fg:x="1093" fg:w="11"/><text x="87.7600%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.88%)</title><rect x="87.5100%" y="325" width="0.8807%" height="15" fill="rgb(253,223,43)" fg:x="1093" fg:w="11"/><text x="87.7600%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="88.3106%" y="309" width="0.0801%" height="15" fill="rgb(211,77,36)" fg:x="1103" fg:w="1"/><text x="88.5606%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="88.3907%" y="277" width="0.0801%" height="15" fill="rgb(219,3,53)" fg:x="1104" fg:w="1"/><text x="88.6407%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.1914%" y="229" width="0.0801%" height="15" fill="rgb(244,45,42)" fg:x="1114" fg:w="1"/><text x="89.4414%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.2714%" y="229" width="0.0801%" height="15" fill="rgb(225,95,27)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="89.3515%" y="229" width="0.1601%" height="15" fill="rgb(207,74,8)" fg:x="1116" fg:w="2"/><text x="89.6015%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.4315%" y="213" width="0.0801%" height="15" fill="rgb(243,63,36)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.4315%" y="197" width="0.0801%" height="15" fill="rgb(211,180,12)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.4315%" y="181" width="0.0801%" height="15" fill="rgb(254,166,49)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="89.5116%" y="229" width="0.1601%" height="15" fill="rgb(205,19,0)" fg:x="1118" fg:w="2"/><text x="89.7616%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.9119%" y="197" width="0.0801%" height="15" fill="rgb(224,172,32)" fg:x="1123" fg:w="1"/><text x="90.1619%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.72%)</title><rect x="89.6717%" y="229" width="0.7206%" height="15" fill="rgb(254,136,30)" fg:x="1120" fg:w="9"/><text x="89.9217%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="89.8319%" y="213" width="0.5604%" height="15" fill="rgb(246,19,35)" fg:x="1122" fg:w="7"/><text x="90.0819%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="89.9920%" y="197" width="0.4003%" height="15" fill="rgb(219,24,36)" fg:x="1124" fg:w="5"/><text x="90.2420%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="90.2322%" y="181" width="0.1601%" height="15" fill="rgb(251,55,1)" fg:x="1127" fg:w="2"/><text x="90.4822%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.60%)</title><rect x="90.3923%" y="229" width="3.6029%" height="15" fill="rgb(218,117,39)" fg:x="1129" fg:w="45"/><text x="90.6423%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (45 samples, 3.60%)</title><rect x="90.3923%" y="213" width="3.6029%" height="15" fill="rgb(248,169,11)" fg:x="1129" fg:w="45"/><text x="90.6423%" y="223.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.60%)</title><rect x="90.3923%" y="197" width="3.6029%" height="15" fill="rgb(244,40,44)" fg:x="1129" fg:w="45"/><text x="90.6423%" y="207.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="93.9952%" y="229" width="0.3203%" height="15" fill="rgb(234,62,37)" fg:x="1174" fg:w="4"/><text x="94.2452%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.2354%" y="213" width="0.0801%" height="15" fill="rgb(207,117,42)" fg:x="1177" fg:w="1"/><text x="94.4854%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 6.16%)</title><rect x="88.3907%" y="325" width="6.1649%" height="15" fill="rgb(213,43,2)" fg:x="1104" fg:w="77"/><text x="88.6407%" y="335.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.16%)</title><rect x="88.3907%" y="309" width="6.1649%" height="15" fill="rgb(244,202,51)" fg:x="1104" fg:w="77"/><text x="88.6407%" y="319.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.16%)</title><rect x="88.3907%" y="293" width="6.1649%" height="15" fill="rgb(253,174,46)" fg:x="1104" fg:w="77"/><text x="88.6407%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (76 samples, 6.08%)</title><rect x="88.4708%" y="277" width="6.0849%" height="15" fill="rgb(251,23,1)" fg:x="1105" fg:w="76"/><text x="88.7208%" y="287.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (76 samples, 6.08%)</title><rect x="88.4708%" y="261" width="6.0849%" height="15" fill="rgb(253,26,1)" fg:x="1105" fg:w="76"/><text x="88.7208%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 6.00%)</title><rect x="88.5508%" y="245" width="6.0048%" height="15" fill="rgb(216,89,31)" fg:x="1106" fg:w="75"/><text x="88.8008%" y="255.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="94.3155%" y="229" width="0.2402%" height="15" fill="rgb(209,109,5)" fg:x="1178" fg:w="3"/><text x="94.5655%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.3955%" y="213" width="0.1601%" height="15" fill="rgb(229,63,13)" fg:x="1179" fg:w="2"/><text x="94.6455%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.3955%" y="197" width="0.1601%" height="15" fill="rgb(238,137,54)" fg:x="1179" fg:w="2"/><text x="94.6455%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="94.4756%" y="181" width="0.0801%" height="15" fill="rgb(228,1,9)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="94.4756%" y="165" width="0.0801%" height="15" fill="rgb(249,120,48)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5556%" y="309" width="0.0801%" height="15" fill="rgb(209,72,36)" fg:x="1181" fg:w="1"/><text x="94.8056%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.6357%" y="309" width="0.0801%" height="15" fill="rgb(247,98,49)" fg:x="1182" fg:w="1"/><text x="94.8857%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6357%" y="293" width="0.0801%" height="15" fill="rgb(233,75,36)" fg:x="1182" fg:w="1"/><text x="94.8857%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.0360%" y="293" width="0.1601%" height="15" fill="rgb(225,14,24)" fg:x="1187" fg:w="2"/><text x="95.2860%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.0360%" y="277" width="0.1601%" height="15" fill="rgb(237,193,20)" fg:x="1187" fg:w="2"/><text x="95.2860%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="95.0360%" y="261" width="0.1601%" height="15" fill="rgb(239,122,19)" fg:x="1187" fg:w="2"/><text x="95.2860%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="94.7158%" y="309" width="0.5604%" height="15" fill="rgb(231,220,10)" fg:x="1183" fg:w="7"/><text x="94.9658%" y="319.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="95.1962%" y="293" width="0.0801%" height="15" fill="rgb(220,66,15)" fg:x="1189" fg:w="1"/><text x="95.4462%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="95.2762%" y="309" width="0.2402%" height="15" fill="rgb(215,171,52)" fg:x="1190" fg:w="3"/><text x="95.5262%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (111 samples, 8.89%)</title><rect x="86.7094%" y="357" width="8.8871%" height="15" fill="rgb(241,169,50)" fg:x="1083" fg:w="111"/><text x="86.9594%" y="367.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (90 samples, 7.21%)</title><rect x="88.3907%" y="341" width="7.2058%" height="15" fill="rgb(236,189,0)" fg:x="1104" fg:w="90"/><text x="88.6407%" y="351.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="94.5556%" y="325" width="1.0408%" height="15" fill="rgb(217,147,20)" fg:x="1181" fg:w="13"/><text x="94.8056%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.5164%" y="309" width="0.0801%" height="15" fill="rgb(206,188,39)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.6765%" y="325" width="0.0801%" height="15" fill="rgb(227,118,25)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.6765%" y="309" width="0.0801%" height="15" fill="rgb(248,171,40)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.6765%" y="293" width="0.0801%" height="15" fill="rgb(251,90,54)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="95.7566%" y="325" width="0.0801%" height="15" fill="rgb(234,11,46)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="95.5965%" y="357" width="0.4804%" height="15" fill="rgb(229,134,13)" fg:x="1194" fg:w="6"/><text x="95.8465%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="95.5965%" y="341" width="0.4804%" height="15" fill="rgb(223,129,3)" fg:x="1194" fg:w="6"/><text x="95.8465%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.8367%" y="325" width="0.2402%" height="15" fill="rgb(221,124,13)" fg:x="1197" fg:w="3"/><text x="96.0867%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (122 samples, 9.77%)</title><rect x="86.4692%" y="405" width="9.7678%" height="15" fill="rgb(234,3,18)" fg:x="1080" fg:w="122"/><text x="86.7192%" y="415.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (122 samples, 9.77%)</title><rect x="86.4692%" y="389" width="9.7678%" height="15" fill="rgb(249,199,20)" fg:x="1080" fg:w="122"/><text x="86.7192%" y="399.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (122 samples, 9.77%)</title><rect x="86.4692%" y="373" width="9.7678%" height="15" fill="rgb(224,134,6)" fg:x="1080" fg:w="122"/><text x="86.7192%" y="383.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.0769%" y="357" width="0.1601%" height="15" fill="rgb(254,83,26)" fg:x="1200" fg:w="2"/><text x="96.3269%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.0769%" y="341" width="0.1601%" height="15" fill="rgb(217,88,9)" fg:x="1200" fg:w="2"/><text x="96.3269%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="96.0769%" y="325" width="0.1601%" height="15" fill="rgb(225,73,2)" fg:x="1200" fg:w="2"/><text x="96.3269%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="96.0769%" y="309" width="0.1601%" height="15" fill="rgb(226,44,39)" fg:x="1200" fg:w="2"/><text x="96.3269%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.1569%" y="293" width="0.0801%" height="15" fill="rgb(228,53,17)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1569%" y="277" width="0.0801%" height="15" fill="rgb(212,27,27)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.1569%" y="261" width="0.0801%" height="15" fill="rgb(241,50,6)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3971%" y="341" width="0.0801%" height="15" fill="rgb(225,28,51)" fg:x="1204" fg:w="1"/><text x="96.6471%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.3971%" y="325" width="0.0801%" height="15" fill="rgb(215,33,16)" fg:x="1204" fg:w="1"/><text x="96.6471%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="96.2370%" y="405" width="0.4003%" height="15" fill="rgb(243,40,39)" fg:x="1202" fg:w="5"/><text x="96.4870%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="96.2370%" y="389" width="0.4003%" height="15" fill="rgb(225,11,42)" fg:x="1202" fg:w="5"/><text x="96.4870%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="96.2370%" y="373" width="0.4003%" height="15" fill="rgb(241,220,38)" fg:x="1202" fg:w="5"/><text x="96.4870%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (5 samples, 0.40%)</title><rect x="96.2370%" y="357" width="0.4003%" height="15" fill="rgb(244,52,35)" fg:x="1202" fg:w="5"/><text x="96.4870%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="96.4772%" y="341" width="0.1601%" height="15" fill="rgb(246,42,46)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="96.9576%" y="309" width="0.1601%" height="15" fill="rgb(205,184,13)" fg:x="1211" fg:w="2"/><text x="97.2076%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.9576%" y="293" width="0.1601%" height="15" fill="rgb(209,48,36)" fg:x="1211" fg:w="2"/><text x="97.2076%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.0376%" y="277" width="0.0801%" height="15" fill="rgb(244,34,51)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1177%" y="309" width="0.0801%" height="15" fill="rgb(221,107,33)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="97.1978%" y="309" width="0.1601%" height="15" fill="rgb(224,203,12)" fg:x="1214" fg:w="2"/><text x="97.4478%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="96.8775%" y="325" width="0.5604%" height="15" fill="rgb(230,215,18)" fg:x="1210" fg:w="7"/><text x="97.1275%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="97.3579%" y="309" width="0.0801%" height="15" fill="rgb(206,185,35)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (138 samples, 11.05%)</title><rect x="86.4692%" y="421" width="11.0488%" height="15" fill="rgb(228,140,34)" fg:x="1080" fg:w="138"/><text x="86.7192%" y="431.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::is_match_at (11 samples, 0.88%)</title><rect x="96.6373%" y="405" width="0.8807%" height="15" fill="rgb(208,93,13)" fg:x="1207" fg:w="11"/><text x="96.8873%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="96.6373%" y="389" width="0.8807%" height="15" fill="rgb(221,193,39)" fg:x="1207" fg:w="11"/><text x="96.8873%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="96.6373%" y="373" width="0.8807%" height="15" fill="rgb(241,132,34)" fg:x="1207" fg:w="11"/><text x="96.8873%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="96.6373%" y="357" width="0.8807%" height="15" fill="rgb(221,141,10)" fg:x="1207" fg:w="11"/><text x="96.8873%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="96.8775%" y="341" width="0.6405%" height="15" fill="rgb(226,90,31)" fg:x="1210" fg:w="8"/><text x="97.1275%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.4380%" y="325" width="0.0801%" height="15" fill="rgb(243,75,5)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.4380%" y="309" width="0.0801%" height="15" fill="rgb(227,156,21)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4380%" y="293" width="0.0801%" height="15" fill="rgb(250,195,8)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4380%" y="277" width="0.0801%" height="15" fill="rgb(220,134,5)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5180%" y="341" width="0.0801%" height="15" fill="rgb(246,106,34)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.5981%" y="341" width="0.0801%" height="15" fill="rgb(205,1,4)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.5981%" y="325" width="0.0801%" height="15" fill="rgb(224,151,29)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="97.5981%" y="309" width="0.0801%" height="15" fill="rgb(251,196,0)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.5981%" y="293" width="0.0801%" height="15" fill="rgb(212,127,0)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.5981%" y="277" width="0.0801%" height="15" fill="rgb(236,71,53)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.5981%" y="261" width="0.0801%" height="15" fill="rgb(227,99,0)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5981%" y="245" width="0.0801%" height="15" fill="rgb(239,89,21)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.5981%" y="229" width="0.0801%" height="15" fill="rgb(243,122,19)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="97.6781%" y="341" width="0.0801%" height="15" fill="rgb(229,192,45)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6781%" y="325" width="0.0801%" height="15" fill="rgb(235,165,35)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.7582%" y="309" width="0.0801%" height="15" fill="rgb(253,202,0)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="97.7582%" y="325" width="0.1601%" height="15" fill="rgb(235,51,20)" fg:x="1221" fg:w="2"/><text x="98.0082%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="97.8383%" y="309" width="0.0801%" height="15" fill="rgb(218,95,46)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.9183%" y="309" width="0.0801%" height="15" fill="rgb(212,81,10)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.9183%" y="293" width="0.0801%" height="15" fill="rgb(240,59,0)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="98.0785%" y="293" width="0.0801%" height="15" fill="rgb(212,191,42)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.0785%" y="277" width="0.0801%" height="15" fill="rgb(233,140,3)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="97.9183%" y="325" width="0.3203%" height="15" fill="rgb(215,69,23)" fg:x="1223" fg:w="4"/><text x="98.1683%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="97.9984%" y="309" width="0.2402%" height="15" fill="rgb(240,202,20)" fg:x="1224" fg:w="3"/><text x="98.2484%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="98.1585%" y="293" width="0.0801%" height="15" fill="rgb(209,146,50)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="97.7582%" y="341" width="0.5604%" height="15" fill="rgb(253,102,54)" fg:x="1221" fg:w="7"/><text x="98.0082%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="98.2386%" y="325" width="0.0801%" height="15" fill="rgb(250,173,47)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="98.2386%" y="309" width="0.0801%" height="15" fill="rgb(232,142,7)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="98.2386%" y="293" width="0.0801%" height="15" fill="rgb(230,157,47)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="98.3187%" y="341" width="0.0801%" height="15" fill="rgb(214,177,35)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="98.3187%" y="325" width="0.0801%" height="15" fill="rgb(234,119,46)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="98.3187%" y="309" width="0.0801%" height="15" fill="rgb(241,180,50)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="98.3187%" y="293" width="0.0801%" height="15" fill="rgb(221,54,25)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="98.3187%" y="277" width="0.0801%" height="15" fill="rgb(209,157,44)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="98.3187%" y="261" width="0.0801%" height="15" fill="rgb(246,115,41)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="98.4788%" y="309" width="0.0801%" height="15" fill="rgb(229,86,1)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="98.4788%" y="293" width="0.0801%" height="15" fill="rgb(240,108,53)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="98.5588%" y="309" width="0.0801%" height="15" fill="rgb(227,134,2)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (15 samples, 1.20%)</title><rect x="97.5180%" y="389" width="1.2010%" height="15" fill="rgb(213,129,25)" fg:x="1218" fg:w="15"/><text x="97.7680%" y="399.50"></text></g><g><title>regex::builders::Builder::build_one_string (15 samples, 1.20%)</title><rect x="97.5180%" y="373" width="1.2010%" height="15" fill="rgb(226,35,21)" fg:x="1218" fg:w="15"/><text x="97.7680%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (15 samples, 1.20%)</title><rect x="97.5180%" y="357" width="1.2010%" height="15" fill="rgb(208,129,26)" fg:x="1218" fg:w="15"/><text x="97.7680%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="98.3987%" y="341" width="0.3203%" height="15" fill="rgb(224,83,6)" fg:x="1229" fg:w="4"/><text x="98.6487%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="98.3987%" y="325" width="0.3203%" height="15" fill="rgb(227,52,39)" fg:x="1229" fg:w="4"/><text x="98.6487%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.6389%" y="309" width="0.0801%" height="15" fill="rgb(241,30,17)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.6389%" y="293" width="0.0801%" height="15" fill="rgb(246,186,42)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7190%" y="341" width="0.0801%" height="15" fill="rgb(221,169,15)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.7990%" y="341" width="0.0801%" height="15" fill="rgb(235,108,21)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7990%" y="325" width="0.0801%" height="15" fill="rgb(219,148,30)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7990%" y="309" width="0.0801%" height="15" fill="rgb(220,109,5)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="98.7190%" y="389" width="0.2402%" height="15" fill="rgb(213,203,48)" fg:x="1233" fg:w="3"/><text x="98.9690%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="98.7190%" y="373" width="0.2402%" height="15" fill="rgb(244,71,33)" fg:x="1233" fg:w="3"/><text x="98.9690%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="98.7190%" y="357" width="0.2402%" height="15" fill="rgb(209,23,2)" fg:x="1233" fg:w="3"/><text x="98.9690%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="98.8791%" y="341" width="0.0801%" height="15" fill="rgb(219,97,7)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.8791%" y="325" width="0.0801%" height="15" fill="rgb(216,161,23)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (21 samples, 1.68%)</title><rect x="97.5180%" y="405" width="1.6813%" height="15" fill="rgb(207,45,42)" fg:x="1218" fg:w="21"/><text x="97.7680%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="98.9592%" y="389" width="0.2402%" height="15" fill="rgb(241,61,4)" fg:x="1236" fg:w="3"/><text x="99.2092%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="98.9592%" y="373" width="0.2402%" height="15" fill="rgb(236,170,1)" fg:x="1236" fg:w="3"/><text x="99.2092%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="98.9592%" y="357" width="0.2402%" height="15" fill="rgb(239,72,5)" fg:x="1236" fg:w="3"/><text x="99.2092%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="99.0392%" y="341" width="0.1601%" height="15" fill="rgb(214,13,50)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="99.1193%" y="325" width="0.0801%" height="15" fill="rgb(224,88,9)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (264 samples, 21.14%)</title><rect x="78.1425%" y="501" width="21.1369%" height="15" fill="rgb(238,192,34)" fg:x="976" fg:w="264"/><text x="78.3925%" y="511.50">&lt;&amp;kernel::model::entry::Entry as ..</text></g><g><title>plugins_core::looking::model::qualify_name (259 samples, 20.74%)</title><rect x="78.5428%" y="485" width="20.7366%" height="15" fill="rgb(217,203,50)" fg:x="981" fg:w="259"/><text x="78.7928%" y="495.50">plugins_core::looking::model::qua..</text></g><g><title>indefinite::indefinite (259 samples, 20.74%)</title><rect x="78.5428%" y="469" width="20.7366%" height="15" fill="rgb(241,123,32)" fg:x="981" fg:w="259"/><text x="78.7928%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (259 samples, 20.74%)</title><rect x="78.5428%" y="453" width="20.7366%" height="15" fill="rgb(248,151,39)" fg:x="981" fg:w="259"/><text x="78.7928%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (258 samples, 20.66%)</title><rect x="78.6229%" y="437" width="20.6565%" height="15" fill="rgb(208,89,6)" fg:x="982" fg:w="258"/><text x="78.8729%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (22 samples, 1.76%)</title><rect x="97.5180%" y="421" width="1.7614%" height="15" fill="rgb(254,43,26)" fg:x="1218" fg:w="22"/><text x="97.7680%" y="431.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="99.1994%" y="405" width="0.0801%" height="15" fill="rgb(216,158,13)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.3595%" y="357" width="0.0801%" height="15" fill="rgb(212,47,37)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="367.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.3595%" y="341" width="0.0801%" height="15" fill="rgb(254,16,10)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.3595%" y="325" width="0.0801%" height="15" fill="rgb(223,228,16)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="335.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.3595%" y="309" width="0.0801%" height="15" fill="rgb(249,108,50)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.3595%" y="293" width="0.0801%" height="15" fill="rgb(208,220,5)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3595%" y="277" width="0.0801%" height="15" fill="rgb(217,89,48)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3595%" y="261" width="0.0801%" height="15" fill="rgb(212,113,41)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3595%" y="245" width="0.0801%" height="15" fill="rgb(231,127,5)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3595%" y="229" width="0.0801%" height="15" fill="rgb(217,141,17)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.3595%" y="213" width="0.0801%" height="15" fill="rgb(245,125,54)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3595%" y="197" width="0.0801%" height="15" fill="rgb(248,125,3)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4396%" y="309" width="0.0801%" height="15" fill="rgb(236,119,51)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4396%" y="293" width="0.0801%" height="15" fill="rgb(239,99,8)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4396%" y="277" width="0.0801%" height="15" fill="rgb(224,228,4)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4396%" y="261" width="0.0801%" height="15" fill="rgb(220,131,45)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="271.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (3 samples, 0.24%)</title><rect x="99.3595%" y="469" width="0.2402%" height="15" fill="rgb(215,62,5)" fg:x="1241" fg:w="3"/><text x="99.6095%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="99.3595%" y="453" width="0.2402%" height="15" fill="rgb(253,12,24)" fg:x="1241" fg:w="3"/><text x="99.6095%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="99.3595%" y="437" width="0.2402%" height="15" fill="rgb(248,120,50)" fg:x="1241" fg:w="3"/><text x="99.6095%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="99.3595%" y="421" width="0.2402%" height="15" fill="rgb(245,194,10)" fg:x="1241" fg:w="3"/><text x="99.6095%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="99.3595%" y="405" width="0.2402%" height="15" fill="rgb(241,149,38)" fg:x="1241" fg:w="3"/><text x="99.6095%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.3595%" y="389" width="0.2402%" height="15" fill="rgb(219,215,7)" fg:x="1241" fg:w="3"/><text x="99.6095%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.3595%" y="373" width="0.2402%" height="15" fill="rgb(208,120,31)" fg:x="1241" fg:w="3"/><text x="99.6095%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.4396%" y="357" width="0.1601%" height="15" fill="rgb(244,30,8)" fg:x="1242" fg:w="2"/><text x="99.6896%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.4396%" y="341" width="0.1601%" height="15" fill="rgb(238,35,44)" fg:x="1242" fg:w="2"/><text x="99.6896%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.4396%" y="325" width="0.1601%" height="15" fill="rgb(243,218,37)" fg:x="1242" fg:w="2"/><text x="99.6896%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5196%" y="309" width="0.0801%" height="15" fill="rgb(218,169,10)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5196%" y="293" width="0.0801%" height="15" fill="rgb(221,144,10)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="303.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (277 samples, 22.18%)</title><rect x="77.5020%" y="661" width="22.1777%" height="15" fill="rgb(226,41,38)" fg:x="968" fg:w="277"/><text x="77.7520%" y="671.50">&lt;engine::perform::StandardPerformer..</text></g><g><title>kernel::plugins::mw::apply_middleware (270 samples, 21.62%)</title><rect x="78.0624%" y="645" width="21.6173%" height="15" fill="rgb(228,3,1)" fg:x="975" fg:w="270"/><text x="78.3124%" y="655.50">kernel::plugins::mw::apply_middlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (270 samples, 21.62%)</title><rect x="78.0624%" y="629" width="21.6173%" height="15" fill="rgb(209,129,12)" fg:x="975" fg:w="270"/><text x="78.3124%" y="639.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (270 samples, 21.62%)</title><rect x="78.0624%" y="613" width="21.6173%" height="15" fill="rgb(213,136,33)" fg:x="975" fg:w="270"/><text x="78.3124%" y="623.50">&lt;plugins_dynlib::DynamicMiddleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (270 samples, 21.62%)</title><rect x="78.0624%" y="597" width="21.6173%" height="15" fill="rgb(209,181,29)" fg:x="975" fg:w="270"/><text x="78.3124%" y="607.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (270 samples, 21.62%)</title><rect x="78.0624%" y="581" width="21.6173%" height="15" fill="rgb(234,173,18)" fg:x="975" fg:w="270"/><text x="78.3124%" y="591.50">core::ops::function::FnOnce::call_..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (270 samples, 21.62%)</title><rect x="78.0624%" y="565" width="21.6173%" height="15" fill="rgb(227,73,47)" fg:x="975" fg:w="270"/><text x="78.3124%" y="575.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (270 samples, 21.62%)</title><rect x="78.0624%" y="549" width="21.6173%" height="15" fill="rgb(234,9,34)" fg:x="975" fg:w="270"/><text x="78.3124%" y="559.50">core::ops::function::FnOnce::call_..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (270 samples, 21.62%)</title><rect x="78.0624%" y="533" width="21.6173%" height="15" fill="rgb(235,172,15)" fg:x="975" fg:w="270"/><text x="78.3124%" y="543.50">&lt;plugins_core::looking::actions::L..</text></g><g><title>plugins_core::looking::model::new_area_observation (269 samples, 21.54%)</title><rect x="78.1425%" y="517" width="21.5372%" height="15" fill="rgb(245,61,2)" fg:x="976" fg:w="269"/><text x="78.3925%" y="527.50">plugins_core::looking::model::new_..</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="99.2794%" y="501" width="0.4003%" height="15" fill="rgb(238,39,47)" fg:x="1240" fg:w="5"/><text x="99.5294%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="99.2794%" y="485" width="0.4003%" height="15" fill="rgb(234,37,24)" fg:x="1240" fg:w="5"/><text x="99.5294%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5997%" y="469" width="0.0801%" height="15" fill="rgb(248,223,24)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5997%" y="453" width="0.0801%" height="15" fill="rgb(223,12,15)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.5997%" y="437" width="0.0801%" height="15" fill="rgb(249,6,3)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.5997%" y="421" width="0.0801%" height="15" fill="rgb(237,105,33)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.5997%" y="405" width="0.0801%" height="15" fill="rgb(252,208,35)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.6797%" y="565" width="0.0801%" height="15" fill="rgb(215,181,35)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.6797%" y="549" width="0.0801%" height="15" fill="rgb(246,212,3)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.6797%" y="533" width="0.0801%" height="15" fill="rgb(247,156,24)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6797%" y="517" width="0.0801%" height="15" fill="rgb(248,9,31)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="501" width="0.0801%" height="15" fill="rgb(234,26,45)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6797%" y="485" width="0.0801%" height="15" fill="rgb(249,11,32)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="469" width="0.0801%" height="15" fill="rgb(249,162,33)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6797%" y="453" width="0.0801%" height="15" fill="rgb(232,4,32)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="437" width="0.0801%" height="15" fill="rgb(212,5,45)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6797%" y="421" width="0.0801%" height="15" fill="rgb(227,95,13)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="405" width="0.0801%" height="15" fill="rgb(223,205,10)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6797%" y="389" width="0.0801%" height="15" fill="rgb(222,178,8)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6797%" y="373" width="0.0801%" height="15" fill="rgb(216,13,22)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.6797%" y="357" width="0.0801%" height="15" fill="rgb(240,167,12)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.6797%" y="341" width="0.0801%" height="15" fill="rgb(235,68,35)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.6797%" y="325" width="0.0801%" height="15" fill="rgb(253,40,27)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="99.6797%" y="597" width="0.1601%" height="15" fill="rgb(214,19,28)" fg:x="1245" fg:w="2"/><text x="99.9297%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="99.6797%" y="581" width="0.1601%" height="15" fill="rgb(210,167,45)" fg:x="1245" fg:w="2"/><text x="99.9297%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.7598%" y="565" width="0.0801%" height="15" fill="rgb(232,97,40)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.7598%" y="549" width="0.0801%" height="15" fill="rgb(250,35,23)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.7598%" y="533" width="0.0801%" height="15" fill="rgb(248,47,53)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7598%" y="517" width="0.0801%" height="15" fill="rgb(226,58,50)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="501" width="0.0801%" height="15" fill="rgb(217,105,26)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7598%" y="485" width="0.0801%" height="15" fill="rgb(208,64,1)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="469" width="0.0801%" height="15" fill="rgb(214,80,1)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7598%" y="453" width="0.0801%" height="15" fill="rgb(206,175,26)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="437" width="0.0801%" height="15" fill="rgb(235,156,37)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7598%" y="421" width="0.0801%" height="15" fill="rgb(213,100,9)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="405" width="0.0801%" height="15" fill="rgb(241,15,13)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7598%" y="389" width="0.0801%" height="15" fill="rgb(205,97,43)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="373" width="0.0801%" height="15" fill="rgb(216,106,32)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="383.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (280 samples, 22.42%)</title><rect x="77.5020%" y="757" width="22.4179%" height="15" fill="rgb(226,200,8)" fg:x="968" fg:w="280"/><text x="77.7520%" y="767.50">&lt;kernel::plugins::SessionPlugins as..</text></g><g><title>core::iter::adapters::try_process (280 samples, 22.42%)</title><rect x="77.5020%" y="741" width="22.4179%" height="15" fill="rgb(244,54,29)" fg:x="968" fg:w="280"/><text x="77.7520%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (280 samples, 22.42%)</title><rect x="77.5020%" y="725" width="22.4179%" height="15" fill="rgb(252,169,12)" fg:x="968" fg:w="280"/><text x="77.7520%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (280 samples, 22.42%)</title><rect x="77.5020%" y="709" width="22.4179%" height="15" fill="rgb(231,199,11)" fg:x="968" fg:w="280"/><text x="77.7520%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (280 samples, 22.42%)</title><rect x="77.5020%" y="693" width="22.4179%" height="15" fill="rgb(233,191,18)" fg:x="968" fg:w="280"/><text x="77.7520%" y="703.50">&lt;plugins_core::looking::LookingPlug..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (280 samples, 22.42%)</title><rect x="77.5020%" y="677" width="22.4179%" height="15" fill="rgb(215,83,47)" fg:x="968" fg:w="280"/><text x="77.7520%" y="687.50">&lt;engine::perform::StandardPerformer..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="99.6797%" y="661" width="0.2402%" height="15" fill="rgb(251,67,19)" fg:x="1245" fg:w="3"/><text x="99.9297%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="99.6797%" y="645" width="0.2402%" height="15" fill="rgb(240,7,20)" fg:x="1245" fg:w="3"/><text x="99.9297%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.6797%" y="629" width="0.2402%" height="15" fill="rgb(210,150,26)" fg:x="1245" fg:w="3"/><text x="99.9297%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6797%" y="613" width="0.2402%" height="15" fill="rgb(228,75,42)" fg:x="1245" fg:w="3"/><text x="99.9297%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="99.8399%" y="597" width="0.0801%" height="15" fill="rgb(237,134,48)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8399%" y="581" width="0.0801%" height="15" fill="rgb(205,80,50)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8399%" y="565" width="0.0801%" height="15" fill="rgb(217,74,48)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8399%" y="549" width="0.0801%" height="15" fill="rgb(205,82,50)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8399%" y="533" width="0.0801%" height="15" fill="rgb(228,1,33)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8399%" y="517" width="0.0801%" height="15" fill="rgb(214,50,23)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="527.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(210,62,9)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1151.50"></text></g><g><title>simple-6bd4aef2 (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(210,104,37)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1135.50">simple-6bd4aef2</text></g><g><title>_start (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(232,104,43)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1119.50">_start</text></g><g><title>__libc_start_main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(244,52,6)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1103.50">__libc_start_main</text></g><g><title>main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(211,174,52)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1087.50">main</text></g><g><title>std::rt::lang_start_internal (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(229,48,4)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1071.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(205,155,16)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(211,141,53)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(240,148,11)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1023.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(214,45,23)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(248,74,26)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(218,121,16)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(218,10,47)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,249 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(227,99,14)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="943.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(229,83,46)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="927.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,249 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(228,25,1)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="911.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(252,190,15)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="895.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,249 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(213,103,51)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="879.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,249 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(220,38,44)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="863.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (320 samples, 25.62%)</title><rect x="74.3795%" y="837" width="25.6205%" height="15" fill="rgb(210,45,26)" fg:x="929" fg:w="320"/><text x="74.6295%" y="847.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as c..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (320 samples, 25.62%)</title><rect x="74.3795%" y="821" width="25.6205%" height="15" fill="rgb(205,95,48)" fg:x="929" fg:w="320"/><text x="74.6295%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (320 samples, 25.62%)</title><rect x="74.3795%" y="805" width="25.6205%" height="15" fill="rgb(225,179,37)" fg:x="929" fg:w="320"/><text x="74.6295%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (281 samples, 22.50%)</title><rect x="77.5020%" y="789" width="22.4980%" height="15" fill="rgb(230,209,3)" fg:x="968" fg:w="281"/><text x="77.7520%" y="799.50">engine::session::Session::evaluate_a..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (281 samples, 22.50%)</title><rect x="77.5020%" y="773" width="22.4980%" height="15" fill="rgb(248,12,46)" fg:x="968" fg:w="281"/><text x="77.7520%" y="783.50">engine::perform::StandardPerformer::..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="99.9199%" y="757" width="0.0801%" height="15" fill="rgb(234,18,0)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="767.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="99.9199%" y="741" width="0.0801%" height="15" fill="rgb(238,197,14)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="751.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="99.9199%" y="725" width="0.0801%" height="15" fill="rgb(251,162,48)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="735.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="99.9199%" y="709" width="0.0801%" height="15" fill="rgb(237,73,42)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="719.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="99.9199%" y="693" width="0.0801%" height="15" fill="rgb(211,108,8)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="703.50"></text></g></svg></svg>