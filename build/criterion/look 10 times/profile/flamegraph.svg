<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1258"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0795%" y="741" width="0.0795%" height="15" fill="rgb(254,165,40)" fg:x="1" fg:w="1"/><text x="0.3295%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0795%" y="725" width="0.0795%" height="15" fill="rgb(246,173,38)" fg:x="1" fg:w="1"/><text x="0.3295%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0795%" y="709" width="0.0795%" height="15" fill="rgb(215,3,27)" fg:x="1" fg:w="1"/><text x="0.3295%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0795%" y="693" width="0.0795%" height="15" fill="rgb(239,169,51)" fg:x="1" fg:w="1"/><text x="0.3295%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0795%" y="677" width="0.0795%" height="15" fill="rgb(212,5,25)" fg:x="1" fg:w="1"/><text x="0.3295%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0795%" y="661" width="0.0795%" height="15" fill="rgb(243,45,17)" fg:x="1" fg:w="1"/><text x="0.3295%" y="671.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="0.1590%" y="661" width="0.3975%" height="15" fill="rgb(242,97,9)" fg:x="2" fg:w="5"/><text x="0.4090%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (9 samples, 0.72%)</title><rect x="0.1590%" y="725" width="0.7154%" height="15" fill="rgb(228,71,31)" fg:x="2" fg:w="9"/><text x="0.4090%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="0.1590%" y="709" width="0.7154%" height="15" fill="rgb(252,184,16)" fg:x="2" fg:w="9"/><text x="0.4090%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (9 samples, 0.72%)</title><rect x="0.1590%" y="693" width="0.7154%" height="15" fill="rgb(236,169,46)" fg:x="2" fg:w="9"/><text x="0.4090%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (9 samples, 0.72%)</title><rect x="0.1590%" y="677" width="0.7154%" height="15" fill="rgb(207,17,47)" fg:x="2" fg:w="9"/><text x="0.4090%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (4 samples, 0.32%)</title><rect x="0.5564%" y="661" width="0.3180%" height="15" fill="rgb(206,201,28)" fg:x="7" fg:w="4"/><text x="0.8064%" y="671.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="0.5564%" y="645" width="0.3180%" height="15" fill="rgb(224,184,23)" fg:x="7" fg:w="4"/><text x="0.8064%" y="655.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.8744%" y="661" width="0.2385%" height="15" fill="rgb(208,139,48)" fg:x="11" fg:w="3"/><text x="1.1244%" y="671.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.1129%" y="645" width="0.2385%" height="15" fill="rgb(208,130,10)" fg:x="14" fg:w="3"/><text x="1.3629%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4308%" y="613" width="0.0795%" height="15" fill="rgb(211,213,45)" fg:x="18" fg:w="1"/><text x="1.6808%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.87%)</title><rect x="0.8744%" y="677" width="0.8744%" height="15" fill="rgb(235,100,30)" fg:x="11" fg:w="11"/><text x="1.1244%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="1.1129%" y="661" width="0.6359%" height="15" fill="rgb(206,144,31)" fg:x="14" fg:w="8"/><text x="1.3629%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.3514%" y="645" width="0.3975%" height="15" fill="rgb(224,200,26)" fg:x="17" fg:w="5"/><text x="1.6014%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.3514%" y="629" width="0.3975%" height="15" fill="rgb(247,104,53)" fg:x="17" fg:w="5"/><text x="1.6014%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.5103%" y="613" width="0.2385%" height="15" fill="rgb(220,14,17)" fg:x="19" fg:w="3"/><text x="1.7603%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.6693%" y="597" width="0.0795%" height="15" fill="rgb(230,140,40)" fg:x="21" fg:w="1"/><text x="1.9193%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6693%" y="581" width="0.0795%" height="15" fill="rgb(229,2,41)" fg:x="21" fg:w="1"/><text x="1.9193%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="2.1463%" y="613" width="0.1590%" height="15" fill="rgb(232,89,16)" fg:x="27" fg:w="2"/><text x="2.3963%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="2.1463%" y="597" width="0.1590%" height="15" fill="rgb(247,59,52)" fg:x="27" fg:w="2"/><text x="2.3963%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.1463%" y="581" width="0.1590%" height="15" fill="rgb(226,110,21)" fg:x="27" fg:w="2"/><text x="2.3963%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3052%" y="613" width="0.0795%" height="15" fill="rgb(224,176,43)" fg:x="29" fg:w="1"/><text x="2.5552%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3847%" y="597" width="0.0795%" height="15" fill="rgb(221,73,6)" fg:x="30" fg:w="1"/><text x="2.6347%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="1.7488%" y="661" width="0.7949%" height="15" fill="rgb(232,78,19)" fg:x="22" fg:w="10"/><text x="1.9988%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="1.7488%" y="645" width="0.7949%" height="15" fill="rgb(233,112,48)" fg:x="22" fg:w="10"/><text x="1.9988%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="2.0668%" y="629" width="0.4769%" height="15" fill="rgb(243,131,47)" fg:x="26" fg:w="6"/><text x="2.3168%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.3847%" y="613" width="0.1590%" height="15" fill="rgb(226,51,1)" fg:x="30" fg:w="2"/><text x="2.6347%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.4642%" y="597" width="0.0795%" height="15" fill="rgb(247,58,7)" fg:x="31" fg:w="1"/><text x="2.7142%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 2.46%)</title><rect x="0.1590%" y="741" width="2.4642%" height="15" fill="rgb(209,7,32)" fg:x="2" fg:w="31"/><text x="0.4090%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (22 samples, 1.75%)</title><rect x="0.8744%" y="725" width="1.7488%" height="15" fill="rgb(209,39,41)" fg:x="11" fg:w="22"/><text x="1.1244%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.75%)</title><rect x="0.8744%" y="709" width="1.7488%" height="15" fill="rgb(226,182,46)" fg:x="11" fg:w="22"/><text x="1.1244%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (22 samples, 1.75%)</title><rect x="0.8744%" y="693" width="1.7488%" height="15" fill="rgb(230,219,10)" fg:x="11" fg:w="22"/><text x="1.1244%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.87%)</title><rect x="1.7488%" y="677" width="0.8744%" height="15" fill="rgb(227,175,30)" fg:x="22" fg:w="11"/><text x="1.9988%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5437%" y="661" width="0.0795%" height="15" fill="rgb(217,2,50)" fg:x="32" fg:w="1"/><text x="2.7937%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.6232%" y="693" width="0.0795%" height="15" fill="rgb(229,160,0)" fg:x="33" fg:w="1"/><text x="2.8732%" y="703.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="2.7822%" y="661" width="0.3180%" height="15" fill="rgb(207,78,37)" fg:x="35" fg:w="4"/><text x="3.0322%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="2.8617%" y="645" width="0.2385%" height="15" fill="rgb(225,57,0)" fg:x="36" fg:w="3"/><text x="3.1117%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="2.8617%" y="629" width="0.2385%" height="15" fill="rgb(232,154,2)" fg:x="36" fg:w="3"/><text x="3.1117%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="2.8617%" y="613" width="0.2385%" height="15" fill="rgb(241,212,25)" fg:x="36" fg:w="3"/><text x="3.1117%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="2.8617%" y="597" width="0.2385%" height="15" fill="rgb(226,69,20)" fg:x="36" fg:w="3"/><text x="3.1117%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="2.8617%" y="581" width="0.2385%" height="15" fill="rgb(247,184,54)" fg:x="36" fg:w="3"/><text x="3.1117%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="2.8617%" y="565" width="0.2385%" height="15" fill="rgb(210,145,0)" fg:x="36" fg:w="3"/><text x="3.1117%" y="575.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="2.8617%" y="549" width="0.2385%" height="15" fill="rgb(253,82,12)" fg:x="36" fg:w="3"/><text x="3.1117%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.1797%" y="613" width="0.0795%" height="15" fill="rgb(245,42,11)" fg:x="40" fg:w="1"/><text x="3.4297%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.1797%" y="597" width="0.0795%" height="15" fill="rgb(219,147,32)" fg:x="40" fg:w="1"/><text x="3.4297%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.1797%" y="581" width="0.0795%" height="15" fill="rgb(246,12,7)" fg:x="40" fg:w="1"/><text x="3.4297%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.1797%" y="565" width="0.0795%" height="15" fill="rgb(243,50,9)" fg:x="40" fg:w="1"/><text x="3.4297%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.1797%" y="549" width="0.0795%" height="15" fill="rgb(219,149,6)" fg:x="40" fg:w="1"/><text x="3.4297%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="3.1002%" y="645" width="0.2385%" height="15" fill="rgb(241,51,42)" fg:x="39" fg:w="3"/><text x="3.3502%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="3.1002%" y="629" width="0.2385%" height="15" fill="rgb(226,128,27)" fg:x="39" fg:w="3"/><text x="3.3502%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2591%" y="613" width="0.0795%" height="15" fill="rgb(244,144,4)" fg:x="41" fg:w="1"/><text x="3.5091%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.3386%" y="597" width="0.0795%" height="15" fill="rgb(221,4,13)" fg:x="42" fg:w="1"/><text x="3.5886%" y="607.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="3.4181%" y="533" width="0.0795%" height="15" fill="rgb(208,170,28)" fg:x="43" fg:w="1"/><text x="3.6681%" y="543.50"></text></g><g><title>glob::is_dir (8 samples, 0.64%)</title><rect x="3.4181%" y="597" width="0.6359%" height="15" fill="rgb(226,131,13)" fg:x="43" fg:w="8"/><text x="3.6681%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (8 samples, 0.64%)</title><rect x="3.4181%" y="581" width="0.6359%" height="15" fill="rgb(215,72,41)" fg:x="43" fg:w="8"/><text x="3.6681%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (8 samples, 0.64%)</title><rect x="3.4181%" y="565" width="0.6359%" height="15" fill="rgb(243,108,20)" fg:x="43" fg:w="8"/><text x="3.6681%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (8 samples, 0.64%)</title><rect x="3.4181%" y="549" width="0.6359%" height="15" fill="rgb(230,189,17)" fg:x="43" fg:w="8"/><text x="3.6681%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (7 samples, 0.56%)</title><rect x="3.4976%" y="533" width="0.5564%" height="15" fill="rgb(220,50,17)" fg:x="44" fg:w="7"/><text x="3.7476%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (7 samples, 0.56%)</title><rect x="3.4976%" y="517" width="0.5564%" height="15" fill="rgb(248,152,48)" fg:x="44" fg:w="7"/><text x="3.7476%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (7 samples, 0.56%)</title><rect x="3.4976%" y="501" width="0.5564%" height="15" fill="rgb(244,91,11)" fg:x="44" fg:w="7"/><text x="3.7476%" y="511.50"></text></g><g><title>statx (7 samples, 0.56%)</title><rect x="3.4976%" y="485" width="0.5564%" height="15" fill="rgb(220,157,5)" fg:x="44" fg:w="7"/><text x="3.7476%" y="495.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.08%)</title><rect x="4.1335%" y="517" width="0.0795%" height="15" fill="rgb(253,137,8)" fg:x="52" fg:w="1"/><text x="4.3835%" y="527.50"></text></g><g><title>std::io::error::Error::last_os_error (1 samples, 0.08%)</title><rect x="4.1335%" y="501" width="0.0795%" height="15" fill="rgb(217,137,51)" fg:x="52" fg:w="1"/><text x="4.3835%" y="511.50"></text></g><g><title>std::sys::unix::os::errno (1 samples, 0.08%)</title><rect x="4.1335%" y="485" width="0.0795%" height="15" fill="rgb(218,209,53)" fg:x="52" fg:w="1"/><text x="4.3835%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.95%)</title><rect x="3.3386%" y="629" width="0.9539%" height="15" fill="rgb(249,137,25)" fg:x="42" fg:w="12"/><text x="3.5886%" y="639.50"></text></g><g><title>glob::fill_todo (12 samples, 0.95%)</title><rect x="3.3386%" y="613" width="0.9539%" height="15" fill="rgb(239,155,26)" fg:x="42" fg:w="12"/><text x="3.5886%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="4.0541%" y="597" width="0.2385%" height="15" fill="rgb(227,85,46)" fg:x="51" fg:w="3"/><text x="4.3041%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="4.0541%" y="581" width="0.2385%" height="15" fill="rgb(251,107,43)" fg:x="51" fg:w="3"/><text x="4.3041%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="4.0541%" y="565" width="0.2385%" height="15" fill="rgb(234,170,33)" fg:x="51" fg:w="3"/><text x="4.3041%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="4.0541%" y="549" width="0.2385%" height="15" fill="rgb(206,29,35)" fg:x="51" fg:w="3"/><text x="4.3041%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="4.1335%" y="533" width="0.1590%" height="15" fill="rgb(227,138,25)" fg:x="52" fg:w="2"/><text x="4.3835%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="4.2130%" y="517" width="0.0795%" height="15" fill="rgb(249,131,35)" fg:x="53" fg:w="1"/><text x="4.4630%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="4.2130%" y="501" width="0.0795%" height="15" fill="rgb(239,6,40)" fg:x="53" fg:w="1"/><text x="4.4630%" y="511.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.2925%" y="597" width="0.0795%" height="15" fill="rgb(246,136,47)" fg:x="54" fg:w="1"/><text x="4.5425%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.3720%" y="581" width="0.0795%" height="15" fill="rgb(253,58,26)" fg:x="55" fg:w="1"/><text x="4.6220%" y="591.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="4.3720%" y="597" width="0.1590%" height="15" fill="rgb(237,141,10)" fg:x="55" fg:w="2"/><text x="4.6220%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.4515%" y="581" width="0.0795%" height="15" fill="rgb(234,156,12)" fg:x="56" fg:w="1"/><text x="4.7015%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4515%" y="565" width="0.0795%" height="15" fill="rgb(243,224,36)" fg:x="56" fg:w="1"/><text x="4.7015%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4515%" y="549" width="0.0795%" height="15" fill="rgb(205,229,51)" fg:x="56" fg:w="1"/><text x="4.7015%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (19 samples, 1.51%)</title><rect x="3.1002%" y="661" width="1.5103%" height="15" fill="rgb(223,189,4)" fg:x="39" fg:w="19"/><text x="3.3502%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (16 samples, 1.27%)</title><rect x="3.3386%" y="645" width="1.2719%" height="15" fill="rgb(249,167,54)" fg:x="42" fg:w="16"/><text x="3.5886%" y="655.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="4.2925%" y="629" width="0.3180%" height="15" fill="rgb(218,34,28)" fg:x="54" fg:w="4"/><text x="4.5425%" y="639.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="4.2925%" y="613" width="0.3180%" height="15" fill="rgb(232,109,42)" fg:x="54" fg:w="4"/><text x="4.5425%" y="623.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (1 samples, 0.08%)</title><rect x="4.5310%" y="597" width="0.0795%" height="15" fill="rgb(248,214,46)" fg:x="57" fg:w="1"/><text x="4.7810%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="4.5310%" y="581" width="0.0795%" height="15" fill="rgb(244,216,40)" fg:x="57" fg:w="1"/><text x="4.7810%" y="591.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="4.5310%" y="565" width="0.0795%" height="15" fill="rgb(231,226,31)" fg:x="57" fg:w="1"/><text x="4.7810%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (2 samples, 0.16%)</title><rect x="4.6105%" y="661" width="0.1590%" height="15" fill="rgb(238,38,43)" fg:x="58" fg:w="2"/><text x="4.8605%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="4.6105%" y="645" width="0.1590%" height="15" fill="rgb(208,88,43)" fg:x="58" fg:w="2"/><text x="4.8605%" y="655.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="5.0079%" y="597" width="0.0795%" height="15" fill="rgb(205,136,37)" fg:x="63" fg:w="1"/><text x="5.2579%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.0079%" y="581" width="0.0795%" height="15" fill="rgb(237,34,14)" fg:x="63" fg:w="1"/><text x="5.2579%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.0079%" y="565" width="0.0795%" height="15" fill="rgb(236,193,44)" fg:x="63" fg:w="1"/><text x="5.2579%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.0079%" y="549" width="0.0795%" height="15" fill="rgb(231,48,10)" fg:x="63" fg:w="1"/><text x="5.2579%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0079%" y="533" width="0.0795%" height="15" fill="rgb(213,141,34)" fg:x="63" fg:w="1"/><text x="5.2579%" y="543.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (3 samples, 0.24%)</title><rect x="5.0874%" y="597" width="0.2385%" height="15" fill="rgb(249,130,34)" fg:x="64" fg:w="3"/><text x="5.3374%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="5.0874%" y="581" width="0.2385%" height="15" fill="rgb(219,42,41)" fg:x="64" fg:w="3"/><text x="5.3374%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="5.0874%" y="565" width="0.2385%" height="15" fill="rgb(224,100,54)" fg:x="64" fg:w="3"/><text x="5.3374%" y="575.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="5.0874%" y="549" width="0.2385%" height="15" fill="rgb(229,200,27)" fg:x="64" fg:w="3"/><text x="5.3374%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.3259%" y="581" width="0.0795%" height="15" fill="rgb(217,118,10)" fg:x="67" fg:w="1"/><text x="5.5759%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (8 samples, 0.64%)</title><rect x="4.9285%" y="629" width="0.6359%" height="15" fill="rgb(206,22,3)" fg:x="62" fg:w="8"/><text x="5.1785%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (7 samples, 0.56%)</title><rect x="5.0079%" y="613" width="0.5564%" height="15" fill="rgb(232,163,46)" fg:x="63" fg:w="7"/><text x="5.2579%" y="623.50"></text></g><g><title>replies::identifier_to_key (3 samples, 0.24%)</title><rect x="5.3259%" y="597" width="0.2385%" height="15" fill="rgb(206,95,13)" fg:x="67" fg:w="3"/><text x="5.5759%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="5.4054%" y="581" width="0.1590%" height="15" fill="rgb(253,154,18)" fg:x="68" fg:w="2"/><text x="5.6554%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="5.4054%" y="565" width="0.1590%" height="15" fill="rgb(219,32,23)" fg:x="68" fg:w="2"/><text x="5.6554%" y="575.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="5.4054%" y="549" width="0.1590%" height="15" fill="rgb(230,191,45)" fg:x="68" fg:w="2"/><text x="5.6554%" y="559.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.5644%" y="629" width="0.0795%" height="15" fill="rgb(229,64,36)" fg:x="70" fg:w="1"/><text x="5.8144%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.5644%" y="613" width="0.0795%" height="15" fill="rgb(205,129,25)" fg:x="70" fg:w="1"/><text x="5.8144%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5644%" y="597" width="0.0795%" height="15" fill="rgb(254,112,7)" fg:x="70" fg:w="1"/><text x="5.8144%" y="607.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.6439%" y="629" width="0.0795%" height="15" fill="rgb(226,53,48)" fg:x="71" fg:w="1"/><text x="5.8939%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.8824%" y="597" width="0.0795%" height="15" fill="rgb(214,153,38)" fg:x="74" fg:w="1"/><text x="6.1324%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.8824%" y="581" width="0.0795%" height="15" fill="rgb(243,101,7)" fg:x="74" fg:w="1"/><text x="6.1324%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.8824%" y="565" width="0.0795%" height="15" fill="rgb(240,140,22)" fg:x="74" fg:w="1"/><text x="6.1324%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="5.7234%" y="629" width="0.3180%" height="15" fill="rgb(235,114,2)" fg:x="72" fg:w="4"/><text x="5.9734%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="5.8029%" y="613" width="0.2385%" height="15" fill="rgb(242,59,12)" fg:x="73" fg:w="3"/><text x="6.0529%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="5.9618%" y="597" width="0.0795%" height="15" fill="rgb(252,134,9)" fg:x="75" fg:w="1"/><text x="6.2118%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="6.0413%" y="597" width="0.0795%" height="15" fill="rgb(236,4,44)" fg:x="76" fg:w="1"/><text x="6.2913%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="6.0413%" y="581" width="0.0795%" height="15" fill="rgb(254,172,41)" fg:x="76" fg:w="1"/><text x="6.2913%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0413%" y="565" width="0.0795%" height="15" fill="rgb(244,63,20)" fg:x="76" fg:w="1"/><text x="6.2913%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.1208%" y="597" width="0.0795%" height="15" fill="rgb(250,73,31)" fg:x="77" fg:w="1"/><text x="6.3708%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.1208%" y="581" width="0.0795%" height="15" fill="rgb(241,38,36)" fg:x="77" fg:w="1"/><text x="6.3708%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1208%" y="565" width="0.0795%" height="15" fill="rgb(245,211,2)" fg:x="77" fg:w="1"/><text x="6.3708%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::new (2 samples, 0.16%)</title><rect x="6.2003%" y="597" width="0.1590%" height="15" fill="rgb(206,120,28)" fg:x="78" fg:w="2"/><text x="6.4503%" y="607.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.2003%" y="581" width="0.1590%" height="15" fill="rgb(211,59,34)" fg:x="78" fg:w="2"/><text x="6.4503%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (47 samples, 3.74%)</title><rect x="2.7027%" y="677" width="3.7361%" height="15" fill="rgb(233,168,5)" fg:x="34" fg:w="47"/><text x="2.9527%" y="687.50">kern..</text></g><g><title>kernel::plugins::SessionPlugins::schema (21 samples, 1.67%)</title><rect x="4.7695%" y="661" width="1.6693%" height="15" fill="rgb(234,33,13)" fg:x="60" fg:w="21"/><text x="5.0195%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 1.67%)</title><rect x="4.7695%" y="645" width="1.6693%" height="15" fill="rgb(231,150,26)" fg:x="60" fg:w="21"/><text x="5.0195%" y="655.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="6.0413%" y="629" width="0.3975%" height="15" fill="rgb(217,191,4)" fg:x="76" fg:w="5"/><text x="6.2913%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="6.0413%" y="613" width="0.3975%" height="15" fill="rgb(246,198,38)" fg:x="76" fg:w="5"/><text x="6.2913%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="6.3593%" y="597" width="0.0795%" height="15" fill="rgb(245,64,37)" fg:x="80" fg:w="1"/><text x="6.6093%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.3593%" y="581" width="0.0795%" height="15" fill="rgb(250,30,36)" fg:x="80" fg:w="1"/><text x="6.6093%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5183%" y="645" width="0.0795%" height="15" fill="rgb(217,86,53)" fg:x="82" fg:w="1"/><text x="6.7683%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (53 samples, 4.21%)</title><rect x="2.6232%" y="741" width="4.2130%" height="15" fill="rgb(228,157,16)" fg:x="33" fg:w="53"/><text x="2.8732%" y="751.50">&lt;engi..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (53 samples, 4.21%)</title><rect x="2.6232%" y="725" width="4.2130%" height="15" fill="rgb(217,59,31)" fg:x="33" fg:w="53"/><text x="2.8732%" y="735.50">engin..</text></g><g><title>engine::session::Session::new (53 samples, 4.21%)</title><rect x="2.6232%" y="709" width="4.2130%" height="15" fill="rgb(237,138,41)" fg:x="33" fg:w="53"/><text x="2.8732%" y="719.50">engin..</text></g><g><title>engine::session::Session::initialize (52 samples, 4.13%)</title><rect x="2.7027%" y="693" width="4.1335%" height="15" fill="rgb(227,91,49)" fg:x="34" fg:w="52"/><text x="2.9527%" y="703.50">engin..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (5 samples, 0.40%)</title><rect x="6.4388%" y="677" width="0.3975%" height="15" fill="rgb(247,21,44)" fg:x="81" fg:w="5"/><text x="6.6888%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="6.4388%" y="661" width="0.3975%" height="15" fill="rgb(219,210,51)" fg:x="81" fg:w="5"/><text x="6.6888%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="6.5978%" y="645" width="0.2385%" height="15" fill="rgb(209,140,6)" fg:x="83" fg:w="3"/><text x="6.8478%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="6.5978%" y="629" width="0.2385%" height="15" fill="rgb(221,188,24)" fg:x="83" fg:w="3"/><text x="6.8478%" y="639.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="6.5978%" y="613" width="0.2385%" height="15" fill="rgb(232,154,20)" fg:x="83" fg:w="3"/><text x="6.8478%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="6.9952%" y="725" width="0.1590%" height="15" fill="rgb(244,137,50)" fg:x="88" fg:w="2"/><text x="7.2452%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="6.9952%" y="709" width="0.1590%" height="15" fill="rgb(225,185,43)" fg:x="88" fg:w="2"/><text x="7.2452%" y="719.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.1542%" y="677" width="0.1590%" height="15" fill="rgb(213,205,38)" fg:x="90" fg:w="2"/><text x="7.4042%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="7.1542%" y="661" width="0.1590%" height="15" fill="rgb(236,73,12)" fg:x="90" fg:w="2"/><text x="7.4042%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (2 samples, 0.16%)</title><rect x="7.1542%" y="645" width="0.1590%" height="15" fill="rgb(235,219,13)" fg:x="90" fg:w="2"/><text x="7.4042%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2337%" y="629" width="0.0795%" height="15" fill="rgb(218,59,36)" fg:x="91" fg:w="1"/><text x="7.4837%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="7.3927%" y="613" width="0.1590%" height="15" fill="rgb(205,110,39)" fg:x="93" fg:w="2"/><text x="7.6427%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.3927%" y="597" width="0.1590%" height="15" fill="rgb(218,206,42)" fg:x="93" fg:w="2"/><text x="7.6427%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.3927%" y="581" width="0.1590%" height="15" fill="rgb(248,125,24)" fg:x="93" fg:w="2"/><text x="7.6427%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.6312%" y="597" width="0.1590%" height="15" fill="rgb(242,28,27)" fg:x="96" fg:w="2"/><text x="7.8812%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7107%" y="581" width="0.0795%" height="15" fill="rgb(216,228,15)" fg:x="97" fg:w="1"/><text x="7.9607%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7107%" y="565" width="0.0795%" height="15" fill="rgb(235,116,46)" fg:x="97" fg:w="1"/><text x="7.9607%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7107%" y="549" width="0.0795%" height="15" fill="rgb(224,18,32)" fg:x="97" fg:w="1"/><text x="7.9607%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.7107%" y="533" width="0.0795%" height="15" fill="rgb(252,5,12)" fg:x="97" fg:w="1"/><text x="7.9607%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.7107%" y="517" width="0.0795%" height="15" fill="rgb(251,36,5)" fg:x="97" fg:w="1"/><text x="7.9607%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.7107%" y="501" width="0.0795%" height="15" fill="rgb(217,53,14)" fg:x="97" fg:w="1"/><text x="7.9607%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7901%" y="549" width="0.0795%" height="15" fill="rgb(215,86,45)" fg:x="98" fg:w="1"/><text x="8.0401%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7901%" y="533" width="0.0795%" height="15" fill="rgb(242,169,11)" fg:x="98" fg:w="1"/><text x="8.0401%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7901%" y="517" width="0.0795%" height="15" fill="rgb(211,213,45)" fg:x="98" fg:w="1"/><text x="8.0401%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7901%" y="501" width="0.0795%" height="15" fill="rgb(205,88,11)" fg:x="98" fg:w="1"/><text x="8.0401%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8696%" y="549" width="0.0795%" height="15" fill="rgb(252,69,26)" fg:x="99" fg:w="1"/><text x="8.1196%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8696%" y="533" width="0.0795%" height="15" fill="rgb(246,123,37)" fg:x="99" fg:w="1"/><text x="8.1196%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8696%" y="517" width="0.0795%" height="15" fill="rgb(212,205,5)" fg:x="99" fg:w="1"/><text x="8.1196%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8696%" y="501" width="0.0795%" height="15" fill="rgb(253,148,0)" fg:x="99" fg:w="1"/><text x="8.1196%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8696%" y="485" width="0.0795%" height="15" fill="rgb(239,22,4)" fg:x="99" fg:w="1"/><text x="8.1196%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="7.7901%" y="581" width="0.2385%" height="15" fill="rgb(226,26,53)" fg:x="98" fg:w="3"/><text x="8.0401%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.7901%" y="565" width="0.2385%" height="15" fill="rgb(225,229,45)" fg:x="98" fg:w="3"/><text x="8.0401%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9491%" y="549" width="0.0795%" height="15" fill="rgb(220,60,37)" fg:x="100" fg:w="1"/><text x="8.1991%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="8.0286%" y="581" width="0.2385%" height="15" fill="rgb(217,180,35)" fg:x="101" fg:w="3"/><text x="8.2786%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="8.0286%" y="565" width="0.2385%" height="15" fill="rgb(229,7,53)" fg:x="101" fg:w="3"/><text x="8.2786%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1876%" y="549" width="0.0795%" height="15" fill="rgb(254,137,3)" fg:x="103" fg:w="1"/><text x="8.4376%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1876%" y="533" width="0.0795%" height="15" fill="rgb(215,140,41)" fg:x="103" fg:w="1"/><text x="8.4376%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.2671%" y="549" width="0.1590%" height="15" fill="rgb(250,80,15)" fg:x="104" fg:w="2"/><text x="8.5171%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3466%" y="533" width="0.0795%" height="15" fill="rgb(252,191,6)" fg:x="105" fg:w="1"/><text x="8.5966%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.3466%" y="517" width="0.0795%" height="15" fill="rgb(246,217,18)" fg:x="105" fg:w="1"/><text x="8.5966%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.3466%" y="501" width="0.0795%" height="15" fill="rgb(223,93,7)" fg:x="105" fg:w="1"/><text x="8.5966%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4261%" y="549" width="0.0795%" height="15" fill="rgb(225,55,52)" fg:x="106" fg:w="1"/><text x="8.6761%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4261%" y="533" width="0.0795%" height="15" fill="rgb(240,31,24)" fg:x="106" fg:w="1"/><text x="8.6761%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4261%" y="517" width="0.0795%" height="15" fill="rgb(205,56,52)" fg:x="106" fg:w="1"/><text x="8.6761%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4261%" y="501" width="0.0795%" height="15" fill="rgb(246,146,12)" fg:x="106" fg:w="1"/><text x="8.6761%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="8.2671%" y="565" width="0.3180%" height="15" fill="rgb(239,84,36)" fg:x="104" fg:w="4"/><text x="8.5171%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5056%" y="549" width="0.0795%" height="15" fill="rgb(207,41,40)" fg:x="107" fg:w="1"/><text x="8.7556%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5056%" y="533" width="0.0795%" height="15" fill="rgb(241,179,25)" fg:x="107" fg:w="1"/><text x="8.7556%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5056%" y="517" width="0.0795%" height="15" fill="rgb(210,0,34)" fg:x="107" fg:w="1"/><text x="8.7556%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.2671%" y="581" width="0.4769%" height="15" fill="rgb(225,217,29)" fg:x="104" fg:w="6"/><text x="8.5171%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.5851%" y="565" width="0.1590%" height="15" fill="rgb(216,191,38)" fg:x="108" fg:w="2"/><text x="8.8351%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.5851%" y="549" width="0.1590%" height="15" fill="rgb(232,140,52)" fg:x="108" fg:w="2"/><text x="8.8351%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.6645%" y="533" width="0.0795%" height="15" fill="rgb(223,158,51)" fg:x="109" fg:w="1"/><text x="8.9145%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.11%)</title><rect x="7.7901%" y="597" width="1.1129%" height="15" fill="rgb(235,29,51)" fg:x="98" fg:w="14"/><text x="8.0401%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.7440%" y="581" width="0.1590%" height="15" fill="rgb(215,181,18)" fg:x="110" fg:w="2"/><text x="8.9940%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.8235%" y="565" width="0.0795%" height="15" fill="rgb(227,125,34)" fg:x="111" fg:w="1"/><text x="9.0735%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.51%)</title><rect x="7.5517%" y="613" width="1.5103%" height="15" fill="rgb(230,197,49)" fg:x="95" fg:w="19"/><text x="7.8017%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.9030%" y="597" width="0.1590%" height="15" fill="rgb(239,141,16)" fg:x="112" fg:w="2"/><text x="9.1530%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="8.9030%" y="581" width="0.1590%" height="15" fill="rgb(225,105,43)" fg:x="112" fg:w="2"/><text x="9.1530%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.9030%" y="565" width="0.1590%" height="15" fill="rgb(214,131,14)" fg:x="112" fg:w="2"/><text x="9.1530%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.75%)</title><rect x="7.3927%" y="629" width="1.7488%" height="15" fill="rgb(229,177,11)" fg:x="93" fg:w="22"/><text x="7.6427%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0620%" y="613" width="0.0795%" height="15" fill="rgb(231,180,14)" fg:x="114" fg:w="1"/><text x="9.3120%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0620%" y="597" width="0.0795%" height="15" fill="rgb(232,88,2)" fg:x="114" fg:w="1"/><text x="9.3120%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0620%" y="581" width="0.0795%" height="15" fill="rgb(205,220,8)" fg:x="114" fg:w="1"/><text x="9.3120%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.0620%" y="565" width="0.0795%" height="15" fill="rgb(225,23,53)" fg:x="114" fg:w="1"/><text x="9.3120%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.0620%" y="549" width="0.0795%" height="15" fill="rgb(213,62,29)" fg:x="114" fg:w="1"/><text x="9.3120%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0620%" y="533" width="0.0795%" height="15" fill="rgb(227,75,7)" fg:x="114" fg:w="1"/><text x="9.3120%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="9.1415%" y="581" width="0.1590%" height="15" fill="rgb(207,105,14)" fg:x="115" fg:w="2"/><text x="9.3915%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="9.1415%" y="565" width="0.1590%" height="15" fill="rgb(245,62,29)" fg:x="115" fg:w="2"/><text x="9.3915%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3005%" y="565" width="0.0795%" height="15" fill="rgb(236,202,4)" fg:x="117" fg:w="1"/><text x="9.5505%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.3800%" y="565" width="0.0795%" height="15" fill="rgb(250,67,1)" fg:x="118" fg:w="1"/><text x="9.6300%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.5390%" y="549" width="0.0795%" height="15" fill="rgb(253,115,44)" fg:x="120" fg:w="1"/><text x="9.7890%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.5390%" y="533" width="0.0795%" height="15" fill="rgb(251,139,18)" fg:x="120" fg:w="1"/><text x="9.7890%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5390%" y="517" width="0.0795%" height="15" fill="rgb(218,22,32)" fg:x="120" fg:w="1"/><text x="9.7890%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="9.1415%" y="629" width="0.5564%" height="15" fill="rgb(243,53,5)" fg:x="115" fg:w="7"/><text x="9.3915%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="9.1415%" y="613" width="0.5564%" height="15" fill="rgb(227,56,16)" fg:x="115" fg:w="7"/><text x="9.3915%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="9.1415%" y="597" width="0.5564%" height="15" fill="rgb(245,53,0)" fg:x="115" fg:w="7"/><text x="9.3915%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="9.3005%" y="581" width="0.3975%" height="15" fill="rgb(216,170,35)" fg:x="117" fg:w="5"/><text x="9.5505%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.4595%" y="565" width="0.2385%" height="15" fill="rgb(211,200,8)" fg:x="119" fg:w="3"/><text x="9.7095%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.6184%" y="549" width="0.0795%" height="15" fill="rgb(228,204,44)" fg:x="121" fg:w="1"/><text x="9.8684%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.6184%" y="533" width="0.0795%" height="15" fill="rgb(214,121,17)" fg:x="121" fg:w="1"/><text x="9.8684%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="9.7774%" y="613" width="0.0795%" height="15" fill="rgb(233,64,38)" fg:x="123" fg:w="1"/><text x="10.0274%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="9.7774%" y="597" width="0.0795%" height="15" fill="rgb(253,54,19)" fg:x="123" fg:w="1"/><text x="10.0274%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="9.7774%" y="581" width="0.0795%" height="15" fill="rgb(253,94,18)" fg:x="123" fg:w="1"/><text x="10.0274%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.9364%" y="581" width="0.1590%" height="15" fill="rgb(227,57,52)" fg:x="125" fg:w="2"/><text x="10.1864%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0954%" y="581" width="0.0795%" height="15" fill="rgb(230,228,50)" fg:x="127" fg:w="1"/><text x="10.3454%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0954%" y="565" width="0.0795%" height="15" fill="rgb(217,205,27)" fg:x="127" fg:w="1"/><text x="10.3454%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0954%" y="549" width="0.0795%" height="15" fill="rgb(252,71,50)" fg:x="127" fg:w="1"/><text x="10.3454%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1749%" y="581" width="0.0795%" height="15" fill="rgb(209,86,4)" fg:x="128" fg:w="1"/><text x="10.4249%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1749%" y="565" width="0.0795%" height="15" fill="rgb(229,94,0)" fg:x="128" fg:w="1"/><text x="10.4249%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3339%" y="533" width="0.0795%" height="15" fill="rgb(252,223,21)" fg:x="130" fg:w="1"/><text x="10.5839%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3339%" y="517" width="0.0795%" height="15" fill="rgb(230,210,4)" fg:x="130" fg:w="1"/><text x="10.5839%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3339%" y="501" width="0.0795%" height="15" fill="rgb(240,149,38)" fg:x="130" fg:w="1"/><text x="10.5839%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.4928%" y="485" width="0.1590%" height="15" fill="rgb(254,105,20)" fg:x="132" fg:w="2"/><text x="10.7428%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5723%" y="469" width="0.0795%" height="15" fill="rgb(253,87,46)" fg:x="133" fg:w="1"/><text x="10.8223%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5723%" y="453" width="0.0795%" height="15" fill="rgb(253,116,33)" fg:x="133" fg:w="1"/><text x="10.8223%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6518%" y="453" width="0.0795%" height="15" fill="rgb(229,198,5)" fg:x="134" fg:w="1"/><text x="10.9018%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6518%" y="437" width="0.0795%" height="15" fill="rgb(242,38,37)" fg:x="134" fg:w="1"/><text x="10.9018%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.6518%" y="469" width="0.1590%" height="15" fill="rgb(242,69,53)" fg:x="134" fg:w="2"/><text x="10.9018%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.7313%" y="453" width="0.0795%" height="15" fill="rgb(249,80,16)" fg:x="135" fg:w="1"/><text x="10.9813%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="10.4134%" y="533" width="0.4769%" height="15" fill="rgb(206,128,11)" fg:x="131" fg:w="6"/><text x="10.6634%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="10.4134%" y="517" width="0.4769%" height="15" fill="rgb(212,35,20)" fg:x="131" fg:w="6"/><text x="10.6634%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="10.4928%" y="501" width="0.3975%" height="15" fill="rgb(236,79,13)" fg:x="132" fg:w="5"/><text x="10.7428%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.6518%" y="485" width="0.2385%" height="15" fill="rgb(233,123,3)" fg:x="134" fg:w="3"/><text x="10.9018%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8108%" y="469" width="0.0795%" height="15" fill="rgb(214,93,52)" fg:x="136" fg:w="1"/><text x="11.0608%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.9698%" y="517" width="0.0795%" height="15" fill="rgb(251,37,40)" fg:x="138" fg:w="1"/><text x="11.2198%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.0493%" y="517" width="0.1590%" height="15" fill="rgb(227,80,54)" fg:x="139" fg:w="2"/><text x="11.2993%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1288%" y="501" width="0.0795%" height="15" fill="rgb(254,48,11)" fg:x="140" fg:w="1"/><text x="11.3788%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.1288%" y="485" width="0.0795%" height="15" fill="rgb(235,193,26)" fg:x="140" fg:w="1"/><text x="11.3788%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.95%)</title><rect x="10.3339%" y="549" width="0.9539%" height="15" fill="rgb(229,99,21)" fg:x="130" fg:w="12"/><text x="10.5839%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="10.8903%" y="533" width="0.3975%" height="15" fill="rgb(211,140,41)" fg:x="137" fg:w="5"/><text x="11.1403%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="11.2083%" y="517" width="0.0795%" height="15" fill="rgb(240,227,30)" fg:x="141" fg:w="1"/><text x="11.4583%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="11.2083%" y="501" width="0.0795%" height="15" fill="rgb(215,224,45)" fg:x="141" fg:w="1"/><text x="11.4583%" y="511.50"></text></g><g><title>engine::session::Session::flush (53 samples, 4.21%)</title><rect x="7.1542%" y="725" width="4.2130%" height="15" fill="rgb(206,123,31)" fg:x="90" fg:w="53"/><text x="7.4042%" y="735.50">engin..</text></g><g><title>engine::session::state::State::close (53 samples, 4.21%)</title><rect x="7.1542%" y="709" width="4.2130%" height="15" fill="rgb(210,138,16)" fg:x="90" fg:w="53"/><text x="7.4042%" y="719.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (53 samples, 4.21%)</title><rect x="7.1542%" y="693" width="4.2130%" height="15" fill="rgb(228,57,28)" fg:x="90" fg:w="53"/><text x="7.4042%" y="703.50">engin..</text></g><g><title>core::iter::adapters::try_process (51 samples, 4.05%)</title><rect x="7.3132%" y="677" width="4.0541%" height="15" fill="rgb(242,170,10)" fg:x="92" fg:w="51"/><text x="7.5632%" y="687.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51 samples, 4.05%)</title><rect x="7.3132%" y="661" width="4.0541%" height="15" fill="rgb(228,214,39)" fg:x="92" fg:w="51"/><text x="7.5632%" y="671.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (51 samples, 4.05%)</title><rect x="7.3132%" y="645" width="4.0541%" height="15" fill="rgb(218,179,33)" fg:x="92" fg:w="51"/><text x="7.5632%" y="655.50">engi..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.67%)</title><rect x="9.6979%" y="629" width="1.6693%" height="15" fill="rgb(235,193,39)" fg:x="122" fg:w="21"/><text x="9.9479%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.51%)</title><rect x="9.8569%" y="613" width="1.5103%" height="15" fill="rgb(219,221,36)" fg:x="124" fg:w="19"/><text x="10.1069%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.51%)</title><rect x="9.8569%" y="597" width="1.5103%" height="15" fill="rgb(248,218,19)" fg:x="124" fg:w="19"/><text x="10.1069%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.11%)</title><rect x="10.2544%" y="581" width="1.1129%" height="15" fill="rgb(205,50,9)" fg:x="129" fg:w="14"/><text x="10.5044%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (14 samples, 1.11%)</title><rect x="10.2544%" y="565" width="1.1129%" height="15" fill="rgb(238,81,28)" fg:x="129" fg:w="14"/><text x="10.5044%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.2878%" y="549" width="0.0795%" height="15" fill="rgb(235,110,19)" fg:x="142" fg:w="1"/><text x="11.5378%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3672%" y="677" width="0.0795%" height="15" fill="rgb(214,7,14)" fg:x="143" fg:w="1"/><text x="11.6172%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="11.3672%" y="693" width="0.1590%" height="15" fill="rgb(211,77,3)" fg:x="143" fg:w="2"/><text x="11.6172%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4467%" y="677" width="0.0795%" height="15" fill="rgb(229,5,9)" fg:x="144" fg:w="1"/><text x="11.6967%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="11.3672%" y="725" width="0.2385%" height="15" fill="rgb(225,90,11)" fg:x="143" fg:w="3"/><text x="11.6172%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="11.3672%" y="709" width="0.2385%" height="15" fill="rgb(242,56,8)" fg:x="143" fg:w="3"/><text x="11.6172%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5262%" y="693" width="0.0795%" height="15" fill="rgb(249,212,39)" fg:x="145" fg:w="1"/><text x="11.7762%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.5262%" y="677" width="0.0795%" height="15" fill="rgb(236,90,9)" fg:x="145" fg:w="1"/><text x="11.7762%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5262%" y="661" width="0.0795%" height="15" fill="rgb(206,88,35)" fg:x="145" fg:w="1"/><text x="11.7762%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6057%" y="677" width="0.0795%" height="15" fill="rgb(205,126,30)" fg:x="146" fg:w="1"/><text x="11.8557%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="11.6057%" y="709" width="0.1590%" height="15" fill="rgb(230,176,12)" fg:x="146" fg:w="2"/><text x="11.8557%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="11.6057%" y="693" width="0.1590%" height="15" fill="rgb(243,19,9)" fg:x="146" fg:w="2"/><text x="11.8557%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.6852%" y="677" width="0.0795%" height="15" fill="rgb(245,171,17)" fg:x="147" fg:w="1"/><text x="11.9352%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="11.7647%" y="693" width="0.0795%" height="15" fill="rgb(227,52,21)" fg:x="148" fg:w="1"/><text x="12.0147%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.7647%" y="677" width="0.0795%" height="15" fill="rgb(238,69,14)" fg:x="148" fg:w="1"/><text x="12.0147%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="11.7647%" y="661" width="0.0795%" height="15" fill="rgb(241,156,39)" fg:x="148" fg:w="1"/><text x="12.0147%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.7647%" y="645" width="0.0795%" height="15" fill="rgb(212,227,28)" fg:x="148" fg:w="1"/><text x="12.0147%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.8442%" y="661" width="0.0795%" height="15" fill="rgb(209,118,27)" fg:x="149" fg:w="1"/><text x="12.0942%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeMut&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="11.8442%" y="645" width="0.0795%" height="15" fill="rgb(226,102,5)" fg:x="149" fg:w="1"/><text x="12.0942%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.9237%" y="661" width="0.0795%" height="15" fill="rgb(223,34,3)" fg:x="150" fg:w="1"/><text x="12.1737%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="11.8442%" y="677" width="0.2385%" height="15" fill="rgb(221,81,38)" fg:x="149" fg:w="3"/><text x="12.0942%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.0032%" y="661" width="0.0795%" height="15" fill="rgb(236,219,28)" fg:x="151" fg:w="1"/><text x="12.2532%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.0827%" y="645" width="0.1590%" height="15" fill="rgb(213,200,14)" fg:x="152" fg:w="2"/><text x="12.3327%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1622%" y="629" width="0.0795%" height="15" fill="rgb(240,33,19)" fg:x="153" fg:w="1"/><text x="12.4122%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1622%" y="613" width="0.0795%" height="15" fill="rgb(233,113,27)" fg:x="153" fg:w="1"/><text x="12.4122%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="11.7647%" y="709" width="0.5564%" height="15" fill="rgb(220,221,18)" fg:x="148" fg:w="7"/><text x="12.0147%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="11.8442%" y="693" width="0.4769%" height="15" fill="rgb(238,92,8)" fg:x="149" fg:w="6"/><text x="12.0942%" y="703.50"></text></g><g><title>serde_json::value::to_value (3 samples, 0.24%)</title><rect x="12.0827%" y="677" width="0.2385%" height="15" fill="rgb(222,164,16)" fg:x="152" fg:w="3"/><text x="12.3327%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="12.0827%" y="661" width="0.2385%" height="15" fill="rgb(241,119,3)" fg:x="152" fg:w="3"/><text x="12.3327%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.2417%" y="645" width="0.0795%" height="15" fill="rgb(241,44,8)" fg:x="154" fg:w="1"/><text x="12.4917%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="12.2417%" y="629" width="0.0795%" height="15" fill="rgb(230,36,40)" fg:x="154" fg:w="1"/><text x="12.4917%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.2417%" y="613" width="0.0795%" height="15" fill="rgb(243,16,36)" fg:x="154" fg:w="1"/><text x="12.4917%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2417%" y="597" width="0.0795%" height="15" fill="rgb(231,4,26)" fg:x="154" fg:w="1"/><text x="12.4917%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.2417%" y="581" width="0.0795%" height="15" fill="rgb(240,9,31)" fg:x="154" fg:w="1"/><text x="12.4917%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.2417%" y="565" width="0.0795%" height="15" fill="rgb(207,173,15)" fg:x="154" fg:w="1"/><text x="12.4917%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.2417%" y="549" width="0.0795%" height="15" fill="rgb(224,192,53)" fg:x="154" fg:w="1"/><text x="12.4917%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2417%" y="533" width="0.0795%" height="15" fill="rgb(223,67,28)" fg:x="154" fg:w="1"/><text x="12.4917%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2417%" y="517" width="0.0795%" height="15" fill="rgb(211,20,47)" fg:x="154" fg:w="1"/><text x="12.4917%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2417%" y="501" width="0.0795%" height="15" fill="rgb(240,228,2)" fg:x="154" fg:w="1"/><text x="12.4917%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.79%)</title><rect x="11.6057%" y="725" width="0.7949%" height="15" fill="rgb(248,151,12)" fg:x="146" fg:w="10"/><text x="11.8557%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3211%" y="709" width="0.0795%" height="15" fill="rgb(244,8,39)" fg:x="155" fg:w="1"/><text x="12.5711%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3211%" y="693" width="0.0795%" height="15" fill="rgb(222,26,8)" fg:x="155" fg:w="1"/><text x="12.5711%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3211%" y="677" width="0.0795%" height="15" fill="rgb(213,106,44)" fg:x="155" fg:w="1"/><text x="12.5711%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3211%" y="661" width="0.0795%" height="15" fill="rgb(214,129,20)" fg:x="155" fg:w="1"/><text x="12.5711%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3211%" y="645" width="0.0795%" height="15" fill="rgb(212,32,13)" fg:x="155" fg:w="1"/><text x="12.5711%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3211%" y="629" width="0.0795%" height="15" fill="rgb(208,168,33)" fg:x="155" fg:w="1"/><text x="12.5711%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.3211%" y="613" width="0.0795%" height="15" fill="rgb(231,207,8)" fg:x="155" fg:w="1"/><text x="12.5711%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.3211%" y="597" width="0.0795%" height="15" fill="rgb(235,219,23)" fg:x="155" fg:w="1"/><text x="12.5711%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.3211%" y="581" width="0.0795%" height="15" fill="rgb(226,216,26)" fg:x="155" fg:w="1"/><text x="12.5711%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="12.3211%" y="565" width="0.0795%" height="15" fill="rgb(239,137,16)" fg:x="155" fg:w="1"/><text x="12.5711%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.3211%" y="549" width="0.0795%" height="15" fill="rgb(207,12,36)" fg:x="155" fg:w="1"/><text x="12.5711%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="12.4006%" y="693" width="0.0795%" height="15" fill="rgb(210,214,24)" fg:x="156" fg:w="1"/><text x="12.6506%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="12.4006%" y="677" width="0.0795%" height="15" fill="rgb(206,56,30)" fg:x="156" fg:w="1"/><text x="12.6506%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="12.4006%" y="661" width="0.0795%" height="15" fill="rgb(228,143,26)" fg:x="156" fg:w="1"/><text x="12.6506%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="12.4006%" y="645" width="0.0795%" height="15" fill="rgb(216,218,46)" fg:x="156" fg:w="1"/><text x="12.6506%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.4006%" y="629" width="0.0795%" height="15" fill="rgb(206,6,19)" fg:x="156" fg:w="1"/><text x="12.6506%" y="639.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="12.4006%" y="613" width="0.0795%" height="15" fill="rgb(239,177,51)" fg:x="156" fg:w="1"/><text x="12.6506%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="12.4006%" y="597" width="0.0795%" height="15" fill="rgb(216,55,25)" fg:x="156" fg:w="1"/><text x="12.6506%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4006%" y="581" width="0.0795%" height="15" fill="rgb(231,163,29)" fg:x="156" fg:w="1"/><text x="12.6506%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4006%" y="565" width="0.0795%" height="15" fill="rgb(232,149,50)" fg:x="156" fg:w="1"/><text x="12.6506%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.4006%" y="549" width="0.0795%" height="15" fill="rgb(223,142,48)" fg:x="156" fg:w="1"/><text x="12.6506%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.4006%" y="533" width="0.0795%" height="15" fill="rgb(245,83,23)" fg:x="156" fg:w="1"/><text x="12.6506%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.4006%" y="517" width="0.0795%" height="15" fill="rgb(224,63,2)" fg:x="156" fg:w="1"/><text x="12.6506%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.4006%" y="501" width="0.0795%" height="15" fill="rgb(218,65,53)" fg:x="156" fg:w="1"/><text x="12.6506%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4006%" y="485" width="0.0795%" height="15" fill="rgb(221,84,29)" fg:x="156" fg:w="1"/><text x="12.6506%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.24%)</title><rect x="12.4006%" y="725" width="0.2385%" height="15" fill="rgb(234,0,32)" fg:x="156" fg:w="3"/><text x="12.6506%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.24%)</title><rect x="12.4006%" y="709" width="0.2385%" height="15" fill="rgb(206,20,16)" fg:x="156" fg:w="3"/><text x="12.6506%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="12.4801%" y="693" width="0.1590%" height="15" fill="rgb(244,172,18)" fg:x="157" fg:w="2"/><text x="12.7301%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="12.4801%" y="677" width="0.1590%" height="15" fill="rgb(254,133,1)" fg:x="157" fg:w="2"/><text x="12.7301%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.4801%" y="661" width="0.1590%" height="15" fill="rgb(222,206,41)" fg:x="157" fg:w="2"/><text x="12.7301%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="12.4801%" y="645" width="0.1590%" height="15" fill="rgb(212,3,42)" fg:x="157" fg:w="2"/><text x="12.7301%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.4801%" y="629" width="0.1590%" height="15" fill="rgb(241,11,4)" fg:x="157" fg:w="2"/><text x="12.7301%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.4801%" y="613" width="0.1590%" height="15" fill="rgb(205,19,26)" fg:x="157" fg:w="2"/><text x="12.7301%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5596%" y="597" width="0.0795%" height="15" fill="rgb(210,179,32)" fg:x="158" fg:w="1"/><text x="12.8096%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.7186%" y="661" width="0.0795%" height="15" fill="rgb(227,116,49)" fg:x="160" fg:w="1"/><text x="12.9686%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.7186%" y="645" width="0.0795%" height="15" fill="rgb(211,146,6)" fg:x="160" fg:w="1"/><text x="12.9686%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.7186%" y="629" width="0.0795%" height="15" fill="rgb(219,44,39)" fg:x="160" fg:w="1"/><text x="12.9686%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.7186%" y="613" width="0.0795%" height="15" fill="rgb(234,128,11)" fg:x="160" fg:w="1"/><text x="12.9686%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.7186%" y="597" width="0.0795%" height="15" fill="rgb(220,183,53)" fg:x="160" fg:w="1"/><text x="12.9686%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="12.7186%" y="693" width="0.1590%" height="15" fill="rgb(213,219,32)" fg:x="160" fg:w="2"/><text x="12.9686%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="12.7186%" y="677" width="0.1590%" height="15" fill="rgb(232,156,16)" fg:x="160" fg:w="2"/><text x="12.9686%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.7981%" y="661" width="0.0795%" height="15" fill="rgb(246,135,34)" fg:x="161" fg:w="1"/><text x="13.0481%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.7981%" y="645" width="0.0795%" height="15" fill="rgb(241,99,0)" fg:x="161" fg:w="1"/><text x="13.0481%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.7981%" y="629" width="0.0795%" height="15" fill="rgb(222,103,45)" fg:x="161" fg:w="1"/><text x="13.0481%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7981%" y="613" width="0.0795%" height="15" fill="rgb(212,57,4)" fg:x="161" fg:w="1"/><text x="13.0481%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.7981%" y="597" width="0.0795%" height="15" fill="rgb(215,68,47)" fg:x="161" fg:w="1"/><text x="13.0481%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.7981%" y="581" width="0.0795%" height="15" fill="rgb(230,84,2)" fg:x="161" fg:w="1"/><text x="13.0481%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.7981%" y="565" width="0.0795%" height="15" fill="rgb(220,102,14)" fg:x="161" fg:w="1"/><text x="13.0481%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8776%" y="645" width="0.0795%" height="15" fill="rgb(240,10,32)" fg:x="162" fg:w="1"/><text x="13.1276%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8776%" y="629" width="0.0795%" height="15" fill="rgb(215,47,27)" fg:x="162" fg:w="1"/><text x="13.1276%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8776%" y="613" width="0.0795%" height="15" fill="rgb(233,188,43)" fg:x="162" fg:w="1"/><text x="13.1276%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="12.8776%" y="693" width="0.1590%" height="15" fill="rgb(253,190,1)" fg:x="162" fg:w="2"/><text x="13.1276%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="12.8776%" y="677" width="0.1590%" height="15" fill="rgb(206,114,52)" fg:x="162" fg:w="2"/><text x="13.1276%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.8776%" y="661" width="0.1590%" height="15" fill="rgb(233,120,37)" fg:x="162" fg:w="2"/><text x="13.1276%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.9571%" y="645" width="0.0795%" height="15" fill="rgb(214,52,39)" fg:x="163" fg:w="1"/><text x="13.2071%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="12.9571%" y="629" width="0.0795%" height="15" fill="rgb(223,80,29)" fg:x="163" fg:w="1"/><text x="13.2071%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.9571%" y="613" width="0.0795%" height="15" fill="rgb(230,101,40)" fg:x="163" fg:w="1"/><text x="13.2071%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9571%" y="597" width="0.0795%" height="15" fill="rgb(219,211,8)" fg:x="163" fg:w="1"/><text x="13.2071%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="13.0366%" y="677" width="0.0795%" height="15" fill="rgb(252,126,28)" fg:x="164" fg:w="1"/><text x="13.2866%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.0366%" y="661" width="0.0795%" height="15" fill="rgb(215,56,38)" fg:x="164" fg:w="1"/><text x="13.2866%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.1161%" y="613" width="0.0795%" height="15" fill="rgb(249,55,44)" fg:x="165" fg:w="1"/><text x="13.3661%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.1161%" y="597" width="0.0795%" height="15" fill="rgb(220,221,32)" fg:x="165" fg:w="1"/><text x="13.3661%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="13.0366%" y="693" width="0.2385%" height="15" fill="rgb(212,216,41)" fg:x="164" fg:w="3"/><text x="13.2866%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="13.1161%" y="677" width="0.1590%" height="15" fill="rgb(228,213,43)" fg:x="165" fg:w="2"/><text x="13.3661%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="13.1161%" y="661" width="0.1590%" height="15" fill="rgb(211,31,26)" fg:x="165" fg:w="2"/><text x="13.3661%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="13.1161%" y="645" width="0.1590%" height="15" fill="rgb(229,202,19)" fg:x="165" fg:w="2"/><text x="13.3661%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="13.1161%" y="629" width="0.1590%" height="15" fill="rgb(229,105,46)" fg:x="165" fg:w="2"/><text x="13.3661%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1955%" y="613" width="0.0795%" height="15" fill="rgb(235,108,1)" fg:x="166" fg:w="1"/><text x="13.4455%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1955%" y="597" width="0.0795%" height="15" fill="rgb(245,111,35)" fg:x="166" fg:w="1"/><text x="13.4455%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.1955%" y="581" width="0.0795%" height="15" fill="rgb(219,185,31)" fg:x="166" fg:w="1"/><text x="13.4455%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1955%" y="565" width="0.0795%" height="15" fill="rgb(214,4,43)" fg:x="166" fg:w="1"/><text x="13.4455%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.1955%" y="549" width="0.0795%" height="15" fill="rgb(235,227,40)" fg:x="166" fg:w="1"/><text x="13.4455%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1955%" y="533" width="0.0795%" height="15" fill="rgb(230,88,30)" fg:x="166" fg:w="1"/><text x="13.4455%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.1955%" y="517" width="0.0795%" height="15" fill="rgb(216,217,1)" fg:x="166" fg:w="1"/><text x="13.4455%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (10 samples, 0.79%)</title><rect x="12.6391%" y="725" width="0.7949%" height="15" fill="rgb(248,139,50)" fg:x="159" fg:w="10"/><text x="12.8891%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (10 samples, 0.79%)</title><rect x="12.6391%" y="709" width="0.7949%" height="15" fill="rgb(233,1,21)" fg:x="159" fg:w="10"/><text x="12.8891%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="13.2750%" y="693" width="0.1590%" height="15" fill="rgb(215,183,12)" fg:x="167" fg:w="2"/><text x="13.5250%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.3545%" y="677" width="0.0795%" height="15" fill="rgb(229,104,42)" fg:x="168" fg:w="1"/><text x="13.6045%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.3545%" y="661" width="0.0795%" height="15" fill="rgb(243,34,48)" fg:x="168" fg:w="1"/><text x="13.6045%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="13.4340%" y="709" width="0.0795%" height="15" fill="rgb(239,11,44)" fg:x="169" fg:w="1"/><text x="13.6840%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4340%" y="693" width="0.0795%" height="15" fill="rgb(231,98,35)" fg:x="169" fg:w="1"/><text x="13.6840%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5135%" y="693" width="0.0795%" height="15" fill="rgb(233,28,25)" fg:x="170" fg:w="1"/><text x="13.7635%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.5135%" y="677" width="0.0795%" height="15" fill="rgb(234,123,11)" fg:x="170" fg:w="1"/><text x="13.7635%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.5135%" y="661" width="0.0795%" height="15" fill="rgb(220,69,3)" fg:x="170" fg:w="1"/><text x="13.7635%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (3 samples, 0.24%)</title><rect x="13.5135%" y="709" width="0.2385%" height="15" fill="rgb(214,64,36)" fg:x="170" fg:w="3"/><text x="13.7635%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="13.5930%" y="693" width="0.1590%" height="15" fill="rgb(211,138,32)" fg:x="171" fg:w="2"/><text x="13.8430%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.6725%" y="677" width="0.0795%" height="15" fill="rgb(213,118,47)" fg:x="172" fg:w="1"/><text x="13.9225%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.6725%" y="661" width="0.0795%" height="15" fill="rgb(243,124,49)" fg:x="172" fg:w="1"/><text x="13.9225%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.6725%" y="645" width="0.0795%" height="15" fill="rgb(221,30,28)" fg:x="172" fg:w="1"/><text x="13.9225%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.7520%" y="565" width="0.0795%" height="15" fill="rgb(246,37,13)" fg:x="173" fg:w="1"/><text x="14.0020%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7520%" y="549" width="0.0795%" height="15" fill="rgb(249,66,14)" fg:x="173" fg:w="1"/><text x="14.0020%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7520%" y="533" width="0.0795%" height="15" fill="rgb(213,166,5)" fg:x="173" fg:w="1"/><text x="14.0020%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.7520%" y="517" width="0.0795%" height="15" fill="rgb(221,66,24)" fg:x="173" fg:w="1"/><text x="14.0020%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.7520%" y="501" width="0.0795%" height="15" fill="rgb(210,132,17)" fg:x="173" fg:w="1"/><text x="14.0020%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.7520%" y="485" width="0.0795%" height="15" fill="rgb(243,202,5)" fg:x="173" fg:w="1"/><text x="14.0020%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7520%" y="469" width="0.0795%" height="15" fill="rgb(233,70,48)" fg:x="173" fg:w="1"/><text x="14.0020%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7520%" y="453" width="0.0795%" height="15" fill="rgb(238,41,26)" fg:x="173" fg:w="1"/><text x="14.0020%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.7520%" y="437" width="0.0795%" height="15" fill="rgb(241,19,31)" fg:x="173" fg:w="1"/><text x="14.0020%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.7520%" y="421" width="0.0795%" height="15" fill="rgb(214,76,10)" fg:x="173" fg:w="1"/><text x="14.0020%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.7520%" y="405" width="0.0795%" height="15" fill="rgb(254,202,22)" fg:x="173" fg:w="1"/><text x="14.0020%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.7520%" y="389" width="0.0795%" height="15" fill="rgb(214,72,24)" fg:x="173" fg:w="1"/><text x="14.0020%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7520%" y="373" width="0.0795%" height="15" fill="rgb(221,92,46)" fg:x="173" fg:w="1"/><text x="14.0020%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.7520%" y="597" width="0.1590%" height="15" fill="rgb(246,13,50)" fg:x="173" fg:w="2"/><text x="14.0020%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.7520%" y="581" width="0.1590%" height="15" fill="rgb(240,165,38)" fg:x="173" fg:w="2"/><text x="14.0020%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8315%" y="565" width="0.0795%" height="15" fill="rgb(241,24,51)" fg:x="174" fg:w="1"/><text x="14.0815%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="13.7520%" y="709" width="0.2385%" height="15" fill="rgb(227,51,44)" fg:x="173" fg:w="3"/><text x="14.0020%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="13.7520%" y="693" width="0.2385%" height="15" fill="rgb(231,121,3)" fg:x="173" fg:w="3"/><text x="14.0020%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="13.7520%" y="677" width="0.2385%" height="15" fill="rgb(245,3,41)" fg:x="173" fg:w="3"/><text x="14.0020%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="13.7520%" y="661" width="0.2385%" height="15" fill="rgb(214,13,26)" fg:x="173" fg:w="3"/><text x="14.0020%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="13.7520%" y="645" width="0.2385%" height="15" fill="rgb(252,75,11)" fg:x="173" fg:w="3"/><text x="14.0020%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="13.7520%" y="629" width="0.2385%" height="15" fill="rgb(218,226,17)" fg:x="173" fg:w="3"/><text x="14.0020%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="13.7520%" y="613" width="0.2385%" height="15" fill="rgb(248,89,38)" fg:x="173" fg:w="3"/><text x="14.0020%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.9110%" y="597" width="0.0795%" height="15" fill="rgb(237,73,46)" fg:x="175" fg:w="1"/><text x="14.1610%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="13.9905%" y="709" width="0.0795%" height="15" fill="rgb(242,78,33)" fg:x="176" fg:w="1"/><text x="14.2405%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.9905%" y="693" width="0.0795%" height="15" fill="rgb(235,60,3)" fg:x="176" fg:w="1"/><text x="14.2405%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1494%" y="677" width="0.0795%" height="15" fill="rgb(216,172,19)" fg:x="178" fg:w="1"/><text x="14.3994%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="14.1494%" y="661" width="0.0795%" height="15" fill="rgb(227,6,42)" fg:x="178" fg:w="1"/><text x="14.3994%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.1494%" y="645" width="0.0795%" height="15" fill="rgb(223,207,42)" fg:x="178" fg:w="1"/><text x="14.3994%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="14.1494%" y="693" width="0.1590%" height="15" fill="rgb(246,138,30)" fg:x="178" fg:w="2"/><text x="14.3994%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="14.2289%" y="677" width="0.0795%" height="15" fill="rgb(251,199,47)" fg:x="179" fg:w="1"/><text x="14.4789%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="14.3084%" y="645" width="0.1590%" height="15" fill="rgb(228,218,44)" fg:x="180" fg:w="2"/><text x="14.5584%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="14.3084%" y="629" width="0.1590%" height="15" fill="rgb(220,68,6)" fg:x="180" fg:w="2"/><text x="14.5584%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="14.3084%" y="613" width="0.1590%" height="15" fill="rgb(240,60,26)" fg:x="180" fg:w="2"/><text x="14.5584%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.4674%" y="581" width="0.0795%" height="15" fill="rgb(211,200,19)" fg:x="182" fg:w="1"/><text x="14.7174%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="14.5469%" y="565" width="0.2385%" height="15" fill="rgb(242,145,30)" fg:x="183" fg:w="3"/><text x="14.7969%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="14.5469%" y="549" width="0.2385%" height="15" fill="rgb(225,64,13)" fg:x="183" fg:w="3"/><text x="14.7969%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.7059%" y="533" width="0.0795%" height="15" fill="rgb(218,103,35)" fg:x="185" fg:w="1"/><text x="14.9559%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="14.5469%" y="581" width="0.3180%" height="15" fill="rgb(216,93,46)" fg:x="183" fg:w="4"/><text x="14.7969%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.7854%" y="565" width="0.0795%" height="15" fill="rgb(225,159,27)" fg:x="186" fg:w="1"/><text x="15.0354%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.8649%" y="565" width="0.0795%" height="15" fill="rgb(225,204,11)" fg:x="187" fg:w="1"/><text x="15.1149%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.9444%" y="501" width="0.0795%" height="15" fill="rgb(205,56,4)" fg:x="188" fg:w="1"/><text x="15.1944%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.9444%" y="485" width="0.0795%" height="15" fill="rgb(206,6,35)" fg:x="188" fg:w="1"/><text x="15.1944%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.9444%" y="469" width="0.0795%" height="15" fill="rgb(247,73,52)" fg:x="188" fg:w="1"/><text x="15.1944%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="14.9444%" y="549" width="0.1590%" height="15" fill="rgb(246,97,4)" fg:x="188" fg:w="2"/><text x="15.1944%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.9444%" y="533" width="0.1590%" height="15" fill="rgb(212,37,15)" fg:x="188" fg:w="2"/><text x="15.1944%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="14.9444%" y="517" width="0.1590%" height="15" fill="rgb(208,130,40)" fg:x="188" fg:w="2"/><text x="15.1944%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0238%" y="501" width="0.0795%" height="15" fill="rgb(236,55,29)" fg:x="189" fg:w="1"/><text x="15.2738%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0238%" y="485" width="0.0795%" height="15" fill="rgb(209,156,45)" fg:x="189" fg:w="1"/><text x="15.2738%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.0238%" y="469" width="0.0795%" height="15" fill="rgb(249,107,4)" fg:x="189" fg:w="1"/><text x="15.2738%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.1033%" y="549" width="0.1590%" height="15" fill="rgb(227,7,13)" fg:x="190" fg:w="2"/><text x="15.3533%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.1033%" y="533" width="0.1590%" height="15" fill="rgb(250,129,14)" fg:x="190" fg:w="2"/><text x="15.3533%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.1033%" y="517" width="0.1590%" height="15" fill="rgb(229,92,13)" fg:x="190" fg:w="2"/><text x="15.3533%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.1828%" y="501" width="0.0795%" height="15" fill="rgb(245,98,39)" fg:x="191" fg:w="1"/><text x="15.4328%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.1828%" y="485" width="0.0795%" height="15" fill="rgb(234,135,48)" fg:x="191" fg:w="1"/><text x="15.4328%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.1828%" y="469" width="0.0795%" height="15" fill="rgb(230,98,28)" fg:x="191" fg:w="1"/><text x="15.4328%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.1828%" y="453" width="0.0795%" height="15" fill="rgb(223,121,0)" fg:x="191" fg:w="1"/><text x="15.4328%" y="463.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="15.3418%" y="533" width="0.0795%" height="15" fill="rgb(234,173,33)" fg:x="193" fg:w="1"/><text x="15.5918%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.4213%" y="533" width="0.1590%" height="15" fill="rgb(245,47,8)" fg:x="194" fg:w="2"/><text x="15.6713%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.4213%" y="517" width="0.1590%" height="15" fill="rgb(205,17,20)" fg:x="194" fg:w="2"/><text x="15.6713%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.4213%" y="501" width="0.1590%" height="15" fill="rgb(232,151,16)" fg:x="194" fg:w="2"/><text x="15.6713%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="15.4213%" y="485" width="0.1590%" height="15" fill="rgb(208,30,32)" fg:x="194" fg:w="2"/><text x="15.6713%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.4213%" y="469" width="0.1590%" height="15" fill="rgb(254,26,3)" fg:x="194" fg:w="2"/><text x="15.6713%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.4213%" y="453" width="0.1590%" height="15" fill="rgb(240,177,30)" fg:x="194" fg:w="2"/><text x="15.6713%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.4213%" y="437" width="0.1590%" height="15" fill="rgb(248,76,44)" fg:x="194" fg:w="2"/><text x="15.6713%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.6598%" y="517" width="0.0795%" height="15" fill="rgb(241,186,54)" fg:x="197" fg:w="1"/><text x="15.9098%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="15.7393%" y="517" width="0.1590%" height="15" fill="rgb(249,171,29)" fg:x="198" fg:w="2"/><text x="15.9893%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.7393%" y="501" width="0.1590%" height="15" fill="rgb(237,151,44)" fg:x="198" fg:w="2"/><text x="15.9893%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.7393%" y="485" width="0.1590%" height="15" fill="rgb(228,174,30)" fg:x="198" fg:w="2"/><text x="15.9893%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.8188%" y="469" width="0.0795%" height="15" fill="rgb(252,14,37)" fg:x="199" fg:w="1"/><text x="16.0688%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.8188%" y="453" width="0.0795%" height="15" fill="rgb(207,111,40)" fg:x="199" fg:w="1"/><text x="16.0688%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.8188%" y="437" width="0.0795%" height="15" fill="rgb(248,171,54)" fg:x="199" fg:w="1"/><text x="16.0688%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.8188%" y="421" width="0.0795%" height="15" fill="rgb(211,127,2)" fg:x="199" fg:w="1"/><text x="16.0688%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.03%)</title><rect x="14.9444%" y="565" width="1.0334%" height="15" fill="rgb(236,87,47)" fg:x="188" fg:w="13"/><text x="15.1944%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="15.2623%" y="549" width="0.7154%" height="15" fill="rgb(223,190,45)" fg:x="192" fg:w="9"/><text x="15.5123%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="15.5803%" y="533" width="0.3975%" height="15" fill="rgb(215,5,16)" fg:x="196" fg:w="5"/><text x="15.8303%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="15.8983%" y="517" width="0.0795%" height="15" fill="rgb(252,82,33)" fg:x="200" fg:w="1"/><text x="16.1483%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.9777%" y="533" width="0.0795%" height="15" fill="rgb(247,213,44)" fg:x="201" fg:w="1"/><text x="16.2277%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (21 samples, 1.67%)</title><rect x="14.4674%" y="597" width="1.6693%" height="15" fill="rgb(205,196,44)" fg:x="182" fg:w="21"/><text x="14.7174%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.27%)</title><rect x="14.8649%" y="581" width="1.2719%" height="15" fill="rgb(237,96,54)" fg:x="187" fg:w="16"/><text x="15.1149%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="15.9777%" y="565" width="0.1590%" height="15" fill="rgb(230,113,34)" fg:x="201" fg:w="2"/><text x="16.2277%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="15.9777%" y="549" width="0.1590%" height="15" fill="rgb(221,224,12)" fg:x="201" fg:w="2"/><text x="16.2277%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="16.0572%" y="533" width="0.0795%" height="15" fill="rgb(219,112,44)" fg:x="202" fg:w="1"/><text x="16.3072%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.2162%" y="549" width="0.0795%" height="15" fill="rgb(210,31,13)" fg:x="204" fg:w="1"/><text x="16.4662%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="16.1367%" y="597" width="0.5564%" height="15" fill="rgb(230,25,16)" fg:x="203" fg:w="7"/><text x="16.3867%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="16.1367%" y="581" width="0.5564%" height="15" fill="rgb(246,108,53)" fg:x="203" fg:w="7"/><text x="16.3867%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="16.1367%" y="565" width="0.5564%" height="15" fill="rgb(241,172,50)" fg:x="203" fg:w="7"/><text x="16.3867%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="16.2957%" y="549" width="0.3975%" height="15" fill="rgb(235,141,10)" fg:x="205" fg:w="5"/><text x="16.5457%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="16.2957%" y="533" width="0.3975%" height="15" fill="rgb(220,174,43)" fg:x="205" fg:w="5"/><text x="16.5457%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="16.4547%" y="517" width="0.2385%" height="15" fill="rgb(215,181,40)" fg:x="207" fg:w="3"/><text x="16.7047%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="16.4547%" y="501" width="0.2385%" height="15" fill="rgb(230,97,2)" fg:x="207" fg:w="3"/><text x="16.7047%" y="511.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="16.4547%" y="485" width="0.2385%" height="15" fill="rgb(211,25,27)" fg:x="207" fg:w="3"/><text x="16.7047%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="16.6932%" y="581" width="0.0795%" height="15" fill="rgb(230,87,26)" fg:x="210" fg:w="1"/><text x="16.9432%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.8521%" y="549" width="0.0795%" height="15" fill="rgb(227,160,17)" fg:x="212" fg:w="1"/><text x="17.1021%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="16.9316%" y="549" width="0.0795%" height="15" fill="rgb(244,85,34)" fg:x="213" fg:w="1"/><text x="17.1816%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0111%" y="501" width="0.0795%" height="15" fill="rgb(207,70,0)" fg:x="214" fg:w="1"/><text x="17.2611%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0111%" y="485" width="0.0795%" height="15" fill="rgb(223,129,7)" fg:x="214" fg:w="1"/><text x="17.2611%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0111%" y="469" width="0.0795%" height="15" fill="rgb(246,105,7)" fg:x="214" fg:w="1"/><text x="17.2611%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1701%" y="453" width="0.0795%" height="15" fill="rgb(215,154,42)" fg:x="216" fg:w="1"/><text x="17.4201%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1701%" y="437" width="0.0795%" height="15" fill="rgb(220,215,30)" fg:x="216" fg:w="1"/><text x="17.4201%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1701%" y="421" width="0.0795%" height="15" fill="rgb(228,81,51)" fg:x="216" fg:w="1"/><text x="17.4201%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="17.0906%" y="501" width="0.2385%" height="15" fill="rgb(247,71,54)" fg:x="215" fg:w="3"/><text x="17.3406%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.0906%" y="485" width="0.2385%" height="15" fill="rgb(234,176,34)" fg:x="215" fg:w="3"/><text x="17.3406%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.1701%" y="469" width="0.1590%" height="15" fill="rgb(241,103,54)" fg:x="216" fg:w="2"/><text x="17.4201%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2496%" y="453" width="0.0795%" height="15" fill="rgb(228,22,34)" fg:x="217" fg:w="1"/><text x="17.4996%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4086%" y="469" width="0.0795%" height="15" fill="rgb(241,179,48)" fg:x="219" fg:w="1"/><text x="17.6586%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4086%" y="453" width="0.0795%" height="15" fill="rgb(235,167,37)" fg:x="219" fg:w="1"/><text x="17.6586%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="17.0111%" y="533" width="0.5564%" height="15" fill="rgb(213,109,30)" fg:x="214" fg:w="7"/><text x="17.2611%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="17.0111%" y="517" width="0.5564%" height="15" fill="rgb(222,172,16)" fg:x="214" fg:w="7"/><text x="17.2611%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="17.3291%" y="501" width="0.2385%" height="15" fill="rgb(233,192,5)" fg:x="218" fg:w="3"/><text x="17.5791%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="17.4086%" y="485" width="0.1590%" height="15" fill="rgb(247,189,41)" fg:x="219" fg:w="2"/><text x="17.6586%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.4881%" y="469" width="0.0795%" height="15" fill="rgb(218,134,47)" fg:x="220" fg:w="1"/><text x="17.7381%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.4881%" y="453" width="0.0795%" height="15" fill="rgb(216,29,3)" fg:x="220" fg:w="1"/><text x="17.7381%" y="463.50"></text></g><g><title>engine::session::Session::flush (45 samples, 3.58%)</title><rect x="14.0700%" y="709" width="3.5771%" height="15" fill="rgb(246,140,12)" fg:x="177" fg:w="45"/><text x="14.3200%" y="719.50">engi..</text></g><g><title>engine::session::Session::save_changes (42 samples, 3.34%)</title><rect x="14.3084%" y="693" width="3.3386%" height="15" fill="rgb(230,136,11)" fg:x="180" fg:w="42"/><text x="14.5584%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (42 samples, 3.34%)</title><rect x="14.3084%" y="677" width="3.3386%" height="15" fill="rgb(247,22,47)" fg:x="180" fg:w="42"/><text x="14.5584%" y="687.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.34%)</title><rect x="14.3084%" y="661" width="3.3386%" height="15" fill="rgb(218,84,22)" fg:x="180" fg:w="42"/><text x="14.5584%" y="671.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.18%)</title><rect x="14.4674%" y="645" width="3.1797%" height="15" fill="rgb(216,87,39)" fg:x="182" fg:w="40"/><text x="14.7174%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.18%)</title><rect x="14.4674%" y="629" width="3.1797%" height="15" fill="rgb(221,178,8)" fg:x="182" fg:w="40"/><text x="14.7174%" y="639.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.18%)</title><rect x="14.4674%" y="613" width="3.1797%" height="15" fill="rgb(230,42,11)" fg:x="182" fg:w="40"/><text x="14.7174%" y="623.50">eng..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.95%)</title><rect x="16.6932%" y="597" width="0.9539%" height="15" fill="rgb(237,229,4)" fg:x="210" fg:w="12"/><text x="16.9432%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.87%)</title><rect x="16.7727%" y="581" width="0.8744%" height="15" fill="rgb(222,31,33)" fg:x="211" fg:w="11"/><text x="17.0227%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.79%)</title><rect x="16.8521%" y="565" width="0.7949%" height="15" fill="rgb(210,17,39)" fg:x="212" fg:w="10"/><text x="17.1021%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="17.0111%" y="549" width="0.6359%" height="15" fill="rgb(244,93,20)" fg:x="214" fg:w="8"/><text x="17.2611%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5676%" y="533" width="0.0795%" height="15" fill="rgb(210,40,47)" fg:x="221" fg:w="1"/><text x="17.8176%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5676%" y="517" width="0.0795%" height="15" fill="rgb(239,211,47)" fg:x="221" fg:w="1"/><text x="17.8176%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.5676%" y="501" width="0.0795%" height="15" fill="rgb(251,223,49)" fg:x="221" fg:w="1"/><text x="17.8176%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="17.6471%" y="709" width="0.0795%" height="15" fill="rgb(221,149,5)" fg:x="222" fg:w="1"/><text x="17.8971%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="17.6471%" y="693" width="0.0795%" height="15" fill="rgb(219,224,51)" fg:x="222" fg:w="1"/><text x="17.8971%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6471%" y="677" width="0.0795%" height="15" fill="rgb(223,7,8)" fg:x="222" fg:w="1"/><text x="17.8971%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6471%" y="661" width="0.0795%" height="15" fill="rgb(241,217,22)" fg:x="222" fg:w="1"/><text x="17.8971%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6471%" y="645" width="0.0795%" height="15" fill="rgb(248,209,0)" fg:x="222" fg:w="1"/><text x="17.8971%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6471%" y="629" width="0.0795%" height="15" fill="rgb(217,205,4)" fg:x="222" fg:w="1"/><text x="17.8971%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6471%" y="613" width="0.0795%" height="15" fill="rgb(228,124,39)" fg:x="222" fg:w="1"/><text x="17.8971%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="17.7266%" y="709" width="0.0795%" height="15" fill="rgb(250,116,42)" fg:x="223" fg:w="1"/><text x="17.9766%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="17.7266%" y="693" width="0.0795%" height="15" fill="rgb(223,202,9)" fg:x="223" fg:w="1"/><text x="17.9766%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.7266%" y="677" width="0.0795%" height="15" fill="rgb(242,222,40)" fg:x="223" fg:w="1"/><text x="17.9766%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.7266%" y="661" width="0.0795%" height="15" fill="rgb(229,99,46)" fg:x="223" fg:w="1"/><text x="17.9766%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.7266%" y="645" width="0.0795%" height="15" fill="rgb(225,56,46)" fg:x="223" fg:w="1"/><text x="17.9766%" y="655.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="17.7266%" y="629" width="0.0795%" height="15" fill="rgb(227,94,5)" fg:x="223" fg:w="1"/><text x="17.9766%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="17.7266%" y="613" width="0.0795%" height="15" fill="rgb(205,112,38)" fg:x="223" fg:w="1"/><text x="17.9766%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7266%" y="597" width="0.0795%" height="15" fill="rgb(231,133,46)" fg:x="223" fg:w="1"/><text x="17.9766%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7266%" y="581" width="0.0795%" height="15" fill="rgb(217,16,9)" fg:x="223" fg:w="1"/><text x="17.9766%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.7266%" y="565" width="0.0795%" height="15" fill="rgb(249,173,9)" fg:x="223" fg:w="1"/><text x="17.9766%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.7266%" y="549" width="0.0795%" height="15" fill="rgb(205,163,53)" fg:x="223" fg:w="1"/><text x="17.9766%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.7266%" y="533" width="0.0795%" height="15" fill="rgb(217,54,41)" fg:x="223" fg:w="1"/><text x="17.9766%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.7266%" y="517" width="0.0795%" height="15" fill="rgb(228,216,12)" fg:x="223" fg:w="1"/><text x="17.9766%" y="527.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.8060%" y="693" width="0.0795%" height="15" fill="rgb(244,228,15)" fg:x="224" fg:w="1"/><text x="18.0560%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.8060%" y="677" width="0.0795%" height="15" fill="rgb(221,176,53)" fg:x="224" fg:w="1"/><text x="18.0560%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8060%" y="661" width="0.0795%" height="15" fill="rgb(205,94,34)" fg:x="224" fg:w="1"/><text x="18.0560%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8060%" y="645" width="0.0795%" height="15" fill="rgb(213,110,48)" fg:x="224" fg:w="1"/><text x="18.0560%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.8060%" y="629" width="0.0795%" height="15" fill="rgb(236,142,28)" fg:x="224" fg:w="1"/><text x="18.0560%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8060%" y="613" width="0.0795%" height="15" fill="rgb(225,135,29)" fg:x="224" fg:w="1"/><text x="18.0560%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8060%" y="597" width="0.0795%" height="15" fill="rgb(252,45,31)" fg:x="224" fg:w="1"/><text x="18.0560%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.8060%" y="581" width="0.0795%" height="15" fill="rgb(211,187,50)" fg:x="224" fg:w="1"/><text x="18.0560%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.8060%" y="565" width="0.0795%" height="15" fill="rgb(229,109,7)" fg:x="224" fg:w="1"/><text x="18.0560%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.8060%" y="549" width="0.0795%" height="15" fill="rgb(251,131,51)" fg:x="224" fg:w="1"/><text x="18.0560%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8060%" y="533" width="0.0795%" height="15" fill="rgb(251,180,35)" fg:x="224" fg:w="1"/><text x="18.0560%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8060%" y="517" width="0.0795%" height="15" fill="rgb(211,46,32)" fg:x="224" fg:w="1"/><text x="18.0560%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.8060%" y="501" width="0.0795%" height="15" fill="rgb(248,123,17)" fg:x="224" fg:w="1"/><text x="18.0560%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.8060%" y="485" width="0.0795%" height="15" fill="rgb(227,141,18)" fg:x="224" fg:w="1"/><text x="18.0560%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.8060%" y="469" width="0.0795%" height="15" fill="rgb(216,102,9)" fg:x="224" fg:w="1"/><text x="18.0560%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.8060%" y="453" width="0.0795%" height="15" fill="rgb(253,47,13)" fg:x="224" fg:w="1"/><text x="18.0560%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8060%" y="437" width="0.0795%" height="15" fill="rgb(226,93,23)" fg:x="224" fg:w="1"/><text x="18.0560%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8855%" y="693" width="0.0795%" height="15" fill="rgb(247,104,17)" fg:x="225" fg:w="1"/><text x="18.1355%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.8855%" y="677" width="0.0795%" height="15" fill="rgb(233,203,26)" fg:x="225" fg:w="1"/><text x="18.1355%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.8855%" y="661" width="0.0795%" height="15" fill="rgb(244,98,49)" fg:x="225" fg:w="1"/><text x="18.1355%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.8855%" y="645" width="0.0795%" height="15" fill="rgb(235,134,22)" fg:x="225" fg:w="1"/><text x="18.1355%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.8855%" y="629" width="0.0795%" height="15" fill="rgb(221,70,32)" fg:x="225" fg:w="1"/><text x="18.1355%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8855%" y="613" width="0.0795%" height="15" fill="rgb(238,15,50)" fg:x="225" fg:w="1"/><text x="18.1355%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.8855%" y="597" width="0.0795%" height="15" fill="rgb(215,221,48)" fg:x="225" fg:w="1"/><text x="18.1355%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.8855%" y="581" width="0.0795%" height="15" fill="rgb(236,73,3)" fg:x="225" fg:w="1"/><text x="18.1355%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.8855%" y="565" width="0.0795%" height="15" fill="rgb(250,107,11)" fg:x="225" fg:w="1"/><text x="18.1355%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.8855%" y="549" width="0.0795%" height="15" fill="rgb(242,39,14)" fg:x="225" fg:w="1"/><text x="18.1355%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.8855%" y="533" width="0.0795%" height="15" fill="rgb(248,164,37)" fg:x="225" fg:w="1"/><text x="18.1355%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8855%" y="517" width="0.0795%" height="15" fill="rgb(217,60,12)" fg:x="225" fg:w="1"/><text x="18.1355%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.9650%" y="677" width="0.0795%" height="15" fill="rgb(240,125,29)" fg:x="226" fg:w="1"/><text x="18.2150%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="18.0445%" y="677" width="0.0795%" height="15" fill="rgb(208,207,28)" fg:x="227" fg:w="1"/><text x="18.2945%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.0445%" y="661" width="0.0795%" height="15" fill="rgb(209,159,27)" fg:x="227" fg:w="1"/><text x="18.2945%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="18.0445%" y="645" width="0.0795%" height="15" fill="rgb(251,176,53)" fg:x="227" fg:w="1"/><text x="18.2945%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.0445%" y="629" width="0.0795%" height="15" fill="rgb(211,85,7)" fg:x="227" fg:w="1"/><text x="18.2945%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="18.0445%" y="613" width="0.0795%" height="15" fill="rgb(216,64,54)" fg:x="227" fg:w="1"/><text x="18.2945%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1240%" y="629" width="0.0795%" height="15" fill="rgb(217,54,24)" fg:x="228" fg:w="1"/><text x="18.3740%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1240%" y="613" width="0.0795%" height="15" fill="rgb(208,206,53)" fg:x="228" fg:w="1"/><text x="18.3740%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1240%" y="597" width="0.0795%" height="15" fill="rgb(251,74,39)" fg:x="228" fg:w="1"/><text x="18.3740%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="18.2035%" y="629" width="0.0795%" height="15" fill="rgb(226,47,5)" fg:x="229" fg:w="1"/><text x="18.4535%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="18.1240%" y="645" width="0.2385%" height="15" fill="rgb(234,111,33)" fg:x="228" fg:w="3"/><text x="18.3740%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.2830%" y="629" width="0.0795%" height="15" fill="rgb(251,14,10)" fg:x="230" fg:w="1"/><text x="18.5330%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.2830%" y="613" width="0.0795%" height="15" fill="rgb(232,43,0)" fg:x="230" fg:w="1"/><text x="18.5330%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.2830%" y="597" width="0.0795%" height="15" fill="rgb(222,68,43)" fg:x="230" fg:w="1"/><text x="18.5330%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.3625%" y="645" width="0.0795%" height="15" fill="rgb(217,24,23)" fg:x="231" fg:w="1"/><text x="18.6125%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3625%" y="629" width="0.0795%" height="15" fill="rgb(229,209,14)" fg:x="231" fg:w="1"/><text x="18.6125%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.3625%" y="613" width="0.0795%" height="15" fill="rgb(250,149,48)" fg:x="231" fg:w="1"/><text x="18.6125%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="18.3625%" y="597" width="0.0795%" height="15" fill="rgb(210,120,37)" fg:x="231" fg:w="1"/><text x="18.6125%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="18.1240%" y="661" width="0.3975%" height="15" fill="rgb(210,21,8)" fg:x="228" fg:w="5"/><text x="18.3740%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="18.4420%" y="645" width="0.0795%" height="15" fill="rgb(243,145,7)" fg:x="232" fg:w="1"/><text x="18.6920%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.4420%" y="629" width="0.0795%" height="15" fill="rgb(238,178,32)" fg:x="232" fg:w="1"/><text x="18.6920%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="18.6010%" y="613" width="0.1590%" height="15" fill="rgb(222,4,10)" fg:x="234" fg:w="2"/><text x="18.8510%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.6010%" y="597" width="0.1590%" height="15" fill="rgb(239,7,37)" fg:x="234" fg:w="2"/><text x="18.8510%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.6010%" y="581" width="0.1590%" height="15" fill="rgb(215,31,37)" fg:x="234" fg:w="2"/><text x="18.8510%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.6804%" y="565" width="0.0795%" height="15" fill="rgb(224,83,33)" fg:x="235" fg:w="1"/><text x="18.9304%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6804%" y="549" width="0.0795%" height="15" fill="rgb(239,55,3)" fg:x="235" fg:w="1"/><text x="18.9304%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.6804%" y="533" width="0.0795%" height="15" fill="rgb(247,92,11)" fg:x="235" fg:w="1"/><text x="18.9304%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6804%" y="517" width="0.0795%" height="15" fill="rgb(239,200,7)" fg:x="235" fg:w="1"/><text x="18.9304%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6804%" y="501" width="0.0795%" height="15" fill="rgb(227,115,8)" fg:x="235" fg:w="1"/><text x="18.9304%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="18.6010%" y="629" width="0.2385%" height="15" fill="rgb(215,189,27)" fg:x="234" fg:w="3"/><text x="18.8510%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7599%" y="613" width="0.0795%" height="15" fill="rgb(251,216,39)" fg:x="236" fg:w="1"/><text x="19.0099%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.95%)</title><rect x="17.9650%" y="693" width="0.9539%" height="15" fill="rgb(207,29,47)" fg:x="226" fg:w="12"/><text x="18.2150%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (10 samples, 0.79%)</title><rect x="18.1240%" y="677" width="0.7949%" height="15" fill="rgb(210,71,34)" fg:x="228" fg:w="10"/><text x="18.3740%" y="687.50"></text></g><g><title>serde_json::value::to_value (5 samples, 0.40%)</title><rect x="18.5215%" y="661" width="0.3975%" height="15" fill="rgb(253,217,51)" fg:x="233" fg:w="5"/><text x="18.7715%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="18.5215%" y="645" width="0.3975%" height="15" fill="rgb(222,117,46)" fg:x="233" fg:w="5"/><text x="18.7715%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="18.8394%" y="629" width="0.0795%" height="15" fill="rgb(226,132,6)" fg:x="237" fg:w="1"/><text x="19.0894%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.8394%" y="613" width="0.0795%" height="15" fill="rgb(254,145,51)" fg:x="237" fg:w="1"/><text x="19.0894%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.8394%" y="597" width="0.0795%" height="15" fill="rgb(231,199,27)" fg:x="237" fg:w="1"/><text x="19.0894%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.9189%" y="661" width="0.0795%" height="15" fill="rgb(245,158,14)" fg:x="238" fg:w="1"/><text x="19.1689%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.9189%" y="645" width="0.0795%" height="15" fill="rgb(240,113,14)" fg:x="238" fg:w="1"/><text x="19.1689%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9189%" y="629" width="0.0795%" height="15" fill="rgb(210,20,13)" fg:x="238" fg:w="1"/><text x="19.1689%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9189%" y="613" width="0.0795%" height="15" fill="rgb(241,144,13)" fg:x="238" fg:w="1"/><text x="19.1689%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.9189%" y="597" width="0.0795%" height="15" fill="rgb(235,43,34)" fg:x="238" fg:w="1"/><text x="19.1689%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.9189%" y="581" width="0.0795%" height="15" fill="rgb(208,36,20)" fg:x="238" fg:w="1"/><text x="19.1689%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.9189%" y="565" width="0.0795%" height="15" fill="rgb(239,204,10)" fg:x="238" fg:w="1"/><text x="19.1689%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9189%" y="549" width="0.0795%" height="15" fill="rgb(217,84,43)" fg:x="238" fg:w="1"/><text x="19.1689%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9189%" y="533" width="0.0795%" height="15" fill="rgb(241,170,50)" fg:x="238" fg:w="1"/><text x="19.1689%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.9189%" y="517" width="0.0795%" height="15" fill="rgb(226,205,29)" fg:x="238" fg:w="1"/><text x="19.1689%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.9189%" y="501" width="0.0795%" height="15" fill="rgb(233,113,1)" fg:x="238" fg:w="1"/><text x="19.1689%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.9189%" y="485" width="0.0795%" height="15" fill="rgb(253,98,13)" fg:x="238" fg:w="1"/><text x="19.1689%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.9189%" y="469" width="0.0795%" height="15" fill="rgb(211,115,12)" fg:x="238" fg:w="1"/><text x="19.1689%" y="479.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.27%)</title><rect x="17.8060%" y="709" width="1.2719%" height="15" fill="rgb(208,12,16)" fg:x="224" fg:w="16"/><text x="18.0560%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="18.9189%" y="693" width="0.1590%" height="15" fill="rgb(237,193,54)" fg:x="238" fg:w="2"/><text x="19.1689%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="18.9189%" y="677" width="0.1590%" height="15" fill="rgb(243,22,42)" fg:x="238" fg:w="2"/><text x="19.1689%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9984%" y="661" width="0.0795%" height="15" fill="rgb(233,151,36)" fg:x="239" fg:w="1"/><text x="19.2484%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0779%" y="597" width="0.0795%" height="15" fill="rgb(237,57,45)" fg:x="240" fg:w="1"/><text x="19.3279%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0779%" y="581" width="0.0795%" height="15" fill="rgb(221,88,17)" fg:x="240" fg:w="1"/><text x="19.3279%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.0779%" y="565" width="0.0795%" height="15" fill="rgb(230,79,15)" fg:x="240" fg:w="1"/><text x="19.3279%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.0779%" y="613" width="0.1590%" height="15" fill="rgb(213,57,13)" fg:x="240" fg:w="2"/><text x="19.3279%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1574%" y="597" width="0.0795%" height="15" fill="rgb(222,116,39)" fg:x="241" fg:w="1"/><text x="19.4074%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.1574%" y="581" width="0.0795%" height="15" fill="rgb(245,107,2)" fg:x="241" fg:w="1"/><text x="19.4074%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.1574%" y="565" width="0.0795%" height="15" fill="rgb(238,1,10)" fg:x="241" fg:w="1"/><text x="19.4074%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.1574%" y="549" width="0.0795%" height="15" fill="rgb(249,4,48)" fg:x="241" fg:w="1"/><text x="19.4074%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.1574%" y="533" width="0.0795%" height="15" fill="rgb(223,151,18)" fg:x="241" fg:w="1"/><text x="19.4074%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.1574%" y="517" width="0.0795%" height="15" fill="rgb(227,65,43)" fg:x="241" fg:w="1"/><text x="19.4074%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.1574%" y="501" width="0.0795%" height="15" fill="rgb(218,40,45)" fg:x="241" fg:w="1"/><text x="19.4074%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.1574%" y="485" width="0.0795%" height="15" fill="rgb(252,121,31)" fg:x="241" fg:w="1"/><text x="19.4074%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.1574%" y="469" width="0.0795%" height="15" fill="rgb(219,158,43)" fg:x="241" fg:w="1"/><text x="19.4074%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.1574%" y="453" width="0.0795%" height="15" fill="rgb(231,162,42)" fg:x="241" fg:w="1"/><text x="19.4074%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.1574%" y="437" width="0.0795%" height="15" fill="rgb(217,179,25)" fg:x="241" fg:w="1"/><text x="19.4074%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.1574%" y="421" width="0.0795%" height="15" fill="rgb(206,212,31)" fg:x="241" fg:w="1"/><text x="19.4074%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="19.0779%" y="629" width="0.2385%" height="15" fill="rgb(235,144,12)" fg:x="240" fg:w="3"/><text x="19.3279%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.2369%" y="613" width="0.0795%" height="15" fill="rgb(213,51,10)" fg:x="242" fg:w="1"/><text x="19.4869%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.2369%" y="597" width="0.0795%" height="15" fill="rgb(231,145,14)" fg:x="242" fg:w="1"/><text x="19.4869%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.2369%" y="581" width="0.0795%" height="15" fill="rgb(235,15,28)" fg:x="242" fg:w="1"/><text x="19.4869%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.2369%" y="565" width="0.0795%" height="15" fill="rgb(237,206,10)" fg:x="242" fg:w="1"/><text x="19.4869%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="19.0779%" y="645" width="0.3180%" height="15" fill="rgb(236,227,27)" fg:x="240" fg:w="4"/><text x="19.3279%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="19.3164%" y="629" width="0.0795%" height="15" fill="rgb(246,83,35)" fg:x="243" fg:w="1"/><text x="19.5664%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3164%" y="613" width="0.0795%" height="15" fill="rgb(220,136,24)" fg:x="243" fg:w="1"/><text x="19.5664%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.3959%" y="629" width="0.0795%" height="15" fill="rgb(217,3,25)" fg:x="244" fg:w="1"/><text x="19.6459%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.3959%" y="613" width="0.0795%" height="15" fill="rgb(239,24,14)" fg:x="244" fg:w="1"/><text x="19.6459%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3959%" y="597" width="0.0795%" height="15" fill="rgb(244,16,53)" fg:x="244" fg:w="1"/><text x="19.6459%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.3959%" y="581" width="0.0795%" height="15" fill="rgb(208,175,44)" fg:x="244" fg:w="1"/><text x="19.6459%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3959%" y="565" width="0.0795%" height="15" fill="rgb(252,18,48)" fg:x="244" fg:w="1"/><text x="19.6459%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.3959%" y="549" width="0.0795%" height="15" fill="rgb(234,199,32)" fg:x="244" fg:w="1"/><text x="19.6459%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3959%" y="533" width="0.0795%" height="15" fill="rgb(225,77,54)" fg:x="244" fg:w="1"/><text x="19.6459%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.3959%" y="517" width="0.0795%" height="15" fill="rgb(225,42,25)" fg:x="244" fg:w="1"/><text x="19.6459%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (6 samples, 0.48%)</title><rect x="19.0779%" y="709" width="0.4769%" height="15" fill="rgb(242,227,46)" fg:x="240" fg:w="6"/><text x="19.3279%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="19.0779%" y="693" width="0.4769%" height="15" fill="rgb(246,197,35)" fg:x="240" fg:w="6"/><text x="19.3279%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (6 samples, 0.48%)</title><rect x="19.0779%" y="677" width="0.4769%" height="15" fill="rgb(215,159,26)" fg:x="240" fg:w="6"/><text x="19.3279%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (6 samples, 0.48%)</title><rect x="19.0779%" y="661" width="0.4769%" height="15" fill="rgb(212,194,50)" fg:x="240" fg:w="6"/><text x="19.3279%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="19.3959%" y="645" width="0.1590%" height="15" fill="rgb(246,132,1)" fg:x="244" fg:w="2"/><text x="19.6459%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.4754%" y="629" width="0.0795%" height="15" fill="rgb(217,71,7)" fg:x="245" fg:w="1"/><text x="19.7254%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.5548%" y="661" width="0.0795%" height="15" fill="rgb(252,59,32)" fg:x="246" fg:w="1"/><text x="19.8048%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.5548%" y="645" width="0.0795%" height="15" fill="rgb(253,204,25)" fg:x="246" fg:w="1"/><text x="19.8048%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.5548%" y="677" width="0.1590%" height="15" fill="rgb(232,21,16)" fg:x="246" fg:w="2"/><text x="19.8048%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.6343%" y="661" width="0.0795%" height="15" fill="rgb(248,90,29)" fg:x="247" fg:w="1"/><text x="19.8843%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.6343%" y="645" width="0.0795%" height="15" fill="rgb(249,223,7)" fg:x="247" fg:w="1"/><text x="19.8843%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.7138%" y="645" width="0.0795%" height="15" fill="rgb(231,119,42)" fg:x="248" fg:w="1"/><text x="19.9638%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.7138%" y="629" width="0.0795%" height="15" fill="rgb(215,41,35)" fg:x="248" fg:w="1"/><text x="19.9638%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="19.5548%" y="693" width="0.3180%" height="15" fill="rgb(220,44,45)" fg:x="246" fg:w="4"/><text x="19.8048%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="19.7138%" y="677" width="0.1590%" height="15" fill="rgb(253,197,36)" fg:x="248" fg:w="2"/><text x="19.9638%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.7138%" y="661" width="0.1590%" height="15" fill="rgb(245,225,54)" fg:x="248" fg:w="2"/><text x="19.9638%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.7933%" y="645" width="0.0795%" height="15" fill="rgb(239,94,37)" fg:x="249" fg:w="1"/><text x="20.0433%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.48%)</title><rect x="19.5548%" y="709" width="0.4769%" height="15" fill="rgb(242,217,10)" fg:x="246" fg:w="6"/><text x="19.8048%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="19.8728%" y="693" width="0.1590%" height="15" fill="rgb(250,193,7)" fg:x="250" fg:w="2"/><text x="20.1228%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="19.8728%" y="677" width="0.1590%" height="15" fill="rgb(230,104,19)" fg:x="250" fg:w="2"/><text x="20.1228%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="19.9523%" y="661" width="0.0795%" height="15" fill="rgb(230,181,4)" fg:x="251" fg:w="1"/><text x="20.2023%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="19.9523%" y="645" width="0.0795%" height="15" fill="rgb(216,219,49)" fg:x="251" fg:w="1"/><text x="20.2023%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.0318%" y="693" width="0.0795%" height="15" fill="rgb(254,144,0)" fg:x="252" fg:w="1"/><text x="20.2818%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.0318%" y="677" width="0.0795%" height="15" fill="rgb(205,209,38)" fg:x="252" fg:w="1"/><text x="20.2818%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.0318%" y="661" width="0.0795%" height="15" fill="rgb(240,21,42)" fg:x="252" fg:w="1"/><text x="20.2818%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.0318%" y="645" width="0.0795%" height="15" fill="rgb(241,132,3)" fg:x="252" fg:w="1"/><text x="20.2818%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.1113%" y="677" width="0.0795%" height="15" fill="rgb(225,14,2)" fg:x="253" fg:w="1"/><text x="20.3613%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="20.1113%" y="661" width="0.0795%" height="15" fill="rgb(210,141,35)" fg:x="253" fg:w="1"/><text x="20.3613%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.1908%" y="613" width="0.0795%" height="15" fill="rgb(251,14,44)" fg:x="254" fg:w="1"/><text x="20.4408%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.1908%" y="597" width="0.0795%" height="15" fill="rgb(247,48,18)" fg:x="254" fg:w="1"/><text x="20.4408%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.1908%" y="581" width="0.0795%" height="15" fill="rgb(225,0,40)" fg:x="254" fg:w="1"/><text x="20.4408%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.1908%" y="565" width="0.0795%" height="15" fill="rgb(221,31,33)" fg:x="254" fg:w="1"/><text x="20.4408%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.1908%" y="549" width="0.0795%" height="15" fill="rgb(237,42,40)" fg:x="254" fg:w="1"/><text x="20.4408%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.1908%" y="533" width="0.0795%" height="15" fill="rgb(233,51,29)" fg:x="254" fg:w="1"/><text x="20.4408%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.1908%" y="517" width="0.0795%" height="15" fill="rgb(226,58,20)" fg:x="254" fg:w="1"/><text x="20.4408%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.1908%" y="501" width="0.0795%" height="15" fill="rgb(208,98,7)" fg:x="254" fg:w="1"/><text x="20.4408%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.1908%" y="485" width="0.0795%" height="15" fill="rgb(228,143,44)" fg:x="254" fg:w="1"/><text x="20.4408%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.1908%" y="469" width="0.0795%" height="15" fill="rgb(246,55,38)" fg:x="254" fg:w="1"/><text x="20.4408%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.1908%" y="453" width="0.0795%" height="15" fill="rgb(247,87,16)" fg:x="254" fg:w="1"/><text x="20.4408%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.1908%" y="437" width="0.0795%" height="15" fill="rgb(234,129,42)" fg:x="254" fg:w="1"/><text x="20.4408%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.1908%" y="421" width="0.0795%" height="15" fill="rgb(220,82,16)" fg:x="254" fg:w="1"/><text x="20.4408%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.1908%" y="405" width="0.0795%" height="15" fill="rgb(211,88,4)" fg:x="254" fg:w="1"/><text x="20.4408%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1908%" y="389" width="0.0795%" height="15" fill="rgb(248,151,21)" fg:x="254" fg:w="1"/><text x="20.4408%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="20.1908%" y="645" width="0.1590%" height="15" fill="rgb(238,163,6)" fg:x="254" fg:w="2"/><text x="20.4408%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="20.1908%" y="629" width="0.1590%" height="15" fill="rgb(209,183,11)" fg:x="254" fg:w="2"/><text x="20.4408%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.2703%" y="613" width="0.0795%" height="15" fill="rgb(219,37,20)" fg:x="255" fg:w="1"/><text x="20.5203%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.2703%" y="597" width="0.0795%" height="15" fill="rgb(210,158,4)" fg:x="255" fg:w="1"/><text x="20.5203%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.2703%" y="581" width="0.0795%" height="15" fill="rgb(221,167,53)" fg:x="255" fg:w="1"/><text x="20.5203%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.2703%" y="565" width="0.0795%" height="15" fill="rgb(237,151,45)" fg:x="255" fg:w="1"/><text x="20.5203%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.2703%" y="549" width="0.0795%" height="15" fill="rgb(231,39,3)" fg:x="255" fg:w="1"/><text x="20.5203%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.2703%" y="533" width="0.0795%" height="15" fill="rgb(212,167,28)" fg:x="255" fg:w="1"/><text x="20.5203%" y="543.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="20.0318%" y="709" width="0.3975%" height="15" fill="rgb(232,178,8)" fg:x="252" fg:w="5"/><text x="20.2818%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="20.1113%" y="693" width="0.3180%" height="15" fill="rgb(225,151,20)" fg:x="253" fg:w="4"/><text x="20.3613%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="20.1908%" y="677" width="0.2385%" height="15" fill="rgb(238,3,37)" fg:x="254" fg:w="3"/><text x="20.4408%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="20.1908%" y="661" width="0.2385%" height="15" fill="rgb(251,147,42)" fg:x="254" fg:w="3"/><text x="20.4408%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="20.3498%" y="645" width="0.0795%" height="15" fill="rgb(208,173,10)" fg:x="256" fg:w="1"/><text x="20.5998%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.3498%" y="629" width="0.0795%" height="15" fill="rgb(246,225,4)" fg:x="256" fg:w="1"/><text x="20.5998%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.3498%" y="613" width="0.0795%" height="15" fill="rgb(248,102,6)" fg:x="256" fg:w="1"/><text x="20.5998%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.3498%" y="597" width="0.0795%" height="15" fill="rgb(232,6,21)" fg:x="256" fg:w="1"/><text x="20.5998%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.3498%" y="581" width="0.0795%" height="15" fill="rgb(221,179,22)" fg:x="256" fg:w="1"/><text x="20.5998%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.3498%" y="565" width="0.0795%" height="15" fill="rgb(252,50,20)" fg:x="256" fg:w="1"/><text x="20.5998%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3498%" y="549" width="0.0795%" height="15" fill="rgb(222,56,38)" fg:x="256" fg:w="1"/><text x="20.5998%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (89 samples, 7.07%)</title><rect x="13.4340%" y="725" width="7.0747%" height="15" fill="rgb(206,193,29)" fg:x="169" fg:w="89"/><text x="13.6840%" y="735.50">plugins_c..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="20.4293%" y="709" width="0.0795%" height="15" fill="rgb(239,192,45)" fg:x="257" fg:w="1"/><text x="20.6793%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.4293%" y="693" width="0.0795%" height="15" fill="rgb(254,18,36)" fg:x="257" fg:w="1"/><text x="20.6793%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="20.4293%" y="677" width="0.0795%" height="15" fill="rgb(221,127,11)" fg:x="257" fg:w="1"/><text x="20.6793%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.4293%" y="661" width="0.0795%" height="15" fill="rgb(234,146,35)" fg:x="257" fg:w="1"/><text x="20.6793%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="20.4293%" y="645" width="0.0795%" height="15" fill="rgb(254,201,37)" fg:x="257" fg:w="1"/><text x="20.6793%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="20.5087%" y="725" width="0.0795%" height="15" fill="rgb(211,202,23)" fg:x="258" fg:w="1"/><text x="20.7587%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="20.6677%" y="693" width="0.0795%" height="15" fill="rgb(237,91,2)" fg:x="260" fg:w="1"/><text x="20.9177%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.6677%" y="677" width="0.0795%" height="15" fill="rgb(226,228,36)" fg:x="260" fg:w="1"/><text x="20.9177%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="20.6677%" y="661" width="0.0795%" height="15" fill="rgb(213,63,50)" fg:x="260" fg:w="1"/><text x="20.9177%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.7472%" y="693" width="0.0795%" height="15" fill="rgb(235,194,19)" fg:x="261" fg:w="1"/><text x="20.9972%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.7472%" y="677" width="0.0795%" height="15" fill="rgb(207,204,18)" fg:x="261" fg:w="1"/><text x="20.9972%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.7472%" y="661" width="0.0795%" height="15" fill="rgb(248,8,7)" fg:x="261" fg:w="1"/><text x="20.9972%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.7472%" y="645" width="0.0795%" height="15" fill="rgb(223,145,47)" fg:x="261" fg:w="1"/><text x="20.9972%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.7472%" y="629" width="0.0795%" height="15" fill="rgb(228,84,11)" fg:x="261" fg:w="1"/><text x="20.9972%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.7472%" y="613" width="0.0795%" height="15" fill="rgb(218,76,45)" fg:x="261" fg:w="1"/><text x="20.9972%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.8267%" y="661" width="0.0795%" height="15" fill="rgb(223,80,15)" fg:x="262" fg:w="1"/><text x="21.0767%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.8267%" y="645" width="0.0795%" height="15" fill="rgb(219,218,33)" fg:x="262" fg:w="1"/><text x="21.0767%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8267%" y="629" width="0.0795%" height="15" fill="rgb(208,51,11)" fg:x="262" fg:w="1"/><text x="21.0767%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.8267%" y="613" width="0.0795%" height="15" fill="rgb(229,165,39)" fg:x="262" fg:w="1"/><text x="21.0767%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8267%" y="597" width="0.0795%" height="15" fill="rgb(241,100,24)" fg:x="262" fg:w="1"/><text x="21.0767%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="20.8267%" y="677" width="0.1590%" height="15" fill="rgb(228,14,23)" fg:x="262" fg:w="2"/><text x="21.0767%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="20.9062%" y="661" width="0.0795%" height="15" fill="rgb(247,116,52)" fg:x="263" fg:w="1"/><text x="21.1562%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9857%" y="677" width="0.0795%" height="15" fill="rgb(216,149,33)" fg:x="264" fg:w="1"/><text x="21.2357%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.9857%" y="661" width="0.0795%" height="15" fill="rgb(238,142,29)" fg:x="264" fg:w="1"/><text x="21.2357%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.9857%" y="645" width="0.0795%" height="15" fill="rgb(224,83,40)" fg:x="264" fg:w="1"/><text x="21.2357%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.9857%" y="629" width="0.0795%" height="15" fill="rgb(234,165,11)" fg:x="264" fg:w="1"/><text x="21.2357%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.9857%" y="613" width="0.0795%" height="15" fill="rgb(215,96,23)" fg:x="264" fg:w="1"/><text x="21.2357%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9857%" y="597" width="0.0795%" height="15" fill="rgb(233,179,26)" fg:x="264" fg:w="1"/><text x="21.2357%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.9857%" y="581" width="0.0795%" height="15" fill="rgb(225,129,33)" fg:x="264" fg:w="1"/><text x="21.2357%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.9857%" y="565" width="0.0795%" height="15" fill="rgb(237,49,13)" fg:x="264" fg:w="1"/><text x="21.2357%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.9857%" y="549" width="0.0795%" height="15" fill="rgb(211,3,31)" fg:x="264" fg:w="1"/><text x="21.2357%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.9857%" y="533" width="0.0795%" height="15" fill="rgb(216,152,19)" fg:x="264" fg:w="1"/><text x="21.2357%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.9857%" y="517" width="0.0795%" height="15" fill="rgb(251,121,35)" fg:x="264" fg:w="1"/><text x="21.2357%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9857%" y="501" width="0.0795%" height="15" fill="rgb(210,217,47)" fg:x="264" fg:w="1"/><text x="21.2357%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.0652%" y="661" width="0.0795%" height="15" fill="rgb(244,116,22)" fg:x="265" fg:w="1"/><text x="21.3152%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.0652%" y="645" width="0.0795%" height="15" fill="rgb(228,17,21)" fg:x="265" fg:w="1"/><text x="21.3152%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.0652%" y="629" width="0.0795%" height="15" fill="rgb(240,149,34)" fg:x="265" fg:w="1"/><text x="21.3152%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.1447%" y="613" width="0.0795%" height="15" fill="rgb(208,125,47)" fg:x="266" fg:w="1"/><text x="21.3947%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="21.1447%" y="597" width="0.0795%" height="15" fill="rgb(249,186,39)" fg:x="266" fg:w="1"/><text x="21.3947%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.1447%" y="581" width="0.0795%" height="15" fill="rgb(240,220,33)" fg:x="266" fg:w="1"/><text x="21.3947%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1447%" y="565" width="0.0795%" height="15" fill="rgb(243,110,23)" fg:x="266" fg:w="1"/><text x="21.3947%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.1447%" y="549" width="0.0795%" height="15" fill="rgb(219,163,46)" fg:x="266" fg:w="1"/><text x="21.3947%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1447%" y="533" width="0.0795%" height="15" fill="rgb(216,126,30)" fg:x="266" fg:w="1"/><text x="21.3947%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.1447%" y="517" width="0.0795%" height="15" fill="rgb(208,139,11)" fg:x="266" fg:w="1"/><text x="21.3947%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1447%" y="501" width="0.0795%" height="15" fill="rgb(213,118,36)" fg:x="266" fg:w="1"/><text x="21.3947%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.1447%" y="485" width="0.0795%" height="15" fill="rgb(226,43,17)" fg:x="266" fg:w="1"/><text x="21.3947%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="21.0652%" y="677" width="0.2385%" height="15" fill="rgb(254,217,4)" fg:x="265" fg:w="3"/><text x="21.3152%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="21.1447%" y="661" width="0.1590%" height="15" fill="rgb(210,134,47)" fg:x="266" fg:w="2"/><text x="21.3947%" y="671.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="21.1447%" y="645" width="0.1590%" height="15" fill="rgb(237,24,49)" fg:x="266" fg:w="2"/><text x="21.3947%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.1447%" y="629" width="0.1590%" height="15" fill="rgb(251,39,46)" fg:x="266" fg:w="2"/><text x="21.3947%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="21.2242%" y="613" width="0.0795%" height="15" fill="rgb(251,220,3)" fg:x="267" fg:w="1"/><text x="21.4742%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.2242%" y="597" width="0.0795%" height="15" fill="rgb(228,105,12)" fg:x="267" fg:w="1"/><text x="21.4742%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2242%" y="581" width="0.0795%" height="15" fill="rgb(215,196,1)" fg:x="267" fg:w="1"/><text x="21.4742%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2242%" y="565" width="0.0795%" height="15" fill="rgb(214,33,39)" fg:x="267" fg:w="1"/><text x="21.4742%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.2242%" y="549" width="0.0795%" height="15" fill="rgb(220,19,52)" fg:x="267" fg:w="1"/><text x="21.4742%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="20.8267%" y="693" width="0.5564%" height="15" fill="rgb(221,78,38)" fg:x="262" fg:w="7"/><text x="21.0767%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.3037%" y="677" width="0.0795%" height="15" fill="rgb(253,30,16)" fg:x="268" fg:w="1"/><text x="21.5537%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.3037%" y="661" width="0.0795%" height="15" fill="rgb(242,65,0)" fg:x="268" fg:w="1"/><text x="21.5537%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.3037%" y="645" width="0.0795%" height="15" fill="rgb(235,201,12)" fg:x="268" fg:w="1"/><text x="21.5537%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.3037%" y="629" width="0.0795%" height="15" fill="rgb(233,161,9)" fg:x="268" fg:w="1"/><text x="21.5537%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.3037%" y="613" width="0.0795%" height="15" fill="rgb(241,207,41)" fg:x="268" fg:w="1"/><text x="21.5537%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (11 samples, 0.87%)</title><rect x="20.5882%" y="725" width="0.8744%" height="15" fill="rgb(212,69,46)" fg:x="259" fg:w="11"/><text x="20.8382%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (10 samples, 0.79%)</title><rect x="20.6677%" y="709" width="0.7949%" height="15" fill="rgb(239,69,45)" fg:x="260" fg:w="10"/><text x="20.9177%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="21.3831%" y="693" width="0.0795%" height="15" fill="rgb(242,117,48)" fg:x="269" fg:w="1"/><text x="21.6331%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="21.3831%" y="677" width="0.0795%" height="15" fill="rgb(228,41,36)" fg:x="269" fg:w="1"/><text x="21.6331%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="21.3831%" y="661" width="0.0795%" height="15" fill="rgb(212,3,32)" fg:x="269" fg:w="1"/><text x="21.6331%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="21.3831%" y="645" width="0.0795%" height="15" fill="rgb(233,41,49)" fg:x="269" fg:w="1"/><text x="21.6331%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.3831%" y="629" width="0.0795%" height="15" fill="rgb(252,170,49)" fg:x="269" fg:w="1"/><text x="21.6331%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="21.3831%" y="613" width="0.0795%" height="15" fill="rgb(229,53,26)" fg:x="269" fg:w="1"/><text x="21.6331%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="21.4626%" y="709" width="0.0795%" height="15" fill="rgb(217,157,12)" fg:x="270" fg:w="1"/><text x="21.7126%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="21.4626%" y="693" width="0.0795%" height="15" fill="rgb(227,17,9)" fg:x="270" fg:w="1"/><text x="21.7126%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.4626%" y="677" width="0.0795%" height="15" fill="rgb(218,84,12)" fg:x="270" fg:w="1"/><text x="21.7126%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="21.4626%" y="661" width="0.0795%" height="15" fill="rgb(212,79,24)" fg:x="270" fg:w="1"/><text x="21.7126%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="21.4626%" y="645" width="0.0795%" height="15" fill="rgb(217,222,37)" fg:x="270" fg:w="1"/><text x="21.7126%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.4626%" y="629" width="0.0795%" height="15" fill="rgb(246,208,8)" fg:x="270" fg:w="1"/><text x="21.7126%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.4626%" y="613" width="0.0795%" height="15" fill="rgb(244,133,10)" fg:x="270" fg:w="1"/><text x="21.7126%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="21.5421%" y="709" width="0.0795%" height="15" fill="rgb(209,219,41)" fg:x="271" fg:w="1"/><text x="21.7921%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5421%" y="693" width="0.0795%" height="15" fill="rgb(253,175,45)" fg:x="271" fg:w="1"/><text x="21.7921%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6216%" y="629" width="0.0795%" height="15" fill="rgb(235,100,37)" fg:x="272" fg:w="1"/><text x="21.8716%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6216%" y="613" width="0.0795%" height="15" fill="rgb(225,87,19)" fg:x="272" fg:w="1"/><text x="21.8716%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.6216%" y="597" width="0.0795%" height="15" fill="rgb(217,152,17)" fg:x="272" fg:w="1"/><text x="21.8716%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="21.7011%" y="597" width="0.0795%" height="15" fill="rgb(235,72,13)" fg:x="273" fg:w="1"/><text x="21.9511%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.7011%" y="581" width="0.0795%" height="15" fill="rgb(233,140,18)" fg:x="273" fg:w="1"/><text x="21.9511%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.7011%" y="565" width="0.0795%" height="15" fill="rgb(207,212,28)" fg:x="273" fg:w="1"/><text x="21.9511%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.7011%" y="549" width="0.0795%" height="15" fill="rgb(220,130,25)" fg:x="273" fg:w="1"/><text x="21.9511%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="21.6216%" y="661" width="0.2385%" height="15" fill="rgb(205,55,34)" fg:x="272" fg:w="3"/><text x="21.8716%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="21.6216%" y="645" width="0.2385%" height="15" fill="rgb(237,54,35)" fg:x="272" fg:w="3"/><text x="21.8716%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.7011%" y="629" width="0.1590%" height="15" fill="rgb(208,67,23)" fg:x="273" fg:w="2"/><text x="21.9511%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.7011%" y="613" width="0.1590%" height="15" fill="rgb(206,207,50)" fg:x="273" fg:w="2"/><text x="21.9511%" y="623.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="21.7806%" y="597" width="0.0795%" height="15" fill="rgb(213,211,42)" fg:x="274" fg:w="1"/><text x="22.0306%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="21.6216%" y="677" width="0.3975%" height="15" fill="rgb(252,197,50)" fg:x="272" fg:w="5"/><text x="21.8716%" y="687.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="21.8601%" y="661" width="0.1590%" height="15" fill="rgb(251,211,41)" fg:x="275" fg:w="2"/><text x="22.1101%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.8601%" y="645" width="0.1590%" height="15" fill="rgb(229,211,5)" fg:x="275" fg:w="2"/><text x="22.1101%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="21.9396%" y="629" width="0.0795%" height="15" fill="rgb(239,36,31)" fg:x="276" fg:w="1"/><text x="22.1896%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.9396%" y="613" width="0.0795%" height="15" fill="rgb(248,67,31)" fg:x="276" fg:w="1"/><text x="22.1896%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (8 samples, 0.64%)</title><rect x="21.4626%" y="725" width="0.6359%" height="15" fill="rgb(249,55,44)" fg:x="270" fg:w="8"/><text x="21.7126%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="21.6216%" y="709" width="0.4769%" height="15" fill="rgb(216,82,12)" fg:x="272" fg:w="6"/><text x="21.8716%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="21.6216%" y="693" width="0.4769%" height="15" fill="rgb(242,174,1)" fg:x="272" fg:w="6"/><text x="21.8716%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="22.0191%" y="677" width="0.0795%" height="15" fill="rgb(208,120,29)" fg:x="277" fg:w="1"/><text x="22.2691%" y="687.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="22.0191%" y="661" width="0.0795%" height="15" fill="rgb(221,105,43)" fg:x="277" fg:w="1"/><text x="22.2691%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (193 samples, 15.34%)</title><rect x="6.8362%" y="741" width="15.3418%" height="15" fill="rgb(234,124,22)" fg:x="86" fg:w="193"/><text x="7.0862%" y="751.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="22.0986%" y="725" width="0.0795%" height="15" fill="rgb(212,23,30)" fg:x="278" fg:w="1"/><text x="22.3486%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="22.1781%" y="741" width="0.1590%" height="15" fill="rgb(219,122,53)" fg:x="279" fg:w="2"/><text x="22.4281%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="22.1781%" y="725" width="0.1590%" height="15" fill="rgb(248,84,24)" fg:x="279" fg:w="2"/><text x="22.4281%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="22.1781%" y="709" width="0.1590%" height="15" fill="rgb(245,115,18)" fg:x="279" fg:w="2"/><text x="22.4281%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="22.1781%" y="693" width="0.1590%" height="15" fill="rgb(227,176,51)" fg:x="279" fg:w="2"/><text x="22.4281%" y="703.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="22.1781%" y="677" width="0.1590%" height="15" fill="rgb(229,63,42)" fg:x="279" fg:w="2"/><text x="22.4281%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="22.4165%" y="725" width="0.0795%" height="15" fill="rgb(247,202,24)" fg:x="282" fg:w="1"/><text x="22.6665%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.4165%" y="709" width="0.0795%" height="15" fill="rgb(244,173,20)" fg:x="282" fg:w="1"/><text x="22.6665%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::rollback (1 samples, 0.08%)</title><rect x="22.4960%" y="725" width="0.0795%" height="15" fill="rgb(242,81,47)" fg:x="283" fg:w="1"/><text x="22.7460%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="22.5755%" y="725" width="0.0795%" height="15" fill="rgb(231,185,54)" fg:x="284" fg:w="1"/><text x="22.8255%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="22.5755%" y="709" width="0.0795%" height="15" fill="rgb(243,55,32)" fg:x="284" fg:w="1"/><text x="22.8255%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.5755%" y="693" width="0.0795%" height="15" fill="rgb(208,167,19)" fg:x="284" fg:w="1"/><text x="22.8255%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.5755%" y="677" width="0.0795%" height="15" fill="rgb(231,72,35)" fg:x="284" fg:w="1"/><text x="22.8255%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.5755%" y="661" width="0.0795%" height="15" fill="rgb(250,173,51)" fg:x="284" fg:w="1"/><text x="22.8255%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="22.5755%" y="645" width="0.0795%" height="15" fill="rgb(209,5,22)" fg:x="284" fg:w="1"/><text x="22.8255%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="22.5755%" y="629" width="0.0795%" height="15" fill="rgb(250,174,19)" fg:x="284" fg:w="1"/><text x="22.8255%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.5755%" y="613" width="0.0795%" height="15" fill="rgb(217,3,49)" fg:x="284" fg:w="1"/><text x="22.8255%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.5755%" y="597" width="0.0795%" height="15" fill="rgb(218,225,5)" fg:x="284" fg:w="1"/><text x="22.8255%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="22.5755%" y="581" width="0.0795%" height="15" fill="rgb(236,89,11)" fg:x="284" fg:w="1"/><text x="22.8255%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="22.5755%" y="565" width="0.0795%" height="15" fill="rgb(206,33,28)" fg:x="284" fg:w="1"/><text x="22.8255%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.5755%" y="549" width="0.0795%" height="15" fill="rgb(241,56,42)" fg:x="284" fg:w="1"/><text x="22.8255%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.5755%" y="533" width="0.0795%" height="15" fill="rgb(222,44,11)" fg:x="284" fg:w="1"/><text x="22.8255%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="22.5755%" y="517" width="0.0795%" height="15" fill="rgb(234,111,20)" fg:x="284" fg:w="1"/><text x="22.8255%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="22.5755%" y="501" width="0.0795%" height="15" fill="rgb(237,77,6)" fg:x="284" fg:w="1"/><text x="22.8255%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="22.5755%" y="485" width="0.0795%" height="15" fill="rgb(235,111,23)" fg:x="284" fg:w="1"/><text x="22.8255%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="22.5755%" y="469" width="0.0795%" height="15" fill="rgb(251,135,29)" fg:x="284" fg:w="1"/><text x="22.8255%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="22.5755%" y="453" width="0.0795%" height="15" fill="rgb(217,57,1)" fg:x="284" fg:w="1"/><text x="22.8255%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.7345%" y="693" width="0.0795%" height="15" fill="rgb(249,119,31)" fg:x="286" fg:w="1"/><text x="22.9845%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.7345%" y="677" width="0.0795%" height="15" fill="rgb(233,164,33)" fg:x="286" fg:w="1"/><text x="22.9845%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.7345%" y="661" width="0.0795%" height="15" fill="rgb(250,217,43)" fg:x="286" fg:w="1"/><text x="22.9845%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.7345%" y="645" width="0.0795%" height="15" fill="rgb(232,154,50)" fg:x="286" fg:w="1"/><text x="22.9845%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.8140%" y="613" width="0.0795%" height="15" fill="rgb(227,190,8)" fg:x="287" fg:w="1"/><text x="23.0640%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="22.8140%" y="629" width="0.1590%" height="15" fill="rgb(209,217,32)" fg:x="287" fg:w="2"/><text x="23.0640%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.8935%" y="613" width="0.0795%" height="15" fill="rgb(243,203,50)" fg:x="288" fg:w="1"/><text x="23.1435%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="22.9730%" y="613" width="0.3975%" height="15" fill="rgb(232,152,27)" fg:x="289" fg:w="5"/><text x="23.2230%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.2909%" y="597" width="0.0795%" height="15" fill="rgb(240,34,29)" fg:x="293" fg:w="1"/><text x="23.5409%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="23.3704%" y="597" width="0.2385%" height="15" fill="rgb(215,185,52)" fg:x="294" fg:w="3"/><text x="23.6204%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="23.4499%" y="581" width="0.1590%" height="15" fill="rgb(240,89,49)" fg:x="295" fg:w="2"/><text x="23.6999%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="23.4499%" y="565" width="0.1590%" height="15" fill="rgb(225,12,52)" fg:x="295" fg:w="2"/><text x="23.6999%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.5294%" y="549" width="0.0795%" height="15" fill="rgb(239,128,45)" fg:x="296" fg:w="1"/><text x="23.7794%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.5294%" y="533" width="0.0795%" height="15" fill="rgb(211,78,47)" fg:x="296" fg:w="1"/><text x="23.7794%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="23.6089%" y="597" width="0.1590%" height="15" fill="rgb(232,31,21)" fg:x="297" fg:w="2"/><text x="23.8589%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.6089%" y="581" width="0.1590%" height="15" fill="rgb(222,168,14)" fg:x="297" fg:w="2"/><text x="23.8589%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.6089%" y="565" width="0.1590%" height="15" fill="rgb(209,128,24)" fg:x="297" fg:w="2"/><text x="23.8589%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.6089%" y="549" width="0.1590%" height="15" fill="rgb(249,35,13)" fg:x="297" fg:w="2"/><text x="23.8589%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="23.7679%" y="581" width="0.1590%" height="15" fill="rgb(218,7,2)" fg:x="299" fg:w="2"/><text x="24.0179%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.7679%" y="565" width="0.1590%" height="15" fill="rgb(238,107,27)" fg:x="299" fg:w="2"/><text x="24.0179%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.7679%" y="549" width="0.1590%" height="15" fill="rgb(217,88,38)" fg:x="299" fg:w="2"/><text x="24.0179%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.7679%" y="533" width="0.1590%" height="15" fill="rgb(230,207,0)" fg:x="299" fg:w="2"/><text x="24.0179%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="23.7679%" y="517" width="0.1590%" height="15" fill="rgb(249,64,54)" fg:x="299" fg:w="2"/><text x="24.0179%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="23.7679%" y="501" width="0.1590%" height="15" fill="rgb(231,7,11)" fg:x="299" fg:w="2"/><text x="24.0179%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="23.7679%" y="485" width="0.1590%" height="15" fill="rgb(205,149,21)" fg:x="299" fg:w="2"/><text x="24.0179%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.9269%" y="565" width="0.0795%" height="15" fill="rgb(215,126,34)" fg:x="301" fg:w="1"/><text x="24.1769%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="24.0064%" y="565" width="0.2385%" height="15" fill="rgb(241,132,45)" fg:x="302" fg:w="3"/><text x="24.2564%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.1653%" y="549" width="0.0795%" height="15" fill="rgb(252,69,32)" fg:x="304" fg:w="1"/><text x="24.4153%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.1653%" y="533" width="0.0795%" height="15" fill="rgb(232,204,19)" fg:x="304" fg:w="1"/><text x="24.4153%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.1653%" y="517" width="0.0795%" height="15" fill="rgb(249,15,47)" fg:x="304" fg:w="1"/><text x="24.4153%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="23.9269%" y="581" width="0.3975%" height="15" fill="rgb(209,227,23)" fg:x="301" fg:w="5"/><text x="24.1769%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.2448%" y="565" width="0.0795%" height="15" fill="rgb(248,92,24)" fg:x="305" fg:w="1"/><text x="24.4948%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="23.7679%" y="597" width="0.7154%" height="15" fill="rgb(247,59,2)" fg:x="299" fg:w="9"/><text x="24.0179%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.3243%" y="581" width="0.1590%" height="15" fill="rgb(221,30,5)" fg:x="306" fg:w="2"/><text x="24.5743%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.4038%" y="565" width="0.0795%" height="15" fill="rgb(208,108,53)" fg:x="307" fg:w="1"/><text x="24.6538%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="24.4038%" y="549" width="0.0795%" height="15" fill="rgb(211,183,26)" fg:x="307" fg:w="1"/><text x="24.6538%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.27%)</title><rect x="23.3704%" y="613" width="1.2719%" height="15" fill="rgb(232,132,4)" fg:x="294" fg:w="16"/><text x="23.6204%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="24.4833%" y="597" width="0.1590%" height="15" fill="rgb(253,128,37)" fg:x="308" fg:w="2"/><text x="24.7333%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.5628%" y="581" width="0.0795%" height="15" fill="rgb(221,58,24)" fg:x="309" fg:w="1"/><text x="24.8128%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.5628%" y="565" width="0.0795%" height="15" fill="rgb(230,54,45)" fg:x="309" fg:w="1"/><text x="24.8128%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.91%)</title><rect x="22.8140%" y="645" width="1.9078%" height="15" fill="rgb(254,21,18)" fg:x="287" fg:w="24"/><text x="23.0640%" y="655.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.75%)</title><rect x="22.9730%" y="629" width="1.7488%" height="15" fill="rgb(221,108,0)" fg:x="289" fg:w="22"/><text x="23.2230%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.6423%" y="613" width="0.0795%" height="15" fill="rgb(206,95,1)" fg:x="310" fg:w="1"/><text x="24.8923%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.6423%" y="597" width="0.0795%" height="15" fill="rgb(237,52,5)" fg:x="310" fg:w="1"/><text x="24.8923%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.6423%" y="581" width="0.0795%" height="15" fill="rgb(218,150,34)" fg:x="310" fg:w="1"/><text x="24.8923%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.6423%" y="565" width="0.0795%" height="15" fill="rgb(235,194,28)" fg:x="310" fg:w="1"/><text x="24.8923%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.6423%" y="549" width="0.0795%" height="15" fill="rgb(245,92,18)" fg:x="310" fg:w="1"/><text x="24.8923%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.6423%" y="533" width="0.0795%" height="15" fill="rgb(253,203,53)" fg:x="310" fg:w="1"/><text x="24.8923%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.7218%" y="613" width="0.0795%" height="15" fill="rgb(249,185,47)" fg:x="311" fg:w="1"/><text x="24.9718%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.8013%" y="597" width="0.1590%" height="15" fill="rgb(252,194,52)" fg:x="312" fg:w="2"/><text x="25.0513%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="24.7218%" y="645" width="0.4769%" height="15" fill="rgb(210,53,36)" fg:x="311" fg:w="6"/><text x="24.9718%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="24.7218%" y="629" width="0.4769%" height="15" fill="rgb(237,37,25)" fg:x="311" fg:w="6"/><text x="24.9718%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="24.8013%" y="613" width="0.3975%" height="15" fill="rgb(242,116,27)" fg:x="312" fg:w="5"/><text x="25.0513%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="24.9603%" y="597" width="0.2385%" height="15" fill="rgb(213,185,26)" fg:x="314" fg:w="3"/><text x="25.2103%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="25.0397%" y="581" width="0.1590%" height="15" fill="rgb(225,204,8)" fg:x="315" fg:w="2"/><text x="25.2897%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.0397%" y="565" width="0.1590%" height="15" fill="rgb(254,111,37)" fg:x="315" fg:w="2"/><text x="25.2897%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.1987%" y="613" width="0.0795%" height="15" fill="rgb(242,35,9)" fg:x="317" fg:w="1"/><text x="25.4487%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.2782%" y="581" width="0.1590%" height="15" fill="rgb(232,138,49)" fg:x="318" fg:w="2"/><text x="25.5282%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="25.4372%" y="565" width="0.1590%" height="15" fill="rgb(247,56,4)" fg:x="320" fg:w="2"/><text x="25.6872%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.5962%" y="549" width="0.0795%" height="15" fill="rgb(226,179,17)" fg:x="322" fg:w="1"/><text x="25.8462%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.6757%" y="549" width="0.0795%" height="15" fill="rgb(216,163,45)" fg:x="323" fg:w="1"/><text x="25.9257%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.6757%" y="533" width="0.0795%" height="15" fill="rgb(211,157,3)" fg:x="323" fg:w="1"/><text x="25.9257%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="25.8347%" y="533" width="0.0795%" height="15" fill="rgb(234,44,20)" fg:x="325" fg:w="1"/><text x="26.0847%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="25.8347%" y="517" width="0.0795%" height="15" fill="rgb(254,138,23)" fg:x="325" fg:w="1"/><text x="26.0847%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.8347%" y="501" width="0.0795%" height="15" fill="rgb(206,119,39)" fg:x="325" fg:w="1"/><text x="26.0847%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.1526%" y="517" width="0.0795%" height="15" fill="rgb(231,105,52)" fg:x="329" fg:w="1"/><text x="26.4026%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.03%)</title><rect x="25.2782%" y="613" width="1.0334%" height="15" fill="rgb(250,20,5)" fg:x="318" fg:w="13"/><text x="25.5282%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 1.03%)</title><rect x="25.2782%" y="597" width="1.0334%" height="15" fill="rgb(215,198,30)" fg:x="318" fg:w="13"/><text x="25.5282%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.87%)</title><rect x="25.4372%" y="581" width="0.8744%" height="15" fill="rgb(246,142,8)" fg:x="320" fg:w="11"/><text x="25.6872%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="25.5962%" y="565" width="0.7154%" height="15" fill="rgb(243,26,38)" fg:x="322" fg:w="9"/><text x="25.8462%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="25.7552%" y="549" width="0.5564%" height="15" fill="rgb(205,133,28)" fg:x="324" fg:w="7"/><text x="26.0052%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="25.9141%" y="533" width="0.3975%" height="15" fill="rgb(212,34,0)" fg:x="326" fg:w="5"/><text x="26.1641%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="26.2321%" y="517" width="0.0795%" height="15" fill="rgb(251,226,22)" fg:x="330" fg:w="1"/><text x="26.4821%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="26.3911%" y="549" width="0.0795%" height="15" fill="rgb(252,119,9)" fg:x="332" fg:w="1"/><text x="26.6411%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="26.3911%" y="533" width="0.0795%" height="15" fill="rgb(213,150,50)" fg:x="332" fg:w="1"/><text x="26.6411%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="26.3911%" y="565" width="0.1590%" height="15" fill="rgb(212,24,39)" fg:x="332" fg:w="2"/><text x="26.6411%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="26.4706%" y="549" width="0.0795%" height="15" fill="rgb(213,46,39)" fg:x="333" fg:w="1"/><text x="26.7206%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="26.4706%" y="533" width="0.0795%" height="15" fill="rgb(239,106,12)" fg:x="333" fg:w="1"/><text x="26.7206%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (18 samples, 1.43%)</title><rect x="25.1987%" y="629" width="1.4308%" height="15" fill="rgb(249,229,21)" fg:x="317" fg:w="18"/><text x="25.4487%" y="639.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="26.3116%" y="613" width="0.3180%" height="15" fill="rgb(212,158,3)" fg:x="331" fg:w="4"/><text x="26.5616%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="26.3116%" y="597" width="0.3180%" height="15" fill="rgb(253,26,48)" fg:x="331" fg:w="4"/><text x="26.5616%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="26.3116%" y="581" width="0.3180%" height="15" fill="rgb(238,178,20)" fg:x="331" fg:w="4"/><text x="26.5616%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.5501%" y="565" width="0.0795%" height="15" fill="rgb(208,86,15)" fg:x="334" fg:w="1"/><text x="26.8001%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="26.6296%" y="613" width="0.0795%" height="15" fill="rgb(239,42,53)" fg:x="335" fg:w="1"/><text x="26.8796%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8680%" y="597" width="0.0795%" height="15" fill="rgb(245,226,8)" fg:x="338" fg:w="1"/><text x="27.1180%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="26.9475%" y="597" width="0.3180%" height="15" fill="rgb(216,176,32)" fg:x="339" fg:w="4"/><text x="27.1975%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.1860%" y="581" width="0.0795%" height="15" fill="rgb(231,186,21)" fg:x="342" fg:w="1"/><text x="27.4360%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (4 samples, 0.32%)</title><rect x="27.2655%" y="597" width="0.3180%" height="15" fill="rgb(205,95,49)" fg:x="343" fg:w="4"/><text x="27.5155%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="27.4245%" y="581" width="0.1590%" height="15" fill="rgb(217,145,8)" fg:x="345" fg:w="2"/><text x="27.6745%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.5040%" y="565" width="0.0795%" height="15" fill="rgb(239,144,48)" fg:x="346" fg:w="1"/><text x="27.7540%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="27.5835%" y="597" width="0.0795%" height="15" fill="rgb(214,189,23)" fg:x="347" fg:w="1"/><text x="27.8335%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.5835%" y="581" width="0.0795%" height="15" fill="rgb(229,157,17)" fg:x="347" fg:w="1"/><text x="27.8335%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.6630%" y="549" width="0.1590%" height="15" fill="rgb(230,5,48)" fg:x="348" fg:w="2"/><text x="27.9130%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.7424%" y="533" width="0.0795%" height="15" fill="rgb(224,156,48)" fg:x="349" fg:w="1"/><text x="27.9924%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.9014%" y="501" width="0.0795%" height="15" fill="rgb(223,14,29)" fg:x="351" fg:w="1"/><text x="28.1514%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.9014%" y="485" width="0.0795%" height="15" fill="rgb(229,96,36)" fg:x="351" fg:w="1"/><text x="28.1514%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="27.8219%" y="517" width="0.4769%" height="15" fill="rgb(231,102,53)" fg:x="350" fg:w="6"/><text x="28.0719%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="27.9809%" y="501" width="0.3180%" height="15" fill="rgb(210,77,38)" fg:x="352" fg:w="4"/><text x="28.2309%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2194%" y="485" width="0.0795%" height="15" fill="rgb(235,131,6)" fg:x="355" fg:w="1"/><text x="28.4694%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (9 samples, 0.72%)</title><rect x="27.8219%" y="549" width="0.7154%" height="15" fill="rgb(252,55,38)" fg:x="350" fg:w="9"/><text x="28.0719%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.72%)</title><rect x="27.8219%" y="533" width="0.7154%" height="15" fill="rgb(246,38,14)" fg:x="350" fg:w="9"/><text x="28.0719%" y="543.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="28.2989%" y="517" width="0.2385%" height="15" fill="rgb(242,27,5)" fg:x="356" fg:w="3"/><text x="28.5489%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.6169%" y="533" width="0.0795%" height="15" fill="rgb(228,65,35)" fg:x="360" fg:w="1"/><text x="28.8669%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.6963%" y="517" width="0.0795%" height="15" fill="rgb(245,93,11)" fg:x="361" fg:w="1"/><text x="28.9463%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.6963%" y="501" width="0.0795%" height="15" fill="rgb(213,1,31)" fg:x="361" fg:w="1"/><text x="28.9463%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.6963%" y="485" width="0.0795%" height="15" fill="rgb(237,205,14)" fg:x="361" fg:w="1"/><text x="28.9463%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="29.0938%" y="485" width="0.3180%" height="15" fill="rgb(232,118,45)" fg:x="366" fg:w="4"/><text x="29.3438%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.1733%" y="469" width="0.2385%" height="15" fill="rgb(218,5,6)" fg:x="367" fg:w="3"/><text x="29.4233%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="29.1733%" y="453" width="0.2385%" height="15" fill="rgb(251,87,51)" fg:x="367" fg:w="3"/><text x="29.4233%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="29.0143%" y="501" width="0.5564%" height="15" fill="rgb(207,225,20)" fg:x="365" fg:w="7"/><text x="29.2643%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="29.4118%" y="485" width="0.1590%" height="15" fill="rgb(222,78,54)" fg:x="370" fg:w="2"/><text x="29.6618%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (25 samples, 1.99%)</title><rect x="27.6630%" y="565" width="1.9873%" height="15" fill="rgb(232,85,16)" fg:x="348" fg:w="25"/><text x="27.9130%" y="575.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (14 samples, 1.11%)</title><rect x="28.5374%" y="549" width="1.1129%" height="15" fill="rgb(244,25,33)" fg:x="359" fg:w="14"/><text x="28.7874%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.95%)</title><rect x="28.6963%" y="533" width="0.9539%" height="15" fill="rgb(233,24,36)" fg:x="361" fg:w="12"/><text x="28.9463%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.87%)</title><rect x="28.7758%" y="517" width="0.8744%" height="15" fill="rgb(253,49,54)" fg:x="362" fg:w="11"/><text x="29.0258%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5707%" y="501" width="0.0795%" height="15" fill="rgb(245,12,22)" fg:x="372" fg:w="1"/><text x="29.8207%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (27 samples, 2.15%)</title><rect x="27.6630%" y="581" width="2.1463%" height="15" fill="rgb(253,141,28)" fg:x="348" fg:w="27"/><text x="27.9130%" y="591.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="29.6502%" y="565" width="0.1590%" height="15" fill="rgb(225,207,27)" fg:x="373" fg:w="2"/><text x="29.9002%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7297%" y="549" width="0.0795%" height="15" fill="rgb(220,84,2)" fg:x="374" fg:w="1"/><text x="29.9797%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.8092%" y="581" width="0.1590%" height="15" fill="rgb(224,37,37)" fg:x="375" fg:w="2"/><text x="30.0592%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (43 samples, 3.42%)</title><rect x="26.6296%" y="629" width="3.4181%" height="15" fill="rgb(220,143,18)" fg:x="335" fg:w="43"/><text x="26.8796%" y="639.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (42 samples, 3.34%)</title><rect x="26.7091%" y="613" width="3.3386%" height="15" fill="rgb(210,88,33)" fg:x="336" fg:w="42"/><text x="26.9591%" y="623.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (30 samples, 2.38%)</title><rect x="27.6630%" y="597" width="2.3847%" height="15" fill="rgb(219,87,51)" fg:x="348" fg:w="30"/><text x="27.9130%" y="607.50">se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.9682%" y="581" width="0.0795%" height="15" fill="rgb(211,7,35)" fg:x="377" fg:w="1"/><text x="30.2182%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.9682%" y="565" width="0.0795%" height="15" fill="rgb(232,77,2)" fg:x="377" fg:w="1"/><text x="30.2182%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9682%" y="549" width="0.0795%" height="15" fill="rgb(249,94,25)" fg:x="377" fg:w="1"/><text x="30.2182%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.2067%" y="453" width="0.0795%" height="15" fill="rgb(215,112,2)" fg:x="380" fg:w="1"/><text x="30.4567%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="30.2067%" y="437" width="0.0795%" height="15" fill="rgb(226,115,48)" fg:x="380" fg:w="1"/><text x="30.4567%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="30.1272%" y="485" width="0.2385%" height="15" fill="rgb(249,196,10)" fg:x="379" fg:w="3"/><text x="30.3772%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="30.1272%" y="469" width="0.2385%" height="15" fill="rgb(237,109,14)" fg:x="379" fg:w="3"/><text x="30.3772%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.2862%" y="453" width="0.0795%" height="15" fill="rgb(217,103,53)" fg:x="381" fg:w="1"/><text x="30.5362%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="30.3657%" y="469" width="0.2385%" height="15" fill="rgb(244,137,9)" fg:x="382" fg:w="3"/><text x="30.6157%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="30.3657%" y="453" width="0.2385%" height="15" fill="rgb(227,201,3)" fg:x="382" fg:w="3"/><text x="30.6157%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="30.3657%" y="437" width="0.2385%" height="15" fill="rgb(243,94,6)" fg:x="382" fg:w="3"/><text x="30.6157%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.4452%" y="421" width="0.1590%" height="15" fill="rgb(235,118,5)" fg:x="383" fg:w="2"/><text x="30.6952%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.6041%" y="469" width="0.0795%" height="15" fill="rgb(247,10,30)" fg:x="385" fg:w="1"/><text x="30.8541%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6041%" y="453" width="0.0795%" height="15" fill="rgb(205,26,28)" fg:x="385" fg:w="1"/><text x="30.8541%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="30.1272%" y="501" width="0.6359%" height="15" fill="rgb(206,99,35)" fg:x="379" fg:w="8"/><text x="30.3772%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="30.3657%" y="485" width="0.3975%" height="15" fill="rgb(238,130,40)" fg:x="382" fg:w="5"/><text x="30.6157%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6836%" y="469" width="0.0795%" height="15" fill="rgb(224,126,31)" fg:x="386" fg:w="1"/><text x="30.9336%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6836%" y="453" width="0.0795%" height="15" fill="rgb(254,105,17)" fg:x="386" fg:w="1"/><text x="30.9336%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6836%" y="437" width="0.0795%" height="15" fill="rgb(216,87,36)" fg:x="386" fg:w="1"/><text x="30.9336%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.7631%" y="501" width="0.0795%" height="15" fill="rgb(240,21,12)" fg:x="387" fg:w="1"/><text x="31.0131%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7631%" y="485" width="0.0795%" height="15" fill="rgb(245,192,34)" fg:x="387" fg:w="1"/><text x="31.0131%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.95%)</title><rect x="30.1272%" y="517" width="0.9539%" height="15" fill="rgb(226,100,49)" fg:x="379" fg:w="12"/><text x="30.3772%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="30.8426%" y="501" width="0.2385%" height="15" fill="rgb(245,188,27)" fg:x="388" fg:w="3"/><text x="31.0926%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="30.8426%" y="485" width="0.2385%" height="15" fill="rgb(212,170,8)" fg:x="388" fg:w="3"/><text x="31.0926%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.9221%" y="469" width="0.1590%" height="15" fill="rgb(217,113,29)" fg:x="389" fg:w="2"/><text x="31.1721%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.11%)</title><rect x="30.1272%" y="533" width="1.1129%" height="15" fill="rgb(237,30,3)" fg:x="379" fg:w="14"/><text x="30.3772%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.0811%" y="517" width="0.1590%" height="15" fill="rgb(227,19,28)" fg:x="391" fg:w="2"/><text x="31.3311%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.2401%" y="533" width="0.0795%" height="15" fill="rgb(239,172,45)" fg:x="393" fg:w="1"/><text x="31.4901%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.27%)</title><rect x="30.1272%" y="565" width="1.2719%" height="15" fill="rgb(254,55,39)" fg:x="379" fg:w="16"/><text x="30.3772%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 1.27%)</title><rect x="30.1272%" y="549" width="1.2719%" height="15" fill="rgb(249,208,12)" fg:x="379" fg:w="16"/><text x="30.3772%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3196%" y="533" width="0.0795%" height="15" fill="rgb(240,52,13)" fg:x="394" fg:w="1"/><text x="31.5696%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3196%" y="517" width="0.0795%" height="15" fill="rgb(252,149,13)" fg:x="394" fg:w="1"/><text x="31.5696%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="31.3196%" y="501" width="0.0795%" height="15" fill="rgb(232,81,48)" fg:x="394" fg:w="1"/><text x="31.5696%" y="511.50"></text></g><g><title>engine::session::state::State::close (111 samples, 8.82%)</title><rect x="22.6550%" y="725" width="8.8235%" height="15" fill="rgb(222,144,2)" fg:x="285" fg:w="111"/><text x="22.9050%" y="735.50">engine::sess..</text></g><g><title>engine::session::state::State::flush_entities (110 samples, 8.74%)</title><rect x="22.7345%" y="709" width="8.7440%" height="15" fill="rgb(216,81,32)" fg:x="286" fg:w="110"/><text x="22.9845%" y="719.50">engine::sess..</text></g><g><title>core::iter::adapters::try_process (109 samples, 8.66%)</title><rect x="22.8140%" y="693" width="8.6645%" height="15" fill="rgb(244,78,51)" fg:x="287" fg:w="109"/><text x="23.0640%" y="703.50">core::iter::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (109 samples, 8.66%)</title><rect x="22.8140%" y="677" width="8.6645%" height="15" fill="rgb(217,66,21)" fg:x="287" fg:w="109"/><text x="23.0640%" y="687.50">&lt;alloc::vec:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (109 samples, 8.66%)</title><rect x="22.8140%" y="661" width="8.6645%" height="15" fill="rgb(247,101,42)" fg:x="287" fg:w="109"/><text x="23.0640%" y="671.50">engine::sess..</text></g><g><title>kernel::model::any_entity_changes (79 samples, 6.28%)</title><rect x="25.1987%" y="645" width="6.2798%" height="15" fill="rgb(227,81,39)" fg:x="317" fg:w="79"/><text x="25.4487%" y="655.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.43%)</title><rect x="30.0477%" y="629" width="1.4308%" height="15" fill="rgb(220,223,44)" fg:x="378" fg:w="18"/><text x="30.2977%" y="639.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.43%)</title><rect x="30.0477%" y="613" width="1.4308%" height="15" fill="rgb(205,218,2)" fg:x="378" fg:w="18"/><text x="30.2977%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.43%)</title><rect x="30.0477%" y="597" width="1.4308%" height="15" fill="rgb(212,207,28)" fg:x="378" fg:w="18"/><text x="30.2977%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.35%)</title><rect x="30.1272%" y="581" width="1.3514%" height="15" fill="rgb(224,12,41)" fg:x="379" fg:w="17"/><text x="30.3772%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.3990%" y="565" width="0.0795%" height="15" fill="rgb(216,118,12)" fg:x="395" fg:w="1"/><text x="31.6490%" y="575.50"></text></g><g><title>engine::session::Session::close (117 samples, 9.30%)</title><rect x="22.3370%" y="741" width="9.3005%" height="15" fill="rgb(252,97,46)" fg:x="281" fg:w="117"/><text x="22.5870%" y="751.50">engine::sessi..</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="31.4785%" y="725" width="0.1590%" height="15" fill="rgb(244,206,19)" fg:x="396" fg:w="2"/><text x="31.7285%" y="735.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="31.4785%" y="709" width="0.1590%" height="15" fill="rgb(231,84,31)" fg:x="396" fg:w="2"/><text x="31.7285%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="31.4785%" y="693" width="0.1590%" height="15" fill="rgb(244,133,0)" fg:x="396" fg:w="2"/><text x="31.7285%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="31.4785%" y="677" width="0.1590%" height="15" fill="rgb(223,15,50)" fg:x="396" fg:w="2"/><text x="31.7285%" y="687.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="31.4785%" y="661" width="0.1590%" height="15" fill="rgb(250,118,49)" fg:x="396" fg:w="2"/><text x="31.7285%" y="671.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="31.6375%" y="709" width="0.0795%" height="15" fill="rgb(248,25,38)" fg:x="398" fg:w="1"/><text x="31.8875%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="31.6375%" y="693" width="0.0795%" height="15" fill="rgb(215,70,14)" fg:x="398" fg:w="1"/><text x="31.8875%" y="703.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="31.7170%" y="549" width="0.0795%" height="15" fill="rgb(215,28,15)" fg:x="399" fg:w="1"/><text x="31.9670%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple (1 samples, 0.08%)</title><rect x="31.7170%" y="533" width="0.0795%" height="15" fill="rgb(243,6,28)" fg:x="399" fg:w="1"/><text x="31.9670%" y="543.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="31.7965%" y="533" width="0.0795%" height="15" fill="rgb(222,130,1)" fg:x="400" fg:w="1"/><text x="32.0465%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="31.7965%" y="517" width="0.0795%" height="15" fill="rgb(236,166,44)" fg:x="400" fg:w="1"/><text x="32.0465%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="31.7965%" y="501" width="0.0795%" height="15" fill="rgb(221,108,14)" fg:x="400" fg:w="1"/><text x="32.0465%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="31.7965%" y="485" width="0.0795%" height="15" fill="rgb(252,3,45)" fg:x="400" fg:w="1"/><text x="32.0465%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="31.7965%" y="469" width="0.0795%" height="15" fill="rgb(237,68,30)" fg:x="400" fg:w="1"/><text x="32.0465%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="31.7965%" y="453" width="0.0795%" height="15" fill="rgb(211,79,22)" fg:x="400" fg:w="1"/><text x="32.0465%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="31.7965%" y="437" width="0.0795%" height="15" fill="rgb(252,185,21)" fg:x="400" fg:w="1"/><text x="32.0465%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.7965%" y="421" width="0.0795%" height="15" fill="rgb(225,189,26)" fg:x="400" fg:w="1"/><text x="32.0465%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.7965%" y="405" width="0.0795%" height="15" fill="rgb(241,30,40)" fg:x="400" fg:w="1"/><text x="32.0465%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="31.7965%" y="389" width="0.0795%" height="15" fill="rgb(235,215,44)" fg:x="400" fg:w="1"/><text x="32.0465%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="31.7965%" y="373" width="0.0795%" height="15" fill="rgb(205,8,29)" fg:x="400" fg:w="1"/><text x="32.0465%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.7965%" y="357" width="0.0795%" height="15" fill="rgb(241,137,42)" fg:x="400" fg:w="1"/><text x="32.0465%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="31.7965%" y="341" width="0.0795%" height="15" fill="rgb(237,155,2)" fg:x="400" fg:w="1"/><text x="32.0465%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="31.7965%" y="325" width="0.0795%" height="15" fill="rgb(245,29,42)" fg:x="400" fg:w="1"/><text x="32.0465%" y="335.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (3 samples, 0.24%)</title><rect x="31.7170%" y="597" width="0.2385%" height="15" fill="rgb(234,101,35)" fg:x="399" fg:w="3"/><text x="31.9670%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.24%)</title><rect x="31.7170%" y="581" width="0.2385%" height="15" fill="rgb(228,64,37)" fg:x="399" fg:w="3"/><text x="31.9670%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (3 samples, 0.24%)</title><rect x="31.7170%" y="565" width="0.2385%" height="15" fill="rgb(217,214,36)" fg:x="399" fg:w="3"/><text x="31.9670%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="31.7965%" y="549" width="0.1590%" height="15" fill="rgb(243,70,3)" fg:x="400" fg:w="2"/><text x="32.0465%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="31.8760%" y="533" width="0.0795%" height="15" fill="rgb(253,158,52)" fg:x="401" fg:w="1"/><text x="32.1260%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="31.7170%" y="693" width="0.3180%" height="15" fill="rgb(234,111,54)" fg:x="399" fg:w="4"/><text x="31.9670%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.32%)</title><rect x="31.7170%" y="677" width="0.3180%" height="15" fill="rgb(217,70,32)" fg:x="399" fg:w="4"/><text x="31.9670%" y="687.50"></text></g><g><title>core::fmt::write (4 samples, 0.32%)</title><rect x="31.7170%" y="661" width="0.3180%" height="15" fill="rgb(234,18,33)" fg:x="399" fg:w="4"/><text x="31.9670%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.32%)</title><rect x="31.7170%" y="645" width="0.3180%" height="15" fill="rgb(234,12,49)" fg:x="399" fg:w="4"/><text x="31.9670%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (4 samples, 0.32%)</title><rect x="31.7170%" y="629" width="0.3180%" height="15" fill="rgb(236,10,21)" fg:x="399" fg:w="4"/><text x="31.9670%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (4 samples, 0.32%)</title><rect x="31.7170%" y="613" width="0.3180%" height="15" fill="rgb(248,182,45)" fg:x="399" fg:w="4"/><text x="31.9670%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish (1 samples, 0.08%)</title><rect x="31.9555%" y="597" width="0.0795%" height="15" fill="rgb(217,95,36)" fg:x="402" fg:w="1"/><text x="32.2055%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="31.9555%" y="581" width="0.0795%" height="15" fill="rgb(212,110,31)" fg:x="402" fg:w="1"/><text x="32.2055%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::finish::{{closure}} (1 samples, 0.08%)</title><rect x="31.9555%" y="565" width="0.0795%" height="15" fill="rgb(206,32,53)" fg:x="402" fg:w="1"/><text x="32.2055%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.9555%" y="549" width="0.0795%" height="15" fill="rgb(246,141,37)" fg:x="402" fg:w="1"/><text x="32.2055%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.9555%" y="533" width="0.0795%" height="15" fill="rgb(219,16,7)" fg:x="402" fg:w="1"/><text x="32.2055%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="31.9555%" y="517" width="0.0795%" height="15" fill="rgb(230,205,45)" fg:x="402" fg:w="1"/><text x="32.2055%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="31.9555%" y="501" width="0.0795%" height="15" fill="rgb(231,43,49)" fg:x="402" fg:w="1"/><text x="32.2055%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.9555%" y="485" width="0.0795%" height="15" fill="rgb(212,106,34)" fg:x="402" fg:w="1"/><text x="32.2055%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="31.9555%" y="469" width="0.0795%" height="15" fill="rgb(206,83,17)" fg:x="402" fg:w="1"/><text x="32.2055%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="31.9555%" y="453" width="0.0795%" height="15" fill="rgb(244,154,49)" fg:x="402" fg:w="1"/><text x="32.2055%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Perform&gt; (1 samples, 0.08%)</title><rect x="32.0350%" y="693" width="0.0795%" height="15" fill="rgb(244,149,49)" fg:x="403" fg:w="1"/><text x="32.2850%" y="703.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="32.1940%" y="677" width="0.0795%" height="15" fill="rgb(227,134,18)" fg:x="405" fg:w="1"/><text x="32.4440%" y="687.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.08%)</title><rect x="32.1940%" y="661" width="0.0795%" height="15" fill="rgb(237,116,36)" fg:x="405" fg:w="1"/><text x="32.4440%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;kernel::model::base::AclRule&gt;&gt; (1 samples, 0.08%)</title><rect x="32.2734%" y="677" width="0.0795%" height="15" fill="rgb(205,129,40)" fg:x="406" fg:w="1"/><text x="32.5234%" y="687.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="32.3529%" y="677" width="0.0795%" height="15" fill="rgb(236,178,4)" fg:x="407" fg:w="1"/><text x="32.6029%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="32.3529%" y="661" width="0.0795%" height="15" fill="rgb(251,76,53)" fg:x="407" fg:w="1"/><text x="32.6029%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="32.3529%" y="645" width="0.0795%" height="15" fill="rgb(242,92,40)" fg:x="407" fg:w="1"/><text x="32.6029%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="32.3529%" y="629" width="0.0795%" height="15" fill="rgb(209,45,30)" fg:x="407" fg:w="1"/><text x="32.6029%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="32.5914%" y="565" width="0.0795%" height="15" fill="rgb(218,157,36)" fg:x="410" fg:w="1"/><text x="32.8414%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.5914%" y="549" width="0.0795%" height="15" fill="rgb(222,186,16)" fg:x="410" fg:w="1"/><text x="32.8414%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.5914%" y="533" width="0.0795%" height="15" fill="rgb(254,72,35)" fg:x="410" fg:w="1"/><text x="32.8414%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.5914%" y="517" width="0.0795%" height="15" fill="rgb(224,25,35)" fg:x="410" fg:w="1"/><text x="32.8414%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.5914%" y="501" width="0.0795%" height="15" fill="rgb(206,135,52)" fg:x="410" fg:w="1"/><text x="32.8414%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="32.5914%" y="485" width="0.0795%" height="15" fill="rgb(229,174,47)" fg:x="410" fg:w="1"/><text x="32.8414%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.6709%" y="469" width="0.0795%" height="15" fill="rgb(242,184,21)" fg:x="411" fg:w="1"/><text x="32.9209%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.6709%" y="453" width="0.0795%" height="15" fill="rgb(213,22,45)" fg:x="411" fg:w="1"/><text x="32.9209%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.6709%" y="437" width="0.0795%" height="15" fill="rgb(237,81,54)" fg:x="411" fg:w="1"/><text x="32.9209%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.6709%" y="421" width="0.0795%" height="15" fill="rgb(248,177,18)" fg:x="411" fg:w="1"/><text x="32.9209%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="32.6709%" y="405" width="0.0795%" height="15" fill="rgb(254,31,16)" fg:x="411" fg:w="1"/><text x="32.9209%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="32.6709%" y="389" width="0.0795%" height="15" fill="rgb(235,20,31)" fg:x="411" fg:w="1"/><text x="32.9209%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="32.6709%" y="373" width="0.0795%" height="15" fill="rgb(240,56,43)" fg:x="411" fg:w="1"/><text x="32.9209%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="32.6709%" y="357" width="0.0795%" height="15" fill="rgb(237,197,51)" fg:x="411" fg:w="1"/><text x="32.9209%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="32.6709%" y="341" width="0.0795%" height="15" fill="rgb(241,162,44)" fg:x="411" fg:w="1"/><text x="32.9209%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.6709%" y="501" width="0.1590%" height="15" fill="rgb(224,23,20)" fg:x="411" fg:w="2"/><text x="32.9209%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="32.6709%" y="485" width="0.1590%" height="15" fill="rgb(250,109,34)" fg:x="411" fg:w="2"/><text x="32.9209%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.7504%" y="469" width="0.0795%" height="15" fill="rgb(214,175,50)" fg:x="412" fg:w="1"/><text x="33.0004%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.8299%" y="485" width="0.0795%" height="15" fill="rgb(213,182,5)" fg:x="413" fg:w="1"/><text x="33.0799%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="32.8299%" y="501" width="0.2385%" height="15" fill="rgb(209,199,19)" fg:x="413" fg:w="3"/><text x="33.0799%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="32.9094%" y="485" width="0.1590%" height="15" fill="rgb(236,224,42)" fg:x="414" fg:w="2"/><text x="33.1594%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.9094%" y="469" width="0.1590%" height="15" fill="rgb(246,226,29)" fg:x="414" fg:w="2"/><text x="33.1594%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="32.9094%" y="453" width="0.1590%" height="15" fill="rgb(227,223,11)" fg:x="414" fg:w="2"/><text x="33.1594%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.9094%" y="437" width="0.1590%" height="15" fill="rgb(219,7,51)" fg:x="414" fg:w="2"/><text x="33.1594%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.9889%" y="421" width="0.0795%" height="15" fill="rgb(245,167,10)" fg:x="415" fg:w="1"/><text x="33.2389%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.9889%" y="405" width="0.0795%" height="15" fill="rgb(237,224,16)" fg:x="415" fg:w="1"/><text x="33.2389%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9889%" y="389" width="0.0795%" height="15" fill="rgb(226,132,13)" fg:x="415" fg:w="1"/><text x="33.2389%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.1479%" y="453" width="0.0795%" height="15" fill="rgb(214,140,3)" fg:x="417" fg:w="1"/><text x="33.3979%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="33.3068%" y="341" width="0.0795%" height="15" fill="rgb(221,177,4)" fg:x="419" fg:w="1"/><text x="33.5568%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.3068%" y="325" width="0.0795%" height="15" fill="rgb(238,139,3)" fg:x="419" fg:w="1"/><text x="33.5568%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="33.3068%" y="373" width="0.1590%" height="15" fill="rgb(216,17,39)" fg:x="419" fg:w="2"/><text x="33.5568%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="33.3068%" y="357" width="0.1590%" height="15" fill="rgb(238,120,9)" fg:x="419" fg:w="2"/><text x="33.5568%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="33.3863%" y="341" width="0.0795%" height="15" fill="rgb(244,92,53)" fg:x="420" fg:w="1"/><text x="33.6363%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="33.3863%" y="325" width="0.0795%" height="15" fill="rgb(224,148,33)" fg:x="420" fg:w="1"/><text x="33.6363%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.3863%" y="309" width="0.0795%" height="15" fill="rgb(243,6,36)" fg:x="420" fg:w="1"/><text x="33.6363%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="33.3863%" y="293" width="0.0795%" height="15" fill="rgb(230,102,11)" fg:x="420" fg:w="1"/><text x="33.6363%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="33.3863%" y="277" width="0.0795%" height="15" fill="rgb(234,148,36)" fg:x="420" fg:w="1"/><text x="33.6363%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3863%" y="261" width="0.0795%" height="15" fill="rgb(251,153,25)" fg:x="420" fg:w="1"/><text x="33.6363%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="33.2273%" y="405" width="0.3180%" height="15" fill="rgb(215,129,8)" fg:x="418" fg:w="4"/><text x="33.4773%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="33.2273%" y="389" width="0.3180%" height="15" fill="rgb(224,128,35)" fg:x="418" fg:w="4"/><text x="33.4773%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="33.4658%" y="373" width="0.0795%" height="15" fill="rgb(237,56,52)" fg:x="421" fg:w="1"/><text x="33.7158%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="33.4658%" y="357" width="0.0795%" height="15" fill="rgb(234,213,19)" fg:x="421" fg:w="1"/><text x="33.7158%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.5453%" y="341" width="0.0795%" height="15" fill="rgb(252,82,23)" fg:x="422" fg:w="1"/><text x="33.7953%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.6248%" y="325" width="0.1590%" height="15" fill="rgb(254,201,21)" fg:x="423" fg:w="2"/><text x="33.8748%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (10 samples, 0.79%)</title><rect x="33.0684%" y="501" width="0.7949%" height="15" fill="rgb(250,186,11)" fg:x="416" fg:w="10"/><text x="33.3184%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (10 samples, 0.79%)</title><rect x="33.0684%" y="485" width="0.7949%" height="15" fill="rgb(211,174,5)" fg:x="416" fg:w="10"/><text x="33.3184%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.79%)</title><rect x="33.0684%" y="469" width="0.7949%" height="15" fill="rgb(214,121,10)" fg:x="416" fg:w="10"/><text x="33.3184%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.64%)</title><rect x="33.2273%" y="453" width="0.6359%" height="15" fill="rgb(241,66,2)" fg:x="418" fg:w="8"/><text x="33.4773%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="33.2273%" y="437" width="0.6359%" height="15" fill="rgb(220,167,19)" fg:x="418" fg:w="8"/><text x="33.4773%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (8 samples, 0.64%)</title><rect x="33.2273%" y="421" width="0.6359%" height="15" fill="rgb(231,54,50)" fg:x="418" fg:w="8"/><text x="33.4773%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (4 samples, 0.32%)</title><rect x="33.5453%" y="405" width="0.3180%" height="15" fill="rgb(239,217,53)" fg:x="422" fg:w="4"/><text x="33.7953%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="33.5453%" y="389" width="0.3180%" height="15" fill="rgb(248,8,0)" fg:x="422" fg:w="4"/><text x="33.7953%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (4 samples, 0.32%)</title><rect x="33.5453%" y="373" width="0.3180%" height="15" fill="rgb(229,118,37)" fg:x="422" fg:w="4"/><text x="33.7953%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (4 samples, 0.32%)</title><rect x="33.5453%" y="357" width="0.3180%" height="15" fill="rgb(253,223,43)" fg:x="422" fg:w="4"/><text x="33.7953%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="33.6248%" y="341" width="0.2385%" height="15" fill="rgb(211,77,36)" fg:x="423" fg:w="3"/><text x="33.8748%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="33.7838%" y="325" width="0.0795%" height="15" fill="rgb(219,3,53)" fg:x="425" fg:w="1"/><text x="34.0338%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (18 samples, 1.43%)</title><rect x="32.5914%" y="597" width="1.4308%" height="15" fill="rgb(244,45,42)" fg:x="410" fg:w="18"/><text x="32.8414%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (18 samples, 1.43%)</title><rect x="32.5914%" y="581" width="1.4308%" height="15" fill="rgb(225,95,27)" fg:x="410" fg:w="18"/><text x="32.8414%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (17 samples, 1.35%)</title><rect x="32.6709%" y="565" width="1.3514%" height="15" fill="rgb(207,74,8)" fg:x="411" fg:w="17"/><text x="32.9209%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (17 samples, 1.35%)</title><rect x="32.6709%" y="549" width="1.3514%" height="15" fill="rgb(243,63,36)" fg:x="411" fg:w="17"/><text x="32.9209%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (17 samples, 1.35%)</title><rect x="32.6709%" y="533" width="1.3514%" height="15" fill="rgb(211,180,12)" fg:x="411" fg:w="17"/><text x="32.9209%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.35%)</title><rect x="32.6709%" y="517" width="1.3514%" height="15" fill="rgb(254,166,49)" fg:x="411" fg:w="17"/><text x="32.9209%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="33.8633%" y="501" width="0.1590%" height="15" fill="rgb(205,19,0)" fg:x="426" fg:w="2"/><text x="34.1133%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="33.8633%" y="485" width="0.1590%" height="15" fill="rgb(224,172,32)" fg:x="426" fg:w="2"/><text x="34.1133%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="33.8633%" y="469" width="0.1590%" height="15" fill="rgb(254,136,30)" fg:x="426" fg:w="2"/><text x="34.1133%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="33.8633%" y="453" width="0.1590%" height="15" fill="rgb(246,19,35)" fg:x="426" fg:w="2"/><text x="34.1133%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="33.8633%" y="437" width="0.1590%" height="15" fill="rgb(219,24,36)" fg:x="426" fg:w="2"/><text x="34.1133%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.9428%" y="421" width="0.0795%" height="15" fill="rgb(251,55,1)" fg:x="427" fg:w="1"/><text x="34.1928%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="33.9428%" y="405" width="0.0795%" height="15" fill="rgb(218,117,39)" fg:x="427" fg:w="1"/><text x="34.1928%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="33.9428%" y="389" width="0.0795%" height="15" fill="rgb(248,169,11)" fg:x="427" fg:w="1"/><text x="34.1928%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.9428%" y="373" width="0.0795%" height="15" fill="rgb(244,40,44)" fg:x="427" fg:w="1"/><text x="34.1928%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.9428%" y="357" width="0.0795%" height="15" fill="rgb(234,62,37)" fg:x="427" fg:w="1"/><text x="34.1928%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="34.4197%" y="357" width="0.1590%" height="15" fill="rgb(207,117,42)" fg:x="433" fg:w="2"/><text x="34.6697%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="34.4197%" y="341" width="0.1590%" height="15" fill="rgb(213,43,2)" fg:x="433" fg:w="2"/><text x="34.6697%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.4992%" y="325" width="0.0795%" height="15" fill="rgb(244,202,51)" fg:x="434" fg:w="1"/><text x="34.7492%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="34.5787%" y="341" width="0.0795%" height="15" fill="rgb(253,174,46)" fg:x="435" fg:w="1"/><text x="34.8287%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="34.5787%" y="325" width="0.0795%" height="15" fill="rgb(251,23,1)" fg:x="435" fg:w="1"/><text x="34.8287%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.5787%" y="309" width="0.0795%" height="15" fill="rgb(253,26,1)" fg:x="435" fg:w="1"/><text x="34.8287%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (5 samples, 0.40%)</title><rect x="34.4197%" y="389" width="0.3975%" height="15" fill="rgb(216,89,31)" fg:x="433" fg:w="5"/><text x="34.6697%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="34.4197%" y="373" width="0.3975%" height="15" fill="rgb(209,109,5)" fg:x="433" fg:w="5"/><text x="34.6697%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="34.5787%" y="357" width="0.2385%" height="15" fill="rgb(229,63,13)" fg:x="435" fg:w="3"/><text x="34.8287%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="34.6582%" y="341" width="0.1590%" height="15" fill="rgb(238,137,54)" fg:x="436" fg:w="2"/><text x="34.9082%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="34.6582%" y="325" width="0.1590%" height="15" fill="rgb(228,1,9)" fg:x="436" fg:w="2"/><text x="34.9082%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="34.6582%" y="309" width="0.1590%" height="15" fill="rgb(249,120,48)" fg:x="436" fg:w="2"/><text x="34.9082%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="34.6582%" y="293" width="0.1590%" height="15" fill="rgb(209,72,36)" fg:x="436" fg:w="2"/><text x="34.9082%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.7377%" y="277" width="0.0795%" height="15" fill="rgb(247,98,49)" fg:x="437" fg:w="1"/><text x="34.9877%" y="287.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.48%)</title><rect x="34.4197%" y="405" width="0.4769%" height="15" fill="rgb(233,75,36)" fg:x="433" fg:w="6"/><text x="34.6697%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="34.8172%" y="389" width="0.0795%" height="15" fill="rgb(225,14,24)" fg:x="438" fg:w="1"/><text x="35.0672%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="34.8172%" y="373" width="0.0795%" height="15" fill="rgb(237,193,20)" fg:x="438" fg:w="1"/><text x="35.0672%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.8172%" y="357" width="0.0795%" height="15" fill="rgb(239,122,19)" fg:x="438" fg:w="1"/><text x="35.0672%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.8172%" y="341" width="0.0795%" height="15" fill="rgb(231,220,10)" fg:x="438" fg:w="1"/><text x="35.0672%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.8172%" y="325" width="0.0795%" height="15" fill="rgb(220,66,15)" fg:x="438" fg:w="1"/><text x="35.0672%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.8967%" y="389" width="0.0795%" height="15" fill="rgb(215,171,52)" fg:x="439" fg:w="1"/><text x="35.1467%" y="399.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (8 samples, 0.64%)</title><rect x="34.4197%" y="421" width="0.6359%" height="15" fill="rgb(241,169,50)" fg:x="433" fg:w="8"/><text x="34.6697%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (2 samples, 0.16%)</title><rect x="34.8967%" y="405" width="0.1590%" height="15" fill="rgb(236,189,0)" fg:x="439" fg:w="2"/><text x="35.1467%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9762%" y="389" width="0.0795%" height="15" fill="rgb(217,147,20)" fg:x="440" fg:w="1"/><text x="35.2262%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="35.1351%" y="373" width="0.1590%" height="15" fill="rgb(206,188,39)" fg:x="442" fg:w="2"/><text x="35.3851%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="35.1351%" y="357" width="0.1590%" height="15" fill="rgb(227,118,25)" fg:x="442" fg:w="2"/><text x="35.3851%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.2146%" y="341" width="0.0795%" height="15" fill="rgb(248,171,40)" fg:x="443" fg:w="1"/><text x="35.4646%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="35.1351%" y="389" width="0.3975%" height="15" fill="rgb(251,90,54)" fg:x="442" fg:w="5"/><text x="35.3851%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="35.2941%" y="373" width="0.2385%" height="15" fill="rgb(234,11,46)" fg:x="444" fg:w="3"/><text x="35.5441%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.2941%" y="357" width="0.2385%" height="15" fill="rgb(229,134,13)" fg:x="444" fg:w="3"/><text x="35.5441%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="35.3736%" y="341" width="0.1590%" height="15" fill="rgb(223,129,3)" fg:x="445" fg:w="2"/><text x="35.6236%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="35.3736%" y="325" width="0.1590%" height="15" fill="rgb(221,124,13)" fg:x="445" fg:w="2"/><text x="35.6236%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.4531%" y="309" width="0.0795%" height="15" fill="rgb(234,3,18)" fg:x="446" fg:w="1"/><text x="35.7031%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.4531%" y="293" width="0.0795%" height="15" fill="rgb(249,199,20)" fg:x="446" fg:w="1"/><text x="35.7031%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.5326%" y="357" width="0.0795%" height="15" fill="rgb(224,134,6)" fg:x="447" fg:w="1"/><text x="35.7826%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.6121%" y="357" width="0.0795%" height="15" fill="rgb(254,83,26)" fg:x="448" fg:w="1"/><text x="35.8621%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.6916%" y="325" width="0.0795%" height="15" fill="rgb(217,88,9)" fg:x="449" fg:w="1"/><text x="35.9416%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.7711%" y="293" width="0.0795%" height="15" fill="rgb(225,73,2)" fg:x="450" fg:w="1"/><text x="36.0211%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="35.5326%" y="373" width="0.4769%" height="15" fill="rgb(226,44,39)" fg:x="447" fg:w="6"/><text x="35.7826%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="35.6916%" y="357" width="0.3180%" height="15" fill="rgb(228,53,17)" fg:x="449" fg:w="4"/><text x="35.9416%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.6916%" y="341" width="0.3180%" height="15" fill="rgb(212,27,27)" fg:x="449" fg:w="4"/><text x="35.9416%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="35.7711%" y="325" width="0.2385%" height="15" fill="rgb(241,50,6)" fg:x="450" fg:w="3"/><text x="36.0211%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.7711%" y="309" width="0.2385%" height="15" fill="rgb(225,28,51)" fg:x="450" fg:w="3"/><text x="36.0211%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="35.8506%" y="293" width="0.1590%" height="15" fill="rgb(215,33,16)" fg:x="451" fg:w="2"/><text x="36.1006%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.9300%" y="277" width="0.0795%" height="15" fill="rgb(243,40,39)" fg:x="452" fg:w="1"/><text x="36.1800%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.9300%" y="261" width="0.0795%" height="15" fill="rgb(225,11,42)" fg:x="452" fg:w="1"/><text x="36.1800%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.9300%" y="245" width="0.0795%" height="15" fill="rgb(241,220,38)" fg:x="452" fg:w="1"/><text x="36.1800%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="35.5326%" y="389" width="0.6359%" height="15" fill="rgb(244,52,35)" fg:x="447" fg:w="8"/><text x="35.7826%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.0095%" y="373" width="0.1590%" height="15" fill="rgb(246,42,46)" fg:x="453" fg:w="2"/><text x="36.2595%" y="383.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="36.1685%" y="389" width="0.0795%" height="15" fill="rgb(205,184,13)" fg:x="455" fg:w="1"/><text x="36.4185%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="36.1685%" y="373" width="0.0795%" height="15" fill="rgb(209,48,36)" fg:x="455" fg:w="1"/><text x="36.4185%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="36.1685%" y="357" width="0.0795%" height="15" fill="rgb(244,34,51)" fg:x="455" fg:w="1"/><text x="36.4185%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="36.1685%" y="341" width="0.0795%" height="15" fill="rgb(221,107,33)" fg:x="455" fg:w="1"/><text x="36.4185%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.2480%" y="373" width="0.0795%" height="15" fill="rgb(224,203,12)" fg:x="456" fg:w="1"/><text x="36.4980%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.2480%" y="357" width="0.0795%" height="15" fill="rgb(230,215,18)" fg:x="456" fg:w="1"/><text x="36.4980%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.2480%" y="341" width="0.0795%" height="15" fill="rgb(206,185,35)" fg:x="456" fg:w="1"/><text x="36.4980%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.2480%" y="325" width="0.0795%" height="15" fill="rgb(228,140,34)" fg:x="456" fg:w="1"/><text x="36.4980%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.2480%" y="309" width="0.0795%" height="15" fill="rgb(208,93,13)" fg:x="456" fg:w="1"/><text x="36.4980%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.2480%" y="293" width="0.0795%" height="15" fill="rgb(221,193,39)" fg:x="456" fg:w="1"/><text x="36.4980%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.2480%" y="277" width="0.0795%" height="15" fill="rgb(241,132,34)" fg:x="456" fg:w="1"/><text x="36.4980%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.2480%" y="261" width="0.0795%" height="15" fill="rgb(221,141,10)" fg:x="456" fg:w="1"/><text x="36.4980%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.2480%" y="245" width="0.0795%" height="15" fill="rgb(226,90,31)" fg:x="456" fg:w="1"/><text x="36.4980%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.2480%" y="229" width="0.0795%" height="15" fill="rgb(243,75,5)" fg:x="456" fg:w="1"/><text x="36.4980%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.2480%" y="213" width="0.0795%" height="15" fill="rgb(227,156,21)" fg:x="456" fg:w="1"/><text x="36.4980%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.2480%" y="197" width="0.0795%" height="15" fill="rgb(250,195,8)" fg:x="456" fg:w="1"/><text x="36.4980%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.2480%" y="181" width="0.0795%" height="15" fill="rgb(220,134,5)" fg:x="456" fg:w="1"/><text x="36.4980%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2480%" y="165" width="0.0795%" height="15" fill="rgb(246,106,34)" fg:x="456" fg:w="1"/><text x="36.4980%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.3275%" y="373" width="0.0795%" height="15" fill="rgb(205,1,4)" fg:x="457" fg:w="1"/><text x="36.5775%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.3275%" y="357" width="0.0795%" height="15" fill="rgb(224,151,29)" fg:x="457" fg:w="1"/><text x="36.5775%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.3275%" y="341" width="0.0795%" height="15" fill="rgb(251,196,0)" fg:x="457" fg:w="1"/><text x="36.5775%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.3275%" y="325" width="0.0795%" height="15" fill="rgb(212,127,0)" fg:x="457" fg:w="1"/><text x="36.5775%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.3275%" y="309" width="0.0795%" height="15" fill="rgb(236,71,53)" fg:x="457" fg:w="1"/><text x="36.5775%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.3275%" y="293" width="0.0795%" height="15" fill="rgb(227,99,0)" fg:x="457" fg:w="1"/><text x="36.5775%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.3275%" y="277" width="0.0795%" height="15" fill="rgb(239,89,21)" fg:x="457" fg:w="1"/><text x="36.5775%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.3275%" y="261" width="0.0795%" height="15" fill="rgb(243,122,19)" fg:x="457" fg:w="1"/><text x="36.5775%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.3275%" y="245" width="0.0795%" height="15" fill="rgb(229,192,45)" fg:x="457" fg:w="1"/><text x="36.5775%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.3275%" y="229" width="0.0795%" height="15" fill="rgb(235,165,35)" fg:x="457" fg:w="1"/><text x="36.5775%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.3275%" y="213" width="0.0795%" height="15" fill="rgb(253,202,0)" fg:x="457" fg:w="1"/><text x="36.5775%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.3275%" y="197" width="0.0795%" height="15" fill="rgb(235,51,20)" fg:x="457" fg:w="1"/><text x="36.5775%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="36.4070%" y="341" width="0.0795%" height="15" fill="rgb(218,95,46)" fg:x="458" fg:w="1"/><text x="36.6570%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="36.2480%" y="389" width="0.3975%" height="15" fill="rgb(212,81,10)" fg:x="456" fg:w="5"/><text x="36.4980%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="36.4070%" y="373" width="0.2385%" height="15" fill="rgb(240,59,0)" fg:x="458" fg:w="3"/><text x="36.6570%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="36.4070%" y="357" width="0.2385%" height="15" fill="rgb(212,191,42)" fg:x="458" fg:w="3"/><text x="36.6570%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="36.4865%" y="341" width="0.1590%" height="15" fill="rgb(233,140,3)" fg:x="459" fg:w="2"/><text x="36.7365%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="36.4865%" y="325" width="0.1590%" height="15" fill="rgb(215,69,23)" fg:x="459" fg:w="2"/><text x="36.7365%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="36.5660%" y="309" width="0.0795%" height="15" fill="rgb(240,202,20)" fg:x="460" fg:w="1"/><text x="36.8160%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="36.5660%" y="293" width="0.0795%" height="15" fill="rgb(209,146,50)" fg:x="460" fg:w="1"/><text x="36.8160%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="36.6455%" y="341" width="0.1590%" height="15" fill="rgb(253,102,54)" fg:x="461" fg:w="2"/><text x="36.8955%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.7250%" y="325" width="0.0795%" height="15" fill="rgb(250,173,47)" fg:x="462" fg:w="1"/><text x="36.9750%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.7250%" y="309" width="0.0795%" height="15" fill="rgb(232,142,7)" fg:x="462" fg:w="1"/><text x="36.9750%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.7250%" y="293" width="0.0795%" height="15" fill="rgb(230,157,47)" fg:x="462" fg:w="1"/><text x="36.9750%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.7250%" y="277" width="0.0795%" height="15" fill="rgb(214,177,35)" fg:x="462" fg:w="1"/><text x="36.9750%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.7250%" y="261" width="0.0795%" height="15" fill="rgb(234,119,46)" fg:x="462" fg:w="1"/><text x="36.9750%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.7250%" y="245" width="0.0795%" height="15" fill="rgb(241,180,50)" fg:x="462" fg:w="1"/><text x="36.9750%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.7250%" y="229" width="0.0795%" height="15" fill="rgb(221,54,25)" fg:x="462" fg:w="1"/><text x="36.9750%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.7250%" y="213" width="0.0795%" height="15" fill="rgb(209,157,44)" fg:x="462" fg:w="1"/><text x="36.9750%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.7250%" y="197" width="0.0795%" height="15" fill="rgb(246,115,41)" fg:x="462" fg:w="1"/><text x="36.9750%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.7250%" y="181" width="0.0795%" height="15" fill="rgb(229,86,1)" fg:x="462" fg:w="1"/><text x="36.9750%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.7250%" y="165" width="0.0795%" height="15" fill="rgb(240,108,53)" fg:x="462" fg:w="1"/><text x="36.9750%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.7250%" y="149" width="0.0795%" height="15" fill="rgb(227,134,2)" fg:x="462" fg:w="1"/><text x="36.9750%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.7250%" y="133" width="0.0795%" height="15" fill="rgb(213,129,25)" fg:x="462" fg:w="1"/><text x="36.9750%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.7250%" y="117" width="0.0795%" height="15" fill="rgb(226,35,21)" fg:x="462" fg:w="1"/><text x="36.9750%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.8045%" y="341" width="0.0795%" height="15" fill="rgb(208,129,26)" fg:x="463" fg:w="1"/><text x="37.0545%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.8045%" y="325" width="0.0795%" height="15" fill="rgb(224,83,6)" fg:x="463" fg:w="1"/><text x="37.0545%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.8045%" y="309" width="0.0795%" height="15" fill="rgb(227,52,39)" fg:x="463" fg:w="1"/><text x="37.0545%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="36.8045%" y="293" width="0.0795%" height="15" fill="rgb(241,30,17)" fg:x="463" fg:w="1"/><text x="37.0545%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="36.8045%" y="277" width="0.0795%" height="15" fill="rgb(246,186,42)" fg:x="463" fg:w="1"/><text x="37.0545%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="36.8045%" y="261" width="0.0795%" height="15" fill="rgb(221,169,15)" fg:x="463" fg:w="1"/><text x="37.0545%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.8045%" y="245" width="0.0795%" height="15" fill="rgb(235,108,21)" fg:x="463" fg:w="1"/><text x="37.0545%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="36.8045%" y="229" width="0.0795%" height="15" fill="rgb(219,148,30)" fg:x="463" fg:w="1"/><text x="37.0545%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="36.8045%" y="213" width="0.0795%" height="15" fill="rgb(220,109,5)" fg:x="463" fg:w="1"/><text x="37.0545%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="36.8045%" y="197" width="0.0795%" height="15" fill="rgb(213,203,48)" fg:x="463" fg:w="1"/><text x="37.0545%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="36.8045%" y="181" width="0.0795%" height="15" fill="rgb(244,71,33)" fg:x="463" fg:w="1"/><text x="37.0545%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="36.8045%" y="165" width="0.0795%" height="15" fill="rgb(209,23,2)" fg:x="463" fg:w="1"/><text x="37.0545%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8045%" y="149" width="0.0795%" height="15" fill="rgb(219,97,7)" fg:x="463" fg:w="1"/><text x="37.0545%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.8839%" y="341" width="0.0795%" height="15" fill="rgb(216,161,23)" fg:x="464" fg:w="1"/><text x="37.1339%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="37.2019%" y="277" width="0.0795%" height="15" fill="rgb(207,45,42)" fg:x="468" fg:w="1"/><text x="37.4519%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.2814%" y="277" width="0.0795%" height="15" fill="rgb(241,61,4)" fg:x="469" fg:w="1"/><text x="37.5314%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.2814%" y="261" width="0.0795%" height="15" fill="rgb(236,170,1)" fg:x="469" fg:w="1"/><text x="37.5314%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (12 samples, 0.95%)</title><rect x="36.6455%" y="357" width="0.9539%" height="15" fill="rgb(239,72,5)" fg:x="461" fg:w="12"/><text x="36.8955%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="36.9634%" y="341" width="0.6359%" height="15" fill="rgb(214,13,50)" fg:x="465" fg:w="8"/><text x="37.2134%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="36.9634%" y="325" width="0.6359%" height="15" fill="rgb(224,88,9)" fg:x="465" fg:w="8"/><text x="37.2134%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="37.0429%" y="309" width="0.5564%" height="15" fill="rgb(238,192,34)" fg:x="466" fg:w="7"/><text x="37.2929%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="37.0429%" y="293" width="0.5564%" height="15" fill="rgb(217,203,50)" fg:x="466" fg:w="7"/><text x="37.2929%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="37.3609%" y="277" width="0.2385%" height="15" fill="rgb(241,123,32)" fg:x="470" fg:w="3"/><text x="37.6109%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.3609%" y="261" width="0.2385%" height="15" fill="rgb(248,151,39)" fg:x="470" fg:w="3"/><text x="37.6109%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (13 samples, 1.03%)</title><rect x="36.6455%" y="389" width="1.0334%" height="15" fill="rgb(208,89,6)" fg:x="461" fg:w="13"/><text x="36.8955%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (13 samples, 1.03%)</title><rect x="36.6455%" y="373" width="1.0334%" height="15" fill="rgb(254,43,26)" fg:x="461" fg:w="13"/><text x="36.8955%" y="383.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="37.5994%" y="357" width="0.0795%" height="15" fill="rgb(216,158,13)" fg:x="473" fg:w="1"/><text x="37.8494%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="37.5994%" y="341" width="0.0795%" height="15" fill="rgb(212,47,37)" fg:x="473" fg:w="1"/><text x="37.8494%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="37.5994%" y="325" width="0.0795%" height="15" fill="rgb(254,16,10)" fg:x="473" fg:w="1"/><text x="37.8494%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="37.9968%" y="245" width="0.1590%" height="15" fill="rgb(223,228,16)" fg:x="478" fg:w="2"/><text x="38.2468%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="37.9968%" y="229" width="0.1590%" height="15" fill="rgb(249,108,50)" fg:x="478" fg:w="2"/><text x="38.2468%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="38.0763%" y="213" width="0.0795%" height="15" fill="rgb(208,220,5)" fg:x="479" fg:w="1"/><text x="38.3263%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="37.8378%" y="309" width="0.3975%" height="15" fill="rgb(217,89,48)" fg:x="476" fg:w="5"/><text x="38.0878%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="37.9173%" y="293" width="0.3180%" height="15" fill="rgb(212,113,41)" fg:x="477" fg:w="4"/><text x="38.1673%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="37.9173%" y="277" width="0.3180%" height="15" fill="rgb(231,127,5)" fg:x="477" fg:w="4"/><text x="38.1673%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="37.9173%" y="261" width="0.3180%" height="15" fill="rgb(217,141,17)" fg:x="477" fg:w="4"/><text x="38.1673%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="38.1558%" y="245" width="0.0795%" height="15" fill="rgb(245,125,54)" fg:x="480" fg:w="1"/><text x="38.4058%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="38.3148%" y="261" width="0.0795%" height="15" fill="rgb(248,125,3)" fg:x="482" fg:w="1"/><text x="38.5648%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="38.3148%" y="245" width="0.0795%" height="15" fill="rgb(236,119,51)" fg:x="482" fg:w="1"/><text x="38.5648%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.4738%" y="229" width="0.1590%" height="15" fill="rgb(239,99,8)" fg:x="484" fg:w="2"/><text x="38.7238%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="38.3943%" y="245" width="0.7154%" height="15" fill="rgb(224,228,4)" fg:x="483" fg:w="9"/><text x="38.6443%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="38.6328%" y="229" width="0.4769%" height="15" fill="rgb(220,131,45)" fg:x="486" fg:w="6"/><text x="38.8828%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="39.1097%" y="245" width="0.3975%" height="15" fill="rgb(215,62,5)" fg:x="492" fg:w="5"/><text x="39.3597%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="39.1097%" y="229" width="0.3975%" height="15" fill="rgb(253,12,24)" fg:x="492" fg:w="5"/><text x="39.3597%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="39.5072%" y="245" width="0.0795%" height="15" fill="rgb(248,120,50)" fg:x="497" fg:w="1"/><text x="39.7572%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.5072%" y="229" width="0.0795%" height="15" fill="rgb(245,194,10)" fg:x="497" fg:w="1"/><text x="39.7572%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.5072%" y="213" width="0.0795%" height="15" fill="rgb(241,149,38)" fg:x="497" fg:w="1"/><text x="39.7572%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.7456%" y="181" width="0.0795%" height="15" fill="rgb(219,215,7)" fg:x="500" fg:w="1"/><text x="39.9956%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="39.8251%" y="181" width="0.0795%" height="15" fill="rgb(208,120,31)" fg:x="501" fg:w="1"/><text x="40.0751%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.8251%" y="165" width="0.0795%" height="15" fill="rgb(244,30,8)" fg:x="501" fg:w="1"/><text x="40.0751%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.8251%" y="149" width="0.0795%" height="15" fill="rgb(238,35,44)" fg:x="501" fg:w="1"/><text x="40.0751%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.8251%" y="133" width="0.0795%" height="15" fill="rgb(243,218,37)" fg:x="501" fg:w="1"/><text x="40.0751%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="39.9046%" y="181" width="0.0795%" height="15" fill="rgb(218,169,10)" fg:x="502" fg:w="1"/><text x="40.1546%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="39.9046%" y="165" width="0.0795%" height="15" fill="rgb(221,144,10)" fg:x="502" fg:w="1"/><text x="40.1546%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="39.9046%" y="149" width="0.0795%" height="15" fill="rgb(226,41,38)" fg:x="502" fg:w="1"/><text x="40.1546%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.9841%" y="165" width="0.0795%" height="15" fill="rgb(228,3,1)" fg:x="503" fg:w="1"/><text x="40.2341%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.9841%" y="149" width="0.0795%" height="15" fill="rgb(209,129,12)" fg:x="503" fg:w="1"/><text x="40.2341%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.9841%" y="133" width="0.0795%" height="15" fill="rgb(213,136,33)" fg:x="503" fg:w="1"/><text x="40.2341%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.9841%" y="117" width="0.0795%" height="15" fill="rgb(209,181,29)" fg:x="503" fg:w="1"/><text x="40.2341%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (51 samples, 4.05%)</title><rect x="39.9841%" y="181" width="4.0541%" height="15" fill="rgb(234,173,18)" fg:x="503" fg:w="51"/><text x="40.2341%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (50 samples, 3.97%)</title><rect x="40.0636%" y="165" width="3.9746%" height="15" fill="rgb(227,73,47)" fg:x="504" fg:w="50"/><text x="40.3136%" y="175.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (50 samples, 3.97%)</title><rect x="40.0636%" y="149" width="3.9746%" height="15" fill="rgb(234,9,34)" fg:x="504" fg:w="50"/><text x="40.3136%" y="159.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 4.45%)</title><rect x="39.6661%" y="229" width="4.4515%" height="15" fill="rgb(235,172,15)" fg:x="499" fg:w="56"/><text x="39.9161%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.45%)</title><rect x="39.6661%" y="213" width="4.4515%" height="15" fill="rgb(245,61,2)" fg:x="499" fg:w="56"/><text x="39.9161%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.45%)</title><rect x="39.6661%" y="197" width="4.4515%" height="15" fill="rgb(238,39,47)" fg:x="499" fg:w="56"/><text x="39.9161%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="44.0382%" y="181" width="0.0795%" height="15" fill="rgb(234,37,24)" fg:x="554" fg:w="1"/><text x="44.2882%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="44.1971%" y="213" width="0.0795%" height="15" fill="rgb(248,223,24)" fg:x="556" fg:w="1"/><text x="44.4471%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="44.2766%" y="213" width="0.2385%" height="15" fill="rgb(223,12,15)" fg:x="557" fg:w="3"/><text x="44.5266%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="44.2766%" y="197" width="0.2385%" height="15" fill="rgb(249,6,3)" fg:x="557" fg:w="3"/><text x="44.5266%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.3561%" y="181" width="0.1590%" height="15" fill="rgb(237,105,33)" fg:x="558" fg:w="2"/><text x="44.6061%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="44.3561%" y="165" width="0.1590%" height="15" fill="rgb(252,208,35)" fg:x="558" fg:w="2"/><text x="44.6061%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="44.1176%" y="229" width="0.5564%" height="15" fill="rgb(215,181,35)" fg:x="555" fg:w="7"/><text x="44.3676%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="44.5151%" y="213" width="0.1590%" height="15" fill="rgb(246,212,3)" fg:x="560" fg:w="2"/><text x="44.7651%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (65 samples, 5.17%)</title><rect x="39.5866%" y="245" width="5.1669%" height="15" fill="rgb(247,156,24)" fg:x="498" fg:w="65"/><text x="39.8366%" y="255.50">regex_..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="44.6741%" y="229" width="0.0795%" height="15" fill="rgb(248,9,31)" fg:x="562" fg:w="1"/><text x="44.9241%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="44.7536%" y="245" width="0.0795%" height="15" fill="rgb(234,26,45)" fg:x="563" fg:w="1"/><text x="45.0036%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="44.7536%" y="229" width="0.0795%" height="15" fill="rgb(249,11,32)" fg:x="563" fg:w="1"/><text x="45.0036%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="44.7536%" y="213" width="0.0795%" height="15" fill="rgb(249,162,33)" fg:x="563" fg:w="1"/><text x="45.0036%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.7536%" y="197" width="0.0795%" height="15" fill="rgb(232,4,32)" fg:x="563" fg:w="1"/><text x="45.0036%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (82 samples, 6.52%)</title><rect x="38.3943%" y="261" width="6.5183%" height="15" fill="rgb(212,5,45)" fg:x="483" fg:w="82"/><text x="38.6443%" y="271.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="44.8331%" y="245" width="0.0795%" height="15" fill="rgb(227,95,13)" fg:x="564" fg:w="1"/><text x="45.0831%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="45.1510%" y="181" width="0.0795%" height="15" fill="rgb(223,205,10)" fg:x="568" fg:w="1"/><text x="45.4010%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (4 samples, 0.32%)</title><rect x="44.9921%" y="213" width="0.3180%" height="15" fill="rgb(222,178,8)" fg:x="566" fg:w="4"/><text x="45.2421%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="45.1510%" y="197" width="0.1590%" height="15" fill="rgb(216,13,22)" fg:x="568" fg:w="2"/><text x="45.4010%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="45.2305%" y="181" width="0.0795%" height="15" fill="rgb(240,167,12)" fg:x="569" fg:w="1"/><text x="45.4805%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="44.9126%" y="261" width="0.7154%" height="15" fill="rgb(235,68,35)" fg:x="565" fg:w="9"/><text x="45.1626%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="44.9921%" y="245" width="0.6359%" height="15" fill="rgb(253,40,27)" fg:x="566" fg:w="8"/><text x="45.2421%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="44.9921%" y="229" width="0.6359%" height="15" fill="rgb(214,19,28)" fg:x="566" fg:w="8"/><text x="45.2421%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="45.3100%" y="213" width="0.3180%" height="15" fill="rgb(210,167,45)" fg:x="570" fg:w="4"/><text x="45.5600%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="45.3100%" y="197" width="0.3180%" height="15" fill="rgb(232,97,40)" fg:x="570" fg:w="4"/><text x="45.5600%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="45.3100%" y="181" width="0.3180%" height="15" fill="rgb(250,35,23)" fg:x="570" fg:w="4"/><text x="45.5600%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="45.3895%" y="165" width="0.2385%" height="15" fill="rgb(248,47,53)" fg:x="571" fg:w="3"/><text x="45.6395%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (94 samples, 7.47%)</title><rect x="38.2353%" y="277" width="7.4722%" height="15" fill="rgb(226,58,50)" fg:x="481" fg:w="94"/><text x="38.4853%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="45.6280%" y="261" width="0.0795%" height="15" fill="rgb(217,105,26)" fg:x="574" fg:w="1"/><text x="45.8780%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="45.6280%" y="245" width="0.0795%" height="15" fill="rgb(208,64,1)" fg:x="574" fg:w="1"/><text x="45.8780%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="45.6280%" y="229" width="0.0795%" height="15" fill="rgb(214,80,1)" fg:x="574" fg:w="1"/><text x="45.8780%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="45.6280%" y="213" width="0.0795%" height="15" fill="rgb(206,175,26)" fg:x="574" fg:w="1"/><text x="45.8780%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.6280%" y="197" width="0.0795%" height="15" fill="rgb(235,156,37)" fg:x="574" fg:w="1"/><text x="45.8780%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.6280%" y="181" width="0.0795%" height="15" fill="rgb(213,100,9)" fg:x="574" fg:w="1"/><text x="45.8780%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.6280%" y="165" width="0.0795%" height="15" fill="rgb(241,15,13)" fg:x="574" fg:w="1"/><text x="45.8780%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (95 samples, 7.55%)</title><rect x="38.2353%" y="309" width="7.5517%" height="15" fill="rgb(205,97,43)" fg:x="481" fg:w="95"/><text x="38.4853%" y="319.50">&lt;regex::re..</text></g><g><title>regex::builders::string::RegexBuilder::build (95 samples, 7.55%)</title><rect x="38.2353%" y="293" width="7.5517%" height="15" fill="rgb(216,106,32)" fg:x="481" fg:w="95"/><text x="38.4853%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="45.7075%" y="277" width="0.0795%" height="15" fill="rgb(226,200,8)" fg:x="575" fg:w="1"/><text x="45.9575%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::swap_greed (1 samples, 0.08%)</title><rect x="45.7075%" y="261" width="0.0795%" height="15" fill="rgb(244,54,29)" fg:x="575" fg:w="1"/><text x="45.9575%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="45.7870%" y="277" width="0.1590%" height="15" fill="rgb(252,169,12)" fg:x="576" fg:w="2"/><text x="46.0370%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="45.7870%" y="261" width="0.1590%" height="15" fill="rgb(231,199,11)" fg:x="576" fg:w="2"/><text x="46.0370%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="45.8665%" y="245" width="0.0795%" height="15" fill="rgb(233,191,18)" fg:x="577" fg:w="1"/><text x="46.1165%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.9459%" y="261" width="0.0795%" height="15" fill="rgb(215,83,47)" fg:x="578" fg:w="1"/><text x="46.1959%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="45.7870%" y="309" width="0.3180%" height="15" fill="rgb(251,67,19)" fg:x="576" fg:w="4"/><text x="46.0370%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="45.7870%" y="293" width="0.3180%" height="15" fill="rgb(240,7,20)" fg:x="576" fg:w="4"/><text x="46.0370%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="45.9459%" y="277" width="0.1590%" height="15" fill="rgb(210,150,26)" fg:x="578" fg:w="2"/><text x="46.1959%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="46.0254%" y="261" width="0.0795%" height="15" fill="rgb(228,75,42)" fg:x="579" fg:w="1"/><text x="46.2754%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.0254%" y="245" width="0.0795%" height="15" fill="rgb(237,134,48)" fg:x="579" fg:w="1"/><text x="46.2754%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.1049%" y="245" width="0.0795%" height="15" fill="rgb(205,80,50)" fg:x="580" fg:w="1"/><text x="46.3549%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.1049%" y="229" width="0.0795%" height="15" fill="rgb(217,74,48)" fg:x="580" fg:w="1"/><text x="46.3549%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.4229%" y="229" width="0.0795%" height="15" fill="rgb(205,82,50)" fg:x="584" fg:w="1"/><text x="46.6729%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="46.1844%" y="245" width="0.4769%" height="15" fill="rgb(228,1,33)" fg:x="581" fg:w="6"/><text x="46.4344%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="46.5024%" y="229" width="0.1590%" height="15" fill="rgb(214,50,23)" fg:x="585" fg:w="2"/><text x="46.7524%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (112 samples, 8.90%)</title><rect x="37.8378%" y="325" width="8.9030%" height="15" fill="rgb(210,62,9)" fg:x="476" fg:w="112"/><text x="38.0878%" y="335.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="46.1049%" y="309" width="0.6359%" height="15" fill="rgb(210,104,37)" fg:x="580" fg:w="8"/><text x="46.3549%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="46.1049%" y="293" width="0.6359%" height="15" fill="rgb(232,104,43)" fg:x="580" fg:w="8"/><text x="46.3549%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="46.1049%" y="277" width="0.6359%" height="15" fill="rgb(244,52,6)" fg:x="580" fg:w="8"/><text x="46.3549%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="46.1049%" y="261" width="0.6359%" height="15" fill="rgb(211,174,52)" fg:x="580" fg:w="8"/><text x="46.3549%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="46.6614%" y="245" width="0.0795%" height="15" fill="rgb(229,48,4)" fg:x="587" fg:w="1"/><text x="46.9114%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.6614%" y="229" width="0.0795%" height="15" fill="rgb(205,155,16)" fg:x="587" fg:w="1"/><text x="46.9114%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.6614%" y="213" width="0.0795%" height="15" fill="rgb(211,141,53)" fg:x="587" fg:w="1"/><text x="46.9114%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.6614%" y="197" width="0.0795%" height="15" fill="rgb(240,148,11)" fg:x="587" fg:w="1"/><text x="46.9114%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.8203%" y="261" width="0.0795%" height="15" fill="rgb(214,45,23)" fg:x="589" fg:w="1"/><text x="47.0703%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="46.8998%" y="261" width="0.0795%" height="15" fill="rgb(248,74,26)" fg:x="590" fg:w="1"/><text x="47.1498%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.8998%" y="245" width="0.0795%" height="15" fill="rgb(218,121,16)" fg:x="590" fg:w="1"/><text x="47.1498%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="46.8998%" y="229" width="0.0795%" height="15" fill="rgb(218,10,47)" fg:x="590" fg:w="1"/><text x="47.1498%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.8998%" y="213" width="0.0795%" height="15" fill="rgb(227,99,14)" fg:x="590" fg:w="1"/><text x="47.1498%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.8998%" y="197" width="0.0795%" height="15" fill="rgb(229,83,46)" fg:x="590" fg:w="1"/><text x="47.1498%" y="207.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="46.9793%" y="261" width="0.0795%" height="15" fill="rgb(228,25,1)" fg:x="591" fg:w="1"/><text x="47.2293%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="47.2178%" y="245" width="0.0795%" height="15" fill="rgb(252,190,15)" fg:x="594" fg:w="1"/><text x="47.4678%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.2178%" y="229" width="0.0795%" height="15" fill="rgb(213,103,51)" fg:x="594" fg:w="1"/><text x="47.4678%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="47.2973%" y="229" width="0.0795%" height="15" fill="rgb(220,38,44)" fg:x="595" fg:w="1"/><text x="47.5473%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="47.2973%" y="245" width="0.1590%" height="15" fill="rgb(210,45,26)" fg:x="595" fg:w="2"/><text x="47.5473%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="47.3768%" y="229" width="0.0795%" height="15" fill="rgb(205,95,48)" fg:x="596" fg:w="1"/><text x="47.6268%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="47.3768%" y="213" width="0.0795%" height="15" fill="rgb(225,179,37)" fg:x="596" fg:w="1"/><text x="47.6268%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="47.3768%" y="197" width="0.0795%" height="15" fill="rgb(230,209,3)" fg:x="596" fg:w="1"/><text x="47.6268%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.3768%" y="181" width="0.0795%" height="15" fill="rgb(248,12,46)" fg:x="596" fg:w="1"/><text x="47.6268%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="47.4563%" y="229" width="0.0795%" height="15" fill="rgb(234,18,0)" fg:x="597" fg:w="1"/><text x="47.7063%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="47.4563%" y="213" width="0.0795%" height="15" fill="rgb(238,197,14)" fg:x="597" fg:w="1"/><text x="47.7063%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.4563%" y="197" width="0.0795%" height="15" fill="rgb(251,162,48)" fg:x="597" fg:w="1"/><text x="47.7063%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.4563%" y="181" width="0.0795%" height="15" fill="rgb(237,73,42)" fg:x="597" fg:w="1"/><text x="47.7063%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="47.0588%" y="261" width="0.5564%" height="15" fill="rgb(211,108,8)" fg:x="592" fg:w="7"/><text x="47.3088%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="47.4563%" y="245" width="0.1590%" height="15" fill="rgb(213,45,22)" fg:x="597" fg:w="2"/><text x="47.7063%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="47.5358%" y="229" width="0.0795%" height="15" fill="rgb(252,154,5)" fg:x="598" fg:w="1"/><text x="47.7858%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="47.5358%" y="213" width="0.0795%" height="15" fill="rgb(221,79,52)" fg:x="598" fg:w="1"/><text x="47.7858%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="47.6153%" y="213" width="0.0795%" height="15" fill="rgb(229,220,36)" fg:x="599" fg:w="1"/><text x="47.8653%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="47.6153%" y="197" width="0.0795%" height="15" fill="rgb(211,17,16)" fg:x="599" fg:w="1"/><text x="47.8653%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="47.6153%" y="181" width="0.0795%" height="15" fill="rgb(222,55,31)" fg:x="599" fg:w="1"/><text x="47.8653%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="47.6153%" y="261" width="0.2385%" height="15" fill="rgb(221,221,31)" fg:x="599" fg:w="3"/><text x="47.8653%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="47.6153%" y="245" width="0.2385%" height="15" fill="rgb(227,168,26)" fg:x="599" fg:w="3"/><text x="47.8653%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="47.6153%" y="229" width="0.2385%" height="15" fill="rgb(224,139,9)" fg:x="599" fg:w="3"/><text x="47.8653%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="47.6948%" y="213" width="0.1590%" height="15" fill="rgb(254,172,0)" fg:x="600" fg:w="2"/><text x="47.9448%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="47.6948%" y="197" width="0.1590%" height="15" fill="rgb(235,203,1)" fg:x="600" fg:w="2"/><text x="47.9448%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.7742%" y="181" width="0.0795%" height="15" fill="rgb(216,205,24)" fg:x="601" fg:w="1"/><text x="48.0242%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="47.8537%" y="229" width="0.0795%" height="15" fill="rgb(233,24,6)" fg:x="602" fg:w="1"/><text x="48.1037%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="47.8537%" y="213" width="0.0795%" height="15" fill="rgb(244,110,9)" fg:x="602" fg:w="1"/><text x="48.1037%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.35%)</title><rect x="46.7409%" y="277" width="1.3514%" height="15" fill="rgb(239,222,42)" fg:x="588" fg:w="17"/><text x="46.9909%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="47.8537%" y="261" width="0.2385%" height="15" fill="rgb(218,145,13)" fg:x="602" fg:w="3"/><text x="48.1037%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="47.8537%" y="245" width="0.2385%" height="15" fill="rgb(207,69,11)" fg:x="602" fg:w="3"/><text x="48.1037%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="47.9332%" y="229" width="0.1590%" height="15" fill="rgb(220,223,22)" fg:x="603" fg:w="2"/><text x="48.1832%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (18 samples, 1.43%)</title><rect x="46.7409%" y="309" width="1.4308%" height="15" fill="rgb(245,102,5)" fg:x="588" fg:w="18"/><text x="46.9909%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (18 samples, 1.43%)</title><rect x="46.7409%" y="293" width="1.4308%" height="15" fill="rgb(211,148,2)" fg:x="588" fg:w="18"/><text x="46.9909%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="48.0922%" y="277" width="0.0795%" height="15" fill="rgb(241,13,44)" fg:x="605" fg:w="1"/><text x="48.3422%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::octal (1 samples, 0.08%)</title><rect x="48.0922%" y="261" width="0.0795%" height="15" fill="rgb(219,137,21)" fg:x="605" fg:w="1"/><text x="48.3422%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="48.1717%" y="309" width="0.0795%" height="15" fill="rgb(242,206,5)" fg:x="606" fg:w="1"/><text x="48.4217%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="48.1717%" y="293" width="0.0795%" height="15" fill="rgb(217,114,22)" fg:x="606" fg:w="1"/><text x="48.4217%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="48.1717%" y="277" width="0.0795%" height="15" fill="rgb(253,206,42)" fg:x="606" fg:w="1"/><text x="48.4217%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="48.1717%" y="261" width="0.0795%" height="15" fill="rgb(236,102,18)" fg:x="606" fg:w="1"/><text x="48.4217%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="48.1717%" y="245" width="0.0795%" height="15" fill="rgb(208,59,49)" fg:x="606" fg:w="1"/><text x="48.4217%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="48.2512%" y="309" width="0.0795%" height="15" fill="rgb(215,194,28)" fg:x="607" fg:w="1"/><text x="48.5012%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="48.2512%" y="293" width="0.0795%" height="15" fill="rgb(243,207,11)" fg:x="607" fg:w="1"/><text x="48.5012%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="48.2512%" y="277" width="0.0795%" height="15" fill="rgb(254,179,35)" fg:x="607" fg:w="1"/><text x="48.5012%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="48.2512%" y="261" width="0.0795%" height="15" fill="rgb(235,97,3)" fg:x="607" fg:w="1"/><text x="48.5012%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.2512%" y="245" width="0.0795%" height="15" fill="rgb(215,155,33)" fg:x="607" fg:w="1"/><text x="48.5012%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (23 samples, 1.83%)</title><rect x="46.7409%" y="325" width="1.8283%" height="15" fill="rgb(223,128,12)" fg:x="588" fg:w="23"/><text x="46.9909%" y="335.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="48.3307%" y="309" width="0.2385%" height="15" fill="rgb(208,157,18)" fg:x="608" fg:w="3"/><text x="48.5807%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="48.3307%" y="293" width="0.2385%" height="15" fill="rgb(249,70,54)" fg:x="608" fg:w="3"/><text x="48.5807%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="48.3307%" y="277" width="0.2385%" height="15" fill="rgb(244,118,24)" fg:x="608" fg:w="3"/><text x="48.5807%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="48.3307%" y="261" width="0.2385%" height="15" fill="rgb(211,54,0)" fg:x="608" fg:w="3"/><text x="48.5807%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="48.3307%" y="245" width="0.2385%" height="15" fill="rgb(245,137,45)" fg:x="608" fg:w="3"/><text x="48.5807%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.4897%" y="229" width="0.0795%" height="15" fill="rgb(232,154,31)" fg:x="610" fg:w="1"/><text x="48.7397%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="48.4897%" y="213" width="0.0795%" height="15" fill="rgb(253,6,39)" fg:x="610" fg:w="1"/><text x="48.7397%" y="223.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="48.5692%" y="325" width="0.0795%" height="15" fill="rgb(234,183,24)" fg:x="611" fg:w="1"/><text x="48.8192%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="48.7281%" y="261" width="0.1590%" height="15" fill="rgb(252,84,40)" fg:x="613" fg:w="2"/><text x="48.9781%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="48.7281%" y="245" width="0.1590%" height="15" fill="rgb(224,65,2)" fg:x="613" fg:w="2"/><text x="48.9781%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="48.7281%" y="229" width="0.1590%" height="15" fill="rgb(229,38,24)" fg:x="613" fg:w="2"/><text x="48.9781%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.8871%" y="261" width="0.0795%" height="15" fill="rgb(218,131,50)" fg:x="615" fg:w="1"/><text x="49.1371%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.9666%" y="261" width="0.0795%" height="15" fill="rgb(233,106,18)" fg:x="616" fg:w="1"/><text x="49.2166%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="49.2051%" y="229" width="0.0795%" height="15" fill="rgb(220,216,11)" fg:x="619" fg:w="1"/><text x="49.4551%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="49.0461%" y="261" width="0.3180%" height="15" fill="rgb(251,100,45)" fg:x="617" fg:w="4"/><text x="49.2961%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="49.1256%" y="245" width="0.2385%" height="15" fill="rgb(235,143,32)" fg:x="618" fg:w="3"/><text x="49.3756%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="49.2846%" y="229" width="0.0795%" height="15" fill="rgb(248,124,34)" fg:x="620" fg:w="1"/><text x="49.5346%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.2846%" y="213" width="0.0795%" height="15" fill="rgb(225,221,4)" fg:x="620" fg:w="1"/><text x="49.5346%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="49.2846%" y="197" width="0.0795%" height="15" fill="rgb(242,27,43)" fg:x="620" fg:w="1"/><text x="49.5346%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.2846%" y="181" width="0.0795%" height="15" fill="rgb(227,54,8)" fg:x="620" fg:w="1"/><text x="49.5346%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2846%" y="165" width="0.0795%" height="15" fill="rgb(253,139,49)" fg:x="620" fg:w="1"/><text x="49.5346%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="49.2846%" y="149" width="0.0795%" height="15" fill="rgb(231,26,43)" fg:x="620" fg:w="1"/><text x="49.5346%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="49.2846%" y="133" width="0.0795%" height="15" fill="rgb(207,121,39)" fg:x="620" fg:w="1"/><text x="49.5346%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="49.3641%" y="261" width="0.0795%" height="15" fill="rgb(223,101,35)" fg:x="621" fg:w="1"/><text x="49.6141%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.3641%" y="245" width="0.0795%" height="15" fill="rgb(232,87,23)" fg:x="621" fg:w="1"/><text x="49.6141%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.27%)</title><rect x="49.6025%" y="229" width="1.2719%" height="15" fill="rgb(225,180,29)" fg:x="624" fg:w="16"/><text x="49.8525%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="50.7154%" y="213" width="0.1590%" height="15" fill="rgb(225,25,17)" fg:x="638" fg:w="2"/><text x="50.9654%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19 samples, 1.51%)</title><rect x="49.4436%" y="245" width="1.5103%" height="15" fill="rgb(223,8,52)" fg:x="622" fg:w="19"/><text x="49.6936%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="50.8744%" y="229" width="0.0795%" height="15" fill="rgb(246,42,21)" fg:x="640" fg:w="1"/><text x="51.1244%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="50.9539%" y="245" width="0.2385%" height="15" fill="rgb(205,64,43)" fg:x="641" fg:w="3"/><text x="51.2039%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="51.0334%" y="229" width="0.1590%" height="15" fill="rgb(221,160,13)" fg:x="642" fg:w="2"/><text x="51.2834%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.4308%" y="213" width="0.0795%" height="15" fill="rgb(239,58,35)" fg:x="647" fg:w="1"/><text x="51.6808%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.5103%" y="213" width="0.0795%" height="15" fill="rgb(251,26,40)" fg:x="648" fg:w="1"/><text x="51.7603%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.5103%" y="197" width="0.0795%" height="15" fill="rgb(247,0,4)" fg:x="648" fg:w="1"/><text x="51.7603%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.5103%" y="181" width="0.0795%" height="15" fill="rgb(218,130,10)" fg:x="648" fg:w="1"/><text x="51.7603%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="51.5898%" y="213" width="0.0795%" height="15" fill="rgb(239,32,7)" fg:x="649" fg:w="1"/><text x="51.8398%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.5898%" y="197" width="0.0795%" height="15" fill="rgb(210,192,24)" fg:x="649" fg:w="1"/><text x="51.8398%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="52.1463%" y="181" width="0.2385%" height="15" fill="rgb(226,212,17)" fg:x="656" fg:w="3"/><text x="52.3963%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="52.1463%" y="165" width="0.2385%" height="15" fill="rgb(219,201,28)" fg:x="656" fg:w="3"/><text x="52.3963%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="52.1463%" y="149" width="0.2385%" height="15" fill="rgb(235,207,41)" fg:x="656" fg:w="3"/><text x="52.3963%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.79%)</title><rect x="51.6693%" y="213" width="0.7949%" height="15" fill="rgb(241,95,54)" fg:x="650" fg:w="10"/><text x="51.9193%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="51.9873%" y="197" width="0.4769%" height="15" fill="rgb(248,12,23)" fg:x="654" fg:w="6"/><text x="52.2373%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.3847%" y="181" width="0.0795%" height="15" fill="rgb(228,173,4)" fg:x="659" fg:w="1"/><text x="52.6347%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.4642%" y="197" width="0.0795%" height="15" fill="rgb(254,99,5)" fg:x="660" fg:w="1"/><text x="52.7142%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (22 samples, 1.75%)</title><rect x="51.1924%" y="245" width="1.7488%" height="15" fill="rgb(212,184,17)" fg:x="644" fg:w="22"/><text x="51.4424%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (22 samples, 1.75%)</title><rect x="51.1924%" y="229" width="1.7488%" height="15" fill="rgb(252,174,1)" fg:x="644" fg:w="22"/><text x="51.4424%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="52.4642%" y="213" width="0.4769%" height="15" fill="rgb(241,118,51)" fg:x="660" fg:w="6"/><text x="52.7142%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="52.5437%" y="197" width="0.3975%" height="15" fill="rgb(227,94,47)" fg:x="661" fg:w="5"/><text x="52.7937%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="52.5437%" y="181" width="0.3975%" height="15" fill="rgb(229,104,2)" fg:x="661" fg:w="5"/><text x="52.7937%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="52.9412%" y="245" width="0.0795%" height="15" fill="rgb(219,28,31)" fg:x="666" fg:w="1"/><text x="53.1912%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="53.6566%" y="133" width="0.4769%" height="15" fill="rgb(233,109,36)" fg:x="675" fg:w="6"/><text x="53.9066%" y="143.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="54.1335%" y="133" width="0.2385%" height="15" fill="rgb(246,88,11)" fg:x="681" fg:w="3"/><text x="54.3835%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="54.3720%" y="133" width="0.3975%" height="15" fill="rgb(209,212,17)" fg:x="684" fg:w="5"/><text x="54.6220%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="54.3720%" y="117" width="0.3975%" height="15" fill="rgb(243,59,29)" fg:x="684" fg:w="5"/><text x="54.6220%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="54.3720%" y="101" width="0.3975%" height="15" fill="rgb(244,205,48)" fg:x="684" fg:w="5"/><text x="54.6220%" y="111.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="54.3720%" y="85" width="0.3975%" height="15" fill="rgb(227,30,6)" fg:x="684" fg:w="5"/><text x="54.6220%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="54.7695%" y="133" width="0.1590%" height="15" fill="rgb(220,205,48)" fg:x="689" fg:w="2"/><text x="55.0195%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="55.4054%" y="101" width="0.3975%" height="15" fill="rgb(250,94,14)" fg:x="697" fg:w="5"/><text x="55.6554%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="55.4054%" y="85" width="0.3975%" height="15" fill="rgb(216,119,42)" fg:x="697" fg:w="5"/><text x="55.6554%" y="95.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="55.4849%" y="69" width="0.3180%" height="15" fill="rgb(232,155,0)" fg:x="698" fg:w="4"/><text x="55.7349%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2003%" y="85" width="0.0795%" height="15" fill="rgb(212,24,32)" fg:x="707" fg:w="1"/><text x="56.4503%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (19 samples, 1.51%)</title><rect x="54.9285%" y="133" width="1.5103%" height="15" fill="rgb(216,69,20)" fg:x="691" fg:w="19"/><text x="55.1785%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (18 samples, 1.43%)</title><rect x="55.0079%" y="117" width="1.4308%" height="15" fill="rgb(229,73,31)" fg:x="692" fg:w="18"/><text x="55.2579%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.64%)</title><rect x="55.8029%" y="101" width="0.6359%" height="15" fill="rgb(224,219,20)" fg:x="702" fg:w="8"/><text x="56.0529%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="56.2798%" y="85" width="0.1590%" height="15" fill="rgb(215,146,41)" fg:x="708" fg:w="2"/><text x="56.5298%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.3593%" y="69" width="0.0795%" height="15" fill="rgb(244,71,31)" fg:x="709" fg:w="1"/><text x="56.6093%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.3593%" y="53" width="0.0795%" height="15" fill="rgb(224,24,11)" fg:x="709" fg:w="1"/><text x="56.6093%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.3593%" y="37" width="0.0795%" height="15" fill="rgb(229,76,15)" fg:x="709" fg:w="1"/><text x="56.6093%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="56.4388%" y="133" width="0.0795%" height="15" fill="rgb(209,93,2)" fg:x="710" fg:w="1"/><text x="56.6888%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="56.4388%" y="117" width="0.0795%" height="15" fill="rgb(216,200,50)" fg:x="710" fg:w="1"/><text x="56.6888%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="56.4388%" y="101" width="0.0795%" height="15" fill="rgb(211,67,34)" fg:x="710" fg:w="1"/><text x="56.6888%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="56.4388%" y="85" width="0.0795%" height="15" fill="rgb(225,87,47)" fg:x="710" fg:w="1"/><text x="56.6888%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (47 samples, 3.74%)</title><rect x="56.5183%" y="133" width="3.7361%" height="15" fill="rgb(217,185,16)" fg:x="711" fg:w="47"/><text x="56.7683%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (47 samples, 3.74%)</title><rect x="56.5183%" y="117" width="3.7361%" height="15" fill="rgb(205,0,0)" fg:x="711" fg:w="47"/><text x="56.7683%" y="127.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (46 samples, 3.66%)</title><rect x="56.5978%" y="101" width="3.6566%" height="15" fill="rgb(207,116,45)" fg:x="712" fg:w="46"/><text x="56.8478%" y="111.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="60.2544%" y="133" width="0.3180%" height="15" fill="rgb(221,156,26)" fg:x="758" fg:w="4"/><text x="60.5044%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (99 samples, 7.87%)</title><rect x="53.0207%" y="229" width="7.8696%" height="15" fill="rgb(213,140,4)" fg:x="667" fg:w="99"/><text x="53.2707%" y="239.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (99 samples, 7.87%)</title><rect x="53.0207%" y="213" width="7.8696%" height="15" fill="rgb(231,224,15)" fg:x="667" fg:w="99"/><text x="53.2707%" y="223.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (99 samples, 7.87%)</title><rect x="53.0207%" y="197" width="7.8696%" height="15" fill="rgb(244,76,20)" fg:x="667" fg:w="99"/><text x="53.2707%" y="207.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (99 samples, 7.87%)</title><rect x="53.0207%" y="181" width="7.8696%" height="15" fill="rgb(238,117,7)" fg:x="667" fg:w="99"/><text x="53.2707%" y="191.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (99 samples, 7.87%)</title><rect x="53.0207%" y="165" width="7.8696%" height="15" fill="rgb(235,1,10)" fg:x="667" fg:w="99"/><text x="53.2707%" y="175.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (99 samples, 7.87%)</title><rect x="53.0207%" y="149" width="7.8696%" height="15" fill="rgb(216,165,6)" fg:x="667" fg:w="99"/><text x="53.2707%" y="159.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="60.5723%" y="133" width="0.3180%" height="15" fill="rgb(246,91,35)" fg:x="762" fg:w="4"/><text x="60.8223%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.7313%" y="117" width="0.1590%" height="15" fill="rgb(228,96,24)" fg:x="764" fg:w="2"/><text x="60.9813%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.7313%" y="101" width="0.1590%" height="15" fill="rgb(254,217,53)" fg:x="764" fg:w="2"/><text x="60.9813%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8108%" y="85" width="0.0795%" height="15" fill="rgb(209,60,0)" fg:x="765" fg:w="1"/><text x="61.0608%" y="95.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="61.0493%" y="213" width="0.0795%" height="15" fill="rgb(250,93,26)" fg:x="768" fg:w="1"/><text x="61.2993%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.1288%" y="213" width="0.1590%" height="15" fill="rgb(211,9,40)" fg:x="769" fg:w="2"/><text x="61.3788%" y="223.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="61.3672%" y="165" width="0.0795%" height="15" fill="rgb(242,57,20)" fg:x="772" fg:w="1"/><text x="61.6172%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="61.2878%" y="213" width="0.5564%" height="15" fill="rgb(248,85,48)" fg:x="771" fg:w="7"/><text x="61.5378%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="61.3672%" y="197" width="0.4769%" height="15" fill="rgb(212,117,2)" fg:x="772" fg:w="6"/><text x="61.6172%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="61.3672%" y="181" width="0.4769%" height="15" fill="rgb(243,19,3)" fg:x="772" fg:w="6"/><text x="61.6172%" y="191.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="61.4467%" y="165" width="0.3975%" height="15" fill="rgb(232,217,24)" fg:x="773" fg:w="5"/><text x="61.6967%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="61.8442%" y="213" width="0.3975%" height="15" fill="rgb(224,175,40)" fg:x="778" fg:w="5"/><text x="62.0942%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.1622%" y="197" width="0.0795%" height="15" fill="rgb(212,162,32)" fg:x="782" fg:w="1"/><text x="62.4122%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.1622%" y="181" width="0.0795%" height="15" fill="rgb(215,9,4)" fg:x="782" fg:w="1"/><text x="62.4122%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.1622%" y="165" width="0.0795%" height="15" fill="rgb(242,42,7)" fg:x="782" fg:w="1"/><text x="62.4122%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (117 samples, 9.30%)</title><rect x="53.0207%" y="245" width="9.3005%" height="15" fill="rgb(242,184,45)" fg:x="667" fg:w="117"/><text x="53.2707%" y="255.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.43%)</title><rect x="60.8903%" y="229" width="1.4308%" height="15" fill="rgb(228,111,51)" fg:x="766" fg:w="18"/><text x="61.1403%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="62.2417%" y="213" width="0.0795%" height="15" fill="rgb(236,147,17)" fg:x="783" fg:w="1"/><text x="62.4917%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (163 samples, 12.96%)</title><rect x="49.4436%" y="261" width="12.9571%" height="15" fill="rgb(210,75,22)" fg:x="622" fg:w="163"/><text x="49.6936%" y="271.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="62.3211%" y="245" width="0.0795%" height="15" fill="rgb(217,159,45)" fg:x="784" fg:w="1"/><text x="62.5711%" y="255.50"></text></g><g><title>regex_syntax::parser::ParserBuilder::new (1 samples, 0.08%)</title><rect x="62.3211%" y="229" width="0.0795%" height="15" fill="rgb(245,165,53)" fg:x="784" fg:w="1"/><text x="62.5711%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="62.5596%" y="213" width="0.0795%" height="15" fill="rgb(251,190,50)" fg:x="787" fg:w="1"/><text x="62.8096%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="62.5596%" y="197" width="0.0795%" height="15" fill="rgb(208,203,29)" fg:x="787" fg:w="1"/><text x="62.8096%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="62.5596%" y="181" width="0.0795%" height="15" fill="rgb(207,209,35)" fg:x="787" fg:w="1"/><text x="62.8096%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="62.5596%" y="229" width="0.1590%" height="15" fill="rgb(230,144,49)" fg:x="787" fg:w="2"/><text x="62.8096%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="62.6391%" y="213" width="0.0795%" height="15" fill="rgb(229,31,6)" fg:x="788" fg:w="1"/><text x="62.8891%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.6391%" y="197" width="0.0795%" height="15" fill="rgb(251,129,24)" fg:x="788" fg:w="1"/><text x="62.8891%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.6391%" y="181" width="0.0795%" height="15" fill="rgb(235,105,15)" fg:x="788" fg:w="1"/><text x="62.8891%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6391%" y="165" width="0.0795%" height="15" fill="rgb(216,52,43)" fg:x="788" fg:w="1"/><text x="62.8891%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="62.7186%" y="229" width="0.0795%" height="15" fill="rgb(238,144,41)" fg:x="789" fg:w="1"/><text x="62.9686%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="62.4006%" y="261" width="0.4769%" height="15" fill="rgb(243,63,9)" fg:x="785" fg:w="6"/><text x="62.6506%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="62.4006%" y="245" width="0.4769%" height="15" fill="rgb(246,208,1)" fg:x="785" fg:w="6"/><text x="62.6506%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="62.7981%" y="229" width="0.0795%" height="15" fill="rgb(233,182,18)" fg:x="790" fg:w="1"/><text x="63.0481%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="62.8776%" y="213" width="0.4769%" height="15" fill="rgb(242,224,8)" fg:x="791" fg:w="6"/><text x="63.1276%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="63.1161%" y="197" width="0.2385%" height="15" fill="rgb(243,54,37)" fg:x="794" fg:w="3"/><text x="63.3661%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.1955%" y="181" width="0.1590%" height="15" fill="rgb(233,192,12)" fg:x="795" fg:w="2"/><text x="63.4455%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.1955%" y="165" width="0.1590%" height="15" fill="rgb(251,192,53)" fg:x="795" fg:w="2"/><text x="63.4455%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="62.8776%" y="229" width="0.5564%" height="15" fill="rgb(246,141,26)" fg:x="791" fg:w="7"/><text x="63.1276%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="63.3545%" y="213" width="0.0795%" height="15" fill="rgb(239,195,19)" fg:x="797" fg:w="1"/><text x="63.6045%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.3545%" y="197" width="0.0795%" height="15" fill="rgb(241,16,39)" fg:x="797" fg:w="1"/><text x="63.6045%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.3545%" y="181" width="0.0795%" height="15" fill="rgb(223,13,53)" fg:x="797" fg:w="1"/><text x="63.6045%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.3545%" y="165" width="0.0795%" height="15" fill="rgb(214,227,0)" fg:x="797" fg:w="1"/><text x="63.6045%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="63.5135%" y="213" width="0.0795%" height="15" fill="rgb(228,103,26)" fg:x="799" fg:w="1"/><text x="63.7635%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="63.4340%" y="229" width="0.3180%" height="15" fill="rgb(254,177,53)" fg:x="798" fg:w="4"/><text x="63.6840%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2 samples, 0.16%)</title><rect x="63.5930%" y="213" width="0.1590%" height="15" fill="rgb(208,201,34)" fg:x="800" fg:w="2"/><text x="63.8430%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (191 samples, 15.18%)</title><rect x="48.6486%" y="277" width="15.1828%" height="15" fill="rgb(212,39,5)" fg:x="612" fg:w="191"/><text x="48.8986%" y="287.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.95%)</title><rect x="62.8776%" y="261" width="0.9539%" height="15" fill="rgb(246,117,3)" fg:x="791" fg:w="12"/><text x="63.1276%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.95%)</title><rect x="62.8776%" y="245" width="0.9539%" height="15" fill="rgb(244,118,39)" fg:x="791" fg:w="12"/><text x="63.1276%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="63.7520%" y="229" width="0.0795%" height="15" fill="rgb(241,64,10)" fg:x="802" fg:w="1"/><text x="64.0020%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="63.7520%" y="213" width="0.0795%" height="15" fill="rgb(229,39,44)" fg:x="802" fg:w="1"/><text x="64.0020%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.7520%" y="197" width="0.0795%" height="15" fill="rgb(230,226,3)" fg:x="802" fg:w="1"/><text x="64.0020%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.7520%" y="181" width="0.0795%" height="15" fill="rgb(222,13,42)" fg:x="802" fg:w="1"/><text x="64.0020%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.7520%" y="165" width="0.0795%" height="15" fill="rgb(247,180,54)" fg:x="802" fg:w="1"/><text x="64.0020%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (192 samples, 15.26%)</title><rect x="48.6486%" y="309" width="15.2623%" height="15" fill="rgb(205,96,16)" fg:x="612" fg:w="192"/><text x="48.8986%" y="319.50">&lt;regex::regex::string::..</text></g><g><title>regex::builders::string::RegexBuilder::build (192 samples, 15.26%)</title><rect x="48.6486%" y="293" width="15.2623%" height="15" fill="rgb(205,100,21)" fg:x="612" fg:w="192"/><text x="48.8986%" y="303.50">regex::builders::string..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="63.8315%" y="277" width="0.0795%" height="15" fill="rgb(248,51,4)" fg:x="803" fg:w="1"/><text x="64.0815%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="63.9905%" y="277" width="0.1590%" height="15" fill="rgb(217,197,30)" fg:x="805" fg:w="2"/><text x="64.2405%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="63.9905%" y="261" width="0.1590%" height="15" fill="rgb(240,179,40)" fg:x="805" fg:w="2"/><text x="64.2405%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="63.9905%" y="245" width="0.1590%" height="15" fill="rgb(212,185,35)" fg:x="805" fg:w="2"/><text x="64.2405%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.9905%" y="229" width="0.1590%" height="15" fill="rgb(251,222,31)" fg:x="805" fg:w="2"/><text x="64.2405%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.9905%" y="213" width="0.1590%" height="15" fill="rgb(208,140,36)" fg:x="805" fg:w="2"/><text x="64.2405%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="63.9110%" y="309" width="0.3180%" height="15" fill="rgb(220,148,1)" fg:x="804" fg:w="4"/><text x="64.1610%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="63.9905%" y="293" width="0.2385%" height="15" fill="rgb(254,4,28)" fg:x="805" fg:w="3"/><text x="64.2405%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="64.1494%" y="277" width="0.0795%" height="15" fill="rgb(222,185,44)" fg:x="807" fg:w="1"/><text x="64.3994%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="64.1494%" y="261" width="0.0795%" height="15" fill="rgb(215,74,39)" fg:x="807" fg:w="1"/><text x="64.3994%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.1494%" y="245" width="0.0795%" height="15" fill="rgb(247,86,4)" fg:x="807" fg:w="1"/><text x="64.3994%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="64.2289%" y="261" width="0.0795%" height="15" fill="rgb(231,105,32)" fg:x="808" fg:w="1"/><text x="64.4789%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.2289%" y="245" width="0.0795%" height="15" fill="rgb(222,65,35)" fg:x="808" fg:w="1"/><text x="64.4789%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="64.2289%" y="293" width="0.1590%" height="15" fill="rgb(218,145,35)" fg:x="808" fg:w="2"/><text x="64.4789%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="64.2289%" y="277" width="0.1590%" height="15" fill="rgb(208,7,15)" fg:x="808" fg:w="2"/><text x="64.4789%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="64.3084%" y="261" width="0.0795%" height="15" fill="rgb(209,83,13)" fg:x="809" fg:w="1"/><text x="64.5584%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.7854%" y="213" width="0.0795%" height="15" fill="rgb(218,3,10)" fg:x="815" fg:w="1"/><text x="65.0354%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7854%" y="197" width="0.0795%" height="15" fill="rgb(211,219,4)" fg:x="815" fg:w="1"/><text x="65.0354%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.7854%" y="181" width="0.0795%" height="15" fill="rgb(228,194,12)" fg:x="815" fg:w="1"/><text x="65.0354%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="64.3879%" y="229" width="0.6359%" height="15" fill="rgb(210,175,7)" fg:x="810" fg:w="8"/><text x="64.6379%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="64.8649%" y="213" width="0.1590%" height="15" fill="rgb(243,132,6)" fg:x="816" fg:w="2"/><text x="65.1149%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (378 samples, 30.05%)</title><rect x="35.0556%" y="405" width="30.0477%" height="15" fill="rgb(207,72,18)" fg:x="441" fg:w="378"/><text x="35.3056%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::look..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (345 samples, 27.42%)</title><rect x="37.6789%" y="389" width="27.4245%" height="15" fill="rgb(236,1,18)" fg:x="474" fg:w="345"/><text x="37.9289%" y="399.50">plugins_core::looking::model::Unqualified::q..</text></g><g><title>indefinite::indefinite (344 samples, 27.34%)</title><rect x="37.7583%" y="373" width="27.3450%" height="15" fill="rgb(227,0,18)" fg:x="475" fg:w="344"/><text x="38.0083%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (344 samples, 27.34%)</title><rect x="37.7583%" y="357" width="27.3450%" height="15" fill="rgb(247,37,5)" fg:x="475" fg:w="344"/><text x="38.0083%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (344 samples, 27.34%)</title><rect x="37.7583%" y="341" width="27.3450%" height="15" fill="rgb(237,179,24)" fg:x="475" fg:w="344"/><text x="38.0083%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::number::Number::check (207 samples, 16.45%)</title><rect x="48.6486%" y="325" width="16.4547%" height="15" fill="rgb(226,53,20)" fg:x="612" fg:w="207"/><text x="48.8986%" y="335.50">indefinite::rules::number..</text></g><g><title>regex::regex::string::Regex::is_match_at (11 samples, 0.87%)</title><rect x="64.2289%" y="309" width="0.8744%" height="15" fill="rgb(247,75,7)" fg:x="808" fg:w="11"/><text x="64.4789%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="64.3879%" y="293" width="0.7154%" height="15" fill="rgb(233,96,12)" fg:x="810" fg:w="9"/><text x="64.6379%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="64.3879%" y="277" width="0.7154%" height="15" fill="rgb(224,125,0)" fg:x="810" fg:w="9"/><text x="64.6379%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="64.3879%" y="261" width="0.7154%" height="15" fill="rgb(224,92,25)" fg:x="810" fg:w="9"/><text x="64.6379%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="64.3879%" y="245" width="0.7154%" height="15" fill="rgb(224,42,24)" fg:x="810" fg:w="9"/><text x="64.6379%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="65.0238%" y="229" width="0.0795%" height="15" fill="rgb(234,132,49)" fg:x="818" fg:w="1"/><text x="65.2738%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.0238%" y="213" width="0.0795%" height="15" fill="rgb(248,100,35)" fg:x="818" fg:w="1"/><text x="65.2738%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0238%" y="197" width="0.0795%" height="15" fill="rgb(239,94,40)" fg:x="818" fg:w="1"/><text x="65.2738%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0238%" y="181" width="0.0795%" height="15" fill="rgb(235,139,28)" fg:x="818" fg:w="1"/><text x="65.2738%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.1033%" y="389" width="0.0795%" height="15" fill="rgb(217,144,7)" fg:x="819" fg:w="1"/><text x="65.3533%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1033%" y="373" width="0.0795%" height="15" fill="rgb(227,55,4)" fg:x="819" fg:w="1"/><text x="65.3533%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.1033%" y="357" width="0.0795%" height="15" fill="rgb(252,82,54)" fg:x="819" fg:w="1"/><text x="65.3533%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1033%" y="341" width="0.0795%" height="15" fill="rgb(245,172,4)" fg:x="819" fg:w="1"/><text x="65.3533%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.1033%" y="325" width="0.0795%" height="15" fill="rgb(207,26,27)" fg:x="819" fg:w="1"/><text x="65.3533%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.1033%" y="309" width="0.0795%" height="15" fill="rgb(252,98,18)" fg:x="819" fg:w="1"/><text x="65.3533%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.1033%" y="293" width="0.0795%" height="15" fill="rgb(244,8,26)" fg:x="819" fg:w="1"/><text x="65.3533%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.1033%" y="277" width="0.0795%" height="15" fill="rgb(237,173,45)" fg:x="819" fg:w="1"/><text x="65.3533%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.1033%" y="261" width="0.0795%" height="15" fill="rgb(208,213,49)" fg:x="819" fg:w="1"/><text x="65.3533%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.1033%" y="245" width="0.0795%" height="15" fill="rgb(212,122,37)" fg:x="819" fg:w="1"/><text x="65.3533%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.1033%" y="229" width="0.0795%" height="15" fill="rgb(213,80,17)" fg:x="819" fg:w="1"/><text x="65.3533%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.1033%" y="213" width="0.0795%" height="15" fill="rgb(206,210,43)" fg:x="819" fg:w="1"/><text x="65.3533%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.1033%" y="197" width="0.0795%" height="15" fill="rgb(229,214,3)" fg:x="819" fg:w="1"/><text x="65.3533%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.1033%" y="181" width="0.0795%" height="15" fill="rgb(235,213,29)" fg:x="819" fg:w="1"/><text x="65.3533%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1033%" y="165" width="0.0795%" height="15" fill="rgb(248,135,26)" fg:x="819" fg:w="1"/><text x="65.3533%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="65.2623%" y="357" width="0.0795%" height="15" fill="rgb(242,188,12)" fg:x="821" fg:w="1"/><text x="65.5123%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.2623%" y="341" width="0.0795%" height="15" fill="rgb(245,38,12)" fg:x="821" fg:w="1"/><text x="65.5123%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.2623%" y="325" width="0.0795%" height="15" fill="rgb(218,42,13)" fg:x="821" fg:w="1"/><text x="65.5123%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="65.1033%" y="405" width="0.3180%" height="15" fill="rgb(238,132,49)" fg:x="819" fg:w="4"/><text x="65.3533%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="65.1828%" y="389" width="0.2385%" height="15" fill="rgb(209,196,19)" fg:x="820" fg:w="3"/><text x="65.4328%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="65.1828%" y="373" width="0.2385%" height="15" fill="rgb(244,131,22)" fg:x="820" fg:w="3"/><text x="65.4328%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.3418%" y="357" width="0.0795%" height="15" fill="rgb(223,18,34)" fg:x="822" fg:w="1"/><text x="65.5918%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.3418%" y="341" width="0.0795%" height="15" fill="rgb(252,124,54)" fg:x="822" fg:w="1"/><text x="65.5918%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="65.3418%" y="325" width="0.0795%" height="15" fill="rgb(229,106,42)" fg:x="822" fg:w="1"/><text x="65.5918%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.3418%" y="309" width="0.0795%" height="15" fill="rgb(221,129,1)" fg:x="822" fg:w="1"/><text x="65.5918%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="65.4213%" y="405" width="0.1590%" height="15" fill="rgb(229,74,15)" fg:x="823" fg:w="2"/><text x="65.6713%" y="415.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="65.5803%" y="373" width="0.0795%" height="15" fill="rgb(210,206,50)" fg:x="825" fg:w="1"/><text x="65.8303%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="65.5803%" y="357" width="0.0795%" height="15" fill="rgb(251,114,31)" fg:x="825" fg:w="1"/><text x="65.8303%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.5803%" y="341" width="0.0795%" height="15" fill="rgb(215,225,28)" fg:x="825" fg:w="1"/><text x="65.8303%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5803%" y="325" width="0.0795%" height="15" fill="rgb(237,109,14)" fg:x="825" fg:w="1"/><text x="65.8303%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.5803%" y="309" width="0.0795%" height="15" fill="rgb(230,13,37)" fg:x="825" fg:w="1"/><text x="65.8303%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5803%" y="293" width="0.0795%" height="15" fill="rgb(231,40,28)" fg:x="825" fg:w="1"/><text x="65.8303%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.5803%" y="277" width="0.0795%" height="15" fill="rgb(231,202,18)" fg:x="825" fg:w="1"/><text x="65.8303%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.5803%" y="261" width="0.0795%" height="15" fill="rgb(225,33,18)" fg:x="825" fg:w="1"/><text x="65.8303%" y="271.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="65.6598%" y="373" width="0.1590%" height="15" fill="rgb(223,64,47)" fg:x="826" fg:w="2"/><text x="65.9098%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="65.6598%" y="357" width="0.1590%" height="15" fill="rgb(234,114,13)" fg:x="826" fg:w="2"/><text x="65.9098%" y="367.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="65.6598%" y="341" width="0.1590%" height="15" fill="rgb(248,56,40)" fg:x="826" fg:w="2"/><text x="65.9098%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="65.6598%" y="325" width="0.1590%" height="15" fill="rgb(221,194,21)" fg:x="826" fg:w="2"/><text x="65.9098%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="65.6598%" y="309" width="0.1590%" height="15" fill="rgb(242,108,46)" fg:x="826" fg:w="2"/><text x="65.9098%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (4 samples, 0.32%)</title><rect x="65.5803%" y="389" width="0.3180%" height="15" fill="rgb(220,106,10)" fg:x="825" fg:w="4"/><text x="65.8303%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="65.8188%" y="373" width="0.0795%" height="15" fill="rgb(211,88,4)" fg:x="828" fg:w="1"/><text x="66.0688%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.8188%" y="357" width="0.0795%" height="15" fill="rgb(214,95,34)" fg:x="828" fg:w="1"/><text x="66.0688%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.8188%" y="341" width="0.0795%" height="15" fill="rgb(250,160,33)" fg:x="828" fg:w="1"/><text x="66.0688%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.8188%" y="325" width="0.0795%" height="15" fill="rgb(225,29,10)" fg:x="828" fg:w="1"/><text x="66.0688%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.8188%" y="309" width="0.0795%" height="15" fill="rgb(224,28,30)" fg:x="828" fg:w="1"/><text x="66.0688%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.8188%" y="293" width="0.0795%" height="15" fill="rgb(231,77,4)" fg:x="828" fg:w="1"/><text x="66.0688%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.8188%" y="277" width="0.0795%" height="15" fill="rgb(209,63,21)" fg:x="828" fg:w="1"/><text x="66.0688%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8188%" y="261" width="0.0795%" height="15" fill="rgb(226,22,11)" fg:x="828" fg:w="1"/><text x="66.0688%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0572%" y="325" width="0.0795%" height="15" fill="rgb(216,82,30)" fg:x="831" fg:w="1"/><text x="66.3072%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0572%" y="309" width="0.0795%" height="15" fill="rgb(246,227,38)" fg:x="831" fg:w="1"/><text x="66.3072%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0572%" y="293" width="0.0795%" height="15" fill="rgb(251,203,53)" fg:x="831" fg:w="1"/><text x="66.3072%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="66.1367%" y="325" width="0.0795%" height="15" fill="rgb(254,101,1)" fg:x="832" fg:w="1"/><text x="66.3867%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.1367%" y="309" width="0.0795%" height="15" fill="rgb(241,180,5)" fg:x="832" fg:w="1"/><text x="66.3867%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.1367%" y="293" width="0.0795%" height="15" fill="rgb(218,168,4)" fg:x="832" fg:w="1"/><text x="66.3867%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.1367%" y="277" width="0.0795%" height="15" fill="rgb(224,223,32)" fg:x="832" fg:w="1"/><text x="66.3867%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.1367%" y="261" width="0.0795%" height="15" fill="rgb(236,106,22)" fg:x="832" fg:w="1"/><text x="66.3867%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.1367%" y="245" width="0.0795%" height="15" fill="rgb(206,121,5)" fg:x="832" fg:w="1"/><text x="66.3867%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.1367%" y="229" width="0.0795%" height="15" fill="rgb(233,87,28)" fg:x="832" fg:w="1"/><text x="66.3867%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.2162%" y="277" width="0.0795%" height="15" fill="rgb(236,137,17)" fg:x="833" fg:w="1"/><text x="66.4662%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.2162%" y="261" width="0.0795%" height="15" fill="rgb(209,183,38)" fg:x="833" fg:w="1"/><text x="66.4662%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.2162%" y="245" width="0.0795%" height="15" fill="rgb(206,162,44)" fg:x="833" fg:w="1"/><text x="66.4662%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.2162%" y="229" width="0.0795%" height="15" fill="rgb(237,70,39)" fg:x="833" fg:w="1"/><text x="66.4662%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.2162%" y="213" width="0.0795%" height="15" fill="rgb(212,176,5)" fg:x="833" fg:w="1"/><text x="66.4662%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="66.2162%" y="325" width="0.1590%" height="15" fill="rgb(232,95,16)" fg:x="833" fg:w="2"/><text x="66.4662%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.2162%" y="309" width="0.1590%" height="15" fill="rgb(219,115,35)" fg:x="833" fg:w="2"/><text x="66.4662%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.2162%" y="293" width="0.1590%" height="15" fill="rgb(251,67,27)" fg:x="833" fg:w="2"/><text x="66.4662%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.2957%" y="277" width="0.0795%" height="15" fill="rgb(222,95,40)" fg:x="834" fg:w="1"/><text x="66.5457%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.2957%" y="261" width="0.0795%" height="15" fill="rgb(250,35,16)" fg:x="834" fg:w="1"/><text x="66.5457%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.2957%" y="245" width="0.0795%" height="15" fill="rgb(224,86,44)" fg:x="834" fg:w="1"/><text x="66.5457%" y="255.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (408 samples, 32.43%)</title><rect x="34.1017%" y="565" width="32.4324%" height="15" fill="rgb(237,53,53)" fg:x="429" fg:w="408"/><text x="34.3517%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (408 samples, 32.43%)</title><rect x="34.1017%" y="549" width="32.4324%" height="15" fill="rgb(208,171,33)" fg:x="429" fg:w="408"/><text x="34.3517%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (407 samples, 32.35%)</title><rect x="34.1812%" y="533" width="32.3529%" height="15" fill="rgb(222,64,27)" fg:x="430" fg:w="407"/><text x="34.4312%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (407 samples, 32.35%)</title><rect x="34.1812%" y="517" width="32.3529%" height="15" fill="rgb(221,121,35)" fg:x="430" fg:w="407"/><text x="34.4312%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (407 samples, 32.35%)</title><rect x="34.1812%" y="501" width="32.3529%" height="15" fill="rgb(228,137,42)" fg:x="430" fg:w="407"/><text x="34.4312%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (405 samples, 32.19%)</title><rect x="34.3402%" y="485" width="32.1940%" height="15" fill="rgb(227,54,21)" fg:x="432" fg:w="405"/><text x="34.5902%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (405 samples, 32.19%)</title><rect x="34.3402%" y="469" width="32.1940%" height="15" fill="rgb(240,168,33)" fg:x="432" fg:w="405"/><text x="34.5902%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (405 samples, 32.19%)</title><rect x="34.3402%" y="453" width="32.1940%" height="15" fill="rgb(243,159,6)" fg:x="432" fg:w="405"/><text x="34.5902%" y="463.50">&lt;engine::session::state::State as kernel::actions::P..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (404 samples, 32.11%)</title><rect x="34.4197%" y="437" width="32.1145%" height="15" fill="rgb(205,211,41)" fg:x="433" fg:w="404"/><text x="34.6697%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kerne..</text></g><g><title>plugins_core::looking::model::new_area_observation (396 samples, 31.48%)</title><rect x="35.0556%" y="421" width="31.4785%" height="15" fill="rgb(253,30,1)" fg:x="441" fg:w="396"/><text x="35.3056%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.95%)</title><rect x="65.5803%" y="405" width="0.9539%" height="15" fill="rgb(226,80,18)" fg:x="825" fg:w="12"/><text x="65.8303%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.64%)</title><rect x="65.8983%" y="389" width="0.6359%" height="15" fill="rgb(253,156,46)" fg:x="829" fg:w="8"/><text x="66.1483%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.56%)</title><rect x="65.9777%" y="373" width="0.5564%" height="15" fill="rgb(248,87,27)" fg:x="830" fg:w="7"/><text x="66.2277%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="65.9777%" y="357" width="0.5564%" height="15" fill="rgb(227,122,2)" fg:x="830" fg:w="7"/><text x="66.2277%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="66.0572%" y="341" width="0.4769%" height="15" fill="rgb(229,94,39)" fg:x="831" fg:w="6"/><text x="66.3072%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="66.3752%" y="325" width="0.1590%" height="15" fill="rgb(225,173,31)" fg:x="835" fg:w="2"/><text x="66.6252%" y="335.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="66.3752%" y="309" width="0.1590%" height="15" fill="rgb(239,176,30)" fg:x="835" fg:w="2"/><text x="66.6252%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.3752%" y="293" width="0.1590%" height="15" fill="rgb(212,104,21)" fg:x="835" fg:w="2"/><text x="66.6252%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.3752%" y="277" width="0.1590%" height="15" fill="rgb(240,209,40)" fg:x="835" fg:w="2"/><text x="66.6252%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.3752%" y="261" width="0.1590%" height="15" fill="rgb(234,195,5)" fg:x="835" fg:w="2"/><text x="66.6252%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.3752%" y="245" width="0.1590%" height="15" fill="rgb(238,213,1)" fg:x="835" fg:w="2"/><text x="66.6252%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.3752%" y="229" width="0.1590%" height="15" fill="rgb(235,182,54)" fg:x="835" fg:w="2"/><text x="66.6252%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.3752%" y="213" width="0.1590%" height="15" fill="rgb(229,50,46)" fg:x="835" fg:w="2"/><text x="66.6252%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.3752%" y="197" width="0.1590%" height="15" fill="rgb(219,145,13)" fg:x="835" fg:w="2"/><text x="66.6252%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4547%" y="181" width="0.0795%" height="15" fill="rgb(220,226,10)" fg:x="836" fg:w="1"/><text x="66.7047%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.4547%" y="165" width="0.0795%" height="15" fill="rgb(248,47,30)" fg:x="836" fg:w="1"/><text x="66.7047%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6137%" y="549" width="0.0795%" height="15" fill="rgb(231,209,44)" fg:x="838" fg:w="1"/><text x="66.8637%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.8521%" y="469" width="0.0795%" height="15" fill="rgb(209,80,30)" fg:x="841" fg:w="1"/><text x="67.1021%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="66.6932%" y="517" width="0.3180%" height="15" fill="rgb(232,9,14)" fg:x="839" fg:w="4"/><text x="66.9432%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="66.6932%" y="501" width="0.3180%" height="15" fill="rgb(243,91,43)" fg:x="839" fg:w="4"/><text x="66.9432%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="66.6932%" y="485" width="0.3180%" height="15" fill="rgb(231,90,52)" fg:x="839" fg:w="4"/><text x="66.9432%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.9316%" y="469" width="0.0795%" height="15" fill="rgb(253,192,44)" fg:x="842" fg:w="1"/><text x="67.1816%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.9316%" y="453" width="0.0795%" height="15" fill="rgb(241,66,31)" fg:x="842" fg:w="1"/><text x="67.1816%" y="463.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="66.9316%" y="437" width="0.0795%" height="15" fill="rgb(235,81,37)" fg:x="842" fg:w="1"/><text x="67.1816%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0111%" y="389" width="0.0795%" height="15" fill="rgb(223,221,9)" fg:x="843" fg:w="1"/><text x="67.2611%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.0111%" y="453" width="0.1590%" height="15" fill="rgb(242,180,7)" fg:x="843" fg:w="2"/><text x="67.2611%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.0111%" y="437" width="0.1590%" height="15" fill="rgb(243,78,19)" fg:x="843" fg:w="2"/><text x="67.2611%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.0111%" y="421" width="0.1590%" height="15" fill="rgb(233,23,17)" fg:x="843" fg:w="2"/><text x="67.2611%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.0111%" y="405" width="0.1590%" height="15" fill="rgb(252,122,45)" fg:x="843" fg:w="2"/><text x="67.2611%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0906%" y="389" width="0.0795%" height="15" fill="rgb(247,108,20)" fg:x="844" fg:w="1"/><text x="67.3406%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0906%" y="373" width="0.0795%" height="15" fill="rgb(235,84,21)" fg:x="844" fg:w="1"/><text x="67.3406%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.0906%" y="357" width="0.0795%" height="15" fill="rgb(247,129,10)" fg:x="844" fg:w="1"/><text x="67.3406%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.0906%" y="341" width="0.0795%" height="15" fill="rgb(208,173,14)" fg:x="844" fg:w="1"/><text x="67.3406%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.0906%" y="325" width="0.0795%" height="15" fill="rgb(236,31,38)" fg:x="844" fg:w="1"/><text x="67.3406%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.0906%" y="309" width="0.0795%" height="15" fill="rgb(232,65,17)" fg:x="844" fg:w="1"/><text x="67.3406%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.0906%" y="293" width="0.0795%" height="15" fill="rgb(224,45,49)" fg:x="844" fg:w="1"/><text x="67.3406%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.0906%" y="277" width="0.0795%" height="15" fill="rgb(225,2,53)" fg:x="844" fg:w="1"/><text x="67.3406%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.0906%" y="261" width="0.0795%" height="15" fill="rgb(248,210,53)" fg:x="844" fg:w="1"/><text x="67.3406%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.0906%" y="245" width="0.0795%" height="15" fill="rgb(211,1,30)" fg:x="844" fg:w="1"/><text x="67.3406%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.0906%" y="229" width="0.0795%" height="15" fill="rgb(224,96,15)" fg:x="844" fg:w="1"/><text x="67.3406%" y="239.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="67.0906%" y="213" width="0.0795%" height="15" fill="rgb(252,45,11)" fg:x="844" fg:w="1"/><text x="67.3406%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="67.1701%" y="453" width="0.0795%" height="15" fill="rgb(220,125,38)" fg:x="845" fg:w="1"/><text x="67.4201%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1701%" y="437" width="0.0795%" height="15" fill="rgb(243,161,33)" fg:x="845" fg:w="1"/><text x="67.4201%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1701%" y="421" width="0.0795%" height="15" fill="rgb(248,197,34)" fg:x="845" fg:w="1"/><text x="67.4201%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1701%" y="405" width="0.0795%" height="15" fill="rgb(228,165,23)" fg:x="845" fg:w="1"/><text x="67.4201%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.1701%" y="389" width="0.0795%" height="15" fill="rgb(236,94,38)" fg:x="845" fg:w="1"/><text x="67.4201%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.1701%" y="373" width="0.0795%" height="15" fill="rgb(220,13,23)" fg:x="845" fg:w="1"/><text x="67.4201%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.1701%" y="357" width="0.0795%" height="15" fill="rgb(234,26,39)" fg:x="845" fg:w="1"/><text x="67.4201%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1701%" y="341" width="0.0795%" height="15" fill="rgb(205,117,44)" fg:x="845" fg:w="1"/><text x="67.4201%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1701%" y="325" width="0.0795%" height="15" fill="rgb(250,42,2)" fg:x="845" fg:w="1"/><text x="67.4201%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.1701%" y="309" width="0.0795%" height="15" fill="rgb(223,83,14)" fg:x="845" fg:w="1"/><text x="67.4201%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.1701%" y="293" width="0.0795%" height="15" fill="rgb(241,147,50)" fg:x="845" fg:w="1"/><text x="67.4201%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.1701%" y="277" width="0.0795%" height="15" fill="rgb(218,90,6)" fg:x="845" fg:w="1"/><text x="67.4201%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.1701%" y="261" width="0.0795%" height="15" fill="rgb(210,191,5)" fg:x="845" fg:w="1"/><text x="67.4201%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1701%" y="245" width="0.0795%" height="15" fill="rgb(225,139,19)" fg:x="845" fg:w="1"/><text x="67.4201%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="67.2496%" y="373" width="0.1590%" height="15" fill="rgb(210,1,33)" fg:x="846" fg:w="2"/><text x="67.4996%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.3291%" y="357" width="0.0795%" height="15" fill="rgb(213,50,3)" fg:x="847" fg:w="1"/><text x="67.5791%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.3291%" y="341" width="0.0795%" height="15" fill="rgb(234,227,4)" fg:x="847" fg:w="1"/><text x="67.5791%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.4086%" y="357" width="0.0795%" height="15" fill="rgb(246,63,5)" fg:x="848" fg:w="1"/><text x="67.6586%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4086%" y="341" width="0.0795%" height="15" fill="rgb(245,136,27)" fg:x="848" fg:w="1"/><text x="67.6586%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.4086%" y="325" width="0.0795%" height="15" fill="rgb(247,199,27)" fg:x="848" fg:w="1"/><text x="67.6586%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4086%" y="309" width="0.0795%" height="15" fill="rgb(252,158,49)" fg:x="848" fg:w="1"/><text x="67.6586%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.4086%" y="293" width="0.0795%" height="15" fill="rgb(254,73,1)" fg:x="848" fg:w="1"/><text x="67.6586%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4086%" y="277" width="0.0795%" height="15" fill="rgb(248,93,19)" fg:x="848" fg:w="1"/><text x="67.6586%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="67.4086%" y="261" width="0.0795%" height="15" fill="rgb(206,67,5)" fg:x="848" fg:w="1"/><text x="67.6586%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="67.4086%" y="245" width="0.0795%" height="15" fill="rgb(209,210,4)" fg:x="848" fg:w="1"/><text x="67.6586%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4086%" y="229" width="0.0795%" height="15" fill="rgb(214,185,36)" fg:x="848" fg:w="1"/><text x="67.6586%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.4881%" y="357" width="0.0795%" height="15" fill="rgb(233,191,26)" fg:x="849" fg:w="1"/><text x="67.7381%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.4881%" y="341" width="0.0795%" height="15" fill="rgb(248,94,17)" fg:x="849" fg:w="1"/><text x="67.7381%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.4881%" y="325" width="0.0795%" height="15" fill="rgb(250,64,4)" fg:x="849" fg:w="1"/><text x="67.7381%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.4881%" y="309" width="0.0795%" height="15" fill="rgb(218,41,53)" fg:x="849" fg:w="1"/><text x="67.7381%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="67.2496%" y="453" width="0.3975%" height="15" fill="rgb(251,176,28)" fg:x="846" fg:w="5"/><text x="67.4996%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="67.2496%" y="437" width="0.3975%" height="15" fill="rgb(247,22,9)" fg:x="846" fg:w="5"/><text x="67.4996%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="67.2496%" y="421" width="0.3975%" height="15" fill="rgb(218,201,14)" fg:x="846" fg:w="5"/><text x="67.4996%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="67.2496%" y="405" width="0.3975%" height="15" fill="rgb(218,94,10)" fg:x="846" fg:w="5"/><text x="67.4996%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="67.2496%" y="389" width="0.3975%" height="15" fill="rgb(222,183,52)" fg:x="846" fg:w="5"/><text x="67.4996%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.4086%" y="373" width="0.2385%" height="15" fill="rgb(242,140,25)" fg:x="848" fg:w="3"/><text x="67.6586%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5676%" y="357" width="0.0795%" height="15" fill="rgb(235,197,38)" fg:x="850" fg:w="1"/><text x="67.8176%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.5676%" y="341" width="0.0795%" height="15" fill="rgb(237,136,15)" fg:x="850" fg:w="1"/><text x="67.8176%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.5676%" y="325" width="0.0795%" height="15" fill="rgb(223,44,49)" fg:x="850" fg:w="1"/><text x="67.8176%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.7266%" y="357" width="0.1590%" height="15" fill="rgb(227,71,15)" fg:x="852" fg:w="2"/><text x="67.9766%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8060%" y="341" width="0.0795%" height="15" fill="rgb(225,153,20)" fg:x="853" fg:w="1"/><text x="68.0560%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.8060%" y="325" width="0.0795%" height="15" fill="rgb(210,190,26)" fg:x="853" fg:w="1"/><text x="68.0560%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8060%" y="309" width="0.0795%" height="15" fill="rgb(223,147,5)" fg:x="853" fg:w="1"/><text x="68.0560%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.8060%" y="293" width="0.0795%" height="15" fill="rgb(207,14,23)" fg:x="853" fg:w="1"/><text x="68.0560%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8060%" y="277" width="0.0795%" height="15" fill="rgb(211,195,53)" fg:x="853" fg:w="1"/><text x="68.0560%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.8060%" y="261" width="0.0795%" height="15" fill="rgb(237,75,46)" fg:x="853" fg:w="1"/><text x="68.0560%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8060%" y="245" width="0.0795%" height="15" fill="rgb(254,55,14)" fg:x="853" fg:w="1"/><text x="68.0560%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="67.7266%" y="389" width="0.2385%" height="15" fill="rgb(230,185,30)" fg:x="852" fg:w="3"/><text x="67.9766%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.7266%" y="373" width="0.2385%" height="15" fill="rgb(220,14,11)" fg:x="852" fg:w="3"/><text x="67.9766%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.8855%" y="357" width="0.0795%" height="15" fill="rgb(215,169,44)" fg:x="854" fg:w="1"/><text x="68.1355%" y="367.50"></text></g><g><title>plugins_core::tools::contained_by (17 samples, 1.35%)</title><rect x="66.6932%" y="533" width="1.3514%" height="15" fill="rgb(253,203,20)" fg:x="839" fg:w="17"/><text x="66.9432%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.03%)</title><rect x="67.0111%" y="517" width="1.0334%" height="15" fill="rgb(229,225,17)" fg:x="843" fg:w="13"/><text x="67.2611%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.03%)</title><rect x="67.0111%" y="501" width="1.0334%" height="15" fill="rgb(236,76,26)" fg:x="843" fg:w="13"/><text x="67.2611%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.03%)</title><rect x="67.0111%" y="485" width="1.0334%" height="15" fill="rgb(234,15,30)" fg:x="843" fg:w="13"/><text x="67.2611%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.03%)</title><rect x="67.0111%" y="469" width="1.0334%" height="15" fill="rgb(211,113,48)" fg:x="843" fg:w="13"/><text x="67.2611%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="67.6471%" y="453" width="0.3975%" height="15" fill="rgb(221,31,36)" fg:x="851" fg:w="5"/><text x="67.8971%" y="463.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="67.6471%" y="437" width="0.3975%" height="15" fill="rgb(215,118,52)" fg:x="851" fg:w="5"/><text x="67.8971%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="67.6471%" y="421" width="0.3975%" height="15" fill="rgb(241,151,27)" fg:x="851" fg:w="5"/><text x="67.8971%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="67.6471%" y="405" width="0.3975%" height="15" fill="rgb(253,51,3)" fg:x="851" fg:w="5"/><text x="67.8971%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.9650%" y="389" width="0.0795%" height="15" fill="rgb(216,201,24)" fg:x="855" fg:w="1"/><text x="68.2150%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.9650%" y="373" width="0.0795%" height="15" fill="rgb(231,107,4)" fg:x="855" fg:w="1"/><text x="68.2150%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="68.1240%" y="469" width="0.1590%" height="15" fill="rgb(243,97,54)" fg:x="857" fg:w="2"/><text x="68.3740%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2035%" y="453" width="0.0795%" height="15" fill="rgb(221,32,51)" fg:x="858" fg:w="1"/><text x="68.4535%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="68.0445%" y="517" width="0.3180%" height="15" fill="rgb(218,171,35)" fg:x="856" fg:w="4"/><text x="68.2945%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="68.0445%" y="501" width="0.3180%" height="15" fill="rgb(214,20,53)" fg:x="856" fg:w="4"/><text x="68.2945%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.1240%" y="485" width="0.2385%" height="15" fill="rgb(239,9,52)" fg:x="857" fg:w="3"/><text x="68.3740%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.2830%" y="469" width="0.0795%" height="15" fill="rgb(215,114,45)" fg:x="859" fg:w="1"/><text x="68.5330%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.2830%" y="453" width="0.0795%" height="15" fill="rgb(208,118,9)" fg:x="859" fg:w="1"/><text x="68.5330%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="68.2830%" y="437" width="0.0795%" height="15" fill="rgb(235,7,39)" fg:x="859" fg:w="1"/><text x="68.5330%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.2830%" y="421" width="0.0795%" height="15" fill="rgb(243,225,15)" fg:x="859" fg:w="1"/><text x="68.5330%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="68.2830%" y="405" width="0.0795%" height="15" fill="rgb(225,216,18)" fg:x="859" fg:w="1"/><text x="68.5330%" y="415.50"></text></g><g><title>engine::session::Session::captured (462 samples, 36.72%)</title><rect x="31.7170%" y="709" width="36.7250%" height="15" fill="rgb(233,36,38)" fg:x="399" fg:w="462"/><text x="31.9670%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (457 samples, 36.33%)</title><rect x="32.1145%" y="693" width="36.3275%" height="15" fill="rgb(239,88,23)" fg:x="404" fg:w="457"/><text x="32.3645%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (453 samples, 36.01%)</title><rect x="32.4324%" y="677" width="36.0095%" height="15" fill="rgb(219,181,35)" fg:x="408" fg:w="453"/><text x="32.6824%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (453 samples, 36.01%)</title><rect x="32.4324%" y="661" width="36.0095%" height="15" fill="rgb(215,18,46)" fg:x="408" fg:w="453"/><text x="32.6824%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::p..</text></g><g><title>kernel::plugins::mw::apply_middleware (453 samples, 36.01%)</title><rect x="32.4324%" y="645" width="36.0095%" height="15" fill="rgb(241,38,11)" fg:x="408" fg:w="453"/><text x="32.6824%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (453 samples, 36.01%)</title><rect x="32.4324%" y="629" width="36.0095%" height="15" fill="rgb(248,169,45)" fg:x="408" fg:w="453"/><text x="32.6824%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (452 samples, 35.93%)</title><rect x="32.5119%" y="613" width="35.9300%" height="15" fill="rgb(239,50,49)" fg:x="409" fg:w="452"/><text x="32.7619%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (433 samples, 34.42%)</title><rect x="34.0223%" y="597" width="34.4197%" height="15" fill="rgb(231,96,31)" fg:x="428" fg:w="433"/><text x="34.2723%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (433 samples, 34.42%)</title><rect x="34.0223%" y="581" width="34.4197%" height="15" fill="rgb(224,193,37)" fg:x="428" fg:w="433"/><text x="34.2723%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (24 samples, 1.91%)</title><rect x="66.5342%" y="565" width="1.9078%" height="15" fill="rgb(227,153,50)" fg:x="837" fg:w="24"/><text x="66.7842%" y="575.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (22 samples, 1.75%)</title><rect x="66.6932%" y="549" width="1.7488%" height="15" fill="rgb(249,228,3)" fg:x="839" fg:w="22"/><text x="66.9432%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="68.0445%" y="533" width="0.3975%" height="15" fill="rgb(219,164,43)" fg:x="856" fg:w="5"/><text x="68.2945%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="68.3625%" y="517" width="0.0795%" height="15" fill="rgb(216,45,41)" fg:x="860" fg:w="1"/><text x="68.6125%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.3625%" y="501" width="0.0795%" height="15" fill="rgb(210,226,51)" fg:x="860" fg:w="1"/><text x="68.6125%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="68.3625%" y="485" width="0.0795%" height="15" fill="rgb(209,117,49)" fg:x="860" fg:w="1"/><text x="68.6125%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="68.3625%" y="469" width="0.0795%" height="15" fill="rgb(206,196,24)" fg:x="860" fg:w="1"/><text x="68.6125%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="68.3625%" y="453" width="0.0795%" height="15" fill="rgb(253,218,3)" fg:x="860" fg:w="1"/><text x="68.6125%" y="463.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="68.3625%" y="437" width="0.0795%" height="15" fill="rgb(252,166,2)" fg:x="860" fg:w="1"/><text x="68.6125%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4420%" y="549" width="0.0795%" height="15" fill="rgb(236,218,26)" fg:x="861" fg:w="1"/><text x="68.6920%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.4420%" y="533" width="0.0795%" height="15" fill="rgb(254,84,19)" fg:x="861" fg:w="1"/><text x="68.6920%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.4420%" y="517" width="0.0795%" height="15" fill="rgb(219,137,29)" fg:x="861" fg:w="1"/><text x="68.6920%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.4420%" y="501" width="0.0795%" height="15" fill="rgb(227,47,52)" fg:x="861" fg:w="1"/><text x="68.6920%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.4420%" y="485" width="0.0795%" height="15" fill="rgb(229,167,24)" fg:x="861" fg:w="1"/><text x="68.6920%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.4420%" y="469" width="0.0795%" height="15" fill="rgb(233,164,1)" fg:x="861" fg:w="1"/><text x="68.6920%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.4420%" y="453" width="0.0795%" height="15" fill="rgb(218,88,48)" fg:x="861" fg:w="1"/><text x="68.6920%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.4420%" y="437" width="0.0795%" height="15" fill="rgb(226,214,24)" fg:x="861" fg:w="1"/><text x="68.6920%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.4420%" y="421" width="0.0795%" height="15" fill="rgb(233,29,12)" fg:x="861" fg:w="1"/><text x="68.6920%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.4420%" y="405" width="0.0795%" height="15" fill="rgb(219,120,34)" fg:x="861" fg:w="1"/><text x="68.6920%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.4420%" y="389" width="0.0795%" height="15" fill="rgb(226,78,44)" fg:x="861" fg:w="1"/><text x="68.6920%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.4420%" y="373" width="0.0795%" height="15" fill="rgb(240,15,48)" fg:x="861" fg:w="1"/><text x="68.6920%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4420%" y="357" width="0.0795%" height="15" fill="rgb(253,176,7)" fg:x="861" fg:w="1"/><text x="68.6920%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.4420%" y="565" width="0.2385%" height="15" fill="rgb(206,166,28)" fg:x="861" fg:w="3"/><text x="68.6920%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.5215%" y="549" width="0.1590%" height="15" fill="rgb(241,53,51)" fg:x="862" fg:w="2"/><text x="68.7715%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6010%" y="533" width="0.0795%" height="15" fill="rgb(249,112,30)" fg:x="863" fg:w="1"/><text x="68.8510%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6010%" y="517" width="0.0795%" height="15" fill="rgb(217,85,30)" fg:x="863" fg:w="1"/><text x="68.8510%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6010%" y="501" width="0.0795%" height="15" fill="rgb(233,49,7)" fg:x="863" fg:w="1"/><text x="68.8510%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.6010%" y="485" width="0.0795%" height="15" fill="rgb(234,109,9)" fg:x="863" fg:w="1"/><text x="68.8510%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.6010%" y="469" width="0.0795%" height="15" fill="rgb(253,95,22)" fg:x="863" fg:w="1"/><text x="68.8510%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.6010%" y="453" width="0.0795%" height="15" fill="rgb(233,176,25)" fg:x="863" fg:w="1"/><text x="68.8510%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.6010%" y="437" width="0.0795%" height="15" fill="rgb(236,33,39)" fg:x="863" fg:w="1"/><text x="68.8510%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.6010%" y="421" width="0.0795%" height="15" fill="rgb(223,226,42)" fg:x="863" fg:w="1"/><text x="68.8510%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.6010%" y="405" width="0.0795%" height="15" fill="rgb(216,99,33)" fg:x="863" fg:w="1"/><text x="68.8510%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.6010%" y="389" width="0.0795%" height="15" fill="rgb(235,84,23)" fg:x="863" fg:w="1"/><text x="68.8510%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.6010%" y="373" width="0.0795%" height="15" fill="rgb(232,2,27)" fg:x="863" fg:w="1"/><text x="68.8510%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.6010%" y="357" width="0.0795%" height="15" fill="rgb(241,23,22)" fg:x="863" fg:w="1"/><text x="68.8510%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6010%" y="341" width="0.0795%" height="15" fill="rgb(211,73,27)" fg:x="863" fg:w="1"/><text x="68.8510%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="68.7599%" y="485" width="0.0795%" height="15" fill="rgb(235,109,49)" fg:x="865" fg:w="1"/><text x="69.0099%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="68.7599%" y="469" width="0.0795%" height="15" fill="rgb(230,99,29)" fg:x="865" fg:w="1"/><text x="69.0099%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="68.7599%" y="453" width="0.0795%" height="15" fill="rgb(245,199,7)" fg:x="865" fg:w="1"/><text x="69.0099%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="68.7599%" y="437" width="0.0795%" height="15" fill="rgb(217,179,10)" fg:x="865" fg:w="1"/><text x="69.0099%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="68.7599%" y="421" width="0.0795%" height="15" fill="rgb(254,99,47)" fg:x="865" fg:w="1"/><text x="69.0099%" y="431.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="68.7599%" y="405" width="0.0795%" height="15" fill="rgb(251,121,7)" fg:x="865" fg:w="1"/><text x="69.0099%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="68.7599%" y="389" width="0.0795%" height="15" fill="rgb(250,177,26)" fg:x="865" fg:w="1"/><text x="69.0099%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="68.7599%" y="373" width="0.0795%" height="15" fill="rgb(232,88,15)" fg:x="865" fg:w="1"/><text x="69.0099%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.7599%" y="357" width="0.0795%" height="15" fill="rgb(251,54,54)" fg:x="865" fg:w="1"/><text x="69.0099%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.7599%" y="341" width="0.0795%" height="15" fill="rgb(208,177,15)" fg:x="865" fg:w="1"/><text x="69.0099%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="68.7599%" y="325" width="0.0795%" height="15" fill="rgb(205,97,32)" fg:x="865" fg:w="1"/><text x="69.0099%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="68.7599%" y="309" width="0.0795%" height="15" fill="rgb(217,192,13)" fg:x="865" fg:w="1"/><text x="69.0099%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="68.4420%" y="661" width="0.4769%" height="15" fill="rgb(215,163,41)" fg:x="861" fg:w="6"/><text x="68.6920%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="68.4420%" y="645" width="0.4769%" height="15" fill="rgb(246,83,29)" fg:x="861" fg:w="6"/><text x="68.6920%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="68.4420%" y="629" width="0.4769%" height="15" fill="rgb(219,2,45)" fg:x="861" fg:w="6"/><text x="68.6920%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="68.4420%" y="613" width="0.4769%" height="15" fill="rgb(242,215,33)" fg:x="861" fg:w="6"/><text x="68.6920%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="68.4420%" y="597" width="0.4769%" height="15" fill="rgb(217,1,6)" fg:x="861" fg:w="6"/><text x="68.6920%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="68.4420%" y="581" width="0.4769%" height="15" fill="rgb(207,85,52)" fg:x="861" fg:w="6"/><text x="68.6920%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="68.6804%" y="565" width="0.2385%" height="15" fill="rgb(231,171,19)" fg:x="864" fg:w="3"/><text x="68.9304%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="68.6804%" y="549" width="0.2385%" height="15" fill="rgb(207,128,4)" fg:x="864" fg:w="3"/><text x="68.9304%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="68.6804%" y="533" width="0.2385%" height="15" fill="rgb(219,208,4)" fg:x="864" fg:w="3"/><text x="68.9304%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.6804%" y="517" width="0.2385%" height="15" fill="rgb(235,161,42)" fg:x="864" fg:w="3"/><text x="68.9304%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.6804%" y="501" width="0.2385%" height="15" fill="rgb(247,218,18)" fg:x="864" fg:w="3"/><text x="68.9304%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="68.8394%" y="485" width="0.0795%" height="15" fill="rgb(232,114,51)" fg:x="866" fg:w="1"/><text x="69.0894%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.9189%" y="629" width="0.0795%" height="15" fill="rgb(222,95,3)" fg:x="867" fg:w="1"/><text x="69.1689%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.9984%" y="581" width="0.0795%" height="15" fill="rgb(240,65,29)" fg:x="868" fg:w="1"/><text x="69.2484%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9984%" y="565" width="0.0795%" height="15" fill="rgb(249,209,20)" fg:x="868" fg:w="1"/><text x="69.2484%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (9 samples, 0.72%)</title><rect x="68.4420%" y="693" width="0.7154%" height="15" fill="rgb(241,48,37)" fg:x="861" fg:w="9"/><text x="68.6920%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.72%)</title><rect x="68.4420%" y="677" width="0.7154%" height="15" fill="rgb(230,140,42)" fg:x="861" fg:w="9"/><text x="68.6920%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.9189%" y="661" width="0.2385%" height="15" fill="rgb(230,176,45)" fg:x="867" fg:w="3"/><text x="69.1689%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.9189%" y="645" width="0.2385%" height="15" fill="rgb(245,112,21)" fg:x="867" fg:w="3"/><text x="69.1689%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.9984%" y="629" width="0.1590%" height="15" fill="rgb(207,183,35)" fg:x="868" fg:w="2"/><text x="69.2484%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="68.9984%" y="613" width="0.1590%" height="15" fill="rgb(227,44,33)" fg:x="868" fg:w="2"/><text x="69.2484%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.9984%" y="597" width="0.1590%" height="15" fill="rgb(246,120,21)" fg:x="868" fg:w="2"/><text x="69.2484%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.0779%" y="581" width="0.0795%" height="15" fill="rgb(235,57,52)" fg:x="869" fg:w="1"/><text x="69.3279%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.0779%" y="565" width="0.0795%" height="15" fill="rgb(238,84,10)" fg:x="869" fg:w="1"/><text x="69.3279%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.0779%" y="549" width="0.0795%" height="15" fill="rgb(251,200,32)" fg:x="869" fg:w="1"/><text x="69.3279%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.1574%" y="629" width="0.1590%" height="15" fill="rgb(247,159,13)" fg:x="870" fg:w="2"/><text x="69.4074%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.1574%" y="613" width="0.1590%" height="15" fill="rgb(238,64,4)" fg:x="870" fg:w="2"/><text x="69.4074%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.1574%" y="597" width="0.1590%" height="15" fill="rgb(221,131,51)" fg:x="870" fg:w="2"/><text x="69.4074%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.1574%" y="581" width="0.1590%" height="15" fill="rgb(242,5,29)" fg:x="870" fg:w="2"/><text x="69.4074%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.1574%" y="565" width="0.1590%" height="15" fill="rgb(214,130,32)" fg:x="870" fg:w="2"/><text x="69.4074%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.1574%" y="549" width="0.1590%" height="15" fill="rgb(244,210,16)" fg:x="870" fg:w="2"/><text x="69.4074%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.1574%" y="533" width="0.1590%" height="15" fill="rgb(234,48,26)" fg:x="870" fg:w="2"/><text x="69.4074%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.2369%" y="517" width="0.0795%" height="15" fill="rgb(231,82,38)" fg:x="871" fg:w="1"/><text x="69.4869%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="69.1574%" y="677" width="0.3180%" height="15" fill="rgb(254,128,41)" fg:x="870" fg:w="4"/><text x="69.4074%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.1574%" y="661" width="0.3180%" height="15" fill="rgb(212,73,49)" fg:x="870" fg:w="4"/><text x="69.4074%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.1574%" y="645" width="0.3180%" height="15" fill="rgb(205,62,54)" fg:x="870" fg:w="4"/><text x="69.4074%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.3164%" y="629" width="0.1590%" height="15" fill="rgb(228,0,8)" fg:x="872" fg:w="2"/><text x="69.5664%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.3164%" y="613" width="0.1590%" height="15" fill="rgb(251,28,17)" fg:x="872" fg:w="2"/><text x="69.5664%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.11%)</title><rect x="68.4420%" y="709" width="1.1129%" height="15" fill="rgb(238,105,27)" fg:x="861" fg:w="14"/><text x="68.6920%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="69.1574%" y="693" width="0.3975%" height="15" fill="rgb(237,216,33)" fg:x="870" fg:w="5"/><text x="69.4074%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="69.4754%" y="677" width="0.0795%" height="15" fill="rgb(229,228,25)" fg:x="874" fg:w="1"/><text x="69.7254%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.4754%" y="661" width="0.0795%" height="15" fill="rgb(233,75,23)" fg:x="874" fg:w="1"/><text x="69.7254%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4754%" y="645" width="0.0795%" height="15" fill="rgb(231,207,16)" fg:x="874" fg:w="1"/><text x="69.7254%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4754%" y="629" width="0.0795%" height="15" fill="rgb(231,191,45)" fg:x="874" fg:w="1"/><text x="69.7254%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4754%" y="613" width="0.0795%" height="15" fill="rgb(224,133,17)" fg:x="874" fg:w="1"/><text x="69.7254%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4754%" y="597" width="0.0795%" height="15" fill="rgb(209,178,27)" fg:x="874" fg:w="1"/><text x="69.7254%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4754%" y="581" width="0.0795%" height="15" fill="rgb(218,37,11)" fg:x="874" fg:w="1"/><text x="69.7254%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4754%" y="565" width="0.0795%" height="15" fill="rgb(251,226,25)" fg:x="874" fg:w="1"/><text x="69.7254%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4754%" y="549" width="0.0795%" height="15" fill="rgb(209,222,27)" fg:x="874" fg:w="1"/><text x="69.7254%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4754%" y="533" width="0.0795%" height="15" fill="rgb(238,22,21)" fg:x="874" fg:w="1"/><text x="69.7254%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4754%" y="517" width="0.0795%" height="15" fill="rgb(233,161,25)" fg:x="874" fg:w="1"/><text x="69.7254%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4754%" y="501" width="0.0795%" height="15" fill="rgb(226,122,53)" fg:x="874" fg:w="1"/><text x="69.7254%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.4754%" y="485" width="0.0795%" height="15" fill="rgb(220,123,17)" fg:x="874" fg:w="1"/><text x="69.7254%" y="495.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="69.5548%" y="661" width="0.0795%" height="15" fill="rgb(230,224,35)" fg:x="875" fg:w="1"/><text x="69.8048%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5548%" y="645" width="0.0795%" height="15" fill="rgb(246,83,8)" fg:x="875" fg:w="1"/><text x="69.8048%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="69.5548%" y="629" width="0.0795%" height="15" fill="rgb(230,214,17)" fg:x="875" fg:w="1"/><text x="69.8048%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5548%" y="613" width="0.0795%" height="15" fill="rgb(222,97,18)" fg:x="875" fg:w="1"/><text x="69.8048%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.7138%" y="613" width="0.0795%" height="15" fill="rgb(206,79,1)" fg:x="877" fg:w="1"/><text x="69.9638%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7138%" y="597" width="0.0795%" height="15" fill="rgb(214,121,34)" fg:x="877" fg:w="1"/><text x="69.9638%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.7138%" y="581" width="0.0795%" height="15" fill="rgb(249,199,46)" fg:x="877" fg:w="1"/><text x="69.9638%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7138%" y="565" width="0.0795%" height="15" fill="rgb(214,222,46)" fg:x="877" fg:w="1"/><text x="69.9638%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7138%" y="549" width="0.0795%" height="15" fill="rgb(248,168,30)" fg:x="877" fg:w="1"/><text x="69.9638%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7138%" y="533" width="0.0795%" height="15" fill="rgb(226,14,28)" fg:x="877" fg:w="1"/><text x="69.9638%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.7933%" y="581" width="0.0795%" height="15" fill="rgb(253,123,1)" fg:x="878" fg:w="1"/><text x="70.0433%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.7933%" y="565" width="0.0795%" height="15" fill="rgb(225,24,42)" fg:x="878" fg:w="1"/><text x="70.0433%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="69.6343%" y="661" width="0.3180%" height="15" fill="rgb(216,161,37)" fg:x="876" fg:w="4"/><text x="69.8843%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.6343%" y="645" width="0.3180%" height="15" fill="rgb(251,164,26)" fg:x="876" fg:w="4"/><text x="69.8843%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.6343%" y="629" width="0.3180%" height="15" fill="rgb(219,177,3)" fg:x="876" fg:w="4"/><text x="69.8843%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.7933%" y="613" width="0.1590%" height="15" fill="rgb(222,65,0)" fg:x="878" fg:w="2"/><text x="70.0433%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.7933%" y="597" width="0.1590%" height="15" fill="rgb(223,69,54)" fg:x="878" fg:w="2"/><text x="70.0433%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.8728%" y="581" width="0.0795%" height="15" fill="rgb(235,30,27)" fg:x="879" fg:w="1"/><text x="70.1228%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.8728%" y="565" width="0.0795%" height="15" fill="rgb(220,183,50)" fg:x="879" fg:w="1"/><text x="70.1228%" y="575.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (484 samples, 38.47%)</title><rect x="31.6375%" y="741" width="38.4738%" height="15" fill="rgb(248,198,15)" fg:x="398" fg:w="484"/><text x="31.8875%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (484 samples, 38.47%)</title><rect x="31.6375%" y="725" width="38.4738%" height="15" fill="rgb(222,211,4)" fg:x="398" fg:w="484"/><text x="31.8875%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (7 samples, 0.56%)</title><rect x="69.5548%" y="709" width="0.5564%" height="15" fill="rgb(214,102,34)" fg:x="875" fg:w="7"/><text x="69.8048%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="69.5548%" y="693" width="0.5564%" height="15" fill="rgb(245,92,5)" fg:x="875" fg:w="7"/><text x="69.8048%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="69.5548%" y="677" width="0.5564%" height="15" fill="rgb(252,72,51)" fg:x="875" fg:w="7"/><text x="69.8048%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="69.9523%" y="661" width="0.1590%" height="15" fill="rgb(252,208,19)" fg:x="880" fg:w="2"/><text x="70.2023%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="69.9523%" y="645" width="0.1590%" height="15" fill="rgb(211,69,7)" fg:x="880" fg:w="2"/><text x="70.2023%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.9523%" y="629" width="0.1590%" height="15" fill="rgb(211,27,16)" fg:x="880" fg:w="2"/><text x="70.2023%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0318%" y="613" width="0.0795%" height="15" fill="rgb(219,216,14)" fg:x="881" fg:w="1"/><text x="70.2818%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.0318%" y="597" width="0.0795%" height="15" fill="rgb(219,71,8)" fg:x="881" fg:w="1"/><text x="70.2818%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0318%" y="581" width="0.0795%" height="15" fill="rgb(223,170,53)" fg:x="881" fg:w="1"/><text x="70.2818%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.0318%" y="565" width="0.0795%" height="15" fill="rgb(246,21,26)" fg:x="881" fg:w="1"/><text x="70.2818%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0318%" y="549" width="0.0795%" height="15" fill="rgb(248,20,46)" fg:x="881" fg:w="1"/><text x="70.2818%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.0318%" y="533" width="0.0795%" height="15" fill="rgb(252,94,11)" fg:x="881" fg:w="1"/><text x="70.2818%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0318%" y="517" width="0.0795%" height="15" fill="rgb(236,163,8)" fg:x="881" fg:w="1"/><text x="70.2818%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.0318%" y="501" width="0.0795%" height="15" fill="rgb(217,221,45)" fg:x="881" fg:w="1"/><text x="70.2818%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0318%" y="485" width="0.0795%" height="15" fill="rgb(238,38,17)" fg:x="881" fg:w="1"/><text x="70.2818%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.0318%" y="469" width="0.0795%" height="15" fill="rgb(242,210,23)" fg:x="881" fg:w="1"/><text x="70.2818%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0318%" y="453" width="0.0795%" height="15" fill="rgb(250,86,53)" fg:x="881" fg:w="1"/><text x="70.2818%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (883 samples, 70.19%)</title><rect x="0.0000%" y="789" width="70.1908%" height="15" fill="rgb(223,168,25)" fg:x="0" fg:w="883"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (883 samples, 70.19%)</title><rect x="0.0000%" y="773" width="70.1908%" height="15" fill="rgb(251,189,4)" fg:x="0" fg:w="883"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (883 samples, 70.19%)</title><rect x="0.0000%" y="757" width="70.1908%" height="15" fill="rgb(245,19,28)" fg:x="0" fg:w="883"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="70.1113%" y="741" width="0.0795%" height="15" fill="rgb(207,10,34)" fg:x="882" fg:w="1"/><text x="70.3613%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.1113%" y="725" width="0.0795%" height="15" fill="rgb(235,153,31)" fg:x="882" fg:w="1"/><text x="70.3613%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.1113%" y="709" width="0.0795%" height="15" fill="rgb(228,72,37)" fg:x="882" fg:w="1"/><text x="70.3613%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.1113%" y="693" width="0.0795%" height="15" fill="rgb(215,15,16)" fg:x="882" fg:w="1"/><text x="70.3613%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.1908%" y="677" width="0.0795%" height="15" fill="rgb(250,119,29)" fg:x="883" fg:w="1"/><text x="70.4408%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.1908%" y="741" width="0.1590%" height="15" fill="rgb(214,59,1)" fg:x="883" fg:w="2"/><text x="70.4408%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.1908%" y="725" width="0.1590%" height="15" fill="rgb(223,109,25)" fg:x="883" fg:w="2"/><text x="70.4408%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.1908%" y="709" width="0.1590%" height="15" fill="rgb(230,198,22)" fg:x="883" fg:w="2"/><text x="70.4408%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.1908%" y="693" width="0.1590%" height="15" fill="rgb(245,184,46)" fg:x="883" fg:w="2"/><text x="70.4408%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2703%" y="677" width="0.0795%" height="15" fill="rgb(253,73,16)" fg:x="884" fg:w="1"/><text x="70.5203%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.2703%" y="661" width="0.0795%" height="15" fill="rgb(206,94,45)" fg:x="884" fg:w="1"/><text x="70.5203%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.2703%" y="645" width="0.0795%" height="15" fill="rgb(236,83,27)" fg:x="884" fg:w="1"/><text x="70.5203%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3498%" y="725" width="0.0795%" height="15" fill="rgb(220,196,8)" fg:x="885" fg:w="1"/><text x="70.5998%" y="735.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.4293%" y="661" width="0.1590%" height="15" fill="rgb(254,185,14)" fg:x="886" fg:w="2"/><text x="70.6793%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="70.4293%" y="693" width="0.2385%" height="15" fill="rgb(226,50,22)" fg:x="886" fg:w="3"/><text x="70.6793%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="70.4293%" y="677" width="0.2385%" height="15" fill="rgb(253,147,0)" fg:x="886" fg:w="3"/><text x="70.6793%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="70.5882%" y="661" width="0.0795%" height="15" fill="rgb(252,46,33)" fg:x="888" fg:w="1"/><text x="70.8382%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5882%" y="645" width="0.0795%" height="15" fill="rgb(242,22,54)" fg:x="888" fg:w="1"/><text x="70.8382%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="70.4293%" y="725" width="0.3180%" height="15" fill="rgb(223,178,32)" fg:x="886" fg:w="4"/><text x="70.6793%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="70.4293%" y="709" width="0.3180%" height="15" fill="rgb(214,106,53)" fg:x="886" fg:w="4"/><text x="70.6793%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="70.6677%" y="693" width="0.0795%" height="15" fill="rgb(232,65,50)" fg:x="889" fg:w="1"/><text x="70.9177%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.6677%" y="677" width="0.0795%" height="15" fill="rgb(231,110,28)" fg:x="889" fg:w="1"/><text x="70.9177%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.7472%" y="661" width="0.0795%" height="15" fill="rgb(216,71,40)" fg:x="890" fg:w="1"/><text x="70.9972%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8267%" y="645" width="0.0795%" height="15" fill="rgb(229,89,53)" fg:x="891" fg:w="1"/><text x="71.0767%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9857%" y="629" width="0.0795%" height="15" fill="rgb(210,124,14)" fg:x="893" fg:w="1"/><text x="71.2357%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="70.7472%" y="677" width="0.4769%" height="15" fill="rgb(236,213,6)" fg:x="890" fg:w="6"/><text x="70.9972%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="70.8267%" y="661" width="0.3975%" height="15" fill="rgb(228,41,5)" fg:x="891" fg:w="5"/><text x="71.0767%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.9062%" y="645" width="0.3180%" height="15" fill="rgb(221,167,25)" fg:x="892" fg:w="4"/><text x="71.1562%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.0652%" y="629" width="0.1590%" height="15" fill="rgb(228,144,37)" fg:x="894" fg:w="2"/><text x="71.3152%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="71.0652%" y="613" width="0.1590%" height="15" fill="rgb(227,189,38)" fg:x="894" fg:w="2"/><text x="71.3152%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1447%" y="597" width="0.0795%" height="15" fill="rgb(218,8,2)" fg:x="895" fg:w="1"/><text x="71.3947%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3037%" y="613" width="0.0795%" height="15" fill="rgb(209,61,28)" fg:x="897" fg:w="1"/><text x="71.5537%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3831%" y="613" width="0.0795%" height="15" fill="rgb(233,140,39)" fg:x="898" fg:w="1"/><text x="71.6331%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3831%" y="597" width="0.0795%" height="15" fill="rgb(251,66,48)" fg:x="898" fg:w="1"/><text x="71.6331%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="71.2242%" y="677" width="0.3180%" height="15" fill="rgb(210,44,45)" fg:x="896" fg:w="4"/><text x="71.4742%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="71.2242%" y="661" width="0.3180%" height="15" fill="rgb(214,136,46)" fg:x="896" fg:w="4"/><text x="71.4742%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="71.3037%" y="645" width="0.2385%" height="15" fill="rgb(207,130,50)" fg:x="897" fg:w="3"/><text x="71.5537%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.3037%" y="629" width="0.2385%" height="15" fill="rgb(228,102,49)" fg:x="897" fg:w="3"/><text x="71.5537%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4626%" y="613" width="0.0795%" height="15" fill="rgb(253,55,1)" fg:x="899" fg:w="1"/><text x="71.7126%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4626%" y="597" width="0.0795%" height="15" fill="rgb(238,222,9)" fg:x="899" fg:w="1"/><text x="71.7126%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.27%)</title><rect x="70.3498%" y="741" width="1.2719%" height="15" fill="rgb(246,99,6)" fg:x="885" fg:w="16"/><text x="70.5998%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (11 samples, 0.87%)</title><rect x="70.7472%" y="725" width="0.8744%" height="15" fill="rgb(219,110,26)" fg:x="890" fg:w="11"/><text x="70.9972%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.87%)</title><rect x="70.7472%" y="709" width="0.8744%" height="15" fill="rgb(239,160,33)" fg:x="890" fg:w="11"/><text x="70.9972%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (11 samples, 0.87%)</title><rect x="70.7472%" y="693" width="0.8744%" height="15" fill="rgb(220,202,23)" fg:x="890" fg:w="11"/><text x="70.9972%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5421%" y="677" width="0.0795%" height="15" fill="rgb(208,80,26)" fg:x="900" fg:w="1"/><text x="71.7921%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.6216%" y="693" width="0.0795%" height="15" fill="rgb(243,85,7)" fg:x="901" fg:w="1"/><text x="71.8716%" y="703.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="71.7011%" y="661" width="0.1590%" height="15" fill="rgb(228,77,47)" fg:x="902" fg:w="2"/><text x="71.9511%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="71.7011%" y="645" width="0.1590%" height="15" fill="rgb(212,226,8)" fg:x="902" fg:w="2"/><text x="71.9511%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="71.7011%" y="629" width="0.1590%" height="15" fill="rgb(241,120,54)" fg:x="902" fg:w="2"/><text x="71.9511%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="71.7011%" y="613" width="0.1590%" height="15" fill="rgb(226,80,16)" fg:x="902" fg:w="2"/><text x="71.9511%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="71.7011%" y="597" width="0.1590%" height="15" fill="rgb(240,76,13)" fg:x="902" fg:w="2"/><text x="71.9511%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="71.7011%" y="581" width="0.1590%" height="15" fill="rgb(252,74,8)" fg:x="902" fg:w="2"/><text x="71.9511%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="71.7011%" y="565" width="0.1590%" height="15" fill="rgb(244,155,2)" fg:x="902" fg:w="2"/><text x="71.9511%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="71.7011%" y="549" width="0.1590%" height="15" fill="rgb(215,81,35)" fg:x="902" fg:w="2"/><text x="71.9511%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8601%" y="597" width="0.0795%" height="15" fill="rgb(206,55,2)" fg:x="904" fg:w="1"/><text x="72.1101%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8601%" y="581" width="0.0795%" height="15" fill="rgb(231,2,34)" fg:x="904" fg:w="1"/><text x="72.1101%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8601%" y="565" width="0.0795%" height="15" fill="rgb(242,176,48)" fg:x="904" fg:w="1"/><text x="72.1101%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8601%" y="549" width="0.0795%" height="15" fill="rgb(249,31,36)" fg:x="904" fg:w="1"/><text x="72.1101%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8601%" y="533" width="0.0795%" height="15" fill="rgb(205,18,17)" fg:x="904" fg:w="1"/><text x="72.1101%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8601%" y="517" width="0.0795%" height="15" fill="rgb(254,130,5)" fg:x="904" fg:w="1"/><text x="72.1101%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8601%" y="501" width="0.0795%" height="15" fill="rgb(229,42,45)" fg:x="904" fg:w="1"/><text x="72.1101%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.8601%" y="485" width="0.0795%" height="15" fill="rgb(245,95,25)" fg:x="904" fg:w="1"/><text x="72.1101%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.8601%" y="469" width="0.0795%" height="15" fill="rgb(249,193,38)" fg:x="904" fg:w="1"/><text x="72.1101%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.8601%" y="453" width="0.0795%" height="15" fill="rgb(241,140,43)" fg:x="904" fg:w="1"/><text x="72.1101%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.8601%" y="437" width="0.0795%" height="15" fill="rgb(245,78,48)" fg:x="904" fg:w="1"/><text x="72.1101%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8601%" y="421" width="0.0795%" height="15" fill="rgb(214,92,39)" fg:x="904" fg:w="1"/><text x="72.1101%" y="431.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="71.8601%" y="645" width="0.1590%" height="15" fill="rgb(211,189,14)" fg:x="904" fg:w="2"/><text x="72.1101%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.8601%" y="629" width="0.1590%" height="15" fill="rgb(218,7,24)" fg:x="904" fg:w="2"/><text x="72.1101%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.8601%" y="613" width="0.1590%" height="15" fill="rgb(224,200,49)" fg:x="904" fg:w="2"/><text x="72.1101%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9396%" y="597" width="0.0795%" height="15" fill="rgb(218,210,14)" fg:x="905" fg:w="1"/><text x="72.1896%" y="607.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="72.0191%" y="597" width="0.0795%" height="15" fill="rgb(234,142,31)" fg:x="906" fg:w="1"/><text x="72.2691%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="72.0191%" y="581" width="0.0795%" height="15" fill="rgb(227,165,2)" fg:x="906" fg:w="1"/><text x="72.2691%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="72.0191%" y="565" width="0.0795%" height="15" fill="rgb(232,44,46)" fg:x="906" fg:w="1"/><text x="72.2691%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="72.0191%" y="549" width="0.0795%" height="15" fill="rgb(236,149,47)" fg:x="906" fg:w="1"/><text x="72.2691%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="72.0191%" y="533" width="0.0795%" height="15" fill="rgb(227,45,31)" fg:x="906" fg:w="1"/><text x="72.2691%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="72.0191%" y="517" width="0.0795%" height="15" fill="rgb(240,176,51)" fg:x="906" fg:w="1"/><text x="72.2691%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="72.0191%" y="501" width="0.0795%" height="15" fill="rgb(249,146,41)" fg:x="906" fg:w="1"/><text x="72.2691%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="72.0191%" y="485" width="0.0795%" height="15" fill="rgb(213,208,4)" fg:x="906" fg:w="1"/><text x="72.2691%" y="495.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="72.0986%" y="549" width="0.0795%" height="15" fill="rgb(245,84,36)" fg:x="907" fg:w="1"/><text x="72.3486%" y="559.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="72.0191%" y="629" width="0.3180%" height="15" fill="rgb(254,84,18)" fg:x="906" fg:w="4"/><text x="72.2691%" y="639.50"></text></g><g><title>glob::fill_todo (4 samples, 0.32%)</title><rect x="72.0191%" y="613" width="0.3180%" height="15" fill="rgb(225,38,54)" fg:x="906" fg:w="4"/><text x="72.2691%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="72.0986%" y="597" width="0.2385%" height="15" fill="rgb(246,50,30)" fg:x="907" fg:w="3"/><text x="72.3486%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="72.0986%" y="581" width="0.2385%" height="15" fill="rgb(246,148,9)" fg:x="907" fg:w="3"/><text x="72.3486%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="72.0986%" y="565" width="0.2385%" height="15" fill="rgb(223,75,4)" fg:x="907" fg:w="3"/><text x="72.3486%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="72.1781%" y="549" width="0.1590%" height="15" fill="rgb(239,148,41)" fg:x="908" fg:w="2"/><text x="72.4281%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="72.1781%" y="533" width="0.1590%" height="15" fill="rgb(205,195,3)" fg:x="908" fg:w="2"/><text x="72.4281%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="72.1781%" y="517" width="0.1590%" height="15" fill="rgb(254,161,1)" fg:x="908" fg:w="2"/><text x="72.4281%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="72.1781%" y="501" width="0.1590%" height="15" fill="rgb(211,229,8)" fg:x="908" fg:w="2"/><text x="72.4281%" y="511.50"></text></g><g><title>glob::Pattern::new (3 samples, 0.24%)</title><rect x="72.4165%" y="597" width="0.2385%" height="15" fill="rgb(220,97,9)" fg:x="911" fg:w="3"/><text x="72.6665%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.5755%" y="581" width="0.0795%" height="15" fill="rgb(240,218,8)" fg:x="913" fg:w="1"/><text x="72.8255%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.5755%" y="565" width="0.0795%" height="15" fill="rgb(250,44,0)" fg:x="913" fg:w="1"/><text x="72.8255%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.5755%" y="549" width="0.0795%" height="15" fill="rgb(236,41,53)" fg:x="913" fg:w="1"/><text x="72.8255%" y="559.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.87%)</title><rect x="71.8601%" y="661" width="0.8744%" height="15" fill="rgb(218,227,13)" fg:x="904" fg:w="11"/><text x="72.1101%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (9 samples, 0.72%)</title><rect x="72.0191%" y="645" width="0.7154%" height="15" fill="rgb(217,94,32)" fg:x="906" fg:w="9"/><text x="72.2691%" y="655.50"></text></g><g><title>glob::glob (5 samples, 0.40%)</title><rect x="72.3370%" y="629" width="0.3975%" height="15" fill="rgb(213,217,12)" fg:x="910" fg:w="5"/><text x="72.5870%" y="639.50"></text></g><g><title>glob::glob_with (5 samples, 0.40%)</title><rect x="72.3370%" y="613" width="0.3975%" height="15" fill="rgb(229,13,46)" fg:x="910" fg:w="5"/><text x="72.5870%" y="623.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (1 samples, 0.08%)</title><rect x="72.6550%" y="597" width="0.0795%" height="15" fill="rgb(243,139,5)" fg:x="914" fg:w="1"/><text x="72.9050%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="72.6550%" y="581" width="0.0795%" height="15" fill="rgb(249,38,45)" fg:x="914" fg:w="1"/><text x="72.9050%" y="591.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="72.6550%" y="565" width="0.0795%" height="15" fill="rgb(216,70,11)" fg:x="914" fg:w="1"/><text x="72.9050%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="72.7345%" y="645" width="0.1590%" height="15" fill="rgb(253,101,25)" fg:x="915" fg:w="2"/><text x="72.9845%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="72.7345%" y="661" width="0.2385%" height="15" fill="rgb(207,197,30)" fg:x="915" fg:w="3"/><text x="72.9845%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="72.8935%" y="645" width="0.0795%" height="15" fill="rgb(238,87,13)" fg:x="917" fg:w="1"/><text x="73.1435%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8935%" y="629" width="0.0795%" height="15" fill="rgb(215,155,8)" fg:x="917" fg:w="1"/><text x="73.1435%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as replies::DeserializeTagged&gt;::from_tagged_json (1 samples, 0.08%)</title><rect x="73.1320%" y="597" width="0.0795%" height="15" fill="rgb(239,166,38)" fg:x="920" fg:w="1"/><text x="73.3820%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="73.1320%" y="629" width="0.1590%" height="15" fill="rgb(240,194,35)" fg:x="920" fg:w="2"/><text x="73.3820%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="73.1320%" y="613" width="0.1590%" height="15" fill="rgb(219,10,44)" fg:x="920" fg:w="2"/><text x="73.3820%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="73.2114%" y="597" width="0.0795%" height="15" fill="rgb(251,220,35)" fg:x="921" fg:w="1"/><text x="73.4614%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2114%" y="581" width="0.0795%" height="15" fill="rgb(218,117,13)" fg:x="921" fg:w="1"/><text x="73.4614%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="73.2909%" y="613" width="0.0795%" height="15" fill="rgb(221,213,40)" fg:x="922" fg:w="1"/><text x="73.5409%" y="623.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="73.2909%" y="629" width="0.1590%" height="15" fill="rgb(251,224,35)" fg:x="922" fg:w="2"/><text x="73.5409%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="73.3704%" y="613" width="0.0795%" height="15" fill="rgb(241,33,39)" fg:x="923" fg:w="1"/><text x="73.6204%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3704%" y="597" width="0.0795%" height="15" fill="rgb(222,74,17)" fg:x="923" fg:w="1"/><text x="73.6204%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="73.4499%" y="629" width="0.0795%" height="15" fill="rgb(225,103,0)" fg:x="924" fg:w="1"/><text x="73.6999%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="73.4499%" y="613" width="0.0795%" height="15" fill="rgb(240,0,12)" fg:x="924" fg:w="1"/><text x="73.6999%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="73.4499%" y="597" width="0.0795%" height="15" fill="rgb(233,213,37)" fg:x="924" fg:w="1"/><text x="73.6999%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.4499%" y="581" width="0.0795%" height="15" fill="rgb(225,84,52)" fg:x="924" fg:w="1"/><text x="73.6999%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="73.5294%" y="629" width="0.0795%" height="15" fill="rgb(247,160,51)" fg:x="925" fg:w="1"/><text x="73.7794%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="73.5294%" y="613" width="0.0795%" height="15" fill="rgb(244,60,51)" fg:x="925" fg:w="1"/><text x="73.7794%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="73.5294%" y="597" width="0.0795%" height="15" fill="rgb(233,114,7)" fg:x="925" fg:w="1"/><text x="73.7794%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.5294%" y="581" width="0.0795%" height="15" fill="rgb(246,136,16)" fg:x="925" fg:w="1"/><text x="73.7794%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::schema (9 samples, 0.72%)</title><rect x="72.9730%" y="661" width="0.7154%" height="15" fill="rgb(243,114,45)" fg:x="918" fg:w="9"/><text x="73.2230%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.72%)</title><rect x="72.9730%" y="645" width="0.7154%" height="15" fill="rgb(247,183,43)" fg:x="918" fg:w="9"/><text x="73.2230%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6089%" y="629" width="0.0795%" height="15" fill="rgb(251,210,42)" fg:x="926" fg:w="1"/><text x="73.8589%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (27 samples, 2.15%)</title><rect x="71.6216%" y="741" width="2.1463%" height="15" fill="rgb(221,88,35)" fg:x="901" fg:w="27"/><text x="71.8716%" y="751.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (27 samples, 2.15%)</title><rect x="71.6216%" y="725" width="2.1463%" height="15" fill="rgb(242,21,20)" fg:x="901" fg:w="27"/><text x="71.8716%" y="735.50">e..</text></g><g><title>engine::session::Session::new (27 samples, 2.15%)</title><rect x="71.6216%" y="709" width="2.1463%" height="15" fill="rgb(233,226,36)" fg:x="901" fg:w="27"/><text x="71.8716%" y="719.50">e..</text></g><g><title>engine::session::Session::initialize (26 samples, 2.07%)</title><rect x="71.7011%" y="693" width="2.0668%" height="15" fill="rgb(243,189,34)" fg:x="902" fg:w="26"/><text x="71.9511%" y="703.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::initialize (26 samples, 2.07%)</title><rect x="71.7011%" y="677" width="2.0668%" height="15" fill="rgb(207,145,50)" fg:x="902" fg:w="26"/><text x="71.9511%" y="687.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="73.6884%" y="661" width="0.0795%" height="15" fill="rgb(242,1,50)" fg:x="927" fg:w="1"/><text x="73.9384%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="73.6884%" y="645" width="0.0795%" height="15" fill="rgb(231,65,32)" fg:x="927" fg:w="1"/><text x="73.9384%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="73.7679%" y="725" width="0.0795%" height="15" fill="rgb(208,68,49)" fg:x="928" fg:w="1"/><text x="74.0179%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.8474%" y="581" width="0.0795%" height="15" fill="rgb(253,54,49)" fg:x="929" fg:w="1"/><text x="74.0974%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="73.8474%" y="597" width="0.3975%" height="15" fill="rgb(245,186,24)" fg:x="929" fg:w="5"/><text x="74.0974%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="73.9269%" y="581" width="0.3180%" height="15" fill="rgb(209,2,41)" fg:x="930" fg:w="4"/><text x="74.1769%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.0064%" y="565" width="0.2385%" height="15" fill="rgb(242,208,54)" fg:x="931" fg:w="3"/><text x="74.2564%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="74.0064%" y="549" width="0.2385%" height="15" fill="rgb(225,9,51)" fg:x="931" fg:w="3"/><text x="74.2564%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="74.0064%" y="533" width="0.2385%" height="15" fill="rgb(207,207,25)" fg:x="931" fg:w="3"/><text x="74.2564%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.1653%" y="517" width="0.0795%" height="15" fill="rgb(253,96,18)" fg:x="933" fg:w="1"/><text x="74.4153%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="73.8474%" y="629" width="0.4769%" height="15" fill="rgb(252,215,20)" fg:x="929" fg:w="6"/><text x="74.0974%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="73.8474%" y="613" width="0.4769%" height="15" fill="rgb(245,227,26)" fg:x="929" fg:w="6"/><text x="74.0974%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.2448%" y="597" width="0.0795%" height="15" fill="rgb(241,208,0)" fg:x="934" fg:w="1"/><text x="74.4948%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.3243%" y="597" width="0.0795%" height="15" fill="rgb(224,130,10)" fg:x="935" fg:w="1"/><text x="74.5743%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="74.3243%" y="629" width="0.3180%" height="15" fill="rgb(237,29,0)" fg:x="935" fg:w="4"/><text x="74.5743%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="74.3243%" y="613" width="0.3180%" height="15" fill="rgb(219,27,41)" fg:x="935" fg:w="4"/><text x="74.5743%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.4038%" y="597" width="0.2385%" height="15" fill="rgb(245,101,19)" fg:x="936" fg:w="3"/><text x="74.6538%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.4833%" y="581" width="0.1590%" height="15" fill="rgb(243,44,37)" fg:x="937" fg:w="2"/><text x="74.7333%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.4833%" y="565" width="0.1590%" height="15" fill="rgb(228,213,43)" fg:x="937" fg:w="2"/><text x="74.7333%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5628%" y="549" width="0.0795%" height="15" fill="rgb(219,163,21)" fg:x="938" fg:w="1"/><text x="74.8128%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7218%" y="581" width="0.0795%" height="15" fill="rgb(234,86,24)" fg:x="940" fg:w="1"/><text x="74.9718%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.7218%" y="565" width="0.0795%" height="15" fill="rgb(225,10,24)" fg:x="940" fg:w="1"/><text x="74.9718%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7218%" y="549" width="0.0795%" height="15" fill="rgb(218,109,7)" fg:x="940" fg:w="1"/><text x="74.9718%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="74.8013%" y="533" width="0.1590%" height="15" fill="rgb(210,20,26)" fg:x="941" fg:w="2"/><text x="75.0513%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.8013%" y="517" width="0.1590%" height="15" fill="rgb(216,18,1)" fg:x="941" fg:w="2"/><text x="75.0513%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.8013%" y="501" width="0.1590%" height="15" fill="rgb(206,163,23)" fg:x="941" fg:w="2"/><text x="75.0513%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8808%" y="485" width="0.0795%" height="15" fill="rgb(229,150,31)" fg:x="942" fg:w="1"/><text x="75.1308%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8808%" y="469" width="0.0795%" height="15" fill="rgb(231,10,5)" fg:x="942" fg:w="1"/><text x="75.1308%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.8808%" y="453" width="0.0795%" height="15" fill="rgb(250,40,50)" fg:x="942" fg:w="1"/><text x="75.1308%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0397%" y="469" width="0.0795%" height="15" fill="rgb(217,119,7)" fg:x="944" fg:w="1"/><text x="75.2897%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0397%" y="453" width="0.0795%" height="15" fill="rgb(245,214,40)" fg:x="944" fg:w="1"/><text x="75.2897%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0397%" y="437" width="0.0795%" height="15" fill="rgb(216,187,1)" fg:x="944" fg:w="1"/><text x="75.2897%" y="447.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.35%)</title><rect x="73.8474%" y="725" width="1.3514%" height="15" fill="rgb(237,146,21)" fg:x="929" fg:w="17"/><text x="74.0974%" y="735.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.35%)</title><rect x="73.8474%" y="709" width="1.3514%" height="15" fill="rgb(210,174,47)" fg:x="929" fg:w="17"/><text x="74.0974%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.35%)</title><rect x="73.8474%" y="693" width="1.3514%" height="15" fill="rgb(218,111,39)" fg:x="929" fg:w="17"/><text x="74.0974%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.35%)</title><rect x="73.8474%" y="677" width="1.3514%" height="15" fill="rgb(224,95,19)" fg:x="929" fg:w="17"/><text x="74.0974%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.35%)</title><rect x="73.8474%" y="661" width="1.3514%" height="15" fill="rgb(234,15,38)" fg:x="929" fg:w="17"/><text x="74.0974%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.35%)</title><rect x="73.8474%" y="645" width="1.3514%" height="15" fill="rgb(246,56,12)" fg:x="929" fg:w="17"/><text x="74.0974%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="74.6423%" y="629" width="0.5564%" height="15" fill="rgb(247,16,17)" fg:x="939" fg:w="7"/><text x="74.8923%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="74.6423%" y="613" width="0.5564%" height="15" fill="rgb(215,151,11)" fg:x="939" fg:w="7"/><text x="74.8923%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="74.6423%" y="597" width="0.5564%" height="15" fill="rgb(225,16,24)" fg:x="939" fg:w="7"/><text x="74.8923%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="74.8013%" y="581" width="0.3975%" height="15" fill="rgb(217,117,5)" fg:x="941" fg:w="5"/><text x="75.0513%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="74.8013%" y="565" width="0.3975%" height="15" fill="rgb(246,187,53)" fg:x="941" fg:w="5"/><text x="75.0513%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="74.8013%" y="549" width="0.3975%" height="15" fill="rgb(241,71,40)" fg:x="941" fg:w="5"/><text x="75.0513%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.9603%" y="533" width="0.2385%" height="15" fill="rgb(231,67,39)" fg:x="943" fg:w="3"/><text x="75.2103%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.9603%" y="517" width="0.2385%" height="15" fill="rgb(222,120,24)" fg:x="943" fg:w="3"/><text x="75.2103%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.9603%" y="501" width="0.2385%" height="15" fill="rgb(248,3,3)" fg:x="943" fg:w="3"/><text x="75.2103%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.0397%" y="485" width="0.1590%" height="15" fill="rgb(228,218,5)" fg:x="944" fg:w="2"/><text x="75.2897%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.1192%" y="469" width="0.0795%" height="15" fill="rgb(212,202,43)" fg:x="945" fg:w="1"/><text x="75.3692%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="75.1987%" y="693" width="0.0795%" height="15" fill="rgb(235,183,2)" fg:x="946" fg:w="1"/><text x="75.4487%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1987%" y="677" width="0.0795%" height="15" fill="rgb(230,165,10)" fg:x="946" fg:w="1"/><text x="75.4487%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="75.1987%" y="725" width="0.1590%" height="15" fill="rgb(219,54,40)" fg:x="946" fg:w="2"/><text x="75.4487%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="75.1987%" y="709" width="0.1590%" height="15" fill="rgb(244,73,9)" fg:x="946" fg:w="2"/><text x="75.4487%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="75.2782%" y="693" width="0.0795%" height="15" fill="rgb(212,32,45)" fg:x="947" fg:w="1"/><text x="75.5282%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2782%" y="677" width="0.0795%" height="15" fill="rgb(205,58,31)" fg:x="947" fg:w="1"/><text x="75.5282%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.2782%" y="661" width="0.0795%" height="15" fill="rgb(250,120,43)" fg:x="947" fg:w="1"/><text x="75.5282%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3577%" y="645" width="0.0795%" height="15" fill="rgb(235,13,10)" fg:x="948" fg:w="1"/><text x="75.6077%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3577%" y="629" width="0.0795%" height="15" fill="rgb(232,219,31)" fg:x="948" fg:w="1"/><text x="75.6077%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="75.3577%" y="693" width="0.1590%" height="15" fill="rgb(218,157,51)" fg:x="948" fg:w="2"/><text x="75.6077%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="75.3577%" y="677" width="0.1590%" height="15" fill="rgb(211,91,52)" fg:x="948" fg:w="2"/><text x="75.6077%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.3577%" y="661" width="0.1590%" height="15" fill="rgb(240,173,1)" fg:x="948" fg:w="2"/><text x="75.6077%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4372%" y="645" width="0.0795%" height="15" fill="rgb(248,20,47)" fg:x="949" fg:w="1"/><text x="75.6872%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.4372%" y="629" width="0.0795%" height="15" fill="rgb(217,221,40)" fg:x="949" fg:w="1"/><text x="75.6872%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.4372%" y="613" width="0.0795%" height="15" fill="rgb(226,149,51)" fg:x="949" fg:w="1"/><text x="75.6872%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.4372%" y="597" width="0.0795%" height="15" fill="rgb(252,193,7)" fg:x="949" fg:w="1"/><text x="75.6872%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.4372%" y="581" width="0.0795%" height="15" fill="rgb(205,123,0)" fg:x="949" fg:w="1"/><text x="75.6872%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.4372%" y="565" width="0.0795%" height="15" fill="rgb(233,173,25)" fg:x="949" fg:w="1"/><text x="75.6872%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.4372%" y="549" width="0.0795%" height="15" fill="rgb(216,63,32)" fg:x="949" fg:w="1"/><text x="75.6872%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.5167%" y="629" width="0.0795%" height="15" fill="rgb(209,56,45)" fg:x="950" fg:w="1"/><text x="75.7667%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.5167%" y="613" width="0.0795%" height="15" fill="rgb(226,111,49)" fg:x="950" fg:w="1"/><text x="75.7667%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5167%" y="597" width="0.0795%" height="15" fill="rgb(244,181,21)" fg:x="950" fg:w="1"/><text x="75.7667%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5167%" y="581" width="0.0795%" height="15" fill="rgb(222,126,15)" fg:x="950" fg:w="1"/><text x="75.7667%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.5167%" y="565" width="0.0795%" height="15" fill="rgb(222,95,17)" fg:x="950" fg:w="1"/><text x="75.7667%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.5167%" y="549" width="0.0795%" height="15" fill="rgb(254,46,5)" fg:x="950" fg:w="1"/><text x="75.7667%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.5167%" y="533" width="0.0795%" height="15" fill="rgb(236,216,35)" fg:x="950" fg:w="1"/><text x="75.7667%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.5167%" y="517" width="0.0795%" height="15" fill="rgb(217,187,26)" fg:x="950" fg:w="1"/><text x="75.7667%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.5167%" y="501" width="0.0795%" height="15" fill="rgb(207,192,25)" fg:x="950" fg:w="1"/><text x="75.7667%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.5167%" y="485" width="0.0795%" height="15" fill="rgb(253,135,27)" fg:x="950" fg:w="1"/><text x="75.7667%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.5167%" y="469" width="0.0795%" height="15" fill="rgb(211,122,29)" fg:x="950" fg:w="1"/><text x="75.7667%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.5167%" y="453" width="0.0795%" height="15" fill="rgb(233,162,40)" fg:x="950" fg:w="1"/><text x="75.7667%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.5167%" y="437" width="0.0795%" height="15" fill="rgb(222,184,47)" fg:x="950" fg:w="1"/><text x="75.7667%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5167%" y="421" width="0.0795%" height="15" fill="rgb(249,99,23)" fg:x="950" fg:w="1"/><text x="75.7667%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="75.5167%" y="661" width="0.1590%" height="15" fill="rgb(214,60,12)" fg:x="950" fg:w="2"/><text x="75.7667%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.5167%" y="645" width="0.1590%" height="15" fill="rgb(250,229,36)" fg:x="950" fg:w="2"/><text x="75.7667%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.5962%" y="629" width="0.0795%" height="15" fill="rgb(232,195,10)" fg:x="951" fg:w="1"/><text x="75.8462%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="75.5167%" y="677" width="0.2385%" height="15" fill="rgb(205,213,31)" fg:x="950" fg:w="3"/><text x="75.7667%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6757%" y="661" width="0.0795%" height="15" fill="rgb(237,43,8)" fg:x="952" fg:w="1"/><text x="75.9257%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.6757%" y="645" width="0.0795%" height="15" fill="rgb(216,208,3)" fg:x="952" fg:w="1"/><text x="75.9257%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.6757%" y="629" width="0.0795%" height="15" fill="rgb(228,179,44)" fg:x="952" fg:w="1"/><text x="75.9257%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6757%" y="613" width="0.0795%" height="15" fill="rgb(230,192,27)" fg:x="952" fg:w="1"/><text x="75.9257%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.6757%" y="597" width="0.0795%" height="15" fill="rgb(251,30,38)" fg:x="952" fg:w="1"/><text x="75.9257%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6757%" y="581" width="0.0795%" height="15" fill="rgb(246,55,52)" fg:x="952" fg:w="1"/><text x="75.9257%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="75.3577%" y="725" width="0.5564%" height="15" fill="rgb(249,79,26)" fg:x="948" fg:w="7"/><text x="75.6077%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="75.3577%" y="709" width="0.5564%" height="15" fill="rgb(220,202,16)" fg:x="948" fg:w="7"/><text x="75.6077%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="75.5167%" y="693" width="0.3975%" height="15" fill="rgb(250,170,23)" fg:x="950" fg:w="5"/><text x="75.7667%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="75.7552%" y="677" width="0.1590%" height="15" fill="rgb(230,7,37)" fg:x="953" fg:w="2"/><text x="76.0052%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.7552%" y="661" width="0.1590%" height="15" fill="rgb(213,71,1)" fg:x="953" fg:w="2"/><text x="76.0052%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.8347%" y="645" width="0.0795%" height="15" fill="rgb(227,87,39)" fg:x="954" fg:w="1"/><text x="76.0847%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8347%" y="629" width="0.0795%" height="15" fill="rgb(210,41,29)" fg:x="954" fg:w="1"/><text x="76.0847%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.24%)</title><rect x="75.9141%" y="725" width="0.2385%" height="15" fill="rgb(206,191,31)" fg:x="955" fg:w="3"/><text x="76.1641%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.24%)</title><rect x="75.9141%" y="709" width="0.2385%" height="15" fill="rgb(247,75,54)" fg:x="955" fg:w="3"/><text x="76.1641%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="75.9141%" y="693" width="0.2385%" height="15" fill="rgb(208,54,50)" fg:x="955" fg:w="3"/><text x="76.1641%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="76.0731%" y="677" width="0.0795%" height="15" fill="rgb(214,90,37)" fg:x="957" fg:w="1"/><text x="76.3231%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.0731%" y="661" width="0.0795%" height="15" fill="rgb(220,132,6)" fg:x="957" fg:w="1"/><text x="76.3231%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="76.1526%" y="693" width="0.0795%" height="15" fill="rgb(213,167,7)" fg:x="958" fg:w="1"/><text x="76.4026%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1526%" y="677" width="0.0795%" height="15" fill="rgb(243,36,27)" fg:x="958" fg:w="1"/><text x="76.4026%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1526%" y="661" width="0.0795%" height="15" fill="rgb(235,147,12)" fg:x="958" fg:w="1"/><text x="76.4026%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.1526%" y="645" width="0.0795%" height="15" fill="rgb(212,198,44)" fg:x="958" fg:w="1"/><text x="76.4026%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1526%" y="629" width="0.0795%" height="15" fill="rgb(218,68,50)" fg:x="958" fg:w="1"/><text x="76.4026%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1526%" y="613" width="0.0795%" height="15" fill="rgb(224,79,48)" fg:x="958" fg:w="1"/><text x="76.4026%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="76.1526%" y="725" width="0.1590%" height="15" fill="rgb(213,191,50)" fg:x="958" fg:w="2"/><text x="76.4026%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="76.1526%" y="709" width="0.1590%" height="15" fill="rgb(254,146,10)" fg:x="958" fg:w="2"/><text x="76.4026%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="76.2321%" y="693" width="0.0795%" height="15" fill="rgb(215,175,11)" fg:x="959" fg:w="1"/><text x="76.4821%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="76.2321%" y="677" width="0.0795%" height="15" fill="rgb(207,49,7)" fg:x="959" fg:w="1"/><text x="76.4821%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="76.2321%" y="661" width="0.0795%" height="15" fill="rgb(234,144,29)" fg:x="959" fg:w="1"/><text x="76.4821%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.2321%" y="645" width="0.0795%" height="15" fill="rgb(213,222,48)" fg:x="959" fg:w="1"/><text x="76.4821%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.2321%" y="629" width="0.0795%" height="15" fill="rgb(222,8,6)" fg:x="959" fg:w="1"/><text x="76.4821%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2321%" y="613" width="0.0795%" height="15" fill="rgb(221,114,49)" fg:x="959" fg:w="1"/><text x="76.4821%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2321%" y="597" width="0.0795%" height="15" fill="rgb(250,140,42)" fg:x="959" fg:w="1"/><text x="76.4821%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.2321%" y="581" width="0.0795%" height="15" fill="rgb(250,150,27)" fg:x="959" fg:w="1"/><text x="76.4821%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2321%" y="565" width="0.0795%" height="15" fill="rgb(252,159,3)" fg:x="959" fg:w="1"/><text x="76.4821%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.2321%" y="549" width="0.0795%" height="15" fill="rgb(241,182,3)" fg:x="959" fg:w="1"/><text x="76.4821%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.2321%" y="533" width="0.0795%" height="15" fill="rgb(236,3,9)" fg:x="959" fg:w="1"/><text x="76.4821%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2321%" y="517" width="0.0795%" height="15" fill="rgb(223,227,51)" fg:x="959" fg:w="1"/><text x="76.4821%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="76.3116%" y="709" width="0.0795%" height="15" fill="rgb(232,133,30)" fg:x="960" fg:w="1"/><text x="76.5616%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="76.3116%" y="693" width="0.0795%" height="15" fill="rgb(209,93,27)" fg:x="960" fg:w="1"/><text x="76.5616%" y="703.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3116%" y="677" width="0.0795%" height="15" fill="rgb(208,108,34)" fg:x="960" fg:w="1"/><text x="76.5616%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.3116%" y="661" width="0.0795%" height="15" fill="rgb(215,189,13)" fg:x="960" fg:w="1"/><text x="76.5616%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.3116%" y="645" width="0.0795%" height="15" fill="rgb(206,88,23)" fg:x="960" fg:w="1"/><text x="76.5616%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="76.3911%" y="709" width="0.0795%" height="15" fill="rgb(240,173,0)" fg:x="961" fg:w="1"/><text x="76.6411%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.3911%" y="693" width="0.0795%" height="15" fill="rgb(223,106,52)" fg:x="961" fg:w="1"/><text x="76.6411%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="76.3911%" y="677" width="0.0795%" height="15" fill="rgb(206,130,16)" fg:x="961" fg:w="1"/><text x="76.6411%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="76.3911%" y="661" width="0.0795%" height="15" fill="rgb(220,54,25)" fg:x="961" fg:w="1"/><text x="76.6411%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="76.3911%" y="645" width="0.0795%" height="15" fill="rgb(210,4,38)" fg:x="961" fg:w="1"/><text x="76.6411%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.3911%" y="629" width="0.0795%" height="15" fill="rgb(238,94,39)" fg:x="961" fg:w="1"/><text x="76.6411%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.3911%" y="613" width="0.0795%" height="15" fill="rgb(234,124,34)" fg:x="961" fg:w="1"/><text x="76.6411%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.3911%" y="597" width="0.0795%" height="15" fill="rgb(221,91,40)" fg:x="961" fg:w="1"/><text x="76.6411%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3911%" y="581" width="0.0795%" height="15" fill="rgb(246,53,28)" fg:x="961" fg:w="1"/><text x="76.6411%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.3911%" y="565" width="0.0795%" height="15" fill="rgb(229,109,7)" fg:x="961" fg:w="1"/><text x="76.6411%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3911%" y="549" width="0.0795%" height="15" fill="rgb(249,117,8)" fg:x="961" fg:w="1"/><text x="76.6411%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.3911%" y="533" width="0.0795%" height="15" fill="rgb(210,181,1)" fg:x="961" fg:w="1"/><text x="76.6411%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="76.4706%" y="693" width="0.0795%" height="15" fill="rgb(211,66,1)" fg:x="962" fg:w="1"/><text x="76.7206%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4706%" y="677" width="0.0795%" height="15" fill="rgb(221,90,14)" fg:x="962" fg:w="1"/><text x="76.7206%" y="687.50"></text></g><g><title>engine::session::should_force_rollback (2 samples, 0.16%)</title><rect x="76.5501%" y="677" width="0.1590%" height="15" fill="rgb(219,222,44)" fg:x="963" fg:w="2"/><text x="76.8001%" y="687.50"></text></g><g><title>std::env::_var (2 samples, 0.16%)</title><rect x="76.5501%" y="661" width="0.1590%" height="15" fill="rgb(246,34,33)" fg:x="963" fg:w="2"/><text x="76.8001%" y="671.50"></text></g><g><title>std::env::var_os (2 samples, 0.16%)</title><rect x="76.5501%" y="645" width="0.1590%" height="15" fill="rgb(227,135,41)" fg:x="963" fg:w="2"/><text x="76.8001%" y="655.50"></text></g><g><title>std::env::_var_os (2 samples, 0.16%)</title><rect x="76.5501%" y="629" width="0.1590%" height="15" fill="rgb(226,15,14)" fg:x="963" fg:w="2"/><text x="76.8001%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (2 samples, 0.16%)</title><rect x="76.5501%" y="613" width="0.1590%" height="15" fill="rgb(236,148,47)" fg:x="963" fg:w="2"/><text x="76.8001%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="76.5501%" y="597" width="0.1590%" height="15" fill="rgb(233,162,52)" fg:x="963" fg:w="2"/><text x="76.8001%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (2 samples, 0.16%)</title><rect x="76.5501%" y="581" width="0.1590%" height="15" fill="rgb(244,35,28)" fg:x="963" fg:w="2"/><text x="76.8001%" y="591.50"></text></g><g><title>getenv (2 samples, 0.16%)</title><rect x="76.5501%" y="565" width="0.1590%" height="15" fill="rgb(205,121,10)" fg:x="963" fg:w="2"/><text x="76.8001%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.7886%" y="581" width="0.0795%" height="15" fill="rgb(250,58,18)" fg:x="966" fg:w="1"/><text x="77.0386%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.0270%" y="565" width="0.1590%" height="15" fill="rgb(216,37,13)" fg:x="969" fg:w="2"/><text x="77.2770%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1065%" y="549" width="0.0795%" height="15" fill="rgb(221,215,42)" fg:x="970" fg:w="1"/><text x="77.3565%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.1860%" y="517" width="0.0795%" height="15" fill="rgb(217,214,19)" fg:x="971" fg:w="1"/><text x="77.4360%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1860%" y="501" width="0.0795%" height="15" fill="rgb(233,139,13)" fg:x="971" fg:w="1"/><text x="77.4360%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2655%" y="517" width="0.0795%" height="15" fill="rgb(247,168,23)" fg:x="972" fg:w="1"/><text x="77.5155%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.2655%" y="501" width="0.0795%" height="15" fill="rgb(207,202,1)" fg:x="972" fg:w="1"/><text x="77.5155%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2655%" y="485" width="0.0795%" height="15" fill="rgb(220,155,48)" fg:x="972" fg:w="1"/><text x="77.5155%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="77.1860%" y="549" width="0.2385%" height="15" fill="rgb(250,43,26)" fg:x="971" fg:w="3"/><text x="77.4360%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.1860%" y="533" width="0.2385%" height="15" fill="rgb(212,190,23)" fg:x="971" fg:w="3"/><text x="77.4360%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.3450%" y="517" width="0.0795%" height="15" fill="rgb(216,39,24)" fg:x="973" fg:w="1"/><text x="77.5950%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.3450%" y="501" width="0.0795%" height="15" fill="rgb(252,113,16)" fg:x="973" fg:w="1"/><text x="77.5950%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.4245%" y="533" width="0.0795%" height="15" fill="rgb(208,113,19)" fg:x="974" fg:w="1"/><text x="77.6745%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.4245%" y="517" width="0.0795%" height="15" fill="rgb(234,107,25)" fg:x="974" fg:w="1"/><text x="77.6745%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5040%" y="533" width="0.0795%" height="15" fill="rgb(234,217,51)" fg:x="975" fg:w="1"/><text x="77.7540%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5040%" y="517" width="0.0795%" height="15" fill="rgb(251,29,42)" fg:x="975" fg:w="1"/><text x="77.7540%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.5040%" y="501" width="0.0795%" height="15" fill="rgb(221,62,51)" fg:x="975" fg:w="1"/><text x="77.7540%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="77.5040%" y="485" width="0.0795%" height="15" fill="rgb(240,192,43)" fg:x="975" fg:w="1"/><text x="77.7540%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="77.1860%" y="565" width="0.4769%" height="15" fill="rgb(224,157,47)" fg:x="971" fg:w="6"/><text x="77.4360%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.4245%" y="549" width="0.2385%" height="15" fill="rgb(226,84,45)" fg:x="974" fg:w="3"/><text x="77.6745%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5835%" y="533" width="0.0795%" height="15" fill="rgb(208,207,23)" fg:x="976" fg:w="1"/><text x="77.8335%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.5835%" y="517" width="0.0795%" height="15" fill="rgb(253,34,51)" fg:x="976" fg:w="1"/><text x="77.8335%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.5835%" y="501" width="0.0795%" height="15" fill="rgb(227,26,34)" fg:x="976" fg:w="1"/><text x="77.8335%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.95%)</title><rect x="76.7886%" y="597" width="0.9539%" height="15" fill="rgb(245,75,19)" fg:x="966" fg:w="12"/><text x="77.0386%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.87%)</title><rect x="76.8680%" y="581" width="0.8744%" height="15" fill="rgb(250,191,31)" fg:x="967" fg:w="11"/><text x="77.1180%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.6630%" y="565" width="0.0795%" height="15" fill="rgb(224,11,50)" fg:x="977" fg:w="1"/><text x="77.9130%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.6630%" y="549" width="0.0795%" height="15" fill="rgb(231,171,7)" fg:x="977" fg:w="1"/><text x="77.9130%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.6630%" y="533" width="0.0795%" height="15" fill="rgb(252,214,10)" fg:x="977" fg:w="1"/><text x="77.9130%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.8219%" y="565" width="0.0795%" height="15" fill="rgb(249,45,46)" fg:x="979" fg:w="1"/><text x="78.0719%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.7424%" y="597" width="0.2385%" height="15" fill="rgb(240,173,7)" fg:x="978" fg:w="3"/><text x="77.9924%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="77.7424%" y="581" width="0.2385%" height="15" fill="rgb(235,214,13)" fg:x="978" fg:w="3"/><text x="77.9924%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.9014%" y="565" width="0.0795%" height="15" fill="rgb(245,156,8)" fg:x="980" fg:w="1"/><text x="78.1514%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.9014%" y="549" width="0.0795%" height="15" fill="rgb(235,46,12)" fg:x="980" fg:w="1"/><text x="78.1514%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.9014%" y="533" width="0.0795%" height="15" fill="rgb(221,81,14)" fg:x="980" fg:w="1"/><text x="78.1514%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="77.9809%" y="581" width="0.0795%" height="15" fill="rgb(238,207,9)" fg:x="981" fg:w="1"/><text x="78.2309%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="77.9809%" y="565" width="0.0795%" height="15" fill="rgb(224,129,35)" fg:x="981" fg:w="1"/><text x="78.2309%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.9809%" y="549" width="0.0795%" height="15" fill="rgb(243,218,34)" fg:x="981" fg:w="1"/><text x="78.2309%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9809%" y="533" width="0.0795%" height="15" fill="rgb(220,166,13)" fg:x="981" fg:w="1"/><text x="78.2309%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.9809%" y="517" width="0.0795%" height="15" fill="rgb(227,167,49)" fg:x="981" fg:w="1"/><text x="78.2309%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0604%" y="549" width="0.0795%" height="15" fill="rgb(234,142,12)" fg:x="982" fg:w="1"/><text x="78.3104%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1399%" y="549" width="0.0795%" height="15" fill="rgb(207,100,48)" fg:x="983" fg:w="1"/><text x="78.3899%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.1399%" y="533" width="0.0795%" height="15" fill="rgb(210,25,14)" fg:x="983" fg:w="1"/><text x="78.3899%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1399%" y="517" width="0.0795%" height="15" fill="rgb(246,116,27)" fg:x="983" fg:w="1"/><text x="78.3899%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1399%" y="501" width="0.0795%" height="15" fill="rgb(214,193,42)" fg:x="983" fg:w="1"/><text x="78.3899%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2194%" y="549" width="0.0795%" height="15" fill="rgb(214,122,8)" fg:x="984" fg:w="1"/><text x="78.4694%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="78.2194%" y="533" width="0.0795%" height="15" fill="rgb(244,173,18)" fg:x="984" fg:w="1"/><text x="78.4694%" y="543.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.91%)</title><rect x="76.4706%" y="709" width="1.9078%" height="15" fill="rgb(232,68,19)" fg:x="962" fg:w="24"/><text x="76.7206%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (23 samples, 1.83%)</title><rect x="76.5501%" y="693" width="1.8283%" height="15" fill="rgb(236,224,1)" fg:x="963" fg:w="23"/><text x="76.8001%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (21 samples, 1.67%)</title><rect x="76.7091%" y="677" width="1.6693%" height="15" fill="rgb(240,11,8)" fg:x="965" fg:w="21"/><text x="76.9591%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.67%)</title><rect x="76.7091%" y="661" width="1.6693%" height="15" fill="rgb(244,159,20)" fg:x="965" fg:w="21"/><text x="76.9591%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.67%)</title><rect x="76.7091%" y="645" width="1.6693%" height="15" fill="rgb(240,223,54)" fg:x="965" fg:w="21"/><text x="76.9591%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.67%)</title><rect x="76.7091%" y="629" width="1.6693%" height="15" fill="rgb(237,146,5)" fg:x="965" fg:w="21"/><text x="76.9591%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.59%)</title><rect x="76.7886%" y="613" width="1.5898%" height="15" fill="rgb(218,221,32)" fg:x="966" fg:w="20"/><text x="77.0386%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="77.9809%" y="597" width="0.3975%" height="15" fill="rgb(244,96,26)" fg:x="981" fg:w="5"/><text x="78.2309%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="78.0604%" y="581" width="0.3180%" height="15" fill="rgb(245,184,37)" fg:x="982" fg:w="4"/><text x="78.3104%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="78.0604%" y="565" width="0.3180%" height="15" fill="rgb(248,91,47)" fg:x="982" fg:w="4"/><text x="78.3104%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.2989%" y="549" width="0.0795%" height="15" fill="rgb(243,199,8)" fg:x="985" fg:w="1"/><text x="78.5489%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.2989%" y="533" width="0.0795%" height="15" fill="rgb(249,12,15)" fg:x="985" fg:w="1"/><text x="78.5489%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.2989%" y="517" width="0.0795%" height="15" fill="rgb(245,97,12)" fg:x="985" fg:w="1"/><text x="78.5489%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2989%" y="501" width="0.0795%" height="15" fill="rgb(244,61,1)" fg:x="985" fg:w="1"/><text x="78.5489%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.2989%" y="485" width="0.0795%" height="15" fill="rgb(222,194,10)" fg:x="985" fg:w="1"/><text x="78.5489%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2989%" y="469" width="0.0795%" height="15" fill="rgb(226,178,8)" fg:x="985" fg:w="1"/><text x="78.5489%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2989%" y="453" width="0.0795%" height="15" fill="rgb(241,32,34)" fg:x="985" fg:w="1"/><text x="78.5489%" y="463.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.3784%" y="693" width="0.0795%" height="15" fill="rgb(254,26,6)" fg:x="986" fg:w="1"/><text x="78.6284%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.3784%" y="677" width="0.0795%" height="15" fill="rgb(249,71,11)" fg:x="986" fg:w="1"/><text x="78.6284%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3784%" y="661" width="0.0795%" height="15" fill="rgb(232,170,27)" fg:x="986" fg:w="1"/><text x="78.6284%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3784%" y="645" width="0.0795%" height="15" fill="rgb(214,223,17)" fg:x="986" fg:w="1"/><text x="78.6284%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.3784%" y="629" width="0.0795%" height="15" fill="rgb(250,18,15)" fg:x="986" fg:w="1"/><text x="78.6284%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3784%" y="613" width="0.0795%" height="15" fill="rgb(212,153,51)" fg:x="986" fg:w="1"/><text x="78.6284%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.3784%" y="597" width="0.0795%" height="15" fill="rgb(219,194,12)" fg:x="986" fg:w="1"/><text x="78.6284%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.3784%" y="581" width="0.0795%" height="15" fill="rgb(212,58,17)" fg:x="986" fg:w="1"/><text x="78.6284%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="78.4579%" y="693" width="0.0795%" height="15" fill="rgb(254,5,10)" fg:x="987" fg:w="1"/><text x="78.7079%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.4579%" y="677" width="0.0795%" height="15" fill="rgb(246,91,7)" fg:x="987" fg:w="1"/><text x="78.7079%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="78.4579%" y="661" width="0.0795%" height="15" fill="rgb(218,108,49)" fg:x="987" fg:w="1"/><text x="78.7079%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4579%" y="645" width="0.0795%" height="15" fill="rgb(238,123,20)" fg:x="987" fg:w="1"/><text x="78.7079%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.4579%" y="629" width="0.0795%" height="15" fill="rgb(231,69,23)" fg:x="987" fg:w="1"/><text x="78.7079%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="78.3784%" y="709" width="0.2385%" height="15" fill="rgb(230,209,3)" fg:x="986" fg:w="3"/><text x="78.6284%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.5374%" y="693" width="0.0795%" height="15" fill="rgb(231,19,0)" fg:x="988" fg:w="1"/><text x="78.7874%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.5374%" y="677" width="0.0795%" height="15" fill="rgb(226,192,25)" fg:x="988" fg:w="1"/><text x="78.7874%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.5374%" y="661" width="0.0795%" height="15" fill="rgb(223,175,53)" fg:x="988" fg:w="1"/><text x="78.7874%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.5374%" y="645" width="0.0795%" height="15" fill="rgb(248,35,51)" fg:x="988" fg:w="1"/><text x="78.7874%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.5374%" y="629" width="0.0795%" height="15" fill="rgb(230,37,26)" fg:x="988" fg:w="1"/><text x="78.7874%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.5374%" y="613" width="0.0795%" height="15" fill="rgb(206,120,22)" fg:x="988" fg:w="1"/><text x="78.7874%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.5374%" y="597" width="0.0795%" height="15" fill="rgb(207,165,28)" fg:x="988" fg:w="1"/><text x="78.7874%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.5374%" y="581" width="0.0795%" height="15" fill="rgb(226,23,46)" fg:x="988" fg:w="1"/><text x="78.7874%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.5374%" y="565" width="0.0795%" height="15" fill="rgb(208,130,44)" fg:x="988" fg:w="1"/><text x="78.7874%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.5374%" y="549" width="0.0795%" height="15" fill="rgb(231,67,8)" fg:x="988" fg:w="1"/><text x="78.7874%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.5374%" y="533" width="0.0795%" height="15" fill="rgb(205,183,22)" fg:x="988" fg:w="1"/><text x="78.7874%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.5374%" y="517" width="0.0795%" height="15" fill="rgb(224,47,9)" fg:x="988" fg:w="1"/><text x="78.7874%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.5374%" y="501" width="0.0795%" height="15" fill="rgb(250,183,49)" fg:x="988" fg:w="1"/><text x="78.7874%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.5374%" y="485" width="0.0795%" height="15" fill="rgb(220,151,39)" fg:x="988" fg:w="1"/><text x="78.7874%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.5374%" y="469" width="0.0795%" height="15" fill="rgb(220,118,20)" fg:x="988" fg:w="1"/><text x="78.7874%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5374%" y="453" width="0.0795%" height="15" fill="rgb(231,65,51)" fg:x="988" fg:w="1"/><text x="78.7874%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="78.6169%" y="709" width="0.0795%" height="15" fill="rgb(253,125,37)" fg:x="989" fg:w="1"/><text x="78.8669%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="78.6169%" y="693" width="0.0795%" height="15" fill="rgb(232,102,6)" fg:x="989" fg:w="1"/><text x="78.8669%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="78.6169%" y="677" width="0.0795%" height="15" fill="rgb(251,105,13)" fg:x="989" fg:w="1"/><text x="78.8669%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="78.6169%" y="661" width="0.0795%" height="15" fill="rgb(222,179,29)" fg:x="989" fg:w="1"/><text x="78.8669%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.6169%" y="645" width="0.0795%" height="15" fill="rgb(229,180,53)" fg:x="989" fg:w="1"/><text x="78.8669%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6169%" y="629" width="0.0795%" height="15" fill="rgb(238,104,13)" fg:x="989" fg:w="1"/><text x="78.8669%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6169%" y="613" width="0.0795%" height="15" fill="rgb(210,130,5)" fg:x="989" fg:w="1"/><text x="78.8669%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="78.6169%" y="597" width="0.0795%" height="15" fill="rgb(233,87,49)" fg:x="989" fg:w="1"/><text x="78.8669%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.6963%" y="645" width="0.0795%" height="15" fill="rgb(243,34,9)" fg:x="990" fg:w="1"/><text x="78.9463%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.6963%" y="629" width="0.0795%" height="15" fill="rgb(235,225,10)" fg:x="990" fg:w="1"/><text x="78.9463%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.6963%" y="613" width="0.0795%" height="15" fill="rgb(212,0,30)" fg:x="990" fg:w="1"/><text x="78.9463%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.6963%" y="597" width="0.0795%" height="15" fill="rgb(211,177,0)" fg:x="990" fg:w="1"/><text x="78.9463%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.6963%" y="581" width="0.0795%" height="15" fill="rgb(225,220,11)" fg:x="990" fg:w="1"/><text x="78.9463%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.6963%" y="565" width="0.0795%" height="15" fill="rgb(215,10,13)" fg:x="990" fg:w="1"/><text x="78.9463%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.6963%" y="549" width="0.0795%" height="15" fill="rgb(240,177,14)" fg:x="990" fg:w="1"/><text x="78.9463%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.6963%" y="533" width="0.0795%" height="15" fill="rgb(243,7,39)" fg:x="990" fg:w="1"/><text x="78.9463%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.6963%" y="517" width="0.0795%" height="15" fill="rgb(212,99,0)" fg:x="990" fg:w="1"/><text x="78.9463%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="78.6963%" y="677" width="0.1590%" height="15" fill="rgb(225,162,48)" fg:x="990" fg:w="2"/><text x="78.9463%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="78.6963%" y="661" width="0.1590%" height="15" fill="rgb(246,16,25)" fg:x="990" fg:w="2"/><text x="78.9463%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="78.7758%" y="645" width="0.0795%" height="15" fill="rgb(220,150,2)" fg:x="991" fg:w="1"/><text x="79.0258%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.7758%" y="629" width="0.0795%" height="15" fill="rgb(237,113,11)" fg:x="991" fg:w="1"/><text x="79.0258%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.7758%" y="613" width="0.0795%" height="15" fill="rgb(236,70,20)" fg:x="991" fg:w="1"/><text x="79.0258%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7758%" y="597" width="0.0795%" height="15" fill="rgb(234,94,7)" fg:x="991" fg:w="1"/><text x="79.0258%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.7758%" y="581" width="0.0795%" height="15" fill="rgb(250,221,0)" fg:x="991" fg:w="1"/><text x="79.0258%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7758%" y="565" width="0.0795%" height="15" fill="rgb(245,149,46)" fg:x="991" fg:w="1"/><text x="79.0258%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.7758%" y="549" width="0.0795%" height="15" fill="rgb(215,37,27)" fg:x="991" fg:w="1"/><text x="79.0258%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.7758%" y="533" width="0.0795%" height="15" fill="rgb(232,65,3)" fg:x="991" fg:w="1"/><text x="79.0258%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="78.6963%" y="709" width="0.2385%" height="15" fill="rgb(214,2,16)" fg:x="990" fg:w="3"/><text x="78.9463%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="78.6963%" y="693" width="0.2385%" height="15" fill="rgb(227,131,50)" fg:x="990" fg:w="3"/><text x="78.9463%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="78.8553%" y="677" width="0.0795%" height="15" fill="rgb(247,131,45)" fg:x="992" fg:w="1"/><text x="79.1053%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.8553%" y="661" width="0.0795%" height="15" fill="rgb(215,97,47)" fg:x="992" fg:w="1"/><text x="79.1053%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="78.9348%" y="693" width="0.1590%" height="15" fill="rgb(233,143,12)" fg:x="993" fg:w="2"/><text x="79.1848%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0143%" y="677" width="0.0795%" height="15" fill="rgb(222,57,17)" fg:x="994" fg:w="1"/><text x="79.2643%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0143%" y="661" width="0.0795%" height="15" fill="rgb(214,119,38)" fg:x="994" fg:w="1"/><text x="79.2643%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0143%" y="645" width="0.0795%" height="15" fill="rgb(217,28,47)" fg:x="994" fg:w="1"/><text x="79.2643%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (36 samples, 2.86%)</title><rect x="76.3116%" y="725" width="2.8617%" height="15" fill="rgb(231,14,52)" fg:x="960" fg:w="36"/><text x="76.5616%" y="735.50">pl..</text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="78.9348%" y="709" width="0.2385%" height="15" fill="rgb(220,158,18)" fg:x="993" fg:w="3"/><text x="79.1848%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="79.0938%" y="693" width="0.0795%" height="15" fill="rgb(222,143,46)" fg:x="995" fg:w="1"/><text x="79.3438%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="79.1733%" y="693" width="0.0795%" height="15" fill="rgb(227,165,5)" fg:x="996" fg:w="1"/><text x="79.4233%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="79.1733%" y="677" width="0.0795%" height="15" fill="rgb(216,222,49)" fg:x="996" fg:w="1"/><text x="79.4233%" y="687.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="79.1733%" y="661" width="0.0795%" height="15" fill="rgb(238,73,39)" fg:x="996" fg:w="1"/><text x="79.4233%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1733%" y="645" width="0.0795%" height="15" fill="rgb(252,115,9)" fg:x="996" fg:w="1"/><text x="79.4233%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="79.1733%" y="725" width="0.1590%" height="15" fill="rgb(238,202,4)" fg:x="996" fg:w="2"/><text x="79.4233%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="79.1733%" y="709" width="0.1590%" height="15" fill="rgb(252,153,44)" fg:x="996" fg:w="2"/><text x="79.4233%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="79.2528%" y="693" width="0.0795%" height="15" fill="rgb(235,128,27)" fg:x="997" fg:w="1"/><text x="79.5028%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="79.2528%" y="677" width="0.0795%" height="15" fill="rgb(221,121,47)" fg:x="997" fg:w="1"/><text x="79.5028%" y="687.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="79.2528%" y="661" width="0.0795%" height="15" fill="rgb(247,211,47)" fg:x="997" fg:w="1"/><text x="79.5028%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="79.2528%" y="645" width="0.0795%" height="15" fill="rgb(252,47,49)" fg:x="997" fg:w="1"/><text x="79.5028%" y="655.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="79.3323%" y="709" width="0.0795%" height="15" fill="rgb(219,119,53)" fg:x="998" fg:w="1"/><text x="79.5823%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="79.3323%" y="693" width="0.0795%" height="15" fill="rgb(243,165,53)" fg:x="998" fg:w="1"/><text x="79.5823%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="79.3323%" y="677" width="0.0795%" height="15" fill="rgb(230,12,35)" fg:x="998" fg:w="1"/><text x="79.5823%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.4118%" y="677" width="0.0795%" height="15" fill="rgb(239,57,49)" fg:x="999" fg:w="1"/><text x="79.6618%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="79.4118%" y="661" width="0.0795%" height="15" fill="rgb(231,154,7)" fg:x="999" fg:w="1"/><text x="79.6618%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4118%" y="645" width="0.0795%" height="15" fill="rgb(248,81,34)" fg:x="999" fg:w="1"/><text x="79.6618%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="79.4118%" y="629" width="0.0795%" height="15" fill="rgb(247,9,5)" fg:x="999" fg:w="1"/><text x="79.6618%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4118%" y="613" width="0.0795%" height="15" fill="rgb(228,172,27)" fg:x="999" fg:w="1"/><text x="79.6618%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4118%" y="597" width="0.0795%" height="15" fill="rgb(230,57,44)" fg:x="999" fg:w="1"/><text x="79.6618%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (73 samples, 5.80%)</title><rect x="73.7679%" y="741" width="5.8029%" height="15" fill="rgb(249,35,22)" fg:x="928" fg:w="73"/><text x="74.0179%" y="751.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="79.3323%" y="725" width="0.2385%" height="15" fill="rgb(250,137,27)" fg:x="998" fg:w="3"/><text x="79.5823%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="79.4118%" y="709" width="0.1590%" height="15" fill="rgb(251,57,31)" fg:x="999" fg:w="2"/><text x="79.6618%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="79.4118%" y="693" width="0.1590%" height="15" fill="rgb(238,60,0)" fg:x="999" fg:w="2"/><text x="79.6618%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="79.4913%" y="677" width="0.0795%" height="15" fill="rgb(242,185,39)" fg:x="1000" fg:w="1"/><text x="79.7413%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4913%" y="661" width="0.0795%" height="15" fill="rgb(240,63,43)" fg:x="1000" fg:w="1"/><text x="79.7413%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="79.5707%" y="741" width="0.0795%" height="15" fill="rgb(236,155,6)" fg:x="1001" fg:w="1"/><text x="79.8207%" y="751.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="79.6502%" y="725" width="0.0795%" height="15" fill="rgb(215,11,29)" fg:x="1002" fg:w="1"/><text x="79.9002%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6502%" y="709" width="0.0795%" height="15" fill="rgb(228,180,48)" fg:x="1002" fg:w="1"/><text x="79.9002%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6502%" y="693" width="0.0795%" height="15" fill="rgb(241,102,12)" fg:x="1002" fg:w="1"/><text x="79.9002%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="79.7297%" y="725" width="0.0795%" height="15" fill="rgb(246,213,4)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="79.7297%" y="709" width="0.0795%" height="15" fill="rgb(218,134,35)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="79.7297%" y="693" width="0.0795%" height="15" fill="rgb(251,117,35)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="79.7297%" y="677" width="0.0795%" height="15" fill="rgb(206,156,45)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="79.7297%" y="661" width="0.0795%" height="15" fill="rgb(218,52,27)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="79.7297%" y="645" width="0.0795%" height="15" fill="rgb(238,83,36)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="79.7297%" y="629" width="0.0795%" height="15" fill="rgb(218,53,43)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="639.50"></text></g><g><title>std::sys::unix::os::env_read_lock (1 samples, 0.08%)</title><rect x="79.7297%" y="613" width="0.0795%" height="15" fill="rgb(239,54,39)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="623.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.08%)</title><rect x="79.7297%" y="597" width="0.0795%" height="15" fill="rgb(212,198,13)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (1 samples, 0.08%)</title><rect x="79.7297%" y="581" width="0.0795%" height="15" fill="rgb(234,54,46)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (1 samples, 0.08%)</title><rect x="79.7297%" y="565" width="0.0795%" height="15" fill="rgb(217,120,7)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1 samples, 0.08%)</title><rect x="79.7297%" y="549" width="0.0795%" height="15" fill="rgb(246,39,15)" fg:x="1003" fg:w="1"/><text x="79.9797%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.8092%" y="693" width="0.0795%" height="15" fill="rgb(242,143,31)" fg:x="1004" fg:w="1"/><text x="80.0592%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.8092%" y="677" width="0.0795%" height="15" fill="rgb(252,60,24)" fg:x="1004" fg:w="1"/><text x="80.0592%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.8092%" y="661" width="0.0795%" height="15" fill="rgb(249,220,7)" fg:x="1004" fg:w="1"/><text x="80.0592%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.8092%" y="645" width="0.0795%" height="15" fill="rgb(236,67,13)" fg:x="1004" fg:w="1"/><text x="80.0592%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.8887%" y="693" width="0.0795%" height="15" fill="rgb(210,62,39)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="79.8887%" y="677" width="0.0795%" height="15" fill="rgb(219,122,53)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="79.8887%" y="661" width="0.0795%" height="15" fill="rgb(218,87,25)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8887%" y="645" width="0.0795%" height="15" fill="rgb(234,179,48)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8887%" y="629" width="0.0795%" height="15" fill="rgb(248,90,0)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.8887%" y="613" width="0.0795%" height="15" fill="rgb(207,228,37)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.8887%" y="597" width="0.0795%" height="15" fill="rgb(235,214,15)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.8887%" y="581" width="0.0795%" height="15" fill="rgb(210,144,39)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8887%" y="565" width="0.0795%" height="15" fill="rgb(222,67,41)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8887%" y="549" width="0.0795%" height="15" fill="rgb(205,35,37)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.8887%" y="533" width="0.0795%" height="15" fill="rgb(216,125,40)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.8887%" y="517" width="0.0795%" height="15" fill="rgb(228,227,20)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.8887%" y="501" width="0.0795%" height="15" fill="rgb(242,173,45)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.8887%" y="485" width="0.0795%" height="15" fill="rgb(215,79,24)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8887%" y="469" width="0.0795%" height="15" fill="rgb(238,164,38)" fg:x="1005" fg:w="1"/><text x="80.1387%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.9682%" y="629" width="0.0795%" height="15" fill="rgb(245,196,38)" fg:x="1006" fg:w="1"/><text x="80.2182%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.9682%" y="613" width="0.0795%" height="15" fill="rgb(231,217,29)" fg:x="1006" fg:w="1"/><text x="80.2182%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9682%" y="597" width="0.0795%" height="15" fill="rgb(245,6,4)" fg:x="1006" fg:w="1"/><text x="80.2182%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.9682%" y="581" width="0.0795%" height="15" fill="rgb(214,76,49)" fg:x="1006" fg:w="1"/><text x="80.2182%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.9682%" y="565" width="0.0795%" height="15" fill="rgb(205,96,12)" fg:x="1006" fg:w="1"/><text x="80.2182%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.9682%" y="549" width="0.0795%" height="15" fill="rgb(243,131,4)" fg:x="1006" fg:w="1"/><text x="80.2182%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.9682%" y="533" width="0.0795%" height="15" fill="rgb(214,114,4)" fg:x="1006" fg:w="1"/><text x="80.2182%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.9682%" y="517" width="0.0795%" height="15" fill="rgb(234,215,15)" fg:x="1006" fg:w="1"/><text x="80.2182%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.2067%" y="581" width="0.0795%" height="15" fill="rgb(250,216,45)" fg:x="1009" fg:w="1"/><text x="80.4567%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.2067%" y="565" width="0.0795%" height="15" fill="rgb(236,128,4)" fg:x="1009" fg:w="1"/><text x="80.4567%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.2067%" y="549" width="0.0795%" height="15" fill="rgb(234,50,33)" fg:x="1009" fg:w="1"/><text x="80.4567%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.2067%" y="533" width="0.0795%" height="15" fill="rgb(253,131,37)" fg:x="1009" fg:w="1"/><text x="80.4567%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.2067%" y="517" width="0.0795%" height="15" fill="rgb(218,55,27)" fg:x="1009" fg:w="1"/><text x="80.4567%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.2067%" y="501" width="0.0795%" height="15" fill="rgb(241,220,28)" fg:x="1009" fg:w="1"/><text x="80.4567%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.2067%" y="485" width="0.0795%" height="15" fill="rgb(241,90,48)" fg:x="1009" fg:w="1"/><text x="80.4567%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.2862%" y="581" width="0.0795%" height="15" fill="rgb(216,43,37)" fg:x="1010" fg:w="1"/><text x="80.5362%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.2862%" y="565" width="0.0795%" height="15" fill="rgb(207,173,9)" fg:x="1010" fg:w="1"/><text x="80.5362%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.2862%" y="549" width="0.0795%" height="15" fill="rgb(240,126,30)" fg:x="1010" fg:w="1"/><text x="80.5362%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.2862%" y="533" width="0.0795%" height="15" fill="rgb(228,178,53)" fg:x="1010" fg:w="1"/><text x="80.5362%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="80.1272%" y="597" width="0.3180%" height="15" fill="rgb(217,33,4)" fg:x="1008" fg:w="4"/><text x="80.3772%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.3657%" y="581" width="0.0795%" height="15" fill="rgb(206,124,34)" fg:x="1011" fg:w="1"/><text x="80.6157%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="79.9682%" y="645" width="0.5564%" height="15" fill="rgb(208,122,53)" fg:x="1006" fg:w="7"/><text x="80.2182%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="80.0477%" y="629" width="0.4769%" height="15" fill="rgb(215,202,26)" fg:x="1007" fg:w="6"/><text x="80.2977%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="80.0477%" y="613" width="0.4769%" height="15" fill="rgb(232,198,31)" fg:x="1007" fg:w="6"/><text x="80.2977%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.4452%" y="597" width="0.0795%" height="15" fill="rgb(222,23,35)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.4452%" y="581" width="0.0795%" height="15" fill="rgb(242,27,53)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.4452%" y="565" width="0.0795%" height="15" fill="rgb(210,216,42)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.5246%" y="613" width="0.0795%" height="15" fill="rgb(234,39,38)" fg:x="1013" fg:w="1"/><text x="80.7746%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.6041%" y="597" width="0.0795%" height="15" fill="rgb(235,126,54)" fg:x="1014" fg:w="1"/><text x="80.8541%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.6836%" y="597" width="0.0795%" height="15" fill="rgb(235,150,33)" fg:x="1015" fg:w="1"/><text x="80.9336%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="80.5246%" y="645" width="0.3180%" height="15" fill="rgb(249,49,53)" fg:x="1013" fg:w="4"/><text x="80.7746%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="80.5246%" y="629" width="0.3180%" height="15" fill="rgb(238,60,50)" fg:x="1013" fg:w="4"/><text x="80.7746%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="80.6041%" y="613" width="0.2385%" height="15" fill="rgb(210,5,2)" fg:x="1014" fg:w="3"/><text x="80.8541%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7631%" y="597" width="0.0795%" height="15" fill="rgb(214,207,24)" fg:x="1016" fg:w="1"/><text x="81.0131%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7631%" y="581" width="0.0795%" height="15" fill="rgb(228,173,2)" fg:x="1016" fg:w="1"/><text x="81.0131%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7631%" y="565" width="0.0795%" height="15" fill="rgb(244,26,8)" fg:x="1016" fg:w="1"/><text x="81.0131%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7631%" y="549" width="0.0795%" height="15" fill="rgb(249,153,35)" fg:x="1016" fg:w="1"/><text x="81.0131%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="81.0016%" y="581" width="0.1590%" height="15" fill="rgb(221,215,40)" fg:x="1019" fg:w="2"/><text x="81.2516%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="81.2401%" y="533" width="0.1590%" height="15" fill="rgb(238,106,35)" fg:x="1022" fg:w="2"/><text x="81.4901%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="81.3990%" y="533" width="0.0795%" height="15" fill="rgb(207,195,21)" fg:x="1024" fg:w="1"/><text x="81.6490%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="81.3990%" y="517" width="0.0795%" height="15" fill="rgb(205,43,29)" fg:x="1024" fg:w="1"/><text x="81.6490%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.3990%" y="501" width="0.0795%" height="15" fill="rgb(236,35,21)" fg:x="1024" fg:w="1"/><text x="81.6490%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.3990%" y="485" width="0.0795%" height="15" fill="rgb(244,74,8)" fg:x="1024" fg:w="1"/><text x="81.6490%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4785%" y="517" width="0.0795%" height="15" fill="rgb(241,229,7)" fg:x="1025" fg:w="1"/><text x="81.7285%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="80.8426%" y="613" width="0.7949%" height="15" fill="rgb(212,223,25)" fg:x="1017" fg:w="10"/><text x="81.0926%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.79%)</title><rect x="80.8426%" y="597" width="0.7949%" height="15" fill="rgb(234,58,53)" fg:x="1017" fg:w="10"/><text x="81.0926%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="81.1606%" y="581" width="0.4769%" height="15" fill="rgb(244,36,1)" fg:x="1021" fg:w="6"/><text x="81.4106%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="81.1606%" y="565" width="0.4769%" height="15" fill="rgb(222,40,54)" fg:x="1021" fg:w="6"/><text x="81.4106%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="81.2401%" y="549" width="0.3975%" height="15" fill="rgb(210,207,39)" fg:x="1022" fg:w="5"/><text x="81.4901%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="81.4785%" y="533" width="0.1590%" height="15" fill="rgb(234,52,14)" fg:x="1025" fg:w="2"/><text x="81.7285%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.5580%" y="517" width="0.0795%" height="15" fill="rgb(239,108,46)" fg:x="1026" fg:w="1"/><text x="81.8080%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="81.6375%" y="597" width="0.0795%" height="15" fill="rgb(252,223,5)" fg:x="1027" fg:w="1"/><text x="81.8875%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="81.6375%" y="581" width="0.0795%" height="15" fill="rgb(227,181,11)" fg:x="1027" fg:w="1"/><text x="81.8875%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="81.6375%" y="565" width="0.0795%" height="15" fill="rgb(248,126,40)" fg:x="1027" fg:w="1"/><text x="81.8875%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="81.6375%" y="549" width="0.0795%" height="15" fill="rgb(243,1,18)" fg:x="1027" fg:w="1"/><text x="81.8875%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="81.6375%" y="533" width="0.0795%" height="15" fill="rgb(214,145,23)" fg:x="1027" fg:w="1"/><text x="81.8875%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.6375%" y="517" width="0.0795%" height="15" fill="rgb(241,218,11)" fg:x="1027" fg:w="1"/><text x="81.8875%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (12 samples, 0.95%)</title><rect x="80.8426%" y="629" width="0.9539%" height="15" fill="rgb(214,219,24)" fg:x="1017" fg:w="12"/><text x="81.0926%" y="639.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="81.6375%" y="613" width="0.1590%" height="15" fill="rgb(235,32,7)" fg:x="1027" fg:w="2"/><text x="81.8875%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.7170%" y="597" width="0.0795%" height="15" fill="rgb(227,121,28)" fg:x="1028" fg:w="1"/><text x="81.9670%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.7170%" y="581" width="0.0795%" height="15" fill="rgb(216,129,49)" fg:x="1028" fg:w="1"/><text x="81.9670%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7170%" y="565" width="0.0795%" height="15" fill="rgb(207,194,50)" fg:x="1028" fg:w="1"/><text x="81.9670%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.9555%" y="565" width="0.0795%" height="15" fill="rgb(207,4,18)" fg:x="1031" fg:w="1"/><text x="82.2055%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="82.1145%" y="453" width="0.0795%" height="15" fill="rgb(213,50,30)" fg:x="1033" fg:w="1"/><text x="82.3645%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="82.0350%" y="549" width="0.2385%" height="15" fill="rgb(208,77,22)" fg:x="1032" fg:w="3"/><text x="82.2850%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="82.0350%" y="533" width="0.2385%" height="15" fill="rgb(244,204,34)" fg:x="1032" fg:w="3"/><text x="82.2850%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.1145%" y="517" width="0.1590%" height="15" fill="rgb(230,20,17)" fg:x="1033" fg:w="2"/><text x="82.3645%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.1145%" y="501" width="0.1590%" height="15" fill="rgb(237,83,15)" fg:x="1033" fg:w="2"/><text x="82.3645%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.1145%" y="485" width="0.1590%" height="15" fill="rgb(221,109,25)" fg:x="1033" fg:w="2"/><text x="82.3645%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.1145%" y="469" width="0.1590%" height="15" fill="rgb(205,194,52)" fg:x="1033" fg:w="2"/><text x="82.3645%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.1940%" y="453" width="0.0795%" height="15" fill="rgb(244,173,54)" fg:x="1034" fg:w="1"/><text x="82.4440%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.1940%" y="437" width="0.0795%" height="15" fill="rgb(227,181,18)" fg:x="1034" fg:w="1"/><text x="82.4440%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.1940%" y="421" width="0.0795%" height="15" fill="rgb(238,36,30)" fg:x="1034" fg:w="1"/><text x="82.4440%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.3529%" y="533" width="0.0795%" height="15" fill="rgb(254,85,0)" fg:x="1036" fg:w="1"/><text x="82.6029%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="81.9555%" y="581" width="0.5564%" height="15" fill="rgb(247,63,33)" fg:x="1031" fg:w="7"/><text x="82.2055%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="82.0350%" y="565" width="0.4769%" height="15" fill="rgb(220,7,54)" fg:x="1032" fg:w="6"/><text x="82.2850%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="82.2734%" y="549" width="0.2385%" height="15" fill="rgb(238,227,21)" fg:x="1035" fg:w="3"/><text x="82.5234%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.4324%" y="533" width="0.0795%" height="15" fill="rgb(237,29,31)" fg:x="1037" fg:w="1"/><text x="82.6824%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.4324%" y="517" width="0.0795%" height="15" fill="rgb(211,21,50)" fg:x="1037" fg:w="1"/><text x="82.6824%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.4324%" y="501" width="0.0795%" height="15" fill="rgb(239,119,2)" fg:x="1037" fg:w="1"/><text x="82.6824%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4324%" y="485" width="0.0795%" height="15" fill="rgb(250,2,39)" fg:x="1037" fg:w="1"/><text x="82.6824%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4324%" y="469" width="0.0795%" height="15" fill="rgb(244,46,53)" fg:x="1037" fg:w="1"/><text x="82.6824%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4324%" y="453" width="0.0795%" height="15" fill="rgb(209,21,19)" fg:x="1037" fg:w="1"/><text x="82.6824%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.79%)</title><rect x="81.7965%" y="629" width="0.7949%" height="15" fill="rgb(236,145,4)" fg:x="1029" fg:w="10"/><text x="82.0465%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="81.8760%" y="613" width="0.7154%" height="15" fill="rgb(220,133,36)" fg:x="1030" fg:w="9"/><text x="82.1260%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="81.9555%" y="597" width="0.6359%" height="15" fill="rgb(244,18,3)" fg:x="1031" fg:w="8"/><text x="82.2055%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.5119%" y="581" width="0.0795%" height="15" fill="rgb(232,171,48)" fg:x="1038" fg:w="1"/><text x="82.7619%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.5119%" y="565" width="0.0795%" height="15" fill="rgb(223,223,53)" fg:x="1038" fg:w="1"/><text x="82.7619%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5119%" y="549" width="0.0795%" height="15" fill="rgb(246,92,13)" fg:x="1038" fg:w="1"/><text x="82.7619%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.7504%" y="437" width="0.0795%" height="15" fill="rgb(229,171,10)" fg:x="1041" fg:w="1"/><text x="83.0004%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7504%" y="421" width="0.0795%" height="15" fill="rgb(213,131,26)" fg:x="1041" fg:w="1"/><text x="83.0004%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="82.7504%" y="501" width="0.3180%" height="15" fill="rgb(242,87,54)" fg:x="1041" fg:w="4"/><text x="83.0004%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="82.7504%" y="485" width="0.3180%" height="15" fill="rgb(237,21,35)" fg:x="1041" fg:w="4"/><text x="83.0004%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="82.7504%" y="469" width="0.3180%" height="15" fill="rgb(253,13,47)" fg:x="1041" fg:w="4"/><text x="83.0004%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="82.7504%" y="453" width="0.3180%" height="15" fill="rgb(215,122,49)" fg:x="1041" fg:w="4"/><text x="83.0004%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="82.8299%" y="437" width="0.2385%" height="15" fill="rgb(209,179,30)" fg:x="1042" fg:w="3"/><text x="83.0799%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="82.9094%" y="421" width="0.1590%" height="15" fill="rgb(235,100,24)" fg:x="1043" fg:w="2"/><text x="83.1594%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="82.6709%" y="533" width="0.4769%" height="15" fill="rgb(209,67,24)" fg:x="1040" fg:w="6"/><text x="82.9209%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="82.6709%" y="517" width="0.4769%" height="15" fill="rgb(206,74,32)" fg:x="1040" fg:w="6"/><text x="82.9209%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.0684%" y="501" width="0.0795%" height="15" fill="rgb(212,45,25)" fg:x="1045" fg:w="1"/><text x="83.3184%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.0684%" y="485" width="0.0795%" height="15" fill="rgb(239,26,3)" fg:x="1045" fg:w="1"/><text x="83.3184%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="82.6709%" y="549" width="0.6359%" height="15" fill="rgb(218,36,15)" fg:x="1040" fg:w="8"/><text x="82.9209%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="83.1479%" y="533" width="0.1590%" height="15" fill="rgb(206,108,24)" fg:x="1046" fg:w="2"/><text x="83.3979%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="83.1479%" y="517" width="0.1590%" height="15" fill="rgb(234,204,42)" fg:x="1046" fg:w="2"/><text x="83.3979%" y="527.50"></text></g><g><title>engine::session::Session::close (47 samples, 3.74%)</title><rect x="79.6502%" y="741" width="3.7361%" height="15" fill="rgb(229,2,11)" fg:x="1002" fg:w="47"/><text x="79.9002%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (45 samples, 3.58%)</title><rect x="79.8092%" y="725" width="3.5771%" height="15" fill="rgb(221,20,48)" fg:x="1004" fg:w="45"/><text x="80.0592%" y="735.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (45 samples, 3.58%)</title><rect x="79.8092%" y="709" width="3.5771%" height="15" fill="rgb(244,164,10)" fg:x="1004" fg:w="45"/><text x="80.0592%" y="719.50">engi..</text></g><g><title>core::iter::adapters::try_process (43 samples, 3.42%)</title><rect x="79.9682%" y="693" width="3.4181%" height="15" fill="rgb(243,229,2)" fg:x="1006" fg:w="43"/><text x="80.2182%" y="703.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 3.42%)</title><rect x="79.9682%" y="677" width="3.4181%" height="15" fill="rgb(232,131,37)" fg:x="1006" fg:w="43"/><text x="80.2182%" y="687.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (43 samples, 3.42%)</title><rect x="79.9682%" y="661" width="3.4181%" height="15" fill="rgb(217,156,11)" fg:x="1006" fg:w="43"/><text x="80.2182%" y="671.50">eng..</text></g><g><title>kernel::model::any_entity_changes (32 samples, 2.54%)</title><rect x="80.8426%" y="645" width="2.5437%" height="15" fill="rgb(239,99,48)" fg:x="1017" fg:w="32"/><text x="81.0926%" y="655.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.79%)</title><rect x="82.5914%" y="629" width="0.7949%" height="15" fill="rgb(231,209,9)" fg:x="1039" fg:w="10"/><text x="82.8414%" y="639.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.79%)</title><rect x="82.5914%" y="613" width="0.7949%" height="15" fill="rgb(254,97,27)" fg:x="1039" fg:w="10"/><text x="82.8414%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.79%)</title><rect x="82.5914%" y="597" width="0.7949%" height="15" fill="rgb(223,151,38)" fg:x="1039" fg:w="10"/><text x="82.8414%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="82.6709%" y="581" width="0.7154%" height="15" fill="rgb(219,206,35)" fg:x="1040" fg:w="9"/><text x="82.9209%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="82.6709%" y="565" width="0.7154%" height="15" fill="rgb(216,130,31)" fg:x="1040" fg:w="9"/><text x="82.9209%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3068%" y="549" width="0.0795%" height="15" fill="rgb(251,97,34)" fg:x="1048" fg:w="1"/><text x="83.5568%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="83.4658%" y="709" width="0.0795%" height="15" fill="rgb(246,159,47)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.4658%" y="693" width="0.0795%" height="15" fill="rgb(232,87,10)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.4658%" y="677" width="0.0795%" height="15" fill="rgb(249,1,37)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.4658%" y="661" width="0.0795%" height="15" fill="rgb(239,135,14)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.4658%" y="645" width="0.0795%" height="15" fill="rgb(253,116,46)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.4658%" y="629" width="0.0795%" height="15" fill="rgb(222,217,37)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.4658%" y="613" width="0.0795%" height="15" fill="rgb(252,96,8)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.4658%" y="597" width="0.0795%" height="15" fill="rgb(254,103,41)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.4658%" y="581" width="0.0795%" height="15" fill="rgb(218,213,19)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.4658%" y="565" width="0.0795%" height="15" fill="rgb(253,95,21)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.4658%" y="549" width="0.0795%" height="15" fill="rgb(229,26,28)" fg:x="1050" fg:w="1"/><text x="83.7158%" y="559.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="83.5453%" y="709" width="0.0795%" height="15" fill="rgb(230,129,16)" fg:x="1051" fg:w="1"/><text x="83.7953%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="83.5453%" y="693" width="0.0795%" height="15" fill="rgb(236,126,17)" fg:x="1051" fg:w="1"/><text x="83.7953%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="83.6248%" y="693" width="0.0795%" height="15" fill="rgb(209,33,33)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="83.6248%" y="677" width="0.0795%" height="15" fill="rgb(227,85,29)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="83.6248%" y="661" width="0.0795%" height="15" fill="rgb(241,53,46)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="83.6248%" y="645" width="0.0795%" height="15" fill="rgb(228,167,53)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.6248%" y="629" width="0.0795%" height="15" fill="rgb(238,195,45)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="83.6248%" y="613" width="0.0795%" height="15" fill="rgb(252,124,45)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="83.6248%" y="597" width="0.0795%" height="15" fill="rgb(251,38,35)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="83.6248%" y="581" width="0.0795%" height="15" fill="rgb(227,33,2)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="83.6248%" y="565" width="0.0795%" height="15" fill="rgb(223,157,46)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="575.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="83.6248%" y="549" width="0.0795%" height="15" fill="rgb(222,78,41)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="83.6248%" y="533" width="0.0795%" height="15" fill="rgb(248,176,11)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="83.6248%" y="517" width="0.0795%" height="15" fill="rgb(241,221,18)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="83.6248%" y="501" width="0.0795%" height="15" fill="rgb(218,85,22)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="83.6248%" y="485" width="0.0795%" height="15" fill="rgb(222,223,7)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.6248%" y="469" width="0.0795%" height="15" fill="rgb(254,59,39)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.6248%" y="453" width="0.0795%" height="15" fill="rgb(247,100,27)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="83.6248%" y="437" width="0.0795%" height="15" fill="rgb(237,207,10)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="83.6248%" y="421" width="0.0795%" height="15" fill="rgb(220,121,28)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="83.6248%" y="405" width="0.0795%" height="15" fill="rgb(213,223,20)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="83.6248%" y="389" width="0.0795%" height="15" fill="rgb(205,121,27)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="83.6248%" y="373" width="0.0795%" height="15" fill="rgb(253,24,53)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="83.6248%" y="357" width="0.0795%" height="15" fill="rgb(224,224,47)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.6248%" y="341" width="0.0795%" height="15" fill="rgb(250,125,36)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="83.6248%" y="325" width="0.0795%" height="15" fill="rgb(240,144,38)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.6248%" y="309" width="0.0795%" height="15" fill="rgb(250,15,50)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="83.6248%" y="293" width="0.0795%" height="15" fill="rgb(210,24,26)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="83.6248%" y="277" width="0.0795%" height="15" fill="rgb(234,53,53)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="83.6248%" y="261" width="0.0795%" height="15" fill="rgb(208,108,28)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.6248%" y="245" width="0.0795%" height="15" fill="rgb(227,143,7)" fg:x="1052" fg:w="1"/><text x="83.8748%" y="255.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="83.7043%" y="677" width="0.0795%" height="15" fill="rgb(238,189,38)" fg:x="1053" fg:w="1"/><text x="83.9543%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="83.7043%" y="661" width="0.0795%" height="15" fill="rgb(222,69,15)" fg:x="1053" fg:w="1"/><text x="83.9543%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="83.7043%" y="645" width="0.0795%" height="15" fill="rgb(213,169,7)" fg:x="1053" fg:w="1"/><text x="83.9543%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="83.7043%" y="629" width="0.0795%" height="15" fill="rgb(251,219,4)" fg:x="1053" fg:w="1"/><text x="83.9543%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="83.7043%" y="613" width="0.0795%" height="15" fill="rgb(241,55,40)" fg:x="1053" fg:w="1"/><text x="83.9543%" y="623.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="83.7043%" y="597" width="0.0795%" height="15" fill="rgb(243,57,30)" fg:x="1053" fg:w="1"/><text x="83.9543%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.7838%" y="565" width="0.0795%" height="15" fill="rgb(234,50,30)" fg:x="1054" fg:w="1"/><text x="84.0338%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.7838%" y="549" width="0.0795%" height="15" fill="rgb(239,23,42)" fg:x="1054" fg:w="1"/><text x="84.0338%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.7838%" y="533" width="0.0795%" height="15" fill="rgb(217,38,19)" fg:x="1054" fg:w="1"/><text x="84.0338%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.7838%" y="517" width="0.0795%" height="15" fill="rgb(215,179,16)" fg:x="1054" fg:w="1"/><text x="84.0338%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.7838%" y="501" width="0.0795%" height="15" fill="rgb(254,21,37)" fg:x="1054" fg:w="1"/><text x="84.0338%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.7838%" y="485" width="0.0795%" height="15" fill="rgb(219,207,48)" fg:x="1054" fg:w="1"/><text x="84.0338%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="83.8633%" y="501" width="0.1590%" height="15" fill="rgb(227,225,41)" fg:x="1055" fg:w="2"/><text x="84.1133%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="83.8633%" y="485" width="0.1590%" height="15" fill="rgb(223,130,1)" fg:x="1055" fg:w="2"/><text x="84.1133%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.8633%" y="469" width="0.1590%" height="15" fill="rgb(249,54,42)" fg:x="1055" fg:w="2"/><text x="84.1133%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="83.8633%" y="453" width="0.1590%" height="15" fill="rgb(248,69,25)" fg:x="1055" fg:w="2"/><text x="84.1133%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9428%" y="437" width="0.0795%" height="15" fill="rgb(234,21,32)" fg:x="1056" fg:w="1"/><text x="84.1928%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.9428%" y="421" width="0.0795%" height="15" fill="rgb(252,136,6)" fg:x="1056" fg:w="1"/><text x="84.1928%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="83.9428%" y="405" width="0.0795%" height="15" fill="rgb(245,87,12)" fg:x="1056" fg:w="1"/><text x="84.1928%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.9428%" y="389" width="0.0795%" height="15" fill="rgb(208,12,15)" fg:x="1056" fg:w="1"/><text x="84.1928%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.9428%" y="373" width="0.0795%" height="15" fill="rgb(250,98,2)" fg:x="1056" fg:w="1"/><text x="84.1928%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.1017%" y="357" width="0.0795%" height="15" fill="rgb(205,213,15)" fg:x="1058" fg:w="1"/><text x="84.3517%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.1017%" y="341" width="0.0795%" height="15" fill="rgb(248,192,44)" fg:x="1058" fg:w="1"/><text x="84.3517%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.1017%" y="325" width="0.0795%" height="15" fill="rgb(221,89,17)" fg:x="1058" fg:w="1"/><text x="84.3517%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.1017%" y="309" width="0.0795%" height="15" fill="rgb(209,55,3)" fg:x="1058" fg:w="1"/><text x="84.3517%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.1017%" y="293" width="0.0795%" height="15" fill="rgb(247,23,45)" fg:x="1058" fg:w="1"/><text x="84.3517%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1017%" y="277" width="0.0795%" height="15" fill="rgb(235,152,23)" fg:x="1058" fg:w="1"/><text x="84.3517%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.1017%" y="373" width="0.1590%" height="15" fill="rgb(244,63,13)" fg:x="1058" fg:w="2"/><text x="84.3517%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.1812%" y="357" width="0.0795%" height="15" fill="rgb(227,30,37)" fg:x="1059" fg:w="1"/><text x="84.4312%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.1812%" y="341" width="0.0795%" height="15" fill="rgb(224,49,42)" fg:x="1059" fg:w="1"/><text x="84.4312%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.1812%" y="325" width="0.0795%" height="15" fill="rgb(218,129,5)" fg:x="1059" fg:w="1"/><text x="84.4312%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.1812%" y="309" width="0.0795%" height="15" fill="rgb(240,199,54)" fg:x="1059" fg:w="1"/><text x="84.4312%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.56%)</title><rect x="83.7838%" y="597" width="0.5564%" height="15" fill="rgb(234,31,13)" fg:x="1054" fg:w="7"/><text x="84.0338%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (7 samples, 0.56%)</title><rect x="83.7838%" y="581" width="0.5564%" height="15" fill="rgb(219,73,54)" fg:x="1054" fg:w="7"/><text x="84.0338%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="83.8633%" y="565" width="0.4769%" height="15" fill="rgb(251,162,10)" fg:x="1055" fg:w="6"/><text x="84.1133%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="83.8633%" y="549" width="0.4769%" height="15" fill="rgb(240,138,47)" fg:x="1055" fg:w="6"/><text x="84.1133%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="83.8633%" y="533" width="0.4769%" height="15" fill="rgb(216,138,26)" fg:x="1055" fg:w="6"/><text x="84.1133%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="83.8633%" y="517" width="0.4769%" height="15" fill="rgb(243,17,35)" fg:x="1055" fg:w="6"/><text x="84.1133%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="84.0223%" y="501" width="0.3180%" height="15" fill="rgb(241,60,18)" fg:x="1057" fg:w="4"/><text x="84.2723%" y="511.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="84.0223%" y="485" width="0.3180%" height="15" fill="rgb(234,2,44)" fg:x="1057" fg:w="4"/><text x="84.2723%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.0223%" y="469" width="0.3180%" height="15" fill="rgb(225,225,33)" fg:x="1057" fg:w="4"/><text x="84.2723%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="84.0223%" y="453" width="0.3180%" height="15" fill="rgb(234,50,31)" fg:x="1057" fg:w="4"/><text x="84.2723%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.0223%" y="437" width="0.3180%" height="15" fill="rgb(249,6,25)" fg:x="1057" fg:w="4"/><text x="84.2723%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="84.0223%" y="421" width="0.3180%" height="15" fill="rgb(241,5,17)" fg:x="1057" fg:w="4"/><text x="84.2723%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.0223%" y="405" width="0.3180%" height="15" fill="rgb(207,116,10)" fg:x="1057" fg:w="4"/><text x="84.2723%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="84.1017%" y="389" width="0.2385%" height="15" fill="rgb(222,128,18)" fg:x="1058" fg:w="3"/><text x="84.3517%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.2607%" y="373" width="0.0795%" height="15" fill="rgb(229,109,25)" fg:x="1060" fg:w="1"/><text x="84.5107%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.2607%" y="357" width="0.0795%" height="15" fill="rgb(222,102,25)" fg:x="1060" fg:w="1"/><text x="84.5107%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2607%" y="341" width="0.0795%" height="15" fill="rgb(239,211,5)" fg:x="1060" fg:w="1"/><text x="84.5107%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.3402%" y="437" width="0.0795%" height="15" fill="rgb(223,136,26)" fg:x="1061" fg:w="1"/><text x="84.5902%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4197%" y="357" width="0.0795%" height="15" fill="rgb(227,30,15)" fg:x="1062" fg:w="1"/><text x="84.6697%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="84.4992%" y="341" width="0.0795%" height="15" fill="rgb(247,76,4)" fg:x="1063" fg:w="1"/><text x="84.7492%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="84.4992%" y="357" width="0.1590%" height="15" fill="rgb(245,38,48)" fg:x="1063" fg:w="2"/><text x="84.7492%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.5787%" y="341" width="0.0795%" height="15" fill="rgb(210,220,14)" fg:x="1064" fg:w="1"/><text x="84.8287%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.5787%" y="325" width="0.0795%" height="15" fill="rgb(224,60,51)" fg:x="1064" fg:w="1"/><text x="84.8287%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="84.6582%" y="341" width="0.0795%" height="15" fill="rgb(212,133,49)" fg:x="1065" fg:w="1"/><text x="84.9082%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6582%" y="325" width="0.0795%" height="15" fill="rgb(231,39,22)" fg:x="1065" fg:w="1"/><text x="84.9082%" y="335.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (6 samples, 0.48%)</title><rect x="84.4197%" y="421" width="0.4769%" height="15" fill="rgb(236,173,22)" fg:x="1062" fg:w="6"/><text x="84.6697%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.48%)</title><rect x="84.4197%" y="405" width="0.4769%" height="15" fill="rgb(210,70,0)" fg:x="1062" fg:w="6"/><text x="84.6697%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (6 samples, 0.48%)</title><rect x="84.4197%" y="389" width="0.4769%" height="15" fill="rgb(215,170,11)" fg:x="1062" fg:w="6"/><text x="84.6697%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="84.4197%" y="373" width="0.4769%" height="15" fill="rgb(220,154,28)" fg:x="1062" fg:w="6"/><text x="84.6697%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="84.6582%" y="357" width="0.2385%" height="15" fill="rgb(240,160,41)" fg:x="1065" fg:w="3"/><text x="84.9082%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="84.7377%" y="341" width="0.1590%" height="15" fill="rgb(243,215,41)" fg:x="1066" fg:w="2"/><text x="84.9877%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="84.7377%" y="325" width="0.1590%" height="15" fill="rgb(214,208,31)" fg:x="1066" fg:w="2"/><text x="84.9877%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.8172%" y="309" width="0.0795%" height="15" fill="rgb(247,57,22)" fg:x="1067" fg:w="1"/><text x="85.0672%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.8172%" y="293" width="0.0795%" height="15" fill="rgb(228,73,52)" fg:x="1067" fg:w="1"/><text x="85.0672%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.8967%" y="389" width="0.0795%" height="15" fill="rgb(252,60,9)" fg:x="1068" fg:w="1"/><text x="85.1467%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.9762%" y="357" width="0.0795%" height="15" fill="rgb(233,9,51)" fg:x="1069" fg:w="1"/><text x="85.2262%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.9762%" y="341" width="0.0795%" height="15" fill="rgb(223,67,14)" fg:x="1069" fg:w="1"/><text x="85.2262%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="84.9762%" y="389" width="0.2385%" height="15" fill="rgb(222,86,2)" fg:x="1069" fg:w="3"/><text x="85.2262%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="84.9762%" y="373" width="0.2385%" height="15" fill="rgb(243,58,54)" fg:x="1069" fg:w="3"/><text x="85.2262%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.0556%" y="357" width="0.1590%" height="15" fill="rgb(210,200,39)" fg:x="1070" fg:w="2"/><text x="85.3056%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.0556%" y="341" width="0.1590%" height="15" fill="rgb(238,135,9)" fg:x="1070" fg:w="2"/><text x="85.3056%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="85.0556%" y="325" width="0.1590%" height="15" fill="rgb(232,179,7)" fg:x="1070" fg:w="2"/><text x="85.3056%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.0556%" y="309" width="0.1590%" height="15" fill="rgb(245,65,41)" fg:x="1070" fg:w="2"/><text x="85.3056%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.0556%" y="293" width="0.1590%" height="15" fill="rgb(227,43,8)" fg:x="1070" fg:w="2"/><text x="85.3056%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.0556%" y="277" width="0.1590%" height="15" fill="rgb(235,91,14)" fg:x="1070" fg:w="2"/><text x="85.3056%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.1351%" y="261" width="0.0795%" height="15" fill="rgb(235,219,31)" fg:x="1071" fg:w="1"/><text x="85.3851%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.2146%" y="389" width="0.0795%" height="15" fill="rgb(227,121,25)" fg:x="1072" fg:w="1"/><text x="85.4646%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="85.2146%" y="373" width="0.0795%" height="15" fill="rgb(254,129,24)" fg:x="1072" fg:w="1"/><text x="85.4646%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2146%" y="357" width="0.0795%" height="15" fill="rgb(226,144,49)" fg:x="1072" fg:w="1"/><text x="85.4646%" y="367.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="85.2941%" y="389" width="0.0795%" height="15" fill="rgb(214,187,32)" fg:x="1073" fg:w="1"/><text x="85.5441%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="85.2941%" y="373" width="0.0795%" height="15" fill="rgb(243,129,46)" fg:x="1073" fg:w="1"/><text x="85.5441%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3736%" y="373" width="0.0795%" height="15" fill="rgb(221,185,35)" fg:x="1074" fg:w="1"/><text x="85.6236%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.4531%" y="341" width="0.0795%" height="15" fill="rgb(205,0,32)" fg:x="1075" fg:w="1"/><text x="85.7031%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="85.3736%" y="389" width="0.3180%" height="15" fill="rgb(229,179,12)" fg:x="1074" fg:w="4"/><text x="85.6236%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="85.4531%" y="373" width="0.2385%" height="15" fill="rgb(252,107,19)" fg:x="1075" fg:w="3"/><text x="85.7031%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="85.4531%" y="357" width="0.2385%" height="15" fill="rgb(220,95,27)" fg:x="1075" fg:w="3"/><text x="85.7031%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="85.5326%" y="341" width="0.1590%" height="15" fill="rgb(240,113,40)" fg:x="1076" fg:w="2"/><text x="85.7826%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.5326%" y="325" width="0.1590%" height="15" fill="rgb(208,4,43)" fg:x="1076" fg:w="2"/><text x="85.7826%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.6121%" y="309" width="0.0795%" height="15" fill="rgb(247,189,30)" fg:x="1077" fg:w="1"/><text x="85.8621%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.6121%" y="293" width="0.0795%" height="15" fill="rgb(231,157,17)" fg:x="1077" fg:w="1"/><text x="85.8621%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.7711%" y="341" width="0.0795%" height="15" fill="rgb(224,139,6)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.7711%" y="325" width="0.0795%" height="15" fill="rgb(223,83,16)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.7711%" y="309" width="0.0795%" height="15" fill="rgb(232,211,20)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.7711%" y="293" width="0.0795%" height="15" fill="rgb(225,203,35)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.7711%" y="277" width="0.0795%" height="15" fill="rgb(215,211,44)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.7711%" y="261" width="0.0795%" height="15" fill="rgb(248,213,26)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.7711%" y="245" width="0.0795%" height="15" fill="rgb(214,23,52)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.7711%" y="229" width="0.0795%" height="15" fill="rgb(225,173,50)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.7711%" y="213" width="0.0795%" height="15" fill="rgb(206,150,22)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.7711%" y="197" width="0.0795%" height="15" fill="rgb(239,64,23)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.7711%" y="181" width="0.0795%" height="15" fill="rgb(242,50,38)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.7711%" y="165" width="0.0795%" height="15" fill="rgb(217,91,15)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.7711%" y="149" width="0.0795%" height="15" fill="rgb(230,172,6)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7711%" y="133" width="0.0795%" height="15" fill="rgb(221,98,26)" fg:x="1079" fg:w="1"/><text x="86.0211%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.0095%" y="245" width="0.0795%" height="15" fill="rgb(227,210,45)" fg:x="1082" fg:w="1"/><text x="86.2595%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.0095%" y="229" width="0.0795%" height="15" fill="rgb(206,8,30)" fg:x="1082" fg:w="1"/><text x="86.2595%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (6 samples, 0.48%)</title><rect x="85.6916%" y="389" width="0.4769%" height="15" fill="rgb(241,219,17)" fg:x="1078" fg:w="6"/><text x="85.9416%" y="399.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (6 samples, 0.48%)</title><rect x="85.6916%" y="373" width="0.4769%" height="15" fill="rgb(247,121,29)" fg:x="1078" fg:w="6"/><text x="85.9416%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="85.6916%" y="357" width="0.4769%" height="15" fill="rgb(219,169,49)" fg:x="1078" fg:w="6"/><text x="85.9416%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="85.8506%" y="341" width="0.3180%" height="15" fill="rgb(253,49,49)" fg:x="1080" fg:w="4"/><text x="86.1006%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="85.8506%" y="325" width="0.3180%" height="15" fill="rgb(217,178,3)" fg:x="1080" fg:w="4"/><text x="86.1006%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="85.9300%" y="309" width="0.2385%" height="15" fill="rgb(234,73,37)" fg:x="1081" fg:w="3"/><text x="86.1800%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="85.9300%" y="293" width="0.2385%" height="15" fill="rgb(250,98,22)" fg:x="1081" fg:w="3"/><text x="86.1800%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="86.0095%" y="277" width="0.1590%" height="15" fill="rgb(220,108,37)" fg:x="1082" fg:w="2"/><text x="86.2595%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.0095%" y="261" width="0.1590%" height="15" fill="rgb(225,168,10)" fg:x="1082" fg:w="2"/><text x="86.2595%" y="271.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="86.0890%" y="245" width="0.0795%" height="15" fill="rgb(247,215,21)" fg:x="1083" fg:w="1"/><text x="86.3390%" y="255.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="86.1685%" y="389" width="0.0795%" height="15" fill="rgb(253,189,31)" fg:x="1084" fg:w="1"/><text x="86.4185%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="86.2480%" y="245" width="0.0795%" height="15" fill="rgb(241,54,22)" fg:x="1085" fg:w="1"/><text x="86.4980%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="86.2480%" y="309" width="0.1590%" height="15" fill="rgb(211,87,4)" fg:x="1085" fg:w="2"/><text x="86.4980%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="86.2480%" y="293" width="0.1590%" height="15" fill="rgb(245,112,24)" fg:x="1085" fg:w="2"/><text x="86.4980%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="86.2480%" y="277" width="0.1590%" height="15" fill="rgb(235,190,41)" fg:x="1085" fg:w="2"/><text x="86.4980%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="86.2480%" y="261" width="0.1590%" height="15" fill="rgb(214,89,8)" fg:x="1085" fg:w="2"/><text x="86.4980%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="86.3275%" y="245" width="0.0795%" height="15" fill="rgb(249,155,35)" fg:x="1086" fg:w="1"/><text x="86.5775%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="86.3275%" y="229" width="0.0795%" height="15" fill="rgb(249,88,26)" fg:x="1086" fg:w="1"/><text x="86.5775%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4865%" y="245" width="0.0795%" height="15" fill="rgb(232,56,8)" fg:x="1088" fg:w="1"/><text x="86.7365%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="86.5660%" y="245" width="0.5564%" height="15" fill="rgb(240,95,3)" fg:x="1089" fg:w="7"/><text x="86.8160%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="86.6455%" y="229" width="0.4769%" height="15" fill="rgb(222,44,28)" fg:x="1090" fg:w="6"/><text x="86.8955%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.9634%" y="213" width="0.1590%" height="15" fill="rgb(234,16,30)" fg:x="1094" fg:w="2"/><text x="87.2134%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.1224%" y="245" width="0.0795%" height="15" fill="rgb(223,26,17)" fg:x="1096" fg:w="1"/><text x="87.3724%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.1224%" y="229" width="0.0795%" height="15" fill="rgb(239,187,47)" fg:x="1096" fg:w="1"/><text x="87.3724%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="87.1224%" y="213" width="0.0795%" height="15" fill="rgb(247,102,50)" fg:x="1096" fg:w="1"/><text x="87.3724%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.1224%" y="197" width="0.0795%" height="15" fill="rgb(231,216,22)" fg:x="1096" fg:w="1"/><text x="87.3724%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.1224%" y="181" width="0.0795%" height="15" fill="rgb(216,201,26)" fg:x="1096" fg:w="1"/><text x="87.3724%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.1224%" y="165" width="0.0795%" height="15" fill="rgb(214,186,23)" fg:x="1096" fg:w="1"/><text x="87.3724%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1224%" y="149" width="0.0795%" height="15" fill="rgb(235,184,4)" fg:x="1096" fg:w="1"/><text x="87.3724%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="87.2019%" y="181" width="0.0795%" height="15" fill="rgb(244,46,17)" fg:x="1097" fg:w="1"/><text x="87.4519%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.2814%" y="181" width="0.0795%" height="15" fill="rgb(248,74,46)" fg:x="1098" fg:w="1"/><text x="87.5314%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="87.3609%" y="181" width="0.0795%" height="15" fill="rgb(243,79,5)" fg:x="1099" fg:w="1"/><text x="87.6109%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="87.3609%" y="165" width="0.0795%" height="15" fill="rgb(213,148,1)" fg:x="1099" fg:w="1"/><text x="87.6109%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="87.3609%" y="149" width="0.0795%" height="15" fill="rgb(221,30,0)" fg:x="1099" fg:w="1"/><text x="87.6109%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (24 samples, 1.91%)</title><rect x="87.4404%" y="181" width="1.9078%" height="15" fill="rgb(207,85,29)" fg:x="1100" fg:w="24"/><text x="87.6904%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (24 samples, 1.91%)</title><rect x="87.4404%" y="165" width="1.9078%" height="15" fill="rgb(239,31,46)" fg:x="1100" fg:w="24"/><text x="87.6904%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 1.91%)</title><rect x="87.4404%" y="149" width="1.9078%" height="15" fill="rgb(219,6,1)" fg:x="1100" fg:w="24"/><text x="87.6904%" y="159.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.31%)</title><rect x="87.2019%" y="229" width="2.3052%" height="15" fill="rgb(229,90,29)" fg:x="1097" fg:w="29"/><text x="87.4519%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.31%)</title><rect x="87.2019%" y="213" width="2.3052%" height="15" fill="rgb(242,201,42)" fg:x="1097" fg:w="29"/><text x="87.4519%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.31%)</title><rect x="87.2019%" y="197" width="2.3052%" height="15" fill="rgb(243,80,54)" fg:x="1097" fg:w="29"/><text x="87.4519%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="89.3482%" y="181" width="0.1590%" height="15" fill="rgb(223,166,15)" fg:x="1124" fg:w="2"/><text x="89.5982%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="89.6661%" y="213" width="0.0795%" height="15" fill="rgb(238,78,27)" fg:x="1128" fg:w="1"/><text x="89.9161%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.6661%" y="197" width="0.0795%" height="15" fill="rgb(235,28,43)" fg:x="1128" fg:w="1"/><text x="89.9161%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.6661%" y="181" width="0.0795%" height="15" fill="rgb(240,210,28)" fg:x="1128" fg:w="1"/><text x="89.9161%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.6661%" y="165" width="0.0795%" height="15" fill="rgb(253,6,46)" fg:x="1128" fg:w="1"/><text x="89.9161%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (43 samples, 3.42%)</title><rect x="86.4070%" y="261" width="3.4181%" height="15" fill="rgb(250,159,47)" fg:x="1087" fg:w="43"/><text x="86.6570%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (33 samples, 2.62%)</title><rect x="87.2019%" y="245" width="2.6232%" height="15" fill="rgb(216,139,2)" fg:x="1097" fg:w="33"/><text x="87.4519%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="89.5072%" y="229" width="0.3180%" height="15" fill="rgb(221,124,44)" fg:x="1126" fg:w="4"/><text x="89.7572%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="89.7456%" y="213" width="0.0795%" height="15" fill="rgb(205,37,22)" fg:x="1129" fg:w="1"/><text x="89.9956%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.7456%" y="197" width="0.0795%" height="15" fill="rgb(250,55,8)" fg:x="1129" fg:w="1"/><text x="89.9956%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="89.8251%" y="213" width="0.0795%" height="15" fill="rgb(215,83,48)" fg:x="1130" fg:w="1"/><text x="90.0751%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (45 samples, 3.58%)</title><rect x="86.4070%" y="309" width="3.5771%" height="15" fill="rgb(253,2,32)" fg:x="1087" fg:w="45"/><text x="86.6570%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (45 samples, 3.58%)</title><rect x="86.4070%" y="293" width="3.5771%" height="15" fill="rgb(236,67,28)" fg:x="1087" fg:w="45"/><text x="86.6570%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (45 samples, 3.58%)</title><rect x="86.4070%" y="277" width="3.5771%" height="15" fill="rgb(252,55,15)" fg:x="1087" fg:w="45"/><text x="86.6570%" y="287.50">rege..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="89.8251%" y="261" width="0.1590%" height="15" fill="rgb(243,173,17)" fg:x="1130" fg:w="2"/><text x="90.0751%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="89.8251%" y="245" width="0.1590%" height="15" fill="rgb(215,212,13)" fg:x="1130" fg:w="2"/><text x="90.0751%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="89.8251%" y="229" width="0.1590%" height="15" fill="rgb(253,176,6)" fg:x="1130" fg:w="2"/><text x="90.0751%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="89.9046%" y="213" width="0.0795%" height="15" fill="rgb(236,105,26)" fg:x="1131" fg:w="1"/><text x="90.1546%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.9046%" y="197" width="0.0795%" height="15" fill="rgb(239,226,32)" fg:x="1131" fg:w="1"/><text x="90.1546%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.9046%" y="181" width="0.0795%" height="15" fill="rgb(236,104,51)" fg:x="1131" fg:w="1"/><text x="90.1546%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.9046%" y="165" width="0.0795%" height="15" fill="rgb(220,172,33)" fg:x="1131" fg:w="1"/><text x="90.1546%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.9841%" y="293" width="0.0795%" height="15" fill="rgb(224,182,25)" fg:x="1132" fg:w="1"/><text x="90.2341%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="89.9841%" y="309" width="0.1590%" height="15" fill="rgb(236,184,24)" fg:x="1132" fg:w="2"/><text x="90.2341%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="90.0636%" y="293" width="0.0795%" height="15" fill="rgb(241,221,14)" fg:x="1133" fg:w="1"/><text x="90.3136%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="90.0636%" y="277" width="0.0795%" height="15" fill="rgb(227,146,5)" fg:x="1133" fg:w="1"/><text x="90.3136%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="90.0636%" y="261" width="0.0795%" height="15" fill="rgb(214,15,23)" fg:x="1133" fg:w="1"/><text x="90.3136%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (50 samples, 3.97%)</title><rect x="86.2480%" y="325" width="3.9746%" height="15" fill="rgb(233,157,31)" fg:x="1085" fg:w="50"/><text x="86.4980%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="90.1431%" y="309" width="0.0795%" height="15" fill="rgb(211,27,52)" fg:x="1134" fg:w="1"/><text x="90.3931%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="90.1431%" y="293" width="0.0795%" height="15" fill="rgb(212,223,15)" fg:x="1134" fg:w="1"/><text x="90.3931%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="90.1431%" y="277" width="0.0795%" height="15" fill="rgb(254,211,0)" fg:x="1134" fg:w="1"/><text x="90.3931%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="90.1431%" y="261" width="0.0795%" height="15" fill="rgb(205,43,38)" fg:x="1134" fg:w="1"/><text x="90.3931%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="90.1431%" y="245" width="0.0795%" height="15" fill="rgb(242,206,46)" fg:x="1134" fg:w="1"/><text x="90.3931%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.1431%" y="229" width="0.0795%" height="15" fill="rgb(220,221,12)" fg:x="1134" fg:w="1"/><text x="90.3931%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="90.2226%" y="261" width="0.0795%" height="15" fill="rgb(217,156,35)" fg:x="1135" fg:w="1"/><text x="90.4726%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="90.4610%" y="245" width="0.1590%" height="15" fill="rgb(207,181,49)" fg:x="1138" fg:w="2"/><text x="90.7110%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="90.4610%" y="229" width="0.1590%" height="15" fill="rgb(235,103,47)" fg:x="1138" fg:w="2"/><text x="90.7110%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6995%" y="213" width="0.0795%" height="15" fill="rgb(222,63,28)" fg:x="1141" fg:w="1"/><text x="90.9495%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.56%)</title><rect x="90.3021%" y="261" width="0.5564%" height="15" fill="rgb(244,137,21)" fg:x="1136" fg:w="7"/><text x="90.5521%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="90.6200%" y="245" width="0.2385%" height="15" fill="rgb(228,35,27)" fg:x="1140" fg:w="3"/><text x="90.8700%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="90.6200%" y="229" width="0.2385%" height="15" fill="rgb(226,191,41)" fg:x="1140" fg:w="3"/><text x="90.8700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="90.7790%" y="213" width="0.0795%" height="15" fill="rgb(210,154,3)" fg:x="1142" fg:w="1"/><text x="91.0290%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (9 samples, 0.72%)</title><rect x="90.2226%" y="309" width="0.7154%" height="15" fill="rgb(216,60,49)" fg:x="1135" fg:w="9"/><text x="90.4726%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9 samples, 0.72%)</title><rect x="90.2226%" y="293" width="0.7154%" height="15" fill="rgb(226,17,20)" fg:x="1135" fg:w="9"/><text x="90.4726%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.72%)</title><rect x="90.2226%" y="277" width="0.7154%" height="15" fill="rgb(206,115,35)" fg:x="1135" fg:w="9"/><text x="90.4726%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="90.8585%" y="261" width="0.0795%" height="15" fill="rgb(227,88,1)" fg:x="1143" fg:w="1"/><text x="91.1085%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="90.8585%" y="245" width="0.0795%" height="15" fill="rgb(230,222,24)" fg:x="1143" fg:w="1"/><text x="91.1085%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="90.8585%" y="229" width="0.0795%" height="15" fill="rgb(214,124,32)" fg:x="1143" fg:w="1"/><text x="91.1085%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="90.8585%" y="213" width="0.0795%" height="15" fill="rgb(240,41,36)" fg:x="1143" fg:w="1"/><text x="91.1085%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="90.9380%" y="309" width="0.0795%" height="15" fill="rgb(221,17,52)" fg:x="1144" fg:w="1"/><text x="91.1880%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="90.9380%" y="293" width="0.0795%" height="15" fill="rgb(252,70,16)" fg:x="1144" fg:w="1"/><text x="91.1880%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="90.9380%" y="277" width="0.0795%" height="15" fill="rgb(250,177,4)" fg:x="1144" fg:w="1"/><text x="91.1880%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="91.0175%" y="261" width="0.0795%" height="15" fill="rgb(240,188,47)" fg:x="1145" fg:w="1"/><text x="91.2675%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.0175%" y="245" width="0.0795%" height="15" fill="rgb(215,92,12)" fg:x="1145" fg:w="1"/><text x="91.2675%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="91.0175%" y="309" width="0.1590%" height="15" fill="rgb(242,110,29)" fg:x="1145" fg:w="2"/><text x="91.2675%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="91.0175%" y="293" width="0.1590%" height="15" fill="rgb(208,211,26)" fg:x="1145" fg:w="2"/><text x="91.2675%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="91.0175%" y="277" width="0.1590%" height="15" fill="rgb(244,147,6)" fg:x="1145" fg:w="2"/><text x="91.2675%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="91.0970%" y="261" width="0.0795%" height="15" fill="rgb(211,130,42)" fg:x="1146" fg:w="1"/><text x="91.3470%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.0970%" y="245" width="0.0795%" height="15" fill="rgb(220,63,1)" fg:x="1146" fg:w="1"/><text x="91.3470%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.1765%" y="229" width="0.0795%" height="15" fill="rgb(241,212,30)" fg:x="1147" fg:w="1"/><text x="91.4265%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="91.1765%" y="213" width="0.0795%" height="15" fill="rgb(233,153,17)" fg:x="1147" fg:w="1"/><text x="91.4265%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="91.1765%" y="197" width="0.0795%" height="15" fill="rgb(236,3,10)" fg:x="1147" fg:w="1"/><text x="91.4265%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (14 samples, 1.11%)</title><rect x="90.2226%" y="325" width="1.1129%" height="15" fill="rgb(232,41,21)" fg:x="1135" fg:w="14"/><text x="90.4726%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="91.1765%" y="309" width="0.1590%" height="15" fill="rgb(206,63,51)" fg:x="1147" fg:w="2"/><text x="91.4265%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="91.1765%" y="293" width="0.1590%" height="15" fill="rgb(250,214,3)" fg:x="1147" fg:w="2"/><text x="91.4265%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="91.1765%" y="277" width="0.1590%" height="15" fill="rgb(254,89,27)" fg:x="1147" fg:w="2"/><text x="91.4265%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="91.1765%" y="261" width="0.1590%" height="15" fill="rgb(249,41,14)" fg:x="1147" fg:w="2"/><text x="91.4265%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="91.1765%" y="245" width="0.1590%" height="15" fill="rgb(221,196,51)" fg:x="1147" fg:w="2"/><text x="91.4265%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="91.2560%" y="229" width="0.0795%" height="15" fill="rgb(214,116,26)" fg:x="1148" fg:w="1"/><text x="91.5060%" y="239.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="91.3355%" y="325" width="0.0795%" height="15" fill="rgb(236,67,7)" fg:x="1149" fg:w="1"/><text x="91.5855%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.4149%" y="261" width="0.0795%" height="15" fill="rgb(253,179,32)" fg:x="1150" fg:w="1"/><text x="91.6649%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.4149%" y="245" width="0.0795%" height="15" fill="rgb(218,33,15)" fg:x="1150" fg:w="1"/><text x="91.6649%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.4149%" y="229" width="0.0795%" height="15" fill="rgb(217,202,41)" fg:x="1150" fg:w="1"/><text x="91.6649%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="91.4944%" y="261" width="0.1590%" height="15" fill="rgb(234,133,5)" fg:x="1151" fg:w="2"/><text x="91.7444%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="91.4944%" y="245" width="0.1590%" height="15" fill="rgb(240,47,40)" fg:x="1151" fg:w="2"/><text x="91.7444%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.5739%" y="229" width="0.0795%" height="15" fill="rgb(234,166,26)" fg:x="1152" fg:w="1"/><text x="91.8239%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="91.7329%" y="229" width="0.4769%" height="15" fill="rgb(244,125,51)" fg:x="1154" fg:w="6"/><text x="91.9829%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="92.0509%" y="213" width="0.1590%" height="15" fill="rgb(229,171,11)" fg:x="1158" fg:w="2"/><text x="92.3009%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="91.6534%" y="245" width="0.6359%" height="15" fill="rgb(224,38,45)" fg:x="1153" fg:w="8"/><text x="91.9034%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="92.2099%" y="229" width="0.0795%" height="15" fill="rgb(237,27,7)" fg:x="1160" fg:w="1"/><text x="92.4599%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="92.2893%" y="229" width="0.1590%" height="15" fill="rgb(216,52,7)" fg:x="1161" fg:w="2"/><text x="92.5393%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="92.2893%" y="245" width="0.2385%" height="15" fill="rgb(243,11,11)" fg:x="1161" fg:w="3"/><text x="92.5393%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="92.4483%" y="229" width="0.0795%" height="15" fill="rgb(253,167,20)" fg:x="1163" fg:w="1"/><text x="92.6983%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.5278%" y="213" width="0.0795%" height="15" fill="rgb(215,207,5)" fg:x="1164" fg:w="1"/><text x="92.7778%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="92.6073%" y="213" width="0.0795%" height="15" fill="rgb(252,127,31)" fg:x="1165" fg:w="1"/><text x="92.8573%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.6073%" y="197" width="0.0795%" height="15" fill="rgb(209,106,27)" fg:x="1165" fg:w="1"/><text x="92.8573%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.6073%" y="181" width="0.0795%" height="15" fill="rgb(214,220,18)" fg:x="1165" fg:w="1"/><text x="92.8573%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.6073%" y="165" width="0.0795%" height="15" fill="rgb(237,89,12)" fg:x="1165" fg:w="1"/><text x="92.8573%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="92.6868%" y="213" width="0.4769%" height="15" fill="rgb(209,167,36)" fg:x="1166" fg:w="6"/><text x="92.9368%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="92.8458%" y="197" width="0.3180%" height="15" fill="rgb(243,45,22)" fg:x="1168" fg:w="4"/><text x="93.0958%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.87%)</title><rect x="92.5278%" y="245" width="0.8744%" height="15" fill="rgb(239,2,46)" fg:x="1164" fg:w="11"/><text x="92.7778%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.87%)</title><rect x="92.5278%" y="229" width="0.8744%" height="15" fill="rgb(241,101,0)" fg:x="1164" fg:w="11"/><text x="92.7778%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="93.1638%" y="213" width="0.2385%" height="15" fill="rgb(244,34,31)" fg:x="1172" fg:w="3"/><text x="93.4138%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="93.1638%" y="197" width="0.2385%" height="15" fill="rgb(248,23,22)" fg:x="1172" fg:w="3"/><text x="93.4138%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="93.1638%" y="181" width="0.2385%" height="15" fill="rgb(218,27,48)" fg:x="1172" fg:w="3"/><text x="93.4138%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="93.4022%" y="197" width="0.0795%" height="15" fill="rgb(232,78,1)" fg:x="1175" fg:w="1"/><text x="93.6522%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.4022%" y="181" width="0.0795%" height="15" fill="rgb(233,169,12)" fg:x="1175" fg:w="1"/><text x="93.6522%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.4022%" y="165" width="0.0795%" height="15" fill="rgb(225,222,54)" fg:x="1175" fg:w="1"/><text x="93.6522%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.4022%" y="149" width="0.0795%" height="15" fill="rgb(245,126,29)" fg:x="1175" fg:w="1"/><text x="93.6522%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="93.7202%" y="133" width="0.1590%" height="15" fill="rgb(241,63,48)" fg:x="1179" fg:w="2"/><text x="93.9702%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.8792%" y="133" width="0.0795%" height="15" fill="rgb(235,126,38)" fg:x="1181" fg:w="1"/><text x="94.1292%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="93.9587%" y="133" width="0.2385%" height="15" fill="rgb(232,96,49)" fg:x="1182" fg:w="3"/><text x="94.2087%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.0382%" y="117" width="0.1590%" height="15" fill="rgb(211,146,40)" fg:x="1183" fg:w="2"/><text x="94.2882%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.0382%" y="101" width="0.1590%" height="15" fill="rgb(247,93,44)" fg:x="1183" fg:w="2"/><text x="94.2882%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.0382%" y="85" width="0.1590%" height="15" fill="rgb(251,41,49)" fg:x="1183" fg:w="2"/><text x="94.2882%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="94.1971%" y="133" width="0.1590%" height="15" fill="rgb(218,155,12)" fg:x="1185" fg:w="2"/><text x="94.4471%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.2766%" y="117" width="0.0795%" height="15" fill="rgb(221,161,30)" fg:x="1186" fg:w="1"/><text x="94.5266%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.2766%" y="101" width="0.0795%" height="15" fill="rgb(221,179,11)" fg:x="1186" fg:w="1"/><text x="94.5266%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.2766%" y="85" width="0.0795%" height="15" fill="rgb(224,170,48)" fg:x="1186" fg:w="1"/><text x="94.5266%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="94.3561%" y="133" width="0.2385%" height="15" fill="rgb(223,117,5)" fg:x="1187" fg:w="3"/><text x="94.6061%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="94.4356%" y="117" width="0.1590%" height="15" fill="rgb(209,52,20)" fg:x="1188" fg:w="2"/><text x="94.6856%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="94.4356%" y="101" width="0.1590%" height="15" fill="rgb(209,19,41)" fg:x="1188" fg:w="2"/><text x="94.6856%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (17 samples, 1.35%)</title><rect x="94.5946%" y="133" width="1.3514%" height="15" fill="rgb(210,177,12)" fg:x="1190" fg:w="17"/><text x="94.8446%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (17 samples, 1.35%)</title><rect x="94.5946%" y="117" width="1.3514%" height="15" fill="rgb(211,159,37)" fg:x="1190" fg:w="17"/><text x="94.8446%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.35%)</title><rect x="94.5946%" y="101" width="1.3514%" height="15" fill="rgb(209,20,2)" fg:x="1190" fg:w="17"/><text x="94.8446%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="95.9459%" y="133" width="0.3180%" height="15" fill="rgb(244,3,46)" fg:x="1207" fg:w="4"/><text x="96.1959%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1844%" y="117" width="0.0795%" height="15" fill="rgb(220,94,38)" fg:x="1210" fg:w="1"/><text x="96.4344%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="96.2639%" y="133" width="0.0795%" height="15" fill="rgb(253,14,31)" fg:x="1211" fg:w="1"/><text x="96.5139%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.02%)</title><rect x="93.4022%" y="229" width="3.0207%" height="15" fill="rgb(234,176,13)" fg:x="1175" fg:w="38"/><text x="93.6522%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.02%)</title><rect x="93.4022%" y="213" width="3.0207%" height="15" fill="rgb(218,62,25)" fg:x="1175" fg:w="38"/><text x="93.6522%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 2.94%)</title><rect x="93.4817%" y="197" width="2.9412%" height="15" fill="rgb(216,124,40)" fg:x="1176" fg:w="37"/><text x="93.7317%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 2.94%)</title><rect x="93.4817%" y="181" width="2.9412%" height="15" fill="rgb(228,170,12)" fg:x="1176" fg:w="37"/><text x="93.7317%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (37 samples, 2.94%)</title><rect x="93.4817%" y="165" width="2.9412%" height="15" fill="rgb(231,226,5)" fg:x="1176" fg:w="37"/><text x="93.7317%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 2.94%)</title><rect x="93.4817%" y="149" width="2.9412%" height="15" fill="rgb(237,122,22)" fg:x="1176" fg:w="37"/><text x="93.7317%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.3434%" y="133" width="0.0795%" height="15" fill="rgb(209,185,25)" fg:x="1212" fg:w="1"/><text x="96.5934%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5024%" y="213" width="0.0795%" height="15" fill="rgb(228,200,32)" fg:x="1214" fg:w="1"/><text x="96.7524%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5024%" y="197" width="0.0795%" height="15" fill="rgb(217,140,10)" fg:x="1214" fg:w="1"/><text x="96.7524%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5024%" y="181" width="0.0795%" height="15" fill="rgb(253,17,24)" fg:x="1214" fg:w="1"/><text x="96.7524%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (64 samples, 5.09%)</title><rect x="91.6534%" y="261" width="5.0874%" height="15" fill="rgb(212,61,6)" fg:x="1153" fg:w="64"/><text x="91.9034%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (42 samples, 3.34%)</title><rect x="93.4022%" y="245" width="3.3386%" height="15" fill="rgb(205,14,25)" fg:x="1175" fg:w="42"/><text x="93.6522%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="96.4229%" y="229" width="0.3180%" height="15" fill="rgb(232,69,41)" fg:x="1213" fg:w="4"/><text x="96.6729%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="96.5819%" y="213" width="0.1590%" height="15" fill="rgb(241,106,47)" fg:x="1215" fg:w="2"/><text x="96.8319%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6614%" y="197" width="0.0795%" height="15" fill="rgb(210,213,53)" fg:x="1216" fg:w="1"/><text x="96.9114%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6614%" y="181" width="0.0795%" height="15" fill="rgb(253,175,27)" fg:x="1216" fg:w="1"/><text x="96.9114%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.6614%" y="165" width="0.0795%" height="15" fill="rgb(211,171,24)" fg:x="1216" fg:w="1"/><text x="96.9114%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.7409%" y="213" width="0.0795%" height="15" fill="rgb(229,80,7)" fg:x="1217" fg:w="1"/><text x="96.9909%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.7409%" y="197" width="0.0795%" height="15" fill="rgb(212,46,39)" fg:x="1217" fg:w="1"/><text x="96.9909%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.7409%" y="181" width="0.0795%" height="15" fill="rgb(240,80,45)" fg:x="1217" fg:w="1"/><text x="96.9909%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.7409%" y="261" width="0.1590%" height="15" fill="rgb(253,177,40)" fg:x="1217" fg:w="2"/><text x="96.9909%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.7409%" y="245" width="0.1590%" height="15" fill="rgb(249,200,15)" fg:x="1217" fg:w="2"/><text x="96.9909%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.7409%" y="229" width="0.1590%" height="15" fill="rgb(217,78,26)" fg:x="1217" fg:w="2"/><text x="96.9909%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.8203%" y="213" width="0.0795%" height="15" fill="rgb(254,151,32)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8203%" y="197" width="0.0795%" height="15" fill="rgb(226,165,27)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8203%" y="181" width="0.0795%" height="15" fill="rgb(250,206,4)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8203%" y="165" width="0.0795%" height="15" fill="rgb(231,229,27)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="96.9793%" y="213" width="0.2385%" height="15" fill="rgb(239,217,8)" fg:x="1220" fg:w="3"/><text x="97.2293%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="97.0588%" y="197" width="0.1590%" height="15" fill="rgb(225,204,27)" fg:x="1221" fg:w="2"/><text x="97.3088%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="97.0588%" y="181" width="0.1590%" height="15" fill="rgb(230,56,32)" fg:x="1221" fg:w="2"/><text x="97.3088%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="97.0588%" y="165" width="0.1590%" height="15" fill="rgb(222,56,27)" fg:x="1221" fg:w="2"/><text x="97.3088%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="96.8998%" y="229" width="0.3975%" height="15" fill="rgb(253,108,27)" fg:x="1219" fg:w="5"/><text x="97.1498%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="97.2178%" y="213" width="0.0795%" height="15" fill="rgb(212,87,36)" fg:x="1223" fg:w="1"/><text x="97.4678%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.2178%" y="197" width="0.0795%" height="15" fill="rgb(247,82,36)" fg:x="1223" fg:w="1"/><text x="97.4678%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2178%" y="181" width="0.0795%" height="15" fill="rgb(222,143,9)" fg:x="1223" fg:w="1"/><text x="97.4678%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2178%" y="165" width="0.0795%" height="15" fill="rgb(238,162,48)" fg:x="1223" fg:w="1"/><text x="97.4678%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="97.3768%" y="213" width="0.0795%" height="15" fill="rgb(221,59,43)" fg:x="1225" fg:w="1"/><text x="97.6268%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (77 samples, 6.12%)</title><rect x="91.4149%" y="309" width="6.1208%" height="15" fill="rgb(205,166,41)" fg:x="1150" fg:w="77"/><text x="91.6649%" y="319.50">&lt;regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (77 samples, 6.12%)</title><rect x="91.4149%" y="293" width="6.1208%" height="15" fill="rgb(241,186,40)" fg:x="1150" fg:w="77"/><text x="91.6649%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (77 samples, 6.12%)</title><rect x="91.4149%" y="277" width="6.1208%" height="15" fill="rgb(216,119,35)" fg:x="1150" fg:w="77"/><text x="91.6649%" y="287.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="96.8998%" y="261" width="0.6359%" height="15" fill="rgb(208,68,38)" fg:x="1219" fg:w="8"/><text x="97.1498%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="96.8998%" y="245" width="0.6359%" height="15" fill="rgb(217,113,1)" fg:x="1219" fg:w="8"/><text x="97.1498%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="97.2973%" y="229" width="0.2385%" height="15" fill="rgb(242,153,3)" fg:x="1224" fg:w="3"/><text x="97.5473%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="97.4563%" y="213" width="0.0795%" height="15" fill="rgb(229,76,35)" fg:x="1226" fg:w="1"/><text x="97.7063%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.5358%" y="293" width="0.0795%" height="15" fill="rgb(229,125,34)" fg:x="1227" fg:w="1"/><text x="97.7858%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.5358%" y="277" width="0.0795%" height="15" fill="rgb(238,179,36)" fg:x="1227" fg:w="1"/><text x="97.7858%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="97.5358%" y="261" width="0.0795%" height="15" fill="rgb(244,183,19)" fg:x="1227" fg:w="1"/><text x="97.7858%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="97.5358%" y="245" width="0.0795%" height="15" fill="rgb(216,85,49)" fg:x="1227" fg:w="1"/><text x="97.7858%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (165 samples, 13.12%)</title><rect x="84.8967%" y="405" width="13.1161%" height="15" fill="rgb(208,161,47)" fg:x="1068" fg:w="165"/><text x="85.1467%" y="415.50">&lt;&amp;kernel::model::Ent..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (148 samples, 11.76%)</title><rect x="86.2480%" y="389" width="11.7647%" height="15" fill="rgb(233,210,18)" fg:x="1085" fg:w="148"/><text x="86.4980%" y="399.50">plugins_core::loo..</text></g><g><title>indefinite::indefinite (148 samples, 11.76%)</title><rect x="86.2480%" y="373" width="11.7647%" height="15" fill="rgb(205,104,42)" fg:x="1085" fg:w="148"/><text x="86.4980%" y="383.50">indefinite::indef..</text></g><g><title>indefinite::methods::indefinite (148 samples, 11.76%)</title><rect x="86.2480%" y="357" width="11.7647%" height="15" fill="rgb(248,90,43)" fg:x="1085" fg:w="148"/><text x="86.4980%" y="367.50">indefinite::metho..</text></g><g><title>indefinite::methods::apply_rules (148 samples, 11.76%)</title><rect x="86.2480%" y="341" width="11.7647%" height="15" fill="rgb(206,198,11)" fg:x="1085" fg:w="148"/><text x="86.4980%" y="351.50">indefinite::metho..</text></g><g><title>indefinite::rules::number::Number::check (83 samples, 6.60%)</title><rect x="91.4149%" y="325" width="6.5978%" height="15" fill="rgb(239,165,27)" fg:x="1150" fg:w="83"/><text x="91.6649%" y="335.50">indefinit..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="97.5358%" y="309" width="0.4769%" height="15" fill="rgb(246,44,32)" fg:x="1227" fg:w="6"/><text x="97.7858%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="97.6153%" y="293" width="0.3975%" height="15" fill="rgb(252,65,42)" fg:x="1228" fg:w="5"/><text x="97.8653%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="97.6153%" y="277" width="0.3975%" height="15" fill="rgb(246,197,18)" fg:x="1228" fg:w="5"/><text x="97.8653%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="97.6153%" y="261" width="0.3975%" height="15" fill="rgb(216,192,4)" fg:x="1228" fg:w="5"/><text x="97.8653%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="97.6153%" y="245" width="0.3975%" height="15" fill="rgb(208,117,10)" fg:x="1228" fg:w="5"/><text x="97.8653%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="97.6153%" y="229" width="0.3975%" height="15" fill="rgb(240,61,47)" fg:x="1228" fg:w="5"/><text x="97.8653%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="97.7742%" y="213" width="0.2385%" height="15" fill="rgb(228,178,21)" fg:x="1230" fg:w="3"/><text x="98.0242%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.0127%" y="357" width="0.0795%" height="15" fill="rgb(219,96,54)" fg:x="1233" fg:w="1"/><text x="98.2627%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.0127%" y="405" width="0.1590%" height="15" fill="rgb(250,177,24)" fg:x="1233" fg:w="2"/><text x="98.2627%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.0127%" y="389" width="0.1590%" height="15" fill="rgb(242,154,46)" fg:x="1233" fg:w="2"/><text x="98.2627%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.0127%" y="373" width="0.1590%" height="15" fill="rgb(226,176,29)" fg:x="1233" fg:w="2"/><text x="98.2627%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.0922%" y="357" width="0.0795%" height="15" fill="rgb(226,29,2)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.0922%" y="341" width="0.0795%" height="15" fill="rgb(237,104,14)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.0922%" y="325" width="0.0795%" height="15" fill="rgb(245,207,31)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0922%" y="309" width="0.0795%" height="15" fill="rgb(229,211,45)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0922%" y="293" width="0.0795%" height="15" fill="rgb(229,113,15)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0922%" y="277" width="0.0795%" height="15" fill="rgb(237,147,15)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0922%" y="261" width="0.0795%" height="15" fill="rgb(244,120,12)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0922%" y="245" width="0.0795%" height="15" fill="rgb(205,120,12)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="98.1717%" y="389" width="0.0795%" height="15" fill="rgb(231,26,45)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="98.1717%" y="373" width="0.0795%" height="15" fill="rgb(246,98,1)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.1717%" y="357" width="0.0795%" height="15" fill="rgb(207,68,45)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.1717%" y="341" width="0.0795%" height="15" fill="rgb(231,27,38)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1717%" y="325" width="0.0795%" height="15" fill="rgb(214,223,3)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1717%" y="309" width="0.0795%" height="15" fill="rgb(228,195,46)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.1717%" y="293" width="0.0795%" height="15" fill="rgb(231,100,42)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1717%" y="277" width="0.0795%" height="15" fill="rgb(236,53,4)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1717%" y="261" width="0.0795%" height="15" fill="rgb(230,152,12)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1717%" y="245" width="0.0795%" height="15" fill="rgb(226,101,19)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.3307%" y="325" width="0.0795%" height="15" fill="rgb(250,149,32)" fg:x="1237" fg:w="1"/><text x="98.5807%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3307%" y="309" width="0.0795%" height="15" fill="rgb(232,178,12)" fg:x="1237" fg:w="1"/><text x="98.5807%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3307%" y="293" width="0.0795%" height="15" fill="rgb(246,151,17)" fg:x="1237" fg:w="1"/><text x="98.5807%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3307%" y="277" width="0.0795%" height="15" fill="rgb(252,17,51)" fg:x="1237" fg:w="1"/><text x="98.5807%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.4897%" y="245" width="0.0795%" height="15" fill="rgb(250,207,23)" fg:x="1239" fg:w="1"/><text x="98.7397%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="98.4102%" y="325" width="0.2385%" height="15" fill="rgb(205,27,5)" fg:x="1238" fg:w="3"/><text x="98.6602%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.4102%" y="309" width="0.2385%" height="15" fill="rgb(224,32,19)" fg:x="1238" fg:w="3"/><text x="98.6602%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.4102%" y="293" width="0.2385%" height="15" fill="rgb(247,214,40)" fg:x="1238" fg:w="3"/><text x="98.6602%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="98.4102%" y="277" width="0.2385%" height="15" fill="rgb(239,199,17)" fg:x="1238" fg:w="3"/><text x="98.6602%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.4102%" y="261" width="0.2385%" height="15" fill="rgb(251,159,9)" fg:x="1238" fg:w="3"/><text x="98.6602%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.5692%" y="245" width="0.0795%" height="15" fill="rgb(225,78,32)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5692%" y="229" width="0.0795%" height="15" fill="rgb(206,97,47)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5692%" y="213" width="0.0795%" height="15" fill="rgb(227,107,4)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.5692%" y="197" width="0.0795%" height="15" fill="rgb(241,146,50)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5692%" y="181" width="0.0795%" height="15" fill="rgb(232,92,30)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5692%" y="165" width="0.0795%" height="15" fill="rgb(222,0,40)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.5692%" y="149" width="0.0795%" height="15" fill="rgb(219,54,33)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5692%" y="133" width="0.0795%" height="15" fill="rgb(226,209,28)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5692%" y="117" width="0.0795%" height="15" fill="rgb(254,205,35)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.5692%" y="101" width="0.0795%" height="15" fill="rgb(230,159,3)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="111.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (181 samples, 14.39%)</title><rect x="84.3402%" y="565" width="14.3879%" height="15" fill="rgb(232,190,24)" fg:x="1061" fg:w="181"/><text x="84.5902%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (181 samples, 14.39%)</title><rect x="84.3402%" y="549" width="14.3879%" height="15" fill="rgb(217,227,44)" fg:x="1061" fg:w="181"/><text x="84.5902%" y="559.50">&lt;plugins_dynlib::Dynam..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (181 samples, 14.39%)</title><rect x="84.3402%" y="533" width="14.3879%" height="15" fill="rgb(236,211,1)" fg:x="1061" fg:w="181"/><text x="84.5902%" y="543.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (181 samples, 14.39%)</title><rect x="84.3402%" y="517" width="14.3879%" height="15" fill="rgb(250,127,46)" fg:x="1061" fg:w="181"/><text x="84.5902%" y="527.50">core::ops::function::F..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (181 samples, 14.39%)</title><rect x="84.3402%" y="501" width="14.3879%" height="15" fill="rgb(229,213,6)" fg:x="1061" fg:w="181"/><text x="84.5902%" y="511.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (181 samples, 14.39%)</title><rect x="84.3402%" y="485" width="14.3879%" height="15" fill="rgb(237,15,36)" fg:x="1061" fg:w="181"/><text x="84.5902%" y="495.50">core::ops::function::F..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (181 samples, 14.39%)</title><rect x="84.3402%" y="469" width="14.3879%" height="15" fill="rgb(213,131,41)" fg:x="1061" fg:w="181"/><text x="84.5902%" y="479.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (181 samples, 14.39%)</title><rect x="84.3402%" y="453" width="14.3879%" height="15" fill="rgb(225,82,44)" fg:x="1061" fg:w="181"/><text x="84.5902%" y="463.50">&lt;engine::session::stat..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (180 samples, 14.31%)</title><rect x="84.4197%" y="437" width="14.3084%" height="15" fill="rgb(249,42,11)" fg:x="1062" fg:w="180"/><text x="84.6697%" y="447.50">&lt;plugins_core::looking..</text></g><g><title>plugins_core::looking::model::new_area_observation (174 samples, 13.83%)</title><rect x="84.8967%" y="421" width="13.8315%" height="15" fill="rgb(253,11,29)" fg:x="1068" fg:w="174"/><text x="85.1467%" y="431.50">plugins_core::looking..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="98.1717%" y="405" width="0.5564%" height="15" fill="rgb(206,8,54)" fg:x="1235" fg:w="7"/><text x="98.4217%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="98.2512%" y="389" width="0.4769%" height="15" fill="rgb(222,186,2)" fg:x="1236" fg:w="6"/><text x="98.5012%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="98.3307%" y="373" width="0.3975%" height="15" fill="rgb(221,206,53)" fg:x="1237" fg:w="5"/><text x="98.5807%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="98.3307%" y="357" width="0.3975%" height="15" fill="rgb(230,150,21)" fg:x="1237" fg:w="5"/><text x="98.5807%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="98.3307%" y="341" width="0.3975%" height="15" fill="rgb(253,202,10)" fg:x="1237" fg:w="5"/><text x="98.5807%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.6486%" y="325" width="0.0795%" height="15" fill="rgb(238,109,40)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.6486%" y="309" width="0.0795%" height="15" fill="rgb(247,120,22)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6486%" y="293" width="0.0795%" height="15" fill="rgb(207,43,30)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6486%" y="277" width="0.0795%" height="15" fill="rgb(213,211,24)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6486%" y="261" width="0.0795%" height="15" fill="rgb(239,73,39)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6486%" y="245" width="0.0795%" height="15" fill="rgb(245,182,19)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6486%" y="229" width="0.0795%" height="15" fill="rgb(247,143,26)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.8076%" y="517" width="0.0795%" height="15" fill="rgb(228,191,23)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8076%" y="501" width="0.0795%" height="15" fill="rgb(253,165,31)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8076%" y="485" width="0.0795%" height="15" fill="rgb(234,138,20)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.8076%" y="469" width="0.0795%" height="15" fill="rgb(218,191,29)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.8076%" y="453" width="0.0795%" height="15" fill="rgb(221,157,19)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.8076%" y="437" width="0.0795%" height="15" fill="rgb(237,26,42)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8076%" y="421" width="0.0795%" height="15" fill="rgb(220,163,24)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8076%" y="405" width="0.0795%" height="15" fill="rgb(242,115,20)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="415.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="98.8871%" y="453" width="0.0795%" height="15" fill="rgb(210,206,9)" fg:x="1244" fg:w="1"/><text x="99.1371%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8871%" y="437" width="0.0795%" height="15" fill="rgb(208,71,17)" fg:x="1244" fg:w="1"/><text x="99.1371%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.8871%" y="421" width="0.0795%" height="15" fill="rgb(233,7,5)" fg:x="1244" fg:w="1"/><text x="99.1371%" y="431.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="98.8076%" y="533" width="0.2385%" height="15" fill="rgb(207,92,33)" fg:x="1243" fg:w="3"/><text x="99.0576%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="98.8871%" y="517" width="0.1590%" height="15" fill="rgb(218,87,9)" fg:x="1244" fg:w="2"/><text x="99.1371%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="98.8871%" y="501" width="0.1590%" height="15" fill="rgb(219,47,37)" fg:x="1244" fg:w="2"/><text x="99.1371%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="98.8871%" y="485" width="0.1590%" height="15" fill="rgb(221,152,34)" fg:x="1244" fg:w="2"/><text x="99.1371%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="98.8871%" y="469" width="0.1590%" height="15" fill="rgb(235,176,21)" fg:x="1244" fg:w="2"/><text x="99.1371%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.9666%" y="453" width="0.0795%" height="15" fill="rgb(232,212,21)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.9666%" y="437" width="0.0795%" height="15" fill="rgb(245,82,39)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9666%" y="421" width="0.0795%" height="15" fill="rgb(241,52,51)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9666%" y="405" width="0.0795%" height="15" fill="rgb(219,91,24)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9666%" y="389" width="0.0795%" height="15" fill="rgb(241,142,12)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9666%" y="373" width="0.0795%" height="15" fill="rgb(230,27,9)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9666%" y="357" width="0.0795%" height="15" fill="rgb(249,181,32)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9666%" y="341" width="0.0795%" height="15" fill="rgb(230,107,3)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9666%" y="325" width="0.0795%" height="15" fill="rgb(246,204,14)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9666%" y="309" width="0.0795%" height="15" fill="rgb(213,192,47)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.9666%" y="293" width="0.0795%" height="15" fill="rgb(240,44,36)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9666%" y="277" width="0.0795%" height="15" fill="rgb(244,209,38)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="99.1256%" y="405" width="0.0795%" height="15" fill="rgb(219,34,37)" fg:x="1247" fg:w="1"/><text x="99.3756%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1256%" y="389" width="0.0795%" height="15" fill="rgb(210,28,6)" fg:x="1247" fg:w="1"/><text x="99.3756%" y="399.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.56%)</title><rect x="98.8076%" y="549" width="0.5564%" height="15" fill="rgb(244,110,52)" fg:x="1243" fg:w="7"/><text x="99.0576%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="99.0461%" y="533" width="0.3180%" height="15" fill="rgb(254,124,47)" fg:x="1246" fg:w="4"/><text x="99.2961%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="99.0461%" y="517" width="0.3180%" height="15" fill="rgb(254,110,13)" fg:x="1246" fg:w="4"/><text x="99.2961%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="99.0461%" y="501" width="0.3180%" height="15" fill="rgb(252,57,21)" fg:x="1246" fg:w="4"/><text x="99.2961%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.0461%" y="485" width="0.3180%" height="15" fill="rgb(242,60,45)" fg:x="1246" fg:w="4"/><text x="99.2961%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="99.1256%" y="469" width="0.2385%" height="15" fill="rgb(234,49,30)" fg:x="1247" fg:w="3"/><text x="99.3756%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="99.1256%" y="453" width="0.2385%" height="15" fill="rgb(218,98,6)" fg:x="1247" fg:w="3"/><text x="99.3756%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="99.1256%" y="437" width="0.2385%" height="15" fill="rgb(220,174,29)" fg:x="1247" fg:w="3"/><text x="99.3756%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.1256%" y="421" width="0.2385%" height="15" fill="rgb(236,163,23)" fg:x="1247" fg:w="3"/><text x="99.3756%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.2051%" y="405" width="0.1590%" height="15" fill="rgb(242,114,45)" fg:x="1248" fg:w="2"/><text x="99.4551%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.2051%" y="389" width="0.1590%" height="15" fill="rgb(232,10,53)" fg:x="1248" fg:w="2"/><text x="99.4551%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2846%" y="373" width="0.0795%" height="15" fill="rgb(245,108,29)" fg:x="1249" fg:w="1"/><text x="99.5346%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2846%" y="357" width="0.0795%" height="15" fill="rgb(240,89,53)" fg:x="1249" fg:w="1"/><text x="99.5346%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.2846%" y="341" width="0.0795%" height="15" fill="rgb(226,60,45)" fg:x="1249" fg:w="1"/><text x="99.5346%" y="351.50"></text></g><g><title>engine::session::Session::captured (199 samples, 15.82%)</title><rect x="83.6248%" y="709" width="15.8188%" height="15" fill="rgb(230,41,44)" fg:x="1052" fg:w="199"/><text x="83.8748%" y="719.50">engine::session::Session..</text></g><g><title>engine::session::logs::capture (198 samples, 15.74%)</title><rect x="83.7043%" y="693" width="15.7393%" height="15" fill="rgb(230,26,20)" fg:x="1053" fg:w="198"/><text x="83.9543%" y="703.50">engine::session::logs::c..</text></g><g><title>tracing_core::dispatcher::with_default (197 samples, 15.66%)</title><rect x="83.7838%" y="677" width="15.6598%" height="15" fill="rgb(237,170,32)" fg:x="1054" fg:w="197"/><text x="84.0338%" y="687.50">tracing_core::dispatcher..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (197 samples, 15.66%)</title><rect x="83.7838%" y="661" width="15.6598%" height="15" fill="rgb(212,35,42)" fg:x="1054" fg:w="197"/><text x="84.0338%" y="671.50">&lt;engine::session::Sessio..</text></g><g><title>kernel::plugins::mw::apply_middleware (197 samples, 15.66%)</title><rect x="83.7838%" y="645" width="15.6598%" height="15" fill="rgb(227,31,34)" fg:x="1054" fg:w="197"/><text x="84.0338%" y="655.50">kernel::plugins::mw::app..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (197 samples, 15.66%)</title><rect x="83.7838%" y="629" width="15.6598%" height="15" fill="rgb(216,19,18)" fg:x="1054" fg:w="197"/><text x="84.0338%" y="639.50">kernel::plugins::mw::Mid..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (197 samples, 15.66%)</title><rect x="83.7838%" y="613" width="15.6598%" height="15" fill="rgb(211,133,42)" fg:x="1054" fg:w="197"/><text x="84.0338%" y="623.50">&lt;engine::session::Expand..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (190 samples, 15.10%)</title><rect x="84.3402%" y="597" width="15.1033%" height="15" fill="rgb(244,66,13)" fg:x="1061" fg:w="190"/><text x="84.5902%" y="607.50">kernel::plugins::mw::Mi..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (190 samples, 15.10%)</title><rect x="84.3402%" y="581" width="15.1033%" height="15" fill="rgb(218,185,50)" fg:x="1061" fg:w="190"/><text x="84.5902%" y="591.50">&lt;plugins_rune::RuneMidd..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (9 samples, 0.72%)</title><rect x="98.7281%" y="565" width="0.7154%" height="15" fill="rgb(219,149,13)" fg:x="1242" fg:w="9"/><text x="98.9781%" y="575.50"></text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="99.3641%" y="549" width="0.0795%" height="15" fill="rgb(221,125,0)" fg:x="1250" fg:w="1"/><text x="99.6141%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="99.3641%" y="533" width="0.0795%" height="15" fill="rgb(247,126,27)" fg:x="1250" fg:w="1"/><text x="99.6141%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.3641%" y="517" width="0.0795%" height="15" fill="rgb(250,138,30)" fg:x="1250" fg:w="1"/><text x="99.6141%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="99.3641%" y="501" width="0.0795%" height="15" fill="rgb(230,151,9)" fg:x="1250" fg:w="1"/><text x="99.6141%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.3641%" y="485" width="0.0795%" height="15" fill="rgb(233,80,38)" fg:x="1250" fg:w="1"/><text x="99.6141%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.3641%" y="469" width="0.0795%" height="15" fill="rgb(232,68,43)" fg:x="1250" fg:w="1"/><text x="99.6141%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4436%" y="597" width="0.0795%" height="15" fill="rgb(254,5,50)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4436%" y="581" width="0.0795%" height="15" fill="rgb(225,45,5)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4436%" y="565" width="0.0795%" height="15" fill="rgb(239,22,3)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4436%" y="549" width="0.0795%" height="15" fill="rgb(243,129,0)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4436%" y="533" width="0.0795%" height="15" fill="rgb(223,164,0)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4436%" y="517" width="0.0795%" height="15" fill="rgb(221,46,29)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4436%" y="501" width="0.0795%" height="15" fill="rgb(205,97,47)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4436%" y="485" width="0.0795%" height="15" fill="rgb(249,14,8)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4436%" y="469" width="0.0795%" height="15" fill="rgb(216,77,3)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.4436%" y="453" width="0.0795%" height="15" fill="rgb(206,168,54)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.4436%" y="437" width="0.0795%" height="15" fill="rgb(236,3,41)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.4436%" y="421" width="0.0795%" height="15" fill="rgb(231,132,24)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.4436%" y="405" width="0.0795%" height="15" fill="rgb(227,221,40)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="415.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="99.4436%" y="693" width="0.1590%" height="15" fill="rgb(233,151,11)" fg:x="1251" fg:w="2"/><text x="99.6936%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.4436%" y="677" width="0.1590%" height="15" fill="rgb(247,81,35)" fg:x="1251" fg:w="2"/><text x="99.6936%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.4436%" y="661" width="0.1590%" height="15" fill="rgb(243,128,48)" fg:x="1251" fg:w="2"/><text x="99.6936%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="99.4436%" y="645" width="0.1590%" height="15" fill="rgb(253,16,10)" fg:x="1251" fg:w="2"/><text x="99.6936%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.4436%" y="629" width="0.1590%" height="15" fill="rgb(228,67,27)" fg:x="1251" fg:w="2"/><text x="99.6936%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.4436%" y="613" width="0.1590%" height="15" fill="rgb(231,105,25)" fg:x="1251" fg:w="2"/><text x="99.6936%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5231%" y="597" width="0.0795%" height="15" fill="rgb(213,166,47)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5231%" y="581" width="0.0795%" height="15" fill="rgb(209,27,10)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5231%" y="565" width="0.0795%" height="15" fill="rgb(241,44,30)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5231%" y="549" width="0.0795%" height="15" fill="rgb(223,216,15)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5231%" y="533" width="0.0795%" height="15" fill="rgb(227,14,7)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5231%" y="517" width="0.0795%" height="15" fill="rgb(237,14,5)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5231%" y="501" width="0.0795%" height="15" fill="rgb(232,14,36)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.5231%" y="485" width="0.0795%" height="15" fill="rgb(234,0,38)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.5231%" y="469" width="0.0795%" height="15" fill="rgb(207,170,14)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.5231%" y="453" width="0.0795%" height="15" fill="rgb(252,45,13)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.5231%" y="437" width="0.0795%" height="15" fill="rgb(213,142,7)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5231%" y="421" width="0.0795%" height="15" fill="rgb(216,157,23)" fg:x="1252" fg:w="1"/><text x="99.7731%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6025%" y="677" width="0.0795%" height="15" fill="rgb(212,145,33)" fg:x="1253" fg:w="1"/><text x="99.8525%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6025%" y="661" width="0.0795%" height="15" fill="rgb(233,26,13)" fg:x="1253" fg:w="1"/><text x="99.8525%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6025%" y="645" width="0.0795%" height="15" fill="rgb(219,196,19)" fg:x="1253" fg:w="1"/><text x="99.8525%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6025%" y="629" width="0.0795%" height="15" fill="rgb(246,56,21)" fg:x="1253" fg:w="1"/><text x="99.8525%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6025%" y="613" width="0.0795%" height="15" fill="rgb(222,28,53)" fg:x="1253" fg:w="1"/><text x="99.8525%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6025%" y="597" width="0.0795%" height="15" fill="rgb(224,5,27)" fg:x="1253" fg:w="1"/><text x="99.8525%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.4436%" y="709" width="0.3975%" height="15" fill="rgb(220,153,33)" fg:x="1251" fg:w="5"/><text x="99.6936%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6025%" y="693" width="0.2385%" height="15" fill="rgb(226,58,19)" fg:x="1253" fg:w="3"/><text x="99.8525%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.6820%" y="677" width="0.1590%" height="15" fill="rgb(239,112,23)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.6820%" y="661" width="0.1590%" height="15" fill="rgb(251,213,20)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6820%" y="645" width="0.1590%" height="15" fill="rgb(215,181,21)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6820%" y="629" width="0.1590%" height="15" fill="rgb(240,8,35)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6820%" y="613" width="0.1590%" height="15" fill="rgb(232,203,3)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6820%" y="597" width="0.1590%" height="15" fill="rgb(214,202,43)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7615%" y="581" width="0.0795%" height="15" fill="rgb(254,35,11)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7615%" y="565" width="0.0795%" height="15" fill="rgb(239,173,13)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7615%" y="549" width="0.0795%" height="15" fill="rgb(220,141,0)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7615%" y="533" width="0.0795%" height="15" fill="rgb(210,98,12)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7615%" y="517" width="0.0795%" height="15" fill="rgb(254,153,22)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7615%" y="501" width="0.0795%" height="15" fill="rgb(247,223,17)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7615%" y="485" width="0.0795%" height="15" fill="rgb(246,56,7)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7615%" y="469" width="0.0795%" height="15" fill="rgb(240,226,12)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="479.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="99.8410%" y="709" width="0.0795%" height="15" fill="rgb(205,87,46)" fg:x="1256" fg:w="1"/><text x="100.0910%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="99.8410%" y="693" width="0.0795%" height="15" fill="rgb(245,214,51)" fg:x="1256" fg:w="1"/><text x="100.0910%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.8410%" y="677" width="0.0795%" height="15" fill="rgb(223,172,33)" fg:x="1256" fg:w="1"/><text x="100.0910%" y="687.50"></text></g><g><title>all (1,258 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(227,203,34)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-108cb82f (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(248,143,44)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1087.50">simple-108cb82f</text></g><g><title>_start (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(226,162,5)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(211,143,1)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(224,96,15)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(222,4,38)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,258 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(253,228,15)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,258 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(242,194,12)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,258 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(214,177,31)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,258 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(226,58,51)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,258 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(250,119,16)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,258 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(223,128,53)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,258 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(251,199,15)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,258 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(235,168,42)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,258 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(250,210,17)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,258 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(226,36,41)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,258 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(225,87,10)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,258 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(228,83,9)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,258 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(225,16,36)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (375 samples, 29.81%)</title><rect x="70.1908%" y="789" width="29.8092%" height="15" fill="rgb(242,198,13)" fg:x="883" fg:w="375"/><text x="70.4408%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (375 samples, 29.81%)</title><rect x="70.1908%" y="773" width="29.8092%" height="15" fill="rgb(239,25,51)" fg:x="883" fg:w="375"/><text x="70.4408%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (375 samples, 29.81%)</title><rect x="70.1908%" y="757" width="29.8092%" height="15" fill="rgb(239,28,37)" fg:x="883" fg:w="375"/><text x="70.4408%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (209 samples, 16.61%)</title><rect x="83.3863%" y="741" width="16.6137%" height="15" fill="rgb(234,70,17)" fg:x="1049" fg:w="209"/><text x="83.6363%" y="751.50">engine::session::Session::..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (208 samples, 16.53%)</title><rect x="83.4658%" y="725" width="16.5342%" height="15" fill="rgb(231,215,53)" fg:x="1050" fg:w="208"/><text x="83.7158%" y="735.50">engine::session::Session::..</text></g><g><title>kernel::session::SetSession&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="99.9205%" y="709" width="0.0795%" height="15" fill="rgb(218,140,42)" fg:x="1257" fg:w="1"/><text x="100.1705%" y="719.50"></text></g></svg></svg>