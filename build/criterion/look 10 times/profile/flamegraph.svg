<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1205.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="1241"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0806%" y="773" width="0.0806%" height="15" fill="rgb(235,145,16)" fg:x="1" fg:w="1"/><text x="0.3306%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1612%" y="677" width="0.0806%" height="15" fill="rgb(237,114,19)" fg:x="2" fg:w="1"/><text x="0.4112%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2417%" y="661" width="0.0806%" height="15" fill="rgb(238,51,50)" fg:x="3" fg:w="1"/><text x="0.4917%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.1612%" y="741" width="0.3223%" height="15" fill="rgb(205,194,25)" fg:x="2" fg:w="4"/><text x="0.4112%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (4 samples, 0.32%)</title><rect x="0.1612%" y="725" width="0.3223%" height="15" fill="rgb(215,203,17)" fg:x="2" fg:w="4"/><text x="0.4112%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="0.1612%" y="709" width="0.3223%" height="15" fill="rgb(233,112,49)" fg:x="2" fg:w="4"/><text x="0.4112%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.1612%" y="693" width="0.3223%" height="15" fill="rgb(241,130,26)" fg:x="2" fg:w="4"/><text x="0.4112%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.2417%" y="677" width="0.2417%" height="15" fill="rgb(252,223,19)" fg:x="3" fg:w="3"/><text x="0.4917%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3223%" y="661" width="0.1612%" height="15" fill="rgb(211,95,25)" fg:x="4" fg:w="2"/><text x="0.5723%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4029%" y="645" width="0.0806%" height="15" fill="rgb(251,182,27)" fg:x="5" fg:w="1"/><text x="0.6529%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4029%" y="629" width="0.0806%" height="15" fill="rgb(238,24,4)" fg:x="5" fg:w="1"/><text x="0.6529%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0806%" y="821" width="0.4835%" height="15" fill="rgb(224,220,25)" fg:x="1" fg:w="6"/><text x="0.3306%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (6 samples, 0.48%)</title><rect x="0.0806%" y="805" width="0.4835%" height="15" fill="rgb(239,133,26)" fg:x="1" fg:w="6"/><text x="0.3306%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0806%" y="789" width="0.4835%" height="15" fill="rgb(211,94,48)" fg:x="1" fg:w="6"/><text x="0.3306%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="0.1612%" y="773" width="0.4029%" height="15" fill="rgb(239,87,6)" fg:x="2" fg:w="5"/><text x="0.4112%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.1612%" y="757" width="0.4029%" height="15" fill="rgb(227,62,0)" fg:x="2" fg:w="5"/><text x="0.4112%" y="767.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4835%" y="741" width="0.0806%" height="15" fill="rgb(211,226,4)" fg:x="6" fg:w="1"/><text x="0.7335%" y="751.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.5641%" y="741" width="0.0806%" height="15" fill="rgb(253,38,52)" fg:x="7" fg:w="1"/><text x="0.8141%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="0.5641%" y="725" width="0.0806%" height="15" fill="rgb(229,126,40)" fg:x="7" fg:w="1"/><text x="0.8141%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="0.5641%" y="709" width="0.0806%" height="15" fill="rgb(229,165,44)" fg:x="7" fg:w="1"/><text x="0.8141%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.5641%" y="693" width="0.0806%" height="15" fill="rgb(247,95,47)" fg:x="7" fg:w="1"/><text x="0.8141%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="0.5641%" y="677" width="0.0806%" height="15" fill="rgb(216,140,30)" fg:x="7" fg:w="1"/><text x="0.8141%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5641%" y="661" width="0.0806%" height="15" fill="rgb(246,214,8)" fg:x="7" fg:w="1"/><text x="0.8141%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5641%" y="645" width="0.0806%" height="15" fill="rgb(227,224,15)" fg:x="7" fg:w="1"/><text x="0.8141%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5641%" y="629" width="0.0806%" height="15" fill="rgb(233,175,4)" fg:x="7" fg:w="1"/><text x="0.8141%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5641%" y="613" width="0.0806%" height="15" fill="rgb(221,66,45)" fg:x="7" fg:w="1"/><text x="0.8141%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.5641%" y="597" width="0.0806%" height="15" fill="rgb(221,178,18)" fg:x="7" fg:w="1"/><text x="0.8141%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5641%" y="581" width="0.0806%" height="15" fill="rgb(213,81,29)" fg:x="7" fg:w="1"/><text x="0.8141%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5641%" y="565" width="0.0806%" height="15" fill="rgb(220,89,49)" fg:x="7" fg:w="1"/><text x="0.8141%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5641%" y="549" width="0.0806%" height="15" fill="rgb(227,60,33)" fg:x="7" fg:w="1"/><text x="0.8141%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.5641%" y="533" width="0.0806%" height="15" fill="rgb(205,113,12)" fg:x="7" fg:w="1"/><text x="0.8141%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5641%" y="517" width="0.0806%" height="15" fill="rgb(211,32,1)" fg:x="7" fg:w="1"/><text x="0.8141%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6446%" y="693" width="0.0806%" height="15" fill="rgb(246,2,12)" fg:x="8" fg:w="1"/><text x="0.8946%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6446%" y="677" width="0.0806%" height="15" fill="rgb(243,37,27)" fg:x="8" fg:w="1"/><text x="0.8946%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6446%" y="661" width="0.0806%" height="15" fill="rgb(248,211,31)" fg:x="8" fg:w="1"/><text x="0.8946%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6446%" y="645" width="0.0806%" height="15" fill="rgb(242,146,47)" fg:x="8" fg:w="1"/><text x="0.8946%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="0.6446%" y="741" width="0.2417%" height="15" fill="rgb(206,70,20)" fg:x="8" fg:w="3"/><text x="0.8946%" y="751.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="0.6446%" y="725" width="0.2417%" height="15" fill="rgb(215,10,51)" fg:x="8" fg:w="3"/><text x="0.8946%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="0.6446%" y="709" width="0.2417%" height="15" fill="rgb(243,178,53)" fg:x="8" fg:w="3"/><text x="0.8946%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.7252%" y="693" width="0.1612%" height="15" fill="rgb(233,221,20)" fg:x="9" fg:w="2"/><text x="0.9752%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.7252%" y="677" width="0.1612%" height="15" fill="rgb(218,95,35)" fg:x="9" fg:w="2"/><text x="0.9752%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.7252%" y="661" width="0.1612%" height="15" fill="rgb(229,13,5)" fg:x="9" fg:w="2"/><text x="0.9752%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.7252%" y="645" width="0.1612%" height="15" fill="rgb(252,164,30)" fg:x="9" fg:w="2"/><text x="0.9752%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.7252%" y="629" width="0.1612%" height="15" fill="rgb(232,68,36)" fg:x="9" fg:w="2"/><text x="0.9752%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.7252%" y="613" width="0.1612%" height="15" fill="rgb(219,59,54)" fg:x="9" fg:w="2"/><text x="0.9752%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.7252%" y="597" width="0.1612%" height="15" fill="rgb(250,92,33)" fg:x="9" fg:w="2"/><text x="0.9752%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.7252%" y="581" width="0.1612%" height="15" fill="rgb(229,162,54)" fg:x="9" fg:w="2"/><text x="0.9752%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8058%" y="565" width="0.0806%" height="15" fill="rgb(244,114,52)" fg:x="10" fg:w="1"/><text x="1.0558%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="0.8864%" y="725" width="0.1612%" height="15" fill="rgb(212,211,43)" fg:x="11" fg:w="2"/><text x="1.1364%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="0.8864%" y="709" width="0.1612%" height="15" fill="rgb(226,147,8)" fg:x="11" fg:w="2"/><text x="1.1364%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.8864%" y="693" width="0.1612%" height="15" fill="rgb(226,23,13)" fg:x="11" fg:w="2"/><text x="1.1364%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.8864%" y="677" width="0.1612%" height="15" fill="rgb(240,63,4)" fg:x="11" fg:w="2"/><text x="1.1364%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.9670%" y="661" width="0.0806%" height="15" fill="rgb(221,1,32)" fg:x="12" fg:w="1"/><text x="1.2170%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9670%" y="645" width="0.0806%" height="15" fill="rgb(242,117,10)" fg:x="12" fg:w="1"/><text x="1.2170%" y="655.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9670%" y="629" width="0.0806%" height="15" fill="rgb(249,172,44)" fg:x="12" fg:w="1"/><text x="1.2170%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9670%" y="613" width="0.0806%" height="15" fill="rgb(244,46,45)" fg:x="12" fg:w="1"/><text x="1.2170%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9670%" y="597" width="0.0806%" height="15" fill="rgb(206,43,17)" fg:x="12" fg:w="1"/><text x="1.2170%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.9670%" y="581" width="0.0806%" height="15" fill="rgb(239,218,39)" fg:x="12" fg:w="1"/><text x="1.2170%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9670%" y="565" width="0.0806%" height="15" fill="rgb(208,169,54)" fg:x="12" fg:w="1"/><text x="1.2170%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9670%" y="549" width="0.0806%" height="15" fill="rgb(247,25,42)" fg:x="12" fg:w="1"/><text x="1.2170%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.9670%" y="533" width="0.0806%" height="15" fill="rgb(226,23,31)" fg:x="12" fg:w="1"/><text x="1.2170%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9670%" y="517" width="0.0806%" height="15" fill="rgb(247,16,28)" fg:x="12" fg:w="1"/><text x="1.2170%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9670%" y="501" width="0.0806%" height="15" fill="rgb(231,147,38)" fg:x="12" fg:w="1"/><text x="1.2170%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.9670%" y="485" width="0.0806%" height="15" fill="rgb(253,81,48)" fg:x="12" fg:w="1"/><text x="1.2170%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.9670%" y="469" width="0.0806%" height="15" fill="rgb(249,222,43)" fg:x="12" fg:w="1"/><text x="1.2170%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9670%" y="453" width="0.0806%" height="15" fill="rgb(221,3,27)" fg:x="12" fg:w="1"/><text x="1.2170%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.9670%" y="437" width="0.0806%" height="15" fill="rgb(228,180,5)" fg:x="12" fg:w="1"/><text x="1.2170%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9670%" y="421" width="0.0806%" height="15" fill="rgb(227,131,42)" fg:x="12" fg:w="1"/><text x="1.2170%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9670%" y="405" width="0.0806%" height="15" fill="rgb(212,3,39)" fg:x="12" fg:w="1"/><text x="1.2170%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="0.5641%" y="773" width="0.5641%" height="15" fill="rgb(226,45,5)" fg:x="7" fg:w="7"/><text x="0.8141%" y="783.50"></text></g><g><title>engine::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="0.5641%" y="757" width="0.5641%" height="15" fill="rgb(215,167,45)" fg:x="7" fg:w="7"/><text x="0.8141%" y="767.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="0.8864%" y="741" width="0.2417%" height="15" fill="rgb(250,218,53)" fg:x="11" fg:w="3"/><text x="1.1364%" y="751.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="1.0475%" y="725" width="0.0806%" height="15" fill="rgb(207,140,0)" fg:x="13" fg:w="1"/><text x="1.2975%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.0475%" y="709" width="0.0806%" height="15" fill="rgb(238,133,51)" fg:x="13" fg:w="1"/><text x="1.2975%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.0475%" y="693" width="0.0806%" height="15" fill="rgb(218,203,53)" fg:x="13" fg:w="1"/><text x="1.2975%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.0475%" y="677" width="0.0806%" height="15" fill="rgb(226,184,25)" fg:x="13" fg:w="1"/><text x="1.2975%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (8 samples, 0.64%)</title><rect x="0.5641%" y="789" width="0.6446%" height="15" fill="rgb(231,121,21)" fg:x="7" fg:w="8"/><text x="0.8141%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="1.1281%" y="773" width="0.0806%" height="15" fill="rgb(251,14,34)" fg:x="14" fg:w="1"/><text x="1.3781%" y="783.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="1.1281%" y="757" width="0.0806%" height="15" fill="rgb(249,193,11)" fg:x="14" fg:w="1"/><text x="1.3781%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="1.1281%" y="741" width="0.0806%" height="15" fill="rgb(220,172,37)" fg:x="14" fg:w="1"/><text x="1.3781%" y="751.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.1281%" y="725" width="0.0806%" height="15" fill="rgb(231,229,43)" fg:x="14" fg:w="1"/><text x="1.3781%" y="735.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.1281%" y="709" width="0.0806%" height="15" fill="rgb(250,161,5)" fg:x="14" fg:w="1"/><text x="1.3781%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="1.1281%" y="693" width="0.0806%" height="15" fill="rgb(218,225,18)" fg:x="14" fg:w="1"/><text x="1.3781%" y="703.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.97%)</title><rect x="0.5641%" y="821" width="0.9670%" height="15" fill="rgb(245,45,42)" fg:x="7" fg:w="12"/><text x="0.8141%" y="831.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.97%)</title><rect x="0.5641%" y="805" width="0.9670%" height="15" fill="rgb(211,115,1)" fg:x="7" fg:w="12"/><text x="0.8141%" y="815.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="1.2087%" y="789" width="0.3223%" height="15" fill="rgb(248,133,52)" fg:x="15" fg:w="4"/><text x="1.4587%" y="799.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="1.2087%" y="773" width="0.3223%" height="15" fill="rgb(238,100,21)" fg:x="15" fg:w="4"/><text x="1.4587%" y="783.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="1.2087%" y="757" width="0.3223%" height="15" fill="rgb(247,144,11)" fg:x="15" fg:w="4"/><text x="1.4587%" y="767.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.2087%" y="741" width="0.3223%" height="15" fill="rgb(206,164,16)" fg:x="15" fg:w="4"/><text x="1.4587%" y="751.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="1.2087%" y="725" width="0.3223%" height="15" fill="rgb(222,34,3)" fg:x="15" fg:w="4"/><text x="1.4587%" y="735.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.2087%" y="709" width="0.3223%" height="15" fill="rgb(248,82,4)" fg:x="15" fg:w="4"/><text x="1.4587%" y="719.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.2087%" y="693" width="0.3223%" height="15" fill="rgb(228,81,46)" fg:x="15" fg:w="4"/><text x="1.4587%" y="703.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.2087%" y="677" width="0.3223%" height="15" fill="rgb(227,67,47)" fg:x="15" fg:w="4"/><text x="1.4587%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.5310%" y="773" width="0.0806%" height="15" fill="rgb(215,93,53)" fg:x="19" fg:w="1"/><text x="1.7810%" y="783.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="1.5310%" y="757" width="0.0806%" height="15" fill="rgb(248,194,39)" fg:x="19" fg:w="1"/><text x="1.7810%" y="767.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.6116%" y="725" width="0.0806%" height="15" fill="rgb(215,5,19)" fg:x="20" fg:w="1"/><text x="1.8616%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6116%" y="709" width="0.0806%" height="15" fill="rgb(226,215,51)" fg:x="20" fg:w="1"/><text x="1.8616%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6116%" y="693" width="0.0806%" height="15" fill="rgb(225,56,26)" fg:x="20" fg:w="1"/><text x="1.8616%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.6116%" y="677" width="0.0806%" height="15" fill="rgb(222,75,29)" fg:x="20" fg:w="1"/><text x="1.8616%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.6116%" y="661" width="0.0806%" height="15" fill="rgb(236,139,6)" fg:x="20" fg:w="1"/><text x="1.8616%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.6116%" y="645" width="0.0806%" height="15" fill="rgb(223,137,36)" fg:x="20" fg:w="1"/><text x="1.8616%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6922%" y="693" width="0.0806%" height="15" fill="rgb(226,99,2)" fg:x="21" fg:w="1"/><text x="1.9422%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7728%" y="677" width="0.0806%" height="15" fill="rgb(206,133,23)" fg:x="22" fg:w="1"/><text x="2.0228%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.7728%" y="661" width="0.0806%" height="15" fill="rgb(243,173,15)" fg:x="22" fg:w="1"/><text x="2.0228%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.7728%" y="645" width="0.0806%" height="15" fill="rgb(228,69,28)" fg:x="22" fg:w="1"/><text x="2.0228%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.8533%" y="629" width="0.0806%" height="15" fill="rgb(212,51,22)" fg:x="23" fg:w="1"/><text x="2.1033%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8533%" y="613" width="0.0806%" height="15" fill="rgb(227,113,0)" fg:x="23" fg:w="1"/><text x="2.1033%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8533%" y="677" width="0.1612%" height="15" fill="rgb(252,84,27)" fg:x="23" fg:w="2"/><text x="2.1033%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8533%" y="661" width="0.1612%" height="15" fill="rgb(223,145,39)" fg:x="23" fg:w="2"/><text x="2.1033%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8533%" y="645" width="0.1612%" height="15" fill="rgb(239,219,30)" fg:x="23" fg:w="2"/><text x="2.1033%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9339%" y="629" width="0.0806%" height="15" fill="rgb(224,196,39)" fg:x="24" fg:w="1"/><text x="2.1839%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="1.6922%" y="709" width="0.4029%" height="15" fill="rgb(205,35,43)" fg:x="21" fg:w="5"/><text x="1.9422%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.7728%" y="693" width="0.3223%" height="15" fill="rgb(228,201,21)" fg:x="22" fg:w="4"/><text x="2.0228%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0145%" y="677" width="0.0806%" height="15" fill="rgb(237,118,16)" fg:x="25" fg:w="1"/><text x="2.2645%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="1.6116%" y="741" width="0.6446%" height="15" fill="rgb(241,17,19)" fg:x="20" fg:w="8"/><text x="1.8616%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="1.6922%" y="725" width="0.5641%" height="15" fill="rgb(214,10,25)" fg:x="21" fg:w="7"/><text x="1.9422%" y="735.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.0951%" y="709" width="0.1612%" height="15" fill="rgb(238,37,29)" fg:x="26" fg:w="2"/><text x="2.3451%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.0951%" y="693" width="0.1612%" height="15" fill="rgb(253,83,25)" fg:x="26" fg:w="2"/><text x="2.3451%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.0951%" y="677" width="0.1612%" height="15" fill="rgb(234,192,12)" fg:x="26" fg:w="2"/><text x="2.3451%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.0951%" y="661" width="0.1612%" height="15" fill="rgb(241,216,45)" fg:x="26" fg:w="2"/><text x="2.3451%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.1757%" y="645" width="0.0806%" height="15" fill="rgb(242,22,33)" fg:x="27" fg:w="1"/><text x="2.4257%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.1757%" y="629" width="0.0806%" height="15" fill="rgb(231,105,49)" fg:x="27" fg:w="1"/><text x="2.4257%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.2562%" y="709" width="0.0806%" height="15" fill="rgb(218,204,15)" fg:x="28" fg:w="1"/><text x="2.5062%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2562%" y="741" width="0.1612%" height="15" fill="rgb(235,138,41)" fg:x="28" fg:w="2"/><text x="2.5062%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.2562%" y="725" width="0.1612%" height="15" fill="rgb(246,0,9)" fg:x="28" fg:w="2"/><text x="2.5062%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3368%" y="709" width="0.0806%" height="15" fill="rgb(210,74,4)" fg:x="29" fg:w="1"/><text x="2.5868%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3368%" y="693" width="0.0806%" height="15" fill="rgb(250,60,41)" fg:x="29" fg:w="1"/><text x="2.5868%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3368%" y="677" width="0.0806%" height="15" fill="rgb(220,115,12)" fg:x="29" fg:w="1"/><text x="2.5868%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3368%" y="661" width="0.0806%" height="15" fill="rgb(237,100,13)" fg:x="29" fg:w="1"/><text x="2.5868%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.3368%" y="645" width="0.0806%" height="15" fill="rgb(213,55,26)" fg:x="29" fg:w="1"/><text x="2.5868%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4980%" y="693" width="0.0806%" height="15" fill="rgb(216,17,4)" fg:x="31" fg:w="1"/><text x="2.7480%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5786%" y="693" width="0.0806%" height="15" fill="rgb(220,153,47)" fg:x="32" fg:w="1"/><text x="2.8286%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5786%" y="677" width="0.0806%" height="15" fill="rgb(215,131,9)" fg:x="32" fg:w="1"/><text x="2.8286%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.5786%" y="661" width="0.0806%" height="15" fill="rgb(233,46,42)" fg:x="32" fg:w="1"/><text x="2.8286%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6591%" y="693" width="0.1612%" height="15" fill="rgb(226,86,7)" fg:x="33" fg:w="2"/><text x="2.9091%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.6591%" y="677" width="0.1612%" height="15" fill="rgb(239,226,21)" fg:x="33" fg:w="2"/><text x="2.9091%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7397%" y="661" width="0.0806%" height="15" fill="rgb(244,137,22)" fg:x="34" fg:w="1"/><text x="2.9897%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.8203%" y="645" width="0.0806%" height="15" fill="rgb(211,139,35)" fg:x="35" fg:w="1"/><text x="3.0703%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8203%" y="629" width="0.0806%" height="15" fill="rgb(214,62,50)" fg:x="35" fg:w="1"/><text x="3.0703%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.8203%" y="613" width="0.0806%" height="15" fill="rgb(212,113,44)" fg:x="35" fg:w="1"/><text x="3.0703%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8203%" y="597" width="0.0806%" height="15" fill="rgb(226,150,43)" fg:x="35" fg:w="1"/><text x="3.0703%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8203%" y="581" width="0.0806%" height="15" fill="rgb(250,71,37)" fg:x="35" fg:w="1"/><text x="3.0703%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="2.8203%" y="677" width="0.1612%" height="15" fill="rgb(219,76,19)" fg:x="35" fg:w="2"/><text x="3.0703%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.8203%" y="661" width="0.1612%" height="15" fill="rgb(250,39,11)" fg:x="35" fg:w="2"/><text x="3.0703%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9009%" y="645" width="0.0806%" height="15" fill="rgb(230,64,31)" fg:x="36" fg:w="1"/><text x="3.1509%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.9009%" y="629" width="0.0806%" height="15" fill="rgb(208,222,23)" fg:x="36" fg:w="1"/><text x="3.1509%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9009%" y="613" width="0.0806%" height="15" fill="rgb(227,125,18)" fg:x="36" fg:w="1"/><text x="3.1509%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.9009%" y="597" width="0.0806%" height="15" fill="rgb(234,210,9)" fg:x="36" fg:w="1"/><text x="3.1509%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9009%" y="581" width="0.0806%" height="15" fill="rgb(217,127,24)" fg:x="36" fg:w="1"/><text x="3.1509%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.9009%" y="565" width="0.0806%" height="15" fill="rgb(239,141,48)" fg:x="36" fg:w="1"/><text x="3.1509%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9009%" y="549" width="0.0806%" height="15" fill="rgb(227,109,8)" fg:x="36" fg:w="1"/><text x="3.1509%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9009%" y="533" width="0.0806%" height="15" fill="rgb(235,184,23)" fg:x="36" fg:w="1"/><text x="3.1509%" y="543.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.53%)</title><rect x="1.5310%" y="805" width="1.5310%" height="15" fill="rgb(227,226,48)" fg:x="19" fg:w="19"/><text x="1.7810%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.53%)</title><rect x="1.5310%" y="789" width="1.5310%" height="15" fill="rgb(206,150,11)" fg:x="19" fg:w="19"/><text x="1.7810%" y="799.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (18 samples, 1.45%)</title><rect x="1.6116%" y="773" width="1.4504%" height="15" fill="rgb(254,2,33)" fg:x="20" fg:w="18"/><text x="1.8616%" y="783.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (18 samples, 1.45%)</title><rect x="1.6116%" y="757" width="1.4504%" height="15" fill="rgb(243,160,20)" fg:x="20" fg:w="18"/><text x="1.8616%" y="767.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="2.4174%" y="741" width="0.6446%" height="15" fill="rgb(218,208,30)" fg:x="30" fg:w="8"/><text x="2.6674%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="2.4174%" y="725" width="0.6446%" height="15" fill="rgb(224,120,49)" fg:x="30" fg:w="8"/><text x="2.6674%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="2.4174%" y="709" width="0.6446%" height="15" fill="rgb(246,12,2)" fg:x="30" fg:w="8"/><text x="2.6674%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="2.8203%" y="693" width="0.2417%" height="15" fill="rgb(236,117,3)" fg:x="35" fg:w="3"/><text x="3.0703%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9815%" y="677" width="0.0806%" height="15" fill="rgb(216,128,52)" fg:x="37" fg:w="1"/><text x="3.2315%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9815%" y="661" width="0.0806%" height="15" fill="rgb(246,145,19)" fg:x="37" fg:w="1"/><text x="3.2315%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.0620%" y="789" width="0.0806%" height="15" fill="rgb(222,11,46)" fg:x="38" fg:w="1"/><text x="3.3120%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="3.0620%" y="773" width="0.0806%" height="15" fill="rgb(245,82,36)" fg:x="38" fg:w="1"/><text x="3.3120%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="3.0620%" y="757" width="0.0806%" height="15" fill="rgb(250,73,51)" fg:x="38" fg:w="1"/><text x="3.3120%" y="767.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="3.0620%" y="741" width="0.0806%" height="15" fill="rgb(221,189,23)" fg:x="38" fg:w="1"/><text x="3.3120%" y="751.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.0620%" y="725" width="0.0806%" height="15" fill="rgb(210,33,7)" fg:x="38" fg:w="1"/><text x="3.3120%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.0620%" y="709" width="0.0806%" height="15" fill="rgb(210,107,22)" fg:x="38" fg:w="1"/><text x="3.3120%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.0620%" y="693" width="0.0806%" height="15" fill="rgb(222,116,37)" fg:x="38" fg:w="1"/><text x="3.3120%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.0620%" y="677" width="0.0806%" height="15" fill="rgb(254,17,48)" fg:x="38" fg:w="1"/><text x="3.3120%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.0620%" y="661" width="0.0806%" height="15" fill="rgb(224,36,32)" fg:x="38" fg:w="1"/><text x="3.3120%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.0620%" y="645" width="0.0806%" height="15" fill="rgb(232,90,46)" fg:x="38" fg:w="1"/><text x="3.3120%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.0620%" y="629" width="0.0806%" height="15" fill="rgb(241,66,40)" fg:x="38" fg:w="1"/><text x="3.3120%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.0620%" y="613" width="0.0806%" height="15" fill="rgb(249,184,29)" fg:x="38" fg:w="1"/><text x="3.3120%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.0620%" y="597" width="0.0806%" height="15" fill="rgb(231,181,1)" fg:x="38" fg:w="1"/><text x="3.3120%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.0620%" y="581" width="0.0806%" height="15" fill="rgb(224,94,2)" fg:x="38" fg:w="1"/><text x="3.3120%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.0620%" y="565" width="0.0806%" height="15" fill="rgb(229,170,15)" fg:x="38" fg:w="1"/><text x="3.3120%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.0620%" y="549" width="0.0806%" height="15" fill="rgb(240,127,35)" fg:x="38" fg:w="1"/><text x="3.3120%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0620%" y="533" width="0.0806%" height="15" fill="rgb(248,196,34)" fg:x="38" fg:w="1"/><text x="3.3120%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.1426%" y="773" width="0.0806%" height="15" fill="rgb(236,137,7)" fg:x="39" fg:w="1"/><text x="3.3926%" y="783.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="3.1426%" y="757" width="0.0806%" height="15" fill="rgb(235,127,16)" fg:x="39" fg:w="1"/><text x="3.3926%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.1426%" y="741" width="0.0806%" height="15" fill="rgb(250,192,54)" fg:x="39" fg:w="1"/><text x="3.3926%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2232%" y="757" width="0.0806%" height="15" fill="rgb(218,98,20)" fg:x="40" fg:w="1"/><text x="3.4732%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.3038%" y="757" width="0.0806%" height="15" fill="rgb(230,176,47)" fg:x="41" fg:w="1"/><text x="3.5538%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.3038%" y="741" width="0.0806%" height="15" fill="rgb(244,2,33)" fg:x="41" fg:w="1"/><text x="3.5538%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.3038%" y="725" width="0.0806%" height="15" fill="rgb(231,100,17)" fg:x="41" fg:w="1"/><text x="3.5538%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.3038%" y="709" width="0.0806%" height="15" fill="rgb(245,23,12)" fg:x="41" fg:w="1"/><text x="3.5538%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.3038%" y="693" width="0.0806%" height="15" fill="rgb(249,55,22)" fg:x="41" fg:w="1"/><text x="3.5538%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.3038%" y="677" width="0.0806%" height="15" fill="rgb(207,134,9)" fg:x="41" fg:w="1"/><text x="3.5538%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.3038%" y="661" width="0.0806%" height="15" fill="rgb(218,134,0)" fg:x="41" fg:w="1"/><text x="3.5538%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.3038%" y="645" width="0.0806%" height="15" fill="rgb(213,212,33)" fg:x="41" fg:w="1"/><text x="3.5538%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.3038%" y="629" width="0.0806%" height="15" fill="rgb(252,106,18)" fg:x="41" fg:w="1"/><text x="3.5538%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.3038%" y="613" width="0.0806%" height="15" fill="rgb(208,126,42)" fg:x="41" fg:w="1"/><text x="3.5538%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.3038%" y="597" width="0.0806%" height="15" fill="rgb(246,175,29)" fg:x="41" fg:w="1"/><text x="3.5538%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="3.3038%" y="581" width="0.0806%" height="15" fill="rgb(215,13,50)" fg:x="41" fg:w="1"/><text x="3.5538%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="3.0620%" y="805" width="0.4029%" height="15" fill="rgb(216,172,15)" fg:x="38" fg:w="5"/><text x="3.3120%" y="815.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="3.1426%" y="789" width="0.3223%" height="15" fill="rgb(212,103,13)" fg:x="39" fg:w="4"/><text x="3.3926%" y="799.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="3.2232%" y="773" width="0.2417%" height="15" fill="rgb(231,171,36)" fg:x="40" fg:w="3"/><text x="3.4732%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="3.3844%" y="757" width="0.0806%" height="15" fill="rgb(250,123,20)" fg:x="42" fg:w="1"/><text x="3.6344%" y="767.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.3844%" y="741" width="0.0806%" height="15" fill="rgb(212,53,50)" fg:x="42" fg:w="1"/><text x="3.6344%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.3844%" y="725" width="0.0806%" height="15" fill="rgb(243,54,12)" fg:x="42" fg:w="1"/><text x="3.6344%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.3844%" y="709" width="0.0806%" height="15" fill="rgb(234,101,34)" fg:x="42" fg:w="1"/><text x="3.6344%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.4649%" y="741" width="0.0806%" height="15" fill="rgb(254,67,22)" fg:x="43" fg:w="1"/><text x="3.7149%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.4649%" y="725" width="0.0806%" height="15" fill="rgb(250,35,47)" fg:x="43" fg:w="1"/><text x="3.7149%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.4649%" y="709" width="0.0806%" height="15" fill="rgb(226,126,38)" fg:x="43" fg:w="1"/><text x="3.7149%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.4649%" y="693" width="0.0806%" height="15" fill="rgb(216,138,53)" fg:x="43" fg:w="1"/><text x="3.7149%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4649%" y="677" width="0.0806%" height="15" fill="rgb(246,199,43)" fg:x="43" fg:w="1"/><text x="3.7149%" y="687.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.4649%" y="773" width="0.1612%" height="15" fill="rgb(232,125,11)" fg:x="43" fg:w="2"/><text x="3.7149%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.4649%" y="757" width="0.1612%" height="15" fill="rgb(218,219,45)" fg:x="43" fg:w="2"/><text x="3.7149%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.5455%" y="741" width="0.0806%" height="15" fill="rgb(216,102,54)" fg:x="44" fg:w="1"/><text x="3.7955%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.5455%" y="725" width="0.0806%" height="15" fill="rgb(250,228,7)" fg:x="44" fg:w="1"/><text x="3.7955%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.5455%" y="709" width="0.0806%" height="15" fill="rgb(226,125,25)" fg:x="44" fg:w="1"/><text x="3.7955%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5455%" y="693" width="0.0806%" height="15" fill="rgb(224,165,27)" fg:x="44" fg:w="1"/><text x="3.7955%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5455%" y="677" width="0.0806%" height="15" fill="rgb(233,86,3)" fg:x="44" fg:w="1"/><text x="3.7955%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5455%" y="661" width="0.0806%" height="15" fill="rgb(228,116,20)" fg:x="44" fg:w="1"/><text x="3.7955%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5455%" y="645" width="0.0806%" height="15" fill="rgb(209,192,17)" fg:x="44" fg:w="1"/><text x="3.7955%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.5455%" y="629" width="0.0806%" height="15" fill="rgb(224,88,34)" fg:x="44" fg:w="1"/><text x="3.7955%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.5455%" y="613" width="0.0806%" height="15" fill="rgb(233,38,6)" fg:x="44" fg:w="1"/><text x="3.7955%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.5455%" y="597" width="0.0806%" height="15" fill="rgb(212,59,30)" fg:x="44" fg:w="1"/><text x="3.7955%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.5455%" y="581" width="0.0806%" height="15" fill="rgb(213,80,3)" fg:x="44" fg:w="1"/><text x="3.7955%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.5455%" y="565" width="0.0806%" height="15" fill="rgb(251,178,7)" fg:x="44" fg:w="1"/><text x="3.7955%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="3.4649%" y="805" width="0.2417%" height="15" fill="rgb(213,154,26)" fg:x="43" fg:w="3"/><text x="3.7149%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="3.4649%" y="789" width="0.2417%" height="15" fill="rgb(238,165,49)" fg:x="43" fg:w="3"/><text x="3.7149%" y="799.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="3.6261%" y="773" width="0.0806%" height="15" fill="rgb(248,91,46)" fg:x="45" fg:w="1"/><text x="3.8761%" y="783.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7067%" y="693" width="0.0806%" height="15" fill="rgb(244,21,52)" fg:x="46" fg:w="1"/><text x="3.9567%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7067%" y="677" width="0.0806%" height="15" fill="rgb(247,122,20)" fg:x="46" fg:w="1"/><text x="3.9567%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7067%" y="661" width="0.0806%" height="15" fill="rgb(218,27,9)" fg:x="46" fg:w="1"/><text x="3.9567%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7067%" y="645" width="0.0806%" height="15" fill="rgb(246,7,6)" fg:x="46" fg:w="1"/><text x="3.9567%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7067%" y="629" width="0.0806%" height="15" fill="rgb(227,135,54)" fg:x="46" fg:w="1"/><text x="3.9567%" y="639.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.7067%" y="757" width="0.1612%" height="15" fill="rgb(247,14,11)" fg:x="46" fg:w="2"/><text x="3.9567%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.7067%" y="741" width="0.1612%" height="15" fill="rgb(206,149,34)" fg:x="46" fg:w="2"/><text x="3.9567%" y="751.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.7067%" y="725" width="0.1612%" height="15" fill="rgb(227,228,4)" fg:x="46" fg:w="2"/><text x="3.9567%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.7067%" y="709" width="0.1612%" height="15" fill="rgb(238,218,28)" fg:x="46" fg:w="2"/><text x="3.9567%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7873%" y="693" width="0.0806%" height="15" fill="rgb(252,86,40)" fg:x="47" fg:w="1"/><text x="4.0373%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.7873%" y="677" width="0.0806%" height="15" fill="rgb(251,225,11)" fg:x="47" fg:w="1"/><text x="4.0373%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7873%" y="661" width="0.0806%" height="15" fill="rgb(206,46,49)" fg:x="47" fg:w="1"/><text x="4.0373%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7873%" y="645" width="0.0806%" height="15" fill="rgb(245,128,24)" fg:x="47" fg:w="1"/><text x="4.0373%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7873%" y="629" width="0.0806%" height="15" fill="rgb(219,177,34)" fg:x="47" fg:w="1"/><text x="4.0373%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.7873%" y="613" width="0.0806%" height="15" fill="rgb(218,60,48)" fg:x="47" fg:w="1"/><text x="4.0373%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.7873%" y="597" width="0.0806%" height="15" fill="rgb(221,11,5)" fg:x="47" fg:w="1"/><text x="4.0373%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="3.7067%" y="789" width="0.2417%" height="15" fill="rgb(220,148,13)" fg:x="46" fg:w="3"/><text x="3.9567%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="3.7067%" y="773" width="0.2417%" height="15" fill="rgb(210,16,3)" fg:x="46" fg:w="3"/><text x="3.9567%" y="783.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8678%" y="757" width="0.0806%" height="15" fill="rgb(236,80,2)" fg:x="48" fg:w="1"/><text x="4.1178%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.9484%" y="725" width="0.0806%" height="15" fill="rgb(239,129,19)" fg:x="49" fg:w="1"/><text x="4.1984%" y="735.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.9484%" y="709" width="0.0806%" height="15" fill="rgb(220,106,35)" fg:x="49" fg:w="1"/><text x="4.1984%" y="719.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.9484%" y="693" width="0.0806%" height="15" fill="rgb(252,139,45)" fg:x="49" fg:w="1"/><text x="4.1984%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.9484%" y="677" width="0.0806%" height="15" fill="rgb(229,8,36)" fg:x="49" fg:w="1"/><text x="4.1984%" y="687.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.9484%" y="661" width="0.0806%" height="15" fill="rgb(230,126,33)" fg:x="49" fg:w="1"/><text x="4.1984%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.9484%" y="645" width="0.0806%" height="15" fill="rgb(239,140,21)" fg:x="49" fg:w="1"/><text x="4.1984%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9484%" y="629" width="0.0806%" height="15" fill="rgb(254,104,9)" fg:x="49" fg:w="1"/><text x="4.1984%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9484%" y="613" width="0.0806%" height="15" fill="rgb(239,52,14)" fg:x="49" fg:w="1"/><text x="4.1984%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="3.9484%" y="597" width="0.0806%" height="15" fill="rgb(208,227,44)" fg:x="49" fg:w="1"/><text x="4.1984%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9484%" y="581" width="0.0806%" height="15" fill="rgb(246,18,19)" fg:x="49" fg:w="1"/><text x="4.1984%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.9484%" y="565" width="0.0806%" height="15" fill="rgb(235,228,25)" fg:x="49" fg:w="1"/><text x="4.1984%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="3.9484%" y="549" width="0.0806%" height="15" fill="rgb(240,156,20)" fg:x="49" fg:w="1"/><text x="4.1984%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.9484%" y="533" width="0.0806%" height="15" fill="rgb(224,8,20)" fg:x="49" fg:w="1"/><text x="4.1984%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9484%" y="517" width="0.0806%" height="15" fill="rgb(214,12,52)" fg:x="49" fg:w="1"/><text x="4.1984%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0290%" y="629" width="0.0806%" height="15" fill="rgb(211,220,47)" fg:x="50" fg:w="1"/><text x="4.2790%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0290%" y="613" width="0.0806%" height="15" fill="rgb(250,173,5)" fg:x="50" fg:w="1"/><text x="4.2790%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0290%" y="597" width="0.0806%" height="15" fill="rgb(250,125,52)" fg:x="50" fg:w="1"/><text x="4.2790%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0290%" y="581" width="0.0806%" height="15" fill="rgb(209,133,18)" fg:x="50" fg:w="1"/><text x="4.2790%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0290%" y="565" width="0.0806%" height="15" fill="rgb(216,173,22)" fg:x="50" fg:w="1"/><text x="4.2790%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="3.9484%" y="789" width="0.2417%" height="15" fill="rgb(205,3,22)" fg:x="49" fg:w="3"/><text x="4.1984%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="3.9484%" y="773" width="0.2417%" height="15" fill="rgb(248,22,20)" fg:x="49" fg:w="3"/><text x="4.1984%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="3.9484%" y="757" width="0.2417%" height="15" fill="rgb(233,6,29)" fg:x="49" fg:w="3"/><text x="4.1984%" y="767.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="3.9484%" y="741" width="0.2417%" height="15" fill="rgb(240,22,54)" fg:x="49" fg:w="3"/><text x="4.1984%" y="751.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="4.0290%" y="725" width="0.1612%" height="15" fill="rgb(231,133,32)" fg:x="50" fg:w="2"/><text x="4.2790%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="4.0290%" y="709" width="0.1612%" height="15" fill="rgb(248,193,4)" fg:x="50" fg:w="2"/><text x="4.2790%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="4.0290%" y="693" width="0.1612%" height="15" fill="rgb(211,178,46)" fg:x="50" fg:w="2"/><text x="4.2790%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="4.0290%" y="677" width="0.1612%" height="15" fill="rgb(224,5,42)" fg:x="50" fg:w="2"/><text x="4.2790%" y="687.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.0290%" y="661" width="0.1612%" height="15" fill="rgb(239,176,25)" fg:x="50" fg:w="2"/><text x="4.2790%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.0290%" y="645" width="0.1612%" height="15" fill="rgb(245,187,50)" fg:x="50" fg:w="2"/><text x="4.2790%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.1096%" y="629" width="0.0806%" height="15" fill="rgb(248,24,15)" fg:x="51" fg:w="1"/><text x="4.3596%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.1096%" y="613" width="0.0806%" height="15" fill="rgb(205,166,13)" fg:x="51" fg:w="1"/><text x="4.3596%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.1096%" y="597" width="0.0806%" height="15" fill="rgb(208,114,23)" fg:x="51" fg:w="1"/><text x="4.3596%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1096%" y="581" width="0.0806%" height="15" fill="rgb(239,127,18)" fg:x="51" fg:w="1"/><text x="4.3596%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.1902%" y="757" width="0.0806%" height="15" fill="rgb(219,154,28)" fg:x="52" fg:w="1"/><text x="4.4402%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1902%" y="741" width="0.0806%" height="15" fill="rgb(225,157,23)" fg:x="52" fg:w="1"/><text x="4.4402%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1902%" y="725" width="0.0806%" height="15" fill="rgb(219,8,6)" fg:x="52" fg:w="1"/><text x="4.4402%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1902%" y="709" width="0.0806%" height="15" fill="rgb(212,47,6)" fg:x="52" fg:w="1"/><text x="4.4402%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1902%" y="693" width="0.0806%" height="15" fill="rgb(224,190,4)" fg:x="52" fg:w="1"/><text x="4.4402%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1902%" y="677" width="0.0806%" height="15" fill="rgb(239,183,29)" fg:x="52" fg:w="1"/><text x="4.4402%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="4.1902%" y="661" width="0.0806%" height="15" fill="rgb(213,57,7)" fg:x="52" fg:w="1"/><text x="4.4402%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.1902%" y="645" width="0.0806%" height="15" fill="rgb(216,148,1)" fg:x="52" fg:w="1"/><text x="4.4402%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.2707%" y="725" width="0.0806%" height="15" fill="rgb(236,182,29)" fg:x="53" fg:w="1"/><text x="4.5207%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.2707%" y="709" width="0.0806%" height="15" fill="rgb(244,120,48)" fg:x="53" fg:w="1"/><text x="4.5207%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.5125%" y="677" width="0.0806%" height="15" fill="rgb(206,71,34)" fg:x="56" fg:w="1"/><text x="4.7625%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5125%" y="661" width="0.0806%" height="15" fill="rgb(242,32,6)" fg:x="56" fg:w="1"/><text x="4.7625%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5931%" y="677" width="0.0806%" height="15" fill="rgb(241,35,3)" fg:x="57" fg:w="1"/><text x="4.8431%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5931%" y="661" width="0.0806%" height="15" fill="rgb(222,62,19)" fg:x="57" fg:w="1"/><text x="4.8431%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5931%" y="645" width="0.0806%" height="15" fill="rgb(223,110,41)" fg:x="57" fg:w="1"/><text x="4.8431%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5931%" y="629" width="0.0806%" height="15" fill="rgb(208,224,4)" fg:x="57" fg:w="1"/><text x="4.8431%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.6737%" y="629" width="0.1612%" height="15" fill="rgb(241,137,19)" fg:x="58" fg:w="2"/><text x="4.9237%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.7542%" y="613" width="0.0806%" height="15" fill="rgb(244,24,17)" fg:x="59" fg:w="1"/><text x="5.0042%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.7542%" y="597" width="0.0806%" height="15" fill="rgb(245,178,49)" fg:x="59" fg:w="1"/><text x="5.0042%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7542%" y="581" width="0.0806%" height="15" fill="rgb(219,160,38)" fg:x="59" fg:w="1"/><text x="5.0042%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7542%" y="565" width="0.0806%" height="15" fill="rgb(228,137,14)" fg:x="59" fg:w="1"/><text x="5.0042%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.6737%" y="645" width="0.2417%" height="15" fill="rgb(237,134,11)" fg:x="58" fg:w="3"/><text x="4.9237%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8348%" y="629" width="0.0806%" height="15" fill="rgb(211,126,44)" fg:x="60" fg:w="1"/><text x="5.0848%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8348%" y="613" width="0.0806%" height="15" fill="rgb(226,171,33)" fg:x="60" fg:w="1"/><text x="5.0848%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8348%" y="597" width="0.0806%" height="15" fill="rgb(253,99,13)" fg:x="60" fg:w="1"/><text x="5.0848%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="4.4319%" y="693" width="0.5641%" height="15" fill="rgb(244,48,7)" fg:x="55" fg:w="7"/><text x="4.6819%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.6737%" y="677" width="0.3223%" height="15" fill="rgb(244,217,54)" fg:x="58" fg:w="4"/><text x="4.9237%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.6737%" y="661" width="0.3223%" height="15" fill="rgb(224,15,18)" fg:x="58" fg:w="4"/><text x="4.9237%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9154%" y="645" width="0.0806%" height="15" fill="rgb(244,99,12)" fg:x="61" fg:w="1"/><text x="5.1654%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9154%" y="629" width="0.0806%" height="15" fill="rgb(233,226,8)" fg:x="61" fg:w="1"/><text x="5.1654%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.9154%" y="613" width="0.0806%" height="15" fill="rgb(229,211,3)" fg:x="61" fg:w="1"/><text x="5.1654%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="4.3513%" y="725" width="0.8058%" height="15" fill="rgb(216,140,21)" fg:x="54" fg:w="10"/><text x="4.6013%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="4.3513%" y="709" width="0.8058%" height="15" fill="rgb(234,122,30)" fg:x="54" fg:w="10"/><text x="4.6013%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.9960%" y="693" width="0.1612%" height="15" fill="rgb(236,25,46)" fg:x="62" fg:w="2"/><text x="5.2460%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.9960%" y="677" width="0.1612%" height="15" fill="rgb(217,52,54)" fg:x="62" fg:w="2"/><text x="5.2460%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.9960%" y="661" width="0.1612%" height="15" fill="rgb(222,29,26)" fg:x="62" fg:w="2"/><text x="5.2460%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.0766%" y="645" width="0.0806%" height="15" fill="rgb(216,177,29)" fg:x="63" fg:w="1"/><text x="5.3266%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.0766%" y="629" width="0.0806%" height="15" fill="rgb(247,136,51)" fg:x="63" fg:w="1"/><text x="5.3266%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.0766%" y="613" width="0.0806%" height="15" fill="rgb(231,47,47)" fg:x="63" fg:w="1"/><text x="5.3266%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.1571%" y="677" width="0.0806%" height="15" fill="rgb(211,192,36)" fg:x="64" fg:w="1"/><text x="5.4071%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.2377%" y="661" width="0.0806%" height="15" fill="rgb(229,156,32)" fg:x="65" fg:w="1"/><text x="5.4877%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.1571%" y="725" width="0.2417%" height="15" fill="rgb(248,213,20)" fg:x="64" fg:w="3"/><text x="5.4071%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="5.1571%" y="709" width="0.2417%" height="15" fill="rgb(217,64,7)" fg:x="64" fg:w="3"/><text x="5.4071%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.1571%" y="693" width="0.2417%" height="15" fill="rgb(232,142,8)" fg:x="64" fg:w="3"/><text x="5.4071%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.2377%" y="677" width="0.1612%" height="15" fill="rgb(224,92,44)" fg:x="65" fg:w="2"/><text x="5.4877%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3183%" y="661" width="0.0806%" height="15" fill="rgb(214,169,17)" fg:x="66" fg:w="1"/><text x="5.5683%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.3183%" y="645" width="0.0806%" height="15" fill="rgb(210,59,37)" fg:x="66" fg:w="1"/><text x="5.5683%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3183%" y="629" width="0.0806%" height="15" fill="rgb(214,116,48)" fg:x="66" fg:w="1"/><text x="5.5683%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.3989%" y="645" width="0.0806%" height="15" fill="rgb(244,191,6)" fg:x="67" fg:w="1"/><text x="5.6489%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4795%" y="629" width="0.0806%" height="15" fill="rgb(241,50,52)" fg:x="68" fg:w="1"/><text x="5.7295%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4795%" y="613" width="0.0806%" height="15" fill="rgb(236,75,39)" fg:x="68" fg:w="1"/><text x="5.7295%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4795%" y="597" width="0.0806%" height="15" fill="rgb(236,99,0)" fg:x="68" fg:w="1"/><text x="5.7295%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.6406%" y="517" width="0.0806%" height="15" fill="rgb(207,202,15)" fg:x="70" fg:w="1"/><text x="5.8906%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6406%" y="501" width="0.0806%" height="15" fill="rgb(233,207,14)" fg:x="70" fg:w="1"/><text x="5.8906%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6406%" y="485" width="0.0806%" height="15" fill="rgb(226,27,51)" fg:x="70" fg:w="1"/><text x="5.8906%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6406%" y="469" width="0.0806%" height="15" fill="rgb(206,104,42)" fg:x="70" fg:w="1"/><text x="5.8906%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="5.4795%" y="645" width="0.3223%" height="15" fill="rgb(212,225,4)" fg:x="68" fg:w="4"/><text x="5.7295%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.5600%" y="629" width="0.2417%" height="15" fill="rgb(233,96,42)" fg:x="69" fg:w="3"/><text x="5.8100%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.6406%" y="613" width="0.1612%" height="15" fill="rgb(229,21,32)" fg:x="70" fg:w="2"/><text x="5.8906%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6406%" y="597" width="0.1612%" height="15" fill="rgb(226,216,24)" fg:x="70" fg:w="2"/><text x="5.8906%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.6406%" y="581" width="0.1612%" height="15" fill="rgb(221,163,17)" fg:x="70" fg:w="2"/><text x="5.8906%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6406%" y="565" width="0.1612%" height="15" fill="rgb(216,216,42)" fg:x="70" fg:w="2"/><text x="5.8906%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.6406%" y="549" width="0.1612%" height="15" fill="rgb(240,118,7)" fg:x="70" fg:w="2"/><text x="5.8906%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6406%" y="533" width="0.1612%" height="15" fill="rgb(221,67,37)" fg:x="70" fg:w="2"/><text x="5.8906%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7212%" y="517" width="0.0806%" height="15" fill="rgb(241,32,44)" fg:x="71" fg:w="1"/><text x="5.9712%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (20 samples, 1.61%)</title><rect x="4.2707%" y="757" width="1.6116%" height="15" fill="rgb(235,204,43)" fg:x="53" fg:w="20"/><text x="4.5207%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (20 samples, 1.61%)</title><rect x="4.2707%" y="741" width="1.6116%" height="15" fill="rgb(213,116,10)" fg:x="53" fg:w="20"/><text x="4.5207%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="5.3989%" y="725" width="0.4835%" height="15" fill="rgb(239,15,48)" fg:x="67" fg:w="6"/><text x="5.6489%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="5.3989%" y="709" width="0.4835%" height="15" fill="rgb(207,123,36)" fg:x="67" fg:w="6"/><text x="5.6489%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="5.3989%" y="693" width="0.4835%" height="15" fill="rgb(209,103,30)" fg:x="67" fg:w="6"/><text x="5.6489%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="5.3989%" y="677" width="0.4835%" height="15" fill="rgb(238,100,19)" fg:x="67" fg:w="6"/><text x="5.6489%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="5.3989%" y="661" width="0.4835%" height="15" fill="rgb(244,30,14)" fg:x="67" fg:w="6"/><text x="5.6489%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.8018%" y="645" width="0.0806%" height="15" fill="rgb(249,174,6)" fg:x="72" fg:w="1"/><text x="6.0518%" y="655.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="5.8018%" y="629" width="0.0806%" height="15" fill="rgb(235,213,41)" fg:x="72" fg:w="1"/><text x="6.0518%" y="639.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.8018%" y="613" width="0.0806%" height="15" fill="rgb(213,118,6)" fg:x="72" fg:w="1"/><text x="6.0518%" y="623.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.77%)</title><rect x="4.1902%" y="789" width="1.7728%" height="15" fill="rgb(235,44,51)" fg:x="52" fg:w="22"/><text x="4.4402%" y="799.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (22 samples, 1.77%)</title><rect x="4.1902%" y="773" width="1.7728%" height="15" fill="rgb(217,9,53)" fg:x="52" fg:w="22"/><text x="4.4402%" y="783.50">e..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="5.8824%" y="757" width="0.0806%" height="15" fill="rgb(237,172,34)" fg:x="73" fg:w="1"/><text x="6.1324%" y="767.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="5.8824%" y="741" width="0.0806%" height="15" fill="rgb(206,206,11)" fg:x="73" fg:w="1"/><text x="6.1324%" y="751.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="5.8824%" y="725" width="0.0806%" height="15" fill="rgb(214,149,29)" fg:x="73" fg:w="1"/><text x="6.1324%" y="735.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="5.8824%" y="709" width="0.0806%" height="15" fill="rgb(208,123,3)" fg:x="73" fg:w="1"/><text x="6.1324%" y="719.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.8824%" y="693" width="0.0806%" height="15" fill="rgb(229,126,4)" fg:x="73" fg:w="1"/><text x="6.1324%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.8824%" y="677" width="0.0806%" height="15" fill="rgb(222,92,36)" fg:x="73" fg:w="1"/><text x="6.1324%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.9629%" y="741" width="0.0806%" height="15" fill="rgb(216,39,41)" fg:x="74" fg:w="1"/><text x="6.2129%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.9629%" y="725" width="0.0806%" height="15" fill="rgb(253,127,28)" fg:x="74" fg:w="1"/><text x="6.2129%" y="735.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.9629%" y="709" width="0.0806%" height="15" fill="rgb(249,152,51)" fg:x="74" fg:w="1"/><text x="6.2129%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.9629%" y="693" width="0.0806%" height="15" fill="rgb(209,123,42)" fg:x="74" fg:w="1"/><text x="6.2129%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.9629%" y="677" width="0.0806%" height="15" fill="rgb(241,118,22)" fg:x="74" fg:w="1"/><text x="6.2129%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.9629%" y="661" width="0.0806%" height="15" fill="rgb(208,25,7)" fg:x="74" fg:w="1"/><text x="6.2129%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="5.9629%" y="773" width="0.2417%" height="15" fill="rgb(243,144,39)" fg:x="74" fg:w="3"/><text x="6.2129%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="5.9629%" y="757" width="0.2417%" height="15" fill="rgb(250,50,5)" fg:x="74" fg:w="3"/><text x="6.2129%" y="767.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="6.0435%" y="741" width="0.1612%" height="15" fill="rgb(207,67,11)" fg:x="75" fg:w="2"/><text x="6.2935%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.0435%" y="725" width="0.1612%" height="15" fill="rgb(245,204,40)" fg:x="75" fg:w="2"/><text x="6.2935%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.0435%" y="709" width="0.1612%" height="15" fill="rgb(238,228,24)" fg:x="75" fg:w="2"/><text x="6.2935%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="6.0435%" y="693" width="0.1612%" height="15" fill="rgb(217,116,22)" fg:x="75" fg:w="2"/><text x="6.2935%" y="703.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.0435%" y="677" width="0.1612%" height="15" fill="rgb(234,98,12)" fg:x="75" fg:w="2"/><text x="6.2935%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="6.2047%" y="757" width="0.0806%" height="15" fill="rgb(242,170,50)" fg:x="77" fg:w="1"/><text x="6.4547%" y="767.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.2853%" y="757" width="0.0806%" height="15" fill="rgb(235,7,5)" fg:x="78" fg:w="1"/><text x="6.5353%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.3658%" y="709" width="0.0806%" height="15" fill="rgb(241,114,28)" fg:x="79" fg:w="1"/><text x="6.6158%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.3658%" y="693" width="0.0806%" height="15" fill="rgb(246,112,42)" fg:x="79" fg:w="1"/><text x="6.6158%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.3658%" y="677" width="0.0806%" height="15" fill="rgb(248,228,14)" fg:x="79" fg:w="1"/><text x="6.6158%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3658%" y="661" width="0.0806%" height="15" fill="rgb(208,133,18)" fg:x="79" fg:w="1"/><text x="6.6158%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3658%" y="645" width="0.0806%" height="15" fill="rgb(207,35,49)" fg:x="79" fg:w="1"/><text x="6.6158%" y="655.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="5.9629%" y="789" width="0.5641%" height="15" fill="rgb(205,68,36)" fg:x="74" fg:w="7"/><text x="6.2129%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="6.2047%" y="773" width="0.3223%" height="15" fill="rgb(245,62,40)" fg:x="77" fg:w="4"/><text x="6.4547%" y="783.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="6.3658%" y="757" width="0.1612%" height="15" fill="rgb(228,27,24)" fg:x="79" fg:w="2"/><text x="6.6158%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.3658%" y="741" width="0.1612%" height="15" fill="rgb(253,19,12)" fg:x="79" fg:w="2"/><text x="6.6158%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.3658%" y="725" width="0.1612%" height="15" fill="rgb(232,28,20)" fg:x="79" fg:w="2"/><text x="6.6158%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.4464%" y="709" width="0.0806%" height="15" fill="rgb(218,35,51)" fg:x="80" fg:w="1"/><text x="6.6964%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.4464%" y="693" width="0.0806%" height="15" fill="rgb(212,90,40)" fg:x="80" fg:w="1"/><text x="6.6964%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.4464%" y="677" width="0.0806%" height="15" fill="rgb(220,172,12)" fg:x="80" fg:w="1"/><text x="6.6964%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4464%" y="661" width="0.0806%" height="15" fill="rgb(226,159,20)" fg:x="80" fg:w="1"/><text x="6.6964%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4464%" y="645" width="0.0806%" height="15" fill="rgb(234,205,16)" fg:x="80" fg:w="1"/><text x="6.6964%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.5270%" y="789" width="0.0806%" height="15" fill="rgb(207,9,39)" fg:x="81" fg:w="1"/><text x="6.7770%" y="799.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.5270%" y="773" width="0.0806%" height="15" fill="rgb(249,143,15)" fg:x="81" fg:w="1"/><text x="6.7770%" y="783.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.5270%" y="757" width="0.0806%" height="15" fill="rgb(253,133,29)" fg:x="81" fg:w="1"/><text x="6.7770%" y="767.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.5270%" y="741" width="0.0806%" height="15" fill="rgb(221,187,0)" fg:x="81" fg:w="1"/><text x="6.7770%" y="751.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5270%" y="725" width="0.0806%" height="15" fill="rgb(205,204,26)" fg:x="81" fg:w="1"/><text x="6.7770%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5270%" y="709" width="0.0806%" height="15" fill="rgb(224,68,54)" fg:x="81" fg:w="1"/><text x="6.7770%" y="719.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="6.5270%" y="693" width="0.0806%" height="15" fill="rgb(209,67,4)" fg:x="81" fg:w="1"/><text x="6.7770%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5270%" y="677" width="0.0806%" height="15" fill="rgb(228,229,18)" fg:x="81" fg:w="1"/><text x="6.7770%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.5270%" y="661" width="0.0806%" height="15" fill="rgb(231,89,13)" fg:x="81" fg:w="1"/><text x="6.7770%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5270%" y="645" width="0.0806%" height="15" fill="rgb(210,182,18)" fg:x="81" fg:w="1"/><text x="6.7770%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.6076%" y="773" width="0.0806%" height="15" fill="rgb(240,105,2)" fg:x="82" fg:w="1"/><text x="6.8576%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.6076%" y="757" width="0.0806%" height="15" fill="rgb(207,170,50)" fg:x="82" fg:w="1"/><text x="6.8576%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.6076%" y="741" width="0.0806%" height="15" fill="rgb(232,133,24)" fg:x="82" fg:w="1"/><text x="6.8576%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.6076%" y="725" width="0.0806%" height="15" fill="rgb(235,166,27)" fg:x="82" fg:w="1"/><text x="6.8576%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.6076%" y="709" width="0.0806%" height="15" fill="rgb(209,19,13)" fg:x="82" fg:w="1"/><text x="6.8576%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.6076%" y="693" width="0.0806%" height="15" fill="rgb(226,79,39)" fg:x="82" fg:w="1"/><text x="6.8576%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.6076%" y="677" width="0.0806%" height="15" fill="rgb(222,163,10)" fg:x="82" fg:w="1"/><text x="6.8576%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6076%" y="661" width="0.0806%" height="15" fill="rgb(214,44,19)" fg:x="82" fg:w="1"/><text x="6.8576%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.6076%" y="645" width="0.0806%" height="15" fill="rgb(210,217,13)" fg:x="82" fg:w="1"/><text x="6.8576%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6076%" y="629" width="0.0806%" height="15" fill="rgb(237,61,54)" fg:x="82" fg:w="1"/><text x="6.8576%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.6076%" y="613" width="0.0806%" height="15" fill="rgb(226,184,24)" fg:x="82" fg:w="1"/><text x="6.8576%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6076%" y="597" width="0.0806%" height="15" fill="rgb(223,226,4)" fg:x="82" fg:w="1"/><text x="6.8576%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::moving::model::Occupying&gt;&gt; (1 samples, 0.08%)</title><rect x="6.6882%" y="757" width="0.0806%" height="15" fill="rgb(210,26,41)" fg:x="83" fg:w="1"/><text x="6.9382%" y="767.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="6.6076%" y="789" width="0.2417%" height="15" fill="rgb(220,221,6)" fg:x="82" fg:w="3"/><text x="6.8576%" y="799.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="6.6882%" y="773" width="0.1612%" height="15" fill="rgb(225,89,49)" fg:x="83" fg:w="2"/><text x="6.9382%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.7687%" y="757" width="0.0806%" height="15" fill="rgb(218,70,45)" fg:x="84" fg:w="1"/><text x="7.0187%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.7687%" y="741" width="0.0806%" height="15" fill="rgb(238,166,21)" fg:x="84" fg:w="1"/><text x="7.0187%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.7687%" y="725" width="0.0806%" height="15" fill="rgb(224,141,44)" fg:x="84" fg:w="1"/><text x="7.0187%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7687%" y="709" width="0.0806%" height="15" fill="rgb(230,12,49)" fg:x="84" fg:w="1"/><text x="7.0187%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7687%" y="693" width="0.0806%" height="15" fill="rgb(212,174,12)" fg:x="84" fg:w="1"/><text x="7.0187%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7687%" y="677" width="0.0806%" height="15" fill="rgb(246,67,9)" fg:x="84" fg:w="1"/><text x="7.0187%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7687%" y="661" width="0.0806%" height="15" fill="rgb(239,35,23)" fg:x="84" fg:w="1"/><text x="7.0187%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.8493%" y="773" width="0.0806%" height="15" fill="rgb(211,167,0)" fg:x="85" fg:w="1"/><text x="7.0993%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.8493%" y="757" width="0.0806%" height="15" fill="rgb(225,119,45)" fg:x="85" fg:w="1"/><text x="7.0993%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.8493%" y="741" width="0.0806%" height="15" fill="rgb(210,162,6)" fg:x="85" fg:w="1"/><text x="7.0993%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.8493%" y="725" width="0.0806%" height="15" fill="rgb(208,118,35)" fg:x="85" fg:w="1"/><text x="7.0993%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.8493%" y="709" width="0.0806%" height="15" fill="rgb(239,4,53)" fg:x="85" fg:w="1"/><text x="7.0993%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.8493%" y="693" width="0.0806%" height="15" fill="rgb(213,130,21)" fg:x="85" fg:w="1"/><text x="7.0993%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.8493%" y="677" width="0.0806%" height="15" fill="rgb(235,148,0)" fg:x="85" fg:w="1"/><text x="7.0993%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8493%" y="661" width="0.0806%" height="15" fill="rgb(244,224,18)" fg:x="85" fg:w="1"/><text x="7.0993%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.8493%" y="645" width="0.0806%" height="15" fill="rgb(211,214,4)" fg:x="85" fg:w="1"/><text x="7.0993%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8493%" y="629" width="0.0806%" height="15" fill="rgb(206,119,25)" fg:x="85" fg:w="1"/><text x="7.0993%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.8493%" y="613" width="0.0806%" height="15" fill="rgb(243,93,47)" fg:x="85" fg:w="1"/><text x="7.0993%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.8493%" y="597" width="0.0806%" height="15" fill="rgb(224,194,6)" fg:x="85" fg:w="1"/><text x="7.0993%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (41 samples, 3.30%)</title><rect x="3.7067%" y="805" width="3.3038%" height="15" fill="rgb(243,229,6)" fg:x="46" fg:w="41"/><text x="3.9567%" y="815.50">plu..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="6.8493%" y="789" width="0.1612%" height="15" fill="rgb(207,23,50)" fg:x="85" fg:w="2"/><text x="7.0993%" y="799.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="6.9299%" y="773" width="0.0806%" height="15" fill="rgb(253,192,32)" fg:x="86" fg:w="1"/><text x="7.1799%" y="783.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="6.9299%" y="757" width="0.0806%" height="15" fill="rgb(213,21,6)" fg:x="86" fg:w="1"/><text x="7.1799%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn engine::storage::EntityStorageFactory&gt;&gt; (1 samples, 0.08%)</title><rect x="6.9299%" y="741" width="0.0806%" height="15" fill="rgb(243,151,13)" fg:x="86" fg:w="1"/><text x="7.1799%" y="751.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="7.0105%" y="805" width="0.1612%" height="15" fill="rgb(233,165,41)" fg:x="87" fg:w="2"/><text x="7.2605%" y="815.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.0911%" y="789" width="0.0806%" height="15" fill="rgb(246,176,45)" fg:x="88" fg:w="1"/><text x="7.3411%" y="799.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="7.0911%" y="773" width="0.0806%" height="15" fill="rgb(217,170,52)" fg:x="88" fg:w="1"/><text x="7.3411%" y="783.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="7.0911%" y="757" width="0.0806%" height="15" fill="rgb(214,203,54)" fg:x="88" fg:w="1"/><text x="7.3411%" y="767.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="7.1716%" y="805" width="0.0806%" height="15" fill="rgb(248,215,49)" fg:x="89" fg:w="1"/><text x="7.4216%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.1716%" y="789" width="0.0806%" height="15" fill="rgb(208,46,10)" fg:x="89" fg:w="1"/><text x="7.4216%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.1716%" y="773" width="0.0806%" height="15" fill="rgb(254,5,31)" fg:x="89" fg:w="1"/><text x="7.4216%" y="783.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1716%" y="757" width="0.0806%" height="15" fill="rgb(222,104,33)" fg:x="89" fg:w="1"/><text x="7.4216%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="7.2522%" y="757" width="0.0806%" height="15" fill="rgb(248,49,16)" fg:x="90" fg:w="1"/><text x="7.5022%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="7.2522%" y="741" width="0.0806%" height="15" fill="rgb(232,198,41)" fg:x="90" fg:w="1"/><text x="7.5022%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.2522%" y="725" width="0.0806%" height="15" fill="rgb(214,125,3)" fg:x="90" fg:w="1"/><text x="7.5022%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.2522%" y="709" width="0.0806%" height="15" fill="rgb(229,220,28)" fg:x="90" fg:w="1"/><text x="7.5022%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.2522%" y="693" width="0.0806%" height="15" fill="rgb(222,64,37)" fg:x="90" fg:w="1"/><text x="7.5022%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.2522%" y="677" width="0.0806%" height="15" fill="rgb(249,184,13)" fg:x="90" fg:w="1"/><text x="7.5022%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.2522%" y="661" width="0.0806%" height="15" fill="rgb(252,176,6)" fg:x="90" fg:w="1"/><text x="7.5022%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.3328%" y="581" width="0.0806%" height="15" fill="rgb(228,153,7)" fg:x="91" fg:w="1"/><text x="7.5828%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (74 samples, 5.96%)</title><rect x="1.5310%" y="821" width="5.9629%" height="15" fill="rgb(242,193,5)" fg:x="19" fg:w="74"/><text x="1.7810%" y="831.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="7.2522%" y="805" width="0.2417%" height="15" fill="rgb(232,140,9)" fg:x="90" fg:w="3"/><text x="7.5022%" y="815.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="7.2522%" y="789" width="0.2417%" height="15" fill="rgb(213,222,16)" fg:x="90" fg:w="3"/><text x="7.5022%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.2522%" y="773" width="0.2417%" height="15" fill="rgb(222,75,50)" fg:x="90" fg:w="3"/><text x="7.5022%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.3328%" y="757" width="0.1612%" height="15" fill="rgb(205,180,2)" fg:x="91" fg:w="2"/><text x="7.5828%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.3328%" y="741" width="0.1612%" height="15" fill="rgb(216,34,7)" fg:x="91" fg:w="2"/><text x="7.5828%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.3328%" y="725" width="0.1612%" height="15" fill="rgb(253,16,32)" fg:x="91" fg:w="2"/><text x="7.5828%" y="735.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.3328%" y="709" width="0.1612%" height="15" fill="rgb(208,97,28)" fg:x="91" fg:w="2"/><text x="7.5828%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.3328%" y="693" width="0.1612%" height="15" fill="rgb(225,92,11)" fg:x="91" fg:w="2"/><text x="7.5828%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="7.3328%" y="677" width="0.1612%" height="15" fill="rgb(243,38,12)" fg:x="91" fg:w="2"/><text x="7.5828%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.3328%" y="661" width="0.1612%" height="15" fill="rgb(208,139,16)" fg:x="91" fg:w="2"/><text x="7.5828%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="7.3328%" y="645" width="0.1612%" height="15" fill="rgb(227,24,9)" fg:x="91" fg:w="2"/><text x="7.5828%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.3328%" y="629" width="0.1612%" height="15" fill="rgb(206,62,11)" fg:x="91" fg:w="2"/><text x="7.5828%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="7.3328%" y="613" width="0.1612%" height="15" fill="rgb(228,134,27)" fg:x="91" fg:w="2"/><text x="7.5828%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.3328%" y="597" width="0.1612%" height="15" fill="rgb(205,55,33)" fg:x="91" fg:w="2"/><text x="7.5828%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.4134%" y="581" width="0.0806%" height="15" fill="rgb(243,75,43)" fg:x="92" fg:w="1"/><text x="7.6634%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="7.4940%" y="821" width="0.0806%" height="15" fill="rgb(223,27,42)" fg:x="93" fg:w="1"/><text x="7.7440%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="7.4940%" y="805" width="0.0806%" height="15" fill="rgb(232,189,33)" fg:x="93" fg:w="1"/><text x="7.7440%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="7.4940%" y="789" width="0.0806%" height="15" fill="rgb(210,9,39)" fg:x="93" fg:w="1"/><text x="7.7440%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.4940%" y="773" width="0.0806%" height="15" fill="rgb(242,85,26)" fg:x="93" fg:w="1"/><text x="7.7440%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4940%" y="757" width="0.0806%" height="15" fill="rgb(248,44,4)" fg:x="93" fg:w="1"/><text x="7.7440%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.5745%" y="789" width="0.0806%" height="15" fill="rgb(250,96,46)" fg:x="94" fg:w="1"/><text x="7.8245%" y="799.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.6551%" y="789" width="0.0806%" height="15" fill="rgb(229,116,26)" fg:x="95" fg:w="1"/><text x="7.9051%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="7.6551%" y="773" width="0.0806%" height="15" fill="rgb(246,94,34)" fg:x="95" fg:w="1"/><text x="7.9051%" y="783.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7357%" y="741" width="0.0806%" height="15" fill="rgb(251,73,21)" fg:x="96" fg:w="1"/><text x="7.9857%" y="751.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="7.7357%" y="789" width="0.1612%" height="15" fill="rgb(254,121,25)" fg:x="96" fg:w="2"/><text x="7.9857%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="7.7357%" y="773" width="0.1612%" height="15" fill="rgb(215,161,49)" fg:x="96" fg:w="2"/><text x="7.9857%" y="783.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.7357%" y="757" width="0.1612%" height="15" fill="rgb(221,43,13)" fg:x="96" fg:w="2"/><text x="7.9857%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.8163%" y="741" width="0.0806%" height="15" fill="rgb(249,5,37)" fg:x="97" fg:w="1"/><text x="8.0663%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="7.8969%" y="741" width="0.1612%" height="15" fill="rgb(226,25,44)" fg:x="98" fg:w="2"/><text x="8.1469%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.1386%" y="725" width="0.0806%" height="15" fill="rgb(238,189,16)" fg:x="101" fg:w="1"/><text x="8.3886%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.2192%" y="677" width="0.0806%" height="15" fill="rgb(251,186,8)" fg:x="102" fg:w="1"/><text x="8.4692%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.2192%" y="709" width="0.1612%" height="15" fill="rgb(254,34,31)" fg:x="102" fg:w="2"/><text x="8.4692%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.2192%" y="693" width="0.1612%" height="15" fill="rgb(225,215,27)" fg:x="102" fg:w="2"/><text x="8.4692%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2998%" y="677" width="0.0806%" height="15" fill="rgb(221,192,48)" fg:x="103" fg:w="1"/><text x="8.5498%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.3803%" y="693" width="0.1612%" height="15" fill="rgb(219,137,20)" fg:x="104" fg:w="2"/><text x="8.6303%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7027%" y="661" width="0.0806%" height="15" fill="rgb(219,84,11)" fg:x="108" fg:w="1"/><text x="8.9527%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.7027%" y="645" width="0.0806%" height="15" fill="rgb(224,10,23)" fg:x="108" fg:w="1"/><text x="8.9527%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="8.2192%" y="725" width="0.6446%" height="15" fill="rgb(248,22,39)" fg:x="102" fg:w="8"/><text x="8.4692%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.3803%" y="709" width="0.4835%" height="15" fill="rgb(212,154,20)" fg:x="104" fg:w="6"/><text x="8.6303%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="8.5415%" y="693" width="0.3223%" height="15" fill="rgb(236,199,50)" fg:x="106" fg:w="4"/><text x="8.7915%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.6221%" y="677" width="0.2417%" height="15" fill="rgb(211,9,17)" fg:x="107" fg:w="3"/><text x="8.8721%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7832%" y="661" width="0.0806%" height="15" fill="rgb(243,216,36)" fg:x="109" fg:w="1"/><text x="9.0332%" y="671.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.13%)</title><rect x="7.8969%" y="757" width="1.1281%" height="15" fill="rgb(250,2,10)" fg:x="98" fg:w="14"/><text x="8.1469%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="8.0580%" y="741" width="0.9670%" height="15" fill="rgb(226,50,48)" fg:x="100" fg:w="12"/><text x="8.3080%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.8638%" y="725" width="0.1612%" height="15" fill="rgb(243,81,16)" fg:x="110" fg:w="2"/><text x="9.1138%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.9444%" y="709" width="0.0806%" height="15" fill="rgb(250,14,2)" fg:x="111" fg:w="1"/><text x="9.1944%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.9444%" y="693" width="0.0806%" height="15" fill="rgb(233,135,29)" fg:x="111" fg:w="1"/><text x="9.1944%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1056%" y="709" width="0.0806%" height="15" fill="rgb(224,64,43)" fg:x="113" fg:w="1"/><text x="9.3556%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1861%" y="693" width="0.0806%" height="15" fill="rgb(238,84,13)" fg:x="114" fg:w="1"/><text x="9.4361%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.0250%" y="757" width="0.3223%" height="15" fill="rgb(253,48,26)" fg:x="112" fg:w="4"/><text x="9.2750%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="9.0250%" y="741" width="0.3223%" height="15" fill="rgb(205,223,31)" fg:x="112" fg:w="4"/><text x="9.2750%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.0250%" y="725" width="0.3223%" height="15" fill="rgb(221,41,32)" fg:x="112" fg:w="4"/><text x="9.2750%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.1861%" y="709" width="0.1612%" height="15" fill="rgb(213,158,31)" fg:x="114" fg:w="2"/><text x="9.4361%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.2667%" y="693" width="0.0806%" height="15" fill="rgb(245,126,43)" fg:x="115" fg:w="1"/><text x="9.5167%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.3473%" y="725" width="0.1612%" height="15" fill="rgb(227,7,22)" fg:x="116" fg:w="2"/><text x="9.5973%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="9.3473%" y="709" width="0.1612%" height="15" fill="rgb(252,90,44)" fg:x="116" fg:w="2"/><text x="9.5973%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4279%" y="693" width="0.0806%" height="15" fill="rgb(253,91,0)" fg:x="117" fg:w="1"/><text x="9.6779%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.5890%" y="677" width="0.1612%" height="15" fill="rgb(252,175,49)" fg:x="119" fg:w="2"/><text x="9.8390%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6696%" y="661" width="0.0806%" height="15" fill="rgb(246,150,1)" fg:x="120" fg:w="1"/><text x="9.9196%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6696%" y="645" width="0.0806%" height="15" fill="rgb(241,192,25)" fg:x="120" fg:w="1"/><text x="9.9196%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6696%" y="629" width="0.0806%" height="15" fill="rgb(239,187,11)" fg:x="120" fg:w="1"/><text x="9.9196%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="9.5890%" y="693" width="0.2417%" height="15" fill="rgb(218,202,51)" fg:x="119" fg:w="3"/><text x="9.8390%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.7502%" y="677" width="0.0806%" height="15" fill="rgb(225,176,8)" fg:x="121" fg:w="1"/><text x="10.0002%" y="687.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="9.3473%" y="741" width="0.5641%" height="15" fill="rgb(219,122,41)" fg:x="116" fg:w="7"/><text x="9.5973%" y="751.50"></text></g><g><title>treediff::diff::diff (5 samples, 0.40%)</title><rect x="9.5085%" y="725" width="0.4029%" height="15" fill="rgb(248,140,20)" fg:x="118" fg:w="5"/><text x="9.7585%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.40%)</title><rect x="9.5085%" y="709" width="0.4029%" height="15" fill="rgb(245,41,37)" fg:x="118" fg:w="5"/><text x="9.7585%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.8308%" y="693" width="0.0806%" height="15" fill="rgb(235,82,39)" fg:x="122" fg:w="1"/><text x="10.0808%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2337%" y="661" width="0.0806%" height="15" fill="rgb(230,108,42)" fg:x="127" fg:w="1"/><text x="10.4837%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.3143%" y="661" width="0.0806%" height="15" fill="rgb(215,150,50)" fg:x="128" fg:w="1"/><text x="10.5643%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3143%" y="645" width="0.0806%" height="15" fill="rgb(233,212,5)" fg:x="128" fg:w="1"/><text x="10.5643%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.3143%" y="629" width="0.0806%" height="15" fill="rgb(245,80,22)" fg:x="128" fg:w="1"/><text x="10.5643%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3143%" y="613" width="0.0806%" height="15" fill="rgb(238,129,16)" fg:x="128" fg:w="1"/><text x="10.5643%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3948%" y="629" width="0.0806%" height="15" fill="rgb(240,19,0)" fg:x="129" fg:w="1"/><text x="10.6448%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3948%" y="613" width="0.0806%" height="15" fill="rgb(232,42,35)" fg:x="129" fg:w="1"/><text x="10.6448%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3948%" y="597" width="0.0806%" height="15" fill="rgb(223,130,24)" fg:x="129" fg:w="1"/><text x="10.6448%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="10.4754%" y="613" width="0.4835%" height="15" fill="rgb(237,16,22)" fg:x="130" fg:w="6"/><text x="10.7254%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="10.4754%" y="597" width="0.4835%" height="15" fill="rgb(248,192,20)" fg:x="130" fg:w="6"/><text x="10.7254%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="10.4754%" y="581" width="0.4835%" height="15" fill="rgb(233,167,2)" fg:x="130" fg:w="6"/><text x="10.7254%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="10.4754%" y="565" width="0.4835%" height="15" fill="rgb(252,71,44)" fg:x="130" fg:w="6"/><text x="10.7254%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="10.5560%" y="549" width="0.4029%" height="15" fill="rgb(238,37,47)" fg:x="131" fg:w="5"/><text x="10.8060%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="10.6366%" y="533" width="0.3223%" height="15" fill="rgb(214,202,54)" fg:x="132" fg:w="4"/><text x="10.8866%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="10.6366%" y="517" width="0.3223%" height="15" fill="rgb(254,165,40)" fg:x="132" fg:w="4"/><text x="10.8866%" y="527.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="10.6366%" y="501" width="0.3223%" height="15" fill="rgb(246,173,38)" fg:x="132" fg:w="4"/><text x="10.8866%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.13%)</title><rect x="9.9114%" y="741" width="1.1281%" height="15" fill="rgb(215,3,27)" fg:x="123" fg:w="14"/><text x="10.1614%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.13%)</title><rect x="9.9114%" y="725" width="1.1281%" height="15" fill="rgb(239,169,51)" fg:x="123" fg:w="14"/><text x="10.1614%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.97%)</title><rect x="10.0725%" y="709" width="0.9670%" height="15" fill="rgb(212,5,25)" fg:x="125" fg:w="12"/><text x="10.3225%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.89%)</title><rect x="10.1531%" y="693" width="0.8864%" height="15" fill="rgb(243,45,17)" fg:x="126" fg:w="11"/><text x="10.4031%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.89%)</title><rect x="10.1531%" y="677" width="0.8864%" height="15" fill="rgb(242,97,9)" fg:x="126" fg:w="11"/><text x="10.4031%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="10.3948%" y="661" width="0.6446%" height="15" fill="rgb(228,71,31)" fg:x="129" fg:w="8"/><text x="10.6448%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="10.3948%" y="645" width="0.6446%" height="15" fill="rgb(252,184,16)" fg:x="129" fg:w="8"/><text x="10.6448%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="10.4754%" y="629" width="0.5641%" height="15" fill="rgb(236,169,46)" fg:x="130" fg:w="7"/><text x="10.7254%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9589%" y="613" width="0.0806%" height="15" fill="rgb(207,17,47)" fg:x="136" fg:w="1"/><text x="11.2089%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.2006%" y="645" width="0.1612%" height="15" fill="rgb(206,201,28)" fg:x="139" fg:w="2"/><text x="11.4506%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.2006%" y="629" width="0.1612%" height="15" fill="rgb(224,184,23)" fg:x="139" fg:w="2"/><text x="11.4506%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.2006%" y="613" width="0.1612%" height="15" fill="rgb(208,139,48)" fg:x="139" fg:w="2"/><text x="11.4506%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.2812%" y="597" width="0.0806%" height="15" fill="rgb(208,130,10)" fg:x="140" fg:w="1"/><text x="11.5312%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2812%" y="581" width="0.0806%" height="15" fill="rgb(211,213,45)" fg:x="140" fg:w="1"/><text x="11.5312%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2812%" y="565" width="0.0806%" height="15" fill="rgb(235,100,30)" fg:x="140" fg:w="1"/><text x="11.5312%" y="575.50"></text></g><g><title>engine::session::Session::close (48 samples, 3.87%)</title><rect x="7.5745%" y="821" width="3.8678%" height="15" fill="rgb(206,144,31)" fg:x="94" fg:w="48"/><text x="7.8245%" y="831.50">engi..</text></g><g><title>engine::session::Session::save_entity_changes (48 samples, 3.87%)</title><rect x="7.5745%" y="805" width="3.8678%" height="15" fill="rgb(224,200,26)" fg:x="94" fg:w="48"/><text x="7.8245%" y="815.50">engi..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (44 samples, 3.55%)</title><rect x="7.8969%" y="789" width="3.5455%" height="15" fill="rgb(247,104,53)" fg:x="98" fg:w="44"/><text x="8.1469%" y="799.50">engi..</text></g><g><title>engine::session::SavesEntities::check_for_changes (44 samples, 3.55%)</title><rect x="7.8969%" y="773" width="3.5455%" height="15" fill="rgb(220,14,17)" fg:x="98" fg:w="44"/><text x="8.1469%" y="783.50">engi..</text></g><g><title>kernel::model::any_entity_changes (26 samples, 2.10%)</title><rect x="9.3473%" y="757" width="2.0951%" height="15" fill="rgb(230,140,40)" fg:x="116" fg:w="26"/><text x="9.5973%" y="767.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="11.0395%" y="741" width="0.4029%" height="15" fill="rgb(229,2,41)" fg:x="137" fg:w="5"/><text x="11.2895%" y="751.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="11.0395%" y="725" width="0.4029%" height="15" fill="rgb(232,89,16)" fg:x="137" fg:w="5"/><text x="11.2895%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="11.0395%" y="709" width="0.4029%" height="15" fill="rgb(247,59,52)" fg:x="137" fg:w="5"/><text x="11.2895%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="11.1201%" y="693" width="0.3223%" height="15" fill="rgb(226,110,21)" fg:x="138" fg:w="4"/><text x="11.3701%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="11.1201%" y="677" width="0.3223%" height="15" fill="rgb(224,176,43)" fg:x="138" fg:w="4"/><text x="11.3701%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="11.2006%" y="661" width="0.2417%" height="15" fill="rgb(221,73,6)" fg:x="139" fg:w="3"/><text x="11.4506%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3618%" y="645" width="0.0806%" height="15" fill="rgb(232,78,19)" fg:x="141" fg:w="1"/><text x="11.6118%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3618%" y="629" width="0.0806%" height="15" fill="rgb(233,112,48)" fg:x="141" fg:w="1"/><text x="11.6118%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3618%" y="613" width="0.0806%" height="15" fill="rgb(243,131,47)" fg:x="141" fg:w="1"/><text x="11.6118%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.4424%" y="789" width="0.0806%" height="15" fill="rgb(226,51,1)" fg:x="142" fg:w="1"/><text x="11.6924%" y="799.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="11.5230%" y="725" width="0.0806%" height="15" fill="rgb(247,58,7)" fg:x="143" fg:w="1"/><text x="11.7730%" y="735.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="11.5230%" y="709" width="0.0806%" height="15" fill="rgb(209,7,32)" fg:x="143" fg:w="1"/><text x="11.7730%" y="719.50"></text></g><g><title>&lt;plugins_core::building::parser::MakeItemParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="11.5230%" y="693" width="0.0806%" height="15" fill="rgb(209,39,41)" fg:x="143" fg:w="1"/><text x="11.7730%" y="703.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="11.5230%" y="677" width="0.0806%" height="15" fill="rgb(226,182,46)" fg:x="143" fg:w="1"/><text x="11.7730%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6035%" y="661" width="0.0806%" height="15" fill="rgb(230,219,10)" fg:x="144" fg:w="1"/><text x="11.8535%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.6841%" y="661" width="0.0806%" height="15" fill="rgb(227,175,30)" fg:x="145" fg:w="1"/><text x="11.9341%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="11.6035%" y="677" width="0.2417%" height="15" fill="rgb(217,2,50)" fg:x="144" fg:w="3"/><text x="11.8535%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.7647%" y="661" width="0.0806%" height="15" fill="rgb(229,160,0)" fg:x="146" fg:w="1"/><text x="12.0147%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9259%" y="597" width="0.0806%" height="15" fill="rgb(207,78,37)" fg:x="148" fg:w="1"/><text x="12.1759%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9259%" y="581" width="0.0806%" height="15" fill="rgb(225,57,0)" fg:x="148" fg:w="1"/><text x="12.1759%" y="591.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="11.9259%" y="565" width="0.0806%" height="15" fill="rgb(232,154,2)" fg:x="148" fg:w="1"/><text x="12.1759%" y="575.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.9259%" y="549" width="0.0806%" height="15" fill="rgb(241,212,25)" fg:x="148" fg:w="1"/><text x="12.1759%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.9259%" y="613" width="0.1612%" height="15" fill="rgb(226,69,20)" fg:x="148" fg:w="2"/><text x="12.1759%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0064%" y="597" width="0.0806%" height="15" fill="rgb(247,184,54)" fg:x="149" fg:w="1"/><text x="12.2564%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0064%" y="581" width="0.0806%" height="15" fill="rgb(210,145,0)" fg:x="149" fg:w="1"/><text x="12.2564%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0064%" y="565" width="0.0806%" height="15" fill="rgb(253,82,12)" fg:x="149" fg:w="1"/><text x="12.2564%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0064%" y="549" width="0.0806%" height="15" fill="rgb(245,42,11)" fg:x="149" fg:w="1"/><text x="12.2564%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0064%" y="533" width="0.0806%" height="15" fill="rgb(219,147,32)" fg:x="149" fg:w="1"/><text x="12.2564%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0064%" y="517" width="0.0806%" height="15" fill="rgb(246,12,7)" fg:x="149" fg:w="1"/><text x="12.2564%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0064%" y="501" width="0.0806%" height="15" fill="rgb(243,50,9)" fg:x="149" fg:w="1"/><text x="12.2564%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.0064%" y="485" width="0.0806%" height="15" fill="rgb(219,149,6)" fg:x="149" fg:w="1"/><text x="12.2564%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.0064%" y="469" width="0.0806%" height="15" fill="rgb(241,51,42)" fg:x="149" fg:w="1"/><text x="12.2564%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.0064%" y="453" width="0.0806%" height="15" fill="rgb(226,128,27)" fg:x="149" fg:w="1"/><text x="12.2564%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.0064%" y="437" width="0.0806%" height="15" fill="rgb(244,144,4)" fg:x="149" fg:w="1"/><text x="12.2564%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.0064%" y="421" width="0.0806%" height="15" fill="rgb(221,4,13)" fg:x="149" fg:w="1"/><text x="12.2564%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="12.0064%" y="405" width="0.0806%" height="15" fill="rgb(208,170,28)" fg:x="149" fg:w="1"/><text x="12.2564%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="11.8453%" y="629" width="0.3223%" height="15" fill="rgb(226,131,13)" fg:x="147" fg:w="4"/><text x="12.0953%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0870%" y="613" width="0.0806%" height="15" fill="rgb(215,72,41)" fg:x="150" fg:w="1"/><text x="12.3370%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0870%" y="597" width="0.0806%" height="15" fill="rgb(243,108,20)" fg:x="150" fg:w="1"/><text x="12.3370%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0870%" y="581" width="0.0806%" height="15" fill="rgb(230,189,17)" fg:x="150" fg:w="1"/><text x="12.3370%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0870%" y="565" width="0.0806%" height="15" fill="rgb(220,50,17)" fg:x="150" fg:w="1"/><text x="12.3370%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0870%" y="549" width="0.0806%" height="15" fill="rgb(248,152,48)" fg:x="150" fg:w="1"/><text x="12.3370%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0870%" y="533" width="0.0806%" height="15" fill="rgb(244,91,11)" fg:x="150" fg:w="1"/><text x="12.3370%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0870%" y="517" width="0.0806%" height="15" fill="rgb(220,157,5)" fg:x="150" fg:w="1"/><text x="12.3370%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.0870%" y="501" width="0.0806%" height="15" fill="rgb(253,137,8)" fg:x="150" fg:w="1"/><text x="12.3370%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.0870%" y="485" width="0.0806%" height="15" fill="rgb(217,137,51)" fg:x="150" fg:w="1"/><text x="12.3370%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.0870%" y="469" width="0.0806%" height="15" fill="rgb(218,209,53)" fg:x="150" fg:w="1"/><text x="12.3370%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.0870%" y="453" width="0.0806%" height="15" fill="rgb(249,137,25)" fg:x="150" fg:w="1"/><text x="12.3370%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0870%" y="437" width="0.0806%" height="15" fill="rgb(239,155,26)" fg:x="150" fg:w="1"/><text x="12.3370%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="11.8453%" y="645" width="0.4029%" height="15" fill="rgb(227,85,46)" fg:x="147" fg:w="5"/><text x="12.0953%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1676%" y="629" width="0.0806%" height="15" fill="rgb(251,107,43)" fg:x="151" fg:w="1"/><text x="12.4176%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.1676%" y="613" width="0.0806%" height="15" fill="rgb(234,170,33)" fg:x="151" fg:w="1"/><text x="12.4176%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1676%" y="597" width="0.0806%" height="15" fill="rgb(206,29,35)" fg:x="151" fg:w="1"/><text x="12.4176%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.1676%" y="581" width="0.0806%" height="15" fill="rgb(227,138,25)" fg:x="151" fg:w="1"/><text x="12.4176%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.1676%" y="565" width="0.0806%" height="15" fill="rgb(249,131,35)" fg:x="151" fg:w="1"/><text x="12.4176%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.1676%" y="549" width="0.0806%" height="15" fill="rgb(239,6,40)" fg:x="151" fg:w="1"/><text x="12.4176%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.1676%" y="533" width="0.0806%" height="15" fill="rgb(246,136,47)" fg:x="151" fg:w="1"/><text x="12.4176%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1676%" y="517" width="0.0806%" height="15" fill="rgb(253,58,26)" fg:x="151" fg:w="1"/><text x="12.4176%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.1676%" y="501" width="0.0806%" height="15" fill="rgb(237,141,10)" fg:x="151" fg:w="1"/><text x="12.4176%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.1676%" y="485" width="0.0806%" height="15" fill="rgb(234,156,12)" fg:x="151" fg:w="1"/><text x="12.4176%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.1676%" y="469" width="0.0806%" height="15" fill="rgb(243,224,36)" fg:x="151" fg:w="1"/><text x="12.4176%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.1676%" y="453" width="0.0806%" height="15" fill="rgb(205,229,51)" fg:x="151" fg:w="1"/><text x="12.4176%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.1676%" y="437" width="0.0806%" height="15" fill="rgb(223,189,4)" fg:x="151" fg:w="1"/><text x="12.4176%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1676%" y="421" width="0.0806%" height="15" fill="rgb(249,167,54)" fg:x="151" fg:w="1"/><text x="12.4176%" y="431.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.48%)</title><rect x="11.8453%" y="677" width="0.4835%" height="15" fill="rgb(218,34,28)" fg:x="147" fg:w="6"/><text x="12.0953%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (6 samples, 0.48%)</title><rect x="11.8453%" y="661" width="0.4835%" height="15" fill="rgb(232,109,42)" fg:x="147" fg:w="6"/><text x="12.0953%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="12.2482%" y="645" width="0.0806%" height="15" fill="rgb(248,214,46)" fg:x="152" fg:w="1"/><text x="12.4982%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.3288%" y="533" width="0.0806%" height="15" fill="rgb(244,216,40)" fg:x="153" fg:w="1"/><text x="12.5788%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.3288%" y="517" width="0.0806%" height="15" fill="rgb(231,226,31)" fg:x="153" fg:w="1"/><text x="12.5788%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.3288%" y="501" width="0.0806%" height="15" fill="rgb(238,38,43)" fg:x="153" fg:w="1"/><text x="12.5788%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.3288%" y="485" width="0.0806%" height="15" fill="rgb(208,88,43)" fg:x="153" fg:w="1"/><text x="12.5788%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3288%" y="469" width="0.0806%" height="15" fill="rgb(205,136,37)" fg:x="153" fg:w="1"/><text x="12.5788%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.3288%" y="453" width="0.0806%" height="15" fill="rgb(237,34,14)" fg:x="153" fg:w="1"/><text x="12.5788%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3288%" y="437" width="0.0806%" height="15" fill="rgb(236,193,44)" fg:x="153" fg:w="1"/><text x="12.5788%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.3288%" y="421" width="0.0806%" height="15" fill="rgb(231,48,10)" fg:x="153" fg:w="1"/><text x="12.5788%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3288%" y="405" width="0.0806%" height="15" fill="rgb(213,141,34)" fg:x="153" fg:w="1"/><text x="12.5788%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.3288%" y="389" width="0.0806%" height="15" fill="rgb(249,130,34)" fg:x="153" fg:w="1"/><text x="12.5788%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="12.3288%" y="565" width="0.1612%" height="15" fill="rgb(219,42,41)" fg:x="153" fg:w="2"/><text x="12.5788%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="12.3288%" y="549" width="0.1612%" height="15" fill="rgb(224,100,54)" fg:x="153" fg:w="2"/><text x="12.5788%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.4093%" y="533" width="0.0806%" height="15" fill="rgb(229,200,27)" fg:x="154" fg:w="1"/><text x="12.6593%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.4093%" y="517" width="0.0806%" height="15" fill="rgb(217,118,10)" fg:x="154" fg:w="1"/><text x="12.6593%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.4093%" y="501" width="0.0806%" height="15" fill="rgb(206,22,3)" fg:x="154" fg:w="1"/><text x="12.6593%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.4093%" y="485" width="0.0806%" height="15" fill="rgb(232,163,46)" fg:x="154" fg:w="1"/><text x="12.6593%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4093%" y="469" width="0.0806%" height="15" fill="rgb(206,95,13)" fg:x="154" fg:w="1"/><text x="12.6593%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.4093%" y="453" width="0.0806%" height="15" fill="rgb(253,154,18)" fg:x="154" fg:w="1"/><text x="12.6593%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4093%" y="437" width="0.0806%" height="15" fill="rgb(219,32,23)" fg:x="154" fg:w="1"/><text x="12.6593%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="12.4899%" y="549" width="0.1612%" height="15" fill="rgb(230,191,45)" fg:x="155" fg:w="2"/><text x="12.7399%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="12.4899%" y="533" width="0.1612%" height="15" fill="rgb(229,64,36)" fg:x="155" fg:w="2"/><text x="12.7399%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.4899%" y="517" width="0.1612%" height="15" fill="rgb(205,129,25)" fg:x="155" fg:w="2"/><text x="12.7399%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.4899%" y="501" width="0.1612%" height="15" fill="rgb(254,112,7)" fg:x="155" fg:w="2"/><text x="12.7399%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="12.4899%" y="485" width="0.1612%" height="15" fill="rgb(226,53,48)" fg:x="155" fg:w="2"/><text x="12.7399%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.4899%" y="469" width="0.1612%" height="15" fill="rgb(214,153,38)" fg:x="155" fg:w="2"/><text x="12.7399%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.4899%" y="453" width="0.1612%" height="15" fill="rgb(243,101,7)" fg:x="155" fg:w="2"/><text x="12.7399%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.5705%" y="437" width="0.0806%" height="15" fill="rgb(240,140,22)" fg:x="156" fg:w="1"/><text x="12.8205%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.5705%" y="421" width="0.0806%" height="15" fill="rgb(235,114,2)" fg:x="156" fg:w="1"/><text x="12.8205%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5705%" y="405" width="0.0806%" height="15" fill="rgb(242,59,12)" fg:x="156" fg:w="1"/><text x="12.8205%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5705%" y="389" width="0.0806%" height="15" fill="rgb(252,134,9)" fg:x="156" fg:w="1"/><text x="12.8205%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6511%" y="437" width="0.0806%" height="15" fill="rgb(236,4,44)" fg:x="157" fg:w="1"/><text x="12.9011%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6511%" y="421" width="0.0806%" height="15" fill="rgb(254,172,41)" fg:x="157" fg:w="1"/><text x="12.9011%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6511%" y="405" width="0.0806%" height="15" fill="rgb(244,63,20)" fg:x="157" fg:w="1"/><text x="12.9011%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.7317%" y="421" width="0.0806%" height="15" fill="rgb(250,73,31)" fg:x="158" fg:w="1"/><text x="12.9817%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.7317%" y="405" width="0.0806%" height="15" fill="rgb(241,38,36)" fg:x="158" fg:w="1"/><text x="12.9817%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.7317%" y="389" width="0.0806%" height="15" fill="rgb(245,211,2)" fg:x="158" fg:w="1"/><text x="12.9817%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.7317%" y="373" width="0.0806%" height="15" fill="rgb(206,120,28)" fg:x="158" fg:w="1"/><text x="12.9817%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.7317%" y="357" width="0.0806%" height="15" fill="rgb(211,59,34)" fg:x="158" fg:w="1"/><text x="12.9817%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.7317%" y="341" width="0.0806%" height="15" fill="rgb(233,168,5)" fg:x="158" fg:w="1"/><text x="12.9817%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.7317%" y="325" width="0.0806%" height="15" fill="rgb(234,33,13)" fg:x="158" fg:w="1"/><text x="12.9817%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.7317%" y="309" width="0.0806%" height="15" fill="rgb(231,150,26)" fg:x="158" fg:w="1"/><text x="12.9817%" y="319.50"></text></g><g><title>engine::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="12.3288%" y="581" width="0.6446%" height="15" fill="rgb(217,191,4)" fg:x="153" fg:w="8"/><text x="12.5788%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.48%)</title><rect x="12.4899%" y="565" width="0.4835%" height="15" fill="rgb(246,198,38)" fg:x="155" fg:w="6"/><text x="12.7399%" y="575.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="12.6511%" y="549" width="0.3223%" height="15" fill="rgb(245,64,37)" fg:x="157" fg:w="4"/><text x="12.9011%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="12.6511%" y="533" width="0.3223%" height="15" fill="rgb(250,30,36)" fg:x="157" fg:w="4"/><text x="12.9011%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="12.6511%" y="517" width="0.3223%" height="15" fill="rgb(217,86,53)" fg:x="157" fg:w="4"/><text x="12.9011%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="12.6511%" y="501" width="0.3223%" height="15" fill="rgb(228,157,16)" fg:x="157" fg:w="4"/><text x="12.9011%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="12.6511%" y="485" width="0.3223%" height="15" fill="rgb(217,59,31)" fg:x="157" fg:w="4"/><text x="12.9011%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="12.6511%" y="469" width="0.3223%" height="15" fill="rgb(237,138,41)" fg:x="157" fg:w="4"/><text x="12.9011%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="12.6511%" y="453" width="0.3223%" height="15" fill="rgb(227,91,49)" fg:x="157" fg:w="4"/><text x="12.9011%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.7317%" y="437" width="0.2417%" height="15" fill="rgb(247,21,44)" fg:x="158" fg:w="3"/><text x="12.9817%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.8122%" y="421" width="0.1612%" height="15" fill="rgb(219,210,51)" fg:x="159" fg:w="2"/><text x="13.0622%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.8122%" y="405" width="0.1612%" height="15" fill="rgb(209,140,6)" fg:x="159" fg:w="2"/><text x="13.0622%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8928%" y="389" width="0.0806%" height="15" fill="rgb(221,188,24)" fg:x="160" fg:w="1"/><text x="13.1428%" y="399.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (9 samples, 0.73%)</title><rect x="12.3288%" y="661" width="0.7252%" height="15" fill="rgb(232,154,20)" fg:x="153" fg:w="9"/><text x="12.5788%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.73%)</title><rect x="12.3288%" y="645" width="0.7252%" height="15" fill="rgb(244,137,50)" fg:x="153" fg:w="9"/><text x="12.5788%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.73%)</title><rect x="12.3288%" y="629" width="0.7252%" height="15" fill="rgb(225,185,43)" fg:x="153" fg:w="9"/><text x="12.5788%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.73%)</title><rect x="12.3288%" y="613" width="0.7252%" height="15" fill="rgb(213,205,38)" fg:x="153" fg:w="9"/><text x="12.5788%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.73%)</title><rect x="12.3288%" y="597" width="0.7252%" height="15" fill="rgb(236,73,12)" fg:x="153" fg:w="9"/><text x="12.5788%" y="607.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="12.9734%" y="581" width="0.0806%" height="15" fill="rgb(235,219,13)" fg:x="161" fg:w="1"/><text x="13.2234%" y="591.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (10 samples, 0.81%)</title><rect x="12.3288%" y="677" width="0.8058%" height="15" fill="rgb(218,59,36)" fg:x="153" fg:w="10"/><text x="12.5788%" y="687.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="13.0540%" y="661" width="0.0806%" height="15" fill="rgb(205,110,39)" fg:x="162" fg:w="1"/><text x="13.3040%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="13.0540%" y="645" width="0.0806%" height="15" fill="rgb(218,206,42)" fg:x="162" fg:w="1"/><text x="13.3040%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="13.0540%" y="629" width="0.0806%" height="15" fill="rgb(248,125,24)" fg:x="162" fg:w="1"/><text x="13.3040%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="13.2151%" y="549" width="0.0806%" height="15" fill="rgb(242,28,27)" fg:x="164" fg:w="1"/><text x="13.4651%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.2151%" y="533" width="0.0806%" height="15" fill="rgb(216,228,15)" fg:x="164" fg:w="1"/><text x="13.4651%" y="543.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="13.2957%" y="501" width="0.0806%" height="15" fill="rgb(235,116,46)" fg:x="165" fg:w="1"/><text x="13.5457%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.2957%" y="485" width="0.0806%" height="15" fill="rgb(224,18,32)" fg:x="165" fg:w="1"/><text x="13.5457%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.2957%" y="469" width="0.0806%" height="15" fill="rgb(252,5,12)" fg:x="165" fg:w="1"/><text x="13.5457%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.3763%" y="437" width="0.0806%" height="15" fill="rgb(251,36,5)" fg:x="166" fg:w="1"/><text x="13.6263%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.3763%" y="421" width="0.0806%" height="15" fill="rgb(217,53,14)" fg:x="166" fg:w="1"/><text x="13.6263%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3763%" y="405" width="0.0806%" height="15" fill="rgb(215,86,45)" fg:x="166" fg:w="1"/><text x="13.6263%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.3763%" y="389" width="0.0806%" height="15" fill="rgb(242,169,11)" fg:x="166" fg:w="1"/><text x="13.6263%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.3763%" y="373" width="0.0806%" height="15" fill="rgb(211,213,45)" fg:x="166" fg:w="1"/><text x="13.6263%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.3763%" y="357" width="0.0806%" height="15" fill="rgb(205,88,11)" fg:x="166" fg:w="1"/><text x="13.6263%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.3763%" y="341" width="0.0806%" height="15" fill="rgb(252,69,26)" fg:x="166" fg:w="1"/><text x="13.6263%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.3763%" y="325" width="0.0806%" height="15" fill="rgb(246,123,37)" fg:x="166" fg:w="1"/><text x="13.6263%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.3763%" y="309" width="0.0806%" height="15" fill="rgb(212,205,5)" fg:x="166" fg:w="1"/><text x="13.6263%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.3763%" y="293" width="0.0806%" height="15" fill="rgb(253,148,0)" fg:x="166" fg:w="1"/><text x="13.6263%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.3763%" y="277" width="0.0806%" height="15" fill="rgb(239,22,4)" fg:x="166" fg:w="1"/><text x="13.6263%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.3763%" y="261" width="0.0806%" height="15" fill="rgb(226,26,53)" fg:x="166" fg:w="1"/><text x="13.6263%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.3763%" y="245" width="0.0806%" height="15" fill="rgb(225,229,45)" fg:x="166" fg:w="1"/><text x="13.6263%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3763%" y="229" width="0.0806%" height="15" fill="rgb(220,60,37)" fg:x="166" fg:w="1"/><text x="13.6263%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.3763%" y="469" width="0.1612%" height="15" fill="rgb(217,180,35)" fg:x="166" fg:w="2"/><text x="13.6263%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.3763%" y="453" width="0.1612%" height="15" fill="rgb(229,7,53)" fg:x="166" fg:w="2"/><text x="13.6263%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4569%" y="437" width="0.0806%" height="15" fill="rgb(254,137,3)" fg:x="167" fg:w="1"/><text x="13.7069%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4569%" y="421" width="0.0806%" height="15" fill="rgb(215,140,41)" fg:x="167" fg:w="1"/><text x="13.7069%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.4569%" y="405" width="0.0806%" height="15" fill="rgb(250,80,15)" fg:x="167" fg:w="1"/><text x="13.7069%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.4569%" y="389" width="0.0806%" height="15" fill="rgb(252,191,6)" fg:x="167" fg:w="1"/><text x="13.7069%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.4569%" y="373" width="0.0806%" height="15" fill="rgb(246,217,18)" fg:x="167" fg:w="1"/><text x="13.7069%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4569%" y="357" width="0.0806%" height="15" fill="rgb(223,93,7)" fg:x="167" fg:w="1"/><text x="13.7069%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4569%" y="341" width="0.0806%" height="15" fill="rgb(225,55,52)" fg:x="167" fg:w="1"/><text x="13.7069%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.4569%" y="325" width="0.0806%" height="15" fill="rgb(240,31,24)" fg:x="167" fg:w="1"/><text x="13.7069%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.4569%" y="309" width="0.0806%" height="15" fill="rgb(205,56,52)" fg:x="167" fg:w="1"/><text x="13.7069%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.4569%" y="293" width="0.0806%" height="15" fill="rgb(246,146,12)" fg:x="167" fg:w="1"/><text x="13.7069%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.4569%" y="277" width="0.0806%" height="15" fill="rgb(239,84,36)" fg:x="167" fg:w="1"/><text x="13.7069%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="13.4569%" y="261" width="0.0806%" height="15" fill="rgb(207,41,40)" fg:x="167" fg:w="1"/><text x="13.7069%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="13.4569%" y="245" width="0.0806%" height="15" fill="rgb(241,179,25)" fg:x="167" fg:w="1"/><text x="13.7069%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.5375%" y="405" width="0.0806%" height="15" fill="rgb(210,0,34)" fg:x="168" fg:w="1"/><text x="13.7875%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.6180%" y="373" width="0.0806%" height="15" fill="rgb(225,217,29)" fg:x="169" fg:w="1"/><text x="13.8680%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.6180%" y="357" width="0.0806%" height="15" fill="rgb(216,191,38)" fg:x="169" fg:w="1"/><text x="13.8680%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (7 samples, 0.56%)</title><rect x="13.2957%" y="517" width="0.5641%" height="15" fill="rgb(232,140,52)" fg:x="165" fg:w="7"/><text x="13.5457%" y="527.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="13.3763%" y="501" width="0.4835%" height="15" fill="rgb(223,158,51)" fg:x="166" fg:w="6"/><text x="13.6263%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="13.3763%" y="485" width="0.4835%" height="15" fill="rgb(235,29,51)" fg:x="166" fg:w="6"/><text x="13.6263%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="13.5375%" y="469" width="0.3223%" height="15" fill="rgb(215,181,18)" fg:x="168" fg:w="4"/><text x="13.7875%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.5375%" y="453" width="0.3223%" height="15" fill="rgb(227,125,34)" fg:x="168" fg:w="4"/><text x="13.7875%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="13.5375%" y="437" width="0.3223%" height="15" fill="rgb(230,197,49)" fg:x="168" fg:w="4"/><text x="13.7875%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="13.5375%" y="421" width="0.3223%" height="15" fill="rgb(239,141,16)" fg:x="168" fg:w="4"/><text x="13.7875%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="13.6180%" y="405" width="0.2417%" height="15" fill="rgb(225,105,43)" fg:x="169" fg:w="3"/><text x="13.8680%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.6180%" y="389" width="0.2417%" height="15" fill="rgb(214,131,14)" fg:x="169" fg:w="3"/><text x="13.8680%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.6986%" y="373" width="0.1612%" height="15" fill="rgb(229,177,11)" fg:x="170" fg:w="2"/><text x="13.9486%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.6986%" y="357" width="0.1612%" height="15" fill="rgb(231,180,14)" fg:x="170" fg:w="2"/><text x="13.9486%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.6986%" y="341" width="0.1612%" height="15" fill="rgb(232,88,2)" fg:x="170" fg:w="2"/><text x="13.9486%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.6986%" y="325" width="0.1612%" height="15" fill="rgb(205,220,8)" fg:x="170" fg:w="2"/><text x="13.9486%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="13.6986%" y="309" width="0.1612%" height="15" fill="rgb(225,23,53)" fg:x="170" fg:w="2"/><text x="13.9486%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="13.6986%" y="293" width="0.1612%" height="15" fill="rgb(213,62,29)" fg:x="170" fg:w="2"/><text x="13.9486%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.0210%" y="469" width="0.1612%" height="15" fill="rgb(227,75,7)" fg:x="174" fg:w="2"/><text x="14.2710%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.0210%" y="453" width="0.1612%" height="15" fill="rgb(207,105,14)" fg:x="174" fg:w="2"/><text x="14.2710%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1015%" y="437" width="0.0806%" height="15" fill="rgb(245,62,29)" fg:x="175" fg:w="1"/><text x="14.3515%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.1015%" y="421" width="0.0806%" height="15" fill="rgb(236,202,4)" fg:x="175" fg:w="1"/><text x="14.3515%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1821%" y="469" width="0.0806%" height="15" fill="rgb(250,67,1)" fg:x="176" fg:w="1"/><text x="14.4321%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.1821%" y="453" width="0.0806%" height="15" fill="rgb(253,115,44)" fg:x="176" fg:w="1"/><text x="14.4321%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1821%" y="437" width="0.0806%" height="15" fill="rgb(251,139,18)" fg:x="176" fg:w="1"/><text x="14.4321%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1821%" y="421" width="0.0806%" height="15" fill="rgb(218,22,32)" fg:x="176" fg:w="1"/><text x="14.4321%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1821%" y="405" width="0.0806%" height="15" fill="rgb(243,53,5)" fg:x="176" fg:w="1"/><text x="14.4321%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1821%" y="389" width="0.0806%" height="15" fill="rgb(227,56,16)" fg:x="176" fg:w="1"/><text x="14.4321%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.3433%" y="341" width="0.0806%" height="15" fill="rgb(245,53,0)" fg:x="178" fg:w="1"/><text x="14.5933%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.3433%" y="325" width="0.0806%" height="15" fill="rgb(216,170,35)" fg:x="178" fg:w="1"/><text x="14.5933%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="13.8598%" y="517" width="0.6446%" height="15" fill="rgb(211,200,8)" fg:x="172" fg:w="8"/><text x="14.1098%" y="527.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.56%)</title><rect x="13.9404%" y="501" width="0.5641%" height="15" fill="rgb(228,204,44)" fg:x="173" fg:w="7"/><text x="14.1904%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="13.9404%" y="485" width="0.5641%" height="15" fill="rgb(214,121,17)" fg:x="173" fg:w="7"/><text x="14.1904%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="14.2627%" y="469" width="0.2417%" height="15" fill="rgb(233,64,38)" fg:x="177" fg:w="3"/><text x="14.5127%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.2627%" y="453" width="0.2417%" height="15" fill="rgb(253,54,19)" fg:x="177" fg:w="3"/><text x="14.5127%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="14.2627%" y="437" width="0.2417%" height="15" fill="rgb(253,94,18)" fg:x="177" fg:w="3"/><text x="14.5127%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.2627%" y="421" width="0.2417%" height="15" fill="rgb(227,57,52)" fg:x="177" fg:w="3"/><text x="14.5127%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="14.2627%" y="405" width="0.2417%" height="15" fill="rgb(230,228,50)" fg:x="177" fg:w="3"/><text x="14.5127%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.2627%" y="389" width="0.2417%" height="15" fill="rgb(217,205,27)" fg:x="177" fg:w="3"/><text x="14.5127%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.3433%" y="373" width="0.1612%" height="15" fill="rgb(252,71,50)" fg:x="178" fg:w="2"/><text x="14.5933%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.3433%" y="357" width="0.1612%" height="15" fill="rgb(209,86,4)" fg:x="178" fg:w="2"/><text x="14.5933%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4239%" y="341" width="0.0806%" height="15" fill="rgb(229,94,0)" fg:x="179" fg:w="1"/><text x="14.6739%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5044%" y="517" width="0.0806%" height="15" fill="rgb(252,223,21)" fg:x="180" fg:w="1"/><text x="14.7544%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="14.5850%" y="517" width="0.0806%" height="15" fill="rgb(230,210,4)" fg:x="181" fg:w="1"/><text x="14.8350%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.5850%" y="501" width="0.0806%" height="15" fill="rgb(240,149,38)" fg:x="181" fg:w="1"/><text x="14.8350%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="14.6656%" y="229" width="0.0806%" height="15" fill="rgb(254,105,20)" fg:x="182" fg:w="1"/><text x="14.9156%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="14.6656%" y="213" width="0.0806%" height="15" fill="rgb(253,87,46)" fg:x="182" fg:w="1"/><text x="14.9156%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="14.6656%" y="197" width="0.0806%" height="15" fill="rgb(253,116,33)" fg:x="182" fg:w="1"/><text x="14.9156%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.6656%" y="181" width="0.0806%" height="15" fill="rgb(229,198,5)" fg:x="182" fg:w="1"/><text x="14.9156%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="14.6656%" y="469" width="0.1612%" height="15" fill="rgb(242,38,37)" fg:x="182" fg:w="2"/><text x="14.9156%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="14.6656%" y="453" width="0.1612%" height="15" fill="rgb(242,69,53)" fg:x="182" fg:w="2"/><text x="14.9156%" y="463.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.6656%" y="437" width="0.1612%" height="15" fill="rgb(249,80,16)" fg:x="182" fg:w="2"/><text x="14.9156%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="14.6656%" y="421" width="0.1612%" height="15" fill="rgb(206,128,11)" fg:x="182" fg:w="2"/><text x="14.9156%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.6656%" y="405" width="0.1612%" height="15" fill="rgb(212,35,20)" fg:x="182" fg:w="2"/><text x="14.9156%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.6656%" y="389" width="0.1612%" height="15" fill="rgb(236,79,13)" fg:x="182" fg:w="2"/><text x="14.9156%" y="399.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="14.6656%" y="373" width="0.1612%" height="15" fill="rgb(233,123,3)" fg:x="182" fg:w="2"/><text x="14.9156%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="14.6656%" y="357" width="0.1612%" height="15" fill="rgb(214,93,52)" fg:x="182" fg:w="2"/><text x="14.9156%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="14.6656%" y="341" width="0.1612%" height="15" fill="rgb(251,37,40)" fg:x="182" fg:w="2"/><text x="14.9156%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="14.6656%" y="325" width="0.1612%" height="15" fill="rgb(227,80,54)" fg:x="182" fg:w="2"/><text x="14.9156%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="14.6656%" y="309" width="0.1612%" height="15" fill="rgb(254,48,11)" fg:x="182" fg:w="2"/><text x="14.9156%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="14.6656%" y="293" width="0.1612%" height="15" fill="rgb(235,193,26)" fg:x="182" fg:w="2"/><text x="14.9156%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="14.6656%" y="277" width="0.1612%" height="15" fill="rgb(229,99,21)" fg:x="182" fg:w="2"/><text x="14.9156%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="14.6656%" y="261" width="0.1612%" height="15" fill="rgb(211,140,41)" fg:x="182" fg:w="2"/><text x="14.9156%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.6656%" y="245" width="0.1612%" height="15" fill="rgb(240,227,30)" fg:x="182" fg:w="2"/><text x="14.9156%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7462%" y="229" width="0.0806%" height="15" fill="rgb(215,224,45)" fg:x="183" fg:w="1"/><text x="14.9962%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="14.9879%" y="325" width="0.0806%" height="15" fill="rgb(206,123,31)" fg:x="186" fg:w="1"/><text x="15.2379%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="15.0685%" y="325" width="0.0806%" height="15" fill="rgb(210,138,16)" fg:x="187" fg:w="1"/><text x="15.3185%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="14.9073%" y="373" width="0.3223%" height="15" fill="rgb(228,57,28)" fg:x="185" fg:w="4"/><text x="15.1573%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="14.9879%" y="357" width="0.2417%" height="15" fill="rgb(242,170,10)" fg:x="186" fg:w="3"/><text x="15.2379%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="14.9879%" y="341" width="0.2417%" height="15" fill="rgb(228,214,39)" fg:x="186" fg:w="3"/><text x="15.2379%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="15.1491%" y="325" width="0.0806%" height="15" fill="rgb(218,179,33)" fg:x="188" fg:w="1"/><text x="15.3991%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="14.9073%" y="437" width="0.4029%" height="15" fill="rgb(235,193,39)" fg:x="185" fg:w="5"/><text x="15.1573%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="14.9073%" y="421" width="0.4029%" height="15" fill="rgb(219,221,36)" fg:x="185" fg:w="5"/><text x="15.1573%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="14.9073%" y="405" width="0.4029%" height="15" fill="rgb(248,218,19)" fg:x="185" fg:w="5"/><text x="15.1573%" y="415.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.40%)</title><rect x="14.9073%" y="389" width="0.4029%" height="15" fill="rgb(205,50,9)" fg:x="185" fg:w="5"/><text x="15.1573%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="15.2297%" y="373" width="0.0806%" height="15" fill="rgb(238,81,28)" fg:x="189" fg:w="1"/><text x="15.4797%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="15.2297%" y="357" width="0.0806%" height="15" fill="rgb(235,110,19)" fg:x="189" fg:w="1"/><text x="15.4797%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="15.2297%" y="341" width="0.0806%" height="15" fill="rgb(214,7,14)" fg:x="189" fg:w="1"/><text x="15.4797%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.3102%" y="421" width="0.0806%" height="15" fill="rgb(211,77,3)" fg:x="190" fg:w="1"/><text x="15.5602%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="15.3102%" y="405" width="0.0806%" height="15" fill="rgb(229,5,9)" fg:x="190" fg:w="1"/><text x="15.5602%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3102%" y="389" width="0.0806%" height="15" fill="rgb(225,90,11)" fg:x="190" fg:w="1"/><text x="15.5602%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4714%" y="389" width="0.0806%" height="15" fill="rgb(242,56,8)" fg:x="192" fg:w="1"/><text x="15.7214%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="15.5520%" y="389" width="0.0806%" height="15" fill="rgb(249,212,39)" fg:x="193" fg:w="1"/><text x="15.8020%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.5520%" y="373" width="0.0806%" height="15" fill="rgb(236,90,9)" fg:x="193" fg:w="1"/><text x="15.8020%" y="383.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="15.6326%" y="389" width="0.0806%" height="15" fill="rgb(206,88,35)" fg:x="194" fg:w="1"/><text x="15.8826%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6326%" y="373" width="0.0806%" height="15" fill="rgb(205,126,30)" fg:x="194" fg:w="1"/><text x="15.8826%" y="383.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="15.7937%" y="357" width="0.2417%" height="15" fill="rgb(230,176,12)" fg:x="196" fg:w="3"/><text x="16.0437%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (28 samples, 2.26%)</title><rect x="15.7131%" y="373" width="2.2562%" height="15" fill="rgb(243,19,9)" fg:x="195" fg:w="28"/><text x="15.9631%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (24 samples, 1.93%)</title><rect x="16.0355%" y="357" width="1.9339%" height="15" fill="rgb(245,171,17)" fg:x="199" fg:w="24"/><text x="16.2855%" y="367.50">c..</text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="17.7276%" y="341" width="0.2417%" height="15" fill="rgb(227,52,21)" fg:x="220" fg:w="3"/><text x="17.9776%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="18.0500%" y="357" width="0.3223%" height="15" fill="rgb(238,69,14)" fg:x="224" fg:w="4"/><text x="18.3000%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="17.9694%" y="373" width="0.4835%" height="15" fill="rgb(241,156,39)" fg:x="223" fg:w="6"/><text x="18.2194%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="18.3723%" y="357" width="0.0806%" height="15" fill="rgb(212,227,28)" fg:x="228" fg:w="1"/><text x="18.6223%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="18.6946%" y="325" width="0.0806%" height="15" fill="rgb(209,118,27)" fg:x="232" fg:w="1"/><text x="18.9446%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.6946%" y="309" width="0.0806%" height="15" fill="rgb(226,102,5)" fg:x="232" fg:w="1"/><text x="18.9446%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.6946%" y="293" width="0.0806%" height="15" fill="rgb(223,34,3)" fg:x="232" fg:w="1"/><text x="18.9446%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6946%" y="277" width="0.0806%" height="15" fill="rgb(221,81,38)" fg:x="232" fg:w="1"/><text x="18.9446%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="18.8558%" y="309" width="0.1612%" height="15" fill="rgb(236,219,28)" fg:x="234" fg:w="2"/><text x="19.1058%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="19.0169%" y="309" width="0.1612%" height="15" fill="rgb(213,200,14)" fg:x="236" fg:w="2"/><text x="19.2669%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="19.1781%" y="309" width="0.0806%" height="15" fill="rgb(240,33,19)" fg:x="238" fg:w="1"/><text x="19.4281%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.3392%" y="245" width="0.0806%" height="15" fill="rgb(233,113,27)" fg:x="240" fg:w="1"/><text x="19.5892%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="19.3392%" y="277" width="0.2417%" height="15" fill="rgb(220,221,18)" fg:x="240" fg:w="3"/><text x="19.5892%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="19.3392%" y="261" width="0.2417%" height="15" fill="rgb(238,92,8)" fg:x="240" fg:w="3"/><text x="19.5892%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="19.4198%" y="245" width="0.1612%" height="15" fill="rgb(222,164,16)" fg:x="241" fg:w="2"/><text x="19.6698%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="19.2587%" y="309" width="0.6446%" height="15" fill="rgb(241,119,3)" fg:x="239" fg:w="8"/><text x="19.5087%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (7 samples, 0.56%)</title><rect x="19.3392%" y="293" width="0.5641%" height="15" fill="rgb(241,44,8)" fg:x="240" fg:w="7"/><text x="19.5892%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="19.5810%" y="277" width="0.3223%" height="15" fill="rgb(230,36,40)" fg:x="243" fg:w="4"/><text x="19.8310%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8227%" y="261" width="0.0806%" height="15" fill="rgb(243,16,36)" fg:x="246" fg:w="1"/><text x="20.0727%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="19.9033%" y="309" width="0.0806%" height="15" fill="rgb(231,4,26)" fg:x="247" fg:w="1"/><text x="20.1533%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="19.9033%" y="293" width="0.0806%" height="15" fill="rgb(240,9,31)" fg:x="247" fg:w="1"/><text x="20.1533%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (62 samples, 5.00%)</title><rect x="19.9839%" y="309" width="4.9960%" height="15" fill="rgb(207,173,15)" fg:x="248" fg:w="62"/><text x="20.2339%" y="319.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (62 samples, 5.00%)</title><rect x="19.9839%" y="293" width="4.9960%" height="15" fill="rgb(224,192,53)" fg:x="248" fg:w="62"/><text x="20.2339%" y="303.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (62 samples, 5.00%)</title><rect x="19.9839%" y="277" width="4.9960%" height="15" fill="rgb(223,67,28)" fg:x="248" fg:w="62"/><text x="20.2339%" y="287.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="24.9799%" y="309" width="0.3223%" height="15" fill="rgb(211,20,47)" fg:x="310" fg:w="4"/><text x="25.2299%" y="319.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="25.3022%" y="309" width="0.0806%" height="15" fill="rgb(240,228,2)" fg:x="314" fg:w="1"/><text x="25.5522%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 6.93%)</title><rect x="18.5334%" y="357" width="6.9299%" height="15" fill="rgb(248,151,12)" fg:x="230" fg:w="86"/><text x="18.7834%" y="367.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (86 samples, 6.93%)</title><rect x="18.5334%" y="341" width="6.9299%" height="15" fill="rgb(244,8,39)" fg:x="230" fg:w="86"/><text x="18.7834%" y="351.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (83 samples, 6.69%)</title><rect x="18.7752%" y="325" width="6.6882%" height="15" fill="rgb(222,26,8)" fg:x="233" fg:w="83"/><text x="19.0252%" y="335.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="25.3828%" y="309" width="0.0806%" height="15" fill="rgb(213,106,44)" fg:x="315" fg:w="1"/><text x="25.6328%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="25.4633%" y="357" width="0.0806%" height="15" fill="rgb(214,129,20)" fg:x="316" fg:w="1"/><text x="25.7133%" y="367.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="25.6245%" y="341" width="0.0806%" height="15" fill="rgb(212,32,13)" fg:x="318" fg:w="1"/><text x="25.8745%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7051%" y="341" width="0.0806%" height="15" fill="rgb(208,168,33)" fg:x="319" fg:w="1"/><text x="25.9551%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="25.7857%" y="341" width="0.6446%" height="15" fill="rgb(231,207,8)" fg:x="320" fg:w="8"/><text x="26.0357%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="26.1080%" y="325" width="0.3223%" height="15" fill="rgb(235,219,23)" fg:x="324" fg:w="4"/><text x="26.3580%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="26.1080%" y="309" width="0.3223%" height="15" fill="rgb(226,216,26)" fg:x="324" fg:w="4"/><text x="26.3580%" y="319.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="26.1080%" y="293" width="0.3223%" height="15" fill="rgb(239,137,16)" fg:x="324" fg:w="4"/><text x="26.3580%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.9138%" y="325" width="0.0806%" height="15" fill="rgb(207,12,36)" fg:x="334" fg:w="1"/><text x="27.1638%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="26.4303%" y="341" width="0.6446%" height="15" fill="rgb(210,214,24)" fg:x="328" fg:w="8"/><text x="26.6803%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.9944%" y="325" width="0.0806%" height="15" fill="rgb(206,56,30)" fg:x="335" fg:w="1"/><text x="27.2444%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.9944%" y="309" width="0.0806%" height="15" fill="rgb(228,143,26)" fg:x="335" fg:w="1"/><text x="27.2444%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="27.0749%" y="341" width="0.2417%" height="15" fill="rgb(216,218,46)" fg:x="336" fg:w="3"/><text x="27.3249%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (23 samples, 1.85%)</title><rect x="25.5439%" y="357" width="1.8533%" height="15" fill="rgb(206,6,19)" fg:x="317" fg:w="23"/><text x="25.7939%" y="367.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="27.3167%" y="341" width="0.0806%" height="15" fill="rgb(239,177,51)" fg:x="339" fg:w="1"/><text x="27.5667%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (146 samples, 11.76%)</title><rect x="15.7131%" y="389" width="11.7647%" height="15" fill="rgb(216,55,25)" fg:x="195" fg:w="146"/><text x="15.9631%" y="399.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (112 samples, 9.02%)</title><rect x="18.4529%" y="373" width="9.0250%" height="15" fill="rgb(231,163,29)" fg:x="229" fg:w="112"/><text x="18.7029%" y="383.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="27.3973%" y="357" width="0.0806%" height="15" fill="rgb(232,149,50)" fg:x="340" fg:w="1"/><text x="27.6473%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="27.4778%" y="389" width="0.4835%" height="15" fill="rgb(223,142,48)" fg:x="341" fg:w="6"/><text x="27.7278%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="27.4778%" y="373" width="0.4835%" height="15" fill="rgb(245,83,23)" fg:x="341" fg:w="6"/><text x="27.7278%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="27.4778%" y="357" width="0.4835%" height="15" fill="rgb(224,63,2)" fg:x="341" fg:w="6"/><text x="27.7278%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="27.6390%" y="341" width="0.3223%" height="15" fill="rgb(218,65,53)" fg:x="343" fg:w="4"/><text x="27.8890%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="27.6390%" y="325" width="0.3223%" height="15" fill="rgb(221,84,29)" fg:x="343" fg:w="4"/><text x="27.8890%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="27.6390%" y="309" width="0.3223%" height="15" fill="rgb(234,0,32)" fg:x="343" fg:w="4"/><text x="27.8890%" y="319.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="27.6390%" y="293" width="0.3223%" height="15" fill="rgb(206,20,16)" fg:x="343" fg:w="4"/><text x="27.8890%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (159 samples, 12.81%)</title><rect x="15.3908%" y="405" width="12.8122%" height="15" fill="rgb(244,172,18)" fg:x="191" fg:w="159"/><text x="15.6408%" y="415.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="27.9613%" y="389" width="0.2417%" height="15" fill="rgb(254,133,1)" fg:x="347" fg:w="3"/><text x="28.2113%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="27.9613%" y="373" width="0.2417%" height="15" fill="rgb(222,206,41)" fg:x="347" fg:w="3"/><text x="28.2113%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="27.9613%" y="357" width="0.2417%" height="15" fill="rgb(212,3,42)" fg:x="347" fg:w="3"/><text x="28.2113%" y="367.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="27.9613%" y="341" width="0.2417%" height="15" fill="rgb(241,11,4)" fg:x="347" fg:w="3"/><text x="28.2113%" y="351.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (2 samples, 0.16%)</title><rect x="28.0419%" y="325" width="0.1612%" height="15" fill="rgb(205,19,26)" fg:x="348" fg:w="2"/><text x="28.2919%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (161 samples, 12.97%)</title><rect x="15.3102%" y="437" width="12.9734%" height="15" fill="rgb(210,179,32)" fg:x="190" fg:w="161"/><text x="15.5602%" y="447.50">&lt;regex::regex::stri..</text></g><g><title>regex::builders::Builder::build_one_string (160 samples, 12.89%)</title><rect x="15.3908%" y="421" width="12.8928%" height="15" fill="rgb(227,116,49)" fg:x="191" fg:w="160"/><text x="15.6408%" y="431.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="28.2031%" y="405" width="0.0806%" height="15" fill="rgb(211,146,6)" fg:x="350" fg:w="1"/><text x="28.4531%" y="415.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::unicode (1 samples, 0.08%)</title><rect x="28.2031%" y="389" width="0.0806%" height="15" fill="rgb(219,44,39)" fg:x="350" fg:w="1"/><text x="28.4531%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="28.2836%" y="421" width="0.0806%" height="15" fill="rgb(234,128,11)" fg:x="351" fg:w="1"/><text x="28.5336%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="28.3642%" y="389" width="0.0806%" height="15" fill="rgb(220,183,53)" fg:x="352" fg:w="1"/><text x="28.6142%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.3642%" y="373" width="0.0806%" height="15" fill="rgb(213,219,32)" fg:x="352" fg:w="1"/><text x="28.6142%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="28.4448%" y="389" width="0.0806%" height="15" fill="rgb(232,156,16)" fg:x="353" fg:w="1"/><text x="28.6948%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="28.4448%" y="373" width="0.0806%" height="15" fill="rgb(246,135,34)" fg:x="353" fg:w="1"/><text x="28.6948%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.4448%" y="357" width="0.0806%" height="15" fill="rgb(241,99,0)" fg:x="353" fg:w="1"/><text x="28.6948%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="28.3642%" y="405" width="0.2417%" height="15" fill="rgb(222,103,45)" fg:x="352" fg:w="3"/><text x="28.6142%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="28.5254%" y="389" width="0.0806%" height="15" fill="rgb(212,57,4)" fg:x="354" fg:w="1"/><text x="28.7754%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="28.5254%" y="373" width="0.0806%" height="15" fill="rgb(215,68,47)" fg:x="354" fg:w="1"/><text x="28.7754%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="28.2836%" y="437" width="0.4029%" height="15" fill="rgb(230,84,2)" fg:x="351" fg:w="5"/><text x="28.5336%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="28.3642%" y="421" width="0.3223%" height="15" fill="rgb(220,102,14)" fg:x="352" fg:w="4"/><text x="28.6142%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="28.6060%" y="405" width="0.0806%" height="15" fill="rgb(240,10,32)" fg:x="355" fg:w="1"/><text x="28.8560%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="28.6060%" y="389" width="0.0806%" height="15" fill="rgb(215,47,27)" fg:x="355" fg:w="1"/><text x="28.8560%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.6060%" y="373" width="0.0806%" height="15" fill="rgb(233,188,43)" fg:x="355" fg:w="1"/><text x="28.8560%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.6060%" y="357" width="0.0806%" height="15" fill="rgb(253,190,1)" fg:x="355" fg:w="1"/><text x="28.8560%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.0089%" y="325" width="0.0806%" height="15" fill="rgb(206,114,52)" fg:x="360" fg:w="1"/><text x="29.2589%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="29.0089%" y="357" width="0.3223%" height="15" fill="rgb(233,120,37)" fg:x="360" fg:w="4"/><text x="29.2589%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="29.0089%" y="341" width="0.3223%" height="15" fill="rgb(214,52,39)" fg:x="360" fg:w="4"/><text x="29.2589%" y="351.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="29.0894%" y="325" width="0.2417%" height="15" fill="rgb(223,80,29)" fg:x="361" fg:w="3"/><text x="29.3394%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="28.6865%" y="389" width="0.7252%" height="15" fill="rgb(230,101,40)" fg:x="356" fg:w="9"/><text x="28.9365%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="28.6865%" y="373" width="0.7252%" height="15" fill="rgb(219,211,8)" fg:x="356" fg:w="9"/><text x="28.9365%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3312%" y="357" width="0.0806%" height="15" fill="rgb(252,126,28)" fg:x="364" fg:w="1"/><text x="29.5812%" y="367.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (182 samples, 14.67%)</title><rect x="14.8268%" y="453" width="14.6656%" height="15" fill="rgb(215,56,38)" fg:x="184" fg:w="182"/><text x="15.0768%" y="463.50">indefinite::helper::He..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.81%)</title><rect x="28.6865%" y="437" width="0.8058%" height="15" fill="rgb(249,55,44)" fg:x="356" fg:w="10"/><text x="28.9365%" y="447.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="28.6865%" y="421" width="0.8058%" height="15" fill="rgb(220,221,32)" fg:x="356" fg:w="10"/><text x="28.9365%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="28.6865%" y="405" width="0.8058%" height="15" fill="rgb(212,216,41)" fg:x="356" fg:w="10"/><text x="28.9365%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="29.4118%" y="389" width="0.0806%" height="15" fill="rgb(228,213,43)" fg:x="365" fg:w="1"/><text x="29.6618%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="29.4118%" y="373" width="0.0806%" height="15" fill="rgb(211,31,26)" fg:x="365" fg:w="1"/><text x="29.6618%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.4923%" y="357" width="0.0806%" height="15" fill="rgb(229,202,19)" fg:x="366" fg:w="1"/><text x="29.7423%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.4923%" y="341" width="0.0806%" height="15" fill="rgb(229,105,46)" fg:x="366" fg:w="1"/><text x="29.7423%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.4923%" y="325" width="0.0806%" height="15" fill="rgb(235,108,1)" fg:x="366" fg:w="1"/><text x="29.7423%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.4923%" y="309" width="0.0806%" height="15" fill="rgb(245,111,35)" fg:x="366" fg:w="1"/><text x="29.7423%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.5729%" y="357" width="0.0806%" height="15" fill="rgb(219,185,31)" fg:x="367" fg:w="1"/><text x="29.8229%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="29.4923%" y="389" width="0.2417%" height="15" fill="rgb(214,4,43)" fg:x="366" fg:w="3"/><text x="29.7423%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="29.4923%" y="373" width="0.2417%" height="15" fill="rgb(235,227,40)" fg:x="366" fg:w="3"/><text x="29.7423%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.6535%" y="357" width="0.0806%" height="15" fill="rgb(230,88,30)" fg:x="368" fg:w="1"/><text x="29.9035%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="29.7341%" y="389" width="0.4029%" height="15" fill="rgb(216,217,1)" fg:x="369" fg:w="5"/><text x="29.9841%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="29.8147%" y="373" width="0.3223%" height="15" fill="rgb(248,139,50)" fg:x="370" fg:w="4"/><text x="30.0647%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="30.0564%" y="357" width="0.0806%" height="15" fill="rgb(233,1,21)" fg:x="373" fg:w="1"/><text x="30.3064%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="30.0564%" y="341" width="0.0806%" height="15" fill="rgb(215,183,12)" fg:x="373" fg:w="1"/><text x="30.3064%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.0564%" y="325" width="0.0806%" height="15" fill="rgb(229,104,42)" fg:x="373" fg:w="1"/><text x="30.3064%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="30.1370%" y="389" width="0.0806%" height="15" fill="rgb(243,34,48)" fg:x="374" fg:w="1"/><text x="30.3870%" y="399.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="30.2981%" y="357" width="0.2417%" height="15" fill="rgb(239,11,44)" fg:x="376" fg:w="3"/><text x="30.5481%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (25 samples, 2.01%)</title><rect x="30.5399%" y="357" width="2.0145%" height="15" fill="rgb(231,98,35)" fg:x="379" fg:w="25"/><text x="30.7899%" y="367.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.3932%" y="341" width="0.1612%" height="15" fill="rgb(233,28,25)" fg:x="402" fg:w="2"/><text x="32.6432%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (29 samples, 2.34%)</title><rect x="30.2981%" y="373" width="2.3368%" height="15" fill="rgb(234,123,11)" fg:x="376" fg:w="29"/><text x="30.5481%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="32.5544%" y="357" width="0.0806%" height="15" fill="rgb(220,69,3)" fg:x="404" fg:w="1"/><text x="32.8044%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="32.7961%" y="357" width="0.0806%" height="15" fill="rgb(214,64,36)" fg:x="407" fg:w="1"/><text x="33.0461%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="32.6350%" y="373" width="0.3223%" height="15" fill="rgb(211,138,32)" fg:x="405" fg:w="4"/><text x="32.8850%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="32.8767%" y="357" width="0.0806%" height="15" fill="rgb(213,118,47)" fg:x="408" fg:w="1"/><text x="33.1267%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0379%" y="341" width="0.0806%" height="15" fill="rgb(243,124,49)" fg:x="410" fg:w="1"/><text x="33.2879%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.1185%" y="325" width="0.1612%" height="15" fill="rgb(221,30,28)" fg:x="411" fg:w="2"/><text x="33.3685%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.1185%" y="309" width="0.1612%" height="15" fill="rgb(246,37,13)" fg:x="411" fg:w="2"/><text x="33.3685%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="33.1185%" y="293" width="0.1612%" height="15" fill="rgb(249,66,14)" fg:x="411" fg:w="2"/><text x="33.3685%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="33.1185%" y="341" width="0.2417%" height="15" fill="rgb(213,166,5)" fg:x="411" fg:w="3"/><text x="33.3685%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.2796%" y="325" width="0.0806%" height="15" fill="rgb(221,66,24)" fg:x="413" fg:w="1"/><text x="33.5296%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.2796%" y="309" width="0.0806%" height="15" fill="rgb(210,132,17)" fg:x="413" fg:w="1"/><text x="33.5296%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.81%)</title><rect x="33.3602%" y="341" width="0.8058%" height="15" fill="rgb(243,202,5)" fg:x="414" fg:w="10"/><text x="33.6102%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="33.6019%" y="325" width="0.5641%" height="15" fill="rgb(233,70,48)" fg:x="417" fg:w="7"/><text x="33.8519%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="33.9243%" y="309" width="0.2417%" height="15" fill="rgb(238,41,26)" fg:x="421" fg:w="3"/><text x="34.1743%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="33.9243%" y="293" width="0.2417%" height="15" fill="rgb(241,19,31)" fg:x="421" fg:w="3"/><text x="34.1743%" y="303.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="33.9243%" y="277" width="0.2417%" height="15" fill="rgb(214,76,10)" fg:x="421" fg:w="3"/><text x="34.1743%" y="287.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.08%)</title><rect x="34.1660%" y="325" width="0.0806%" height="15" fill="rgb(254,202,22)" fg:x="424" fg:w="1"/><text x="34.4160%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="34.2466%" y="325" width="0.2417%" height="15" fill="rgb(214,72,24)" fg:x="425" fg:w="3"/><text x="34.4966%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="34.2466%" y="309" width="0.2417%" height="15" fill="rgb(221,92,46)" fg:x="425" fg:w="3"/><text x="34.4966%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="34.1660%" y="341" width="0.4029%" height="15" fill="rgb(246,13,50)" fg:x="424" fg:w="5"/><text x="34.4160%" y="351.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="34.4883%" y="325" width="0.0806%" height="15" fill="rgb(240,165,38)" fg:x="428" fg:w="1"/><text x="34.7383%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (21 samples, 1.69%)</title><rect x="32.9573%" y="373" width="1.6922%" height="15" fill="rgb(241,24,51)" fg:x="409" fg:w="21"/><text x="33.2073%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (21 samples, 1.69%)</title><rect x="32.9573%" y="357" width="1.6922%" height="15" fill="rgb(227,51,44)" fg:x="409" fg:w="21"/><text x="33.2073%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="34.5689%" y="341" width="0.0806%" height="15" fill="rgb(231,121,3)" fg:x="429" fg:w="1"/><text x="34.8189%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.6495%" y="341" width="0.0806%" height="15" fill="rgb(245,3,41)" fg:x="430" fg:w="1"/><text x="34.8995%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.6495%" y="325" width="0.0806%" height="15" fill="rgb(214,13,26)" fg:x="430" fg:w="1"/><text x="34.8995%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (5 samples, 0.40%)</title><rect x="34.7301%" y="325" width="0.4029%" height="15" fill="rgb(252,75,11)" fg:x="431" fg:w="5"/><text x="34.9801%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="34.7301%" y="309" width="0.4029%" height="15" fill="rgb(218,226,17)" fg:x="431" fg:w="5"/><text x="34.9801%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="34.7301%" y="293" width="0.4029%" height="15" fill="rgb(248,89,38)" fg:x="431" fg:w="5"/><text x="34.9801%" y="303.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="34.7301%" y="277" width="0.4029%" height="15" fill="rgb(237,73,46)" fg:x="431" fg:w="5"/><text x="34.9801%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="36.8251%" y="261" width="0.2417%" height="15" fill="rgb(242,78,33)" fg:x="457" fg:w="3"/><text x="37.0751%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.0669%" y="261" width="0.0806%" height="15" fill="rgb(235,60,3)" fg:x="460" fg:w="1"/><text x="37.3169%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (10 samples, 0.81%)</title><rect x="37.1475%" y="261" width="0.8058%" height="15" fill="rgb(216,172,19)" fg:x="461" fg:w="10"/><text x="37.3975%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="37.5504%" y="245" width="0.4029%" height="15" fill="rgb(227,6,42)" fg:x="466" fg:w="5"/><text x="37.8004%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="37.5504%" y="229" width="0.4029%" height="15" fill="rgb(223,207,42)" fg:x="466" fg:w="5"/><text x="37.8004%" y="239.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="37.5504%" y="213" width="0.4029%" height="15" fill="rgb(246,138,30)" fg:x="466" fg:w="5"/><text x="37.8004%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="37.9533%" y="261" width="0.3223%" height="15" fill="rgb(251,199,47)" fg:x="471" fg:w="4"/><text x="38.2033%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.1144%" y="245" width="0.1612%" height="15" fill="rgb(228,218,44)" fg:x="473" fg:w="2"/><text x="38.3644%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.1144%" y="229" width="0.1612%" height="15" fill="rgb(220,68,6)" fg:x="473" fg:w="2"/><text x="38.3644%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.1144%" y="213" width="0.1612%" height="15" fill="rgb(240,60,26)" fg:x="473" fg:w="2"/><text x="38.3644%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.7591%" y="229" width="0.0806%" height="15" fill="rgb(211,200,19)" fg:x="481" fg:w="1"/><text x="39.0091%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.1620%" y="197" width="0.1612%" height="15" fill="rgb(242,145,30)" fg:x="486" fg:w="2"/><text x="39.4120%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.73%)</title><rect x="38.8396%" y="229" width="0.7252%" height="15" fill="rgb(225,64,13)" fg:x="482" fg:w="9"/><text x="39.0896%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="39.0814%" y="213" width="0.4835%" height="15" fill="rgb(218,103,35)" fg:x="485" fg:w="6"/><text x="39.3314%" y="223.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="39.3231%" y="197" width="0.2417%" height="15" fill="rgb(216,93,46)" fg:x="488" fg:w="3"/><text x="39.5731%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (21 samples, 1.69%)</title><rect x="38.2756%" y="261" width="1.6922%" height="15" fill="rgb(225,159,27)" fg:x="475" fg:w="21"/><text x="38.5256%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (18 samples, 1.45%)</title><rect x="38.5173%" y="245" width="1.4504%" height="15" fill="rgb(225,204,11)" fg:x="478" fg:w="18"/><text x="38.7673%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="39.5649%" y="229" width="0.4029%" height="15" fill="rgb(205,56,4)" fg:x="491" fg:w="5"/><text x="39.8149%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="39.9678%" y="261" width="0.0806%" height="15" fill="rgb(206,6,35)" fg:x="496" fg:w="1"/><text x="40.2178%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="39.9678%" y="245" width="0.0806%" height="15" fill="rgb(247,73,52)" fg:x="496" fg:w="1"/><text x="40.2178%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.0483%" y="245" width="0.0806%" height="15" fill="rgb(246,97,4)" fg:x="497" fg:w="1"/><text x="40.2983%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0483%" y="229" width="0.0806%" height="15" fill="rgb(212,37,15)" fg:x="497" fg:w="1"/><text x="40.2983%" y="239.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="40.0483%" y="213" width="0.0806%" height="15" fill="rgb(208,130,40)" fg:x="497" fg:w="1"/><text x="40.2983%" y="223.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="40.0483%" y="197" width="0.0806%" height="15" fill="rgb(236,55,29)" fg:x="497" fg:w="1"/><text x="40.2983%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.2095%" y="229" width="0.0806%" height="15" fill="rgb(209,156,45)" fg:x="499" fg:w="1"/><text x="40.4595%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (78 samples, 6.29%)</title><rect x="40.0483%" y="261" width="6.2853%" height="15" fill="rgb(249,107,4)" fg:x="497" fg:w="78"/><text x="40.2983%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (77 samples, 6.20%)</title><rect x="40.1289%" y="245" width="6.2047%" height="15" fill="rgb(227,7,13)" fg:x="498" fg:w="77"/><text x="40.3789%" y="255.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (75 samples, 6.04%)</title><rect x="40.2901%" y="229" width="6.0435%" height="15" fill="rgb(250,129,14)" fg:x="500" fg:w="75"/><text x="40.5401%" y="239.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="46.3336%" y="261" width="0.4029%" height="15" fill="rgb(229,92,13)" fg:x="575" fg:w="5"/><text x="46.5836%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 12.49%)</title><rect x="34.6495%" y="357" width="12.4899%" height="15" fill="rgb(245,98,39)" fg:x="430" fg:w="155"/><text x="34.8995%" y="367.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (154 samples, 12.41%)</title><rect x="34.7301%" y="341" width="12.4093%" height="15" fill="rgb(234,135,48)" fg:x="431" fg:w="154"/><text x="34.9801%" y="351.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (149 samples, 12.01%)</title><rect x="35.1330%" y="325" width="12.0064%" height="15" fill="rgb(230,98,28)" fg:x="436" fg:w="149"/><text x="35.3830%" y="335.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (149 samples, 12.01%)</title><rect x="35.1330%" y="309" width="12.0064%" height="15" fill="rgb(223,121,0)" fg:x="436" fg:w="149"/><text x="35.3830%" y="319.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (149 samples, 12.01%)</title><rect x="35.1330%" y="293" width="12.0064%" height="15" fill="rgb(234,173,33)" fg:x="436" fg:w="149"/><text x="35.3830%" y="303.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (149 samples, 12.01%)</title><rect x="35.1330%" y="277" width="12.0064%" height="15" fill="rgb(245,47,8)" fg:x="436" fg:w="149"/><text x="35.3830%" y="287.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="46.7365%" y="261" width="0.4029%" height="15" fill="rgb(205,17,20)" fg:x="580" fg:w="5"/><text x="46.9865%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="46.8977%" y="245" width="0.2417%" height="15" fill="rgb(232,151,16)" fg:x="582" fg:w="3"/><text x="47.1477%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.9782%" y="229" width="0.1612%" height="15" fill="rgb(208,30,32)" fg:x="583" fg:w="2"/><text x="47.2282%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.4617%" y="341" width="0.1612%" height="15" fill="rgb(254,26,3)" fg:x="589" fg:w="2"/><text x="47.7117%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.81%)</title><rect x="47.6229%" y="341" width="0.8058%" height="15" fill="rgb(240,177,30)" fg:x="591" fg:w="10"/><text x="47.8729%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="48.0258%" y="325" width="0.4029%" height="15" fill="rgb(248,76,44)" fg:x="596" fg:w="5"/><text x="48.2758%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="48.0258%" y="309" width="0.4029%" height="15" fill="rgb(241,186,54)" fg:x="596" fg:w="5"/><text x="48.2758%" y="319.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="48.0258%" y="293" width="0.4029%" height="15" fill="rgb(249,171,29)" fg:x="596" fg:w="5"/><text x="48.2758%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.73%)</title><rect x="48.4287%" y="341" width="0.7252%" height="15" fill="rgb(237,151,44)" fg:x="601" fg:w="9"/><text x="48.6787%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.0733%" y="325" width="0.0806%" height="15" fill="rgb(228,174,30)" fg:x="609" fg:w="1"/><text x="49.3233%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="49.1539%" y="341" width="0.1612%" height="15" fill="rgb(252,14,37)" fg:x="610" fg:w="2"/><text x="49.4039%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (28 samples, 2.26%)</title><rect x="47.1394%" y="357" width="2.2562%" height="15" fill="rgb(207,111,40)" fg:x="585" fg:w="28"/><text x="47.3894%" y="367.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="49.3151%" y="341" width="0.0806%" height="15" fill="rgb(248,171,54)" fg:x="612" fg:w="1"/><text x="49.5651%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (239 samples, 19.26%)</title><rect x="30.2176%" y="389" width="19.2587%" height="15" fill="rgb(211,127,2)" fg:x="375" fg:w="239"/><text x="30.4676%" y="399.50">regex_automata::meta::strategy..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (184 samples, 14.83%)</title><rect x="34.6495%" y="373" width="14.8268%" height="15" fill="rgb(236,87,47)" fg:x="430" fg:w="184"/><text x="34.8995%" y="383.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="49.3956%" y="357" width="0.0806%" height="15" fill="rgb(223,190,45)" fg:x="613" fg:w="1"/><text x="49.6456%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="49.6374%" y="341" width="0.0806%" height="15" fill="rgb(215,5,16)" fg:x="616" fg:w="1"/><text x="49.8874%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="49.6374%" y="325" width="0.0806%" height="15" fill="rgb(252,82,33)" fg:x="616" fg:w="1"/><text x="49.8874%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="49.5568%" y="357" width="0.4029%" height="15" fill="rgb(247,213,44)" fg:x="615" fg:w="5"/><text x="49.8068%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="49.7180%" y="341" width="0.2417%" height="15" fill="rgb(205,196,44)" fg:x="617" fg:w="3"/><text x="49.9680%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="49.7180%" y="325" width="0.2417%" height="15" fill="rgb(237,96,54)" fg:x="617" fg:w="3"/><text x="49.9680%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="49.7180%" y="309" width="0.2417%" height="15" fill="rgb(230,113,34)" fg:x="617" fg:w="3"/><text x="49.9680%" y="319.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="49.7180%" y="293" width="0.2417%" height="15" fill="rgb(221,224,12)" fg:x="617" fg:w="3"/><text x="49.9680%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="49.9597%" y="357" width="0.0806%" height="15" fill="rgb(219,112,44)" fg:x="620" fg:w="1"/><text x="50.2097%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="50.0403%" y="357" width="0.0806%" height="15" fill="rgb(210,31,13)" fg:x="621" fg:w="1"/><text x="50.2903%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="50.0403%" y="341" width="0.0806%" height="15" fill="rgb(230,25,16)" fg:x="621" fg:w="1"/><text x="50.2903%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.0403%" y="325" width="0.0806%" height="15" fill="rgb(246,108,53)" fg:x="621" fg:w="1"/><text x="50.2903%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.81%)</title><rect x="49.4762%" y="389" width="0.8058%" height="15" fill="rgb(241,172,50)" fg:x="614" fg:w="10"/><text x="49.7262%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.81%)</title><rect x="49.4762%" y="373" width="0.8058%" height="15" fill="rgb(235,141,10)" fg:x="614" fg:w="10"/><text x="49.7262%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="50.1209%" y="357" width="0.1612%" height="15" fill="rgb(220,174,43)" fg:x="622" fg:w="2"/><text x="50.3709%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="50.2015%" y="341" width="0.0806%" height="15" fill="rgb(215,181,40)" fg:x="623" fg:w="1"/><text x="50.4515%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.6849%" y="325" width="0.0806%" height="15" fill="rgb(230,97,2)" fg:x="629" fg:w="1"/><text x="50.9349%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.6849%" y="309" width="0.0806%" height="15" fill="rgb(211,25,27)" fg:x="629" fg:w="1"/><text x="50.9349%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.6849%" y="293" width="0.0806%" height="15" fill="rgb(230,87,26)" fg:x="629" fg:w="1"/><text x="50.9349%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="50.3626%" y="357" width="0.4835%" height="15" fill="rgb(227,160,17)" fg:x="625" fg:w="6"/><text x="50.6126%" y="367.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="50.3626%" y="341" width="0.4835%" height="15" fill="rgb(244,85,34)" fg:x="625" fg:w="6"/><text x="50.6126%" y="351.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="50.7655%" y="325" width="0.0806%" height="15" fill="rgb(207,70,0)" fg:x="630" fg:w="1"/><text x="51.0155%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="50.8461%" y="357" width="0.1612%" height="15" fill="rgb(223,129,7)" fg:x="631" fg:w="2"/><text x="51.0961%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="50.9267%" y="341" width="0.0806%" height="15" fill="rgb(246,105,7)" fg:x="632" fg:w="1"/><text x="51.1767%" y="351.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (268 samples, 21.60%)</title><rect x="29.4923%" y="437" width="21.5955%" height="15" fill="rgb(215,154,42)" fg:x="366" fg:w="268"/><text x="29.7423%" y="447.50">&lt;regex::regex::string::Regex as co..</text></g><g><title>regex::builders::Builder::build_one_string (268 samples, 21.60%)</title><rect x="29.4923%" y="421" width="21.5955%" height="15" fill="rgb(220,215,30)" fg:x="366" fg:w="268"/><text x="29.7423%" y="431.50">regex::builders::Builder::build_on..</text></g><g><title>regex_automata::meta::regex::Builder::build (268 samples, 21.60%)</title><rect x="29.4923%" y="405" width="21.5955%" height="15" fill="rgb(228,81,51)" fg:x="366" fg:w="268"/><text x="29.7423%" y="415.50">regex_automata::meta::regex::Build..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.81%)</title><rect x="50.2820%" y="389" width="0.8058%" height="15" fill="rgb(247,71,54)" fg:x="624" fg:w="10"/><text x="50.5320%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.81%)</title><rect x="50.2820%" y="373" width="0.8058%" height="15" fill="rgb(234,176,34)" fg:x="624" fg:w="10"/><text x="50.5320%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="51.0073%" y="357" width="0.0806%" height="15" fill="rgb(241,103,54)" fg:x="633" fg:w="1"/><text x="51.2573%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="51.0073%" y="341" width="0.0806%" height="15" fill="rgb(228,22,34)" fg:x="633" fg:w="1"/><text x="51.2573%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.1684%" y="389" width="0.0806%" height="15" fill="rgb(241,179,48)" fg:x="635" fg:w="1"/><text x="51.4184%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="51.0878%" y="437" width="0.2417%" height="15" fill="rgb(235,167,37)" fg:x="634" fg:w="3"/><text x="51.3378%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="51.1684%" y="421" width="0.1612%" height="15" fill="rgb(213,109,30)" fg:x="635" fg:w="2"/><text x="51.4184%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="51.1684%" y="405" width="0.1612%" height="15" fill="rgb(222,172,16)" fg:x="635" fg:w="2"/><text x="51.4184%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="51.2490%" y="389" width="0.0806%" height="15" fill="rgb(233,192,5)" fg:x="636" fg:w="1"/><text x="51.4990%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="51.3296%" y="421" width="0.0806%" height="15" fill="rgb(247,189,41)" fg:x="637" fg:w="1"/><text x="51.5796%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="51.3296%" y="405" width="0.0806%" height="15" fill="rgb(218,134,47)" fg:x="637" fg:w="1"/><text x="51.5796%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="51.3296%" y="389" width="0.0806%" height="15" fill="rgb(216,29,3)" fg:x="637" fg:w="1"/><text x="51.5796%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.3296%" y="373" width="0.0806%" height="15" fill="rgb(246,140,12)" fg:x="637" fg:w="1"/><text x="51.5796%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.3296%" y="357" width="0.0806%" height="15" fill="rgb(230,136,11)" fg:x="637" fg:w="1"/><text x="51.5796%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.3296%" y="341" width="0.0806%" height="15" fill="rgb(247,22,47)" fg:x="637" fg:w="1"/><text x="51.5796%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="51.4907%" y="373" width="0.0806%" height="15" fill="rgb(218,84,22)" fg:x="639" fg:w="1"/><text x="51.7407%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="51.5713%" y="357" width="0.0806%" height="15" fill="rgb(216,87,39)" fg:x="640" fg:w="1"/><text x="51.8213%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="52.0548%" y="341" width="0.1612%" height="15" fill="rgb(221,178,8)" fg:x="646" fg:w="2"/><text x="52.3048%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.0548%" y="325" width="0.1612%" height="15" fill="rgb(230,42,11)" fg:x="646" fg:w="2"/><text x="52.3048%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="52.0548%" y="309" width="0.1612%" height="15" fill="rgb(237,229,4)" fg:x="646" fg:w="2"/><text x="52.3048%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.2160%" y="341" width="0.0806%" height="15" fill="rgb(222,31,33)" fg:x="648" fg:w="1"/><text x="52.4660%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="52.2160%" y="325" width="0.0806%" height="15" fill="rgb(210,17,39)" fg:x="648" fg:w="1"/><text x="52.4660%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="52.2160%" y="309" width="0.0806%" height="15" fill="rgb(244,93,20)" fg:x="648" fg:w="1"/><text x="52.4660%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.13%)</title><rect x="51.6519%" y="357" width="1.1281%" height="15" fill="rgb(210,40,47)" fg:x="641" fg:w="14"/><text x="51.9019%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="52.2965%" y="341" width="0.4835%" height="15" fill="rgb(239,211,47)" fg:x="649" fg:w="6"/><text x="52.5465%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.45%)</title><rect x="51.5713%" y="373" width="1.4504%" height="15" fill="rgb(251,223,49)" fg:x="640" fg:w="18"/><text x="51.8213%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="52.7800%" y="357" width="0.2417%" height="15" fill="rgb(221,149,5)" fg:x="655" fg:w="3"/><text x="53.0300%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.9412%" y="341" width="0.0806%" height="15" fill="rgb(219,224,51)" fg:x="657" fg:w="1"/><text x="53.1912%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.9412%" y="325" width="0.0806%" height="15" fill="rgb(223,7,8)" fg:x="657" fg:w="1"/><text x="53.1912%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.9412%" y="309" width="0.0806%" height="15" fill="rgb(241,217,22)" fg:x="657" fg:w="1"/><text x="53.1912%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (293 samples, 23.61%)</title><rect x="29.4923%" y="453" width="23.6100%" height="15" fill="rgb(248,209,0)" fg:x="366" fg:w="293"/><text x="29.7423%" y="463.50">indefinite::rules::number::Number::che..</text></g><g><title>regex::regex::string::Regex::is_match_at (22 samples, 1.77%)</title><rect x="51.3296%" y="437" width="1.7728%" height="15" fill="rgb(217,205,4)" fg:x="637" fg:w="22"/><text x="51.5796%" y="447.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.69%)</title><rect x="51.4102%" y="421" width="1.6922%" height="15" fill="rgb(228,124,39)" fg:x="638" fg:w="21"/><text x="51.6602%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.69%)</title><rect x="51.4102%" y="405" width="1.6922%" height="15" fill="rgb(250,116,42)" fg:x="638" fg:w="21"/><text x="51.6602%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.69%)</title><rect x="51.4102%" y="389" width="1.6922%" height="15" fill="rgb(223,202,9)" fg:x="638" fg:w="21"/><text x="51.6602%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="53.0218%" y="373" width="0.0806%" height="15" fill="rgb(242,222,40)" fg:x="658" fg:w="1"/><text x="53.2718%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.1023%" y="341" width="0.0806%" height="15" fill="rgb(229,99,46)" fg:x="659" fg:w="1"/><text x="53.3523%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.1023%" y="325" width="0.0806%" height="15" fill="rgb(225,56,46)" fg:x="659" fg:w="1"/><text x="53.3523%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.1023%" y="309" width="0.0806%" height="15" fill="rgb(227,94,5)" fg:x="659" fg:w="1"/><text x="53.3523%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.1023%" y="293" width="0.0806%" height="15" fill="rgb(205,112,38)" fg:x="659" fg:w="1"/><text x="53.3523%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="53.1023%" y="373" width="0.1612%" height="15" fill="rgb(231,133,46)" fg:x="659" fg:w="2"/><text x="53.3523%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="53.1023%" y="357" width="0.1612%" height="15" fill="rgb(217,16,9)" fg:x="659" fg:w="2"/><text x="53.3523%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="53.1829%" y="341" width="0.0806%" height="15" fill="rgb(249,173,9)" fg:x="660" fg:w="1"/><text x="53.4329%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1 samples, 0.08%)</title><rect x="53.1829%" y="325" width="0.0806%" height="15" fill="rgb(205,163,53)" fg:x="660" fg:w="1"/><text x="53.4329%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.2635%" y="373" width="0.0806%" height="15" fill="rgb(217,54,41)" fg:x="661" fg:w="1"/><text x="53.5135%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.3441%" y="341" width="0.0806%" height="15" fill="rgb(228,216,12)" fg:x="662" fg:w="1"/><text x="53.5941%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.3441%" y="325" width="0.0806%" height="15" fill="rgb(244,228,15)" fg:x="662" fg:w="1"/><text x="53.5941%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.3441%" y="309" width="0.0806%" height="15" fill="rgb(221,176,53)" fg:x="662" fg:w="1"/><text x="53.5941%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.3441%" y="293" width="0.0806%" height="15" fill="rgb(205,94,34)" fg:x="662" fg:w="1"/><text x="53.5941%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.4247%" y="341" width="0.0806%" height="15" fill="rgb(213,110,48)" fg:x="663" fg:w="1"/><text x="53.6747%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="53.3441%" y="373" width="0.3223%" height="15" fill="rgb(236,142,28)" fg:x="662" fg:w="4"/><text x="53.5941%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="53.3441%" y="357" width="0.3223%" height="15" fill="rgb(225,135,29)" fg:x="662" fg:w="4"/><text x="53.5941%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="53.5052%" y="341" width="0.1612%" height="15" fill="rgb(252,45,31)" fg:x="664" fg:w="2"/><text x="53.7552%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="53.5052%" y="325" width="0.1612%" height="15" fill="rgb(211,187,50)" fg:x="664" fg:w="2"/><text x="53.7552%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.5858%" y="309" width="0.0806%" height="15" fill="rgb(229,109,7)" fg:x="665" fg:w="1"/><text x="53.8358%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="53.8276%" y="357" width="0.1612%" height="15" fill="rgb(251,131,51)" fg:x="668" fg:w="2"/><text x="54.0776%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="53.8276%" y="341" width="0.1612%" height="15" fill="rgb(251,180,35)" fg:x="668" fg:w="2"/><text x="54.0776%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="53.9887%" y="341" width="0.0806%" height="15" fill="rgb(211,46,32)" fg:x="670" fg:w="1"/><text x="54.2387%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="53.9887%" y="325" width="0.0806%" height="15" fill="rgb(248,123,17)" fg:x="670" fg:w="1"/><text x="54.2387%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="53.9887%" y="309" width="0.0806%" height="15" fill="rgb(227,141,18)" fg:x="670" fg:w="1"/><text x="54.2387%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="53.9887%" y="293" width="0.0806%" height="15" fill="rgb(216,102,9)" fg:x="670" fg:w="1"/><text x="54.2387%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="54.0693%" y="341" width="0.0806%" height="15" fill="rgb(253,47,13)" fg:x="671" fg:w="1"/><text x="54.3193%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="53.9887%" y="357" width="0.2417%" height="15" fill="rgb(226,93,23)" fg:x="670" fg:w="3"/><text x="54.2387%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="54.1499%" y="341" width="0.0806%" height="15" fill="rgb(247,104,17)" fg:x="672" fg:w="1"/><text x="54.3999%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="54.1499%" y="325" width="0.0806%" height="15" fill="rgb(233,203,26)" fg:x="672" fg:w="1"/><text x="54.3999%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="54.3110%" y="341" width="0.1612%" height="15" fill="rgb(244,98,49)" fg:x="674" fg:w="2"/><text x="54.5610%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="54.3110%" y="325" width="0.1612%" height="15" fill="rgb(235,134,22)" fg:x="674" fg:w="2"/><text x="54.5610%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="54.3110%" y="309" width="0.1612%" height="15" fill="rgb(221,70,32)" fg:x="674" fg:w="2"/><text x="54.5610%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="54.3110%" y="293" width="0.1612%" height="15" fill="rgb(238,15,50)" fg:x="674" fg:w="2"/><text x="54.5610%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="54.3916%" y="277" width="0.0806%" height="15" fill="rgb(215,221,48)" fg:x="675" fg:w="1"/><text x="54.6416%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.3916%" y="261" width="0.0806%" height="15" fill="rgb(236,73,3)" fg:x="675" fg:w="1"/><text x="54.6416%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.3916%" y="245" width="0.0806%" height="15" fill="rgb(250,107,11)" fg:x="675" fg:w="1"/><text x="54.6416%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="54.4722%" y="341" width="0.0806%" height="15" fill="rgb(242,39,14)" fg:x="676" fg:w="1"/><text x="54.7222%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="54.5528%" y="325" width="0.2417%" height="15" fill="rgb(248,164,37)" fg:x="677" fg:w="3"/><text x="54.8028%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="54.7945%" y="325" width="0.0806%" height="15" fill="rgb(217,60,12)" fg:x="680" fg:w="1"/><text x="55.0445%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="54.8751%" y="325" width="0.4029%" height="15" fill="rgb(240,125,29)" fg:x="681" fg:w="5"/><text x="55.1251%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="55.2780%" y="325" width="0.1612%" height="15" fill="rgb(208,207,28)" fg:x="686" fg:w="2"/><text x="55.5280%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (23 samples, 1.85%)</title><rect x="53.6664%" y="373" width="1.8533%" height="15" fill="rgb(209,159,27)" fg:x="666" fg:w="23"/><text x="53.9164%" y="383.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (16 samples, 1.29%)</title><rect x="54.2305%" y="357" width="1.2893%" height="15" fill="rgb(251,176,53)" fg:x="673" fg:w="16"/><text x="54.4805%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.97%)</title><rect x="54.5528%" y="341" width="0.9670%" height="15" fill="rgb(211,85,7)" fg:x="677" fg:w="12"/><text x="54.8028%" y="351.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="55.4392%" y="325" width="0.0806%" height="15" fill="rgb(216,64,54)" fg:x="688" fg:w="1"/><text x="55.6892%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.4392%" y="309" width="0.0806%" height="15" fill="rgb(217,54,24)" fg:x="688" fg:w="1"/><text x="55.6892%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="55.5197%" y="325" width="0.1612%" height="15" fill="rgb(208,206,53)" fg:x="689" fg:w="2"/><text x="55.7697%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="55.6003%" y="309" width="0.0806%" height="15" fill="rgb(251,74,39)" fg:x="690" fg:w="1"/><text x="55.8503%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="55.6809%" y="325" width="0.1612%" height="15" fill="rgb(226,47,5)" fg:x="691" fg:w="2"/><text x="55.9309%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="55.7615%" y="309" width="0.0806%" height="15" fill="rgb(234,111,33)" fg:x="692" fg:w="1"/><text x="56.0115%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="55.5197%" y="341" width="0.5641%" height="15" fill="rgb(251,14,10)" fg:x="689" fg:w="7"/><text x="55.7697%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="55.8421%" y="325" width="0.2417%" height="15" fill="rgb(232,43,0)" fg:x="693" fg:w="3"/><text x="56.0921%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="55.8421%" y="309" width="0.2417%" height="15" fill="rgb(222,68,43)" fg:x="693" fg:w="3"/><text x="56.0921%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="55.8421%" y="293" width="0.2417%" height="15" fill="rgb(217,24,23)" fg:x="693" fg:w="3"/><text x="56.0921%" y="303.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="55.8421%" y="277" width="0.2417%" height="15" fill="rgb(229,209,14)" fg:x="693" fg:w="3"/><text x="56.0921%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="56.0838%" y="341" width="0.0806%" height="15" fill="rgb(250,149,48)" fg:x="696" fg:w="1"/><text x="56.3338%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.81%)</title><rect x="55.5197%" y="373" width="0.8058%" height="15" fill="rgb(210,120,37)" fg:x="689" fg:w="10"/><text x="55.7697%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.81%)</title><rect x="55.5197%" y="357" width="0.8058%" height="15" fill="rgb(210,21,8)" fg:x="689" fg:w="10"/><text x="55.7697%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="56.1644%" y="341" width="0.1612%" height="15" fill="rgb(243,145,7)" fg:x="697" fg:w="2"/><text x="56.4144%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.2450%" y="325" width="0.0806%" height="15" fill="rgb(238,178,32)" fg:x="698" fg:w="1"/><text x="56.4950%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2450%" y="309" width="0.0806%" height="15" fill="rgb(222,4,10)" fg:x="698" fg:w="1"/><text x="56.4950%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2450%" y="293" width="0.0806%" height="15" fill="rgb(239,7,37)" fg:x="698" fg:w="1"/><text x="56.4950%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.4061%" y="325" width="0.0806%" height="15" fill="rgb(215,31,37)" fg:x="700" fg:w="1"/><text x="56.6561%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.4061%" y="309" width="0.0806%" height="15" fill="rgb(224,83,33)" fg:x="700" fg:w="1"/><text x="56.6561%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.4061%" y="293" width="0.0806%" height="15" fill="rgb(239,55,3)" fg:x="700" fg:w="1"/><text x="56.6561%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="56.4061%" y="341" width="0.1612%" height="15" fill="rgb(247,92,11)" fg:x="700" fg:w="2"/><text x="56.6561%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="56.4867%" y="325" width="0.0806%" height="15" fill="rgb(239,200,7)" fg:x="701" fg:w="1"/><text x="56.7367%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.4867%" y="309" width="0.0806%" height="15" fill="rgb(227,115,8)" fg:x="701" fg:w="1"/><text x="56.7367%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.4867%" y="293" width="0.0806%" height="15" fill="rgb(215,189,27)" fg:x="701" fg:w="1"/><text x="56.7367%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.4867%" y="277" width="0.0806%" height="15" fill="rgb(251,216,39)" fg:x="701" fg:w="1"/><text x="56.7367%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (45 samples, 3.63%)</title><rect x="53.1023%" y="389" width="3.6261%" height="15" fill="rgb(207,29,47)" fg:x="659" fg:w="45"/><text x="53.3523%" y="399.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="56.3255%" y="373" width="0.4029%" height="15" fill="rgb(210,71,34)" fg:x="699" fg:w="5"/><text x="56.5755%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="56.3255%" y="357" width="0.4029%" height="15" fill="rgb(253,217,51)" fg:x="699" fg:w="5"/><text x="56.5755%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="56.5673%" y="341" width="0.1612%" height="15" fill="rgb(222,117,46)" fg:x="702" fg:w="2"/><text x="56.8173%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="56.6479%" y="325" width="0.0806%" height="15" fill="rgb(226,132,6)" fg:x="703" fg:w="1"/><text x="56.8979%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (46 samples, 3.71%)</title><rect x="53.1023%" y="421" width="3.7067%" height="15" fill="rgb(254,145,51)" fg:x="659" fg:w="46"/><text x="53.3523%" y="431.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (46 samples, 3.71%)</title><rect x="53.1023%" y="405" width="3.7067%" height="15" fill="rgb(231,199,27)" fg:x="659" fg:w="46"/><text x="53.3523%" y="415.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="56.7284%" y="389" width="0.0806%" height="15" fill="rgb(245,158,14)" fg:x="704" fg:w="1"/><text x="56.9784%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="56.8090%" y="421" width="0.0806%" height="15" fill="rgb(240,113,14)" fg:x="705" fg:w="1"/><text x="57.0590%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="56.8090%" y="405" width="0.0806%" height="15" fill="rgb(210,20,13)" fg:x="705" fg:w="1"/><text x="57.0590%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="56.8090%" y="389" width="0.0806%" height="15" fill="rgb(241,144,13)" fg:x="705" fg:w="1"/><text x="57.0590%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="56.8090%" y="373" width="0.0806%" height="15" fill="rgb(235,43,34)" fg:x="705" fg:w="1"/><text x="57.0590%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="56.8896%" y="421" width="0.0806%" height="15" fill="rgb(208,36,20)" fg:x="706" fg:w="1"/><text x="57.1396%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="56.8896%" y="405" width="0.0806%" height="15" fill="rgb(239,204,10)" fg:x="706" fg:w="1"/><text x="57.1396%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.8896%" y="389" width="0.0806%" height="15" fill="rgb(217,84,43)" fg:x="706" fg:w="1"/><text x="57.1396%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.8896%" y="373" width="0.0806%" height="15" fill="rgb(241,170,50)" fg:x="706" fg:w="1"/><text x="57.1396%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.8896%" y="357" width="0.0806%" height="15" fill="rgb(226,205,29)" fg:x="706" fg:w="1"/><text x="57.1396%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="56.9702%" y="357" width="0.5641%" height="15" fill="rgb(233,113,1)" fg:x="707" fg:w="7"/><text x="57.2202%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="57.4537%" y="341" width="0.0806%" height="15" fill="rgb(253,98,13)" fg:x="713" fg:w="1"/><text x="57.7037%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="56.9702%" y="373" width="0.6446%" height="15" fill="rgb(211,115,12)" fg:x="707" fg:w="8"/><text x="57.2202%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="57.5342%" y="357" width="0.0806%" height="15" fill="rgb(208,12,16)" fg:x="714" fg:w="1"/><text x="57.7842%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.5342%" y="341" width="0.0806%" height="15" fill="rgb(237,193,54)" fg:x="714" fg:w="1"/><text x="57.7842%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (57 samples, 4.59%)</title><rect x="53.1023%" y="437" width="4.5931%" height="15" fill="rgb(243,22,42)" fg:x="659" fg:w="57"/><text x="53.3523%" y="447.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="56.9702%" y="421" width="0.7252%" height="15" fill="rgb(233,151,36)" fg:x="707" fg:w="9"/><text x="57.2202%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="56.9702%" y="405" width="0.7252%" height="15" fill="rgb(237,57,45)" fg:x="707" fg:w="9"/><text x="57.2202%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="56.9702%" y="389" width="0.7252%" height="15" fill="rgb(221,88,17)" fg:x="707" fg:w="9"/><text x="57.2202%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="57.6148%" y="373" width="0.0806%" height="15" fill="rgb(230,79,15)" fg:x="715" fg:w="1"/><text x="57.8648%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="57.6148%" y="357" width="0.0806%" height="15" fill="rgb(213,57,13)" fg:x="715" fg:w="1"/><text x="57.8648%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.6148%" y="341" width="0.0806%" height="15" fill="rgb(222,116,39)" fg:x="715" fg:w="1"/><text x="57.8648%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.6148%" y="325" width="0.0806%" height="15" fill="rgb(245,107,2)" fg:x="715" fg:w="1"/><text x="57.8648%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6148%" y="309" width="0.0806%" height="15" fill="rgb(238,1,10)" fg:x="715" fg:w="1"/><text x="57.8648%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (553 samples, 44.56%)</title><rect x="13.2957%" y="533" width="44.5608%" height="15" fill="rgb(249,4,48)" fg:x="165" fg:w="553"/><text x="13.5457%" y="543.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;re..</text></g><g><title>plugins_core::looking::model::qualify_name (536 samples, 43.19%)</title><rect x="14.6656%" y="517" width="43.1910%" height="15" fill="rgb(223,151,18)" fg:x="182" fg:w="536"/><text x="14.9156%" y="527.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (536 samples, 43.19%)</title><rect x="14.6656%" y="501" width="43.1910%" height="15" fill="rgb(227,65,43)" fg:x="182" fg:w="536"/><text x="14.9156%" y="511.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (536 samples, 43.19%)</title><rect x="14.6656%" y="485" width="43.1910%" height="15" fill="rgb(218,40,45)" fg:x="182" fg:w="536"/><text x="14.9156%" y="495.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (534 samples, 43.03%)</title><rect x="14.8268%" y="469" width="43.0298%" height="15" fill="rgb(252,121,31)" fg:x="184" fg:w="534"/><text x="15.0768%" y="479.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (59 samples, 4.75%)</title><rect x="53.1023%" y="453" width="4.7542%" height="15" fill="rgb(219,158,43)" fg:x="659" fg:w="59"/><text x="53.3523%" y="463.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="57.6954%" y="437" width="0.1612%" height="15" fill="rgb(231,162,42)" fg:x="716" fg:w="2"/><text x="57.9454%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="57.8566%" y="501" width="0.0806%" height="15" fill="rgb(217,179,25)" fg:x="718" fg:w="1"/><text x="58.1066%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="57.9371%" y="373" width="0.0806%" height="15" fill="rgb(206,212,31)" fg:x="719" fg:w="1"/><text x="58.1871%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="57.9371%" y="357" width="0.0806%" height="15" fill="rgb(235,144,12)" fg:x="719" fg:w="1"/><text x="58.1871%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="57.9371%" y="341" width="0.0806%" height="15" fill="rgb(213,51,10)" fg:x="719" fg:w="1"/><text x="58.1871%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="57.9371%" y="325" width="0.0806%" height="15" fill="rgb(231,145,14)" fg:x="719" fg:w="1"/><text x="58.1871%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.9371%" y="309" width="0.0806%" height="15" fill="rgb(235,15,28)" fg:x="719" fg:w="1"/><text x="58.1871%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="57.9371%" y="293" width="0.0806%" height="15" fill="rgb(237,206,10)" fg:x="719" fg:w="1"/><text x="58.1871%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="57.9371%" y="277" width="0.0806%" height="15" fill="rgb(236,227,27)" fg:x="719" fg:w="1"/><text x="58.1871%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (3 samples, 0.24%)</title><rect x="57.8566%" y="533" width="0.2417%" height="15" fill="rgb(246,83,35)" fg:x="718" fg:w="3"/><text x="58.1066%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="57.8566%" y="517" width="0.2417%" height="15" fill="rgb(220,136,24)" fg:x="718" fg:w="3"/><text x="58.1066%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="57.9371%" y="501" width="0.1612%" height="15" fill="rgb(217,3,25)" fg:x="719" fg:w="2"/><text x="58.1871%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="57.9371%" y="485" width="0.1612%" height="15" fill="rgb(239,24,14)" fg:x="719" fg:w="2"/><text x="58.1871%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="57.9371%" y="469" width="0.1612%" height="15" fill="rgb(244,16,53)" fg:x="719" fg:w="2"/><text x="58.1871%" y="479.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="57.9371%" y="453" width="0.1612%" height="15" fill="rgb(208,175,44)" fg:x="719" fg:w="2"/><text x="58.1871%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="57.9371%" y="437" width="0.1612%" height="15" fill="rgb(252,18,48)" fg:x="719" fg:w="2"/><text x="58.1871%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="57.9371%" y="421" width="0.1612%" height="15" fill="rgb(234,199,32)" fg:x="719" fg:w="2"/><text x="58.1871%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="57.9371%" y="405" width="0.1612%" height="15" fill="rgb(225,77,54)" fg:x="719" fg:w="2"/><text x="58.1871%" y="415.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="57.9371%" y="389" width="0.1612%" height="15" fill="rgb(225,42,25)" fg:x="719" fg:w="2"/><text x="58.1871%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="58.0177%" y="373" width="0.0806%" height="15" fill="rgb(242,227,46)" fg:x="720" fg:w="1"/><text x="58.2677%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="58.0177%" y="357" width="0.0806%" height="15" fill="rgb(246,197,35)" fg:x="720" fg:w="1"/><text x="58.2677%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="58.0177%" y="341" width="0.0806%" height="15" fill="rgb(215,159,26)" fg:x="720" fg:w="1"/><text x="58.2677%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="58.0177%" y="325" width="0.0806%" height="15" fill="rgb(212,194,50)" fg:x="720" fg:w="1"/><text x="58.2677%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="58.0177%" y="309" width="0.0806%" height="15" fill="rgb(246,132,1)" fg:x="720" fg:w="1"/><text x="58.2677%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="58.0177%" y="293" width="0.0806%" height="15" fill="rgb(217,71,7)" fg:x="720" fg:w="1"/><text x="58.2677%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="58.0177%" y="277" width="0.0806%" height="15" fill="rgb(252,59,32)" fg:x="720" fg:w="1"/><text x="58.2677%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="58.0177%" y="261" width="0.0806%" height="15" fill="rgb(253,204,25)" fg:x="720" fg:w="1"/><text x="58.2677%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="58.0177%" y="245" width="0.0806%" height="15" fill="rgb(232,21,16)" fg:x="720" fg:w="1"/><text x="58.2677%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.0177%" y="229" width="0.0806%" height="15" fill="rgb(248,90,29)" fg:x="720" fg:w="1"/><text x="58.2677%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="58.0177%" y="213" width="0.0806%" height="15" fill="rgb(249,223,7)" fg:x="720" fg:w="1"/><text x="58.2677%" y="223.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="58.0177%" y="197" width="0.0806%" height="15" fill="rgb(231,119,42)" fg:x="720" fg:w="1"/><text x="58.2677%" y="207.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="58.0177%" y="181" width="0.0806%" height="15" fill="rgb(215,41,35)" fg:x="720" fg:w="1"/><text x="58.2677%" y="191.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="58.0177%" y="165" width="0.0806%" height="15" fill="rgb(220,44,45)" fg:x="720" fg:w="1"/><text x="58.2677%" y="175.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="58.0983%" y="501" width="0.2417%" height="15" fill="rgb(253,197,36)" fg:x="721" fg:w="3"/><text x="58.3483%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="58.0983%" y="485" width="0.2417%" height="15" fill="rgb(245,225,54)" fg:x="721" fg:w="3"/><text x="58.3483%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="58.0983%" y="469" width="0.2417%" height="15" fill="rgb(239,94,37)" fg:x="721" fg:w="3"/><text x="58.3483%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.1789%" y="453" width="0.1612%" height="15" fill="rgb(242,217,10)" fg:x="722" fg:w="2"/><text x="58.4289%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.2595%" y="437" width="0.0806%" height="15" fill="rgb(250,193,7)" fg:x="723" fg:w="1"/><text x="58.5095%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.2595%" y="421" width="0.0806%" height="15" fill="rgb(230,104,19)" fg:x="723" fg:w="1"/><text x="58.5095%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.2595%" y="405" width="0.0806%" height="15" fill="rgb(230,181,4)" fg:x="723" fg:w="1"/><text x="58.5095%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.2595%" y="389" width="0.0806%" height="15" fill="rgb(216,219,49)" fg:x="723" fg:w="1"/><text x="58.5095%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.2595%" y="373" width="0.0806%" height="15" fill="rgb(254,144,0)" fg:x="723" fg:w="1"/><text x="58.5095%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="58.2595%" y="357" width="0.0806%" height="15" fill="rgb(205,209,38)" fg:x="723" fg:w="1"/><text x="58.5095%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="58.2595%" y="341" width="0.0806%" height="15" fill="rgb(240,21,42)" fg:x="723" fg:w="1"/><text x="58.5095%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.3400%" y="309" width="0.1612%" height="15" fill="rgb(241,132,3)" fg:x="724" fg:w="2"/><text x="58.5900%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.3400%" y="293" width="0.1612%" height="15" fill="rgb(225,14,2)" fg:x="724" fg:w="2"/><text x="58.5900%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.3400%" y="277" width="0.1612%" height="15" fill="rgb(210,141,35)" fg:x="724" fg:w="2"/><text x="58.5900%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.4206%" y="261" width="0.0806%" height="15" fill="rgb(251,14,44)" fg:x="725" fg:w="1"/><text x="58.6706%" y="271.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="58.3400%" y="389" width="0.2417%" height="15" fill="rgb(247,48,18)" fg:x="724" fg:w="3"/><text x="58.5900%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="58.3400%" y="373" width="0.2417%" height="15" fill="rgb(225,0,40)" fg:x="724" fg:w="3"/><text x="58.5900%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="58.3400%" y="357" width="0.2417%" height="15" fill="rgb(221,31,33)" fg:x="724" fg:w="3"/><text x="58.5900%" y="367.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="58.3400%" y="341" width="0.2417%" height="15" fill="rgb(237,42,40)" fg:x="724" fg:w="3"/><text x="58.5900%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="58.3400%" y="325" width="0.2417%" height="15" fill="rgb(233,51,29)" fg:x="724" fg:w="3"/><text x="58.5900%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.5012%" y="309" width="0.0806%" height="15" fill="rgb(226,58,20)" fg:x="726" fg:w="1"/><text x="58.7512%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5012%" y="293" width="0.0806%" height="15" fill="rgb(208,98,7)" fg:x="726" fg:w="1"/><text x="58.7512%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.5012%" y="277" width="0.0806%" height="15" fill="rgb(228,143,44)" fg:x="726" fg:w="1"/><text x="58.7512%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5012%" y="261" width="0.0806%" height="15" fill="rgb(246,55,38)" fg:x="726" fg:w="1"/><text x="58.7512%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.5012%" y="245" width="0.0806%" height="15" fill="rgb(247,87,16)" fg:x="726" fg:w="1"/><text x="58.7512%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5012%" y="229" width="0.0806%" height="15" fill="rgb(234,129,42)" fg:x="726" fg:w="1"/><text x="58.7512%" y="239.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.5012%" y="213" width="0.0806%" height="15" fill="rgb(220,82,16)" fg:x="726" fg:w="1"/><text x="58.7512%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5012%" y="197" width="0.0806%" height="15" fill="rgb(211,88,4)" fg:x="726" fg:w="1"/><text x="58.7512%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.5012%" y="181" width="0.0806%" height="15" fill="rgb(248,151,21)" fg:x="726" fg:w="1"/><text x="58.7512%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5012%" y="165" width="0.0806%" height="15" fill="rgb(238,163,6)" fg:x="726" fg:w="1"/><text x="58.7512%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.5012%" y="149" width="0.0806%" height="15" fill="rgb(209,183,11)" fg:x="726" fg:w="1"/><text x="58.7512%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.5818%" y="309" width="0.0806%" height="15" fill="rgb(219,37,20)" fg:x="727" fg:w="1"/><text x="58.8318%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.5818%" y="293" width="0.0806%" height="15" fill="rgb(210,158,4)" fg:x="727" fg:w="1"/><text x="58.8318%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.5818%" y="341" width="0.1612%" height="15" fill="rgb(221,167,53)" fg:x="727" fg:w="2"/><text x="58.8318%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.5818%" y="325" width="0.1612%" height="15" fill="rgb(237,151,45)" fg:x="727" fg:w="2"/><text x="58.8318%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6624%" y="309" width="0.0806%" height="15" fill="rgb(231,39,3)" fg:x="728" fg:w="1"/><text x="58.9124%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="58.5818%" y="389" width="0.2417%" height="15" fill="rgb(212,167,28)" fg:x="727" fg:w="3"/><text x="58.8318%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="58.5818%" y="373" width="0.2417%" height="15" fill="rgb(232,178,8)" fg:x="727" fg:w="3"/><text x="58.8318%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="58.5818%" y="357" width="0.2417%" height="15" fill="rgb(225,151,20)" fg:x="727" fg:w="3"/><text x="58.8318%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.7429%" y="341" width="0.0806%" height="15" fill="rgb(238,3,37)" fg:x="729" fg:w="1"/><text x="58.9929%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7429%" y="325" width="0.0806%" height="15" fill="rgb(251,147,42)" fg:x="729" fg:w="1"/><text x="58.9929%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.8235%" y="261" width="0.0806%" height="15" fill="rgb(208,173,10)" fg:x="730" fg:w="1"/><text x="59.0735%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.8235%" y="245" width="0.0806%" height="15" fill="rgb(246,225,4)" fg:x="730" fg:w="1"/><text x="59.0735%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.8235%" y="229" width="0.0806%" height="15" fill="rgb(248,102,6)" fg:x="730" fg:w="1"/><text x="59.0735%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.8235%" y="213" width="0.0806%" height="15" fill="rgb(232,6,21)" fg:x="730" fg:w="1"/><text x="59.0735%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.8235%" y="197" width="0.0806%" height="15" fill="rgb(221,179,22)" fg:x="730" fg:w="1"/><text x="59.0735%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.8235%" y="181" width="0.0806%" height="15" fill="rgb(252,50,20)" fg:x="730" fg:w="1"/><text x="59.0735%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="58.8235%" y="165" width="0.0806%" height="15" fill="rgb(222,56,38)" fg:x="730" fg:w="1"/><text x="59.0735%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="58.8235%" y="149" width="0.0806%" height="15" fill="rgb(206,193,29)" fg:x="730" fg:w="1"/><text x="59.0735%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.8235%" y="133" width="0.0806%" height="15" fill="rgb(239,192,45)" fg:x="730" fg:w="1"/><text x="59.0735%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="58.8235%" y="117" width="0.0806%" height="15" fill="rgb(254,18,36)" fg:x="730" fg:w="1"/><text x="59.0735%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.8235%" y="101" width="0.0806%" height="15" fill="rgb(221,127,11)" fg:x="730" fg:w="1"/><text x="59.0735%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="58.9041%" y="261" width="0.1612%" height="15" fill="rgb(234,146,35)" fg:x="731" fg:w="2"/><text x="59.1541%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="58.9041%" y="245" width="0.1612%" height="15" fill="rgb(254,201,37)" fg:x="731" fg:w="2"/><text x="59.1541%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="58.9041%" y="229" width="0.1612%" height="15" fill="rgb(211,202,23)" fg:x="731" fg:w="2"/><text x="59.1541%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="58.9041%" y="213" width="0.1612%" height="15" fill="rgb(237,91,2)" fg:x="731" fg:w="2"/><text x="59.1541%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="58.9041%" y="197" width="0.1612%" height="15" fill="rgb(226,228,36)" fg:x="731" fg:w="2"/><text x="59.1541%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="58.9041%" y="181" width="0.1612%" height="15" fill="rgb(213,63,50)" fg:x="731" fg:w="2"/><text x="59.1541%" y="191.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="58.8235%" y="373" width="0.3223%" height="15" fill="rgb(235,194,19)" fg:x="730" fg:w="4"/><text x="59.0735%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="58.8235%" y="357" width="0.3223%" height="15" fill="rgb(207,204,18)" fg:x="730" fg:w="4"/><text x="59.0735%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="58.8235%" y="341" width="0.3223%" height="15" fill="rgb(248,8,7)" fg:x="730" fg:w="4"/><text x="59.0735%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="58.8235%" y="325" width="0.3223%" height="15" fill="rgb(223,145,47)" fg:x="730" fg:w="4"/><text x="59.0735%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="58.8235%" y="309" width="0.3223%" height="15" fill="rgb(228,84,11)" fg:x="730" fg:w="4"/><text x="59.0735%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="58.8235%" y="293" width="0.3223%" height="15" fill="rgb(218,76,45)" fg:x="730" fg:w="4"/><text x="59.0735%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="58.8235%" y="277" width="0.3223%" height="15" fill="rgb(223,80,15)" fg:x="730" fg:w="4"/><text x="59.0735%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.0653%" y="261" width="0.0806%" height="15" fill="rgb(219,218,33)" fg:x="733" fg:w="1"/><text x="59.3153%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.0653%" y="245" width="0.0806%" height="15" fill="rgb(208,51,11)" fg:x="733" fg:w="1"/><text x="59.3153%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="59.0653%" y="229" width="0.0806%" height="15" fill="rgb(229,165,39)" fg:x="733" fg:w="1"/><text x="59.3153%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.0653%" y="213" width="0.0806%" height="15" fill="rgb(241,100,24)" fg:x="733" fg:w="1"/><text x="59.3153%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.0653%" y="197" width="0.0806%" height="15" fill="rgb(228,14,23)" fg:x="733" fg:w="1"/><text x="59.3153%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.0653%" y="181" width="0.0806%" height="15" fill="rgb(247,116,52)" fg:x="733" fg:w="1"/><text x="59.3153%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.1459%" y="325" width="0.0806%" height="15" fill="rgb(216,149,33)" fg:x="734" fg:w="1"/><text x="59.3959%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.1459%" y="309" width="0.0806%" height="15" fill="rgb(238,142,29)" fg:x="734" fg:w="1"/><text x="59.3959%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="59.1459%" y="293" width="0.0806%" height="15" fill="rgb(224,83,40)" fg:x="734" fg:w="1"/><text x="59.3959%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.2264%" y="293" width="0.0806%" height="15" fill="rgb(234,165,11)" fg:x="735" fg:w="1"/><text x="59.4764%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.3070%" y="229" width="0.0806%" height="15" fill="rgb(215,96,23)" fg:x="736" fg:w="1"/><text x="59.5570%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.3070%" y="213" width="0.0806%" height="15" fill="rgb(233,179,26)" fg:x="736" fg:w="1"/><text x="59.5570%" y="223.50"></text></g><g><title>engine::internal::Entities::add_persisted (15 samples, 1.21%)</title><rect x="58.3400%" y="405" width="1.2087%" height="15" fill="rgb(225,129,33)" fg:x="724" fg:w="15"/><text x="58.5900%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (9 samples, 0.73%)</title><rect x="58.8235%" y="389" width="0.7252%" height="15" fill="rgb(237,49,13)" fg:x="730" fg:w="9"/><text x="59.0735%" y="399.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="59.1459%" y="373" width="0.4029%" height="15" fill="rgb(211,3,31)" fg:x="734" fg:w="5"/><text x="59.3959%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="59.1459%" y="357" width="0.4029%" height="15" fill="rgb(216,152,19)" fg:x="734" fg:w="5"/><text x="59.3959%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="59.1459%" y="341" width="0.4029%" height="15" fill="rgb(251,121,35)" fg:x="734" fg:w="5"/><text x="59.3959%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="59.2264%" y="325" width="0.3223%" height="15" fill="rgb(210,217,47)" fg:x="735" fg:w="4"/><text x="59.4764%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="59.2264%" y="309" width="0.3223%" height="15" fill="rgb(244,116,22)" fg:x="735" fg:w="4"/><text x="59.4764%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.3070%" y="293" width="0.2417%" height="15" fill="rgb(228,17,21)" fg:x="736" fg:w="3"/><text x="59.5570%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="59.3070%" y="277" width="0.2417%" height="15" fill="rgb(240,149,34)" fg:x="736" fg:w="3"/><text x="59.5570%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.3070%" y="261" width="0.2417%" height="15" fill="rgb(208,125,47)" fg:x="736" fg:w="3"/><text x="59.5570%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="59.3070%" y="245" width="0.2417%" height="15" fill="rgb(249,186,39)" fg:x="736" fg:w="3"/><text x="59.5570%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.3876%" y="229" width="0.1612%" height="15" fill="rgb(240,220,33)" fg:x="737" fg:w="2"/><text x="59.6376%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.4682%" y="213" width="0.0806%" height="15" fill="rgb(243,110,23)" fg:x="738" fg:w="1"/><text x="59.7182%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.4682%" y="197" width="0.0806%" height="15" fill="rgb(219,163,46)" fg:x="738" fg:w="1"/><text x="59.7182%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.4682%" y="181" width="0.0806%" height="15" fill="rgb(216,126,30)" fg:x="738" fg:w="1"/><text x="59.7182%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4682%" y="165" width="0.0806%" height="15" fill="rgb(208,139,11)" fg:x="738" fg:w="1"/><text x="59.7182%" y="175.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (17 samples, 1.37%)</title><rect x="58.3400%" y="501" width="1.3699%" height="15" fill="rgb(213,118,36)" fg:x="724" fg:w="17"/><text x="58.5900%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.37%)</title><rect x="58.3400%" y="485" width="1.3699%" height="15" fill="rgb(226,43,17)" fg:x="724" fg:w="17"/><text x="58.5900%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.37%)</title><rect x="58.3400%" y="469" width="1.3699%" height="15" fill="rgb(254,217,4)" fg:x="724" fg:w="17"/><text x="58.5900%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.37%)</title><rect x="58.3400%" y="453" width="1.3699%" height="15" fill="rgb(210,134,47)" fg:x="724" fg:w="17"/><text x="58.5900%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (17 samples, 1.37%)</title><rect x="58.3400%" y="437" width="1.3699%" height="15" fill="rgb(237,24,49)" fg:x="724" fg:w="17"/><text x="58.5900%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (17 samples, 1.37%)</title><rect x="58.3400%" y="421" width="1.3699%" height="15" fill="rgb(251,39,46)" fg:x="724" fg:w="17"/><text x="58.5900%" y="431.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="59.5488%" y="405" width="0.1612%" height="15" fill="rgb(251,220,3)" fg:x="739" fg:w="2"/><text x="59.7988%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.6293%" y="389" width="0.0806%" height="15" fill="rgb(228,105,12)" fg:x="740" fg:w="1"/><text x="59.8793%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.6293%" y="373" width="0.0806%" height="15" fill="rgb(215,196,1)" fg:x="740" fg:w="1"/><text x="59.8793%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.6293%" y="357" width="0.0806%" height="15" fill="rgb(214,33,39)" fg:x="740" fg:w="1"/><text x="59.8793%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.6293%" y="341" width="0.0806%" height="15" fill="rgb(220,19,52)" fg:x="740" fg:w="1"/><text x="59.8793%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.6293%" y="325" width="0.0806%" height="15" fill="rgb(221,78,38)" fg:x="740" fg:w="1"/><text x="59.8793%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.6293%" y="309" width="0.0806%" height="15" fill="rgb(253,30,16)" fg:x="740" fg:w="1"/><text x="59.8793%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.6293%" y="293" width="0.0806%" height="15" fill="rgb(242,65,0)" fg:x="740" fg:w="1"/><text x="59.8793%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.6293%" y="277" width="0.0806%" height="15" fill="rgb(235,201,12)" fg:x="740" fg:w="1"/><text x="59.8793%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.6293%" y="261" width="0.0806%" height="15" fill="rgb(233,161,9)" fg:x="740" fg:w="1"/><text x="59.8793%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.6293%" y="245" width="0.0806%" height="15" fill="rgb(241,207,41)" fg:x="740" fg:w="1"/><text x="59.8793%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.6293%" y="229" width="0.0806%" height="15" fill="rgb(212,69,46)" fg:x="740" fg:w="1"/><text x="59.8793%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.6293%" y="213" width="0.0806%" height="15" fill="rgb(239,69,45)" fg:x="740" fg:w="1"/><text x="59.8793%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.6293%" y="197" width="0.0806%" height="15" fill="rgb(242,117,48)" fg:x="740" fg:w="1"/><text x="59.8793%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.7099%" y="501" width="0.0806%" height="15" fill="rgb(228,41,36)" fg:x="741" fg:w="1"/><text x="59.9599%" y="511.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (601 samples, 48.43%)</title><rect x="11.6035%" y="693" width="48.4287%" height="15" fill="rgb(212,3,32)" fg:x="144" fg:w="601"/><text x="11.8535%" y="703.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (582 samples, 46.90%)</title><rect x="13.1346%" y="677" width="46.8977%" height="15" fill="rgb(233,41,49)" fg:x="163" fg:w="582"/><text x="13.3846%" y="687.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (582 samples, 46.90%)</title><rect x="13.1346%" y="661" width="46.8977%" height="15" fill="rgb(252,170,49)" fg:x="163" fg:w="582"/><text x="13.3846%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (582 samples, 46.90%)</title><rect x="13.1346%" y="645" width="46.8977%" height="15" fill="rgb(229,53,26)" fg:x="163" fg:w="582"/><text x="13.3846%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (582 samples, 46.90%)</title><rect x="13.1346%" y="629" width="46.8977%" height="15" fill="rgb(217,157,12)" fg:x="163" fg:w="582"/><text x="13.3846%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (582 samples, 46.90%)</title><rect x="13.1346%" y="613" width="46.8977%" height="15" fill="rgb(227,17,9)" fg:x="163" fg:w="582"/><text x="13.3846%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (582 samples, 46.90%)</title><rect x="13.1346%" y="597" width="46.8977%" height="15" fill="rgb(218,84,12)" fg:x="163" fg:w="582"/><text x="13.3846%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (582 samples, 46.90%)</title><rect x="13.1346%" y="581" width="46.8977%" height="15" fill="rgb(212,79,24)" fg:x="163" fg:w="582"/><text x="13.3846%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (582 samples, 46.90%)</title><rect x="13.1346%" y="565" width="46.8977%" height="15" fill="rgb(217,222,37)" fg:x="163" fg:w="582"/><text x="13.3846%" y="575.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perf..</text></g><g><title>plugins_core::looking::model::new_area_observation (580 samples, 46.74%)</title><rect x="13.2957%" y="549" width="46.7365%" height="15" fill="rgb(246,208,8)" fg:x="165" fg:w="580"/><text x="13.5457%" y="559.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (24 samples, 1.93%)</title><rect x="58.0983%" y="533" width="1.9339%" height="15" fill="rgb(244,133,10)" fg:x="721" fg:w="24"/><text x="58.3483%" y="543.50">k..</text></g><g><title>kernel::model::scopes::Scopes::load_scope (24 samples, 1.93%)</title><rect x="58.0983%" y="517" width="1.9339%" height="15" fill="rgb(209,219,41)" fg:x="721" fg:w="24"/><text x="58.3483%" y="527.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="59.7905%" y="501" width="0.2417%" height="15" fill="rgb(253,175,45)" fg:x="742" fg:w="3"/><text x="60.0405%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.7905%" y="485" width="0.2417%" height="15" fill="rgb(235,100,37)" fg:x="742" fg:w="3"/><text x="60.0405%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.9517%" y="469" width="0.0806%" height="15" fill="rgb(225,87,19)" fg:x="744" fg:w="1"/><text x="60.2017%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="60.0322%" y="629" width="0.0806%" height="15" fill="rgb(217,152,17)" fg:x="745" fg:w="1"/><text x="60.2822%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="60.0322%" y="613" width="0.0806%" height="15" fill="rgb(235,72,13)" fg:x="745" fg:w="1"/><text x="60.2822%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="60.0322%" y="597" width="0.0806%" height="15" fill="rgb(233,140,18)" fg:x="745" fg:w="1"/><text x="60.2822%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="60.0322%" y="581" width="0.0806%" height="15" fill="rgb(207,212,28)" fg:x="745" fg:w="1"/><text x="60.2822%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="60.0322%" y="565" width="0.0806%" height="15" fill="rgb(220,130,25)" fg:x="745" fg:w="1"/><text x="60.2822%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.0322%" y="549" width="0.0806%" height="15" fill="rgb(205,55,34)" fg:x="745" fg:w="1"/><text x="60.2822%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.0322%" y="533" width="0.0806%" height="15" fill="rgb(237,54,35)" fg:x="745" fg:w="1"/><text x="60.2822%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.1128%" y="501" width="0.0806%" height="15" fill="rgb(208,67,23)" fg:x="746" fg:w="1"/><text x="60.3628%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.1128%" y="485" width="0.0806%" height="15" fill="rgb(206,207,50)" fg:x="746" fg:w="1"/><text x="60.3628%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.1128%" y="469" width="0.0806%" height="15" fill="rgb(213,211,42)" fg:x="746" fg:w="1"/><text x="60.3628%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1128%" y="453" width="0.0806%" height="15" fill="rgb(252,197,50)" fg:x="746" fg:w="1"/><text x="60.3628%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.1934%" y="469" width="0.0806%" height="15" fill="rgb(251,211,41)" fg:x="747" fg:w="1"/><text x="60.4434%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.1934%" y="453" width="0.0806%" height="15" fill="rgb(229,211,5)" fg:x="747" fg:w="1"/><text x="60.4434%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1934%" y="437" width="0.0806%" height="15" fill="rgb(239,36,31)" fg:x="747" fg:w="1"/><text x="60.4434%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="60.2740%" y="453" width="0.0806%" height="15" fill="rgb(248,67,31)" fg:x="748" fg:w="1"/><text x="60.5240%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="60.2740%" y="437" width="0.0806%" height="15" fill="rgb(249,55,44)" fg:x="748" fg:w="1"/><text x="60.5240%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.2740%" y="421" width="0.0806%" height="15" fill="rgb(216,82,12)" fg:x="748" fg:w="1"/><text x="60.5240%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2740%" y="405" width="0.0806%" height="15" fill="rgb(242,174,1)" fg:x="748" fg:w="1"/><text x="60.5240%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="60.2740%" y="389" width="0.0806%" height="15" fill="rgb(208,120,29)" fg:x="748" fg:w="1"/><text x="60.5240%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.40%)</title><rect x="60.0322%" y="677" width="0.4029%" height="15" fill="rgb(221,105,43)" fg:x="745" fg:w="5"/><text x="60.2822%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="60.0322%" y="661" width="0.4029%" height="15" fill="rgb(234,124,22)" fg:x="745" fg:w="5"/><text x="60.2822%" y="671.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="60.0322%" y="645" width="0.4029%" height="15" fill="rgb(212,23,30)" fg:x="745" fg:w="5"/><text x="60.2822%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="60.1128%" y="629" width="0.3223%" height="15" fill="rgb(219,122,53)" fg:x="746" fg:w="4"/><text x="60.3628%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="60.1128%" y="613" width="0.3223%" height="15" fill="rgb(248,84,24)" fg:x="746" fg:w="4"/><text x="60.3628%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="60.1128%" y="597" width="0.3223%" height="15" fill="rgb(245,115,18)" fg:x="746" fg:w="4"/><text x="60.3628%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="60.1128%" y="581" width="0.3223%" height="15" fill="rgb(227,176,51)" fg:x="746" fg:w="4"/><text x="60.3628%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="60.1128%" y="565" width="0.3223%" height="15" fill="rgb(229,63,42)" fg:x="746" fg:w="4"/><text x="60.3628%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="60.1128%" y="549" width="0.3223%" height="15" fill="rgb(247,202,24)" fg:x="746" fg:w="4"/><text x="60.3628%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="60.1128%" y="533" width="0.3223%" height="15" fill="rgb(244,173,20)" fg:x="746" fg:w="4"/><text x="60.3628%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="60.1128%" y="517" width="0.3223%" height="15" fill="rgb(242,81,47)" fg:x="746" fg:w="4"/><text x="60.3628%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="60.1934%" y="501" width="0.2417%" height="15" fill="rgb(231,185,54)" fg:x="747" fg:w="3"/><text x="60.4434%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="60.1934%" y="485" width="0.2417%" height="15" fill="rgb(243,55,32)" fg:x="747" fg:w="3"/><text x="60.4434%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="60.2740%" y="469" width="0.1612%" height="15" fill="rgb(208,167,19)" fg:x="748" fg:w="2"/><text x="60.5240%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.3546%" y="453" width="0.0806%" height="15" fill="rgb(231,72,35)" fg:x="749" fg:w="1"/><text x="60.6046%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.3546%" y="437" width="0.0806%" height="15" fill="rgb(250,173,51)" fg:x="749" fg:w="1"/><text x="60.6046%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (608 samples, 48.99%)</title><rect x="11.5230%" y="741" width="48.9927%" height="15" fill="rgb(209,5,22)" fg:x="143" fg:w="608"/><text x="11.7730%" y="751.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (607 samples, 48.91%)</title><rect x="11.6035%" y="725" width="48.9122%" height="15" fill="rgb(250,174,19)" fg:x="144" fg:w="607"/><text x="11.8535%" y="735.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (607 samples, 48.91%)</title><rect x="11.6035%" y="709" width="48.9122%" height="15" fill="rgb(217,3,49)" fg:x="144" fg:w="607"/><text x="11.8535%" y="719.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (6 samples, 0.48%)</title><rect x="60.0322%" y="693" width="0.4835%" height="15" fill="rgb(218,225,5)" fg:x="745" fg:w="6"/><text x="60.2822%" y="703.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="60.4351%" y="677" width="0.0806%" height="15" fill="rgb(236,89,11)" fg:x="750" fg:w="1"/><text x="60.6851%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="60.4351%" y="661" width="0.0806%" height="15" fill="rgb(206,33,28)" fg:x="750" fg:w="1"/><text x="60.6851%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="60.4351%" y="645" width="0.0806%" height="15" fill="rgb(241,56,42)" fg:x="750" fg:w="1"/><text x="60.6851%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="60.4351%" y="629" width="0.0806%" height="15" fill="rgb(222,44,11)" fg:x="750" fg:w="1"/><text x="60.6851%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.4351%" y="613" width="0.0806%" height="15" fill="rgb(234,111,20)" fg:x="750" fg:w="1"/><text x="60.6851%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.4351%" y="597" width="0.0806%" height="15" fill="rgb(237,77,6)" fg:x="750" fg:w="1"/><text x="60.6851%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.4351%" y="581" width="0.0806%" height="15" fill="rgb(235,111,23)" fg:x="750" fg:w="1"/><text x="60.6851%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="60.4351%" y="565" width="0.0806%" height="15" fill="rgb(251,135,29)" fg:x="750" fg:w="1"/><text x="60.6851%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="60.4351%" y="549" width="0.0806%" height="15" fill="rgb(217,57,1)" fg:x="750" fg:w="1"/><text x="60.6851%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.4351%" y="533" width="0.0806%" height="15" fill="rgb(249,119,31)" fg:x="750" fg:w="1"/><text x="60.6851%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.4351%" y="517" width="0.0806%" height="15" fill="rgb(233,164,33)" fg:x="750" fg:w="1"/><text x="60.6851%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="60.4351%" y="501" width="0.0806%" height="15" fill="rgb(250,217,43)" fg:x="750" fg:w="1"/><text x="60.6851%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="60.4351%" y="485" width="0.0806%" height="15" fill="rgb(232,154,50)" fg:x="750" fg:w="1"/><text x="60.6851%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="60.4351%" y="469" width="0.0806%" height="15" fill="rgb(227,190,8)" fg:x="750" fg:w="1"/><text x="60.6851%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="60.4351%" y="453" width="0.0806%" height="15" fill="rgb(209,217,32)" fg:x="750" fg:w="1"/><text x="60.6851%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="60.4351%" y="437" width="0.0806%" height="15" fill="rgb(243,203,50)" fg:x="750" fg:w="1"/><text x="60.6851%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="60.4351%" y="421" width="0.0806%" height="15" fill="rgb(232,152,27)" fg:x="750" fg:w="1"/><text x="60.6851%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="60.4351%" y="405" width="0.0806%" height="15" fill="rgb(240,34,29)" fg:x="750" fg:w="1"/><text x="60.6851%" y="415.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (609 samples, 49.07%)</title><rect x="11.5230%" y="789" width="49.0733%" height="15" fill="rgb(215,185,52)" fg:x="143" fg:w="609"/><text x="11.7730%" y="799.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (609 samples, 49.07%)</title><rect x="11.5230%" y="773" width="49.0733%" height="15" fill="rgb(240,89,49)" fg:x="143" fg:w="609"/><text x="11.7730%" y="783.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (609 samples, 49.07%)</title><rect x="11.5230%" y="757" width="49.0733%" height="15" fill="rgb(225,12,52)" fg:x="143" fg:w="609"/><text x="11.7730%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.5157%" y="741" width="0.0806%" height="15" fill="rgb(239,128,45)" fg:x="751" fg:w="1"/><text x="60.7657%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.5157%" y="725" width="0.0806%" height="15" fill="rgb(211,78,47)" fg:x="751" fg:w="1"/><text x="60.7657%" y="735.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.5157%" y="709" width="0.0806%" height="15" fill="rgb(232,31,21)" fg:x="751" fg:w="1"/><text x="60.7657%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (753 samples, 60.68%)</title><rect x="0.0000%" y="869" width="60.6769%" height="15" fill="rgb(222,168,14)" fg:x="0" fg:w="753"/><text x="0.2500%" y="879.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (753 samples, 60.68%)</title><rect x="0.0000%" y="853" width="60.6769%" height="15" fill="rgb(209,128,24)" fg:x="0" fg:w="753"/><text x="0.2500%" y="863.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (753 samples, 60.68%)</title><rect x="0.0000%" y="837" width="60.6769%" height="15" fill="rgb(249,35,13)" fg:x="0" fg:w="753"/><text x="0.2500%" y="847.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (611 samples, 49.23%)</title><rect x="11.4424%" y="821" width="49.2345%" height="15" fill="rgb(218,7,2)" fg:x="142" fg:w="611"/><text x="11.6924%" y="831.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (611 samples, 49.23%)</title><rect x="11.4424%" y="805" width="49.2345%" height="15" fill="rgb(238,107,27)" fg:x="142" fg:w="611"/><text x="11.6924%" y="815.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="60.5963%" y="789" width="0.0806%" height="15" fill="rgb(217,88,38)" fg:x="752" fg:w="1"/><text x="60.8463%" y="799.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.5963%" y="773" width="0.0806%" height="15" fill="rgb(230,207,0)" fg:x="752" fg:w="1"/><text x="60.8463%" y="783.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.5963%" y="757" width="0.0806%" height="15" fill="rgb(249,64,54)" fg:x="752" fg:w="1"/><text x="60.8463%" y="767.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.5963%" y="741" width="0.0806%" height="15" fill="rgb(231,7,11)" fg:x="752" fg:w="1"/><text x="60.8463%" y="751.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="60.5963%" y="725" width="0.0806%" height="15" fill="rgb(205,149,21)" fg:x="752" fg:w="1"/><text x="60.8463%" y="735.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="60.5963%" y="709" width="0.0806%" height="15" fill="rgb(215,126,34)" fg:x="752" fg:w="1"/><text x="60.8463%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.7575%" y="677" width="0.0806%" height="15" fill="rgb(241,132,45)" fg:x="754" fg:w="1"/><text x="61.0075%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="60.7575%" y="661" width="0.0806%" height="15" fill="rgb(252,69,32)" fg:x="754" fg:w="1"/><text x="61.0075%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7575%" y="645" width="0.0806%" height="15" fill="rgb(232,204,19)" fg:x="754" fg:w="1"/><text x="61.0075%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.8380%" y="661" width="0.0806%" height="15" fill="rgb(249,15,47)" fg:x="755" fg:w="1"/><text x="61.0880%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.8380%" y="645" width="0.0806%" height="15" fill="rgb(209,227,23)" fg:x="755" fg:w="1"/><text x="61.0880%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="60.6769%" y="821" width="0.3223%" height="15" fill="rgb(248,92,24)" fg:x="753" fg:w="4"/><text x="60.9269%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (4 samples, 0.32%)</title><rect x="60.6769%" y="805" width="0.3223%" height="15" fill="rgb(247,59,2)" fg:x="753" fg:w="4"/><text x="60.9269%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="60.6769%" y="789" width="0.3223%" height="15" fill="rgb(221,30,5)" fg:x="753" fg:w="4"/><text x="60.9269%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="60.6769%" y="773" width="0.3223%" height="15" fill="rgb(208,108,53)" fg:x="753" fg:w="4"/><text x="60.9269%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="60.6769%" y="757" width="0.3223%" height="15" fill="rgb(211,183,26)" fg:x="753" fg:w="4"/><text x="60.9269%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="60.7575%" y="741" width="0.2417%" height="15" fill="rgb(232,132,4)" fg:x="754" fg:w="3"/><text x="61.0075%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (3 samples, 0.24%)</title><rect x="60.7575%" y="725" width="0.2417%" height="15" fill="rgb(253,128,37)" fg:x="754" fg:w="3"/><text x="61.0075%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="60.7575%" y="709" width="0.2417%" height="15" fill="rgb(221,58,24)" fg:x="754" fg:w="3"/><text x="61.0075%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="60.7575%" y="693" width="0.2417%" height="15" fill="rgb(230,54,45)" fg:x="754" fg:w="3"/><text x="61.0075%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="60.8380%" y="677" width="0.1612%" height="15" fill="rgb(254,21,18)" fg:x="755" fg:w="2"/><text x="61.0880%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="60.9186%" y="661" width="0.0806%" height="15" fill="rgb(221,108,0)" fg:x="756" fg:w="1"/><text x="61.1686%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.9186%" y="645" width="0.0806%" height="15" fill="rgb(206,95,1)" fg:x="756" fg:w="1"/><text x="61.1686%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.9186%" y="629" width="0.0806%" height="15" fill="rgb(237,52,5)" fg:x="756" fg:w="1"/><text x="61.1686%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorageFactory as engine::storage::EntityStorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="60.9992%" y="805" width="0.0806%" height="15" fill="rgb(218,150,34)" fg:x="757" fg:w="1"/><text x="61.2492%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="61.0798%" y="789" width="0.0806%" height="15" fill="rgb(235,194,28)" fg:x="758" fg:w="1"/><text x="61.3298%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="61.0798%" y="773" width="0.0806%" height="15" fill="rgb(245,92,18)" fg:x="758" fg:w="1"/><text x="61.3298%" y="783.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="61.0798%" y="757" width="0.0806%" height="15" fill="rgb(253,203,53)" fg:x="758" fg:w="1"/><text x="61.3298%" y="767.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="61.0798%" y="741" width="0.0806%" height="15" fill="rgb(249,185,47)" fg:x="758" fg:w="1"/><text x="61.3298%" y="751.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="61.0798%" y="725" width="0.0806%" height="15" fill="rgb(252,194,52)" fg:x="758" fg:w="1"/><text x="61.3298%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.0798%" y="709" width="0.0806%" height="15" fill="rgb(210,53,36)" fg:x="758" fg:w="1"/><text x="61.3298%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0798%" y="693" width="0.0806%" height="15" fill="rgb(237,37,25)" fg:x="758" fg:w="1"/><text x="61.3298%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.0798%" y="677" width="0.0806%" height="15" fill="rgb(242,116,27)" fg:x="758" fg:w="1"/><text x="61.3298%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.40%)</title><rect x="60.9992%" y="821" width="0.4029%" height="15" fill="rgb(213,185,26)" fg:x="757" fg:w="5"/><text x="61.2492%" y="831.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.32%)</title><rect x="61.0798%" y="805" width="0.3223%" height="15" fill="rgb(225,204,8)" fg:x="758" fg:w="4"/><text x="61.3298%" y="815.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="61.1604%" y="789" width="0.2417%" height="15" fill="rgb(254,111,37)" fg:x="759" fg:w="3"/><text x="61.4104%" y="799.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="61.1604%" y="773" width="0.2417%" height="15" fill="rgb(242,35,9)" fg:x="759" fg:w="3"/><text x="61.4104%" y="783.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="61.1604%" y="757" width="0.2417%" height="15" fill="rgb(232,138,49)" fg:x="759" fg:w="3"/><text x="61.4104%" y="767.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="61.1604%" y="741" width="0.2417%" height="15" fill="rgb(247,56,4)" fg:x="759" fg:w="3"/><text x="61.4104%" y="751.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="61.1604%" y="725" width="0.2417%" height="15" fill="rgb(226,179,17)" fg:x="759" fg:w="3"/><text x="61.4104%" y="735.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="61.1604%" y="709" width="0.2417%" height="15" fill="rgb(216,163,45)" fg:x="759" fg:w="3"/><text x="61.4104%" y="719.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="61.1604%" y="693" width="0.2417%" height="15" fill="rgb(211,157,3)" fg:x="759" fg:w="3"/><text x="61.4104%" y="703.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="61.1604%" y="677" width="0.2417%" height="15" fill="rgb(234,44,20)" fg:x="759" fg:w="3"/><text x="61.4104%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="61.4021%" y="773" width="0.0806%" height="15" fill="rgb(254,138,23)" fg:x="762" fg:w="1"/><text x="61.6521%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4021%" y="757" width="0.0806%" height="15" fill="rgb(206,119,39)" fg:x="762" fg:w="1"/><text x="61.6521%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.4021%" y="741" width="0.0806%" height="15" fill="rgb(231,105,52)" fg:x="762" fg:w="1"/><text x="61.6521%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.4021%" y="725" width="0.0806%" height="15" fill="rgb(250,20,5)" fg:x="762" fg:w="1"/><text x="61.6521%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.4021%" y="709" width="0.0806%" height="15" fill="rgb(215,198,30)" fg:x="762" fg:w="1"/><text x="61.6521%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.4021%" y="693" width="0.0806%" height="15" fill="rgb(246,142,8)" fg:x="762" fg:w="1"/><text x="61.6521%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="61.4021%" y="677" width="0.0806%" height="15" fill="rgb(243,26,38)" fg:x="762" fg:w="1"/><text x="61.6521%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="61.4021%" y="661" width="0.0806%" height="15" fill="rgb(205,133,28)" fg:x="762" fg:w="1"/><text x="61.6521%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.4827%" y="773" width="0.0806%" height="15" fill="rgb(212,34,0)" fg:x="763" fg:w="1"/><text x="61.7327%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="61.4827%" y="757" width="0.0806%" height="15" fill="rgb(251,226,22)" fg:x="763" fg:w="1"/><text x="61.7327%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="61.4827%" y="741" width="0.0806%" height="15" fill="rgb(252,119,9)" fg:x="763" fg:w="1"/><text x="61.7327%" y="751.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="61.5633%" y="773" width="0.0806%" height="15" fill="rgb(213,150,50)" fg:x="764" fg:w="1"/><text x="61.8133%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="61.5633%" y="757" width="0.0806%" height="15" fill="rgb(212,24,39)" fg:x="764" fg:w="1"/><text x="61.8133%" y="767.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="61.5633%" y="741" width="0.0806%" height="15" fill="rgb(213,46,39)" fg:x="764" fg:w="1"/><text x="61.8133%" y="751.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.5633%" y="725" width="0.0806%" height="15" fill="rgb(239,106,12)" fg:x="764" fg:w="1"/><text x="61.8133%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.5633%" y="709" width="0.0806%" height="15" fill="rgb(249,229,21)" fg:x="764" fg:w="1"/><text x="61.8133%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="61.6438%" y="725" width="0.1612%" height="15" fill="rgb(212,158,3)" fg:x="765" fg:w="2"/><text x="61.8938%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="61.6438%" y="709" width="0.1612%" height="15" fill="rgb(253,26,48)" fg:x="765" fg:w="2"/><text x="61.8938%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="61.6438%" y="693" width="0.1612%" height="15" fill="rgb(238,178,20)" fg:x="765" fg:w="2"/><text x="61.8938%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="61.7244%" y="677" width="0.0806%" height="15" fill="rgb(208,86,15)" fg:x="766" fg:w="1"/><text x="61.9744%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.7244%" y="661" width="0.0806%" height="15" fill="rgb(239,42,53)" fg:x="766" fg:w="1"/><text x="61.9744%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="61.8050%" y="709" width="0.0806%" height="15" fill="rgb(245,226,8)" fg:x="767" fg:w="1"/><text x="62.0550%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="61.8050%" y="693" width="0.0806%" height="15" fill="rgb(216,176,32)" fg:x="767" fg:w="1"/><text x="62.0550%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="61.8856%" y="693" width="0.0806%" height="15" fill="rgb(231,186,21)" fg:x="768" fg:w="1"/><text x="62.1356%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="61.8856%" y="677" width="0.0806%" height="15" fill="rgb(205,95,49)" fg:x="768" fg:w="1"/><text x="62.1356%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="61.8856%" y="661" width="0.0806%" height="15" fill="rgb(217,145,8)" fg:x="768" fg:w="1"/><text x="62.1356%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.8856%" y="645" width="0.0806%" height="15" fill="rgb(239,144,48)" fg:x="768" fg:w="1"/><text x="62.1356%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="61.6438%" y="741" width="0.4029%" height="15" fill="rgb(214,189,23)" fg:x="765" fg:w="5"/><text x="61.8938%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="61.8050%" y="725" width="0.2417%" height="15" fill="rgb(229,157,17)" fg:x="767" fg:w="3"/><text x="62.0550%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="61.8856%" y="709" width="0.1612%" height="15" fill="rgb(230,5,48)" fg:x="768" fg:w="2"/><text x="62.1356%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="61.9662%" y="693" width="0.0806%" height="15" fill="rgb(224,156,48)" fg:x="769" fg:w="1"/><text x="62.2162%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="61.9662%" y="677" width="0.0806%" height="15" fill="rgb(223,14,29)" fg:x="769" fg:w="1"/><text x="62.2162%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="61.9662%" y="661" width="0.0806%" height="15" fill="rgb(229,96,36)" fg:x="769" fg:w="1"/><text x="62.2162%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="61.9662%" y="645" width="0.0806%" height="15" fill="rgb(231,102,53)" fg:x="769" fg:w="1"/><text x="62.2162%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="61.9662%" y="629" width="0.0806%" height="15" fill="rgb(210,77,38)" fg:x="769" fg:w="1"/><text x="62.2162%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.48%)</title><rect x="61.6438%" y="773" width="0.4835%" height="15" fill="rgb(235,131,6)" fg:x="765" fg:w="6"/><text x="61.8938%" y="783.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (6 samples, 0.48%)</title><rect x="61.6438%" y="757" width="0.4835%" height="15" fill="rgb(252,55,38)" fg:x="765" fg:w="6"/><text x="61.8938%" y="767.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="62.0467%" y="741" width="0.0806%" height="15" fill="rgb(246,38,14)" fg:x="770" fg:w="1"/><text x="62.2967%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="62.0467%" y="725" width="0.0806%" height="15" fill="rgb(242,27,5)" fg:x="770" fg:w="1"/><text x="62.2967%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.0467%" y="709" width="0.0806%" height="15" fill="rgb(228,65,35)" fg:x="770" fg:w="1"/><text x="62.2967%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0467%" y="693" width="0.0806%" height="15" fill="rgb(245,93,11)" fg:x="770" fg:w="1"/><text x="62.2967%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.0467%" y="677" width="0.0806%" height="15" fill="rgb(213,1,31)" fg:x="770" fg:w="1"/><text x="62.2967%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.0467%" y="661" width="0.0806%" height="15" fill="rgb(237,205,14)" fg:x="770" fg:w="1"/><text x="62.2967%" y="671.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.81%)</title><rect x="61.4021%" y="805" width="0.8058%" height="15" fill="rgb(232,118,45)" fg:x="762" fg:w="10"/><text x="61.6521%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (10 samples, 0.81%)</title><rect x="61.4021%" y="789" width="0.8058%" height="15" fill="rgb(218,5,6)" fg:x="762" fg:w="10"/><text x="61.6521%" y="799.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="62.1273%" y="773" width="0.0806%" height="15" fill="rgb(251,87,51)" fg:x="771" fg:w="1"/><text x="62.3773%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="62.1273%" y="757" width="0.0806%" height="15" fill="rgb(207,225,20)" fg:x="771" fg:w="1"/><text x="62.3773%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="62.1273%" y="741" width="0.0806%" height="15" fill="rgb(222,78,54)" fg:x="771" fg:w="1"/><text x="62.3773%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.1273%" y="725" width="0.0806%" height="15" fill="rgb(232,85,16)" fg:x="771" fg:w="1"/><text x="62.3773%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.1273%" y="709" width="0.0806%" height="15" fill="rgb(244,25,33)" fg:x="771" fg:w="1"/><text x="62.3773%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.1273%" y="693" width="0.0806%" height="15" fill="rgb(233,24,36)" fg:x="771" fg:w="1"/><text x="62.3773%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.1273%" y="677" width="0.0806%" height="15" fill="rgb(253,49,54)" fg:x="771" fg:w="1"/><text x="62.3773%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="62.1273%" y="661" width="0.0806%" height="15" fill="rgb(245,12,22)" fg:x="771" fg:w="1"/><text x="62.3773%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="62.1273%" y="645" width="0.0806%" height="15" fill="rgb(253,141,28)" fg:x="771" fg:w="1"/><text x="62.3773%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2079%" y="693" width="0.0806%" height="15" fill="rgb(225,207,27)" fg:x="772" fg:w="1"/><text x="62.4579%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2079%" y="677" width="0.0806%" height="15" fill="rgb(220,84,2)" fg:x="772" fg:w="1"/><text x="62.4579%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2079%" y="661" width="0.0806%" height="15" fill="rgb(224,37,37)" fg:x="772" fg:w="1"/><text x="62.4579%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2079%" y="645" width="0.0806%" height="15" fill="rgb(220,143,18)" fg:x="772" fg:w="1"/><text x="62.4579%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2079%" y="629" width="0.0806%" height="15" fill="rgb(210,88,33)" fg:x="772" fg:w="1"/><text x="62.4579%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="62.2079%" y="741" width="0.1612%" height="15" fill="rgb(219,87,51)" fg:x="772" fg:w="2"/><text x="62.4579%" y="751.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="62.2079%" y="725" width="0.1612%" height="15" fill="rgb(211,7,35)" fg:x="772" fg:w="2"/><text x="62.4579%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="62.2079%" y="709" width="0.1612%" height="15" fill="rgb(232,77,2)" fg:x="772" fg:w="2"/><text x="62.4579%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.2885%" y="693" width="0.0806%" height="15" fill="rgb(249,94,25)" fg:x="773" fg:w="1"/><text x="62.5385%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2885%" y="677" width="0.0806%" height="15" fill="rgb(215,112,2)" fg:x="773" fg:w="1"/><text x="62.5385%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.2885%" y="661" width="0.0806%" height="15" fill="rgb(226,115,48)" fg:x="773" fg:w="1"/><text x="62.5385%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2885%" y="645" width="0.0806%" height="15" fill="rgb(249,196,10)" fg:x="773" fg:w="1"/><text x="62.5385%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.2885%" y="629" width="0.0806%" height="15" fill="rgb(237,109,14)" fg:x="773" fg:w="1"/><text x="62.5385%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2885%" y="613" width="0.0806%" height="15" fill="rgb(217,103,53)" fg:x="773" fg:w="1"/><text x="62.5385%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.2885%" y="597" width="0.0806%" height="15" fill="rgb(244,137,9)" fg:x="773" fg:w="1"/><text x="62.5385%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.2885%" y="581" width="0.0806%" height="15" fill="rgb(227,201,3)" fg:x="773" fg:w="1"/><text x="62.5385%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="62.2885%" y="565" width="0.0806%" height="15" fill="rgb(243,94,6)" fg:x="773" fg:w="1"/><text x="62.5385%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="62.2079%" y="789" width="0.2417%" height="15" fill="rgb(235,118,5)" fg:x="772" fg:w="3"/><text x="62.4579%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="62.2079%" y="773" width="0.2417%" height="15" fill="rgb(247,10,30)" fg:x="772" fg:w="3"/><text x="62.4579%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="62.2079%" y="757" width="0.2417%" height="15" fill="rgb(205,26,28)" fg:x="772" fg:w="3"/><text x="62.4579%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="62.3691%" y="741" width="0.0806%" height="15" fill="rgb(206,99,35)" fg:x="774" fg:w="1"/><text x="62.6191%" y="751.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="62.3691%" y="725" width="0.0806%" height="15" fill="rgb(238,130,40)" fg:x="774" fg:w="1"/><text x="62.6191%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="62.3691%" y="709" width="0.0806%" height="15" fill="rgb(224,126,31)" fg:x="774" fg:w="1"/><text x="62.6191%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="62.3691%" y="693" width="0.0806%" height="15" fill="rgb(254,105,17)" fg:x="774" fg:w="1"/><text x="62.6191%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.3691%" y="677" width="0.0806%" height="15" fill="rgb(216,87,36)" fg:x="774" fg:w="1"/><text x="62.6191%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="62.3691%" y="661" width="0.0806%" height="15" fill="rgb(240,21,12)" fg:x="774" fg:w="1"/><text x="62.6191%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="62.4496%" y="773" width="0.0806%" height="15" fill="rgb(245,192,34)" fg:x="775" fg:w="1"/><text x="62.6996%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.4496%" y="757" width="0.0806%" height="15" fill="rgb(226,100,49)" fg:x="775" fg:w="1"/><text x="62.6996%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="62.5302%" y="773" width="0.0806%" height="15" fill="rgb(245,188,27)" fg:x="776" fg:w="1"/><text x="62.7802%" y="783.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="62.5302%" y="757" width="0.0806%" height="15" fill="rgb(212,170,8)" fg:x="776" fg:w="1"/><text x="62.7802%" y="767.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="62.2079%" y="805" width="0.4835%" height="15" fill="rgb(217,113,29)" fg:x="772" fg:w="6"/><text x="62.4579%" y="815.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="62.4496%" y="789" width="0.2417%" height="15" fill="rgb(237,30,3)" fg:x="775" fg:w="3"/><text x="62.6996%" y="799.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="62.6108%" y="773" width="0.0806%" height="15" fill="rgb(227,19,28)" fg:x="777" fg:w="1"/><text x="62.8608%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="62.6108%" y="757" width="0.0806%" height="15" fill="rgb(239,172,45)" fg:x="777" fg:w="1"/><text x="62.8608%" y="767.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.6108%" y="741" width="0.0806%" height="15" fill="rgb(254,55,39)" fg:x="777" fg:w="1"/><text x="62.8608%" y="751.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="62.6108%" y="725" width="0.0806%" height="15" fill="rgb(249,208,12)" fg:x="777" fg:w="1"/><text x="62.8608%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="62.6108%" y="709" width="0.0806%" height="15" fill="rgb(240,52,13)" fg:x="777" fg:w="1"/><text x="62.8608%" y="719.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="62.6108%" y="693" width="0.0806%" height="15" fill="rgb(252,149,13)" fg:x="777" fg:w="1"/><text x="62.8608%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.6108%" y="677" width="0.0806%" height="15" fill="rgb(232,81,48)" fg:x="777" fg:w="1"/><text x="62.8608%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="62.6914%" y="805" width="0.0806%" height="15" fill="rgb(222,144,2)" fg:x="778" fg:w="1"/><text x="62.9414%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="62.6914%" y="789" width="0.0806%" height="15" fill="rgb(216,81,32)" fg:x="778" fg:w="1"/><text x="62.9414%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="62.6914%" y="773" width="0.0806%" height="15" fill="rgb(244,78,51)" fg:x="778" fg:w="1"/><text x="62.9414%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="62.6914%" y="757" width="0.0806%" height="15" fill="rgb(217,66,21)" fg:x="778" fg:w="1"/><text x="62.9414%" y="767.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="62.7720%" y="805" width="0.1612%" height="15" fill="rgb(247,101,42)" fg:x="779" fg:w="2"/><text x="63.0220%" y="815.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="62.7720%" y="789" width="0.1612%" height="15" fill="rgb(227,81,39)" fg:x="779" fg:w="2"/><text x="63.0220%" y="799.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="62.7720%" y="773" width="0.1612%" height="15" fill="rgb(220,223,44)" fg:x="779" fg:w="2"/><text x="63.0220%" y="783.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="62.7720%" y="757" width="0.1612%" height="15" fill="rgb(205,218,2)" fg:x="779" fg:w="2"/><text x="63.0220%" y="767.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (2 samples, 0.16%)</title><rect x="62.7720%" y="741" width="0.1612%" height="15" fill="rgb(212,207,28)" fg:x="779" fg:w="2"/><text x="63.0220%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="62.7720%" y="725" width="0.1612%" height="15" fill="rgb(224,12,41)" fg:x="779" fg:w="2"/><text x="63.0220%" y="735.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="62.7720%" y="709" width="0.1612%" height="15" fill="rgb(216,118,12)" fg:x="779" fg:w="2"/><text x="63.0220%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="62.7720%" y="693" width="0.1612%" height="15" fill="rgb(252,97,46)" fg:x="779" fg:w="2"/><text x="63.0220%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="62.7720%" y="677" width="0.1612%" height="15" fill="rgb(244,206,19)" fg:x="779" fg:w="2"/><text x="63.0220%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="62.8525%" y="661" width="0.0806%" height="15" fill="rgb(231,84,31)" fg:x="780" fg:w="1"/><text x="63.1025%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="62.8525%" y="645" width="0.0806%" height="15" fill="rgb(244,133,0)" fg:x="780" fg:w="1"/><text x="63.1025%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.8525%" y="629" width="0.0806%" height="15" fill="rgb(223,15,50)" fg:x="780" fg:w="1"/><text x="63.1025%" y="639.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="63.0137%" y="725" width="0.0806%" height="15" fill="rgb(250,118,49)" fg:x="782" fg:w="1"/><text x="63.2637%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.0137%" y="709" width="0.0806%" height="15" fill="rgb(248,25,38)" fg:x="782" fg:w="1"/><text x="63.2637%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="63.0137%" y="693" width="0.0806%" height="15" fill="rgb(215,70,14)" fg:x="782" fg:w="1"/><text x="63.2637%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="63.0137%" y="789" width="0.1612%" height="15" fill="rgb(215,28,15)" fg:x="782" fg:w="2"/><text x="63.2637%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="63.0137%" y="773" width="0.1612%" height="15" fill="rgb(243,6,28)" fg:x="782" fg:w="2"/><text x="63.2637%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="63.0137%" y="757" width="0.1612%" height="15" fill="rgb(222,130,1)" fg:x="782" fg:w="2"/><text x="63.2637%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="63.0137%" y="741" width="0.1612%" height="15" fill="rgb(236,166,44)" fg:x="782" fg:w="2"/><text x="63.2637%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="63.0943%" y="725" width="0.0806%" height="15" fill="rgb(221,108,14)" fg:x="783" fg:w="1"/><text x="63.3443%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="63.0943%" y="709" width="0.0806%" height="15" fill="rgb(252,3,45)" fg:x="783" fg:w="1"/><text x="63.3443%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.0943%" y="693" width="0.0806%" height="15" fill="rgb(237,68,30)" fg:x="783" fg:w="1"/><text x="63.3443%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="63.0943%" y="677" width="0.0806%" height="15" fill="rgb(211,79,22)" fg:x="783" fg:w="1"/><text x="63.3443%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.0943%" y="661" width="0.0806%" height="15" fill="rgb(252,185,21)" fg:x="783" fg:w="1"/><text x="63.3443%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.0943%" y="645" width="0.0806%" height="15" fill="rgb(225,189,26)" fg:x="783" fg:w="1"/><text x="63.3443%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.0943%" y="629" width="0.0806%" height="15" fill="rgb(241,30,40)" fg:x="783" fg:w="1"/><text x="63.3443%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.0943%" y="613" width="0.0806%" height="15" fill="rgb(235,215,44)" fg:x="783" fg:w="1"/><text x="63.3443%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0943%" y="597" width="0.0806%" height="15" fill="rgb(205,8,29)" fg:x="783" fg:w="1"/><text x="63.3443%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="63.1749%" y="789" width="0.1612%" height="15" fill="rgb(241,137,42)" fg:x="784" fg:w="2"/><text x="63.4249%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="63.1749%" y="773" width="0.1612%" height="15" fill="rgb(237,155,2)" fg:x="784" fg:w="2"/><text x="63.4249%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="63.1749%" y="757" width="0.1612%" height="15" fill="rgb(245,29,42)" fg:x="784" fg:w="2"/><text x="63.4249%" y="767.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="63.1749%" y="741" width="0.1612%" height="15" fill="rgb(234,101,35)" fg:x="784" fg:w="2"/><text x="63.4249%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="63.2554%" y="725" width="0.0806%" height="15" fill="rgb(228,64,37)" fg:x="785" fg:w="1"/><text x="63.5054%" y="735.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="63.2554%" y="709" width="0.0806%" height="15" fill="rgb(217,214,36)" fg:x="785" fg:w="1"/><text x="63.5054%" y="719.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="63.2554%" y="693" width="0.0806%" height="15" fill="rgb(243,70,3)" fg:x="785" fg:w="1"/><text x="63.5054%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="63.2554%" y="677" width="0.0806%" height="15" fill="rgb(253,158,52)" fg:x="785" fg:w="1"/><text x="63.5054%" y="687.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="63.2554%" y="661" width="0.0806%" height="15" fill="rgb(234,111,54)" fg:x="785" fg:w="1"/><text x="63.5054%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="63.2554%" y="645" width="0.0806%" height="15" fill="rgb(217,70,32)" fg:x="785" fg:w="1"/><text x="63.5054%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.2554%" y="629" width="0.0806%" height="15" fill="rgb(234,18,33)" fg:x="785" fg:w="1"/><text x="63.5054%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.2554%" y="613" width="0.0806%" height="15" fill="rgb(234,12,49)" fg:x="785" fg:w="1"/><text x="63.5054%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.2554%" y="597" width="0.0806%" height="15" fill="rgb(236,10,21)" fg:x="785" fg:w="1"/><text x="63.5054%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.2554%" y="581" width="0.0806%" height="15" fill="rgb(248,182,45)" fg:x="785" fg:w="1"/><text x="63.5054%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.2554%" y="565" width="0.0806%" height="15" fill="rgb(217,95,36)" fg:x="785" fg:w="1"/><text x="63.5054%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.2554%" y="549" width="0.0806%" height="15" fill="rgb(212,110,31)" fg:x="785" fg:w="1"/><text x="63.5054%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.2554%" y="533" width="0.0806%" height="15" fill="rgb(206,32,53)" fg:x="785" fg:w="1"/><text x="63.5054%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.2554%" y="517" width="0.0806%" height="15" fill="rgb(246,141,37)" fg:x="785" fg:w="1"/><text x="63.5054%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.2554%" y="501" width="0.0806%" height="15" fill="rgb(219,16,7)" fg:x="785" fg:w="1"/><text x="63.5054%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.2554%" y="485" width="0.0806%" height="15" fill="rgb(230,205,45)" fg:x="785" fg:w="1"/><text x="63.5054%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.2554%" y="469" width="0.0806%" height="15" fill="rgb(231,43,49)" fg:x="785" fg:w="1"/><text x="63.5054%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.2554%" y="453" width="0.0806%" height="15" fill="rgb(212,106,34)" fg:x="785" fg:w="1"/><text x="63.5054%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.2554%" y="437" width="0.0806%" height="15" fill="rgb(206,83,17)" fg:x="785" fg:w="1"/><text x="63.5054%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.2554%" y="421" width="0.0806%" height="15" fill="rgb(244,154,49)" fg:x="785" fg:w="1"/><text x="63.5054%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.2554%" y="405" width="0.0806%" height="15" fill="rgb(244,149,49)" fg:x="785" fg:w="1"/><text x="63.5054%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2554%" y="389" width="0.0806%" height="15" fill="rgb(227,134,18)" fg:x="785" fg:w="1"/><text x="63.5054%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.3360%" y="757" width="0.0806%" height="15" fill="rgb(237,116,36)" fg:x="786" fg:w="1"/><text x="63.5860%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="63.3360%" y="741" width="0.0806%" height="15" fill="rgb(205,129,40)" fg:x="786" fg:w="1"/><text x="63.5860%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.3360%" y="725" width="0.0806%" height="15" fill="rgb(236,178,4)" fg:x="786" fg:w="1"/><text x="63.5860%" y="735.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="63.4166%" y="725" width="0.0806%" height="15" fill="rgb(251,76,53)" fg:x="787" fg:w="1"/><text x="63.6666%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="63.4166%" y="709" width="0.0806%" height="15" fill="rgb(242,92,40)" fg:x="787" fg:w="1"/><text x="63.6666%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="63.4972%" y="709" width="0.0806%" height="15" fill="rgb(209,45,30)" fg:x="788" fg:w="1"/><text x="63.7472%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.4972%" y="693" width="0.0806%" height="15" fill="rgb(218,157,36)" fg:x="788" fg:w="1"/><text x="63.7472%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="63.5778%" y="693" width="0.1612%" height="15" fill="rgb(222,186,16)" fg:x="789" fg:w="2"/><text x="63.8278%" y="703.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="63.5778%" y="677" width="0.1612%" height="15" fill="rgb(254,72,35)" fg:x="789" fg:w="2"/><text x="63.8278%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="63.8195%" y="645" width="0.1612%" height="15" fill="rgb(224,25,35)" fg:x="792" fg:w="2"/><text x="64.0695%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="63.8195%" y="629" width="0.1612%" height="15" fill="rgb(206,135,52)" fg:x="792" fg:w="2"/><text x="64.0695%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.9001%" y="613" width="0.0806%" height="15" fill="rgb(229,174,47)" fg:x="793" fg:w="1"/><text x="64.1501%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.9001%" y="597" width="0.0806%" height="15" fill="rgb(242,184,21)" fg:x="793" fg:w="1"/><text x="64.1501%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="63.4972%" y="725" width="0.5641%" height="15" fill="rgb(213,22,45)" fg:x="788" fg:w="7"/><text x="63.7472%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="63.5778%" y="709" width="0.4835%" height="15" fill="rgb(237,81,54)" fg:x="789" fg:w="6"/><text x="63.8278%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="63.7389%" y="693" width="0.3223%" height="15" fill="rgb(248,177,18)" fg:x="791" fg:w="4"/><text x="63.9889%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.8195%" y="677" width="0.2417%" height="15" fill="rgb(254,31,16)" fg:x="792" fg:w="3"/><text x="64.0695%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="63.8195%" y="661" width="0.2417%" height="15" fill="rgb(235,20,31)" fg:x="792" fg:w="3"/><text x="64.0695%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.9807%" y="645" width="0.0806%" height="15" fill="rgb(240,56,43)" fg:x="794" fg:w="1"/><text x="64.2307%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.9807%" y="629" width="0.0806%" height="15" fill="rgb(237,197,51)" fg:x="794" fg:w="1"/><text x="64.2307%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.0612%" y="661" width="0.0806%" height="15" fill="rgb(241,162,44)" fg:x="795" fg:w="1"/><text x="64.3112%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0612%" y="645" width="0.0806%" height="15" fill="rgb(224,23,20)" fg:x="795" fg:w="1"/><text x="64.3112%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="64.0612%" y="725" width="0.2417%" height="15" fill="rgb(250,109,34)" fg:x="795" fg:w="3"/><text x="64.3112%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="64.0612%" y="709" width="0.2417%" height="15" fill="rgb(214,175,50)" fg:x="795" fg:w="3"/><text x="64.3112%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="64.0612%" y="693" width="0.2417%" height="15" fill="rgb(213,182,5)" fg:x="795" fg:w="3"/><text x="64.3112%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="64.0612%" y="677" width="0.2417%" height="15" fill="rgb(209,199,19)" fg:x="795" fg:w="3"/><text x="64.3112%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="64.1418%" y="661" width="0.1612%" height="15" fill="rgb(236,224,42)" fg:x="796" fg:w="2"/><text x="64.3918%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2224%" y="645" width="0.0806%" height="15" fill="rgb(246,226,29)" fg:x="797" fg:w="1"/><text x="64.4724%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3030%" y="597" width="0.0806%" height="15" fill="rgb(227,223,11)" fg:x="798" fg:w="1"/><text x="64.5530%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="64.3030%" y="661" width="0.1612%" height="15" fill="rgb(219,7,51)" fg:x="798" fg:w="2"/><text x="64.5530%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="64.3030%" y="645" width="0.1612%" height="15" fill="rgb(245,167,10)" fg:x="798" fg:w="2"/><text x="64.5530%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="64.3030%" y="629" width="0.1612%" height="15" fill="rgb(237,224,16)" fg:x="798" fg:w="2"/><text x="64.5530%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="64.3030%" y="613" width="0.1612%" height="15" fill="rgb(226,132,13)" fg:x="798" fg:w="2"/><text x="64.5530%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="64.3836%" y="597" width="0.0806%" height="15" fill="rgb(214,140,3)" fg:x="799" fg:w="1"/><text x="64.6336%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="64.3836%" y="581" width="0.0806%" height="15" fill="rgb(221,177,4)" fg:x="799" fg:w="1"/><text x="64.6336%" y="591.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.29%)</title><rect x="63.3360%" y="789" width="1.2893%" height="15" fill="rgb(238,139,3)" fg:x="786" fg:w="16"/><text x="63.5860%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (16 samples, 1.29%)</title><rect x="63.3360%" y="773" width="1.2893%" height="15" fill="rgb(216,17,39)" fg:x="786" fg:w="16"/><text x="63.5860%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (15 samples, 1.21%)</title><rect x="63.4166%" y="757" width="1.2087%" height="15" fill="rgb(238,120,9)" fg:x="787" fg:w="15"/><text x="63.6666%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (15 samples, 1.21%)</title><rect x="63.4166%" y="741" width="1.2087%" height="15" fill="rgb(244,92,53)" fg:x="787" fg:w="15"/><text x="63.6666%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="64.3030%" y="725" width="0.3223%" height="15" fill="rgb(224,148,33)" fg:x="798" fg:w="4"/><text x="64.5530%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="64.3030%" y="709" width="0.3223%" height="15" fill="rgb(243,6,36)" fg:x="798" fg:w="4"/><text x="64.5530%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="64.3030%" y="693" width="0.3223%" height="15" fill="rgb(230,102,11)" fg:x="798" fg:w="4"/><text x="64.5530%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="64.3030%" y="677" width="0.3223%" height="15" fill="rgb(234,148,36)" fg:x="798" fg:w="4"/><text x="64.5530%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="64.4641%" y="661" width="0.1612%" height="15" fill="rgb(251,153,25)" fg:x="800" fg:w="2"/><text x="64.7141%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5447%" y="645" width="0.0806%" height="15" fill="rgb(215,129,8)" fg:x="801" fg:w="1"/><text x="64.7947%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="64.5447%" y="629" width="0.0806%" height="15" fill="rgb(224,128,35)" fg:x="801" fg:w="1"/><text x="64.7947%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="64.6253%" y="773" width="0.0806%" height="15" fill="rgb(237,56,52)" fg:x="802" fg:w="1"/><text x="64.8753%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="64.6253%" y="757" width="0.0806%" height="15" fill="rgb(234,213,19)" fg:x="802" fg:w="1"/><text x="64.8753%" y="767.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="64.6253%" y="741" width="0.0806%" height="15" fill="rgb(252,82,23)" fg:x="802" fg:w="1"/><text x="64.8753%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6253%" y="725" width="0.0806%" height="15" fill="rgb(254,201,21)" fg:x="802" fg:w="1"/><text x="64.8753%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6253%" y="709" width="0.0806%" height="15" fill="rgb(250,186,11)" fg:x="802" fg:w="1"/><text x="64.8753%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="64.6253%" y="693" width="0.0806%" height="15" fill="rgb(211,174,5)" fg:x="802" fg:w="1"/><text x="64.8753%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6253%" y="677" width="0.0806%" height="15" fill="rgb(214,121,10)" fg:x="802" fg:w="1"/><text x="64.8753%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="64.7059%" y="757" width="0.0806%" height="15" fill="rgb(241,66,2)" fg:x="803" fg:w="1"/><text x="64.9559%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.7059%" y="741" width="0.0806%" height="15" fill="rgb(220,167,19)" fg:x="803" fg:w="1"/><text x="64.9559%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.7059%" y="725" width="0.0806%" height="15" fill="rgb(231,54,50)" fg:x="803" fg:w="1"/><text x="64.9559%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.7059%" y="709" width="0.0806%" height="15" fill="rgb(239,217,53)" fg:x="803" fg:w="1"/><text x="64.9559%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.7059%" y="693" width="0.0806%" height="15" fill="rgb(248,8,0)" fg:x="803" fg:w="1"/><text x="64.9559%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7059%" y="677" width="0.0806%" height="15" fill="rgb(229,118,37)" fg:x="803" fg:w="1"/><text x="64.9559%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7059%" y="661" width="0.0806%" height="15" fill="rgb(253,223,43)" fg:x="803" fg:w="1"/><text x="64.9559%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7059%" y="645" width="0.0806%" height="15" fill="rgb(211,77,36)" fg:x="803" fg:w="1"/><text x="64.9559%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7059%" y="629" width="0.0806%" height="15" fill="rgb(219,3,53)" fg:x="803" fg:w="1"/><text x="64.9559%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7059%" y="613" width="0.0806%" height="15" fill="rgb(244,45,42)" fg:x="803" fg:w="1"/><text x="64.9559%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="64.6253%" y="789" width="0.2417%" height="15" fill="rgb(225,95,27)" fg:x="802" fg:w="3"/><text x="64.8753%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="64.7059%" y="773" width="0.1612%" height="15" fill="rgb(207,74,8)" fg:x="803" fg:w="2"/><text x="64.9559%" y="783.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="64.7865%" y="757" width="0.0806%" height="15" fill="rgb(243,63,36)" fg:x="804" fg:w="1"/><text x="65.0365%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="64.7865%" y="741" width="0.0806%" height="15" fill="rgb(211,180,12)" fg:x="804" fg:w="1"/><text x="65.0365%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.7865%" y="725" width="0.0806%" height="15" fill="rgb(254,166,49)" fg:x="804" fg:w="1"/><text x="65.0365%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.7865%" y="709" width="0.0806%" height="15" fill="rgb(205,19,0)" fg:x="804" fg:w="1"/><text x="65.0365%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.7865%" y="693" width="0.0806%" height="15" fill="rgb(224,172,32)" fg:x="804" fg:w="1"/><text x="65.0365%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.7865%" y="677" width="0.0806%" height="15" fill="rgb(254,136,30)" fg:x="804" fg:w="1"/><text x="65.0365%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.7865%" y="661" width="0.0806%" height="15" fill="rgb(246,19,35)" fg:x="804" fg:w="1"/><text x="65.0365%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7865%" y="645" width="0.0806%" height="15" fill="rgb(219,24,36)" fg:x="804" fg:w="1"/><text x="65.0365%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.7865%" y="629" width="0.0806%" height="15" fill="rgb(251,55,1)" fg:x="804" fg:w="1"/><text x="65.0365%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7865%" y="613" width="0.0806%" height="15" fill="rgb(218,117,39)" fg:x="804" fg:w="1"/><text x="65.0365%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.7865%" y="597" width="0.0806%" height="15" fill="rgb(248,169,11)" fg:x="804" fg:w="1"/><text x="65.0365%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7865%" y="581" width="0.0806%" height="15" fill="rgb(244,40,44)" fg:x="804" fg:w="1"/><text x="65.0365%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.7865%" y="565" width="0.0806%" height="15" fill="rgb(234,62,37)" fg:x="804" fg:w="1"/><text x="65.0365%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7865%" y="549" width="0.0806%" height="15" fill="rgb(207,117,42)" fg:x="804" fg:w="1"/><text x="65.0365%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.7865%" y="533" width="0.0806%" height="15" fill="rgb(213,43,2)" fg:x="804" fg:w="1"/><text x="65.0365%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8670%" y="677" width="0.0806%" height="15" fill="rgb(244,202,51)" fg:x="805" fg:w="1"/><text x="65.1170%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8670%" y="661" width="0.0806%" height="15" fill="rgb(253,174,46)" fg:x="805" fg:w="1"/><text x="65.1170%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8670%" y="645" width="0.0806%" height="15" fill="rgb(251,23,1)" fg:x="805" fg:w="1"/><text x="65.1170%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.8670%" y="629" width="0.0806%" height="15" fill="rgb(253,26,1)" fg:x="805" fg:w="1"/><text x="65.1170%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.8670%" y="613" width="0.0806%" height="15" fill="rgb(216,89,31)" fg:x="805" fg:w="1"/><text x="65.1170%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.8670%" y="597" width="0.0806%" height="15" fill="rgb(209,109,5)" fg:x="805" fg:w="1"/><text x="65.1170%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.8670%" y="581" width="0.0806%" height="15" fill="rgb(229,63,13)" fg:x="805" fg:w="1"/><text x="65.1170%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.8670%" y="565" width="0.0806%" height="15" fill="rgb(238,137,54)" fg:x="805" fg:w="1"/><text x="65.1170%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.8670%" y="549" width="0.0806%" height="15" fill="rgb(228,1,9)" fg:x="805" fg:w="1"/><text x="65.1170%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.8670%" y="533" width="0.0806%" height="15" fill="rgb(249,120,48)" fg:x="805" fg:w="1"/><text x="65.1170%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.8670%" y="517" width="0.0806%" height="15" fill="rgb(209,72,36)" fg:x="805" fg:w="1"/><text x="65.1170%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.8670%" y="501" width="0.0806%" height="15" fill="rgb(247,98,49)" fg:x="805" fg:w="1"/><text x="65.1170%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.8670%" y="485" width="0.0806%" height="15" fill="rgb(233,75,36)" fg:x="805" fg:w="1"/><text x="65.1170%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.8670%" y="469" width="0.0806%" height="15" fill="rgb(225,14,24)" fg:x="805" fg:w="1"/><text x="65.1170%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8670%" y="453" width="0.0806%" height="15" fill="rgb(237,193,20)" fg:x="805" fg:w="1"/><text x="65.1170%" y="463.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="64.8670%" y="741" width="0.1612%" height="15" fill="rgb(239,122,19)" fg:x="805" fg:w="2"/><text x="65.1170%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="64.8670%" y="725" width="0.1612%" height="15" fill="rgb(231,220,10)" fg:x="805" fg:w="2"/><text x="65.1170%" y="735.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="64.8670%" y="709" width="0.1612%" height="15" fill="rgb(220,66,15)" fg:x="805" fg:w="2"/><text x="65.1170%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="64.8670%" y="693" width="0.1612%" height="15" fill="rgb(215,171,52)" fg:x="805" fg:w="2"/><text x="65.1170%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.9476%" y="677" width="0.0806%" height="15" fill="rgb(241,169,50)" fg:x="806" fg:w="1"/><text x="65.1976%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9476%" y="661" width="0.0806%" height="15" fill="rgb(236,189,0)" fg:x="806" fg:w="1"/><text x="65.1976%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.9476%" y="645" width="0.0806%" height="15" fill="rgb(217,147,20)" fg:x="806" fg:w="1"/><text x="65.1976%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9476%" y="629" width="0.0806%" height="15" fill="rgb(206,188,39)" fg:x="806" fg:w="1"/><text x="65.1976%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.9476%" y="613" width="0.0806%" height="15" fill="rgb(227,118,25)" fg:x="806" fg:w="1"/><text x="65.1976%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9476%" y="597" width="0.0806%" height="15" fill="rgb(248,171,40)" fg:x="806" fg:w="1"/><text x="65.1976%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.9476%" y="581" width="0.0806%" height="15" fill="rgb(251,90,54)" fg:x="806" fg:w="1"/><text x="65.1976%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.9476%" y="565" width="0.0806%" height="15" fill="rgb(234,11,46)" fg:x="806" fg:w="1"/><text x="65.1976%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="64.8670%" y="789" width="0.2417%" height="15" fill="rgb(229,134,13)" fg:x="805" fg:w="3"/><text x="65.1170%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="64.8670%" y="773" width="0.2417%" height="15" fill="rgb(223,129,3)" fg:x="805" fg:w="3"/><text x="65.1170%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="64.8670%" y="757" width="0.2417%" height="15" fill="rgb(221,124,13)" fg:x="805" fg:w="3"/><text x="65.1170%" y="767.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.0282%" y="741" width="0.0806%" height="15" fill="rgb(234,3,18)" fg:x="807" fg:w="1"/><text x="65.2782%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.0282%" y="725" width="0.0806%" height="15" fill="rgb(249,199,20)" fg:x="807" fg:w="1"/><text x="65.2782%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.0282%" y="709" width="0.0806%" height="15" fill="rgb(224,134,6)" fg:x="807" fg:w="1"/><text x="65.2782%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.0282%" y="693" width="0.0806%" height="15" fill="rgb(254,83,26)" fg:x="807" fg:w="1"/><text x="65.2782%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.0282%" y="677" width="0.0806%" height="15" fill="rgb(217,88,9)" fg:x="807" fg:w="1"/><text x="65.2782%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.0282%" y="661" width="0.0806%" height="15" fill="rgb(225,73,2)" fg:x="807" fg:w="1"/><text x="65.2782%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.0282%" y="645" width="0.0806%" height="15" fill="rgb(226,44,39)" fg:x="807" fg:w="1"/><text x="65.2782%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.0282%" y="629" width="0.0806%" height="15" fill="rgb(228,53,17)" fg:x="807" fg:w="1"/><text x="65.2782%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.0282%" y="613" width="0.0806%" height="15" fill="rgb(212,27,27)" fg:x="807" fg:w="1"/><text x="65.2782%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.0282%" y="597" width="0.0806%" height="15" fill="rgb(241,50,6)" fg:x="807" fg:w="1"/><text x="65.2782%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.0282%" y="581" width="0.0806%" height="15" fill="rgb(225,28,51)" fg:x="807" fg:w="1"/><text x="65.2782%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.0282%" y="565" width="0.0806%" height="15" fill="rgb(215,33,16)" fg:x="807" fg:w="1"/><text x="65.2782%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0282%" y="549" width="0.0806%" height="15" fill="rgb(243,40,39)" fg:x="807" fg:w="1"/><text x="65.2782%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="65.1088%" y="789" width="0.0806%" height="15" fill="rgb(225,11,42)" fg:x="808" fg:w="1"/><text x="65.3588%" y="799.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="65.1088%" y="773" width="0.0806%" height="15" fill="rgb(241,220,38)" fg:x="808" fg:w="1"/><text x="65.3588%" y="783.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="65.1088%" y="757" width="0.0806%" height="15" fill="rgb(244,52,35)" fg:x="808" fg:w="1"/><text x="65.3588%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.1088%" y="741" width="0.0806%" height="15" fill="rgb(246,42,46)" fg:x="808" fg:w="1"/><text x="65.3588%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.1088%" y="725" width="0.0806%" height="15" fill="rgb(205,184,13)" fg:x="808" fg:w="1"/><text x="65.3588%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="65.1894%" y="757" width="0.0806%" height="15" fill="rgb(209,48,36)" fg:x="809" fg:w="1"/><text x="65.4394%" y="767.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="65.1894%" y="741" width="0.0806%" height="15" fill="rgb(244,34,51)" fg:x="809" fg:w="1"/><text x="65.4394%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2699%" y="629" width="0.0806%" height="15" fill="rgb(221,107,33)" fg:x="810" fg:w="1"/><text x="65.5199%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2699%" y="613" width="0.0806%" height="15" fill="rgb(224,203,12)" fg:x="810" fg:w="1"/><text x="65.5199%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.2699%" y="597" width="0.0806%" height="15" fill="rgb(230,215,18)" fg:x="810" fg:w="1"/><text x="65.5199%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.2699%" y="581" width="0.0806%" height="15" fill="rgb(206,185,35)" fg:x="810" fg:w="1"/><text x="65.5199%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.2699%" y="565" width="0.0806%" height="15" fill="rgb(228,140,34)" fg:x="810" fg:w="1"/><text x="65.5199%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.2699%" y="549" width="0.0806%" height="15" fill="rgb(208,93,13)" fg:x="810" fg:w="1"/><text x="65.5199%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.2699%" y="533" width="0.0806%" height="15" fill="rgb(221,193,39)" fg:x="810" fg:w="1"/><text x="65.5199%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.2699%" y="517" width="0.0806%" height="15" fill="rgb(241,132,34)" fg:x="810" fg:w="1"/><text x="65.5199%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.2699%" y="501" width="0.0806%" height="15" fill="rgb(221,141,10)" fg:x="810" fg:w="1"/><text x="65.5199%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.2699%" y="485" width="0.0806%" height="15" fill="rgb(226,90,31)" fg:x="810" fg:w="1"/><text x="65.5199%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.2699%" y="469" width="0.0806%" height="15" fill="rgb(243,75,5)" fg:x="810" fg:w="1"/><text x="65.5199%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2699%" y="453" width="0.0806%" height="15" fill="rgb(227,156,21)" fg:x="810" fg:w="1"/><text x="65.5199%" y="463.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="65.1894%" y="789" width="0.2417%" height="15" fill="rgb(250,195,8)" fg:x="809" fg:w="3"/><text x="65.4394%" y="799.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="65.1894%" y="773" width="0.2417%" height="15" fill="rgb(220,134,5)" fg:x="809" fg:w="3"/><text x="65.4394%" y="783.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="65.2699%" y="757" width="0.1612%" height="15" fill="rgb(246,106,34)" fg:x="810" fg:w="2"/><text x="65.5199%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="65.2699%" y="741" width="0.1612%" height="15" fill="rgb(205,1,4)" fg:x="810" fg:w="2"/><text x="65.5199%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="65.2699%" y="725" width="0.1612%" height="15" fill="rgb(224,151,29)" fg:x="810" fg:w="2"/><text x="65.5199%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="65.2699%" y="709" width="0.1612%" height="15" fill="rgb(251,196,0)" fg:x="810" fg:w="2"/><text x="65.5199%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="65.2699%" y="693" width="0.1612%" height="15" fill="rgb(212,127,0)" fg:x="810" fg:w="2"/><text x="65.5199%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="65.2699%" y="677" width="0.1612%" height="15" fill="rgb(236,71,53)" fg:x="810" fg:w="2"/><text x="65.5199%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.2699%" y="661" width="0.1612%" height="15" fill="rgb(227,99,0)" fg:x="810" fg:w="2"/><text x="65.5199%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.2699%" y="645" width="0.1612%" height="15" fill="rgb(239,89,21)" fg:x="810" fg:w="2"/><text x="65.5199%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3505%" y="629" width="0.0806%" height="15" fill="rgb(243,122,19)" fg:x="811" fg:w="1"/><text x="65.6005%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.58%)</title><rect x="62.9331%" y="805" width="2.5786%" height="15" fill="rgb(229,192,45)" fg:x="781" fg:w="32"/><text x="63.1831%" y="815.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="65.4311%" y="789" width="0.0806%" height="15" fill="rgb(235,165,35)" fg:x="812" fg:w="1"/><text x="65.6811%" y="799.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="65.4311%" y="773" width="0.0806%" height="15" fill="rgb(253,202,0)" fg:x="812" fg:w="1"/><text x="65.6811%" y="783.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="65.4311%" y="757" width="0.0806%" height="15" fill="rgb(235,51,20)" fg:x="812" fg:w="1"/><text x="65.6811%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.4311%" y="741" width="0.0806%" height="15" fill="rgb(218,95,46)" fg:x="812" fg:w="1"/><text x="65.6811%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.4311%" y="725" width="0.0806%" height="15" fill="rgb(212,81,10)" fg:x="812" fg:w="1"/><text x="65.6811%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.4311%" y="709" width="0.0806%" height="15" fill="rgb(240,59,0)" fg:x="812" fg:w="1"/><text x="65.6811%" y="719.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="65.5117%" y="741" width="0.0806%" height="15" fill="rgb(212,191,42)" fg:x="813" fg:w="1"/><text x="65.7617%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="65.5117%" y="725" width="0.0806%" height="15" fill="rgb(233,140,3)" fg:x="813" fg:w="1"/><text x="65.7617%" y="735.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="65.5117%" y="709" width="0.0806%" height="15" fill="rgb(215,69,23)" fg:x="813" fg:w="1"/><text x="65.7617%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="65.5117%" y="693" width="0.0806%" height="15" fill="rgb(240,202,20)" fg:x="813" fg:w="1"/><text x="65.7617%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="65.5117%" y="773" width="0.1612%" height="15" fill="rgb(209,146,50)" fg:x="813" fg:w="2"/><text x="65.7617%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="65.5117%" y="757" width="0.1612%" height="15" fill="rgb(253,102,54)" fg:x="813" fg:w="2"/><text x="65.7617%" y="767.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5923%" y="741" width="0.0806%" height="15" fill="rgb(250,173,47)" fg:x="814" fg:w="1"/><text x="65.8423%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5923%" y="725" width="0.0806%" height="15" fill="rgb(232,142,7)" fg:x="814" fg:w="1"/><text x="65.8423%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5923%" y="709" width="0.0806%" height="15" fill="rgb(230,157,47)" fg:x="814" fg:w="1"/><text x="65.8423%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.5923%" y="693" width="0.0806%" height="15" fill="rgb(214,177,35)" fg:x="814" fg:w="1"/><text x="65.8423%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.5923%" y="677" width="0.0806%" height="15" fill="rgb(234,119,46)" fg:x="814" fg:w="1"/><text x="65.8423%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.5923%" y="661" width="0.0806%" height="15" fill="rgb(241,180,50)" fg:x="814" fg:w="1"/><text x="65.8423%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="65.5923%" y="645" width="0.0806%" height="15" fill="rgb(221,54,25)" fg:x="814" fg:w="1"/><text x="65.8423%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="65.5923%" y="629" width="0.0806%" height="15" fill="rgb(209,157,44)" fg:x="814" fg:w="1"/><text x="65.8423%" y="639.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="65.6728%" y="741" width="0.0806%" height="15" fill="rgb(246,115,41)" fg:x="815" fg:w="1"/><text x="65.9228%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6728%" y="725" width="0.0806%" height="15" fill="rgb(229,86,1)" fg:x="815" fg:w="1"/><text x="65.9228%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.6728%" y="709" width="0.0806%" height="15" fill="rgb(240,108,53)" fg:x="815" fg:w="1"/><text x="65.9228%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.6728%" y="693" width="0.0806%" height="15" fill="rgb(227,134,2)" fg:x="815" fg:w="1"/><text x="65.9228%" y="703.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (55 samples, 4.43%)</title><rect x="61.4021%" y="821" width="4.4319%" height="15" fill="rgb(213,129,25)" fg:x="762" fg:w="55"/><text x="61.6521%" y="831.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="65.5117%" y="805" width="0.3223%" height="15" fill="rgb(226,35,21)" fg:x="813" fg:w="4"/><text x="65.7617%" y="815.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="65.5117%" y="789" width="0.3223%" height="15" fill="rgb(208,129,26)" fg:x="813" fg:w="4"/><text x="65.7617%" y="799.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="65.6728%" y="773" width="0.1612%" height="15" fill="rgb(224,83,6)" fg:x="815" fg:w="2"/><text x="65.9228%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="65.6728%" y="757" width="0.1612%" height="15" fill="rgb(227,52,39)" fg:x="815" fg:w="2"/><text x="65.9228%" y="767.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="65.7534%" y="741" width="0.0806%" height="15" fill="rgb(241,30,17)" fg:x="816" fg:w="1"/><text x="66.0034%" y="751.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="65.7534%" y="725" width="0.0806%" height="15" fill="rgb(246,186,42)" fg:x="816" fg:w="1"/><text x="66.0034%" y="735.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="65.7534%" y="709" width="0.0806%" height="15" fill="rgb(221,169,15)" fg:x="816" fg:w="1"/><text x="66.0034%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.7534%" y="693" width="0.0806%" height="15" fill="rgb(235,108,21)" fg:x="816" fg:w="1"/><text x="66.0034%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="65.7534%" y="677" width="0.0806%" height="15" fill="rgb(219,148,30)" fg:x="816" fg:w="1"/><text x="66.0034%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.7534%" y="661" width="0.0806%" height="15" fill="rgb(220,109,5)" fg:x="816" fg:w="1"/><text x="66.0034%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.8340%" y="725" width="0.0806%" height="15" fill="rgb(213,203,48)" fg:x="817" fg:w="1"/><text x="66.0840%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.8340%" y="709" width="0.0806%" height="15" fill="rgb(244,71,33)" fg:x="817" fg:w="1"/><text x="66.0840%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.8340%" y="693" width="0.0806%" height="15" fill="rgb(209,23,2)" fg:x="817" fg:w="1"/><text x="66.0840%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.9146%" y="709" width="0.0806%" height="15" fill="rgb(219,97,7)" fg:x="818" fg:w="1"/><text x="66.1646%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.9146%" y="693" width="0.0806%" height="15" fill="rgb(216,161,23)" fg:x="818" fg:w="1"/><text x="66.1646%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.9146%" y="677" width="0.0806%" height="15" fill="rgb(207,45,42)" fg:x="818" fg:w="1"/><text x="66.1646%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.8340%" y="741" width="0.2417%" height="15" fill="rgb(241,61,4)" fg:x="817" fg:w="3"/><text x="66.0840%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.9146%" y="725" width="0.1612%" height="15" fill="rgb(236,170,1)" fg:x="818" fg:w="2"/><text x="66.1646%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.9952%" y="709" width="0.0806%" height="15" fill="rgb(239,72,5)" fg:x="819" fg:w="1"/><text x="66.2452%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.9952%" y="693" width="0.0806%" height="15" fill="rgb(214,13,50)" fg:x="819" fg:w="1"/><text x="66.2452%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.9952%" y="677" width="0.0806%" height="15" fill="rgb(224,88,9)" fg:x="819" fg:w="1"/><text x="66.2452%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.9952%" y="661" width="0.0806%" height="15" fill="rgb(238,192,34)" fg:x="819" fg:w="1"/><text x="66.2452%" y="671.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="65.8340%" y="757" width="0.3223%" height="15" fill="rgb(217,203,50)" fg:x="817" fg:w="4"/><text x="66.0840%" y="767.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.0757%" y="741" width="0.0806%" height="15" fill="rgb(241,123,32)" fg:x="820" fg:w="1"/><text x="66.3257%" y="751.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.0757%" y="725" width="0.0806%" height="15" fill="rgb(248,151,39)" fg:x="820" fg:w="1"/><text x="66.3257%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.0757%" y="709" width="0.0806%" height="15" fill="rgb(208,89,6)" fg:x="820" fg:w="1"/><text x="66.3257%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.1563%" y="693" width="0.0806%" height="15" fill="rgb(254,43,26)" fg:x="821" fg:w="1"/><text x="66.4063%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2369%" y="645" width="0.0806%" height="15" fill="rgb(216,158,13)" fg:x="822" fg:w="1"/><text x="66.4869%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.1563%" y="757" width="0.2417%" height="15" fill="rgb(212,47,37)" fg:x="821" fg:w="3"/><text x="66.4063%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="66.1563%" y="741" width="0.2417%" height="15" fill="rgb(254,16,10)" fg:x="821" fg:w="3"/><text x="66.4063%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.1563%" y="725" width="0.2417%" height="15" fill="rgb(223,228,16)" fg:x="821" fg:w="3"/><text x="66.4063%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.1563%" y="709" width="0.2417%" height="15" fill="rgb(249,108,50)" fg:x="821" fg:w="3"/><text x="66.4063%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.2369%" y="693" width="0.1612%" height="15" fill="rgb(208,220,5)" fg:x="822" fg:w="2"/><text x="66.4869%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.2369%" y="677" width="0.1612%" height="15" fill="rgb(217,89,48)" fg:x="822" fg:w="2"/><text x="66.4869%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.2369%" y="661" width="0.1612%" height="15" fill="rgb(212,113,41)" fg:x="822" fg:w="2"/><text x="66.4869%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.3175%" y="645" width="0.0806%" height="15" fill="rgb(231,127,5)" fg:x="823" fg:w="1"/><text x="66.5675%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3175%" y="629" width="0.0806%" height="15" fill="rgb(217,141,17)" fg:x="823" fg:w="1"/><text x="66.5675%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.5592%" y="693" width="0.0806%" height="15" fill="rgb(245,125,54)" fg:x="826" fg:w="1"/><text x="66.8092%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.6398%" y="677" width="0.0806%" height="15" fill="rgb(248,125,3)" fg:x="827" fg:w="1"/><text x="66.8898%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6398%" y="661" width="0.0806%" height="15" fill="rgb(236,119,51)" fg:x="827" fg:w="1"/><text x="66.8898%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="66.4786%" y="725" width="0.3223%" height="15" fill="rgb(239,99,8)" fg:x="825" fg:w="4"/><text x="66.7286%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="66.4786%" y="709" width="0.3223%" height="15" fill="rgb(224,228,4)" fg:x="825" fg:w="4"/><text x="66.7286%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.6398%" y="693" width="0.1612%" height="15" fill="rgb(220,131,45)" fg:x="827" fg:w="2"/><text x="66.8898%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7204%" y="677" width="0.0806%" height="15" fill="rgb(215,62,5)" fg:x="828" fg:w="1"/><text x="66.9704%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.7204%" y="661" width="0.0806%" height="15" fill="rgb(253,12,24)" fg:x="828" fg:w="1"/><text x="66.9704%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="66.7204%" y="645" width="0.0806%" height="15" fill="rgb(248,120,50)" fg:x="828" fg:w="1"/><text x="66.9704%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.7204%" y="629" width="0.0806%" height="15" fill="rgb(245,194,10)" fg:x="828" fg:w="1"/><text x="66.9704%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7204%" y="613" width="0.0806%" height="15" fill="rgb(241,149,38)" fg:x="828" fg:w="1"/><text x="66.9704%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="66.3981%" y="741" width="0.5641%" height="15" fill="rgb(219,215,7)" fg:x="824" fg:w="7"/><text x="66.6481%" y="751.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="66.8010%" y="725" width="0.1612%" height="15" fill="rgb(208,120,31)" fg:x="829" fg:w="2"/><text x="67.0510%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="66.8010%" y="709" width="0.1612%" height="15" fill="rgb(244,30,8)" fg:x="829" fg:w="2"/><text x="67.0510%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="66.8010%" y="693" width="0.1612%" height="15" fill="rgb(238,35,44)" fg:x="829" fg:w="2"/><text x="67.0510%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="66.8815%" y="677" width="0.0806%" height="15" fill="rgb(243,218,37)" fg:x="830" fg:w="1"/><text x="67.1315%" y="687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="66.8815%" y="661" width="0.0806%" height="15" fill="rgb(218,169,10)" fg:x="830" fg:w="1"/><text x="67.1315%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="66.8815%" y="645" width="0.0806%" height="15" fill="rgb(221,144,10)" fg:x="830" fg:w="1"/><text x="67.1315%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="66.8815%" y="629" width="0.0806%" height="15" fill="rgb(226,41,38)" fg:x="830" fg:w="1"/><text x="67.1315%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="67.0427%" y="709" width="0.1612%" height="15" fill="rgb(228,3,1)" fg:x="832" fg:w="2"/><text x="67.2927%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.1233%" y="693" width="0.0806%" height="15" fill="rgb(209,129,12)" fg:x="833" fg:w="1"/><text x="67.3733%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="67.4456%" y="581" width="0.0806%" height="15" fill="rgb(213,136,33)" fg:x="837" fg:w="1"/><text x="67.6956%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.5262%" y="581" width="0.0806%" height="15" fill="rgb(209,181,29)" fg:x="838" fg:w="1"/><text x="67.7762%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5262%" y="565" width="0.0806%" height="15" fill="rgb(234,173,18)" fg:x="838" fg:w="1"/><text x="67.7762%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.5262%" y="549" width="0.0806%" height="15" fill="rgb(227,73,47)" fg:x="838" fg:w="1"/><text x="67.7762%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="66.9621%" y="741" width="0.7252%" height="15" fill="rgb(234,9,34)" fg:x="831" fg:w="9"/><text x="67.2121%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.73%)</title><rect x="66.9621%" y="725" width="0.7252%" height="15" fill="rgb(235,172,15)" fg:x="831" fg:w="9"/><text x="67.2121%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="67.2039%" y="709" width="0.4835%" height="15" fill="rgb(245,61,2)" fg:x="834" fg:w="6"/><text x="67.4539%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="67.2844%" y="693" width="0.4029%" height="15" fill="rgb(238,39,47)" fg:x="835" fg:w="5"/><text x="67.5344%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="67.3650%" y="677" width="0.3223%" height="15" fill="rgb(234,37,24)" fg:x="836" fg:w="4"/><text x="67.6150%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="67.4456%" y="661" width="0.2417%" height="15" fill="rgb(248,223,24)" fg:x="837" fg:w="3"/><text x="67.6956%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="67.4456%" y="645" width="0.2417%" height="15" fill="rgb(223,12,15)" fg:x="837" fg:w="3"/><text x="67.6956%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="67.4456%" y="629" width="0.2417%" height="15" fill="rgb(249,6,3)" fg:x="837" fg:w="3"/><text x="67.6956%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="67.4456%" y="613" width="0.2417%" height="15" fill="rgb(237,105,33)" fg:x="837" fg:w="3"/><text x="67.6956%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="67.4456%" y="597" width="0.2417%" height="15" fill="rgb(252,208,35)" fg:x="837" fg:w="3"/><text x="67.6956%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6068%" y="581" width="0.0806%" height="15" fill="rgb(215,181,35)" fg:x="839" fg:w="1"/><text x="67.8568%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.8485%" y="517" width="0.0806%" height="15" fill="rgb(246,212,3)" fg:x="842" fg:w="1"/><text x="68.0985%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8485%" y="501" width="0.0806%" height="15" fill="rgb(247,156,24)" fg:x="842" fg:w="1"/><text x="68.0985%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.8485%" y="581" width="0.1612%" height="15" fill="rgb(248,9,31)" fg:x="842" fg:w="2"/><text x="68.0985%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.8485%" y="565" width="0.1612%" height="15" fill="rgb(234,26,45)" fg:x="842" fg:w="2"/><text x="68.0985%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.8485%" y="549" width="0.1612%" height="15" fill="rgb(249,11,32)" fg:x="842" fg:w="2"/><text x="68.0985%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.8485%" y="533" width="0.1612%" height="15" fill="rgb(249,162,33)" fg:x="842" fg:w="2"/><text x="68.0985%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.9291%" y="517" width="0.0806%" height="15" fill="rgb(232,4,32)" fg:x="843" fg:w="1"/><text x="68.1791%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9291%" y="501" width="0.0806%" height="15" fill="rgb(212,5,45)" fg:x="843" fg:w="1"/><text x="68.1791%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="67.8485%" y="613" width="0.2417%" height="15" fill="rgb(227,95,13)" fg:x="842" fg:w="3"/><text x="68.0985%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.8485%" y="597" width="0.2417%" height="15" fill="rgb(223,205,10)" fg:x="842" fg:w="3"/><text x="68.0985%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0097%" y="581" width="0.0806%" height="15" fill="rgb(222,178,8)" fg:x="844" fg:w="1"/><text x="68.2597%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0097%" y="565" width="0.0806%" height="15" fill="rgb(216,13,22)" fg:x="844" fg:w="1"/><text x="68.2597%" y="575.50"></text></g><g><title>engine::session::Session::save_entity_changes (29 samples, 2.34%)</title><rect x="65.8340%" y="805" width="2.3368%" height="15" fill="rgb(240,167,12)" fg:x="817" fg:w="29"/><text x="66.0840%" y="815.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (29 samples, 2.34%)</title><rect x="65.8340%" y="789" width="2.3368%" height="15" fill="rgb(235,68,35)" fg:x="817" fg:w="29"/><text x="66.0840%" y="799.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (29 samples, 2.34%)</title><rect x="65.8340%" y="773" width="2.3368%" height="15" fill="rgb(253,40,27)" fg:x="817" fg:w="29"/><text x="66.0840%" y="783.50">e..</text></g><g><title>kernel::model::any_entity_changes (22 samples, 1.77%)</title><rect x="66.3981%" y="757" width="1.7728%" height="15" fill="rgb(214,19,28)" fg:x="824" fg:w="22"/><text x="66.6481%" y="767.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="67.6873%" y="741" width="0.4835%" height="15" fill="rgb(210,167,45)" fg:x="840" fg:w="6"/><text x="67.9373%" y="751.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="67.6873%" y="725" width="0.4835%" height="15" fill="rgb(232,97,40)" fg:x="840" fg:w="6"/><text x="67.9373%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="67.6873%" y="709" width="0.4835%" height="15" fill="rgb(250,35,23)" fg:x="840" fg:w="6"/><text x="67.9373%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="67.6873%" y="693" width="0.4835%" height="15" fill="rgb(248,47,53)" fg:x="840" fg:w="6"/><text x="67.9373%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="67.6873%" y="677" width="0.4835%" height="15" fill="rgb(226,58,50)" fg:x="840" fg:w="6"/><text x="67.9373%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="67.7679%" y="661" width="0.4029%" height="15" fill="rgb(217,105,26)" fg:x="841" fg:w="5"/><text x="68.0179%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="67.8485%" y="645" width="0.3223%" height="15" fill="rgb(208,64,1)" fg:x="842" fg:w="4"/><text x="68.0985%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="67.8485%" y="629" width="0.3223%" height="15" fill="rgb(214,80,1)" fg:x="842" fg:w="4"/><text x="68.0985%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.0902%" y="613" width="0.0806%" height="15" fill="rgb(206,175,26)" fg:x="845" fg:w="1"/><text x="68.3402%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.0902%" y="597" width="0.0806%" height="15" fill="rgb(235,156,37)" fg:x="845" fg:w="1"/><text x="68.3402%" y="607.50"></text></g><g><title>engine::session::Session::close (30 samples, 2.42%)</title><rect x="65.8340%" y="821" width="2.4174%" height="15" fill="rgb(213,100,9)" fg:x="817" fg:w="30"/><text x="66.0840%" y="831.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="68.1708%" y="805" width="0.0806%" height="15" fill="rgb(241,15,13)" fg:x="846" fg:w="1"/><text x="68.4208%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.2514%" y="677" width="0.0806%" height="15" fill="rgb(205,97,43)" fg:x="847" fg:w="1"/><text x="68.5014%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.2514%" y="661" width="0.0806%" height="15" fill="rgb(216,106,32)" fg:x="847" fg:w="1"/><text x="68.5014%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.2514%" y="645" width="0.0806%" height="15" fill="rgb(226,200,8)" fg:x="847" fg:w="1"/><text x="68.5014%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.2514%" y="629" width="0.0806%" height="15" fill="rgb(244,54,29)" fg:x="847" fg:w="1"/><text x="68.5014%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.2514%" y="613" width="0.0806%" height="15" fill="rgb(252,169,12)" fg:x="847" fg:w="1"/><text x="68.5014%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2514%" y="597" width="0.0806%" height="15" fill="rgb(231,199,11)" fg:x="847" fg:w="1"/><text x="68.5014%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4126%" y="629" width="0.0806%" height="15" fill="rgb(233,191,18)" fg:x="849" fg:w="1"/><text x="68.6626%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4126%" y="613" width="0.0806%" height="15" fill="rgb(215,83,47)" fg:x="849" fg:w="1"/><text x="68.6626%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4126%" y="597" width="0.0806%" height="15" fill="rgb(251,67,19)" fg:x="849" fg:w="1"/><text x="68.6626%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4126%" y="581" width="0.0806%" height="15" fill="rgb(240,7,20)" fg:x="849" fg:w="1"/><text x="68.6626%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4126%" y="565" width="0.0806%" height="15" fill="rgb(210,150,26)" fg:x="849" fg:w="1"/><text x="68.6626%" y="575.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (3 samples, 0.24%)</title><rect x="68.3320%" y="677" width="0.2417%" height="15" fill="rgb(228,75,42)" fg:x="848" fg:w="3"/><text x="68.5820%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (3 samples, 0.24%)</title><rect x="68.3320%" y="661" width="0.2417%" height="15" fill="rgb(237,134,48)" fg:x="848" fg:w="3"/><text x="68.5820%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.4126%" y="645" width="0.1612%" height="15" fill="rgb(205,80,50)" fg:x="849" fg:w="2"/><text x="68.6626%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.4932%" y="629" width="0.0806%" height="15" fill="rgb(217,74,48)" fg:x="850" fg:w="1"/><text x="68.7432%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="68.6543%" y="645" width="0.0806%" height="15" fill="rgb(205,82,50)" fg:x="852" fg:w="1"/><text x="68.9043%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="68.6543%" y="629" width="0.0806%" height="15" fill="rgb(228,1,33)" fg:x="852" fg:w="1"/><text x="68.9043%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="68.6543%" y="613" width="0.0806%" height="15" fill="rgb(214,50,23)" fg:x="852" fg:w="1"/><text x="68.9043%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6543%" y="597" width="0.0806%" height="15" fill="rgb(210,62,9)" fg:x="852" fg:w="1"/><text x="68.9043%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6543%" y="581" width="0.0806%" height="15" fill="rgb(210,104,37)" fg:x="852" fg:w="1"/><text x="68.9043%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.6543%" y="565" width="0.0806%" height="15" fill="rgb(232,104,43)" fg:x="852" fg:w="1"/><text x="68.9043%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.6543%" y="549" width="0.0806%" height="15" fill="rgb(244,52,6)" fg:x="852" fg:w="1"/><text x="68.9043%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.6543%" y="533" width="0.0806%" height="15" fill="rgb(211,174,52)" fg:x="852" fg:w="1"/><text x="68.9043%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.6543%" y="517" width="0.0806%" height="15" fill="rgb(229,48,4)" fg:x="852" fg:w="1"/><text x="68.9043%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.6543%" y="501" width="0.0806%" height="15" fill="rgb(205,155,16)" fg:x="852" fg:w="1"/><text x="68.9043%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="68.7349%" y="565" width="0.0806%" height="15" fill="rgb(211,141,53)" fg:x="853" fg:w="1"/><text x="68.9849%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.7349%" y="549" width="0.0806%" height="15" fill="rgb(240,148,11)" fg:x="853" fg:w="1"/><text x="68.9849%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.7349%" y="533" width="0.0806%" height="15" fill="rgb(214,45,23)" fg:x="853" fg:w="1"/><text x="68.9849%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.7349%" y="517" width="0.0806%" height="15" fill="rgb(248,74,26)" fg:x="853" fg:w="1"/><text x="68.9849%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.7349%" y="501" width="0.0806%" height="15" fill="rgb(218,121,16)" fg:x="853" fg:w="1"/><text x="68.9849%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7349%" y="485" width="0.0806%" height="15" fill="rgb(218,10,47)" fg:x="853" fg:w="1"/><text x="68.9849%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7349%" y="469" width="0.0806%" height="15" fill="rgb(227,99,14)" fg:x="853" fg:w="1"/><text x="68.9849%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7349%" y="453" width="0.0806%" height="15" fill="rgb(229,83,46)" fg:x="853" fg:w="1"/><text x="68.9849%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7349%" y="437" width="0.0806%" height="15" fill="rgb(228,25,1)" fg:x="853" fg:w="1"/><text x="68.9849%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.7349%" y="421" width="0.0806%" height="15" fill="rgb(252,190,15)" fg:x="853" fg:w="1"/><text x="68.9849%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7349%" y="405" width="0.0806%" height="15" fill="rgb(213,103,51)" fg:x="853" fg:w="1"/><text x="68.9849%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7349%" y="389" width="0.0806%" height="15" fill="rgb(220,38,44)" fg:x="853" fg:w="1"/><text x="68.9849%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7349%" y="373" width="0.0806%" height="15" fill="rgb(210,45,26)" fg:x="853" fg:w="1"/><text x="68.9849%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7349%" y="357" width="0.0806%" height="15" fill="rgb(205,95,48)" fg:x="853" fg:w="1"/><text x="68.9849%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7349%" y="341" width="0.0806%" height="15" fill="rgb(225,179,37)" fg:x="853" fg:w="1"/><text x="68.9849%" y="351.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="68.5737%" y="677" width="0.3223%" height="15" fill="rgb(230,209,3)" fg:x="851" fg:w="4"/><text x="68.8237%" y="687.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="68.6543%" y="661" width="0.2417%" height="15" fill="rgb(248,12,46)" fg:x="852" fg:w="3"/><text x="68.9043%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="68.7349%" y="645" width="0.1612%" height="15" fill="rgb(234,18,0)" fg:x="853" fg:w="2"/><text x="68.9849%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="68.7349%" y="629" width="0.1612%" height="15" fill="rgb(238,197,14)" fg:x="853" fg:w="2"/><text x="68.9849%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="68.7349%" y="613" width="0.1612%" height="15" fill="rgb(251,162,48)" fg:x="853" fg:w="2"/><text x="68.9849%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="68.7349%" y="597" width="0.1612%" height="15" fill="rgb(237,73,42)" fg:x="853" fg:w="2"/><text x="68.9849%" y="607.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="68.7349%" y="581" width="0.1612%" height="15" fill="rgb(211,108,8)" fg:x="853" fg:w="2"/><text x="68.9849%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="68.8155%" y="565" width="0.0806%" height="15" fill="rgb(213,45,22)" fg:x="854" fg:w="1"/><text x="69.0655%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="68.8155%" y="549" width="0.0806%" height="15" fill="rgb(252,154,5)" fg:x="854" fg:w="1"/><text x="69.0655%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="68.8155%" y="533" width="0.0806%" height="15" fill="rgb(221,79,52)" fg:x="854" fg:w="1"/><text x="69.0655%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8155%" y="517" width="0.0806%" height="15" fill="rgb(229,220,36)" fg:x="854" fg:w="1"/><text x="69.0655%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8155%" y="501" width="0.0806%" height="15" fill="rgb(211,17,16)" fg:x="854" fg:w="1"/><text x="69.0655%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.8155%" y="485" width="0.0806%" height="15" fill="rgb(222,55,31)" fg:x="854" fg:w="1"/><text x="69.0655%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8155%" y="469" width="0.0806%" height="15" fill="rgb(221,221,31)" fg:x="854" fg:w="1"/><text x="69.0655%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8155%" y="453" width="0.0806%" height="15" fill="rgb(227,168,26)" fg:x="854" fg:w="1"/><text x="69.0655%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.8155%" y="437" width="0.0806%" height="15" fill="rgb(224,139,9)" fg:x="854" fg:w="1"/><text x="69.0655%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.8961%" y="549" width="0.1612%" height="15" fill="rgb(254,172,0)" fg:x="855" fg:w="2"/><text x="69.1461%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1378%" y="501" width="0.0806%" height="15" fill="rgb(235,203,1)" fg:x="858" fg:w="1"/><text x="69.3878%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="69.2184%" y="501" width="0.0806%" height="15" fill="rgb(216,205,24)" fg:x="859" fg:w="1"/><text x="69.4684%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2184%" y="485" width="0.0806%" height="15" fill="rgb(233,24,6)" fg:x="859" fg:w="1"/><text x="69.4684%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3795%" y="469" width="0.0806%" height="15" fill="rgb(244,110,9)" fg:x="861" fg:w="1"/><text x="69.6295%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3795%" y="453" width="0.0806%" height="15" fill="rgb(239,222,42)" fg:x="861" fg:w="1"/><text x="69.6295%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3795%" y="437" width="0.0806%" height="15" fill="rgb(218,145,13)" fg:x="861" fg:w="1"/><text x="69.6295%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3795%" y="421" width="0.0806%" height="15" fill="rgb(207,69,11)" fg:x="861" fg:w="1"/><text x="69.6295%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3795%" y="405" width="0.0806%" height="15" fill="rgb(220,223,22)" fg:x="861" fg:w="1"/><text x="69.6295%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.3795%" y="389" width="0.0806%" height="15" fill="rgb(245,102,5)" fg:x="861" fg:w="1"/><text x="69.6295%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.3795%" y="373" width="0.0806%" height="15" fill="rgb(211,148,2)" fg:x="861" fg:w="1"/><text x="69.6295%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.3795%" y="357" width="0.0806%" height="15" fill="rgb(241,13,44)" fg:x="861" fg:w="1"/><text x="69.6295%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.3795%" y="341" width="0.0806%" height="15" fill="rgb(219,137,21)" fg:x="861" fg:w="1"/><text x="69.6295%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.3795%" y="325" width="0.0806%" height="15" fill="rgb(242,206,5)" fg:x="861" fg:w="1"/><text x="69.6295%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.4601%" y="469" width="0.0806%" height="15" fill="rgb(217,114,22)" fg:x="862" fg:w="1"/><text x="69.7101%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.4601%" y="453" width="0.0806%" height="15" fill="rgb(253,206,42)" fg:x="862" fg:w="1"/><text x="69.7101%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.4601%" y="437" width="0.0806%" height="15" fill="rgb(236,102,18)" fg:x="862" fg:w="1"/><text x="69.7101%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.4601%" y="421" width="0.0806%" height="15" fill="rgb(208,59,49)" fg:x="862" fg:w="1"/><text x="69.7101%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.4601%" y="405" width="0.0806%" height="15" fill="rgb(215,194,28)" fg:x="862" fg:w="1"/><text x="69.7101%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4601%" y="389" width="0.0806%" height="15" fill="rgb(243,207,11)" fg:x="862" fg:w="1"/><text x="69.7101%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5407%" y="373" width="0.0806%" height="15" fill="rgb(254,179,35)" fg:x="863" fg:w="1"/><text x="69.7907%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.5407%" y="357" width="0.0806%" height="15" fill="rgb(235,97,3)" fg:x="863" fg:w="1"/><text x="69.7907%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.5407%" y="341" width="0.0806%" height="15" fill="rgb(215,155,33)" fg:x="863" fg:w="1"/><text x="69.7907%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="69.0572%" y="517" width="0.6446%" height="15" fill="rgb(223,128,12)" fg:x="857" fg:w="8"/><text x="69.3072%" y="527.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="69.2990%" y="501" width="0.4029%" height="15" fill="rgb(208,157,18)" fg:x="860" fg:w="5"/><text x="69.5490%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="69.2990%" y="485" width="0.4029%" height="15" fill="rgb(249,70,54)" fg:x="860" fg:w="5"/><text x="69.5490%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.5407%" y="469" width="0.1612%" height="15" fill="rgb(244,118,24)" fg:x="863" fg:w="2"/><text x="69.7907%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.5407%" y="453" width="0.1612%" height="15" fill="rgb(211,54,0)" fg:x="863" fg:w="2"/><text x="69.7907%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.5407%" y="437" width="0.1612%" height="15" fill="rgb(245,137,45)" fg:x="863" fg:w="2"/><text x="69.7907%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.5407%" y="421" width="0.1612%" height="15" fill="rgb(232,154,31)" fg:x="863" fg:w="2"/><text x="69.7907%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.5407%" y="405" width="0.1612%" height="15" fill="rgb(253,6,39)" fg:x="863" fg:w="2"/><text x="69.7907%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.5407%" y="389" width="0.1612%" height="15" fill="rgb(234,183,24)" fg:x="863" fg:w="2"/><text x="69.7907%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6213%" y="373" width="0.0806%" height="15" fill="rgb(252,84,40)" fg:x="864" fg:w="1"/><text x="69.8713%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6213%" y="357" width="0.0806%" height="15" fill="rgb(224,65,2)" fg:x="864" fg:w="1"/><text x="69.8713%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6213%" y="341" width="0.0806%" height="15" fill="rgb(229,38,24)" fg:x="864" fg:w="1"/><text x="69.8713%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="69.8630%" y="357" width="0.0806%" height="15" fill="rgb(218,131,50)" fg:x="867" fg:w="1"/><text x="70.1130%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="69.8630%" y="341" width="0.0806%" height="15" fill="rgb(233,106,18)" fg:x="867" fg:w="1"/><text x="70.1130%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.8630%" y="325" width="0.0806%" height="15" fill="rgb(220,216,11)" fg:x="867" fg:w="1"/><text x="70.1130%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="69.8630%" y="373" width="0.3223%" height="15" fill="rgb(251,100,45)" fg:x="867" fg:w="4"/><text x="70.1130%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="69.9436%" y="357" width="0.2417%" height="15" fill="rgb(235,143,32)" fg:x="868" fg:w="3"/><text x="70.1936%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="70.0242%" y="341" width="0.1612%" height="15" fill="rgb(248,124,34)" fg:x="869" fg:w="2"/><text x="70.2742%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="69.8630%" y="437" width="0.4029%" height="15" fill="rgb(225,221,4)" fg:x="867" fg:w="5"/><text x="70.1130%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="69.8630%" y="421" width="0.4029%" height="15" fill="rgb(242,27,43)" fg:x="867" fg:w="5"/><text x="70.1130%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="69.8630%" y="405" width="0.4029%" height="15" fill="rgb(227,54,8)" fg:x="867" fg:w="5"/><text x="70.1130%" y="415.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.40%)</title><rect x="69.8630%" y="389" width="0.4029%" height="15" fill="rgb(253,139,49)" fg:x="867" fg:w="5"/><text x="70.1130%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="70.1853%" y="373" width="0.0806%" height="15" fill="rgb(231,26,43)" fg:x="871" fg:w="1"/><text x="70.4353%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="70.1853%" y="357" width="0.0806%" height="15" fill="rgb(207,121,39)" fg:x="871" fg:w="1"/><text x="70.4353%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.1853%" y="341" width="0.0806%" height="15" fill="rgb(223,101,35)" fg:x="871" fg:w="1"/><text x="70.4353%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.1853%" y="325" width="0.0806%" height="15" fill="rgb(232,87,23)" fg:x="871" fg:w="1"/><text x="70.4353%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.1853%" y="309" width="0.0806%" height="15" fill="rgb(225,180,29)" fg:x="871" fg:w="1"/><text x="70.4353%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="70.2659%" y="421" width="0.0806%" height="15" fill="rgb(225,25,17)" fg:x="872" fg:w="1"/><text x="70.5159%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.2659%" y="405" width="0.0806%" height="15" fill="rgb(223,8,52)" fg:x="872" fg:w="1"/><text x="70.5159%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.2659%" y="389" width="0.0806%" height="15" fill="rgb(246,42,21)" fg:x="872" fg:w="1"/><text x="70.5159%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2659%" y="373" width="0.0806%" height="15" fill="rgb(205,64,43)" fg:x="872" fg:w="1"/><text x="70.5159%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.5077%" y="357" width="0.1612%" height="15" fill="rgb(221,160,13)" fg:x="875" fg:w="2"/><text x="70.7577%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.97%)</title><rect x="70.5077%" y="373" width="0.9670%" height="15" fill="rgb(239,58,35)" fg:x="875" fg:w="12"/><text x="70.7577%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.81%)</title><rect x="70.6688%" y="357" width="0.8058%" height="15" fill="rgb(251,26,40)" fg:x="877" fg:w="10"/><text x="70.9188%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3940%" y="341" width="0.0806%" height="15" fill="rgb(247,0,4)" fg:x="886" fg:w="1"/><text x="71.6440%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="71.4746%" y="373" width="0.1612%" height="15" fill="rgb(218,130,10)" fg:x="887" fg:w="2"/><text x="71.7246%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="71.4746%" y="357" width="0.1612%" height="15" fill="rgb(239,32,7)" fg:x="887" fg:w="2"/><text x="71.7246%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="71.6358%" y="373" width="0.0806%" height="15" fill="rgb(210,192,24)" fg:x="889" fg:w="1"/><text x="71.8858%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="71.6358%" y="357" width="0.0806%" height="15" fill="rgb(226,212,17)" fg:x="889" fg:w="1"/><text x="71.8858%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="71.6358%" y="341" width="0.0806%" height="15" fill="rgb(219,201,28)" fg:x="889" fg:w="1"/><text x="71.8858%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.6358%" y="325" width="0.0806%" height="15" fill="rgb(235,207,41)" fg:x="889" fg:w="1"/><text x="71.8858%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.2804%" y="309" width="0.0806%" height="15" fill="rgb(241,95,54)" fg:x="897" fg:w="1"/><text x="72.5304%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3610%" y="309" width="0.0806%" height="15" fill="rgb(248,12,23)" fg:x="898" fg:w="1"/><text x="72.6110%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.4416%" y="277" width="0.0806%" height="15" fill="rgb(228,173,4)" fg:x="899" fg:w="1"/><text x="72.6916%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.4416%" y="261" width="0.0806%" height="15" fill="rgb(254,99,5)" fg:x="899" fg:w="1"/><text x="72.6916%" y="271.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="72.4416%" y="245" width="0.0806%" height="15" fill="rgb(212,184,17)" fg:x="899" fg:w="1"/><text x="72.6916%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="72.4416%" y="229" width="0.0806%" height="15" fill="rgb(252,174,1)" fg:x="899" fg:w="1"/><text x="72.6916%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="72.4416%" y="309" width="0.1612%" height="15" fill="rgb(241,118,51)" fg:x="899" fg:w="2"/><text x="72.6916%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="72.4416%" y="293" width="0.1612%" height="15" fill="rgb(227,94,47)" fg:x="899" fg:w="2"/><text x="72.6916%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="72.5222%" y="277" width="0.0806%" height="15" fill="rgb(229,104,2)" fg:x="900" fg:w="1"/><text x="72.7722%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="72.5222%" y="261" width="0.0806%" height="15" fill="rgb(219,28,31)" fg:x="900" fg:w="1"/><text x="72.7722%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.5222%" y="245" width="0.0806%" height="15" fill="rgb(233,109,36)" fg:x="900" fg:w="1"/><text x="72.7722%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6027%" y="277" width="0.0806%" height="15" fill="rgb(246,88,11)" fg:x="901" fg:w="1"/><text x="72.8527%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="72.6027%" y="309" width="0.1612%" height="15" fill="rgb(209,212,17)" fg:x="901" fg:w="2"/><text x="72.8527%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="72.6027%" y="293" width="0.1612%" height="15" fill="rgb(243,59,29)" fg:x="901" fg:w="2"/><text x="72.8527%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="72.6833%" y="277" width="0.0806%" height="15" fill="rgb(244,205,48)" fg:x="902" fg:w="1"/><text x="72.9333%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (51 samples, 4.11%)</title><rect x="72.7639%" y="309" width="4.1096%" height="15" fill="rgb(227,30,6)" fg:x="903" fg:w="51"/><text x="73.0139%" y="319.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (51 samples, 4.11%)</title><rect x="72.7639%" y="293" width="4.1096%" height="15" fill="rgb(220,205,48)" fg:x="903" fg:w="51"/><text x="73.0139%" y="303.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (51 samples, 4.11%)</title><rect x="72.7639%" y="277" width="4.1096%" height="15" fill="rgb(250,94,14)" fg:x="903" fg:w="51"/><text x="73.0139%" y="287.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 5.32%)</title><rect x="71.7969%" y="357" width="5.3183%" height="15" fill="rgb(216,119,42)" fg:x="891" fg:w="66"/><text x="72.0469%" y="367.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.32%)</title><rect x="71.7969%" y="341" width="5.3183%" height="15" fill="rgb(232,155,0)" fg:x="891" fg:w="66"/><text x="72.0469%" y="351.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.32%)</title><rect x="71.7969%" y="325" width="5.3183%" height="15" fill="rgb(212,24,32)" fg:x="891" fg:w="66"/><text x="72.0469%" y="335.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="76.8735%" y="309" width="0.2417%" height="15" fill="rgb(216,69,20)" fg:x="954" fg:w="3"/><text x="77.1235%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0346%" y="293" width="0.0806%" height="15" fill="rgb(229,73,31)" fg:x="956" fg:w="1"/><text x="77.2846%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="77.1152%" y="357" width="0.0806%" height="15" fill="rgb(224,219,20)" fg:x="957" fg:w="1"/><text x="77.3652%" y="367.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="77.2764%" y="341" width="0.0806%" height="15" fill="rgb(215,146,41)" fg:x="959" fg:w="1"/><text x="77.5264%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="77.3570%" y="341" width="0.1612%" height="15" fill="rgb(244,71,31)" fg:x="960" fg:w="2"/><text x="77.6070%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.89%)</title><rect x="77.1958%" y="357" width="0.8864%" height="15" fill="rgb(224,24,11)" fg:x="958" fg:w="11"/><text x="77.4458%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="77.5181%" y="341" width="0.5641%" height="15" fill="rgb(229,76,15)" fg:x="962" fg:w="7"/><text x="77.7681%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (98 samples, 7.90%)</title><rect x="70.3465%" y="389" width="7.8969%" height="15" fill="rgb(209,93,2)" fg:x="873" fg:w="98"/><text x="70.5965%" y="399.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (81 samples, 6.53%)</title><rect x="71.7164%" y="373" width="6.5270%" height="15" fill="rgb(216,200,50)" fg:x="890" fg:w="81"/><text x="71.9664%" y="383.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="78.0822%" y="357" width="0.1612%" height="15" fill="rgb(211,67,34)" fg:x="969" fg:w="2"/><text x="78.3322%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="78.0822%" y="341" width="0.1612%" height="15" fill="rgb(225,87,47)" fg:x="969" fg:w="2"/><text x="78.3322%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="78.2434%" y="389" width="0.1612%" height="15" fill="rgb(217,185,16)" fg:x="971" fg:w="2"/><text x="78.4934%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="78.2434%" y="373" width="0.1612%" height="15" fill="rgb(205,0,0)" fg:x="971" fg:w="2"/><text x="78.4934%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="78.3239%" y="357" width="0.0806%" height="15" fill="rgb(207,116,45)" fg:x="972" fg:w="1"/><text x="78.5739%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="78.3239%" y="341" width="0.0806%" height="15" fill="rgb(221,156,26)" fg:x="972" fg:w="1"/><text x="78.5739%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="78.4045%" y="357" width="0.1612%" height="15" fill="rgb(213,140,4)" fg:x="973" fg:w="2"/><text x="78.6545%" y="367.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="78.4851%" y="341" width="0.0806%" height="15" fill="rgb(231,224,15)" fg:x="974" fg:w="1"/><text x="78.7351%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.4851%" y="325" width="0.0806%" height="15" fill="rgb(244,76,20)" fg:x="974" fg:w="1"/><text x="78.7351%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.4851%" y="309" width="0.0806%" height="15" fill="rgb(238,117,7)" fg:x="974" fg:w="1"/><text x="78.7351%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4851%" y="293" width="0.0806%" height="15" fill="rgb(235,1,10)" fg:x="974" fg:w="1"/><text x="78.7351%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (103 samples, 8.30%)</title><rect x="70.3465%" y="405" width="8.2998%" height="15" fill="rgb(216,165,6)" fg:x="873" fg:w="103"/><text x="70.5965%" y="415.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="78.4045%" y="389" width="0.2417%" height="15" fill="rgb(246,91,35)" fg:x="973" fg:w="3"/><text x="78.6545%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="78.4045%" y="373" width="0.2417%" height="15" fill="rgb(228,96,24)" fg:x="973" fg:w="3"/><text x="78.6545%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="78.5657%" y="357" width="0.0806%" height="15" fill="rgb(254,217,53)" fg:x="975" fg:w="1"/><text x="78.8157%" y="367.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (105 samples, 8.46%)</title><rect x="70.2659%" y="437" width="8.4609%" height="15" fill="rgb(209,60,0)" fg:x="872" fg:w="105"/><text x="70.5159%" y="447.50">&lt;regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (104 samples, 8.38%)</title><rect x="70.3465%" y="421" width="8.3803%" height="15" fill="rgb(250,93,26)" fg:x="873" fg:w="104"/><text x="70.5965%" y="431.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="78.6463%" y="405" width="0.0806%" height="15" fill="rgb(211,9,40)" fg:x="976" fg:w="1"/><text x="78.8963%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="78.7268%" y="389" width="0.0806%" height="15" fill="rgb(242,57,20)" fg:x="977" fg:w="1"/><text x="78.9768%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="78.7268%" y="405" width="0.1612%" height="15" fill="rgb(248,85,48)" fg:x="977" fg:w="2"/><text x="78.9768%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="78.8074%" y="389" width="0.0806%" height="15" fill="rgb(212,117,2)" fg:x="978" fg:w="1"/><text x="79.0574%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.8074%" y="373" width="0.0806%" height="15" fill="rgb(243,19,3)" fg:x="978" fg:w="1"/><text x="79.0574%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.8074%" y="357" width="0.0806%" height="15" fill="rgb(232,217,24)" fg:x="978" fg:w="1"/><text x="79.0574%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="78.7268%" y="437" width="0.4029%" height="15" fill="rgb(224,175,40)" fg:x="977" fg:w="5"/><text x="78.9768%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="78.7268%" y="421" width="0.4029%" height="15" fill="rgb(212,162,32)" fg:x="977" fg:w="5"/><text x="78.9768%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="78.8880%" y="405" width="0.2417%" height="15" fill="rgb(215,9,4)" fg:x="979" fg:w="3"/><text x="79.1380%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="78.8880%" y="389" width="0.2417%" height="15" fill="rgb(242,42,7)" fg:x="979" fg:w="3"/><text x="79.1380%" y="399.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="78.8880%" y="373" width="0.2417%" height="15" fill="rgb(242,184,45)" fg:x="979" fg:w="3"/><text x="79.1380%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4521%" y="357" width="0.0806%" height="15" fill="rgb(228,111,51)" fg:x="986" fg:w="1"/><text x="79.7021%" y="367.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (123 samples, 9.91%)</title><rect x="69.7824%" y="453" width="9.9114%" height="15" fill="rgb(236,147,17)" fg:x="866" fg:w="123"/><text x="70.0324%" y="463.50">indefinite::he..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="79.1297%" y="437" width="0.5641%" height="15" fill="rgb(210,75,22)" fg:x="982" fg:w="7"/><text x="79.3797%" y="447.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="79.2103%" y="421" width="0.4835%" height="15" fill="rgb(217,159,45)" fg:x="983" fg:w="6"/><text x="79.4603%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="79.2103%" y="405" width="0.4835%" height="15" fill="rgb(245,165,53)" fg:x="983" fg:w="6"/><text x="79.4603%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="79.3715%" y="389" width="0.3223%" height="15" fill="rgb(251,190,50)" fg:x="985" fg:w="4"/><text x="79.6215%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="79.3715%" y="373" width="0.3223%" height="15" fill="rgb(208,203,29)" fg:x="985" fg:w="4"/><text x="79.6215%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="79.5326%" y="357" width="0.1612%" height="15" fill="rgb(207,209,35)" fg:x="987" fg:w="2"/><text x="79.7826%" y="367.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="79.7744%" y="421" width="0.0806%" height="15" fill="rgb(230,144,49)" fg:x="990" fg:w="1"/><text x="80.0244%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.8550%" y="357" width="0.0806%" height="15" fill="rgb(229,31,6)" fg:x="991" fg:w="1"/><text x="80.1050%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.8550%" y="373" width="0.1612%" height="15" fill="rgb(251,129,24)" fg:x="991" fg:w="2"/><text x="80.1050%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9355%" y="357" width="0.0806%" height="15" fill="rgb(235,105,15)" fg:x="992" fg:w="1"/><text x="80.1855%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="79.8550%" y="389" width="0.2417%" height="15" fill="rgb(216,52,43)" fg:x="991" fg:w="3"/><text x="80.1050%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="80.0161%" y="373" width="0.0806%" height="15" fill="rgb(238,144,41)" fg:x="993" fg:w="1"/><text x="80.2661%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="80.1773%" y="357" width="0.0806%" height="15" fill="rgb(243,63,9)" fg:x="995" fg:w="1"/><text x="80.4273%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="80.0967%" y="389" width="0.2417%" height="15" fill="rgb(246,208,1)" fg:x="994" fg:w="3"/><text x="80.3467%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="80.0967%" y="373" width="0.2417%" height="15" fill="rgb(233,182,18)" fg:x="994" fg:w="3"/><text x="80.3467%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="80.2579%" y="357" width="0.0806%" height="15" fill="rgb(242,224,8)" fg:x="996" fg:w="1"/><text x="80.5079%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.2579%" y="341" width="0.0806%" height="15" fill="rgb(243,54,37)" fg:x="996" fg:w="1"/><text x="80.5079%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3384%" y="373" width="0.0806%" height="15" fill="rgb(233,192,12)" fg:x="997" fg:w="1"/><text x="80.5884%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4190%" y="357" width="0.0806%" height="15" fill="rgb(251,192,53)" fg:x="998" fg:w="1"/><text x="80.6690%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.29%)</title><rect x="80.4190%" y="373" width="1.2893%" height="15" fill="rgb(246,141,26)" fg:x="998" fg:w="16"/><text x="80.6690%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.21%)</title><rect x="80.4996%" y="357" width="1.2087%" height="15" fill="rgb(239,195,19)" fg:x="999" fg:w="15"/><text x="80.7496%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.6277%" y="341" width="0.0806%" height="15" fill="rgb(241,16,39)" fg:x="1013" fg:w="1"/><text x="81.8777%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="81.7889%" y="357" width="0.3223%" height="15" fill="rgb(223,13,53)" fg:x="1015" fg:w="4"/><text x="82.0389%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="82.0306%" y="341" width="0.0806%" height="15" fill="rgb(214,227,0)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0306%" y="325" width="0.0806%" height="15" fill="rgb(228,103,26)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="81.7083%" y="373" width="0.4835%" height="15" fill="rgb(254,177,53)" fg:x="1014" fg:w="6"/><text x="81.9583%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="82.1112%" y="357" width="0.0806%" height="15" fill="rgb(208,201,34)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="82.1112%" y="341" width="0.0806%" height="15" fill="rgb(212,39,5)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4335%" y="341" width="0.0806%" height="15" fill="rgb(246,117,3)" fg:x="1023" fg:w="1"/><text x="82.6835%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="82.5141%" y="341" width="0.1612%" height="15" fill="rgb(244,118,39)" fg:x="1024" fg:w="2"/><text x="82.7641%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="82.5141%" y="325" width="0.1612%" height="15" fill="rgb(241,64,10)" fg:x="1024" fg:w="2"/><text x="82.7641%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.5141%" y="309" width="0.1612%" height="15" fill="rgb(229,39,44)" fg:x="1024" fg:w="2"/><text x="82.7641%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="82.5141%" y="293" width="0.1612%" height="15" fill="rgb(230,226,3)" fg:x="1024" fg:w="2"/><text x="82.7641%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.81%)</title><rect x="82.6753%" y="341" width="0.8058%" height="15" fill="rgb(222,13,42)" fg:x="1026" fg:w="10"/><text x="82.9253%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (9 samples, 0.73%)</title><rect x="82.7558%" y="325" width="0.7252%" height="15" fill="rgb(247,180,54)" fg:x="1027" fg:w="9"/><text x="83.0058%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="83.0782%" y="309" width="0.4029%" height="15" fill="rgb(205,96,16)" fg:x="1031" fg:w="5"/><text x="83.3282%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="83.0782%" y="293" width="0.4029%" height="15" fill="rgb(205,100,21)" fg:x="1031" fg:w="5"/><text x="83.3282%" y="303.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="83.0782%" y="277" width="0.4029%" height="15" fill="rgb(248,51,4)" fg:x="1031" fg:w="5"/><text x="83.3282%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (24 samples, 1.93%)</title><rect x="82.1918%" y="373" width="1.9339%" height="15" fill="rgb(217,197,30)" fg:x="1020" fg:w="24"/><text x="82.4418%" y="383.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (24 samples, 1.93%)</title><rect x="82.1918%" y="357" width="1.9339%" height="15" fill="rgb(240,179,40)" fg:x="1020" fg:w="24"/><text x="82.4418%" y="367.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="83.4811%" y="341" width="0.6446%" height="15" fill="rgb(212,185,35)" fg:x="1036" fg:w="8"/><text x="83.7311%" y="351.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="83.5616%" y="325" width="0.5641%" height="15" fill="rgb(251,222,31)" fg:x="1037" fg:w="7"/><text x="83.8116%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.56%)</title><rect x="83.5616%" y="309" width="0.5641%" height="15" fill="rgb(208,140,36)" fg:x="1037" fg:w="7"/><text x="83.8116%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="84.1257%" y="373" width="0.0806%" height="15" fill="rgb(220,148,1)" fg:x="1044" fg:w="1"/><text x="84.3757%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="84.2063%" y="277" width="0.0806%" height="15" fill="rgb(254,4,28)" fg:x="1045" fg:w="1"/><text x="84.4563%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.6898%" y="261" width="0.0806%" height="15" fill="rgb(222,185,44)" fg:x="1051" fg:w="1"/><text x="84.9398%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="84.7703%" y="261" width="0.1612%" height="15" fill="rgb(215,74,39)" fg:x="1052" fg:w="2"/><text x="85.0203%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="84.9315%" y="261" width="0.1612%" height="15" fill="rgb(247,86,4)" fg:x="1054" fg:w="2"/><text x="85.1815%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.0121%" y="245" width="0.0806%" height="15" fill="rgb(231,105,32)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.0121%" y="229" width="0.0806%" height="15" fill="rgb(222,65,35)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.0121%" y="213" width="0.0806%" height="15" fill="rgb(218,145,35)" fg:x="1055" fg:w="1"/><text x="85.2621%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (7 samples, 0.56%)</title><rect x="85.0927%" y="261" width="0.5641%" height="15" fill="rgb(208,7,15)" fg:x="1056" fg:w="7"/><text x="85.3427%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.5761%" y="245" width="0.0806%" height="15" fill="rgb(209,83,13)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.5761%" y="229" width="0.0806%" height="15" fill="rgb(218,3,10)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="85.5761%" y="213" width="0.0806%" height="15" fill="rgb(211,219,4)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="85.5761%" y="197" width="0.0806%" height="15" fill="rgb(228,194,12)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.0596%" y="229" width="0.0806%" height="15" fill="rgb(210,175,7)" fg:x="1068" fg:w="1"/><text x="86.3096%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="86.1402%" y="197" width="0.1612%" height="15" fill="rgb(243,132,6)" fg:x="1069" fg:w="2"/><text x="86.3902%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="86.1402%" y="229" width="0.4835%" height="15" fill="rgb(207,72,18)" fg:x="1069" fg:w="6"/><text x="86.3902%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="86.1402%" y="213" width="0.4835%" height="15" fill="rgb(236,1,18)" fg:x="1069" fg:w="6"/><text x="86.3902%" y="223.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="86.3014%" y="197" width="0.3223%" height="15" fill="rgb(227,0,18)" fg:x="1071" fg:w="4"/><text x="86.5514%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (18 samples, 1.45%)</title><rect x="85.6567%" y="261" width="1.4504%" height="15" fill="rgb(247,37,5)" fg:x="1063" fg:w="18"/><text x="85.9067%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (15 samples, 1.21%)</title><rect x="85.8985%" y="245" width="1.2087%" height="15" fill="rgb(237,179,24)" fg:x="1066" fg:w="15"/><text x="86.1485%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="86.6237%" y="229" width="0.4835%" height="15" fill="rgb(226,53,20)" fg:x="1075" fg:w="6"/><text x="86.8737%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (35 samples, 2.82%)</title><rect x="87.1072%" y="261" width="2.8203%" height="15" fill="rgb(247,75,7)" fg:x="1081" fg:w="35"/><text x="87.3572%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (34 samples, 2.74%)</title><rect x="87.1878%" y="245" width="2.7397%" height="15" fill="rgb(233,96,12)" fg:x="1082" fg:w="34"/><text x="87.4378%" y="255.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (34 samples, 2.74%)</title><rect x="87.1878%" y="229" width="2.7397%" height="15" fill="rgb(224,125,0)" fg:x="1082" fg:w="34"/><text x="87.4378%" y="239.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="89.9275%" y="261" width="0.1612%" height="15" fill="rgb(224,92,25)" fg:x="1116" fg:w="2"/><text x="90.1775%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.0081%" y="245" width="0.0806%" height="15" fill="rgb(224,42,24)" fg:x="1117" fg:w="1"/><text x="90.2581%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 6.29%)</title><rect x="84.2063%" y="357" width="6.2853%" height="15" fill="rgb(234,132,49)" fg:x="1045" fg:w="78"/><text x="84.4563%" y="367.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (78 samples, 6.29%)</title><rect x="84.2063%" y="341" width="6.2853%" height="15" fill="rgb(248,100,35)" fg:x="1045" fg:w="78"/><text x="84.4563%" y="351.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (78 samples, 6.29%)</title><rect x="84.2063%" y="325" width="6.2853%" height="15" fill="rgb(239,94,40)" fg:x="1045" fg:w="78"/><text x="84.4563%" y="335.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (78 samples, 6.29%)</title><rect x="84.2063%" y="309" width="6.2853%" height="15" fill="rgb(235,139,28)" fg:x="1045" fg:w="78"/><text x="84.4563%" y="319.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (78 samples, 6.29%)</title><rect x="84.2063%" y="293" width="6.2853%" height="15" fill="rgb(217,144,7)" fg:x="1045" fg:w="78"/><text x="84.4563%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.20%)</title><rect x="84.2869%" y="277" width="6.2047%" height="15" fill="rgb(227,55,4)" fg:x="1046" fg:w="77"/><text x="84.5369%" y="287.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="90.0886%" y="261" width="0.4029%" height="15" fill="rgb(252,82,54)" fg:x="1118" fg:w="5"/><text x="90.3386%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="90.2498%" y="245" width="0.2417%" height="15" fill="rgb(245,172,4)" fg:x="1120" fg:w="3"/><text x="90.4998%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.4110%" y="229" width="0.0806%" height="15" fill="rgb(207,26,27)" fg:x="1122" fg:w="1"/><text x="90.6610%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.8944%" y="341" width="0.0806%" height="15" fill="rgb(252,98,18)" fg:x="1128" fg:w="1"/><text x="91.1444%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.73%)</title><rect x="90.9750%" y="341" width="0.7252%" height="15" fill="rgb(244,8,26)" fg:x="1129" fg:w="9"/><text x="91.2250%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.5391%" y="325" width="0.1612%" height="15" fill="rgb(237,173,45)" fg:x="1136" fg:w="2"/><text x="91.7891%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.5391%" y="309" width="0.1612%" height="15" fill="rgb(208,213,49)" fg:x="1136" fg:w="2"/><text x="91.7891%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="91.5391%" y="293" width="0.1612%" height="15" fill="rgb(212,122,37)" fg:x="1136" fg:w="2"/><text x="91.7891%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.53%)</title><rect x="90.4915%" y="357" width="1.5310%" height="15" fill="rgb(213,80,17)" fg:x="1123" fg:w="19"/><text x="90.7415%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="91.7002%" y="341" width="0.3223%" height="15" fill="rgb(206,210,43)" fg:x="1138" fg:w="4"/><text x="91.9502%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (146 samples, 11.76%)</title><rect x="80.3384%" y="389" width="11.7647%" height="15" fill="rgb(229,214,3)" fg:x="997" fg:w="146"/><text x="80.5884%" y="399.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (98 samples, 7.90%)</title><rect x="84.2063%" y="373" width="7.8969%" height="15" fill="rgb(235,213,29)" fg:x="1045" fg:w="98"/><text x="84.4563%" y="383.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.0226%" y="357" width="0.0806%" height="15" fill="rgb(248,135,26)" fg:x="1142" fg:w="1"/><text x="92.2726%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.2643%" y="357" width="0.0806%" height="15" fill="rgb(242,188,12)" fg:x="1145" fg:w="1"/><text x="92.5143%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.2643%" y="341" width="0.0806%" height="15" fill="rgb(245,38,12)" fg:x="1145" fg:w="1"/><text x="92.5143%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.2643%" y="325" width="0.0806%" height="15" fill="rgb(218,42,13)" fg:x="1145" fg:w="1"/><text x="92.5143%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="92.3449%" y="357" width="0.3223%" height="15" fill="rgb(238,132,49)" fg:x="1146" fg:w="4"/><text x="92.5949%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="92.4255%" y="341" width="0.2417%" height="15" fill="rgb(209,196,19)" fg:x="1147" fg:w="3"/><text x="92.6755%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="92.4255%" y="325" width="0.2417%" height="15" fill="rgb(244,131,22)" fg:x="1147" fg:w="3"/><text x="92.6755%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="92.4255%" y="309" width="0.2417%" height="15" fill="rgb(223,18,34)" fg:x="1147" fg:w="3"/><text x="92.6755%" y="319.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="92.4255%" y="293" width="0.2417%" height="15" fill="rgb(252,124,54)" fg:x="1147" fg:w="3"/><text x="92.6755%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.6672%" y="309" width="0.0806%" height="15" fill="rgb(229,106,42)" fg:x="1150" fg:w="1"/><text x="92.9172%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="92.1031%" y="389" width="0.7252%" height="15" fill="rgb(221,129,1)" fg:x="1143" fg:w="9"/><text x="92.3531%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="92.1031%" y="373" width="0.7252%" height="15" fill="rgb(229,74,15)" fg:x="1143" fg:w="9"/><text x="92.3531%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="92.6672%" y="357" width="0.1612%" height="15" fill="rgb(210,206,50)" fg:x="1150" fg:w="2"/><text x="92.9172%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.6672%" y="341" width="0.1612%" height="15" fill="rgb(251,114,31)" fg:x="1150" fg:w="2"/><text x="92.9172%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="92.6672%" y="325" width="0.1612%" height="15" fill="rgb(215,225,28)" fg:x="1150" fg:w="2"/><text x="92.9172%" y="335.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="92.7478%" y="309" width="0.0806%" height="15" fill="rgb(237,109,14)" fg:x="1151" fg:w="1"/><text x="92.9978%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="92.7478%" y="293" width="0.0806%" height="15" fill="rgb(230,13,37)" fg:x="1151" fg:w="1"/><text x="92.9978%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="92.8284%" y="341" width="0.1612%" height="15" fill="rgb(231,40,28)" fg:x="1152" fg:w="2"/><text x="93.0784%" y="351.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="92.9089%" y="325" width="0.0806%" height="15" fill="rgb(231,202,18)" fg:x="1153" fg:w="1"/><text x="93.1589%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.9089%" y="309" width="0.0806%" height="15" fill="rgb(225,33,18)" fg:x="1153" fg:w="1"/><text x="93.1589%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="92.8284%" y="357" width="0.2417%" height="15" fill="rgb(223,64,47)" fg:x="1152" fg:w="3"/><text x="93.0784%" y="367.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="92.9895%" y="341" width="0.0806%" height="15" fill="rgb(234,114,13)" fg:x="1154" fg:w="1"/><text x="93.2395%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="92.9895%" y="325" width="0.0806%" height="15" fill="rgb(248,56,40)" fg:x="1154" fg:w="1"/><text x="93.2395%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="93.0701%" y="357" width="0.0806%" height="15" fill="rgb(221,194,21)" fg:x="1155" fg:w="1"/><text x="93.3201%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="93.1507%" y="357" width="0.0806%" height="15" fill="rgb(242,108,46)" fg:x="1156" fg:w="1"/><text x="93.4007%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="93.1507%" y="341" width="0.0806%" height="15" fill="rgb(220,106,10)" fg:x="1156" fg:w="1"/><text x="93.4007%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.1507%" y="325" width="0.0806%" height="15" fill="rgb(211,88,4)" fg:x="1156" fg:w="1"/><text x="93.4007%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.1507%" y="309" width="0.0806%" height="15" fill="rgb(214,95,34)" fg:x="1156" fg:w="1"/><text x="93.4007%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.1507%" y="293" width="0.0806%" height="15" fill="rgb(250,160,33)" fg:x="1156" fg:w="1"/><text x="93.4007%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (169 samples, 13.62%)</title><rect x="79.6938%" y="437" width="13.6180%" height="15" fill="rgb(225,29,10)" fg:x="989" fg:w="169"/><text x="79.9438%" y="447.50">&lt;regex::regex::string..</text></g><g><title>regex::builders::Builder::build_one_string (167 samples, 13.46%)</title><rect x="79.8550%" y="421" width="13.4569%" height="15" fill="rgb(224,28,30)" fg:x="991" fg:w="167"/><text x="80.1050%" y="431.50">regex::builders::Bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (167 samples, 13.46%)</title><rect x="79.8550%" y="405" width="13.4569%" height="15" fill="rgb(231,77,4)" fg:x="991" fg:w="167"/><text x="80.1050%" y="415.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="92.8284%" y="389" width="0.4835%" height="15" fill="rgb(209,63,21)" fg:x="1152" fg:w="6"/><text x="93.0784%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="92.8284%" y="373" width="0.4835%" height="15" fill="rgb(226,22,11)" fg:x="1152" fg:w="6"/><text x="93.0784%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.2313%" y="357" width="0.0806%" height="15" fill="rgb(216,82,30)" fg:x="1157" fg:w="1"/><text x="93.4813%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="93.3118%" y="389" width="0.0806%" height="15" fill="rgb(246,227,38)" fg:x="1158" fg:w="1"/><text x="93.5618%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.3118%" y="373" width="0.0806%" height="15" fill="rgb(251,203,53)" fg:x="1158" fg:w="1"/><text x="93.5618%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="93.3118%" y="405" width="0.1612%" height="15" fill="rgb(254,101,1)" fg:x="1158" fg:w="2"/><text x="93.5618%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="93.3924%" y="389" width="0.0806%" height="15" fill="rgb(241,180,5)" fg:x="1159" fg:w="1"/><text x="93.6424%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.3924%" y="373" width="0.0806%" height="15" fill="rgb(218,168,4)" fg:x="1159" fg:w="1"/><text x="93.6424%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.3924%" y="357" width="0.0806%" height="15" fill="rgb(224,223,32)" fg:x="1159" fg:w="1"/><text x="93.6424%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="93.3118%" y="437" width="0.3223%" height="15" fill="rgb(236,106,22)" fg:x="1158" fg:w="4"/><text x="93.5618%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="93.3118%" y="421" width="0.3223%" height="15" fill="rgb(206,121,5)" fg:x="1158" fg:w="4"/><text x="93.5618%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="93.4730%" y="405" width="0.1612%" height="15" fill="rgb(233,87,28)" fg:x="1160" fg:w="2"/><text x="93.7230%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="93.4730%" y="389" width="0.1612%" height="15" fill="rgb(236,137,17)" fg:x="1160" fg:w="2"/><text x="93.7230%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.5536%" y="373" width="0.0806%" height="15" fill="rgb(209,183,38)" fg:x="1161" fg:w="1"/><text x="93.8036%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="93.6342%" y="389" width="0.0806%" height="15" fill="rgb(206,162,44)" fg:x="1162" fg:w="1"/><text x="93.8842%" y="399.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="93.6342%" y="373" width="0.0806%" height="15" fill="rgb(237,70,39)" fg:x="1162" fg:w="1"/><text x="93.8842%" y="383.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="93.6342%" y="357" width="0.0806%" height="15" fill="rgb(212,176,5)" fg:x="1162" fg:w="1"/><text x="93.8842%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="93.6342%" y="421" width="0.1612%" height="15" fill="rgb(232,95,16)" fg:x="1162" fg:w="2"/><text x="93.8842%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="93.6342%" y="405" width="0.1612%" height="15" fill="rgb(219,115,35)" fg:x="1162" fg:w="2"/><text x="93.8842%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="93.7147%" y="389" width="0.0806%" height="15" fill="rgb(251,67,27)" fg:x="1163" fg:w="1"/><text x="93.9647%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="93.7147%" y="373" width="0.0806%" height="15" fill="rgb(222,95,40)" fg:x="1163" fg:w="1"/><text x="93.9647%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.0371%" y="341" width="0.0806%" height="15" fill="rgb(250,35,16)" fg:x="1167" fg:w="1"/><text x="94.2871%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.0371%" y="325" width="0.0806%" height="15" fill="rgb(224,86,44)" fg:x="1167" fg:w="1"/><text x="94.2871%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.0371%" y="309" width="0.0806%" height="15" fill="rgb(237,53,53)" fg:x="1167" fg:w="1"/><text x="94.2871%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="94.1176%" y="341" width="0.1612%" height="15" fill="rgb(208,171,33)" fg:x="1168" fg:w="2"/><text x="94.3676%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (182 samples, 14.67%)</title><rect x="79.6938%" y="453" width="14.6656%" height="15" fill="rgb(222,64,27)" fg:x="989" fg:w="182"/><text x="79.9438%" y="463.50">indefinite::rules::num..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.73%)</title><rect x="93.6342%" y="437" width="0.7252%" height="15" fill="rgb(221,121,35)" fg:x="1162" fg:w="9"/><text x="93.8842%" y="447.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="93.7953%" y="421" width="0.5641%" height="15" fill="rgb(228,137,42)" fg:x="1164" fg:w="7"/><text x="94.0453%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="93.7953%" y="405" width="0.5641%" height="15" fill="rgb(227,54,21)" fg:x="1164" fg:w="7"/><text x="94.0453%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="93.7953%" y="389" width="0.5641%" height="15" fill="rgb(240,168,33)" fg:x="1164" fg:w="7"/><text x="94.0453%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="93.8759%" y="373" width="0.4835%" height="15" fill="rgb(243,159,6)" fg:x="1165" fg:w="6"/><text x="94.1259%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="93.8759%" y="357" width="0.4835%" height="15" fill="rgb(205,211,41)" fg:x="1165" fg:w="6"/><text x="94.1259%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="94.2788%" y="341" width="0.0806%" height="15" fill="rgb(253,30,1)" fg:x="1170" fg:w="1"/><text x="94.5288%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="94.2788%" y="325" width="0.0806%" height="15" fill="rgb(226,80,18)" fg:x="1170" fg:w="1"/><text x="94.5288%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="94.3594%" y="437" width="0.1612%" height="15" fill="rgb(253,156,46)" fg:x="1171" fg:w="2"/><text x="94.6094%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="94.9234%" y="357" width="0.0806%" height="15" fill="rgb(248,87,27)" fg:x="1178" fg:w="1"/><text x="95.1734%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.9234%" y="341" width="0.0806%" height="15" fill="rgb(227,122,2)" fg:x="1178" fg:w="1"/><text x="95.1734%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="95.0040%" y="357" width="0.2417%" height="15" fill="rgb(229,94,39)" fg:x="1179" fg:w="3"/><text x="95.2540%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="95.0040%" y="341" width="0.2417%" height="15" fill="rgb(225,173,31)" fg:x="1179" fg:w="3"/><text x="95.2540%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="95.3263%" y="277" width="0.0806%" height="15" fill="rgb(239,176,30)" fg:x="1183" fg:w="1"/><text x="95.5763%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="95.2458%" y="341" width="0.2417%" height="15" fill="rgb(212,104,21)" fg:x="1182" fg:w="3"/><text x="95.4958%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="95.2458%" y="325" width="0.2417%" height="15" fill="rgb(240,209,40)" fg:x="1182" fg:w="3"/><text x="95.4958%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="95.2458%" y="309" width="0.2417%" height="15" fill="rgb(234,195,5)" fg:x="1182" fg:w="3"/><text x="95.4958%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="95.2458%" y="293" width="0.2417%" height="15" fill="rgb(238,213,1)" fg:x="1182" fg:w="3"/><text x="95.4958%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.4069%" y="277" width="0.0806%" height="15" fill="rgb(235,182,54)" fg:x="1184" fg:w="1"/><text x="95.6569%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.4069%" y="261" width="0.0806%" height="15" fill="rgb(229,50,46)" fg:x="1184" fg:w="1"/><text x="95.6569%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.4069%" y="245" width="0.0806%" height="15" fill="rgb(219,145,13)" fg:x="1184" fg:w="1"/><text x="95.6569%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.4069%" y="229" width="0.0806%" height="15" fill="rgb(220,226,10)" fg:x="1184" fg:w="1"/><text x="95.6569%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="95.4875%" y="325" width="0.1612%" height="15" fill="rgb(248,47,30)" fg:x="1185" fg:w="2"/><text x="95.7375%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="95.2458%" y="357" width="0.5641%" height="15" fill="rgb(231,209,44)" fg:x="1182" fg:w="7"/><text x="95.4958%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="95.4875%" y="341" width="0.3223%" height="15" fill="rgb(209,80,30)" fg:x="1185" fg:w="4"/><text x="95.7375%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="95.6487%" y="325" width="0.1612%" height="15" fill="rgb(232,9,14)" fg:x="1187" fg:w="2"/><text x="95.8987%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (15 samples, 1.21%)</title><rect x="94.6817%" y="373" width="1.2087%" height="15" fill="rgb(243,91,43)" fg:x="1175" fg:w="15"/><text x="94.9317%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.8098%" y="357" width="0.0806%" height="15" fill="rgb(231,90,52)" fg:x="1189" fg:w="1"/><text x="96.0598%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="95.9710%" y="325" width="0.0806%" height="15" fill="rgb(253,192,44)" fg:x="1191" fg:w="1"/><text x="96.2210%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="96.0516%" y="325" width="0.0806%" height="15" fill="rgb(241,66,31)" fg:x="1192" fg:w="1"/><text x="96.3016%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="96.0516%" y="309" width="0.0806%" height="15" fill="rgb(235,81,37)" fg:x="1192" fg:w="1"/><text x="96.3016%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="96.0516%" y="293" width="0.0806%" height="15" fill="rgb(223,221,9)" fg:x="1192" fg:w="1"/><text x="96.3016%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.1322%" y="325" width="0.0806%" height="15" fill="rgb(242,180,7)" fg:x="1193" fg:w="1"/><text x="96.3822%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="96.1322%" y="309" width="0.0806%" height="15" fill="rgb(243,78,19)" fg:x="1193" fg:w="1"/><text x="96.3822%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="95.8904%" y="373" width="0.4029%" height="15" fill="rgb(233,23,17)" fg:x="1190" fg:w="5"/><text x="96.1404%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="95.8904%" y="357" width="0.4029%" height="15" fill="rgb(252,122,45)" fg:x="1190" fg:w="5"/><text x="96.1404%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="95.8904%" y="341" width="0.4029%" height="15" fill="rgb(247,108,20)" fg:x="1190" fg:w="5"/><text x="96.1404%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.2127%" y="325" width="0.0806%" height="15" fill="rgb(235,84,21)" fg:x="1194" fg:w="1"/><text x="96.4627%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2127%" y="309" width="0.0806%" height="15" fill="rgb(247,129,10)" fg:x="1194" fg:w="1"/><text x="96.4627%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2127%" y="293" width="0.0806%" height="15" fill="rgb(208,173,14)" fg:x="1194" fg:w="1"/><text x="96.4627%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2127%" y="277" width="0.0806%" height="15" fill="rgb(236,31,38)" fg:x="1194" fg:w="1"/><text x="96.4627%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3739%" y="309" width="0.0806%" height="15" fill="rgb(232,65,17)" fg:x="1196" fg:w="1"/><text x="96.6239%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3739%" y="293" width="0.0806%" height="15" fill="rgb(224,45,49)" fg:x="1196" fg:w="1"/><text x="96.6239%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.3739%" y="277" width="0.0806%" height="15" fill="rgb(225,2,53)" fg:x="1196" fg:w="1"/><text x="96.6239%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="96.3739%" y="325" width="0.1612%" height="15" fill="rgb(248,210,53)" fg:x="1196" fg:w="2"/><text x="96.6239%" y="335.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="96.4545%" y="309" width="0.0806%" height="15" fill="rgb(211,1,30)" fg:x="1197" fg:w="1"/><text x="96.7045%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="96.3739%" y="341" width="0.2417%" height="15" fill="rgb(224,96,15)" fg:x="1196" fg:w="3"/><text x="96.6239%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="96.5351%" y="325" width="0.0806%" height="15" fill="rgb(252,45,11)" fg:x="1198" fg:w="1"/><text x="96.7851%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.7768%" y="325" width="0.0806%" height="15" fill="rgb(220,125,38)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7768%" y="309" width="0.0806%" height="15" fill="rgb(243,161,33)" fg:x="1201" fg:w="1"/><text x="97.0268%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (30 samples, 2.42%)</title><rect x="94.6011%" y="421" width="2.4174%" height="15" fill="rgb(248,197,34)" fg:x="1174" fg:w="30"/><text x="94.8511%" y="431.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (30 samples, 2.42%)</title><rect x="94.6011%" y="405" width="2.4174%" height="15" fill="rgb(228,165,23)" fg:x="1174" fg:w="30"/><text x="94.8511%" y="415.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (30 samples, 2.42%)</title><rect x="94.6011%" y="389" width="2.4174%" height="15" fill="rgb(236,94,38)" fg:x="1174" fg:w="30"/><text x="94.8511%" y="399.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.73%)</title><rect x="96.2933%" y="373" width="0.7252%" height="15" fill="rgb(220,13,23)" fg:x="1195" fg:w="9"/><text x="96.5433%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.73%)</title><rect x="96.2933%" y="357" width="0.7252%" height="15" fill="rgb(234,26,39)" fg:x="1195" fg:w="9"/><text x="96.5433%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.40%)</title><rect x="96.6156%" y="341" width="0.4029%" height="15" fill="rgb(205,117,44)" fg:x="1199" fg:w="5"/><text x="96.8656%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="96.8574%" y="325" width="0.1612%" height="15" fill="rgb(250,42,2)" fg:x="1202" fg:w="2"/><text x="97.1074%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="96.8574%" y="309" width="0.1612%" height="15" fill="rgb(223,83,14)" fg:x="1202" fg:w="2"/><text x="97.1074%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.0185%" y="421" width="0.0806%" height="15" fill="rgb(241,147,50)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.0185%" y="405" width="0.0806%" height="15" fill="rgb(218,90,6)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="97.0185%" y="389" width="0.0806%" height="15" fill="rgb(210,191,5)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="399.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="97.0185%" y="373" width="0.0806%" height="15" fill="rgb(225,139,19)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0185%" y="357" width="0.0806%" height="15" fill="rgb(210,1,33)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0185%" y="341" width="0.0806%" height="15" fill="rgb(213,50,3)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0185%" y="325" width="0.0806%" height="15" fill="rgb(234,227,4)" fg:x="1204" fg:w="1"/><text x="97.2685%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0991%" y="405" width="0.0806%" height="15" fill="rgb(246,63,5)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1797%" y="389" width="0.0806%" height="15" fill="rgb(245,136,27)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="97.1797%" y="373" width="0.0806%" height="15" fill="rgb(247,199,27)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1797%" y="357" width="0.0806%" height="15" fill="rgb(252,158,49)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1797%" y="341" width="0.0806%" height="15" fill="rgb(254,73,1)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="97.0991%" y="421" width="0.3223%" height="15" fill="rgb(248,93,19)" fg:x="1205" fg:w="4"/><text x="97.3491%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="97.1797%" y="405" width="0.2417%" height="15" fill="rgb(206,67,5)" fg:x="1206" fg:w="3"/><text x="97.4297%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="97.2603%" y="389" width="0.1612%" height="15" fill="rgb(209,210,4)" fg:x="1207" fg:w="2"/><text x="97.5103%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="97.2603%" y="373" width="0.1612%" height="15" fill="rgb(214,185,36)" fg:x="1207" fg:w="2"/><text x="97.5103%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3409%" y="357" width="0.0806%" height="15" fill="rgb(233,191,26)" fg:x="1208" fg:w="1"/><text x="97.5909%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="97.5020%" y="373" width="0.4029%" height="15" fill="rgb(248,94,17)" fg:x="1210" fg:w="5"/><text x="97.7520%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="97.5020%" y="357" width="0.4029%" height="15" fill="rgb(250,64,4)" fg:x="1210" fg:w="5"/><text x="97.7520%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="97.7438%" y="341" width="0.1612%" height="15" fill="rgb(218,41,53)" fg:x="1213" fg:w="2"/><text x="97.9938%" y="351.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (43 samples, 3.46%)</title><rect x="94.5205%" y="437" width="3.4649%" height="15" fill="rgb(251,176,28)" fg:x="1173" fg:w="43"/><text x="94.7705%" y="447.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="97.4214%" y="421" width="0.5641%" height="15" fill="rgb(247,22,9)" fg:x="1209" fg:w="7"/><text x="97.6714%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="97.4214%" y="405" width="0.5641%" height="15" fill="rgb(218,201,14)" fg:x="1209" fg:w="7"/><text x="97.6714%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="97.4214%" y="389" width="0.5641%" height="15" fill="rgb(218,94,10)" fg:x="1209" fg:w="7"/><text x="97.6714%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="97.9049%" y="373" width="0.0806%" height="15" fill="rgb(222,183,52)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="97.9049%" y="357" width="0.0806%" height="15" fill="rgb(242,140,25)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="367.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (361 samples, 29.09%)</title><rect x="69.0572%" y="533" width="29.0894%" height="15" fill="rgb(235,197,38)" fg:x="857" fg:w="361"/><text x="69.3072%" y="543.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::..</text></g><g><title>plugins_core::looking::model::qualify_name (353 samples, 28.44%)</title><rect x="69.7019%" y="517" width="28.4448%" height="15" fill="rgb(237,136,15)" fg:x="865" fg:w="353"/><text x="69.9519%" y="527.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (352 samples, 28.36%)</title><rect x="69.7824%" y="501" width="28.3642%" height="15" fill="rgb(223,44,49)" fg:x="866" fg:w="352"/><text x="70.0324%" y="511.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (352 samples, 28.36%)</title><rect x="69.7824%" y="485" width="28.3642%" height="15" fill="rgb(227,71,15)" fg:x="866" fg:w="352"/><text x="70.0324%" y="495.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (352 samples, 28.36%)</title><rect x="69.7824%" y="469" width="28.3642%" height="15" fill="rgb(225,153,20)" fg:x="866" fg:w="352"/><text x="70.0324%" y="479.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (47 samples, 3.79%)</title><rect x="94.3594%" y="453" width="3.7873%" height="15" fill="rgb(210,190,26)" fg:x="1171" fg:w="47"/><text x="94.6094%" y="463.50">inde..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="97.9855%" y="437" width="0.1612%" height="15" fill="rgb(223,147,5)" fg:x="1216" fg:w="2"/><text x="98.2355%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="98.1467%" y="533" width="0.0806%" height="15" fill="rgb(207,14,23)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.1467%" y="517" width="0.0806%" height="15" fill="rgb(211,195,53)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2272%" y="469" width="0.0806%" height="15" fill="rgb(237,75,46)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2272%" y="453" width="0.0806%" height="15" fill="rgb(254,55,14)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2272%" y="437" width="0.0806%" height="15" fill="rgb(230,185,30)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2272%" y="421" width="0.0806%" height="15" fill="rgb(220,14,11)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2272%" y="405" width="0.0806%" height="15" fill="rgb(215,169,44)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2272%" y="389" width="0.0806%" height="15" fill="rgb(253,203,20)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2272%" y="373" width="0.0806%" height="15" fill="rgb(229,225,17)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2272%" y="357" width="0.0806%" height="15" fill="rgb(236,76,26)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2272%" y="341" width="0.0806%" height="15" fill="rgb(234,15,30)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2272%" y="325" width="0.0806%" height="15" fill="rgb(211,113,48)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2272%" y="309" width="0.0806%" height="15" fill="rgb(221,31,36)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="319.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.2272%" y="501" width="0.1612%" height="15" fill="rgb(215,118,52)" fg:x="1219" fg:w="2"/><text x="98.4772%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.2272%" y="485" width="0.1612%" height="15" fill="rgb(241,151,27)" fg:x="1219" fg:w="2"/><text x="98.4772%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3078%" y="469" width="0.0806%" height="15" fill="rgb(253,51,3)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3078%" y="453" width="0.0806%" height="15" fill="rgb(216,201,24)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="98.3884%" y="405" width="0.0806%" height="15" fill="rgb(231,107,4)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="98.4690%" y="389" width="0.0806%" height="15" fill="rgb(243,97,54)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="98.4690%" y="373" width="0.0806%" height="15" fill="rgb(221,32,51)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="98.4690%" y="357" width="0.0806%" height="15" fill="rgb(218,171,35)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4690%" y="341" width="0.0806%" height="15" fill="rgb(214,20,53)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4690%" y="325" width="0.0806%" height="15" fill="rgb(239,9,52)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4690%" y="309" width="0.0806%" height="15" fill="rgb(215,114,45)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4690%" y="293" width="0.0806%" height="15" fill="rgb(208,118,9)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.4690%" y="277" width="0.0806%" height="15" fill="rgb(235,7,39)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4690%" y="261" width="0.0806%" height="15" fill="rgb(243,225,15)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4690%" y="245" width="0.0806%" height="15" fill="rgb(225,216,18)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4690%" y="229" width="0.0806%" height="15" fill="rgb(233,36,38)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.4690%" y="213" width="0.0806%" height="15" fill="rgb(239,88,23)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6301%" y="261" width="0.0806%" height="15" fill="rgb(219,181,35)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6301%" y="245" width="0.0806%" height="15" fill="rgb(215,18,46)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6301%" y="229" width="0.0806%" height="15" fill="rgb(241,38,11)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6301%" y="213" width="0.0806%" height="15" fill="rgb(248,169,45)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6301%" y="197" width="0.0806%" height="15" fill="rgb(239,50,49)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6301%" y="181" width="0.0806%" height="15" fill="rgb(231,96,31)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.6301%" y="165" width="0.0806%" height="15" fill="rgb(224,193,37)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6301%" y="149" width="0.0806%" height="15" fill="rgb(227,153,50)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6301%" y="133" width="0.0806%" height="15" fill="rgb(249,228,3)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6301%" y="117" width="0.0806%" height="15" fill="rgb(219,164,43)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6301%" y="101" width="0.0806%" height="15" fill="rgb(216,45,41)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="111.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6301%" y="85" width="0.0806%" height="15" fill="rgb(210,226,51)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="95.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6301%" y="69" width="0.0806%" height="15" fill="rgb(209,117,49)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="79.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="98.6301%" y="53" width="0.0806%" height="15" fill="rgb(206,196,24)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="63.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.6301%" y="37" width="0.0806%" height="15" fill="rgb(253,218,3)" fg:x="1224" fg:w="1"/><text x="98.8801%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.7107%" y="261" width="0.0806%" height="15" fill="rgb(252,166,2)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7107%" y="245" width="0.0806%" height="15" fill="rgb(236,218,26)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.7107%" y="229" width="0.0806%" height="15" fill="rgb(254,84,19)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7107%" y="213" width="0.0806%" height="15" fill="rgb(219,137,29)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="98.6301%" y="309" width="0.3223%" height="15" fill="rgb(227,47,52)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="98.6301%" y="293" width="0.3223%" height="15" fill="rgb(229,167,24)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="98.6301%" y="277" width="0.3223%" height="15" fill="rgb(233,164,1)" fg:x="1224" fg:w="4"/><text x="98.8801%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.7913%" y="261" width="0.1612%" height="15" fill="rgb(218,88,48)" fg:x="1226" fg:w="2"/><text x="99.0413%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.7913%" y="245" width="0.1612%" height="15" fill="rgb(226,214,24)" fg:x="1226" fg:w="2"/><text x="99.0413%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.8719%" y="229" width="0.0806%" height="15" fill="rgb(233,29,12)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8719%" y="213" width="0.0806%" height="15" fill="rgb(219,120,34)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8719%" y="197" width="0.0806%" height="15" fill="rgb(226,78,44)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.8719%" y="181" width="0.0806%" height="15" fill="rgb(240,15,48)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="191.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (6 samples, 0.48%)</title><rect x="98.5496%" y="373" width="0.4835%" height="15" fill="rgb(253,176,7)" fg:x="1223" fg:w="6"/><text x="98.7996%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (6 samples, 0.48%)</title><rect x="98.5496%" y="357" width="0.4835%" height="15" fill="rgb(206,166,28)" fg:x="1223" fg:w="6"/><text x="98.7996%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="98.5496%" y="341" width="0.4835%" height="15" fill="rgb(241,53,51)" fg:x="1223" fg:w="6"/><text x="98.7996%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="98.5496%" y="325" width="0.4835%" height="15" fill="rgb(249,112,30)" fg:x="1223" fg:w="6"/><text x="98.7996%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9525%" y="309" width="0.0806%" height="15" fill="rgb(217,85,30)" fg:x="1228" fg:w="1"/><text x="99.2025%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9525%" y="293" width="0.0806%" height="15" fill="rgb(233,49,7)" fg:x="1228" fg:w="1"/><text x="99.2025%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1136%" y="293" width="0.0806%" height="15" fill="rgb(234,109,9)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1136%" y="277" width="0.0806%" height="15" fill="rgb(253,95,22)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.1136%" y="261" width="0.0806%" height="15" fill="rgb(233,176,25)" fg:x="1230" fg:w="1"/><text x="99.3636%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1942%" y="229" width="0.0806%" height="15" fill="rgb(236,33,39)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2748%" y="213" width="0.0806%" height="15" fill="rgb(223,226,42)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2748%" y="197" width="0.0806%" height="15" fill="rgb(216,99,33)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2748%" y="181" width="0.0806%" height="15" fill="rgb(235,84,23)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2748%" y="165" width="0.0806%" height="15" fill="rgb(232,2,27)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2748%" y="149" width="0.0806%" height="15" fill="rgb(241,23,22)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2748%" y="133" width="0.0806%" height="15" fill="rgb(211,73,27)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="143.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (13 samples, 1.05%)</title><rect x="98.3884%" y="501" width="1.0475%" height="15" fill="rgb(235,109,49)" fg:x="1221" fg:w="13"/><text x="98.6384%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.05%)</title><rect x="98.3884%" y="485" width="1.0475%" height="15" fill="rgb(230,99,29)" fg:x="1221" fg:w="13"/><text x="98.6384%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.05%)</title><rect x="98.3884%" y="469" width="1.0475%" height="15" fill="rgb(245,199,7)" fg:x="1221" fg:w="13"/><text x="98.6384%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.05%)</title><rect x="98.3884%" y="453" width="1.0475%" height="15" fill="rgb(217,179,10)" fg:x="1221" fg:w="13"/><text x="98.6384%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (13 samples, 1.05%)</title><rect x="98.3884%" y="437" width="1.0475%" height="15" fill="rgb(254,99,47)" fg:x="1221" fg:w="13"/><text x="98.6384%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.05%)</title><rect x="98.3884%" y="421" width="1.0475%" height="15" fill="rgb(251,121,7)" fg:x="1221" fg:w="13"/><text x="98.6384%" y="431.50"></text></g><g><title>engine::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="98.4690%" y="405" width="0.9670%" height="15" fill="rgb(250,177,26)" fg:x="1222" fg:w="12"/><text x="98.7190%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (11 samples, 0.89%)</title><rect x="98.5496%" y="389" width="0.8864%" height="15" fill="rgb(232,88,15)" fg:x="1223" fg:w="11"/><text x="98.7996%" y="399.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="99.0330%" y="373" width="0.4029%" height="15" fill="rgb(251,54,54)" fg:x="1229" fg:w="5"/><text x="99.2830%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="99.0330%" y="357" width="0.4029%" height="15" fill="rgb(208,177,15)" fg:x="1229" fg:w="5"/><text x="99.2830%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="99.0330%" y="341" width="0.4029%" height="15" fill="rgb(205,97,32)" fg:x="1229" fg:w="5"/><text x="99.2830%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="99.1136%" y="325" width="0.3223%" height="15" fill="rgb(217,192,13)" fg:x="1230" fg:w="4"/><text x="99.3636%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.1136%" y="309" width="0.3223%" height="15" fill="rgb(215,163,41)" fg:x="1230" fg:w="4"/><text x="99.3636%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.1942%" y="293" width="0.2417%" height="15" fill="rgb(246,83,29)" fg:x="1231" fg:w="3"/><text x="99.4442%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.1942%" y="277" width="0.2417%" height="15" fill="rgb(219,2,45)" fg:x="1231" fg:w="3"/><text x="99.4442%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.1942%" y="261" width="0.2417%" height="15" fill="rgb(242,215,33)" fg:x="1231" fg:w="3"/><text x="99.4442%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.1942%" y="245" width="0.2417%" height="15" fill="rgb(217,1,6)" fg:x="1231" fg:w="3"/><text x="99.4442%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.2748%" y="229" width="0.1612%" height="15" fill="rgb(207,85,52)" fg:x="1232" fg:w="2"/><text x="99.5248%" y="239.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="99.3554%" y="213" width="0.0806%" height="15" fill="rgb(231,171,19)" fg:x="1233" fg:w="1"/><text x="99.6054%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.4359%" y="501" width="0.0806%" height="15" fill="rgb(207,128,4)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="511.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (381 samples, 30.70%)</title><rect x="68.8961%" y="565" width="30.7010%" height="15" fill="rgb(219,208,4)" fg:x="855" fg:w="381"/><text x="69.1461%" y="575.50">&lt;plugins_core::looking::actions::LookAction as ker..</text></g><g><title>plugins_core::looking::model::new_area_observation (379 samples, 30.54%)</title><rect x="69.0572%" y="549" width="30.5399%" height="15" fill="rgb(235,161,42)" fg:x="857" fg:w="379"/><text x="69.3072%" y="559.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (17 samples, 1.37%)</title><rect x="98.2272%" y="533" width="1.3699%" height="15" fill="rgb(247,218,18)" fg:x="1219" fg:w="17"/><text x="98.4772%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (17 samples, 1.37%)</title><rect x="98.2272%" y="517" width="1.3699%" height="15" fill="rgb(232,114,51)" fg:x="1219" fg:w="17"/><text x="98.4772%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5165%" y="501" width="0.0806%" height="15" fill="rgb(222,95,3)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5165%" y="485" width="0.0806%" height="15" fill="rgb(240,65,29)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="495.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (390 samples, 31.43%)</title><rect x="68.2514%" y="693" width="31.4263%" height="15" fill="rgb(249,209,20)" fg:x="847" fg:w="390"/><text x="68.5014%" y="703.50">&lt;engine::perform::StandardPerformer as kernel::acti..</text></g><g><title>kernel::plugins::mw::apply_middleware (382 samples, 30.78%)</title><rect x="68.8961%" y="677" width="30.7816%" height="15" fill="rgb(241,48,37)" fg:x="855" fg:w="382"/><text x="69.1461%" y="687.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (382 samples, 30.78%)</title><rect x="68.8961%" y="661" width="30.7816%" height="15" fill="rgb(230,140,42)" fg:x="855" fg:w="382"/><text x="69.1461%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (382 samples, 30.78%)</title><rect x="68.8961%" y="645" width="30.7816%" height="15" fill="rgb(230,176,45)" fg:x="855" fg:w="382"/><text x="69.1461%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (382 samples, 30.78%)</title><rect x="68.8961%" y="629" width="30.7816%" height="15" fill="rgb(245,112,21)" fg:x="855" fg:w="382"/><text x="69.1461%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (382 samples, 30.78%)</title><rect x="68.8961%" y="613" width="30.7816%" height="15" fill="rgb(207,183,35)" fg:x="855" fg:w="382"/><text x="69.1461%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (382 samples, 30.78%)</title><rect x="68.8961%" y="597" width="30.7816%" height="15" fill="rgb(227,44,33)" fg:x="855" fg:w="382"/><text x="69.1461%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (382 samples, 30.78%)</title><rect x="68.8961%" y="581" width="30.7816%" height="15" fill="rgb(246,120,21)" fg:x="855" fg:w="382"/><text x="69.1461%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shi..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="99.5971%" y="565" width="0.0806%" height="15" fill="rgb(235,57,52)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="99.6777%" y="613" width="0.0806%" height="15" fill="rgb(238,84,10)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="99.6777%" y="597" width="0.0806%" height="15" fill="rgb(251,200,32)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6777%" y="581" width="0.0806%" height="15" fill="rgb(247,159,13)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6777%" y="565" width="0.0806%" height="15" fill="rgb(238,64,4)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6777%" y="549" width="0.0806%" height="15" fill="rgb(221,131,51)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6777%" y="533" width="0.0806%" height="15" fill="rgb(242,5,29)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6777%" y="517" width="0.0806%" height="15" fill="rgb(214,130,32)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6777%" y="501" width="0.0806%" height="15" fill="rgb(244,210,16)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6777%" y="485" width="0.0806%" height="15" fill="rgb(234,48,26)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6777%" y="469" width="0.0806%" height="15" fill="rgb(231,82,38)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7583%" y="565" width="0.0806%" height="15" fill="rgb(254,128,41)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.7583%" y="549" width="0.0806%" height="15" fill="rgb(212,73,49)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="559.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (393 samples, 31.67%)</title><rect x="68.2514%" y="789" width="31.6680%" height="15" fill="rgb(205,62,54)" fg:x="847" fg:w="393"/><text x="68.5014%" y="799.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins..</text></g><g><title>core::iter::adapters::try_process (393 samples, 31.67%)</title><rect x="68.2514%" y="773" width="31.6680%" height="15" fill="rgb(228,0,8)" fg:x="847" fg:w="393"/><text x="68.5014%" y="783.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (393 samples, 31.67%)</title><rect x="68.2514%" y="757" width="31.6680%" height="15" fill="rgb(251,28,17)" fg:x="847" fg:w="393"/><text x="68.5014%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (393 samples, 31.67%)</title><rect x="68.2514%" y="741" width="31.6680%" height="15" fill="rgb(238,105,27)" fg:x="847" fg:w="393"/><text x="68.5014%" y="751.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter:..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (393 samples, 31.67%)</title><rect x="68.2514%" y="725" width="31.6680%" height="15" fill="rgb(237,216,33)" fg:x="847" fg:w="393"/><text x="68.5014%" y="735.50">&lt;plugins_core::looking::LookingPlugin as kernel::pl..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (393 samples, 31.67%)</title><rect x="68.2514%" y="709" width="31.6680%" height="15" fill="rgb(229,228,25)" fg:x="847" fg:w="393"/><text x="68.5014%" y="719.50">&lt;engine::perform::StandardPerformer as kernel::acti..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="99.6777%" y="693" width="0.2417%" height="15" fill="rgb(233,75,23)" fg:x="1237" fg:w="3"/><text x="99.9277%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="99.6777%" y="677" width="0.2417%" height="15" fill="rgb(231,207,16)" fg:x="1237" fg:w="3"/><text x="99.9277%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.6777%" y="661" width="0.2417%" height="15" fill="rgb(231,191,45)" fg:x="1237" fg:w="3"/><text x="99.9277%" y="671.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6777%" y="645" width="0.2417%" height="15" fill="rgb(224,133,17)" fg:x="1237" fg:w="3"/><text x="99.9277%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="99.6777%" y="629" width="0.2417%" height="15" fill="rgb(209,178,27)" fg:x="1237" fg:w="3"/><text x="99.9277%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.7583%" y="613" width="0.1612%" height="15" fill="rgb(218,37,11)" fg:x="1238" fg:w="2"/><text x="100.0083%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7583%" y="597" width="0.1612%" height="15" fill="rgb(251,226,25)" fg:x="1238" fg:w="2"/><text x="100.0083%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7583%" y="581" width="0.1612%" height="15" fill="rgb(209,222,27)" fg:x="1238" fg:w="2"/><text x="100.0083%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8388%" y="565" width="0.0806%" height="15" fill="rgb(238,22,21)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8388%" y="549" width="0.0806%" height="15" fill="rgb(233,161,25)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8388%" y="533" width="0.0806%" height="15" fill="rgb(226,122,53)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8388%" y="517" width="0.0806%" height="15" fill="rgb(220,123,17)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8388%" y="501" width="0.0806%" height="15" fill="rgb(230,224,35)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="511.50"></text></g><g><title>all (1,241 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(246,83,8)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1183.50"></text></g><g><title>simple-7c3643c3 (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(230,214,17)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1167.50">simple-7c3643c3</text></g><g><title>_start (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(222,97,18)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1151.50">_start</text></g><g><title>__libc_start_main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(206,79,1)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1135.50">__libc_start_main</text></g><g><title>main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(214,121,34)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1119.50">main</text></g><g><title>std::rt::lang_start_internal (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(249,199,46)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1103.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(214,222,46)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(248,168,30)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(226,14,28)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1055.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(253,123,1)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1039.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(225,24,42)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,241 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(216,161,37)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,241 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(251,164,26)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="991.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,241 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(219,177,3)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="975.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,241 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(222,65,0)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="959.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,241 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(223,69,54)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="943.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(235,30,27)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="927.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,241 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(220,183,50)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="911.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,241 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(248,198,15)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="895.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (488 samples, 39.32%)</title><rect x="60.6769%" y="869" width="39.3231%" height="15" fill="rgb(222,211,4)" fg:x="753" fg:w="488"/><text x="60.9269%" y="879.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Rout..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (488 samples, 39.32%)</title><rect x="60.6769%" y="853" width="39.3231%" height="15" fill="rgb(214,102,34)" fg:x="753" fg:w="488"/><text x="60.9269%" y="863.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (488 samples, 39.32%)</title><rect x="60.6769%" y="837" width="39.3231%" height="15" fill="rgb(245,92,5)" fg:x="753" fg:w="488"/><text x="60.9269%" y="847.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (394 samples, 31.75%)</title><rect x="68.2514%" y="821" width="31.7486%" height="15" fill="rgb(252,72,51)" fg:x="847" fg:w="394"/><text x="68.5014%" y="831.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (394 samples, 31.75%)</title><rect x="68.2514%" y="805" width="31.7486%" height="15" fill="rgb(252,208,19)" fg:x="847" fg:w="394"/><text x="68.5014%" y="815.50">engine::perform::StandardPerformer::evaluate_and_pe..</text></g><g><title>core::ptr::drop_in_place&lt;engine::perform::StandardPerformer&gt; (1 samples, 0.08%)</title><rect x="99.9194%" y="789" width="0.0806%" height="15" fill="rgb(211,69,7)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="799.50"></text></g></svg></svg>