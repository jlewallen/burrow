<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1205.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="1228"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="773" width="0.0814%" height="15" fill="rgb(244,153,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0814%" y="661" width="0.0814%" height="15" fill="rgb(252,87,22)" fg:x="1" fg:w="1"/><text x="0.3314%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0814%" y="645" width="0.0814%" height="15" fill="rgb(210,51,29)" fg:x="1" fg:w="1"/><text x="0.3314%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;kernel::model::entity::ScopeValue&gt;&gt; (2 samples, 0.16%)</title><rect x="0.0814%" y="725" width="0.1629%" height="15" fill="rgb(242,136,47)" fg:x="1" fg:w="2"/><text x="0.3314%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0814%" y="709" width="0.1629%" height="15" fill="rgb(238,68,4)" fg:x="1" fg:w="2"/><text x="0.3314%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="0.0814%" y="693" width="0.1629%" height="15" fill="rgb(242,161,30)" fg:x="1" fg:w="2"/><text x="0.3314%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0814%" y="677" width="0.1629%" height="15" fill="rgb(218,58,44)" fg:x="1" fg:w="2"/><text x="0.3314%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1629%" y="661" width="0.0814%" height="15" fill="rgb(252,125,32)" fg:x="2" fg:w="1"/><text x="0.4129%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1629%" y="645" width="0.0814%" height="15" fill="rgb(219,178,0)" fg:x="2" fg:w="1"/><text x="0.4129%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1629%" y="629" width="0.0814%" height="15" fill="rgb(213,152,7)" fg:x="2" fg:w="1"/><text x="0.4129%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.2443%" y="693" width="0.1629%" height="15" fill="rgb(249,109,34)" fg:x="3" fg:w="2"/><text x="0.4943%" y="703.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.2443%" y="677" width="0.1629%" height="15" fill="rgb(232,96,21)" fg:x="3" fg:w="2"/><text x="0.4943%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.4072%" y="677" width="0.1629%" height="15" fill="rgb(228,27,39)" fg:x="5" fg:w="2"/><text x="0.6572%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="0.4072%" y="661" width="0.1629%" height="15" fill="rgb(211,182,52)" fg:x="5" fg:w="2"/><text x="0.6572%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.4072%" y="645" width="0.1629%" height="15" fill="rgb(234,178,38)" fg:x="5" fg:w="2"/><text x="0.6572%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4072%" y="629" width="0.1629%" height="15" fill="rgb(221,111,3)" fg:x="5" fg:w="2"/><text x="0.6572%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.5700%" y="661" width="0.0814%" height="15" fill="rgb(228,175,21)" fg:x="7" fg:w="1"/><text x="0.8200%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.6515%" y="645" width="0.0814%" height="15" fill="rgb(228,174,43)" fg:x="8" fg:w="1"/><text x="0.9015%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6515%" y="629" width="0.0814%" height="15" fill="rgb(211,191,0)" fg:x="8" fg:w="1"/><text x="0.9015%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="0.0000%" y="821" width="0.8143%" height="15" fill="rgb(253,117,3)" fg:x="0" fg:w="10"/><text x="0.2500%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (10 samples, 0.81%)</title><rect x="0.0000%" y="805" width="0.8143%" height="15" fill="rgb(241,127,19)" fg:x="0" fg:w="10"/><text x="0.2500%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="0.0000%" y="789" width="0.8143%" height="15" fill="rgb(218,103,12)" fg:x="0" fg:w="10"/><text x="0.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (9 samples, 0.73%)</title><rect x="0.0814%" y="773" width="0.7329%" height="15" fill="rgb(236,214,43)" fg:x="1" fg:w="9"/><text x="0.3314%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="0.0814%" y="757" width="0.7329%" height="15" fill="rgb(244,144,19)" fg:x="1" fg:w="9"/><text x="0.3314%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="0.0814%" y="741" width="0.7329%" height="15" fill="rgb(246,188,10)" fg:x="1" fg:w="9"/><text x="0.3314%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="0.2443%" y="725" width="0.5700%" height="15" fill="rgb(212,193,33)" fg:x="3" fg:w="7"/><text x="0.4943%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="0.2443%" y="709" width="0.5700%" height="15" fill="rgb(241,51,29)" fg:x="3" fg:w="7"/><text x="0.4943%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.4072%" y="693" width="0.4072%" height="15" fill="rgb(211,58,19)" fg:x="5" fg:w="5"/><text x="0.6572%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.5700%" y="677" width="0.2443%" height="15" fill="rgb(229,111,26)" fg:x="7" fg:w="3"/><text x="0.8200%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.6515%" y="661" width="0.1629%" height="15" fill="rgb(213,115,40)" fg:x="8" fg:w="2"/><text x="0.9015%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.7329%" y="645" width="0.0814%" height="15" fill="rgb(209,56,44)" fg:x="9" fg:w="1"/><text x="0.9829%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="0.8143%" y="757" width="0.0814%" height="15" fill="rgb(230,108,32)" fg:x="10" fg:w="1"/><text x="1.0643%" y="767.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.8958%" y="741" width="0.0814%" height="15" fill="rgb(216,165,31)" fg:x="11" fg:w="1"/><text x="1.1458%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="0.8958%" y="725" width="0.0814%" height="15" fill="rgb(218,122,21)" fg:x="11" fg:w="1"/><text x="1.1458%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="0.8958%" y="709" width="0.0814%" height="15" fill="rgb(223,224,47)" fg:x="11" fg:w="1"/><text x="1.1458%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="0.8958%" y="693" width="0.0814%" height="15" fill="rgb(238,102,44)" fg:x="11" fg:w="1"/><text x="1.1458%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="0.8958%" y="677" width="0.0814%" height="15" fill="rgb(236,46,40)" fg:x="11" fg:w="1"/><text x="1.1458%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8958%" y="661" width="0.0814%" height="15" fill="rgb(247,202,50)" fg:x="11" fg:w="1"/><text x="1.1458%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8958%" y="645" width="0.0814%" height="15" fill="rgb(209,99,20)" fg:x="11" fg:w="1"/><text x="1.1458%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8958%" y="629" width="0.0814%" height="15" fill="rgb(252,27,34)" fg:x="11" fg:w="1"/><text x="1.1458%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8958%" y="613" width="0.0814%" height="15" fill="rgb(215,206,23)" fg:x="11" fg:w="1"/><text x="1.1458%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.8958%" y="597" width="0.0814%" height="15" fill="rgb(212,135,36)" fg:x="11" fg:w="1"/><text x="1.1458%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8958%" y="581" width="0.0814%" height="15" fill="rgb(240,189,1)" fg:x="11" fg:w="1"/><text x="1.1458%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8958%" y="565" width="0.0814%" height="15" fill="rgb(242,56,20)" fg:x="11" fg:w="1"/><text x="1.1458%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8958%" y="549" width="0.0814%" height="15" fill="rgb(247,132,33)" fg:x="11" fg:w="1"/><text x="1.1458%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.9772%" y="693" width="0.0814%" height="15" fill="rgb(208,149,11)" fg:x="12" fg:w="1"/><text x="1.2272%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.9772%" y="677" width="0.0814%" height="15" fill="rgb(211,33,11)" fg:x="12" fg:w="1"/><text x="1.2272%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.9772%" y="661" width="0.0814%" height="15" fill="rgb(221,29,38)" fg:x="12" fg:w="1"/><text x="1.2272%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.9772%" y="645" width="0.0814%" height="15" fill="rgb(206,182,49)" fg:x="12" fg:w="1"/><text x="1.2272%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.9772%" y="629" width="0.0814%" height="15" fill="rgb(216,140,1)" fg:x="12" fg:w="1"/><text x="1.2272%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="0.9772%" y="741" width="0.2443%" height="15" fill="rgb(232,57,40)" fg:x="12" fg:w="3"/><text x="1.2272%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="0.9772%" y="725" width="0.2443%" height="15" fill="rgb(224,186,18)" fg:x="12" fg:w="3"/><text x="1.2272%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="0.9772%" y="709" width="0.2443%" height="15" fill="rgb(215,121,11)" fg:x="12" fg:w="3"/><text x="1.2272%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="1.0586%" y="693" width="0.1629%" height="15" fill="rgb(245,147,10)" fg:x="13" fg:w="2"/><text x="1.3086%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="1.0586%" y="677" width="0.1629%" height="15" fill="rgb(238,153,13)" fg:x="13" fg:w="2"/><text x="1.3086%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="1.0586%" y="661" width="0.1629%" height="15" fill="rgb(233,108,0)" fg:x="13" fg:w="2"/><text x="1.3086%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.1401%" y="645" width="0.0814%" height="15" fill="rgb(212,157,17)" fg:x="14" fg:w="1"/><text x="1.3901%" y="655.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.1401%" y="629" width="0.0814%" height="15" fill="rgb(225,213,38)" fg:x="14" fg:w="1"/><text x="1.3901%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.1401%" y="613" width="0.0814%" height="15" fill="rgb(248,16,11)" fg:x="14" fg:w="1"/><text x="1.3901%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.1401%" y="597" width="0.0814%" height="15" fill="rgb(241,33,4)" fg:x="14" fg:w="1"/><text x="1.3901%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.1401%" y="581" width="0.0814%" height="15" fill="rgb(222,26,43)" fg:x="14" fg:w="1"/><text x="1.3901%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.2215%" y="677" width="0.0814%" height="15" fill="rgb(243,29,36)" fg:x="15" fg:w="1"/><text x="1.4715%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.2215%" y="661" width="0.0814%" height="15" fill="rgb(241,9,27)" fg:x="15" fg:w="1"/><text x="1.4715%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.2215%" y="645" width="0.0814%" height="15" fill="rgb(205,117,26)" fg:x="15" fg:w="1"/><text x="1.4715%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (8 samples, 0.65%)</title><rect x="0.8143%" y="789" width="0.6515%" height="15" fill="rgb(209,80,39)" fg:x="10" fg:w="8"/><text x="1.0643%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.65%)</title><rect x="0.8143%" y="773" width="0.6515%" height="15" fill="rgb(239,155,6)" fg:x="10" fg:w="8"/><text x="1.0643%" y="783.50"></text></g><g><title>engine::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="0.8958%" y="757" width="0.5700%" height="15" fill="rgb(212,104,12)" fg:x="11" fg:w="7"/><text x="1.1458%" y="767.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="1.2215%" y="741" width="0.2443%" height="15" fill="rgb(234,204,3)" fg:x="15" fg:w="3"/><text x="1.4715%" y="751.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="1.2215%" y="725" width="0.2443%" height="15" fill="rgb(251,218,7)" fg:x="15" fg:w="3"/><text x="1.4715%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="1.2215%" y="709" width="0.2443%" height="15" fill="rgb(221,81,32)" fg:x="15" fg:w="3"/><text x="1.4715%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="1.2215%" y="693" width="0.2443%" height="15" fill="rgb(214,152,26)" fg:x="15" fg:w="3"/><text x="1.4715%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="1.3029%" y="677" width="0.1629%" height="15" fill="rgb(223,22,3)" fg:x="16" fg:w="2"/><text x="1.5529%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="1.3029%" y="661" width="0.1629%" height="15" fill="rgb(207,174,7)" fg:x="16" fg:w="2"/><text x="1.5529%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.3844%" y="645" width="0.0814%" height="15" fill="rgb(224,19,52)" fg:x="17" fg:w="1"/><text x="1.6344%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.3844%" y="629" width="0.0814%" height="15" fill="rgb(228,24,14)" fg:x="17" fg:w="1"/><text x="1.6344%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="1.5472%" y="757" width="0.0814%" height="15" fill="rgb(230,153,43)" fg:x="19" fg:w="1"/><text x="1.7972%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="1.5472%" y="741" width="0.0814%" height="15" fill="rgb(231,106,12)" fg:x="19" fg:w="1"/><text x="1.7972%" y="751.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.5472%" y="725" width="0.0814%" height="15" fill="rgb(215,92,2)" fg:x="19" fg:w="1"/><text x="1.7972%" y="735.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.5472%" y="709" width="0.0814%" height="15" fill="rgb(249,143,25)" fg:x="19" fg:w="1"/><text x="1.7972%" y="719.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="1.5472%" y="693" width="0.0814%" height="15" fill="rgb(252,7,35)" fg:x="19" fg:w="1"/><text x="1.7972%" y="703.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.6287%" y="741" width="0.0814%" height="15" fill="rgb(216,69,40)" fg:x="20" fg:w="1"/><text x="1.8787%" y="751.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.6287%" y="725" width="0.0814%" height="15" fill="rgb(240,36,33)" fg:x="20" fg:w="1"/><text x="1.8787%" y="735.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="1.4658%" y="773" width="0.4886%" height="15" fill="rgb(231,128,14)" fg:x="18" fg:w="6"/><text x="1.7158%" y="783.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.33%)</title><rect x="1.6287%" y="757" width="0.3257%" height="15" fill="rgb(245,143,14)" fg:x="20" fg:w="4"/><text x="1.8787%" y="767.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="1.7101%" y="741" width="0.2443%" height="15" fill="rgb(222,130,28)" fg:x="21" fg:w="3"/><text x="1.9601%" y="751.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="1.7101%" y="725" width="0.2443%" height="15" fill="rgb(212,10,48)" fg:x="21" fg:w="3"/><text x="1.9601%" y="735.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.7101%" y="709" width="0.2443%" height="15" fill="rgb(254,118,45)" fg:x="21" fg:w="3"/><text x="1.9601%" y="719.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.7101%" y="693" width="0.2443%" height="15" fill="rgb(228,6,45)" fg:x="21" fg:w="3"/><text x="1.9601%" y="703.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.7101%" y="677" width="0.2443%" height="15" fill="rgb(241,18,35)" fg:x="21" fg:w="3"/><text x="1.9601%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (15 samples, 1.22%)</title><rect x="0.8143%" y="821" width="1.2215%" height="15" fill="rgb(227,214,53)" fg:x="10" fg:w="15"/><text x="1.0643%" y="831.50"></text></g><g><title>engine::session::Session::new (15 samples, 1.22%)</title><rect x="0.8143%" y="805" width="1.2215%" height="15" fill="rgb(224,107,51)" fg:x="10" fg:w="15"/><text x="1.0643%" y="815.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.57%)</title><rect x="1.4658%" y="789" width="0.5700%" height="15" fill="rgb(248,60,28)" fg:x="18" fg:w="7"/><text x="1.7158%" y="799.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.9544%" y="773" width="0.0814%" height="15" fill="rgb(249,101,23)" fg:x="24" fg:w="1"/><text x="2.2044%" y="783.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.9544%" y="757" width="0.0814%" height="15" fill="rgb(228,51,19)" fg:x="24" fg:w="1"/><text x="2.2044%" y="767.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.1173%" y="773" width="0.0814%" height="15" fill="rgb(213,20,6)" fg:x="26" fg:w="1"/><text x="2.3673%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="2.1173%" y="757" width="0.0814%" height="15" fill="rgb(212,124,10)" fg:x="26" fg:w="1"/><text x="2.3673%" y="767.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.1987%" y="725" width="0.0814%" height="15" fill="rgb(248,3,40)" fg:x="27" fg:w="1"/><text x="2.4487%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.1987%" y="709" width="0.0814%" height="15" fill="rgb(223,178,23)" fg:x="27" fg:w="1"/><text x="2.4487%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1987%" y="693" width="0.0814%" height="15" fill="rgb(240,132,45)" fg:x="27" fg:w="1"/><text x="2.4487%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.1987%" y="677" width="0.0814%" height="15" fill="rgb(245,164,36)" fg:x="27" fg:w="1"/><text x="2.4487%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.1987%" y="661" width="0.0814%" height="15" fill="rgb(231,188,53)" fg:x="27" fg:w="1"/><text x="2.4487%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.2801%" y="693" width="0.0814%" height="15" fill="rgb(237,198,39)" fg:x="28" fg:w="1"/><text x="2.5301%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2801%" y="677" width="0.0814%" height="15" fill="rgb(223,120,35)" fg:x="28" fg:w="1"/><text x="2.5301%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.4430%" y="661" width="0.0814%" height="15" fill="rgb(253,107,49)" fg:x="30" fg:w="1"/><text x="2.6930%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.5244%" y="645" width="0.0814%" height="15" fill="rgb(216,44,31)" fg:x="31" fg:w="1"/><text x="2.7744%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.5244%" y="661" width="0.1629%" height="15" fill="rgb(253,87,21)" fg:x="31" fg:w="2"/><text x="2.7744%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6059%" y="645" width="0.0814%" height="15" fill="rgb(226,18,2)" fg:x="32" fg:w="1"/><text x="2.8559%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.6059%" y="629" width="0.0814%" height="15" fill="rgb(216,8,46)" fg:x="32" fg:w="1"/><text x="2.8559%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.6059%" y="613" width="0.0814%" height="15" fill="rgb(226,140,39)" fg:x="32" fg:w="1"/><text x="2.8559%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.6059%" y="597" width="0.0814%" height="15" fill="rgb(221,194,54)" fg:x="32" fg:w="1"/><text x="2.8559%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="2.2801%" y="709" width="0.4886%" height="15" fill="rgb(213,92,11)" fg:x="28" fg:w="6"/><text x="2.5301%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="2.3616%" y="693" width="0.4072%" height="15" fill="rgb(229,162,46)" fg:x="29" fg:w="5"/><text x="2.6116%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="2.4430%" y="677" width="0.3257%" height="15" fill="rgb(214,111,36)" fg:x="30" fg:w="4"/><text x="2.6930%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.6873%" y="661" width="0.0814%" height="15" fill="rgb(207,6,21)" fg:x="33" fg:w="1"/><text x="2.9373%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.6873%" y="645" width="0.0814%" height="15" fill="rgb(213,127,38)" fg:x="33" fg:w="1"/><text x="2.9373%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.6873%" y="629" width="0.0814%" height="15" fill="rgb(238,118,32)" fg:x="33" fg:w="1"/><text x="2.9373%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="2.1987%" y="741" width="0.7329%" height="15" fill="rgb(240,139,39)" fg:x="27" fg:w="9"/><text x="2.4487%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="2.2801%" y="725" width="0.6515%" height="15" fill="rgb(235,10,37)" fg:x="28" fg:w="8"/><text x="2.5301%" y="735.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.7687%" y="709" width="0.1629%" height="15" fill="rgb(249,171,38)" fg:x="34" fg:w="2"/><text x="3.0187%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.7687%" y="693" width="0.1629%" height="15" fill="rgb(242,144,32)" fg:x="34" fg:w="2"/><text x="3.0187%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.7687%" y="677" width="0.1629%" height="15" fill="rgb(217,117,21)" fg:x="34" fg:w="2"/><text x="3.0187%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.7687%" y="661" width="0.1629%" height="15" fill="rgb(249,87,1)" fg:x="34" fg:w="2"/><text x="3.0187%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.7687%" y="645" width="0.1629%" height="15" fill="rgb(248,196,48)" fg:x="34" fg:w="2"/><text x="3.0187%" y="655.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="2.7687%" y="629" width="0.1629%" height="15" fill="rgb(251,206,33)" fg:x="34" fg:w="2"/><text x="3.0187%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.9316%" y="693" width="0.0814%" height="15" fill="rgb(232,141,28)" fg:x="36" fg:w="1"/><text x="3.1816%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.9316%" y="741" width="0.1629%" height="15" fill="rgb(209,167,14)" fg:x="36" fg:w="2"/><text x="3.1816%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.9316%" y="725" width="0.1629%" height="15" fill="rgb(225,11,50)" fg:x="36" fg:w="2"/><text x="3.1816%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.9316%" y="709" width="0.1629%" height="15" fill="rgb(209,50,20)" fg:x="36" fg:w="2"/><text x="3.1816%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0130%" y="693" width="0.0814%" height="15" fill="rgb(212,17,46)" fg:x="37" fg:w="1"/><text x="3.2630%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0130%" y="677" width="0.0814%" height="15" fill="rgb(216,101,39)" fg:x="37" fg:w="1"/><text x="3.2630%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0130%" y="661" width="0.0814%" height="15" fill="rgb(212,228,48)" fg:x="37" fg:w="1"/><text x="3.2630%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0130%" y="645" width="0.0814%" height="15" fill="rgb(250,6,50)" fg:x="37" fg:w="1"/><text x="3.2630%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0130%" y="629" width="0.0814%" height="15" fill="rgb(250,160,48)" fg:x="37" fg:w="1"/><text x="3.2630%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="3.1759%" y="693" width="0.0814%" height="15" fill="rgb(244,216,33)" fg:x="39" fg:w="1"/><text x="3.4259%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.1759%" y="677" width="0.0814%" height="15" fill="rgb(207,157,5)" fg:x="39" fg:w="1"/><text x="3.4259%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="3.3388%" y="629" width="0.0814%" height="15" fill="rgb(228,199,8)" fg:x="41" fg:w="1"/><text x="3.5888%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4202%" y="613" width="0.0814%" height="15" fill="rgb(227,80,20)" fg:x="42" fg:w="1"/><text x="3.6702%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (17 samples, 1.38%)</title><rect x="2.1987%" y="773" width="1.3844%" height="15" fill="rgb(222,9,33)" fg:x="27" fg:w="17"/><text x="2.4487%" y="783.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (17 samples, 1.38%)</title><rect x="2.1987%" y="757" width="1.3844%" height="15" fill="rgb(239,44,28)" fg:x="27" fg:w="17"/><text x="2.4487%" y="767.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="3.0945%" y="741" width="0.4886%" height="15" fill="rgb(249,187,43)" fg:x="38" fg:w="6"/><text x="3.3445%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="3.0945%" y="725" width="0.4886%" height="15" fill="rgb(216,141,28)" fg:x="38" fg:w="6"/><text x="3.3445%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="3.0945%" y="709" width="0.4886%" height="15" fill="rgb(230,154,53)" fg:x="38" fg:w="6"/><text x="3.3445%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="3.2573%" y="693" width="0.3257%" height="15" fill="rgb(227,82,4)" fg:x="40" fg:w="4"/><text x="3.5073%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="3.2573%" y="677" width="0.3257%" height="15" fill="rgb(220,107,16)" fg:x="40" fg:w="4"/><text x="3.5073%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="3.2573%" y="661" width="0.3257%" height="15" fill="rgb(207,187,2)" fg:x="40" fg:w="4"/><text x="3.5073%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="3.2573%" y="645" width="0.3257%" height="15" fill="rgb(210,162,52)" fg:x="40" fg:w="4"/><text x="3.5073%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="3.4202%" y="629" width="0.1629%" height="15" fill="rgb(217,216,49)" fg:x="42" fg:w="2"/><text x="3.6702%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5016%" y="613" width="0.0814%" height="15" fill="rgb(218,146,49)" fg:x="43" fg:w="1"/><text x="3.7516%" y="623.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.55%)</title><rect x="2.1173%" y="805" width="1.5472%" height="15" fill="rgb(216,55,40)" fg:x="26" fg:w="19"/><text x="2.3673%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.55%)</title><rect x="2.1173%" y="789" width="1.5472%" height="15" fill="rgb(208,196,21)" fg:x="26" fg:w="19"/><text x="2.3673%" y="799.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="3.5831%" y="773" width="0.0814%" height="15" fill="rgb(242,117,42)" fg:x="44" fg:w="1"/><text x="3.8331%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="3.5831%" y="757" width="0.0814%" height="15" fill="rgb(210,11,23)" fg:x="44" fg:w="1"/><text x="3.8331%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="3.5831%" y="741" width="0.0814%" height="15" fill="rgb(217,110,2)" fg:x="44" fg:w="1"/><text x="3.8331%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.5831%" y="725" width="0.0814%" height="15" fill="rgb(229,77,54)" fg:x="44" fg:w="1"/><text x="3.8331%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.5831%" y="709" width="0.0814%" height="15" fill="rgb(218,53,16)" fg:x="44" fg:w="1"/><text x="3.8331%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.5831%" y="693" width="0.0814%" height="15" fill="rgb(215,38,13)" fg:x="44" fg:w="1"/><text x="3.8331%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.5831%" y="677" width="0.0814%" height="15" fill="rgb(235,42,18)" fg:x="44" fg:w="1"/><text x="3.8331%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="3.5831%" y="661" width="0.0814%" height="15" fill="rgb(219,66,54)" fg:x="44" fg:w="1"/><text x="3.8331%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.5831%" y="645" width="0.0814%" height="15" fill="rgb(222,205,4)" fg:x="44" fg:w="1"/><text x="3.8331%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.5831%" y="629" width="0.0814%" height="15" fill="rgb(227,213,46)" fg:x="44" fg:w="1"/><text x="3.8331%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.6645%" y="789" width="0.0814%" height="15" fill="rgb(250,145,42)" fg:x="45" fg:w="1"/><text x="3.9145%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.6645%" y="773" width="0.0814%" height="15" fill="rgb(219,15,2)" fg:x="45" fg:w="1"/><text x="3.9145%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.6645%" y="757" width="0.0814%" height="15" fill="rgb(231,181,52)" fg:x="45" fg:w="1"/><text x="3.9145%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.6645%" y="741" width="0.0814%" height="15" fill="rgb(235,1,42)" fg:x="45" fg:w="1"/><text x="3.9145%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="3.6645%" y="725" width="0.0814%" height="15" fill="rgb(249,88,27)" fg:x="45" fg:w="1"/><text x="3.9145%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="3.6645%" y="709" width="0.0814%" height="15" fill="rgb(235,145,16)" fg:x="45" fg:w="1"/><text x="3.9145%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="3.7459%" y="693" width="0.0814%" height="15" fill="rgb(237,114,19)" fg:x="46" fg:w="1"/><text x="3.9959%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7459%" y="677" width="0.0814%" height="15" fill="rgb(238,51,50)" fg:x="46" fg:w="1"/><text x="3.9959%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.7459%" y="773" width="0.1629%" height="15" fill="rgb(205,194,25)" fg:x="46" fg:w="2"/><text x="3.9959%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.7459%" y="757" width="0.1629%" height="15" fill="rgb(215,203,17)" fg:x="46" fg:w="2"/><text x="3.9959%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.7459%" y="741" width="0.1629%" height="15" fill="rgb(233,112,49)" fg:x="46" fg:w="2"/><text x="3.9959%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="3.7459%" y="725" width="0.1629%" height="15" fill="rgb(241,130,26)" fg:x="46" fg:w="2"/><text x="3.9959%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="3.7459%" y="709" width="0.1629%" height="15" fill="rgb(252,223,19)" fg:x="46" fg:w="2"/><text x="3.9959%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.8274%" y="693" width="0.0814%" height="15" fill="rgb(211,95,25)" fg:x="47" fg:w="1"/><text x="4.0774%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8274%" y="677" width="0.0814%" height="15" fill="rgb(251,182,27)" fg:x="47" fg:w="1"/><text x="4.0774%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9088%" y="677" width="0.0814%" height="15" fill="rgb(238,24,4)" fg:x="48" fg:w="1"/><text x="4.1588%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9088%" y="661" width="0.0814%" height="15" fill="rgb(224,220,25)" fg:x="48" fg:w="1"/><text x="4.1588%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.9088%" y="645" width="0.0814%" height="15" fill="rgb(239,133,26)" fg:x="48" fg:w="1"/><text x="4.1588%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.9088%" y="629" width="0.0814%" height="15" fill="rgb(211,94,48)" fg:x="48" fg:w="1"/><text x="4.1588%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9088%" y="613" width="0.0814%" height="15" fill="rgb(239,87,6)" fg:x="48" fg:w="1"/><text x="4.1588%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.41%)</title><rect x="3.6645%" y="805" width="0.4072%" height="15" fill="rgb(227,62,0)" fg:x="45" fg:w="5"/><text x="3.9145%" y="815.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.33%)</title><rect x="3.7459%" y="789" width="0.3257%" height="15" fill="rgb(211,226,4)" fg:x="46" fg:w="4"/><text x="3.9959%" y="799.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="3.9088%" y="773" width="0.1629%" height="15" fill="rgb(253,38,52)" fg:x="48" fg:w="2"/><text x="4.1588%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.9088%" y="757" width="0.1629%" height="15" fill="rgb(229,126,40)" fg:x="48" fg:w="2"/><text x="4.1588%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.9088%" y="741" width="0.1629%" height="15" fill="rgb(229,165,44)" fg:x="48" fg:w="2"/><text x="4.1588%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="3.9088%" y="725" width="0.1629%" height="15" fill="rgb(247,95,47)" fg:x="48" fg:w="2"/><text x="4.1588%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="3.9088%" y="709" width="0.1629%" height="15" fill="rgb(216,140,30)" fg:x="48" fg:w="2"/><text x="4.1588%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="3.9088%" y="693" width="0.1629%" height="15" fill="rgb(246,214,8)" fg:x="48" fg:w="2"/><text x="4.1588%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="3.9902%" y="677" width="0.0814%" height="15" fill="rgb(227,224,15)" fg:x="49" fg:w="1"/><text x="4.2402%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9902%" y="661" width="0.0814%" height="15" fill="rgb(233,175,4)" fg:x="49" fg:w="1"/><text x="4.2402%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.9902%" y="645" width="0.0814%" height="15" fill="rgb(221,66,45)" fg:x="49" fg:w="1"/><text x="4.2402%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9902%" y="629" width="0.0814%" height="15" fill="rgb(221,178,18)" fg:x="49" fg:w="1"/><text x="4.2402%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9902%" y="613" width="0.0814%" height="15" fill="rgb(213,81,29)" fg:x="49" fg:w="1"/><text x="4.2402%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9902%" y="597" width="0.0814%" height="15" fill="rgb(220,89,49)" fg:x="49" fg:w="1"/><text x="4.2402%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="4.0717%" y="789" width="0.0814%" height="15" fill="rgb(227,60,33)" fg:x="50" fg:w="1"/><text x="4.3217%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.0717%" y="773" width="0.0814%" height="15" fill="rgb(205,113,12)" fg:x="50" fg:w="1"/><text x="4.3217%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="4.0717%" y="757" width="0.0814%" height="15" fill="rgb(211,32,1)" fg:x="50" fg:w="1"/><text x="4.3217%" y="767.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="4.0717%" y="741" width="0.0814%" height="15" fill="rgb(246,2,12)" fg:x="50" fg:w="1"/><text x="4.3217%" y="751.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="4.0717%" y="725" width="0.0814%" height="15" fill="rgb(243,37,27)" fg:x="50" fg:w="1"/><text x="4.3217%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="4.0717%" y="709" width="0.0814%" height="15" fill="rgb(248,211,31)" fg:x="50" fg:w="1"/><text x="4.3217%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="4.0717%" y="693" width="0.0814%" height="15" fill="rgb(242,146,47)" fg:x="50" fg:w="1"/><text x="4.3217%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.0717%" y="677" width="0.0814%" height="15" fill="rgb(206,70,20)" fg:x="50" fg:w="1"/><text x="4.3217%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="4.0717%" y="661" width="0.0814%" height="15" fill="rgb(215,10,51)" fg:x="50" fg:w="1"/><text x="4.3217%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="4.0717%" y="645" width="0.0814%" height="15" fill="rgb(243,178,53)" fg:x="50" fg:w="1"/><text x="4.3217%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.1531%" y="757" width="0.0814%" height="15" fill="rgb(233,221,20)" fg:x="51" fg:w="1"/><text x="4.4031%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.1531%" y="741" width="0.0814%" height="15" fill="rgb(218,95,35)" fg:x="51" fg:w="1"/><text x="4.4031%" y="751.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="4.1531%" y="725" width="0.0814%" height="15" fill="rgb(229,13,5)" fg:x="51" fg:w="1"/><text x="4.4031%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1531%" y="709" width="0.0814%" height="15" fill="rgb(252,164,30)" fg:x="51" fg:w="1"/><text x="4.4031%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1531%" y="693" width="0.0814%" height="15" fill="rgb(232,68,36)" fg:x="51" fg:w="1"/><text x="4.4031%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1531%" y="677" width="0.0814%" height="15" fill="rgb(219,59,54)" fg:x="51" fg:w="1"/><text x="4.4031%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1531%" y="661" width="0.0814%" height="15" fill="rgb(250,92,33)" fg:x="51" fg:w="1"/><text x="4.4031%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1531%" y="645" width="0.0814%" height="15" fill="rgb(229,162,54)" fg:x="51" fg:w="1"/><text x="4.4031%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1531%" y="629" width="0.0814%" height="15" fill="rgb(244,114,52)" fg:x="51" fg:w="1"/><text x="4.4031%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1531%" y="613" width="0.0814%" height="15" fill="rgb(212,211,43)" fg:x="51" fg:w="1"/><text x="4.4031%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.1531%" y="597" width="0.0814%" height="15" fill="rgb(226,147,8)" fg:x="51" fg:w="1"/><text x="4.4031%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.1531%" y="581" width="0.0814%" height="15" fill="rgb(226,23,13)" fg:x="51" fg:w="1"/><text x="4.4031%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.1531%" y="565" width="0.0814%" height="15" fill="rgb(240,63,4)" fg:x="51" fg:w="1"/><text x="4.4031%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.1531%" y="549" width="0.0814%" height="15" fill="rgb(221,1,32)" fg:x="51" fg:w="1"/><text x="4.4031%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="4.1531%" y="533" width="0.0814%" height="15" fill="rgb(242,117,10)" fg:x="51" fg:w="1"/><text x="4.4031%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="4.1531%" y="517" width="0.0814%" height="15" fill="rgb(249,172,44)" fg:x="51" fg:w="1"/><text x="4.4031%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.2345%" y="709" width="0.0814%" height="15" fill="rgb(244,46,45)" fg:x="52" fg:w="1"/><text x="4.4845%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2345%" y="693" width="0.0814%" height="15" fill="rgb(206,43,17)" fg:x="52" fg:w="1"/><text x="4.4845%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2345%" y="677" width="0.0814%" height="15" fill="rgb(239,218,39)" fg:x="52" fg:w="1"/><text x="4.4845%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.2345%" y="661" width="0.0814%" height="15" fill="rgb(208,169,54)" fg:x="52" fg:w="1"/><text x="4.4845%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.2345%" y="645" width="0.0814%" height="15" fill="rgb(247,25,42)" fg:x="52" fg:w="1"/><text x="4.4845%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.2345%" y="629" width="0.0814%" height="15" fill="rgb(226,23,31)" fg:x="52" fg:w="1"/><text x="4.4845%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.2345%" y="613" width="0.0814%" height="15" fill="rgb(247,16,28)" fg:x="52" fg:w="1"/><text x="4.4845%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.2345%" y="597" width="0.0814%" height="15" fill="rgb(231,147,38)" fg:x="52" fg:w="1"/><text x="4.4845%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.3160%" y="693" width="0.0814%" height="15" fill="rgb(253,81,48)" fg:x="53" fg:w="1"/><text x="4.5660%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3160%" y="677" width="0.0814%" height="15" fill="rgb(249,222,43)" fg:x="53" fg:w="1"/><text x="4.5660%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.3160%" y="661" width="0.0814%" height="15" fill="rgb(221,3,27)" fg:x="53" fg:w="1"/><text x="4.5660%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.3974%" y="693" width="0.0814%" height="15" fill="rgb(228,180,5)" fg:x="54" fg:w="1"/><text x="4.6474%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.4788%" y="677" width="0.0814%" height="15" fill="rgb(227,131,42)" fg:x="55" fg:w="1"/><text x="4.7288%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4788%" y="661" width="0.0814%" height="15" fill="rgb(212,3,39)" fg:x="55" fg:w="1"/><text x="4.7288%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5603%" y="677" width="0.0814%" height="15" fill="rgb(226,45,5)" fg:x="56" fg:w="1"/><text x="4.8103%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5603%" y="661" width="0.0814%" height="15" fill="rgb(215,167,45)" fg:x="56" fg:w="1"/><text x="4.8103%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5603%" y="645" width="0.0814%" height="15" fill="rgb(250,218,53)" fg:x="56" fg:w="1"/><text x="4.8103%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.5603%" y="629" width="0.0814%" height="15" fill="rgb(207,140,0)" fg:x="56" fg:w="1"/><text x="4.8103%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.4788%" y="693" width="0.2443%" height="15" fill="rgb(238,133,51)" fg:x="55" fg:w="3"/><text x="4.7288%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6417%" y="677" width="0.0814%" height="15" fill="rgb(218,203,53)" fg:x="57" fg:w="1"/><text x="4.8917%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="4.2345%" y="725" width="0.6515%" height="15" fill="rgb(226,184,25)" fg:x="52" fg:w="8"/><text x="4.4845%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="4.3160%" y="709" width="0.5700%" height="15" fill="rgb(231,121,21)" fg:x="53" fg:w="7"/><text x="4.5660%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.7231%" y="693" width="0.1629%" height="15" fill="rgb(251,14,34)" fg:x="58" fg:w="2"/><text x="4.9731%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8046%" y="677" width="0.0814%" height="15" fill="rgb(249,193,11)" fg:x="59" fg:w="1"/><text x="5.0546%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8046%" y="661" width="0.0814%" height="15" fill="rgb(220,172,37)" fg:x="59" fg:w="1"/><text x="5.0546%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.8046%" y="645" width="0.0814%" height="15" fill="rgb(231,229,43)" fg:x="59" fg:w="1"/><text x="5.0546%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.8046%" y="629" width="0.0814%" height="15" fill="rgb(250,161,5)" fg:x="59" fg:w="1"/><text x="5.0546%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.8046%" y="613" width="0.0814%" height="15" fill="rgb(218,225,18)" fg:x="59" fg:w="1"/><text x="5.0546%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.8860%" y="693" width="0.0814%" height="15" fill="rgb(245,45,42)" fg:x="60" fg:w="1"/><text x="5.1360%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9674%" y="645" width="0.0814%" height="15" fill="rgb(211,115,1)" fg:x="61" fg:w="1"/><text x="5.2174%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.8860%" y="725" width="0.2443%" height="15" fill="rgb(248,133,52)" fg:x="60" fg:w="3"/><text x="5.1360%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="4.8860%" y="709" width="0.2443%" height="15" fill="rgb(238,100,21)" fg:x="60" fg:w="3"/><text x="5.1360%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.9674%" y="693" width="0.1629%" height="15" fill="rgb(247,144,11)" fg:x="61" fg:w="2"/><text x="5.2174%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.9674%" y="677" width="0.1629%" height="15" fill="rgb(206,164,16)" fg:x="61" fg:w="2"/><text x="5.2174%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.9674%" y="661" width="0.1629%" height="15" fill="rgb(222,34,3)" fg:x="61" fg:w="2"/><text x="5.2174%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.0489%" y="645" width="0.0814%" height="15" fill="rgb(248,82,4)" fg:x="62" fg:w="1"/><text x="5.2989%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1303%" y="677" width="0.0814%" height="15" fill="rgb(228,81,46)" fg:x="63" fg:w="1"/><text x="5.3803%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="5.1303%" y="661" width="0.0814%" height="15" fill="rgb(227,67,47)" fg:x="63" fg:w="1"/><text x="5.3803%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2117%" y="629" width="0.0814%" height="15" fill="rgb(215,93,53)" fg:x="64" fg:w="1"/><text x="5.4617%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2117%" y="613" width="0.0814%" height="15" fill="rgb(248,194,39)" fg:x="64" fg:w="1"/><text x="5.4617%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2117%" y="597" width="0.0814%" height="15" fill="rgb(215,5,19)" fg:x="64" fg:w="1"/><text x="5.4617%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3746%" y="533" width="0.0814%" height="15" fill="rgb(226,215,51)" fg:x="66" fg:w="1"/><text x="5.6246%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3746%" y="517" width="0.0814%" height="15" fill="rgb(225,56,26)" fg:x="66" fg:w="1"/><text x="5.6246%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3746%" y="501" width="0.0814%" height="15" fill="rgb(222,75,29)" fg:x="66" fg:w="1"/><text x="5.6246%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4560%" y="517" width="0.0814%" height="15" fill="rgb(236,139,6)" fg:x="67" fg:w="1"/><text x="5.7060%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4560%" y="501" width="0.0814%" height="15" fill="rgb(223,137,36)" fg:x="67" fg:w="1"/><text x="5.7060%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4560%" y="485" width="0.0814%" height="15" fill="rgb(226,99,2)" fg:x="67" fg:w="1"/><text x="5.7060%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4560%" y="469" width="0.0814%" height="15" fill="rgb(206,133,23)" fg:x="67" fg:w="1"/><text x="5.7060%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.3746%" y="581" width="0.2443%" height="15" fill="rgb(243,173,15)" fg:x="66" fg:w="3"/><text x="5.6246%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.3746%" y="565" width="0.2443%" height="15" fill="rgb(228,69,28)" fg:x="66" fg:w="3"/><text x="5.6246%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.3746%" y="549" width="0.2443%" height="15" fill="rgb(212,51,22)" fg:x="66" fg:w="3"/><text x="5.6246%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.4560%" y="533" width="0.1629%" height="15" fill="rgb(227,113,0)" fg:x="67" fg:w="2"/><text x="5.7060%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5375%" y="517" width="0.0814%" height="15" fill="rgb(252,84,27)" fg:x="68" fg:w="1"/><text x="5.7875%" y="527.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.55%)</title><rect x="4.1531%" y="789" width="1.5472%" height="15" fill="rgb(223,145,39)" fg:x="51" fg:w="19"/><text x="4.4031%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (19 samples, 1.55%)</title><rect x="4.1531%" y="773" width="1.5472%" height="15" fill="rgb(239,219,30)" fg:x="51" fg:w="19"/><text x="4.4031%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (18 samples, 1.47%)</title><rect x="4.2345%" y="757" width="1.4658%" height="15" fill="rgb(224,196,39)" fg:x="52" fg:w="18"/><text x="4.4845%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (18 samples, 1.47%)</title><rect x="4.2345%" y="741" width="1.4658%" height="15" fill="rgb(205,35,43)" fg:x="52" fg:w="18"/><text x="4.4845%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="5.1303%" y="725" width="0.5700%" height="15" fill="rgb(228,201,21)" fg:x="63" fg:w="7"/><text x="5.3803%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="5.1303%" y="709" width="0.5700%" height="15" fill="rgb(237,118,16)" fg:x="63" fg:w="7"/><text x="5.3803%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="5.1303%" y="693" width="0.5700%" height="15" fill="rgb(241,17,19)" fg:x="63" fg:w="7"/><text x="5.3803%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="5.2117%" y="677" width="0.4886%" height="15" fill="rgb(214,10,25)" fg:x="64" fg:w="6"/><text x="5.4617%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="5.2117%" y="661" width="0.4886%" height="15" fill="rgb(238,37,29)" fg:x="64" fg:w="6"/><text x="5.4617%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="5.2117%" y="645" width="0.4886%" height="15" fill="rgb(253,83,25)" fg:x="64" fg:w="6"/><text x="5.4617%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="5.2932%" y="629" width="0.4072%" height="15" fill="rgb(234,192,12)" fg:x="65" fg:w="5"/><text x="5.5432%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="5.2932%" y="613" width="0.4072%" height="15" fill="rgb(241,216,45)" fg:x="65" fg:w="5"/><text x="5.5432%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="5.3746%" y="597" width="0.3257%" height="15" fill="rgb(242,22,33)" fg:x="66" fg:w="4"/><text x="5.6246%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.6189%" y="581" width="0.0814%" height="15" fill="rgb(231,105,49)" fg:x="69" fg:w="1"/><text x="5.8689%" y="591.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.7003%" y="741" width="0.0814%" height="15" fill="rgb(218,204,15)" fg:x="70" fg:w="1"/><text x="5.9503%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.7003%" y="725" width="0.0814%" height="15" fill="rgb(235,138,41)" fg:x="70" fg:w="1"/><text x="5.9503%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.7003%" y="709" width="0.0814%" height="15" fill="rgb(246,0,9)" fg:x="70" fg:w="1"/><text x="5.9503%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.7003%" y="693" width="0.0814%" height="15" fill="rgb(210,74,4)" fg:x="70" fg:w="1"/><text x="5.9503%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7003%" y="677" width="0.0814%" height="15" fill="rgb(250,60,41)" fg:x="70" fg:w="1"/><text x="5.9503%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7003%" y="661" width="0.0814%" height="15" fill="rgb(220,115,12)" fg:x="70" fg:w="1"/><text x="5.9503%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7003%" y="645" width="0.0814%" height="15" fill="rgb(237,100,13)" fg:x="70" fg:w="1"/><text x="5.9503%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7003%" y="629" width="0.0814%" height="15" fill="rgb(213,55,26)" fg:x="70" fg:w="1"/><text x="5.9503%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.7003%" y="613" width="0.0814%" height="15" fill="rgb(216,17,4)" fg:x="70" fg:w="1"/><text x="5.9503%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7003%" y="597" width="0.0814%" height="15" fill="rgb(220,153,47)" fg:x="70" fg:w="1"/><text x="5.9503%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7003%" y="581" width="0.0814%" height="15" fill="rgb(215,131,9)" fg:x="70" fg:w="1"/><text x="5.9503%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7003%" y="565" width="0.0814%" height="15" fill="rgb(233,46,42)" fg:x="70" fg:w="1"/><text x="5.9503%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="5.7003%" y="773" width="0.2443%" height="15" fill="rgb(226,86,7)" fg:x="70" fg:w="3"/><text x="5.9503%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="5.7003%" y="757" width="0.2443%" height="15" fill="rgb(239,226,21)" fg:x="70" fg:w="3"/><text x="5.9503%" y="767.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="5.7818%" y="741" width="0.1629%" height="15" fill="rgb(244,137,22)" fg:x="71" fg:w="2"/><text x="6.0318%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.7818%" y="725" width="0.1629%" height="15" fill="rgb(211,139,35)" fg:x="71" fg:w="2"/><text x="6.0318%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.7818%" y="709" width="0.1629%" height="15" fill="rgb(214,62,50)" fg:x="71" fg:w="2"/><text x="6.0318%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="5.7818%" y="693" width="0.1629%" height="15" fill="rgb(212,113,44)" fg:x="71" fg:w="2"/><text x="6.0318%" y="703.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.7818%" y="677" width="0.1629%" height="15" fill="rgb(226,150,43)" fg:x="71" fg:w="2"/><text x="6.0318%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.0261%" y="613" width="0.0814%" height="15" fill="rgb(250,71,37)" fg:x="74" fg:w="1"/><text x="6.2761%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0261%" y="597" width="0.0814%" height="15" fill="rgb(219,76,19)" fg:x="74" fg:w="1"/><text x="6.2761%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.0261%" y="725" width="0.1629%" height="15" fill="rgb(250,39,11)" fg:x="74" fg:w="2"/><text x="6.2761%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="6.0261%" y="709" width="0.1629%" height="15" fill="rgb(230,64,31)" fg:x="74" fg:w="2"/><text x="6.2761%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="6.0261%" y="693" width="0.1629%" height="15" fill="rgb(208,222,23)" fg:x="74" fg:w="2"/><text x="6.2761%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.0261%" y="677" width="0.1629%" height="15" fill="rgb(227,125,18)" fg:x="74" fg:w="2"/><text x="6.2761%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.0261%" y="661" width="0.1629%" height="15" fill="rgb(234,210,9)" fg:x="74" fg:w="2"/><text x="6.2761%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.0261%" y="645" width="0.1629%" height="15" fill="rgb(217,127,24)" fg:x="74" fg:w="2"/><text x="6.2761%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.0261%" y="629" width="0.1629%" height="15" fill="rgb(239,141,48)" fg:x="74" fg:w="2"/><text x="6.2761%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.1075%" y="613" width="0.0814%" height="15" fill="rgb(227,109,8)" fg:x="75" fg:w="1"/><text x="6.3575%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1075%" y="597" width="0.0814%" height="15" fill="rgb(235,184,23)" fg:x="75" fg:w="1"/><text x="6.3575%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1075%" y="581" width="0.0814%" height="15" fill="rgb(227,226,48)" fg:x="75" fg:w="1"/><text x="6.3575%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1075%" y="565" width="0.0814%" height="15" fill="rgb(206,150,11)" fg:x="75" fg:w="1"/><text x="6.3575%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.33%)</title><rect x="6.0261%" y="757" width="0.3257%" height="15" fill="rgb(254,2,33)" fg:x="74" fg:w="4"/><text x="6.2761%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.33%)</title><rect x="6.0261%" y="741" width="0.3257%" height="15" fill="rgb(243,160,20)" fg:x="74" fg:w="4"/><text x="6.2761%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="6.1889%" y="725" width="0.1629%" height="15" fill="rgb(218,208,30)" fg:x="76" fg:w="2"/><text x="6.4389%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="6.1889%" y="709" width="0.1629%" height="15" fill="rgb(224,120,49)" fg:x="76" fg:w="2"/><text x="6.4389%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="6.1889%" y="693" width="0.1629%" height="15" fill="rgb(246,12,2)" fg:x="76" fg:w="2"/><text x="6.4389%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.1889%" y="677" width="0.1629%" height="15" fill="rgb(236,117,3)" fg:x="76" fg:w="2"/><text x="6.4389%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1889%" y="661" width="0.1629%" height="15" fill="rgb(216,128,52)" fg:x="76" fg:w="2"/><text x="6.4389%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1889%" y="645" width="0.1629%" height="15" fill="rgb(246,145,19)" fg:x="76" fg:w="2"/><text x="6.4389%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.1889%" y="629" width="0.1629%" height="15" fill="rgb(222,11,46)" fg:x="76" fg:w="2"/><text x="6.4389%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2704%" y="613" width="0.0814%" height="15" fill="rgb(245,82,36)" fg:x="77" fg:w="1"/><text x="6.5204%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2704%" y="597" width="0.0814%" height="15" fill="rgb(250,73,51)" fg:x="77" fg:w="1"/><text x="6.5204%" y="607.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="6.3518%" y="757" width="0.0814%" height="15" fill="rgb(221,189,23)" fg:x="78" fg:w="1"/><text x="6.6018%" y="767.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.3518%" y="741" width="0.0814%" height="15" fill="rgb(210,33,7)" fg:x="78" fg:w="1"/><text x="6.6018%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3518%" y="725" width="0.0814%" height="15" fill="rgb(210,107,22)" fg:x="78" fg:w="1"/><text x="6.6018%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.3518%" y="709" width="0.0814%" height="15" fill="rgb(222,116,37)" fg:x="78" fg:w="1"/><text x="6.6018%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3518%" y="693" width="0.0814%" height="15" fill="rgb(254,17,48)" fg:x="78" fg:w="1"/><text x="6.6018%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.4332%" y="709" width="0.0814%" height="15" fill="rgb(224,36,32)" fg:x="79" fg:w="1"/><text x="6.6832%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.4332%" y="693" width="0.0814%" height="15" fill="rgb(232,90,46)" fg:x="79" fg:w="1"/><text x="6.6832%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.4332%" y="677" width="0.0814%" height="15" fill="rgb(241,66,40)" fg:x="79" fg:w="1"/><text x="6.6832%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4332%" y="661" width="0.0814%" height="15" fill="rgb(249,184,29)" fg:x="79" fg:w="1"/><text x="6.6832%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4332%" y="645" width="0.0814%" height="15" fill="rgb(231,181,1)" fg:x="79" fg:w="1"/><text x="6.6832%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4332%" y="629" width="0.0814%" height="15" fill="rgb(224,94,2)" fg:x="79" fg:w="1"/><text x="6.6832%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4332%" y="613" width="0.0814%" height="15" fill="rgb(229,170,15)" fg:x="79" fg:w="1"/><text x="6.6832%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5961%" y="661" width="0.0814%" height="15" fill="rgb(240,127,35)" fg:x="81" fg:w="1"/><text x="6.8461%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5961%" y="645" width="0.0814%" height="15" fill="rgb(248,196,34)" fg:x="81" fg:w="1"/><text x="6.8461%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5961%" y="629" width="0.0814%" height="15" fill="rgb(236,137,7)" fg:x="81" fg:w="1"/><text x="6.8461%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5961%" y="613" width="0.0814%" height="15" fill="rgb(235,127,16)" fg:x="81" fg:w="1"/><text x="6.8461%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5961%" y="597" width="0.0814%" height="15" fill="rgb(250,192,54)" fg:x="81" fg:w="1"/><text x="6.8461%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5961%" y="581" width="0.0814%" height="15" fill="rgb(218,98,20)" fg:x="81" fg:w="1"/><text x="6.8461%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (13 samples, 1.06%)</title><rect x="5.7003%" y="789" width="1.0586%" height="15" fill="rgb(230,176,47)" fg:x="70" fg:w="13"/><text x="5.9503%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (10 samples, 0.81%)</title><rect x="5.9446%" y="773" width="0.8143%" height="15" fill="rgb(244,2,33)" fg:x="73" fg:w="10"/><text x="6.1946%" y="783.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.33%)</title><rect x="6.4332%" y="757" width="0.3257%" height="15" fill="rgb(231,100,17)" fg:x="79" fg:w="4"/><text x="6.6832%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.33%)</title><rect x="6.4332%" y="741" width="0.3257%" height="15" fill="rgb(245,23,12)" fg:x="79" fg:w="4"/><text x="6.6832%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.33%)</title><rect x="6.4332%" y="725" width="0.3257%" height="15" fill="rgb(249,55,22)" fg:x="79" fg:w="4"/><text x="6.6832%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="6.5147%" y="709" width="0.2443%" height="15" fill="rgb(207,134,9)" fg:x="80" fg:w="3"/><text x="6.7647%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="6.5147%" y="693" width="0.2443%" height="15" fill="rgb(218,134,0)" fg:x="80" fg:w="3"/><text x="6.7647%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="6.5147%" y="677" width="0.2443%" height="15" fill="rgb(213,212,33)" fg:x="80" fg:w="3"/><text x="6.7647%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6775%" y="661" width="0.0814%" height="15" fill="rgb(252,106,18)" fg:x="82" fg:w="1"/><text x="6.9275%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6775%" y="645" width="0.0814%" height="15" fill="rgb(208,126,42)" fg:x="82" fg:w="1"/><text x="6.9275%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6775%" y="629" width="0.0814%" height="15" fill="rgb(246,175,29)" fg:x="82" fg:w="1"/><text x="6.9275%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6775%" y="613" width="0.0814%" height="15" fill="rgb(215,13,50)" fg:x="82" fg:w="1"/><text x="6.9275%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.6775%" y="597" width="0.0814%" height="15" fill="rgb(216,172,15)" fg:x="82" fg:w="1"/><text x="6.9275%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6775%" y="581" width="0.0814%" height="15" fill="rgb(212,103,13)" fg:x="82" fg:w="1"/><text x="6.9275%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="6.6775%" y="565" width="0.0814%" height="15" fill="rgb(231,171,36)" fg:x="82" fg:w="1"/><text x="6.9275%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="6.7590%" y="789" width="0.0814%" height="15" fill="rgb(250,123,20)" fg:x="83" fg:w="1"/><text x="7.0090%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.7590%" y="773" width="0.0814%" height="15" fill="rgb(212,53,50)" fg:x="83" fg:w="1"/><text x="7.0090%" y="783.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.8404%" y="789" width="0.0814%" height="15" fill="rgb(243,54,12)" fg:x="84" fg:w="1"/><text x="7.0904%" y="799.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.8404%" y="773" width="0.0814%" height="15" fill="rgb(234,101,34)" fg:x="84" fg:w="1"/><text x="7.0904%" y="783.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="6.8404%" y="757" width="0.0814%" height="15" fill="rgb(254,67,22)" fg:x="84" fg:w="1"/><text x="7.0904%" y="767.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.8404%" y="741" width="0.0814%" height="15" fill="rgb(250,35,47)" fg:x="84" fg:w="1"/><text x="7.0904%" y="751.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8404%" y="725" width="0.0814%" height="15" fill="rgb(226,126,38)" fg:x="84" fg:w="1"/><text x="7.0904%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8404%" y="709" width="0.0814%" height="15" fill="rgb(216,138,53)" fg:x="84" fg:w="1"/><text x="7.0904%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8404%" y="693" width="0.0814%" height="15" fill="rgb(246,199,43)" fg:x="84" fg:w="1"/><text x="7.0904%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8404%" y="677" width="0.0814%" height="15" fill="rgb(232,125,11)" fg:x="84" fg:w="1"/><text x="7.0904%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.8404%" y="661" width="0.0814%" height="15" fill="rgb(218,219,45)" fg:x="84" fg:w="1"/><text x="7.0904%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8404%" y="645" width="0.0814%" height="15" fill="rgb(216,102,54)" fg:x="84" fg:w="1"/><text x="7.0904%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.8404%" y="629" width="0.0814%" height="15" fill="rgb(250,228,7)" fg:x="84" fg:w="1"/><text x="7.0904%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8404%" y="613" width="0.0814%" height="15" fill="rgb(226,125,25)" fg:x="84" fg:w="1"/><text x="7.0904%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.9218%" y="725" width="0.0814%" height="15" fill="rgb(224,165,27)" fg:x="85" fg:w="1"/><text x="7.1718%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.9218%" y="709" width="0.0814%" height="15" fill="rgb(233,86,3)" fg:x="85" fg:w="1"/><text x="7.1718%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.9218%" y="693" width="0.0814%" height="15" fill="rgb(228,116,20)" fg:x="85" fg:w="1"/><text x="7.1718%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9218%" y="677" width="0.0814%" height="15" fill="rgb(209,192,17)" fg:x="85" fg:w="1"/><text x="7.1718%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9218%" y="661" width="0.0814%" height="15" fill="rgb(224,88,34)" fg:x="85" fg:w="1"/><text x="7.1718%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9218%" y="645" width="0.0814%" height="15" fill="rgb(233,38,6)" fg:x="85" fg:w="1"/><text x="7.1718%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9218%" y="629" width="0.0814%" height="15" fill="rgb(212,59,30)" fg:x="85" fg:w="1"/><text x="7.1718%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.9218%" y="773" width="0.1629%" height="15" fill="rgb(213,80,3)" fg:x="85" fg:w="2"/><text x="7.1718%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.9218%" y="757" width="0.1629%" height="15" fill="rgb(251,178,7)" fg:x="85" fg:w="2"/><text x="7.1718%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.9218%" y="741" width="0.1629%" height="15" fill="rgb(213,154,26)" fg:x="85" fg:w="2"/><text x="7.1718%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.0033%" y="725" width="0.0814%" height="15" fill="rgb(238,165,49)" fg:x="86" fg:w="1"/><text x="7.2533%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="7.0033%" y="709" width="0.0814%" height="15" fill="rgb(248,91,46)" fg:x="86" fg:w="1"/><text x="7.2533%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="7.0033%" y="693" width="0.0814%" height="15" fill="rgb(244,21,52)" fg:x="86" fg:w="1"/><text x="7.2533%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0033%" y="677" width="0.0814%" height="15" fill="rgb(247,122,20)" fg:x="86" fg:w="1"/><text x="7.2533%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0033%" y="661" width="0.0814%" height="15" fill="rgb(218,27,9)" fg:x="86" fg:w="1"/><text x="7.2533%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0033%" y="645" width="0.0814%" height="15" fill="rgb(246,7,6)" fg:x="86" fg:w="1"/><text x="7.2533%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0033%" y="629" width="0.0814%" height="15" fill="rgb(227,135,54)" fg:x="86" fg:w="1"/><text x="7.2533%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.0033%" y="613" width="0.0814%" height="15" fill="rgb(247,14,11)" fg:x="86" fg:w="1"/><text x="7.2533%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0033%" y="597" width="0.0814%" height="15" fill="rgb(206,149,34)" fg:x="86" fg:w="1"/><text x="7.2533%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0033%" y="581" width="0.0814%" height="15" fill="rgb(227,228,4)" fg:x="86" fg:w="1"/><text x="7.2533%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0033%" y="565" width="0.0814%" height="15" fill="rgb(238,218,28)" fg:x="86" fg:w="1"/><text x="7.2533%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0033%" y="549" width="0.0814%" height="15" fill="rgb(252,86,40)" fg:x="86" fg:w="1"/><text x="7.2533%" y="559.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="6.9218%" y="789" width="0.2443%" height="15" fill="rgb(251,225,11)" fg:x="85" fg:w="3"/><text x="7.1718%" y="799.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="7.0847%" y="773" width="0.0814%" height="15" fill="rgb(206,46,49)" fg:x="87" fg:w="1"/><text x="7.3347%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::moving::model::Occupying&gt;&gt; (1 samples, 0.08%)</title><rect x="7.0847%" y="757" width="0.0814%" height="15" fill="rgb(245,128,24)" fg:x="87" fg:w="1"/><text x="7.3347%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="7.0847%" y="741" width="0.0814%" height="15" fill="rgb(219,177,34)" fg:x="87" fg:w="1"/><text x="7.3347%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="7.1661%" y="709" width="0.0814%" height="15" fill="rgb(218,60,48)" fg:x="88" fg:w="1"/><text x="7.4161%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="7.1661%" y="693" width="0.0814%" height="15" fill="rgb(221,11,5)" fg:x="88" fg:w="1"/><text x="7.4161%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1661%" y="677" width="0.0814%" height="15" fill="rgb(220,148,13)" fg:x="88" fg:w="1"/><text x="7.4161%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1661%" y="661" width="0.0814%" height="15" fill="rgb(210,16,3)" fg:x="88" fg:w="1"/><text x="7.4161%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1661%" y="645" width="0.0814%" height="15" fill="rgb(236,80,2)" fg:x="88" fg:w="1"/><text x="7.4161%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1661%" y="629" width="0.0814%" height="15" fill="rgb(239,129,19)" fg:x="88" fg:w="1"/><text x="7.4161%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.1661%" y="613" width="0.0814%" height="15" fill="rgb(220,106,35)" fg:x="88" fg:w="1"/><text x="7.4161%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1661%" y="597" width="0.0814%" height="15" fill="rgb(252,139,45)" fg:x="88" fg:w="1"/><text x="7.4161%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (40 samples, 3.26%)</title><rect x="4.0717%" y="805" width="3.2573%" height="15" fill="rgb(229,8,36)" fg:x="50" fg:w="40"/><text x="4.3217%" y="815.50">plu..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="7.1661%" y="789" width="0.1629%" height="15" fill="rgb(230,126,33)" fg:x="88" fg:w="2"/><text x="7.4161%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="7.1661%" y="773" width="0.1629%" height="15" fill="rgb(239,140,21)" fg:x="88" fg:w="2"/><text x="7.4161%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.1661%" y="757" width="0.1629%" height="15" fill="rgb(254,104,9)" fg:x="88" fg:w="2"/><text x="7.4161%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.1661%" y="741" width="0.1629%" height="15" fill="rgb(239,52,14)" fg:x="88" fg:w="2"/><text x="7.4161%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="7.1661%" y="725" width="0.1629%" height="15" fill="rgb(208,227,44)" fg:x="88" fg:w="2"/><text x="7.4161%" y="735.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="7.2476%" y="709" width="0.0814%" height="15" fill="rgb(246,18,19)" fg:x="89" fg:w="1"/><text x="7.4976%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="7.2476%" y="693" width="0.0814%" height="15" fill="rgb(235,228,25)" fg:x="89" fg:w="1"/><text x="7.4976%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2476%" y="677" width="0.0814%" height="15" fill="rgb(240,156,20)" fg:x="89" fg:w="1"/><text x="7.4976%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2476%" y="661" width="0.0814%" height="15" fill="rgb(224,8,20)" fg:x="89" fg:w="1"/><text x="7.4976%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2476%" y="645" width="0.0814%" height="15" fill="rgb(214,12,52)" fg:x="89" fg:w="1"/><text x="7.4976%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2476%" y="629" width="0.0814%" height="15" fill="rgb(211,220,47)" fg:x="89" fg:w="1"/><text x="7.4976%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (66 samples, 5.37%)</title><rect x="2.0358%" y="821" width="5.3746%" height="15" fill="rgb(250,173,5)" fg:x="25" fg:w="66"/><text x="2.2858%" y="831.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="7.3290%" y="805" width="0.0814%" height="15" fill="rgb(250,125,52)" fg:x="90" fg:w="1"/><text x="7.5790%" y="815.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="7.3290%" y="789" width="0.0814%" height="15" fill="rgb(209,133,18)" fg:x="90" fg:w="1"/><text x="7.5790%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="7.3290%" y="773" width="0.0814%" height="15" fill="rgb(216,173,22)" fg:x="90" fg:w="1"/><text x="7.5790%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.3290%" y="757" width="0.0814%" height="15" fill="rgb(205,3,22)" fg:x="90" fg:w="1"/><text x="7.5790%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.3290%" y="741" width="0.0814%" height="15" fill="rgb(248,22,20)" fg:x="90" fg:w="1"/><text x="7.5790%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.3290%" y="725" width="0.0814%" height="15" fill="rgb(233,6,29)" fg:x="90" fg:w="1"/><text x="7.5790%" y="735.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="7.3290%" y="709" width="0.0814%" height="15" fill="rgb(240,22,54)" fg:x="90" fg:w="1"/><text x="7.5790%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="7.3290%" y="693" width="0.0814%" height="15" fill="rgb(231,133,32)" fg:x="90" fg:w="1"/><text x="7.5790%" y="703.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3290%" y="677" width="0.0814%" height="15" fill="rgb(248,193,4)" fg:x="90" fg:w="1"/><text x="7.5790%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3290%" y="661" width="0.0814%" height="15" fill="rgb(211,178,46)" fg:x="90" fg:w="1"/><text x="7.5790%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3290%" y="645" width="0.0814%" height="15" fill="rgb(224,5,42)" fg:x="90" fg:w="1"/><text x="7.5790%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3290%" y="629" width="0.0814%" height="15" fill="rgb(239,176,25)" fg:x="90" fg:w="1"/><text x="7.5790%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.3290%" y="613" width="0.0814%" height="15" fill="rgb(245,187,50)" fg:x="90" fg:w="1"/><text x="7.5790%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3290%" y="597" width="0.0814%" height="15" fill="rgb(248,24,15)" fg:x="90" fg:w="1"/><text x="7.5790%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4104%" y="821" width="0.0814%" height="15" fill="rgb(205,166,13)" fg:x="91" fg:w="1"/><text x="7.6604%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="7.4919%" y="821" width="0.0814%" height="15" fill="rgb(208,114,23)" fg:x="92" fg:w="1"/><text x="7.7419%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="7.4919%" y="805" width="0.0814%" height="15" fill="rgb(239,127,18)" fg:x="92" fg:w="1"/><text x="7.7419%" y="815.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.5733%" y="789" width="0.0814%" height="15" fill="rgb(219,154,28)" fg:x="93" fg:w="1"/><text x="7.8233%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5733%" y="773" width="0.0814%" height="15" fill="rgb(225,157,23)" fg:x="93" fg:w="1"/><text x="7.8233%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5733%" y="757" width="0.0814%" height="15" fill="rgb(219,8,6)" fg:x="93" fg:w="1"/><text x="7.8233%" y="767.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="7.6547%" y="789" width="0.0814%" height="15" fill="rgb(212,47,6)" fg:x="94" fg:w="1"/><text x="7.9047%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="7.6547%" y="773" width="0.0814%" height="15" fill="rgb(224,190,4)" fg:x="94" fg:w="1"/><text x="7.9047%" y="783.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="7.6547%" y="757" width="0.0814%" height="15" fill="rgb(239,183,29)" fg:x="94" fg:w="1"/><text x="7.9047%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6547%" y="741" width="0.0814%" height="15" fill="rgb(213,57,7)" fg:x="94" fg:w="1"/><text x="7.9047%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.8176%" y="773" width="0.0814%" height="15" fill="rgb(216,148,1)" fg:x="96" fg:w="1"/><text x="8.0676%" y="783.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.8176%" y="757" width="0.0814%" height="15" fill="rgb(236,182,29)" fg:x="96" fg:w="1"/><text x="8.0676%" y="767.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.8176%" y="741" width="0.0814%" height="15" fill="rgb(244,120,48)" fg:x="96" fg:w="1"/><text x="8.0676%" y="751.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.9805%" y="741" width="0.0814%" height="15" fill="rgb(206,71,34)" fg:x="98" fg:w="1"/><text x="8.2305%" y="751.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.9805%" y="725" width="0.0814%" height="15" fill="rgb(242,32,6)" fg:x="98" fg:w="1"/><text x="8.2305%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0619%" y="725" width="0.0814%" height="15" fill="rgb(241,35,3)" fg:x="99" fg:w="1"/><text x="8.3119%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0619%" y="709" width="0.0814%" height="15" fill="rgb(222,62,19)" fg:x="99" fg:w="1"/><text x="8.3119%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0619%" y="693" width="0.0814%" height="15" fill="rgb(223,110,41)" fg:x="99" fg:w="1"/><text x="8.3119%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0619%" y="677" width="0.0814%" height="15" fill="rgb(208,224,4)" fg:x="99" fg:w="1"/><text x="8.3119%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.0619%" y="661" width="0.0814%" height="15" fill="rgb(241,137,19)" fg:x="99" fg:w="1"/><text x="8.3119%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.0619%" y="645" width="0.0814%" height="15" fill="rgb(244,24,17)" fg:x="99" fg:w="1"/><text x="8.3119%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.0619%" y="629" width="0.0814%" height="15" fill="rgb(245,178,49)" fg:x="99" fg:w="1"/><text x="8.3119%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.1433%" y="693" width="0.0814%" height="15" fill="rgb(219,160,38)" fg:x="100" fg:w="1"/><text x="8.3933%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1433%" y="677" width="0.0814%" height="15" fill="rgb(228,137,14)" fg:x="100" fg:w="1"/><text x="8.3933%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2248%" y="693" width="0.0814%" height="15" fill="rgb(237,134,11)" fg:x="101" fg:w="1"/><text x="8.4748%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2248%" y="677" width="0.0814%" height="15" fill="rgb(211,126,44)" fg:x="101" fg:w="1"/><text x="8.4748%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2248%" y="661" width="0.0814%" height="15" fill="rgb(226,171,33)" fg:x="101" fg:w="1"/><text x="8.4748%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2248%" y="645" width="0.0814%" height="15" fill="rgb(253,99,13)" fg:x="101" fg:w="1"/><text x="8.4748%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2248%" y="629" width="0.0814%" height="15" fill="rgb(244,48,7)" fg:x="101" fg:w="1"/><text x="8.4748%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.2248%" y="613" width="0.0814%" height="15" fill="rgb(244,217,54)" fg:x="101" fg:w="1"/><text x="8.4748%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.2248%" y="597" width="0.0814%" height="15" fill="rgb(224,15,18)" fg:x="101" fg:w="1"/><text x="8.4748%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2248%" y="581" width="0.0814%" height="15" fill="rgb(244,99,12)" fg:x="101" fg:w="1"/><text x="8.4748%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.1433%" y="725" width="0.2443%" height="15" fill="rgb(233,226,8)" fg:x="100" fg:w="3"/><text x="8.3933%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="8.1433%" y="709" width="0.2443%" height="15" fill="rgb(229,211,3)" fg:x="100" fg:w="3"/><text x="8.3933%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3062%" y="693" width="0.0814%" height="15" fill="rgb(216,140,21)" fg:x="102" fg:w="1"/><text x="8.5562%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.3062%" y="677" width="0.0814%" height="15" fill="rgb(234,122,30)" fg:x="102" fg:w="1"/><text x="8.5562%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="7.9805%" y="757" width="0.5700%" height="15" fill="rgb(236,25,46)" fg:x="98" fg:w="7"/><text x="8.2305%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="8.0619%" y="741" width="0.4886%" height="15" fill="rgb(217,52,54)" fg:x="99" fg:w="6"/><text x="8.3119%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.3876%" y="725" width="0.1629%" height="15" fill="rgb(222,29,26)" fg:x="103" fg:w="2"/><text x="8.6376%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4691%" y="709" width="0.0814%" height="15" fill="rgb(216,177,29)" fg:x="104" fg:w="1"/><text x="8.7191%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.4691%" y="693" width="0.0814%" height="15" fill="rgb(247,136,51)" fg:x="104" fg:w="1"/><text x="8.7191%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.4691%" y="677" width="0.0814%" height="15" fill="rgb(231,47,47)" fg:x="104" fg:w="1"/><text x="8.7191%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.4691%" y="661" width="0.0814%" height="15" fill="rgb(211,192,36)" fg:x="104" fg:w="1"/><text x="8.7191%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.4691%" y="645" width="0.0814%" height="15" fill="rgb(229,156,32)" fg:x="104" fg:w="1"/><text x="8.7191%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.5505%" y="709" width="0.1629%" height="15" fill="rgb(248,213,20)" fg:x="105" fg:w="2"/><text x="8.8005%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7134%" y="709" width="0.0814%" height="15" fill="rgb(217,64,7)" fg:x="107" fg:w="1"/><text x="8.9634%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="8.5505%" y="757" width="0.3257%" height="15" fill="rgb(232,142,8)" fg:x="105" fg:w="4"/><text x="8.8005%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="8.5505%" y="741" width="0.3257%" height="15" fill="rgb(224,92,44)" fg:x="105" fg:w="4"/><text x="8.8005%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="8.5505%" y="725" width="0.3257%" height="15" fill="rgb(214,169,17)" fg:x="105" fg:w="4"/><text x="8.8005%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7948%" y="709" width="0.0814%" height="15" fill="rgb(210,59,37)" fg:x="108" fg:w="1"/><text x="9.0448%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7948%" y="693" width="0.0814%" height="15" fill="rgb(214,116,48)" fg:x="108" fg:w="1"/><text x="9.0448%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7948%" y="677" width="0.0814%" height="15" fill="rgb(244,191,6)" fg:x="108" fg:w="1"/><text x="9.0448%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7948%" y="661" width="0.0814%" height="15" fill="rgb(241,50,52)" fg:x="108" fg:w="1"/><text x="9.0448%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.8762%" y="693" width="0.1629%" height="15" fill="rgb(236,75,39)" fg:x="109" fg:w="2"/><text x="9.1262%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="9.1205%" y="677" width="0.1629%" height="15" fill="rgb(236,99,0)" fg:x="112" fg:w="2"/><text x="9.3705%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="9.1205%" y="661" width="0.1629%" height="15" fill="rgb(207,202,15)" fg:x="112" fg:w="2"/><text x="9.3705%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.2834%" y="645" width="0.0814%" height="15" fill="rgb(233,207,14)" fg:x="114" fg:w="1"/><text x="9.5334%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.2834%" y="629" width="0.0814%" height="15" fill="rgb(226,27,51)" fg:x="114" fg:w="1"/><text x="9.5334%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2834%" y="613" width="0.0814%" height="15" fill="rgb(206,104,42)" fg:x="114" fg:w="1"/><text x="9.5334%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="8.8762%" y="725" width="0.5700%" height="15" fill="rgb(212,225,4)" fg:x="109" fg:w="7"/><text x="9.1262%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="8.8762%" y="709" width="0.5700%" height="15" fill="rgb(233,96,42)" fg:x="109" fg:w="7"/><text x="9.1262%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="9.0391%" y="693" width="0.4072%" height="15" fill="rgb(229,21,32)" fg:x="111" fg:w="5"/><text x="9.2891%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.2834%" y="677" width="0.1629%" height="15" fill="rgb(226,216,24)" fg:x="114" fg:w="2"/><text x="9.5334%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.2834%" y="661" width="0.1629%" height="15" fill="rgb(221,163,17)" fg:x="114" fg:w="2"/><text x="9.5334%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3648%" y="645" width="0.0814%" height="15" fill="rgb(216,216,42)" fg:x="115" fg:w="1"/><text x="9.6148%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3648%" y="629" width="0.0814%" height="15" fill="rgb(240,118,7)" fg:x="115" fg:w="1"/><text x="9.6148%" y="639.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (10 samples, 0.81%)</title><rect x="8.8762%" y="741" width="0.8143%" height="15" fill="rgb(221,67,37)" fg:x="109" fg:w="10"/><text x="9.1262%" y="751.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="9.4463%" y="725" width="0.2443%" height="15" fill="rgb(241,32,44)" fg:x="116" fg:w="3"/><text x="9.6963%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.5277%" y="709" width="0.1629%" height="15" fill="rgb(235,204,43)" fg:x="117" fg:w="2"/><text x="9.7777%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.5277%" y="693" width="0.1629%" height="15" fill="rgb(213,116,10)" fg:x="117" fg:w="2"/><text x="9.7777%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6091%" y="677" width="0.0814%" height="15" fill="rgb(239,15,48)" fg:x="118" fg:w="1"/><text x="9.8591%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.7720%" y="709" width="0.1629%" height="15" fill="rgb(207,123,36)" fg:x="120" fg:w="2"/><text x="10.0220%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8534%" y="693" width="0.0814%" height="15" fill="rgb(209,103,30)" fg:x="121" fg:w="1"/><text x="10.1034%" y="703.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9349%" y="709" width="0.0814%" height="15" fill="rgb(238,100,19)" fg:x="122" fg:w="1"/><text x="10.1849%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="9.9349%" y="693" width="0.0814%" height="15" fill="rgb(244,30,14)" fg:x="122" fg:w="1"/><text x="10.1849%" y="703.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0163%" y="709" width="0.0814%" height="15" fill="rgb(249,174,6)" fg:x="123" fg:w="1"/><text x="10.2663%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.0163%" y="693" width="0.0814%" height="15" fill="rgb(235,213,41)" fg:x="123" fg:w="1"/><text x="10.2663%" y="703.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.0977%" y="693" width="0.1629%" height="15" fill="rgb(213,118,6)" fg:x="124" fg:w="2"/><text x="10.3477%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2606%" y="693" width="0.0814%" height="15" fill="rgb(235,44,51)" fg:x="126" fg:w="1"/><text x="10.5106%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2606%" y="677" width="0.0814%" height="15" fill="rgb(217,9,53)" fg:x="126" fg:w="1"/><text x="10.5106%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2606%" y="661" width="0.0814%" height="15" fill="rgb(237,172,34)" fg:x="126" fg:w="1"/><text x="10.5106%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4235%" y="661" width="0.0814%" height="15" fill="rgb(206,206,11)" fg:x="128" fg:w="1"/><text x="10.6735%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4235%" y="645" width="0.0814%" height="15" fill="rgb(214,149,29)" fg:x="128" fg:w="1"/><text x="10.6735%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4235%" y="629" width="0.0814%" height="15" fill="rgb(208,123,3)" fg:x="128" fg:w="1"/><text x="10.6735%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5863%" y="629" width="0.0814%" height="15" fill="rgb(229,126,4)" fg:x="130" fg:w="1"/><text x="10.8363%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.5863%" y="613" width="0.0814%" height="15" fill="rgb(222,92,36)" fg:x="130" fg:w="1"/><text x="10.8363%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5863%" y="597" width="0.0814%" height="15" fill="rgb(216,39,41)" fg:x="130" fg:w="1"/><text x="10.8363%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.7492%" y="565" width="0.1629%" height="15" fill="rgb(253,127,28)" fg:x="132" fg:w="2"/><text x="10.9992%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8306%" y="549" width="0.0814%" height="15" fill="rgb(249,152,51)" fg:x="133" fg:w="1"/><text x="11.0806%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="10.5863%" y="645" width="0.6515%" height="15" fill="rgb(209,123,42)" fg:x="130" fg:w="8"/><text x="10.8363%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="10.6678%" y="629" width="0.5700%" height="15" fill="rgb(241,118,22)" fg:x="131" fg:w="7"/><text x="10.9178%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="10.7492%" y="613" width="0.4886%" height="15" fill="rgb(208,25,7)" fg:x="132" fg:w="6"/><text x="10.9992%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="10.7492%" y="597" width="0.4886%" height="15" fill="rgb(243,144,39)" fg:x="132" fg:w="6"/><text x="10.9992%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="10.7492%" y="581" width="0.4886%" height="15" fill="rgb(250,50,5)" fg:x="132" fg:w="6"/><text x="10.9992%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="10.9121%" y="565" width="0.3257%" height="15" fill="rgb(207,67,11)" fg:x="134" fg:w="4"/><text x="11.1621%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.9935%" y="549" width="0.2443%" height="15" fill="rgb(245,204,40)" fg:x="135" fg:w="3"/><text x="11.2435%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.0749%" y="533" width="0.1629%" height="15" fill="rgb(238,228,24)" fg:x="136" fg:w="2"/><text x="11.3249%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.0749%" y="517" width="0.1629%" height="15" fill="rgb(217,116,22)" fg:x="136" fg:w="2"/><text x="11.3249%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.0749%" y="501" width="0.1629%" height="15" fill="rgb(234,98,12)" fg:x="136" fg:w="2"/><text x="11.3249%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (20 samples, 1.63%)</title><rect x="9.6906%" y="741" width="1.6287%" height="15" fill="rgb(242,170,50)" fg:x="119" fg:w="20"/><text x="9.9406%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.63%)</title><rect x="9.6906%" y="725" width="1.6287%" height="15" fill="rgb(235,7,5)" fg:x="119" fg:w="20"/><text x="9.9406%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.22%)</title><rect x="10.0977%" y="709" width="1.2215%" height="15" fill="rgb(241,114,28)" fg:x="124" fg:w="15"/><text x="10.3477%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.98%)</title><rect x="10.3420%" y="693" width="0.9772%" height="15" fill="rgb(246,112,42)" fg:x="127" fg:w="12"/><text x="10.5920%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.90%)</title><rect x="10.4235%" y="677" width="0.8958%" height="15" fill="rgb(248,228,14)" fg:x="128" fg:w="11"/><text x="10.6735%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.81%)</title><rect x="10.5049%" y="661" width="0.8143%" height="15" fill="rgb(208,133,18)" fg:x="129" fg:w="10"/><text x="10.7549%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2378%" y="645" width="0.0814%" height="15" fill="rgb(207,35,49)" fg:x="138" fg:w="1"/><text x="11.4878%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.4821%" y="581" width="0.0814%" height="15" fill="rgb(205,68,36)" fg:x="141" fg:w="1"/><text x="11.7321%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.4821%" y="565" width="0.0814%" height="15" fill="rgb(245,62,40)" fg:x="141" fg:w="1"/><text x="11.7321%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.4821%" y="549" width="0.0814%" height="15" fill="rgb(228,27,24)" fg:x="141" fg:w="1"/><text x="11.7321%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.4821%" y="533" width="0.0814%" height="15" fill="rgb(253,19,12)" fg:x="141" fg:w="1"/><text x="11.7321%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.4821%" y="517" width="0.0814%" height="15" fill="rgb(232,28,20)" fg:x="141" fg:w="1"/><text x="11.7321%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (48 samples, 3.91%)</title><rect x="7.7362%" y="789" width="3.9088%" height="15" fill="rgb(218,35,51)" fg:x="95" fg:w="48"/><text x="7.9862%" y="799.50">engi..</text></g><g><title>engine::session::SavesEntities::check_for_changes (46 samples, 3.75%)</title><rect x="7.8990%" y="773" width="3.7459%" height="15" fill="rgb(212,90,40)" fg:x="97" fg:w="46"/><text x="8.1490%" y="783.50">engi..</text></g><g><title>kernel::model::any_entity_changes (34 samples, 2.77%)</title><rect x="8.8762%" y="757" width="2.7687%" height="15" fill="rgb(220,172,12)" fg:x="109" fg:w="34"/><text x="9.1262%" y="767.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="11.3192%" y="741" width="0.3257%" height="15" fill="rgb(226,159,20)" fg:x="139" fg:w="4"/><text x="11.5692%" y="751.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="11.3192%" y="725" width="0.3257%" height="15" fill="rgb(234,205,16)" fg:x="139" fg:w="4"/><text x="11.5692%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="11.3192%" y="709" width="0.3257%" height="15" fill="rgb(207,9,39)" fg:x="139" fg:w="4"/><text x="11.5692%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="11.3192%" y="693" width="0.3257%" height="15" fill="rgb(249,143,15)" fg:x="139" fg:w="4"/><text x="11.5692%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="11.3192%" y="677" width="0.3257%" height="15" fill="rgb(253,133,29)" fg:x="139" fg:w="4"/><text x="11.5692%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="11.4007%" y="661" width="0.2443%" height="15" fill="rgb(221,187,0)" fg:x="140" fg:w="3"/><text x="11.6507%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="11.4007%" y="645" width="0.2443%" height="15" fill="rgb(205,204,26)" fg:x="140" fg:w="3"/><text x="11.6507%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="11.4007%" y="629" width="0.2443%" height="15" fill="rgb(224,68,54)" fg:x="140" fg:w="3"/><text x="11.6507%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.4821%" y="613" width="0.1629%" height="15" fill="rgb(209,67,4)" fg:x="141" fg:w="2"/><text x="11.7321%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.4821%" y="597" width="0.1629%" height="15" fill="rgb(228,229,18)" fg:x="141" fg:w="2"/><text x="11.7321%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5635%" y="581" width="0.0814%" height="15" fill="rgb(231,89,13)" fg:x="142" fg:w="1"/><text x="11.8135%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5635%" y="565" width="0.0814%" height="15" fill="rgb(210,182,18)" fg:x="142" fg:w="1"/><text x="11.8135%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5635%" y="549" width="0.0814%" height="15" fill="rgb(240,105,2)" fg:x="142" fg:w="1"/><text x="11.8135%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6450%" y="757" width="0.0814%" height="15" fill="rgb(207,170,50)" fg:x="143" fg:w="1"/><text x="11.8950%" y="767.50"></text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="11.6450%" y="789" width="0.1629%" height="15" fill="rgb(232,133,24)" fg:x="143" fg:w="2"/><text x="11.8950%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="11.6450%" y="773" width="0.1629%" height="15" fill="rgb(235,166,27)" fg:x="143" fg:w="2"/><text x="11.8950%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="11.7264%" y="757" width="0.0814%" height="15" fill="rgb(209,19,13)" fg:x="144" fg:w="1"/><text x="11.9764%" y="767.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.7264%" y="741" width="0.0814%" height="15" fill="rgb(226,79,39)" fg:x="144" fg:w="1"/><text x="11.9764%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.7264%" y="725" width="0.0814%" height="15" fill="rgb(222,163,10)" fg:x="144" fg:w="1"/><text x="11.9764%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.7264%" y="709" width="0.0814%" height="15" fill="rgb(214,44,19)" fg:x="144" fg:w="1"/><text x="11.9764%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="11.7264%" y="693" width="0.0814%" height="15" fill="rgb(210,217,13)" fg:x="144" fg:w="1"/><text x="11.9764%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="11.7264%" y="677" width="0.0814%" height="15" fill="rgb(237,61,54)" fg:x="144" fg:w="1"/><text x="11.9764%" y="687.50"></text></g><g><title>engine::session::Session::close (53 samples, 4.32%)</title><rect x="7.5733%" y="821" width="4.3160%" height="15" fill="rgb(226,184,24)" fg:x="93" fg:w="53"/><text x="7.8233%" y="831.50">engin..</text></g><g><title>engine::session::Session::save_entity_changes (53 samples, 4.32%)</title><rect x="7.5733%" y="805" width="4.3160%" height="15" fill="rgb(223,226,4)" fg:x="93" fg:w="53"/><text x="7.8233%" y="815.50">engin..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="11.8078%" y="789" width="0.0814%" height="15" fill="rgb(210,26,41)" fg:x="145" fg:w="1"/><text x="12.0578%" y="799.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="11.8078%" y="773" width="0.0814%" height="15" fill="rgb(220,221,6)" fg:x="145" fg:w="1"/><text x="12.0578%" y="783.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="11.8078%" y="757" width="0.0814%" height="15" fill="rgb(225,89,49)" fg:x="145" fg:w="1"/><text x="12.0578%" y="767.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="11.8078%" y="741" width="0.0814%" height="15" fill="rgb(218,70,45)" fg:x="145" fg:w="1"/><text x="12.0578%" y="751.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="11.8078%" y="725" width="0.0814%" height="15" fill="rgb(238,166,21)" fg:x="145" fg:w="1"/><text x="12.0578%" y="735.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="11.8078%" y="709" width="0.0814%" height="15" fill="rgb(224,141,44)" fg:x="145" fg:w="1"/><text x="12.0578%" y="719.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="11.8078%" y="693" width="0.0814%" height="15" fill="rgb(230,12,49)" fg:x="145" fg:w="1"/><text x="12.0578%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="11.8893%" y="725" width="0.0814%" height="15" fill="rgb(212,174,12)" fg:x="146" fg:w="1"/><text x="12.1393%" y="735.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="11.8893%" y="709" width="0.0814%" height="15" fill="rgb(246,67,9)" fg:x="146" fg:w="1"/><text x="12.1393%" y="719.50"></text></g><g><title>&lt;plugins_core::carrying::parser::DropActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="11.8893%" y="693" width="0.0814%" height="15" fill="rgb(239,35,23)" fg:x="146" fg:w="1"/><text x="12.1393%" y="703.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="11.8893%" y="677" width="0.0814%" height="15" fill="rgb(211,167,0)" fg:x="146" fg:w="1"/><text x="12.1393%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.1336%" y="645" width="0.0814%" height="15" fill="rgb(225,119,45)" fg:x="149" fg:w="1"/><text x="12.3836%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="12.1336%" y="661" width="0.1629%" height="15" fill="rgb(210,162,6)" fg:x="149" fg:w="2"/><text x="12.3836%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2150%" y="645" width="0.0814%" height="15" fill="rgb(208,118,35)" fg:x="150" fg:w="1"/><text x="12.4650%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.3779%" y="501" width="0.0814%" height="15" fill="rgb(239,4,53)" fg:x="152" fg:w="1"/><text x="12.6279%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (2 samples, 0.16%)</title><rect x="12.3779%" y="581" width="0.1629%" height="15" fill="rgb(213,130,21)" fg:x="152" fg:w="2"/><text x="12.6279%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.3779%" y="565" width="0.1629%" height="15" fill="rgb(235,148,0)" fg:x="152" fg:w="2"/><text x="12.6279%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="12.3779%" y="549" width="0.1629%" height="15" fill="rgb(244,224,18)" fg:x="152" fg:w="2"/><text x="12.6279%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.3779%" y="533" width="0.1629%" height="15" fill="rgb(211,214,4)" fg:x="152" fg:w="2"/><text x="12.6279%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.3779%" y="517" width="0.1629%" height="15" fill="rgb(206,119,25)" fg:x="152" fg:w="2"/><text x="12.6279%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.4593%" y="501" width="0.0814%" height="15" fill="rgb(243,93,47)" fg:x="153" fg:w="1"/><text x="12.7093%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.4593%" y="485" width="0.0814%" height="15" fill="rgb(224,194,6)" fg:x="153" fg:w="1"/><text x="12.7093%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.4593%" y="469" width="0.0814%" height="15" fill="rgb(243,229,6)" fg:x="153" fg:w="1"/><text x="12.7093%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="12.3779%" y="629" width="0.2443%" height="15" fill="rgb(207,23,50)" fg:x="152" fg:w="3"/><text x="12.6279%" y="639.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="12.3779%" y="613" width="0.2443%" height="15" fill="rgb(253,192,32)" fg:x="152" fg:w="3"/><text x="12.6279%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="12.3779%" y="597" width="0.2443%" height="15" fill="rgb(213,21,6)" fg:x="152" fg:w="3"/><text x="12.6279%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.5407%" y="581" width="0.0814%" height="15" fill="rgb(243,151,13)" fg:x="154" fg:w="1"/><text x="12.7907%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5407%" y="565" width="0.0814%" height="15" fill="rgb(233,165,41)" fg:x="154" fg:w="1"/><text x="12.7907%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.5407%" y="549" width="0.0814%" height="15" fill="rgb(246,176,45)" fg:x="154" fg:w="1"/><text x="12.7907%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5407%" y="533" width="0.0814%" height="15" fill="rgb(217,170,52)" fg:x="154" fg:w="1"/><text x="12.7907%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.5407%" y="517" width="0.0814%" height="15" fill="rgb(214,203,54)" fg:x="154" fg:w="1"/><text x="12.7907%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.5407%" y="501" width="0.0814%" height="15" fill="rgb(248,215,49)" fg:x="154" fg:w="1"/><text x="12.7907%" y="511.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="12.6221%" y="613" width="0.0814%" height="15" fill="rgb(208,46,10)" fg:x="155" fg:w="1"/><text x="12.8721%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.0293%" y="501" width="0.1629%" height="15" fill="rgb(254,5,31)" fg:x="160" fg:w="2"/><text x="13.2793%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.0293%" y="485" width="0.1629%" height="15" fill="rgb(222,104,33)" fg:x="160" fg:w="2"/><text x="13.2793%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.1922%" y="421" width="0.0814%" height="15" fill="rgb(248,49,16)" fg:x="162" fg:w="1"/><text x="13.4422%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.1922%" y="405" width="0.0814%" height="15" fill="rgb(232,198,41)" fg:x="162" fg:w="1"/><text x="13.4422%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.1922%" y="389" width="0.0814%" height="15" fill="rgb(214,125,3)" fg:x="162" fg:w="1"/><text x="13.4422%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.1922%" y="373" width="0.0814%" height="15" fill="rgb(229,220,28)" fg:x="162" fg:w="1"/><text x="13.4422%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.1922%" y="357" width="0.0814%" height="15" fill="rgb(222,64,37)" fg:x="162" fg:w="1"/><text x="13.4422%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.1922%" y="341" width="0.0814%" height="15" fill="rgb(249,184,13)" fg:x="162" fg:w="1"/><text x="13.4422%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1922%" y="325" width="0.0814%" height="15" fill="rgb(252,176,6)" fg:x="162" fg:w="1"/><text x="13.4422%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="12.9479%" y="549" width="0.4072%" height="15" fill="rgb(228,153,7)" fg:x="159" fg:w="5"/><text x="13.1979%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="12.9479%" y="533" width="0.4072%" height="15" fill="rgb(242,193,5)" fg:x="159" fg:w="5"/><text x="13.1979%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="12.9479%" y="517" width="0.4072%" height="15" fill="rgb(232,140,9)" fg:x="159" fg:w="5"/><text x="13.1979%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.1922%" y="501" width="0.1629%" height="15" fill="rgb(213,222,16)" fg:x="162" fg:w="2"/><text x="13.4422%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="13.1922%" y="485" width="0.1629%" height="15" fill="rgb(222,75,50)" fg:x="162" fg:w="2"/><text x="13.4422%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="13.1922%" y="469" width="0.1629%" height="15" fill="rgb(205,180,2)" fg:x="162" fg:w="2"/><text x="13.4422%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="13.1922%" y="453" width="0.1629%" height="15" fill="rgb(216,34,7)" fg:x="162" fg:w="2"/><text x="13.4422%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="13.1922%" y="437" width="0.1629%" height="15" fill="rgb(253,16,32)" fg:x="162" fg:w="2"/><text x="13.4422%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.2736%" y="421" width="0.0814%" height="15" fill="rgb(208,97,28)" fg:x="163" fg:w="1"/><text x="13.5236%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.2736%" y="405" width="0.0814%" height="15" fill="rgb(225,92,11)" fg:x="163" fg:w="1"/><text x="13.5236%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (8 samples, 0.65%)</title><rect x="12.7850%" y="565" width="0.6515%" height="15" fill="rgb(243,38,12)" fg:x="157" fg:w="8"/><text x="13.0350%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3550%" y="549" width="0.0814%" height="15" fill="rgb(208,139,16)" fg:x="164" fg:w="1"/><text x="13.6050%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4365%" y="517" width="0.0814%" height="15" fill="rgb(227,24,9)" fg:x="165" fg:w="1"/><text x="13.6865%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.4365%" y="533" width="0.1629%" height="15" fill="rgb(206,62,11)" fg:x="165" fg:w="2"/><text x="13.6865%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5179%" y="517" width="0.0814%" height="15" fill="rgb(228,134,27)" fg:x="166" fg:w="1"/><text x="13.7679%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5179%" y="501" width="0.0814%" height="15" fill="rgb(205,55,33)" fg:x="166" fg:w="1"/><text x="13.7679%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5179%" y="485" width="0.0814%" height="15" fill="rgb(243,75,43)" fg:x="166" fg:w="1"/><text x="13.7679%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5179%" y="469" width="0.0814%" height="15" fill="rgb(223,27,42)" fg:x="166" fg:w="1"/><text x="13.7679%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5179%" y="453" width="0.0814%" height="15" fill="rgb(232,189,33)" fg:x="166" fg:w="1"/><text x="13.7679%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="13.5179%" y="437" width="0.0814%" height="15" fill="rgb(210,9,39)" fg:x="166" fg:w="1"/><text x="13.7679%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="13.5179%" y="421" width="0.0814%" height="15" fill="rgb(242,85,26)" fg:x="166" fg:w="1"/><text x="13.7679%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (12 samples, 0.98%)</title><rect x="12.7036%" y="581" width="0.9772%" height="15" fill="rgb(248,44,4)" fg:x="156" fg:w="12"/><text x="12.9536%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="13.4365%" y="565" width="0.2443%" height="15" fill="rgb(250,96,46)" fg:x="165" fg:w="3"/><text x="13.6865%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.4365%" y="549" width="0.2443%" height="15" fill="rgb(229,116,26)" fg:x="165" fg:w="3"/><text x="13.6865%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5993%" y="533" width="0.0814%" height="15" fill="rgb(246,94,34)" fg:x="167" fg:w="1"/><text x="13.8493%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="13.6808%" y="581" width="0.0814%" height="15" fill="rgb(251,73,21)" fg:x="168" fg:w="1"/><text x="13.9308%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.6808%" y="565" width="0.0814%" height="15" fill="rgb(254,121,25)" fg:x="168" fg:w="1"/><text x="13.9308%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.6808%" y="549" width="0.0814%" height="15" fill="rgb(215,161,49)" fg:x="168" fg:w="1"/><text x="13.9308%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.6808%" y="533" width="0.0814%" height="15" fill="rgb(221,43,13)" fg:x="168" fg:w="1"/><text x="13.9308%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.6808%" y="517" width="0.0814%" height="15" fill="rgb(249,5,37)" fg:x="168" fg:w="1"/><text x="13.9308%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.6808%" y="501" width="0.0814%" height="15" fill="rgb(226,25,44)" fg:x="168" fg:w="1"/><text x="13.9308%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (15 samples, 1.22%)</title><rect x="12.6221%" y="629" width="1.2215%" height="15" fill="rgb(238,189,16)" fg:x="155" fg:w="15"/><text x="12.8721%" y="639.50"></text></g><g><title>kernel::model::scopes::load_props (14 samples, 1.14%)</title><rect x="12.7036%" y="613" width="1.1401%" height="15" fill="rgb(251,186,8)" fg:x="156" fg:w="14"/><text x="12.9536%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (14 samples, 1.14%)</title><rect x="12.7036%" y="597" width="1.1401%" height="15" fill="rgb(254,34,31)" fg:x="156" fg:w="14"/><text x="12.9536%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7622%" y="581" width="0.0814%" height="15" fill="rgb(225,215,27)" fg:x="169" fg:w="1"/><text x="14.0122%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7622%" y="565" width="0.0814%" height="15" fill="rgb(221,192,48)" fg:x="169" fg:w="1"/><text x="14.0122%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7622%" y="549" width="0.0814%" height="15" fill="rgb(219,137,20)" fg:x="169" fg:w="1"/><text x="14.0122%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7622%" y="533" width="0.0814%" height="15" fill="rgb(219,84,11)" fg:x="169" fg:w="1"/><text x="14.0122%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.7622%" y="517" width="0.0814%" height="15" fill="rgb(224,10,23)" fg:x="169" fg:w="1"/><text x="14.0122%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7622%" y="501" width="0.0814%" height="15" fill="rgb(248,22,39)" fg:x="169" fg:w="1"/><text x="14.0122%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7622%" y="485" width="0.0814%" height="15" fill="rgb(212,154,20)" fg:x="169" fg:w="1"/><text x="14.0122%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7622%" y="469" width="0.0814%" height="15" fill="rgb(236,199,50)" fg:x="169" fg:w="1"/><text x="14.0122%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.7622%" y="453" width="0.0814%" height="15" fill="rgb(211,9,17)" fg:x="169" fg:w="1"/><text x="14.0122%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.7622%" y="437" width="0.0814%" height="15" fill="rgb(243,216,36)" fg:x="169" fg:w="1"/><text x="14.0122%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="13.8436%" y="597" width="0.1629%" height="15" fill="rgb(250,2,10)" fg:x="170" fg:w="2"/><text x="14.0936%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="13.8436%" y="581" width="0.1629%" height="15" fill="rgb(226,50,48)" fg:x="170" fg:w="2"/><text x="14.0936%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="13.8436%" y="565" width="0.1629%" height="15" fill="rgb(243,81,16)" fg:x="170" fg:w="2"/><text x="14.0936%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.9251%" y="549" width="0.0814%" height="15" fill="rgb(250,14,2)" fg:x="171" fg:w="1"/><text x="14.1751%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.9251%" y="533" width="0.0814%" height="15" fill="rgb(233,135,29)" fg:x="171" fg:w="1"/><text x="14.1751%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.9251%" y="517" width="0.0814%" height="15" fill="rgb(224,64,43)" fg:x="171" fg:w="1"/><text x="14.1751%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="13.8436%" y="629" width="0.2443%" height="15" fill="rgb(238,84,13)" fg:x="170" fg:w="3"/><text x="14.0936%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="13.8436%" y="613" width="0.2443%" height="15" fill="rgb(253,48,26)" fg:x="170" fg:w="3"/><text x="14.0936%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.0065%" y="597" width="0.0814%" height="15" fill="rgb(205,223,31)" fg:x="172" fg:w="1"/><text x="14.2565%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.0065%" y="581" width="0.0814%" height="15" fill="rgb(221,41,32)" fg:x="172" fg:w="1"/><text x="14.2565%" y="591.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="14.0879%" y="565" width="0.0814%" height="15" fill="rgb(213,158,31)" fg:x="173" fg:w="1"/><text x="14.3379%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="14.0879%" y="549" width="0.0814%" height="15" fill="rgb(245,126,43)" fg:x="173" fg:w="1"/><text x="14.3379%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.0879%" y="533" width="0.0814%" height="15" fill="rgb(227,7,22)" fg:x="173" fg:w="1"/><text x="14.3379%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.0879%" y="517" width="0.0814%" height="15" fill="rgb(252,90,44)" fg:x="173" fg:w="1"/><text x="14.3379%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.0879%" y="501" width="0.0814%" height="15" fill="rgb(253,91,0)" fg:x="173" fg:w="1"/><text x="14.3379%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1694%" y="533" width="0.0814%" height="15" fill="rgb(252,175,49)" fg:x="174" fg:w="1"/><text x="14.4194%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1694%" y="517" width="0.0814%" height="15" fill="rgb(246,150,1)" fg:x="174" fg:w="1"/><text x="14.4194%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="14.1694%" y="501" width="0.0814%" height="15" fill="rgb(241,192,25)" fg:x="174" fg:w="1"/><text x="14.4194%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="14.1694%" y="485" width="0.0814%" height="15" fill="rgb(239,187,11)" fg:x="174" fg:w="1"/><text x="14.4194%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.1694%" y="469" width="0.0814%" height="15" fill="rgb(218,202,51)" fg:x="174" fg:w="1"/><text x="14.4194%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="14.1694%" y="453" width="0.0814%" height="15" fill="rgb(225,176,8)" fg:x="174" fg:w="1"/><text x="14.4194%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.1694%" y="437" width="0.0814%" height="15" fill="rgb(219,122,41)" fg:x="174" fg:w="1"/><text x="14.4194%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="14.0879%" y="581" width="0.2443%" height="15" fill="rgb(248,140,20)" fg:x="173" fg:w="3"/><text x="14.3379%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="14.1694%" y="565" width="0.1629%" height="15" fill="rgb(245,41,37)" fg:x="174" fg:w="2"/><text x="14.4194%" y="575.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.1694%" y="549" width="0.1629%" height="15" fill="rgb(235,82,39)" fg:x="174" fg:w="2"/><text x="14.4194%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.2508%" y="533" width="0.0814%" height="15" fill="rgb(230,108,42)" fg:x="175" fg:w="1"/><text x="14.5008%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.2508%" y="517" width="0.0814%" height="15" fill="rgb(215,150,50)" fg:x="175" fg:w="1"/><text x="14.5008%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="14.5765%" y="453" width="0.0814%" height="15" fill="rgb(233,212,5)" fg:x="179" fg:w="1"/><text x="14.8265%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="14.4951%" y="469" width="0.2443%" height="15" fill="rgb(245,80,22)" fg:x="178" fg:w="3"/><text x="14.7451%" y="479.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="14.6580%" y="453" width="0.0814%" height="15" fill="rgb(238,129,16)" fg:x="180" fg:w="1"/><text x="14.9080%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="14.4137%" y="485" width="0.4072%" height="15" fill="rgb(240,19,0)" fg:x="177" fg:w="5"/><text x="14.6637%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="14.7394%" y="469" width="0.0814%" height="15" fill="rgb(232,42,35)" fg:x="181" fg:w="1"/><text x="14.9894%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="14.7394%" y="453" width="0.0814%" height="15" fill="rgb(223,130,24)" fg:x="181" fg:w="1"/><text x="14.9894%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="14.4137%" y="549" width="0.4886%" height="15" fill="rgb(237,16,22)" fg:x="177" fg:w="6"/><text x="14.6637%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="14.4137%" y="533" width="0.4886%" height="15" fill="rgb(248,192,20)" fg:x="177" fg:w="6"/><text x="14.6637%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.49%)</title><rect x="14.4137%" y="517" width="0.4886%" height="15" fill="rgb(233,167,2)" fg:x="177" fg:w="6"/><text x="14.6637%" y="527.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.49%)</title><rect x="14.4137%" y="501" width="0.4886%" height="15" fill="rgb(252,71,44)" fg:x="177" fg:w="6"/><text x="14.6637%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="14.8208%" y="485" width="0.0814%" height="15" fill="rgb(238,37,47)" fg:x="182" fg:w="1"/><text x="15.0708%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="14.8208%" y="469" width="0.0814%" height="15" fill="rgb(214,202,54)" fg:x="182" fg:w="1"/><text x="15.0708%" y="479.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="14.8208%" y="453" width="0.0814%" height="15" fill="rgb(254,165,40)" fg:x="182" fg:w="1"/><text x="15.0708%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.8208%" y="437" width="0.0814%" height="15" fill="rgb(246,173,38)" fg:x="182" fg:w="1"/><text x="15.0708%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.8208%" y="421" width="0.0814%" height="15" fill="rgb(215,3,27)" fg:x="182" fg:w="1"/><text x="15.0708%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="14.9023%" y="533" width="0.1629%" height="15" fill="rgb(239,169,51)" fg:x="183" fg:w="2"/><text x="15.1523%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="14.9023%" y="517" width="0.1629%" height="15" fill="rgb(212,5,25)" fg:x="183" fg:w="2"/><text x="15.1523%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="15.3094%" y="501" width="0.0814%" height="15" fill="rgb(243,45,17)" fg:x="188" fg:w="1"/><text x="15.5594%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.3909%" y="469" width="0.0814%" height="15" fill="rgb(242,97,9)" fg:x="189" fg:w="1"/><text x="15.6409%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="15.3909%" y="501" width="0.1629%" height="15" fill="rgb(228,71,31)" fg:x="189" fg:w="2"/><text x="15.6409%" y="511.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="15.3909%" y="485" width="0.1629%" height="15" fill="rgb(252,184,16)" fg:x="189" fg:w="2"/><text x="15.6409%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4723%" y="469" width="0.0814%" height="15" fill="rgb(236,169,46)" fg:x="190" fg:w="1"/><text x="15.7223%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="15.7166%" y="485" width="0.2443%" height="15" fill="rgb(207,17,47)" fg:x="193" fg:w="3"/><text x="15.9666%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (34 samples, 2.77%)</title><rect x="15.9609%" y="485" width="2.7687%" height="15" fill="rgb(206,201,28)" fg:x="196" fg:w="34"/><text x="16.2109%" y="495.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (34 samples, 2.77%)</title><rect x="15.9609%" y="469" width="2.7687%" height="15" fill="rgb(224,184,23)" fg:x="196" fg:w="34"/><text x="16.2109%" y="479.50">co..</text></g><g><title>__libc_free (4 samples, 0.33%)</title><rect x="18.4039%" y="453" width="0.3257%" height="15" fill="rgb(208,139,48)" fg:x="226" fg:w="4"/><text x="18.6539%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="18.7296%" y="469" width="0.0814%" height="15" fill="rgb(208,130,10)" fg:x="230" fg:w="1"/><text x="18.9796%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="18.7296%" y="453" width="0.0814%" height="15" fill="rgb(211,213,45)" fg:x="230" fg:w="1"/><text x="18.9796%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.7296%" y="437" width="0.0814%" height="15" fill="rgb(235,100,30)" fg:x="230" fg:w="1"/><text x="18.9796%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="18.7296%" y="485" width="0.3257%" height="15" fill="rgb(206,144,31)" fg:x="230" fg:w="4"/><text x="18.9796%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="18.8111%" y="469" width="0.2443%" height="15" fill="rgb(224,200,26)" fg:x="231" fg:w="3"/><text x="19.0611%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="18.9739%" y="453" width="0.0814%" height="15" fill="rgb(247,104,53)" fg:x="233" fg:w="1"/><text x="19.2239%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.9739%" y="437" width="0.0814%" height="15" fill="rgb(220,14,17)" fg:x="233" fg:w="1"/><text x="19.2239%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.9739%" y="421" width="0.0814%" height="15" fill="rgb(230,140,40)" fg:x="233" fg:w="1"/><text x="19.2239%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9739%" y="405" width="0.0814%" height="15" fill="rgb(229,2,41)" fg:x="233" fg:w="1"/><text x="19.2239%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="19.0554%" y="485" width="0.1629%" height="15" fill="rgb(232,89,16)" fg:x="234" fg:w="2"/><text x="19.3054%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="19.0554%" y="469" width="0.1629%" height="15" fill="rgb(247,59,52)" fg:x="234" fg:w="2"/><text x="19.3054%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="19.0554%" y="453" width="0.1629%" height="15" fill="rgb(226,110,21)" fg:x="234" fg:w="2"/><text x="19.3054%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="19.0554%" y="437" width="0.1629%" height="15" fill="rgb(224,176,43)" fg:x="234" fg:w="2"/><text x="19.3054%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="19.0554%" y="421" width="0.1629%" height="15" fill="rgb(221,73,6)" fg:x="234" fg:w="2"/><text x="19.3054%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="19.0554%" y="405" width="0.1629%" height="15" fill="rgb(232,78,19)" fg:x="234" fg:w="2"/><text x="19.3054%" y="415.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.8697%" y="421" width="0.0814%" height="15" fill="rgb(233,112,48)" fg:x="244" fg:w="1"/><text x="20.1197%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="19.9511%" y="421" width="0.0814%" height="15" fill="rgb(243,131,47)" fg:x="245" fg:w="1"/><text x="20.2011%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.9511%" y="405" width="0.0814%" height="15" fill="rgb(226,51,1)" fg:x="245" fg:w="1"/><text x="20.2011%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.9511%" y="389" width="0.0814%" height="15" fill="rgb(247,58,7)" fg:x="245" fg:w="1"/><text x="20.2011%" y="399.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="19.9511%" y="373" width="0.0814%" height="15" fill="rgb(209,7,32)" fg:x="245" fg:w="1"/><text x="20.2011%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.0326%" y="389" width="0.0814%" height="15" fill="rgb(209,39,41)" fg:x="246" fg:w="1"/><text x="20.2826%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.0326%" y="373" width="0.0814%" height="15" fill="rgb(226,182,46)" fg:x="246" fg:w="1"/><text x="20.2826%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0326%" y="357" width="0.0814%" height="15" fill="rgb(230,219,10)" fg:x="246" fg:w="1"/><text x="20.2826%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1140%" y="373" width="0.0814%" height="15" fill="rgb(227,175,30)" fg:x="247" fg:w="1"/><text x="20.3640%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="20.0326%" y="421" width="0.2443%" height="15" fill="rgb(217,2,50)" fg:x="246" fg:w="3"/><text x="20.2826%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="20.0326%" y="405" width="0.2443%" height="15" fill="rgb(229,160,0)" fg:x="246" fg:w="3"/><text x="20.2826%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="20.1140%" y="389" width="0.1629%" height="15" fill="rgb(207,78,37)" fg:x="247" fg:w="2"/><text x="20.3640%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="20.1954%" y="373" width="0.0814%" height="15" fill="rgb(225,57,0)" fg:x="248" fg:w="1"/><text x="20.4454%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.1954%" y="357" width="0.0814%" height="15" fill="rgb(232,154,2)" fg:x="248" fg:w="1"/><text x="20.4454%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.1954%" y="341" width="0.0814%" height="15" fill="rgb(241,212,25)" fg:x="248" fg:w="1"/><text x="20.4454%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="20.2769%" y="421" width="0.0814%" height="15" fill="rgb(226,69,20)" fg:x="249" fg:w="1"/><text x="20.5269%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="20.2769%" y="405" width="0.0814%" height="15" fill="rgb(247,184,54)" fg:x="249" fg:w="1"/><text x="20.5269%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="20.2769%" y="389" width="0.0814%" height="15" fill="rgb(210,145,0)" fg:x="249" fg:w="1"/><text x="20.5269%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (106 samples, 8.63%)</title><rect x="20.3583%" y="389" width="8.6319%" height="15" fill="rgb(253,82,12)" fg:x="250" fg:w="106"/><text x="20.6083%" y="399.50">alloc::vec::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (107 samples, 8.71%)</title><rect x="20.3583%" y="421" width="8.7134%" height="15" fill="rgb(245,42,11)" fg:x="250" fg:w="107"/><text x="20.6083%" y="431.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (107 samples, 8.71%)</title><rect x="20.3583%" y="405" width="8.7134%" height="15" fill="rgb(219,147,32)" fg:x="250" fg:w="107"/><text x="20.6083%" y="415.50">regex_automa..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="28.9902%" y="389" width="0.0814%" height="15" fill="rgb(246,12,7)" fg:x="356" fg:w="1"/><text x="29.2402%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 10.26%)</title><rect x="19.2182%" y="469" width="10.2606%" height="15" fill="rgb(243,50,9)" fg:x="236" fg:w="126"/><text x="19.4682%" y="479.50">&lt;core::iter::ad..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (126 samples, 10.26%)</title><rect x="19.2182%" y="453" width="10.2606%" height="15" fill="rgb(219,149,6)" fg:x="236" fg:w="126"/><text x="19.4682%" y="463.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (126 samples, 10.26%)</title><rect x="19.2182%" y="437" width="10.2606%" height="15" fill="rgb(241,51,42)" fg:x="236" fg:w="126"/><text x="19.4682%" y="447.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="29.0717%" y="421" width="0.4072%" height="15" fill="rgb(226,128,27)" fg:x="357" fg:w="5"/><text x="29.3217%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.3974%" y="405" width="0.0814%" height="15" fill="rgb(244,144,4)" fg:x="361" fg:w="1"/><text x="29.6474%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5603%" y="453" width="0.0814%" height="15" fill="rgb(221,4,13)" fg:x="363" fg:w="1"/><text x="29.8103%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="29.6417%" y="453" width="0.4072%" height="15" fill="rgb(208,170,28)" fg:x="364" fg:w="5"/><text x="29.8917%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="29.8046%" y="437" width="0.2443%" height="15" fill="rgb(226,131,13)" fg:x="366" fg:w="3"/><text x="30.0546%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="29.8046%" y="421" width="0.2443%" height="15" fill="rgb(215,72,41)" fg:x="366" fg:w="3"/><text x="30.0546%" y="431.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="29.8046%" y="405" width="0.2443%" height="15" fill="rgb(243,108,20)" fg:x="366" fg:w="3"/><text x="30.0546%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.3746%" y="437" width="0.0814%" height="15" fill="rgb(230,189,17)" fg:x="373" fg:w="1"/><text x="30.6246%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.3746%" y="421" width="0.0814%" height="15" fill="rgb(220,50,17)" fg:x="373" fg:w="1"/><text x="30.6246%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3746%" y="405" width="0.0814%" height="15" fill="rgb(248,152,48)" fg:x="373" fg:w="1"/><text x="30.6246%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.49%)</title><rect x="30.0489%" y="453" width="0.4886%" height="15" fill="rgb(244,91,11)" fg:x="369" fg:w="6"/><text x="30.2989%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.4560%" y="437" width="0.0814%" height="15" fill="rgb(220,157,5)" fg:x="374" fg:w="1"/><text x="30.7060%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.14%)</title><rect x="29.4788%" y="469" width="1.1401%" height="15" fill="rgb(253,137,8)" fg:x="362" fg:w="14"/><text x="29.7288%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="30.5375%" y="453" width="0.0814%" height="15" fill="rgb(217,137,51)" fg:x="375" fg:w="1"/><text x="30.7875%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="30.6189%" y="469" width="0.1629%" height="15" fill="rgb(218,209,53)" fg:x="376" fg:w="2"/><text x="30.8689%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="30.7003%" y="453" width="0.0814%" height="15" fill="rgb(249,137,25)" fg:x="377" fg:w="1"/><text x="30.9503%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="30.7003%" y="437" width="0.0814%" height="15" fill="rgb(239,155,26)" fg:x="377" fg:w="1"/><text x="30.9503%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::new (188 samples, 15.31%)</title><rect x="15.5537%" y="501" width="15.3094%" height="15" fill="rgb(227,85,46)" fg:x="191" fg:w="188"/><text x="15.8037%" y="511.50">regex_automata::meta::s..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (143 samples, 11.64%)</title><rect x="19.2182%" y="485" width="11.6450%" height="15" fill="rgb(251,107,43)" fg:x="236" fg:w="143"/><text x="19.4682%" y="495.50">regex_automata::n..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="30.7818%" y="469" width="0.0814%" height="15" fill="rgb(234,170,33)" fg:x="378" fg:w="1"/><text x="31.0318%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="30.8632%" y="469" width="0.4886%" height="15" fill="rgb(206,29,35)" fg:x="379" fg:w="6"/><text x="31.1132%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.49%)</title><rect x="30.8632%" y="453" width="0.4886%" height="15" fill="rgb(227,138,25)" fg:x="379" fg:w="6"/><text x="31.1132%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="30.8632%" y="437" width="0.4886%" height="15" fill="rgb(249,131,35)" fg:x="379" fg:w="6"/><text x="31.1132%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="30.8632%" y="421" width="0.4886%" height="15" fill="rgb(239,6,40)" fg:x="379" fg:w="6"/><text x="31.1132%" y="431.50"></text></g><g><title>__libc_malloc (6 samples, 0.49%)</title><rect x="30.8632%" y="405" width="0.4886%" height="15" fill="rgb(246,136,47)" fg:x="379" fg:w="6"/><text x="31.1132%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="30.8632%" y="501" width="0.5700%" height="15" fill="rgb(253,58,26)" fg:x="379" fg:w="7"/><text x="31.1132%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="30.8632%" y="485" width="0.5700%" height="15" fill="rgb(237,141,10)" fg:x="379" fg:w="7"/><text x="31.1132%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="31.3518%" y="469" width="0.0814%" height="15" fill="rgb(234,156,12)" fg:x="385" fg:w="1"/><text x="31.6018%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.4332%" y="453" width="0.0814%" height="15" fill="rgb(243,224,36)" fg:x="386" fg:w="1"/><text x="31.6832%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.4332%" y="437" width="0.0814%" height="15" fill="rgb(205,229,51)" fg:x="386" fg:w="1"/><text x="31.6832%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.4332%" y="421" width="0.0814%" height="15" fill="rgb(223,189,4)" fg:x="386" fg:w="1"/><text x="31.6832%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="31.5147%" y="453" width="0.0814%" height="15" fill="rgb(249,167,54)" fg:x="387" fg:w="1"/><text x="31.7647%" y="463.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (206 samples, 16.78%)</title><rect x="14.9023%" y="549" width="16.7752%" height="15" fill="rgb(218,34,28)" fg:x="183" fg:w="206"/><text x="15.1523%" y="559.50">&lt;regex::regex::string::Reg..</text></g><g><title>regex::builders::Builder::build_one_string (204 samples, 16.61%)</title><rect x="15.0651%" y="533" width="16.6124%" height="15" fill="rgb(232,109,42)" fg:x="185" fg:w="204"/><text x="15.3151%" y="543.50">regex::builders::Builder::..</text></g><g><title>regex_automata::meta::regex::Builder::build (204 samples, 16.61%)</title><rect x="15.0651%" y="517" width="16.6124%" height="15" fill="rgb(248,214,46)" fg:x="185" fg:w="204"/><text x="15.3151%" y="527.50">regex_automata::meta::rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="31.4332%" y="501" width="0.2443%" height="15" fill="rgb(244,216,40)" fg:x="386" fg:w="3"/><text x="31.6832%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="31.4332%" y="485" width="0.2443%" height="15" fill="rgb(231,226,31)" fg:x="386" fg:w="3"/><text x="31.6832%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="31.4332%" y="469" width="0.2443%" height="15" fill="rgb(238,38,43)" fg:x="386" fg:w="3"/><text x="31.6832%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="31.5961%" y="453" width="0.0814%" height="15" fill="rgb(208,88,43)" fg:x="388" fg:w="1"/><text x="31.8461%" y="463.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="31.5961%" y="437" width="0.0814%" height="15" fill="rgb(205,136,37)" fg:x="388" fg:w="1"/><text x="31.8461%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.6775%" y="517" width="0.0814%" height="15" fill="rgb(237,34,14)" fg:x="389" fg:w="1"/><text x="31.9275%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="31.6775%" y="501" width="0.0814%" height="15" fill="rgb(236,193,44)" fg:x="389" fg:w="1"/><text x="31.9275%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.6775%" y="485" width="0.0814%" height="15" fill="rgb(231,48,10)" fg:x="389" fg:w="1"/><text x="31.9275%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.6775%" y="469" width="0.0814%" height="15" fill="rgb(213,141,34)" fg:x="389" fg:w="1"/><text x="31.9275%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="31.6775%" y="549" width="0.1629%" height="15" fill="rgb(249,130,34)" fg:x="389" fg:w="2"/><text x="31.9275%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="31.6775%" y="533" width="0.1629%" height="15" fill="rgb(219,42,41)" fg:x="389" fg:w="2"/><text x="31.9275%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="31.7590%" y="517" width="0.0814%" height="15" fill="rgb(224,100,54)" fg:x="390" fg:w="1"/><text x="32.0090%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.7590%" y="501" width="0.0814%" height="15" fill="rgb(229,200,27)" fg:x="390" fg:w="1"/><text x="32.0090%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6547%" y="437" width="0.0814%" height="15" fill="rgb(217,118,10)" fg:x="401" fg:w="1"/><text x="32.9047%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.6547%" y="469" width="0.1629%" height="15" fill="rgb(206,22,3)" fg:x="401" fg:w="2"/><text x="32.9047%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.6547%" y="453" width="0.1629%" height="15" fill="rgb(232,163,46)" fg:x="401" fg:w="2"/><text x="32.9047%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.7362%" y="437" width="0.0814%" height="15" fill="rgb(206,95,13)" fg:x="402" fg:w="1"/><text x="32.9862%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="32.8176%" y="453" width="0.1629%" height="15" fill="rgb(253,154,18)" fg:x="403" fg:w="2"/><text x="33.0676%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.8990%" y="437" width="0.0814%" height="15" fill="rgb(219,32,23)" fg:x="404" fg:w="1"/><text x="33.1490%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.33%)</title><rect x="32.8176%" y="469" width="0.3257%" height="15" fill="rgb(230,191,45)" fg:x="403" fg:w="4"/><text x="33.0676%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.9805%" y="453" width="0.1629%" height="15" fill="rgb(229,64,36)" fg:x="405" fg:w="2"/><text x="33.2305%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="33.0619%" y="437" width="0.0814%" height="15" fill="rgb(205,129,25)" fg:x="406" fg:w="1"/><text x="33.3119%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0619%" y="421" width="0.0814%" height="15" fill="rgb(254,112,7)" fg:x="406" fg:w="1"/><text x="33.3119%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.30%)</title><rect x="32.0033%" y="485" width="1.3029%" height="15" fill="rgb(226,53,48)" fg:x="393" fg:w="16"/><text x="32.2533%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="33.1433%" y="469" width="0.1629%" height="15" fill="rgb(214,153,38)" fg:x="407" fg:w="2"/><text x="33.3933%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.47%)</title><rect x="32.0033%" y="501" width="1.4658%" height="15" fill="rgb(243,101,7)" fg:x="393" fg:w="18"/><text x="32.2533%" y="511.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="33.3062%" y="485" width="0.1629%" height="15" fill="rgb(240,140,22)" fg:x="409" fg:w="2"/><text x="33.5562%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.3062%" y="469" width="0.1629%" height="15" fill="rgb(235,114,2)" fg:x="409" fg:w="2"/><text x="33.5562%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.3062%" y="453" width="0.1629%" height="15" fill="rgb(242,59,12)" fg:x="409" fg:w="2"/><text x="33.5562%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.3062%" y="437" width="0.1629%" height="15" fill="rgb(252,134,9)" fg:x="409" fg:w="2"/><text x="33.5562%" y="447.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (235 samples, 19.14%)</title><rect x="14.4137%" y="565" width="19.1368%" height="15" fill="rgb(236,4,44)" fg:x="177" fg:w="235"/><text x="14.6637%" y="575.50">indefinite::helper::Helper::ge..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.71%)</title><rect x="31.8404%" y="549" width="1.7101%" height="15" fill="rgb(254,172,41)" fg:x="391" fg:w="21"/><text x="32.0904%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.71%)</title><rect x="31.8404%" y="533" width="1.7101%" height="15" fill="rgb(244,63,20)" fg:x="391" fg:w="21"/><text x="32.0904%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.71%)</title><rect x="31.8404%" y="517" width="1.7101%" height="15" fill="rgb(250,73,31)" fg:x="391" fg:w="21"/><text x="32.0904%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="33.4691%" y="501" width="0.0814%" height="15" fill="rgb(241,38,36)" fg:x="411" fg:w="1"/><text x="33.7191%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="33.4691%" y="485" width="0.0814%" height="15" fill="rgb(245,211,2)" fg:x="411" fg:w="1"/><text x="33.7191%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.4691%" y="469" width="0.0814%" height="15" fill="rgb(206,120,28)" fg:x="411" fg:w="1"/><text x="33.7191%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.4691%" y="453" width="0.0814%" height="15" fill="rgb(211,59,34)" fg:x="411" fg:w="1"/><text x="33.7191%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.7948%" y="469" width="0.0814%" height="15" fill="rgb(233,168,5)" fg:x="415" fg:w="1"/><text x="34.0448%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.8762%" y="469" width="0.0814%" height="15" fill="rgb(234,33,13)" fg:x="416" fg:w="1"/><text x="34.1262%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.9577%" y="469" width="0.0814%" height="15" fill="rgb(231,150,26)" fg:x="417" fg:w="1"/><text x="34.2077%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="34.0391%" y="469" width="0.0814%" height="15" fill="rgb(217,191,4)" fg:x="418" fg:w="1"/><text x="34.2891%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="33.7948%" y="501" width="0.4072%" height="15" fill="rgb(246,198,38)" fg:x="415" fg:w="5"/><text x="34.0448%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="33.7948%" y="485" width="0.4072%" height="15" fill="rgb(245,64,37)" fg:x="415" fg:w="5"/><text x="34.0448%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="34.1205%" y="469" width="0.0814%" height="15" fill="rgb(250,30,36)" fg:x="419" fg:w="1"/><text x="34.3705%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.2020%" y="501" width="0.0814%" height="15" fill="rgb(217,86,53)" fg:x="420" fg:w="1"/><text x="34.4520%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.2020%" y="485" width="0.0814%" height="15" fill="rgb(228,157,16)" fg:x="420" fg:w="1"/><text x="34.4520%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.2020%" y="469" width="0.0814%" height="15" fill="rgb(217,59,31)" fg:x="420" fg:w="1"/><text x="34.4520%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="34.2834%" y="501" width="0.1629%" height="15" fill="rgb(237,138,41)" fg:x="421" fg:w="2"/><text x="34.5334%" y="511.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="34.2834%" y="485" width="0.1629%" height="15" fill="rgb(227,91,49)" fg:x="421" fg:w="2"/><text x="34.5334%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.3648%" y="469" width="0.0814%" height="15" fill="rgb(247,21,44)" fg:x="422" fg:w="1"/><text x="34.6148%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.3648%" y="453" width="0.0814%" height="15" fill="rgb(219,210,51)" fg:x="422" fg:w="1"/><text x="34.6148%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.3648%" y="437" width="0.0814%" height="15" fill="rgb(209,140,6)" fg:x="422" fg:w="1"/><text x="34.6148%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.3648%" y="421" width="0.0814%" height="15" fill="rgb(221,188,24)" fg:x="422" fg:w="1"/><text x="34.6148%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="34.4463%" y="501" width="0.0814%" height="15" fill="rgb(232,154,20)" fg:x="423" fg:w="1"/><text x="34.6963%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.4463%" y="485" width="0.0814%" height="15" fill="rgb(244,137,50)" fg:x="423" fg:w="1"/><text x="34.6963%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (28 samples, 2.28%)</title><rect x="35.0163%" y="485" width="2.2801%" height="15" fill="rgb(225,185,43)" fg:x="430" fg:w="28"/><text x="35.2663%" y="495.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (28 samples, 2.28%)</title><rect x="35.0163%" y="469" width="2.2801%" height="15" fill="rgb(213,205,38)" fg:x="430" fg:w="28"/><text x="35.2663%" y="479.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.2150%" y="453" width="0.0814%" height="15" fill="rgb(236,73,12)" fg:x="457" fg:w="1"/><text x="37.4650%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="37.2964%" y="485" width="0.0814%" height="15" fill="rgb(235,219,13)" fg:x="458" fg:w="1"/><text x="37.5464%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="37.2964%" y="469" width="0.0814%" height="15" fill="rgb(218,59,36)" fg:x="458" fg:w="1"/><text x="37.5464%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="37.2964%" y="453" width="0.0814%" height="15" fill="rgb(205,110,39)" fg:x="458" fg:w="1"/><text x="37.5464%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="37.4593%" y="469" width="0.2443%" height="15" fill="rgb(218,206,42)" fg:x="460" fg:w="3"/><text x="37.7093%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="37.6221%" y="453" width="0.0814%" height="15" fill="rgb(248,125,24)" fg:x="462" fg:w="1"/><text x="37.8721%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.6221%" y="437" width="0.0814%" height="15" fill="rgb(242,28,27)" fg:x="462" fg:w="1"/><text x="37.8721%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.6221%" y="421" width="0.0814%" height="15" fill="rgb(216,228,15)" fg:x="462" fg:w="1"/><text x="37.8721%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.6221%" y="405" width="0.0814%" height="15" fill="rgb(235,116,46)" fg:x="462" fg:w="1"/><text x="37.8721%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="37.3779%" y="485" width="0.4072%" height="15" fill="rgb(224,18,32)" fg:x="459" fg:w="5"/><text x="37.6279%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="37.7036%" y="469" width="0.0814%" height="15" fill="rgb(252,5,12)" fg:x="463" fg:w="1"/><text x="37.9536%" y="479.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="38.0293%" y="453" width="0.0814%" height="15" fill="rgb(251,36,5)" fg:x="467" fg:w="1"/><text x="38.2793%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.0293%" y="437" width="0.0814%" height="15" fill="rgb(217,53,14)" fg:x="467" fg:w="1"/><text x="38.2793%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.0293%" y="421" width="0.0814%" height="15" fill="rgb(215,86,45)" fg:x="467" fg:w="1"/><text x="38.2793%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.41%)</title><rect x="38.5993%" y="421" width="0.4072%" height="15" fill="rgb(242,169,11)" fg:x="474" fg:w="5"/><text x="38.8493%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="38.5993%" y="405" width="0.4072%" height="15" fill="rgb(211,213,45)" fg:x="474" fg:w="5"/><text x="38.8493%" y="415.50"></text></g><g><title>realloc (5 samples, 0.41%)</title><rect x="38.5993%" y="389" width="0.4072%" height="15" fill="rgb(205,88,11)" fg:x="474" fg:w="5"/><text x="38.8493%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (12 samples, 0.98%)</title><rect x="38.1107%" y="453" width="0.9772%" height="15" fill="rgb(252,69,26)" fg:x="468" fg:w="12"/><text x="38.3607%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (10 samples, 0.81%)</title><rect x="38.2736%" y="437" width="0.8143%" height="15" fill="rgb(246,123,37)" fg:x="470" fg:w="10"/><text x="38.5236%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.0065%" y="421" width="0.0814%" height="15" fill="rgb(212,205,5)" fg:x="479" fg:w="1"/><text x="39.2565%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.0065%" y="405" width="0.0814%" height="15" fill="rgb(253,148,0)" fg:x="479" fg:w="1"/><text x="39.2565%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.0065%" y="389" width="0.0814%" height="15" fill="rgb(239,22,4)" fg:x="479" fg:w="1"/><text x="39.2565%" y="399.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.49%)</title><rect x="39.0879%" y="437" width="0.4886%" height="15" fill="rgb(226,26,53)" fg:x="480" fg:w="6"/><text x="39.3379%" y="447.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.49%)</title><rect x="39.0879%" y="421" width="0.4886%" height="15" fill="rgb(225,229,45)" fg:x="480" fg:w="6"/><text x="39.3379%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (23 samples, 1.87%)</title><rect x="37.7850%" y="469" width="1.8730%" height="15" fill="rgb(220,60,37)" fg:x="464" fg:w="23"/><text x="38.0350%" y="479.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.57%)</title><rect x="39.0879%" y="453" width="0.5700%" height="15" fill="rgb(217,180,35)" fg:x="480" fg:w="7"/><text x="39.3379%" y="463.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="39.5765%" y="437" width="0.0814%" height="15" fill="rgb(229,7,53)" fg:x="486" fg:w="1"/><text x="39.8265%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (24 samples, 1.95%)</title><rect x="37.7850%" y="485" width="1.9544%" height="15" fill="rgb(254,137,3)" fg:x="464" fg:w="24"/><text x="38.0350%" y="495.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.6580%" y="469" width="0.0814%" height="15" fill="rgb(215,140,41)" fg:x="487" fg:w="1"/><text x="39.9080%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.6580%" y="453" width="0.0814%" height="15" fill="rgb(250,80,15)" fg:x="487" fg:w="1"/><text x="39.9080%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="39.6580%" y="437" width="0.0814%" height="15" fill="rgb(252,191,6)" fg:x="487" fg:w="1"/><text x="39.9080%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.6580%" y="421" width="0.0814%" height="15" fill="rgb(246,217,18)" fg:x="487" fg:w="1"/><text x="39.9080%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.6580%" y="405" width="0.0814%" height="15" fill="rgb(223,93,7)" fg:x="487" fg:w="1"/><text x="39.9080%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6580%" y="389" width="0.0814%" height="15" fill="rgb(225,55,52)" fg:x="487" fg:w="1"/><text x="39.9080%" y="399.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.08%)</title><rect x="39.7394%" y="453" width="0.0814%" height="15" fill="rgb(240,31,24)" fg:x="488" fg:w="1"/><text x="39.9894%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="39.7394%" y="485" width="0.1629%" height="15" fill="rgb(205,56,52)" fg:x="488" fg:w="2"/><text x="39.9894%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="39.7394%" y="469" width="0.1629%" height="15" fill="rgb(246,146,12)" fg:x="488" fg:w="2"/><text x="39.9894%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.8208%" y="453" width="0.0814%" height="15" fill="rgb(239,84,36)" fg:x="489" fg:w="1"/><text x="40.0708%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="39.8208%" y="437" width="0.0814%" height="15" fill="rgb(207,41,40)" fg:x="489" fg:w="1"/><text x="40.0708%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.8208%" y="421" width="0.0814%" height="15" fill="rgb(241,179,25)" fg:x="489" fg:w="1"/><text x="40.0708%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.8208%" y="405" width="0.0814%" height="15" fill="rgb(210,0,34)" fg:x="489" fg:w="1"/><text x="40.0708%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.0651%" y="421" width="0.0814%" height="15" fill="rgb(225,217,29)" fg:x="492" fg:w="1"/><text x="40.3151%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="40.1466%" y="421" width="0.1629%" height="15" fill="rgb(216,191,38)" fg:x="493" fg:w="2"/><text x="40.3966%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="40.3094%" y="405" width="0.0814%" height="15" fill="rgb(232,140,52)" fg:x="495" fg:w="1"/><text x="40.5594%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.3909%" y="389" width="0.0814%" height="15" fill="rgb(223,158,51)" fg:x="496" fg:w="1"/><text x="40.6409%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.3909%" y="373" width="0.0814%" height="15" fill="rgb(235,29,51)" fg:x="496" fg:w="1"/><text x="40.6409%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.3909%" y="357" width="0.0814%" height="15" fill="rgb(215,181,18)" fg:x="496" fg:w="1"/><text x="40.6409%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.3909%" y="341" width="0.0814%" height="15" fill="rgb(227,125,34)" fg:x="496" fg:w="1"/><text x="40.6409%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="41.6124%" y="373" width="0.2443%" height="15" fill="rgb(230,197,49)" fg:x="511" fg:w="3"/><text x="41.8624%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.8567%" y="373" width="0.0814%" height="15" fill="rgb(239,141,16)" fg:x="514" fg:w="1"/><text x="42.1067%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.41%)</title><rect x="41.9381%" y="373" width="0.4072%" height="15" fill="rgb(225,105,43)" fg:x="515" fg:w="5"/><text x="42.1881%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.1824%" y="357" width="0.1629%" height="15" fill="rgb(214,131,14)" fg:x="518" fg:w="2"/><text x="42.4324%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.1824%" y="341" width="0.1629%" height="15" fill="rgb(229,177,11)" fg:x="518" fg:w="2"/><text x="42.4324%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.1824%" y="325" width="0.1629%" height="15" fill="rgb(231,180,14)" fg:x="518" fg:w="2"/><text x="42.4324%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="42.3453%" y="373" width="0.1629%" height="15" fill="rgb(232,88,2)" fg:x="520" fg:w="2"/><text x="42.5953%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.3453%" y="357" width="0.1629%" height="15" fill="rgb(205,220,8)" fg:x="520" fg:w="2"/><text x="42.5953%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.3453%" y="341" width="0.1629%" height="15" fill="rgb(225,23,53)" fg:x="520" fg:w="2"/><text x="42.5953%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.3453%" y="325" width="0.1629%" height="15" fill="rgb(213,62,29)" fg:x="520" fg:w="2"/><text x="42.5953%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="42.6710%" y="309" width="0.1629%" height="15" fill="rgb(227,75,7)" fg:x="524" fg:w="2"/><text x="42.9210%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="42.6710%" y="341" width="0.4886%" height="15" fill="rgb(207,105,14)" fg:x="524" fg:w="6"/><text x="42.9210%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="42.6710%" y="325" width="0.4886%" height="15" fill="rgb(245,62,29)" fg:x="524" fg:w="6"/><text x="42.9210%" y="335.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="42.8339%" y="309" width="0.3257%" height="15" fill="rgb(236,202,4)" fg:x="526" fg:w="4"/><text x="43.0839%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (17 samples, 1.38%)</title><rect x="42.5081%" y="373" width="1.3844%" height="15" fill="rgb(250,67,1)" fg:x="522" fg:w="17"/><text x="42.7581%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (16 samples, 1.30%)</title><rect x="42.5896%" y="357" width="1.3029%" height="15" fill="rgb(253,115,44)" fg:x="523" fg:w="16"/><text x="42.8396%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.73%)</title><rect x="43.1596%" y="341" width="0.7329%" height="15" fill="rgb(251,139,18)" fg:x="530" fg:w="9"/><text x="43.4096%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.33%)</title><rect x="43.5668%" y="325" width="0.3257%" height="15" fill="rgb(218,22,32)" fg:x="535" fg:w="4"/><text x="43.8168%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.8111%" y="309" width="0.0814%" height="15" fill="rgb(243,53,5)" fg:x="538" fg:w="1"/><text x="44.0611%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.8111%" y="293" width="0.0814%" height="15" fill="rgb(227,56,16)" fg:x="538" fg:w="1"/><text x="44.0611%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.8111%" y="277" width="0.0814%" height="15" fill="rgb(245,53,0)" fg:x="538" fg:w="1"/><text x="44.0611%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="43.8925%" y="373" width="0.0814%" height="15" fill="rgb(216,170,35)" fg:x="539" fg:w="1"/><text x="44.1425%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="43.8925%" y="357" width="0.0814%" height="15" fill="rgb(211,200,8)" fg:x="539" fg:w="1"/><text x="44.1425%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.9739%" y="357" width="0.0814%" height="15" fill="rgb(228,204,44)" fg:x="540" fg:w="1"/><text x="44.2239%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9739%" y="341" width="0.0814%" height="15" fill="rgb(214,121,17)" fg:x="540" fg:w="1"/><text x="44.2239%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.0554%" y="357" width="0.0814%" height="15" fill="rgb(233,64,38)" fg:x="541" fg:w="1"/><text x="44.3054%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.0554%" y="341" width="0.0814%" height="15" fill="rgb(253,54,19)" fg:x="541" fg:w="1"/><text x="44.3054%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.0554%" y="325" width="0.0814%" height="15" fill="rgb(253,94,18)" fg:x="541" fg:w="1"/><text x="44.3054%" y="335.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="44.0554%" y="309" width="0.0814%" height="15" fill="rgb(227,57,52)" fg:x="541" fg:w="1"/><text x="44.3054%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (121 samples, 9.85%)</title><rect x="43.9739%" y="373" width="9.8534%" height="15" fill="rgb(230,228,50)" fg:x="540" fg:w="121"/><text x="44.2239%" y="383.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (119 samples, 9.69%)</title><rect x="44.1368%" y="357" width="9.6906%" height="15" fill="rgb(217,205,27)" fg:x="542" fg:w="119"/><text x="44.3868%" y="367.50">regex_automata..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (119 samples, 9.69%)</title><rect x="44.1368%" y="341" width="9.6906%" height="15" fill="rgb(252,71,50)" fg:x="542" fg:w="119"/><text x="44.3868%" y="351.50">alloc::vec::Ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="53.8274%" y="373" width="0.3257%" height="15" fill="rgb(209,86,4)" fg:x="661" fg:w="4"/><text x="54.0774%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.0717%" y="357" width="0.0814%" height="15" fill="rgb(229,94,0)" fg:x="664" fg:w="1"/><text x="54.3217%" y="367.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (5 samples, 0.41%)</title><rect x="54.1531%" y="373" width="0.4072%" height="15" fill="rgb(252,223,21)" fg:x="665" fg:w="5"/><text x="54.4031%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (183 samples, 14.90%)</title><rect x="39.9837%" y="469" width="14.9023%" height="15" fill="rgb(230,210,4)" fg:x="491" fg:w="183"/><text x="40.2337%" y="479.50">&lt;core::iter::adapters::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (183 samples, 14.90%)</title><rect x="39.9837%" y="453" width="14.9023%" height="15" fill="rgb(240,149,38)" fg:x="491" fg:w="183"/><text x="40.2337%" y="463.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (183 samples, 14.90%)</title><rect x="39.9837%" y="437" width="14.9023%" height="15" fill="rgb(254,105,20)" fg:x="491" fg:w="183"/><text x="40.2337%" y="447.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (179 samples, 14.58%)</title><rect x="40.3094%" y="421" width="14.5765%" height="15" fill="rgb(253,87,46)" fg:x="495" fg:w="179"/><text x="40.5594%" y="431.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (178 samples, 14.50%)</title><rect x="40.3909%" y="405" width="14.4951%" height="15" fill="rgb(253,116,33)" fg:x="496" fg:w="178"/><text x="40.6409%" y="415.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (177 samples, 14.41%)</title><rect x="40.4723%" y="389" width="14.4137%" height="15" fill="rgb(229,198,5)" fg:x="497" fg:w="177"/><text x="40.7223%" y="399.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.33%)</title><rect x="54.5603%" y="373" width="0.3257%" height="15" fill="rgb(242,38,37)" fg:x="670" fg:w="4"/><text x="54.8103%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="54.7231%" y="357" width="0.1629%" height="15" fill="rgb(242,69,53)" fg:x="672" fg:w="2"/><text x="54.9731%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.7231%" y="341" width="0.1629%" height="15" fill="rgb(249,80,16)" fg:x="672" fg:w="2"/><text x="54.9731%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="54.7231%" y="325" width="0.1629%" height="15" fill="rgb(206,128,11)" fg:x="672" fg:w="2"/><text x="54.9731%" y="335.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="54.9674%" y="453" width="0.0814%" height="15" fill="rgb(212,35,20)" fg:x="675" fg:w="1"/><text x="55.2174%" y="463.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="55.0489%" y="453" width="0.2443%" height="15" fill="rgb(236,79,13)" fg:x="676" fg:w="3"/><text x="55.2989%" y="463.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="55.2932%" y="453" width="0.0814%" height="15" fill="rgb(233,123,3)" fg:x="679" fg:w="1"/><text x="55.5432%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="55.7818%" y="437" width="0.3257%" height="15" fill="rgb(214,93,52)" fg:x="685" fg:w="4"/><text x="56.0318%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="55.7818%" y="421" width="0.3257%" height="15" fill="rgb(251,37,40)" fg:x="685" fg:w="4"/><text x="56.0318%" y="431.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="55.7818%" y="405" width="0.3257%" height="15" fill="rgb(227,80,54)" fg:x="685" fg:w="4"/><text x="56.0318%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.81%)</title><rect x="55.3746%" y="453" width="0.8143%" height="15" fill="rgb(254,48,11)" fg:x="680" fg:w="10"/><text x="55.6246%" y="463.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="56.1075%" y="437" width="0.0814%" height="15" fill="rgb(235,193,26)" fg:x="689" fg:w="1"/><text x="56.3575%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.73%)</title><rect x="56.1889%" y="453" width="0.7329%" height="15" fill="rgb(229,99,21)" fg:x="690" fg:w="9"/><text x="56.4389%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.8404%" y="437" width="0.0814%" height="15" fill="rgb(211,140,41)" fg:x="698" fg:w="1"/><text x="57.0904%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.8404%" y="421" width="0.0814%" height="15" fill="rgb(240,227,30)" fg:x="698" fg:w="1"/><text x="57.0904%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.8404%" y="405" width="0.0814%" height="15" fill="rgb(215,224,45)" fg:x="698" fg:w="1"/><text x="57.0904%" y="415.50"></text></g><g><title>regex_automata::meta::strategy::new (276 samples, 22.48%)</title><rect x="34.5277%" y="501" width="22.4756%" height="15" fill="rgb(206,123,31)" fg:x="424" fg:w="276"/><text x="34.7777%" y="511.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (210 samples, 17.10%)</title><rect x="39.9023%" y="485" width="17.1010%" height="15" fill="rgb(210,138,16)" fg:x="490" fg:w="210"/><text x="40.1523%" y="495.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (26 samples, 2.12%)</title><rect x="54.8860%" y="469" width="2.1173%" height="15" fill="rgb(228,57,28)" fg:x="674" fg:w="26"/><text x="55.1360%" y="479.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="56.9218%" y="453" width="0.0814%" height="15" fill="rgb(242,170,10)" fg:x="699" fg:w="1"/><text x="57.1718%" y="463.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="56.9218%" y="437" width="0.0814%" height="15" fill="rgb(228,214,39)" fg:x="699" fg:w="1"/><text x="57.1718%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.9218%" y="421" width="0.0814%" height="15" fill="rgb(218,179,33)" fg:x="699" fg:w="1"/><text x="57.1718%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.9218%" y="405" width="0.0814%" height="15" fill="rgb(235,193,39)" fg:x="699" fg:w="1"/><text x="57.1718%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.9218%" y="389" width="0.0814%" height="15" fill="rgb(219,221,36)" fg:x="699" fg:w="1"/><text x="57.1718%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="57.1661%" y="469" width="0.0814%" height="15" fill="rgb(248,218,19)" fg:x="702" fg:w="1"/><text x="57.4161%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="57.3290%" y="453" width="0.0814%" height="15" fill="rgb(205,50,9)" fg:x="704" fg:w="1"/><text x="57.5790%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="57.2476%" y="469" width="0.4886%" height="15" fill="rgb(238,81,28)" fg:x="703" fg:w="6"/><text x="57.4976%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.33%)</title><rect x="57.4104%" y="453" width="0.3257%" height="15" fill="rgb(235,110,19)" fg:x="705" fg:w="4"/><text x="57.6604%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="57.4104%" y="437" width="0.3257%" height="15" fill="rgb(214,7,14)" fg:x="705" fg:w="4"/><text x="57.6604%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="57.4104%" y="421" width="0.3257%" height="15" fill="rgb(211,77,3)" fg:x="705" fg:w="4"/><text x="57.6604%" y="431.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="57.4104%" y="405" width="0.3257%" height="15" fill="rgb(229,5,9)" fg:x="705" fg:w="4"/><text x="57.6604%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="57.7362%" y="469" width="0.0814%" height="15" fill="rgb(225,90,11)" fg:x="709" fg:w="1"/><text x="57.9862%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="57.8176%" y="469" width="0.0814%" height="15" fill="rgb(242,56,8)" fg:x="710" fg:w="1"/><text x="58.0676%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="57.8176%" y="453" width="0.0814%" height="15" fill="rgb(249,212,39)" fg:x="710" fg:w="1"/><text x="58.0676%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.98%)</title><rect x="57.0033%" y="501" width="0.9772%" height="15" fill="rgb(236,90,9)" fg:x="700" fg:w="12"/><text x="57.2533%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.98%)</title><rect x="57.0033%" y="485" width="0.9772%" height="15" fill="rgb(206,88,35)" fg:x="700" fg:w="12"/><text x="57.2533%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="57.8990%" y="469" width="0.0814%" height="15" fill="rgb(205,126,30)" fg:x="711" fg:w="1"/><text x="58.1490%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.1433%" y="453" width="0.1629%" height="15" fill="rgb(230,176,12)" fg:x="714" fg:w="2"/><text x="58.3933%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.2248%" y="437" width="0.0814%" height="15" fill="rgb(243,19,9)" fg:x="715" fg:w="1"/><text x="58.4748%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="58.3062%" y="453" width="0.1629%" height="15" fill="rgb(245,171,17)" fg:x="716" fg:w="2"/><text x="58.5562%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.3876%" y="437" width="0.0814%" height="15" fill="rgb(227,52,21)" fg:x="717" fg:w="1"/><text x="58.6376%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.3876%" y="421" width="0.0814%" height="15" fill="rgb(238,69,14)" fg:x="717" fg:w="1"/><text x="58.6376%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="58.4691%" y="453" width="0.0814%" height="15" fill="rgb(241,156,39)" fg:x="718" fg:w="1"/><text x="58.7191%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.4691%" y="437" width="0.0814%" height="15" fill="rgb(212,227,28)" fg:x="718" fg:w="1"/><text x="58.7191%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.4691%" y="421" width="0.0814%" height="15" fill="rgb(209,118,27)" fg:x="718" fg:w="1"/><text x="58.7191%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.4691%" y="405" width="0.0814%" height="15" fill="rgb(226,102,5)" fg:x="718" fg:w="1"/><text x="58.7191%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.57%)</title><rect x="58.1433%" y="469" width="0.5700%" height="15" fill="rgb(223,34,3)" fg:x="714" fg:w="7"/><text x="58.3933%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="58.5505%" y="453" width="0.1629%" height="15" fill="rgb(221,81,38)" fg:x="719" fg:w="2"/><text x="58.8005%" y="463.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="58.5505%" y="437" width="0.1629%" height="15" fill="rgb(236,219,28)" fg:x="719" fg:w="2"/><text x="58.8005%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6319%" y="421" width="0.0814%" height="15" fill="rgb(213,200,14)" fg:x="720" fg:w="1"/><text x="58.8819%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.7948%" y="453" width="0.0814%" height="15" fill="rgb(240,33,19)" fg:x="722" fg:w="1"/><text x="59.0448%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.7948%" y="437" width="0.0814%" height="15" fill="rgb(233,113,27)" fg:x="722" fg:w="1"/><text x="59.0448%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.7948%" y="421" width="0.0814%" height="15" fill="rgb(220,221,18)" fg:x="722" fg:w="1"/><text x="59.0448%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="58.7134%" y="469" width="0.2443%" height="15" fill="rgb(238,92,8)" fg:x="721" fg:w="3"/><text x="58.9634%" y="479.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="58.8762%" y="453" width="0.0814%" height="15" fill="rgb(222,164,16)" fg:x="723" fg:w="1"/><text x="59.1262%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (312 samples, 25.41%)</title><rect x="33.6319%" y="517" width="25.4072%" height="15" fill="rgb(241,119,3)" fg:x="413" fg:w="312"/><text x="33.8819%" y="527.50">regex_automata::meta::regex::Builder::bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.06%)</title><rect x="57.9805%" y="501" width="1.0586%" height="15" fill="rgb(241,44,8)" fg:x="712" fg:w="13"/><text x="58.2305%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.06%)</title><rect x="57.9805%" y="485" width="1.0586%" height="15" fill="rgb(230,36,40)" fg:x="712" fg:w="13"/><text x="58.2305%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="58.9577%" y="469" width="0.0814%" height="15" fill="rgb(243,16,36)" fg:x="724" fg:w="1"/><text x="59.2077%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="58.9577%" y="453" width="0.0814%" height="15" fill="rgb(231,4,26)" fg:x="724" fg:w="1"/><text x="59.2077%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.9577%" y="437" width="0.0814%" height="15" fill="rgb(240,9,31)" fg:x="724" fg:w="1"/><text x="59.2077%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.9577%" y="421" width="0.0814%" height="15" fill="rgb(207,173,15)" fg:x="724" fg:w="1"/><text x="59.2077%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.9577%" y="405" width="0.0814%" height="15" fill="rgb(224,192,53)" fg:x="724" fg:w="1"/><text x="59.2077%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="59.0391%" y="517" width="0.0814%" height="15" fill="rgb(223,67,28)" fg:x="725" fg:w="1"/><text x="59.2891%" y="527.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (315 samples, 25.65%)</title><rect x="33.5505%" y="549" width="25.6515%" height="15" fill="rgb(211,20,47)" fg:x="412" fg:w="315"/><text x="33.8005%" y="559.50">&lt;regex::regex::string::Regex as core::con..</text></g><g><title>regex::builders::Builder::build_one_string (314 samples, 25.57%)</title><rect x="33.6319%" y="533" width="25.5700%" height="15" fill="rgb(240,228,2)" fg:x="413" fg:w="314"/><text x="33.8819%" y="543.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Config::match_kind (1 samples, 0.08%)</title><rect x="59.1205%" y="517" width="0.0814%" height="15" fill="rgb(248,151,12)" fg:x="726" fg:w="1"/><text x="59.3705%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="59.2020%" y="517" width="0.1629%" height="15" fill="rgb(244,8,39)" fg:x="727" fg:w="2"/><text x="59.4520%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="59.3648%" y="501" width="0.0814%" height="15" fill="rgb(222,26,8)" fg:x="729" fg:w="1"/><text x="59.6148%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.3648%" y="485" width="0.0814%" height="15" fill="rgb(213,106,44)" fg:x="729" fg:w="1"/><text x="59.6148%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.3648%" y="469" width="0.0814%" height="15" fill="rgb(214,129,20)" fg:x="729" fg:w="1"/><text x="59.6148%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.33%)</title><rect x="59.3648%" y="517" width="0.3257%" height="15" fill="rgb(212,32,13)" fg:x="729" fg:w="4"/><text x="59.6148%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (3 samples, 0.24%)</title><rect x="59.4463%" y="501" width="0.2443%" height="15" fill="rgb(208,168,33)" fg:x="730" fg:w="3"/><text x="59.6963%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="59.5277%" y="485" width="0.1629%" height="15" fill="rgb(231,207,8)" fg:x="731" fg:w="2"/><text x="59.7777%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.5277%" y="469" width="0.1629%" height="15" fill="rgb(235,219,23)" fg:x="731" fg:w="2"/><text x="59.7777%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="59.5277%" y="453" width="0.1629%" height="15" fill="rgb(226,216,26)" fg:x="731" fg:w="2"/><text x="59.7777%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.57%)</title><rect x="59.2020%" y="549" width="0.5700%" height="15" fill="rgb(239,137,16)" fg:x="727" fg:w="7"/><text x="59.4520%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.57%)</title><rect x="59.2020%" y="533" width="0.5700%" height="15" fill="rgb(207,12,36)" fg:x="727" fg:w="7"/><text x="59.4520%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="59.6906%" y="517" width="0.0814%" height="15" fill="rgb(210,214,24)" fg:x="733" fg:w="1"/><text x="59.9406%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="59.6906%" y="501" width="0.0814%" height="15" fill="rgb(206,56,30)" fg:x="733" fg:w="1"/><text x="59.9406%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.6906%" y="485" width="0.0814%" height="15" fill="rgb(228,143,26)" fg:x="733" fg:w="1"/><text x="59.9406%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="59.9349%" y="501" width="0.0814%" height="15" fill="rgb(216,218,46)" fg:x="736" fg:w="1"/><text x="60.1849%" y="511.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="59.9349%" y="485" width="0.0814%" height="15" fill="rgb(206,6,19)" fg:x="736" fg:w="1"/><text x="60.1849%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="60.0163%" y="485" width="0.0814%" height="15" fill="rgb(239,177,51)" fg:x="737" fg:w="1"/><text x="60.2663%" y="495.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="60.0977%" y="485" width="0.0814%" height="15" fill="rgb(216,55,25)" fg:x="738" fg:w="1"/><text x="60.3477%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (6 samples, 0.49%)</title><rect x="59.7720%" y="533" width="0.4886%" height="15" fill="rgb(231,163,29)" fg:x="734" fg:w="6"/><text x="60.0220%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.49%)</title><rect x="59.7720%" y="517" width="0.4886%" height="15" fill="rgb(232,149,50)" fg:x="734" fg:w="6"/><text x="60.0220%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="60.0163%" y="501" width="0.2443%" height="15" fill="rgb(223,142,48)" fg:x="737" fg:w="3"/><text x="60.2663%" y="511.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="60.1792%" y="485" width="0.0814%" height="15" fill="rgb(245,83,23)" fg:x="739" fg:w="1"/><text x="60.4292%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="60.9935%" y="453" width="0.1629%" height="15" fill="rgb(224,63,2)" fg:x="749" fg:w="2"/><text x="61.2435%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.9935%" y="437" width="0.1629%" height="15" fill="rgb(218,65,53)" fg:x="749" fg:w="2"/><text x="61.2435%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.9935%" y="421" width="0.1629%" height="15" fill="rgb(221,84,29)" fg:x="749" fg:w="2"/><text x="61.2435%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.14%)</title><rect x="60.2606%" y="469" width="1.1401%" height="15" fill="rgb(234,0,32)" fg:x="740" fg:w="14"/><text x="60.5106%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="61.1564%" y="453" width="0.2443%" height="15" fill="rgb(206,20,16)" fg:x="751" fg:w="3"/><text x="61.4064%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.30%)</title><rect x="60.2606%" y="485" width="1.3029%" height="15" fill="rgb(244,172,18)" fg:x="740" fg:w="16"/><text x="60.5106%" y="495.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="61.4007%" y="469" width="0.1629%" height="15" fill="rgb(254,133,1)" fg:x="754" fg:w="2"/><text x="61.6507%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="61.4007%" y="453" width="0.1629%" height="15" fill="rgb(222,206,41)" fg:x="754" fg:w="2"/><text x="61.6507%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.4007%" y="437" width="0.1629%" height="15" fill="rgb(212,3,42)" fg:x="754" fg:w="2"/><text x="61.6507%" y="447.50"></text></g><g><title>indefinite::rules::number::Number::check (345 samples, 28.09%)</title><rect x="33.5505%" y="565" width="28.0945%" height="15" fill="rgb(241,11,4)" fg:x="412" fg:w="345"/><text x="33.8005%" y="575.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.87%)</title><rect x="59.7720%" y="549" width="1.8730%" height="15" fill="rgb(205,19,26)" fg:x="734" fg:w="23"/><text x="60.0220%" y="559.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.38%)</title><rect x="60.2606%" y="533" width="1.3844%" height="15" fill="rgb(210,179,32)" fg:x="740" fg:w="17"/><text x="60.5106%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.38%)</title><rect x="60.2606%" y="517" width="1.3844%" height="15" fill="rgb(227,116,49)" fg:x="740" fg:w="17"/><text x="60.5106%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.38%)</title><rect x="60.2606%" y="501" width="1.3844%" height="15" fill="rgb(211,146,6)" fg:x="740" fg:w="17"/><text x="60.5106%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="61.5635%" y="485" width="0.0814%" height="15" fill="rgb(219,44,39)" fg:x="756" fg:w="1"/><text x="61.8135%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="61.5635%" y="469" width="0.0814%" height="15" fill="rgb(234,128,11)" fg:x="756" fg:w="1"/><text x="61.8135%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.5635%" y="453" width="0.0814%" height="15" fill="rgb(220,183,53)" fg:x="756" fg:w="1"/><text x="61.8135%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.5635%" y="437" width="0.0814%" height="15" fill="rgb(213,219,32)" fg:x="756" fg:w="1"/><text x="61.8135%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5635%" y="421" width="0.0814%" height="15" fill="rgb(232,156,16)" fg:x="756" fg:w="1"/><text x="61.8135%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="61.7264%" y="453" width="0.1629%" height="15" fill="rgb(246,135,34)" fg:x="758" fg:w="2"/><text x="61.9764%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.7264%" y="485" width="0.2443%" height="15" fill="rgb(241,99,0)" fg:x="758" fg:w="3"/><text x="61.9764%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.7264%" y="469" width="0.2443%" height="15" fill="rgb(222,103,45)" fg:x="758" fg:w="3"/><text x="61.9764%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8893%" y="453" width="0.0814%" height="15" fill="rgb(212,57,4)" fg:x="760" fg:w="1"/><text x="62.1393%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.9707%" y="453" width="0.0814%" height="15" fill="rgb(215,68,47)" fg:x="761" fg:w="1"/><text x="62.2207%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.9707%" y="437" width="0.0814%" height="15" fill="rgb(230,84,2)" fg:x="761" fg:w="1"/><text x="62.2207%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.9707%" y="421" width="0.0814%" height="15" fill="rgb(220,102,14)" fg:x="761" fg:w="1"/><text x="62.2207%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.9707%" y="405" width="0.0814%" height="15" fill="rgb(240,10,32)" fg:x="761" fg:w="1"/><text x="62.2207%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="62.0521%" y="421" width="0.1629%" height="15" fill="rgb(215,47,27)" fg:x="762" fg:w="2"/><text x="62.3021%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="62.0521%" y="405" width="0.1629%" height="15" fill="rgb(233,188,43)" fg:x="762" fg:w="2"/><text x="62.3021%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.0521%" y="389" width="0.1629%" height="15" fill="rgb(253,190,1)" fg:x="762" fg:w="2"/><text x="62.3021%" y="399.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="62.0521%" y="373" width="0.1629%" height="15" fill="rgb(206,114,52)" fg:x="762" fg:w="2"/><text x="62.3021%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.33%)</title><rect x="61.9707%" y="485" width="0.3257%" height="15" fill="rgb(233,120,37)" fg:x="761" fg:w="4"/><text x="62.2207%" y="495.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="61.9707%" y="469" width="0.3257%" height="15" fill="rgb(214,52,39)" fg:x="761" fg:w="4"/><text x="62.2207%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="62.0521%" y="453" width="0.2443%" height="15" fill="rgb(223,80,29)" fg:x="762" fg:w="3"/><text x="62.3021%" y="463.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="62.0521%" y="437" width="0.2443%" height="15" fill="rgb(230,101,40)" fg:x="762" fg:w="3"/><text x="62.3021%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="62.2150%" y="421" width="0.0814%" height="15" fill="rgb(219,211,8)" fg:x="764" fg:w="1"/><text x="62.4650%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4593%" y="469" width="0.0814%" height="15" fill="rgb(252,126,28)" fg:x="767" fg:w="1"/><text x="62.7093%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="62.5407%" y="469" width="0.0814%" height="15" fill="rgb(215,56,38)" fg:x="768" fg:w="1"/><text x="62.7907%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="62.7036%" y="453" width="0.5700%" height="15" fill="rgb(249,55,44)" fg:x="770" fg:w="7"/><text x="62.9536%" y="463.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="63.1922%" y="437" width="0.0814%" height="15" fill="rgb(220,221,32)" fg:x="776" fg:w="1"/><text x="63.4422%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.73%)</title><rect x="62.6221%" y="469" width="0.7329%" height="15" fill="rgb(212,216,41)" fg:x="769" fg:w="9"/><text x="62.8721%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.2736%" y="453" width="0.0814%" height="15" fill="rgb(228,213,43)" fg:x="777" fg:w="1"/><text x="63.5236%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="63.2736%" y="437" width="0.0814%" height="15" fill="rgb(211,31,26)" fg:x="777" fg:w="1"/><text x="63.5236%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="63.5179%" y="421" width="0.0814%" height="15" fill="rgb(229,202,19)" fg:x="780" fg:w="1"/><text x="63.7679%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.5179%" y="405" width="0.0814%" height="15" fill="rgb(229,105,46)" fg:x="780" fg:w="1"/><text x="63.7679%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="63.4365%" y="453" width="0.4886%" height="15" fill="rgb(235,108,1)" fg:x="779" fg:w="6"/><text x="63.6865%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (5 samples, 0.41%)</title><rect x="63.5179%" y="437" width="0.4072%" height="15" fill="rgb(245,111,35)" fg:x="780" fg:w="5"/><text x="63.7679%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.33%)</title><rect x="63.5993%" y="421" width="0.3257%" height="15" fill="rgb(219,185,31)" fg:x="781" fg:w="4"/><text x="63.8493%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="63.6808%" y="405" width="0.2443%" height="15" fill="rgb(214,4,43)" fg:x="782" fg:w="3"/><text x="63.9308%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="63.7622%" y="389" width="0.1629%" height="15" fill="rgb(235,227,40)" fg:x="783" fg:w="2"/><text x="64.0122%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.7622%" y="373" width="0.1629%" height="15" fill="rgb(230,88,30)" fg:x="783" fg:w="2"/><text x="64.0122%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.7622%" y="357" width="0.1629%" height="15" fill="rgb(216,217,1)" fg:x="783" fg:w="2"/><text x="64.0122%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.7622%" y="341" width="0.1629%" height="15" fill="rgb(248,139,50)" fg:x="783" fg:w="2"/><text x="64.0122%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="63.9251%" y="453" width="0.0814%" height="15" fill="rgb(233,1,21)" fg:x="785" fg:w="1"/><text x="64.1751%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.9251%" y="437" width="0.0814%" height="15" fill="rgb(215,183,12)" fg:x="785" fg:w="1"/><text x="64.1751%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.9251%" y="421" width="0.0814%" height="15" fill="rgb(229,104,42)" fg:x="785" fg:w="1"/><text x="64.1751%" y="431.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="63.9251%" y="405" width="0.0814%" height="15" fill="rgb(243,34,48)" fg:x="785" fg:w="1"/><text x="64.1751%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0879%" y="437" width="0.0814%" height="15" fill="rgb(239,11,44)" fg:x="787" fg:w="1"/><text x="64.3379%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="64.1694%" y="437" width="0.0814%" height="15" fill="rgb(231,98,35)" fg:x="788" fg:w="1"/><text x="64.4194%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="64.2508%" y="437" width="0.3257%" height="15" fill="rgb(233,28,25)" fg:x="789" fg:w="4"/><text x="64.5008%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::new (29 samples, 2.36%)</title><rect x="62.2964%" y="485" width="2.3616%" height="15" fill="rgb(234,123,11)" fg:x="765" fg:w="29"/><text x="62.5464%" y="495.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (16 samples, 1.30%)</title><rect x="63.3550%" y="469" width="1.3029%" height="15" fill="rgb(220,69,3)" fg:x="778" fg:w="16"/><text x="63.6050%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="64.0065%" y="453" width="0.6515%" height="15" fill="rgb(214,64,36)" fg:x="786" fg:w="8"/><text x="64.2565%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="64.5765%" y="437" width="0.0814%" height="15" fill="rgb(211,138,32)" fg:x="793" fg:w="1"/><text x="64.8265%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="64.8208%" y="453" width="0.0814%" height="15" fill="rgb(213,118,47)" fg:x="796" fg:w="1"/><text x="65.0708%" y="463.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.9023%" y="437" width="0.0814%" height="15" fill="rgb(243,124,49)" fg:x="797" fg:w="1"/><text x="65.1523%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.9023%" y="421" width="0.0814%" height="15" fill="rgb(221,30,28)" fg:x="797" fg:w="1"/><text x="65.1523%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.9023%" y="405" width="0.0814%" height="15" fill="rgb(246,37,13)" fg:x="797" fg:w="1"/><text x="65.1523%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.9023%" y="389" width="0.0814%" height="15" fill="rgb(249,66,14)" fg:x="797" fg:w="1"/><text x="65.1523%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="64.9837%" y="421" width="0.0814%" height="15" fill="rgb(213,166,5)" fg:x="798" fg:w="1"/><text x="65.2337%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="65.0651%" y="405" width="0.0814%" height="15" fill="rgb(221,66,24)" fg:x="799" fg:w="1"/><text x="65.3151%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="64.9837%" y="437" width="0.2443%" height="15" fill="rgb(210,132,17)" fg:x="798" fg:w="3"/><text x="65.2337%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="65.0651%" y="421" width="0.1629%" height="15" fill="rgb(243,202,5)" fg:x="799" fg:w="2"/><text x="65.3151%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="65.1466%" y="405" width="0.0814%" height="15" fill="rgb(233,70,48)" fg:x="800" fg:w="1"/><text x="65.3966%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="65.2280%" y="437" width="0.0814%" height="15" fill="rgb(238,41,26)" fg:x="801" fg:w="1"/><text x="65.4780%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="65.2280%" y="421" width="0.0814%" height="15" fill="rgb(241,19,31)" fg:x="801" fg:w="1"/><text x="65.4780%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.65%)</title><rect x="64.9023%" y="453" width="0.6515%" height="15" fill="rgb(214,76,10)" fg:x="797" fg:w="8"/><text x="65.1523%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="65.3094%" y="437" width="0.2443%" height="15" fill="rgb(254,202,22)" fg:x="802" fg:w="3"/><text x="65.5594%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="65.3094%" y="421" width="0.2443%" height="15" fill="rgb(214,72,24)" fg:x="802" fg:w="3"/><text x="65.5594%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="65.3094%" y="405" width="0.2443%" height="15" fill="rgb(221,92,46)" fg:x="802" fg:w="3"/><text x="65.5594%" y="415.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="65.3094%" y="389" width="0.2443%" height="15" fill="rgb(246,13,50)" fg:x="802" fg:w="3"/><text x="65.5594%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.98%)</title><rect x="64.6580%" y="485" width="0.9772%" height="15" fill="rgb(240,165,38)" fg:x="794" fg:w="12"/><text x="64.9080%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.98%)</title><rect x="64.6580%" y="469" width="0.9772%" height="15" fill="rgb(241,24,51)" fg:x="794" fg:w="12"/><text x="64.9080%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.5537%" y="453" width="0.0814%" height="15" fill="rgb(227,51,44)" fg:x="805" fg:w="1"/><text x="65.8037%" y="463.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="65.5537%" y="437" width="0.0814%" height="15" fill="rgb(231,121,3)" fg:x="805" fg:w="1"/><text x="65.8037%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::build (1 samples, 0.08%)</title><rect x="65.6352%" y="485" width="0.0814%" height="15" fill="rgb(245,3,41)" fg:x="806" fg:w="1"/><text x="65.8852%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="65.8795%" y="453" width="0.0814%" height="15" fill="rgb(214,13,26)" fg:x="809" fg:w="1"/><text x="66.1295%" y="463.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="65.8795%" y="437" width="0.0814%" height="15" fill="rgb(252,75,11)" fg:x="809" fg:w="1"/><text x="66.1295%" y="447.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="65.8795%" y="421" width="0.0814%" height="15" fill="rgb(218,226,17)" fg:x="809" fg:w="1"/><text x="66.1295%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (55 samples, 4.48%)</title><rect x="61.6450%" y="533" width="4.4788%" height="15" fill="rgb(248,89,38)" fg:x="757" fg:w="55"/><text x="61.8950%" y="543.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (55 samples, 4.48%)</title><rect x="61.6450%" y="517" width="4.4788%" height="15" fill="rgb(237,73,46)" fg:x="757" fg:w="55"/><text x="61.8950%" y="527.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (55 samples, 4.48%)</title><rect x="61.6450%" y="501" width="4.4788%" height="15" fill="rgb(242,78,33)" fg:x="757" fg:w="55"/><text x="61.8950%" y="511.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="65.7166%" y="485" width="0.4072%" height="15" fill="rgb(235,60,3)" fg:x="807" fg:w="5"/><text x="65.9666%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="65.7166%" y="469" width="0.4072%" height="15" fill="rgb(216,172,19)" fg:x="807" fg:w="5"/><text x="65.9666%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="65.9609%" y="453" width="0.1629%" height="15" fill="rgb(227,6,42)" fg:x="810" fg:w="2"/><text x="66.2109%" y="463.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="66.0423%" y="437" width="0.0814%" height="15" fill="rgb(223,207,42)" fg:x="811" fg:w="1"/><text x="66.2923%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="66.1238%" y="501" width="0.0814%" height="15" fill="rgb(246,138,30)" fg:x="812" fg:w="1"/><text x="66.3738%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.2052%" y="485" width="0.0814%" height="15" fill="rgb(251,199,47)" fg:x="813" fg:w="1"/><text x="66.4552%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2052%" y="469" width="0.0814%" height="15" fill="rgb(228,218,44)" fg:x="813" fg:w="1"/><text x="66.4552%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2052%" y="453" width="0.0814%" height="15" fill="rgb(220,68,6)" fg:x="813" fg:w="1"/><text x="66.4552%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="66.1238%" y="533" width="0.2443%" height="15" fill="rgb(240,60,26)" fg:x="812" fg:w="3"/><text x="66.3738%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="66.1238%" y="517" width="0.2443%" height="15" fill="rgb(211,200,19)" fg:x="812" fg:w="3"/><text x="66.3738%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="66.2052%" y="501" width="0.1629%" height="15" fill="rgb(242,145,30)" fg:x="813" fg:w="2"/><text x="66.4552%" y="511.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="66.2866%" y="485" width="0.0814%" height="15" fill="rgb(225,64,13)" fg:x="814" fg:w="1"/><text x="66.5366%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.2866%" y="469" width="0.0814%" height="15" fill="rgb(218,103,35)" fg:x="814" fg:w="1"/><text x="66.5366%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2866%" y="453" width="0.0814%" height="15" fill="rgb(216,93,46)" fg:x="814" fg:w="1"/><text x="66.5366%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2866%" y="437" width="0.0814%" height="15" fill="rgb(225,159,27)" fg:x="814" fg:w="1"/><text x="66.5366%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="66.3681%" y="501" width="0.1629%" height="15" fill="rgb(225,204,11)" fg:x="815" fg:w="2"/><text x="66.6181%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="66.3681%" y="485" width="0.1629%" height="15" fill="rgb(205,56,4)" fg:x="815" fg:w="2"/><text x="66.6181%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.4495%" y="469" width="0.0814%" height="15" fill="rgb(206,6,35)" fg:x="816" fg:w="1"/><text x="66.6995%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4495%" y="453" width="0.0814%" height="15" fill="rgb(247,73,52)" fg:x="816" fg:w="1"/><text x="66.6995%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="66.5309%" y="501" width="0.0814%" height="15" fill="rgb(246,97,4)" fg:x="817" fg:w="1"/><text x="66.7809%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6124%" y="485" width="0.0814%" height="15" fill="rgb(212,37,15)" fg:x="818" fg:w="1"/><text x="66.8624%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.6938%" y="485" width="0.0814%" height="15" fill="rgb(208,130,40)" fg:x="819" fg:w="1"/><text x="66.9438%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.49%)</title><rect x="66.3681%" y="533" width="0.4886%" height="15" fill="rgb(236,55,29)" fg:x="815" fg:w="6"/><text x="66.6181%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.49%)</title><rect x="66.3681%" y="517" width="0.4886%" height="15" fill="rgb(209,156,45)" fg:x="815" fg:w="6"/><text x="66.6181%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="66.6124%" y="501" width="0.2443%" height="15" fill="rgb(249,107,4)" fg:x="818" fg:w="3"/><text x="66.8624%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="66.7752%" y="485" width="0.0814%" height="15" fill="rgb(227,7,13)" fg:x="820" fg:w="1"/><text x="67.0252%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.7752%" y="469" width="0.0814%" height="15" fill="rgb(250,129,14)" fg:x="820" fg:w="1"/><text x="67.0252%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.8567%" y="469" width="0.1629%" height="15" fill="rgb(229,92,13)" fg:x="821" fg:w="2"/><text x="67.1067%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.3453%" y="453" width="0.0814%" height="15" fill="rgb(245,98,39)" fg:x="827" fg:w="1"/><text x="67.5953%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3453%" y="437" width="0.0814%" height="15" fill="rgb(234,135,48)" fg:x="827" fg:w="1"/><text x="67.5953%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.3453%" y="421" width="0.0814%" height="15" fill="rgb(230,98,28)" fg:x="827" fg:w="1"/><text x="67.5953%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4267%" y="453" width="0.0814%" height="15" fill="rgb(223,121,0)" fg:x="828" fg:w="1"/><text x="67.6767%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4267%" y="437" width="0.0814%" height="15" fill="rgb(234,173,33)" fg:x="828" fg:w="1"/><text x="67.6767%" y="447.50"></text></g><g><title>regex_automata::util::iter::Searcher::handle_overlapping_empty_match (1 samples, 0.08%)</title><rect x="67.4267%" y="421" width="0.0814%" height="15" fill="rgb(245,47,8)" fg:x="828" fg:w="1"/><text x="67.6767%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="67.5081%" y="453" width="0.0814%" height="15" fill="rgb(205,17,20)" fg:x="829" fg:w="1"/><text x="67.7581%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="67.0195%" y="469" width="0.6515%" height="15" fill="rgb(232,151,16)" fg:x="823" fg:w="8"/><text x="67.2695%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="67.5896%" y="453" width="0.0814%" height="15" fill="rgb(208,30,32)" fg:x="830" fg:w="1"/><text x="67.8396%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.5896%" y="437" width="0.0814%" height="15" fill="rgb(254,26,3)" fg:x="830" fg:w="1"/><text x="67.8396%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.5896%" y="421" width="0.0814%" height="15" fill="rgb(240,177,30)" fg:x="830" fg:w="1"/><text x="67.8396%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5896%" y="405" width="0.0814%" height="15" fill="rgb(248,76,44)" fg:x="830" fg:w="1"/><text x="67.8396%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.90%)</title><rect x="66.8567%" y="485" width="0.8958%" height="15" fill="rgb(241,186,54)" fg:x="821" fg:w="11"/><text x="67.1067%" y="495.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="67.6710%" y="469" width="0.0814%" height="15" fill="rgb(249,171,29)" fg:x="831" fg:w="1"/><text x="67.9210%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.6710%" y="453" width="0.0814%" height="15" fill="rgb(237,151,44)" fg:x="831" fg:w="1"/><text x="67.9210%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6710%" y="437" width="0.0814%" height="15" fill="rgb(228,174,30)" fg:x="831" fg:w="1"/><text x="67.9210%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6710%" y="421" width="0.0814%" height="15" fill="rgb(252,14,37)" fg:x="831" fg:w="1"/><text x="67.9210%" y="431.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (76 samples, 6.19%)</title><rect x="61.6450%" y="549" width="6.1889%" height="15" fill="rgb(207,111,40)" fg:x="757" fg:w="76"/><text x="61.8950%" y="559.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.98%)</title><rect x="66.8567%" y="533" width="0.9772%" height="15" fill="rgb(248,171,54)" fg:x="821" fg:w="12"/><text x="67.1067%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.98%)</title><rect x="66.8567%" y="517" width="0.9772%" height="15" fill="rgb(211,127,2)" fg:x="821" fg:w="12"/><text x="67.1067%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.98%)</title><rect x="66.8567%" y="501" width="0.9772%" height="15" fill="rgb(236,87,47)" fg:x="821" fg:w="12"/><text x="67.1067%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="67.7524%" y="485" width="0.0814%" height="15" fill="rgb(223,190,45)" fg:x="832" fg:w="1"/><text x="68.0024%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="67.7524%" y="469" width="0.0814%" height="15" fill="rgb(215,5,16)" fg:x="832" fg:w="1"/><text x="68.0024%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.7524%" y="453" width="0.0814%" height="15" fill="rgb(252,82,33)" fg:x="832" fg:w="1"/><text x="68.0024%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7524%" y="437" width="0.0814%" height="15" fill="rgb(247,213,44)" fg:x="832" fg:w="1"/><text x="68.0024%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7524%" y="421" width="0.0814%" height="15" fill="rgb(205,196,44)" fg:x="832" fg:w="1"/><text x="68.0024%" y="431.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (683 samples, 55.62%)</title><rect x="12.2964%" y="645" width="55.6189%" height="15" fill="rgb(237,96,54)" fg:x="151" fg:w="683"/><text x="12.5464%" y="655.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEnti..</text></g><g><title>plugins_core::looking::model::qualify_name (661 samples, 53.83%)</title><rect x="14.0879%" y="629" width="53.8274%" height="15" fill="rgb(230,113,34)" fg:x="173" fg:w="661"/><text x="14.3379%" y="639.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (661 samples, 53.83%)</title><rect x="14.0879%" y="613" width="53.8274%" height="15" fill="rgb(221,224,12)" fg:x="173" fg:w="661"/><text x="14.3379%" y="623.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (661 samples, 53.83%)</title><rect x="14.0879%" y="597" width="53.8274%" height="15" fill="rgb(219,112,44)" fg:x="173" fg:w="661"/><text x="14.3379%" y="607.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (658 samples, 53.58%)</title><rect x="14.3322%" y="581" width="53.5831%" height="15" fill="rgb(210,31,13)" fg:x="176" fg:w="658"/><text x="14.5822%" y="591.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (77 samples, 6.27%)</title><rect x="61.6450%" y="565" width="6.2704%" height="15" fill="rgb(230,25,16)" fg:x="757" fg:w="77"/><text x="61.8950%" y="575.50">indefini..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="67.8339%" y="549" width="0.0814%" height="15" fill="rgb(246,108,53)" fg:x="833" fg:w="1"/><text x="68.0839%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.9153%" y="645" width="0.0814%" height="15" fill="rgb(241,172,50)" fg:x="834" fg:w="1"/><text x="68.1653%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="67.9967%" y="645" width="0.0814%" height="15" fill="rgb(235,141,10)" fg:x="835" fg:w="1"/><text x="68.2467%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.9967%" y="629" width="0.0814%" height="15" fill="rgb(220,174,43)" fg:x="835" fg:w="1"/><text x="68.2467%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0782%" y="613" width="0.0814%" height="15" fill="rgb(215,181,40)" fg:x="836" fg:w="1"/><text x="68.3282%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0782%" y="597" width="0.0814%" height="15" fill="rgb(230,97,2)" fg:x="836" fg:w="1"/><text x="68.3282%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0782%" y="581" width="0.0814%" height="15" fill="rgb(211,25,27)" fg:x="836" fg:w="1"/><text x="68.3282%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0782%" y="565" width="0.0814%" height="15" fill="rgb(230,87,26)" fg:x="836" fg:w="1"/><text x="68.3282%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.0782%" y="549" width="0.0814%" height="15" fill="rgb(227,160,17)" fg:x="836" fg:w="1"/><text x="68.3282%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.0782%" y="533" width="0.0814%" height="15" fill="rgb(244,85,34)" fg:x="836" fg:w="1"/><text x="68.3282%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.0782%" y="517" width="0.0814%" height="15" fill="rgb(207,70,0)" fg:x="836" fg:w="1"/><text x="68.3282%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.0782%" y="501" width="0.0814%" height="15" fill="rgb(223,129,7)" fg:x="836" fg:w="1"/><text x="68.3282%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.0782%" y="485" width="0.0814%" height="15" fill="rgb(246,105,7)" fg:x="836" fg:w="1"/><text x="68.3282%" y="495.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="68.1596%" y="549" width="0.0814%" height="15" fill="rgb(215,154,42)" fg:x="837" fg:w="1"/><text x="68.4096%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="68.1596%" y="597" width="0.1629%" height="15" fill="rgb(220,215,30)" fg:x="837" fg:w="2"/><text x="68.4096%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="68.1596%" y="581" width="0.1629%" height="15" fill="rgb(228,81,51)" fg:x="837" fg:w="2"/><text x="68.4096%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="68.1596%" y="565" width="0.1629%" height="15" fill="rgb(247,71,54)" fg:x="837" fg:w="2"/><text x="68.4096%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="68.2410%" y="549" width="0.0814%" height="15" fill="rgb(234,176,34)" fg:x="838" fg:w="1"/><text x="68.4910%" y="559.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="68.2410%" y="533" width="0.0814%" height="15" fill="rgb(241,103,54)" fg:x="838" fg:w="1"/><text x="68.4910%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.2410%" y="517" width="0.0814%" height="15" fill="rgb(228,22,34)" fg:x="838" fg:w="1"/><text x="68.4910%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.2410%" y="501" width="0.0814%" height="15" fill="rgb(241,179,48)" fg:x="838" fg:w="1"/><text x="68.4910%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (3 samples, 0.24%)</title><rect x="68.1596%" y="613" width="0.2443%" height="15" fill="rgb(235,167,37)" fg:x="837" fg:w="3"/><text x="68.4096%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="68.3225%" y="597" width="0.0814%" height="15" fill="rgb(213,109,30)" fg:x="839" fg:w="1"/><text x="68.5725%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3225%" y="581" width="0.0814%" height="15" fill="rgb(222,172,16)" fg:x="839" fg:w="1"/><text x="68.5725%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.4853%" y="581" width="0.0814%" height="15" fill="rgb(233,192,5)" fg:x="841" fg:w="1"/><text x="68.7353%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4853%" y="565" width="0.0814%" height="15" fill="rgb(247,189,41)" fg:x="841" fg:w="1"/><text x="68.7353%" y="575.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (694 samples, 56.51%)</title><rect x="12.1336%" y="677" width="56.5147%" height="15" fill="rgb(218,134,47)" fg:x="149" fg:w="694"/><text x="12.3836%" y="687.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (692 samples, 56.35%)</title><rect x="12.2964%" y="661" width="56.3518%" height="15" fill="rgb(216,29,3)" fg:x="151" fg:w="692"/><text x="12.5464%" y="671.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.57%)</title><rect x="68.0782%" y="645" width="0.5700%" height="15" fill="rgb(246,140,12)" fg:x="836" fg:w="7"/><text x="68.3282%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (7 samples, 0.57%)</title><rect x="68.0782%" y="629" width="0.5700%" height="15" fill="rgb(230,136,11)" fg:x="836" fg:w="7"/><text x="68.3282%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.4039%" y="613" width="0.2443%" height="15" fill="rgb(247,22,47)" fg:x="840" fg:w="3"/><text x="68.6539%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.4039%" y="597" width="0.2443%" height="15" fill="rgb(218,84,22)" fg:x="840" fg:w="3"/><text x="68.6539%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.5668%" y="581" width="0.0814%" height="15" fill="rgb(216,87,39)" fg:x="842" fg:w="1"/><text x="68.8168%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.5668%" y="565" width="0.0814%" height="15" fill="rgb(221,178,8)" fg:x="842" fg:w="1"/><text x="68.8168%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5668%" y="549" width="0.0814%" height="15" fill="rgb(230,42,11)" fg:x="842" fg:w="1"/><text x="68.8168%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="68.6482%" y="645" width="0.0814%" height="15" fill="rgb(237,229,4)" fg:x="843" fg:w="1"/><text x="68.8982%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="68.6482%" y="629" width="0.0814%" height="15" fill="rgb(222,31,33)" fg:x="843" fg:w="1"/><text x="68.8982%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="68.6482%" y="613" width="0.0814%" height="15" fill="rgb(210,17,39)" fg:x="843" fg:w="1"/><text x="68.8982%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="68.7296%" y="581" width="0.0814%" height="15" fill="rgb(244,93,20)" fg:x="844" fg:w="1"/><text x="68.9796%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8111%" y="421" width="0.0814%" height="15" fill="rgb(210,40,47)" fg:x="845" fg:w="1"/><text x="69.0611%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8111%" y="405" width="0.0814%" height="15" fill="rgb(239,211,47)" fg:x="845" fg:w="1"/><text x="69.0611%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8111%" y="389" width="0.0814%" height="15" fill="rgb(251,223,49)" fg:x="845" fg:w="1"/><text x="69.0611%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8111%" y="373" width="0.0814%" height="15" fill="rgb(221,149,5)" fg:x="845" fg:w="1"/><text x="69.0611%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8111%" y="357" width="0.0814%" height="15" fill="rgb(219,224,51)" fg:x="845" fg:w="1"/><text x="69.0611%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.8111%" y="341" width="0.0814%" height="15" fill="rgb(223,7,8)" fg:x="845" fg:w="1"/><text x="69.0611%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="68.7296%" y="613" width="0.2443%" height="15" fill="rgb(241,217,22)" fg:x="844" fg:w="3"/><text x="68.9796%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="68.7296%" y="597" width="0.2443%" height="15" fill="rgb(248,209,0)" fg:x="844" fg:w="3"/><text x="68.9796%" y="607.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="68.8111%" y="581" width="0.1629%" height="15" fill="rgb(217,205,4)" fg:x="845" fg:w="2"/><text x="69.0611%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="68.8111%" y="565" width="0.1629%" height="15" fill="rgb(228,124,39)" fg:x="845" fg:w="2"/><text x="69.0611%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="68.8111%" y="549" width="0.1629%" height="15" fill="rgb(250,116,42)" fg:x="845" fg:w="2"/><text x="69.0611%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.8111%" y="533" width="0.1629%" height="15" fill="rgb(223,202,9)" fg:x="845" fg:w="2"/><text x="69.0611%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.8111%" y="517" width="0.1629%" height="15" fill="rgb(242,222,40)" fg:x="845" fg:w="2"/><text x="69.0611%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.8111%" y="501" width="0.1629%" height="15" fill="rgb(229,99,46)" fg:x="845" fg:w="2"/><text x="69.0611%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.8111%" y="485" width="0.1629%" height="15" fill="rgb(225,56,46)" fg:x="845" fg:w="2"/><text x="69.0611%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.8111%" y="469" width="0.1629%" height="15" fill="rgb(227,94,5)" fg:x="845" fg:w="2"/><text x="69.0611%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.8111%" y="453" width="0.1629%" height="15" fill="rgb(205,112,38)" fg:x="845" fg:w="2"/><text x="69.0611%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.8111%" y="437" width="0.1629%" height="15" fill="rgb(231,133,46)" fg:x="845" fg:w="2"/><text x="69.0611%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8925%" y="421" width="0.0814%" height="15" fill="rgb(217,16,9)" fg:x="846" fg:w="1"/><text x="69.1425%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8925%" y="405" width="0.0814%" height="15" fill="rgb(249,173,9)" fg:x="846" fg:w="1"/><text x="69.1425%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.8925%" y="389" width="0.0814%" height="15" fill="rgb(205,163,53)" fg:x="846" fg:w="1"/><text x="69.1425%" y="399.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.41%)</title><rect x="68.6482%" y="677" width="0.4072%" height="15" fill="rgb(217,54,41)" fg:x="843" fg:w="5"/><text x="68.8982%" y="687.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (5 samples, 0.41%)</title><rect x="68.6482%" y="661" width="0.4072%" height="15" fill="rgb(228,216,12)" fg:x="843" fg:w="5"/><text x="68.8982%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="68.7296%" y="645" width="0.3257%" height="15" fill="rgb(244,228,15)" fg:x="844" fg:w="4"/><text x="68.9796%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (4 samples, 0.33%)</title><rect x="68.7296%" y="629" width="0.3257%" height="15" fill="rgb(221,176,53)" fg:x="844" fg:w="4"/><text x="68.9796%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9739%" y="613" width="0.0814%" height="15" fill="rgb(205,94,34)" fg:x="847" fg:w="1"/><text x="69.2239%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9739%" y="597" width="0.0814%" height="15" fill="rgb(213,110,48)" fg:x="847" fg:w="1"/><text x="69.2239%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9739%" y="581" width="0.0814%" height="15" fill="rgb(236,142,28)" fg:x="847" fg:w="1"/><text x="69.2239%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9739%" y="565" width="0.0814%" height="15" fill="rgb(225,135,29)" fg:x="847" fg:w="1"/><text x="69.2239%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.2182%" y="581" width="0.1629%" height="15" fill="rgb(252,45,31)" fg:x="850" fg:w="2"/><text x="69.4682%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.2182%" y="565" width="0.1629%" height="15" fill="rgb(211,187,50)" fg:x="850" fg:w="2"/><text x="69.4682%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="69.2182%" y="549" width="0.1629%" height="15" fill="rgb(229,109,7)" fg:x="850" fg:w="2"/><text x="69.4682%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.2182%" y="597" width="0.2443%" height="15" fill="rgb(251,131,51)" fg:x="850" fg:w="3"/><text x="69.4682%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3811%" y="581" width="0.0814%" height="15" fill="rgb(251,180,35)" fg:x="852" fg:w="1"/><text x="69.6311%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (5 samples, 0.41%)</title><rect x="69.1368%" y="645" width="0.4072%" height="15" fill="rgb(211,46,32)" fg:x="849" fg:w="5"/><text x="69.3868%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="69.2182%" y="629" width="0.3257%" height="15" fill="rgb(248,123,17)" fg:x="850" fg:w="4"/><text x="69.4682%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="69.2182%" y="613" width="0.3257%" height="15" fill="rgb(227,141,18)" fg:x="850" fg:w="4"/><text x="69.4682%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4625%" y="597" width="0.0814%" height="15" fill="rgb(216,102,9)" fg:x="853" fg:w="1"/><text x="69.7125%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.5440%" y="613" width="0.1629%" height="15" fill="rgb(253,47,13)" fg:x="854" fg:w="2"/><text x="69.7940%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.5440%" y="597" width="0.1629%" height="15" fill="rgb(226,93,23)" fg:x="854" fg:w="2"/><text x="69.7940%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.7883%" y="565" width="0.0814%" height="15" fill="rgb(247,104,17)" fg:x="857" fg:w="1"/><text x="70.0383%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.7883%" y="549" width="0.0814%" height="15" fill="rgb(233,203,26)" fg:x="857" fg:w="1"/><text x="70.0383%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7883%" y="533" width="0.0814%" height="15" fill="rgb(244,98,49)" fg:x="857" fg:w="1"/><text x="70.0383%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.9511%" y="549" width="0.0814%" height="15" fill="rgb(235,134,22)" fg:x="859" fg:w="1"/><text x="70.2011%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0326%" y="549" width="0.0814%" height="15" fill="rgb(221,70,32)" fg:x="860" fg:w="1"/><text x="70.2826%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.1140%" y="549" width="0.0814%" height="15" fill="rgb(238,15,50)" fg:x="861" fg:w="1"/><text x="70.3640%" y="559.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="70.1140%" y="533" width="0.0814%" height="15" fill="rgb(215,221,48)" fg:x="861" fg:w="1"/><text x="70.3640%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="70.1140%" y="517" width="0.0814%" height="15" fill="rgb(236,73,3)" fg:x="861" fg:w="1"/><text x="70.3640%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.1140%" y="501" width="0.0814%" height="15" fill="rgb(250,107,11)" fg:x="861" fg:w="1"/><text x="70.3640%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1140%" y="485" width="0.0814%" height="15" fill="rgb(242,39,14)" fg:x="861" fg:w="1"/><text x="70.3640%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1140%" y="469" width="0.0814%" height="15" fill="rgb(248,164,37)" fg:x="861" fg:w="1"/><text x="70.3640%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1954%" y="517" width="0.0814%" height="15" fill="rgb(217,60,12)" fg:x="862" fg:w="1"/><text x="70.4454%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1954%" y="501" width="0.0814%" height="15" fill="rgb(240,125,29)" fg:x="862" fg:w="1"/><text x="70.4454%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1954%" y="485" width="0.0814%" height="15" fill="rgb(208,207,28)" fg:x="862" fg:w="1"/><text x="70.4454%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="70.2769%" y="517" width="0.0814%" height="15" fill="rgb(209,159,27)" fg:x="863" fg:w="1"/><text x="70.5269%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.2769%" y="501" width="0.0814%" height="15" fill="rgb(251,176,53)" fg:x="863" fg:w="1"/><text x="70.5269%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.2769%" y="485" width="0.0814%" height="15" fill="rgb(211,85,7)" fg:x="863" fg:w="1"/><text x="70.5269%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="70.2769%" y="469" width="0.0814%" height="15" fill="rgb(216,64,54)" fg:x="863" fg:w="1"/><text x="70.5269%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="70.2769%" y="453" width="0.0814%" height="15" fill="rgb(217,54,24)" fg:x="863" fg:w="1"/><text x="70.5269%" y="463.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="70.2769%" y="437" width="0.0814%" height="15" fill="rgb(208,206,53)" fg:x="863" fg:w="1"/><text x="70.5269%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.2769%" y="421" width="0.0814%" height="15" fill="rgb(251,74,39)" fg:x="863" fg:w="1"/><text x="70.5269%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.2769%" y="405" width="0.0814%" height="15" fill="rgb(226,47,5)" fg:x="863" fg:w="1"/><text x="70.5269%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.3583%" y="517" width="0.0814%" height="15" fill="rgb(234,111,33)" fg:x="864" fg:w="1"/><text x="70.6083%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.3583%" y="501" width="0.0814%" height="15" fill="rgb(251,14,10)" fg:x="864" fg:w="1"/><text x="70.6083%" y="511.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (8 samples, 0.65%)</title><rect x="69.8697%" y="565" width="0.6515%" height="15" fill="rgb(232,43,0)" fg:x="858" fg:w="8"/><text x="70.1197%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="70.1954%" y="549" width="0.3257%" height="15" fill="rgb(222,68,43)" fg:x="862" fg:w="4"/><text x="70.4454%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (4 samples, 0.33%)</title><rect x="70.1954%" y="533" width="0.3257%" height="15" fill="rgb(217,24,23)" fg:x="862" fg:w="4"/><text x="70.4454%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4397%" y="517" width="0.0814%" height="15" fill="rgb(229,209,14)" fg:x="865" fg:w="1"/><text x="70.6897%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4397%" y="501" width="0.0814%" height="15" fill="rgb(250,149,48)" fg:x="865" fg:w="1"/><text x="70.6897%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4397%" y="485" width="0.0814%" height="15" fill="rgb(210,120,37)" fg:x="865" fg:w="1"/><text x="70.6897%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6026%" y="341" width="0.0814%" height="15" fill="rgb(210,21,8)" fg:x="867" fg:w="1"/><text x="70.8526%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6026%" y="325" width="0.0814%" height="15" fill="rgb(243,145,7)" fg:x="867" fg:w="1"/><text x="70.8526%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6026%" y="309" width="0.0814%" height="15" fill="rgb(238,178,32)" fg:x="867" fg:w="1"/><text x="70.8526%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6026%" y="293" width="0.0814%" height="15" fill="rgb(222,4,10)" fg:x="867" fg:w="1"/><text x="70.8526%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6026%" y="277" width="0.0814%" height="15" fill="rgb(239,7,37)" fg:x="867" fg:w="1"/><text x="70.8526%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6026%" y="261" width="0.0814%" height="15" fill="rgb(215,31,37)" fg:x="867" fg:w="1"/><text x="70.8526%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6026%" y="245" width="0.0814%" height="15" fill="rgb(224,83,33)" fg:x="867" fg:w="1"/><text x="70.8526%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6026%" y="229" width="0.0814%" height="15" fill="rgb(239,55,3)" fg:x="867" fg:w="1"/><text x="70.8526%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.6026%" y="213" width="0.0814%" height="15" fill="rgb(247,92,11)" fg:x="867" fg:w="1"/><text x="70.8526%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.6026%" y="197" width="0.0814%" height="15" fill="rgb(239,200,7)" fg:x="867" fg:w="1"/><text x="70.8526%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.6026%" y="181" width="0.0814%" height="15" fill="rgb(227,115,8)" fg:x="867" fg:w="1"/><text x="70.8526%" y="191.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="70.6026%" y="421" width="0.1629%" height="15" fill="rgb(215,189,27)" fg:x="867" fg:w="2"/><text x="70.8526%" y="431.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="70.6026%" y="405" width="0.1629%" height="15" fill="rgb(251,216,39)" fg:x="867" fg:w="2"/><text x="70.8526%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="70.6026%" y="389" width="0.1629%" height="15" fill="rgb(207,29,47)" fg:x="867" fg:w="2"/><text x="70.8526%" y="399.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="70.6026%" y="373" width="0.1629%" height="15" fill="rgb(210,71,34)" fg:x="867" fg:w="2"/><text x="70.8526%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="70.6026%" y="357" width="0.1629%" height="15" fill="rgb(253,217,51)" fg:x="867" fg:w="2"/><text x="70.8526%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6840%" y="341" width="0.0814%" height="15" fill="rgb(222,117,46)" fg:x="868" fg:w="1"/><text x="70.9340%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6840%" y="325" width="0.0814%" height="15" fill="rgb(226,132,6)" fg:x="868" fg:w="1"/><text x="70.9340%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6840%" y="309" width="0.0814%" height="15" fill="rgb(254,145,51)" fg:x="868" fg:w="1"/><text x="70.9340%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6840%" y="293" width="0.0814%" height="15" fill="rgb(231,199,27)" fg:x="868" fg:w="1"/><text x="70.9340%" y="303.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.6840%" y="277" width="0.0814%" height="15" fill="rgb(245,158,14)" fg:x="868" fg:w="1"/><text x="70.9340%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6840%" y="261" width="0.0814%" height="15" fill="rgb(240,113,14)" fg:x="868" fg:w="1"/><text x="70.9340%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6840%" y="245" width="0.0814%" height="15" fill="rgb(210,20,13)" fg:x="868" fg:w="1"/><text x="70.9340%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6840%" y="229" width="0.0814%" height="15" fill="rgb(241,144,13)" fg:x="868" fg:w="1"/><text x="70.9340%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6840%" y="213" width="0.0814%" height="15" fill="rgb(235,43,34)" fg:x="868" fg:w="1"/><text x="70.9340%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6840%" y="197" width="0.0814%" height="15" fill="rgb(208,36,20)" fg:x="868" fg:w="1"/><text x="70.9340%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.6840%" y="181" width="0.0814%" height="15" fill="rgb(239,204,10)" fg:x="868" fg:w="1"/><text x="70.9340%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.7655%" y="421" width="0.1629%" height="15" fill="rgb(217,84,43)" fg:x="869" fg:w="2"/><text x="71.0155%" y="431.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="70.7655%" y="405" width="0.1629%" height="15" fill="rgb(241,170,50)" fg:x="869" fg:w="2"/><text x="71.0155%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="70.7655%" y="389" width="0.1629%" height="15" fill="rgb(226,205,29)" fg:x="869" fg:w="2"/><text x="71.0155%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="70.7655%" y="373" width="0.1629%" height="15" fill="rgb(233,113,1)" fg:x="869" fg:w="2"/><text x="71.0155%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.7655%" y="357" width="0.1629%" height="15" fill="rgb(253,98,13)" fg:x="869" fg:w="2"/><text x="71.0155%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.7655%" y="341" width="0.1629%" height="15" fill="rgb(211,115,12)" fg:x="869" fg:w="2"/><text x="71.0155%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.7655%" y="325" width="0.1629%" height="15" fill="rgb(208,12,16)" fg:x="869" fg:w="2"/><text x="71.0155%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8469%" y="309" width="0.0814%" height="15" fill="rgb(237,193,54)" fg:x="870" fg:w="1"/><text x="71.0969%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8469%" y="293" width="0.0814%" height="15" fill="rgb(243,22,42)" fg:x="870" fg:w="1"/><text x="71.0969%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8469%" y="277" width="0.0814%" height="15" fill="rgb(233,151,36)" fg:x="870" fg:w="1"/><text x="71.0969%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.0912%" y="341" width="0.1629%" height="15" fill="rgb(237,57,45)" fg:x="873" fg:w="2"/><text x="71.3412%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.2541%" y="293" width="0.0814%" height="15" fill="rgb(221,88,17)" fg:x="875" fg:w="1"/><text x="71.5041%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2541%" y="277" width="0.0814%" height="15" fill="rgb(230,79,15)" fg:x="875" fg:w="1"/><text x="71.5041%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.2541%" y="261" width="0.0814%" height="15" fill="rgb(213,57,13)" fg:x="875" fg:w="1"/><text x="71.5041%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2541%" y="245" width="0.0814%" height="15" fill="rgb(222,116,39)" fg:x="875" fg:w="1"/><text x="71.5041%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="71.2541%" y="229" width="0.0814%" height="15" fill="rgb(245,107,2)" fg:x="875" fg:w="1"/><text x="71.5041%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2541%" y="213" width="0.0814%" height="15" fill="rgb(238,1,10)" fg:x="875" fg:w="1"/><text x="71.5041%" y="223.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (6 samples, 0.49%)</title><rect x="70.9283%" y="405" width="0.4886%" height="15" fill="rgb(249,4,48)" fg:x="871" fg:w="6"/><text x="71.1783%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (6 samples, 0.49%)</title><rect x="70.9283%" y="389" width="0.4886%" height="15" fill="rgb(223,151,18)" fg:x="871" fg:w="6"/><text x="71.1783%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="71.0098%" y="373" width="0.4072%" height="15" fill="rgb(227,65,43)" fg:x="872" fg:w="5"/><text x="71.2598%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="71.0098%" y="357" width="0.4072%" height="15" fill="rgb(218,40,45)" fg:x="872" fg:w="5"/><text x="71.2598%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.2541%" y="341" width="0.1629%" height="15" fill="rgb(252,121,31)" fg:x="875" fg:w="2"/><text x="71.5041%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.2541%" y="325" width="0.1629%" height="15" fill="rgb(219,158,43)" fg:x="875" fg:w="2"/><text x="71.5041%" y="335.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.2541%" y="309" width="0.1629%" height="15" fill="rgb(231,162,42)" fg:x="875" fg:w="2"/><text x="71.5041%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3355%" y="293" width="0.0814%" height="15" fill="rgb(217,179,25)" fg:x="876" fg:w="1"/><text x="71.5855%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.3355%" y="277" width="0.0814%" height="15" fill="rgb(206,212,31)" fg:x="876" fg:w="1"/><text x="71.5855%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.3355%" y="261" width="0.0814%" height="15" fill="rgb(235,144,12)" fg:x="876" fg:w="1"/><text x="71.5855%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3355%" y="245" width="0.0814%" height="15" fill="rgb(213,51,10)" fg:x="876" fg:w="1"/><text x="71.5855%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.3355%" y="229" width="0.0814%" height="15" fill="rgb(231,145,14)" fg:x="876" fg:w="1"/><text x="71.5855%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.3355%" y="213" width="0.0814%" height="15" fill="rgb(235,15,28)" fg:x="876" fg:w="1"/><text x="71.5855%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3355%" y="197" width="0.0814%" height="15" fill="rgb(237,206,10)" fg:x="876" fg:w="1"/><text x="71.5855%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.3355%" y="181" width="0.0814%" height="15" fill="rgb(236,227,27)" fg:x="876" fg:w="1"/><text x="71.5855%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.3355%" y="165" width="0.0814%" height="15" fill="rgb(246,83,35)" fg:x="876" fg:w="1"/><text x="71.5855%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3355%" y="149" width="0.0814%" height="15" fill="rgb(220,136,24)" fg:x="876" fg:w="1"/><text x="71.5855%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.3355%" y="133" width="0.0814%" height="15" fill="rgb(217,3,25)" fg:x="876" fg:w="1"/><text x="71.5855%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.3355%" y="117" width="0.0814%" height="15" fill="rgb(239,24,14)" fg:x="876" fg:w="1"/><text x="71.5855%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3355%" y="101" width="0.0814%" height="15" fill="rgb(244,16,53)" fg:x="876" fg:w="1"/><text x="71.5855%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.3355%" y="85" width="0.0814%" height="15" fill="rgb(208,175,44)" fg:x="876" fg:w="1"/><text x="71.5855%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.3355%" y="69" width="0.0814%" height="15" fill="rgb(252,18,48)" fg:x="876" fg:w="1"/><text x="71.5855%" y="79.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.3355%" y="53" width="0.0814%" height="15" fill="rgb(234,199,32)" fg:x="876" fg:w="1"/><text x="71.5855%" y="63.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.3355%" y="37" width="0.0814%" height="15" fill="rgb(225,77,54)" fg:x="876" fg:w="1"/><text x="71.5855%" y="47.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="71.4169%" y="357" width="0.1629%" height="15" fill="rgb(225,42,25)" fg:x="877" fg:w="2"/><text x="71.6669%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="71.4169%" y="341" width="0.1629%" height="15" fill="rgb(242,227,46)" fg:x="877" fg:w="2"/><text x="71.6669%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.5798%" y="325" width="0.0814%" height="15" fill="rgb(246,197,35)" fg:x="879" fg:w="1"/><text x="71.8298%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5798%" y="309" width="0.0814%" height="15" fill="rgb(215,159,26)" fg:x="879" fg:w="1"/><text x="71.8298%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.7427%" y="197" width="0.0814%" height="15" fill="rgb(212,194,50)" fg:x="881" fg:w="1"/><text x="71.9927%" y="207.50"></text></g><g><title>plugins_core::tools::get_contained_keys (17 samples, 1.38%)</title><rect x="70.5212%" y="565" width="1.3844%" height="15" fill="rgb(246,132,1)" fg:x="866" fg:w="17"/><text x="70.7712%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (17 samples, 1.38%)</title><rect x="70.5212%" y="549" width="1.3844%" height="15" fill="rgb(217,71,7)" fg:x="866" fg:w="17"/><text x="70.7712%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (17 samples, 1.38%)</title><rect x="70.5212%" y="533" width="1.3844%" height="15" fill="rgb(252,59,32)" fg:x="866" fg:w="17"/><text x="70.7712%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (17 samples, 1.38%)</title><rect x="70.5212%" y="517" width="1.3844%" height="15" fill="rgb(253,204,25)" fg:x="866" fg:w="17"/><text x="70.7712%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.38%)</title><rect x="70.5212%" y="501" width="1.3844%" height="15" fill="rgb(232,21,16)" fg:x="866" fg:w="17"/><text x="70.7712%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.38%)</title><rect x="70.5212%" y="485" width="1.3844%" height="15" fill="rgb(248,90,29)" fg:x="866" fg:w="17"/><text x="70.7712%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (17 samples, 1.38%)</title><rect x="70.5212%" y="469" width="1.3844%" height="15" fill="rgb(249,223,7)" fg:x="866" fg:w="17"/><text x="70.7712%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (17 samples, 1.38%)</title><rect x="70.5212%" y="453" width="1.3844%" height="15" fill="rgb(231,119,42)" fg:x="866" fg:w="17"/><text x="70.7712%" y="463.50"></text></g><g><title>engine::internal::Entities::add_persisted (16 samples, 1.30%)</title><rect x="70.6026%" y="437" width="1.3029%" height="15" fill="rgb(215,41,35)" fg:x="867" fg:w="16"/><text x="70.8526%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity (12 samples, 0.98%)</title><rect x="70.9283%" y="421" width="0.9772%" height="15" fill="rgb(220,44,45)" fg:x="871" fg:w="12"/><text x="71.1783%" y="431.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="71.4169%" y="405" width="0.4886%" height="15" fill="rgb(253,197,36)" fg:x="877" fg:w="6"/><text x="71.6669%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.49%)</title><rect x="71.4169%" y="389" width="0.4886%" height="15" fill="rgb(245,225,54)" fg:x="877" fg:w="6"/><text x="71.6669%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="71.4169%" y="373" width="0.4886%" height="15" fill="rgb(239,94,37)" fg:x="877" fg:w="6"/><text x="71.6669%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="71.5798%" y="357" width="0.3257%" height="15" fill="rgb(242,217,10)" fg:x="879" fg:w="4"/><text x="71.8298%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="71.5798%" y="341" width="0.3257%" height="15" fill="rgb(250,193,7)" fg:x="879" fg:w="4"/><text x="71.8298%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="71.6612%" y="325" width="0.2443%" height="15" fill="rgb(230,104,19)" fg:x="880" fg:w="3"/><text x="71.9112%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.6612%" y="309" width="0.2443%" height="15" fill="rgb(230,181,4)" fg:x="880" fg:w="3"/><text x="71.9112%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="71.6612%" y="293" width="0.2443%" height="15" fill="rgb(216,219,49)" fg:x="880" fg:w="3"/><text x="71.9112%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.6612%" y="277" width="0.2443%" height="15" fill="rgb(254,144,0)" fg:x="880" fg:w="3"/><text x="71.9112%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.7427%" y="261" width="0.1629%" height="15" fill="rgb(205,209,38)" fg:x="881" fg:w="2"/><text x="71.9927%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7427%" y="245" width="0.1629%" height="15" fill="rgb(240,21,42)" fg:x="881" fg:w="2"/><text x="71.9927%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.7427%" y="229" width="0.1629%" height="15" fill="rgb(241,132,3)" fg:x="881" fg:w="2"/><text x="71.9927%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7427%" y="213" width="0.1629%" height="15" fill="rgb(225,14,2)" fg:x="881" fg:w="2"/><text x="71.9927%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8241%" y="197" width="0.0814%" height="15" fill="rgb(210,141,35)" fg:x="882" fg:w="1"/><text x="72.0741%" y="207.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.8241%" y="181" width="0.0814%" height="15" fill="rgb(251,14,44)" fg:x="882" fg:w="1"/><text x="72.0741%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.28%)</title><rect x="69.7068%" y="597" width="2.2801%" height="15" fill="rgb(247,48,18)" fg:x="856" fg:w="28"/><text x="69.9568%" y="607.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 2.20%)</title><rect x="69.7883%" y="581" width="2.1987%" height="15" fill="rgb(225,0,40)" fg:x="857" fg:w="27"/><text x="70.0383%" y="591.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="71.9055%" y="565" width="0.0814%" height="15" fill="rgb(221,31,33)" fg:x="883" fg:w="1"/><text x="72.1555%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="71.9055%" y="549" width="0.0814%" height="15" fill="rgb(237,42,40)" fg:x="883" fg:w="1"/><text x="72.1555%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.9055%" y="533" width="0.0814%" height="15" fill="rgb(233,51,29)" fg:x="883" fg:w="1"/><text x="72.1555%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9870%" y="549" width="0.0814%" height="15" fill="rgb(226,58,20)" fg:x="884" fg:w="1"/><text x="72.2370%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9870%" y="533" width="0.0814%" height="15" fill="rgb(208,98,7)" fg:x="884" fg:w="1"/><text x="72.2370%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9870%" y="517" width="0.0814%" height="15" fill="rgb(228,143,44)" fg:x="884" fg:w="1"/><text x="72.2370%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9870%" y="501" width="0.0814%" height="15" fill="rgb(246,55,38)" fg:x="884" fg:w="1"/><text x="72.2370%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9870%" y="485" width="0.0814%" height="15" fill="rgb(247,87,16)" fg:x="884" fg:w="1"/><text x="72.2370%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9870%" y="469" width="0.0814%" height="15" fill="rgb(234,129,42)" fg:x="884" fg:w="1"/><text x="72.2370%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9870%" y="453" width="0.0814%" height="15" fill="rgb(220,82,16)" fg:x="884" fg:w="1"/><text x="72.2370%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9870%" y="437" width="0.0814%" height="15" fill="rgb(211,88,4)" fg:x="884" fg:w="1"/><text x="72.2370%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9870%" y="421" width="0.0814%" height="15" fill="rgb(248,151,21)" fg:x="884" fg:w="1"/><text x="72.2370%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9870%" y="405" width="0.0814%" height="15" fill="rgb(238,163,6)" fg:x="884" fg:w="1"/><text x="72.2370%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9870%" y="389" width="0.0814%" height="15" fill="rgb(209,183,11)" fg:x="884" fg:w="1"/><text x="72.2370%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9870%" y="373" width="0.0814%" height="15" fill="rgb(219,37,20)" fg:x="884" fg:w="1"/><text x="72.2370%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="72.0684%" y="549" width="0.0814%" height="15" fill="rgb(210,158,4)" fg:x="885" fg:w="1"/><text x="72.3184%" y="559.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="72.5570%" y="293" width="0.2443%" height="15" fill="rgb(221,167,53)" fg:x="891" fg:w="3"/><text x="72.8070%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.6384%" y="277" width="0.1629%" height="15" fill="rgb(237,151,45)" fg:x="892" fg:w="2"/><text x="72.8884%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="72.6384%" y="261" width="0.1629%" height="15" fill="rgb(231,39,3)" fg:x="892" fg:w="2"/><text x="72.8884%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="72.7199%" y="245" width="0.0814%" height="15" fill="rgb(212,167,28)" fg:x="893" fg:w="1"/><text x="72.9699%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.7199%" y="229" width="0.0814%" height="15" fill="rgb(232,178,8)" fg:x="893" fg:w="1"/><text x="72.9699%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.7199%" y="213" width="0.0814%" height="15" fill="rgb(225,151,20)" fg:x="893" fg:w="1"/><text x="72.9699%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7199%" y="197" width="0.0814%" height="15" fill="rgb(238,3,37)" fg:x="893" fg:w="1"/><text x="72.9699%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.41%)</title><rect x="72.4756%" y="357" width="0.4072%" height="15" fill="rgb(251,147,42)" fg:x="890" fg:w="5"/><text x="72.7256%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="72.4756%" y="341" width="0.4072%" height="15" fill="rgb(208,173,10)" fg:x="890" fg:w="5"/><text x="72.7256%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="72.4756%" y="325" width="0.4072%" height="15" fill="rgb(246,225,4)" fg:x="890" fg:w="5"/><text x="72.7256%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.41%)</title><rect x="72.4756%" y="309" width="0.4072%" height="15" fill="rgb(248,102,6)" fg:x="890" fg:w="5"/><text x="72.7256%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8013%" y="293" width="0.0814%" height="15" fill="rgb(232,6,21)" fg:x="894" fg:w="1"/><text x="73.0513%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="72.3941%" y="373" width="0.5700%" height="15" fill="rgb(221,179,22)" fg:x="889" fg:w="7"/><text x="72.6441%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.8827%" y="357" width="0.0814%" height="15" fill="rgb(252,50,20)" fg:x="895" fg:w="1"/><text x="73.1327%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8827%" y="341" width="0.0814%" height="15" fill="rgb(222,56,38)" fg:x="895" fg:w="1"/><text x="73.1327%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="72.3941%" y="389" width="0.6515%" height="15" fill="rgb(206,193,29)" fg:x="889" fg:w="8"/><text x="72.6441%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.9642%" y="373" width="0.0814%" height="15" fill="rgb(239,192,45)" fg:x="896" fg:w="1"/><text x="73.2142%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="72.9642%" y="357" width="0.0814%" height="15" fill="rgb(254,18,36)" fg:x="896" fg:w="1"/><text x="73.2142%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="72.9642%" y="341" width="0.0814%" height="15" fill="rgb(221,127,11)" fg:x="896" fg:w="1"/><text x="73.2142%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.0456%" y="389" width="0.0814%" height="15" fill="rgb(234,146,35)" fg:x="897" fg:w="1"/><text x="73.2956%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.98%)</title><rect x="72.2313%" y="453" width="0.9772%" height="15" fill="rgb(254,201,37)" fg:x="887" fg:w="12"/><text x="72.4813%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.81%)</title><rect x="72.3941%" y="437" width="0.8143%" height="15" fill="rgb(211,202,23)" fg:x="889" fg:w="10"/><text x="72.6441%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="72.3941%" y="421" width="0.8143%" height="15" fill="rgb(237,91,2)" fg:x="889" fg:w="10"/><text x="72.6441%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.81%)</title><rect x="72.3941%" y="405" width="0.8143%" height="15" fill="rgb(226,228,36)" fg:x="889" fg:w="10"/><text x="72.6441%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1270%" y="389" width="0.0814%" height="15" fill="rgb(213,63,50)" fg:x="898" fg:w="1"/><text x="73.3770%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.1270%" y="373" width="0.0814%" height="15" fill="rgb(235,194,19)" fg:x="898" fg:w="1"/><text x="73.3770%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 1.14%)</title><rect x="72.2313%" y="501" width="1.1401%" height="15" fill="rgb(207,204,18)" fg:x="887" fg:w="14"/><text x="72.4813%" y="511.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.14%)</title><rect x="72.2313%" y="485" width="1.1401%" height="15" fill="rgb(248,8,7)" fg:x="887" fg:w="14"/><text x="72.4813%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (14 samples, 1.14%)</title><rect x="72.2313%" y="469" width="1.1401%" height="15" fill="rgb(223,145,47)" fg:x="887" fg:w="14"/><text x="72.4813%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="73.2085%" y="453" width="0.1629%" height="15" fill="rgb(228,84,11)" fg:x="899" fg:w="2"/><text x="73.4585%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.2085%" y="437" width="0.1629%" height="15" fill="rgb(218,76,45)" fg:x="899" fg:w="2"/><text x="73.4585%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (16 samples, 1.30%)</title><rect x="72.1498%" y="533" width="1.3029%" height="15" fill="rgb(223,80,15)" fg:x="886" fg:w="16"/><text x="72.3998%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.22%)</title><rect x="72.2313%" y="517" width="1.2215%" height="15" fill="rgb(219,218,33)" fg:x="887" fg:w="15"/><text x="72.4813%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.3713%" y="501" width="0.0814%" height="15" fill="rgb(208,51,11)" fg:x="901" fg:w="1"/><text x="73.6213%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3713%" y="485" width="0.0814%" height="15" fill="rgb(229,165,39)" fg:x="901" fg:w="1"/><text x="73.6213%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4528%" y="485" width="0.0814%" height="15" fill="rgb(241,100,24)" fg:x="902" fg:w="1"/><text x="73.7028%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="73.5342%" y="485" width="0.0814%" height="15" fill="rgb(228,14,23)" fg:x="903" fg:w="1"/><text x="73.7842%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="73.5342%" y="469" width="0.0814%" height="15" fill="rgb(247,116,52)" fg:x="903" fg:w="1"/><text x="73.7842%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.6156%" y="485" width="0.1629%" height="15" fill="rgb(216,149,33)" fg:x="904" fg:w="2"/><text x="73.8656%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.7785%" y="437" width="0.0814%" height="15" fill="rgb(238,142,29)" fg:x="906" fg:w="1"/><text x="74.0285%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="73.7785%" y="421" width="0.0814%" height="15" fill="rgb(224,83,40)" fg:x="906" fg:w="1"/><text x="74.0285%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7785%" y="405" width="0.0814%" height="15" fill="rgb(234,165,11)" fg:x="906" fg:w="1"/><text x="74.0285%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8599%" y="405" width="0.0814%" height="15" fill="rgb(215,96,23)" fg:x="907" fg:w="1"/><text x="74.1099%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8599%" y="389" width="0.0814%" height="15" fill="rgb(233,179,26)" fg:x="907" fg:w="1"/><text x="74.1099%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8599%" y="373" width="0.0814%" height="15" fill="rgb(225,129,33)" fg:x="907" fg:w="1"/><text x="74.1099%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.8599%" y="421" width="0.1629%" height="15" fill="rgb(237,49,13)" fg:x="907" fg:w="2"/><text x="74.1099%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9414%" y="405" width="0.0814%" height="15" fill="rgb(211,3,31)" fg:x="908" fg:w="1"/><text x="74.1914%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="73.7785%" y="453" width="0.4072%" height="15" fill="rgb(216,152,19)" fg:x="906" fg:w="5"/><text x="74.0285%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="73.8599%" y="437" width="0.3257%" height="15" fill="rgb(251,121,35)" fg:x="907" fg:w="4"/><text x="74.1099%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.0228%" y="421" width="0.1629%" height="15" fill="rgb(210,217,47)" fg:x="909" fg:w="2"/><text x="74.2728%" y="431.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (26 samples, 2.12%)</title><rect x="72.1498%" y="549" width="2.1173%" height="15" fill="rgb(244,116,22)" fg:x="886" fg:w="26"/><text x="72.3998%" y="559.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (10 samples, 0.81%)</title><rect x="73.4528%" y="533" width="0.8143%" height="15" fill="rgb(228,17,21)" fg:x="902" fg:w="10"/><text x="73.7028%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.81%)</title><rect x="73.4528%" y="517" width="0.8143%" height="15" fill="rgb(240,149,34)" fg:x="902" fg:w="10"/><text x="73.7028%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.81%)</title><rect x="73.4528%" y="501" width="0.8143%" height="15" fill="rgb(208,125,47)" fg:x="902" fg:w="10"/><text x="73.7028%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="73.7785%" y="485" width="0.4886%" height="15" fill="rgb(249,186,39)" fg:x="906" fg:w="6"/><text x="74.0285%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="73.7785%" y="469" width="0.4886%" height="15" fill="rgb(240,220,33)" fg:x="906" fg:w="6"/><text x="74.0285%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.1857%" y="453" width="0.0814%" height="15" fill="rgb(243,110,23)" fg:x="911" fg:w="1"/><text x="74.4357%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1857%" y="437" width="0.0814%" height="15" fill="rgb(219,163,46)" fg:x="911" fg:w="1"/><text x="74.4357%" y="447.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (59 samples, 4.80%)</title><rect x="69.5440%" y="629" width="4.8046%" height="15" fill="rgb(216,126,30)" fg:x="854" fg:w="59"/><text x="69.7940%" y="639.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (57 samples, 4.64%)</title><rect x="69.7068%" y="613" width="4.6417%" height="15" fill="rgb(208,139,11)" fg:x="856" fg:w="57"/><text x="69.9568%" y="623.50">core:..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (29 samples, 2.36%)</title><rect x="71.9870%" y="597" width="2.3616%" height="15" fill="rgb(213,118,36)" fg:x="884" fg:w="29"/><text x="72.2370%" y="607.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (29 samples, 2.36%)</title><rect x="71.9870%" y="581" width="2.3616%" height="15" fill="rgb(226,43,17)" fg:x="884" fg:w="29"/><text x="72.2370%" y="591.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (29 samples, 2.36%)</title><rect x="71.9870%" y="565" width="2.3616%" height="15" fill="rgb(254,217,4)" fg:x="884" fg:w="29"/><text x="72.2370%" y="575.50">pl..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="74.2671%" y="549" width="0.0814%" height="15" fill="rgb(210,134,47)" fg:x="912" fg:w="1"/><text x="74.5171%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2671%" y="533" width="0.0814%" height="15" fill="rgb(237,24,49)" fg:x="912" fg:w="1"/><text x="74.5171%" y="543.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (766 samples, 62.38%)</title><rect x="12.0521%" y="693" width="62.3779%" height="15" fill="rgb(251,39,46)" fg:x="148" fg:w="766"/><text x="12.3021%" y="703.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (66 samples, 5.37%)</title><rect x="69.0554%" y="677" width="5.3746%" height="15" fill="rgb(251,220,3)" fg:x="848" fg:w="66"/><text x="69.3054%" y="687.50">kernel:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (65 samples, 5.29%)</title><rect x="69.1368%" y="661" width="5.2932%" height="15" fill="rgb(228,105,12)" fg:x="849" fg:w="65"/><text x="69.3868%" y="671.50">&lt;plugi..</text></g><g><title>plugins_rpc::querying::have_surroundings (60 samples, 4.89%)</title><rect x="69.5440%" y="645" width="4.8860%" height="15" fill="rgb(215,196,1)" fg:x="854" fg:w="60"/><text x="69.7940%" y="655.50">plugin..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3485%" y="629" width="0.0814%" height="15" fill="rgb(214,33,39)" fg:x="913" fg:w="1"/><text x="74.5985%" y="639.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.4300%" y="469" width="0.0814%" height="15" fill="rgb(220,19,52)" fg:x="914" fg:w="1"/><text x="74.6800%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.4300%" y="453" width="0.0814%" height="15" fill="rgb(221,78,38)" fg:x="914" fg:w="1"/><text x="74.6800%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.4300%" y="437" width="0.0814%" height="15" fill="rgb(253,30,16)" fg:x="914" fg:w="1"/><text x="74.6800%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.4300%" y="421" width="0.0814%" height="15" fill="rgb(242,65,0)" fg:x="914" fg:w="1"/><text x="74.6800%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="74.4300%" y="405" width="0.0814%" height="15" fill="rgb(235,201,12)" fg:x="914" fg:w="1"/><text x="74.6800%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="74.4300%" y="389" width="0.0814%" height="15" fill="rgb(233,161,9)" fg:x="914" fg:w="1"/><text x="74.6800%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.4300%" y="501" width="0.1629%" height="15" fill="rgb(241,207,41)" fg:x="914" fg:w="2"/><text x="74.6800%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.4300%" y="485" width="0.1629%" height="15" fill="rgb(212,69,46)" fg:x="914" fg:w="2"/><text x="74.6800%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="74.5114%" y="469" width="0.0814%" height="15" fill="rgb(239,69,45)" fg:x="915" fg:w="1"/><text x="74.7614%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.5114%" y="453" width="0.0814%" height="15" fill="rgb(242,117,48)" fg:x="915" fg:w="1"/><text x="74.7614%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.5114%" y="437" width="0.0814%" height="15" fill="rgb(228,41,36)" fg:x="915" fg:w="1"/><text x="74.7614%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5114%" y="421" width="0.0814%" height="15" fill="rgb(212,3,32)" fg:x="915" fg:w="1"/><text x="74.7614%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="74.5114%" y="405" width="0.0814%" height="15" fill="rgb(233,41,49)" fg:x="915" fg:w="1"/><text x="74.7614%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="74.5114%" y="389" width="0.0814%" height="15" fill="rgb(252,170,49)" fg:x="915" fg:w="1"/><text x="74.7614%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="74.5114%" y="373" width="0.0814%" height="15" fill="rgb(229,53,26)" fg:x="915" fg:w="1"/><text x="74.7614%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="74.4300%" y="613" width="0.2443%" height="15" fill="rgb(217,157,12)" fg:x="914" fg:w="3"/><text x="74.6800%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="74.4300%" y="597" width="0.2443%" height="15" fill="rgb(227,17,9)" fg:x="914" fg:w="3"/><text x="74.6800%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="74.4300%" y="581" width="0.2443%" height="15" fill="rgb(218,84,12)" fg:x="914" fg:w="3"/><text x="74.6800%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.4300%" y="565" width="0.2443%" height="15" fill="rgb(212,79,24)" fg:x="914" fg:w="3"/><text x="74.6800%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="74.4300%" y="549" width="0.2443%" height="15" fill="rgb(217,222,37)" fg:x="914" fg:w="3"/><text x="74.6800%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.4300%" y="533" width="0.2443%" height="15" fill="rgb(246,208,8)" fg:x="914" fg:w="3"/><text x="74.6800%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="74.4300%" y="517" width="0.2443%" height="15" fill="rgb(244,133,10)" fg:x="914" fg:w="3"/><text x="74.6800%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5928%" y="501" width="0.0814%" height="15" fill="rgb(209,219,41)" fg:x="916" fg:w="1"/><text x="74.8428%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5928%" y="485" width="0.0814%" height="15" fill="rgb(253,175,45)" fg:x="916" fg:w="1"/><text x="74.8428%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.5928%" y="469" width="0.0814%" height="15" fill="rgb(235,100,37)" fg:x="916" fg:w="1"/><text x="74.8428%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5928%" y="453" width="0.0814%" height="15" fill="rgb(225,87,19)" fg:x="916" fg:w="1"/><text x="74.8428%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5928%" y="437" width="0.0814%" height="15" fill="rgb(217,152,17)" fg:x="916" fg:w="1"/><text x="74.8428%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.7557%" y="437" width="0.0814%" height="15" fill="rgb(235,72,13)" fg:x="918" fg:w="1"/><text x="75.0057%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.49%)</title><rect x="74.4300%" y="677" width="0.4886%" height="15" fill="rgb(233,140,18)" fg:x="914" fg:w="6"/><text x="74.6800%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.49%)</title><rect x="74.4300%" y="661" width="0.4886%" height="15" fill="rgb(207,212,28)" fg:x="914" fg:w="6"/><text x="74.6800%" y="671.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="74.4300%" y="645" width="0.4886%" height="15" fill="rgb(220,130,25)" fg:x="914" fg:w="6"/><text x="74.6800%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.49%)</title><rect x="74.4300%" y="629" width="0.4886%" height="15" fill="rgb(205,55,34)" fg:x="914" fg:w="6"/><text x="74.6800%" y="639.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="74.6743%" y="613" width="0.2443%" height="15" fill="rgb(237,54,35)" fg:x="917" fg:w="3"/><text x="74.9243%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="74.6743%" y="597" width="0.2443%" height="15" fill="rgb(208,67,23)" fg:x="917" fg:w="3"/><text x="74.9243%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.6743%" y="581" width="0.2443%" height="15" fill="rgb(206,207,50)" fg:x="917" fg:w="3"/><text x="74.9243%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="74.6743%" y="565" width="0.2443%" height="15" fill="rgb(213,211,42)" fg:x="917" fg:w="3"/><text x="74.9243%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.6743%" y="549" width="0.2443%" height="15" fill="rgb(252,197,50)" fg:x="917" fg:w="3"/><text x="74.9243%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="74.6743%" y="533" width="0.2443%" height="15" fill="rgb(251,211,41)" fg:x="917" fg:w="3"/><text x="74.9243%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.7557%" y="517" width="0.1629%" height="15" fill="rgb(229,211,5)" fg:x="918" fg:w="2"/><text x="75.0057%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.7557%" y="501" width="0.1629%" height="15" fill="rgb(239,36,31)" fg:x="918" fg:w="2"/><text x="75.0057%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.7557%" y="485" width="0.1629%" height="15" fill="rgb(248,67,31)" fg:x="918" fg:w="2"/><text x="75.0057%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.7557%" y="469" width="0.1629%" height="15" fill="rgb(249,55,44)" fg:x="918" fg:w="2"/><text x="75.0057%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="74.7557%" y="453" width="0.1629%" height="15" fill="rgb(216,82,12)" fg:x="918" fg:w="2"/><text x="75.0057%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8371%" y="437" width="0.0814%" height="15" fill="rgb(242,174,1)" fg:x="919" fg:w="1"/><text x="75.0871%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (777 samples, 63.27%)</title><rect x="11.8893%" y="741" width="63.2736%" height="15" fill="rgb(208,120,29)" fg:x="146" fg:w="777"/><text x="12.1393%" y="751.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (776 samples, 63.19%)</title><rect x="11.9707%" y="725" width="63.1922%" height="15" fill="rgb(221,105,43)" fg:x="147" fg:w="776"/><text x="12.2207%" y="735.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (776 samples, 63.19%)</title><rect x="11.9707%" y="709" width="63.1922%" height="15" fill="rgb(234,124,22)" fg:x="147" fg:w="776"/><text x="12.2207%" y="719.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (9 samples, 0.73%)</title><rect x="74.4300%" y="693" width="0.7329%" height="15" fill="rgb(212,23,30)" fg:x="914" fg:w="9"/><text x="74.6800%" y="703.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.24%)</title><rect x="74.9186%" y="677" width="0.2443%" height="15" fill="rgb(219,122,53)" fg:x="920" fg:w="3"/><text x="75.1686%" y="687.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="74.9186%" y="661" width="0.2443%" height="15" fill="rgb(248,84,24)" fg:x="920" fg:w="3"/><text x="75.1686%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="75.0000%" y="645" width="0.1629%" height="15" fill="rgb(245,115,18)" fg:x="921" fg:w="2"/><text x="75.2500%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="75.0000%" y="629" width="0.1629%" height="15" fill="rgb(227,176,51)" fg:x="921" fg:w="2"/><text x="75.2500%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.0000%" y="613" width="0.1629%" height="15" fill="rgb(229,63,42)" fg:x="921" fg:w="2"/><text x="75.2500%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.0814%" y="597" width="0.0814%" height="15" fill="rgb(247,202,24)" fg:x="922" fg:w="1"/><text x="75.3314%" y="607.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (778 samples, 63.36%)</title><rect x="11.8893%" y="821" width="63.3550%" height="15" fill="rgb(244,173,20)" fg:x="146" fg:w="778"/><text x="12.1393%" y="831.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (778 samples, 63.36%)</title><rect x="11.8893%" y="805" width="63.3550%" height="15" fill="rgb(242,81,47)" fg:x="146" fg:w="778"/><text x="12.1393%" y="815.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (778 samples, 63.36%)</title><rect x="11.8893%" y="789" width="63.3550%" height="15" fill="rgb(231,185,54)" fg:x="146" fg:w="778"/><text x="12.1393%" y="799.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (778 samples, 63.36%)</title><rect x="11.8893%" y="773" width="63.3550%" height="15" fill="rgb(243,55,32)" fg:x="146" fg:w="778"/><text x="12.1393%" y="783.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (778 samples, 63.36%)</title><rect x="11.8893%" y="757" width="63.3550%" height="15" fill="rgb(208,167,19)" fg:x="146" fg:w="778"/><text x="12.1393%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.1629%" y="741" width="0.0814%" height="15" fill="rgb(231,72,35)" fg:x="923" fg:w="1"/><text x="75.4129%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.1629%" y="725" width="0.0814%" height="15" fill="rgb(250,173,51)" fg:x="923" fg:w="1"/><text x="75.4129%" y="735.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.1629%" y="709" width="0.0814%" height="15" fill="rgb(209,5,22)" fg:x="923" fg:w="1"/><text x="75.4129%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (925 samples, 75.33%)</title><rect x="0.0000%" y="869" width="75.3257%" height="15" fill="rgb(250,174,19)" fg:x="0" fg:w="925"/><text x="0.2500%" y="879.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (925 samples, 75.33%)</title><rect x="0.0000%" y="853" width="75.3257%" height="15" fill="rgb(217,3,49)" fg:x="0" fg:w="925"/><text x="0.2500%" y="863.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (925 samples, 75.33%)</title><rect x="0.0000%" y="837" width="75.3257%" height="15" fill="rgb(218,225,5)" fg:x="0" fg:w="925"/><text x="0.2500%" y="847.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="75.2443%" y="821" width="0.0814%" height="15" fill="rgb(236,89,11)" fg:x="924" fg:w="1"/><text x="75.4943%" y="831.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2443%" y="805" width="0.0814%" height="15" fill="rgb(206,33,28)" fg:x="924" fg:w="1"/><text x="75.4943%" y="815.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.3257%" y="821" width="0.0814%" height="15" fill="rgb(241,56,42)" fg:x="925" fg:w="1"/><text x="75.5757%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (1 samples, 0.08%)</title><rect x="75.3257%" y="805" width="0.0814%" height="15" fill="rgb(222,44,11)" fg:x="925" fg:w="1"/><text x="75.5757%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.3257%" y="789" width="0.0814%" height="15" fill="rgb(234,111,20)" fg:x="925" fg:w="1"/><text x="75.5757%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="75.3257%" y="773" width="0.0814%" height="15" fill="rgb(237,77,6)" fg:x="925" fg:w="1"/><text x="75.5757%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3257%" y="757" width="0.0814%" height="15" fill="rgb(235,111,23)" fg:x="925" fg:w="1"/><text x="75.5757%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="75.4886%" y="789" width="0.0814%" height="15" fill="rgb(251,135,29)" fg:x="927" fg:w="1"/><text x="75.7386%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="75.4886%" y="773" width="0.0814%" height="15" fill="rgb(217,57,1)" fg:x="927" fg:w="1"/><text x="75.7386%" y="783.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="75.4886%" y="757" width="0.0814%" height="15" fill="rgb(249,119,31)" fg:x="927" fg:w="1"/><text x="75.7386%" y="767.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="75.4886%" y="741" width="0.0814%" height="15" fill="rgb(233,164,33)" fg:x="927" fg:w="1"/><text x="75.7386%" y="751.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="75.4886%" y="725" width="0.0814%" height="15" fill="rgb(250,217,43)" fg:x="927" fg:w="1"/><text x="75.7386%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="75.4886%" y="709" width="0.0814%" height="15" fill="rgb(232,154,50)" fg:x="927" fg:w="1"/><text x="75.7386%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.4886%" y="693" width="0.0814%" height="15" fill="rgb(227,190,8)" fg:x="927" fg:w="1"/><text x="75.7386%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4886%" y="677" width="0.0814%" height="15" fill="rgb(209,217,32)" fg:x="927" fg:w="1"/><text x="75.7386%" y="687.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.4886%" y="661" width="0.0814%" height="15" fill="rgb(243,203,50)" fg:x="927" fg:w="1"/><text x="75.7386%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4886%" y="645" width="0.0814%" height="15" fill="rgb(232,152,27)" fg:x="927" fg:w="1"/><text x="75.7386%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.4886%" y="629" width="0.0814%" height="15" fill="rgb(240,34,29)" fg:x="927" fg:w="1"/><text x="75.7386%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4886%" y="613" width="0.0814%" height="15" fill="rgb(215,185,52)" fg:x="927" fg:w="1"/><text x="75.7386%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.4886%" y="597" width="0.0814%" height="15" fill="rgb(240,89,49)" fg:x="927" fg:w="1"/><text x="75.7386%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="75.4886%" y="581" width="0.0814%" height="15" fill="rgb(225,12,52)" fg:x="927" fg:w="1"/><text x="75.7386%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4886%" y="565" width="0.0814%" height="15" fill="rgb(239,128,45)" fg:x="927" fg:w="1"/><text x="75.7386%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.4886%" y="549" width="0.0814%" height="15" fill="rgb(211,78,47)" fg:x="927" fg:w="1"/><text x="75.7386%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.4886%" y="533" width="0.0814%" height="15" fill="rgb(232,31,21)" fg:x="927" fg:w="1"/><text x="75.7386%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.5700%" y="757" width="0.0814%" height="15" fill="rgb(222,168,14)" fg:x="928" fg:w="1"/><text x="75.8200%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.5700%" y="741" width="0.0814%" height="15" fill="rgb(209,128,24)" fg:x="928" fg:w="1"/><text x="75.8200%" y="751.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.5700%" y="725" width="0.0814%" height="15" fill="rgb(249,35,13)" fg:x="928" fg:w="1"/><text x="75.8200%" y="735.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.5700%" y="709" width="0.0814%" height="15" fill="rgb(218,7,2)" fg:x="928" fg:w="1"/><text x="75.8200%" y="719.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.5700%" y="693" width="0.0814%" height="15" fill="rgb(238,107,27)" fg:x="928" fg:w="1"/><text x="75.8200%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.5700%" y="677" width="0.0814%" height="15" fill="rgb(217,88,38)" fg:x="928" fg:w="1"/><text x="75.8200%" y="687.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.5700%" y="661" width="0.0814%" height="15" fill="rgb(230,207,0)" fg:x="928" fg:w="1"/><text x="75.8200%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.5700%" y="645" width="0.0814%" height="15" fill="rgb(249,64,54)" fg:x="928" fg:w="1"/><text x="75.8200%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.5700%" y="629" width="0.0814%" height="15" fill="rgb(231,7,11)" fg:x="928" fg:w="1"/><text x="75.8200%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.5700%" y="613" width="0.0814%" height="15" fill="rgb(205,149,21)" fg:x="928" fg:w="1"/><text x="75.8200%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.5700%" y="597" width="0.0814%" height="15" fill="rgb(215,126,34)" fg:x="928" fg:w="1"/><text x="75.8200%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.5700%" y="581" width="0.0814%" height="15" fill="rgb(241,132,45)" fg:x="928" fg:w="1"/><text x="75.8200%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.5700%" y="565" width="0.0814%" height="15" fill="rgb(252,69,32)" fg:x="928" fg:w="1"/><text x="75.8200%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="75.5700%" y="549" width="0.0814%" height="15" fill="rgb(232,204,19)" fg:x="928" fg:w="1"/><text x="75.8200%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.5700%" y="533" width="0.0814%" height="15" fill="rgb(249,15,47)" fg:x="928" fg:w="1"/><text x="75.8200%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="75.5700%" y="517" width="0.0814%" height="15" fill="rgb(209,227,23)" fg:x="928" fg:w="1"/><text x="75.8200%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="75.5700%" y="501" width="0.0814%" height="15" fill="rgb(248,92,24)" fg:x="928" fg:w="1"/><text x="75.8200%" y="511.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="75.5700%" y="485" width="0.0814%" height="15" fill="rgb(247,59,2)" fg:x="928" fg:w="1"/><text x="75.8200%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.5700%" y="469" width="0.0814%" height="15" fill="rgb(221,30,5)" fg:x="928" fg:w="1"/><text x="75.8200%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.57%)</title><rect x="75.5700%" y="789" width="0.5700%" height="15" fill="rgb(208,108,53)" fg:x="928" fg:w="7"/><text x="75.8200%" y="799.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.57%)</title><rect x="75.5700%" y="773" width="0.5700%" height="15" fill="rgb(211,183,26)" fg:x="928" fg:w="7"/><text x="75.8200%" y="783.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.49%)</title><rect x="75.6515%" y="757" width="0.4886%" height="15" fill="rgb(232,132,4)" fg:x="929" fg:w="6"/><text x="75.9015%" y="767.50"></text></g><g><title>dlopen (6 samples, 0.49%)</title><rect x="75.6515%" y="741" width="0.4886%" height="15" fill="rgb(253,128,37)" fg:x="929" fg:w="6"/><text x="75.9015%" y="751.50"></text></g><g><title>_dl_catch_error (6 samples, 0.49%)</title><rect x="75.6515%" y="725" width="0.4886%" height="15" fill="rgb(221,58,24)" fg:x="929" fg:w="6"/><text x="75.9015%" y="735.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.49%)</title><rect x="75.6515%" y="709" width="0.4886%" height="15" fill="rgb(230,54,45)" fg:x="929" fg:w="6"/><text x="75.9015%" y="719.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.41%)</title><rect x="75.7329%" y="693" width="0.4072%" height="15" fill="rgb(254,21,18)" fg:x="930" fg:w="5"/><text x="75.9829%" y="703.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.41%)</title><rect x="75.7329%" y="677" width="0.4072%" height="15" fill="rgb(221,108,0)" fg:x="930" fg:w="5"/><text x="75.9829%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.81%)</title><rect x="75.4072%" y="821" width="0.8143%" height="15" fill="rgb(206,95,1)" fg:x="926" fg:w="10"/><text x="75.6572%" y="831.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.73%)</title><rect x="75.4886%" y="805" width="0.7329%" height="15" fill="rgb(237,52,5)" fg:x="927" fg:w="9"/><text x="75.7386%" y="815.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="76.1401%" y="789" width="0.0814%" height="15" fill="rgb(218,150,34)" fg:x="935" fg:w="1"/><text x="76.3901%" y="799.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="76.1401%" y="773" width="0.0814%" height="15" fill="rgb(235,194,28)" fg:x="935" fg:w="1"/><text x="76.3901%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2215%" y="805" width="0.0814%" height="15" fill="rgb(245,92,18)" fg:x="936" fg:w="1"/><text x="76.4715%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="76.2215%" y="789" width="0.0814%" height="15" fill="rgb(253,203,53)" fg:x="936" fg:w="1"/><text x="76.4715%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.3029%" y="709" width="0.0814%" height="15" fill="rgb(249,185,47)" fg:x="937" fg:w="1"/><text x="76.5529%" y="719.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="76.3029%" y="741" width="0.1629%" height="15" fill="rgb(252,194,52)" fg:x="937" fg:w="2"/><text x="76.5529%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.3029%" y="725" width="0.1629%" height="15" fill="rgb(210,53,36)" fg:x="937" fg:w="2"/><text x="76.5529%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3844%" y="709" width="0.0814%" height="15" fill="rgb(237,37,25)" fg:x="938" fg:w="1"/><text x="76.6344%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.3844%" y="693" width="0.0814%" height="15" fill="rgb(242,116,27)" fg:x="938" fg:w="1"/><text x="76.6344%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3844%" y="677" width="0.0814%" height="15" fill="rgb(213,185,26)" fg:x="938" fg:w="1"/><text x="76.6344%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.3844%" y="661" width="0.0814%" height="15" fill="rgb(225,204,8)" fg:x="938" fg:w="1"/><text x="76.6344%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.3844%" y="645" width="0.0814%" height="15" fill="rgb(254,111,37)" fg:x="938" fg:w="1"/><text x="76.6344%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.3844%" y="629" width="0.0814%" height="15" fill="rgb(242,35,9)" fg:x="938" fg:w="1"/><text x="76.6344%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.3844%" y="613" width="0.0814%" height="15" fill="rgb(232,138,49)" fg:x="938" fg:w="1"/><text x="76.6344%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (4 samples, 0.33%)</title><rect x="76.3029%" y="773" width="0.3257%" height="15" fill="rgb(247,56,4)" fg:x="937" fg:w="4"/><text x="76.5529%" y="783.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (4 samples, 0.33%)</title><rect x="76.3029%" y="757" width="0.3257%" height="15" fill="rgb(226,179,17)" fg:x="937" fg:w="4"/><text x="76.5529%" y="767.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="76.4658%" y="741" width="0.1629%" height="15" fill="rgb(216,163,45)" fg:x="939" fg:w="2"/><text x="76.7158%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="76.4658%" y="725" width="0.1629%" height="15" fill="rgb(211,157,3)" fg:x="939" fg:w="2"/><text x="76.7158%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.4658%" y="709" width="0.1629%" height="15" fill="rgb(234,44,20)" fg:x="939" fg:w="2"/><text x="76.7158%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.5472%" y="693" width="0.0814%" height="15" fill="rgb(254,138,23)" fg:x="940" fg:w="1"/><text x="76.7972%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5472%" y="677" width="0.0814%" height="15" fill="rgb(206,119,39)" fg:x="940" fg:w="1"/><text x="76.7972%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.5472%" y="661" width="0.0814%" height="15" fill="rgb(231,105,52)" fg:x="940" fg:w="1"/><text x="76.7972%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5472%" y="645" width="0.0814%" height="15" fill="rgb(250,20,5)" fg:x="940" fg:w="1"/><text x="76.7972%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.5472%" y="629" width="0.0814%" height="15" fill="rgb(215,198,30)" fg:x="940" fg:w="1"/><text x="76.7972%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5472%" y="613" width="0.0814%" height="15" fill="rgb(246,142,8)" fg:x="940" fg:w="1"/><text x="76.7972%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.5472%" y="597" width="0.0814%" height="15" fill="rgb(243,26,38)" fg:x="940" fg:w="1"/><text x="76.7972%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5472%" y="581" width="0.0814%" height="15" fill="rgb(205,133,28)" fg:x="940" fg:w="1"/><text x="76.7972%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.5472%" y="565" width="0.0814%" height="15" fill="rgb(212,34,0)" fg:x="940" fg:w="1"/><text x="76.7972%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5472%" y="549" width="0.0814%" height="15" fill="rgb(251,226,22)" fg:x="940" fg:w="1"/><text x="76.7972%" y="559.50"></text></g><g><title>engine::session::Session::flush (5 samples, 0.41%)</title><rect x="76.3029%" y="805" width="0.4072%" height="15" fill="rgb(252,119,9)" fg:x="937" fg:w="5"/><text x="76.5529%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (5 samples, 0.41%)</title><rect x="76.3029%" y="789" width="0.4072%" height="15" fill="rgb(213,150,50)" fg:x="937" fg:w="5"/><text x="76.5529%" y="799.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="76.6287%" y="773" width="0.0814%" height="15" fill="rgb(212,24,39)" fg:x="941" fg:w="1"/><text x="76.8787%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="76.6287%" y="757" width="0.0814%" height="15" fill="rgb(213,46,39)" fg:x="941" fg:w="1"/><text x="76.8787%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="76.6287%" y="741" width="0.0814%" height="15" fill="rgb(239,106,12)" fg:x="941" fg:w="1"/><text x="76.8787%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.6287%" y="725" width="0.0814%" height="15" fill="rgb(249,229,21)" fg:x="941" fg:w="1"/><text x="76.8787%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.6287%" y="709" width="0.0814%" height="15" fill="rgb(212,158,3)" fg:x="941" fg:w="1"/><text x="76.8787%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.6287%" y="693" width="0.0814%" height="15" fill="rgb(253,26,48)" fg:x="941" fg:w="1"/><text x="76.8787%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.6287%" y="677" width="0.0814%" height="15" fill="rgb(238,178,20)" fg:x="941" fg:w="1"/><text x="76.8787%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="76.6287%" y="661" width="0.0814%" height="15" fill="rgb(208,86,15)" fg:x="941" fg:w="1"/><text x="76.8787%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="76.6287%" y="645" width="0.0814%" height="15" fill="rgb(239,42,53)" fg:x="941" fg:w="1"/><text x="76.8787%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.6287%" y="629" width="0.0814%" height="15" fill="rgb(245,226,8)" fg:x="941" fg:w="1"/><text x="76.8787%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.6287%" y="613" width="0.0814%" height="15" fill="rgb(216,176,32)" fg:x="941" fg:w="1"/><text x="76.8787%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="76.7101%" y="805" width="0.0814%" height="15" fill="rgb(231,186,21)" fg:x="942" fg:w="1"/><text x="76.9601%" y="815.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="76.7101%" y="789" width="0.0814%" height="15" fill="rgb(205,95,49)" fg:x="942" fg:w="1"/><text x="76.9601%" y="799.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="76.7101%" y="773" width="0.0814%" height="15" fill="rgb(217,145,8)" fg:x="942" fg:w="1"/><text x="76.9601%" y="783.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="76.7101%" y="757" width="0.0814%" height="15" fill="rgb(239,144,48)" fg:x="942" fg:w="1"/><text x="76.9601%" y="767.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7101%" y="741" width="0.0814%" height="15" fill="rgb(214,189,23)" fg:x="942" fg:w="1"/><text x="76.9601%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.7101%" y="725" width="0.0814%" height="15" fill="rgb(229,157,17)" fg:x="942" fg:w="1"/><text x="76.9601%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7101%" y="709" width="0.0814%" height="15" fill="rgb(230,5,48)" fg:x="942" fg:w="1"/><text x="76.9601%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.7101%" y="693" width="0.0814%" height="15" fill="rgb(224,156,48)" fg:x="942" fg:w="1"/><text x="76.9601%" y="703.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="76.7915%" y="805" width="0.0814%" height="15" fill="rgb(223,14,29)" fg:x="943" fg:w="1"/><text x="77.0415%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.7915%" y="789" width="0.0814%" height="15" fill="rgb(229,96,36)" fg:x="943" fg:w="1"/><text x="77.0415%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.7915%" y="773" width="0.0814%" height="15" fill="rgb(231,102,53)" fg:x="943" fg:w="1"/><text x="77.0415%" y="783.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7915%" y="757" width="0.0814%" height="15" fill="rgb(210,77,38)" fg:x="943" fg:w="1"/><text x="77.0415%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7915%" y="741" width="0.0814%" height="15" fill="rgb(235,131,6)" fg:x="943" fg:w="1"/><text x="77.0415%" y="751.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="76.8730%" y="725" width="0.1629%" height="15" fill="rgb(252,55,38)" fg:x="944" fg:w="2"/><text x="77.1230%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8730%" y="709" width="0.1629%" height="15" fill="rgb(246,38,14)" fg:x="944" fg:w="2"/><text x="77.1230%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8730%" y="693" width="0.1629%" height="15" fill="rgb(242,27,5)" fg:x="944" fg:w="2"/><text x="77.1230%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8730%" y="677" width="0.1629%" height="15" fill="rgb(228,65,35)" fg:x="944" fg:w="2"/><text x="77.1230%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8730%" y="661" width="0.1629%" height="15" fill="rgb(245,93,11)" fg:x="944" fg:w="2"/><text x="77.1230%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.8730%" y="645" width="0.1629%" height="15" fill="rgb(213,1,31)" fg:x="944" fg:w="2"/><text x="77.1230%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="76.8730%" y="629" width="0.1629%" height="15" fill="rgb(237,205,14)" fg:x="944" fg:w="2"/><text x="77.1230%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9544%" y="613" width="0.0814%" height="15" fill="rgb(232,118,45)" fg:x="945" fg:w="1"/><text x="77.2044%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1173%" y="597" width="0.0814%" height="15" fill="rgb(218,5,6)" fg:x="947" fg:w="1"/><text x="77.3673%" y="607.50"></text></g><g><title>engine::session::Session::flush (5 samples, 0.41%)</title><rect x="76.8730%" y="789" width="0.4072%" height="15" fill="rgb(251,87,51)" fg:x="944" fg:w="5"/><text x="77.1230%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (5 samples, 0.41%)</title><rect x="76.8730%" y="773" width="0.4072%" height="15" fill="rgb(207,225,20)" fg:x="944" fg:w="5"/><text x="77.1230%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (5 samples, 0.41%)</title><rect x="76.8730%" y="757" width="0.4072%" height="15" fill="rgb(222,78,54)" fg:x="944" fg:w="5"/><text x="77.1230%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (5 samples, 0.41%)</title><rect x="76.8730%" y="741" width="0.4072%" height="15" fill="rgb(232,85,16)" fg:x="944" fg:w="5"/><text x="77.1230%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="77.0358%" y="725" width="0.2443%" height="15" fill="rgb(244,25,33)" fg:x="946" fg:w="3"/><text x="77.2858%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="77.0358%" y="709" width="0.2443%" height="15" fill="rgb(233,24,36)" fg:x="946" fg:w="3"/><text x="77.2858%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="77.0358%" y="693" width="0.2443%" height="15" fill="rgb(253,49,54)" fg:x="946" fg:w="3"/><text x="77.2858%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="77.0358%" y="677" width="0.2443%" height="15" fill="rgb(245,12,22)" fg:x="946" fg:w="3"/><text x="77.2858%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="77.0358%" y="661" width="0.2443%" height="15" fill="rgb(253,141,28)" fg:x="946" fg:w="3"/><text x="77.2858%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.1173%" y="645" width="0.1629%" height="15" fill="rgb(225,207,27)" fg:x="947" fg:w="2"/><text x="77.3673%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="77.1173%" y="629" width="0.1629%" height="15" fill="rgb(220,84,2)" fg:x="947" fg:w="2"/><text x="77.3673%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.1173%" y="613" width="0.1629%" height="15" fill="rgb(224,37,37)" fg:x="947" fg:w="2"/><text x="77.3673%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1987%" y="597" width="0.0814%" height="15" fill="rgb(220,143,18)" fg:x="948" fg:w="1"/><text x="77.4487%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1987%" y="581" width="0.0814%" height="15" fill="rgb(210,88,33)" fg:x="948" fg:w="1"/><text x="77.4487%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1987%" y="565" width="0.0814%" height="15" fill="rgb(219,87,51)" fg:x="948" fg:w="1"/><text x="77.4487%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.1987%" y="549" width="0.0814%" height="15" fill="rgb(211,7,35)" fg:x="948" fg:w="1"/><text x="77.4487%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1987%" y="533" width="0.0814%" height="15" fill="rgb(232,77,2)" fg:x="948" fg:w="1"/><text x="77.4487%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1987%" y="517" width="0.0814%" height="15" fill="rgb(249,94,25)" fg:x="948" fg:w="1"/><text x="77.4487%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1987%" y="501" width="0.0814%" height="15" fill="rgb(215,112,2)" fg:x="948" fg:w="1"/><text x="77.4487%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="77.3616%" y="757" width="0.0814%" height="15" fill="rgb(226,115,48)" fg:x="950" fg:w="1"/><text x="77.6116%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="77.3616%" y="741" width="0.0814%" height="15" fill="rgb(249,196,10)" fg:x="950" fg:w="1"/><text x="77.6116%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.3616%" y="725" width="0.0814%" height="15" fill="rgb(237,109,14)" fg:x="950" fg:w="1"/><text x="77.6116%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="77.3616%" y="709" width="0.0814%" height="15" fill="rgb(217,103,53)" fg:x="950" fg:w="1"/><text x="77.6116%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="77.3616%" y="693" width="0.0814%" height="15" fill="rgb(244,137,9)" fg:x="950" fg:w="1"/><text x="77.6116%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.3616%" y="677" width="0.0814%" height="15" fill="rgb(227,201,3)" fg:x="950" fg:w="1"/><text x="77.6116%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3616%" y="661" width="0.0814%" height="15" fill="rgb(243,94,6)" fg:x="950" fg:w="1"/><text x="77.6116%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.3616%" y="645" width="0.0814%" height="15" fill="rgb(235,118,5)" fg:x="950" fg:w="1"/><text x="77.6116%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3616%" y="629" width="0.0814%" height="15" fill="rgb(247,10,30)" fg:x="950" fg:w="1"/><text x="77.6116%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.3616%" y="613" width="0.0814%" height="15" fill="rgb(205,26,28)" fg:x="950" fg:w="1"/><text x="77.6116%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3616%" y="597" width="0.0814%" height="15" fill="rgb(206,99,35)" fg:x="950" fg:w="1"/><text x="77.6116%" y="607.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="77.4430%" y="757" width="0.0814%" height="15" fill="rgb(238,130,40)" fg:x="951" fg:w="1"/><text x="77.6930%" y="767.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="77.4430%" y="741" width="0.0814%" height="15" fill="rgb(224,126,31)" fg:x="951" fg:w="1"/><text x="77.6930%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4430%" y="725" width="0.0814%" height="15" fill="rgb(254,105,17)" fg:x="951" fg:w="1"/><text x="77.6930%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4430%" y="709" width="0.0814%" height="15" fill="rgb(216,87,36)" fg:x="951" fg:w="1"/><text x="77.6930%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4430%" y="693" width="0.0814%" height="15" fill="rgb(240,21,12)" fg:x="951" fg:w="1"/><text x="77.6930%" y="703.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.33%)</title><rect x="77.2801%" y="789" width="0.3257%" height="15" fill="rgb(245,192,34)" fg:x="949" fg:w="4"/><text x="77.5301%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.33%)</title><rect x="77.2801%" y="773" width="0.3257%" height="15" fill="rgb(226,100,49)" fg:x="949" fg:w="4"/><text x="77.5301%" y="783.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="77.5244%" y="757" width="0.0814%" height="15" fill="rgb(245,188,27)" fg:x="952" fg:w="1"/><text x="77.7744%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="77.5244%" y="741" width="0.0814%" height="15" fill="rgb(212,170,8)" fg:x="952" fg:w="1"/><text x="77.7744%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="77.5244%" y="725" width="0.0814%" height="15" fill="rgb(217,113,29)" fg:x="952" fg:w="1"/><text x="77.7744%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.5244%" y="709" width="0.0814%" height="15" fill="rgb(237,30,3)" fg:x="952" fg:w="1"/><text x="77.7744%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="77.5244%" y="693" width="0.0814%" height="15" fill="rgb(227,19,28)" fg:x="952" fg:w="1"/><text x="77.7744%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="77.5244%" y="677" width="0.0814%" height="15" fill="rgb(239,172,45)" fg:x="952" fg:w="1"/><text x="77.7744%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.5244%" y="661" width="0.0814%" height="15" fill="rgb(254,55,39)" fg:x="952" fg:w="1"/><text x="77.7744%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5244%" y="645" width="0.0814%" height="15" fill="rgb(249,208,12)" fg:x="952" fg:w="1"/><text x="77.7744%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.5244%" y="629" width="0.0814%" height="15" fill="rgb(240,52,13)" fg:x="952" fg:w="1"/><text x="77.7744%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5244%" y="613" width="0.0814%" height="15" fill="rgb(252,149,13)" fg:x="952" fg:w="1"/><text x="77.7744%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.5244%" y="597" width="0.0814%" height="15" fill="rgb(232,81,48)" fg:x="952" fg:w="1"/><text x="77.7744%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5244%" y="581" width="0.0814%" height="15" fill="rgb(222,144,2)" fg:x="952" fg:w="1"/><text x="77.7744%" y="591.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="77.5244%" y="565" width="0.0814%" height="15" fill="rgb(216,81,32)" fg:x="952" fg:w="1"/><text x="77.7744%" y="575.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="77.6059%" y="789" width="0.0814%" height="15" fill="rgb(244,78,51)" fg:x="953" fg:w="1"/><text x="77.8559%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.6059%" y="773" width="0.0814%" height="15" fill="rgb(217,66,21)" fg:x="953" fg:w="1"/><text x="77.8559%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.6059%" y="757" width="0.0814%" height="15" fill="rgb(247,101,42)" fg:x="953" fg:w="1"/><text x="77.8559%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="77.6059%" y="741" width="0.0814%" height="15" fill="rgb(227,81,39)" fg:x="953" fg:w="1"/><text x="77.8559%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.6059%" y="725" width="0.0814%" height="15" fill="rgb(220,223,44)" fg:x="953" fg:w="1"/><text x="77.8559%" y="735.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="77.6059%" y="709" width="0.0814%" height="15" fill="rgb(205,218,2)" fg:x="953" fg:w="1"/><text x="77.8559%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="77.6059%" y="693" width="0.0814%" height="15" fill="rgb(212,207,28)" fg:x="953" fg:w="1"/><text x="77.8559%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6059%" y="677" width="0.0814%" height="15" fill="rgb(224,12,41)" fg:x="953" fg:w="1"/><text x="77.8559%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6059%" y="661" width="0.0814%" height="15" fill="rgb(216,118,12)" fg:x="953" fg:w="1"/><text x="77.8559%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6059%" y="645" width="0.0814%" height="15" fill="rgb(252,97,46)" fg:x="953" fg:w="1"/><text x="77.8559%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6059%" y="629" width="0.0814%" height="15" fill="rgb(244,206,19)" fg:x="953" fg:w="1"/><text x="77.8559%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6059%" y="613" width="0.0814%" height="15" fill="rgb(231,84,31)" fg:x="953" fg:w="1"/><text x="77.8559%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6059%" y="597" width="0.0814%" height="15" fill="rgb(244,133,0)" fg:x="953" fg:w="1"/><text x="77.8559%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6059%" y="581" width="0.0814%" height="15" fill="rgb(223,15,50)" fg:x="953" fg:w="1"/><text x="77.8559%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="77.6873%" y="757" width="0.0814%" height="15" fill="rgb(250,118,49)" fg:x="954" fg:w="1"/><text x="77.9373%" y="767.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (20 samples, 1.63%)</title><rect x="76.2215%" y="821" width="1.6287%" height="15" fill="rgb(248,25,38)" fg:x="936" fg:w="20"/><text x="76.4715%" y="831.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (12 samples, 0.98%)</title><rect x="76.8730%" y="805" width="0.9772%" height="15" fill="rgb(215,70,14)" fg:x="944" fg:w="12"/><text x="77.1230%" y="815.50"></text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="77.6873%" y="789" width="0.1629%" height="15" fill="rgb(215,28,15)" fg:x="954" fg:w="2"/><text x="77.9373%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="77.6873%" y="773" width="0.1629%" height="15" fill="rgb(243,6,28)" fg:x="954" fg:w="2"/><text x="77.9373%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.7687%" y="757" width="0.0814%" height="15" fill="rgb(222,130,1)" fg:x="955" fg:w="1"/><text x="78.0187%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="77.7687%" y="741" width="0.0814%" height="15" fill="rgb(236,166,44)" fg:x="955" fg:w="1"/><text x="78.0187%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.7687%" y="725" width="0.0814%" height="15" fill="rgb(221,108,14)" fg:x="955" fg:w="1"/><text x="78.0187%" y="735.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="77.7687%" y="709" width="0.0814%" height="15" fill="rgb(252,3,45)" fg:x="955" fg:w="1"/><text x="78.0187%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="77.7687%" y="693" width="0.0814%" height="15" fill="rgb(237,68,30)" fg:x="955" fg:w="1"/><text x="78.0187%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.7687%" y="677" width="0.0814%" height="15" fill="rgb(211,79,22)" fg:x="955" fg:w="1"/><text x="78.0187%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7687%" y="661" width="0.0814%" height="15" fill="rgb(252,185,21)" fg:x="955" fg:w="1"/><text x="78.0187%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7687%" y="645" width="0.0814%" height="15" fill="rgb(225,189,26)" fg:x="955" fg:w="1"/><text x="78.0187%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.7687%" y="629" width="0.0814%" height="15" fill="rgb(241,30,40)" fg:x="955" fg:w="1"/><text x="78.0187%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7687%" y="613" width="0.0814%" height="15" fill="rgb(235,215,44)" fg:x="955" fg:w="1"/><text x="78.0187%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.8502%" y="805" width="0.0814%" height="15" fill="rgb(205,8,29)" fg:x="956" fg:w="1"/><text x="78.1002%" y="815.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="77.8502%" y="789" width="0.0814%" height="15" fill="rgb(241,137,42)" fg:x="956" fg:w="1"/><text x="78.1002%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="77.8502%" y="773" width="0.0814%" height="15" fill="rgb(237,155,2)" fg:x="956" fg:w="1"/><text x="78.1002%" y="783.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="77.8502%" y="757" width="0.0814%" height="15" fill="rgb(245,29,42)" fg:x="956" fg:w="1"/><text x="78.1002%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="77.8502%" y="741" width="0.0814%" height="15" fill="rgb(234,101,35)" fg:x="956" fg:w="1"/><text x="78.1002%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="77.8502%" y="725" width="0.0814%" height="15" fill="rgb(228,64,37)" fg:x="956" fg:w="1"/><text x="78.1002%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.8502%" y="709" width="0.0814%" height="15" fill="rgb(217,214,36)" fg:x="956" fg:w="1"/><text x="78.1002%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.9316%" y="741" width="0.0814%" height="15" fill="rgb(243,70,3)" fg:x="957" fg:w="1"/><text x="78.1816%" y="751.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.9316%" y="725" width="0.0814%" height="15" fill="rgb(253,158,52)" fg:x="957" fg:w="1"/><text x="78.1816%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.9316%" y="709" width="0.0814%" height="15" fill="rgb(234,111,54)" fg:x="957" fg:w="1"/><text x="78.1816%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.9316%" y="693" width="0.0814%" height="15" fill="rgb(217,70,32)" fg:x="957" fg:w="1"/><text x="78.1816%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.9316%" y="677" width="0.0814%" height="15" fill="rgb(234,18,33)" fg:x="957" fg:w="1"/><text x="78.1816%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.9316%" y="661" width="0.0814%" height="15" fill="rgb(234,12,49)" fg:x="957" fg:w="1"/><text x="78.1816%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9316%" y="645" width="0.0814%" height="15" fill="rgb(236,10,21)" fg:x="957" fg:w="1"/><text x="78.1816%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.9316%" y="629" width="0.0814%" height="15" fill="rgb(248,182,45)" fg:x="957" fg:w="1"/><text x="78.1816%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="78.0130%" y="677" width="0.2443%" height="15" fill="rgb(217,95,36)" fg:x="958" fg:w="3"/><text x="78.2630%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="78.0945%" y="661" width="0.1629%" height="15" fill="rgb(212,110,31)" fg:x="959" fg:w="2"/><text x="78.3445%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="78.0945%" y="645" width="0.1629%" height="15" fill="rgb(206,32,53)" fg:x="959" fg:w="2"/><text x="78.3445%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.1759%" y="629" width="0.0814%" height="15" fill="rgb(246,141,37)" fg:x="960" fg:w="1"/><text x="78.4259%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="78.0130%" y="725" width="0.3257%" height="15" fill="rgb(219,16,7)" fg:x="958" fg:w="4"/><text x="78.2630%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="78.0130%" y="709" width="0.3257%" height="15" fill="rgb(230,205,45)" fg:x="958" fg:w="4"/><text x="78.2630%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="78.0130%" y="693" width="0.3257%" height="15" fill="rgb(231,43,49)" fg:x="958" fg:w="4"/><text x="78.2630%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2573%" y="677" width="0.0814%" height="15" fill="rgb(212,106,34)" fg:x="961" fg:w="1"/><text x="78.5073%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.2573%" y="661" width="0.0814%" height="15" fill="rgb(206,83,17)" fg:x="961" fg:w="1"/><text x="78.5073%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.2573%" y="645" width="0.0814%" height="15" fill="rgb(244,154,49)" fg:x="961" fg:w="1"/><text x="78.5073%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.2573%" y="629" width="0.0814%" height="15" fill="rgb(244,149,49)" fg:x="961" fg:w="1"/><text x="78.5073%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="77.9316%" y="757" width="0.4886%" height="15" fill="rgb(227,134,18)" fg:x="957" fg:w="6"/><text x="78.1816%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="78.0130%" y="741" width="0.4072%" height="15" fill="rgb(237,116,36)" fg:x="958" fg:w="5"/><text x="78.2630%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.3388%" y="725" width="0.0814%" height="15" fill="rgb(205,129,40)" fg:x="962" fg:w="1"/><text x="78.5888%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.3388%" y="709" width="0.0814%" height="15" fill="rgb(236,178,4)" fg:x="962" fg:w="1"/><text x="78.5888%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4202%" y="757" width="0.0814%" height="15" fill="rgb(251,76,53)" fg:x="963" fg:w="1"/><text x="78.6702%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.4202%" y="741" width="0.0814%" height="15" fill="rgb(242,92,40)" fg:x="963" fg:w="1"/><text x="78.6702%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4202%" y="725" width="0.0814%" height="15" fill="rgb(209,45,30)" fg:x="963" fg:w="1"/><text x="78.6702%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4202%" y="709" width="0.0814%" height="15" fill="rgb(218,157,36)" fg:x="963" fg:w="1"/><text x="78.6702%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4202%" y="693" width="0.0814%" height="15" fill="rgb(222,186,16)" fg:x="963" fg:w="1"/><text x="78.6702%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4202%" y="677" width="0.0814%" height="15" fill="rgb(254,72,35)" fg:x="963" fg:w="1"/><text x="78.6702%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4202%" y="661" width="0.0814%" height="15" fill="rgb(224,25,35)" fg:x="963" fg:w="1"/><text x="78.6702%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.4202%" y="645" width="0.0814%" height="15" fill="rgb(206,135,52)" fg:x="963" fg:w="1"/><text x="78.6702%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.4202%" y="629" width="0.0814%" height="15" fill="rgb(229,174,47)" fg:x="963" fg:w="1"/><text x="78.6702%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4202%" y="613" width="0.0814%" height="15" fill="rgb(242,184,21)" fg:x="963" fg:w="1"/><text x="78.6702%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="78.5016%" y="741" width="0.0814%" height="15" fill="rgb(213,22,45)" fg:x="964" fg:w="1"/><text x="78.7516%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5016%" y="725" width="0.0814%" height="15" fill="rgb(237,81,54)" fg:x="964" fg:w="1"/><text x="78.7516%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.5016%" y="709" width="0.0814%" height="15" fill="rgb(248,177,18)" fg:x="964" fg:w="1"/><text x="78.7516%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5016%" y="693" width="0.0814%" height="15" fill="rgb(254,31,16)" fg:x="964" fg:w="1"/><text x="78.7516%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5016%" y="677" width="0.0814%" height="15" fill="rgb(235,20,31)" fg:x="964" fg:w="1"/><text x="78.7516%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5016%" y="661" width="0.0814%" height="15" fill="rgb(240,56,43)" fg:x="964" fg:w="1"/><text x="78.7516%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5016%" y="645" width="0.0814%" height="15" fill="rgb(237,197,51)" fg:x="964" fg:w="1"/><text x="78.7516%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5016%" y="629" width="0.0814%" height="15" fill="rgb(241,162,44)" fg:x="964" fg:w="1"/><text x="78.7516%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.5016%" y="613" width="0.0814%" height="15" fill="rgb(224,23,20)" fg:x="964" fg:w="1"/><text x="78.7516%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.5016%" y="597" width="0.0814%" height="15" fill="rgb(250,109,34)" fg:x="964" fg:w="1"/><text x="78.7516%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6645%" y="709" width="0.0814%" height="15" fill="rgb(214,175,50)" fg:x="966" fg:w="1"/><text x="78.9145%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.8274%" y="613" width="0.1629%" height="15" fill="rgb(213,182,5)" fg:x="968" fg:w="2"/><text x="79.0774%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.9088%" y="597" width="0.0814%" height="15" fill="rgb(209,199,19)" fg:x="969" fg:w="1"/><text x="79.1588%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9088%" y="581" width="0.0814%" height="15" fill="rgb(236,224,42)" fg:x="969" fg:w="1"/><text x="79.1588%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="78.8274%" y="661" width="0.2443%" height="15" fill="rgb(246,226,29)" fg:x="968" fg:w="3"/><text x="79.0774%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="78.8274%" y="645" width="0.2443%" height="15" fill="rgb(227,223,11)" fg:x="968" fg:w="3"/><text x="79.0774%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="78.8274%" y="629" width="0.2443%" height="15" fill="rgb(219,7,51)" fg:x="968" fg:w="3"/><text x="79.0774%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9902%" y="613" width="0.0814%" height="15" fill="rgb(245,167,10)" fg:x="970" fg:w="1"/><text x="79.2402%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="78.9902%" y="597" width="0.0814%" height="15" fill="rgb(237,224,16)" fg:x="970" fg:w="1"/><text x="79.2402%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="78.9902%" y="581" width="0.0814%" height="15" fill="rgb(226,132,13)" fg:x="970" fg:w="1"/><text x="79.2402%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="78.5831%" y="741" width="0.6515%" height="15" fill="rgb(214,140,3)" fg:x="965" fg:w="8"/><text x="78.8331%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="78.6645%" y="725" width="0.5700%" height="15" fill="rgb(221,177,4)" fg:x="966" fg:w="7"/><text x="78.9145%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="78.7459%" y="709" width="0.4886%" height="15" fill="rgb(238,139,3)" fg:x="967" fg:w="6"/><text x="78.9959%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="78.8274%" y="693" width="0.4072%" height="15" fill="rgb(216,17,39)" fg:x="968" fg:w="5"/><text x="79.0774%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="78.8274%" y="677" width="0.4072%" height="15" fill="rgb(238,120,9)" fg:x="968" fg:w="5"/><text x="79.0774%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="79.0717%" y="661" width="0.1629%" height="15" fill="rgb(244,92,53)" fg:x="971" fg:w="2"/><text x="79.3217%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.1531%" y="645" width="0.0814%" height="15" fill="rgb(224,148,33)" fg:x="972" fg:w="1"/><text x="79.4031%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1531%" y="629" width="0.0814%" height="15" fill="rgb(243,6,36)" fg:x="972" fg:w="1"/><text x="79.4031%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.1531%" y="613" width="0.0814%" height="15" fill="rgb(230,102,11)" fg:x="972" fg:w="1"/><text x="79.4031%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1531%" y="597" width="0.0814%" height="15" fill="rgb(234,148,36)" fg:x="972" fg:w="1"/><text x="79.4031%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.1531%" y="581" width="0.0814%" height="15" fill="rgb(251,153,25)" fg:x="972" fg:w="1"/><text x="79.4031%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.3160%" y="645" width="0.0814%" height="15" fill="rgb(215,129,8)" fg:x="974" fg:w="1"/><text x="79.5660%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.3160%" y="629" width="0.0814%" height="15" fill="rgb(224,128,35)" fg:x="974" fg:w="1"/><text x="79.5660%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.3160%" y="613" width="0.0814%" height="15" fill="rgb(237,56,52)" fg:x="974" fg:w="1"/><text x="79.5660%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.3160%" y="597" width="0.0814%" height="15" fill="rgb(234,213,19)" fg:x="974" fg:w="1"/><text x="79.5660%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.3160%" y="581" width="0.0814%" height="15" fill="rgb(252,82,23)" fg:x="974" fg:w="1"/><text x="79.5660%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.3160%" y="565" width="0.0814%" height="15" fill="rgb(254,201,21)" fg:x="974" fg:w="1"/><text x="79.5660%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.3160%" y="549" width="0.0814%" height="15" fill="rgb(250,186,11)" fg:x="974" fg:w="1"/><text x="79.5660%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.3160%" y="533" width="0.0814%" height="15" fill="rgb(211,174,5)" fg:x="974" fg:w="1"/><text x="79.5660%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.3160%" y="517" width="0.0814%" height="15" fill="rgb(214,121,10)" fg:x="974" fg:w="1"/><text x="79.5660%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3160%" y="501" width="0.0814%" height="15" fill="rgb(241,66,2)" fg:x="974" fg:w="1"/><text x="79.5660%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (19 samples, 1.55%)</title><rect x="77.9316%" y="789" width="1.5472%" height="15" fill="rgb(220,167,19)" fg:x="957" fg:w="19"/><text x="78.1816%" y="799.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (19 samples, 1.55%)</title><rect x="77.9316%" y="773" width="1.5472%" height="15" fill="rgb(231,54,50)" fg:x="957" fg:w="19"/><text x="78.1816%" y="783.50"></text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.98%)</title><rect x="78.5016%" y="757" width="0.9772%" height="15" fill="rgb(239,217,53)" fg:x="964" fg:w="12"/><text x="78.7516%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="79.2345%" y="741" width="0.2443%" height="15" fill="rgb(248,8,0)" fg:x="973" fg:w="3"/><text x="79.4845%" y="751.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="79.2345%" y="725" width="0.2443%" height="15" fill="rgb(229,118,37)" fg:x="973" fg:w="3"/><text x="79.4845%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="79.2345%" y="709" width="0.2443%" height="15" fill="rgb(253,223,43)" fg:x="973" fg:w="3"/><text x="79.4845%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="79.2345%" y="693" width="0.2443%" height="15" fill="rgb(211,77,36)" fg:x="973" fg:w="3"/><text x="79.4845%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="79.2345%" y="677" width="0.2443%" height="15" fill="rgb(219,3,53)" fg:x="973" fg:w="3"/><text x="79.4845%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="79.2345%" y="661" width="0.2443%" height="15" fill="rgb(244,45,42)" fg:x="973" fg:w="3"/><text x="79.4845%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3974%" y="645" width="0.0814%" height="15" fill="rgb(225,95,27)" fg:x="975" fg:w="1"/><text x="79.6474%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3974%" y="629" width="0.0814%" height="15" fill="rgb(207,74,8)" fg:x="975" fg:w="1"/><text x="79.6474%" y="639.50"></text></g><g><title>engine::session::Session::close (21 samples, 1.71%)</title><rect x="77.8502%" y="821" width="1.7101%" height="15" fill="rgb(243,63,36)" fg:x="956" fg:w="21"/><text x="78.1002%" y="831.50"></text></g><g><title>engine::session::Session::save_entity_changes (20 samples, 1.63%)</title><rect x="77.9316%" y="805" width="1.6287%" height="15" fill="rgb(211,180,12)" fg:x="957" fg:w="20"/><text x="78.1816%" y="815.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="79.4788%" y="789" width="0.0814%" height="15" fill="rgb(254,166,49)" fg:x="976" fg:w="1"/><text x="79.7288%" y="799.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="79.4788%" y="773" width="0.0814%" height="15" fill="rgb(205,19,0)" fg:x="976" fg:w="1"/><text x="79.7288%" y="783.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="79.4788%" y="757" width="0.0814%" height="15" fill="rgb(224,172,32)" fg:x="976" fg:w="1"/><text x="79.7288%" y="767.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="79.4788%" y="741" width="0.0814%" height="15" fill="rgb(254,136,30)" fg:x="976" fg:w="1"/><text x="79.7288%" y="751.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="79.4788%" y="725" width="0.0814%" height="15" fill="rgb(246,19,35)" fg:x="976" fg:w="1"/><text x="79.7288%" y="735.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="79.4788%" y="709" width="0.0814%" height="15" fill="rgb(219,24,36)" fg:x="976" fg:w="1"/><text x="79.7288%" y="719.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="79.4788%" y="693" width="0.0814%" height="15" fill="rgb(251,55,1)" fg:x="976" fg:w="1"/><text x="79.7288%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="79.6417%" y="629" width="0.0814%" height="15" fill="rgb(218,117,39)" fg:x="978" fg:w="1"/><text x="79.8917%" y="639.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="79.6417%" y="613" width="0.0814%" height="15" fill="rgb(248,169,11)" fg:x="978" fg:w="1"/><text x="79.8917%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="79.6417%" y="597" width="0.0814%" height="15" fill="rgb(244,40,44)" fg:x="978" fg:w="1"/><text x="79.8917%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6417%" y="581" width="0.0814%" height="15" fill="rgb(234,62,37)" fg:x="978" fg:w="1"/><text x="79.8917%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6417%" y="565" width="0.0814%" height="15" fill="rgb(207,117,42)" fg:x="978" fg:w="1"/><text x="79.8917%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.6417%" y="549" width="0.0814%" height="15" fill="rgb(213,43,2)" fg:x="978" fg:w="1"/><text x="79.8917%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (2 samples, 0.16%)</title><rect x="79.7231%" y="581" width="0.1629%" height="15" fill="rgb(244,202,51)" fg:x="979" fg:w="2"/><text x="79.9731%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.7231%" y="565" width="0.1629%" height="15" fill="rgb(253,174,46)" fg:x="979" fg:w="2"/><text x="79.9731%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="79.7231%" y="549" width="0.1629%" height="15" fill="rgb(251,23,1)" fg:x="979" fg:w="2"/><text x="79.9731%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8046%" y="533" width="0.0814%" height="15" fill="rgb(253,26,1)" fg:x="980" fg:w="1"/><text x="80.0546%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8046%" y="517" width="0.0814%" height="15" fill="rgb(216,89,31)" fg:x="980" fg:w="1"/><text x="80.0546%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8046%" y="501" width="0.0814%" height="15" fill="rgb(209,109,5)" fg:x="980" fg:w="1"/><text x="80.0546%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.8046%" y="485" width="0.0814%" height="15" fill="rgb(229,63,13)" fg:x="980" fg:w="1"/><text x="80.0546%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="79.7231%" y="629" width="0.2443%" height="15" fill="rgb(238,137,54)" fg:x="979" fg:w="3"/><text x="79.9731%" y="639.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="79.7231%" y="613" width="0.2443%" height="15" fill="rgb(228,1,9)" fg:x="979" fg:w="3"/><text x="79.9731%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="79.7231%" y="597" width="0.2443%" height="15" fill="rgb(249,120,48)" fg:x="979" fg:w="3"/><text x="79.9731%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8860%" y="581" width="0.0814%" height="15" fill="rgb(209,72,36)" fg:x="981" fg:w="1"/><text x="80.1360%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8860%" y="565" width="0.0814%" height="15" fill="rgb(247,98,49)" fg:x="981" fg:w="1"/><text x="80.1360%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8860%" y="549" width="0.0814%" height="15" fill="rgb(233,75,36)" fg:x="981" fg:w="1"/><text x="80.1360%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8860%" y="533" width="0.0814%" height="15" fill="rgb(225,14,24)" fg:x="981" fg:w="1"/><text x="80.1360%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.8860%" y="517" width="0.0814%" height="15" fill="rgb(237,193,20)" fg:x="981" fg:w="1"/><text x="80.1360%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="79.9674%" y="581" width="0.1629%" height="15" fill="rgb(239,122,19)" fg:x="982" fg:w="2"/><text x="80.2174%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="79.9674%" y="565" width="0.1629%" height="15" fill="rgb(231,220,10)" fg:x="982" fg:w="2"/><text x="80.2174%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.0489%" y="549" width="0.0814%" height="15" fill="rgb(220,66,15)" fg:x="983" fg:w="1"/><text x="80.2989%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.0489%" y="533" width="0.0814%" height="15" fill="rgb(215,171,52)" fg:x="983" fg:w="1"/><text x="80.2989%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.0489%" y="517" width="0.0814%" height="15" fill="rgb(241,169,50)" fg:x="983" fg:w="1"/><text x="80.2989%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.0489%" y="501" width="0.0814%" height="15" fill="rgb(236,189,0)" fg:x="983" fg:w="1"/><text x="80.2989%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="80.0489%" y="485" width="0.0814%" height="15" fill="rgb(217,147,20)" fg:x="983" fg:w="1"/><text x="80.2989%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="80.0489%" y="469" width="0.0814%" height="15" fill="rgb(206,188,39)" fg:x="983" fg:w="1"/><text x="80.2989%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.0489%" y="453" width="0.0814%" height="15" fill="rgb(227,118,25)" fg:x="983" fg:w="1"/><text x="80.2989%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="80.0489%" y="437" width="0.0814%" height="15" fill="rgb(248,171,40)" fg:x="983" fg:w="1"/><text x="80.2989%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="80.0489%" y="421" width="0.0814%" height="15" fill="rgb(251,90,54)" fg:x="983" fg:w="1"/><text x="80.2989%" y="431.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="80.2117%" y="437" width="0.0814%" height="15" fill="rgb(234,11,46)" fg:x="985" fg:w="1"/><text x="80.4617%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="80.2117%" y="549" width="0.1629%" height="15" fill="rgb(229,134,13)" fg:x="985" fg:w="2"/><text x="80.4617%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="80.2117%" y="533" width="0.1629%" height="15" fill="rgb(223,129,3)" fg:x="985" fg:w="2"/><text x="80.4617%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="80.2117%" y="517" width="0.1629%" height="15" fill="rgb(221,124,13)" fg:x="985" fg:w="2"/><text x="80.4617%" y="527.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="80.2117%" y="501" width="0.1629%" height="15" fill="rgb(234,3,18)" fg:x="985" fg:w="2"/><text x="80.4617%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="80.2117%" y="485" width="0.1629%" height="15" fill="rgb(249,199,20)" fg:x="985" fg:w="2"/><text x="80.4617%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="80.2117%" y="469" width="0.1629%" height="15" fill="rgb(224,134,6)" fg:x="985" fg:w="2"/><text x="80.4617%" y="479.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="80.2117%" y="453" width="0.1629%" height="15" fill="rgb(254,83,26)" fg:x="985" fg:w="2"/><text x="80.4617%" y="463.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="80.2932%" y="437" width="0.0814%" height="15" fill="rgb(217,88,9)" fg:x="986" fg:w="1"/><text x="80.5432%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.3746%" y="501" width="0.0814%" height="15" fill="rgb(225,73,2)" fg:x="987" fg:w="1"/><text x="80.6246%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3746%" y="485" width="0.0814%" height="15" fill="rgb(226,44,39)" fg:x="987" fg:w="1"/><text x="80.6246%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.5375%" y="469" width="0.0814%" height="15" fill="rgb(228,53,17)" fg:x="989" fg:w="1"/><text x="80.7875%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.49%)</title><rect x="80.5375%" y="485" width="0.4886%" height="15" fill="rgb(212,27,27)" fg:x="989" fg:w="6"/><text x="80.7875%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.41%)</title><rect x="80.6189%" y="469" width="0.4072%" height="15" fill="rgb(241,50,6)" fg:x="990" fg:w="5"/><text x="80.8689%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="81.0261%" y="485" width="0.2443%" height="15" fill="rgb(225,28,51)" fg:x="995" fg:w="3"/><text x="81.2761%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="81.0261%" y="469" width="0.2443%" height="15" fill="rgb(215,33,16)" fg:x="995" fg:w="3"/><text x="81.2761%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.3518%" y="389" width="0.0814%" height="15" fill="rgb(243,40,39)" fg:x="999" fg:w="1"/><text x="81.6018%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.3518%" y="373" width="0.0814%" height="15" fill="rgb(225,11,42)" fg:x="999" fg:w="1"/><text x="81.6018%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.3518%" y="357" width="0.0814%" height="15" fill="rgb(241,220,38)" fg:x="999" fg:w="1"/><text x="81.6018%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="81.3518%" y="421" width="0.2443%" height="15" fill="rgb(244,52,35)" fg:x="999" fg:w="3"/><text x="81.6018%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="81.3518%" y="405" width="0.2443%" height="15" fill="rgb(246,42,46)" fg:x="999" fg:w="3"/><text x="81.6018%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="81.4332%" y="389" width="0.1629%" height="15" fill="rgb(205,184,13)" fg:x="1000" fg:w="2"/><text x="81.6832%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="81.5147%" y="373" width="0.0814%" height="15" fill="rgb(209,48,36)" fg:x="1001" fg:w="1"/><text x="81.7647%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 3.34%)</title><rect x="81.2704%" y="469" width="3.3388%" height="15" fill="rgb(244,34,51)" fg:x="998" fg:w="41"/><text x="81.5204%" y="479.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (41 samples, 3.34%)</title><rect x="81.2704%" y="453" width="3.3388%" height="15" fill="rgb(221,107,33)" fg:x="998" fg:w="41"/><text x="81.5204%" y="463.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (41 samples, 3.34%)</title><rect x="81.2704%" y="437" width="3.3388%" height="15" fill="rgb(224,203,12)" fg:x="998" fg:w="41"/><text x="81.5204%" y="447.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (37 samples, 3.01%)</title><rect x="81.5961%" y="421" width="3.0130%" height="15" fill="rgb(230,215,18)" fg:x="1002" fg:w="37"/><text x="81.8461%" y="431.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 3.01%)</title><rect x="81.5961%" y="405" width="3.0130%" height="15" fill="rgb(206,185,35)" fg:x="1002" fg:w="37"/><text x="81.8461%" y="415.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (37 samples, 3.01%)</title><rect x="81.5961%" y="389" width="3.0130%" height="15" fill="rgb(228,140,34)" fg:x="1002" fg:w="37"/><text x="81.8461%" y="399.50">all..</text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="84.6906%" y="453" width="0.0814%" height="15" fill="rgb(208,93,13)" fg:x="1040" fg:w="1"/><text x="84.9406%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (54 samples, 4.40%)</title><rect x="80.4560%" y="501" width="4.3974%" height="15" fill="rgb(221,193,39)" fg:x="988" fg:w="54"/><text x="80.7060%" y="511.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (44 samples, 3.58%)</title><rect x="81.2704%" y="485" width="3.5831%" height="15" fill="rgb(241,132,34)" fg:x="998" fg:w="44"/><text x="81.5204%" y="495.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="84.6091%" y="469" width="0.2443%" height="15" fill="rgb(221,141,10)" fg:x="1039" fg:w="3"/><text x="84.8591%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="84.7720%" y="453" width="0.0814%" height="15" fill="rgb(226,90,31)" fg:x="1041" fg:w="1"/><text x="85.0220%" y="463.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::into_item (1 samples, 0.08%)</title><rect x="84.8534%" y="437" width="0.0814%" height="15" fill="rgb(243,75,5)" fg:x="1042" fg:w="1"/><text x="85.1034%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="84.8534%" y="501" width="0.1629%" height="15" fill="rgb(227,156,21)" fg:x="1042" fg:w="2"/><text x="85.1034%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="84.8534%" y="485" width="0.1629%" height="15" fill="rgb(250,195,8)" fg:x="1042" fg:w="2"/><text x="85.1034%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="84.8534%" y="469" width="0.1629%" height="15" fill="rgb(220,134,5)" fg:x="1042" fg:w="2"/><text x="85.1034%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="84.8534%" y="453" width="0.1629%" height="15" fill="rgb(246,106,34)" fg:x="1042" fg:w="2"/><text x="85.1034%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="84.9349%" y="437" width="0.0814%" height="15" fill="rgb(205,1,4)" fg:x="1043" fg:w="1"/><text x="85.1849%" y="447.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (58 samples, 4.72%)</title><rect x="80.3746%" y="549" width="4.7231%" height="15" fill="rgb(224,151,29)" fg:x="987" fg:w="58"/><text x="80.6246%" y="559.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (58 samples, 4.72%)</title><rect x="80.3746%" y="533" width="4.7231%" height="15" fill="rgb(251,196,0)" fg:x="987" fg:w="58"/><text x="80.6246%" y="543.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (58 samples, 4.72%)</title><rect x="80.3746%" y="517" width="4.7231%" height="15" fill="rgb(212,127,0)" fg:x="987" fg:w="58"/><text x="80.6246%" y="527.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="85.0163%" y="501" width="0.0814%" height="15" fill="rgb(236,71,53)" fg:x="1044" fg:w="1"/><text x="85.2663%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.0163%" y="485" width="0.0814%" height="15" fill="rgb(227,99,0)" fg:x="1044" fg:w="1"/><text x="85.2663%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0163%" y="469" width="0.0814%" height="15" fill="rgb(239,89,21)" fg:x="1044" fg:w="1"/><text x="85.2663%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="85.0977%" y="549" width="0.0814%" height="15" fill="rgb(243,122,19)" fg:x="1045" fg:w="1"/><text x="85.3477%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="85.0977%" y="533" width="0.0814%" height="15" fill="rgb(229,192,45)" fg:x="1045" fg:w="1"/><text x="85.3477%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="85.0977%" y="517" width="0.0814%" height="15" fill="rgb(235,165,35)" fg:x="1045" fg:w="1"/><text x="85.3477%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="85.0977%" y="501" width="0.0814%" height="15" fill="rgb(253,202,0)" fg:x="1045" fg:w="1"/><text x="85.3477%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0977%" y="485" width="0.0814%" height="15" fill="rgb(235,51,20)" fg:x="1045" fg:w="1"/><text x="85.3477%" y="495.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (64 samples, 5.21%)</title><rect x="80.1303%" y="565" width="5.2117%" height="15" fill="rgb(218,95,46)" fg:x="984" fg:w="64"/><text x="80.3803%" y="575.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="85.1792%" y="549" width="0.1629%" height="15" fill="rgb(212,81,10)" fg:x="1046" fg:w="2"/><text x="85.4292%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="85.1792%" y="533" width="0.1629%" height="15" fill="rgb(240,59,0)" fg:x="1046" fg:w="2"/><text x="85.4292%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="85.1792%" y="517" width="0.1629%" height="15" fill="rgb(212,191,42)" fg:x="1046" fg:w="2"/><text x="85.4292%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="85.1792%" y="501" width="0.1629%" height="15" fill="rgb(233,140,3)" fg:x="1046" fg:w="2"/><text x="85.4292%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="85.2606%" y="485" width="0.0814%" height="15" fill="rgb(215,69,23)" fg:x="1047" fg:w="1"/><text x="85.5106%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="85.2606%" y="469" width="0.0814%" height="15" fill="rgb(240,202,20)" fg:x="1047" fg:w="1"/><text x="85.5106%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.3420%" y="469" width="0.0814%" height="15" fill="rgb(209,146,50)" fg:x="1048" fg:w="1"/><text x="85.5920%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.3420%" y="485" width="0.1629%" height="15" fill="rgb(253,102,54)" fg:x="1048" fg:w="2"/><text x="85.5920%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.4235%" y="469" width="0.0814%" height="15" fill="rgb(250,173,47)" fg:x="1049" fg:w="1"/><text x="85.6735%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="85.3420%" y="501" width="0.2443%" height="15" fill="rgb(232,142,7)" fg:x="1048" fg:w="3"/><text x="85.5920%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.5049%" y="485" width="0.0814%" height="15" fill="rgb(230,157,47)" fg:x="1050" fg:w="1"/><text x="85.7549%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="85.5863%" y="501" width="0.0814%" height="15" fill="rgb(214,177,35)" fg:x="1051" fg:w="1"/><text x="85.8363%" y="511.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.5863%" y="485" width="0.0814%" height="15" fill="rgb(234,119,46)" fg:x="1051" fg:w="1"/><text x="85.8363%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.5863%" y="469" width="0.0814%" height="15" fill="rgb(241,180,50)" fg:x="1051" fg:w="1"/><text x="85.8363%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.6678%" y="469" width="0.0814%" height="15" fill="rgb(221,54,25)" fg:x="1052" fg:w="1"/><text x="85.9178%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.98%)</title><rect x="85.6678%" y="485" width="0.9772%" height="15" fill="rgb(209,157,44)" fg:x="1052" fg:w="12"/><text x="85.9178%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.90%)</title><rect x="85.7492%" y="469" width="0.8958%" height="15" fill="rgb(246,115,41)" fg:x="1053" fg:w="11"/><text x="85.9992%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.5635%" y="453" width="0.0814%" height="15" fill="rgb(229,86,1)" fg:x="1063" fg:w="1"/><text x="86.8135%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="86.6450%" y="485" width="0.4072%" height="15" fill="rgb(240,108,53)" fg:x="1064" fg:w="5"/><text x="86.8950%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="86.6450%" y="469" width="0.4072%" height="15" fill="rgb(227,134,2)" fg:x="1064" fg:w="5"/><text x="86.8950%" y="479.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.33%)</title><rect x="87.1336%" y="453" width="0.3257%" height="15" fill="rgb(213,129,25)" fg:x="1070" fg:w="4"/><text x="87.3836%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.33%)</title><rect x="87.1336%" y="437" width="0.3257%" height="15" fill="rgb(226,35,21)" fg:x="1070" fg:w="4"/><text x="87.3836%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="87.2964%" y="421" width="0.1629%" height="15" fill="rgb(208,129,26)" fg:x="1072" fg:w="2"/><text x="87.5464%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3779%" y="405" width="0.0814%" height="15" fill="rgb(224,83,6)" fg:x="1073" fg:w="1"/><text x="87.6279%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.3779%" y="389" width="0.0814%" height="15" fill="rgb(227,52,39)" fg:x="1073" fg:w="1"/><text x="87.6279%" y="399.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.33%)</title><rect x="87.5407%" y="437" width="0.3257%" height="15" fill="rgb(241,30,17)" fg:x="1075" fg:w="4"/><text x="87.7907%" y="447.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.33%)</title><rect x="87.5407%" y="421" width="0.3257%" height="15" fill="rgb(246,186,42)" fg:x="1075" fg:w="4"/><text x="87.7907%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.57%)</title><rect x="87.4593%" y="453" width="0.5700%" height="15" fill="rgb(221,169,15)" fg:x="1074" fg:w="7"/><text x="87.7093%" y="463.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (2 samples, 0.16%)</title><rect x="87.8664%" y="437" width="0.1629%" height="15" fill="rgb(235,108,21)" fg:x="1079" fg:w="2"/><text x="88.1164%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.06%)</title><rect x="87.0521%" y="485" width="1.0586%" height="15" fill="rgb(219,148,30)" fg:x="1069" fg:w="13"/><text x="87.3021%" y="495.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.06%)</title><rect x="87.0521%" y="469" width="1.0586%" height="15" fill="rgb(220,109,5)" fg:x="1069" fg:w="13"/><text x="87.3021%" y="479.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="88.0293%" y="453" width="0.0814%" height="15" fill="rgb(213,203,48)" fg:x="1081" fg:w="1"/><text x="88.2793%" y="463.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="88.7622%" y="373" width="0.1629%" height="15" fill="rgb(244,71,33)" fg:x="1090" fg:w="2"/><text x="89.0122%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="88.9251%" y="373" width="0.0814%" height="15" fill="rgb(209,23,2)" fg:x="1092" fg:w="1"/><text x="89.1751%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.1694%" y="341" width="0.1629%" height="15" fill="rgb(219,97,7)" fg:x="1095" fg:w="2"/><text x="89.4194%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2508%" y="325" width="0.0814%" height="15" fill="rgb(216,161,23)" fg:x="1096" fg:w="1"/><text x="89.5008%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.2508%" y="309" width="0.0814%" height="15" fill="rgb(207,45,42)" fg:x="1096" fg:w="1"/><text x="89.5008%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.57%)</title><rect x="89.0065%" y="373" width="0.5700%" height="15" fill="rgb(241,61,4)" fg:x="1093" fg:w="7"/><text x="89.2565%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="89.0879%" y="357" width="0.4886%" height="15" fill="rgb(236,170,1)" fg:x="1094" fg:w="6"/><text x="89.3379%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="89.3322%" y="341" width="0.2443%" height="15" fill="rgb(239,72,5)" fg:x="1097" fg:w="3"/><text x="89.5822%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.4951%" y="325" width="0.0814%" height="15" fill="rgb(214,13,50)" fg:x="1099" fg:w="1"/><text x="89.7451%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="89.5765%" y="373" width="0.0814%" height="15" fill="rgb(224,88,9)" fg:x="1100" fg:w="1"/><text x="89.8265%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="89.5765%" y="357" width="0.0814%" height="15" fill="rgb(238,192,34)" fg:x="1100" fg:w="1"/><text x="89.8265%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.5765%" y="341" width="0.0814%" height="15" fill="rgb(217,203,50)" fg:x="1100" fg:w="1"/><text x="89.8265%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.18%)</title><rect x="89.6580%" y="373" width="3.1759%" height="15" fill="rgb(241,123,32)" fg:x="1101" fg:w="39"/><text x="89.9080%" y="383.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.18%)</title><rect x="89.6580%" y="357" width="3.1759%" height="15" fill="rgb(248,151,39)" fg:x="1101" fg:w="39"/><text x="89.9080%" y="367.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.18%)</title><rect x="89.6580%" y="341" width="3.1759%" height="15" fill="rgb(208,89,6)" fg:x="1101" fg:w="39"/><text x="89.9080%" y="351.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="92.8339%" y="373" width="0.0814%" height="15" fill="rgb(254,43,26)" fg:x="1140" fg:w="1"/><text x="93.0839%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.8339%" y="357" width="0.0814%" height="15" fill="rgb(216,158,13)" fg:x="1140" fg:w="1"/><text x="93.0839%" y="367.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="92.9153%" y="373" width="0.0814%" height="15" fill="rgb(212,47,37)" fg:x="1141" fg:w="1"/><text x="93.1653%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 4.97%)</title><rect x="88.1107%" y="469" width="4.9674%" height="15" fill="rgb(254,16,10)" fg:x="1082" fg:w="61"/><text x="88.3607%" y="479.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.97%)</title><rect x="88.1107%" y="453" width="4.9674%" height="15" fill="rgb(223,228,16)" fg:x="1082" fg:w="61"/><text x="88.3607%" y="463.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.97%)</title><rect x="88.1107%" y="437" width="4.9674%" height="15" fill="rgb(249,108,50)" fg:x="1082" fg:w="61"/><text x="88.3607%" y="447.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.97%)</title><rect x="88.1107%" y="421" width="4.9674%" height="15" fill="rgb(208,220,5)" fg:x="1082" fg:w="61"/><text x="88.3607%" y="431.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (61 samples, 4.97%)</title><rect x="88.1107%" y="405" width="4.9674%" height="15" fill="rgb(217,89,48)" fg:x="1082" fg:w="61"/><text x="88.3607%" y="415.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.97%)</title><rect x="88.1107%" y="389" width="4.9674%" height="15" fill="rgb(212,113,41)" fg:x="1082" fg:w="61"/><text x="88.3607%" y="399.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="92.9967%" y="373" width="0.0814%" height="15" fill="rgb(231,127,5)" fg:x="1142" fg:w="1"/><text x="93.2467%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.9967%" y="357" width="0.0814%" height="15" fill="rgb(217,141,17)" fg:x="1142" fg:w="1"/><text x="93.2467%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.1596%" y="453" width="0.0814%" height="15" fill="rgb(245,125,54)" fg:x="1144" fg:w="1"/><text x="93.4096%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.1596%" y="437" width="0.0814%" height="15" fill="rgb(248,125,3)" fg:x="1144" fg:w="1"/><text x="93.4096%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.1596%" y="421" width="0.0814%" height="15" fill="rgb(236,119,51)" fg:x="1144" fg:w="1"/><text x="93.4096%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.3225%" y="437" width="0.0814%" height="15" fill="rgb(239,99,8)" fg:x="1146" fg:w="1"/><text x="93.5725%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="93.2410%" y="453" width="0.2443%" height="15" fill="rgb(224,228,4)" fg:x="1145" fg:w="3"/><text x="93.4910%" y="463.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="93.4039%" y="437" width="0.0814%" height="15" fill="rgb(220,131,45)" fg:x="1147" fg:w="1"/><text x="93.6539%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="93.4853%" y="453" width="0.4072%" height="15" fill="rgb(215,62,5)" fg:x="1148" fg:w="5"/><text x="93.7353%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (102 samples, 8.31%)</title><rect x="85.6678%" y="501" width="8.3062%" height="15" fill="rgb(253,12,24)" fg:x="1052" fg:w="102"/><text x="85.9178%" y="511.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (72 samples, 5.86%)</title><rect x="88.1107%" y="485" width="5.8632%" height="15" fill="rgb(248,120,50)" fg:x="1082" fg:w="72"/><text x="88.3607%" y="495.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.90%)</title><rect x="93.0782%" y="469" width="0.8958%" height="15" fill="rgb(245,194,10)" fg:x="1143" fg:w="11"/><text x="93.3282%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="93.8925%" y="453" width="0.0814%" height="15" fill="rgb(241,149,38)" fg:x="1153" fg:w="1"/><text x="94.1425%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="93.9739%" y="501" width="0.0814%" height="15" fill="rgb(219,215,7)" fg:x="1154" fg:w="1"/><text x="94.2239%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="93.9739%" y="485" width="0.0814%" height="15" fill="rgb(208,120,31)" fg:x="1154" fg:w="1"/><text x="94.2239%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="93.9739%" y="469" width="0.0814%" height="15" fill="rgb(244,30,8)" fg:x="1154" fg:w="1"/><text x="94.2239%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="93.9739%" y="453" width="0.0814%" height="15" fill="rgb(238,35,44)" fg:x="1154" fg:w="1"/><text x="94.2239%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="93.9739%" y="437" width="0.0814%" height="15" fill="rgb(243,218,37)" fg:x="1154" fg:w="1"/><text x="94.2239%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="94.0554%" y="453" width="0.0814%" height="15" fill="rgb(218,169,10)" fg:x="1155" fg:w="1"/><text x="94.3054%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="94.0554%" y="437" width="0.0814%" height="15" fill="rgb(221,144,10)" fg:x="1155" fg:w="1"/><text x="94.3054%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="94.0554%" y="469" width="0.1629%" height="15" fill="rgb(226,41,38)" fg:x="1155" fg:w="2"/><text x="94.3054%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="94.1368%" y="453" width="0.0814%" height="15" fill="rgb(228,3,1)" fg:x="1156" fg:w="1"/><text x="94.3868%" y="463.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="94.1368%" y="437" width="0.0814%" height="15" fill="rgb(209,129,12)" fg:x="1156" fg:w="1"/><text x="94.3868%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="94.1368%" y="421" width="0.0814%" height="15" fill="rgb(213,136,33)" fg:x="1156" fg:w="1"/><text x="94.3868%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="94.2182%" y="469" width="0.1629%" height="15" fill="rgb(209,181,29)" fg:x="1157" fg:w="2"/><text x="94.4682%" y="479.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="94.2997%" y="453" width="0.0814%" height="15" fill="rgb(234,173,18)" fg:x="1158" fg:w="1"/><text x="94.5497%" y="463.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (112 samples, 9.12%)</title><rect x="85.3420%" y="549" width="9.1205%" height="15" fill="rgb(227,73,47)" fg:x="1048" fg:w="112"/><text x="85.5920%" y="559.50">&lt;regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (112 samples, 9.12%)</title><rect x="85.3420%" y="533" width="9.1205%" height="15" fill="rgb(234,9,34)" fg:x="1048" fg:w="112"/><text x="85.5920%" y="543.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (112 samples, 9.12%)</title><rect x="85.3420%" y="517" width="9.1205%" height="15" fill="rgb(235,172,15)" fg:x="1048" fg:w="112"/><text x="85.5920%" y="527.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="94.0554%" y="501" width="0.4072%" height="15" fill="rgb(245,61,2)" fg:x="1155" fg:w="5"/><text x="94.3054%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="94.0554%" y="485" width="0.4072%" height="15" fill="rgb(238,39,47)" fg:x="1155" fg:w="5"/><text x="94.3054%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="94.3811%" y="469" width="0.0814%" height="15" fill="rgb(234,37,24)" fg:x="1159" fg:w="1"/><text x="94.6311%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="94.3811%" y="453" width="0.0814%" height="15" fill="rgb(248,223,24)" fg:x="1159" fg:w="1"/><text x="94.6311%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.4625%" y="533" width="0.0814%" height="15" fill="rgb(223,12,15)" fg:x="1160" fg:w="1"/><text x="94.7125%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="94.4625%" y="549" width="0.1629%" height="15" fill="rgb(249,6,3)" fg:x="1160" fg:w="2"/><text x="94.7125%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="94.5440%" y="533" width="0.0814%" height="15" fill="rgb(237,105,33)" fg:x="1161" fg:w="1"/><text x="94.7940%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="94.5440%" y="517" width="0.0814%" height="15" fill="rgb(252,208,35)" fg:x="1161" fg:w="1"/><text x="94.7940%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.5440%" y="501" width="0.0814%" height="15" fill="rgb(215,181,35)" fg:x="1161" fg:w="1"/><text x="94.7940%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="94.6254%" y="533" width="0.0814%" height="15" fill="rgb(246,212,3)" fg:x="1162" fg:w="1"/><text x="94.8754%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="94.6254%" y="517" width="0.0814%" height="15" fill="rgb(247,156,24)" fg:x="1162" fg:w="1"/><text x="94.8754%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="94.6254%" y="501" width="0.0814%" height="15" fill="rgb(248,9,31)" fg:x="1162" fg:w="1"/><text x="94.8754%" y="511.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="94.6254%" y="485" width="0.0814%" height="15" fill="rgb(234,26,45)" fg:x="1162" fg:w="1"/><text x="94.8754%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.8697%" y="453" width="0.0814%" height="15" fill="rgb(249,11,32)" fg:x="1165" fg:w="1"/><text x="95.1197%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8697%" y="437" width="0.0814%" height="15" fill="rgb(249,162,33)" fg:x="1165" fg:w="1"/><text x="95.1197%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="94.9511%" y="453" width="0.1629%" height="15" fill="rgb(232,4,32)" fg:x="1166" fg:w="2"/><text x="95.2011%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.0326%" y="437" width="0.0814%" height="15" fill="rgb(212,5,45)" fg:x="1167" fg:w="1"/><text x="95.2826%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="95.1140%" y="453" width="0.0814%" height="15" fill="rgb(227,95,13)" fg:x="1168" fg:w="1"/><text x="95.3640%" y="463.50"></text></g><g><title>indefinite::rules::number::Number::check (122 samples, 9.93%)</title><rect x="85.3420%" y="565" width="9.9349%" height="15" fill="rgb(223,205,10)" fg:x="1048" fg:w="122"/><text x="85.5920%" y="575.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.65%)</title><rect x="94.6254%" y="549" width="0.6515%" height="15" fill="rgb(222,178,8)" fg:x="1162" fg:w="8"/><text x="94.8754%" y="559.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="94.7068%" y="533" width="0.5700%" height="15" fill="rgb(216,13,22)" fg:x="1163" fg:w="7"/><text x="94.9568%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="94.7068%" y="517" width="0.5700%" height="15" fill="rgb(240,167,12)" fg:x="1163" fg:w="7"/><text x="94.9568%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="94.7068%" y="501" width="0.5700%" height="15" fill="rgb(235,68,35)" fg:x="1163" fg:w="7"/><text x="94.9568%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="94.7068%" y="485" width="0.5700%" height="15" fill="rgb(253,40,27)" fg:x="1163" fg:w="7"/><text x="94.9568%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="94.7068%" y="469" width="0.5700%" height="15" fill="rgb(214,19,28)" fg:x="1163" fg:w="7"/><text x="94.9568%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="95.1954%" y="453" width="0.0814%" height="15" fill="rgb(210,167,45)" fg:x="1169" fg:w="1"/><text x="95.4454%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.1954%" y="437" width="0.0814%" height="15" fill="rgb(232,97,40)" fg:x="1169" fg:w="1"/><text x="95.4454%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1954%" y="421" width="0.0814%" height="15" fill="rgb(250,35,23)" fg:x="1169" fg:w="1"/><text x="95.4454%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1954%" y="405" width="0.0814%" height="15" fill="rgb(248,47,53)" fg:x="1169" fg:w="1"/><text x="95.4454%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.2769%" y="485" width="0.0814%" height="15" fill="rgb(226,58,50)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.2769%" y="469" width="0.0814%" height="15" fill="rgb(217,105,26)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.2769%" y="453" width="0.0814%" height="15" fill="rgb(208,64,1)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.2769%" y="437" width="0.0814%" height="15" fill="rgb(214,80,1)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.2769%" y="421" width="0.0814%" height="15" fill="rgb(206,175,26)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.2769%" y="405" width="0.0814%" height="15" fill="rgb(235,156,37)" fg:x="1170" fg:w="1"/><text x="95.5269%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3583%" y="485" width="0.0814%" height="15" fill="rgb(213,100,9)" fg:x="1171" fg:w="1"/><text x="95.6083%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="95.4397%" y="469" width="0.0814%" height="15" fill="rgb(241,15,13)" fg:x="1172" fg:w="1"/><text x="95.6897%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.4397%" y="453" width="0.0814%" height="15" fill="rgb(205,97,43)" fg:x="1172" fg:w="1"/><text x="95.6897%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="95.5212%" y="453" width="0.0814%" height="15" fill="rgb(216,106,32)" fg:x="1173" fg:w="1"/><text x="95.7712%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="95.5212%" y="437" width="0.0814%" height="15" fill="rgb(226,200,8)" fg:x="1173" fg:w="1"/><text x="95.7712%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="95.5212%" y="469" width="0.1629%" height="15" fill="rgb(244,54,29)" fg:x="1173" fg:w="2"/><text x="95.7712%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.6026%" y="453" width="0.0814%" height="15" fill="rgb(252,169,12)" fg:x="1174" fg:w="1"/><text x="95.8526%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="95.6026%" y="437" width="0.0814%" height="15" fill="rgb(231,199,11)" fg:x="1174" fg:w="1"/><text x="95.8526%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="95.6026%" y="421" width="0.0814%" height="15" fill="rgb(233,191,18)" fg:x="1174" fg:w="1"/><text x="95.8526%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="95.6840%" y="469" width="0.0814%" height="15" fill="rgb(215,83,47)" fg:x="1175" fg:w="1"/><text x="95.9340%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.6840%" y="453" width="0.0814%" height="15" fill="rgb(251,67,19)" fg:x="1175" fg:w="1"/><text x="95.9340%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="95.6840%" y="437" width="0.0814%" height="15" fill="rgb(240,7,20)" fg:x="1175" fg:w="1"/><text x="95.9340%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.6840%" y="421" width="0.0814%" height="15" fill="rgb(210,150,26)" fg:x="1175" fg:w="1"/><text x="95.9340%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7655%" y="437" width="0.0814%" height="15" fill="rgb(228,75,42)" fg:x="1176" fg:w="1"/><text x="96.0155%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7655%" y="421" width="0.0814%" height="15" fill="rgb(237,134,48)" fg:x="1176" fg:w="1"/><text x="96.0155%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7655%" y="405" width="0.0814%" height="15" fill="rgb(205,80,50)" fg:x="1176" fg:w="1"/><text x="96.0155%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.8469%" y="437" width="0.0814%" height="15" fill="rgb(217,74,48)" fg:x="1177" fg:w="1"/><text x="96.0969%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.57%)</title><rect x="95.4397%" y="485" width="0.5700%" height="15" fill="rgb(205,82,50)" fg:x="1172" fg:w="7"/><text x="95.6897%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="95.7655%" y="469" width="0.2443%" height="15" fill="rgb(228,1,33)" fg:x="1176" fg:w="3"/><text x="96.0155%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="95.7655%" y="453" width="0.2443%" height="15" fill="rgb(214,50,23)" fg:x="1176" fg:w="3"/><text x="96.0155%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.9283%" y="437" width="0.0814%" height="15" fill="rgb(210,62,9)" fg:x="1178" fg:w="1"/><text x="96.1783%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="96.0098%" y="437" width="0.0814%" height="15" fill="rgb(210,104,37)" fg:x="1179" fg:w="1"/><text x="96.2598%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="96.0098%" y="421" width="0.0814%" height="15" fill="rgb(232,104,43)" fg:x="1179" fg:w="1"/><text x="96.2598%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="96.0098%" y="405" width="0.0814%" height="15" fill="rgb(244,52,6)" fg:x="1179" fg:w="1"/><text x="96.2598%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.0098%" y="453" width="0.1629%" height="15" fill="rgb(211,174,52)" fg:x="1179" fg:w="2"/><text x="96.2598%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.0912%" y="437" width="0.0814%" height="15" fill="rgb(229,48,4)" fg:x="1180" fg:w="1"/><text x="96.3412%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.0912%" y="421" width="0.0814%" height="15" fill="rgb(205,155,16)" fg:x="1180" fg:w="1"/><text x="96.3412%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.0912%" y="405" width="0.0814%" height="15" fill="rgb(211,141,53)" fg:x="1180" fg:w="1"/><text x="96.3412%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.0912%" y="389" width="0.0814%" height="15" fill="rgb(240,148,11)" fg:x="1180" fg:w="1"/><text x="96.3412%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.0098%" y="485" width="0.2443%" height="15" fill="rgb(214,45,23)" fg:x="1179" fg:w="3"/><text x="96.2598%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.0098%" y="469" width="0.2443%" height="15" fill="rgb(248,74,26)" fg:x="1179" fg:w="3"/><text x="96.2598%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.1726%" y="453" width="0.0814%" height="15" fill="rgb(218,121,16)" fg:x="1181" fg:w="1"/><text x="96.4226%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="96.2541%" y="453" width="0.1629%" height="15" fill="rgb(218,10,47)" fg:x="1182" fg:w="2"/><text x="96.5041%" y="463.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.3355%" y="437" width="0.0814%" height="15" fill="rgb(227,99,14)" fg:x="1183" fg:w="1"/><text x="96.5855%" y="447.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="96.3355%" y="421" width="0.0814%" height="15" fill="rgb(229,83,46)" fg:x="1183" fg:w="1"/><text x="96.5855%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (15 samples, 1.22%)</title><rect x="95.2769%" y="533" width="1.2215%" height="15" fill="rgb(228,25,1)" fg:x="1170" fg:w="15"/><text x="95.5269%" y="543.50"></text></g><g><title>regex::builders::Builder::build_one_string (15 samples, 1.22%)</title><rect x="95.2769%" y="517" width="1.2215%" height="15" fill="rgb(252,190,15)" fg:x="1170" fg:w="15"/><text x="95.5269%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (15 samples, 1.22%)</title><rect x="95.2769%" y="501" width="1.2215%" height="15" fill="rgb(213,103,51)" fg:x="1170" fg:w="15"/><text x="95.5269%" y="511.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="96.2541%" y="485" width="0.2443%" height="15" fill="rgb(220,38,44)" fg:x="1182" fg:w="3"/><text x="96.5041%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="96.2541%" y="469" width="0.2443%" height="15" fill="rgb(210,45,26)" fg:x="1182" fg:w="3"/><text x="96.5041%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.4169%" y="453" width="0.0814%" height="15" fill="rgb(205,95,48)" fg:x="1184" fg:w="1"/><text x="96.6669%" y="463.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.4169%" y="437" width="0.0814%" height="15" fill="rgb(225,179,37)" fg:x="1184" fg:w="1"/><text x="96.6669%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.4984%" y="533" width="0.0814%" height="15" fill="rgb(230,209,3)" fg:x="1185" fg:w="1"/><text x="96.7484%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.4984%" y="517" width="0.0814%" height="15" fill="rgb(248,12,46)" fg:x="1185" fg:w="1"/><text x="96.7484%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="96.4984%" y="501" width="0.0814%" height="15" fill="rgb(234,18,0)" fg:x="1185" fg:w="1"/><text x="96.7484%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.4984%" y="485" width="0.0814%" height="15" fill="rgb(238,197,14)" fg:x="1185" fg:w="1"/><text x="96.7484%" y="495.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.47%)</title><rect x="95.2769%" y="549" width="1.4658%" height="15" fill="rgb(251,162,48)" fg:x="1170" fg:w="18"/><text x="95.5269%" y="559.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="96.5798%" y="533" width="0.1629%" height="15" fill="rgb(237,73,42)" fg:x="1186" fg:w="2"/><text x="96.8298%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="96.5798%" y="517" width="0.1629%" height="15" fill="rgb(211,108,8)" fg:x="1186" fg:w="2"/><text x="96.8298%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="96.5798%" y="501" width="0.1629%" height="15" fill="rgb(213,45,22)" fg:x="1186" fg:w="2"/><text x="96.8298%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="96.5798%" y="485" width="0.1629%" height="15" fill="rgb(252,154,5)" fg:x="1186" fg:w="2"/><text x="96.8298%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.5798%" y="469" width="0.1629%" height="15" fill="rgb(221,79,52)" fg:x="1186" fg:w="2"/><text x="96.8298%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.6612%" y="453" width="0.0814%" height="15" fill="rgb(229,220,36)" fg:x="1187" fg:w="1"/><text x="96.9112%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6612%" y="437" width="0.0814%" height="15" fill="rgb(211,17,16)" fg:x="1187" fg:w="1"/><text x="96.9112%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6612%" y="421" width="0.0814%" height="15" fill="rgb(222,55,31)" fg:x="1187" fg:w="1"/><text x="96.9112%" y="431.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (211 samples, 17.18%)</title><rect x="79.6417%" y="645" width="17.1824%" height="15" fill="rgb(221,221,31)" fg:x="978" fg:w="211"/><text x="79.8917%" y="655.50">&lt;&amp;kernel::model::entry::Ent..</text></g><g><title>plugins_core::looking::model::qualify_name (207 samples, 16.86%)</title><rect x="79.9674%" y="629" width="16.8567%" height="15" fill="rgb(227,168,26)" fg:x="982" fg:w="207"/><text x="80.2174%" y="639.50">plugins_core::looking::mod..</text></g><g><title>indefinite::indefinite (207 samples, 16.86%)</title><rect x="79.9674%" y="613" width="16.8567%" height="15" fill="rgb(224,139,9)" fg:x="982" fg:w="207"/><text x="80.2174%" y="623.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (207 samples, 16.86%)</title><rect x="79.9674%" y="597" width="16.8567%" height="15" fill="rgb(254,172,0)" fg:x="982" fg:w="207"/><text x="80.2174%" y="607.50">indefinite::methods::indef..</text></g><g><title>indefinite::methods::apply_rules (205 samples, 16.69%)</title><rect x="80.1303%" y="581" width="16.6938%" height="15" fill="rgb(235,203,1)" fg:x="984" fg:w="205"/><text x="80.3803%" y="591.50">indefinite::methods::apply..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.55%)</title><rect x="95.2769%" y="565" width="1.5472%" height="15" fill="rgb(216,205,24)" fg:x="1170" fg:w="19"/><text x="95.5269%" y="575.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="96.7427%" y="549" width="0.0814%" height="15" fill="rgb(233,24,6)" fg:x="1188" fg:w="1"/><text x="96.9927%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="96.8241%" y="645" width="0.0814%" height="15" fill="rgb(244,110,9)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="96.8241%" y="629" width="0.0814%" height="15" fill="rgb(239,222,42)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="96.8241%" y="613" width="0.0814%" height="15" fill="rgb(218,145,13)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="96.8241%" y="597" width="0.0814%" height="15" fill="rgb(207,69,11)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="96.8241%" y="581" width="0.0814%" height="15" fill="rgb(220,223,22)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="96.8241%" y="565" width="0.0814%" height="15" fill="rgb(245,102,5)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="96.8241%" y="549" width="0.0814%" height="15" fill="rgb(211,148,2)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="96.8241%" y="533" width="0.0814%" height="15" fill="rgb(241,13,44)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="96.8241%" y="517" width="0.0814%" height="15" fill="rgb(219,137,21)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="96.8241%" y="501" width="0.0814%" height="15" fill="rgb(242,206,5)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="96.8241%" y="485" width="0.0814%" height="15" fill="rgb(217,114,22)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.8241%" y="469" width="0.0814%" height="15" fill="rgb(253,206,42)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="96.8241%" y="453" width="0.0814%" height="15" fill="rgb(236,102,18)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="96.8241%" y="437" width="0.0814%" height="15" fill="rgb(208,59,49)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="96.8241%" y="421" width="0.0814%" height="15" fill="rgb(215,194,28)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.8241%" y="405" width="0.0814%" height="15" fill="rgb(243,207,11)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="96.8241%" y="389" width="0.0814%" height="15" fill="rgb(254,179,35)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="96.8241%" y="373" width="0.0814%" height="15" fill="rgb(235,97,3)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="96.8241%" y="357" width="0.0814%" height="15" fill="rgb(215,155,33)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.8241%" y="341" width="0.0814%" height="15" fill="rgb(223,128,12)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="96.8241%" y="325" width="0.0814%" height="15" fill="rgb(208,157,18)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8241%" y="309" width="0.0814%" height="15" fill="rgb(249,70,54)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="96.8241%" y="293" width="0.0814%" height="15" fill="rgb(244,118,24)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="96.8241%" y="277" width="0.0814%" height="15" fill="rgb(211,54,0)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="96.8241%" y="261" width="0.0814%" height="15" fill="rgb(245,137,45)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.8241%" y="245" width="0.0814%" height="15" fill="rgb(232,154,31)" fg:x="1189" fg:w="1"/><text x="97.0741%" y="255.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="96.9055%" y="613" width="0.0814%" height="15" fill="rgb(253,6,39)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.9055%" y="597" width="0.0814%" height="15" fill="rgb(234,183,24)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="96.9055%" y="581" width="0.0814%" height="15" fill="rgb(252,84,40)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="96.9055%" y="565" width="0.0814%" height="15" fill="rgb(224,65,2)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="575.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="96.9055%" y="549" width="0.0814%" height="15" fill="rgb(229,38,24)" fg:x="1190" fg:w="1"/><text x="97.1555%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="96.9870%" y="613" width="0.0814%" height="15" fill="rgb(218,131,50)" fg:x="1191" fg:w="1"/><text x="97.2370%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="96.9870%" y="597" width="0.0814%" height="15" fill="rgb(233,106,18)" fg:x="1191" fg:w="1"/><text x="97.2370%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (215 samples, 17.51%)</title><rect x="79.6417%" y="677" width="17.5081%" height="15" fill="rgb(220,216,11)" fg:x="978" fg:w="215"/><text x="79.8917%" y="687.50">&lt;plugins_core::looking::act..</text></g><g><title>plugins_core::looking::model::new_area_observation (215 samples, 17.51%)</title><rect x="79.6417%" y="661" width="17.5081%" height="15" fill="rgb(251,100,45)" fg:x="978" fg:w="215"/><text x="79.8917%" y="671.50">plugins_core::looking::mode..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="96.9055%" y="645" width="0.2443%" height="15" fill="rgb(235,143,32)" fg:x="1190" fg:w="3"/><text x="97.1555%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="96.9055%" y="629" width="0.2443%" height="15" fill="rgb(248,124,34)" fg:x="1190" fg:w="3"/><text x="97.1555%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.0684%" y="613" width="0.0814%" height="15" fill="rgb(225,221,4)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.0684%" y="597" width="0.0814%" height="15" fill="rgb(242,27,43)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0684%" y="581" width="0.0814%" height="15" fill="rgb(227,54,8)" fg:x="1192" fg:w="1"/><text x="97.3184%" y="591.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (1 samples, 0.08%)</title><rect x="97.1498%" y="677" width="0.0814%" height="15" fill="rgb(253,139,49)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="687.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="97.1498%" y="661" width="0.0814%" height="15" fill="rgb(231,26,43)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.1498%" y="645" width="0.0814%" height="15" fill="rgb(207,121,39)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.1498%" y="629" width="0.0814%" height="15" fill="rgb(223,101,35)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.1498%" y="613" width="0.0814%" height="15" fill="rgb(232,87,23)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="97.1498%" y="597" width="0.0814%" height="15" fill="rgb(225,180,29)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="607.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="97.1498%" y="581" width="0.0814%" height="15" fill="rgb(225,25,17)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.1498%" y="565" width="0.0814%" height="15" fill="rgb(223,8,52)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="575.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.1498%" y="549" width="0.0814%" height="15" fill="rgb(246,42,21)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.1498%" y="533" width="0.0814%" height="15" fill="rgb(205,64,43)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1498%" y="517" width="0.0814%" height="15" fill="rgb(221,160,13)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.1498%" y="501" width="0.0814%" height="15" fill="rgb(239,58,35)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1498%" y="485" width="0.0814%" height="15" fill="rgb(251,26,40)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.1498%" y="469" width="0.0814%" height="15" fill="rgb(247,0,4)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1498%" y="453" width="0.0814%" height="15" fill="rgb(218,130,10)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.1498%" y="437" width="0.0814%" height="15" fill="rgb(239,32,7)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.1498%" y="421" width="0.0814%" height="15" fill="rgb(210,192,24)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1498%" y="405" width="0.0814%" height="15" fill="rgb(226,212,17)" fg:x="1193" fg:w="1"/><text x="97.3998%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.2313%" y="613" width="0.1629%" height="15" fill="rgb(219,201,28)" fg:x="1194" fg:w="2"/><text x="97.4813%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.2313%" y="597" width="0.1629%" height="15" fill="rgb(235,207,41)" fg:x="1194" fg:w="2"/><text x="97.4813%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.2313%" y="581" width="0.1629%" height="15" fill="rgb(241,95,54)" fg:x="1194" fg:w="2"/><text x="97.4813%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3127%" y="565" width="0.0814%" height="15" fill="rgb(248,12,23)" fg:x="1195" fg:w="1"/><text x="97.5627%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.3127%" y="549" width="0.0814%" height="15" fill="rgb(228,173,4)" fg:x="1195" fg:w="1"/><text x="97.5627%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3127%" y="533" width="0.0814%" height="15" fill="rgb(254,99,5)" fg:x="1195" fg:w="1"/><text x="97.5627%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (3 samples, 0.24%)</title><rect x="97.2313%" y="645" width="0.2443%" height="15" fill="rgb(212,184,17)" fg:x="1194" fg:w="3"/><text x="97.4813%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="97.2313%" y="629" width="0.2443%" height="15" fill="rgb(252,174,1)" fg:x="1194" fg:w="3"/><text x="97.4813%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3941%" y="613" width="0.0814%" height="15" fill="rgb(241,118,51)" fg:x="1196" fg:w="1"/><text x="97.6441%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.5570%" y="549" width="0.0814%" height="15" fill="rgb(227,94,47)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="559.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="97.5570%" y="533" width="0.0814%" height="15" fill="rgb(229,104,2)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="97.5570%" y="517" width="0.0814%" height="15" fill="rgb(219,28,31)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.5570%" y="501" width="0.0814%" height="15" fill="rgb(233,109,36)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.5570%" y="485" width="0.0814%" height="15" fill="rgb(246,88,11)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="97.5570%" y="469" width="0.0814%" height="15" fill="rgb(209,212,17)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="479.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="97.5570%" y="453" width="0.0814%" height="15" fill="rgb(243,59,29)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.5570%" y="437" width="0.0814%" height="15" fill="rgb(244,205,48)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="447.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="97.5570%" y="421" width="0.0814%" height="15" fill="rgb(227,30,6)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.5570%" y="405" width="0.0814%" height="15" fill="rgb(220,205,48)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5570%" y="389" width="0.0814%" height="15" fill="rgb(250,94,14)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5570%" y="373" width="0.0814%" height="15" fill="rgb(216,119,42)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5570%" y="357" width="0.0814%" height="15" fill="rgb(232,155,0)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5570%" y="341" width="0.0814%" height="15" fill="rgb(212,24,32)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.5570%" y="325" width="0.0814%" height="15" fill="rgb(216,69,20)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5570%" y="309" width="0.0814%" height="15" fill="rgb(229,73,31)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5570%" y="293" width="0.0814%" height="15" fill="rgb(224,219,20)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5570%" y="277" width="0.0814%" height="15" fill="rgb(215,146,41)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5570%" y="261" width="0.0814%" height="15" fill="rgb(244,71,31)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5570%" y="245" width="0.0814%" height="15" fill="rgb(224,24,11)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.5570%" y="229" width="0.0814%" height="15" fill="rgb(229,76,15)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5570%" y="213" width="0.0814%" height="15" fill="rgb(209,93,2)" fg:x="1198" fg:w="1"/><text x="97.8070%" y="223.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (2 samples, 0.16%)</title><rect x="97.5570%" y="565" width="0.1629%" height="15" fill="rgb(216,200,50)" fg:x="1198" fg:w="2"/><text x="97.8070%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.6384%" y="549" width="0.0814%" height="15" fill="rgb(211,67,34)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.6384%" y="533" width="0.0814%" height="15" fill="rgb(225,87,47)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="97.6384%" y="517" width="0.0814%" height="15" fill="rgb(217,185,16)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.6384%" y="501" width="0.0814%" height="15" fill="rgb(205,0,0)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="97.6384%" y="485" width="0.0814%" height="15" fill="rgb(207,116,45)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.6384%" y="469" width="0.0814%" height="15" fill="rgb(221,156,26)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="97.6384%" y="453" width="0.0814%" height="15" fill="rgb(213,140,4)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="463.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="97.6384%" y="437" width="0.0814%" height="15" fill="rgb(231,224,15)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6384%" y="421" width="0.0814%" height="15" fill="rgb(244,76,20)" fg:x="1199" fg:w="1"/><text x="97.8884%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="97.8013%" y="421" width="0.0814%" height="15" fill="rgb(238,117,7)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="431.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="97.8013%" y="405" width="0.0814%" height="15" fill="rgb(235,1,10)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="97.8013%" y="389" width="0.0814%" height="15" fill="rgb(216,165,6)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="399.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="97.8013%" y="373" width="0.0814%" height="15" fill="rgb(246,91,35)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.8013%" y="357" width="0.0814%" height="15" fill="rgb(228,96,24)" fg:x="1201" fg:w="1"/><text x="98.0513%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8827%" y="309" width="0.0814%" height="15" fill="rgb(254,217,53)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8827%" y="293" width="0.0814%" height="15" fill="rgb(209,60,0)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8827%" y="277" width="0.0814%" height="15" fill="rgb(250,93,26)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8827%" y="261" width="0.0814%" height="15" fill="rgb(211,9,40)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.8827%" y="245" width="0.0814%" height="15" fill="rgb(242,57,20)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.8827%" y="229" width="0.0814%" height="15" fill="rgb(248,85,48)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.8827%" y="213" width="0.0814%" height="15" fill="rgb(212,117,2)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8827%" y="197" width="0.0814%" height="15" fill="rgb(243,19,3)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8827%" y="181" width="0.0814%" height="15" fill="rgb(232,217,24)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.8827%" y="165" width="0.0814%" height="15" fill="rgb(224,175,40)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.8827%" y="149" width="0.0814%" height="15" fill="rgb(212,162,32)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.8827%" y="133" width="0.0814%" height="15" fill="rgb(215,9,4)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.8827%" y="117" width="0.0814%" height="15" fill="rgb(242,42,7)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8827%" y="101" width="0.0814%" height="15" fill="rgb(242,184,45)" fg:x="1202" fg:w="1"/><text x="98.1327%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="97.8827%" y="373" width="0.1629%" height="15" fill="rgb(228,111,51)" fg:x="1202" fg:w="2"/><text x="98.1327%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.8827%" y="357" width="0.1629%" height="15" fill="rgb(236,147,17)" fg:x="1202" fg:w="2"/><text x="98.1327%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.8827%" y="341" width="0.1629%" height="15" fill="rgb(210,75,22)" fg:x="1202" fg:w="2"/><text x="98.1327%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.8827%" y="325" width="0.1629%" height="15" fill="rgb(217,159,45)" fg:x="1202" fg:w="2"/><text x="98.1327%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9642%" y="309" width="0.0814%" height="15" fill="rgb(245,165,53)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9642%" y="293" width="0.0814%" height="15" fill="rgb(251,190,50)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9642%" y="277" width="0.0814%" height="15" fill="rgb(208,203,29)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9642%" y="261" width="0.0814%" height="15" fill="rgb(207,209,35)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9642%" y="245" width="0.0814%" height="15" fill="rgb(230,144,49)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9642%" y="229" width="0.0814%" height="15" fill="rgb(229,31,6)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9642%" y="213" width="0.0814%" height="15" fill="rgb(251,129,24)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9642%" y="197" width="0.0814%" height="15" fill="rgb(235,105,15)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.9642%" y="181" width="0.0814%" height="15" fill="rgb(216,52,43)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.9642%" y="165" width="0.0814%" height="15" fill="rgb(238,144,41)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.9642%" y="149" width="0.0814%" height="15" fill="rgb(243,63,9)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9642%" y="133" width="0.0814%" height="15" fill="rgb(246,208,1)" fg:x="1203" fg:w="1"/><text x="98.2142%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="97.8827%" y="421" width="0.2443%" height="15" fill="rgb(233,182,18)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="431.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="97.8827%" y="405" width="0.2443%" height="15" fill="rgb(242,224,8)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="97.8827%" y="389" width="0.2443%" height="15" fill="rgb(243,54,37)" fg:x="1202" fg:w="3"/><text x="98.1327%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0456%" y="373" width="0.0814%" height="15" fill="rgb(233,192,12)" fg:x="1204" fg:w="1"/><text x="98.2956%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0456%" y="357" width="0.0814%" height="15" fill="rgb(251,192,53)" fg:x="1204" fg:w="1"/><text x="98.2956%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0456%" y="341" width="0.0814%" height="15" fill="rgb(246,141,26)" fg:x="1204" fg:w="1"/><text x="98.2956%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0456%" y="325" width="0.0814%" height="15" fill="rgb(239,195,19)" fg:x="1204" fg:w="1"/><text x="98.2956%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0456%" y="309" width="0.0814%" height="15" fill="rgb(241,16,39)" fg:x="1204" fg:w="1"/><text x="98.2956%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1270%" y="293" width="0.0814%" height="15" fill="rgb(223,13,53)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1270%" y="277" width="0.0814%" height="15" fill="rgb(214,227,0)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.1270%" y="261" width="0.0814%" height="15" fill="rgb(228,103,26)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.1270%" y="245" width="0.0814%" height="15" fill="rgb(254,177,53)" fg:x="1205" fg:w="1"/><text x="98.3770%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="98.1270%" y="405" width="0.1629%" height="15" fill="rgb(208,201,34)" fg:x="1205" fg:w="2"/><text x="98.3770%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="98.1270%" y="389" width="0.1629%" height="15" fill="rgb(212,39,5)" fg:x="1205" fg:w="2"/><text x="98.3770%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.1270%" y="373" width="0.1629%" height="15" fill="rgb(246,117,3)" fg:x="1205" fg:w="2"/><text x="98.3770%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.1270%" y="357" width="0.1629%" height="15" fill="rgb(244,118,39)" fg:x="1205" fg:w="2"/><text x="98.3770%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.1270%" y="341" width="0.1629%" height="15" fill="rgb(241,64,10)" fg:x="1205" fg:w="2"/><text x="98.3770%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.1270%" y="325" width="0.1629%" height="15" fill="rgb(229,39,44)" fg:x="1205" fg:w="2"/><text x="98.3770%" y="335.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.1270%" y="309" width="0.1629%" height="15" fill="rgb(230,226,3)" fg:x="1205" fg:w="2"/><text x="98.3770%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2085%" y="293" width="0.0814%" height="15" fill="rgb(222,13,42)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2085%" y="277" width="0.0814%" height="15" fill="rgb(247,180,54)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.2085%" y="261" width="0.0814%" height="15" fill="rgb(205,96,16)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2085%" y="245" width="0.0814%" height="15" fill="rgb(205,100,21)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2085%" y="229" width="0.0814%" height="15" fill="rgb(248,51,4)" fg:x="1206" fg:w="1"/><text x="98.4585%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.81%)</title><rect x="97.5570%" y="597" width="0.8143%" height="15" fill="rgb(217,197,30)" fg:x="1198" fg:w="10"/><text x="97.8070%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.81%)</title><rect x="97.5570%" y="581" width="0.8143%" height="15" fill="rgb(240,179,40)" fg:x="1198" fg:w="10"/><text x="97.8070%" y="591.50"></text></g><g><title>plugins_core::tools::get_contained_keys (8 samples, 0.65%)</title><rect x="97.7199%" y="565" width="0.6515%" height="15" fill="rgb(212,185,35)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.65%)</title><rect x="97.7199%" y="549" width="0.6515%" height="15" fill="rgb(251,222,31)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (8 samples, 0.65%)</title><rect x="97.7199%" y="533" width="0.6515%" height="15" fill="rgb(208,140,36)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (8 samples, 0.65%)</title><rect x="97.7199%" y="517" width="0.6515%" height="15" fill="rgb(220,148,1)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="97.7199%" y="501" width="0.6515%" height="15" fill="rgb(254,4,28)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.65%)</title><rect x="97.7199%" y="485" width="0.6515%" height="15" fill="rgb(222,185,44)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.65%)</title><rect x="97.7199%" y="469" width="0.6515%" height="15" fill="rgb(215,74,39)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.65%)</title><rect x="97.7199%" y="453" width="0.6515%" height="15" fill="rgb(247,86,4)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="463.50"></text></g><g><title>engine::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="97.7199%" y="437" width="0.6515%" height="15" fill="rgb(231,105,32)" fg:x="1200" fg:w="8"/><text x="97.9699%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="98.1270%" y="421" width="0.2443%" height="15" fill="rgb(222,65,35)" fg:x="1205" fg:w="3"/><text x="98.3770%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.2899%" y="405" width="0.0814%" height="15" fill="rgb(218,145,35)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.2899%" y="389" width="0.0814%" height="15" fill="rgb(208,7,15)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2899%" y="373" width="0.0814%" height="15" fill="rgb(209,83,13)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.2899%" y="357" width="0.0814%" height="15" fill="rgb(218,3,10)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2899%" y="341" width="0.0814%" height="15" fill="rgb(211,219,4)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.2899%" y="325" width="0.0814%" height="15" fill="rgb(228,194,12)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2899%" y="309" width="0.0814%" height="15" fill="rgb(210,175,7)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.2899%" y="293" width="0.0814%" height="15" fill="rgb(243,132,6)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2899%" y="277" width="0.0814%" height="15" fill="rgb(207,72,18)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.2899%" y="261" width="0.0814%" height="15" fill="rgb(236,1,18)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2899%" y="245" width="0.0814%" height="15" fill="rgb(227,0,18)" fg:x="1207" fg:w="1"/><text x="98.5399%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.5342%" y="341" width="0.0814%" height="15" fill="rgb(247,37,5)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5342%" y="325" width="0.0814%" height="15" fill="rgb(237,179,24)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.5342%" y="309" width="0.0814%" height="15" fill="rgb(226,53,20)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.5342%" y="293" width="0.0814%" height="15" fill="rgb(247,75,7)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5342%" y="277" width="0.0814%" height="15" fill="rgb(233,96,12)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.5342%" y="261" width="0.0814%" height="15" fill="rgb(224,125,0)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5342%" y="245" width="0.0814%" height="15" fill="rgb(224,92,25)" fg:x="1210" fg:w="1"/><text x="98.7842%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.5342%" y="405" width="0.1629%" height="15" fill="rgb(224,42,24)" fg:x="1210" fg:w="2"/><text x="98.7842%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.5342%" y="389" width="0.1629%" height="15" fill="rgb(234,132,49)" fg:x="1210" fg:w="2"/><text x="98.7842%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.5342%" y="373" width="0.1629%" height="15" fill="rgb(248,100,35)" fg:x="1210" fg:w="2"/><text x="98.7842%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.5342%" y="357" width="0.1629%" height="15" fill="rgb(239,94,40)" fg:x="1210" fg:w="2"/><text x="98.7842%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6156%" y="341" width="0.0814%" height="15" fill="rgb(235,139,28)" fg:x="1211" fg:w="1"/><text x="98.8656%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6156%" y="325" width="0.0814%" height="15" fill="rgb(217,144,7)" fg:x="1211" fg:w="1"/><text x="98.8656%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.5342%" y="501" width="0.2443%" height="15" fill="rgb(227,55,4)" fg:x="1210" fg:w="3"/><text x="98.7842%" y="511.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.5342%" y="485" width="0.2443%" height="15" fill="rgb(252,82,54)" fg:x="1210" fg:w="3"/><text x="98.7842%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.5342%" y="469" width="0.2443%" height="15" fill="rgb(245,172,4)" fg:x="1210" fg:w="3"/><text x="98.7842%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.5342%" y="453" width="0.2443%" height="15" fill="rgb(207,26,27)" fg:x="1210" fg:w="3"/><text x="98.7842%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.5342%" y="437" width="0.2443%" height="15" fill="rgb(252,98,18)" fg:x="1210" fg:w="3"/><text x="98.7842%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.5342%" y="421" width="0.2443%" height="15" fill="rgb(244,8,26)" fg:x="1210" fg:w="3"/><text x="98.7842%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.6971%" y="405" width="0.0814%" height="15" fill="rgb(237,173,45)" fg:x="1212" fg:w="1"/><text x="98.9471%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.33%)</title><rect x="98.5342%" y="533" width="0.3257%" height="15" fill="rgb(208,213,49)" fg:x="1210" fg:w="4"/><text x="98.7842%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="98.5342%" y="517" width="0.3257%" height="15" fill="rgb(212,122,37)" fg:x="1210" fg:w="4"/><text x="98.7842%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.7785%" y="501" width="0.0814%" height="15" fill="rgb(213,80,17)" fg:x="1213" fg:w="1"/><text x="99.0285%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7785%" y="485" width="0.0814%" height="15" fill="rgb(206,210,43)" fg:x="1213" fg:w="1"/><text x="99.0285%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8599%" y="485" width="0.0814%" height="15" fill="rgb(229,214,3)" fg:x="1214" fg:w="1"/><text x="99.1099%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="98.9414%" y="485" width="0.0814%" height="15" fill="rgb(235,213,29)" fg:x="1215" fg:w="1"/><text x="99.1914%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.1042%" y="437" width="0.0814%" height="15" fill="rgb(248,135,26)" fg:x="1217" fg:w="1"/><text x="99.3542%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.1042%" y="421" width="0.0814%" height="15" fill="rgb(242,188,12)" fg:x="1217" fg:w="1"/><text x="99.3542%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.1042%" y="405" width="0.0814%" height="15" fill="rgb(245,38,12)" fg:x="1217" fg:w="1"/><text x="99.3542%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1042%" y="389" width="0.0814%" height="15" fill="rgb(218,42,13)" fg:x="1217" fg:w="1"/><text x="99.3542%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1042%" y="373" width="0.0814%" height="15" fill="rgb(238,132,49)" fg:x="1217" fg:w="1"/><text x="99.3542%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1042%" y="357" width="0.0814%" height="15" fill="rgb(209,196,19)" fg:x="1217" fg:w="1"/><text x="99.3542%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.2671%" y="389" width="0.0814%" height="15" fill="rgb(244,131,22)" fg:x="1219" fg:w="1"/><text x="99.5171%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.3485%" y="357" width="0.1629%" height="15" fill="rgb(223,18,34)" fg:x="1220" fg:w="2"/><text x="99.5985%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.4300%" y="341" width="0.0814%" height="15" fill="rgb(252,124,54)" fg:x="1221" fg:w="1"/><text x="99.6800%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.4300%" y="325" width="0.0814%" height="15" fill="rgb(229,106,42)" fg:x="1221" fg:w="1"/><text x="99.6800%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="99.3485%" y="389" width="0.2443%" height="15" fill="rgb(221,129,1)" fg:x="1220" fg:w="3"/><text x="99.5985%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="99.3485%" y="373" width="0.2443%" height="15" fill="rgb(229,74,15)" fg:x="1220" fg:w="3"/><text x="99.5985%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5114%" y="357" width="0.0814%" height="15" fill="rgb(210,206,50)" fg:x="1222" fg:w="1"/><text x="99.7614%" y="367.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (247 samples, 20.11%)</title><rect x="79.6417%" y="693" width="20.1140%" height="15" fill="rgb(251,114,31)" fg:x="978" fg:w="247"/><text x="79.8917%" y="703.50">&lt;engine::perform::StandardPerfor..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (31 samples, 2.52%)</title><rect x="97.2313%" y="677" width="2.5244%" height="15" fill="rgb(215,225,28)" fg:x="1194" fg:w="31"/><text x="97.4813%" y="687.50">ke..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (31 samples, 2.52%)</title><rect x="97.2313%" y="661" width="2.5244%" height="15" fill="rgb(237,109,14)" fg:x="1194" fg:w="31"/><text x="97.4813%" y="671.50">&lt;p..</text></g><g><title>plugins_rpc::querying::have_surroundings (28 samples, 2.28%)</title><rect x="97.4756%" y="645" width="2.2801%" height="15" fill="rgb(230,13,37)" fg:x="1197" fg:w="28"/><text x="97.7256%" y="655.50">p..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (27 samples, 2.20%)</title><rect x="97.5570%" y="629" width="2.1987%" height="15" fill="rgb(231,40,28)" fg:x="1198" fg:w="27"/><text x="97.8070%" y="639.50">&lt;..</text></g><g><title>core::iter::adapters::try_process (27 samples, 2.20%)</title><rect x="97.5570%" y="613" width="2.1987%" height="15" fill="rgb(231,202,18)" fg:x="1198" fg:w="27"/><text x="97.8070%" y="623.50">c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (17 samples, 1.38%)</title><rect x="98.3713%" y="597" width="1.3844%" height="15" fill="rgb(225,33,18)" fg:x="1208" fg:w="17"/><text x="98.6213%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.38%)</title><rect x="98.3713%" y="581" width="1.3844%" height="15" fill="rgb(223,64,47)" fg:x="1208" fg:w="17"/><text x="98.6213%" y="591.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (16 samples, 1.30%)</title><rect x="98.4528%" y="565" width="1.3029%" height="15" fill="rgb(234,114,13)" fg:x="1209" fg:w="16"/><text x="98.7028%" y="575.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (15 samples, 1.22%)</title><rect x="98.5342%" y="549" width="1.2215%" height="15" fill="rgb(248,56,40)" fg:x="1210" fg:w="15"/><text x="98.7842%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (11 samples, 0.90%)</title><rect x="98.8599%" y="533" width="0.8958%" height="15" fill="rgb(221,194,21)" fg:x="1214" fg:w="11"/><text x="99.1099%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.90%)</title><rect x="98.8599%" y="517" width="0.8958%" height="15" fill="rgb(242,108,46)" fg:x="1214" fg:w="11"/><text x="99.1099%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.90%)</title><rect x="98.8599%" y="501" width="0.8958%" height="15" fill="rgb(220,106,10)" fg:x="1214" fg:w="11"/><text x="99.1099%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.73%)</title><rect x="99.0228%" y="485" width="0.7329%" height="15" fill="rgb(211,88,4)" fg:x="1216" fg:w="9"/><text x="99.2728%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="99.1042%" y="469" width="0.6515%" height="15" fill="rgb(214,95,34)" fg:x="1217" fg:w="8"/><text x="99.3542%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="99.1042%" y="453" width="0.6515%" height="15" fill="rgb(250,160,33)" fg:x="1217" fg:w="8"/><text x="99.3542%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="99.1857%" y="437" width="0.5700%" height="15" fill="rgb(225,29,10)" fg:x="1218" fg:w="7"/><text x="99.4357%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="99.2671%" y="421" width="0.4886%" height="15" fill="rgb(224,28,30)" fg:x="1219" fg:w="6"/><text x="99.5171%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="99.2671%" y="405" width="0.4886%" height="15" fill="rgb(231,77,4)" fg:x="1219" fg:w="6"/><text x="99.5171%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="99.5928%" y="389" width="0.1629%" height="15" fill="rgb(209,63,21)" fg:x="1223" fg:w="2"/><text x="99.8428%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.7557%" y="629" width="0.0814%" height="15" fill="rgb(226,22,11)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.7557%" y="613" width="0.0814%" height="15" fill="rgb(216,82,30)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.7557%" y="597" width="0.0814%" height="15" fill="rgb(246,227,38)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="99.7557%" y="581" width="0.0814%" height="15" fill="rgb(251,203,53)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="99.7557%" y="565" width="0.0814%" height="15" fill="rgb(254,101,1)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.7557%" y="549" width="0.0814%" height="15" fill="rgb(241,180,5)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7557%" y="533" width="0.0814%" height="15" fill="rgb(218,168,4)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7557%" y="517" width="0.0814%" height="15" fill="rgb(224,223,32)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7557%" y="501" width="0.0814%" height="15" fill="rgb(236,106,22)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7557%" y="485" width="0.0814%" height="15" fill="rgb(206,121,5)" fg:x="1225" fg:w="1"/><text x="100.0057%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8371%" y="501" width="0.0814%" height="15" fill="rgb(233,87,28)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8371%" y="485" width="0.0814%" height="15" fill="rgb(236,137,17)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8371%" y="469" width="0.0814%" height="15" fill="rgb(209,183,38)" fg:x="1226" fg:w="1"/><text x="100.0871%" y="479.50"></text></g><g><title>all (1,228 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(206,162,44)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1183.50"></text></g><g><title>simple-5e588292 (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(237,70,39)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1167.50">simple-5e588292</text></g><g><title>_start (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(212,176,5)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1151.50">_start</text></g><g><title>__libc_start_main (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(232,95,16)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1135.50">__libc_start_main</text></g><g><title>main (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(219,115,35)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1119.50">main</text></g><g><title>std::rt::lang_start_internal (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(251,67,27)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1103.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(222,95,40)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(250,35,16)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(224,86,44)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1055.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(237,53,53)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1039.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,228 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(208,171,33)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,228 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(222,64,27)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,228 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(221,121,35)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="991.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,228 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(228,137,42)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="975.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,228 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(227,54,21)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="959.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,228 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(240,168,33)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="943.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,228 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(243,159,6)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="927.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,228 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(205,211,41)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="911.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,228 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(253,30,1)" fg:x="0" fg:w="1228"/><text x="0.2500%" y="895.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (303 samples, 24.67%)</title><rect x="75.3257%" y="869" width="24.6743%" height="15" fill="rgb(226,80,18)" fg:x="925" fg:w="303"/><text x="75.5757%" y="879.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (303 samples, 24.67%)</title><rect x="75.3257%" y="853" width="24.6743%" height="15" fill="rgb(253,156,46)" fg:x="925" fg:w="303"/><text x="75.5757%" y="863.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (303 samples, 24.67%)</title><rect x="75.3257%" y="837" width="24.6743%" height="15" fill="rgb(248,87,27)" fg:x="925" fg:w="303"/><text x="75.5757%" y="847.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (251 samples, 20.44%)</title><rect x="79.5603%" y="821" width="20.4397%" height="15" fill="rgb(227,122,2)" fg:x="977" fg:w="251"/><text x="79.8103%" y="831.50">engine::session::Session::evalua..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (251 samples, 20.44%)</title><rect x="79.5603%" y="805" width="20.4397%" height="15" fill="rgb(229,94,39)" fg:x="977" fg:w="251"/><text x="79.8103%" y="815.50">engine::perform::StandardPerform..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (251 samples, 20.44%)</title><rect x="79.5603%" y="789" width="20.4397%" height="15" fill="rgb(225,173,31)" fg:x="977" fg:w="251"/><text x="79.8103%" y="799.50">&lt;kernel::plugins::SessionPlugins..</text></g><g><title>core::iter::adapters::try_process (251 samples, 20.44%)</title><rect x="79.5603%" y="773" width="20.4397%" height="15" fill="rgb(239,176,30)" fg:x="977" fg:w="251"/><text x="79.8103%" y="783.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (251 samples, 20.44%)</title><rect x="79.5603%" y="757" width="20.4397%" height="15" fill="rgb(212,104,21)" fg:x="977" fg:w="251"/><text x="79.8103%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (251 samples, 20.44%)</title><rect x="79.5603%" y="741" width="20.4397%" height="15" fill="rgb(240,209,40)" fg:x="977" fg:w="251"/><text x="79.8103%" y="751.50">&lt;core::iter::adapters::map::Map&lt;..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (250 samples, 20.36%)</title><rect x="79.6417%" y="725" width="20.3583%" height="15" fill="rgb(234,195,5)" fg:x="978" fg:w="250"/><text x="79.8917%" y="735.50">&lt;plugins_core::looking::LookingP..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (250 samples, 20.36%)</title><rect x="79.6417%" y="709" width="20.3583%" height="15" fill="rgb(238,213,1)" fg:x="978" fg:w="250"/><text x="79.8917%" y="719.50">&lt;engine::perform::StandardPerfor..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="99.7557%" y="693" width="0.2443%" height="15" fill="rgb(235,182,54)" fg:x="1225" fg:w="3"/><text x="100.0057%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="99.7557%" y="677" width="0.2443%" height="15" fill="rgb(229,50,46)" fg:x="1225" fg:w="3"/><text x="100.0057%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.7557%" y="661" width="0.2443%" height="15" fill="rgb(219,145,13)" fg:x="1225" fg:w="3"/><text x="100.0057%" y="671.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.7557%" y="645" width="0.2443%" height="15" fill="rgb(220,226,10)" fg:x="1225" fg:w="3"/><text x="100.0057%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="99.8371%" y="629" width="0.1629%" height="15" fill="rgb(248,47,30)" fg:x="1226" fg:w="2"/><text x="100.0871%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8371%" y="613" width="0.1629%" height="15" fill="rgb(231,209,44)" fg:x="1226" fg:w="2"/><text x="100.0871%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.8371%" y="597" width="0.1629%" height="15" fill="rgb(209,80,30)" fg:x="1226" fg:w="2"/><text x="100.0871%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8371%" y="581" width="0.1629%" height="15" fill="rgb(232,9,14)" fg:x="1226" fg:w="2"/><text x="100.0871%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.8371%" y="565" width="0.1629%" height="15" fill="rgb(243,91,43)" fg:x="1226" fg:w="2"/><text x="100.0871%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8371%" y="549" width="0.1629%" height="15" fill="rgb(231,90,52)" fg:x="1226" fg:w="2"/><text x="100.0871%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.8371%" y="533" width="0.1629%" height="15" fill="rgb(253,192,44)" fg:x="1226" fg:w="2"/><text x="100.0871%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8371%" y="517" width="0.1629%" height="15" fill="rgb(241,66,31)" fg:x="1226" fg:w="2"/><text x="100.0871%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9186%" y="501" width="0.0814%" height="15" fill="rgb(235,81,37)" fg:x="1227" fg:w="1"/><text x="100.1686%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9186%" y="485" width="0.0814%" height="15" fill="rgb(223,221,9)" fg:x="1227" fg:w="1"/><text x="100.1686%" y="495.50"></text></g></svg></svg>