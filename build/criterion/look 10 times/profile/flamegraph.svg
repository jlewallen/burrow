<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1206" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1189.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1189.00"> </text><svg id="frames" x="10" width="1180" total_samples="1245"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="789" width="0.0803%" height="15" fill="rgb(219,59,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="773" width="0.0803%" height="15" fill="rgb(250,92,33)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3213%" y="693" width="0.0803%" height="15" fill="rgb(229,162,54)" fg:x="4" fg:w="1"/><text x="0.5713%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3213%" y="677" width="0.0803%" height="15" fill="rgb(244,114,52)" fg:x="4" fg:w="1"/><text x="0.5713%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4819%" y="661" width="0.1606%" height="15" fill="rgb(212,211,43)" fg:x="6" fg:w="2"/><text x="0.7319%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.6426%" y="645" width="0.0803%" height="15" fill="rgb(226,147,8)" fg:x="8" fg:w="1"/><text x="0.8926%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.3213%" y="709" width="0.4819%" height="15" fill="rgb(226,23,13)" fg:x="4" fg:w="6"/><text x="0.5713%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.4016%" y="693" width="0.4016%" height="15" fill="rgb(240,63,4)" fg:x="5" fg:w="5"/><text x="0.6516%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.4016%" y="677" width="0.4016%" height="15" fill="rgb(221,1,32)" fg:x="5" fg:w="5"/><text x="0.6516%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.6426%" y="661" width="0.1606%" height="15" fill="rgb(242,117,10)" fg:x="8" fg:w="2"/><text x="0.8926%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.7229%" y="645" width="0.0803%" height="15" fill="rgb(249,172,44)" fg:x="9" fg:w="1"/><text x="0.9729%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.7229%" y="629" width="0.0803%" height="15" fill="rgb(244,46,45)" fg:x="9" fg:w="1"/><text x="0.9729%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="0.0000%" y="805" width="0.8835%" height="15" fill="rgb(206,43,17)" fg:x="0" fg:w="11"/><text x="0.2500%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.80%)</title><rect x="0.0803%" y="789" width="0.8032%" height="15" fill="rgb(239,218,39)" fg:x="1" fg:w="10"/><text x="0.3303%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="0.0803%" y="773" width="0.8032%" height="15" fill="rgb(208,169,54)" fg:x="1" fg:w="10"/><text x="0.3303%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (10 samples, 0.80%)</title><rect x="0.0803%" y="757" width="0.8032%" height="15" fill="rgb(247,25,42)" fg:x="1" fg:w="10"/><text x="0.3303%" y="767.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="0.0803%" y="741" width="0.8032%" height="15" fill="rgb(226,23,31)" fg:x="1" fg:w="10"/><text x="0.3303%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.2410%" y="725" width="0.6426%" height="15" fill="rgb(247,16,28)" fg:x="3" fg:w="8"/><text x="0.4910%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="0.8032%" y="709" width="0.0803%" height="15" fill="rgb(231,147,38)" fg:x="10" fg:w="1"/><text x="1.0532%" y="719.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="0.8835%" y="709" width="0.0803%" height="15" fill="rgb(253,81,48)" fg:x="11" fg:w="1"/><text x="1.1335%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8835%" y="693" width="0.0803%" height="15" fill="rgb(249,222,43)" fg:x="11" fg:w="1"/><text x="1.1335%" y="703.50"></text></g><g><title>dlerror (3 samples, 0.24%)</title><rect x="0.9639%" y="693" width="0.2410%" height="15" fill="rgb(221,3,27)" fg:x="12" fg:w="3"/><text x="1.2139%" y="703.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="1.0442%" y="677" width="0.1606%" height="15" fill="rgb(228,180,5)" fg:x="13" fg:w="2"/><text x="1.2942%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (13 samples, 1.04%)</title><rect x="0.8835%" y="725" width="1.0442%" height="15" fill="rgb(227,131,42)" fg:x="11" fg:w="13"/><text x="1.1335%" y="735.50"></text></g><g><title>libloading::safe::Library::new (12 samples, 0.96%)</title><rect x="0.9639%" y="709" width="0.9639%" height="15" fill="rgb(212,3,39)" fg:x="12" fg:w="12"/><text x="1.2139%" y="719.50"></text></g><g><title>dlopen (9 samples, 0.72%)</title><rect x="1.2048%" y="693" width="0.7229%" height="15" fill="rgb(226,45,5)" fg:x="15" fg:w="9"/><text x="1.4548%" y="703.50"></text></g><g><title>_dl_catch_error (9 samples, 0.72%)</title><rect x="1.2048%" y="677" width="0.7229%" height="15" fill="rgb(215,167,45)" fg:x="15" fg:w="9"/><text x="1.4548%" y="687.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.72%)</title><rect x="1.2048%" y="661" width="0.7229%" height="15" fill="rgb(250,218,53)" fg:x="15" fg:w="9"/><text x="1.4548%" y="671.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.72%)</title><rect x="1.2048%" y="645" width="0.7229%" height="15" fill="rgb(207,140,0)" fg:x="15" fg:w="9"/><text x="1.4548%" y="655.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.72%)</title><rect x="1.2048%" y="629" width="0.7229%" height="15" fill="rgb(238,133,51)" fg:x="15" fg:w="9"/><text x="1.4548%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (15 samples, 1.20%)</title><rect x="0.8835%" y="805" width="1.2048%" height="15" fill="rgb(218,203,53)" fg:x="11" fg:w="15"/><text x="1.1335%" y="815.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (15 samples, 1.20%)</title><rect x="0.8835%" y="789" width="1.2048%" height="15" fill="rgb(226,184,25)" fg:x="11" fg:w="15"/><text x="1.1335%" y="799.50"></text></g><g><title>engine::session::Session::new (15 samples, 1.20%)</title><rect x="0.8835%" y="773" width="1.2048%" height="15" fill="rgb(231,121,21)" fg:x="11" fg:w="15"/><text x="1.1335%" y="783.50"></text></g><g><title>engine::session::Session::initialize (15 samples, 1.20%)</title><rect x="0.8835%" y="757" width="1.2048%" height="15" fill="rgb(251,14,34)" fg:x="11" fg:w="15"/><text x="1.1335%" y="767.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (15 samples, 1.20%)</title><rect x="0.8835%" y="741" width="1.2048%" height="15" fill="rgb(249,193,11)" fg:x="11" fg:w="15"/><text x="1.1335%" y="751.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="1.9277%" y="725" width="0.1606%" height="15" fill="rgb(220,172,37)" fg:x="24" fg:w="2"/><text x="2.1777%" y="735.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="1.9277%" y="709" width="0.1606%" height="15" fill="rgb(231,229,43)" fg:x="24" fg:w="2"/><text x="2.1777%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="2.0884%" y="789" width="0.0803%" height="15" fill="rgb(250,161,5)" fg:x="26" fg:w="1"/><text x="2.3384%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0884%" y="773" width="0.0803%" height="15" fill="rgb(218,225,18)" fg:x="26" fg:w="1"/><text x="2.3384%" y="783.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="2.1687%" y="741" width="0.0803%" height="15" fill="rgb(245,45,42)" fg:x="27" fg:w="1"/><text x="2.4187%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="2.1687%" y="725" width="0.0803%" height="15" fill="rgb(211,115,1)" fg:x="27" fg:w="1"/><text x="2.4187%" y="735.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="2.1687%" y="709" width="0.0803%" height="15" fill="rgb(248,133,52)" fg:x="27" fg:w="1"/><text x="2.4187%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="2.1687%" y="693" width="0.0803%" height="15" fill="rgb(238,100,21)" fg:x="27" fg:w="1"/><text x="2.4187%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.2490%" y="693" width="0.0803%" height="15" fill="rgb(247,144,11)" fg:x="28" fg:w="1"/><text x="2.4990%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.3293%" y="677" width="0.1606%" height="15" fill="rgb(206,164,16)" fg:x="29" fg:w="2"/><text x="2.5793%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.3293%" y="661" width="0.1606%" height="15" fill="rgb(222,34,3)" fg:x="29" fg:w="2"/><text x="2.5793%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4096%" y="645" width="0.0803%" height="15" fill="rgb(248,82,4)" fg:x="30" fg:w="1"/><text x="2.6596%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="2.3293%" y="693" width="0.2410%" height="15" fill="rgb(228,81,46)" fg:x="29" fg:w="3"/><text x="2.5793%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4900%" y="677" width="0.0803%" height="15" fill="rgb(227,67,47)" fg:x="31" fg:w="1"/><text x="2.7400%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.5703%" y="677" width="0.1606%" height="15" fill="rgb(215,93,53)" fg:x="32" fg:w="2"/><text x="2.8203%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.5703%" y="661" width="0.1606%" height="15" fill="rgb(248,194,39)" fg:x="32" fg:w="2"/><text x="2.8203%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.6506%" y="645" width="0.0803%" height="15" fill="rgb(215,5,19)" fg:x="33" fg:w="1"/><text x="2.9006%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.6506%" y="629" width="0.0803%" height="15" fill="rgb(226,215,51)" fg:x="33" fg:w="1"/><text x="2.9006%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.6506%" y="613" width="0.0803%" height="15" fill="rgb(225,56,26)" fg:x="33" fg:w="1"/><text x="2.9006%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.7309%" y="661" width="0.1606%" height="15" fill="rgb(222,75,29)" fg:x="34" fg:w="2"/><text x="2.9809%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8112%" y="645" width="0.0803%" height="15" fill="rgb(236,139,6)" fg:x="35" fg:w="1"/><text x="3.0612%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8112%" y="629" width="0.0803%" height="15" fill="rgb(223,137,36)" fg:x="35" fg:w="1"/><text x="3.0612%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.8112%" y="613" width="0.0803%" height="15" fill="rgb(226,99,2)" fg:x="35" fg:w="1"/><text x="3.0612%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.8916%" y="645" width="0.0803%" height="15" fill="rgb(206,133,23)" fg:x="36" fg:w="1"/><text x="3.1416%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8916%" y="629" width="0.0803%" height="15" fill="rgb(243,173,15)" fg:x="36" fg:w="1"/><text x="3.1416%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8916%" y="613" width="0.0803%" height="15" fill="rgb(228,69,28)" fg:x="36" fg:w="1"/><text x="3.1416%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.8916%" y="597" width="0.0803%" height="15" fill="rgb(212,51,22)" fg:x="36" fg:w="1"/><text x="3.1416%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.9719%" y="645" width="0.1606%" height="15" fill="rgb(227,113,0)" fg:x="37" fg:w="2"/><text x="3.2219%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.0522%" y="629" width="0.0803%" height="15" fill="rgb(252,84,27)" fg:x="38" fg:w="1"/><text x="3.3022%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.2129%" y="613" width="0.0803%" height="15" fill="rgb(223,145,39)" fg:x="40" fg:w="1"/><text x="3.4629%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.2129%" y="597" width="0.0803%" height="15" fill="rgb(239,219,30)" fg:x="40" fg:w="1"/><text x="3.4629%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.2129%" y="581" width="0.0803%" height="15" fill="rgb(224,196,39)" fg:x="40" fg:w="1"/><text x="3.4629%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.2129%" y="565" width="0.0803%" height="15" fill="rgb(205,35,43)" fg:x="40" fg:w="1"/><text x="3.4629%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2932%" y="597" width="0.0803%" height="15" fill="rgb(228,201,21)" fg:x="41" fg:w="1"/><text x="3.5432%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.2932%" y="613" width="0.1606%" height="15" fill="rgb(237,118,16)" fg:x="41" fg:w="2"/><text x="3.5432%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.3735%" y="597" width="0.0803%" height="15" fill="rgb(241,17,19)" fg:x="42" fg:w="1"/><text x="3.6235%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.3735%" y="581" width="0.0803%" height="15" fill="rgb(214,10,25)" fg:x="42" fg:w="1"/><text x="3.6235%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.3735%" y="565" width="0.0803%" height="15" fill="rgb(238,37,29)" fg:x="42" fg:w="1"/><text x="3.6235%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="2.8916%" y="661" width="0.6426%" height="15" fill="rgb(253,83,25)" fg:x="36" fg:w="8"/><text x="3.1416%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="3.1325%" y="645" width="0.4016%" height="15" fill="rgb(234,192,12)" fg:x="39" fg:w="5"/><text x="3.3825%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="3.2129%" y="629" width="0.3213%" height="15" fill="rgb(241,216,45)" fg:x="40" fg:w="4"/><text x="3.4629%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.4538%" y="613" width="0.0803%" height="15" fill="rgb(242,22,33)" fg:x="43" fg:w="1"/><text x="3.7038%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.4538%" y="597" width="0.0803%" height="15" fill="rgb(231,105,49)" fg:x="43" fg:w="1"/><text x="3.7038%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="2.7309%" y="677" width="0.8835%" height="15" fill="rgb(218,204,15)" fg:x="34" fg:w="11"/><text x="2.9809%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.5341%" y="661" width="0.0803%" height="15" fill="rgb(235,138,41)" fg:x="44" fg:w="1"/><text x="3.7841%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.5341%" y="645" width="0.0803%" height="15" fill="rgb(246,0,9)" fg:x="44" fg:w="1"/><text x="3.7841%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.5341%" y="629" width="0.0803%" height="15" fill="rgb(210,74,4)" fg:x="44" fg:w="1"/><text x="3.7841%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (18 samples, 1.45%)</title><rect x="2.2490%" y="709" width="1.4458%" height="15" fill="rgb(250,60,41)" fg:x="28" fg:w="18"/><text x="2.4990%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="2.5703%" y="693" width="1.1245%" height="15" fill="rgb(220,115,12)" fg:x="32" fg:w="14"/><text x="2.8203%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6145%" y="677" width="0.0803%" height="15" fill="rgb(237,100,13)" fg:x="45" fg:w="1"/><text x="3.8645%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6145%" y="661" width="0.0803%" height="15" fill="rgb(213,55,26)" fg:x="45" fg:w="1"/><text x="3.8645%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6145%" y="645" width="0.0803%" height="15" fill="rgb(216,17,4)" fg:x="45" fg:w="1"/><text x="3.8645%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.6145%" y="629" width="0.0803%" height="15" fill="rgb(220,153,47)" fg:x="45" fg:w="1"/><text x="3.8645%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.6145%" y="613" width="0.0803%" height="15" fill="rgb(215,131,9)" fg:x="45" fg:w="1"/><text x="3.8645%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.6145%" y="597" width="0.0803%" height="15" fill="rgb(233,46,42)" fg:x="45" fg:w="1"/><text x="3.8645%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6948%" y="709" width="0.0803%" height="15" fill="rgb(226,86,7)" fg:x="46" fg:w="1"/><text x="3.9448%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.6948%" y="693" width="0.0803%" height="15" fill="rgb(239,226,21)" fg:x="46" fg:w="1"/><text x="3.9448%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6948%" y="677" width="0.0803%" height="15" fill="rgb(244,137,22)" fg:x="46" fg:w="1"/><text x="3.9448%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6948%" y="661" width="0.0803%" height="15" fill="rgb(211,139,35)" fg:x="46" fg:w="1"/><text x="3.9448%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6948%" y="645" width="0.0803%" height="15" fill="rgb(214,62,50)" fg:x="46" fg:w="1"/><text x="3.9448%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6948%" y="629" width="0.0803%" height="15" fill="rgb(212,113,44)" fg:x="46" fg:w="1"/><text x="3.9448%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.6948%" y="613" width="0.0803%" height="15" fill="rgb(226,150,43)" fg:x="46" fg:w="1"/><text x="3.9448%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="3.7751%" y="693" width="0.0803%" height="15" fill="rgb(250,71,37)" fg:x="47" fg:w="1"/><text x="4.0251%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.7751%" y="677" width="0.0803%" height="15" fill="rgb(219,76,19)" fg:x="47" fg:w="1"/><text x="4.0251%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="4.0161%" y="565" width="0.1606%" height="15" fill="rgb(250,39,11)" fg:x="50" fg:w="2"/><text x="4.2661%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="4.0161%" y="549" width="0.1606%" height="15" fill="rgb(230,64,31)" fg:x="50" fg:w="2"/><text x="4.2661%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.0964%" y="533" width="0.0803%" height="15" fill="rgb(208,222,23)" fg:x="51" fg:w="1"/><text x="4.3464%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="3.8554%" y="629" width="0.4016%" height="15" fill="rgb(227,125,18)" fg:x="48" fg:w="5"/><text x="4.1054%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="3.8554%" y="613" width="0.4016%" height="15" fill="rgb(234,210,9)" fg:x="48" fg:w="5"/><text x="4.1054%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="3.9357%" y="597" width="0.3213%" height="15" fill="rgb(217,127,24)" fg:x="49" fg:w="4"/><text x="4.1857%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="4.0161%" y="581" width="0.2410%" height="15" fill="rgb(239,141,48)" fg:x="50" fg:w="3"/><text x="4.2661%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1767%" y="565" width="0.0803%" height="15" fill="rgb(227,109,8)" fg:x="52" fg:w="1"/><text x="4.4267%" y="575.50"></text></g><g><title>engine::session::Session::flush (27 samples, 2.17%)</title><rect x="2.1687%" y="789" width="2.1687%" height="15" fill="rgb(235,184,23)" fg:x="27" fg:w="27"/><text x="2.4187%" y="799.50">e..</text></g><g><title>engine::session::state::State::close (27 samples, 2.17%)</title><rect x="2.1687%" y="773" width="2.1687%" height="15" fill="rgb(227,226,48)" fg:x="27" fg:w="27"/><text x="2.4187%" y="783.50">e..</text></g><g><title>engine::session::state::State::flush_entities (27 samples, 2.17%)</title><rect x="2.1687%" y="757" width="2.1687%" height="15" fill="rgb(206,150,11)" fg:x="27" fg:w="27"/><text x="2.4187%" y="767.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (26 samples, 2.09%)</title><rect x="2.2490%" y="741" width="2.0884%" height="15" fill="rgb(254,2,33)" fg:x="28" fg:w="26"/><text x="2.4990%" y="751.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (26 samples, 2.09%)</title><rect x="2.2490%" y="725" width="2.0884%" height="15" fill="rgb(243,160,20)" fg:x="28" fg:w="26"/><text x="2.4990%" y="735.50">e..</text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="3.7751%" y="709" width="0.5622%" height="15" fill="rgb(218,208,30)" fg:x="47" fg:w="7"/><text x="4.0251%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="3.8554%" y="693" width="0.4819%" height="15" fill="rgb(224,120,49)" fg:x="48" fg:w="6"/><text x="4.1054%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="3.8554%" y="677" width="0.4819%" height="15" fill="rgb(246,12,2)" fg:x="48" fg:w="6"/><text x="4.1054%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="3.8554%" y="661" width="0.4819%" height="15" fill="rgb(236,117,3)" fg:x="48" fg:w="6"/><text x="4.1054%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="3.8554%" y="645" width="0.4819%" height="15" fill="rgb(216,128,52)" fg:x="48" fg:w="6"/><text x="4.1054%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.2570%" y="629" width="0.0803%" height="15" fill="rgb(246,145,19)" fg:x="53" fg:w="1"/><text x="4.5070%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.3373%" y="773" width="0.0803%" height="15" fill="rgb(222,11,46)" fg:x="54" fg:w="1"/><text x="4.5873%" y="783.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="4.3373%" y="757" width="0.0803%" height="15" fill="rgb(245,82,36)" fg:x="54" fg:w="1"/><text x="4.5873%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="4.3373%" y="741" width="0.0803%" height="15" fill="rgb(250,73,51)" fg:x="54" fg:w="1"/><text x="4.5873%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.3373%" y="725" width="0.0803%" height="15" fill="rgb(221,189,23)" fg:x="54" fg:w="1"/><text x="4.5873%" y="735.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3373%" y="709" width="0.0803%" height="15" fill="rgb(210,33,7)" fg:x="54" fg:w="1"/><text x="4.5873%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3373%" y="693" width="0.0803%" height="15" fill="rgb(210,107,22)" fg:x="54" fg:w="1"/><text x="4.5873%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3373%" y="677" width="0.0803%" height="15" fill="rgb(222,116,37)" fg:x="54" fg:w="1"/><text x="4.5873%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3373%" y="661" width="0.0803%" height="15" fill="rgb(254,17,48)" fg:x="54" fg:w="1"/><text x="4.5873%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.3373%" y="645" width="0.0803%" height="15" fill="rgb(224,36,32)" fg:x="54" fg:w="1"/><text x="4.5873%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.3373%" y="629" width="0.0803%" height="15" fill="rgb(232,90,46)" fg:x="54" fg:w="1"/><text x="4.5873%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.3373%" y="613" width="0.0803%" height="15" fill="rgb(241,66,40)" fg:x="54" fg:w="1"/><text x="4.5873%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3373%" y="597" width="0.0803%" height="15" fill="rgb(249,184,29)" fg:x="54" fg:w="1"/><text x="4.5873%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3373%" y="581" width="0.0803%" height="15" fill="rgb(231,181,1)" fg:x="54" fg:w="1"/><text x="4.5873%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.3373%" y="565" width="0.0803%" height="15" fill="rgb(224,94,2)" fg:x="54" fg:w="1"/><text x="4.5873%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.3373%" y="549" width="0.0803%" height="15" fill="rgb(229,170,15)" fg:x="54" fg:w="1"/><text x="4.5873%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.3373%" y="533" width="0.0803%" height="15" fill="rgb(240,127,35)" fg:x="54" fg:w="1"/><text x="4.5873%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.3373%" y="517" width="0.0803%" height="15" fill="rgb(248,196,34)" fg:x="54" fg:w="1"/><text x="4.5873%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3373%" y="501" width="0.0803%" height="15" fill="rgb(236,137,7)" fg:x="54" fg:w="1"/><text x="4.5873%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="4.4177%" y="757" width="0.0803%" height="15" fill="rgb(235,127,16)" fg:x="55" fg:w="1"/><text x="4.6677%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="4.4177%" y="741" width="0.0803%" height="15" fill="rgb(250,192,54)" fg:x="55" fg:w="1"/><text x="4.6677%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4177%" y="725" width="0.0803%" height="15" fill="rgb(218,98,20)" fg:x="55" fg:w="1"/><text x="4.6677%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.4980%" y="725" width="0.1606%" height="15" fill="rgb(230,176,47)" fg:x="56" fg:w="2"/><text x="4.7480%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.5783%" y="709" width="0.0803%" height="15" fill="rgb(244,2,33)" fg:x="57" fg:w="1"/><text x="4.8283%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.5783%" y="693" width="0.0803%" height="15" fill="rgb(231,100,17)" fg:x="57" fg:w="1"/><text x="4.8283%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5783%" y="677" width="0.0803%" height="15" fill="rgb(245,23,12)" fg:x="57" fg:w="1"/><text x="4.8283%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5783%" y="661" width="0.0803%" height="15" fill="rgb(249,55,22)" fg:x="57" fg:w="1"/><text x="4.8283%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5783%" y="645" width="0.0803%" height="15" fill="rgb(207,134,9)" fg:x="57" fg:w="1"/><text x="4.8283%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5783%" y="629" width="0.0803%" height="15" fill="rgb(218,134,0)" fg:x="57" fg:w="1"/><text x="4.8283%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5783%" y="613" width="0.0803%" height="15" fill="rgb(213,212,33)" fg:x="57" fg:w="1"/><text x="4.8283%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="4.4980%" y="757" width="0.2410%" height="15" fill="rgb(252,106,18)" fg:x="56" fg:w="3"/><text x="4.7480%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="4.4980%" y="741" width="0.2410%" height="15" fill="rgb(208,126,42)" fg:x="56" fg:w="3"/><text x="4.7480%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.6586%" y="725" width="0.0803%" height="15" fill="rgb(246,175,29)" fg:x="58" fg:w="1"/><text x="4.9086%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.6586%" y="709" width="0.0803%" height="15" fill="rgb(215,13,50)" fg:x="58" fg:w="1"/><text x="4.9086%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.6586%" y="693" width="0.0803%" height="15" fill="rgb(216,172,15)" fg:x="58" fg:w="1"/><text x="4.9086%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.6586%" y="677" width="0.0803%" height="15" fill="rgb(212,103,13)" fg:x="58" fg:w="1"/><text x="4.9086%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.6586%" y="661" width="0.0803%" height="15" fill="rgb(231,171,36)" fg:x="58" fg:w="1"/><text x="4.9086%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.6586%" y="645" width="0.0803%" height="15" fill="rgb(250,123,20)" fg:x="58" fg:w="1"/><text x="4.9086%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.6586%" y="629" width="0.0803%" height="15" fill="rgb(212,53,50)" fg:x="58" fg:w="1"/><text x="4.9086%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.6586%" y="613" width="0.0803%" height="15" fill="rgb(243,54,12)" fg:x="58" fg:w="1"/><text x="4.9086%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.6586%" y="597" width="0.0803%" height="15" fill="rgb(234,101,34)" fg:x="58" fg:w="1"/><text x="4.9086%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.7390%" y="661" width="0.0803%" height="15" fill="rgb(254,67,22)" fg:x="59" fg:w="1"/><text x="4.9890%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.7390%" y="645" width="0.0803%" height="15" fill="rgb(250,35,47)" fg:x="59" fg:w="1"/><text x="4.9890%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.7390%" y="629" width="0.0803%" height="15" fill="rgb(226,126,38)" fg:x="59" fg:w="1"/><text x="4.9890%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.7390%" y="613" width="0.0803%" height="15" fill="rgb(216,138,53)" fg:x="59" fg:w="1"/><text x="4.9890%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.7390%" y="597" width="0.0803%" height="15" fill="rgb(246,199,43)" fg:x="59" fg:w="1"/><text x="4.9890%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.7390%" y="581" width="0.0803%" height="15" fill="rgb(232,125,11)" fg:x="59" fg:w="1"/><text x="4.9890%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.7390%" y="565" width="0.0803%" height="15" fill="rgb(218,219,45)" fg:x="59" fg:w="1"/><text x="4.9890%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.7390%" y="549" width="0.0803%" height="15" fill="rgb(216,102,54)" fg:x="59" fg:w="1"/><text x="4.9890%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.7390%" y="533" width="0.0803%" height="15" fill="rgb(250,228,7)" fg:x="59" fg:w="1"/><text x="4.9890%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.7390%" y="517" width="0.0803%" height="15" fill="rgb(226,125,25)" fg:x="59" fg:w="1"/><text x="4.9890%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.7390%" y="501" width="0.0803%" height="15" fill="rgb(224,165,27)" fg:x="59" fg:w="1"/><text x="4.9890%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.7390%" y="485" width="0.0803%" height="15" fill="rgb(233,86,3)" fg:x="59" fg:w="1"/><text x="4.9890%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.7390%" y="469" width="0.0803%" height="15" fill="rgb(228,116,20)" fg:x="59" fg:w="1"/><text x="4.9890%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.7390%" y="453" width="0.0803%" height="15" fill="rgb(209,192,17)" fg:x="59" fg:w="1"/><text x="4.9890%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.7390%" y="437" width="0.0803%" height="15" fill="rgb(224,88,34)" fg:x="59" fg:w="1"/><text x="4.9890%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7390%" y="421" width="0.0803%" height="15" fill="rgb(233,38,6)" fg:x="59" fg:w="1"/><text x="4.9890%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.7390%" y="709" width="0.1606%" height="15" fill="rgb(212,59,30)" fg:x="59" fg:w="2"/><text x="4.9890%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.7390%" y="693" width="0.1606%" height="15" fill="rgb(213,80,3)" fg:x="59" fg:w="2"/><text x="4.9890%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.7390%" y="677" width="0.1606%" height="15" fill="rgb(251,178,7)" fg:x="59" fg:w="2"/><text x="4.9890%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8193%" y="661" width="0.0803%" height="15" fill="rgb(213,154,26)" fg:x="60" fg:w="1"/><text x="5.0693%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8193%" y="645" width="0.0803%" height="15" fill="rgb(238,165,49)" fg:x="60" fg:w="1"/><text x="5.0693%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8193%" y="629" width="0.0803%" height="15" fill="rgb(248,91,46)" fg:x="60" fg:w="1"/><text x="5.0693%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8193%" y="613" width="0.0803%" height="15" fill="rgb(244,21,52)" fg:x="60" fg:w="1"/><text x="5.0693%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.8193%" y="597" width="0.0803%" height="15" fill="rgb(247,122,20)" fg:x="60" fg:w="1"/><text x="5.0693%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8193%" y="581" width="0.0803%" height="15" fill="rgb(218,27,9)" fg:x="60" fg:w="1"/><text x="5.0693%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8193%" y="565" width="0.0803%" height="15" fill="rgb(246,7,6)" fg:x="60" fg:w="1"/><text x="5.0693%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8193%" y="549" width="0.0803%" height="15" fill="rgb(227,135,54)" fg:x="60" fg:w="1"/><text x="5.0693%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.8996%" y="661" width="0.0803%" height="15" fill="rgb(247,14,11)" fg:x="61" fg:w="1"/><text x="5.1496%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.8996%" y="645" width="0.0803%" height="15" fill="rgb(206,149,34)" fg:x="61" fg:w="1"/><text x="5.1496%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.8996%" y="629" width="0.0803%" height="15" fill="rgb(227,228,4)" fg:x="61" fg:w="1"/><text x="5.1496%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8996%" y="613" width="0.0803%" height="15" fill="rgb(238,218,28)" fg:x="61" fg:w="1"/><text x="5.1496%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8996%" y="597" width="0.0803%" height="15" fill="rgb(252,86,40)" fg:x="61" fg:w="1"/><text x="5.1496%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.8996%" y="581" width="0.0803%" height="15" fill="rgb(251,225,11)" fg:x="61" fg:w="1"/><text x="5.1496%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.8996%" y="565" width="0.0803%" height="15" fill="rgb(206,46,49)" fg:x="61" fg:w="1"/><text x="5.1496%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.8996%" y="549" width="0.0803%" height="15" fill="rgb(245,128,24)" fg:x="61" fg:w="1"/><text x="5.1496%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="4.8996%" y="533" width="0.0803%" height="15" fill="rgb(219,177,34)" fg:x="61" fg:w="1"/><text x="5.1496%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.8996%" y="517" width="0.0803%" height="15" fill="rgb(218,60,48)" fg:x="61" fg:w="1"/><text x="5.1496%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (9 samples, 0.72%)</title><rect x="4.3373%" y="789" width="0.7229%" height="15" fill="rgb(221,11,5)" fg:x="54" fg:w="9"/><text x="4.5873%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="4.4177%" y="773" width="0.6426%" height="15" fill="rgb(220,148,13)" fg:x="55" fg:w="8"/><text x="4.6677%" y="783.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="4.7390%" y="757" width="0.3213%" height="15" fill="rgb(210,16,3)" fg:x="59" fg:w="4"/><text x="4.9890%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="4.7390%" y="741" width="0.3213%" height="15" fill="rgb(236,80,2)" fg:x="59" fg:w="4"/><text x="4.9890%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="4.7390%" y="725" width="0.3213%" height="15" fill="rgb(239,129,19)" fg:x="59" fg:w="4"/><text x="4.9890%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="4.8996%" y="709" width="0.1606%" height="15" fill="rgb(220,106,35)" fg:x="61" fg:w="2"/><text x="5.1496%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.8996%" y="693" width="0.1606%" height="15" fill="rgb(252,139,45)" fg:x="61" fg:w="2"/><text x="5.1496%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.8996%" y="677" width="0.1606%" height="15" fill="rgb(229,8,36)" fg:x="61" fg:w="2"/><text x="5.1496%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9799%" y="661" width="0.0803%" height="15" fill="rgb(230,126,33)" fg:x="62" fg:w="1"/><text x="5.2299%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.9799%" y="645" width="0.0803%" height="15" fill="rgb(239,140,21)" fg:x="62" fg:w="1"/><text x="5.2299%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9799%" y="629" width="0.0803%" height="15" fill="rgb(254,104,9)" fg:x="62" fg:w="1"/><text x="5.2299%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9799%" y="613" width="0.0803%" height="15" fill="rgb(239,52,14)" fg:x="62" fg:w="1"/><text x="5.2299%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9799%" y="597" width="0.0803%" height="15" fill="rgb(208,227,44)" fg:x="62" fg:w="1"/><text x="5.2299%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9799%" y="581" width="0.0803%" height="15" fill="rgb(246,18,19)" fg:x="62" fg:w="1"/><text x="5.2299%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.9799%" y="565" width="0.0803%" height="15" fill="rgb(235,228,25)" fg:x="62" fg:w="1"/><text x="5.2299%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9799%" y="549" width="0.0803%" height="15" fill="rgb(240,156,20)" fg:x="62" fg:w="1"/><text x="5.2299%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="5.0602%" y="741" width="0.0803%" height="15" fill="rgb(224,8,20)" fg:x="63" fg:w="1"/><text x="5.3102%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0602%" y="725" width="0.0803%" height="15" fill="rgb(214,12,52)" fg:x="63" fg:w="1"/><text x="5.3102%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0602%" y="709" width="0.0803%" height="15" fill="rgb(211,220,47)" fg:x="63" fg:w="1"/><text x="5.3102%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.0602%" y="693" width="0.0803%" height="15" fill="rgb(250,173,5)" fg:x="63" fg:w="1"/><text x="5.3102%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.0602%" y="677" width="0.0803%" height="15" fill="rgb(250,125,52)" fg:x="63" fg:w="1"/><text x="5.3102%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.0602%" y="661" width="0.0803%" height="15" fill="rgb(209,133,18)" fg:x="63" fg:w="1"/><text x="5.3102%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.0602%" y="645" width="0.0803%" height="15" fill="rgb(216,173,22)" fg:x="63" fg:w="1"/><text x="5.3102%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.0602%" y="629" width="0.0803%" height="15" fill="rgb(205,3,22)" fg:x="63" fg:w="1"/><text x="5.3102%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.0602%" y="613" width="0.0803%" height="15" fill="rgb(248,22,20)" fg:x="63" fg:w="1"/><text x="5.3102%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.0602%" y="597" width="0.0803%" height="15" fill="rgb(233,6,29)" fg:x="63" fg:w="1"/><text x="5.3102%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.0602%" y="581" width="0.0803%" height="15" fill="rgb(240,22,54)" fg:x="63" fg:w="1"/><text x="5.3102%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.0602%" y="565" width="0.0803%" height="15" fill="rgb(231,133,32)" fg:x="63" fg:w="1"/><text x="5.3102%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0602%" y="549" width="0.0803%" height="15" fill="rgb(248,193,4)" fg:x="63" fg:w="1"/><text x="5.3102%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="5.0602%" y="757" width="0.1606%" height="15" fill="rgb(211,178,46)" fg:x="63" fg:w="2"/><text x="5.3102%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="5.1406%" y="741" width="0.0803%" height="15" fill="rgb(224,5,42)" fg:x="64" fg:w="1"/><text x="5.3906%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.1406%" y="725" width="0.0803%" height="15" fill="rgb(239,176,25)" fg:x="64" fg:w="1"/><text x="5.3906%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.1406%" y="709" width="0.0803%" height="15" fill="rgb(245,187,50)" fg:x="64" fg:w="1"/><text x="5.3906%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.1406%" y="693" width="0.0803%" height="15" fill="rgb(248,24,15)" fg:x="64" fg:w="1"/><text x="5.3906%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.1406%" y="677" width="0.0803%" height="15" fill="rgb(205,166,13)" fg:x="64" fg:w="1"/><text x="5.3906%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.1406%" y="661" width="0.0803%" height="15" fill="rgb(208,114,23)" fg:x="64" fg:w="1"/><text x="5.3906%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.1406%" y="645" width="0.0803%" height="15" fill="rgb(239,127,18)" fg:x="64" fg:w="1"/><text x="5.3906%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.1406%" y="629" width="0.0803%" height="15" fill="rgb(219,154,28)" fg:x="64" fg:w="1"/><text x="5.3906%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.1406%" y="613" width="0.0803%" height="15" fill="rgb(225,157,23)" fg:x="64" fg:w="1"/><text x="5.3906%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.1406%" y="597" width="0.0803%" height="15" fill="rgb(219,8,6)" fg:x="64" fg:w="1"/><text x="5.3906%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.1406%" y="581" width="0.0803%" height="15" fill="rgb(212,47,6)" fg:x="64" fg:w="1"/><text x="5.3906%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.1406%" y="565" width="0.0803%" height="15" fill="rgb(224,190,4)" fg:x="64" fg:w="1"/><text x="5.3906%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1406%" y="549" width="0.0803%" height="15" fill="rgb(239,183,29)" fg:x="64" fg:w="1"/><text x="5.3906%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1406%" y="533" width="0.0803%" height="15" fill="rgb(213,57,7)" fg:x="64" fg:w="1"/><text x="5.3906%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="5.1406%" y="517" width="0.0803%" height="15" fill="rgb(216,148,1)" fg:x="64" fg:w="1"/><text x="5.3906%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="5.1406%" y="501" width="0.0803%" height="15" fill="rgb(236,182,29)" fg:x="64" fg:w="1"/><text x="5.3906%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="5.1406%" y="485" width="0.0803%" height="15" fill="rgb(244,120,48)" fg:x="64" fg:w="1"/><text x="5.3906%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="5.1406%" y="469" width="0.0803%" height="15" fill="rgb(206,71,34)" fg:x="64" fg:w="1"/><text x="5.3906%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.1406%" y="453" width="0.0803%" height="15" fill="rgb(242,32,6)" fg:x="64" fg:w="1"/><text x="5.3906%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.1406%" y="437" width="0.0803%" height="15" fill="rgb(241,35,3)" fg:x="64" fg:w="1"/><text x="5.3906%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.1406%" y="421" width="0.0803%" height="15" fill="rgb(222,62,19)" fg:x="64" fg:w="1"/><text x="5.3906%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="5.1406%" y="405" width="0.0803%" height="15" fill="rgb(223,110,41)" fg:x="64" fg:w="1"/><text x="5.3906%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.1406%" y="389" width="0.0803%" height="15" fill="rgb(208,224,4)" fg:x="64" fg:w="1"/><text x="5.3906%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1406%" y="373" width="0.0803%" height="15" fill="rgb(241,137,19)" fg:x="64" fg:w="1"/><text x="5.3906%" y="383.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="5.0602%" y="789" width="0.2410%" height="15" fill="rgb(244,24,17)" fg:x="63" fg:w="3"/><text x="5.3102%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="5.0602%" y="773" width="0.2410%" height="15" fill="rgb(245,178,49)" fg:x="63" fg:w="3"/><text x="5.3102%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.2209%" y="757" width="0.0803%" height="15" fill="rgb(219,160,38)" fg:x="65" fg:w="1"/><text x="5.4709%" y="767.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.2209%" y="741" width="0.0803%" height="15" fill="rgb(228,137,14)" fg:x="65" fg:w="1"/><text x="5.4709%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.2209%" y="725" width="0.0803%" height="15" fill="rgb(237,134,11)" fg:x="65" fg:w="1"/><text x="5.4709%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.2209%" y="709" width="0.0803%" height="15" fill="rgb(211,126,44)" fg:x="65" fg:w="1"/><text x="5.4709%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2209%" y="693" width="0.0803%" height="15" fill="rgb(226,171,33)" fg:x="65" fg:w="1"/><text x="5.4709%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.2209%" y="677" width="0.0803%" height="15" fill="rgb(253,99,13)" fg:x="65" fg:w="1"/><text x="5.4709%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2209%" y="661" width="0.0803%" height="15" fill="rgb(244,48,7)" fg:x="65" fg:w="1"/><text x="5.4709%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.2209%" y="645" width="0.0803%" height="15" fill="rgb(244,217,54)" fg:x="65" fg:w="1"/><text x="5.4709%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.2209%" y="629" width="0.0803%" height="15" fill="rgb(224,15,18)" fg:x="65" fg:w="1"/><text x="5.4709%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="5.2209%" y="613" width="0.0803%" height="15" fill="rgb(244,99,12)" fg:x="65" fg:w="1"/><text x="5.4709%" y="623.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="5.3012%" y="789" width="0.0803%" height="15" fill="rgb(233,226,8)" fg:x="66" fg:w="1"/><text x="5.5512%" y="799.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="5.3012%" y="773" width="0.0803%" height="15" fill="rgb(229,211,3)" fg:x="66" fg:w="1"/><text x="5.5512%" y="783.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="5.3012%" y="757" width="0.0803%" height="15" fill="rgb(216,140,21)" fg:x="66" fg:w="1"/><text x="5.5512%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="5.4618%" y="741" width="0.0803%" height="15" fill="rgb(234,122,30)" fg:x="68" fg:w="1"/><text x="5.7118%" y="751.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="5.4618%" y="725" width="0.0803%" height="15" fill="rgb(236,25,46)" fg:x="68" fg:w="1"/><text x="5.7118%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.4618%" y="709" width="0.0803%" height="15" fill="rgb(217,52,54)" fg:x="68" fg:w="1"/><text x="5.7118%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.4618%" y="773" width="0.1606%" height="15" fill="rgb(222,29,26)" fg:x="68" fg:w="2"/><text x="5.7118%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="5.4618%" y="757" width="0.1606%" height="15" fill="rgb(216,177,29)" fg:x="68" fg:w="2"/><text x="5.7118%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="5.5422%" y="741" width="0.0803%" height="15" fill="rgb(247,136,51)" fg:x="69" fg:w="1"/><text x="5.7922%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.5422%" y="725" width="0.0803%" height="15" fill="rgb(231,47,47)" fg:x="69" fg:w="1"/><text x="5.7922%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="709" width="0.0803%" height="15" fill="rgb(211,192,36)" fg:x="69" fg:w="1"/><text x="5.7922%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5422%" y="693" width="0.0803%" height="15" fill="rgb(229,156,32)" fg:x="69" fg:w="1"/><text x="5.7922%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="677" width="0.0803%" height="15" fill="rgb(248,213,20)" fg:x="69" fg:w="1"/><text x="5.7922%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="661" width="0.0803%" height="15" fill="rgb(217,64,7)" fg:x="69" fg:w="1"/><text x="5.7922%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="645" width="0.0803%" height="15" fill="rgb(232,142,8)" fg:x="69" fg:w="1"/><text x="5.7922%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5422%" y="629" width="0.0803%" height="15" fill="rgb(224,92,44)" fg:x="69" fg:w="1"/><text x="5.7922%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="613" width="0.0803%" height="15" fill="rgb(214,169,17)" fg:x="69" fg:w="1"/><text x="5.7922%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="597" width="0.0803%" height="15" fill="rgb(210,59,37)" fg:x="69" fg:w="1"/><text x="5.7922%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="581" width="0.0803%" height="15" fill="rgb(214,116,48)" fg:x="69" fg:w="1"/><text x="5.7922%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5422%" y="565" width="0.0803%" height="15" fill="rgb(244,191,6)" fg:x="69" fg:w="1"/><text x="5.7922%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="549" width="0.0803%" height="15" fill="rgb(241,50,52)" fg:x="69" fg:w="1"/><text x="5.7922%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="533" width="0.0803%" height="15" fill="rgb(236,75,39)" fg:x="69" fg:w="1"/><text x="5.7922%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5422%" y="517" width="0.0803%" height="15" fill="rgb(236,99,0)" fg:x="69" fg:w="1"/><text x="5.7922%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5422%" y="501" width="0.0803%" height="15" fill="rgb(207,202,15)" fg:x="69" fg:w="1"/><text x="5.7922%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.6225%" y="725" width="0.0803%" height="15" fill="rgb(233,207,14)" fg:x="70" fg:w="1"/><text x="5.8725%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="5.6225%" y="709" width="0.0803%" height="15" fill="rgb(226,27,51)" fg:x="70" fg:w="1"/><text x="5.8725%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.6225%" y="693" width="0.0803%" height="15" fill="rgb(206,104,42)" fg:x="70" fg:w="1"/><text x="5.8725%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.6225%" y="677" width="0.0803%" height="15" fill="rgb(212,225,4)" fg:x="70" fg:w="1"/><text x="5.8725%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.6225%" y="661" width="0.0803%" height="15" fill="rgb(233,96,42)" fg:x="70" fg:w="1"/><text x="5.8725%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6225%" y="645" width="0.0803%" height="15" fill="rgb(229,21,32)" fg:x="70" fg:w="1"/><text x="5.8725%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6225%" y="629" width="0.0803%" height="15" fill="rgb(226,216,24)" fg:x="70" fg:w="1"/><text x="5.8725%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.6225%" y="613" width="0.0803%" height="15" fill="rgb(221,163,17)" fg:x="70" fg:w="1"/><text x="5.8725%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.7831%" y="709" width="0.0803%" height="15" fill="rgb(216,216,42)" fg:x="72" fg:w="1"/><text x="6.0331%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.7831%" y="693" width="0.0803%" height="15" fill="rgb(240,118,7)" fg:x="72" fg:w="1"/><text x="6.0331%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.7831%" y="677" width="0.0803%" height="15" fill="rgb(221,67,37)" fg:x="72" fg:w="1"/><text x="6.0331%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.7831%" y="661" width="0.0803%" height="15" fill="rgb(241,32,44)" fg:x="72" fg:w="1"/><text x="6.0331%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7831%" y="645" width="0.0803%" height="15" fill="rgb(235,204,43)" fg:x="72" fg:w="1"/><text x="6.0331%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.7831%" y="629" width="0.0803%" height="15" fill="rgb(213,116,10)" fg:x="72" fg:w="1"/><text x="6.0331%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.7831%" y="613" width="0.0803%" height="15" fill="rgb(239,15,48)" fg:x="72" fg:w="1"/><text x="6.0331%" y="623.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="5.7028%" y="725" width="0.2410%" height="15" fill="rgb(207,123,36)" fg:x="71" fg:w="3"/><text x="5.9528%" y="735.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="5.8635%" y="709" width="0.0803%" height="15" fill="rgb(209,103,30)" fg:x="73" fg:w="1"/><text x="6.1135%" y="719.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.8635%" y="693" width="0.0803%" height="15" fill="rgb(238,100,19)" fg:x="73" fg:w="1"/><text x="6.1135%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="5.8635%" y="677" width="0.0803%" height="15" fill="rgb(244,30,14)" fg:x="73" fg:w="1"/><text x="6.1135%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.8635%" y="661" width="0.0803%" height="15" fill="rgb(249,174,6)" fg:x="73" fg:w="1"/><text x="6.1135%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.8635%" y="645" width="0.0803%" height="15" fill="rgb(235,213,41)" fg:x="73" fg:w="1"/><text x="6.1135%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.8635%" y="629" width="0.0803%" height="15" fill="rgb(213,118,6)" fg:x="73" fg:w="1"/><text x="6.1135%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8635%" y="613" width="0.0803%" height="15" fill="rgb(235,44,51)" fg:x="73" fg:w="1"/><text x="6.1135%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8635%" y="597" width="0.0803%" height="15" fill="rgb(217,9,53)" fg:x="73" fg:w="1"/><text x="6.1135%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8635%" y="581" width="0.0803%" height="15" fill="rgb(237,172,34)" fg:x="73" fg:w="1"/><text x="6.1135%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="5.6225%" y="773" width="0.4016%" height="15" fill="rgb(206,206,11)" fg:x="70" fg:w="5"/><text x="5.8725%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="5.6225%" y="757" width="0.4016%" height="15" fill="rgb(214,149,29)" fg:x="70" fg:w="5"/><text x="5.8725%" y="767.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="5.6225%" y="741" width="0.4016%" height="15" fill="rgb(208,123,3)" fg:x="70" fg:w="5"/><text x="5.8725%" y="751.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="5.9438%" y="725" width="0.0803%" height="15" fill="rgb(229,126,4)" fg:x="74" fg:w="1"/><text x="6.1938%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="5.9438%" y="709" width="0.0803%" height="15" fill="rgb(222,92,36)" fg:x="74" fg:w="1"/><text x="6.1938%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.9438%" y="693" width="0.0803%" height="15" fill="rgb(216,39,41)" fg:x="74" fg:w="1"/><text x="6.1938%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.9438%" y="677" width="0.0803%" height="15" fill="rgb(253,127,28)" fg:x="74" fg:w="1"/><text x="6.1938%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9438%" y="661" width="0.0803%" height="15" fill="rgb(249,152,51)" fg:x="74" fg:w="1"/><text x="6.1938%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.1044%" y="645" width="0.0803%" height="15" fill="rgb(209,123,42)" fg:x="76" fg:w="1"/><text x="6.3544%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1044%" y="629" width="0.0803%" height="15" fill="rgb(241,118,22)" fg:x="76" fg:w="1"/><text x="6.3544%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="6.1044%" y="661" width="0.1606%" height="15" fill="rgb(208,25,7)" fg:x="76" fg:w="2"/><text x="6.3544%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1847%" y="645" width="0.0803%" height="15" fill="rgb(243,144,39)" fg:x="77" fg:w="1"/><text x="6.4347%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="6.2651%" y="645" width="0.2410%" height="15" fill="rgb(250,50,5)" fg:x="78" fg:w="3"/><text x="6.5151%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.3454%" y="629" width="0.1606%" height="15" fill="rgb(207,67,11)" fg:x="79" fg:w="2"/><text x="6.5954%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.3454%" y="613" width="0.1606%" height="15" fill="rgb(245,204,40)" fg:x="79" fg:w="2"/><text x="6.5954%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.5060%" y="629" width="0.0803%" height="15" fill="rgb(238,228,24)" fg:x="81" fg:w="1"/><text x="6.7560%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5060%" y="613" width="0.0803%" height="15" fill="rgb(217,116,22)" fg:x="81" fg:w="1"/><text x="6.7560%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5060%" y="597" width="0.0803%" height="15" fill="rgb(234,98,12)" fg:x="81" fg:w="1"/><text x="6.7560%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.5060%" y="581" width="0.0803%" height="15" fill="rgb(242,170,50)" fg:x="81" fg:w="1"/><text x="6.7560%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.5863%" y="613" width="0.0803%" height="15" fill="rgb(235,7,5)" fg:x="82" fg:w="1"/><text x="6.8363%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.6667%" y="597" width="0.0803%" height="15" fill="rgb(241,114,28)" fg:x="83" fg:w="1"/><text x="6.9167%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.5863%" y="629" width="0.2410%" height="15" fill="rgb(246,112,42)" fg:x="82" fg:w="3"/><text x="6.8363%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.6667%" y="613" width="0.1606%" height="15" fill="rgb(248,228,14)" fg:x="83" fg:w="2"/><text x="6.9167%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7470%" y="597" width="0.0803%" height="15" fill="rgb(208,133,18)" fg:x="84" fg:w="1"/><text x="6.9970%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.7470%" y="581" width="0.0803%" height="15" fill="rgb(207,35,49)" fg:x="84" fg:w="1"/><text x="6.9970%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="6.5060%" y="645" width="0.4819%" height="15" fill="rgb(205,68,36)" fg:x="81" fg:w="6"/><text x="6.7560%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.8273%" y="629" width="0.1606%" height="15" fill="rgb(245,62,40)" fg:x="85" fg:w="2"/><text x="7.0773%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.9076%" y="613" width="0.0803%" height="15" fill="rgb(228,27,24)" fg:x="86" fg:w="1"/><text x="7.1576%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="6.2651%" y="661" width="0.8835%" height="15" fill="rgb(253,19,12)" fg:x="78" fg:w="11"/><text x="6.5151%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.9880%" y="645" width="0.1606%" height="15" fill="rgb(232,28,20)" fg:x="87" fg:w="2"/><text x="7.2380%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.9880%" y="629" width="0.1606%" height="15" fill="rgb(218,35,51)" fg:x="87" fg:w="2"/><text x="7.2380%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.9880%" y="613" width="0.1606%" height="15" fill="rgb(212,90,40)" fg:x="87" fg:w="2"/><text x="7.2380%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.0683%" y="597" width="0.0803%" height="15" fill="rgb(220,172,12)" fg:x="88" fg:w="1"/><text x="7.3183%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.0683%" y="581" width="0.0803%" height="15" fill="rgb(226,159,20)" fg:x="88" fg:w="1"/><text x="7.3183%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.0683%" y="565" width="0.0803%" height="15" fill="rgb(234,205,16)" fg:x="88" fg:w="1"/><text x="7.3183%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.12%)</title><rect x="6.1044%" y="677" width="1.1245%" height="15" fill="rgb(207,9,39)" fg:x="76" fg:w="14"/><text x="6.3544%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.1486%" y="661" width="0.0803%" height="15" fill="rgb(249,143,15)" fg:x="89" fg:w="1"/><text x="7.3986%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.1486%" y="645" width="0.0803%" height="15" fill="rgb(253,133,29)" fg:x="89" fg:w="1"/><text x="7.3986%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="7.1486%" y="629" width="0.0803%" height="15" fill="rgb(221,187,0)" fg:x="89" fg:w="1"/><text x="7.3986%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2289%" y="677" width="0.0803%" height="15" fill="rgb(205,204,26)" fg:x="90" fg:w="1"/><text x="7.4789%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.2289%" y="661" width="0.0803%" height="15" fill="rgb(224,68,54)" fg:x="90" fg:w="1"/><text x="7.4789%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2289%" y="645" width="0.0803%" height="15" fill="rgb(209,67,4)" fg:x="90" fg:w="1"/><text x="7.4789%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2289%" y="629" width="0.0803%" height="15" fill="rgb(228,229,18)" fg:x="90" fg:w="1"/><text x="7.4789%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2289%" y="613" width="0.0803%" height="15" fill="rgb(231,89,13)" fg:x="90" fg:w="1"/><text x="7.4789%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2289%" y="597" width="0.0803%" height="15" fill="rgb(210,182,18)" fg:x="90" fg:w="1"/><text x="7.4789%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3092%" y="629" width="0.0803%" height="15" fill="rgb(240,105,2)" fg:x="91" fg:w="1"/><text x="7.5592%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5502%" y="581" width="0.0803%" height="15" fill="rgb(207,170,50)" fg:x="94" fg:w="1"/><text x="7.8002%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5502%" y="565" width="0.0803%" height="15" fill="rgb(232,133,24)" fg:x="94" fg:w="1"/><text x="7.8002%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5502%" y="549" width="0.0803%" height="15" fill="rgb(235,166,27)" fg:x="94" fg:w="1"/><text x="7.8002%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6305%" y="549" width="0.0803%" height="15" fill="rgb(209,19,13)" fg:x="95" fg:w="1"/><text x="7.8805%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6305%" y="533" width="0.0803%" height="15" fill="rgb(226,79,39)" fg:x="95" fg:w="1"/><text x="7.8805%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6305%" y="517" width="0.0803%" height="15" fill="rgb(222,163,10)" fg:x="95" fg:w="1"/><text x="7.8805%" y="527.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.77%)</title><rect x="6.0241%" y="773" width="1.7671%" height="15" fill="rgb(214,44,19)" fg:x="75" fg:w="22"/><text x="6.2741%" y="783.50"></text></g><g><title>engine::session::Session::save_changes (22 samples, 1.77%)</title><rect x="6.0241%" y="757" width="1.7671%" height="15" fill="rgb(210,217,13)" fg:x="75" fg:w="22"/><text x="6.2741%" y="767.50"></text></g><g><title>engine::session::state::State::close (22 samples, 1.77%)</title><rect x="6.0241%" y="741" width="1.7671%" height="15" fill="rgb(237,61,54)" fg:x="75" fg:w="22"/><text x="6.2741%" y="751.50"></text></g><g><title>engine::session::state::State::flush_entities (22 samples, 1.77%)</title><rect x="6.0241%" y="725" width="1.7671%" height="15" fill="rgb(226,184,24)" fg:x="75" fg:w="22"/><text x="6.2741%" y="735.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (22 samples, 1.77%)</title><rect x="6.0241%" y="709" width="1.7671%" height="15" fill="rgb(223,226,4)" fg:x="75" fg:w="22"/><text x="6.2741%" y="719.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.77%)</title><rect x="6.0241%" y="693" width="1.7671%" height="15" fill="rgb(210,26,41)" fg:x="75" fg:w="22"/><text x="6.2741%" y="703.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="7.3092%" y="677" width="0.4819%" height="15" fill="rgb(220,221,6)" fg:x="91" fg:w="6"/><text x="7.5592%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="7.3092%" y="661" width="0.4819%" height="15" fill="rgb(225,89,49)" fg:x="91" fg:w="6"/><text x="7.5592%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="7.3092%" y="645" width="0.4819%" height="15" fill="rgb(218,70,45)" fg:x="91" fg:w="6"/><text x="7.5592%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="7.3896%" y="629" width="0.4016%" height="15" fill="rgb(238,166,21)" fg:x="92" fg:w="5"/><text x="7.6396%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="7.4699%" y="613" width="0.3213%" height="15" fill="rgb(224,141,44)" fg:x="93" fg:w="4"/><text x="7.7199%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="7.4699%" y="597" width="0.3213%" height="15" fill="rgb(230,12,49)" fg:x="93" fg:w="4"/><text x="7.7199%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.6305%" y="581" width="0.1606%" height="15" fill="rgb(212,174,12)" fg:x="95" fg:w="2"/><text x="7.8805%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.6305%" y="565" width="0.1606%" height="15" fill="rgb(246,67,9)" fg:x="95" fg:w="2"/><text x="7.8805%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7108%" y="549" width="0.0803%" height="15" fill="rgb(239,35,23)" fg:x="96" fg:w="1"/><text x="7.9608%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7108%" y="533" width="0.0803%" height="15" fill="rgb(211,167,0)" fg:x="96" fg:w="1"/><text x="7.9608%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="7.7912%" y="693" width="0.0803%" height="15" fill="rgb(225,119,45)" fg:x="97" fg:w="1"/><text x="8.0412%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="7.7912%" y="677" width="0.0803%" height="15" fill="rgb(210,162,6)" fg:x="97" fg:w="1"/><text x="8.0412%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.7912%" y="741" width="0.1606%" height="15" fill="rgb(208,118,35)" fg:x="97" fg:w="2"/><text x="8.0412%" y="751.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.7912%" y="725" width="0.1606%" height="15" fill="rgb(239,4,53)" fg:x="97" fg:w="2"/><text x="8.0412%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.7912%" y="709" width="0.1606%" height="15" fill="rgb(213,130,21)" fg:x="97" fg:w="2"/><text x="8.0412%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.8715%" y="693" width="0.0803%" height="15" fill="rgb(235,148,0)" fg:x="98" fg:w="1"/><text x="8.1215%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8715%" y="677" width="0.0803%" height="15" fill="rgb(244,224,18)" fg:x="98" fg:w="1"/><text x="8.1215%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.8715%" y="661" width="0.0803%" height="15" fill="rgb(211,214,4)" fg:x="98" fg:w="1"/><text x="8.1215%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8715%" y="645" width="0.0803%" height="15" fill="rgb(206,119,25)" fg:x="98" fg:w="1"/><text x="8.1215%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (3 samples, 0.24%)</title><rect x="7.7912%" y="773" width="0.2410%" height="15" fill="rgb(243,93,47)" fg:x="97" fg:w="3"/><text x="8.0412%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="7.7912%" y="757" width="0.2410%" height="15" fill="rgb(224,194,6)" fg:x="97" fg:w="3"/><text x="8.0412%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.9518%" y="741" width="0.0803%" height="15" fill="rgb(243,229,6)" fg:x="99" fg:w="1"/><text x="8.2018%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.9518%" y="725" width="0.0803%" height="15" fill="rgb(207,23,50)" fg:x="99" fg:w="1"/><text x="8.2018%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.9518%" y="709" width="0.0803%" height="15" fill="rgb(253,192,32)" fg:x="99" fg:w="1"/><text x="8.2018%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.9518%" y="693" width="0.0803%" height="15" fill="rgb(213,21,6)" fg:x="99" fg:w="1"/><text x="8.2018%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9518%" y="677" width="0.0803%" height="15" fill="rgb(243,151,13)" fg:x="99" fg:w="1"/><text x="8.2018%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.9518%" y="661" width="0.0803%" height="15" fill="rgb(233,165,41)" fg:x="99" fg:w="1"/><text x="8.2018%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.9518%" y="645" width="0.0803%" height="15" fill="rgb(246,176,45)" fg:x="99" fg:w="1"/><text x="8.2018%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="8.0321%" y="757" width="0.0803%" height="15" fill="rgb(217,170,52)" fg:x="100" fg:w="1"/><text x="8.2821%" y="767.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.0321%" y="741" width="0.0803%" height="15" fill="rgb(214,203,54)" fg:x="100" fg:w="1"/><text x="8.2821%" y="751.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.0321%" y="725" width="0.0803%" height="15" fill="rgb(248,215,49)" fg:x="100" fg:w="1"/><text x="8.2821%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.0321%" y="709" width="0.0803%" height="15" fill="rgb(208,46,10)" fg:x="100" fg:w="1"/><text x="8.2821%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.0321%" y="693" width="0.0803%" height="15" fill="rgb(254,5,31)" fg:x="100" fg:w="1"/><text x="8.2821%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.0321%" y="677" width="0.0803%" height="15" fill="rgb(222,104,33)" fg:x="100" fg:w="1"/><text x="8.2821%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0321%" y="661" width="0.0803%" height="15" fill="rgb(248,49,16)" fg:x="100" fg:w="1"/><text x="8.2821%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.0321%" y="645" width="0.0803%" height="15" fill="rgb(232,198,41)" fg:x="100" fg:w="1"/><text x="8.2821%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.0321%" y="629" width="0.0803%" height="15" fill="rgb(214,125,3)" fg:x="100" fg:w="1"/><text x="8.2821%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0321%" y="613" width="0.0803%" height="15" fill="rgb(229,220,28)" fg:x="100" fg:w="1"/><text x="8.2821%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.1124%" y="709" width="0.0803%" height="15" fill="rgb(222,64,37)" fg:x="101" fg:w="1"/><text x="8.3624%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.1124%" y="693" width="0.0803%" height="15" fill="rgb(249,184,13)" fg:x="101" fg:w="1"/><text x="8.3624%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.1124%" y="677" width="0.0803%" height="15" fill="rgb(252,176,6)" fg:x="101" fg:w="1"/><text x="8.3624%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1124%" y="661" width="0.0803%" height="15" fill="rgb(228,153,7)" fg:x="101" fg:w="1"/><text x="8.3624%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1124%" y="645" width="0.0803%" height="15" fill="rgb(242,193,5)" fg:x="101" fg:w="1"/><text x="8.3624%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1124%" y="629" width="0.0803%" height="15" fill="rgb(232,140,9)" fg:x="101" fg:w="1"/><text x="8.3624%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1124%" y="613" width="0.0803%" height="15" fill="rgb(213,222,16)" fg:x="101" fg:w="1"/><text x="8.3624%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.1124%" y="597" width="0.0803%" height="15" fill="rgb(222,75,50)" fg:x="101" fg:w="1"/><text x="8.3624%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1124%" y="581" width="0.0803%" height="15" fill="rgb(205,180,2)" fg:x="101" fg:w="1"/><text x="8.3624%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1124%" y="565" width="0.0803%" height="15" fill="rgb(216,34,7)" fg:x="101" fg:w="1"/><text x="8.3624%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="8.1124%" y="741" width="0.1606%" height="15" fill="rgb(253,16,32)" fg:x="101" fg:w="2"/><text x="8.3624%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="8.1124%" y="725" width="0.1606%" height="15" fill="rgb(208,97,28)" fg:x="101" fg:w="2"/><text x="8.3624%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.1928%" y="709" width="0.0803%" height="15" fill="rgb(225,92,11)" fg:x="102" fg:w="1"/><text x="8.4428%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.1928%" y="693" width="0.0803%" height="15" fill="rgb(243,38,12)" fg:x="102" fg:w="1"/><text x="8.4428%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.1928%" y="677" width="0.0803%" height="15" fill="rgb(208,139,16)" fg:x="102" fg:w="1"/><text x="8.4428%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1928%" y="661" width="0.0803%" height="15" fill="rgb(227,24,9)" fg:x="102" fg:w="1"/><text x="8.4428%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1928%" y="645" width="0.0803%" height="15" fill="rgb(206,62,11)" fg:x="102" fg:w="1"/><text x="8.4428%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1928%" y="629" width="0.0803%" height="15" fill="rgb(228,134,27)" fg:x="102" fg:w="1"/><text x="8.4428%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1928%" y="613" width="0.0803%" height="15" fill="rgb(205,55,33)" fg:x="102" fg:w="1"/><text x="8.4428%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.1928%" y="597" width="0.0803%" height="15" fill="rgb(243,75,43)" fg:x="102" fg:w="1"/><text x="8.4428%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1928%" y="581" width="0.0803%" height="15" fill="rgb(223,27,42)" fg:x="102" fg:w="1"/><text x="8.4428%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1928%" y="565" width="0.0803%" height="15" fill="rgb(232,189,33)" fg:x="102" fg:w="1"/><text x="8.4428%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.2731%" y="741" width="0.0803%" height="15" fill="rgb(210,9,39)" fg:x="103" fg:w="1"/><text x="8.5231%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2731%" y="725" width="0.0803%" height="15" fill="rgb(242,85,26)" fg:x="103" fg:w="1"/><text x="8.5231%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2731%" y="709" width="0.0803%" height="15" fill="rgb(248,44,4)" fg:x="103" fg:w="1"/><text x="8.5231%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.2731%" y="693" width="0.0803%" height="15" fill="rgb(250,96,46)" fg:x="103" fg:w="1"/><text x="8.5231%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2731%" y="677" width="0.0803%" height="15" fill="rgb(229,116,26)" fg:x="103" fg:w="1"/><text x="8.5231%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2731%" y="661" width="0.0803%" height="15" fill="rgb(246,94,34)" fg:x="103" fg:w="1"/><text x="8.5231%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.3534%" y="693" width="0.0803%" height="15" fill="rgb(251,73,21)" fg:x="104" fg:w="1"/><text x="8.6034%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.3534%" y="677" width="0.0803%" height="15" fill="rgb(254,121,25)" fg:x="104" fg:w="1"/><text x="8.6034%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.3534%" y="661" width="0.0803%" height="15" fill="rgb(215,161,49)" fg:x="104" fg:w="1"/><text x="8.6034%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3534%" y="645" width="0.0803%" height="15" fill="rgb(221,43,13)" fg:x="104" fg:w="1"/><text x="8.6034%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3534%" y="629" width="0.0803%" height="15" fill="rgb(249,5,37)" fg:x="104" fg:w="1"/><text x="8.6034%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3534%" y="613" width="0.0803%" height="15" fill="rgb(226,25,44)" fg:x="104" fg:w="1"/><text x="8.6034%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="8.3534%" y="725" width="0.2410%" height="15" fill="rgb(238,189,16)" fg:x="104" fg:w="3"/><text x="8.6034%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="8.3534%" y="709" width="0.2410%" height="15" fill="rgb(251,186,8)" fg:x="104" fg:w="3"/><text x="8.6034%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="8.4337%" y="693" width="0.1606%" height="15" fill="rgb(254,34,31)" fg:x="105" fg:w="2"/><text x="8.6837%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.4337%" y="677" width="0.1606%" height="15" fill="rgb(225,215,27)" fg:x="105" fg:w="2"/><text x="8.6837%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.4337%" y="661" width="0.1606%" height="15" fill="rgb(221,192,48)" fg:x="105" fg:w="2"/><text x="8.6837%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.4337%" y="645" width="0.1606%" height="15" fill="rgb(219,137,20)" fg:x="105" fg:w="2"/><text x="8.6837%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.4337%" y="629" width="0.1606%" height="15" fill="rgb(219,84,11)" fg:x="105" fg:w="2"/><text x="8.6837%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.4337%" y="613" width="0.1606%" height="15" fill="rgb(224,10,23)" fg:x="105" fg:w="2"/><text x="8.6837%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.4337%" y="597" width="0.1606%" height="15" fill="rgb(248,22,39)" fg:x="105" fg:w="2"/><text x="8.6837%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5141%" y="581" width="0.0803%" height="15" fill="rgb(212,154,20)" fg:x="106" fg:w="1"/><text x="8.7641%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5141%" y="565" width="0.0803%" height="15" fill="rgb(236,199,50)" fg:x="106" fg:w="1"/><text x="8.7641%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.5141%" y="549" width="0.0803%" height="15" fill="rgb(211,9,17)" fg:x="106" fg:w="1"/><text x="8.7641%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.5141%" y="533" width="0.0803%" height="15" fill="rgb(243,216,36)" fg:x="106" fg:w="1"/><text x="8.7641%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.5141%" y="517" width="0.0803%" height="15" fill="rgb(250,2,10)" fg:x="106" fg:w="1"/><text x="8.7641%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5141%" y="501" width="0.0803%" height="15" fill="rgb(226,50,48)" fg:x="106" fg:w="1"/><text x="8.7641%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5141%" y="485" width="0.0803%" height="15" fill="rgb(243,81,16)" fg:x="106" fg:w="1"/><text x="8.7641%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.5141%" y="469" width="0.0803%" height="15" fill="rgb(250,14,2)" fg:x="106" fg:w="1"/><text x="8.7641%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.5141%" y="453" width="0.0803%" height="15" fill="rgb(233,135,29)" fg:x="106" fg:w="1"/><text x="8.7641%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.5141%" y="437" width="0.0803%" height="15" fill="rgb(224,64,43)" fg:x="106" fg:w="1"/><text x="8.7641%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.5141%" y="421" width="0.0803%" height="15" fill="rgb(238,84,13)" fg:x="106" fg:w="1"/><text x="8.7641%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5141%" y="405" width="0.0803%" height="15" fill="rgb(253,48,26)" fg:x="106" fg:w="1"/><text x="8.7641%" y="415.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.64%)</title><rect x="8.0321%" y="773" width="0.6426%" height="15" fill="rgb(205,223,31)" fg:x="100" fg:w="8"/><text x="8.2821%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="8.1124%" y="757" width="0.5622%" height="15" fill="rgb(221,41,32)" fg:x="101" fg:w="7"/><text x="8.3624%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="8.3534%" y="741" width="0.3213%" height="15" fill="rgb(213,158,31)" fg:x="104" fg:w="4"/><text x="8.6034%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="8.5944%" y="725" width="0.0803%" height="15" fill="rgb(245,126,43)" fg:x="107" fg:w="1"/><text x="8.8444%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.5944%" y="709" width="0.0803%" height="15" fill="rgb(227,7,22)" fg:x="107" fg:w="1"/><text x="8.8444%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="8.5944%" y="693" width="0.0803%" height="15" fill="rgb(252,90,44)" fg:x="107" fg:w="1"/><text x="8.8444%" y="703.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="8.6747%" y="773" width="0.0803%" height="15" fill="rgb(253,91,0)" fg:x="108" fg:w="1"/><text x="8.9247%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="8.6747%" y="757" width="0.0803%" height="15" fill="rgb(252,175,49)" fg:x="108" fg:w="1"/><text x="8.9247%" y="767.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="8.6747%" y="741" width="0.0803%" height="15" fill="rgb(246,150,1)" fg:x="108" fg:w="1"/><text x="8.9247%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6747%" y="725" width="0.0803%" height="15" fill="rgb(241,192,25)" fg:x="108" fg:w="1"/><text x="8.9247%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6747%" y="709" width="0.0803%" height="15" fill="rgb(239,187,11)" fg:x="108" fg:w="1"/><text x="8.9247%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.6747%" y="693" width="0.0803%" height="15" fill="rgb(218,202,51)" fg:x="108" fg:w="1"/><text x="8.9247%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6747%" y="677" width="0.0803%" height="15" fill="rgb(225,176,8)" fg:x="108" fg:w="1"/><text x="8.9247%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="8.7550%" y="741" width="0.0803%" height="15" fill="rgb(219,122,41)" fg:x="109" fg:w="1"/><text x="9.0050%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="8.7550%" y="725" width="0.0803%" height="15" fill="rgb(248,140,20)" fg:x="109" fg:w="1"/><text x="9.0050%" y="735.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="8.7550%" y="709" width="0.0803%" height="15" fill="rgb(245,41,37)" fg:x="109" fg:w="1"/><text x="9.0050%" y="719.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="8.8353%" y="741" width="0.0803%" height="15" fill="rgb(235,82,39)" fg:x="110" fg:w="1"/><text x="9.0853%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="8.8353%" y="725" width="0.0803%" height="15" fill="rgb(230,108,42)" fg:x="110" fg:w="1"/><text x="9.0853%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.8353%" y="709" width="0.0803%" height="15" fill="rgb(215,150,50)" fg:x="110" fg:w="1"/><text x="9.0853%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="8.7550%" y="757" width="0.2410%" height="15" fill="rgb(233,212,5)" fg:x="109" fg:w="3"/><text x="9.0050%" y="767.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.9157%" y="741" width="0.0803%" height="15" fill="rgb(245,80,22)" fg:x="111" fg:w="1"/><text x="9.1657%" y="751.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.9157%" y="725" width="0.0803%" height="15" fill="rgb(238,129,16)" fg:x="111" fg:w="1"/><text x="9.1657%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.9157%" y="709" width="0.0803%" height="15" fill="rgb(240,19,0)" fg:x="111" fg:w="1"/><text x="9.1657%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.9157%" y="693" width="0.0803%" height="15" fill="rgb(232,42,35)" fg:x="111" fg:w="1"/><text x="9.1657%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.9157%" y="677" width="0.0803%" height="15" fill="rgb(223,130,24)" fg:x="111" fg:w="1"/><text x="9.1657%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9157%" y="661" width="0.0803%" height="15" fill="rgb(237,16,22)" fg:x="111" fg:w="1"/><text x="9.1657%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9157%" y="645" width="0.0803%" height="15" fill="rgb(248,192,20)" fg:x="111" fg:w="1"/><text x="9.1657%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="8.9960%" y="741" width="0.0803%" height="15" fill="rgb(233,167,2)" fg:x="112" fg:w="1"/><text x="9.2460%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.9960%" y="725" width="0.0803%" height="15" fill="rgb(252,71,44)" fg:x="112" fg:w="1"/><text x="9.2460%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.9960%" y="709" width="0.0803%" height="15" fill="rgb(238,37,47)" fg:x="112" fg:w="1"/><text x="9.2460%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9960%" y="693" width="0.0803%" height="15" fill="rgb(214,202,54)" fg:x="112" fg:w="1"/><text x="9.2460%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.9960%" y="677" width="0.0803%" height="15" fill="rgb(254,165,40)" fg:x="112" fg:w="1"/><text x="9.2460%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9960%" y="661" width="0.0803%" height="15" fill="rgb(246,173,38)" fg:x="112" fg:w="1"/><text x="9.2460%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9960%" y="645" width="0.0803%" height="15" fill="rgb(215,3,27)" fg:x="112" fg:w="1"/><text x="9.2460%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9960%" y="629" width="0.0803%" height="15" fill="rgb(239,169,51)" fg:x="112" fg:w="1"/><text x="9.2460%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9960%" y="613" width="0.0803%" height="15" fill="rgb(212,5,25)" fg:x="112" fg:w="1"/><text x="9.2460%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.9960%" y="597" width="0.0803%" height="15" fill="rgb(243,45,17)" fg:x="112" fg:w="1"/><text x="9.2460%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9960%" y="581" width="0.0803%" height="15" fill="rgb(242,97,9)" fg:x="112" fg:w="1"/><text x="9.2460%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9960%" y="565" width="0.0803%" height="15" fill="rgb(228,71,31)" fg:x="112" fg:w="1"/><text x="9.2460%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9960%" y="549" width="0.0803%" height="15" fill="rgb(252,184,16)" fg:x="112" fg:w="1"/><text x="9.2460%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9960%" y="533" width="0.0803%" height="15" fill="rgb(236,169,46)" fg:x="112" fg:w="1"/><text x="9.2460%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9960%" y="517" width="0.0803%" height="15" fill="rgb(207,17,47)" fg:x="112" fg:w="1"/><text x="9.2460%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0763%" y="725" width="0.0803%" height="15" fill="rgb(206,201,28)" fg:x="113" fg:w="1"/><text x="9.3263%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.0763%" y="709" width="0.0803%" height="15" fill="rgb(224,184,23)" fg:x="113" fg:w="1"/><text x="9.3263%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0763%" y="693" width="0.0803%" height="15" fill="rgb(208,139,48)" fg:x="113" fg:w="1"/><text x="9.3263%" y="703.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (48 samples, 3.86%)</title><rect x="5.3815%" y="789" width="3.8554%" height="15" fill="rgb(208,130,10)" fg:x="67" fg:w="48"/><text x="5.6315%" y="799.50">plug..</text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.48%)</title><rect x="8.7550%" y="773" width="0.4819%" height="15" fill="rgb(211,213,45)" fg:x="109" fg:w="6"/><text x="9.0050%" y="783.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="8.9960%" y="757" width="0.2410%" height="15" fill="rgb(235,100,30)" fg:x="112" fg:w="3"/><text x="9.2460%" y="767.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="9.0763%" y="741" width="0.1606%" height="15" fill="rgb(206,144,31)" fg:x="113" fg:w="2"/><text x="9.3263%" y="751.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1566%" y="725" width="0.0803%" height="15" fill="rgb(224,200,26)" fg:x="114" fg:w="1"/><text x="9.4066%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1566%" y="709" width="0.0803%" height="15" fill="rgb(247,104,53)" fg:x="114" fg:w="1"/><text x="9.4066%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1566%" y="693" width="0.0803%" height="15" fill="rgb(220,14,17)" fg:x="114" fg:w="1"/><text x="9.4066%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1566%" y="677" width="0.0803%" height="15" fill="rgb(230,140,40)" fg:x="114" fg:w="1"/><text x="9.4066%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1566%" y="661" width="0.0803%" height="15" fill="rgb(229,2,41)" fg:x="114" fg:w="1"/><text x="9.4066%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="9.2369%" y="789" width="0.0803%" height="15" fill="rgb(232,89,16)" fg:x="115" fg:w="1"/><text x="9.4869%" y="799.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="9.2369%" y="773" width="0.0803%" height="15" fill="rgb(247,59,52)" fg:x="115" fg:w="1"/><text x="9.4869%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="9.2369%" y="757" width="0.0803%" height="15" fill="rgb(226,110,21)" fg:x="115" fg:w="1"/><text x="9.4869%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.2369%" y="741" width="0.0803%" height="15" fill="rgb(224,176,43)" fg:x="115" fg:w="1"/><text x="9.4869%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.2369%" y="725" width="0.0803%" height="15" fill="rgb(221,73,6)" fg:x="115" fg:w="1"/><text x="9.4869%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.2369%" y="709" width="0.0803%" height="15" fill="rgb(232,78,19)" fg:x="115" fg:w="1"/><text x="9.4869%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.2369%" y="693" width="0.0803%" height="15" fill="rgb(233,112,48)" fg:x="115" fg:w="1"/><text x="9.4869%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.2369%" y="677" width="0.0803%" height="15" fill="rgb(243,131,47)" fg:x="115" fg:w="1"/><text x="9.4869%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2369%" y="661" width="0.0803%" height="15" fill="rgb(226,51,1)" fg:x="115" fg:w="1"/><text x="9.4869%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="9.3173%" y="741" width="0.0803%" height="15" fill="rgb(247,58,7)" fg:x="116" fg:w="1"/><text x="9.5673%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.3976%" y="693" width="0.0803%" height="15" fill="rgb(209,7,32)" fg:x="117" fg:w="1"/><text x="9.6476%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.3976%" y="677" width="0.0803%" height="15" fill="rgb(209,39,41)" fg:x="117" fg:w="1"/><text x="9.6476%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.3976%" y="661" width="0.0803%" height="15" fill="rgb(226,182,46)" fg:x="117" fg:w="1"/><text x="9.6476%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3976%" y="645" width="0.0803%" height="15" fill="rgb(230,219,10)" fg:x="117" fg:w="1"/><text x="9.6476%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.3976%" y="629" width="0.0803%" height="15" fill="rgb(227,175,30)" fg:x="117" fg:w="1"/><text x="9.6476%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3976%" y="613" width="0.0803%" height="15" fill="rgb(217,2,50)" fg:x="117" fg:w="1"/><text x="9.6476%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="9.3173%" y="757" width="0.2410%" height="15" fill="rgb(229,160,0)" fg:x="116" fg:w="3"/><text x="9.5673%" y="767.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="9.3976%" y="741" width="0.1606%" height="15" fill="rgb(207,78,37)" fg:x="117" fg:w="2"/><text x="9.6476%" y="751.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="9.3976%" y="725" width="0.1606%" height="15" fill="rgb(225,57,0)" fg:x="117" fg:w="2"/><text x="9.6476%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="9.3976%" y="709" width="0.1606%" height="15" fill="rgb(232,154,2)" fg:x="117" fg:w="2"/><text x="9.6476%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.4779%" y="693" width="0.0803%" height="15" fill="rgb(241,212,25)" fg:x="118" fg:w="1"/><text x="9.7279%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.4779%" y="677" width="0.0803%" height="15" fill="rgb(226,69,20)" fg:x="118" fg:w="1"/><text x="9.7279%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4779%" y="661" width="0.0803%" height="15" fill="rgb(247,184,54)" fg:x="118" fg:w="1"/><text x="9.7279%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4779%" y="645" width="0.0803%" height="15" fill="rgb(210,145,0)" fg:x="118" fg:w="1"/><text x="9.7279%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4779%" y="629" width="0.0803%" height="15" fill="rgb(253,82,12)" fg:x="118" fg:w="1"/><text x="9.7279%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4779%" y="613" width="0.0803%" height="15" fill="rgb(245,42,11)" fg:x="118" fg:w="1"/><text x="9.7279%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4779%" y="597" width="0.0803%" height="15" fill="rgb(219,147,32)" fg:x="118" fg:w="1"/><text x="9.7279%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="9.5582%" y="741" width="0.0803%" height="15" fill="rgb(246,12,7)" fg:x="119" fg:w="1"/><text x="9.8082%" y="751.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="9.5582%" y="725" width="0.0803%" height="15" fill="rgb(243,50,9)" fg:x="119" fg:w="1"/><text x="9.8082%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.5582%" y="709" width="0.0803%" height="15" fill="rgb(219,149,6)" fg:x="119" fg:w="1"/><text x="9.8082%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.5582%" y="693" width="0.0803%" height="15" fill="rgb(241,51,42)" fg:x="119" fg:w="1"/><text x="9.8082%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.5582%" y="677" width="0.0803%" height="15" fill="rgb(226,128,27)" fg:x="119" fg:w="1"/><text x="9.8082%" y="687.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.5582%" y="661" width="0.0803%" height="15" fill="rgb(244,144,4)" fg:x="119" fg:w="1"/><text x="9.8082%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.5582%" y="645" width="0.0803%" height="15" fill="rgb(221,4,13)" fg:x="119" fg:w="1"/><text x="9.8082%" y="655.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.5582%" y="629" width="0.0803%" height="15" fill="rgb(208,170,28)" fg:x="119" fg:w="1"/><text x="9.8082%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.5582%" y="613" width="0.0803%" height="15" fill="rgb(226,131,13)" fg:x="119" fg:w="1"/><text x="9.8082%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.5582%" y="597" width="0.0803%" height="15" fill="rgb(215,72,41)" fg:x="119" fg:w="1"/><text x="9.8082%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.5582%" y="581" width="0.0803%" height="15" fill="rgb(243,108,20)" fg:x="119" fg:w="1"/><text x="9.8082%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.5582%" y="565" width="0.0803%" height="15" fill="rgb(230,189,17)" fg:x="119" fg:w="1"/><text x="9.8082%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.40%)</title><rect x="9.3173%" y="789" width="0.4016%" height="15" fill="rgb(220,50,17)" fg:x="116" fg:w="5"/><text x="9.5673%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="9.3173%" y="773" width="0.4016%" height="15" fill="rgb(248,152,48)" fg:x="116" fg:w="5"/><text x="9.5673%" y="783.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="9.5582%" y="757" width="0.1606%" height="15" fill="rgb(244,91,11)" fg:x="119" fg:w="2"/><text x="9.8082%" y="767.50"></text></g><g><title>kernel::model::entity::EntityBuilder::new (1 samples, 0.08%)</title><rect x="9.6386%" y="741" width="0.0803%" height="15" fill="rgb(220,157,5)" fg:x="120" fg:w="1"/><text x="9.8886%" y="751.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6386%" y="725" width="0.0803%" height="15" fill="rgb(253,137,8)" fg:x="120" fg:w="1"/><text x="9.8886%" y="735.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.7992%" y="709" width="0.0803%" height="15" fill="rgb(217,137,51)" fg:x="122" fg:w="1"/><text x="10.0492%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7992%" y="693" width="0.0803%" height="15" fill="rgb(218,209,53)" fg:x="122" fg:w="1"/><text x="10.0492%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.7992%" y="677" width="0.0803%" height="15" fill="rgb(249,137,25)" fg:x="122" fg:w="1"/><text x="10.0492%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="9.7992%" y="661" width="0.0803%" height="15" fill="rgb(239,155,26)" fg:x="122" fg:w="1"/><text x="10.0492%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="9.7189%" y="773" width="0.2410%" height="15" fill="rgb(227,85,46)" fg:x="121" fg:w="3"/><text x="9.9689%" y="783.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="9.7992%" y="757" width="0.1606%" height="15" fill="rgb(251,107,43)" fg:x="122" fg:w="2"/><text x="10.0492%" y="767.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="9.7992%" y="741" width="0.1606%" height="15" fill="rgb(234,170,33)" fg:x="122" fg:w="2"/><text x="10.0492%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="9.7992%" y="725" width="0.1606%" height="15" fill="rgb(206,29,35)" fg:x="122" fg:w="2"/><text x="10.0492%" y="735.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.8795%" y="709" width="0.0803%" height="15" fill="rgb(227,138,25)" fg:x="123" fg:w="1"/><text x="10.1295%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="9.8795%" y="693" width="0.0803%" height="15" fill="rgb(249,131,35)" fg:x="123" fg:w="1"/><text x="10.1295%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8795%" y="677" width="0.0803%" height="15" fill="rgb(239,6,40)" fg:x="123" fg:w="1"/><text x="10.1295%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="9.9598%" y="757" width="0.0803%" height="15" fill="rgb(246,136,47)" fg:x="124" fg:w="1"/><text x="10.2098%" y="767.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="9.9598%" y="741" width="0.0803%" height="15" fill="rgb(253,58,26)" fg:x="124" fg:w="1"/><text x="10.2098%" y="751.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9598%" y="725" width="0.0803%" height="15" fill="rgb(237,141,10)" fg:x="124" fg:w="1"/><text x="10.2098%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9598%" y="709" width="0.0803%" height="15" fill="rgb(234,156,12)" fg:x="124" fg:w="1"/><text x="10.2098%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9598%" y="693" width="0.0803%" height="15" fill="rgb(243,224,36)" fg:x="124" fg:w="1"/><text x="10.2098%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9598%" y="677" width="0.0803%" height="15" fill="rgb(205,229,51)" fg:x="124" fg:w="1"/><text x="10.2098%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.9598%" y="661" width="0.0803%" height="15" fill="rgb(223,189,4)" fg:x="124" fg:w="1"/><text x="10.2098%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (100 samples, 8.03%)</title><rect x="2.0884%" y="805" width="8.0321%" height="15" fill="rgb(249,167,54)" fg:x="26" fg:w="100"/><text x="2.3384%" y="815.50">&lt;tests::Hol..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="9.7189%" y="789" width="0.4016%" height="15" fill="rgb(218,34,28)" fg:x="121" fg:w="5"/><text x="9.9689%" y="799.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="9.9598%" y="773" width="0.1606%" height="15" fill="rgb(232,109,42)" fg:x="124" fg:w="2"/><text x="10.2098%" y="783.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="10.0402%" y="757" width="0.0803%" height="15" fill="rgb(248,214,46)" fg:x="125" fg:w="1"/><text x="10.2902%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.0402%" y="741" width="0.0803%" height="15" fill="rgb(244,216,40)" fg:x="125" fg:w="1"/><text x="10.2902%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.0402%" y="725" width="0.0803%" height="15" fill="rgb(231,226,31)" fg:x="125" fg:w="1"/><text x="10.2902%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.0402%" y="709" width="0.0803%" height="15" fill="rgb(238,38,43)" fg:x="125" fg:w="1"/><text x="10.2902%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.0402%" y="693" width="0.0803%" height="15" fill="rgb(208,88,43)" fg:x="125" fg:w="1"/><text x="10.2902%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0402%" y="677" width="0.0803%" height="15" fill="rgb(205,136,37)" fg:x="125" fg:w="1"/><text x="10.2902%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0402%" y="661" width="0.0803%" height="15" fill="rgb(237,34,14)" fg:x="125" fg:w="1"/><text x="10.2902%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.1205%" y="693" width="0.0803%" height="15" fill="rgb(236,193,44)" fg:x="126" fg:w="1"/><text x="10.3705%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.1205%" y="677" width="0.0803%" height="15" fill="rgb(231,48,10)" fg:x="126" fg:w="1"/><text x="10.3705%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.1205%" y="661" width="0.0803%" height="15" fill="rgb(213,141,34)" fg:x="126" fg:w="1"/><text x="10.3705%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.1205%" y="645" width="0.0803%" height="15" fill="rgb(249,130,34)" fg:x="126" fg:w="1"/><text x="10.3705%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.2811%" y="597" width="0.0803%" height="15" fill="rgb(219,42,41)" fg:x="128" fg:w="1"/><text x="10.5311%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.2811%" y="581" width="0.0803%" height="15" fill="rgb(224,100,54)" fg:x="128" fg:w="1"/><text x="10.5311%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="10.2008%" y="645" width="0.2410%" height="15" fill="rgb(229,200,27)" fg:x="127" fg:w="3"/><text x="10.4508%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.2811%" y="629" width="0.1606%" height="15" fill="rgb(217,118,10)" fg:x="128" fg:w="2"/><text x="10.5311%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.2811%" y="613" width="0.1606%" height="15" fill="rgb(206,22,3)" fg:x="128" fg:w="2"/><text x="10.5311%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="10.3614%" y="597" width="0.0803%" height="15" fill="rgb(232,163,46)" fg:x="129" fg:w="1"/><text x="10.6114%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="10.2008%" y="677" width="0.3213%" height="15" fill="rgb(206,95,13)" fg:x="127" fg:w="4"/><text x="10.4508%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.2008%" y="661" width="0.3213%" height="15" fill="rgb(253,154,18)" fg:x="127" fg:w="4"/><text x="10.4508%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.4418%" y="645" width="0.0803%" height="15" fill="rgb(219,32,23)" fg:x="130" fg:w="1"/><text x="10.6918%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.5221%" y="677" width="0.0803%" height="15" fill="rgb(230,191,45)" fg:x="131" fg:w="1"/><text x="10.7721%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5221%" y="661" width="0.0803%" height="15" fill="rgb(229,64,36)" fg:x="131" fg:w="1"/><text x="10.7721%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5221%" y="645" width="0.0803%" height="15" fill="rgb(205,129,25)" fg:x="131" fg:w="1"/><text x="10.7721%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.5221%" y="629" width="0.0803%" height="15" fill="rgb(254,112,7)" fg:x="131" fg:w="1"/><text x="10.7721%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.6024%" y="645" width="0.0803%" height="15" fill="rgb(226,53,48)" fg:x="132" fg:w="1"/><text x="10.8524%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.6827%" y="629" width="0.0803%" height="15" fill="rgb(214,153,38)" fg:x="133" fg:w="1"/><text x="10.9327%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.6827%" y="613" width="0.0803%" height="15" fill="rgb(243,101,7)" fg:x="133" fg:w="1"/><text x="10.9327%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.6827%" y="597" width="0.0803%" height="15" fill="rgb(240,140,22)" fg:x="133" fg:w="1"/><text x="10.9327%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="10.2008%" y="693" width="0.6426%" height="15" fill="rgb(235,114,2)" fg:x="127" fg:w="8"/><text x="10.4508%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.6024%" y="677" width="0.2410%" height="15" fill="rgb(242,59,12)" fg:x="132" fg:w="3"/><text x="10.8524%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.6024%" y="661" width="0.2410%" height="15" fill="rgb(252,134,9)" fg:x="132" fg:w="3"/><text x="10.8524%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.6827%" y="645" width="0.1606%" height="15" fill="rgb(236,4,44)" fg:x="133" fg:w="2"/><text x="10.9327%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.7631%" y="629" width="0.0803%" height="15" fill="rgb(254,172,41)" fg:x="134" fg:w="1"/><text x="11.0131%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="10.1205%" y="725" width="0.8032%" height="15" fill="rgb(244,63,20)" fg:x="126" fg:w="10"/><text x="10.3705%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="10.1205%" y="709" width="0.8032%" height="15" fill="rgb(250,73,31)" fg:x="126" fg:w="10"/><text x="10.3705%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.8434%" y="693" width="0.0803%" height="15" fill="rgb(241,38,36)" fg:x="135" fg:w="1"/><text x="11.0934%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.8434%" y="677" width="0.0803%" height="15" fill="rgb(245,211,2)" fg:x="135" fg:w="1"/><text x="11.0934%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.8434%" y="661" width="0.0803%" height="15" fill="rgb(206,120,28)" fg:x="135" fg:w="1"/><text x="11.0934%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.9237%" y="693" width="0.0803%" height="15" fill="rgb(211,59,34)" fg:x="136" fg:w="1"/><text x="11.1737%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.1647%" y="677" width="0.0803%" height="15" fill="rgb(233,168,5)" fg:x="139" fg:w="1"/><text x="11.4147%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2450%" y="661" width="0.0803%" height="15" fill="rgb(234,33,13)" fg:x="140" fg:w="1"/><text x="11.4950%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.3253%" y="645" width="0.0803%" height="15" fill="rgb(231,150,26)" fg:x="141" fg:w="1"/><text x="11.5753%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="11.3253%" y="629" width="0.0803%" height="15" fill="rgb(217,191,4)" fg:x="141" fg:w="1"/><text x="11.5753%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.3253%" y="613" width="0.0803%" height="15" fill="rgb(246,198,38)" fg:x="141" fg:w="1"/><text x="11.5753%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="10.9237%" y="725" width="0.5622%" height="15" fill="rgb(245,64,37)" fg:x="136" fg:w="7"/><text x="11.1737%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="10.9237%" y="709" width="0.5622%" height="15" fill="rgb(250,30,36)" fg:x="136" fg:w="7"/><text x="11.1737%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="11.0040%" y="693" width="0.4819%" height="15" fill="rgb(217,86,53)" fg:x="137" fg:w="6"/><text x="11.2540%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.2450%" y="677" width="0.2410%" height="15" fill="rgb(228,157,16)" fg:x="140" fg:w="3"/><text x="11.4950%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.3253%" y="661" width="0.1606%" height="15" fill="rgb(217,59,31)" fg:x="141" fg:w="2"/><text x="11.5753%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.4056%" y="645" width="0.0803%" height="15" fill="rgb(237,138,41)" fg:x="142" fg:w="1"/><text x="11.6556%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.4056%" y="629" width="0.0803%" height="15" fill="rgb(227,91,49)" fg:x="142" fg:w="1"/><text x="11.6556%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4056%" y="613" width="0.0803%" height="15" fill="rgb(247,21,44)" fg:x="142" fg:w="1"/><text x="11.6556%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="11.4859%" y="645" width="0.1606%" height="15" fill="rgb(219,210,51)" fg:x="143" fg:w="2"/><text x="11.7359%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.5663%" y="629" width="0.0803%" height="15" fill="rgb(209,140,6)" fg:x="144" fg:w="1"/><text x="11.8163%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="11.6466%" y="629" width="0.2410%" height="15" fill="rgb(221,188,24)" fg:x="145" fg:w="3"/><text x="11.8966%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9679%" y="613" width="0.0803%" height="15" fill="rgb(232,154,20)" fg:x="149" fg:w="1"/><text x="12.2179%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="11.4859%" y="709" width="0.6426%" height="15" fill="rgb(244,137,50)" fg:x="143" fg:w="8"/><text x="11.7359%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="11.4859%" y="693" width="0.6426%" height="15" fill="rgb(225,185,43)" fg:x="143" fg:w="8"/><text x="11.7359%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="11.4859%" y="677" width="0.6426%" height="15" fill="rgb(213,205,38)" fg:x="143" fg:w="8"/><text x="11.7359%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="11.4859%" y="661" width="0.6426%" height="15" fill="rgb(236,73,12)" fg:x="143" fg:w="8"/><text x="11.7359%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="11.6466%" y="645" width="0.4819%" height="15" fill="rgb(235,219,13)" fg:x="145" fg:w="6"/><text x="11.8966%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.8876%" y="629" width="0.2410%" height="15" fill="rgb(218,59,36)" fg:x="148" fg:w="3"/><text x="12.1376%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="12.0482%" y="613" width="0.0803%" height="15" fill="rgb(205,110,39)" fg:x="150" fg:w="1"/><text x="12.2982%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.0482%" y="597" width="0.0803%" height="15" fill="rgb(218,206,42)" fg:x="150" fg:w="1"/><text x="12.2982%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.0482%" y="581" width="0.0803%" height="15" fill="rgb(248,125,24)" fg:x="150" fg:w="1"/><text x="12.2982%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="12.1285%" y="709" width="0.0803%" height="15" fill="rgb(242,28,27)" fg:x="151" fg:w="1"/><text x="12.3785%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.1285%" y="693" width="0.0803%" height="15" fill="rgb(216,228,15)" fg:x="151" fg:w="1"/><text x="12.3785%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2892%" y="677" width="0.0803%" height="15" fill="rgb(235,116,46)" fg:x="153" fg:w="1"/><text x="12.5392%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2892%" y="661" width="0.0803%" height="15" fill="rgb(224,18,32)" fg:x="153" fg:w="1"/><text x="12.5392%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.2892%" y="645" width="0.0803%" height="15" fill="rgb(252,5,12)" fg:x="153" fg:w="1"/><text x="12.5392%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3695%" y="677" width="0.0803%" height="15" fill="rgb(251,36,5)" fg:x="154" fg:w="1"/><text x="12.6195%" y="687.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.4498%" y="645" width="0.0803%" height="15" fill="rgb(217,53,14)" fg:x="155" fg:w="1"/><text x="12.6998%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.4498%" y="677" width="0.1606%" height="15" fill="rgb(215,86,45)" fg:x="155" fg:w="2"/><text x="12.6998%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.4498%" y="661" width="0.1606%" height="15" fill="rgb(242,169,11)" fg:x="155" fg:w="2"/><text x="12.6998%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5301%" y="645" width="0.0803%" height="15" fill="rgb(211,213,45)" fg:x="156" fg:w="1"/><text x="12.7801%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5301%" y="629" width="0.0803%" height="15" fill="rgb(205,88,11)" fg:x="156" fg:w="1"/><text x="12.7801%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.6908%" y="629" width="0.1606%" height="15" fill="rgb(252,69,26)" fg:x="158" fg:w="2"/><text x="12.9408%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.6908%" y="613" width="0.1606%" height="15" fill="rgb(246,123,37)" fg:x="158" fg:w="2"/><text x="12.9408%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="12.6908%" y="597" width="0.1606%" height="15" fill="rgb(212,205,5)" fg:x="158" fg:w="2"/><text x="12.9408%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.6908%" y="581" width="0.1606%" height="15" fill="rgb(253,148,0)" fg:x="158" fg:w="2"/><text x="12.9408%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.6908%" y="565" width="0.1606%" height="15" fill="rgb(239,22,4)" fg:x="158" fg:w="2"/><text x="12.9408%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="12.9317%" y="581" width="0.0803%" height="15" fill="rgb(226,26,53)" fg:x="161" fg:w="1"/><text x="13.1817%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.1727%" y="517" width="0.0803%" height="15" fill="rgb(225,229,45)" fg:x="164" fg:w="1"/><text x="13.4227%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1727%" y="501" width="0.0803%" height="15" fill="rgb(220,60,37)" fg:x="164" fg:w="1"/><text x="13.4227%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1727%" y="485" width="0.0803%" height="15" fill="rgb(217,180,35)" fg:x="164" fg:w="1"/><text x="13.4227%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1727%" y="469" width="0.0803%" height="15" fill="rgb(229,7,53)" fg:x="164" fg:w="1"/><text x="13.4227%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="12.2088%" y="709" width="1.1245%" height="15" fill="rgb(254,137,3)" fg:x="152" fg:w="14"/><text x="12.4588%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="12.2088%" y="693" width="1.1245%" height="15" fill="rgb(215,140,41)" fg:x="152" fg:w="14"/><text x="12.4588%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="12.6104%" y="677" width="0.7229%" height="15" fill="rgb(250,80,15)" fg:x="157" fg:w="9"/><text x="12.8604%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="12.6104%" y="661" width="0.7229%" height="15" fill="rgb(252,191,6)" fg:x="157" fg:w="9"/><text x="12.8604%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="12.6104%" y="645" width="0.7229%" height="15" fill="rgb(246,217,18)" fg:x="157" fg:w="9"/><text x="12.8604%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="12.8514%" y="629" width="0.4819%" height="15" fill="rgb(223,93,7)" fg:x="160" fg:w="6"/><text x="13.1014%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="12.8514%" y="613" width="0.4819%" height="15" fill="rgb(225,55,52)" fg:x="160" fg:w="6"/><text x="13.1014%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="12.9317%" y="597" width="0.4016%" height="15" fill="rgb(240,31,24)" fg:x="161" fg:w="5"/><text x="13.1817%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="13.0120%" y="581" width="0.3213%" height="15" fill="rgb(205,56,52)" fg:x="162" fg:w="4"/><text x="13.2620%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.0120%" y="565" width="0.3213%" height="15" fill="rgb(246,146,12)" fg:x="162" fg:w="4"/><text x="13.2620%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.0924%" y="549" width="0.2410%" height="15" fill="rgb(239,84,36)" fg:x="163" fg:w="3"/><text x="13.3424%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="13.0924%" y="533" width="0.2410%" height="15" fill="rgb(207,41,40)" fg:x="163" fg:w="3"/><text x="13.3424%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2530%" y="517" width="0.0803%" height="15" fill="rgb(241,179,25)" fg:x="165" fg:w="1"/><text x="13.5030%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.4137%" y="533" width="0.0803%" height="15" fill="rgb(210,0,34)" fg:x="167" fg:w="1"/><text x="13.6637%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.4137%" y="517" width="0.0803%" height="15" fill="rgb(225,217,29)" fg:x="167" fg:w="1"/><text x="13.6637%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.4137%" y="501" width="0.0803%" height="15" fill="rgb(216,191,38)" fg:x="167" fg:w="1"/><text x="13.6637%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.4137%" y="485" width="0.0803%" height="15" fill="rgb(232,140,52)" fg:x="167" fg:w="1"/><text x="13.6637%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.4137%" y="469" width="0.0803%" height="15" fill="rgb(223,158,51)" fg:x="167" fg:w="1"/><text x="13.6637%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.4137%" y="453" width="0.0803%" height="15" fill="rgb(235,29,51)" fg:x="167" fg:w="1"/><text x="13.6637%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="13.4137%" y="581" width="0.1606%" height="15" fill="rgb(215,181,18)" fg:x="167" fg:w="2"/><text x="13.6637%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.4137%" y="565" width="0.1606%" height="15" fill="rgb(227,125,34)" fg:x="167" fg:w="2"/><text x="13.6637%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="13.4137%" y="549" width="0.1606%" height="15" fill="rgb(230,197,49)" fg:x="167" fg:w="2"/><text x="13.6637%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4940%" y="533" width="0.0803%" height="15" fill="rgb(239,141,16)" fg:x="168" fg:w="1"/><text x="13.7440%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="13.4137%" y="613" width="0.3213%" height="15" fill="rgb(225,105,43)" fg:x="167" fg:w="4"/><text x="13.6637%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="13.4137%" y="597" width="0.3213%" height="15" fill="rgb(214,131,14)" fg:x="167" fg:w="4"/><text x="13.6637%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.5743%" y="581" width="0.1606%" height="15" fill="rgb(229,177,11)" fg:x="169" fg:w="2"/><text x="13.8243%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.5743%" y="565" width="0.1606%" height="15" fill="rgb(231,180,14)" fg:x="169" fg:w="2"/><text x="13.8243%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6546%" y="549" width="0.0803%" height="15" fill="rgb(232,88,2)" fg:x="170" fg:w="1"/><text x="13.9046%" y="559.50"></text></g><g><title>engine::session::state::State::close (47 samples, 3.78%)</title><rect x="10.1205%" y="789" width="3.7751%" height="15" fill="rgb(205,220,8)" fg:x="126" fg:w="47"/><text x="10.3705%" y="799.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (47 samples, 3.78%)</title><rect x="10.1205%" y="773" width="3.7751%" height="15" fill="rgb(225,23,53)" fg:x="126" fg:w="47"/><text x="10.3705%" y="783.50">engi..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (47 samples, 3.78%)</title><rect x="10.1205%" y="757" width="3.7751%" height="15" fill="rgb(213,62,29)" fg:x="126" fg:w="47"/><text x="10.3705%" y="767.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (47 samples, 3.78%)</title><rect x="10.1205%" y="741" width="3.7751%" height="15" fill="rgb(227,75,7)" fg:x="126" fg:w="47"/><text x="10.3705%" y="751.50">engi..</text></g><g><title>kernel::model::any_entity_changes (30 samples, 2.41%)</title><rect x="11.4859%" y="725" width="2.4096%" height="15" fill="rgb(207,105,14)" fg:x="143" fg:w="30"/><text x="11.7359%" y="735.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="13.3333%" y="709" width="0.5622%" height="15" fill="rgb(245,62,29)" fg:x="166" fg:w="7"/><text x="13.5833%" y="719.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="13.3333%" y="693" width="0.5622%" height="15" fill="rgb(236,202,4)" fg:x="166" fg:w="7"/><text x="13.5833%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="13.3333%" y="677" width="0.5622%" height="15" fill="rgb(250,67,1)" fg:x="166" fg:w="7"/><text x="13.5833%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="13.3333%" y="661" width="0.5622%" height="15" fill="rgb(253,115,44)" fg:x="166" fg:w="7"/><text x="13.5833%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="13.3333%" y="645" width="0.5622%" height="15" fill="rgb(251,139,18)" fg:x="166" fg:w="7"/><text x="13.5833%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="13.3333%" y="629" width="0.5622%" height="15" fill="rgb(218,22,32)" fg:x="166" fg:w="7"/><text x="13.5833%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="13.7349%" y="613" width="0.1606%" height="15" fill="rgb(243,53,5)" fg:x="171" fg:w="2"/><text x="13.9849%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.7349%" y="597" width="0.1606%" height="15" fill="rgb(227,56,16)" fg:x="171" fg:w="2"/><text x="13.9849%" y="607.50"></text></g><g><title>engine::session::Session::close (48 samples, 3.86%)</title><rect x="10.1205%" y="805" width="3.8554%" height="15" fill="rgb(245,53,0)" fg:x="126" fg:w="48"/><text x="10.3705%" y="815.50">engi..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="13.8956%" y="789" width="0.0803%" height="15" fill="rgb(216,170,35)" fg:x="173" fg:w="1"/><text x="14.1456%" y="799.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="13.8956%" y="773" width="0.0803%" height="15" fill="rgb(211,200,8)" fg:x="173" fg:w="1"/><text x="14.1456%" y="783.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="13.8956%" y="757" width="0.0803%" height="15" fill="rgb(228,204,44)" fg:x="173" fg:w="1"/><text x="14.1456%" y="767.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="13.8956%" y="741" width="0.0803%" height="15" fill="rgb(214,121,17)" fg:x="173" fg:w="1"/><text x="14.1456%" y="751.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="13.8956%" y="725" width="0.0803%" height="15" fill="rgb(233,64,38)" fg:x="173" fg:w="1"/><text x="14.1456%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="14.0562%" y="693" width="0.0803%" height="15" fill="rgb(253,54,19)" fg:x="175" fg:w="1"/><text x="14.3062%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="14.0562%" y="677" width="0.0803%" height="15" fill="rgb(253,94,18)" fg:x="175" fg:w="1"/><text x="14.3062%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="14.0562%" y="661" width="0.0803%" height="15" fill="rgb(227,57,52)" fg:x="175" fg:w="1"/><text x="14.3062%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.0562%" y="645" width="0.0803%" height="15" fill="rgb(230,228,50)" fg:x="175" fg:w="1"/><text x="14.3062%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.0562%" y="629" width="0.0803%" height="15" fill="rgb(217,205,27)" fg:x="175" fg:w="1"/><text x="14.3062%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0562%" y="613" width="0.0803%" height="15" fill="rgb(252,71,50)" fg:x="175" fg:w="1"/><text x="14.3062%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0562%" y="597" width="0.0803%" height="15" fill="rgb(209,86,4)" fg:x="175" fg:w="1"/><text x="14.3062%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="14.0562%" y="581" width="0.0803%" height="15" fill="rgb(229,94,0)" fg:x="175" fg:w="1"/><text x="14.3062%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.0562%" y="565" width="0.0803%" height="15" fill="rgb(252,223,21)" fg:x="175" fg:w="1"/><text x="14.3062%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0562%" y="549" width="0.0803%" height="15" fill="rgb(230,210,4)" fg:x="175" fg:w="1"/><text x="14.3062%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0562%" y="533" width="0.0803%" height="15" fill="rgb(240,149,38)" fg:x="175" fg:w="1"/><text x="14.3062%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="14.0562%" y="517" width="0.0803%" height="15" fill="rgb(254,105,20)" fg:x="175" fg:w="1"/><text x="14.3062%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.0562%" y="501" width="0.0803%" height="15" fill="rgb(253,87,46)" fg:x="175" fg:w="1"/><text x="14.3062%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0562%" y="485" width="0.0803%" height="15" fill="rgb(253,116,33)" fg:x="175" fg:w="1"/><text x="14.3062%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0562%" y="469" width="0.0803%" height="15" fill="rgb(229,198,5)" fg:x="175" fg:w="1"/><text x="14.3062%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.0562%" y="453" width="0.0803%" height="15" fill="rgb(242,38,37)" fg:x="175" fg:w="1"/><text x="14.3062%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.0562%" y="437" width="0.0803%" height="15" fill="rgb(242,69,53)" fg:x="175" fg:w="1"/><text x="14.3062%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="14.0562%" y="421" width="0.0803%" height="15" fill="rgb(249,80,16)" fg:x="175" fg:w="1"/><text x="14.3062%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="14.0562%" y="405" width="0.0803%" height="15" fill="rgb(206,128,11)" fg:x="175" fg:w="1"/><text x="14.3062%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.0562%" y="389" width="0.0803%" height="15" fill="rgb(212,35,20)" fg:x="175" fg:w="1"/><text x="14.3062%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="14.0562%" y="373" width="0.0803%" height="15" fill="rgb(236,79,13)" fg:x="175" fg:w="1"/><text x="14.3062%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="14.0562%" y="357" width="0.0803%" height="15" fill="rgb(233,123,3)" fg:x="175" fg:w="1"/><text x="14.3062%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="14.0562%" y="341" width="0.0803%" height="15" fill="rgb(214,93,52)" fg:x="175" fg:w="1"/><text x="14.3062%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.0562%" y="325" width="0.0803%" height="15" fill="rgb(251,37,40)" fg:x="175" fg:w="1"/><text x="14.3062%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="14.0562%" y="309" width="0.0803%" height="15" fill="rgb(227,80,54)" fg:x="175" fg:w="1"/><text x="14.3062%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.0562%" y="293" width="0.0803%" height="15" fill="rgb(254,48,11)" fg:x="175" fg:w="1"/><text x="14.3062%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="14.0562%" y="277" width="0.0803%" height="15" fill="rgb(235,193,26)" fg:x="175" fg:w="1"/><text x="14.3062%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="14.0562%" y="261" width="0.0803%" height="15" fill="rgb(229,99,21)" fg:x="175" fg:w="1"/><text x="14.3062%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="14.0562%" y="245" width="0.0803%" height="15" fill="rgb(211,140,41)" fg:x="175" fg:w="1"/><text x="14.3062%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.0562%" y="229" width="0.0803%" height="15" fill="rgb(240,227,30)" fg:x="175" fg:w="1"/><text x="14.3062%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.1365%" y="661" width="0.0803%" height="15" fill="rgb(215,224,45)" fg:x="176" fg:w="1"/><text x="14.3865%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="14.2169%" y="629" width="0.0803%" height="15" fill="rgb(206,123,31)" fg:x="177" fg:w="1"/><text x="14.4669%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2972%" y="533" width="0.0803%" height="15" fill="rgb(210,138,16)" fg:x="178" fg:w="1"/><text x="14.5472%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2972%" y="517" width="0.0803%" height="15" fill="rgb(228,57,28)" fg:x="178" fg:w="1"/><text x="14.5472%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2972%" y="501" width="0.0803%" height="15" fill="rgb(242,170,10)" fg:x="178" fg:w="1"/><text x="14.5472%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2972%" y="485" width="0.0803%" height="15" fill="rgb(228,214,39)" fg:x="178" fg:w="1"/><text x="14.5472%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2972%" y="469" width="0.0803%" height="15" fill="rgb(218,179,33)" fg:x="178" fg:w="1"/><text x="14.5472%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.2972%" y="453" width="0.0803%" height="15" fill="rgb(235,193,39)" fg:x="178" fg:w="1"/><text x="14.5472%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.2972%" y="437" width="0.0803%" height="15" fill="rgb(219,221,36)" fg:x="178" fg:w="1"/><text x="14.5472%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.2972%" y="421" width="0.0803%" height="15" fill="rgb(248,218,19)" fg:x="178" fg:w="1"/><text x="14.5472%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2972%" y="405" width="0.0803%" height="15" fill="rgb(205,50,9)" fg:x="178" fg:w="1"/><text x="14.5472%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2972%" y="389" width="0.0803%" height="15" fill="rgb(238,81,28)" fg:x="178" fg:w="1"/><text x="14.5472%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.2972%" y="373" width="0.0803%" height="15" fill="rgb(235,110,19)" fg:x="178" fg:w="1"/><text x="14.5472%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.2972%" y="357" width="0.0803%" height="15" fill="rgb(214,7,14)" fg:x="178" fg:w="1"/><text x="14.5472%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.2972%" y="341" width="0.0803%" height="15" fill="rgb(211,77,3)" fg:x="178" fg:w="1"/><text x="14.5472%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.2972%" y="325" width="0.0803%" height="15" fill="rgb(229,5,9)" fg:x="178" fg:w="1"/><text x="14.5472%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2972%" y="309" width="0.0803%" height="15" fill="rgb(225,90,11)" fg:x="178" fg:w="1"/><text x="14.5472%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="14.2972%" y="581" width="0.1606%" height="15" fill="rgb(242,56,8)" fg:x="178" fg:w="2"/><text x="14.5472%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="14.2972%" y="565" width="0.1606%" height="15" fill="rgb(249,212,39)" fg:x="178" fg:w="2"/><text x="14.5472%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="14.2972%" y="549" width="0.1606%" height="15" fill="rgb(236,90,9)" fg:x="178" fg:w="2"/><text x="14.5472%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.3775%" y="533" width="0.0803%" height="15" fill="rgb(206,88,35)" fg:x="179" fg:w="1"/><text x="14.6275%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.3775%" y="517" width="0.0803%" height="15" fill="rgb(205,126,30)" fg:x="179" fg:w="1"/><text x="14.6275%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="14.2972%" y="613" width="0.2410%" height="15" fill="rgb(230,176,12)" fg:x="178" fg:w="3"/><text x="14.5472%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="14.2972%" y="597" width="0.2410%" height="15" fill="rgb(243,19,9)" fg:x="178" fg:w="3"/><text x="14.5472%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.4578%" y="581" width="0.0803%" height="15" fill="rgb(245,171,17)" fg:x="180" fg:w="1"/><text x="14.7078%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.4578%" y="565" width="0.0803%" height="15" fill="rgb(227,52,21)" fg:x="180" fg:w="1"/><text x="14.7078%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.4578%" y="549" width="0.0803%" height="15" fill="rgb(238,69,14)" fg:x="180" fg:w="1"/><text x="14.7078%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4578%" y="533" width="0.0803%" height="15" fill="rgb(241,156,39)" fg:x="180" fg:w="1"/><text x="14.7078%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4578%" y="517" width="0.0803%" height="15" fill="rgb(212,227,28)" fg:x="180" fg:w="1"/><text x="14.7078%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4578%" y="501" width="0.0803%" height="15" fill="rgb(209,118,27)" fg:x="180" fg:w="1"/><text x="14.7078%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="14.5382%" y="597" width="0.0803%" height="15" fill="rgb(226,102,5)" fg:x="181" fg:w="1"/><text x="14.7882%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.5382%" y="581" width="0.0803%" height="15" fill="rgb(223,34,3)" fg:x="181" fg:w="1"/><text x="14.7882%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.5382%" y="565" width="0.0803%" height="15" fill="rgb(221,81,38)" fg:x="181" fg:w="1"/><text x="14.7882%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.5382%" y="549" width="0.0803%" height="15" fill="rgb(236,219,28)" fg:x="181" fg:w="1"/><text x="14.7882%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="14.5382%" y="533" width="0.0803%" height="15" fill="rgb(213,200,14)" fg:x="181" fg:w="1"/><text x="14.7882%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="14.5382%" y="613" width="0.1606%" height="15" fill="rgb(240,33,19)" fg:x="181" fg:w="2"/><text x="14.7882%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.6185%" y="597" width="0.0803%" height="15" fill="rgb(233,113,27)" fg:x="182" fg:w="1"/><text x="14.8685%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6185%" y="581" width="0.0803%" height="15" fill="rgb(220,221,18)" fg:x="182" fg:w="1"/><text x="14.8685%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.6185%" y="565" width="0.0803%" height="15" fill="rgb(238,92,8)" fg:x="182" fg:w="1"/><text x="14.8685%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6185%" y="549" width="0.0803%" height="15" fill="rgb(222,164,16)" fg:x="182" fg:w="1"/><text x="14.8685%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.6185%" y="533" width="0.0803%" height="15" fill="rgb(241,119,3)" fg:x="182" fg:w="1"/><text x="14.8685%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="14.6185%" y="517" width="0.0803%" height="15" fill="rgb(241,44,8)" fg:x="182" fg:w="1"/><text x="14.8685%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.6185%" y="501" width="0.0803%" height="15" fill="rgb(230,36,40)" fg:x="182" fg:w="1"/><text x="14.8685%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="14.6185%" y="485" width="0.0803%" height="15" fill="rgb(243,16,36)" fg:x="182" fg:w="1"/><text x="14.8685%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="14.6185%" y="469" width="0.0803%" height="15" fill="rgb(231,4,26)" fg:x="182" fg:w="1"/><text x="14.8685%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="14.6185%" y="453" width="0.0803%" height="15" fill="rgb(240,9,31)" fg:x="182" fg:w="1"/><text x="14.8685%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="14.6185%" y="437" width="0.0803%" height="15" fill="rgb(207,173,15)" fg:x="182" fg:w="1"/><text x="14.8685%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6185%" y="421" width="0.0803%" height="15" fill="rgb(224,192,53)" fg:x="182" fg:w="1"/><text x="14.8685%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.6988%" y="613" width="0.0803%" height="15" fill="rgb(223,67,28)" fg:x="183" fg:w="1"/><text x="14.9488%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.6988%" y="597" width="0.0803%" height="15" fill="rgb(211,20,47)" fg:x="183" fg:w="1"/><text x="14.9488%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.6988%" y="581" width="0.0803%" height="15" fill="rgb(240,228,2)" fg:x="183" fg:w="1"/><text x="14.9488%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.6988%" y="565" width="0.0803%" height="15" fill="rgb(248,151,12)" fg:x="183" fg:w="1"/><text x="14.9488%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.6988%" y="549" width="0.0803%" height="15" fill="rgb(244,8,39)" fg:x="183" fg:w="1"/><text x="14.9488%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="14.2972%" y="629" width="0.5622%" height="15" fill="rgb(222,26,8)" fg:x="178" fg:w="7"/><text x="14.5472%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="14.7791%" y="613" width="0.0803%" height="15" fill="rgb(213,106,44)" fg:x="184" fg:w="1"/><text x="15.0291%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (11 samples, 0.88%)</title><rect x="14.0562%" y="709" width="0.8835%" height="15" fill="rgb(214,129,20)" fg:x="175" fg:w="11"/><text x="14.3062%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope (10 samples, 0.80%)</title><rect x="14.1365%" y="693" width="0.8032%" height="15" fill="rgb(212,32,13)" fg:x="176" fg:w="10"/><text x="14.3865%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.80%)</title><rect x="14.1365%" y="677" width="0.8032%" height="15" fill="rgb(208,168,33)" fg:x="176" fg:w="10"/><text x="14.3865%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.72%)</title><rect x="14.2169%" y="661" width="0.7229%" height="15" fill="rgb(231,207,8)" fg:x="177" fg:w="9"/><text x="14.4669%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.72%)</title><rect x="14.2169%" y="645" width="0.7229%" height="15" fill="rgb(235,219,23)" fg:x="177" fg:w="9"/><text x="14.4669%" y="655.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="14.8594%" y="629" width="0.0803%" height="15" fill="rgb(226,216,26)" fg:x="185" fg:w="1"/><text x="15.1094%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.8594%" y="613" width="0.0803%" height="15" fill="rgb(239,137,16)" fg:x="185" fg:w="1"/><text x="15.1094%" y="623.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (13 samples, 1.04%)</title><rect x="14.0562%" y="725" width="1.0442%" height="15" fill="rgb(207,12,36)" fg:x="175" fg:w="13"/><text x="14.3062%" y="735.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (2 samples, 0.16%)</title><rect x="14.9398%" y="709" width="0.1606%" height="15" fill="rgb(210,214,24)" fg:x="186" fg:w="2"/><text x="15.1898%" y="719.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="14.9398%" y="693" width="0.1606%" height="15" fill="rgb(206,56,30)" fg:x="186" fg:w="2"/><text x="15.1898%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="14.9398%" y="677" width="0.1606%" height="15" fill="rgb(228,143,26)" fg:x="186" fg:w="2"/><text x="15.1898%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="15.0201%" y="661" width="0.0803%" height="15" fill="rgb(216,218,46)" fg:x="187" fg:w="1"/><text x="15.2701%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="15.0201%" y="645" width="0.0803%" height="15" fill="rgb(206,6,19)" fg:x="187" fg:w="1"/><text x="15.2701%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.0201%" y="629" width="0.0803%" height="15" fill="rgb(239,177,51)" fg:x="187" fg:w="1"/><text x="15.2701%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.0201%" y="613" width="0.0803%" height="15" fill="rgb(216,55,25)" fg:x="187" fg:w="1"/><text x="15.2701%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="15.2610%" y="581" width="0.0803%" height="15" fill="rgb(231,163,29)" fg:x="190" fg:w="1"/><text x="15.5110%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="15.2610%" y="565" width="0.0803%" height="15" fill="rgb(232,149,50)" fg:x="190" fg:w="1"/><text x="15.5110%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2610%" y="549" width="0.0803%" height="15" fill="rgb(223,142,48)" fg:x="190" fg:w="1"/><text x="15.5110%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="15.5020%" y="533" width="0.0803%" height="15" fill="rgb(245,83,23)" fg:x="193" fg:w="1"/><text x="15.7520%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.5020%" y="517" width="0.0803%" height="15" fill="rgb(224,63,2)" fg:x="193" fg:w="1"/><text x="15.7520%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="15.6627%" y="469" width="0.2410%" height="15" fill="rgb(218,65,53)" fg:x="195" fg:w="3"/><text x="15.9127%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.7430%" y="453" width="0.1606%" height="15" fill="rgb(221,84,29)" fg:x="196" fg:w="2"/><text x="15.9930%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="15.8233%" y="437" width="0.0803%" height="15" fill="rgb(234,0,32)" fg:x="197" fg:w="1"/><text x="16.0733%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="15.8233%" y="421" width="0.0803%" height="15" fill="rgb(206,20,16)" fg:x="197" fg:w="1"/><text x="16.0733%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.9036%" y="389" width="0.0803%" height="15" fill="rgb(244,172,18)" fg:x="198" fg:w="1"/><text x="16.1536%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.9036%" y="373" width="0.0803%" height="15" fill="rgb(254,133,1)" fg:x="198" fg:w="1"/><text x="16.1536%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.9036%" y="357" width="0.0803%" height="15" fill="rgb(222,206,41)" fg:x="198" fg:w="1"/><text x="16.1536%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.9036%" y="341" width="0.0803%" height="15" fill="rgb(212,3,42)" fg:x="198" fg:w="1"/><text x="16.1536%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.9036%" y="325" width="0.0803%" height="15" fill="rgb(241,11,4)" fg:x="198" fg:w="1"/><text x="16.1536%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.9036%" y="309" width="0.0803%" height="15" fill="rgb(205,19,26)" fg:x="198" fg:w="1"/><text x="16.1536%" y="319.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="15.9036%" y="293" width="0.0803%" height="15" fill="rgb(210,179,32)" fg:x="198" fg:w="1"/><text x="16.1536%" y="303.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.9036%" y="277" width="0.0803%" height="15" fill="rgb(227,116,49)" fg:x="198" fg:w="1"/><text x="16.1536%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="15.6627%" y="485" width="0.4016%" height="15" fill="rgb(211,146,6)" fg:x="195" fg:w="5"/><text x="15.9127%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.9036%" y="469" width="0.1606%" height="15" fill="rgb(219,44,39)" fg:x="198" fg:w="2"/><text x="16.1536%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.9036%" y="453" width="0.1606%" height="15" fill="rgb(234,128,11)" fg:x="198" fg:w="2"/><text x="16.1536%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="15.9036%" y="437" width="0.1606%" height="15" fill="rgb(220,183,53)" fg:x="198" fg:w="2"/><text x="16.1536%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="15.9036%" y="421" width="0.1606%" height="15" fill="rgb(213,219,32)" fg:x="198" fg:w="2"/><text x="16.1536%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="15.9036%" y="405" width="0.1606%" height="15" fill="rgb(232,156,16)" fg:x="198" fg:w="2"/><text x="16.1536%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.9839%" y="389" width="0.0803%" height="15" fill="rgb(246,135,34)" fg:x="199" fg:w="1"/><text x="16.2339%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.9839%" y="373" width="0.0803%" height="15" fill="rgb(241,99,0)" fg:x="199" fg:w="1"/><text x="16.2339%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.56%)</title><rect x="15.5823%" y="501" width="0.5622%" height="15" fill="rgb(222,103,45)" fg:x="194" fg:w="7"/><text x="15.8323%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.0643%" y="485" width="0.0803%" height="15" fill="rgb(212,57,4)" fg:x="200" fg:w="1"/><text x="16.3143%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.0643%" y="469" width="0.0803%" height="15" fill="rgb(215,68,47)" fg:x="200" fg:w="1"/><text x="16.3143%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.0643%" y="453" width="0.0803%" height="15" fill="rgb(230,84,2)" fg:x="200" fg:w="1"/><text x="16.3143%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.0643%" y="437" width="0.0803%" height="15" fill="rgb(220,102,14)" fg:x="200" fg:w="1"/><text x="16.3143%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.0643%" y="421" width="0.0803%" height="15" fill="rgb(240,10,32)" fg:x="200" fg:w="1"/><text x="16.3143%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.0643%" y="405" width="0.0803%" height="15" fill="rgb(215,47,27)" fg:x="200" fg:w="1"/><text x="16.3143%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.0643%" y="389" width="0.0803%" height="15" fill="rgb(233,188,43)" fg:x="200" fg:w="1"/><text x="16.3143%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.0643%" y="373" width="0.0803%" height="15" fill="rgb(253,190,1)" fg:x="200" fg:w="1"/><text x="16.3143%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.0643%" y="357" width="0.0803%" height="15" fill="rgb(206,114,52)" fg:x="200" fg:w="1"/><text x="16.3143%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.0643%" y="341" width="0.0803%" height="15" fill="rgb(233,120,37)" fg:x="200" fg:w="1"/><text x="16.3143%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.0643%" y="325" width="0.0803%" height="15" fill="rgb(214,52,39)" fg:x="200" fg:w="1"/><text x="16.3143%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0643%" y="309" width="0.0803%" height="15" fill="rgb(223,80,29)" fg:x="200" fg:w="1"/><text x="16.3143%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (9 samples, 0.72%)</title><rect x="15.5020%" y="549" width="0.7229%" height="15" fill="rgb(230,101,40)" fg:x="193" fg:w="9"/><text x="15.7520%" y="559.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.64%)</title><rect x="15.5823%" y="533" width="0.6426%" height="15" fill="rgb(219,211,8)" fg:x="194" fg:w="8"/><text x="15.8323%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.64%)</title><rect x="15.5823%" y="517" width="0.6426%" height="15" fill="rgb(252,126,28)" fg:x="194" fg:w="8"/><text x="15.8323%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.1446%" y="501" width="0.0803%" height="15" fill="rgb(215,56,38)" fg:x="201" fg:w="1"/><text x="16.3946%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.1446%" y="485" width="0.0803%" height="15" fill="rgb(249,55,44)" fg:x="201" fg:w="1"/><text x="16.3946%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.1446%" y="469" width="0.0803%" height="15" fill="rgb(220,221,32)" fg:x="201" fg:w="1"/><text x="16.3946%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.1446%" y="453" width="0.0803%" height="15" fill="rgb(212,216,41)" fg:x="201" fg:w="1"/><text x="16.3946%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.1446%" y="437" width="0.0803%" height="15" fill="rgb(228,213,43)" fg:x="201" fg:w="1"/><text x="16.3946%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.1446%" y="421" width="0.0803%" height="15" fill="rgb(211,31,26)" fg:x="201" fg:w="1"/><text x="16.3946%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.1446%" y="405" width="0.0803%" height="15" fill="rgb(229,202,19)" fg:x="201" fg:w="1"/><text x="16.3946%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.1446%" y="389" width="0.0803%" height="15" fill="rgb(229,105,46)" fg:x="201" fg:w="1"/><text x="16.3946%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.1446%" y="373" width="0.0803%" height="15" fill="rgb(235,108,1)" fg:x="201" fg:w="1"/><text x="16.3946%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.2249%" y="533" width="0.0803%" height="15" fill="rgb(245,111,35)" fg:x="202" fg:w="1"/><text x="16.4749%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.3855%" y="501" width="0.0803%" height="15" fill="rgb(219,185,31)" fg:x="204" fg:w="1"/><text x="16.6355%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.3855%" y="485" width="0.0803%" height="15" fill="rgb(214,4,43)" fg:x="204" fg:w="1"/><text x="16.6355%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.3855%" y="469" width="0.0803%" height="15" fill="rgb(235,227,40)" fg:x="204" fg:w="1"/><text x="16.6355%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.3855%" y="453" width="0.0803%" height="15" fill="rgb(230,88,30)" fg:x="204" fg:w="1"/><text x="16.6355%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="16.4659%" y="501" width="0.0803%" height="15" fill="rgb(216,217,1)" fg:x="205" fg:w="1"/><text x="16.7159%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.5462%" y="501" width="0.0803%" height="15" fill="rgb(248,139,50)" fg:x="206" fg:w="1"/><text x="16.7962%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.5462%" y="485" width="0.0803%" height="15" fill="rgb(233,1,21)" fg:x="206" fg:w="1"/><text x="16.7962%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.7871%" y="373" width="0.0803%" height="15" fill="rgb(215,183,12)" fg:x="209" fg:w="1"/><text x="17.0371%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7871%" y="357" width="0.0803%" height="15" fill="rgb(229,104,42)" fg:x="209" fg:w="1"/><text x="17.0371%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (10 samples, 0.80%)</title><rect x="16.2249%" y="549" width="0.8032%" height="15" fill="rgb(243,34,48)" fg:x="202" fg:w="10"/><text x="16.4749%" y="559.50"></text></g><g><title>kernel::model::props::load_props (9 samples, 0.72%)</title><rect x="16.3052%" y="533" width="0.7229%" height="15" fill="rgb(239,11,44)" fg:x="203" fg:w="9"/><text x="16.5552%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.72%)</title><rect x="16.3052%" y="517" width="0.7229%" height="15" fill="rgb(231,98,35)" fg:x="203" fg:w="9"/><text x="16.5552%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="16.6265%" y="501" width="0.4016%" height="15" fill="rgb(233,28,25)" fg:x="207" fg:w="5"/><text x="16.8765%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="16.7068%" y="485" width="0.3213%" height="15" fill="rgb(234,123,11)" fg:x="208" fg:w="4"/><text x="16.9568%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="16.7068%" y="469" width="0.3213%" height="15" fill="rgb(220,69,3)" fg:x="208" fg:w="4"/><text x="16.9568%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="16.7068%" y="453" width="0.3213%" height="15" fill="rgb(214,64,36)" fg:x="208" fg:w="4"/><text x="16.9568%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="16.7068%" y="437" width="0.3213%" height="15" fill="rgb(211,138,32)" fg:x="208" fg:w="4"/><text x="16.9568%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="16.7068%" y="421" width="0.3213%" height="15" fill="rgb(213,118,47)" fg:x="208" fg:w="4"/><text x="16.9568%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="16.7068%" y="405" width="0.3213%" height="15" fill="rgb(243,124,49)" fg:x="208" fg:w="4"/><text x="16.9568%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.7871%" y="389" width="0.2410%" height="15" fill="rgb(221,30,28)" fg:x="209" fg:w="3"/><text x="17.0371%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.8675%" y="373" width="0.1606%" height="15" fill="rgb(246,37,13)" fg:x="210" fg:w="2"/><text x="17.1175%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.8675%" y="357" width="0.1606%" height="15" fill="rgb(249,66,14)" fg:x="210" fg:w="2"/><text x="17.1175%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.9478%" y="341" width="0.0803%" height="15" fill="rgb(213,166,5)" fg:x="211" fg:w="1"/><text x="17.1978%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="17.0281%" y="549" width="0.2410%" height="15" fill="rgb(221,66,24)" fg:x="212" fg:w="3"/><text x="17.2781%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="17.0281%" y="533" width="0.2410%" height="15" fill="rgb(210,132,17)" fg:x="212" fg:w="3"/><text x="17.2781%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="17.1084%" y="517" width="0.1606%" height="15" fill="rgb(243,202,5)" fg:x="213" fg:w="2"/><text x="17.3584%" y="527.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.1888%" y="501" width="0.0803%" height="15" fill="rgb(233,70,48)" fg:x="214" fg:w="1"/><text x="17.4388%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.1888%" y="485" width="0.0803%" height="15" fill="rgb(238,41,26)" fg:x="214" fg:w="1"/><text x="17.4388%" y="495.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="17.1888%" y="469" width="0.0803%" height="15" fill="rgb(241,19,31)" fg:x="214" fg:w="1"/><text x="17.4388%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="17.1888%" y="453" width="0.0803%" height="15" fill="rgb(214,76,10)" fg:x="214" fg:w="1"/><text x="17.4388%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.1888%" y="437" width="0.0803%" height="15" fill="rgb(254,202,22)" fg:x="214" fg:w="1"/><text x="17.4388%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.1888%" y="421" width="0.0803%" height="15" fill="rgb(214,72,24)" fg:x="214" fg:w="1"/><text x="17.4388%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.1888%" y="405" width="0.0803%" height="15" fill="rgb(221,92,46)" fg:x="214" fg:w="1"/><text x="17.4388%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.1888%" y="389" width="0.0803%" height="15" fill="rgb(246,13,50)" fg:x="214" fg:w="1"/><text x="17.4388%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.1888%" y="373" width="0.0803%" height="15" fill="rgb(240,165,38)" fg:x="214" fg:w="1"/><text x="17.4388%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.1888%" y="357" width="0.0803%" height="15" fill="rgb(241,24,51)" fg:x="214" fg:w="1"/><text x="17.4388%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1888%" y="341" width="0.0803%" height="15" fill="rgb(227,51,44)" fg:x="214" fg:w="1"/><text x="17.4388%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.2691%" y="453" width="0.0803%" height="15" fill="rgb(231,121,3)" fg:x="215" fg:w="1"/><text x="17.5191%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="17.3494%" y="341" width="0.0803%" height="15" fill="rgb(245,3,41)" fg:x="216" fg:w="1"/><text x="17.5994%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="17.3494%" y="325" width="0.0803%" height="15" fill="rgb(214,13,26)" fg:x="216" fg:w="1"/><text x="17.5994%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.3494%" y="309" width="0.0803%" height="15" fill="rgb(252,75,11)" fg:x="216" fg:w="1"/><text x="17.5994%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="17.3494%" y="293" width="0.0803%" height="15" fill="rgb(218,226,17)" fg:x="216" fg:w="1"/><text x="17.5994%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.3494%" y="277" width="0.0803%" height="15" fill="rgb(248,89,38)" fg:x="216" fg:w="1"/><text x="17.5994%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3494%" y="261" width="0.0803%" height="15" fill="rgb(237,73,46)" fg:x="216" fg:w="1"/><text x="17.5994%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="17.2691%" y="501" width="0.2410%" height="15" fill="rgb(242,78,33)" fg:x="215" fg:w="3"/><text x="17.5191%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="17.2691%" y="485" width="0.2410%" height="15" fill="rgb(235,60,3)" fg:x="215" fg:w="3"/><text x="17.5191%" y="495.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="17.2691%" y="469" width="0.2410%" height="15" fill="rgb(216,172,19)" fg:x="215" fg:w="3"/><text x="17.5191%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="17.3494%" y="453" width="0.1606%" height="15" fill="rgb(227,6,42)" fg:x="216" fg:w="2"/><text x="17.5994%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="17.3494%" y="437" width="0.1606%" height="15" fill="rgb(223,207,42)" fg:x="216" fg:w="2"/><text x="17.5994%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="17.3494%" y="421" width="0.1606%" height="15" fill="rgb(246,138,30)" fg:x="216" fg:w="2"/><text x="17.5994%" y="431.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="17.3494%" y="405" width="0.1606%" height="15" fill="rgb(251,199,47)" fg:x="216" fg:w="2"/><text x="17.5994%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="17.3494%" y="389" width="0.1606%" height="15" fill="rgb(228,218,44)" fg:x="216" fg:w="2"/><text x="17.5994%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="17.3494%" y="373" width="0.1606%" height="15" fill="rgb(220,68,6)" fg:x="216" fg:w="2"/><text x="17.5994%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="17.3494%" y="357" width="0.1606%" height="15" fill="rgb(240,60,26)" fg:x="216" fg:w="2"/><text x="17.5994%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.4297%" y="341" width="0.0803%" height="15" fill="rgb(211,200,19)" fg:x="217" fg:w="1"/><text x="17.6797%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.5100%" y="485" width="0.0803%" height="15" fill="rgb(242,145,30)" fg:x="218" fg:w="1"/><text x="17.7600%" y="495.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="17.5904%" y="485" width="0.0803%" height="15" fill="rgb(225,64,13)" fg:x="219" fg:w="1"/><text x="17.8404%" y="495.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="17.5904%" y="469" width="0.0803%" height="15" fill="rgb(218,103,35)" fg:x="219" fg:w="1"/><text x="17.8404%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="17.5904%" y="453" width="0.0803%" height="15" fill="rgb(216,93,46)" fg:x="219" fg:w="1"/><text x="17.8404%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.5904%" y="437" width="0.0803%" height="15" fill="rgb(225,159,27)" fg:x="219" fg:w="1"/><text x="17.8404%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.5904%" y="421" width="0.0803%" height="15" fill="rgb(225,204,11)" fg:x="219" fg:w="1"/><text x="17.8404%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.5904%" y="405" width="0.0803%" height="15" fill="rgb(205,56,4)" fg:x="219" fg:w="1"/><text x="17.8404%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.5904%" y="389" width="0.0803%" height="15" fill="rgb(206,6,35)" fg:x="219" fg:w="1"/><text x="17.8404%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.5904%" y="373" width="0.0803%" height="15" fill="rgb(247,73,52)" fg:x="219" fg:w="1"/><text x="17.8404%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.5904%" y="357" width="0.0803%" height="15" fill="rgb(246,97,4)" fg:x="219" fg:w="1"/><text x="17.8404%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="17.5904%" y="341" width="0.0803%" height="15" fill="rgb(212,37,15)" fg:x="219" fg:w="1"/><text x="17.8404%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="17.9116%" y="373" width="0.0803%" height="15" fill="rgb(208,130,40)" fg:x="223" fg:w="1"/><text x="18.1616%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="17.9116%" y="389" width="0.1606%" height="15" fill="rgb(236,55,29)" fg:x="223" fg:w="2"/><text x="18.1616%" y="399.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="17.9920%" y="373" width="0.0803%" height="15" fill="rgb(209,156,45)" fg:x="224" fg:w="1"/><text x="18.2420%" y="383.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="18.0723%" y="373" width="0.0803%" height="15" fill="rgb(249,107,4)" fg:x="225" fg:w="1"/><text x="18.3223%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="17.8313%" y="405" width="0.4016%" height="15" fill="rgb(227,7,13)" fg:x="222" fg:w="5"/><text x="18.0813%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="18.0723%" y="389" width="0.1606%" height="15" fill="rgb(250,129,14)" fg:x="225" fg:w="2"/><text x="18.3223%" y="399.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="18.1526%" y="373" width="0.0803%" height="15" fill="rgb(229,92,13)" fg:x="226" fg:w="1"/><text x="18.4026%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.1526%" y="357" width="0.0803%" height="15" fill="rgb(245,98,39)" fg:x="226" fg:w="1"/><text x="18.4026%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.1526%" y="341" width="0.0803%" height="15" fill="rgb(234,135,48)" fg:x="226" fg:w="1"/><text x="18.4026%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1526%" y="325" width="0.0803%" height="15" fill="rgb(230,98,28)" fg:x="226" fg:w="1"/><text x="18.4026%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.2329%" y="373" width="0.0803%" height="15" fill="rgb(223,121,0)" fg:x="227" fg:w="1"/><text x="18.4829%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.2329%" y="357" width="0.0803%" height="15" fill="rgb(234,173,33)" fg:x="227" fg:w="1"/><text x="18.4829%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.2329%" y="341" width="0.0803%" height="15" fill="rgb(245,47,8)" fg:x="227" fg:w="1"/><text x="18.4829%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="17.6707%" y="469" width="0.7229%" height="15" fill="rgb(205,17,20)" fg:x="220" fg:w="9"/><text x="17.9207%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="17.8313%" y="453" width="0.5622%" height="15" fill="rgb(232,151,16)" fg:x="222" fg:w="7"/><text x="18.0813%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.56%)</title><rect x="17.8313%" y="437" width="0.5622%" height="15" fill="rgb(208,30,32)" fg:x="222" fg:w="7"/><text x="18.0813%" y="447.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.56%)</title><rect x="17.8313%" y="421" width="0.5622%" height="15" fill="rgb(254,26,3)" fg:x="222" fg:w="7"/><text x="18.0813%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="18.2329%" y="405" width="0.1606%" height="15" fill="rgb(240,177,30)" fg:x="227" fg:w="2"/><text x="18.4829%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="18.2329%" y="389" width="0.1606%" height="15" fill="rgb(248,76,44)" fg:x="227" fg:w="2"/><text x="18.4829%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3133%" y="373" width="0.0803%" height="15" fill="rgb(241,186,54)" fg:x="228" fg:w="1"/><text x="18.5633%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3133%" y="357" width="0.0803%" height="15" fill="rgb(249,171,29)" fg:x="228" fg:w="1"/><text x="18.5633%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="18.3133%" y="341" width="0.0803%" height="15" fill="rgb(237,151,44)" fg:x="228" fg:w="1"/><text x="18.5633%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.5542%" y="389" width="0.0803%" height="15" fill="rgb(228,174,30)" fg:x="231" fg:w="1"/><text x="18.8042%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18 samples, 1.45%)</title><rect x="18.6345%" y="389" width="1.4458%" height="15" fill="rgb(252,14,37)" fg:x="232" fg:w="18"/><text x="18.8845%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.61%)</title><rect x="18.5542%" y="405" width="1.6064%" height="15" fill="rgb(207,111,40)" fg:x="231" fg:w="20"/><text x="18.8042%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="20.0803%" y="389" width="0.0803%" height="15" fill="rgb(248,171,54)" fg:x="250" fg:w="1"/><text x="20.3303%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="20.2410%" y="389" width="0.3213%" height="15" fill="rgb(211,127,2)" fg:x="252" fg:w="4"/><text x="20.4910%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="20.4819%" y="373" width="0.0803%" height="15" fill="rgb(236,87,47)" fg:x="255" fg:w="1"/><text x="20.7319%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.4819%" y="357" width="0.0803%" height="15" fill="rgb(223,190,45)" fg:x="255" fg:w="1"/><text x="20.7319%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.4819%" y="341" width="0.0803%" height="15" fill="rgb(215,5,16)" fg:x="255" fg:w="1"/><text x="20.7319%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4819%" y="325" width="0.0803%" height="15" fill="rgb(252,82,33)" fg:x="255" fg:w="1"/><text x="20.7319%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="20.1606%" y="405" width="0.4819%" height="15" fill="rgb(247,213,44)" fg:x="251" fg:w="6"/><text x="20.4106%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="20.5622%" y="389" width="0.0803%" height="15" fill="rgb(205,196,44)" fg:x="256" fg:w="1"/><text x="20.8122%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="20.6426%" y="405" width="0.0803%" height="15" fill="rgb(237,96,54)" fg:x="257" fg:w="1"/><text x="20.8926%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.8032%" y="373" width="0.0803%" height="15" fill="rgb(230,113,34)" fg:x="259" fg:w="1"/><text x="21.0532%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.8032%" y="357" width="0.0803%" height="15" fill="rgb(221,224,12)" fg:x="259" fg:w="1"/><text x="21.0532%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8032%" y="341" width="0.0803%" height="15" fill="rgb(219,112,44)" fg:x="259" fg:w="1"/><text x="21.0532%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="20.8835%" y="357" width="0.0803%" height="15" fill="rgb(210,31,13)" fg:x="260" fg:w="1"/><text x="21.1335%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="20.8835%" y="341" width="0.0803%" height="15" fill="rgb(230,25,16)" fg:x="260" fg:w="1"/><text x="21.1335%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.2851%" y="341" width="0.0803%" height="15" fill="rgb(246,108,53)" fg:x="265" fg:w="1"/><text x="21.5351%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.3655%" y="341" width="0.0803%" height="15" fill="rgb(241,172,50)" fg:x="266" fg:w="1"/><text x="21.6155%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="21.4458%" y="341" width="0.3213%" height="15" fill="rgb(235,141,10)" fg:x="267" fg:w="4"/><text x="21.6958%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="21.4458%" y="325" width="0.3213%" height="15" fill="rgb(220,174,43)" fg:x="267" fg:w="4"/><text x="21.6958%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="21.5261%" y="309" width="0.2410%" height="15" fill="rgb(215,181,40)" fg:x="268" fg:w="3"/><text x="21.7761%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="21.6064%" y="293" width="0.1606%" height="15" fill="rgb(230,97,2)" fg:x="269" fg:w="2"/><text x="21.8564%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.0080%" y="309" width="0.0803%" height="15" fill="rgb(211,25,27)" fg:x="274" fg:w="1"/><text x="22.2580%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.0080%" y="293" width="0.0803%" height="15" fill="rgb(230,87,26)" fg:x="274" fg:w="1"/><text x="22.2580%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.0080%" y="277" width="0.0803%" height="15" fill="rgb(227,160,17)" fg:x="274" fg:w="1"/><text x="22.2580%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.0884%" y="293" width="0.0803%" height="15" fill="rgb(244,85,34)" fg:x="275" fg:w="1"/><text x="22.3384%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="21.7671%" y="341" width="0.4819%" height="15" fill="rgb(207,70,0)" fg:x="271" fg:w="6"/><text x="22.0171%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="21.8474%" y="325" width="0.4016%" height="15" fill="rgb(223,129,7)" fg:x="272" fg:w="5"/><text x="22.0974%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="22.0884%" y="309" width="0.1606%" height="15" fill="rgb(246,105,7)" fg:x="275" fg:w="2"/><text x="22.3384%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="22.1687%" y="293" width="0.0803%" height="15" fill="rgb(215,154,42)" fg:x="276" fg:w="1"/><text x="22.4187%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.1687%" y="277" width="0.0803%" height="15" fill="rgb(220,215,30)" fg:x="276" fg:w="1"/><text x="22.4187%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.1687%" y="261" width="0.0803%" height="15" fill="rgb(228,81,51)" fg:x="276" fg:w="1"/><text x="22.4187%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.1687%" y="245" width="0.0803%" height="15" fill="rgb(247,71,54)" fg:x="276" fg:w="1"/><text x="22.4187%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="22.2490%" y="325" width="0.0803%" height="15" fill="rgb(234,176,34)" fg:x="277" fg:w="1"/><text x="22.4990%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.2490%" y="309" width="0.0803%" height="15" fill="rgb(241,103,54)" fg:x="277" fg:w="1"/><text x="22.4990%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.2490%" y="293" width="0.0803%" height="15" fill="rgb(228,22,34)" fg:x="277" fg:w="1"/><text x="22.4990%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.2490%" y="277" width="0.0803%" height="15" fill="rgb(241,179,48)" fg:x="277" fg:w="1"/><text x="22.4990%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (94 samples, 7.55%)</title><rect x="22.2490%" y="341" width="7.5502%" height="15" fill="rgb(235,167,37)" fg:x="277" fg:w="94"/><text x="22.4990%" y="351.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (93 samples, 7.47%)</title><rect x="22.3293%" y="325" width="7.4699%" height="15" fill="rgb(213,109,30)" fg:x="278" fg:w="93"/><text x="22.5793%" y="335.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (92 samples, 7.39%)</title><rect x="22.4096%" y="309" width="7.3896%" height="15" fill="rgb(222,172,16)" fg:x="279" fg:w="92"/><text x="22.6596%" y="319.50">alloc::vec..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 9.64%)</title><rect x="20.8032%" y="389" width="9.6386%" height="15" fill="rgb(233,192,5)" fg:x="259" fg:w="120"/><text x="21.0532%" y="399.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (119 samples, 9.56%)</title><rect x="20.8835%" y="373" width="9.5582%" height="15" fill="rgb(247,189,41)" fg:x="260" fg:w="119"/><text x="21.1335%" y="383.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (118 samples, 9.48%)</title><rect x="20.9639%" y="357" width="9.4779%" height="15" fill="rgb(218,134,47)" fg:x="261" fg:w="118"/><text x="21.2139%" y="367.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (8 samples, 0.64%)</title><rect x="29.7992%" y="341" width="0.6426%" height="15" fill="rgb(216,29,3)" fg:x="371" fg:w="8"/><text x="30.0492%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3614%" y="325" width="0.0803%" height="15" fill="rgb(246,140,12)" fg:x="378" fg:w="1"/><text x="30.6114%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.6024%" y="373" width="0.0803%" height="15" fill="rgb(230,136,11)" fg:x="381" fg:w="1"/><text x="30.8524%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.6024%" y="357" width="0.0803%" height="15" fill="rgb(247,22,47)" fg:x="381" fg:w="1"/><text x="30.8524%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6024%" y="341" width="0.0803%" height="15" fill="rgb(218,84,22)" fg:x="381" fg:w="1"/><text x="30.8524%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="30.6827%" y="373" width="0.3213%" height="15" fill="rgb(216,87,39)" fg:x="382" fg:w="4"/><text x="30.9327%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.9237%" y="357" width="0.0803%" height="15" fill="rgb(221,178,8)" fg:x="385" fg:w="1"/><text x="31.1737%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.1647%" y="357" width="0.0803%" height="15" fill="rgb(230,42,11)" fg:x="388" fg:w="1"/><text x="31.4147%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.1647%" y="341" width="0.0803%" height="15" fill="rgb(237,229,4)" fg:x="388" fg:w="1"/><text x="31.4147%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.1647%" y="325" width="0.0803%" height="15" fill="rgb(222,31,33)" fg:x="388" fg:w="1"/><text x="31.4147%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="31.0040%" y="373" width="0.3213%" height="15" fill="rgb(210,17,39)" fg:x="386" fg:w="4"/><text x="31.2540%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.2450%" y="357" width="0.0803%" height="15" fill="rgb(244,93,20)" fg:x="389" fg:w="1"/><text x="31.4950%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.2450%" y="341" width="0.0803%" height="15" fill="rgb(210,40,47)" fg:x="389" fg:w="1"/><text x="31.4950%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.2450%" y="325" width="0.0803%" height="15" fill="rgb(239,211,47)" fg:x="389" fg:w="1"/><text x="31.4950%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="30.4418%" y="389" width="1.0442%" height="15" fill="rgb(251,223,49)" fg:x="379" fg:w="13"/><text x="30.6918%" y="399.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="31.3253%" y="373" width="0.1606%" height="15" fill="rgb(221,149,5)" fg:x="390" fg:w="2"/><text x="31.5753%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4056%" y="357" width="0.0803%" height="15" fill="rgb(219,224,51)" fg:x="391" fg:w="1"/><text x="31.6556%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (135 samples, 10.84%)</title><rect x="20.7229%" y="405" width="10.8434%" height="15" fill="rgb(223,7,8)" fg:x="258" fg:w="135"/><text x="20.9729%" y="415.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="31.4859%" y="389" width="0.0803%" height="15" fill="rgb(241,217,22)" fg:x="392" fg:w="1"/><text x="31.7359%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="31.4859%" y="373" width="0.0803%" height="15" fill="rgb(248,209,0)" fg:x="392" fg:w="1"/><text x="31.7359%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (164 samples, 13.17%)</title><rect x="18.4739%" y="421" width="13.1727%" height="15" fill="rgb(217,205,4)" fg:x="230" fg:w="164"/><text x="18.7239%" y="431.50">regex_automata::meta..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="31.5663%" y="405" width="0.0803%" height="15" fill="rgb(228,124,39)" fg:x="393" fg:w="1"/><text x="31.8163%" y="415.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="31.5663%" y="389" width="0.0803%" height="15" fill="rgb(250,116,42)" fg:x="393" fg:w="1"/><text x="31.8163%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="31.6466%" y="373" width="0.0803%" height="15" fill="rgb(223,202,9)" fg:x="394" fg:w="1"/><text x="31.8966%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="31.6466%" y="357" width="0.0803%" height="15" fill="rgb(242,222,40)" fg:x="394" fg:w="1"/><text x="31.8966%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="31.6466%" y="341" width="0.0803%" height="15" fill="rgb(229,99,46)" fg:x="394" fg:w="1"/><text x="31.8966%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="31.7269%" y="373" width="0.0803%" height="15" fill="rgb(225,56,46)" fg:x="395" fg:w="1"/><text x="31.9769%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="31.7269%" y="357" width="0.0803%" height="15" fill="rgb(227,94,5)" fg:x="395" fg:w="1"/><text x="31.9769%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="31.6466%" y="389" width="0.5622%" height="15" fill="rgb(205,112,38)" fg:x="394" fg:w="7"/><text x="31.8966%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="31.8072%" y="373" width="0.4016%" height="15" fill="rgb(231,133,46)" fg:x="396" fg:w="5"/><text x="32.0572%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="31.8876%" y="357" width="0.3213%" height="15" fill="rgb(217,16,9)" fg:x="397" fg:w="4"/><text x="32.1376%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="31.8876%" y="341" width="0.3213%" height="15" fill="rgb(249,173,9)" fg:x="397" fg:w="4"/><text x="32.1376%" y="351.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="31.8876%" y="325" width="0.3213%" height="15" fill="rgb(205,163,53)" fg:x="397" fg:w="4"/><text x="32.1376%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="31.6466%" y="421" width="0.6426%" height="15" fill="rgb(217,54,41)" fg:x="394" fg:w="8"/><text x="31.8966%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="31.6466%" y="405" width="0.6426%" height="15" fill="rgb(228,216,12)" fg:x="394" fg:w="8"/><text x="31.8966%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="32.2088%" y="389" width="0.0803%" height="15" fill="rgb(244,228,15)" fg:x="401" fg:w="1"/><text x="32.4588%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="32.2892%" y="389" width="0.0803%" height="15" fill="rgb(221,176,53)" fg:x="402" fg:w="1"/><text x="32.5392%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="32.3695%" y="389" width="0.2410%" height="15" fill="rgb(205,94,34)" fg:x="403" fg:w="3"/><text x="32.6195%" y="399.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="32.4498%" y="373" width="0.1606%" height="15" fill="rgb(213,110,48)" fg:x="404" fg:w="2"/><text x="32.6998%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.5301%" y="357" width="0.0803%" height="15" fill="rgb(236,142,28)" fg:x="405" fg:w="1"/><text x="32.7801%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.5301%" y="341" width="0.0803%" height="15" fill="rgb(225,135,29)" fg:x="405" fg:w="1"/><text x="32.7801%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.5301%" y="325" width="0.0803%" height="15" fill="rgb(252,45,31)" fg:x="405" fg:w="1"/><text x="32.7801%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (178 samples, 14.30%)</title><rect x="18.3936%" y="437" width="14.2972%" height="15" fill="rgb(211,187,50)" fg:x="229" fg:w="178"/><text x="18.6436%" y="447.50">regex_automata::meta::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="32.2892%" y="421" width="0.4016%" height="15" fill="rgb(229,109,7)" fg:x="402" fg:w="5"/><text x="32.5392%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="32.2892%" y="405" width="0.4016%" height="15" fill="rgb(251,131,51)" fg:x="402" fg:w="5"/><text x="32.5392%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.6104%" y="389" width="0.0803%" height="15" fill="rgb(251,180,35)" fg:x="406" fg:w="1"/><text x="32.8604%" y="399.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="32.6104%" y="373" width="0.0803%" height="15" fill="rgb(211,46,32)" fg:x="406" fg:w="1"/><text x="32.8604%" y="383.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="32.6104%" y="357" width="0.0803%" height="15" fill="rgb(248,123,17)" fg:x="406" fg:w="1"/><text x="32.8604%" y="367.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (179 samples, 14.38%)</title><rect x="18.3936%" y="469" width="14.3775%" height="15" fill="rgb(227,141,18)" fg:x="229" fg:w="179"/><text x="18.6436%" y="479.50">&lt;regex::regex::string:..</text></g><g><title>regex::builders::Builder::build_one_string (179 samples, 14.38%)</title><rect x="18.3936%" y="453" width="14.3775%" height="15" fill="rgb(216,102,9)" fg:x="229" fg:w="179"/><text x="18.6436%" y="463.50">regex::builders::Build..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="32.6908%" y="437" width="0.0803%" height="15" fill="rgb(253,47,13)" fg:x="407" fg:w="1"/><text x="32.9408%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.7711%" y="453" width="0.0803%" height="15" fill="rgb(226,93,23)" fg:x="408" fg:w="1"/><text x="33.0211%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="32.8514%" y="437" width="0.1606%" height="15" fill="rgb(247,104,17)" fg:x="409" fg:w="2"/><text x="33.1014%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="32.9317%" y="421" width="0.0803%" height="15" fill="rgb(233,203,26)" fg:x="410" fg:w="1"/><text x="33.1817%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="32.7711%" y="469" width="0.3213%" height="15" fill="rgb(244,98,49)" fg:x="408" fg:w="4"/><text x="33.0211%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="32.8514%" y="453" width="0.2410%" height="15" fill="rgb(235,134,22)" fg:x="409" fg:w="3"/><text x="33.1014%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="33.0120%" y="437" width="0.0803%" height="15" fill="rgb(221,70,32)" fg:x="411" fg:w="1"/><text x="33.2620%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="33.0120%" y="421" width="0.0803%" height="15" fill="rgb(238,15,50)" fg:x="411" fg:w="1"/><text x="33.2620%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0120%" y="405" width="0.0803%" height="15" fill="rgb(215,221,48)" fg:x="411" fg:w="1"/><text x="33.2620%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="33.8956%" y="389" width="0.2410%" height="15" fill="rgb(236,73,3)" fg:x="422" fg:w="3"/><text x="34.1456%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.9759%" y="373" width="0.1606%" height="15" fill="rgb(250,107,11)" fg:x="423" fg:w="2"/><text x="34.2259%" y="383.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="33.9759%" y="357" width="0.1606%" height="15" fill="rgb(242,39,14)" fg:x="423" fg:w="2"/><text x="34.2259%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.1365%" y="389" width="0.0803%" height="15" fill="rgb(248,164,37)" fg:x="425" fg:w="1"/><text x="34.3865%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.12%)</title><rect x="33.3333%" y="405" width="1.1245%" height="15" fill="rgb(217,60,12)" fg:x="415" fg:w="14"/><text x="33.5833%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="34.2169%" y="389" width="0.2410%" height="15" fill="rgb(240,125,29)" fg:x="426" fg:w="3"/><text x="34.4669%" y="399.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (211 samples, 16.95%)</title><rect x="17.6707%" y="485" width="16.9478%" height="15" fill="rgb(208,207,28)" fg:x="220" fg:w="211"/><text x="17.9207%" y="495.50">indefinite::helper::Helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (19 samples, 1.53%)</title><rect x="33.0924%" y="469" width="1.5261%" height="15" fill="rgb(209,159,27)" fg:x="412" fg:w="19"/><text x="33.3424%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (18 samples, 1.45%)</title><rect x="33.1727%" y="453" width="1.4458%" height="15" fill="rgb(251,176,53)" fg:x="413" fg:w="18"/><text x="33.4227%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (18 samples, 1.45%)</title><rect x="33.1727%" y="437" width="1.4458%" height="15" fill="rgb(211,85,7)" fg:x="413" fg:w="18"/><text x="33.4227%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.37%)</title><rect x="33.2530%" y="421" width="1.3655%" height="15" fill="rgb(216,64,54)" fg:x="414" fg:w="17"/><text x="33.5030%" y="431.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="34.4578%" y="405" width="0.1606%" height="15" fill="rgb(217,54,24)" fg:x="429" fg:w="2"/><text x="34.7078%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="34.4578%" y="389" width="0.1606%" height="15" fill="rgb(208,206,53)" fg:x="429" fg:w="2"/><text x="34.7078%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.4578%" y="373" width="0.1606%" height="15" fill="rgb(251,74,39)" fg:x="429" fg:w="2"/><text x="34.7078%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="34.4578%" y="357" width="0.1606%" height="15" fill="rgb(226,47,5)" fg:x="429" fg:w="2"/><text x="34.7078%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="34.6185%" y="421" width="0.2410%" height="15" fill="rgb(234,111,33)" fg:x="431" fg:w="3"/><text x="34.8685%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="34.6185%" y="405" width="0.2410%" height="15" fill="rgb(251,14,10)" fg:x="431" fg:w="3"/><text x="34.8685%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="34.6988%" y="389" width="0.1606%" height="15" fill="rgb(232,43,0)" fg:x="432" fg:w="2"/><text x="34.9488%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.7791%" y="373" width="0.0803%" height="15" fill="rgb(222,68,43)" fg:x="433" fg:w="1"/><text x="35.0291%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.7791%" y="357" width="0.0803%" height="15" fill="rgb(217,24,23)" fg:x="433" fg:w="1"/><text x="35.0291%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.7791%" y="341" width="0.0803%" height="15" fill="rgb(229,209,14)" fg:x="433" fg:w="1"/><text x="35.0291%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="34.8594%" y="421" width="0.3213%" height="15" fill="rgb(250,149,48)" fg:x="434" fg:w="4"/><text x="35.1094%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="34.8594%" y="405" width="0.3213%" height="15" fill="rgb(210,120,37)" fg:x="434" fg:w="4"/><text x="35.1094%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="35.1004%" y="389" width="0.0803%" height="15" fill="rgb(210,21,8)" fg:x="437" fg:w="1"/><text x="35.3504%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.1004%" y="373" width="0.0803%" height="15" fill="rgb(243,145,7)" fg:x="437" fg:w="1"/><text x="35.3504%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.1004%" y="357" width="0.0803%" height="15" fill="rgb(238,178,32)" fg:x="437" fg:w="1"/><text x="35.3504%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.1004%" y="341" width="0.0803%" height="15" fill="rgb(222,4,10)" fg:x="437" fg:w="1"/><text x="35.3504%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="35.1807%" y="421" width="0.0803%" height="15" fill="rgb(239,7,37)" fg:x="438" fg:w="1"/><text x="35.4307%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.1807%" y="405" width="0.0803%" height="15" fill="rgb(215,31,37)" fg:x="438" fg:w="1"/><text x="35.4307%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5020%" y="389" width="0.0803%" height="15" fill="rgb(224,83,33)" fg:x="442" fg:w="1"/><text x="35.7520%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (27 samples, 2.17%)</title><rect x="35.4217%" y="405" width="2.1687%" height="15" fill="rgb(239,55,3)" fg:x="441" fg:w="27"/><text x="35.6717%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (25 samples, 2.01%)</title><rect x="35.5823%" y="389" width="2.0080%" height="15" fill="rgb(247,92,11)" fg:x="443" fg:w="25"/><text x="35.8323%" y="399.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.4297%" y="373" width="0.1606%" height="15" fill="rgb(239,200,7)" fg:x="466" fg:w="2"/><text x="37.6797%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="37.6707%" y="389" width="0.4819%" height="15" fill="rgb(227,115,8)" fg:x="469" fg:w="6"/><text x="37.9207%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="38.1526%" y="389" width="0.0803%" height="15" fill="rgb(215,189,27)" fg:x="475" fg:w="1"/><text x="38.4026%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.72%)</title><rect x="37.5904%" y="405" width="0.7229%" height="15" fill="rgb(251,216,39)" fg:x="468" fg:w="9"/><text x="37.8404%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="38.2329%" y="389" width="0.0803%" height="15" fill="rgb(207,29,47)" fg:x="476" fg:w="1"/><text x="38.4829%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="38.2329%" y="373" width="0.0803%" height="15" fill="rgb(210,71,34)" fg:x="476" fg:w="1"/><text x="38.4829%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="38.2329%" y="357" width="0.0803%" height="15" fill="rgb(253,217,51)" fg:x="476" fg:w="1"/><text x="38.4829%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.2329%" y="341" width="0.0803%" height="15" fill="rgb(222,117,46)" fg:x="476" fg:w="1"/><text x="38.4829%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2329%" y="325" width="0.0803%" height="15" fill="rgb(226,132,6)" fg:x="476" fg:w="1"/><text x="38.4829%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="38.5542%" y="373" width="0.0803%" height="15" fill="rgb(254,145,51)" fg:x="480" fg:w="1"/><text x="38.8042%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.5542%" y="357" width="0.0803%" height="15" fill="rgb(231,199,27)" fg:x="480" fg:w="1"/><text x="38.8042%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5542%" y="341" width="0.0803%" height="15" fill="rgb(245,158,14)" fg:x="480" fg:w="1"/><text x="38.8042%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.5542%" y="325" width="0.0803%" height="15" fill="rgb(240,113,14)" fg:x="480" fg:w="1"/><text x="38.8042%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="39.1968%" y="341" width="0.2410%" height="15" fill="rgb(210,20,13)" fg:x="488" fg:w="3"/><text x="39.4468%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="39.1968%" y="325" width="0.2410%" height="15" fill="rgb(241,144,13)" fg:x="488" fg:w="3"/><text x="39.4468%" y="335.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="39.1968%" y="309" width="0.2410%" height="15" fill="rgb(235,43,34)" fg:x="488" fg:w="3"/><text x="39.4468%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (12 samples, 0.96%)</title><rect x="38.6345%" y="373" width="0.9639%" height="15" fill="rgb(208,36,20)" fg:x="481" fg:w="12"/><text x="38.8845%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (8 samples, 0.64%)</title><rect x="38.9558%" y="357" width="0.6426%" height="15" fill="rgb(239,204,10)" fg:x="485" fg:w="8"/><text x="39.2058%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.4378%" y="341" width="0.1606%" height="15" fill="rgb(217,84,43)" fg:x="491" fg:w="2"/><text x="39.6878%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.4378%" y="325" width="0.1606%" height="15" fill="rgb(241,170,50)" fg:x="491" fg:w="2"/><text x="39.6878%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="39.4378%" y="309" width="0.1606%" height="15" fill="rgb(226,205,29)" fg:x="491" fg:w="2"/><text x="39.6878%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (14 samples, 1.12%)</title><rect x="39.6787%" y="357" width="1.1245%" height="15" fill="rgb(233,113,1)" fg:x="494" fg:w="14"/><text x="39.9287%" y="367.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.72%)</title><rect x="40.0803%" y="341" width="0.7229%" height="15" fill="rgb(253,98,13)" fg:x="499" fg:w="9"/><text x="40.3303%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (32 samples, 2.57%)</title><rect x="38.3133%" y="405" width="2.5703%" height="15" fill="rgb(211,115,12)" fg:x="477" fg:w="32"/><text x="38.5633%" y="415.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (32 samples, 2.57%)</title><rect x="38.3133%" y="389" width="2.5703%" height="15" fill="rgb(208,12,16)" fg:x="477" fg:w="32"/><text x="38.5633%" y="399.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (16 samples, 1.29%)</title><rect x="39.5984%" y="373" width="1.2851%" height="15" fill="rgb(237,193,54)" fg:x="493" fg:w="16"/><text x="39.8484%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="40.8032%" y="357" width="0.0803%" height="15" fill="rgb(243,22,42)" fg:x="508" fg:w="1"/><text x="41.0532%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.8835%" y="309" width="0.0803%" height="15" fill="rgb(233,151,36)" fg:x="509" fg:w="1"/><text x="41.1335%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.8835%" y="293" width="0.0803%" height="15" fill="rgb(237,57,45)" fg:x="509" fg:w="1"/><text x="41.1335%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.8835%" y="277" width="0.0803%" height="15" fill="rgb(221,88,17)" fg:x="509" fg:w="1"/><text x="41.1335%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.8835%" y="261" width="0.0803%" height="15" fill="rgb(230,79,15)" fg:x="509" fg:w="1"/><text x="41.1335%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="42.3293%" y="293" width="0.4819%" height="15" fill="rgb(213,57,13)" fg:x="527" fg:w="6"/><text x="42.5793%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="42.8112%" y="293" width="0.1606%" height="15" fill="rgb(222,116,39)" fg:x="533" fg:w="2"/><text x="43.0612%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (10 samples, 0.80%)</title><rect x="42.9719%" y="293" width="0.8032%" height="15" fill="rgb(245,107,2)" fg:x="535" fg:w="10"/><text x="43.2219%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.6145%" y="277" width="0.1606%" height="15" fill="rgb(238,1,10)" fg:x="543" fg:w="2"/><text x="43.8645%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.6145%" y="261" width="0.1606%" height="15" fill="rgb(249,4,48)" fg:x="543" fg:w="2"/><text x="43.8645%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.6145%" y="245" width="0.1606%" height="15" fill="rgb(223,151,18)" fg:x="543" fg:w="2"/><text x="43.8645%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="43.7751%" y="293" width="0.2410%" height="15" fill="rgb(227,65,43)" fg:x="545" fg:w="3"/><text x="44.0251%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.9357%" y="277" width="0.0803%" height="15" fill="rgb(218,40,45)" fg:x="547" fg:w="1"/><text x="44.1857%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9357%" y="261" width="0.0803%" height="15" fill="rgb(252,121,31)" fg:x="547" fg:w="1"/><text x="44.1857%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.9357%" y="245" width="0.0803%" height="15" fill="rgb(219,158,43)" fg:x="547" fg:w="1"/><text x="44.1857%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.7390%" y="229" width="0.1606%" height="15" fill="rgb(231,162,42)" fg:x="557" fg:w="2"/><text x="44.9890%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="44.8996%" y="229" width="0.0803%" height="15" fill="rgb(217,179,25)" fg:x="559" fg:w="1"/><text x="45.1496%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="44.8996%" y="213" width="0.0803%" height="15" fill="rgb(206,212,31)" fg:x="559" fg:w="1"/><text x="45.1496%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="44.7390%" y="261" width="0.3213%" height="15" fill="rgb(235,144,12)" fg:x="557" fg:w="4"/><text x="44.9890%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="44.7390%" y="245" width="0.3213%" height="15" fill="rgb(213,51,10)" fg:x="557" fg:w="4"/><text x="44.9890%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.9799%" y="229" width="0.0803%" height="15" fill="rgb(231,145,14)" fg:x="560" fg:w="1"/><text x="45.2299%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="45.3815%" y="245" width="0.1606%" height="15" fill="rgb(235,15,28)" fg:x="565" fg:w="2"/><text x="45.6315%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (23 samples, 1.85%)</title><rect x="44.0161%" y="293" width="1.8474%" height="15" fill="rgb(237,206,10)" fg:x="548" fg:w="23"/><text x="44.2661%" y="303.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.53%)</title><rect x="44.3373%" y="277" width="1.5261%" height="15" fill="rgb(236,227,27)" fg:x="552" fg:w="19"/><text x="44.5873%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.80%)</title><rect x="45.0602%" y="261" width="0.8032%" height="15" fill="rgb(246,83,35)" fg:x="561" fg:w="10"/><text x="45.3102%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="45.5422%" y="245" width="0.3213%" height="15" fill="rgb(220,136,24)" fg:x="567" fg:w="4"/><text x="45.7922%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.7831%" y="229" width="0.0803%" height="15" fill="rgb(217,3,25)" fg:x="570" fg:w="1"/><text x="46.0331%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.7831%" y="213" width="0.0803%" height="15" fill="rgb(239,24,14)" fg:x="570" fg:w="1"/><text x="46.0331%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.7831%" y="197" width="0.0803%" height="15" fill="rgb(244,16,53)" fg:x="570" fg:w="1"/><text x="46.0331%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="45.8635%" y="277" width="0.0803%" height="15" fill="rgb(208,175,44)" fg:x="571" fg:w="1"/><text x="46.1135%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.8635%" y="261" width="0.0803%" height="15" fill="rgb(252,18,48)" fg:x="571" fg:w="1"/><text x="46.1135%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="45.8635%" y="293" width="0.1606%" height="15" fill="rgb(234,199,32)" fg:x="571" fg:w="2"/><text x="46.1135%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="45.9438%" y="277" width="0.0803%" height="15" fill="rgb(225,77,54)" fg:x="572" fg:w="1"/><text x="46.1938%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="45.9438%" y="261" width="0.0803%" height="15" fill="rgb(225,42,25)" fg:x="572" fg:w="1"/><text x="46.1938%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.0241%" y="277" width="0.0803%" height="15" fill="rgb(242,227,46)" fg:x="573" fg:w="1"/><text x="46.2741%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.0241%" y="261" width="0.0803%" height="15" fill="rgb(246,197,35)" fg:x="573" fg:w="1"/><text x="46.2741%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.0241%" y="245" width="0.0803%" height="15" fill="rgb(215,159,26)" fg:x="573" fg:w="1"/><text x="46.2741%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (94 samples, 7.55%)</title><rect x="46.0241%" y="293" width="7.5502%" height="15" fill="rgb(212,194,50)" fg:x="573" fg:w="94"/><text x="46.2741%" y="303.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (93 samples, 7.47%)</title><rect x="46.1044%" y="277" width="7.4699%" height="15" fill="rgb(246,132,1)" fg:x="574" fg:w="93"/><text x="46.3544%" y="287.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (93 samples, 7.47%)</title><rect x="46.1044%" y="261" width="7.4699%" height="15" fill="rgb(217,71,7)" fg:x="574" fg:w="93"/><text x="46.3544%" y="271.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="53.5743%" y="293" width="0.4819%" height="15" fill="rgb(252,59,32)" fg:x="667" fg:w="6"/><text x="53.8243%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.8956%" y="277" width="0.1606%" height="15" fill="rgb(253,204,25)" fg:x="671" fg:w="2"/><text x="54.1456%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (179 samples, 14.38%)</title><rect x="40.8835%" y="389" width="14.3775%" height="15" fill="rgb(232,21,16)" fg:x="509" fg:w="179"/><text x="41.1335%" y="399.50">&lt;core::iter::adapters:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (179 samples, 14.38%)</title><rect x="40.8835%" y="373" width="14.3775%" height="15" fill="rgb(248,90,29)" fg:x="509" fg:w="179"/><text x="41.1335%" y="383.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (179 samples, 14.38%)</title><rect x="40.8835%" y="357" width="14.3775%" height="15" fill="rgb(249,223,7)" fg:x="509" fg:w="179"/><text x="41.1335%" y="367.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (179 samples, 14.38%)</title><rect x="40.8835%" y="341" width="14.3775%" height="15" fill="rgb(231,119,42)" fg:x="509" fg:w="179"/><text x="41.1335%" y="351.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (179 samples, 14.38%)</title><rect x="40.8835%" y="325" width="14.3775%" height="15" fill="rgb(215,41,35)" fg:x="509" fg:w="179"/><text x="41.1335%" y="335.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (178 samples, 14.30%)</title><rect x="40.9639%" y="309" width="14.2972%" height="15" fill="rgb(220,44,45)" fg:x="510" fg:w="178"/><text x="41.2139%" y="319.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (15 samples, 1.20%)</title><rect x="54.0562%" y="293" width="1.2048%" height="15" fill="rgb(253,197,36)" fg:x="673" fg:w="15"/><text x="54.3062%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="55.0201%" y="277" width="0.2410%" height="15" fill="rgb(245,225,54)" fg:x="685" fg:w="3"/><text x="55.2701%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.1807%" y="261" width="0.0803%" height="15" fill="rgb(239,94,37)" fg:x="687" fg:w="1"/><text x="55.4307%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.1807%" y="245" width="0.0803%" height="15" fill="rgb(242,217,10)" fg:x="687" fg:w="1"/><text x="55.4307%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="55.5020%" y="373" width="0.0803%" height="15" fill="rgb(250,193,7)" fg:x="691" fg:w="1"/><text x="55.7520%" y="383.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="55.5823%" y="373" width="0.3213%" height="15" fill="rgb(230,104,19)" fg:x="692" fg:w="4"/><text x="55.8323%" y="383.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.08%)</title><rect x="55.9036%" y="373" width="0.0803%" height="15" fill="rgb(230,181,4)" fg:x="696" fg:w="1"/><text x="56.1536%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (13 samples, 1.04%)</title><rect x="55.9839%" y="373" width="1.0442%" height="15" fill="rgb(216,219,49)" fg:x="697" fg:w="13"/><text x="56.2339%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="56.6265%" y="357" width="0.4016%" height="15" fill="rgb(254,144,0)" fg:x="705" fg:w="5"/><text x="56.8765%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="56.7068%" y="341" width="0.3213%" height="15" fill="rgb(205,209,38)" fg:x="706" fg:w="4"/><text x="56.9568%" y="351.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="56.7068%" y="325" width="0.3213%" height="15" fill="rgb(240,21,42)" fg:x="706" fg:w="4"/><text x="56.9568%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="57.0281%" y="373" width="0.5622%" height="15" fill="rgb(241,132,3)" fg:x="710" fg:w="7"/><text x="57.2781%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.5100%" y="357" width="0.0803%" height="15" fill="rgb(225,14,2)" fg:x="716" fg:w="1"/><text x="57.7600%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.5100%" y="341" width="0.0803%" height="15" fill="rgb(210,141,35)" fg:x="716" fg:w="1"/><text x="57.7600%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.5100%" y="325" width="0.0803%" height="15" fill="rgb(251,14,44)" fg:x="716" fg:w="1"/><text x="57.7600%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (279 samples, 22.41%)</title><rect x="35.2610%" y="421" width="22.4096%" height="15" fill="rgb(247,48,18)" fg:x="439" fg:w="279"/><text x="35.5110%" y="431.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (209 samples, 16.79%)</title><rect x="40.8835%" y="405" width="16.7871%" height="15" fill="rgb(225,0,40)" fg:x="509" fg:w="209"/><text x="41.1335%" y="415.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (30 samples, 2.41%)</title><rect x="55.2610%" y="389" width="2.4096%" height="15" fill="rgb(221,31,33)" fg:x="688" fg:w="30"/><text x="55.5110%" y="399.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="57.5904%" y="373" width="0.0803%" height="15" fill="rgb(237,42,40)" fg:x="717" fg:w="1"/><text x="57.8404%" y="383.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="57.5904%" y="357" width="0.0803%" height="15" fill="rgb(233,51,29)" fg:x="717" fg:w="1"/><text x="57.8404%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="57.9116%" y="373" width="0.0803%" height="15" fill="rgb(226,58,20)" fg:x="721" fg:w="1"/><text x="58.1616%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="57.9116%" y="357" width="0.0803%" height="15" fill="rgb(208,98,7)" fg:x="721" fg:w="1"/><text x="58.1616%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="57.9116%" y="341" width="0.0803%" height="15" fill="rgb(228,143,44)" fg:x="721" fg:w="1"/><text x="58.1616%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="57.9920%" y="373" width="0.0803%" height="15" fill="rgb(246,55,38)" fg:x="722" fg:w="1"/><text x="58.2420%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="57.9920%" y="357" width="0.0803%" height="15" fill="rgb(247,87,16)" fg:x="722" fg:w="1"/><text x="58.2420%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="57.9116%" y="389" width="0.3213%" height="15" fill="rgb(234,129,42)" fg:x="721" fg:w="4"/><text x="58.1616%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="58.0723%" y="373" width="0.1606%" height="15" fill="rgb(220,82,16)" fg:x="723" fg:w="2"/><text x="58.3223%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.1526%" y="357" width="0.0803%" height="15" fill="rgb(211,88,4)" fg:x="724" fg:w="1"/><text x="58.4026%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.1526%" y="341" width="0.0803%" height="15" fill="rgb(248,151,21)" fg:x="724" fg:w="1"/><text x="58.4026%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1526%" y="325" width="0.0803%" height="15" fill="rgb(238,163,6)" fg:x="724" fg:w="1"/><text x="58.4026%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="57.6707%" y="421" width="0.7229%" height="15" fill="rgb(209,183,11)" fg:x="718" fg:w="9"/><text x="57.9207%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="57.7510%" y="405" width="0.6426%" height="15" fill="rgb(219,37,20)" fg:x="719" fg:w="8"/><text x="58.0010%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="58.2329%" y="389" width="0.1606%" height="15" fill="rgb(210,158,4)" fg:x="725" fg:w="2"/><text x="58.4829%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.3133%" y="373" width="0.0803%" height="15" fill="rgb(221,167,53)" fg:x="726" fg:w="1"/><text x="58.5633%" y="383.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="58.5542%" y="373" width="0.1606%" height="15" fill="rgb(237,151,45)" fg:x="729" fg:w="2"/><text x="58.8042%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="58.4739%" y="389" width="0.3213%" height="15" fill="rgb(231,39,3)" fg:x="728" fg:w="4"/><text x="58.7239%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="58.7149%" y="373" width="0.0803%" height="15" fill="rgb(212,167,28)" fg:x="731" fg:w="1"/><text x="58.9649%" y="383.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="58.7149%" y="357" width="0.0803%" height="15" fill="rgb(232,178,8)" fg:x="731" fg:w="1"/><text x="58.9649%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="58.7952%" y="389" width="0.0803%" height="15" fill="rgb(225,151,20)" fg:x="732" fg:w="1"/><text x="59.0452%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (303 samples, 24.34%)</title><rect x="34.6185%" y="437" width="24.3373%" height="15" fill="rgb(238,3,37)" fg:x="431" fg:w="303"/><text x="34.8685%" y="447.50">regex_automata::meta::regex::Builder::b..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="58.3936%" y="421" width="0.5622%" height="15" fill="rgb(251,147,42)" fg:x="727" fg:w="7"/><text x="58.6436%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="58.3936%" y="405" width="0.5622%" height="15" fill="rgb(208,173,10)" fg:x="727" fg:w="7"/><text x="58.6436%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="58.8755%" y="389" width="0.0803%" height="15" fill="rgb(246,225,4)" fg:x="733" fg:w="1"/><text x="59.1255%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="58.8755%" y="373" width="0.0803%" height="15" fill="rgb(248,102,6)" fg:x="733" fg:w="1"/><text x="59.1255%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.8755%" y="357" width="0.0803%" height="15" fill="rgb(232,6,21)" fg:x="733" fg:w="1"/><text x="59.1255%" y="367.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (304 samples, 24.42%)</title><rect x="34.6185%" y="469" width="24.4177%" height="15" fill="rgb(221,179,22)" fg:x="431" fg:w="304"/><text x="34.8685%" y="479.50">&lt;regex::regex::string::Regex as core::s..</text></g><g><title>regex::builders::Builder::build_one_string (304 samples, 24.42%)</title><rect x="34.6185%" y="453" width="24.4177%" height="15" fill="rgb(252,50,20)" fg:x="431" fg:w="304"/><text x="34.8685%" y="463.50">regex::builders::Builder::build_one_str..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="58.9558%" y="437" width="0.0803%" height="15" fill="rgb(222,56,38)" fg:x="734" fg:w="1"/><text x="59.2058%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="59.0361%" y="421" width="0.1606%" height="15" fill="rgb(206,193,29)" fg:x="735" fg:w="2"/><text x="59.2861%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="59.0361%" y="405" width="0.1606%" height="15" fill="rgb(239,192,45)" fg:x="735" fg:w="2"/><text x="59.2861%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="59.0361%" y="437" width="0.2410%" height="15" fill="rgb(254,18,36)" fg:x="735" fg:w="3"/><text x="59.2861%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="59.1968%" y="421" width="0.0803%" height="15" fill="rgb(221,127,11)" fg:x="737" fg:w="1"/><text x="59.4468%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.1968%" y="405" width="0.0803%" height="15" fill="rgb(234,146,35)" fg:x="737" fg:w="1"/><text x="59.4468%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="59.0361%" y="469" width="0.3213%" height="15" fill="rgb(254,201,37)" fg:x="735" fg:w="4"/><text x="59.2861%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="59.0361%" y="453" width="0.3213%" height="15" fill="rgb(211,202,23)" fg:x="735" fg:w="4"/><text x="59.2861%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="59.2771%" y="437" width="0.0803%" height="15" fill="rgb(237,91,2)" fg:x="738" fg:w="1"/><text x="59.5271%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="59.2771%" y="421" width="0.0803%" height="15" fill="rgb(226,228,36)" fg:x="738" fg:w="1"/><text x="59.5271%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.2771%" y="405" width="0.0803%" height="15" fill="rgb(213,63,50)" fg:x="738" fg:w="1"/><text x="59.5271%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="59.3574%" y="421" width="0.1606%" height="15" fill="rgb(235,194,19)" fg:x="739" fg:w="2"/><text x="59.6074%" y="431.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="59.3574%" y="405" width="0.1606%" height="15" fill="rgb(207,204,18)" fg:x="739" fg:w="2"/><text x="59.6074%" y="415.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="59.4378%" y="389" width="0.0803%" height="15" fill="rgb(248,8,7)" fg:x="740" fg:w="1"/><text x="59.6878%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="59.3574%" y="453" width="0.2410%" height="15" fill="rgb(223,145,47)" fg:x="739" fg:w="3"/><text x="59.6074%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="59.3574%" y="437" width="0.2410%" height="15" fill="rgb(228,84,11)" fg:x="739" fg:w="3"/><text x="59.6074%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="59.5181%" y="421" width="0.0803%" height="15" fill="rgb(218,76,45)" fg:x="741" fg:w="1"/><text x="59.7681%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.5181%" y="405" width="0.0803%" height="15" fill="rgb(223,80,15)" fg:x="741" fg:w="1"/><text x="59.7681%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.5984%" y="389" width="0.0803%" height="15" fill="rgb(219,218,33)" fg:x="742" fg:w="1"/><text x="59.8484%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.5984%" y="373" width="0.0803%" height="15" fill="rgb(208,51,11)" fg:x="742" fg:w="1"/><text x="59.8484%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="59.5984%" y="357" width="0.0803%" height="15" fill="rgb(229,165,39)" fg:x="742" fg:w="1"/><text x="59.8484%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.3213%" y="373" width="0.0803%" height="15" fill="rgb(241,100,24)" fg:x="751" fg:w="1"/><text x="60.5713%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.3213%" y="357" width="0.0803%" height="15" fill="rgb(228,14,23)" fg:x="751" fg:w="1"/><text x="60.5713%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.3213%" y="341" width="0.0803%" height="15" fill="rgb(247,116,52)" fg:x="751" fg:w="1"/><text x="60.5713%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.29%)</title><rect x="59.6787%" y="389" width="1.2851%" height="15" fill="rgb(216,149,33)" fg:x="743" fg:w="16"/><text x="59.9287%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (7 samples, 0.56%)</title><rect x="60.4016%" y="373" width="0.5622%" height="15" fill="rgb(238,142,29)" fg:x="752" fg:w="7"/><text x="60.6516%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.45%)</title><rect x="59.5984%" y="405" width="1.4458%" height="15" fill="rgb(224,83,40)" fg:x="742" fg:w="18"/><text x="59.8484%" y="415.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="60.9639%" y="389" width="0.0803%" height="15" fill="rgb(234,165,11)" fg:x="759" fg:w="1"/><text x="61.2139%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.9639%" y="373" width="0.0803%" height="15" fill="rgb(215,96,23)" fg:x="759" fg:w="1"/><text x="61.2139%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.9639%" y="357" width="0.0803%" height="15" fill="rgb(233,179,26)" fg:x="759" fg:w="1"/><text x="61.2139%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9639%" y="341" width="0.0803%" height="15" fill="rgb(225,129,33)" fg:x="759" fg:w="1"/><text x="61.2139%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (331 samples, 26.59%)</title><rect x="34.6185%" y="485" width="26.5863%" height="15" fill="rgb(237,49,13)" fg:x="431" fg:w="331"/><text x="34.8685%" y="495.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.85%)</title><rect x="59.3574%" y="469" width="1.8474%" height="15" fill="rgb(211,3,31)" fg:x="739" fg:w="23"/><text x="59.6074%" y="479.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (20 samples, 1.61%)</title><rect x="59.5984%" y="453" width="1.6064%" height="15" fill="rgb(216,152,19)" fg:x="742" fg:w="20"/><text x="59.8484%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (20 samples, 1.61%)</title><rect x="59.5984%" y="437" width="1.6064%" height="15" fill="rgb(251,121,35)" fg:x="742" fg:w="20"/><text x="59.8484%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (20 samples, 1.61%)</title><rect x="59.5984%" y="421" width="1.6064%" height="15" fill="rgb(210,217,47)" fg:x="742" fg:w="20"/><text x="59.8484%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="61.0442%" y="405" width="0.1606%" height="15" fill="rgb(244,116,22)" fg:x="760" fg:w="2"/><text x="61.2942%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="61.1245%" y="389" width="0.0803%" height="15" fill="rgb(228,17,21)" fg:x="761" fg:w="1"/><text x="61.3745%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.1245%" y="373" width="0.0803%" height="15" fill="rgb(240,149,34)" fg:x="761" fg:w="1"/><text x="61.3745%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.1245%" y="357" width="0.0803%" height="15" fill="rgb(208,125,47)" fg:x="761" fg:w="1"/><text x="61.3745%" y="367.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="61.2048%" y="469" width="0.0803%" height="15" fill="rgb(249,186,39)" fg:x="762" fg:w="1"/><text x="61.4548%" y="479.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="61.2048%" y="453" width="0.0803%" height="15" fill="rgb(240,220,33)" fg:x="762" fg:w="1"/><text x="61.4548%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="61.2048%" y="437" width="0.0803%" height="15" fill="rgb(243,110,23)" fg:x="762" fg:w="1"/><text x="61.4548%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.2048%" y="421" width="0.0803%" height="15" fill="rgb(219,163,46)" fg:x="762" fg:w="1"/><text x="61.4548%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.2048%" y="405" width="0.0803%" height="15" fill="rgb(216,126,30)" fg:x="762" fg:w="1"/><text x="61.4548%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.2048%" y="389" width="0.0803%" height="15" fill="rgb(208,139,11)" fg:x="762" fg:w="1"/><text x="61.4548%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.2048%" y="373" width="0.0803%" height="15" fill="rgb(213,118,36)" fg:x="762" fg:w="1"/><text x="61.4548%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.2048%" y="357" width="0.0803%" height="15" fill="rgb(226,43,17)" fg:x="762" fg:w="1"/><text x="61.4548%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.2048%" y="341" width="0.0803%" height="15" fill="rgb(254,217,4)" fg:x="762" fg:w="1"/><text x="61.4548%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2048%" y="325" width="0.0803%" height="15" fill="rgb(210,134,47)" fg:x="762" fg:w="1"/><text x="61.4548%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.2851%" y="373" width="0.0803%" height="15" fill="rgb(237,24,49)" fg:x="763" fg:w="1"/><text x="61.5351%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.2851%" y="405" width="0.1606%" height="15" fill="rgb(251,39,46)" fg:x="763" fg:w="2"/><text x="61.5351%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.2851%" y="389" width="0.1606%" height="15" fill="rgb(251,220,3)" fg:x="763" fg:w="2"/><text x="61.5351%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1 samples, 0.08%)</title><rect x="61.3655%" y="373" width="0.0803%" height="15" fill="rgb(228,105,12)" fg:x="764" fg:w="1"/><text x="61.6155%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.4458%" y="373" width="0.0803%" height="15" fill="rgb(215,196,1)" fg:x="765" fg:w="1"/><text x="61.6958%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.5261%" y="373" width="0.0803%" height="15" fill="rgb(214,33,39)" fg:x="766" fg:w="1"/><text x="61.7761%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="61.4458%" y="405" width="0.4016%" height="15" fill="rgb(220,19,52)" fg:x="765" fg:w="5"/><text x="61.6958%" y="415.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="61.4458%" y="389" width="0.4016%" height="15" fill="rgb(221,78,38)" fg:x="765" fg:w="5"/><text x="61.6958%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="61.6064%" y="373" width="0.2410%" height="15" fill="rgb(253,30,16)" fg:x="767" fg:w="3"/><text x="61.8564%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.6064%" y="357" width="0.2410%" height="15" fill="rgb(242,65,0)" fg:x="767" fg:w="3"/><text x="61.8564%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.24%)</title><rect x="61.6064%" y="341" width="0.2410%" height="15" fill="rgb(235,201,12)" fg:x="767" fg:w="3"/><text x="61.8564%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.7671%" y="325" width="0.0803%" height="15" fill="rgb(233,161,9)" fg:x="769" fg:w="1"/><text x="62.0171%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.7671%" y="309" width="0.0803%" height="15" fill="rgb(241,207,41)" fg:x="769" fg:w="1"/><text x="62.0171%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.7671%" y="293" width="0.0803%" height="15" fill="rgb(212,69,46)" fg:x="769" fg:w="1"/><text x="62.0171%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8474%" y="389" width="0.0803%" height="15" fill="rgb(239,69,45)" fg:x="770" fg:w="1"/><text x="62.0974%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="61.9277%" y="389" width="0.0803%" height="15" fill="rgb(242,117,48)" fg:x="771" fg:w="1"/><text x="62.1777%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9277%" y="373" width="0.0803%" height="15" fill="rgb(228,41,36)" fg:x="771" fg:w="1"/><text x="62.1777%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="62.0884%" y="373" width="0.4016%" height="15" fill="rgb(212,3,32)" fg:x="773" fg:w="5"/><text x="62.3384%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="62.0080%" y="389" width="0.5622%" height="15" fill="rgb(233,41,49)" fg:x="772" fg:w="7"/><text x="62.2580%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="62.4900%" y="373" width="0.0803%" height="15" fill="rgb(252,170,49)" fg:x="778" fg:w="1"/><text x="62.7400%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="62.4900%" y="357" width="0.0803%" height="15" fill="rgb(229,53,26)" fg:x="778" fg:w="1"/><text x="62.7400%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="62.4900%" y="341" width="0.0803%" height="15" fill="rgb(217,157,12)" fg:x="778" fg:w="1"/><text x="62.7400%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="62.5703%" y="357" width="0.1606%" height="15" fill="rgb(227,17,9)" fg:x="779" fg:w="2"/><text x="62.8203%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.6506%" y="341" width="0.0803%" height="15" fill="rgb(218,84,12)" fg:x="780" fg:w="1"/><text x="62.9006%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="62.7309%" y="341" width="0.0803%" height="15" fill="rgb(212,79,24)" fg:x="781" fg:w="1"/><text x="62.9809%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.7309%" y="325" width="0.0803%" height="15" fill="rgb(217,222,37)" fg:x="781" fg:w="1"/><text x="62.9809%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7309%" y="309" width="0.0803%" height="15" fill="rgb(246,208,8)" fg:x="781" fg:w="1"/><text x="62.9809%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="62.5703%" y="373" width="0.3213%" height="15" fill="rgb(244,133,10)" fg:x="779" fg:w="4"/><text x="62.8203%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="62.7309%" y="357" width="0.1606%" height="15" fill="rgb(209,219,41)" fg:x="781" fg:w="2"/><text x="62.9809%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="62.8112%" y="341" width="0.0803%" height="15" fill="rgb(253,175,45)" fg:x="782" fg:w="1"/><text x="63.0612%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="62.8112%" y="325" width="0.0803%" height="15" fill="rgb(235,100,37)" fg:x="782" fg:w="1"/><text x="63.0612%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="62.8112%" y="309" width="0.0803%" height="15" fill="rgb(225,87,19)" fg:x="782" fg:w="1"/><text x="63.0612%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.8112%" y="293" width="0.0803%" height="15" fill="rgb(217,152,17)" fg:x="782" fg:w="1"/><text x="63.0612%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.8112%" y="277" width="0.0803%" height="15" fill="rgb(235,72,13)" fg:x="782" fg:w="1"/><text x="63.0612%" y="287.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="62.8916%" y="357" width="0.1606%" height="15" fill="rgb(233,140,18)" fg:x="783" fg:w="2"/><text x="63.1416%" y="367.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="63.0522%" y="357" width="0.2410%" height="15" fill="rgb(207,212,28)" fg:x="785" fg:w="3"/><text x="63.3022%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="63.2932%" y="357" width="0.0803%" height="15" fill="rgb(220,130,25)" fg:x="788" fg:w="1"/><text x="63.5432%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="63.3735%" y="357" width="0.2410%" height="15" fill="rgb(205,55,34)" fg:x="789" fg:w="3"/><text x="63.6235%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="63.6145%" y="357" width="0.4819%" height="15" fill="rgb(237,54,35)" fg:x="792" fg:w="6"/><text x="63.8645%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (21 samples, 1.69%)</title><rect x="62.5703%" y="389" width="1.6867%" height="15" fill="rgb(208,67,23)" fg:x="779" fg:w="21"/><text x="62.8203%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (17 samples, 1.37%)</title><rect x="62.8916%" y="373" width="1.3655%" height="15" fill="rgb(206,207,50)" fg:x="783" fg:w="17"/><text x="63.1416%" y="383.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="64.0964%" y="357" width="0.1606%" height="15" fill="rgb(213,211,42)" fg:x="798" fg:w="2"/><text x="64.3464%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.1767%" y="341" width="0.0803%" height="15" fill="rgb(252,197,50)" fg:x="799" fg:w="1"/><text x="64.4267%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (31 samples, 2.49%)</title><rect x="61.8474%" y="405" width="2.4900%" height="15" fill="rgb(251,211,41)" fg:x="770" fg:w="31"/><text x="62.0974%" y="415.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.2570%" y="389" width="0.0803%" height="15" fill="rgb(229,211,5)" fg:x="800" fg:w="1"/><text x="64.5070%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.2570%" y="373" width="0.0803%" height="15" fill="rgb(239,36,31)" fg:x="800" fg:w="1"/><text x="64.5070%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="64.2570%" y="357" width="0.0803%" height="15" fill="rgb(248,67,31)" fg:x="800" fg:w="1"/><text x="64.5070%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.2570%" y="341" width="0.0803%" height="15" fill="rgb(249,55,44)" fg:x="800" fg:w="1"/><text x="64.5070%" y="351.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.3373%" y="357" width="0.0803%" height="15" fill="rgb(216,82,12)" fg:x="801" fg:w="1"/><text x="64.5873%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.3373%" y="341" width="0.0803%" height="15" fill="rgb(242,174,1)" fg:x="801" fg:w="1"/><text x="64.5873%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.3373%" y="325" width="0.0803%" height="15" fill="rgb(208,120,29)" fg:x="801" fg:w="1"/><text x="64.5873%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.3373%" y="309" width="0.0803%" height="15" fill="rgb(221,105,43)" fg:x="801" fg:w="1"/><text x="64.5873%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="64.4177%" y="357" width="0.0803%" height="15" fill="rgb(234,124,22)" fg:x="802" fg:w="1"/><text x="64.6677%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="64.4177%" y="341" width="0.0803%" height="15" fill="rgb(212,23,30)" fg:x="802" fg:w="1"/><text x="64.6677%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="64.4177%" y="325" width="0.0803%" height="15" fill="rgb(219,122,53)" fg:x="802" fg:w="1"/><text x="64.6677%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="64.4980%" y="357" width="0.1606%" height="15" fill="rgb(248,84,24)" fg:x="803" fg:w="2"/><text x="64.7480%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="64.5783%" y="341" width="0.0803%" height="15" fill="rgb(245,115,18)" fg:x="804" fg:w="1"/><text x="64.8283%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="64.3373%" y="373" width="0.5622%" height="15" fill="rgb(227,176,51)" fg:x="801" fg:w="7"/><text x="64.5873%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="64.6586%" y="357" width="0.2410%" height="15" fill="rgb(229,63,42)" fg:x="805" fg:w="3"/><text x="64.9086%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.8193%" y="341" width="0.0803%" height="15" fill="rgb(247,202,24)" fg:x="807" fg:w="1"/><text x="65.0693%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8193%" y="325" width="0.0803%" height="15" fill="rgb(244,173,20)" fg:x="807" fg:w="1"/><text x="65.0693%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8193%" y="309" width="0.0803%" height="15" fill="rgb(242,81,47)" fg:x="807" fg:w="1"/><text x="65.0693%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="64.8996%" y="373" width="0.0803%" height="15" fill="rgb(231,185,54)" fg:x="808" fg:w="1"/><text x="65.1496%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="64.3373%" y="405" width="0.7229%" height="15" fill="rgb(243,55,32)" fg:x="801" fg:w="9"/><text x="64.5873%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="64.3373%" y="389" width="0.7229%" height="15" fill="rgb(208,167,19)" fg:x="801" fg:w="9"/><text x="64.5873%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.9799%" y="373" width="0.0803%" height="15" fill="rgb(231,72,35)" fg:x="809" fg:w="1"/><text x="65.2299%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="65.0602%" y="373" width="0.1606%" height="15" fill="rgb(250,173,51)" fg:x="810" fg:w="2"/><text x="65.3102%" y="383.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="65.1406%" y="357" width="0.0803%" height="15" fill="rgb(209,5,22)" fg:x="811" fg:w="1"/><text x="65.3906%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.1406%" y="341" width="0.0803%" height="15" fill="rgb(250,174,19)" fg:x="811" fg:w="1"/><text x="65.3906%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.1406%" y="325" width="0.0803%" height="15" fill="rgb(217,3,49)" fg:x="811" fg:w="1"/><text x="65.3906%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (51 samples, 4.10%)</title><rect x="61.2851%" y="421" width="4.0964%" height="15" fill="rgb(218,225,5)" fg:x="763" fg:w="51"/><text x="61.5351%" y="431.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="65.0602%" y="405" width="0.3213%" height="15" fill="rgb(236,89,11)" fg:x="810" fg:w="4"/><text x="65.3102%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="65.0602%" y="389" width="0.3213%" height="15" fill="rgb(206,33,28)" fg:x="810" fg:w="4"/><text x="65.3102%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="65.2209%" y="373" width="0.1606%" height="15" fill="rgb(241,56,42)" fg:x="812" fg:w="2"/><text x="65.4709%" y="383.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="65.2209%" y="357" width="0.1606%" height="15" fill="rgb(222,44,11)" fg:x="812" fg:w="2"/><text x="65.4709%" y="367.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (52 samples, 4.18%)</title><rect x="61.2851%" y="453" width="4.1767%" height="15" fill="rgb(234,111,20)" fg:x="763" fg:w="52"/><text x="61.5351%" y="463.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (52 samples, 4.18%)</title><rect x="61.2851%" y="437" width="4.1767%" height="15" fill="rgb(237,77,6)" fg:x="763" fg:w="52"/><text x="61.5351%" y="447.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="65.3815%" y="421" width="0.0803%" height="15" fill="rgb(235,111,23)" fg:x="814" fg:w="1"/><text x="65.6315%" y="431.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::case_insensitive (1 samples, 0.08%)</title><rect x="65.3815%" y="405" width="0.0803%" height="15" fill="rgb(251,135,29)" fg:x="814" fg:w="1"/><text x="65.6315%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="65.4618%" y="421" width="0.0803%" height="15" fill="rgb(217,57,1)" fg:x="815" fg:w="1"/><text x="65.7118%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.4618%" y="405" width="0.0803%" height="15" fill="rgb(249,119,31)" fg:x="815" fg:w="1"/><text x="65.7118%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="65.4618%" y="453" width="0.1606%" height="15" fill="rgb(233,164,33)" fg:x="815" fg:w="2"/><text x="65.7118%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="65.4618%" y="437" width="0.1606%" height="15" fill="rgb(250,217,43)" fg:x="815" fg:w="2"/><text x="65.7118%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="65.5422%" y="421" width="0.0803%" height="15" fill="rgb(232,154,50)" fg:x="816" fg:w="1"/><text x="65.7922%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.5422%" y="405" width="0.0803%" height="15" fill="rgb(227,190,8)" fg:x="816" fg:w="1"/><text x="65.7922%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.5422%" y="389" width="0.0803%" height="15" fill="rgb(209,217,32)" fg:x="816" fg:w="1"/><text x="65.7922%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="65.6225%" y="453" width="0.0803%" height="15" fill="rgb(243,203,50)" fg:x="817" fg:w="1"/><text x="65.8725%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="65.6225%" y="437" width="0.0803%" height="15" fill="rgb(232,152,27)" fg:x="817" fg:w="1"/><text x="65.8725%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="65.6225%" y="421" width="0.0803%" height="15" fill="rgb(240,34,29)" fg:x="817" fg:w="1"/><text x="65.8725%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="65.6225%" y="405" width="0.0803%" height="15" fill="rgb(215,185,52)" fg:x="817" fg:w="1"/><text x="65.8725%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6225%" y="389" width="0.0803%" height="15" fill="rgb(240,89,49)" fg:x="817" fg:w="1"/><text x="65.8725%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.6225%" y="373" width="0.0803%" height="15" fill="rgb(225,12,52)" fg:x="817" fg:w="1"/><text x="65.8725%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.2651%" y="373" width="0.0803%" height="15" fill="rgb(239,128,45)" fg:x="825" fg:w="1"/><text x="66.5151%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2651%" y="357" width="0.0803%" height="15" fill="rgb(211,78,47)" fg:x="825" fg:w="1"/><text x="66.5151%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.3454%" y="373" width="0.0803%" height="15" fill="rgb(232,31,21)" fg:x="826" fg:w="1"/><text x="66.5954%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.3454%" y="357" width="0.0803%" height="15" fill="rgb(222,168,14)" fg:x="826" fg:w="1"/><text x="66.5954%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="66.4257%" y="373" width="0.2410%" height="15" fill="rgb(209,128,24)" fg:x="827" fg:w="3"/><text x="66.6757%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6667%" y="357" width="0.0803%" height="15" fill="rgb(249,35,13)" fg:x="830" fg:w="1"/><text x="66.9167%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.96%)</title><rect x="65.8635%" y="389" width="0.9639%" height="15" fill="rgb(218,7,2)" fg:x="820" fg:w="12"/><text x="66.1135%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="66.6667%" y="373" width="0.1606%" height="15" fill="rgb(238,107,27)" fg:x="830" fg:w="2"/><text x="66.9167%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7470%" y="357" width="0.0803%" height="15" fill="rgb(217,88,38)" fg:x="831" fg:w="1"/><text x="66.9970%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7470%" y="341" width="0.0803%" height="15" fill="rgb(230,207,0)" fg:x="831" fg:w="1"/><text x="66.9970%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.7470%" y="325" width="0.0803%" height="15" fill="rgb(249,64,54)" fg:x="831" fg:w="1"/><text x="66.9970%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (70 samples, 5.62%)</title><rect x="61.2851%" y="469" width="5.6225%" height="15" fill="rgb(231,7,11)" fg:x="763" fg:w="70"/><text x="61.5351%" y="479.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.20%)</title><rect x="65.7028%" y="453" width="1.2048%" height="15" fill="rgb(205,149,21)" fg:x="818" fg:w="15"/><text x="65.9528%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.20%)</title><rect x="65.7028%" y="437" width="1.2048%" height="15" fill="rgb(215,126,34)" fg:x="818" fg:w="15"/><text x="65.9528%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.20%)</title><rect x="65.7028%" y="421" width="1.2048%" height="15" fill="rgb(241,132,45)" fg:x="818" fg:w="15"/><text x="65.9528%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.04%)</title><rect x="65.8635%" y="405" width="1.0442%" height="15" fill="rgb(252,69,32)" fg:x="820" fg:w="13"/><text x="66.1135%" y="415.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="66.8273%" y="389" width="0.0803%" height="15" fill="rgb(232,204,19)" fg:x="832" fg:w="1"/><text x="67.0773%" y="399.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (641 samples, 51.49%)</title><rect x="15.5020%" y="565" width="51.4859%" height="15" fill="rgb(249,15,47)" fg:x="193" fg:w="641"/><text x="15.7520%" y="575.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Obser..</text></g><g><title>plugins_core::looking::model::qualify_name (619 samples, 49.72%)</title><rect x="17.2691%" y="549" width="49.7189%" height="15" fill="rgb(209,227,23)" fg:x="215" fg:w="619"/><text x="17.5191%" y="559.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (619 samples, 49.72%)</title><rect x="17.2691%" y="533" width="49.7189%" height="15" fill="rgb(248,92,24)" fg:x="215" fg:w="619"/><text x="17.5191%" y="543.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (619 samples, 49.72%)</title><rect x="17.2691%" y="517" width="49.7189%" height="15" fill="rgb(247,59,2)" fg:x="215" fg:w="619"/><text x="17.5191%" y="527.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (616 samples, 49.48%)</title><rect x="17.5100%" y="501" width="49.4779%" height="15" fill="rgb(221,30,5)" fg:x="218" fg:w="616"/><text x="17.7600%" y="511.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (72 samples, 5.78%)</title><rect x="61.2048%" y="485" width="5.7831%" height="15" fill="rgb(208,108,53)" fg:x="762" fg:w="72"/><text x="61.4548%" y="495.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="66.9076%" y="469" width="0.0803%" height="15" fill="rgb(211,183,26)" fg:x="833" fg:w="1"/><text x="67.1576%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="66.9880%" y="533" width="0.0803%" height="15" fill="rgb(232,132,4)" fg:x="834" fg:w="1"/><text x="67.2380%" y="543.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="66.9880%" y="517" width="0.0803%" height="15" fill="rgb(253,128,37)" fg:x="834" fg:w="1"/><text x="67.2380%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9880%" y="501" width="0.0803%" height="15" fill="rgb(221,58,24)" fg:x="834" fg:w="1"/><text x="67.2380%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9880%" y="485" width="0.0803%" height="15" fill="rgb(230,54,45)" fg:x="834" fg:w="1"/><text x="67.2380%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.9880%" y="469" width="0.0803%" height="15" fill="rgb(254,21,18)" fg:x="834" fg:w="1"/><text x="67.2380%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.9880%" y="453" width="0.0803%" height="15" fill="rgb(221,108,0)" fg:x="834" fg:w="1"/><text x="67.2380%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.9880%" y="437" width="0.0803%" height="15" fill="rgb(206,95,1)" fg:x="834" fg:w="1"/><text x="67.2380%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.9880%" y="421" width="0.0803%" height="15" fill="rgb(237,52,5)" fg:x="834" fg:w="1"/><text x="67.2380%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9880%" y="405" width="0.0803%" height="15" fill="rgb(218,150,34)" fg:x="834" fg:w="1"/><text x="67.2380%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.9880%" y="389" width="0.0803%" height="15" fill="rgb(235,194,28)" fg:x="834" fg:w="1"/><text x="67.2380%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.9880%" y="373" width="0.0803%" height="15" fill="rgb(245,92,18)" fg:x="834" fg:w="1"/><text x="67.2380%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.9880%" y="357" width="0.0803%" height="15" fill="rgb(253,203,53)" fg:x="834" fg:w="1"/><text x="67.2380%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.9880%" y="341" width="0.0803%" height="15" fill="rgb(249,185,47)" fg:x="834" fg:w="1"/><text x="67.2380%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.9880%" y="325" width="0.0803%" height="15" fill="rgb(252,194,52)" fg:x="834" fg:w="1"/><text x="67.2380%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9880%" y="309" width="0.0803%" height="15" fill="rgb(210,53,36)" fg:x="834" fg:w="1"/><text x="67.2380%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.0683%" y="341" width="0.0803%" height="15" fill="rgb(237,37,25)" fg:x="835" fg:w="1"/><text x="67.3183%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.0683%" y="325" width="0.0803%" height="15" fill="rgb(242,116,27)" fg:x="835" fg:w="1"/><text x="67.3183%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="67.0683%" y="309" width="0.0803%" height="15" fill="rgb(213,185,26)" fg:x="835" fg:w="1"/><text x="67.3183%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="67.0683%" y="293" width="0.0803%" height="15" fill="rgb(225,204,8)" fg:x="835" fg:w="1"/><text x="67.3183%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.0683%" y="277" width="0.0803%" height="15" fill="rgb(254,111,37)" fg:x="835" fg:w="1"/><text x="67.3183%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="67.0683%" y="261" width="0.0803%" height="15" fill="rgb(242,35,9)" fg:x="835" fg:w="1"/><text x="67.3183%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.0683%" y="245" width="0.0803%" height="15" fill="rgb(232,138,49)" fg:x="835" fg:w="1"/><text x="67.3183%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="66.9880%" y="565" width="0.2410%" height="15" fill="rgb(247,56,4)" fg:x="834" fg:w="3"/><text x="67.2380%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="66.9880%" y="549" width="0.2410%" height="15" fill="rgb(226,179,17)" fg:x="834" fg:w="3"/><text x="67.2380%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="67.0683%" y="533" width="0.1606%" height="15" fill="rgb(216,163,45)" fg:x="835" fg:w="2"/><text x="67.3183%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="67.0683%" y="517" width="0.1606%" height="15" fill="rgb(211,157,3)" fg:x="835" fg:w="2"/><text x="67.3183%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="67.0683%" y="501" width="0.1606%" height="15" fill="rgb(234,44,20)" fg:x="835" fg:w="2"/><text x="67.3183%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="67.0683%" y="485" width="0.1606%" height="15" fill="rgb(254,138,23)" fg:x="835" fg:w="2"/><text x="67.3183%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="67.0683%" y="469" width="0.1606%" height="15" fill="rgb(206,119,39)" fg:x="835" fg:w="2"/><text x="67.3183%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="67.0683%" y="453" width="0.1606%" height="15" fill="rgb(231,105,52)" fg:x="835" fg:w="2"/><text x="67.3183%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="67.0683%" y="437" width="0.1606%" height="15" fill="rgb(250,20,5)" fg:x="835" fg:w="2"/><text x="67.3183%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="67.0683%" y="421" width="0.1606%" height="15" fill="rgb(215,198,30)" fg:x="835" fg:w="2"/><text x="67.3183%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="67.0683%" y="405" width="0.1606%" height="15" fill="rgb(246,142,8)" fg:x="835" fg:w="2"/><text x="67.3183%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="67.0683%" y="389" width="0.1606%" height="15" fill="rgb(243,26,38)" fg:x="835" fg:w="2"/><text x="67.3183%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="67.0683%" y="373" width="0.1606%" height="15" fill="rgb(205,133,28)" fg:x="835" fg:w="2"/><text x="67.3183%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="67.0683%" y="357" width="0.1606%" height="15" fill="rgb(212,34,0)" fg:x="835" fg:w="2"/><text x="67.3183%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.1486%" y="341" width="0.0803%" height="15" fill="rgb(251,226,22)" fg:x="836" fg:w="1"/><text x="67.3986%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="67.1486%" y="325" width="0.0803%" height="15" fill="rgb(252,119,9)" fg:x="836" fg:w="1"/><text x="67.3986%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.1486%" y="309" width="0.0803%" height="15" fill="rgb(213,150,50)" fg:x="836" fg:w="1"/><text x="67.3986%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.1486%" y="293" width="0.0803%" height="15" fill="rgb(212,24,39)" fg:x="836" fg:w="1"/><text x="67.3986%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.1486%" y="277" width="0.0803%" height="15" fill="rgb(213,46,39)" fg:x="836" fg:w="1"/><text x="67.3986%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1486%" y="261" width="0.0803%" height="15" fill="rgb(239,106,12)" fg:x="836" fg:w="1"/><text x="67.3986%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1486%" y="245" width="0.0803%" height="15" fill="rgb(249,229,21)" fg:x="836" fg:w="1"/><text x="67.3986%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="67.1486%" y="229" width="0.0803%" height="15" fill="rgb(212,158,3)" fg:x="836" fg:w="1"/><text x="67.3986%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="67.1486%" y="213" width="0.0803%" height="15" fill="rgb(253,26,48)" fg:x="836" fg:w="1"/><text x="67.3986%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.1486%" y="197" width="0.0803%" height="15" fill="rgb(238,178,20)" fg:x="836" fg:w="1"/><text x="67.3986%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="67.1486%" y="181" width="0.0803%" height="15" fill="rgb(208,86,15)" fg:x="836" fg:w="1"/><text x="67.3986%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.1486%" y="165" width="0.0803%" height="15" fill="rgb(239,42,53)" fg:x="836" fg:w="1"/><text x="67.3986%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.1486%" y="149" width="0.0803%" height="15" fill="rgb(245,226,8)" fg:x="836" fg:w="1"/><text x="67.3986%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.1486%" y="133" width="0.0803%" height="15" fill="rgb(216,176,32)" fg:x="836" fg:w="1"/><text x="67.3986%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="67.1486%" y="117" width="0.0803%" height="15" fill="rgb(231,186,21)" fg:x="836" fg:w="1"/><text x="67.3986%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.1486%" y="101" width="0.0803%" height="15" fill="rgb(205,95,49)" fg:x="836" fg:w="1"/><text x="67.3986%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="67.1486%" y="85" width="0.0803%" height="15" fill="rgb(217,145,8)" fg:x="836" fg:w="1"/><text x="67.3986%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="67.1486%" y="69" width="0.0803%" height="15" fill="rgb(239,144,48)" fg:x="836" fg:w="1"/><text x="67.3986%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="67.1486%" y="53" width="0.0803%" height="15" fill="rgb(214,189,23)" fg:x="836" fg:w="1"/><text x="67.3986%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.1486%" y="37" width="0.0803%" height="15" fill="rgb(229,157,17)" fg:x="836" fg:w="1"/><text x="67.3986%" y="47.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="67.3896%" y="437" width="0.1606%" height="15" fill="rgb(230,5,48)" fg:x="839" fg:w="2"/><text x="67.6396%" y="447.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="67.3896%" y="421" width="0.1606%" height="15" fill="rgb(224,156,48)" fg:x="839" fg:w="2"/><text x="67.6396%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="67.3896%" y="405" width="0.1606%" height="15" fill="rgb(223,14,29)" fg:x="839" fg:w="2"/><text x="67.6396%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="67.3896%" y="389" width="0.1606%" height="15" fill="rgb(229,96,36)" fg:x="839" fg:w="2"/><text x="67.6396%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="67.3896%" y="373" width="0.1606%" height="15" fill="rgb(231,102,53)" fg:x="839" fg:w="2"/><text x="67.6396%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.3896%" y="357" width="0.1606%" height="15" fill="rgb(210,77,38)" fg:x="839" fg:w="2"/><text x="67.6396%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.3896%" y="341" width="0.1606%" height="15" fill="rgb(235,131,6)" fg:x="839" fg:w="2"/><text x="67.6396%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.3896%" y="325" width="0.1606%" height="15" fill="rgb(252,55,38)" fg:x="839" fg:w="2"/><text x="67.6396%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.3896%" y="309" width="0.1606%" height="15" fill="rgb(246,38,14)" fg:x="839" fg:w="2"/><text x="67.6396%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4699%" y="293" width="0.0803%" height="15" fill="rgb(242,27,5)" fg:x="840" fg:w="1"/><text x="67.7199%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.5502%" y="373" width="0.0803%" height="15" fill="rgb(228,65,35)" fg:x="841" fg:w="1"/><text x="67.8002%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="67.5502%" y="357" width="0.0803%" height="15" fill="rgb(245,93,11)" fg:x="841" fg:w="1"/><text x="67.8002%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.6305%" y="373" width="0.0803%" height="15" fill="rgb(213,1,31)" fg:x="842" fg:w="1"/><text x="67.8805%" y="383.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="67.5502%" y="421" width="0.2410%" height="15" fill="rgb(237,205,14)" fg:x="841" fg:w="3"/><text x="67.8002%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.5502%" y="405" width="0.2410%" height="15" fill="rgb(232,118,45)" fg:x="841" fg:w="3"/><text x="67.8002%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.5502%" y="389" width="0.2410%" height="15" fill="rgb(218,5,6)" fg:x="841" fg:w="3"/><text x="67.8002%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.7108%" y="373" width="0.0803%" height="15" fill="rgb(251,87,51)" fg:x="843" fg:w="1"/><text x="67.9608%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7108%" y="357" width="0.0803%" height="15" fill="rgb(207,225,20)" fg:x="843" fg:w="1"/><text x="67.9608%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7108%" y="341" width="0.0803%" height="15" fill="rgb(222,78,54)" fg:x="843" fg:w="1"/><text x="67.9608%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7108%" y="325" width="0.0803%" height="15" fill="rgb(232,85,16)" fg:x="843" fg:w="1"/><text x="67.9608%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8715%" y="341" width="0.0803%" height="15" fill="rgb(244,25,33)" fg:x="845" fg:w="1"/><text x="68.1215%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8715%" y="325" width="0.0803%" height="15" fill="rgb(233,24,36)" fg:x="845" fg:w="1"/><text x="68.1215%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8715%" y="309" width="0.0803%" height="15" fill="rgb(253,49,54)" fg:x="845" fg:w="1"/><text x="68.1215%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.48%)</title><rect x="67.5502%" y="437" width="0.4819%" height="15" fill="rgb(245,12,22)" fg:x="841" fg:w="6"/><text x="67.8002%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="67.7912%" y="421" width="0.2410%" height="15" fill="rgb(253,141,28)" fg:x="844" fg:w="3"/><text x="68.0412%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="67.7912%" y="405" width="0.2410%" height="15" fill="rgb(225,207,27)" fg:x="844" fg:w="3"/><text x="68.0412%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="67.8715%" y="389" width="0.1606%" height="15" fill="rgb(220,84,2)" fg:x="845" fg:w="2"/><text x="68.1215%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.8715%" y="373" width="0.1606%" height="15" fill="rgb(224,37,37)" fg:x="845" fg:w="2"/><text x="68.1215%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.8715%" y="357" width="0.1606%" height="15" fill="rgb(220,143,18)" fg:x="845" fg:w="2"/><text x="68.1215%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9518%" y="341" width="0.0803%" height="15" fill="rgb(210,88,33)" fg:x="846" fg:w="1"/><text x="68.2018%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.9518%" y="325" width="0.0803%" height="15" fill="rgb(219,87,51)" fg:x="846" fg:w="1"/><text x="68.2018%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.1124%" y="325" width="0.0803%" height="15" fill="rgb(211,7,35)" fg:x="848" fg:w="1"/><text x="68.3624%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (13 samples, 1.04%)</title><rect x="67.2289%" y="533" width="1.0442%" height="15" fill="rgb(232,77,2)" fg:x="837" fg:w="13"/><text x="67.4789%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.04%)</title><rect x="67.2289%" y="517" width="1.0442%" height="15" fill="rgb(249,94,25)" fg:x="837" fg:w="13"/><text x="67.4789%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="67.2289%" y="501" width="1.0442%" height="15" fill="rgb(215,112,2)" fg:x="837" fg:w="13"/><text x="67.4789%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.88%)</title><rect x="67.3896%" y="485" width="0.8835%" height="15" fill="rgb(226,115,48)" fg:x="839" fg:w="11"/><text x="67.6396%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.88%)</title><rect x="67.3896%" y="469" width="0.8835%" height="15" fill="rgb(249,196,10)" fg:x="839" fg:w="11"/><text x="67.6396%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="67.3896%" y="453" width="0.8835%" height="15" fill="rgb(237,109,14)" fg:x="839" fg:w="11"/><text x="67.6396%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="68.0321%" y="437" width="0.2410%" height="15" fill="rgb(217,103,53)" fg:x="847" fg:w="3"/><text x="68.2821%" y="447.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="68.1124%" y="421" width="0.1606%" height="15" fill="rgb(244,137,9)" fg:x="848" fg:w="2"/><text x="68.3624%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="68.1124%" y="405" width="0.1606%" height="15" fill="rgb(227,201,3)" fg:x="848" fg:w="2"/><text x="68.3624%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.1124%" y="389" width="0.1606%" height="15" fill="rgb(243,94,6)" fg:x="848" fg:w="2"/><text x="68.3624%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.1124%" y="373" width="0.1606%" height="15" fill="rgb(235,118,5)" fg:x="848" fg:w="2"/><text x="68.3624%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.1124%" y="357" width="0.1606%" height="15" fill="rgb(247,10,30)" fg:x="848" fg:w="2"/><text x="68.3624%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.1124%" y="341" width="0.1606%" height="15" fill="rgb(205,26,28)" fg:x="848" fg:w="2"/><text x="68.3624%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.1928%" y="325" width="0.0803%" height="15" fill="rgb(206,99,35)" fg:x="849" fg:w="1"/><text x="68.4428%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1928%" y="309" width="0.0803%" height="15" fill="rgb(238,130,40)" fg:x="849" fg:w="1"/><text x="68.4428%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.1928%" y="293" width="0.0803%" height="15" fill="rgb(224,126,31)" fg:x="849" fg:w="1"/><text x="68.4428%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1928%" y="277" width="0.0803%" height="15" fill="rgb(254,105,17)" fg:x="849" fg:w="1"/><text x="68.4428%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3534%" y="501" width="0.0803%" height="15" fill="rgb(216,87,36)" fg:x="851" fg:w="1"/><text x="68.6034%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.4337%" y="501" width="0.0803%" height="15" fill="rgb(240,21,12)" fg:x="852" fg:w="1"/><text x="68.6837%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4337%" y="485" width="0.0803%" height="15" fill="rgb(245,192,34)" fg:x="852" fg:w="1"/><text x="68.6837%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.4337%" y="469" width="0.0803%" height="15" fill="rgb(226,100,49)" fg:x="852" fg:w="1"/><text x="68.6837%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (681 samples, 54.70%)</title><rect x="13.9759%" y="789" width="54.6988%" height="15" fill="rgb(245,188,27)" fg:x="174" fg:w="681"/><text x="14.2259%" y="799.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (681 samples, 54.70%)</title><rect x="13.9759%" y="773" width="54.6988%" height="15" fill="rgb(212,170,8)" fg:x="174" fg:w="681"/><text x="14.2259%" y="783.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (681 samples, 54.70%)</title><rect x="13.9759%" y="757" width="54.6988%" height="15" fill="rgb(217,113,29)" fg:x="174" fg:w="681"/><text x="14.2259%" y="767.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (680 samples, 54.62%)</title><rect x="14.0562%" y="741" width="54.6185%" height="15" fill="rgb(237,30,3)" fg:x="175" fg:w="680"/><text x="14.3062%" y="751.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (667 samples, 53.57%)</title><rect x="15.1004%" y="725" width="53.5743%" height="15" fill="rgb(227,19,28)" fg:x="188" fg:w="667"/><text x="15.3504%" y="735.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (667 samples, 53.57%)</title><rect x="15.1004%" y="709" width="53.5743%" height="15" fill="rgb(239,172,45)" fg:x="188" fg:w="667"/><text x="15.3504%" y="719.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (667 samples, 53.57%)</title><rect x="15.1004%" y="693" width="53.5743%" height="15" fill="rgb(254,55,39)" fg:x="188" fg:w="667"/><text x="15.3504%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (667 samples, 53.57%)</title><rect x="15.1004%" y="677" width="53.5743%" height="15" fill="rgb(249,208,12)" fg:x="188" fg:w="667"/><text x="15.3504%" y="687.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (667 samples, 53.57%)</title><rect x="15.1004%" y="661" width="53.5743%" height="15" fill="rgb(240,52,13)" fg:x="188" fg:w="667"/><text x="15.3504%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (667 samples, 53.57%)</title><rect x="15.1004%" y="645" width="53.5743%" height="15" fill="rgb(252,149,13)" fg:x="188" fg:w="667"/><text x="15.3504%" y="655.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (667 samples, 53.57%)</title><rect x="15.1004%" y="629" width="53.5743%" height="15" fill="rgb(232,81,48)" fg:x="188" fg:w="667"/><text x="15.3504%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (667 samples, 53.57%)</title><rect x="15.1004%" y="613" width="53.5743%" height="15" fill="rgb(222,144,2)" fg:x="188" fg:w="667"/><text x="15.3504%" y="623.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (666 samples, 53.49%)</title><rect x="15.1807%" y="597" width="53.4940%" height="15" fill="rgb(216,81,32)" fg:x="189" fg:w="666"/><text x="15.4307%" y="607.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (664 samples, 53.33%)</title><rect x="15.3414%" y="581" width="53.3333%" height="15" fill="rgb(244,78,51)" fg:x="191" fg:w="664"/><text x="15.5914%" y="591.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (18 samples, 1.45%)</title><rect x="67.2289%" y="565" width="1.4458%" height="15" fill="rgb(217,66,21)" fg:x="837" fg:w="18"/><text x="67.4789%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (18 samples, 1.45%)</title><rect x="67.2289%" y="549" width="1.4458%" height="15" fill="rgb(247,101,42)" fg:x="837" fg:w="18"/><text x="67.4789%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="68.2731%" y="533" width="0.4016%" height="15" fill="rgb(227,81,39)" fg:x="850" fg:w="5"/><text x="68.5231%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="68.2731%" y="517" width="0.4016%" height="15" fill="rgb(220,223,44)" fg:x="850" fg:w="5"/><text x="68.5231%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="68.5141%" y="501" width="0.1606%" height="15" fill="rgb(205,218,2)" fg:x="853" fg:w="2"/><text x="68.7641%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="68.5141%" y="485" width="0.1606%" height="15" fill="rgb(212,207,28)" fg:x="853" fg:w="2"/><text x="68.7641%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="68.5141%" y="469" width="0.1606%" height="15" fill="rgb(224,12,41)" fg:x="853" fg:w="2"/><text x="68.7641%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.5141%" y="453" width="0.1606%" height="15" fill="rgb(216,118,12)" fg:x="853" fg:w="2"/><text x="68.7641%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.5141%" y="437" width="0.1606%" height="15" fill="rgb(252,97,46)" fg:x="853" fg:w="2"/><text x="68.7641%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="68.7550%" y="757" width="0.0803%" height="15" fill="rgb(244,206,19)" fg:x="856" fg:w="1"/><text x="69.0050%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="68.7550%" y="741" width="0.0803%" height="15" fill="rgb(231,84,31)" fg:x="856" fg:w="1"/><text x="69.0050%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.7550%" y="725" width="0.0803%" height="15" fill="rgb(244,133,0)" fg:x="856" fg:w="1"/><text x="69.0050%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.7550%" y="709" width="0.0803%" height="15" fill="rgb(223,15,50)" fg:x="856" fg:w="1"/><text x="69.0050%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.7550%" y="693" width="0.0803%" height="15" fill="rgb(250,118,49)" fg:x="856" fg:w="1"/><text x="69.0050%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7550%" y="677" width="0.0803%" height="15" fill="rgb(248,25,38)" fg:x="856" fg:w="1"/><text x="69.0050%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7550%" y="661" width="0.0803%" height="15" fill="rgb(215,70,14)" fg:x="856" fg:w="1"/><text x="69.0050%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7550%" y="645" width="0.0803%" height="15" fill="rgb(215,28,15)" fg:x="856" fg:w="1"/><text x="69.0050%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7550%" y="629" width="0.0803%" height="15" fill="rgb(243,6,28)" fg:x="856" fg:w="1"/><text x="69.0050%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="68.8353%" y="757" width="0.0803%" height="15" fill="rgb(222,130,1)" fg:x="857" fg:w="1"/><text x="69.0853%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8353%" y="741" width="0.0803%" height="15" fill="rgb(236,166,44)" fg:x="857" fg:w="1"/><text x="69.0853%" y="751.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8353%" y="725" width="0.0803%" height="15" fill="rgb(221,108,14)" fg:x="857" fg:w="1"/><text x="69.0853%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.8353%" y="709" width="0.0803%" height="15" fill="rgb(252,3,45)" fg:x="857" fg:w="1"/><text x="69.0853%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8353%" y="693" width="0.0803%" height="15" fill="rgb(237,68,30)" fg:x="857" fg:w="1"/><text x="69.0853%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8353%" y="677" width="0.0803%" height="15" fill="rgb(211,79,22)" fg:x="857" fg:w="1"/><text x="69.0853%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="68.6747%" y="789" width="0.3213%" height="15" fill="rgb(252,185,21)" fg:x="855" fg:w="4"/><text x="68.9247%" y="799.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="68.6747%" y="773" width="0.3213%" height="15" fill="rgb(225,189,26)" fg:x="855" fg:w="4"/><text x="68.9247%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.9157%" y="757" width="0.0803%" height="15" fill="rgb(241,30,40)" fg:x="858" fg:w="1"/><text x="69.1657%" y="767.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.9157%" y="741" width="0.0803%" height="15" fill="rgb(235,215,44)" fg:x="858" fg:w="1"/><text x="69.1657%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.9157%" y="725" width="0.0803%" height="15" fill="rgb(205,8,29)" fg:x="858" fg:w="1"/><text x="69.1657%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.9157%" y="709" width="0.0803%" height="15" fill="rgb(241,137,42)" fg:x="858" fg:w="1"/><text x="69.1657%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.9157%" y="693" width="0.0803%" height="15" fill="rgb(237,155,2)" fg:x="858" fg:w="1"/><text x="69.1657%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.9157%" y="677" width="0.0803%" height="15" fill="rgb(245,29,42)" fg:x="858" fg:w="1"/><text x="69.1657%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9157%" y="661" width="0.0803%" height="15" fill="rgb(234,101,35)" fg:x="858" fg:w="1"/><text x="69.1657%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9960%" y="565" width="0.0803%" height="15" fill="rgb(228,64,37)" fg:x="859" fg:w="1"/><text x="69.2460%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.9960%" y="549" width="0.0803%" height="15" fill="rgb(217,214,36)" fg:x="859" fg:w="1"/><text x="69.2460%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9960%" y="533" width="0.0803%" height="15" fill="rgb(243,70,3)" fg:x="859" fg:w="1"/><text x="69.2460%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.9960%" y="517" width="0.0803%" height="15" fill="rgb(253,158,52)" fg:x="859" fg:w="1"/><text x="69.2460%" y="527.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="68.9960%" y="725" width="0.1606%" height="15" fill="rgb(234,111,54)" fg:x="859" fg:w="2"/><text x="69.2460%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.9960%" y="709" width="0.1606%" height="15" fill="rgb(217,70,32)" fg:x="859" fg:w="2"/><text x="69.2460%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9960%" y="693" width="0.1606%" height="15" fill="rgb(234,18,33)" fg:x="859" fg:w="2"/><text x="69.2460%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.9960%" y="677" width="0.1606%" height="15" fill="rgb(234,12,49)" fg:x="859" fg:w="2"/><text x="69.2460%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9960%" y="661" width="0.1606%" height="15" fill="rgb(236,10,21)" fg:x="859" fg:w="2"/><text x="69.2460%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.9960%" y="645" width="0.1606%" height="15" fill="rgb(248,182,45)" fg:x="859" fg:w="2"/><text x="69.2460%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9960%" y="629" width="0.1606%" height="15" fill="rgb(217,95,36)" fg:x="859" fg:w="2"/><text x="69.2460%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.9960%" y="613" width="0.1606%" height="15" fill="rgb(212,110,31)" fg:x="859" fg:w="2"/><text x="69.2460%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9960%" y="597" width="0.1606%" height="15" fill="rgb(206,32,53)" fg:x="859" fg:w="2"/><text x="69.2460%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.9960%" y="581" width="0.1606%" height="15" fill="rgb(246,141,37)" fg:x="859" fg:w="2"/><text x="69.2460%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0763%" y="565" width="0.0803%" height="15" fill="rgb(219,16,7)" fg:x="860" fg:w="1"/><text x="69.3263%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="68.9960%" y="741" width="0.2410%" height="15" fill="rgb(230,205,45)" fg:x="859" fg:w="3"/><text x="69.2460%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1566%" y="725" width="0.0803%" height="15" fill="rgb(231,43,49)" fg:x="861" fg:w="1"/><text x="69.4066%" y="735.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1566%" y="709" width="0.0803%" height="15" fill="rgb(212,106,34)" fg:x="861" fg:w="1"/><text x="69.4066%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.1566%" y="693" width="0.0803%" height="15" fill="rgb(206,83,17)" fg:x="861" fg:w="1"/><text x="69.4066%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1566%" y="677" width="0.0803%" height="15" fill="rgb(244,154,49)" fg:x="861" fg:w="1"/><text x="69.4066%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.1566%" y="661" width="0.0803%" height="15" fill="rgb(244,149,49)" fg:x="861" fg:w="1"/><text x="69.4066%" y="671.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.1566%" y="645" width="0.0803%" height="15" fill="rgb(227,134,18)" fg:x="861" fg:w="1"/><text x="69.4066%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1566%" y="629" width="0.0803%" height="15" fill="rgb(237,116,36)" fg:x="861" fg:w="1"/><text x="69.4066%" y="639.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.1566%" y="613" width="0.0803%" height="15" fill="rgb(205,129,40)" fg:x="861" fg:w="1"/><text x="69.4066%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.1566%" y="597" width="0.0803%" height="15" fill="rgb(236,178,4)" fg:x="861" fg:w="1"/><text x="69.4066%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2369%" y="693" width="0.0803%" height="15" fill="rgb(251,76,53)" fg:x="862" fg:w="1"/><text x="69.4869%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (5 samples, 0.40%)</title><rect x="68.9960%" y="789" width="0.4016%" height="15" fill="rgb(242,92,40)" fg:x="859" fg:w="5"/><text x="69.2460%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="68.9960%" y="773" width="0.4016%" height="15" fill="rgb(209,45,30)" fg:x="859" fg:w="5"/><text x="69.2460%" y="783.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="68.9960%" y="757" width="0.4016%" height="15" fill="rgb(218,157,36)" fg:x="859" fg:w="5"/><text x="69.2460%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="69.2369%" y="741" width="0.1606%" height="15" fill="rgb(222,186,16)" fg:x="862" fg:w="2"/><text x="69.4869%" y="751.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="69.2369%" y="725" width="0.1606%" height="15" fill="rgb(254,72,35)" fg:x="862" fg:w="2"/><text x="69.4869%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="69.2369%" y="709" width="0.1606%" height="15" fill="rgb(224,25,35)" fg:x="862" fg:w="2"/><text x="69.4869%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3173%" y="693" width="0.0803%" height="15" fill="rgb(206,135,52)" fg:x="863" fg:w="1"/><text x="69.5673%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3173%" y="677" width="0.0803%" height="15" fill="rgb(229,174,47)" fg:x="863" fg:w="1"/><text x="69.5673%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3173%" y="661" width="0.0803%" height="15" fill="rgb(242,184,21)" fg:x="863" fg:w="1"/><text x="69.5673%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3173%" y="645" width="0.0803%" height="15" fill="rgb(213,22,45)" fg:x="863" fg:w="1"/><text x="69.5673%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3173%" y="629" width="0.0803%" height="15" fill="rgb(237,81,54)" fg:x="863" fg:w="1"/><text x="69.5673%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3173%" y="613" width="0.0803%" height="15" fill="rgb(248,177,18)" fg:x="863" fg:w="1"/><text x="69.5673%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3173%" y="597" width="0.0803%" height="15" fill="rgb(254,31,16)" fg:x="863" fg:w="1"/><text x="69.5673%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3173%" y="581" width="0.0803%" height="15" fill="rgb(235,20,31)" fg:x="863" fg:w="1"/><text x="69.5673%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.3173%" y="565" width="0.0803%" height="15" fill="rgb(240,56,43)" fg:x="863" fg:w="1"/><text x="69.5673%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3976%" y="789" width="0.0803%" height="15" fill="rgb(237,197,51)" fg:x="864" fg:w="1"/><text x="69.6476%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (867 samples, 69.64%)</title><rect x="0.0000%" y="853" width="69.6386%" height="15" fill="rgb(241,162,44)" fg:x="0" fg:w="867"/><text x="0.2500%" y="863.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (867 samples, 69.64%)</title><rect x="0.0000%" y="837" width="69.6386%" height="15" fill="rgb(224,23,20)" fg:x="0" fg:w="867"/><text x="0.2500%" y="847.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (867 samples, 69.64%)</title><rect x="0.0000%" y="821" width="69.6386%" height="15" fill="rgb(250,109,34)" fg:x="0" fg:w="867"/><text x="0.2500%" y="831.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (693 samples, 55.66%)</title><rect x="13.9759%" y="805" width="55.6627%" height="15" fill="rgb(214,175,50)" fg:x="174" fg:w="693"/><text x="14.2259%" y="815.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="69.4779%" y="789" width="0.1606%" height="15" fill="rgb(213,182,5)" fg:x="865" fg:w="2"/><text x="69.7279%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="69.4779%" y="773" width="0.1606%" height="15" fill="rgb(209,199,19)" fg:x="865" fg:w="2"/><text x="69.7279%" y="783.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="69.4779%" y="757" width="0.1606%" height="15" fill="rgb(236,224,42)" fg:x="865" fg:w="2"/><text x="69.7279%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.4779%" y="741" width="0.1606%" height="15" fill="rgb(246,226,29)" fg:x="865" fg:w="2"/><text x="69.7279%" y="751.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.4779%" y="725" width="0.1606%" height="15" fill="rgb(227,223,11)" fg:x="865" fg:w="2"/><text x="69.7279%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.4779%" y="709" width="0.1606%" height="15" fill="rgb(219,7,51)" fg:x="865" fg:w="2"/><text x="69.7279%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.4779%" y="693" width="0.1606%" height="15" fill="rgb(245,167,10)" fg:x="865" fg:w="2"/><text x="69.7279%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.5582%" y="677" width="0.0803%" height="15" fill="rgb(237,224,16)" fg:x="866" fg:w="1"/><text x="69.8082%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5582%" y="661" width="0.0803%" height="15" fill="rgb(226,132,13)" fg:x="866" fg:w="1"/><text x="69.8082%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.6386%" y="805" width="0.0803%" height="15" fill="rgb(214,140,3)" fg:x="867" fg:w="1"/><text x="69.8886%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (1 samples, 0.08%)</title><rect x="69.6386%" y="789" width="0.0803%" height="15" fill="rgb(221,177,4)" fg:x="867" fg:w="1"/><text x="69.8886%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.6386%" y="773" width="0.0803%" height="15" fill="rgb(238,139,3)" fg:x="867" fg:w="1"/><text x="69.8886%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="69.6386%" y="757" width="0.0803%" height="15" fill="rgb(216,17,39)" fg:x="867" fg:w="1"/><text x="69.8886%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="69.6386%" y="741" width="0.0803%" height="15" fill="rgb(238,120,9)" fg:x="867" fg:w="1"/><text x="69.8886%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6386%" y="725" width="0.0803%" height="15" fill="rgb(244,92,53)" fg:x="867" fg:w="1"/><text x="69.8886%" y="735.50"></text></g><g><title>&lt;alloc::ffi::c_str::CString as core::convert::From&lt;&amp;core::ffi::c_str::CStr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="69.7189%" y="693" width="0.0803%" height="15" fill="rgb(224,148,33)" fg:x="868" fg:w="1"/><text x="69.9689%" y="703.50"></text></g><g><title>alloc::ffi::c_str::&lt;impl alloc::borrow::ToOwned for core::ffi::c_str::CStr&gt;::to_owned (1 samples, 0.08%)</title><rect x="69.7189%" y="677" width="0.0803%" height="15" fill="rgb(243,6,36)" fg:x="868" fg:w="1"/><text x="69.9689%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.08%)</title><rect x="69.7189%" y="661" width="0.0803%" height="15" fill="rgb(230,102,11)" fg:x="868" fg:w="1"/><text x="69.9689%" y="671.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (1 samples, 0.08%)</title><rect x="69.7189%" y="645" width="0.0803%" height="15" fill="rgb(234,148,36)" fg:x="868" fg:w="1"/><text x="69.9689%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::BoxFromSlice&lt;T&gt;&gt;::from_slice (1 samples, 0.08%)</title><rect x="69.7189%" y="629" width="0.0803%" height="15" fill="rgb(251,153,25)" fg:x="868" fg:w="1"/><text x="69.9689%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.7189%" y="613" width="0.0803%" height="15" fill="rgb(215,129,8)" fg:x="868" fg:w="1"/><text x="69.9689%" y="623.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="69.7992%" y="693" width="0.0803%" height="15" fill="rgb(224,128,35)" fg:x="869" fg:w="1"/><text x="70.0492%" y="703.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="69.7992%" y="677" width="0.0803%" height="15" fill="rgb(237,56,52)" fg:x="869" fg:w="1"/><text x="70.0492%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.48%)</title><rect x="69.7189%" y="805" width="0.4819%" height="15" fill="rgb(234,213,19)" fg:x="868" fg:w="6"/><text x="69.9689%" y="815.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (6 samples, 0.48%)</title><rect x="69.7189%" y="789" width="0.4819%" height="15" fill="rgb(252,82,23)" fg:x="868" fg:w="6"/><text x="69.9689%" y="799.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.48%)</title><rect x="69.7189%" y="773" width="0.4819%" height="15" fill="rgb(254,201,21)" fg:x="868" fg:w="6"/><text x="69.9689%" y="783.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.48%)</title><rect x="69.7189%" y="757" width="0.4819%" height="15" fill="rgb(250,186,11)" fg:x="868" fg:w="6"/><text x="69.9689%" y="767.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="69.7189%" y="741" width="0.4819%" height="15" fill="rgb(211,174,5)" fg:x="868" fg:w="6"/><text x="69.9689%" y="751.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="69.7189%" y="725" width="0.4819%" height="15" fill="rgb(214,121,10)" fg:x="868" fg:w="6"/><text x="69.9689%" y="735.50"></text></g><g><title>libloading::safe::Library::new (6 samples, 0.48%)</title><rect x="69.7189%" y="709" width="0.4819%" height="15" fill="rgb(241,66,2)" fg:x="868" fg:w="6"/><text x="69.9689%" y="719.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="69.8795%" y="693" width="0.3213%" height="15" fill="rgb(220,167,19)" fg:x="870" fg:w="4"/><text x="70.1295%" y="703.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="69.9598%" y="677" width="0.2410%" height="15" fill="rgb(231,54,50)" fg:x="871" fg:w="3"/><text x="70.2098%" y="687.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="69.9598%" y="661" width="0.2410%" height="15" fill="rgb(239,217,53)" fg:x="871" fg:w="3"/><text x="70.2098%" y="671.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="69.9598%" y="645" width="0.2410%" height="15" fill="rgb(248,8,0)" fg:x="871" fg:w="3"/><text x="70.2098%" y="655.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="69.9598%" y="629" width="0.2410%" height="15" fill="rgb(229,118,37)" fg:x="871" fg:w="3"/><text x="70.2098%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="70.2008%" y="741" width="0.0803%" height="15" fill="rgb(253,223,43)" fg:x="874" fg:w="1"/><text x="70.4508%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.2008%" y="725" width="0.0803%" height="15" fill="rgb(211,77,36)" fg:x="874" fg:w="1"/><text x="70.4508%" y="735.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="70.2008%" y="709" width="0.0803%" height="15" fill="rgb(219,3,53)" fg:x="874" fg:w="1"/><text x="70.4508%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="70.2008%" y="693" width="0.0803%" height="15" fill="rgb(244,45,42)" fg:x="874" fg:w="1"/><text x="70.4508%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2008%" y="677" width="0.0803%" height="15" fill="rgb(225,95,27)" fg:x="874" fg:w="1"/><text x="70.4508%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.2811%" y="693" width="0.0803%" height="15" fill="rgb(207,74,8)" fg:x="875" fg:w="1"/><text x="70.5311%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.2811%" y="677" width="0.0803%" height="15" fill="rgb(243,63,36)" fg:x="875" fg:w="1"/><text x="70.5311%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.2811%" y="661" width="0.0803%" height="15" fill="rgb(211,180,12)" fg:x="875" fg:w="1"/><text x="70.5311%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.2811%" y="645" width="0.0803%" height="15" fill="rgb(254,166,49)" fg:x="875" fg:w="1"/><text x="70.5311%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.3614%" y="677" width="0.0803%" height="15" fill="rgb(205,19,0)" fg:x="876" fg:w="1"/><text x="70.6114%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.4418%" y="629" width="0.0803%" height="15" fill="rgb(224,172,32)" fg:x="877" fg:w="1"/><text x="70.6918%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.4418%" y="613" width="0.0803%" height="15" fill="rgb(254,136,30)" fg:x="877" fg:w="1"/><text x="70.6918%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="70.4418%" y="661" width="0.1606%" height="15" fill="rgb(246,19,35)" fg:x="877" fg:w="2"/><text x="70.6918%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.4418%" y="645" width="0.1606%" height="15" fill="rgb(219,24,36)" fg:x="877" fg:w="2"/><text x="70.6918%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.5221%" y="629" width="0.0803%" height="15" fill="rgb(251,55,1)" fg:x="878" fg:w="1"/><text x="70.7721%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="70.6024%" y="661" width="0.1606%" height="15" fill="rgb(218,117,39)" fg:x="879" fg:w="2"/><text x="70.8524%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.6827%" y="645" width="0.0803%" height="15" fill="rgb(248,169,11)" fg:x="880" fg:w="1"/><text x="70.9327%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="70.2811%" y="709" width="0.5622%" height="15" fill="rgb(244,40,44)" fg:x="875" fg:w="7"/><text x="70.5311%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="70.3614%" y="693" width="0.4819%" height="15" fill="rgb(234,62,37)" fg:x="876" fg:w="6"/><text x="70.6114%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="70.4418%" y="677" width="0.4016%" height="15" fill="rgb(207,117,42)" fg:x="877" fg:w="5"/><text x="70.6918%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7631%" y="661" width="0.0803%" height="15" fill="rgb(213,43,2)" fg:x="881" fg:w="1"/><text x="71.0131%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7631%" y="645" width="0.0803%" height="15" fill="rgb(244,202,51)" fg:x="881" fg:w="1"/><text x="71.0131%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7631%" y="629" width="0.0803%" height="15" fill="rgb(253,174,46)" fg:x="881" fg:w="1"/><text x="71.0131%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.7631%" y="613" width="0.0803%" height="15" fill="rgb(251,23,1)" fg:x="881" fg:w="1"/><text x="71.0131%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.7631%" y="597" width="0.0803%" height="15" fill="rgb(253,26,1)" fg:x="881" fg:w="1"/><text x="71.0131%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8434%" y="677" width="0.0803%" height="15" fill="rgb(216,89,31)" fg:x="882" fg:w="1"/><text x="71.0934%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.9237%" y="645" width="0.1606%" height="15" fill="rgb(209,109,5)" fg:x="883" fg:w="2"/><text x="71.1737%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="70.8434%" y="709" width="0.4016%" height="15" fill="rgb(229,63,13)" fg:x="882" fg:w="5"/><text x="71.0934%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="70.8434%" y="693" width="0.4016%" height="15" fill="rgb(238,137,54)" fg:x="882" fg:w="5"/><text x="71.0934%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.9237%" y="677" width="0.3213%" height="15" fill="rgb(228,1,9)" fg:x="883" fg:w="4"/><text x="71.1737%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.9237%" y="661" width="0.3213%" height="15" fill="rgb(249,120,48)" fg:x="883" fg:w="4"/><text x="71.1737%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.0843%" y="645" width="0.1606%" height="15" fill="rgb(209,72,36)" fg:x="885" fg:w="2"/><text x="71.3343%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.1647%" y="629" width="0.0803%" height="15" fill="rgb(247,98,49)" fg:x="886" fg:w="1"/><text x="71.4147%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.1647%" y="613" width="0.0803%" height="15" fill="rgb(233,75,36)" fg:x="886" fg:w="1"/><text x="71.4147%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1647%" y="597" width="0.0803%" height="15" fill="rgb(225,14,24)" fg:x="886" fg:w="1"/><text x="71.4147%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2450%" y="661" width="0.0803%" height="15" fill="rgb(237,193,20)" fg:x="887" fg:w="1"/><text x="71.4950%" y="671.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="70.2008%" y="789" width="1.2048%" height="15" fill="rgb(239,122,19)" fg:x="874" fg:w="15"/><text x="70.4508%" y="799.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.20%)</title><rect x="70.2008%" y="773" width="1.2048%" height="15" fill="rgb(231,220,10)" fg:x="874" fg:w="15"/><text x="70.4508%" y="783.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.20%)</title><rect x="70.2008%" y="757" width="1.2048%" height="15" fill="rgb(220,66,15)" fg:x="874" fg:w="15"/><text x="70.4508%" y="767.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (14 samples, 1.12%)</title><rect x="70.2811%" y="741" width="1.1245%" height="15" fill="rgb(215,171,52)" fg:x="875" fg:w="14"/><text x="70.5311%" y="751.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="70.2811%" y="725" width="1.1245%" height="15" fill="rgb(241,169,50)" fg:x="875" fg:w="14"/><text x="70.5311%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="71.2450%" y="709" width="0.1606%" height="15" fill="rgb(236,189,0)" fg:x="887" fg:w="2"/><text x="71.4950%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="71.2450%" y="693" width="0.1606%" height="15" fill="rgb(217,147,20)" fg:x="887" fg:w="2"/><text x="71.4950%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.2450%" y="677" width="0.1606%" height="15" fill="rgb(206,188,39)" fg:x="887" fg:w="2"/><text x="71.4950%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.3253%" y="661" width="0.0803%" height="15" fill="rgb(227,118,25)" fg:x="888" fg:w="1"/><text x="71.5753%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="71.3253%" y="645" width="0.0803%" height="15" fill="rgb(248,171,40)" fg:x="888" fg:w="1"/><text x="71.5753%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.3253%" y="629" width="0.0803%" height="15" fill="rgb(251,90,54)" fg:x="888" fg:w="1"/><text x="71.5753%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3253%" y="613" width="0.0803%" height="15" fill="rgb(234,11,46)" fg:x="888" fg:w="1"/><text x="71.5753%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.3253%" y="597" width="0.0803%" height="15" fill="rgb(229,134,13)" fg:x="888" fg:w="1"/><text x="71.5753%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3253%" y="581" width="0.0803%" height="15" fill="rgb(223,129,3)" fg:x="888" fg:w="1"/><text x="71.5753%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.3253%" y="565" width="0.0803%" height="15" fill="rgb(221,124,13)" fg:x="888" fg:w="1"/><text x="71.5753%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3253%" y="549" width="0.0803%" height="15" fill="rgb(234,3,18)" fg:x="888" fg:w="1"/><text x="71.5753%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.3253%" y="533" width="0.0803%" height="15" fill="rgb(249,199,20)" fg:x="888" fg:w="1"/><text x="71.5753%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="71.4056%" y="757" width="0.0803%" height="15" fill="rgb(224,134,6)" fg:x="889" fg:w="1"/><text x="71.6556%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="71.4056%" y="741" width="0.0803%" height="15" fill="rgb(254,83,26)" fg:x="889" fg:w="1"/><text x="71.6556%" y="751.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="71.4056%" y="725" width="0.0803%" height="15" fill="rgb(217,88,9)" fg:x="889" fg:w="1"/><text x="71.6556%" y="735.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4056%" y="709" width="0.0803%" height="15" fill="rgb(225,73,2)" fg:x="889" fg:w="1"/><text x="71.6556%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4056%" y="693" width="0.0803%" height="15" fill="rgb(226,44,39)" fg:x="889" fg:w="1"/><text x="71.6556%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4056%" y="677" width="0.0803%" height="15" fill="rgb(228,53,17)" fg:x="889" fg:w="1"/><text x="71.6556%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4056%" y="661" width="0.0803%" height="15" fill="rgb(212,27,27)" fg:x="889" fg:w="1"/><text x="71.6556%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4056%" y="645" width="0.0803%" height="15" fill="rgb(241,50,6)" fg:x="889" fg:w="1"/><text x="71.6556%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4056%" y="629" width="0.0803%" height="15" fill="rgb(225,28,51)" fg:x="889" fg:w="1"/><text x="71.6556%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4056%" y="613" width="0.0803%" height="15" fill="rgb(215,33,16)" fg:x="889" fg:w="1"/><text x="71.6556%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4056%" y="597" width="0.0803%" height="15" fill="rgb(243,40,39)" fg:x="889" fg:w="1"/><text x="71.6556%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.4056%" y="581" width="0.0803%" height="15" fill="rgb(225,11,42)" fg:x="889" fg:w="1"/><text x="71.6556%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.4056%" y="565" width="0.0803%" height="15" fill="rgb(241,220,38)" fg:x="889" fg:w="1"/><text x="71.6556%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.4056%" y="549" width="0.0803%" height="15" fill="rgb(244,52,35)" fg:x="889" fg:w="1"/><text x="71.6556%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.4056%" y="533" width="0.0803%" height="15" fill="rgb(246,42,46)" fg:x="889" fg:w="1"/><text x="71.6556%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4056%" y="517" width="0.0803%" height="15" fill="rgb(205,184,13)" fg:x="889" fg:w="1"/><text x="71.6556%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.4859%" y="757" width="0.0803%" height="15" fill="rgb(209,48,36)" fg:x="890" fg:w="1"/><text x="71.7359%" y="767.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.4859%" y="741" width="0.0803%" height="15" fill="rgb(244,34,51)" fg:x="890" fg:w="1"/><text x="71.7359%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.4859%" y="725" width="0.0803%" height="15" fill="rgb(221,107,33)" fg:x="890" fg:w="1"/><text x="71.7359%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4859%" y="709" width="0.0803%" height="15" fill="rgb(224,203,12)" fg:x="890" fg:w="1"/><text x="71.7359%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4859%" y="693" width="0.0803%" height="15" fill="rgb(230,215,18)" fg:x="890" fg:w="1"/><text x="71.7359%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4859%" y="677" width="0.0803%" height="15" fill="rgb(206,185,35)" fg:x="890" fg:w="1"/><text x="71.7359%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4859%" y="661" width="0.0803%" height="15" fill="rgb(228,140,34)" fg:x="890" fg:w="1"/><text x="71.7359%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.4859%" y="645" width="0.0803%" height="15" fill="rgb(208,93,13)" fg:x="890" fg:w="1"/><text x="71.7359%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4859%" y="629" width="0.0803%" height="15" fill="rgb(221,193,39)" fg:x="890" fg:w="1"/><text x="71.7359%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4859%" y="613" width="0.0803%" height="15" fill="rgb(241,132,34)" fg:x="890" fg:w="1"/><text x="71.7359%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4859%" y="597" width="0.0803%" height="15" fill="rgb(221,141,10)" fg:x="890" fg:w="1"/><text x="71.7359%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4859%" y="581" width="0.0803%" height="15" fill="rgb(226,90,31)" fg:x="890" fg:w="1"/><text x="71.7359%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="71.5663%" y="741" width="0.0803%" height="15" fill="rgb(243,75,5)" fg:x="891" fg:w="1"/><text x="71.8163%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.5663%" y="725" width="0.0803%" height="15" fill="rgb(227,156,21)" fg:x="891" fg:w="1"/><text x="71.8163%" y="735.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="71.5663%" y="709" width="0.0803%" height="15" fill="rgb(250,195,8)" fg:x="891" fg:w="1"/><text x="71.8163%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="71.5663%" y="693" width="0.0803%" height="15" fill="rgb(220,134,5)" fg:x="891" fg:w="1"/><text x="71.8163%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5663%" y="677" width="0.0803%" height="15" fill="rgb(246,106,34)" fg:x="891" fg:w="1"/><text x="71.8163%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.5663%" y="661" width="0.0803%" height="15" fill="rgb(205,1,4)" fg:x="891" fg:w="1"/><text x="71.8163%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5663%" y="645" width="0.0803%" height="15" fill="rgb(224,151,29)" fg:x="891" fg:w="1"/><text x="71.8163%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.5663%" y="629" width="0.0803%" height="15" fill="rgb(251,196,0)" fg:x="891" fg:w="1"/><text x="71.8163%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.5663%" y="613" width="0.0803%" height="15" fill="rgb(212,127,0)" fg:x="891" fg:w="1"/><text x="71.8163%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5663%" y="597" width="0.0803%" height="15" fill="rgb(236,71,53)" fg:x="891" fg:w="1"/><text x="71.8163%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.5663%" y="581" width="0.0803%" height="15" fill="rgb(227,99,0)" fg:x="891" fg:w="1"/><text x="71.8163%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5663%" y="565" width="0.0803%" height="15" fill="rgb(239,89,21)" fg:x="891" fg:w="1"/><text x="71.8163%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.5663%" y="549" width="0.0803%" height="15" fill="rgb(243,122,19)" fg:x="891" fg:w="1"/><text x="71.8163%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="71.4056%" y="773" width="0.3213%" height="15" fill="rgb(229,192,45)" fg:x="889" fg:w="4"/><text x="71.6556%" y="783.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="71.5663%" y="757" width="0.1606%" height="15" fill="rgb(235,165,35)" fg:x="891" fg:w="2"/><text x="71.8163%" y="767.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="71.6466%" y="741" width="0.0803%" height="15" fill="rgb(253,202,0)" fg:x="892" fg:w="1"/><text x="71.8966%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6466%" y="725" width="0.0803%" height="15" fill="rgb(235,51,20)" fg:x="892" fg:w="1"/><text x="71.8966%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6466%" y="709" width="0.0803%" height="15" fill="rgb(218,95,46)" fg:x="892" fg:w="1"/><text x="71.8966%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="71.6466%" y="693" width="0.0803%" height="15" fill="rgb(212,81,10)" fg:x="892" fg:w="1"/><text x="71.8966%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6466%" y="677" width="0.0803%" height="15" fill="rgb(240,59,0)" fg:x="892" fg:w="1"/><text x="71.8966%" y="687.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="71.4056%" y="789" width="0.4016%" height="15" fill="rgb(212,191,42)" fg:x="889" fg:w="5"/><text x="71.6556%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="71.7269%" y="773" width="0.0803%" height="15" fill="rgb(233,140,3)" fg:x="893" fg:w="1"/><text x="71.9769%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="71.7269%" y="757" width="0.0803%" height="15" fill="rgb(215,69,23)" fg:x="893" fg:w="1"/><text x="71.9769%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.7269%" y="741" width="0.0803%" height="15" fill="rgb(240,202,20)" fg:x="893" fg:w="1"/><text x="71.9769%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.7269%" y="725" width="0.0803%" height="15" fill="rgb(209,146,50)" fg:x="893" fg:w="1"/><text x="71.9769%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.7269%" y="709" width="0.0803%" height="15" fill="rgb(253,102,54)" fg:x="893" fg:w="1"/><text x="71.9769%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.7269%" y="693" width="0.0803%" height="15" fill="rgb(250,173,47)" fg:x="893" fg:w="1"/><text x="71.9769%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7269%" y="677" width="0.0803%" height="15" fill="rgb(232,142,7)" fg:x="893" fg:w="1"/><text x="71.9769%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7269%" y="661" width="0.0803%" height="15" fill="rgb(230,157,47)" fg:x="893" fg:w="1"/><text x="71.9769%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7269%" y="645" width="0.0803%" height="15" fill="rgb(214,177,35)" fg:x="893" fg:w="1"/><text x="71.9769%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7269%" y="629" width="0.0803%" height="15" fill="rgb(234,119,46)" fg:x="893" fg:w="1"/><text x="71.9769%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.7269%" y="613" width="0.0803%" height="15" fill="rgb(241,180,50)" fg:x="893" fg:w="1"/><text x="71.9769%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7269%" y="597" width="0.0803%" height="15" fill="rgb(221,54,25)" fg:x="893" fg:w="1"/><text x="71.9769%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7269%" y="581" width="0.0803%" height="15" fill="rgb(209,157,44)" fg:x="893" fg:w="1"/><text x="71.9769%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7269%" y="565" width="0.0803%" height="15" fill="rgb(246,115,41)" fg:x="893" fg:w="1"/><text x="71.9769%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7269%" y="549" width="0.0803%" height="15" fill="rgb(229,86,1)" fg:x="893" fg:w="1"/><text x="71.9769%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7269%" y="533" width="0.0803%" height="15" fill="rgb(240,108,53)" fg:x="893" fg:w="1"/><text x="71.9769%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="71.8072%" y="757" width="0.0803%" height="15" fill="rgb(227,134,2)" fg:x="894" fg:w="1"/><text x="72.0572%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="71.8072%" y="741" width="0.0803%" height="15" fill="rgb(213,129,25)" fg:x="894" fg:w="1"/><text x="72.0572%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="71.8072%" y="725" width="0.0803%" height="15" fill="rgb(226,35,21)" fg:x="894" fg:w="1"/><text x="72.0572%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.8876%" y="709" width="0.0803%" height="15" fill="rgb(208,129,26)" fg:x="895" fg:w="1"/><text x="72.1376%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.8876%" y="693" width="0.0803%" height="15" fill="rgb(224,83,6)" fg:x="895" fg:w="1"/><text x="72.1376%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.8876%" y="677" width="0.0803%" height="15" fill="rgb(227,52,39)" fg:x="895" fg:w="1"/><text x="72.1376%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.8876%" y="661" width="0.0803%" height="15" fill="rgb(241,30,17)" fg:x="895" fg:w="1"/><text x="72.1376%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.8876%" y="645" width="0.0803%" height="15" fill="rgb(246,186,42)" fg:x="895" fg:w="1"/><text x="72.1376%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.8876%" y="629" width="0.0803%" height="15" fill="rgb(221,169,15)" fg:x="895" fg:w="1"/><text x="72.1376%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.8876%" y="757" width="0.1606%" height="15" fill="rgb(235,108,21)" fg:x="895" fg:w="2"/><text x="72.1376%" y="767.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="71.8876%" y="741" width="0.1606%" height="15" fill="rgb(219,148,30)" fg:x="895" fg:w="2"/><text x="72.1376%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="71.8876%" y="725" width="0.1606%" height="15" fill="rgb(220,109,5)" fg:x="895" fg:w="2"/><text x="72.1376%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9679%" y="709" width="0.0803%" height="15" fill="rgb(213,203,48)" fg:x="896" fg:w="1"/><text x="72.2179%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9679%" y="693" width="0.0803%" height="15" fill="rgb(244,71,33)" fg:x="896" fg:w="1"/><text x="72.2179%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9679%" y="677" width="0.0803%" height="15" fill="rgb(209,23,2)" fg:x="896" fg:w="1"/><text x="72.2179%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9679%" y="661" width="0.0803%" height="15" fill="rgb(219,97,7)" fg:x="896" fg:w="1"/><text x="72.2179%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.9679%" y="645" width="0.0803%" height="15" fill="rgb(216,161,23)" fg:x="896" fg:w="1"/><text x="72.2179%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9679%" y="629" width="0.0803%" height="15" fill="rgb(207,45,42)" fg:x="896" fg:w="1"/><text x="72.2179%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9679%" y="613" width="0.0803%" height="15" fill="rgb(241,61,4)" fg:x="896" fg:w="1"/><text x="72.2179%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9679%" y="597" width="0.0803%" height="15" fill="rgb(236,170,1)" fg:x="896" fg:w="1"/><text x="72.2179%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="71.8072%" y="789" width="0.3213%" height="15" fill="rgb(239,72,5)" fg:x="894" fg:w="4"/><text x="72.0572%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="71.8072%" y="773" width="0.3213%" height="15" fill="rgb(214,13,50)" fg:x="894" fg:w="4"/><text x="72.0572%" y="783.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.0482%" y="757" width="0.0803%" height="15" fill="rgb(224,88,9)" fg:x="897" fg:w="1"/><text x="72.2982%" y="767.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.0482%" y="741" width="0.0803%" height="15" fill="rgb(238,192,34)" fg:x="897" fg:w="1"/><text x="72.2982%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.0482%" y="725" width="0.0803%" height="15" fill="rgb(217,203,50)" fg:x="897" fg:w="1"/><text x="72.2982%" y="735.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="72.0482%" y="709" width="0.0803%" height="15" fill="rgb(241,123,32)" fg:x="897" fg:w="1"/><text x="72.2982%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.0482%" y="693" width="0.0803%" height="15" fill="rgb(248,151,39)" fg:x="897" fg:w="1"/><text x="72.2982%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0482%" y="677" width="0.0803%" height="15" fill="rgb(208,89,6)" fg:x="897" fg:w="1"/><text x="72.2982%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.0482%" y="661" width="0.0803%" height="15" fill="rgb(254,43,26)" fg:x="897" fg:w="1"/><text x="72.2982%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.0482%" y="645" width="0.0803%" height="15" fill="rgb(216,158,13)" fg:x="897" fg:w="1"/><text x="72.2982%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0482%" y="629" width="0.0803%" height="15" fill="rgb(212,47,37)" fg:x="897" fg:w="1"/><text x="72.2982%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="72.1285%" y="789" width="0.0803%" height="15" fill="rgb(254,16,10)" fg:x="898" fg:w="1"/><text x="72.3785%" y="799.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="72.1285%" y="773" width="0.0803%" height="15" fill="rgb(223,228,16)" fg:x="898" fg:w="1"/><text x="72.3785%" y="783.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="72.1285%" y="757" width="0.0803%" height="15" fill="rgb(249,108,50)" fg:x="898" fg:w="1"/><text x="72.3785%" y="767.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.1285%" y="741" width="0.0803%" height="15" fill="rgb(208,220,5)" fg:x="898" fg:w="1"/><text x="72.3785%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1285%" y="725" width="0.0803%" height="15" fill="rgb(217,89,48)" fg:x="898" fg:w="1"/><text x="72.3785%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.1285%" y="709" width="0.0803%" height="15" fill="rgb(212,113,41)" fg:x="898" fg:w="1"/><text x="72.3785%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1285%" y="693" width="0.0803%" height="15" fill="rgb(231,127,5)" fg:x="898" fg:w="1"/><text x="72.3785%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="72.2088%" y="773" width="0.0803%" height="15" fill="rgb(217,141,17)" fg:x="899" fg:w="1"/><text x="72.4588%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.2088%" y="757" width="0.0803%" height="15" fill="rgb(245,125,54)" fg:x="899" fg:w="1"/><text x="72.4588%" y="767.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="72.2088%" y="741" width="0.0803%" height="15" fill="rgb(248,125,3)" fg:x="899" fg:w="1"/><text x="72.4588%" y="751.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="72.2088%" y="725" width="0.0803%" height="15" fill="rgb(236,119,51)" fg:x="899" fg:w="1"/><text x="72.4588%" y="735.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="72.2088%" y="709" width="0.0803%" height="15" fill="rgb(239,99,8)" fg:x="899" fg:w="1"/><text x="72.4588%" y="719.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.2088%" y="693" width="0.0803%" height="15" fill="rgb(224,228,4)" fg:x="899" fg:w="1"/><text x="72.4588%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="72.2088%" y="677" width="0.0803%" height="15" fill="rgb(220,131,45)" fg:x="899" fg:w="1"/><text x="72.4588%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.2088%" y="661" width="0.0803%" height="15" fill="rgb(215,62,5)" fg:x="899" fg:w="1"/><text x="72.4588%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.2088%" y="645" width="0.0803%" height="15" fill="rgb(253,12,24)" fg:x="899" fg:w="1"/><text x="72.4588%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.2088%" y="629" width="0.0803%" height="15" fill="rgb(248,120,50)" fg:x="899" fg:w="1"/><text x="72.4588%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2088%" y="613" width="0.0803%" height="15" fill="rgb(245,194,10)" fg:x="899" fg:w="1"/><text x="72.4588%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2088%" y="597" width="0.0803%" height="15" fill="rgb(241,149,38)" fg:x="899" fg:w="1"/><text x="72.4588%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2088%" y="581" width="0.0803%" height="15" fill="rgb(219,215,7)" fg:x="899" fg:w="1"/><text x="72.4588%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2088%" y="565" width="0.0803%" height="15" fill="rgb(208,120,31)" fg:x="899" fg:w="1"/><text x="72.4588%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2088%" y="549" width="0.0803%" height="15" fill="rgb(244,30,8)" fg:x="899" fg:w="1"/><text x="72.4588%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2088%" y="533" width="0.0803%" height="15" fill="rgb(238,35,44)" fg:x="899" fg:w="1"/><text x="72.4588%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2088%" y="517" width="0.0803%" height="15" fill="rgb(243,218,37)" fg:x="899" fg:w="1"/><text x="72.4588%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.2088%" y="501" width="0.0803%" height="15" fill="rgb(218,169,10)" fg:x="899" fg:w="1"/><text x="72.4588%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.2088%" y="485" width="0.0803%" height="15" fill="rgb(221,144,10)" fg:x="899" fg:w="1"/><text x="72.4588%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.2088%" y="469" width="0.0803%" height="15" fill="rgb(226,41,38)" fg:x="899" fg:w="1"/><text x="72.4588%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2088%" y="453" width="0.0803%" height="15" fill="rgb(228,3,1)" fg:x="899" fg:w="1"/><text x="72.4588%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2088%" y="437" width="0.0803%" height="15" fill="rgb(209,129,12)" fg:x="899" fg:w="1"/><text x="72.4588%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.2088%" y="421" width="0.0803%" height="15" fill="rgb(213,136,33)" fg:x="899" fg:w="1"/><text x="72.4588%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="72.2892%" y="677" width="0.0803%" height="15" fill="rgb(209,181,29)" fg:x="900" fg:w="1"/><text x="72.5392%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2892%" y="661" width="0.0803%" height="15" fill="rgb(234,173,18)" fg:x="900" fg:w="1"/><text x="72.5392%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.2892%" y="645" width="0.0803%" height="15" fill="rgb(227,73,47)" fg:x="900" fg:w="1"/><text x="72.5392%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.2892%" y="629" width="0.0803%" height="15" fill="rgb(234,9,34)" fg:x="900" fg:w="1"/><text x="72.5392%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.2892%" y="613" width="0.0803%" height="15" fill="rgb(235,172,15)" fg:x="900" fg:w="1"/><text x="72.5392%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.2892%" y="597" width="0.0803%" height="15" fill="rgb(245,61,2)" fg:x="900" fg:w="1"/><text x="72.5392%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.2892%" y="581" width="0.0803%" height="15" fill="rgb(238,39,47)" fg:x="900" fg:w="1"/><text x="72.5392%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.2892%" y="565" width="0.0803%" height="15" fill="rgb(234,37,24)" fg:x="900" fg:w="1"/><text x="72.5392%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.2892%" y="549" width="0.0803%" height="15" fill="rgb(248,223,24)" fg:x="900" fg:w="1"/><text x="72.5392%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.3695%" y="677" width="0.0803%" height="15" fill="rgb(223,12,15)" fg:x="901" fg:w="1"/><text x="72.6195%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.3695%" y="661" width="0.0803%" height="15" fill="rgb(249,6,3)" fg:x="901" fg:w="1"/><text x="72.6195%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.3695%" y="645" width="0.0803%" height="15" fill="rgb(237,105,33)" fg:x="901" fg:w="1"/><text x="72.6195%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.3695%" y="629" width="0.0803%" height="15" fill="rgb(252,208,35)" fg:x="901" fg:w="1"/><text x="72.6195%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.3695%" y="613" width="0.0803%" height="15" fill="rgb(215,181,35)" fg:x="901" fg:w="1"/><text x="72.6195%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3695%" y="597" width="0.0803%" height="15" fill="rgb(246,212,3)" fg:x="901" fg:w="1"/><text x="72.6195%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3695%" y="581" width="0.0803%" height="15" fill="rgb(247,156,24)" fg:x="901" fg:w="1"/><text x="72.6195%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4498%" y="629" width="0.0803%" height="15" fill="rgb(248,9,31)" fg:x="902" fg:w="1"/><text x="72.6998%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.4498%" y="613" width="0.0803%" height="15" fill="rgb(234,26,45)" fg:x="902" fg:w="1"/><text x="72.6998%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4498%" y="597" width="0.0803%" height="15" fill="rgb(249,11,32)" fg:x="902" fg:w="1"/><text x="72.6998%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="72.5301%" y="613" width="0.0803%" height="15" fill="rgb(249,162,33)" fg:x="903" fg:w="1"/><text x="72.7801%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.6104%" y="581" width="0.0803%" height="15" fill="rgb(232,4,32)" fg:x="904" fg:w="1"/><text x="72.8604%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.6104%" y="565" width="0.0803%" height="15" fill="rgb(212,5,45)" fg:x="904" fg:w="1"/><text x="72.8604%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6104%" y="549" width="0.0803%" height="15" fill="rgb(227,95,13)" fg:x="904" fg:w="1"/><text x="72.8604%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6908%" y="549" width="0.0803%" height="15" fill="rgb(223,205,10)" fg:x="905" fg:w="1"/><text x="72.9408%" y="559.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.56%)</title><rect x="72.2892%" y="773" width="0.5622%" height="15" fill="rgb(222,178,8)" fg:x="900" fg:w="7"/><text x="72.5392%" y="783.50"></text></g><g><title>engine::session::Session::save_changes (7 samples, 0.56%)</title><rect x="72.2892%" y="757" width="0.5622%" height="15" fill="rgb(216,13,22)" fg:x="900" fg:w="7"/><text x="72.5392%" y="767.50"></text></g><g><title>engine::session::state::State::close (7 samples, 0.56%)</title><rect x="72.2892%" y="741" width="0.5622%" height="15" fill="rgb(240,167,12)" fg:x="900" fg:w="7"/><text x="72.5392%" y="751.50"></text></g><g><title>engine::session::state::State::flush_entities (7 samples, 0.56%)</title><rect x="72.2892%" y="725" width="0.5622%" height="15" fill="rgb(235,68,35)" fg:x="900" fg:w="7"/><text x="72.5392%" y="735.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (7 samples, 0.56%)</title><rect x="72.2892%" y="709" width="0.5622%" height="15" fill="rgb(253,40,27)" fg:x="900" fg:w="7"/><text x="72.5392%" y="719.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (7 samples, 0.56%)</title><rect x="72.2892%" y="693" width="0.5622%" height="15" fill="rgb(214,19,28)" fg:x="900" fg:w="7"/><text x="72.5392%" y="703.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="72.4498%" y="677" width="0.4016%" height="15" fill="rgb(210,167,45)" fg:x="902" fg:w="5"/><text x="72.6998%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="72.4498%" y="661" width="0.4016%" height="15" fill="rgb(232,97,40)" fg:x="902" fg:w="5"/><text x="72.6998%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="72.4498%" y="645" width="0.4016%" height="15" fill="rgb(250,35,23)" fg:x="902" fg:w="5"/><text x="72.6998%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="72.5301%" y="629" width="0.3213%" height="15" fill="rgb(248,47,53)" fg:x="903" fg:w="4"/><text x="72.7801%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="72.6104%" y="613" width="0.2410%" height="15" fill="rgb(226,58,50)" fg:x="904" fg:w="3"/><text x="72.8604%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.6104%" y="597" width="0.2410%" height="15" fill="rgb(217,105,26)" fg:x="904" fg:w="3"/><text x="72.8604%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.6908%" y="581" width="0.1606%" height="15" fill="rgb(208,64,1)" fg:x="905" fg:w="2"/><text x="72.9408%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.6908%" y="565" width="0.1606%" height="15" fill="rgb(214,80,1)" fg:x="905" fg:w="2"/><text x="72.9408%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7711%" y="549" width="0.0803%" height="15" fill="rgb(206,175,26)" fg:x="906" fg:w="1"/><text x="73.0211%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.7711%" y="533" width="0.0803%" height="15" fill="rgb(235,156,37)" fg:x="906" fg:w="1"/><text x="73.0211%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7711%" y="517" width="0.0803%" height="15" fill="rgb(213,100,9)" fg:x="906" fg:w="1"/><text x="73.0211%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7711%" y="501" width="0.0803%" height="15" fill="rgb(241,15,13)" fg:x="906" fg:w="1"/><text x="73.0211%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.8514%" y="741" width="0.0803%" height="15" fill="rgb(205,97,43)" fg:x="907" fg:w="1"/><text x="73.1014%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.8514%" y="725" width="0.0803%" height="15" fill="rgb(216,106,32)" fg:x="907" fg:w="1"/><text x="73.1014%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.8514%" y="709" width="0.0803%" height="15" fill="rgb(226,200,8)" fg:x="907" fg:w="1"/><text x="73.1014%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.8514%" y="757" width="0.1606%" height="15" fill="rgb(244,54,29)" fg:x="907" fg:w="2"/><text x="73.1014%" y="767.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.9317%" y="741" width="0.0803%" height="15" fill="rgb(252,169,12)" fg:x="908" fg:w="1"/><text x="73.1817%" y="751.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.9317%" y="725" width="0.0803%" height="15" fill="rgb(231,199,11)" fg:x="908" fg:w="1"/><text x="73.1817%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.9317%" y="709" width="0.0803%" height="15" fill="rgb(233,191,18)" fg:x="908" fg:w="1"/><text x="73.1817%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.9317%" y="693" width="0.0803%" height="15" fill="rgb(215,83,47)" fg:x="908" fg:w="1"/><text x="73.1817%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.9317%" y="677" width="0.0803%" height="15" fill="rgb(251,67,19)" fg:x="908" fg:w="1"/><text x="73.1817%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9317%" y="661" width="0.0803%" height="15" fill="rgb(240,7,20)" fg:x="908" fg:w="1"/><text x="73.1817%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9317%" y="645" width="0.0803%" height="15" fill="rgb(210,150,26)" fg:x="908" fg:w="1"/><text x="73.1817%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9317%" y="629" width="0.0803%" height="15" fill="rgb(228,75,42)" fg:x="908" fg:w="1"/><text x="73.1817%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9317%" y="613" width="0.0803%" height="15" fill="rgb(237,134,48)" fg:x="908" fg:w="1"/><text x="73.1817%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.9317%" y="597" width="0.0803%" height="15" fill="rgb(205,80,50)" fg:x="908" fg:w="1"/><text x="73.1817%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9317%" y="581" width="0.0803%" height="15" fill="rgb(217,74,48)" fg:x="908" fg:w="1"/><text x="73.1817%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9317%" y="565" width="0.0803%" height="15" fill="rgb(205,82,50)" fg:x="908" fg:w="1"/><text x="73.1817%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9317%" y="549" width="0.0803%" height="15" fill="rgb(228,1,33)" fg:x="908" fg:w="1"/><text x="73.1817%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9317%" y="533" width="0.0803%" height="15" fill="rgb(214,50,23)" fg:x="908" fg:w="1"/><text x="73.1817%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9317%" y="517" width="0.0803%" height="15" fill="rgb(210,62,9)" fg:x="908" fg:w="1"/><text x="73.1817%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="72.9317%" y="501" width="0.0803%" height="15" fill="rgb(210,104,37)" fg:x="908" fg:w="1"/><text x="73.1817%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.0120%" y="741" width="0.0803%" height="15" fill="rgb(232,104,43)" fg:x="909" fg:w="1"/><text x="73.2620%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.0120%" y="725" width="0.0803%" height="15" fill="rgb(244,52,6)" fg:x="909" fg:w="1"/><text x="73.2620%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.0120%" y="709" width="0.0803%" height="15" fill="rgb(211,174,52)" fg:x="909" fg:w="1"/><text x="73.2620%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.0120%" y="693" width="0.0803%" height="15" fill="rgb(229,48,4)" fg:x="909" fg:w="1"/><text x="73.2620%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.0120%" y="677" width="0.0803%" height="15" fill="rgb(205,155,16)" fg:x="909" fg:w="1"/><text x="73.2620%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.0120%" y="661" width="0.0803%" height="15" fill="rgb(211,141,53)" fg:x="909" fg:w="1"/><text x="73.2620%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.0120%" y="645" width="0.0803%" height="15" fill="rgb(240,148,11)" fg:x="909" fg:w="1"/><text x="73.2620%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.0120%" y="629" width="0.0803%" height="15" fill="rgb(214,45,23)" fg:x="909" fg:w="1"/><text x="73.2620%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.0120%" y="613" width="0.0803%" height="15" fill="rgb(248,74,26)" fg:x="909" fg:w="1"/><text x="73.2620%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.0120%" y="597" width="0.0803%" height="15" fill="rgb(218,121,16)" fg:x="909" fg:w="1"/><text x="73.2620%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0924%" y="645" width="0.0803%" height="15" fill="rgb(218,10,47)" fg:x="910" fg:w="1"/><text x="73.3424%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0924%" y="629" width="0.0803%" height="15" fill="rgb(227,99,14)" fg:x="910" fg:w="1"/><text x="73.3424%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0924%" y="613" width="0.0803%" height="15" fill="rgb(229,83,46)" fg:x="910" fg:w="1"/><text x="73.3424%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0924%" y="597" width="0.0803%" height="15" fill="rgb(228,25,1)" fg:x="910" fg:w="1"/><text x="73.3424%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0924%" y="581" width="0.0803%" height="15" fill="rgb(252,190,15)" fg:x="910" fg:w="1"/><text x="73.3424%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0924%" y="565" width="0.0803%" height="15" fill="rgb(213,103,51)" fg:x="910" fg:w="1"/><text x="73.3424%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="73.0924%" y="725" width="0.1606%" height="15" fill="rgb(220,38,44)" fg:x="910" fg:w="2"/><text x="73.3424%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="73.0924%" y="709" width="0.1606%" height="15" fill="rgb(210,45,26)" fg:x="910" fg:w="2"/><text x="73.3424%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="73.0924%" y="693" width="0.1606%" height="15" fill="rgb(205,95,48)" fg:x="910" fg:w="2"/><text x="73.3424%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="73.0924%" y="677" width="0.1606%" height="15" fill="rgb(225,179,37)" fg:x="910" fg:w="2"/><text x="73.3424%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="73.0924%" y="661" width="0.1606%" height="15" fill="rgb(230,209,3)" fg:x="910" fg:w="2"/><text x="73.3424%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1727%" y="645" width="0.0803%" height="15" fill="rgb(248,12,46)" fg:x="911" fg:w="1"/><text x="73.4227%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1727%" y="629" width="0.0803%" height="15" fill="rgb(234,18,0)" fg:x="911" fg:w="1"/><text x="73.4227%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1727%" y="613" width="0.0803%" height="15" fill="rgb(238,197,14)" fg:x="911" fg:w="1"/><text x="73.4227%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1727%" y="597" width="0.0803%" height="15" fill="rgb(251,162,48)" fg:x="911" fg:w="1"/><text x="73.4227%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.1727%" y="581" width="0.0803%" height="15" fill="rgb(237,73,42)" fg:x="911" fg:w="1"/><text x="73.4227%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1727%" y="565" width="0.0803%" height="15" fill="rgb(211,108,8)" fg:x="911" fg:w="1"/><text x="73.4227%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.1727%" y="549" width="0.0803%" height="15" fill="rgb(213,45,22)" fg:x="911" fg:w="1"/><text x="73.4227%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.1727%" y="533" width="0.0803%" height="15" fill="rgb(252,154,5)" fg:x="911" fg:w="1"/><text x="73.4227%" y="543.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="72.8514%" y="773" width="0.4819%" height="15" fill="rgb(221,79,52)" fg:x="907" fg:w="6"/><text x="73.1014%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="73.0120%" y="757" width="0.3213%" height="15" fill="rgb(229,220,36)" fg:x="909" fg:w="4"/><text x="73.2620%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="73.0924%" y="741" width="0.2410%" height="15" fill="rgb(211,17,16)" fg:x="910" fg:w="3"/><text x="73.3424%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="73.2530%" y="725" width="0.0803%" height="15" fill="rgb(222,55,31)" fg:x="912" fg:w="1"/><text x="73.5030%" y="735.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="73.3333%" y="773" width="0.0803%" height="15" fill="rgb(221,221,31)" fg:x="913" fg:w="1"/><text x="73.5833%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="73.3333%" y="757" width="0.0803%" height="15" fill="rgb(227,168,26)" fg:x="913" fg:w="1"/><text x="73.5833%" y="767.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="73.3333%" y="741" width="0.0803%" height="15" fill="rgb(224,139,9)" fg:x="913" fg:w="1"/><text x="73.5833%" y="751.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.3333%" y="725" width="0.0803%" height="15" fill="rgb(254,172,0)" fg:x="913" fg:w="1"/><text x="73.5833%" y="735.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.3333%" y="709" width="0.0803%" height="15" fill="rgb(235,203,1)" fg:x="913" fg:w="1"/><text x="73.5833%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.3333%" y="693" width="0.0803%" height="15" fill="rgb(216,205,24)" fg:x="913" fg:w="1"/><text x="73.5833%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="73.3333%" y="677" width="0.0803%" height="15" fill="rgb(233,24,6)" fg:x="913" fg:w="1"/><text x="73.5833%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.3333%" y="661" width="0.0803%" height="15" fill="rgb(244,110,9)" fg:x="913" fg:w="1"/><text x="73.5833%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.3333%" y="645" width="0.0803%" height="15" fill="rgb(239,222,42)" fg:x="913" fg:w="1"/><text x="73.5833%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="73.3333%" y="629" width="0.0803%" height="15" fill="rgb(218,145,13)" fg:x="913" fg:w="1"/><text x="73.5833%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="73.3333%" y="613" width="0.0803%" height="15" fill="rgb(207,69,11)" fg:x="913" fg:w="1"/><text x="73.5833%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (16 samples, 1.29%)</title><rect x="72.2088%" y="789" width="1.2851%" height="15" fill="rgb(220,223,22)" fg:x="899" fg:w="16"/><text x="72.4588%" y="799.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="73.4137%" y="773" width="0.0803%" height="15" fill="rgb(245,102,5)" fg:x="914" fg:w="1"/><text x="73.6637%" y="783.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="73.4137%" y="757" width="0.0803%" height="15" fill="rgb(211,148,2)" fg:x="914" fg:w="1"/><text x="73.6637%" y="767.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="73.4137%" y="741" width="0.0803%" height="15" fill="rgb(241,13,44)" fg:x="914" fg:w="1"/><text x="73.6637%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.4137%" y="725" width="0.0803%" height="15" fill="rgb(219,137,21)" fg:x="914" fg:w="1"/><text x="73.6637%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.4137%" y="709" width="0.0803%" height="15" fill="rgb(242,206,5)" fg:x="914" fg:w="1"/><text x="73.6637%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.4137%" y="693" width="0.0803%" height="15" fill="rgb(217,114,22)" fg:x="914" fg:w="1"/><text x="73.6637%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.4137%" y="677" width="0.0803%" height="15" fill="rgb(253,206,42)" fg:x="914" fg:w="1"/><text x="73.6637%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.4137%" y="661" width="0.0803%" height="15" fill="rgb(236,102,18)" fg:x="914" fg:w="1"/><text x="73.6637%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4137%" y="645" width="0.0803%" height="15" fill="rgb(208,59,49)" fg:x="914" fg:w="1"/><text x="73.6637%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="73.4940%" y="789" width="0.0803%" height="15" fill="rgb(215,194,28)" fg:x="915" fg:w="1"/><text x="73.7440%" y="799.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="73.4940%" y="773" width="0.0803%" height="15" fill="rgb(243,207,11)" fg:x="915" fg:w="1"/><text x="73.7440%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="73.4940%" y="757" width="0.0803%" height="15" fill="rgb(254,179,35)" fg:x="915" fg:w="1"/><text x="73.7440%" y="767.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="73.4940%" y="741" width="0.0803%" height="15" fill="rgb(235,97,3)" fg:x="915" fg:w="1"/><text x="73.7440%" y="751.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4940%" y="725" width="0.0803%" height="15" fill="rgb(215,155,33)" fg:x="915" fg:w="1"/><text x="73.7440%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.4940%" y="709" width="0.0803%" height="15" fill="rgb(223,128,12)" fg:x="915" fg:w="1"/><text x="73.7440%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4940%" y="693" width="0.0803%" height="15" fill="rgb(208,157,18)" fg:x="915" fg:w="1"/><text x="73.7440%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.4940%" y="677" width="0.0803%" height="15" fill="rgb(249,70,54)" fg:x="915" fg:w="1"/><text x="73.7440%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.4940%" y="661" width="0.0803%" height="15" fill="rgb(244,118,24)" fg:x="915" fg:w="1"/><text x="73.7440%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="73.5743%" y="741" width="0.0803%" height="15" fill="rgb(211,54,0)" fg:x="916" fg:w="1"/><text x="73.8243%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="73.5743%" y="725" width="0.0803%" height="15" fill="rgb(245,137,45)" fg:x="916" fg:w="1"/><text x="73.8243%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="73.5743%" y="709" width="0.0803%" height="15" fill="rgb(232,154,31)" fg:x="916" fg:w="1"/><text x="73.8243%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.5743%" y="693" width="0.0803%" height="15" fill="rgb(253,6,39)" fg:x="916" fg:w="1"/><text x="73.8243%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.5743%" y="677" width="0.0803%" height="15" fill="rgb(234,183,24)" fg:x="916" fg:w="1"/><text x="73.8243%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.5743%" y="661" width="0.0803%" height="15" fill="rgb(252,84,40)" fg:x="916" fg:w="1"/><text x="73.8243%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="73.5743%" y="645" width="0.0803%" height="15" fill="rgb(224,65,2)" fg:x="916" fg:w="1"/><text x="73.8243%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.5743%" y="629" width="0.0803%" height="15" fill="rgb(229,38,24)" fg:x="916" fg:w="1"/><text x="73.8243%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.5743%" y="613" width="0.0803%" height="15" fill="rgb(218,131,50)" fg:x="916" fg:w="1"/><text x="73.8243%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.5743%" y="597" width="0.0803%" height="15" fill="rgb(233,106,18)" fg:x="916" fg:w="1"/><text x="73.8243%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.6546%" y="741" width="0.0803%" height="15" fill="rgb(220,216,11)" fg:x="917" fg:w="1"/><text x="73.9046%" y="751.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.6546%" y="725" width="0.0803%" height="15" fill="rgb(251,100,45)" fg:x="917" fg:w="1"/><text x="73.9046%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.6546%" y="709" width="0.0803%" height="15" fill="rgb(235,143,32)" fg:x="917" fg:w="1"/><text x="73.9046%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6546%" y="693" width="0.0803%" height="15" fill="rgb(248,124,34)" fg:x="917" fg:w="1"/><text x="73.9046%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6546%" y="677" width="0.0803%" height="15" fill="rgb(225,221,4)" fg:x="917" fg:w="1"/><text x="73.9046%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6546%" y="661" width="0.0803%" height="15" fill="rgb(242,27,43)" fg:x="917" fg:w="1"/><text x="73.9046%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6546%" y="645" width="0.0803%" height="15" fill="rgb(227,54,8)" fg:x="917" fg:w="1"/><text x="73.9046%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.6546%" y="629" width="0.0803%" height="15" fill="rgb(253,139,49)" fg:x="917" fg:w="1"/><text x="73.9046%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6546%" y="613" width="0.0803%" height="15" fill="rgb(231,26,43)" fg:x="917" fg:w="1"/><text x="73.9046%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6546%" y="597" width="0.0803%" height="15" fill="rgb(207,121,39)" fg:x="917" fg:w="1"/><text x="73.9046%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.7349%" y="741" width="0.0803%" height="15" fill="rgb(223,101,35)" fg:x="918" fg:w="1"/><text x="73.9849%" y="751.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.8153%" y="725" width="0.0803%" height="15" fill="rgb(232,87,23)" fg:x="919" fg:w="1"/><text x="74.0653%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.8153%" y="709" width="0.0803%" height="15" fill="rgb(225,180,29)" fg:x="919" fg:w="1"/><text x="74.0653%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.8153%" y="693" width="0.0803%" height="15" fill="rgb(225,25,17)" fg:x="919" fg:w="1"/><text x="74.0653%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.8153%" y="677" width="0.0803%" height="15" fill="rgb(223,8,52)" fg:x="919" fg:w="1"/><text x="74.0653%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.8153%" y="661" width="0.0803%" height="15" fill="rgb(246,42,21)" fg:x="919" fg:w="1"/><text x="74.0653%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.8153%" y="645" width="0.0803%" height="15" fill="rgb(205,64,43)" fg:x="919" fg:w="1"/><text x="74.0653%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.8153%" y="629" width="0.0803%" height="15" fill="rgb(221,160,13)" fg:x="919" fg:w="1"/><text x="74.0653%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.8153%" y="613" width="0.0803%" height="15" fill="rgb(239,58,35)" fg:x="919" fg:w="1"/><text x="74.0653%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.8153%" y="597" width="0.0803%" height="15" fill="rgb(251,26,40)" fg:x="919" fg:w="1"/><text x="74.0653%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.8153%" y="581" width="0.0803%" height="15" fill="rgb(247,0,4)" fg:x="919" fg:w="1"/><text x="74.0653%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.8153%" y="565" width="0.0803%" height="15" fill="rgb(218,130,10)" fg:x="919" fg:w="1"/><text x="74.0653%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.8153%" y="549" width="0.0803%" height="15" fill="rgb(239,32,7)" fg:x="919" fg:w="1"/><text x="74.0653%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8153%" y="533" width="0.0803%" height="15" fill="rgb(210,192,24)" fg:x="919" fg:w="1"/><text x="74.0653%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="73.5743%" y="757" width="0.4016%" height="15" fill="rgb(226,212,17)" fg:x="916" fg:w="5"/><text x="73.8243%" y="767.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="73.8153%" y="741" width="0.1606%" height="15" fill="rgb(219,201,28)" fg:x="919" fg:w="2"/><text x="74.0653%" y="751.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.8956%" y="725" width="0.0803%" height="15" fill="rgb(235,207,41)" fg:x="920" fg:w="1"/><text x="74.1456%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.8956%" y="709" width="0.0803%" height="15" fill="rgb(241,95,54)" fg:x="920" fg:w="1"/><text x="74.1456%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="73.8956%" y="693" width="0.0803%" height="15" fill="rgb(248,12,23)" fg:x="920" fg:w="1"/><text x="74.1456%" y="703.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.48%)</title><rect x="73.5743%" y="789" width="0.4819%" height="15" fill="rgb(228,173,4)" fg:x="916" fg:w="6"/><text x="73.8243%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="73.5743%" y="773" width="0.4819%" height="15" fill="rgb(254,99,5)" fg:x="916" fg:w="6"/><text x="73.8243%" y="783.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="73.9759%" y="757" width="0.0803%" height="15" fill="rgb(212,184,17)" fg:x="921" fg:w="1"/><text x="74.2259%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.9759%" y="741" width="0.0803%" height="15" fill="rgb(252,174,1)" fg:x="921" fg:w="1"/><text x="74.2259%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.9759%" y="725" width="0.0803%" height="15" fill="rgb(241,118,51)" fg:x="921" fg:w="1"/><text x="74.2259%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.9759%" y="709" width="0.0803%" height="15" fill="rgb(227,94,47)" fg:x="921" fg:w="1"/><text x="74.2259%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.9759%" y="693" width="0.0803%" height="15" fill="rgb(229,104,2)" fg:x="921" fg:w="1"/><text x="74.2259%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9759%" y="677" width="0.0803%" height="15" fill="rgb(219,28,31)" fg:x="921" fg:w="1"/><text x="74.2259%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9759%" y="661" width="0.0803%" height="15" fill="rgb(233,109,36)" fg:x="921" fg:w="1"/><text x="74.2259%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9759%" y="645" width="0.0803%" height="15" fill="rgb(246,88,11)" fg:x="921" fg:w="1"/><text x="74.2259%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9759%" y="629" width="0.0803%" height="15" fill="rgb(209,212,17)" fg:x="921" fg:w="1"/><text x="74.2259%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (49 samples, 3.94%)</title><rect x="70.2008%" y="805" width="3.9357%" height="15" fill="rgb(243,59,29)" fg:x="874" fg:w="49"/><text x="70.4508%" y="815.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="74.0562%" y="789" width="0.0803%" height="15" fill="rgb(244,205,48)" fg:x="922" fg:w="1"/><text x="74.3062%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.0562%" y="773" width="0.0803%" height="15" fill="rgb(227,30,6)" fg:x="922" fg:w="1"/><text x="74.3062%" y="783.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.0562%" y="757" width="0.0803%" height="15" fill="rgb(220,205,48)" fg:x="922" fg:w="1"/><text x="74.3062%" y="767.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.0562%" y="741" width="0.0803%" height="15" fill="rgb(250,94,14)" fg:x="922" fg:w="1"/><text x="74.3062%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.0562%" y="725" width="0.0803%" height="15" fill="rgb(216,119,42)" fg:x="922" fg:w="1"/><text x="74.3062%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.0562%" y="709" width="0.0803%" height="15" fill="rgb(232,155,0)" fg:x="922" fg:w="1"/><text x="74.3062%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.0562%" y="693" width="0.0803%" height="15" fill="rgb(212,24,32)" fg:x="922" fg:w="1"/><text x="74.3062%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0562%" y="677" width="0.0803%" height="15" fill="rgb(216,69,20)" fg:x="922" fg:w="1"/><text x="74.3062%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0562%" y="661" width="0.0803%" height="15" fill="rgb(229,73,31)" fg:x="922" fg:w="1"/><text x="74.3062%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0562%" y="645" width="0.0803%" height="15" fill="rgb(224,219,20)" fg:x="922" fg:w="1"/><text x="74.3062%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0562%" y="629" width="0.0803%" height="15" fill="rgb(215,146,41)" fg:x="922" fg:w="1"/><text x="74.3062%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0562%" y="613" width="0.0803%" height="15" fill="rgb(244,71,31)" fg:x="922" fg:w="1"/><text x="74.3062%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.1365%" y="709" width="0.0803%" height="15" fill="rgb(224,24,11)" fg:x="923" fg:w="1"/><text x="74.3865%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.1365%" y="693" width="0.0803%" height="15" fill="rgb(229,76,15)" fg:x="923" fg:w="1"/><text x="74.3865%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.1365%" y="677" width="0.0803%" height="15" fill="rgb(209,93,2)" fg:x="923" fg:w="1"/><text x="74.3865%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.1365%" y="661" width="0.0803%" height="15" fill="rgb(216,200,50)" fg:x="923" fg:w="1"/><text x="74.3865%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2169%" y="693" width="0.0803%" height="15" fill="rgb(211,67,34)" fg:x="924" fg:w="1"/><text x="74.4669%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2169%" y="677" width="0.0803%" height="15" fill="rgb(225,87,47)" fg:x="924" fg:w="1"/><text x="74.4669%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2169%" y="661" width="0.0803%" height="15" fill="rgb(217,185,16)" fg:x="924" fg:w="1"/><text x="74.4669%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2169%" y="645" width="0.0803%" height="15" fill="rgb(205,0,0)" fg:x="924" fg:w="1"/><text x="74.4669%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2169%" y="629" width="0.0803%" height="15" fill="rgb(207,116,45)" fg:x="924" fg:w="1"/><text x="74.4669%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.2169%" y="613" width="0.0803%" height="15" fill="rgb(221,156,26)" fg:x="924" fg:w="1"/><text x="74.4669%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.2169%" y="597" width="0.0803%" height="15" fill="rgb(213,140,4)" fg:x="924" fg:w="1"/><text x="74.4669%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.2169%" y="581" width="0.0803%" height="15" fill="rgb(231,224,15)" fg:x="924" fg:w="1"/><text x="74.4669%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.2169%" y="565" width="0.0803%" height="15" fill="rgb(244,76,20)" fg:x="924" fg:w="1"/><text x="74.4669%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.2169%" y="549" width="0.0803%" height="15" fill="rgb(238,117,7)" fg:x="924" fg:w="1"/><text x="74.4669%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.2169%" y="533" width="0.0803%" height="15" fill="rgb(235,1,10)" fg:x="924" fg:w="1"/><text x="74.4669%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.2169%" y="517" width="0.0803%" height="15" fill="rgb(216,165,6)" fg:x="924" fg:w="1"/><text x="74.4669%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.2169%" y="709" width="0.1606%" height="15" fill="rgb(246,91,35)" fg:x="924" fg:w="2"/><text x="74.4669%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.2972%" y="693" width="0.0803%" height="15" fill="rgb(228,96,24)" fg:x="925" fg:w="1"/><text x="74.5472%" y="703.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="74.1365%" y="725" width="0.3213%" height="15" fill="rgb(254,217,53)" fg:x="923" fg:w="4"/><text x="74.3865%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.3775%" y="709" width="0.0803%" height="15" fill="rgb(209,60,0)" fg:x="926" fg:w="1"/><text x="74.6275%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.3775%" y="693" width="0.0803%" height="15" fill="rgb(250,93,26)" fg:x="926" fg:w="1"/><text x="74.6275%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3775%" y="677" width="0.0803%" height="15" fill="rgb(211,9,40)" fg:x="926" fg:w="1"/><text x="74.6275%" y="687.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="74.4578%" y="709" width="0.1606%" height="15" fill="rgb(242,57,20)" fg:x="927" fg:w="2"/><text x="74.7078%" y="719.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="74.4578%" y="693" width="0.1606%" height="15" fill="rgb(248,85,48)" fg:x="927" fg:w="2"/><text x="74.7078%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.4578%" y="677" width="0.1606%" height="15" fill="rgb(212,117,2)" fg:x="927" fg:w="2"/><text x="74.7078%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.4578%" y="661" width="0.1606%" height="15" fill="rgb(243,19,3)" fg:x="927" fg:w="2"/><text x="74.7078%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.4578%" y="645" width="0.1606%" height="15" fill="rgb(232,217,24)" fg:x="927" fg:w="2"/><text x="74.7078%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.5382%" y="629" width="0.0803%" height="15" fill="rgb(224,175,40)" fg:x="928" fg:w="1"/><text x="74.7882%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.5382%" y="613" width="0.0803%" height="15" fill="rgb(212,162,32)" fg:x="928" fg:w="1"/><text x="74.7882%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.6185%" y="677" width="0.1606%" height="15" fill="rgb(215,9,4)" fg:x="929" fg:w="2"/><text x="74.8685%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6988%" y="661" width="0.0803%" height="15" fill="rgb(242,42,7)" fg:x="930" fg:w="1"/><text x="74.9488%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.6988%" y="645" width="0.0803%" height="15" fill="rgb(242,184,45)" fg:x="930" fg:w="1"/><text x="74.9488%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7791%" y="677" width="0.0803%" height="15" fill="rgb(228,111,51)" fg:x="931" fg:w="1"/><text x="75.0291%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.7791%" y="661" width="0.0803%" height="15" fill="rgb(236,147,17)" fg:x="931" fg:w="1"/><text x="75.0291%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7791%" y="645" width="0.0803%" height="15" fill="rgb(210,75,22)" fg:x="931" fg:w="1"/><text x="75.0291%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8594%" y="677" width="0.0803%" height="15" fill="rgb(217,159,45)" fg:x="932" fg:w="1"/><text x="75.1094%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.8594%" y="661" width="0.0803%" height="15" fill="rgb(245,165,53)" fg:x="932" fg:w="1"/><text x="75.1094%" y="671.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="74.8594%" y="645" width="0.0803%" height="15" fill="rgb(251,190,50)" fg:x="932" fg:w="1"/><text x="75.1094%" y="655.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.8594%" y="629" width="0.0803%" height="15" fill="rgb(208,203,29)" fg:x="932" fg:w="1"/><text x="75.1094%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9398%" y="629" width="0.0803%" height="15" fill="rgb(207,209,35)" fg:x="933" fg:w="1"/><text x="75.1898%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9398%" y="613" width="0.0803%" height="15" fill="rgb(230,144,49)" fg:x="933" fg:w="1"/><text x="75.1898%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.9398%" y="597" width="0.0803%" height="15" fill="rgb(229,31,6)" fg:x="933" fg:w="1"/><text x="75.1898%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.1004%" y="613" width="0.0803%" height="15" fill="rgb(251,129,24)" fg:x="935" fg:w="1"/><text x="75.3504%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="74.9398%" y="661" width="0.3213%" height="15" fill="rgb(235,105,15)" fg:x="933" fg:w="4"/><text x="75.1898%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="74.9398%" y="645" width="0.3213%" height="15" fill="rgb(216,52,43)" fg:x="933" fg:w="4"/><text x="75.1898%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="75.0201%" y="629" width="0.2410%" height="15" fill="rgb(238,144,41)" fg:x="934" fg:w="3"/><text x="75.2701%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.1807%" y="613" width="0.0803%" height="15" fill="rgb(243,63,9)" fg:x="936" fg:w="1"/><text x="75.4307%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1807%" y="597" width="0.0803%" height="15" fill="rgb(246,208,1)" fg:x="936" fg:w="1"/><text x="75.4307%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1807%" y="581" width="0.0803%" height="15" fill="rgb(233,182,18)" fg:x="936" fg:w="1"/><text x="75.4307%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1807%" y="565" width="0.0803%" height="15" fill="rgb(242,224,8)" fg:x="936" fg:w="1"/><text x="75.4307%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="74.6185%" y="709" width="0.7229%" height="15" fill="rgb(243,54,37)" fg:x="929" fg:w="9"/><text x="74.8685%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="74.6185%" y="693" width="0.7229%" height="15" fill="rgb(233,192,12)" fg:x="929" fg:w="9"/><text x="74.8685%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="74.9398%" y="677" width="0.4016%" height="15" fill="rgb(251,192,53)" fg:x="933" fg:w="5"/><text x="75.1898%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2610%" y="661" width="0.0803%" height="15" fill="rgb(246,141,26)" fg:x="937" fg:w="1"/><text x="75.5110%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3414%" y="629" width="0.0803%" height="15" fill="rgb(239,195,19)" fg:x="938" fg:w="1"/><text x="75.5914%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.3414%" y="613" width="0.0803%" height="15" fill="rgb(241,16,39)" fg:x="938" fg:w="1"/><text x="75.5914%" y="623.50"></text></g><g><title>engine::session::Session::close (17 samples, 1.37%)</title><rect x="74.1365%" y="805" width="1.3655%" height="15" fill="rgb(223,13,53)" fg:x="923" fg:w="17"/><text x="74.3865%" y="815.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.37%)</title><rect x="74.1365%" y="789" width="1.3655%" height="15" fill="rgb(214,227,0)" fg:x="923" fg:w="17"/><text x="74.3865%" y="799.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.37%)</title><rect x="74.1365%" y="773" width="1.3655%" height="15" fill="rgb(228,103,26)" fg:x="923" fg:w="17"/><text x="74.3865%" y="783.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (17 samples, 1.37%)</title><rect x="74.1365%" y="757" width="1.3655%" height="15" fill="rgb(254,177,53)" fg:x="923" fg:w="17"/><text x="74.3865%" y="767.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.37%)</title><rect x="74.1365%" y="741" width="1.3655%" height="15" fill="rgb(208,201,34)" fg:x="923" fg:w="17"/><text x="74.3865%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="74.4578%" y="725" width="1.0442%" height="15" fill="rgb(212,39,5)" fg:x="927" fg:w="13"/><text x="74.7078%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="75.3414%" y="709" width="0.1606%" height="15" fill="rgb(246,117,3)" fg:x="938" fg:w="2"/><text x="75.5914%" y="719.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="75.3414%" y="693" width="0.1606%" height="15" fill="rgb(244,118,39)" fg:x="938" fg:w="2"/><text x="75.5914%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.3414%" y="677" width="0.1606%" height="15" fill="rgb(241,64,10)" fg:x="938" fg:w="2"/><text x="75.5914%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.3414%" y="661" width="0.1606%" height="15" fill="rgb(229,39,44)" fg:x="938" fg:w="2"/><text x="75.5914%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.3414%" y="645" width="0.1606%" height="15" fill="rgb(230,226,3)" fg:x="938" fg:w="2"/><text x="75.5914%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4217%" y="629" width="0.0803%" height="15" fill="rgb(222,13,42)" fg:x="939" fg:w="1"/><text x="75.6717%" y="639.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="75.5020%" y="725" width="0.0803%" height="15" fill="rgb(247,180,54)" fg:x="940" fg:w="1"/><text x="75.7520%" y="735.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="75.5020%" y="709" width="0.0803%" height="15" fill="rgb(205,96,16)" fg:x="940" fg:w="1"/><text x="75.7520%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="75.5020%" y="693" width="0.0803%" height="15" fill="rgb(205,100,21)" fg:x="940" fg:w="1"/><text x="75.7520%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.5020%" y="677" width="0.0803%" height="15" fill="rgb(248,51,4)" fg:x="940" fg:w="1"/><text x="75.7520%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="75.5020%" y="661" width="0.0803%" height="15" fill="rgb(217,197,30)" fg:x="940" fg:w="1"/><text x="75.7520%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="75.5020%" y="645" width="0.0803%" height="15" fill="rgb(240,179,40)" fg:x="940" fg:w="1"/><text x="75.7520%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="75.5020%" y="629" width="0.0803%" height="15" fill="rgb(212,185,35)" fg:x="940" fg:w="1"/><text x="75.7520%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="75.5020%" y="613" width="0.0803%" height="15" fill="rgb(251,222,31)" fg:x="940" fg:w="1"/><text x="75.7520%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.5020%" y="597" width="0.0803%" height="15" fill="rgb(208,140,36)" fg:x="940" fg:w="1"/><text x="75.7520%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5020%" y="581" width="0.0803%" height="15" fill="rgb(220,148,1)" fg:x="940" fg:w="1"/><text x="75.7520%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.5020%" y="565" width="0.0803%" height="15" fill="rgb(254,4,28)" fg:x="940" fg:w="1"/><text x="75.7520%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5020%" y="549" width="0.0803%" height="15" fill="rgb(222,185,44)" fg:x="940" fg:w="1"/><text x="75.7520%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.5020%" y="533" width="0.0803%" height="15" fill="rgb(215,74,39)" fg:x="940" fg:w="1"/><text x="75.7520%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5020%" y="517" width="0.0803%" height="15" fill="rgb(247,86,4)" fg:x="940" fg:w="1"/><text x="75.7520%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.5020%" y="501" width="0.0803%" height="15" fill="rgb(231,105,32)" fg:x="940" fg:w="1"/><text x="75.7520%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.5020%" y="485" width="0.0803%" height="15" fill="rgb(222,65,35)" fg:x="940" fg:w="1"/><text x="75.7520%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.5020%" y="469" width="0.0803%" height="15" fill="rgb(218,145,35)" fg:x="940" fg:w="1"/><text x="75.7520%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6627%" y="533" width="0.0803%" height="15" fill="rgb(208,7,15)" fg:x="942" fg:w="1"/><text x="75.9127%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.7430%" y="501" width="0.1606%" height="15" fill="rgb(209,83,13)" fg:x="943" fg:w="2"/><text x="75.9930%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.7430%" y="485" width="0.1606%" height="15" fill="rgb(218,3,10)" fg:x="943" fg:w="2"/><text x="75.9930%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.7430%" y="469" width="0.1606%" height="15" fill="rgb(211,219,4)" fg:x="943" fg:w="2"/><text x="75.9930%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.7430%" y="453" width="0.1606%" height="15" fill="rgb(228,194,12)" fg:x="943" fg:w="2"/><text x="75.9930%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8233%" y="437" width="0.0803%" height="15" fill="rgb(210,175,7)" fg:x="944" fg:w="1"/><text x="76.0733%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.8233%" y="421" width="0.0803%" height="15" fill="rgb(243,132,6)" fg:x="944" fg:w="1"/><text x="76.0733%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.8233%" y="405" width="0.0803%" height="15" fill="rgb(207,72,18)" fg:x="944" fg:w="1"/><text x="76.0733%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.8233%" y="389" width="0.0803%" height="15" fill="rgb(236,1,18)" fg:x="944" fg:w="1"/><text x="76.0733%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.8233%" y="373" width="0.0803%" height="15" fill="rgb(227,0,18)" fg:x="944" fg:w="1"/><text x="76.0733%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.8233%" y="357" width="0.0803%" height="15" fill="rgb(247,37,5)" fg:x="944" fg:w="1"/><text x="76.0733%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.8233%" y="341" width="0.0803%" height="15" fill="rgb(237,179,24)" fg:x="944" fg:w="1"/><text x="76.0733%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="75.6627%" y="549" width="0.3213%" height="15" fill="rgb(226,53,20)" fg:x="942" fg:w="4"/><text x="75.9127%" y="559.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="75.7430%" y="533" width="0.2410%" height="15" fill="rgb(247,75,7)" fg:x="943" fg:w="3"/><text x="75.9930%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="75.7430%" y="517" width="0.2410%" height="15" fill="rgb(233,96,12)" fg:x="943" fg:w="3"/><text x="75.9930%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9036%" y="501" width="0.0803%" height="15" fill="rgb(224,125,0)" fg:x="945" fg:w="1"/><text x="76.1536%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9036%" y="485" width="0.0803%" height="15" fill="rgb(224,92,25)" fg:x="945" fg:w="1"/><text x="76.1536%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9036%" y="469" width="0.0803%" height="15" fill="rgb(224,42,24)" fg:x="945" fg:w="1"/><text x="76.1536%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9036%" y="453" width="0.0803%" height="15" fill="rgb(234,132,49)" fg:x="945" fg:w="1"/><text x="76.1536%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.9036%" y="437" width="0.0803%" height="15" fill="rgb(248,100,35)" fg:x="945" fg:w="1"/><text x="76.1536%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9036%" y="421" width="0.0803%" height="15" fill="rgb(239,94,40)" fg:x="945" fg:w="1"/><text x="76.1536%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9036%" y="405" width="0.0803%" height="15" fill="rgb(235,139,28)" fg:x="945" fg:w="1"/><text x="76.1536%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9036%" y="389" width="0.0803%" height="15" fill="rgb(217,144,7)" fg:x="945" fg:w="1"/><text x="76.1536%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9036%" y="373" width="0.0803%" height="15" fill="rgb(227,55,4)" fg:x="945" fg:w="1"/><text x="76.1536%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9036%" y="357" width="0.0803%" height="15" fill="rgb(252,82,54)" fg:x="945" fg:w="1"/><text x="76.1536%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.9036%" y="341" width="0.0803%" height="15" fill="rgb(245,172,4)" fg:x="945" fg:w="1"/><text x="76.1536%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.9036%" y="325" width="0.0803%" height="15" fill="rgb(207,26,27)" fg:x="945" fg:w="1"/><text x="76.1536%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9839%" y="533" width="0.0803%" height="15" fill="rgb(252,98,18)" fg:x="946" fg:w="1"/><text x="76.2339%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9839%" y="517" width="0.0803%" height="15" fill="rgb(244,8,26)" fg:x="946" fg:w="1"/><text x="76.2339%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.9839%" y="501" width="0.0803%" height="15" fill="rgb(237,173,45)" fg:x="946" fg:w="1"/><text x="76.2339%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.9839%" y="485" width="0.0803%" height="15" fill="rgb(208,213,49)" fg:x="946" fg:w="1"/><text x="76.2339%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.9839%" y="469" width="0.0803%" height="15" fill="rgb(212,122,37)" fg:x="946" fg:w="1"/><text x="76.2339%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.9839%" y="453" width="0.0803%" height="15" fill="rgb(213,80,17)" fg:x="946" fg:w="1"/><text x="76.2339%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.9839%" y="437" width="0.0803%" height="15" fill="rgb(206,210,43)" fg:x="946" fg:w="1"/><text x="76.2339%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0643%" y="437" width="0.0803%" height="15" fill="rgb(229,214,3)" fg:x="947" fg:w="1"/><text x="76.3143%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0643%" y="421" width="0.0803%" height="15" fill="rgb(235,213,29)" fg:x="947" fg:w="1"/><text x="76.3143%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.0643%" y="405" width="0.0803%" height="15" fill="rgb(248,135,26)" fg:x="947" fg:w="1"/><text x="76.3143%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.0643%" y="389" width="0.0803%" height="15" fill="rgb(242,188,12)" fg:x="947" fg:w="1"/><text x="76.3143%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.0643%" y="373" width="0.0803%" height="15" fill="rgb(245,38,12)" fg:x="947" fg:w="1"/><text x="76.3143%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0643%" y="357" width="0.0803%" height="15" fill="rgb(218,42,13)" fg:x="947" fg:w="1"/><text x="76.3143%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0643%" y="341" width="0.0803%" height="15" fill="rgb(238,132,49)" fg:x="947" fg:w="1"/><text x="76.3143%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.0643%" y="325" width="0.0803%" height="15" fill="rgb(209,196,19)" fg:x="947" fg:w="1"/><text x="76.3143%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.0643%" y="309" width="0.0803%" height="15" fill="rgb(244,131,22)" fg:x="947" fg:w="1"/><text x="76.3143%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.0643%" y="293" width="0.0803%" height="15" fill="rgb(223,18,34)" fg:x="947" fg:w="1"/><text x="76.3143%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.0643%" y="277" width="0.0803%" height="15" fill="rgb(252,124,54)" fg:x="947" fg:w="1"/><text x="76.3143%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0643%" y="261" width="0.0803%" height="15" fill="rgb(229,106,42)" fg:x="947" fg:w="1"/><text x="76.3143%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.0643%" y="469" width="0.1606%" height="15" fill="rgb(221,129,1)" fg:x="947" fg:w="2"/><text x="76.3143%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.0643%" y="453" width="0.1606%" height="15" fill="rgb(229,74,15)" fg:x="947" fg:w="2"/><text x="76.3143%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1446%" y="437" width="0.0803%" height="15" fill="rgb(210,206,50)" fg:x="948" fg:w="1"/><text x="76.3946%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="76.0643%" y="501" width="0.2410%" height="15" fill="rgb(251,114,31)" fg:x="947" fg:w="3"/><text x="76.3143%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="76.0643%" y="485" width="0.2410%" height="15" fill="rgb(215,225,28)" fg:x="947" fg:w="3"/><text x="76.3143%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2249%" y="469" width="0.0803%" height="15" fill="rgb(237,109,14)" fg:x="949" fg:w="1"/><text x="76.4749%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.2249%" y="453" width="0.0803%" height="15" fill="rgb(230,13,37)" fg:x="949" fg:w="1"/><text x="76.4749%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.2249%" y="437" width="0.0803%" height="15" fill="rgb(231,40,28)" fg:x="949" fg:w="1"/><text x="76.4749%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.2249%" y="421" width="0.0803%" height="15" fill="rgb(231,202,18)" fg:x="949" fg:w="1"/><text x="76.4749%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.2249%" y="405" width="0.0803%" height="15" fill="rgb(225,33,18)" fg:x="949" fg:w="1"/><text x="76.4749%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.2249%" y="389" width="0.0803%" height="15" fill="rgb(223,64,47)" fg:x="949" fg:w="1"/><text x="76.4749%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.2249%" y="373" width="0.0803%" height="15" fill="rgb(234,114,13)" fg:x="949" fg:w="1"/><text x="76.4749%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3052%" y="501" width="0.0803%" height="15" fill="rgb(248,56,40)" fg:x="950" fg:w="1"/><text x="76.5552%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.3052%" y="485" width="0.0803%" height="15" fill="rgb(221,194,21)" fg:x="950" fg:w="1"/><text x="76.5552%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3052%" y="469" width="0.0803%" height="15" fill="rgb(242,108,46)" fg:x="950" fg:w="1"/><text x="76.5552%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3052%" y="453" width="0.0803%" height="15" fill="rgb(220,106,10)" fg:x="950" fg:w="1"/><text x="76.5552%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3052%" y="437" width="0.0803%" height="15" fill="rgb(211,88,4)" fg:x="950" fg:w="1"/><text x="76.5552%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3052%" y="421" width="0.0803%" height="15" fill="rgb(214,95,34)" fg:x="950" fg:w="1"/><text x="76.5552%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3052%" y="405" width="0.0803%" height="15" fill="rgb(250,160,33)" fg:x="950" fg:w="1"/><text x="76.5552%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3052%" y="389" width="0.0803%" height="15" fill="rgb(225,29,10)" fg:x="950" fg:w="1"/><text x="76.5552%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="75.9839%" y="549" width="0.5622%" height="15" fill="rgb(224,28,30)" fg:x="946" fg:w="7"/><text x="76.2339%" y="559.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="76.0643%" y="533" width="0.4819%" height="15" fill="rgb(231,77,4)" fg:x="947" fg:w="6"/><text x="76.3143%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="76.0643%" y="517" width="0.4819%" height="15" fill="rgb(209,63,21)" fg:x="947" fg:w="6"/><text x="76.3143%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.3855%" y="501" width="0.1606%" height="15" fill="rgb(226,22,11)" fg:x="951" fg:w="2"/><text x="76.6355%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.3855%" y="485" width="0.1606%" height="15" fill="rgb(216,82,30)" fg:x="951" fg:w="2"/><text x="76.6355%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.3855%" y="469" width="0.1606%" height="15" fill="rgb(246,227,38)" fg:x="951" fg:w="2"/><text x="76.6355%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.3855%" y="453" width="0.1606%" height="15" fill="rgb(251,203,53)" fg:x="951" fg:w="2"/><text x="76.6355%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="76.3855%" y="437" width="0.1606%" height="15" fill="rgb(254,101,1)" fg:x="951" fg:w="2"/><text x="76.6355%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.3855%" y="421" width="0.1606%" height="15" fill="rgb(241,180,5)" fg:x="951" fg:w="2"/><text x="76.6355%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.3855%" y="405" width="0.1606%" height="15" fill="rgb(218,168,4)" fg:x="951" fg:w="2"/><text x="76.6355%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.3855%" y="389" width="0.1606%" height="15" fill="rgb(224,223,32)" fg:x="951" fg:w="2"/><text x="76.6355%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4659%" y="373" width="0.0803%" height="15" fill="rgb(236,106,22)" fg:x="952" fg:w="1"/><text x="76.7159%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4659%" y="357" width="0.0803%" height="15" fill="rgb(206,121,5)" fg:x="952" fg:w="1"/><text x="76.7159%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4659%" y="341" width="0.0803%" height="15" fill="rgb(233,87,28)" fg:x="952" fg:w="1"/><text x="76.7159%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5462%" y="549" width="0.0803%" height="15" fill="rgb(236,137,17)" fg:x="953" fg:w="1"/><text x="76.7962%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.6265%" y="501" width="0.0803%" height="15" fill="rgb(209,183,38)" fg:x="954" fg:w="1"/><text x="76.8765%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.6265%" y="485" width="0.0803%" height="15" fill="rgb(206,162,44)" fg:x="954" fg:w="1"/><text x="76.8765%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.6265%" y="469" width="0.0803%" height="15" fill="rgb(237,70,39)" fg:x="954" fg:w="1"/><text x="76.8765%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.6265%" y="453" width="0.0803%" height="15" fill="rgb(212,176,5)" fg:x="954" fg:w="1"/><text x="76.8765%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.7068%" y="469" width="0.0803%" height="15" fill="rgb(232,95,16)" fg:x="955" fg:w="1"/><text x="76.9568%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.7068%" y="453" width="0.0803%" height="15" fill="rgb(219,115,35)" fg:x="955" fg:w="1"/><text x="76.9568%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="76.7068%" y="437" width="0.0803%" height="15" fill="rgb(251,67,27)" fg:x="955" fg:w="1"/><text x="76.9568%" y="447.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="76.7068%" y="421" width="0.0803%" height="15" fill="rgb(222,95,40)" fg:x="955" fg:w="1"/><text x="76.9568%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="76.7068%" y="405" width="0.0803%" height="15" fill="rgb(250,35,16)" fg:x="955" fg:w="1"/><text x="76.9568%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="76.7068%" y="389" width="0.0803%" height="15" fill="rgb(224,86,44)" fg:x="955" fg:w="1"/><text x="76.9568%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="76.7068%" y="373" width="0.0803%" height="15" fill="rgb(237,53,53)" fg:x="955" fg:w="1"/><text x="76.9568%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8675%" y="421" width="0.0803%" height="15" fill="rgb(208,171,33)" fg:x="957" fg:w="1"/><text x="77.1175%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="76.9478%" y="421" width="0.0803%" height="15" fill="rgb(222,64,27)" fg:x="958" fg:w="1"/><text x="77.1978%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.9478%" y="405" width="0.0803%" height="15" fill="rgb(221,121,35)" fg:x="958" fg:w="1"/><text x="77.1978%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1084%" y="389" width="0.0803%" height="15" fill="rgb(228,137,42)" fg:x="960" fg:w="1"/><text x="77.3584%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.88%)</title><rect x="77.1084%" y="405" width="0.8835%" height="15" fill="rgb(227,54,21)" fg:x="960" fg:w="11"/><text x="77.3584%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="77.1888%" y="389" width="0.8032%" height="15" fill="rgb(240,168,33)" fg:x="961" fg:w="10"/><text x="77.4388%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="77.8313%" y="373" width="0.1606%" height="15" fill="rgb(243,159,6)" fg:x="969" fg:w="2"/><text x="78.0813%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="77.9920%" y="405" width="0.2410%" height="15" fill="rgb(205,211,41)" fg:x="971" fg:w="3"/><text x="78.2420%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="77.9920%" y="389" width="0.2410%" height="15" fill="rgb(253,30,1)" fg:x="971" fg:w="3"/><text x="78.2420%" y="399.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="78.3936%" y="341" width="0.1606%" height="15" fill="rgb(226,80,18)" fg:x="976" fg:w="2"/><text x="78.6436%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.5542%" y="341" width="0.0803%" height="15" fill="rgb(253,156,46)" fg:x="978" fg:w="1"/><text x="78.8042%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="78.6345%" y="293" width="0.0803%" height="15" fill="rgb(248,87,27)" fg:x="979" fg:w="1"/><text x="78.8845%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="78.6345%" y="277" width="0.0803%" height="15" fill="rgb(227,122,2)" fg:x="979" fg:w="1"/><text x="78.8845%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="78.6345%" y="341" width="0.1606%" height="15" fill="rgb(229,94,39)" fg:x="979" fg:w="2"/><text x="78.8845%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="78.6345%" y="325" width="0.1606%" height="15" fill="rgb(225,173,31)" fg:x="979" fg:w="2"/><text x="78.8845%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="78.6345%" y="309" width="0.1606%" height="15" fill="rgb(239,176,30)" fg:x="979" fg:w="2"/><text x="78.8845%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.7149%" y="293" width="0.0803%" height="15" fill="rgb(212,104,21)" fg:x="980" fg:w="1"/><text x="78.9649%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="78.9558%" y="293" width="0.0803%" height="15" fill="rgb(240,209,40)" fg:x="983" fg:w="1"/><text x="79.2058%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="78.7952%" y="341" width="0.3213%" height="15" fill="rgb(234,195,5)" fg:x="981" fg:w="4"/><text x="79.0452%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="78.8755%" y="325" width="0.2410%" height="15" fill="rgb(238,213,1)" fg:x="982" fg:w="3"/><text x="79.1255%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="78.8755%" y="309" width="0.2410%" height="15" fill="rgb(235,182,54)" fg:x="982" fg:w="3"/><text x="79.1255%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="79.0361%" y="293" width="0.0803%" height="15" fill="rgb(229,50,46)" fg:x="984" fg:w="1"/><text x="79.2861%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.0361%" y="277" width="0.0803%" height="15" fill="rgb(219,145,13)" fg:x="984" fg:w="1"/><text x="79.2861%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.0361%" y="261" width="0.0803%" height="15" fill="rgb(220,226,10)" fg:x="984" fg:w="1"/><text x="79.2861%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.0361%" y="245" width="0.0803%" height="15" fill="rgb(248,47,30)" fg:x="984" fg:w="1"/><text x="79.2861%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="79.1165%" y="341" width="0.0803%" height="15" fill="rgb(231,209,44)" fg:x="985" fg:w="1"/><text x="79.3665%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="79.1165%" y="325" width="0.0803%" height="15" fill="rgb(209,80,30)" fg:x="985" fg:w="1"/><text x="79.3665%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1968%" y="309" width="0.0803%" height="15" fill="rgb(232,9,14)" fg:x="986" fg:w="1"/><text x="79.4468%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.69%)</title><rect x="79.1968%" y="341" width="3.6948%" height="15" fill="rgb(243,91,43)" fg:x="986" fg:w="46"/><text x="79.4468%" y="351.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.69%)</title><rect x="79.1968%" y="325" width="3.6948%" height="15" fill="rgb(231,90,52)" fg:x="986" fg:w="46"/><text x="79.4468%" y="335.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.61%)</title><rect x="79.2771%" y="309" width="3.6145%" height="15" fill="rgb(253,192,44)" fg:x="987" fg:w="45"/><text x="79.5271%" y="319.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="82.8916%" y="341" width="0.0803%" height="15" fill="rgb(241,66,31)" fg:x="1032" fg:w="1"/><text x="83.1416%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 4.90%)</title><rect x="78.2329%" y="389" width="4.8996%" height="15" fill="rgb(235,81,37)" fg:x="974" fg:w="61"/><text x="78.4829%" y="399.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.90%)</title><rect x="78.2329%" y="373" width="4.8996%" height="15" fill="rgb(223,221,9)" fg:x="974" fg:w="61"/><text x="78.4829%" y="383.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.90%)</title><rect x="78.2329%" y="357" width="4.8996%" height="15" fill="rgb(242,180,7)" fg:x="974" fg:w="61"/><text x="78.4829%" y="367.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="82.9719%" y="341" width="0.1606%" height="15" fill="rgb(243,78,19)" fg:x="1033" fg:w="2"/><text x="83.2219%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.2129%" y="373" width="0.0803%" height="15" fill="rgb(233,23,17)" fg:x="1036" fg:w="1"/><text x="83.4629%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="83.2932%" y="373" width="0.1606%" height="15" fill="rgb(252,122,45)" fg:x="1037" fg:w="2"/><text x="83.5432%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.3735%" y="357" width="0.0803%" height="15" fill="rgb(247,108,20)" fg:x="1038" fg:w="1"/><text x="83.6235%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.3735%" y="341" width="0.0803%" height="15" fill="rgb(235,84,21)" fg:x="1038" fg:w="1"/><text x="83.6235%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.3735%" y="325" width="0.0803%" height="15" fill="rgb(247,129,10)" fg:x="1038" fg:w="1"/><text x="83.6235%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="83.1325%" y="389" width="0.6426%" height="15" fill="rgb(208,173,14)" fg:x="1035" fg:w="8"/><text x="83.3825%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="83.4538%" y="373" width="0.3213%" height="15" fill="rgb(236,31,38)" fg:x="1039" fg:w="4"/><text x="83.7038%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (85 samples, 6.83%)</title><rect x="77.0281%" y="421" width="6.8273%" height="15" fill="rgb(232,65,17)" fg:x="959" fg:w="85"/><text x="77.2781%" y="431.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (70 samples, 5.62%)</title><rect x="78.2329%" y="405" width="5.6225%" height="15" fill="rgb(224,45,49)" fg:x="974" fg:w="70"/><text x="78.4829%" y="415.50">regex_a..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="83.7751%" y="389" width="0.0803%" height="15" fill="rgb(225,2,53)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="399.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="83.7751%" y="373" width="0.0803%" height="15" fill="rgb(248,210,53)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.7751%" y="357" width="0.0803%" height="15" fill="rgb(211,1,30)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.7751%" y="341" width="0.0803%" height="15" fill="rgb(224,96,15)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7751%" y="325" width="0.0803%" height="15" fill="rgb(252,45,11)" fg:x="1043" fg:w="1"/><text x="84.0251%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="83.9357%" y="389" width="0.0803%" height="15" fill="rgb(220,125,38)" fg:x="1045" fg:w="1"/><text x="84.1857%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="84.0161%" y="389" width="0.0803%" height="15" fill="rgb(243,161,33)" fg:x="1046" fg:w="1"/><text x="84.2661%" y="399.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="84.0964%" y="373" width="0.0803%" height="15" fill="rgb(248,197,34)" fg:x="1047" fg:w="1"/><text x="84.3464%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="83.8554%" y="421" width="0.5622%" height="15" fill="rgb(228,165,23)" fg:x="1044" fg:w="7"/><text x="84.1054%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="83.8554%" y="405" width="0.5622%" height="15" fill="rgb(236,94,38)" fg:x="1044" fg:w="7"/><text x="84.1054%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="84.0964%" y="389" width="0.3213%" height="15" fill="rgb(220,13,23)" fg:x="1047" fg:w="4"/><text x="84.3464%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="84.1767%" y="373" width="0.2410%" height="15" fill="rgb(234,26,39)" fg:x="1048" fg:w="3"/><text x="84.4267%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="84.1767%" y="357" width="0.2410%" height="15" fill="rgb(205,117,44)" fg:x="1048" fg:w="3"/><text x="84.4267%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="84.1767%" y="341" width="0.2410%" height="15" fill="rgb(250,42,2)" fg:x="1048" fg:w="3"/><text x="84.4267%" y="351.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="84.1767%" y="325" width="0.2410%" height="15" fill="rgb(223,83,14)" fg:x="1048" fg:w="3"/><text x="84.4267%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="84.6586%" y="389" width="0.0803%" height="15" fill="rgb(241,147,50)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.6586%" y="373" width="0.0803%" height="15" fill="rgb(218,90,6)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6586%" y="357" width="0.0803%" height="15" fill="rgb(210,191,5)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.6586%" y="341" width="0.0803%" height="15" fill="rgb(225,139,19)" fg:x="1054" fg:w="1"/><text x="84.9086%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="84.7390%" y="389" width="0.0803%" height="15" fill="rgb(210,1,33)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="84.7390%" y="373" width="0.0803%" height="15" fill="rgb(213,50,3)" fg:x="1055" fg:w="1"/><text x="84.9890%" y="383.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (101 samples, 8.11%)</title><rect x="76.7871%" y="469" width="8.1124%" height="15" fill="rgb(234,227,4)" fg:x="956" fg:w="101"/><text x="77.0371%" y="479.50">&lt;regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (101 samples, 8.11%)</title><rect x="76.7871%" y="453" width="8.1124%" height="15" fill="rgb(246,63,5)" fg:x="956" fg:w="101"/><text x="77.0371%" y="463.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (101 samples, 8.11%)</title><rect x="76.7871%" y="437" width="8.1124%" height="15" fill="rgb(245,136,27)" fg:x="956" fg:w="101"/><text x="77.0371%" y="447.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="84.4177%" y="421" width="0.4819%" height="15" fill="rgb(247,199,27)" fg:x="1051" fg:w="6"/><text x="84.6677%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="84.4177%" y="405" width="0.4819%" height="15" fill="rgb(252,158,49)" fg:x="1051" fg:w="6"/><text x="84.6677%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="84.8193%" y="389" width="0.0803%" height="15" fill="rgb(254,73,1)" fg:x="1056" fg:w="1"/><text x="85.0693%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="84.8193%" y="373" width="0.0803%" height="15" fill="rgb(248,93,19)" fg:x="1056" fg:w="1"/><text x="85.0693%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.8193%" y="357" width="0.0803%" height="15" fill="rgb(206,67,5)" fg:x="1056" fg:w="1"/><text x="85.0693%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="84.8996%" y="405" width="0.3213%" height="15" fill="rgb(209,210,4)" fg:x="1057" fg:w="4"/><text x="85.1496%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="85.0602%" y="389" width="0.1606%" height="15" fill="rgb(214,185,36)" fg:x="1059" fg:w="2"/><text x="85.3102%" y="399.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (109 samples, 8.76%)</title><rect x="76.7068%" y="485" width="8.7550%" height="15" fill="rgb(233,191,26)" fg:x="955" fg:w="109"/><text x="76.9568%" y="495.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="84.8996%" y="469" width="0.5622%" height="15" fill="rgb(248,94,17)" fg:x="1057" fg:w="7"/><text x="85.1496%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="84.8996%" y="453" width="0.5622%" height="15" fill="rgb(250,64,4)" fg:x="1057" fg:w="7"/><text x="85.1496%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="84.8996%" y="437" width="0.5622%" height="15" fill="rgb(218,41,53)" fg:x="1057" fg:w="7"/><text x="85.1496%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="84.8996%" y="421" width="0.5622%" height="15" fill="rgb(251,176,28)" fg:x="1057" fg:w="7"/><text x="85.1496%" y="431.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="85.2209%" y="405" width="0.2410%" height="15" fill="rgb(247,22,9)" fg:x="1061" fg:w="3"/><text x="85.4709%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.3815%" y="389" width="0.0803%" height="15" fill="rgb(218,201,14)" fg:x="1063" fg:w="1"/><text x="85.6315%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3815%" y="373" width="0.0803%" height="15" fill="rgb(218,94,10)" fg:x="1063" fg:w="1"/><text x="85.6315%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3815%" y="357" width="0.0803%" height="15" fill="rgb(222,183,52)" fg:x="1063" fg:w="1"/><text x="85.6315%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.4618%" y="421" width="0.1606%" height="15" fill="rgb(242,140,25)" fg:x="1064" fg:w="2"/><text x="85.7118%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.4618%" y="405" width="0.1606%" height="15" fill="rgb(235,197,38)" fg:x="1064" fg:w="2"/><text x="85.7118%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5422%" y="389" width="0.0803%" height="15" fill="rgb(237,136,15)" fg:x="1065" fg:w="1"/><text x="85.7922%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="85.7028%" y="405" width="0.6426%" height="15" fill="rgb(223,44,49)" fg:x="1067" fg:w="8"/><text x="85.9528%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="85.7831%" y="389" width="0.5622%" height="15" fill="rgb(227,71,15)" fg:x="1068" fg:w="7"/><text x="86.0331%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.2651%" y="373" width="0.0803%" height="15" fill="rgb(225,153,20)" fg:x="1074" fg:w="1"/><text x="86.5151%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="86.3454%" y="389" width="0.0803%" height="15" fill="rgb(210,190,26)" fg:x="1075" fg:w="1"/><text x="86.5954%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="86.3454%" y="405" width="0.4819%" height="15" fill="rgb(223,147,5)" fg:x="1075" fg:w="6"/><text x="86.5954%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="86.4257%" y="389" width="0.4016%" height="15" fill="rgb(207,14,23)" fg:x="1076" fg:w="5"/><text x="86.6757%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="86.7470%" y="373" width="0.0803%" height="15" fill="rgb(211,195,53)" fg:x="1080" fg:w="1"/><text x="86.9970%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="86.9880%" y="373" width="0.0803%" height="15" fill="rgb(237,75,46)" fg:x="1083" fg:w="1"/><text x="87.2380%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.9880%" y="357" width="0.0803%" height="15" fill="rgb(254,55,14)" fg:x="1083" fg:w="1"/><text x="87.2380%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.9880%" y="341" width="0.0803%" height="15" fill="rgb(230,185,30)" fg:x="1083" fg:w="1"/><text x="87.2380%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 0.32%)</title><rect x="87.0683%" y="373" width="0.3213%" height="15" fill="rgb(220,14,11)" fg:x="1084" fg:w="4"/><text x="87.3183%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="87.1486%" y="357" width="0.2410%" height="15" fill="rgb(215,169,44)" fg:x="1085" fg:w="3"/><text x="87.3986%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="87.2289%" y="341" width="0.1606%" height="15" fill="rgb(253,203,20)" fg:x="1086" fg:w="2"/><text x="87.4789%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.2289%" y="325" width="0.1606%" height="15" fill="rgb(229,225,17)" fg:x="1086" fg:w="2"/><text x="87.4789%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="87.2289%" y="309" width="0.1606%" height="15" fill="rgb(236,76,26)" fg:x="1086" fg:w="2"/><text x="87.4789%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4699%" y="341" width="0.0803%" height="15" fill="rgb(234,15,30)" fg:x="1089" fg:w="1"/><text x="87.7199%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.04%)</title><rect x="86.8273%" y="405" width="1.0442%" height="15" fill="rgb(211,113,48)" fg:x="1081" fg:w="13"/><text x="87.0773%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.04%)</title><rect x="86.8273%" y="389" width="1.0442%" height="15" fill="rgb(221,31,36)" fg:x="1081" fg:w="13"/><text x="87.0773%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="87.3896%" y="373" width="0.4819%" height="15" fill="rgb(215,118,52)" fg:x="1088" fg:w="6"/><text x="87.6396%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="87.4699%" y="357" width="0.4016%" height="15" fill="rgb(241,151,27)" fg:x="1089" fg:w="5"/><text x="87.7199%" y="367.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="87.5502%" y="341" width="0.3213%" height="15" fill="rgb(253,51,3)" fg:x="1090" fg:w="4"/><text x="87.8002%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="88.5141%" y="293" width="0.1606%" height="15" fill="rgb(216,201,24)" fg:x="1102" fg:w="2"/><text x="88.7641%" y="303.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="88.6747%" y="293" width="0.2410%" height="15" fill="rgb(231,107,4)" fg:x="1104" fg:w="3"/><text x="88.9247%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="88.9157%" y="293" width="0.2410%" height="15" fill="rgb(243,97,54)" fg:x="1107" fg:w="3"/><text x="89.1657%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.0763%" y="277" width="0.0803%" height="15" fill="rgb(221,32,51)" fg:x="1109" fg:w="1"/><text x="89.3263%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.0763%" y="261" width="0.0803%" height="15" fill="rgb(218,171,35)" fg:x="1109" fg:w="1"/><text x="89.3263%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.0763%" y="245" width="0.0803%" height="15" fill="rgb(214,20,53)" fg:x="1109" fg:w="1"/><text x="89.3263%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="89.1566%" y="293" width="0.2410%" height="15" fill="rgb(239,9,52)" fg:x="1110" fg:w="3"/><text x="89.4066%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.3173%" y="277" width="0.0803%" height="15" fill="rgb(215,114,45)" fg:x="1112" fg:w="1"/><text x="89.5673%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.7189%" y="261" width="0.0803%" height="15" fill="rgb(208,118,9)" fg:x="1117" fg:w="1"/><text x="89.9689%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="89.7992%" y="261" width="0.2410%" height="15" fill="rgb(235,7,39)" fg:x="1118" fg:w="3"/><text x="90.0492%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.8795%" y="245" width="0.1606%" height="15" fill="rgb(243,225,15)" fg:x="1119" fg:w="2"/><text x="90.1295%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.9598%" y="229" width="0.0803%" height="15" fill="rgb(225,216,18)" fg:x="1120" fg:w="1"/><text x="90.2098%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (13 samples, 1.04%)</title><rect x="89.3976%" y="293" width="1.0442%" height="15" fill="rgb(233,36,38)" fg:x="1113" fg:w="13"/><text x="89.6476%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.88%)</title><rect x="89.5582%" y="277" width="0.8835%" height="15" fill="rgb(239,88,23)" fg:x="1115" fg:w="11"/><text x="89.8082%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="90.0402%" y="261" width="0.4016%" height="15" fill="rgb(219,181,35)" fg:x="1121" fg:w="5"/><text x="90.2902%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.49%)</title><rect x="90.4418%" y="293" width="2.4900%" height="15" fill="rgb(215,18,46)" fg:x="1126" fg:w="31"/><text x="90.6918%" y="303.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.49%)</title><rect x="90.4418%" y="277" width="2.4900%" height="15" fill="rgb(241,38,11)" fg:x="1126" fg:w="31"/><text x="90.6918%" y="287.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.49%)</title><rect x="90.4418%" y="261" width="2.4900%" height="15" fill="rgb(248,169,45)" fg:x="1126" fg:w="31"/><text x="90.6918%" y="271.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 5.54%)</title><rect x="87.8715%" y="389" width="5.5422%" height="15" fill="rgb(239,50,49)" fg:x="1094" fg:w="69"/><text x="88.1215%" y="399.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (69 samples, 5.54%)</title><rect x="87.8715%" y="373" width="5.5422%" height="15" fill="rgb(231,96,31)" fg:x="1094" fg:w="69"/><text x="88.1215%" y="383.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.54%)</title><rect x="87.8715%" y="357" width="5.5422%" height="15" fill="rgb(224,193,37)" fg:x="1094" fg:w="69"/><text x="88.1215%" y="367.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (69 samples, 5.54%)</title><rect x="87.8715%" y="341" width="5.5422%" height="15" fill="rgb(227,153,50)" fg:x="1094" fg:w="69"/><text x="88.1215%" y="351.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (69 samples, 5.54%)</title><rect x="87.8715%" y="325" width="5.5422%" height="15" fill="rgb(249,228,3)" fg:x="1094" fg:w="69"/><text x="88.1215%" y="335.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.54%)</title><rect x="87.8715%" y="309" width="5.5422%" height="15" fill="rgb(219,164,43)" fg:x="1094" fg:w="69"/><text x="88.1215%" y="319.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="92.9317%" y="293" width="0.4819%" height="15" fill="rgb(216,45,41)" fg:x="1157" fg:w="6"/><text x="93.1817%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="93.0924%" y="277" width="0.3213%" height="15" fill="rgb(210,226,51)" fg:x="1159" fg:w="4"/><text x="93.3424%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="93.1727%" y="261" width="0.2410%" height="15" fill="rgb(209,117,49)" fg:x="1160" fg:w="3"/><text x="93.4227%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.3333%" y="245" width="0.0803%" height="15" fill="rgb(206,196,24)" fg:x="1162" fg:w="1"/><text x="93.5833%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.5743%" y="373" width="0.0803%" height="15" fill="rgb(253,218,3)" fg:x="1165" fg:w="1"/><text x="93.8243%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="93.6546%" y="373" width="0.0803%" height="15" fill="rgb(252,166,2)" fg:x="1166" fg:w="1"/><text x="93.9046%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="93.7349%" y="373" width="0.2410%" height="15" fill="rgb(236,218,26)" fg:x="1167" fg:w="3"/><text x="93.9849%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.8956%" y="357" width="0.0803%" height="15" fill="rgb(254,84,19)" fg:x="1169" fg:w="1"/><text x="94.1456%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.8956%" y="341" width="0.0803%" height="15" fill="rgb(219,137,29)" fg:x="1169" fg:w="1"/><text x="94.1456%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.8956%" y="325" width="0.0803%" height="15" fill="rgb(227,47,52)" fg:x="1169" fg:w="1"/><text x="94.1456%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="93.9759%" y="373" width="0.2410%" height="15" fill="rgb(229,167,24)" fg:x="1170" fg:w="3"/><text x="94.2259%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (109 samples, 8.76%)</title><rect x="85.6225%" y="421" width="8.7550%" height="15" fill="rgb(233,164,1)" fg:x="1066" fg:w="109"/><text x="85.8725%" y="431.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (81 samples, 6.51%)</title><rect x="87.8715%" y="405" width="6.5060%" height="15" fill="rgb(218,88,48)" fg:x="1094" fg:w="81"/><text x="88.1215%" y="415.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="93.4137%" y="389" width="0.9639%" height="15" fill="rgb(226,214,24)" fg:x="1163" fg:w="12"/><text x="93.6637%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="94.2169%" y="373" width="0.1606%" height="15" fill="rgb(233,29,12)" fg:x="1173" fg:w="2"/><text x="94.4669%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="94.3775%" y="389" width="0.0803%" height="15" fill="rgb(219,120,34)" fg:x="1175" fg:w="1"/><text x="94.6275%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="94.3775%" y="373" width="0.0803%" height="15" fill="rgb(226,78,44)" fg:x="1175" fg:w="1"/><text x="94.6275%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="94.3775%" y="421" width="0.1606%" height="15" fill="rgb(240,15,48)" fg:x="1175" fg:w="2"/><text x="94.6275%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="94.3775%" y="405" width="0.1606%" height="15" fill="rgb(253,176,7)" fg:x="1175" fg:w="2"/><text x="94.6275%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="94.4578%" y="389" width="0.0803%" height="15" fill="rgb(206,166,28)" fg:x="1176" fg:w="1"/><text x="94.7078%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.5382%" y="373" width="0.0803%" height="15" fill="rgb(241,53,51)" fg:x="1177" fg:w="1"/><text x="94.7882%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5382%" y="357" width="0.0803%" height="15" fill="rgb(249,112,30)" fg:x="1177" fg:w="1"/><text x="94.7882%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.5382%" y="341" width="0.0803%" height="15" fill="rgb(217,85,30)" fg:x="1177" fg:w="1"/><text x="94.7882%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.7791%" y="357" width="0.1606%" height="15" fill="rgb(233,49,7)" fg:x="1180" fg:w="2"/><text x="95.0291%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.7791%" y="341" width="0.1606%" height="15" fill="rgb(234,109,9)" fg:x="1180" fg:w="2"/><text x="95.0291%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.7791%" y="325" width="0.1606%" height="15" fill="rgb(253,95,22)" fg:x="1180" fg:w="2"/><text x="95.0291%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="94.5382%" y="389" width="0.5622%" height="15" fill="rgb(233,176,25)" fg:x="1177" fg:w="7"/><text x="94.7882%" y="399.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="94.6185%" y="373" width="0.4819%" height="15" fill="rgb(236,33,39)" fg:x="1178" fg:w="6"/><text x="94.8685%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="94.9398%" y="357" width="0.1606%" height="15" fill="rgb(223,226,42)" fg:x="1182" fg:w="2"/><text x="95.1898%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.0201%" y="341" width="0.0803%" height="15" fill="rgb(216,99,33)" fg:x="1183" fg:w="1"/><text x="95.2701%" y="351.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (121 samples, 9.72%)</title><rect x="85.4618%" y="469" width="9.7189%" height="15" fill="rgb(235,84,23)" fg:x="1064" fg:w="121"/><text x="85.7118%" y="479.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (121 samples, 9.72%)</title><rect x="85.4618%" y="453" width="9.7189%" height="15" fill="rgb(232,2,27)" fg:x="1064" fg:w="121"/><text x="85.7118%" y="463.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (121 samples, 9.72%)</title><rect x="85.4618%" y="437" width="9.7189%" height="15" fill="rgb(241,23,22)" fg:x="1064" fg:w="121"/><text x="85.7118%" y="447.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="94.5382%" y="421" width="0.6426%" height="15" fill="rgb(211,73,27)" fg:x="1177" fg:w="8"/><text x="94.7882%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="94.5382%" y="405" width="0.6426%" height="15" fill="rgb(235,109,49)" fg:x="1177" fg:w="8"/><text x="94.7882%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.1004%" y="389" width="0.0803%" height="15" fill="rgb(230,99,29)" fg:x="1184" fg:w="1"/><text x="95.3504%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.1807%" y="437" width="0.0803%" height="15" fill="rgb(245,199,7)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="95.1807%" y="421" width="0.0803%" height="15" fill="rgb(217,179,10)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.1807%" y="405" width="0.0803%" height="15" fill="rgb(254,99,47)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.1807%" y="389" width="0.0803%" height="15" fill="rgb(251,121,7)" fg:x="1185" fg:w="1"/><text x="95.4307%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="95.1807%" y="469" width="0.1606%" height="15" fill="rgb(250,177,26)" fg:x="1185" fg:w="2"/><text x="95.4307%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="95.1807%" y="453" width="0.1606%" height="15" fill="rgb(232,88,15)" fg:x="1185" fg:w="2"/><text x="95.4307%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.2610%" y="437" width="0.0803%" height="15" fill="rgb(251,54,54)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.2610%" y="421" width="0.0803%" height="15" fill="rgb(208,177,15)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.2610%" y="405" width="0.0803%" height="15" fill="rgb(205,97,32)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.2610%" y="389" width="0.0803%" height="15" fill="rgb(217,192,13)" fg:x="1186" fg:w="1"/><text x="95.5110%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.3414%" y="453" width="0.0803%" height="15" fill="rgb(215,163,41)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.3414%" y="437" width="0.0803%" height="15" fill="rgb(246,83,29)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.3414%" y="421" width="0.0803%" height="15" fill="rgb(219,2,45)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="431.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="95.3414%" y="405" width="0.0803%" height="15" fill="rgb(242,215,33)" fg:x="1187" fg:w="1"/><text x="95.5914%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.5823%" y="373" width="0.0803%" height="15" fill="rgb(217,1,6)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5823%" y="357" width="0.0803%" height="15" fill="rgb(207,85,52)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.5823%" y="341" width="0.0803%" height="15" fill="rgb(231,171,19)" fg:x="1190" fg:w="1"/><text x="95.8323%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="95.4217%" y="405" width="0.3213%" height="15" fill="rgb(207,128,4)" fg:x="1188" fg:w="4"/><text x="95.6717%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="95.4217%" y="389" width="0.3213%" height="15" fill="rgb(219,208,4)" fg:x="1188" fg:w="4"/><text x="95.6717%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.6627%" y="373" width="0.0803%" height="15" fill="rgb(235,161,42)" fg:x="1191" fg:w="1"/><text x="95.9127%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6627%" y="357" width="0.0803%" height="15" fill="rgb(247,218,18)" fg:x="1191" fg:w="1"/><text x="95.9127%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.6627%" y="341" width="0.0803%" height="15" fill="rgb(232,114,51)" fg:x="1191" fg:w="1"/><text x="95.9127%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (129 samples, 10.36%)</title><rect x="85.4618%" y="485" width="10.3614%" height="15" fill="rgb(222,95,3)" fg:x="1064" fg:w="129"/><text x="85.7118%" y="495.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="95.3414%" y="469" width="0.4819%" height="15" fill="rgb(240,65,29)" fg:x="1187" fg:w="6"/><text x="95.5914%" y="479.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.4217%" y="453" width="0.4016%" height="15" fill="rgb(249,209,20)" fg:x="1188" fg:w="5"/><text x="95.6717%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.4217%" y="437" width="0.4016%" height="15" fill="rgb(241,48,37)" fg:x="1188" fg:w="5"/><text x="95.6717%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.4217%" y="421" width="0.4016%" height="15" fill="rgb(230,140,42)" fg:x="1188" fg:w="5"/><text x="95.6717%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="95.7430%" y="405" width="0.0803%" height="15" fill="rgb(230,176,45)" fg:x="1192" fg:w="1"/><text x="95.9930%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="95.7430%" y="389" width="0.0803%" height="15" fill="rgb(245,112,21)" fg:x="1192" fg:w="1"/><text x="95.9930%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.0643%" y="405" width="0.0803%" height="15" fill="rgb(207,183,35)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.0643%" y="389" width="0.0803%" height="15" fill="rgb(227,44,33)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.0643%" y="373" width="0.0803%" height="15" fill="rgb(246,120,21)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.0643%" y="357" width="0.0803%" height="15" fill="rgb(235,57,52)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.0643%" y="341" width="0.0803%" height="15" fill="rgb(238,84,10)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.0643%" y="325" width="0.0803%" height="15" fill="rgb(251,200,32)" fg:x="1196" fg:w="1"/><text x="96.3143%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.1446%" y="405" width="0.0803%" height="15" fill="rgb(247,159,13)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="415.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.1446%" y="389" width="0.0803%" height="15" fill="rgb(238,64,4)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.1446%" y="373" width="0.0803%" height="15" fill="rgb(221,131,51)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.1446%" y="357" width="0.0803%" height="15" fill="rgb(242,5,29)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.1446%" y="341" width="0.0803%" height="15" fill="rgb(214,130,32)" fg:x="1197" fg:w="1"/><text x="96.3946%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.3052%" y="389" width="0.0803%" height="15" fill="rgb(244,210,16)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.3052%" y="373" width="0.0803%" height="15" fill="rgb(234,48,26)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="383.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.3052%" y="357" width="0.0803%" height="15" fill="rgb(231,82,38)" fg:x="1199" fg:w="1"/><text x="96.5552%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="96.3855%" y="325" width="0.0803%" height="15" fill="rgb(254,128,41)" fg:x="1200" fg:w="1"/><text x="96.6355%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.3855%" y="373" width="0.1606%" height="15" fill="rgb(212,73,49)" fg:x="1200" fg:w="2"/><text x="96.6355%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.3855%" y="357" width="0.1606%" height="15" fill="rgb(205,62,54)" fg:x="1200" fg:w="2"/><text x="96.6355%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.3855%" y="341" width="0.1606%" height="15" fill="rgb(228,0,8)" fg:x="1200" fg:w="2"/><text x="96.6355%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.4659%" y="325" width="0.0803%" height="15" fill="rgb(251,28,17)" fg:x="1201" fg:w="1"/><text x="96.7159%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.4659%" y="309" width="0.0803%" height="15" fill="rgb(238,105,27)" fg:x="1201" fg:w="1"/><text x="96.7159%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.4659%" y="293" width="0.0803%" height="15" fill="rgb(237,216,33)" fg:x="1201" fg:w="1"/><text x="96.7159%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4659%" y="277" width="0.0803%" height="15" fill="rgb(229,228,25)" fg:x="1201" fg:w="1"/><text x="96.7159%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.4659%" y="261" width="0.0803%" height="15" fill="rgb(233,75,23)" fg:x="1201" fg:w="1"/><text x="96.7159%" y="271.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="96.5462%" y="357" width="0.1606%" height="15" fill="rgb(231,207,16)" fg:x="1202" fg:w="2"/><text x="96.7962%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.7068%" y="357" width="0.0803%" height="15" fill="rgb(231,191,45)" fg:x="1204" fg:w="1"/><text x="96.9568%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8675%" y="341" width="0.0803%" height="15" fill="rgb(224,133,17)" fg:x="1206" fg:w="1"/><text x="97.1175%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9478%" y="341" width="0.0803%" height="15" fill="rgb(209,178,27)" fg:x="1207" fg:w="1"/><text x="97.1978%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="96.2249%" y="405" width="0.8835%" height="15" fill="rgb(218,37,11)" fg:x="1198" fg:w="11"/><text x="96.4749%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="96.3855%" y="389" width="0.7229%" height="15" fill="rgb(251,226,25)" fg:x="1200" fg:w="9"/><text x="96.6355%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="96.5462%" y="373" width="0.5622%" height="15" fill="rgb(209,222,27)" fg:x="1202" fg:w="7"/><text x="96.7962%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="96.7871%" y="357" width="0.3213%" height="15" fill="rgb(238,22,21)" fg:x="1205" fg:w="4"/><text x="97.0371%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0281%" y="341" width="0.0803%" height="15" fill="rgb(233,161,25)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0281%" y="325" width="0.0803%" height="15" fill="rgb(226,122,53)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0281%" y="309" width="0.0803%" height="15" fill="rgb(220,123,17)" fg:x="1208" fg:w="1"/><text x="97.2781%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.1084%" y="405" width="0.0803%" height="15" fill="rgb(230,224,35)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.1084%" y="389" width="0.0803%" height="15" fill="rgb(246,83,8)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.1084%" y="373" width="0.0803%" height="15" fill="rgb(230,214,17)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.1084%" y="357" width="0.0803%" height="15" fill="rgb(222,97,18)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1084%" y="341" width="0.0803%" height="15" fill="rgb(206,79,1)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1084%" y="325" width="0.0803%" height="15" fill="rgb(214,121,34)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1084%" y="309" width="0.0803%" height="15" fill="rgb(249,199,46)" fg:x="1209" fg:w="1"/><text x="97.3584%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1888%" y="325" width="0.0803%" height="15" fill="rgb(214,222,46)" fg:x="1210" fg:w="1"/><text x="97.4388%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="97.1888%" y="357" width="0.1606%" height="15" fill="rgb(248,168,30)" fg:x="1210" fg:w="2"/><text x="97.4388%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="97.1888%" y="341" width="0.1606%" height="15" fill="rgb(226,14,28)" fg:x="1210" fg:w="2"/><text x="97.4388%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.2691%" y="325" width="0.0803%" height="15" fill="rgb(253,123,1)" fg:x="1211" fg:w="1"/><text x="97.5191%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="97.1888%" y="373" width="0.2410%" height="15" fill="rgb(225,24,42)" fg:x="1210" fg:w="3"/><text x="97.4388%" y="383.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.3494%" y="357" width="0.0803%" height="15" fill="rgb(216,161,37)" fg:x="1212" fg:w="1"/><text x="97.5994%" y="367.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="97.3494%" y="341" width="0.0803%" height="15" fill="rgb(251,164,26)" fg:x="1212" fg:w="1"/><text x="97.5994%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.4297%" y="373" width="0.0803%" height="15" fill="rgb(219,177,3)" fg:x="1213" fg:w="1"/><text x="97.6797%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (20 samples, 1.61%)</title><rect x="95.9839%" y="421" width="1.6064%" height="15" fill="rgb(222,65,0)" fg:x="1195" fg:w="20"/><text x="96.2339%" y="431.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="97.1888%" y="405" width="0.4016%" height="15" fill="rgb(223,69,54)" fg:x="1210" fg:w="5"/><text x="97.4388%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="97.1888%" y="389" width="0.4016%" height="15" fill="rgb(235,30,27)" fg:x="1210" fg:w="5"/><text x="97.4388%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5100%" y="373" width="0.0803%" height="15" fill="rgb(220,183,50)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5100%" y="357" width="0.0803%" height="15" fill="rgb(248,198,15)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5100%" y="341" width="0.0803%" height="15" fill="rgb(222,211,4)" fg:x="1214" fg:w="1"/><text x="97.7600%" y="351.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (23 samples, 1.85%)</title><rect x="95.8233%" y="453" width="1.8474%" height="15" fill="rgb(214,102,34)" fg:x="1193" fg:w="23"/><text x="96.0733%" y="463.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (23 samples, 1.85%)</title><rect x="95.8233%" y="437" width="1.8474%" height="15" fill="rgb(245,92,5)" fg:x="1193" fg:w="23"/><text x="96.0733%" y="447.50">r..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="97.5904%" y="421" width="0.0803%" height="15" fill="rgb(252,72,51)" fg:x="1215" fg:w="1"/><text x="97.8404%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="97.6707%" y="421" width="0.0803%" height="15" fill="rgb(252,208,19)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="431.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="97.6707%" y="405" width="0.0803%" height="15" fill="rgb(211,69,7)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="415.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="97.6707%" y="389" width="0.0803%" height="15" fill="rgb(211,27,16)" fg:x="1216" fg:w="1"/><text x="97.9207%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="97.6707%" y="453" width="0.1606%" height="15" fill="rgb(219,216,14)" fg:x="1216" fg:w="2"/><text x="97.9207%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="97.6707%" y="437" width="0.1606%" height="15" fill="rgb(219,71,8)" fg:x="1216" fg:w="2"/><text x="97.9207%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="97.7510%" y="421" width="0.0803%" height="15" fill="rgb(223,170,53)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7510%" y="405" width="0.0803%" height="15" fill="rgb(246,21,26)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.7510%" y="389" width="0.0803%" height="15" fill="rgb(248,20,46)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.7510%" y="373" width="0.0803%" height="15" fill="rgb(252,94,11)" fg:x="1217" fg:w="1"/><text x="98.0010%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="97.8313%" y="453" width="0.0803%" height="15" fill="rgb(236,163,8)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.8313%" y="437" width="0.0803%" height="15" fill="rgb(217,221,45)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.8313%" y="421" width="0.0803%" height="15" fill="rgb(238,38,17)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.8313%" y="405" width="0.0803%" height="15" fill="rgb(242,210,23)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8313%" y="389" width="0.0803%" height="15" fill="rgb(250,86,53)" fg:x="1218" fg:w="1"/><text x="98.0813%" y="399.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (27 samples, 2.17%)</title><rect x="95.8233%" y="469" width="2.1687%" height="15" fill="rgb(223,168,25)" fg:x="1193" fg:w="27"/><text x="96.0733%" y="479.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="97.9116%" y="453" width="0.0803%" height="15" fill="rgb(251,189,4)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="97.9116%" y="437" width="0.0803%" height="15" fill="rgb(245,19,28)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="97.9116%" y="421" width="0.0803%" height="15" fill="rgb(207,10,34)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="97.9116%" y="405" width="0.0803%" height="15" fill="rgb(235,153,31)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="415.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.9116%" y="389" width="0.0803%" height="15" fill="rgb(228,72,37)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.9116%" y="373" width="0.0803%" height="15" fill="rgb(215,15,16)" fg:x="1219" fg:w="1"/><text x="98.1616%" y="383.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (279 samples, 22.41%)</title><rect x="75.6627%" y="565" width="22.4096%" height="15" fill="rgb(250,119,29)" fg:x="942" fg:w="279"/><text x="75.9127%" y="575.50">&lt;&amp;kernel::model::entry::Entry as pl..</text></g><g><title>plugins_core::looking::model::qualify_name (267 samples, 21.45%)</title><rect x="76.6265%" y="549" width="21.4458%" height="15" fill="rgb(214,59,1)" fg:x="954" fg:w="267"/><text x="76.8765%" y="559.50">plugins_core::looking::model::qual..</text></g><g><title>indefinite::indefinite (267 samples, 21.45%)</title><rect x="76.6265%" y="533" width="21.4458%" height="15" fill="rgb(223,109,25)" fg:x="954" fg:w="267"/><text x="76.8765%" y="543.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (267 samples, 21.45%)</title><rect x="76.6265%" y="517" width="21.4458%" height="15" fill="rgb(230,198,22)" fg:x="954" fg:w="267"/><text x="76.8765%" y="527.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (266 samples, 21.37%)</title><rect x="76.7068%" y="501" width="21.3655%" height="15" fill="rgb(245,184,46)" fg:x="955" fg:w="266"/><text x="76.9568%" y="511.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (28 samples, 2.25%)</title><rect x="95.8233%" y="485" width="2.2490%" height="15" fill="rgb(253,73,16)" fg:x="1193" fg:w="28"/><text x="96.0733%" y="495.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.9920%" y="469" width="0.0803%" height="15" fill="rgb(206,94,45)" fg:x="1220" fg:w="1"/><text x="98.2420%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="98.0723%" y="565" width="0.0803%" height="15" fill="rgb(236,83,27)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.0723%" y="549" width="0.0803%" height="15" fill="rgb(220,196,8)" fg:x="1221" fg:w="1"/><text x="98.3223%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1526%" y="501" width="0.0803%" height="15" fill="rgb(254,185,14)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1526%" y="485" width="0.0803%" height="15" fill="rgb(226,50,22)" fg:x="1222" fg:w="1"/><text x="98.4026%" y="495.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.1526%" y="533" width="0.1606%" height="15" fill="rgb(253,147,0)" fg:x="1222" fg:w="2"/><text x="98.4026%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.1526%" y="517" width="0.1606%" height="15" fill="rgb(252,46,33)" fg:x="1222" fg:w="2"/><text x="98.4026%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2329%" y="501" width="0.0803%" height="15" fill="rgb(242,22,54)" fg:x="1223" fg:w="1"/><text x="98.4829%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3133%" y="357" width="0.0803%" height="15" fill="rgb(223,178,32)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3133%" y="341" width="0.0803%" height="15" fill="rgb(214,106,53)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3133%" y="325" width="0.0803%" height="15" fill="rgb(232,65,50)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3133%" y="309" width="0.0803%" height="15" fill="rgb(231,110,28)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3133%" y="293" width="0.0803%" height="15" fill="rgb(216,71,40)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3133%" y="277" width="0.0803%" height="15" fill="rgb(229,89,53)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3133%" y="261" width="0.0803%" height="15" fill="rgb(210,124,14)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3133%" y="245" width="0.0803%" height="15" fill="rgb(236,213,6)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3133%" y="229" width="0.0803%" height="15" fill="rgb(228,41,5)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3133%" y="213" width="0.0803%" height="15" fill="rgb(221,167,25)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.3133%" y="197" width="0.0803%" height="15" fill="rgb(228,144,37)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.3133%" y="181" width="0.0803%" height="15" fill="rgb(227,189,38)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.3133%" y="165" width="0.0803%" height="15" fill="rgb(218,8,2)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.3133%" y="149" width="0.0803%" height="15" fill="rgb(209,61,28)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3133%" y="133" width="0.0803%" height="15" fill="rgb(233,140,39)" fg:x="1224" fg:w="1"/><text x="98.5633%" y="143.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.3133%" y="437" width="0.1606%" height="15" fill="rgb(251,66,48)" fg:x="1224" fg:w="2"/><text x="98.5633%" y="447.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="98.3133%" y="421" width="0.1606%" height="15" fill="rgb(210,44,45)" fg:x="1224" fg:w="2"/><text x="98.5633%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="98.3133%" y="405" width="0.1606%" height="15" fill="rgb(214,136,46)" fg:x="1224" fg:w="2"/><text x="98.5633%" y="415.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="98.3133%" y="389" width="0.1606%" height="15" fill="rgb(207,130,50)" fg:x="1224" fg:w="2"/><text x="98.5633%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="98.3133%" y="373" width="0.1606%" height="15" fill="rgb(228,102,49)" fg:x="1224" fg:w="2"/><text x="98.5633%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3936%" y="357" width="0.0803%" height="15" fill="rgb(253,55,1)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3936%" y="341" width="0.0803%" height="15" fill="rgb(238,222,9)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3936%" y="325" width="0.0803%" height="15" fill="rgb(246,99,6)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3936%" y="309" width="0.0803%" height="15" fill="rgb(219,110,26)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.3936%" y="293" width="0.0803%" height="15" fill="rgb(239,160,33)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3936%" y="277" width="0.0803%" height="15" fill="rgb(220,202,23)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3936%" y="261" width="0.0803%" height="15" fill="rgb(208,80,26)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3936%" y="245" width="0.0803%" height="15" fill="rgb(243,85,7)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3936%" y="229" width="0.0803%" height="15" fill="rgb(228,77,47)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3936%" y="213" width="0.0803%" height="15" fill="rgb(212,226,8)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3936%" y="197" width="0.0803%" height="15" fill="rgb(241,120,54)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3936%" y="181" width="0.0803%" height="15" fill="rgb(226,80,16)" fg:x="1225" fg:w="1"/><text x="98.6436%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6345%" y="293" width="0.0803%" height="15" fill="rgb(240,76,13)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6345%" y="277" width="0.0803%" height="15" fill="rgb(252,74,8)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6345%" y="261" width="0.0803%" height="15" fill="rgb(244,155,2)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6345%" y="245" width="0.0803%" height="15" fill="rgb(215,81,35)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6345%" y="229" width="0.0803%" height="15" fill="rgb(206,55,2)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6345%" y="213" width="0.0803%" height="15" fill="rgb(231,2,34)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6345%" y="197" width="0.0803%" height="15" fill="rgb(242,176,48)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6345%" y="181" width="0.0803%" height="15" fill="rgb(249,31,36)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6345%" y="165" width="0.0803%" height="15" fill="rgb(205,18,17)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6345%" y="149" width="0.0803%" height="15" fill="rgb(254,130,5)" fg:x="1228" fg:w="1"/><text x="98.8845%" y="159.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="98.4739%" y="421" width="0.3213%" height="15" fill="rgb(229,42,45)" fg:x="1226" fg:w="4"/><text x="98.7239%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="98.4739%" y="405" width="0.3213%" height="15" fill="rgb(245,95,25)" fg:x="1226" fg:w="4"/><text x="98.7239%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="98.4739%" y="389" width="0.3213%" height="15" fill="rgb(249,193,38)" fg:x="1226" fg:w="4"/><text x="98.7239%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="98.4739%" y="373" width="0.3213%" height="15" fill="rgb(241,140,43)" fg:x="1226" fg:w="4"/><text x="98.7239%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="98.5542%" y="357" width="0.2410%" height="15" fill="rgb(245,78,48)" fg:x="1227" fg:w="3"/><text x="98.8042%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.5542%" y="341" width="0.2410%" height="15" fill="rgb(214,92,39)" fg:x="1227" fg:w="3"/><text x="98.8042%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6345%" y="325" width="0.1606%" height="15" fill="rgb(211,189,14)" fg:x="1228" fg:w="2"/><text x="98.8845%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.6345%" y="309" width="0.1606%" height="15" fill="rgb(218,7,24)" fg:x="1228" fg:w="2"/><text x="98.8845%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.7149%" y="293" width="0.0803%" height="15" fill="rgb(224,200,49)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7149%" y="277" width="0.0803%" height="15" fill="rgb(218,210,14)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.7149%" y="261" width="0.0803%" height="15" fill="rgb(234,142,31)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.7149%" y="245" width="0.0803%" height="15" fill="rgb(227,165,2)" fg:x="1229" fg:w="1"/><text x="98.9649%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.8755%" y="277" width="0.0803%" height="15" fill="rgb(232,44,46)" fg:x="1231" fg:w="1"/><text x="99.1255%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.8755%" y="341" width="0.1606%" height="15" fill="rgb(236,149,47)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.8755%" y="325" width="0.1606%" height="15" fill="rgb(227,45,31)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.8755%" y="309" width="0.1606%" height="15" fill="rgb(240,176,51)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.8755%" y="293" width="0.1606%" height="15" fill="rgb(249,146,41)" fg:x="1231" fg:w="2"/><text x="99.1255%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9558%" y="277" width="0.0803%" height="15" fill="rgb(213,208,4)" fg:x="1232" fg:w="1"/><text x="99.2058%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.0361%" y="213" width="0.0803%" height="15" fill="rgb(245,84,36)" fg:x="1233" fg:w="1"/><text x="99.2861%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (9 samples, 0.72%)</title><rect x="98.4739%" y="437" width="0.7229%" height="15" fill="rgb(254,84,18)" fg:x="1226" fg:w="9"/><text x="98.7239%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="98.7952%" y="421" width="0.4016%" height="15" fill="rgb(225,38,54)" fg:x="1230" fg:w="5"/><text x="99.0452%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="98.7952%" y="405" width="0.4016%" height="15" fill="rgb(246,50,30)" fg:x="1230" fg:w="5"/><text x="99.0452%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="98.7952%" y="389" width="0.4016%" height="15" fill="rgb(246,148,9)" fg:x="1230" fg:w="5"/><text x="99.0452%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="98.8755%" y="373" width="0.3213%" height="15" fill="rgb(223,75,4)" fg:x="1231" fg:w="4"/><text x="99.1255%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="98.8755%" y="357" width="0.3213%" height="15" fill="rgb(239,148,41)" fg:x="1231" fg:w="4"/><text x="99.1255%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0361%" y="341" width="0.1606%" height="15" fill="rgb(205,195,3)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0361%" y="325" width="0.1606%" height="15" fill="rgb(254,161,1)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="99.0361%" y="309" width="0.1606%" height="15" fill="rgb(211,229,8)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0361%" y="293" width="0.1606%" height="15" fill="rgb(220,97,9)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0361%" y="277" width="0.1606%" height="15" fill="rgb(240,218,8)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="99.0361%" y="261" width="0.1606%" height="15" fill="rgb(250,44,0)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.0361%" y="245" width="0.1606%" height="15" fill="rgb(236,41,53)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.0361%" y="229" width="0.1606%" height="15" fill="rgb(218,227,13)" fg:x="1233" fg:w="2"/><text x="99.2861%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.1165%" y="213" width="0.0803%" height="15" fill="rgb(217,94,32)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1165%" y="197" width="0.0803%" height="15" fill="rgb(213,217,12)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1165%" y="181" width="0.0803%" height="15" fill="rgb(229,13,46)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.1165%" y="165" width="0.0803%" height="15" fill="rgb(243,139,5)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1165%" y="149" width="0.0803%" height="15" fill="rgb(249,38,45)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1165%" y="133" width="0.0803%" height="15" fill="rgb(216,70,11)" fg:x="1234" fg:w="1"/><text x="99.3665%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.1968%" y="437" width="0.0803%" height="15" fill="rgb(253,101,25)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="447.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.1968%" y="421" width="0.0803%" height="15" fill="rgb(207,197,30)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.1968%" y="405" width="0.0803%" height="15" fill="rgb(238,87,13)" fg:x="1235" fg:w="1"/><text x="99.4468%" y="415.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (13 samples, 1.04%)</title><rect x="98.3133%" y="533" width="1.0442%" height="15" fill="rgb(215,155,8)" fg:x="1224" fg:w="13"/><text x="98.5633%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.04%)</title><rect x="98.3133%" y="517" width="1.0442%" height="15" fill="rgb(239,166,38)" fg:x="1224" fg:w="13"/><text x="98.5633%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="98.3133%" y="501" width="1.0442%" height="15" fill="rgb(240,194,35)" fg:x="1224" fg:w="13"/><text x="98.5633%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (13 samples, 1.04%)</title><rect x="98.3133%" y="485" width="1.0442%" height="15" fill="rgb(219,10,44)" fg:x="1224" fg:w="13"/><text x="98.5633%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.04%)</title><rect x="98.3133%" y="469" width="1.0442%" height="15" fill="rgb(251,220,35)" fg:x="1224" fg:w="13"/><text x="98.5633%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="98.3133%" y="453" width="1.0442%" height="15" fill="rgb(218,117,13)" fg:x="1224" fg:w="13"/><text x="98.5633%" y="463.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.2771%" y="437" width="0.0803%" height="15" fill="rgb(221,213,40)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2771%" y="421" width="0.0803%" height="15" fill="rgb(251,224,35)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2771%" y="405" width="0.0803%" height="15" fill="rgb(241,33,39)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.2771%" y="389" width="0.0803%" height="15" fill="rgb(222,74,17)" fg:x="1236" fg:w="1"/><text x="99.5271%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.3574%" y="501" width="0.0803%" height="15" fill="rgb(225,103,0)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3574%" y="485" width="0.0803%" height="15" fill="rgb(240,0,12)" fg:x="1237" fg:w="1"/><text x="99.6074%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (300 samples, 24.10%)</title><rect x="75.5020%" y="789" width="24.0964%" height="15" fill="rgb(233,213,37)" fg:x="940" fg:w="300"/><text x="75.7520%" y="799.50">&lt;engine::session::Session as kernel::a..</text></g><g><title>kernel::plugins::mw::apply_middleware (300 samples, 24.10%)</title><rect x="75.5020%" y="773" width="24.0964%" height="15" fill="rgb(225,84,52)" fg:x="940" fg:w="300"/><text x="75.7520%" y="783.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (300 samples, 24.10%)</title><rect x="75.5020%" y="757" width="24.0964%" height="15" fill="rgb(247,160,51)" fg:x="940" fg:w="300"/><text x="75.7520%" y="767.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (300 samples, 24.10%)</title><rect x="75.5020%" y="741" width="24.0964%" height="15" fill="rgb(244,60,51)" fg:x="940" fg:w="300"/><text x="75.7520%" y="751.50">&lt;engine::session::ExpandSurroundingsMi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (299 samples, 24.02%)</title><rect x="75.5823%" y="725" width="24.0161%" height="15" fill="rgb(233,114,7)" fg:x="941" fg:w="299"/><text x="75.8323%" y="735.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (299 samples, 24.02%)</title><rect x="75.5823%" y="709" width="24.0161%" height="15" fill="rgb(246,136,16)" fg:x="941" fg:w="299"/><text x="75.8323%" y="719.50">&lt;plugins_dynlib::DynamicMiddleware as ..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (298 samples, 23.94%)</title><rect x="75.6627%" y="693" width="23.9357%" height="15" fill="rgb(243,114,45)" fg:x="942" fg:w="298"/><text x="75.9127%" y="703.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (298 samples, 23.94%)</title><rect x="75.6627%" y="677" width="23.9357%" height="15" fill="rgb(247,183,43)" fg:x="942" fg:w="298"/><text x="75.9127%" y="687.50">core::ops::function::FnOnce::call_once..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (298 samples, 23.94%)</title><rect x="75.6627%" y="661" width="23.9357%" height="15" fill="rgb(251,210,42)" fg:x="942" fg:w="298"/><text x="75.9127%" y="671.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (298 samples, 23.94%)</title><rect x="75.6627%" y="645" width="23.9357%" height="15" fill="rgb(221,88,35)" fg:x="942" fg:w="298"/><text x="75.9127%" y="655.50">core::ops::function::FnOnce::call_once..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (298 samples, 23.94%)</title><rect x="75.6627%" y="629" width="23.9357%" height="15" fill="rgb(242,21,20)" fg:x="942" fg:w="298"/><text x="75.9127%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (298 samples, 23.94%)</title><rect x="75.6627%" y="613" width="23.9357%" height="15" fill="rgb(233,226,36)" fg:x="942" fg:w="298"/><text x="75.9127%" y="623.50">&lt;engine::session::state::State as kern..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (298 samples, 23.94%)</title><rect x="75.6627%" y="597" width="23.9357%" height="15" fill="rgb(243,189,34)" fg:x="942" fg:w="298"/><text x="75.9127%" y="607.50">&lt;plugins_core::looking::actions::LookA..</text></g><g><title>plugins_core::looking::model::new_area_observation (298 samples, 23.94%)</title><rect x="75.6627%" y="581" width="23.9357%" height="15" fill="rgb(207,145,50)" fg:x="942" fg:w="298"/><text x="75.9127%" y="591.50">plugins_core::looking::model::new_area..</text></g><g><title>kernel::model::entry::Entry::scope (18 samples, 1.45%)</title><rect x="98.1526%" y="565" width="1.4458%" height="15" fill="rgb(242,1,50)" fg:x="1222" fg:w="18"/><text x="98.4026%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (18 samples, 1.45%)</title><rect x="98.1526%" y="549" width="1.4458%" height="15" fill="rgb(231,65,32)" fg:x="1222" fg:w="18"/><text x="98.4026%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.3574%" y="533" width="0.2410%" height="15" fill="rgb(208,68,49)" fg:x="1237" fg:w="3"/><text x="99.6074%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.3574%" y="517" width="0.2410%" height="15" fill="rgb(253,54,49)" fg:x="1237" fg:w="3"/><text x="99.6074%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="99.4378%" y="501" width="0.1606%" height="15" fill="rgb(245,186,24)" fg:x="1238" fg:w="2"/><text x="99.6878%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="99.4378%" y="485" width="0.1606%" height="15" fill="rgb(209,2,41)" fg:x="1238" fg:w="2"/><text x="99.6878%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="99.4378%" y="469" width="0.1606%" height="15" fill="rgb(242,208,54)" fg:x="1238" fg:w="2"/><text x="99.6878%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.4378%" y="453" width="0.1606%" height="15" fill="rgb(225,9,51)" fg:x="1238" fg:w="2"/><text x="99.6878%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.4378%" y="437" width="0.1606%" height="15" fill="rgb(207,207,25)" fg:x="1238" fg:w="2"/><text x="99.6878%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5181%" y="421" width="0.0803%" height="15" fill="rgb(253,96,18)" fg:x="1239" fg:w="1"/><text x="99.7681%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5984%" y="629" width="0.0803%" height="15" fill="rgb(252,215,20)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5984%" y="613" width="0.0803%" height="15" fill="rgb(245,227,26)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5984%" y="597" width="0.0803%" height="15" fill="rgb(241,208,0)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5984%" y="581" width="0.0803%" height="15" fill="rgb(224,130,10)" fg:x="1240" fg:w="1"/><text x="99.8484%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.5984%" y="661" width="0.1606%" height="15" fill="rgb(237,29,0)" fg:x="1240" fg:w="2"/><text x="99.8484%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5984%" y="645" width="0.1606%" height="15" fill="rgb(219,27,41)" fg:x="1240" fg:w="2"/><text x="99.8484%" y="655.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6787%" y="629" width="0.0803%" height="15" fill="rgb(245,101,19)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="639.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6787%" y="613" width="0.0803%" height="15" fill="rgb(243,44,37)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6787%" y="597" width="0.0803%" height="15" fill="rgb(228,213,43)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6787%" y="581" width="0.0803%" height="15" fill="rgb(219,163,21)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="591.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6787%" y="565" width="0.0803%" height="15" fill="rgb(234,86,24)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6787%" y="549" width="0.0803%" height="15" fill="rgb(225,10,24)" fg:x="1241" fg:w="1"/><text x="99.9287%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.5984%" y="789" width="0.2410%" height="15" fill="rgb(218,109,7)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="799.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5984%" y="773" width="0.2410%" height="15" fill="rgb(210,20,26)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="99.5984%" y="757" width="0.2410%" height="15" fill="rgb(216,18,1)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5984%" y="741" width="0.2410%" height="15" fill="rgb(206,163,23)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="751.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5984%" y="725" width="0.2410%" height="15" fill="rgb(229,150,31)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.5984%" y="709" width="0.2410%" height="15" fill="rgb(231,10,5)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5984%" y="693" width="0.2410%" height="15" fill="rgb(250,40,50)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="703.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.5984%" y="677" width="0.2410%" height="15" fill="rgb(217,119,7)" fg:x="1240" fg:w="3"/><text x="99.8484%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7590%" y="661" width="0.0803%" height="15" fill="rgb(245,214,40)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="671.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7590%" y="645" width="0.0803%" height="15" fill="rgb(216,187,1)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7590%" y="629" width="0.0803%" height="15" fill="rgb(237,146,21)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7590%" y="613" width="0.0803%" height="15" fill="rgb(210,174,47)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7590%" y="597" width="0.0803%" height="15" fill="rgb(218,111,39)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7590%" y="581" width="0.0803%" height="15" fill="rgb(224,95,19)" fg:x="1242" fg:w="1"/><text x="100.0090%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="99.8394%" y="789" width="0.0803%" height="15" fill="rgb(234,15,38)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.8394%" y="773" width="0.0803%" height="15" fill="rgb(246,56,12)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="783.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.8394%" y="757" width="0.0803%" height="15" fill="rgb(247,16,17)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="767.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.8394%" y="741" width="0.0803%" height="15" fill="rgb(215,151,11)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="99.8394%" y="725" width="0.0803%" height="15" fill="rgb(225,16,24)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.8394%" y="709" width="0.0803%" height="15" fill="rgb(217,117,5)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.8394%" y="693" width="0.0803%" height="15" fill="rgb(246,187,53)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.8394%" y="677" width="0.0803%" height="15" fill="rgb(241,71,40)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8394%" y="661" width="0.0803%" height="15" fill="rgb(231,67,39)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8394%" y="645" width="0.0803%" height="15" fill="rgb(222,120,24)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8394%" y="629" width="0.0803%" height="15" fill="rgb(248,3,3)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8394%" y="613" width="0.0803%" height="15" fill="rgb(228,218,5)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.8394%" y="597" width="0.0803%" height="15" fill="rgb(212,202,43)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8394%" y="581" width="0.0803%" height="15" fill="rgb(235,183,2)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8394%" y="565" width="0.0803%" height="15" fill="rgb(230,165,10)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.8394%" y="549" width="0.0803%" height="15" fill="rgb(219,54,40)" fg:x="1243" fg:w="1"/><text x="100.0894%" y="559.50"></text></g><g><title>all (1,245 samples, 100%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(244,73,9)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1167.50"></text></g><g><title>simple-3bf81e8b (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(212,32,45)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1151.50">simple-3bf81e8b</text></g><g><title>_start (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(205,58,31)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1135.50">_start</text></g><g><title>__libc_start_main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(250,120,43)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1119.50">__libc_start_main</text></g><g><title>main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(235,13,10)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1103.50">main</text></g><g><title>std::rt::lang_start_internal (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(232,219,31)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1087.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(218,157,51)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(211,91,52)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(240,173,1)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1039.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,245 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(248,20,47)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,245 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(217,221,40)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,245 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(226,149,51)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,245 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(252,193,7)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,245 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(205,123,0)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="959.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,245 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(233,173,25)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="943.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,245 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(216,63,32)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="927.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,245 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(209,56,45)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="911.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,245 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(226,111,49)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="895.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,245 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(244,181,21)" fg:x="0" fg:w="1245"/><text x="0.2500%" y="879.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (378 samples, 30.36%)</title><rect x="69.6386%" y="853" width="30.3614%" height="15" fill="rgb(222,126,15)" fg:x="867" fg:w="378"/><text x="69.8886%" y="863.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (378 samples, 30.36%)</title><rect x="69.6386%" y="837" width="30.3614%" height="15" fill="rgb(222,95,17)" fg:x="867" fg:w="378"/><text x="69.8886%" y="847.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (378 samples, 30.36%)</title><rect x="69.6386%" y="821" width="30.3614%" height="15" fill="rgb(254,46,5)" fg:x="867" fg:w="378"/><text x="69.8886%" y="831.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (305 samples, 24.50%)</title><rect x="75.5020%" y="805" width="24.4980%" height="15" fill="rgb(236,216,35)" fg:x="940" fg:w="305"/><text x="75.7520%" y="815.50">engine::session::Session::evaluate_and_..</text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.9197%" y="789" width="0.0803%" height="15" fill="rgb(217,187,26)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="799.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.9197%" y="773" width="0.0803%" height="15" fill="rgb(207,192,25)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="783.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.9197%" y="757" width="0.0803%" height="15" fill="rgb(253,135,27)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="767.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9197%" y="741" width="0.0803%" height="15" fill="rgb(211,122,29)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="751.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.9197%" y="725" width="0.0803%" height="15" fill="rgb(233,162,40)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="735.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.9197%" y="709" width="0.0803%" height="15" fill="rgb(222,184,47)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="719.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.9197%" y="693" width="0.0803%" height="15" fill="rgb(249,99,23)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9197%" y="677" width="0.0803%" height="15" fill="rgb(214,60,12)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.9197%" y="661" width="0.0803%" height="15" fill="rgb(250,229,36)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.9197%" y="645" width="0.0803%" height="15" fill="rgb(232,195,10)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.9197%" y="629" width="0.0803%" height="15" fill="rgb(205,213,31)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9197%" y="613" width="0.0803%" height="15" fill="rgb(237,43,8)" fg:x="1244" fg:w="1"/><text x="100.1697%" y="623.50"></text></g></svg></svg>