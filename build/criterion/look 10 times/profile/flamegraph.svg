<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1255"><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0797%" height="15" fill="rgb(210,51,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0797%" y="629" width="0.0797%" height="15" fill="rgb(242,136,47)" fg:x="1" fg:w="1"/><text x="0.3297%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0797%" y="613" width="0.0797%" height="15" fill="rgb(238,68,4)" fg:x="1" fg:w="1"/><text x="0.3297%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1594%" y="613" width="0.0797%" height="15" fill="rgb(242,161,30)" fg:x="2" fg:w="1"/><text x="0.4094%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1594%" y="597" width="0.0797%" height="15" fill="rgb(218,58,44)" fg:x="2" fg:w="1"/><text x="0.4094%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1594%" y="581" width="0.0797%" height="15" fill="rgb(252,125,32)" fg:x="2" fg:w="1"/><text x="0.4094%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.2390%" y="613" width="0.1594%" height="15" fill="rgb(219,178,0)" fg:x="3" fg:w="2"/><text x="0.4890%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="741" width="0.4781%" height="15" fill="rgb(213,152,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="0.0797%" y="725" width="0.3984%" height="15" fill="rgb(249,109,34)" fg:x="1" fg:w="5"/><text x="0.3297%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0797%" y="709" width="0.3984%" height="15" fill="rgb(232,96,21)" fg:x="1" fg:w="5"/><text x="0.3297%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="0.0797%" y="693" width="0.3984%" height="15" fill="rgb(228,27,39)" fg:x="1" fg:w="5"/><text x="0.3297%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0797%" y="677" width="0.3984%" height="15" fill="rgb(211,182,52)" fg:x="1" fg:w="5"/><text x="0.3297%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0797%" y="661" width="0.3984%" height="15" fill="rgb(234,178,38)" fg:x="1" fg:w="5"/><text x="0.3297%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0797%" y="645" width="0.3984%" height="15" fill="rgb(221,111,3)" fg:x="1" fg:w="5"/><text x="0.3297%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.1594%" y="629" width="0.3187%" height="15" fill="rgb(228,175,21)" fg:x="2" fg:w="4"/><text x="0.4094%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3984%" y="613" width="0.0797%" height="15" fill="rgb(228,174,43)" fg:x="5" fg:w="1"/><text x="0.6484%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3984%" y="597" width="0.0797%" height="15" fill="rgb(211,191,0)" fg:x="5" fg:w="1"/><text x="0.6484%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.4781%" y="693" width="0.0797%" height="15" fill="rgb(253,117,3)" fg:x="6" fg:w="1"/><text x="0.7281%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="0.4781%" y="677" width="0.0797%" height="15" fill="rgb(241,127,19)" fg:x="6" fg:w="1"/><text x="0.7281%" y="687.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="0.5578%" y="629" width="0.1594%" height="15" fill="rgb(218,103,12)" fg:x="7" fg:w="2"/><text x="0.8078%" y="639.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.6375%" y="613" width="0.0797%" height="15" fill="rgb(236,214,43)" fg:x="8" fg:w="1"/><text x="0.8875%" y="623.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.08%)</title><rect x="0.6375%" y="597" width="0.0797%" height="15" fill="rgb(244,144,19)" fg:x="8" fg:w="1"/><text x="0.8875%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.56%)</title><rect x="0.5578%" y="677" width="0.5578%" height="15" fill="rgb(246,188,10)" fg:x="7" fg:w="7"/><text x="0.8078%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="0.5578%" y="661" width="0.5578%" height="15" fill="rgb(212,193,33)" fg:x="7" fg:w="7"/><text x="0.8078%" y="671.50"></text></g><g><title>libloading::safe::Library::new (7 samples, 0.56%)</title><rect x="0.5578%" y="645" width="0.5578%" height="15" fill="rgb(241,51,29)" fg:x="7" fg:w="7"/><text x="0.8078%" y="655.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="0.7171%" y="629" width="0.3984%" height="15" fill="rgb(211,58,19)" fg:x="9" fg:w="5"/><text x="0.9671%" y="639.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="0.7171%" y="613" width="0.3984%" height="15" fill="rgb(229,111,26)" fg:x="9" fg:w="5"/><text x="0.9671%" y="623.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="0.7171%" y="597" width="0.3984%" height="15" fill="rgb(213,115,40)" fg:x="9" fg:w="5"/><text x="0.9671%" y="607.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="0.7171%" y="581" width="0.3984%" height="15" fill="rgb(209,56,44)" fg:x="9" fg:w="5"/><text x="0.9671%" y="591.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="0.7171%" y="565" width="0.3984%" height="15" fill="rgb(230,108,32)" fg:x="9" fg:w="5"/><text x="0.9671%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.0359%" y="549" width="0.0797%" height="15" fill="rgb(216,165,31)" fg:x="13" fg:w="1"/><text x="1.2859%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (11 samples, 0.88%)</title><rect x="0.4781%" y="741" width="0.8765%" height="15" fill="rgb(218,122,21)" fg:x="6" fg:w="11"/><text x="0.7281%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (11 samples, 0.88%)</title><rect x="0.4781%" y="725" width="0.8765%" height="15" fill="rgb(223,224,47)" fg:x="6" fg:w="11"/><text x="0.7281%" y="735.50"></text></g><g><title>engine::session::Session::new (11 samples, 0.88%)</title><rect x="0.4781%" y="709" width="0.8765%" height="15" fill="rgb(238,102,44)" fg:x="6" fg:w="11"/><text x="0.7281%" y="719.50"></text></g><g><title>engine::session::Session::initialize (10 samples, 0.80%)</title><rect x="0.5578%" y="693" width="0.7968%" height="15" fill="rgb(236,46,40)" fg:x="7" fg:w="10"/><text x="0.8078%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (3 samples, 0.24%)</title><rect x="1.1155%" y="677" width="0.2390%" height="15" fill="rgb(247,202,50)" fg:x="14" fg:w="3"/><text x="1.3655%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="1.1155%" y="661" width="0.2390%" height="15" fill="rgb(209,99,20)" fg:x="14" fg:w="3"/><text x="1.3655%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="1.1155%" y="645" width="0.2390%" height="15" fill="rgb(252,27,34)" fg:x="14" fg:w="3"/><text x="1.3655%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="1.1155%" y="629" width="0.2390%" height="15" fill="rgb(215,206,23)" fg:x="14" fg:w="3"/><text x="1.3655%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="1.1155%" y="613" width="0.2390%" height="15" fill="rgb(212,135,36)" fg:x="14" fg:w="3"/><text x="1.3655%" y="623.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="1.1155%" y="597" width="0.2390%" height="15" fill="rgb(240,189,1)" fg:x="14" fg:w="3"/><text x="1.3655%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="1.3546%" y="725" width="0.0797%" height="15" fill="rgb(242,56,20)" fg:x="17" fg:w="1"/><text x="1.6046%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.3546%" y="709" width="0.0797%" height="15" fill="rgb(247,132,33)" fg:x="17" fg:w="1"/><text x="1.6046%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.3546%" y="693" width="0.0797%" height="15" fill="rgb(208,149,11)" fg:x="17" fg:w="1"/><text x="1.6046%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3546%" y="677" width="0.0797%" height="15" fill="rgb(211,33,11)" fg:x="17" fg:w="1"/><text x="1.6046%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="1.4343%" y="613" width="0.2390%" height="15" fill="rgb(221,29,38)" fg:x="18" fg:w="3"/><text x="1.6843%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.5139%" y="597" width="0.1594%" height="15" fill="rgb(206,182,49)" fg:x="19" fg:w="2"/><text x="1.7639%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.5139%" y="581" width="0.1594%" height="15" fill="rgb(216,140,1)" fg:x="19" fg:w="2"/><text x="1.7639%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="1.5139%" y="565" width="0.1594%" height="15" fill="rgb(232,57,40)" fg:x="19" fg:w="2"/><text x="1.7639%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.6733%" y="597" width="0.0797%" height="15" fill="rgb(224,186,18)" fg:x="21" fg:w="1"/><text x="1.9233%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7530%" y="565" width="0.0797%" height="15" fill="rgb(215,121,11)" fg:x="22" fg:w="1"/><text x="2.0030%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.7530%" y="549" width="0.0797%" height="15" fill="rgb(245,147,10)" fg:x="22" fg:w="1"/><text x="2.0030%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8327%" y="549" width="0.0797%" height="15" fill="rgb(238,153,13)" fg:x="23" fg:w="1"/><text x="2.0827%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.8327%" y="533" width="0.0797%" height="15" fill="rgb(233,108,0)" fg:x="23" fg:w="1"/><text x="2.0827%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8327%" y="517" width="0.0797%" height="15" fill="rgb(212,157,17)" fg:x="23" fg:w="1"/><text x="2.0827%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.6733%" y="613" width="0.3187%" height="15" fill="rgb(225,213,38)" fg:x="21" fg:w="4"/><text x="1.9233%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.7530%" y="597" width="0.2390%" height="15" fill="rgb(248,16,11)" fg:x="22" fg:w="3"/><text x="2.0030%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.7530%" y="581" width="0.2390%" height="15" fill="rgb(241,33,4)" fg:x="22" fg:w="3"/><text x="2.0030%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.8327%" y="565" width="0.1594%" height="15" fill="rgb(222,26,43)" fg:x="23" fg:w="2"/><text x="2.0827%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9124%" y="549" width="0.0797%" height="15" fill="rgb(243,29,36)" fg:x="24" fg:w="1"/><text x="2.1624%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="1.4343%" y="645" width="0.6375%" height="15" fill="rgb(241,9,27)" fg:x="18" fg:w="8"/><text x="1.6843%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="1.4343%" y="629" width="0.6375%" height="15" fill="rgb(205,117,26)" fg:x="18" fg:w="8"/><text x="1.6843%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9920%" y="613" width="0.0797%" height="15" fill="rgb(209,80,39)" fg:x="25" fg:w="1"/><text x="2.2420%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9920%" y="597" width="0.0797%" height="15" fill="rgb(239,155,6)" fg:x="25" fg:w="1"/><text x="2.2420%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.9920%" y="581" width="0.0797%" height="15" fill="rgb(212,104,12)" fg:x="25" fg:w="1"/><text x="2.2420%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.9920%" y="565" width="0.0797%" height="15" fill="rgb(234,204,3)" fg:x="25" fg:w="1"/><text x="2.2420%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.9920%" y="549" width="0.0797%" height="15" fill="rgb(251,218,7)" fg:x="25" fg:w="1"/><text x="2.2420%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.9920%" y="533" width="0.0797%" height="15" fill="rgb(221,81,32)" fg:x="25" fg:w="1"/><text x="2.2420%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0717%" y="645" width="0.0797%" height="15" fill="rgb(214,152,26)" fg:x="26" fg:w="1"/><text x="2.3217%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.0717%" y="629" width="0.0797%" height="15" fill="rgb(223,22,3)" fg:x="26" fg:w="1"/><text x="2.3217%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0717%" y="613" width="0.0797%" height="15" fill="rgb(207,174,7)" fg:x="26" fg:w="1"/><text x="2.3217%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0717%" y="597" width="0.0797%" height="15" fill="rgb(224,19,52)" fg:x="26" fg:w="1"/><text x="2.3217%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0717%" y="581" width="0.0797%" height="15" fill="rgb(228,24,14)" fg:x="26" fg:w="1"/><text x="2.3217%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0717%" y="565" width="0.0797%" height="15" fill="rgb(230,153,43)" fg:x="26" fg:w="1"/><text x="2.3217%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0717%" y="549" width="0.0797%" height="15" fill="rgb(231,106,12)" fg:x="26" fg:w="1"/><text x="2.3217%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0717%" y="533" width="0.0797%" height="15" fill="rgb(215,92,2)" fg:x="26" fg:w="1"/><text x="2.3217%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1514%" y="597" width="0.0797%" height="15" fill="rgb(249,143,25)" fg:x="27" fg:w="1"/><text x="2.4014%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.1514%" y="581" width="0.0797%" height="15" fill="rgb(252,7,35)" fg:x="27" fg:w="1"/><text x="2.4014%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.1514%" y="565" width="0.0797%" height="15" fill="rgb(216,69,40)" fg:x="27" fg:w="1"/><text x="2.4014%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.1514%" y="549" width="0.0797%" height="15" fill="rgb(240,36,33)" fg:x="27" fg:w="1"/><text x="2.4014%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.3108%" y="549" width="0.0797%" height="15" fill="rgb(231,128,14)" fg:x="29" fg:w="1"/><text x="2.5608%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3108%" y="533" width="0.0797%" height="15" fill="rgb(245,143,14)" fg:x="29" fg:w="1"/><text x="2.5608%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.3108%" y="517" width="0.0797%" height="15" fill="rgb(222,130,28)" fg:x="29" fg:w="1"/><text x="2.5608%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3108%" y="501" width="0.0797%" height="15" fill="rgb(212,10,48)" fg:x="29" fg:w="1"/><text x="2.5608%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3108%" y="485" width="0.0797%" height="15" fill="rgb(254,118,45)" fg:x="29" fg:w="1"/><text x="2.5608%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="2.2311%" y="565" width="0.3984%" height="15" fill="rgb(228,6,45)" fg:x="28" fg:w="5"/><text x="2.4811%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="2.3904%" y="549" width="0.2390%" height="15" fill="rgb(241,18,35)" fg:x="30" fg:w="3"/><text x="2.6404%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4701%" y="533" width="0.1594%" height="15" fill="rgb(227,214,53)" fg:x="31" fg:w="2"/><text x="2.7201%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4701%" y="517" width="0.1594%" height="15" fill="rgb(224,107,51)" fg:x="31" fg:w="2"/><text x="2.7201%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4701%" y="501" width="0.1594%" height="15" fill="rgb(248,60,28)" fg:x="31" fg:w="2"/><text x="2.7201%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4701%" y="485" width="0.1594%" height="15" fill="rgb(249,101,23)" fg:x="31" fg:w="2"/><text x="2.7201%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4701%" y="469" width="0.1594%" height="15" fill="rgb(228,51,19)" fg:x="31" fg:w="2"/><text x="2.7201%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4701%" y="453" width="0.1594%" height="15" fill="rgb(213,20,6)" fg:x="31" fg:w="2"/><text x="2.7201%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.4701%" y="437" width="0.1594%" height="15" fill="rgb(212,124,10)" fg:x="31" fg:w="2"/><text x="2.7201%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.4701%" y="421" width="0.1594%" height="15" fill="rgb(248,3,40)" fg:x="31" fg:w="2"/><text x="2.7201%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.4701%" y="405" width="0.1594%" height="15" fill="rgb(223,178,23)" fg:x="31" fg:w="2"/><text x="2.7201%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.4701%" y="389" width="0.1594%" height="15" fill="rgb(240,132,45)" fg:x="31" fg:w="2"/><text x="2.7201%" y="399.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.43%)</title><rect x="1.4343%" y="725" width="1.4343%" height="15" fill="rgb(245,164,36)" fg:x="18" fg:w="18"/><text x="1.6843%" y="735.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.43%)</title><rect x="1.4343%" y="709" width="1.4343%" height="15" fill="rgb(231,188,53)" fg:x="18" fg:w="18"/><text x="1.6843%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.43%)</title><rect x="1.4343%" y="693" width="1.4343%" height="15" fill="rgb(237,198,39)" fg:x="18" fg:w="18"/><text x="1.6843%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (18 samples, 1.43%)</title><rect x="1.4343%" y="677" width="1.4343%" height="15" fill="rgb(223,120,35)" fg:x="18" fg:w="18"/><text x="1.6843%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.43%)</title><rect x="1.4343%" y="661" width="1.4343%" height="15" fill="rgb(253,107,49)" fg:x="18" fg:w="18"/><text x="1.6843%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="2.1514%" y="645" width="0.7171%" height="15" fill="rgb(216,44,31)" fg:x="27" fg:w="9"/><text x="2.4014%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="2.1514%" y="629" width="0.7171%" height="15" fill="rgb(253,87,21)" fg:x="27" fg:w="9"/><text x="2.4014%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="2.1514%" y="613" width="0.7171%" height="15" fill="rgb(226,18,2)" fg:x="27" fg:w="9"/><text x="2.4014%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="2.2311%" y="597" width="0.6375%" height="15" fill="rgb(216,8,46)" fg:x="28" fg:w="8"/><text x="2.4811%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="2.2311%" y="581" width="0.6375%" height="15" fill="rgb(226,140,39)" fg:x="28" fg:w="8"/><text x="2.4811%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="2.6295%" y="565" width="0.2390%" height="15" fill="rgb(221,194,54)" fg:x="33" fg:w="3"/><text x="2.8795%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.7888%" y="549" width="0.0797%" height="15" fill="rgb(213,92,11)" fg:x="35" fg:w="1"/><text x="3.0388%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="2.8685%" y="693" width="0.0797%" height="15" fill="rgb(229,162,46)" fg:x="36" fg:w="1"/><text x="3.1185%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8685%" y="677" width="0.0797%" height="15" fill="rgb(214,111,36)" fg:x="36" fg:w="1"/><text x="3.1185%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="2.9482%" y="693" width="0.0797%" height="15" fill="rgb(207,6,21)" fg:x="37" fg:w="1"/><text x="3.1982%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.9482%" y="677" width="0.0797%" height="15" fill="rgb(213,127,38)" fg:x="37" fg:w="1"/><text x="3.1982%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.9482%" y="661" width="0.0797%" height="15" fill="rgb(238,118,32)" fg:x="37" fg:w="1"/><text x="3.1982%" y="671.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.9482%" y="645" width="0.0797%" height="15" fill="rgb(240,139,39)" fg:x="37" fg:w="1"/><text x="3.1982%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9482%" y="629" width="0.0797%" height="15" fill="rgb(235,10,37)" fg:x="37" fg:w="1"/><text x="3.1982%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.0279%" y="677" width="0.0797%" height="15" fill="rgb(249,171,38)" fg:x="38" fg:w="1"/><text x="3.2779%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.0279%" y="661" width="0.0797%" height="15" fill="rgb(242,144,32)" fg:x="38" fg:w="1"/><text x="3.2779%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.0279%" y="645" width="0.0797%" height="15" fill="rgb(217,117,21)" fg:x="38" fg:w="1"/><text x="3.2779%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0279%" y="629" width="0.0797%" height="15" fill="rgb(249,87,1)" fg:x="38" fg:w="1"/><text x="3.2779%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0279%" y="613" width="0.0797%" height="15" fill="rgb(248,196,48)" fg:x="38" fg:w="1"/><text x="3.2779%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0279%" y="597" width="0.0797%" height="15" fill="rgb(251,206,33)" fg:x="38" fg:w="1"/><text x="3.2779%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0279%" y="581" width="0.0797%" height="15" fill="rgb(232,141,28)" fg:x="38" fg:w="1"/><text x="3.2779%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="2.8685%" y="709" width="0.3187%" height="15" fill="rgb(209,167,14)" fg:x="36" fg:w="4"/><text x="3.1185%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.0279%" y="693" width="0.1594%" height="15" fill="rgb(225,11,50)" fg:x="38" fg:w="2"/><text x="3.2779%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="3.1076%" y="677" width="0.0797%" height="15" fill="rgb(209,50,20)" fg:x="39" fg:w="1"/><text x="3.3576%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1076%" y="661" width="0.0797%" height="15" fill="rgb(212,17,46)" fg:x="39" fg:w="1"/><text x="3.3576%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1076%" y="645" width="0.0797%" height="15" fill="rgb(216,101,39)" fg:x="39" fg:w="1"/><text x="3.3576%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.1076%" y="629" width="0.0797%" height="15" fill="rgb(212,228,48)" fg:x="39" fg:w="1"/><text x="3.3576%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1076%" y="613" width="0.0797%" height="15" fill="rgb(250,6,50)" fg:x="39" fg:w="1"/><text x="3.3576%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="3.1873%" y="693" width="0.0797%" height="15" fill="rgb(250,160,48)" fg:x="40" fg:w="1"/><text x="3.4373%" y="703.50"></text></g><g><title>&lt;kernel::model::entry::OpenedScopeMut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.1873%" y="677" width="0.0797%" height="15" fill="rgb(244,216,33)" fg:x="40" fg:w="1"/><text x="3.4373%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="3.2669%" y="629" width="0.0797%" height="15" fill="rgb(207,157,5)" fg:x="41" fg:w="1"/><text x="3.5169%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2669%" y="613" width="0.0797%" height="15" fill="rgb(228,199,8)" fg:x="41" fg:w="1"/><text x="3.5169%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="2.8685%" y="725" width="0.5578%" height="15" fill="rgb(227,80,20)" fg:x="36" fg:w="7"/><text x="3.1185%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="3.1873%" y="709" width="0.2390%" height="15" fill="rgb(222,9,33)" fg:x="40" fg:w="3"/><text x="3.4373%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="3.2669%" y="693" width="0.1594%" height="15" fill="rgb(239,44,28)" fg:x="41" fg:w="2"/><text x="3.5169%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.2669%" y="677" width="0.1594%" height="15" fill="rgb(249,187,43)" fg:x="41" fg:w="2"/><text x="3.5169%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.2669%" y="661" width="0.1594%" height="15" fill="rgb(216,141,28)" fg:x="41" fg:w="2"/><text x="3.5169%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.2669%" y="645" width="0.1594%" height="15" fill="rgb(230,154,53)" fg:x="41" fg:w="2"/><text x="3.5169%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.3466%" y="629" width="0.0797%" height="15" fill="rgb(227,82,4)" fg:x="42" fg:w="1"/><text x="3.5966%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.3466%" y="613" width="0.0797%" height="15" fill="rgb(220,107,16)" fg:x="42" fg:w="1"/><text x="3.5966%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.3466%" y="597" width="0.0797%" height="15" fill="rgb(207,187,2)" fg:x="42" fg:w="1"/><text x="3.5966%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.3466%" y="581" width="0.0797%" height="15" fill="rgb(210,162,52)" fg:x="42" fg:w="1"/><text x="3.5966%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.3466%" y="565" width="0.0797%" height="15" fill="rgb(217,216,49)" fg:x="42" fg:w="1"/><text x="3.5966%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.3466%" y="549" width="0.0797%" height="15" fill="rgb(218,146,49)" fg:x="42" fg:w="1"/><text x="3.5966%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.3466%" y="533" width="0.0797%" height="15" fill="rgb(216,55,40)" fg:x="42" fg:w="1"/><text x="3.5966%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3466%" y="517" width="0.0797%" height="15" fill="rgb(208,196,21)" fg:x="42" fg:w="1"/><text x="3.5966%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4263%" y="645" width="0.0797%" height="15" fill="rgb(242,117,42)" fg:x="43" fg:w="1"/><text x="3.6763%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4263%" y="629" width="0.0797%" height="15" fill="rgb(210,11,23)" fg:x="43" fg:w="1"/><text x="3.6763%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4263%" y="613" width="0.0797%" height="15" fill="rgb(217,110,2)" fg:x="43" fg:w="1"/><text x="3.6763%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4263%" y="597" width="0.0797%" height="15" fill="rgb(229,77,54)" fg:x="43" fg:w="1"/><text x="3.6763%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4263%" y="581" width="0.0797%" height="15" fill="rgb(218,53,16)" fg:x="43" fg:w="1"/><text x="3.6763%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.4263%" y="565" width="0.0797%" height="15" fill="rgb(215,38,13)" fg:x="43" fg:w="1"/><text x="3.6763%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.4263%" y="549" width="0.0797%" height="15" fill="rgb(235,42,18)" fg:x="43" fg:w="1"/><text x="3.6763%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.4263%" y="533" width="0.0797%" height="15" fill="rgb(219,66,54)" fg:x="43" fg:w="1"/><text x="3.6763%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4263%" y="517" width="0.0797%" height="15" fill="rgb(222,205,4)" fg:x="43" fg:w="1"/><text x="3.6763%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4263%" y="501" width="0.0797%" height="15" fill="rgb(227,213,46)" fg:x="43" fg:w="1"/><text x="3.6763%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.4263%" y="485" width="0.0797%" height="15" fill="rgb(250,145,42)" fg:x="43" fg:w="1"/><text x="3.6763%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.4263%" y="469" width="0.0797%" height="15" fill="rgb(219,15,2)" fg:x="43" fg:w="1"/><text x="3.6763%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.4263%" y="453" width="0.0797%" height="15" fill="rgb(231,181,52)" fg:x="43" fg:w="1"/><text x="3.6763%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.4263%" y="437" width="0.0797%" height="15" fill="rgb(235,1,42)" fg:x="43" fg:w="1"/><text x="3.6763%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4263%" y="421" width="0.0797%" height="15" fill="rgb(249,88,27)" fg:x="43" fg:w="1"/><text x="3.6763%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.4263%" y="693" width="0.1594%" height="15" fill="rgb(235,145,16)" fg:x="43" fg:w="2"/><text x="3.6763%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.4263%" y="677" width="0.1594%" height="15" fill="rgb(237,114,19)" fg:x="43" fg:w="2"/><text x="3.6763%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.4263%" y="661" width="0.1594%" height="15" fill="rgb(238,51,50)" fg:x="43" fg:w="2"/><text x="3.6763%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.5060%" y="645" width="0.0797%" height="15" fill="rgb(205,194,25)" fg:x="44" fg:w="1"/><text x="3.7560%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5060%" y="629" width="0.0797%" height="15" fill="rgb(215,203,17)" fg:x="44" fg:w="1"/><text x="3.7560%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.5060%" y="613" width="0.0797%" height="15" fill="rgb(233,112,49)" fg:x="44" fg:w="1"/><text x="3.7560%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5060%" y="597" width="0.0797%" height="15" fill="rgb(241,130,26)" fg:x="44" fg:w="1"/><text x="3.7560%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.5060%" y="581" width="0.0797%" height="15" fill="rgb(252,223,19)" fg:x="44" fg:w="1"/><text x="3.7560%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5060%" y="565" width="0.0797%" height="15" fill="rgb(211,95,25)" fg:x="44" fg:w="1"/><text x="3.7560%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="3.4263%" y="725" width="0.2390%" height="15" fill="rgb(251,182,27)" fg:x="43" fg:w="3"/><text x="3.6763%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="3.4263%" y="709" width="0.2390%" height="15" fill="rgb(238,24,4)" fg:x="43" fg:w="3"/><text x="3.6763%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.5857%" y="693" width="0.0797%" height="15" fill="rgb(224,220,25)" fg:x="45" fg:w="1"/><text x="3.8357%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.5857%" y="677" width="0.0797%" height="15" fill="rgb(239,133,26)" fg:x="45" fg:w="1"/><text x="3.8357%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.5857%" y="661" width="0.0797%" height="15" fill="rgb(211,94,48)" fg:x="45" fg:w="1"/><text x="3.8357%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.5857%" y="645" width="0.0797%" height="15" fill="rgb(239,87,6)" fg:x="45" fg:w="1"/><text x="3.8357%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.5857%" y="629" width="0.0797%" height="15" fill="rgb(227,62,0)" fg:x="45" fg:w="1"/><text x="3.8357%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5857%" y="613" width="0.0797%" height="15" fill="rgb(211,226,4)" fg:x="45" fg:w="1"/><text x="3.8357%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5857%" y="597" width="0.0797%" height="15" fill="rgb(253,38,52)" fg:x="45" fg:w="1"/><text x="3.8357%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5857%" y="581" width="0.0797%" height="15" fill="rgb(229,126,40)" fg:x="45" fg:w="1"/><text x="3.8357%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5857%" y="565" width="0.0797%" height="15" fill="rgb(229,165,44)" fg:x="45" fg:w="1"/><text x="3.8357%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.5857%" y="549" width="0.0797%" height="15" fill="rgb(247,95,47)" fg:x="45" fg:w="1"/><text x="3.8357%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5857%" y="533" width="0.0797%" height="15" fill="rgb(216,140,30)" fg:x="45" fg:w="1"/><text x="3.8357%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5857%" y="517" width="0.0797%" height="15" fill="rgb(246,214,8)" fg:x="45" fg:w="1"/><text x="3.8357%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5857%" y="501" width="0.0797%" height="15" fill="rgb(227,224,15)" fg:x="45" fg:w="1"/><text x="3.8357%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.6653%" y="709" width="0.0797%" height="15" fill="rgb(233,175,4)" fg:x="46" fg:w="1"/><text x="3.9153%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.6653%" y="693" width="0.0797%" height="15" fill="rgb(221,66,45)" fg:x="46" fg:w="1"/><text x="3.9153%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6653%" y="677" width="0.0797%" height="15" fill="rgb(221,178,18)" fg:x="46" fg:w="1"/><text x="3.9153%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6653%" y="661" width="0.0797%" height="15" fill="rgb(213,81,29)" fg:x="46" fg:w="1"/><text x="3.9153%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6653%" y="645" width="0.0797%" height="15" fill="rgb(220,89,49)" fg:x="46" fg:w="1"/><text x="3.9153%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6653%" y="629" width="0.0797%" height="15" fill="rgb(227,60,33)" fg:x="46" fg:w="1"/><text x="3.9153%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6653%" y="613" width="0.0797%" height="15" fill="rgb(205,113,12)" fg:x="46" fg:w="1"/><text x="3.9153%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6653%" y="597" width="0.0797%" height="15" fill="rgb(211,32,1)" fg:x="46" fg:w="1"/><text x="3.9153%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6653%" y="581" width="0.0797%" height="15" fill="rgb(246,2,12)" fg:x="46" fg:w="1"/><text x="3.9153%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6653%" y="565" width="0.0797%" height="15" fill="rgb(243,37,27)" fg:x="46" fg:w="1"/><text x="3.9153%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.6653%" y="549" width="0.0797%" height="15" fill="rgb(248,211,31)" fg:x="46" fg:w="1"/><text x="3.9153%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.6653%" y="533" width="0.0797%" height="15" fill="rgb(242,146,47)" fg:x="46" fg:w="1"/><text x="3.9153%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.6653%" y="517" width="0.0797%" height="15" fill="rgb(206,70,20)" fg:x="46" fg:w="1"/><text x="3.9153%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.6653%" y="501" width="0.0797%" height="15" fill="rgb(215,10,51)" fg:x="46" fg:w="1"/><text x="3.9153%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.6653%" y="485" width="0.0797%" height="15" fill="rgb(243,178,53)" fg:x="46" fg:w="1"/><text x="3.9153%" y="495.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="3.7450%" y="709" width="0.0797%" height="15" fill="rgb(233,221,20)" fg:x="47" fg:w="1"/><text x="3.9950%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="3.7450%" y="693" width="0.0797%" height="15" fill="rgb(218,95,35)" fg:x="47" fg:w="1"/><text x="3.9950%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.7450%" y="677" width="0.0797%" height="15" fill="rgb(229,13,5)" fg:x="47" fg:w="1"/><text x="3.9950%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.8247%" y="661" width="0.0797%" height="15" fill="rgb(252,164,30)" fg:x="48" fg:w="1"/><text x="4.0747%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.8247%" y="645" width="0.0797%" height="15" fill="rgb(232,68,36)" fg:x="48" fg:w="1"/><text x="4.0747%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="3.8247%" y="629" width="0.0797%" height="15" fill="rgb(219,59,54)" fg:x="48" fg:w="1"/><text x="4.0747%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="3.8247%" y="613" width="0.0797%" height="15" fill="rgb(250,92,33)" fg:x="48" fg:w="1"/><text x="4.0747%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="3.8247%" y="597" width="0.0797%" height="15" fill="rgb(229,162,54)" fg:x="48" fg:w="1"/><text x="4.0747%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.8247%" y="581" width="0.0797%" height="15" fill="rgb(244,114,52)" fg:x="48" fg:w="1"/><text x="4.0747%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.8247%" y="565" width="0.0797%" height="15" fill="rgb(212,211,43)" fg:x="48" fg:w="1"/><text x="4.0747%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.9044%" y="629" width="0.0797%" height="15" fill="rgb(226,147,8)" fg:x="49" fg:w="1"/><text x="4.1544%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.9044%" y="613" width="0.0797%" height="15" fill="rgb(226,23,13)" fg:x="49" fg:w="1"/><text x="4.1544%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.9044%" y="597" width="0.0797%" height="15" fill="rgb(240,63,4)" fg:x="49" fg:w="1"/><text x="4.1544%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9044%" y="581" width="0.0797%" height="15" fill="rgb(221,1,32)" fg:x="49" fg:w="1"/><text x="4.1544%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9044%" y="565" width="0.0797%" height="15" fill="rgb(242,117,10)" fg:x="49" fg:w="1"/><text x="4.1544%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9044%" y="549" width="0.0797%" height="15" fill="rgb(249,172,44)" fg:x="49" fg:w="1"/><text x="4.1544%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9044%" y="533" width="0.0797%" height="15" fill="rgb(244,46,45)" fg:x="49" fg:w="1"/><text x="4.1544%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.9044%" y="517" width="0.0797%" height="15" fill="rgb(206,43,17)" fg:x="49" fg:w="1"/><text x="4.1544%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9044%" y="501" width="0.0797%" height="15" fill="rgb(239,218,39)" fg:x="49" fg:w="1"/><text x="4.1544%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9044%" y="485" width="0.0797%" height="15" fill="rgb(208,169,54)" fg:x="49" fg:w="1"/><text x="4.1544%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9044%" y="469" width="0.0797%" height="15" fill="rgb(247,25,42)" fg:x="49" fg:w="1"/><text x="4.1544%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.9044%" y="645" width="0.1594%" height="15" fill="rgb(226,23,31)" fg:x="49" fg:w="2"/><text x="4.1544%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.9841%" y="629" width="0.0797%" height="15" fill="rgb(247,16,28)" fg:x="50" fg:w="1"/><text x="4.2341%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.9841%" y="613" width="0.0797%" height="15" fill="rgb(231,147,38)" fg:x="50" fg:w="1"/><text x="4.2341%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.9841%" y="597" width="0.0797%" height="15" fill="rgb(253,81,48)" fg:x="50" fg:w="1"/><text x="4.2341%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9841%" y="581" width="0.0797%" height="15" fill="rgb(249,222,43)" fg:x="50" fg:w="1"/><text x="4.2341%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9841%" y="565" width="0.0797%" height="15" fill="rgb(221,3,27)" fg:x="50" fg:w="1"/><text x="4.2341%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.9841%" y="549" width="0.0797%" height="15" fill="rgb(228,180,5)" fg:x="50" fg:w="1"/><text x="4.2341%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.9841%" y="533" width="0.0797%" height="15" fill="rgb(227,131,42)" fg:x="50" fg:w="1"/><text x="4.2341%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="3.9841%" y="517" width="0.0797%" height="15" fill="rgb(212,3,39)" fg:x="50" fg:w="1"/><text x="4.2341%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="3.9841%" y="501" width="0.0797%" height="15" fill="rgb(226,45,5)" fg:x="50" fg:w="1"/><text x="4.2341%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="3.8247%" y="709" width="0.3187%" height="15" fill="rgb(215,167,45)" fg:x="48" fg:w="4"/><text x="4.0747%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="3.8247%" y="693" width="0.3187%" height="15" fill="rgb(250,218,53)" fg:x="48" fg:w="4"/><text x="4.0747%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="3.8247%" y="677" width="0.3187%" height="15" fill="rgb(207,140,0)" fg:x="48" fg:w="4"/><text x="4.0747%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="3.9044%" y="661" width="0.2390%" height="15" fill="rgb(238,133,51)" fg:x="49" fg:w="3"/><text x="4.1544%" y="671.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="4.0637%" y="645" width="0.0797%" height="15" fill="rgb(218,203,53)" fg:x="51" fg:w="1"/><text x="4.3137%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="4.0637%" y="629" width="0.0797%" height="15" fill="rgb(226,184,25)" fg:x="51" fg:w="1"/><text x="4.3137%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="4.0637%" y="613" width="0.0797%" height="15" fill="rgb(231,121,21)" fg:x="51" fg:w="1"/><text x="4.3137%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.0637%" y="597" width="0.0797%" height="15" fill="rgb(251,14,34)" fg:x="51" fg:w="1"/><text x="4.3137%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0637%" y="581" width="0.0797%" height="15" fill="rgb(249,193,11)" fg:x="51" fg:w="1"/><text x="4.3137%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0637%" y="565" width="0.0797%" height="15" fill="rgb(220,172,37)" fg:x="51" fg:w="1"/><text x="4.3137%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0637%" y="549" width="0.0797%" height="15" fill="rgb(231,229,43)" fg:x="51" fg:w="1"/><text x="4.3137%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.0637%" y="533" width="0.0797%" height="15" fill="rgb(250,161,5)" fg:x="51" fg:w="1"/><text x="4.3137%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0637%" y="517" width="0.0797%" height="15" fill="rgb(218,225,18)" fg:x="51" fg:w="1"/><text x="4.3137%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.1434%" y="613" width="0.0797%" height="15" fill="rgb(245,45,42)" fg:x="52" fg:w="1"/><text x="4.3934%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.1434%" y="597" width="0.0797%" height="15" fill="rgb(211,115,1)" fg:x="52" fg:w="1"/><text x="4.3934%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.1434%" y="581" width="0.0797%" height="15" fill="rgb(248,133,52)" fg:x="52" fg:w="1"/><text x="4.3934%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.1434%" y="565" width="0.0797%" height="15" fill="rgb(238,100,21)" fg:x="52" fg:w="1"/><text x="4.3934%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.1434%" y="549" width="0.0797%" height="15" fill="rgb(247,144,11)" fg:x="52" fg:w="1"/><text x="4.3934%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.1434%" y="533" width="0.0797%" height="15" fill="rgb(206,164,16)" fg:x="52" fg:w="1"/><text x="4.3934%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.1434%" y="517" width="0.0797%" height="15" fill="rgb(222,34,3)" fg:x="52" fg:w="1"/><text x="4.3934%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1434%" y="501" width="0.0797%" height="15" fill="rgb(248,82,4)" fg:x="52" fg:w="1"/><text x="4.3934%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.2231%" y="581" width="0.1594%" height="15" fill="rgb(228,81,46)" fg:x="53" fg:w="2"/><text x="4.4731%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.2231%" y="565" width="0.1594%" height="15" fill="rgb(227,67,47)" fg:x="53" fg:w="2"/><text x="4.4731%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.2231%" y="549" width="0.1594%" height="15" fill="rgb(215,93,53)" fg:x="53" fg:w="2"/><text x="4.4731%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.3028%" y="533" width="0.0797%" height="15" fill="rgb(248,194,39)" fg:x="54" fg:w="1"/><text x="4.5528%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.3028%" y="517" width="0.0797%" height="15" fill="rgb(215,5,19)" fg:x="54" fg:w="1"/><text x="4.5528%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3028%" y="501" width="0.0797%" height="15" fill="rgb(226,215,51)" fg:x="54" fg:w="1"/><text x="4.5528%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.3028%" y="485" width="0.0797%" height="15" fill="rgb(225,56,26)" fg:x="54" fg:w="1"/><text x="4.5528%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.3825%" y="565" width="0.1594%" height="15" fill="rgb(222,75,29)" fg:x="55" fg:w="2"/><text x="4.6325%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.3825%" y="549" width="0.1594%" height="15" fill="rgb(236,139,6)" fg:x="55" fg:w="2"/><text x="4.6325%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.3825%" y="533" width="0.1594%" height="15" fill="rgb(223,137,36)" fg:x="55" fg:w="2"/><text x="4.6325%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4622%" y="517" width="0.0797%" height="15" fill="rgb(226,99,2)" fg:x="56" fg:w="1"/><text x="4.7122%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="4.2231%" y="613" width="0.3984%" height="15" fill="rgb(206,133,23)" fg:x="53" fg:w="5"/><text x="4.4731%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.2231%" y="597" width="0.3984%" height="15" fill="rgb(243,173,15)" fg:x="53" fg:w="5"/><text x="4.4731%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.3825%" y="581" width="0.2390%" height="15" fill="rgb(228,69,28)" fg:x="55" fg:w="3"/><text x="4.6325%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5418%" y="565" width="0.0797%" height="15" fill="rgb(212,51,22)" fg:x="57" fg:w="1"/><text x="4.7918%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5418%" y="549" width="0.0797%" height="15" fill="rgb(227,113,0)" fg:x="57" fg:w="1"/><text x="4.7918%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5418%" y="533" width="0.0797%" height="15" fill="rgb(252,84,27)" fg:x="57" fg:w="1"/><text x="4.7918%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6215%" y="565" width="0.0797%" height="15" fill="rgb(223,145,39)" fg:x="58" fg:w="1"/><text x="4.8715%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.6215%" y="613" width="0.1594%" height="15" fill="rgb(239,219,30)" fg:x="58" fg:w="2"/><text x="4.8715%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="4.6215%" y="597" width="0.1594%" height="15" fill="rgb(224,196,39)" fg:x="58" fg:w="2"/><text x="4.8715%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.6215%" y="581" width="0.1594%" height="15" fill="rgb(205,35,43)" fg:x="58" fg:w="2"/><text x="4.8715%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.7012%" y="565" width="0.0797%" height="15" fill="rgb(228,201,21)" fg:x="59" fg:w="1"/><text x="4.9512%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.7012%" y="549" width="0.0797%" height="15" fill="rgb(237,118,16)" fg:x="59" fg:w="1"/><text x="4.9512%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="4.7012%" y="533" width="0.0797%" height="15" fill="rgb(241,17,19)" fg:x="59" fg:w="1"/><text x="4.9512%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.7012%" y="517" width="0.0797%" height="15" fill="rgb(214,10,25)" fg:x="59" fg:w="1"/><text x="4.9512%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.7809%" y="565" width="0.0797%" height="15" fill="rgb(238,37,29)" fg:x="60" fg:w="1"/><text x="5.0309%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8606%" y="565" width="0.0797%" height="15" fill="rgb(253,83,25)" fg:x="61" fg:w="1"/><text x="5.1106%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0199%" y="533" width="0.0797%" height="15" fill="rgb(234,192,12)" fg:x="63" fg:w="1"/><text x="5.2699%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="4.9402%" y="565" width="0.2390%" height="15" fill="rgb(241,216,45)" fg:x="62" fg:w="3"/><text x="5.1902%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.0199%" y="549" width="0.1594%" height="15" fill="rgb(242,22,33)" fg:x="63" fg:w="2"/><text x="5.2699%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.0996%" y="533" width="0.0797%" height="15" fill="rgb(231,105,49)" fg:x="64" fg:w="1"/><text x="5.3496%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.0996%" y="517" width="0.0797%" height="15" fill="rgb(218,204,15)" fg:x="64" fg:w="1"/><text x="5.3496%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.1793%" y="517" width="0.0797%" height="15" fill="rgb(235,138,41)" fg:x="65" fg:w="1"/><text x="5.4293%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1793%" y="501" width="0.0797%" height="15" fill="rgb(246,0,9)" fg:x="65" fg:w="1"/><text x="5.4293%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.1793%" y="485" width="0.0797%" height="15" fill="rgb(210,74,4)" fg:x="65" fg:w="1"/><text x="5.4293%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1793%" y="469" width="0.0797%" height="15" fill="rgb(250,60,41)" fg:x="65" fg:w="1"/><text x="5.4293%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1793%" y="453" width="0.0797%" height="15" fill="rgb(220,115,12)" fg:x="65" fg:w="1"/><text x="5.4293%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1793%" y="437" width="0.0797%" height="15" fill="rgb(237,100,13)" fg:x="65" fg:w="1"/><text x="5.4293%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2590%" y="501" width="0.0797%" height="15" fill="rgb(213,55,26)" fg:x="66" fg:w="1"/><text x="5.5090%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2590%" y="485" width="0.0797%" height="15" fill="rgb(216,17,4)" fg:x="66" fg:w="1"/><text x="5.5090%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2590%" y="469" width="0.0797%" height="15" fill="rgb(220,153,47)" fg:x="66" fg:w="1"/><text x="5.5090%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2590%" y="453" width="0.0797%" height="15" fill="rgb(215,131,9)" fg:x="66" fg:w="1"/><text x="5.5090%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2590%" y="437" width="0.0797%" height="15" fill="rgb(233,46,42)" fg:x="66" fg:w="1"/><text x="5.5090%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2590%" y="421" width="0.0797%" height="15" fill="rgb(226,86,7)" fg:x="66" fg:w="1"/><text x="5.5090%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2590%" y="405" width="0.0797%" height="15" fill="rgb(239,226,21)" fg:x="66" fg:w="1"/><text x="5.5090%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2590%" y="389" width="0.0797%" height="15" fill="rgb(244,137,22)" fg:x="66" fg:w="1"/><text x="5.5090%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2590%" y="373" width="0.0797%" height="15" fill="rgb(211,139,35)" fg:x="66" fg:w="1"/><text x="5.5090%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2590%" y="357" width="0.0797%" height="15" fill="rgb(214,62,50)" fg:x="66" fg:w="1"/><text x="5.5090%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="5.1793%" y="549" width="0.3187%" height="15" fill="rgb(212,113,44)" fg:x="65" fg:w="4"/><text x="5.4293%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="5.1793%" y="533" width="0.3187%" height="15" fill="rgb(226,150,43)" fg:x="65" fg:w="4"/><text x="5.4293%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.2590%" y="517" width="0.2390%" height="15" fill="rgb(250,71,37)" fg:x="66" fg:w="3"/><text x="5.5090%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.3386%" y="501" width="0.1594%" height="15" fill="rgb(219,76,19)" fg:x="67" fg:w="2"/><text x="5.5886%" y="511.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.43%)</title><rect x="4.1434%" y="709" width="1.4343%" height="15" fill="rgb(250,39,11)" fg:x="52" fg:w="18"/><text x="4.3934%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (18 samples, 1.43%)</title><rect x="4.1434%" y="693" width="1.4343%" height="15" fill="rgb(230,64,31)" fg:x="52" fg:w="18"/><text x="4.3934%" y="703.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.43%)</title><rect x="4.1434%" y="677" width="1.4343%" height="15" fill="rgb(208,222,23)" fg:x="52" fg:w="18"/><text x="4.3934%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.43%)</title><rect x="4.1434%" y="661" width="1.4343%" height="15" fill="rgb(227,125,18)" fg:x="52" fg:w="18"/><text x="4.3934%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (18 samples, 1.43%)</title><rect x="4.1434%" y="645" width="1.4343%" height="15" fill="rgb(234,210,9)" fg:x="52" fg:w="18"/><text x="4.3934%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.43%)</title><rect x="4.1434%" y="629" width="1.4343%" height="15" fill="rgb(217,127,24)" fg:x="52" fg:w="18"/><text x="4.3934%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="4.7809%" y="613" width="0.7968%" height="15" fill="rgb(239,141,48)" fg:x="60" fg:w="10"/><text x="5.0309%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="4.7809%" y="597" width="0.7968%" height="15" fill="rgb(227,109,8)" fg:x="60" fg:w="10"/><text x="5.0309%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="4.7809%" y="581" width="0.7968%" height="15" fill="rgb(235,184,23)" fg:x="60" fg:w="10"/><text x="5.0309%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="5.1793%" y="565" width="0.3984%" height="15" fill="rgb(227,226,48)" fg:x="65" fg:w="5"/><text x="5.4293%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4980%" y="549" width="0.0797%" height="15" fill="rgb(206,150,11)" fg:x="69" fg:w="1"/><text x="5.7480%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4980%" y="533" width="0.0797%" height="15" fill="rgb(254,2,33)" fg:x="69" fg:w="1"/><text x="5.7480%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.4980%" y="517" width="0.0797%" height="15" fill="rgb(243,160,20)" fg:x="69" fg:w="1"/><text x="5.7480%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="5.5777%" y="677" width="0.0797%" height="15" fill="rgb(218,208,30)" fg:x="70" fg:w="1"/><text x="5.8277%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="5.5777%" y="661" width="0.0797%" height="15" fill="rgb(224,120,49)" fg:x="70" fg:w="1"/><text x="5.8277%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.5777%" y="645" width="0.0797%" height="15" fill="rgb(246,12,2)" fg:x="70" fg:w="1"/><text x="5.8277%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.5777%" y="629" width="0.0797%" height="15" fill="rgb(236,117,3)" fg:x="70" fg:w="1"/><text x="5.8277%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5777%" y="613" width="0.0797%" height="15" fill="rgb(216,128,52)" fg:x="70" fg:w="1"/><text x="5.8277%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5777%" y="597" width="0.0797%" height="15" fill="rgb(246,145,19)" fg:x="70" fg:w="1"/><text x="5.8277%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5777%" y="581" width="0.0797%" height="15" fill="rgb(222,11,46)" fg:x="70" fg:w="1"/><text x="5.8277%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5777%" y="565" width="0.0797%" height="15" fill="rgb(245,82,36)" fg:x="70" fg:w="1"/><text x="5.8277%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5777%" y="549" width="0.0797%" height="15" fill="rgb(250,73,51)" fg:x="70" fg:w="1"/><text x="5.8277%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5777%" y="533" width="0.0797%" height="15" fill="rgb(221,189,23)" fg:x="70" fg:w="1"/><text x="5.8277%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5777%" y="517" width="0.0797%" height="15" fill="rgb(210,33,7)" fg:x="70" fg:w="1"/><text x="5.8277%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5777%" y="501" width="0.0797%" height="15" fill="rgb(210,107,22)" fg:x="70" fg:w="1"/><text x="5.8277%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5777%" y="485" width="0.0797%" height="15" fill="rgb(222,116,37)" fg:x="70" fg:w="1"/><text x="5.8277%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.5777%" y="469" width="0.0797%" height="15" fill="rgb(254,17,48)" fg:x="70" fg:w="1"/><text x="5.8277%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.5777%" y="453" width="0.0797%" height="15" fill="rgb(224,36,32)" fg:x="70" fg:w="1"/><text x="5.8277%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.5777%" y="693" width="0.1594%" height="15" fill="rgb(232,90,46)" fg:x="70" fg:w="2"/><text x="5.8277%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="5.6574%" y="677" width="0.0797%" height="15" fill="rgb(241,66,40)" fg:x="71" fg:w="1"/><text x="5.9074%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="5.6574%" y="661" width="0.0797%" height="15" fill="rgb(249,184,29)" fg:x="71" fg:w="1"/><text x="5.9074%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.6574%" y="645" width="0.0797%" height="15" fill="rgb(231,181,1)" fg:x="71" fg:w="1"/><text x="5.9074%" y="655.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.6574%" y="629" width="0.0797%" height="15" fill="rgb(224,94,2)" fg:x="71" fg:w="1"/><text x="5.9074%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.6574%" y="613" width="0.0797%" height="15" fill="rgb(229,170,15)" fg:x="71" fg:w="1"/><text x="5.9074%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="5.7371%" y="677" width="0.0797%" height="15" fill="rgb(240,127,35)" fg:x="72" fg:w="1"/><text x="5.9871%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.7371%" y="661" width="0.0797%" height="15" fill="rgb(248,196,34)" fg:x="72" fg:w="1"/><text x="5.9871%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.7371%" y="645" width="0.0797%" height="15" fill="rgb(236,137,7)" fg:x="72" fg:w="1"/><text x="5.9871%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.8167%" y="629" width="0.0797%" height="15" fill="rgb(235,127,16)" fg:x="73" fg:w="1"/><text x="6.0667%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.8167%" y="613" width="0.0797%" height="15" fill="rgb(250,192,54)" fg:x="73" fg:w="1"/><text x="6.0667%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.8167%" y="597" width="0.0797%" height="15" fill="rgb(218,98,20)" fg:x="73" fg:w="1"/><text x="6.0667%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8167%" y="581" width="0.0797%" height="15" fill="rgb(230,176,47)" fg:x="73" fg:w="1"/><text x="6.0667%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8167%" y="565" width="0.0797%" height="15" fill="rgb(244,2,33)" fg:x="73" fg:w="1"/><text x="6.0667%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8167%" y="549" width="0.0797%" height="15" fill="rgb(231,100,17)" fg:x="73" fg:w="1"/><text x="6.0667%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8167%" y="533" width="0.0797%" height="15" fill="rgb(245,23,12)" fg:x="73" fg:w="1"/><text x="6.0667%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.8167%" y="517" width="0.0797%" height="15" fill="rgb(249,55,22)" fg:x="73" fg:w="1"/><text x="6.0667%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.8167%" y="501" width="0.0797%" height="15" fill="rgb(207,134,9)" fg:x="73" fg:w="1"/><text x="6.0667%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.8167%" y="485" width="0.0797%" height="15" fill="rgb(218,134,0)" fg:x="73" fg:w="1"/><text x="6.0667%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.8167%" y="469" width="0.0797%" height="15" fill="rgb(213,212,33)" fg:x="73" fg:w="1"/><text x="6.0667%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.8167%" y="453" width="0.0797%" height="15" fill="rgb(252,106,18)" fg:x="73" fg:w="1"/><text x="6.0667%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.8167%" y="437" width="0.0797%" height="15" fill="rgb(208,126,42)" fg:x="73" fg:w="1"/><text x="6.0667%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.8167%" y="421" width="0.0797%" height="15" fill="rgb(246,175,29)" fg:x="73" fg:w="1"/><text x="6.0667%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.8167%" y="405" width="0.0797%" height="15" fill="rgb(215,13,50)" fg:x="73" fg:w="1"/><text x="6.0667%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.8167%" y="389" width="0.0797%" height="15" fill="rgb(216,172,15)" fg:x="73" fg:w="1"/><text x="6.0667%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.8167%" y="373" width="0.0797%" height="15" fill="rgb(212,103,13)" fg:x="73" fg:w="1"/><text x="6.0667%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.8167%" y="357" width="0.0797%" height="15" fill="rgb(231,171,36)" fg:x="73" fg:w="1"/><text x="6.0667%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8167%" y="341" width="0.0797%" height="15" fill="rgb(250,123,20)" fg:x="73" fg:w="1"/><text x="6.0667%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8964%" y="581" width="0.0797%" height="15" fill="rgb(212,53,50)" fg:x="74" fg:w="1"/><text x="6.1464%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8964%" y="565" width="0.0797%" height="15" fill="rgb(243,54,12)" fg:x="74" fg:w="1"/><text x="6.1464%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8964%" y="549" width="0.0797%" height="15" fill="rgb(234,101,34)" fg:x="74" fg:w="1"/><text x="6.1464%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8964%" y="533" width="0.0797%" height="15" fill="rgb(254,67,22)" fg:x="74" fg:w="1"/><text x="6.1464%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8964%" y="517" width="0.0797%" height="15" fill="rgb(250,35,47)" fg:x="74" fg:w="1"/><text x="6.1464%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="5.5777%" y="709" width="0.4781%" height="15" fill="rgb(226,126,38)" fg:x="70" fg:w="6"/><text x="5.8277%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="5.7371%" y="693" width="0.3187%" height="15" fill="rgb(216,138,53)" fg:x="72" fg:w="4"/><text x="5.9871%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="5.8167%" y="677" width="0.2390%" height="15" fill="rgb(246,199,43)" fg:x="73" fg:w="3"/><text x="6.0667%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="5.8167%" y="661" width="0.2390%" height="15" fill="rgb(232,125,11)" fg:x="73" fg:w="3"/><text x="6.0667%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="5.8167%" y="645" width="0.2390%" height="15" fill="rgb(218,219,45)" fg:x="73" fg:w="3"/><text x="6.0667%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="5.8964%" y="629" width="0.1594%" height="15" fill="rgb(216,102,54)" fg:x="74" fg:w="2"/><text x="6.1464%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.8964%" y="613" width="0.1594%" height="15" fill="rgb(250,228,7)" fg:x="74" fg:w="2"/><text x="6.1464%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.8964%" y="597" width="0.1594%" height="15" fill="rgb(226,125,25)" fg:x="74" fg:w="2"/><text x="6.1464%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9761%" y="581" width="0.0797%" height="15" fill="rgb(224,165,27)" fg:x="75" fg:w="1"/><text x="6.2261%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9761%" y="565" width="0.0797%" height="15" fill="rgb(233,86,3)" fg:x="75" fg:w="1"/><text x="6.2261%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9761%" y="549" width="0.0797%" height="15" fill="rgb(228,116,20)" fg:x="75" fg:w="1"/><text x="6.2261%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9761%" y="533" width="0.0797%" height="15" fill="rgb(209,192,17)" fg:x="75" fg:w="1"/><text x="6.2261%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.9761%" y="517" width="0.0797%" height="15" fill="rgb(224,88,34)" fg:x="75" fg:w="1"/><text x="6.2261%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9761%" y="501" width="0.0797%" height="15" fill="rgb(233,38,6)" fg:x="75" fg:w="1"/><text x="6.2261%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9761%" y="485" width="0.0797%" height="15" fill="rgb(212,59,30)" fg:x="75" fg:w="1"/><text x="6.2261%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.9761%" y="469" width="0.0797%" height="15" fill="rgb(213,80,3)" fg:x="75" fg:w="1"/><text x="6.2261%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.9761%" y="453" width="0.0797%" height="15" fill="rgb(251,178,7)" fg:x="75" fg:w="1"/><text x="6.2261%" y="463.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.0558%" y="709" width="0.0797%" height="15" fill="rgb(213,154,26)" fg:x="76" fg:w="1"/><text x="6.3058%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="6.0558%" y="693" width="0.0797%" height="15" fill="rgb(238,165,49)" fg:x="76" fg:w="1"/><text x="6.3058%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="6.1355%" y="677" width="0.1594%" height="15" fill="rgb(248,91,46)" fg:x="77" fg:w="2"/><text x="6.3855%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1355%" y="661" width="0.1594%" height="15" fill="rgb(244,21,52)" fg:x="77" fg:w="2"/><text x="6.3855%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.1355%" y="645" width="0.1594%" height="15" fill="rgb(247,122,20)" fg:x="77" fg:w="2"/><text x="6.3855%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1355%" y="629" width="0.1594%" height="15" fill="rgb(218,27,9)" fg:x="77" fg:w="2"/><text x="6.3855%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.1355%" y="613" width="0.1594%" height="15" fill="rgb(246,7,6)" fg:x="77" fg:w="2"/><text x="6.3855%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.1355%" y="597" width="0.1594%" height="15" fill="rgb(227,135,54)" fg:x="77" fg:w="2"/><text x="6.3855%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (34 samples, 2.71%)</title><rect x="3.6653%" y="725" width="2.7092%" height="15" fill="rgb(247,14,11)" fg:x="46" fg:w="34"/><text x="3.9153%" y="735.50">pl..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="6.1355%" y="709" width="0.2390%" height="15" fill="rgb(206,149,34)" fg:x="77" fg:w="3"/><text x="6.3855%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="6.1355%" y="693" width="0.2390%" height="15" fill="rgb(227,228,4)" fg:x="77" fg:w="3"/><text x="6.3855%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="6.2948%" y="677" width="0.0797%" height="15" fill="rgb(238,218,28)" fg:x="79" fg:w="1"/><text x="6.5448%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.2948%" y="661" width="0.0797%" height="15" fill="rgb(252,86,40)" fg:x="79" fg:w="1"/><text x="6.5448%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.2948%" y="645" width="0.0797%" height="15" fill="rgb(251,225,11)" fg:x="79" fg:w="1"/><text x="6.5448%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.2948%" y="629" width="0.0797%" height="15" fill="rgb(206,46,49)" fg:x="79" fg:w="1"/><text x="6.5448%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.2948%" y="613" width="0.0797%" height="15" fill="rgb(245,128,24)" fg:x="79" fg:w="1"/><text x="6.5448%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.2948%" y="597" width="0.0797%" height="15" fill="rgb(219,177,34)" fg:x="79" fg:w="1"/><text x="6.5448%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2948%" y="581" width="0.0797%" height="15" fill="rgb(218,60,48)" fg:x="79" fg:w="1"/><text x="6.5448%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2948%" y="565" width="0.0797%" height="15" fill="rgb(221,11,5)" fg:x="79" fg:w="1"/><text x="6.5448%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2948%" y="549" width="0.0797%" height="15" fill="rgb(220,148,13)" fg:x="79" fg:w="1"/><text x="6.5448%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2948%" y="533" width="0.0797%" height="15" fill="rgb(210,16,3)" fg:x="79" fg:w="1"/><text x="6.5448%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2948%" y="517" width="0.0797%" height="15" fill="rgb(236,80,2)" fg:x="79" fg:w="1"/><text x="6.5448%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2948%" y="501" width="0.0797%" height="15" fill="rgb(239,129,19)" fg:x="79" fg:w="1"/><text x="6.5448%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="6.3745%" y="677" width="0.1594%" height="15" fill="rgb(220,106,35)" fg:x="80" fg:w="2"/><text x="6.6245%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="6.3745%" y="661" width="0.1594%" height="15" fill="rgb(252,139,45)" fg:x="80" fg:w="2"/><text x="6.6245%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="6.3745%" y="645" width="0.1594%" height="15" fill="rgb(229,8,36)" fg:x="80" fg:w="2"/><text x="6.6245%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="6.3745%" y="629" width="0.1594%" height="15" fill="rgb(230,126,33)" fg:x="80" fg:w="2"/><text x="6.6245%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="6.3745%" y="613" width="0.1594%" height="15" fill="rgb(239,140,21)" fg:x="80" fg:w="2"/><text x="6.6245%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="6.3745%" y="597" width="0.1594%" height="15" fill="rgb(254,104,9)" fg:x="80" fg:w="2"/><text x="6.6245%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="6.4542%" y="581" width="0.0797%" height="15" fill="rgb(239,52,14)" fg:x="81" fg:w="1"/><text x="6.7042%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.4542%" y="565" width="0.0797%" height="15" fill="rgb(208,227,44)" fg:x="81" fg:w="1"/><text x="6.7042%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.4542%" y="549" width="0.0797%" height="15" fill="rgb(246,18,19)" fg:x="81" fg:w="1"/><text x="6.7042%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.4542%" y="533" width="0.0797%" height="15" fill="rgb(235,228,25)" fg:x="81" fg:w="1"/><text x="6.7042%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4542%" y="517" width="0.0797%" height="15" fill="rgb(240,156,20)" fg:x="81" fg:w="1"/><text x="6.7042%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4542%" y="501" width="0.0797%" height="15" fill="rgb(224,8,20)" fg:x="81" fg:w="1"/><text x="6.7042%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="6.4542%" y="485" width="0.0797%" height="15" fill="rgb(214,12,52)" fg:x="81" fg:w="1"/><text x="6.7042%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.4542%" y="469" width="0.0797%" height="15" fill="rgb(211,220,47)" fg:x="81" fg:w="1"/><text x="6.7042%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.4542%" y="453" width="0.0797%" height="15" fill="rgb(250,173,5)" fg:x="81" fg:w="1"/><text x="6.7042%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.4542%" y="437" width="0.0797%" height="15" fill="rgb(250,125,52)" fg:x="81" fg:w="1"/><text x="6.7042%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.4542%" y="421" width="0.0797%" height="15" fill="rgb(209,133,18)" fg:x="81" fg:w="1"/><text x="6.7042%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.4542%" y="405" width="0.0797%" height="15" fill="rgb(216,173,22)" fg:x="81" fg:w="1"/><text x="6.7042%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.5339%" y="677" width="0.0797%" height="15" fill="rgb(205,3,22)" fg:x="82" fg:w="1"/><text x="6.7839%" y="687.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="6.5339%" y="661" width="0.0797%" height="15" fill="rgb(248,22,20)" fg:x="82" fg:w="1"/><text x="6.7839%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.5339%" y="645" width="0.0797%" height="15" fill="rgb(233,6,29)" fg:x="82" fg:w="1"/><text x="6.7839%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="6.6135%" y="661" width="0.0797%" height="15" fill="rgb(240,22,54)" fg:x="83" fg:w="1"/><text x="6.8635%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.6135%" y="645" width="0.0797%" height="15" fill="rgb(231,133,32)" fg:x="83" fg:w="1"/><text x="6.8635%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="6.6135%" y="677" width="0.1594%" height="15" fill="rgb(248,193,4)" fg:x="83" fg:w="2"/><text x="6.8635%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.6932%" y="661" width="0.0797%" height="15" fill="rgb(211,178,46)" fg:x="84" fg:w="1"/><text x="6.9432%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6932%" y="645" width="0.0797%" height="15" fill="rgb(224,5,42)" fg:x="84" fg:w="1"/><text x="6.9432%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.6932%" y="629" width="0.0797%" height="15" fill="rgb(239,176,25)" fg:x="84" fg:w="1"/><text x="6.9432%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6932%" y="613" width="0.0797%" height="15" fill="rgb(245,187,50)" fg:x="84" fg:w="1"/><text x="6.9432%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6932%" y="597" width="0.0797%" height="15" fill="rgb(248,24,15)" fg:x="84" fg:w="1"/><text x="6.9432%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.6932%" y="581" width="0.0797%" height="15" fill="rgb(205,166,13)" fg:x="84" fg:w="1"/><text x="6.9432%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="6.3745%" y="693" width="0.4781%" height="15" fill="rgb(208,114,23)" fg:x="80" fg:w="6"/><text x="6.6245%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.7729%" y="677" width="0.0797%" height="15" fill="rgb(239,127,18)" fg:x="85" fg:w="1"/><text x="7.0229%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.7729%" y="661" width="0.0797%" height="15" fill="rgb(219,154,28)" fg:x="85" fg:w="1"/><text x="7.0229%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.7729%" y="645" width="0.0797%" height="15" fill="rgb(225,157,23)" fg:x="85" fg:w="1"/><text x="7.0229%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7729%" y="629" width="0.0797%" height="15" fill="rgb(219,8,6)" fg:x="85" fg:w="1"/><text x="7.0229%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7729%" y="613" width="0.0797%" height="15" fill="rgb(212,47,6)" fg:x="85" fg:w="1"/><text x="7.0229%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7729%" y="597" width="0.0797%" height="15" fill="rgb(224,190,4)" fg:x="85" fg:w="1"/><text x="7.0229%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7729%" y="581" width="0.0797%" height="15" fill="rgb(239,183,29)" fg:x="85" fg:w="1"/><text x="7.0229%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7729%" y="565" width="0.0797%" height="15" fill="rgb(213,57,7)" fg:x="85" fg:w="1"/><text x="7.0229%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7729%" y="549" width="0.0797%" height="15" fill="rgb(216,148,1)" fg:x="85" fg:w="1"/><text x="7.0229%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7729%" y="533" width="0.0797%" height="15" fill="rgb(236,182,29)" fg:x="85" fg:w="1"/><text x="7.0229%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="6.3745%" y="725" width="0.5578%" height="15" fill="rgb(244,120,48)" fg:x="80" fg:w="7"/><text x="6.6245%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="6.3745%" y="709" width="0.5578%" height="15" fill="rgb(206,71,34)" fg:x="80" fg:w="7"/><text x="6.6245%" y="719.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.8526%" y="693" width="0.0797%" height="15" fill="rgb(242,32,6)" fg:x="86" fg:w="1"/><text x="7.1026%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.8526%" y="677" width="0.0797%" height="15" fill="rgb(241,35,3)" fg:x="86" fg:w="1"/><text x="7.1026%" y="687.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.8526%" y="661" width="0.0797%" height="15" fill="rgb(222,62,19)" fg:x="86" fg:w="1"/><text x="7.1026%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.8526%" y="645" width="0.0797%" height="15" fill="rgb(223,110,41)" fg:x="86" fg:w="1"/><text x="7.1026%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8526%" y="629" width="0.0797%" height="15" fill="rgb(208,224,4)" fg:x="86" fg:w="1"/><text x="7.1026%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8526%" y="613" width="0.0797%" height="15" fill="rgb(241,137,19)" fg:x="86" fg:w="1"/><text x="7.1026%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8526%" y="597" width="0.0797%" height="15" fill="rgb(244,24,17)" fg:x="86" fg:w="1"/><text x="7.1026%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.9323%" y="645" width="0.1594%" height="15" fill="rgb(245,178,49)" fg:x="87" fg:w="2"/><text x="7.1823%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.9323%" y="629" width="0.1594%" height="15" fill="rgb(219,160,38)" fg:x="87" fg:w="2"/><text x="7.1823%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.9323%" y="613" width="0.1594%" height="15" fill="rgb(228,137,14)" fg:x="87" fg:w="2"/><text x="7.1823%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="6.9323%" y="597" width="0.1594%" height="15" fill="rgb(237,134,11)" fg:x="87" fg:w="2"/><text x="7.1823%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0120%" y="581" width="0.0797%" height="15" fill="rgb(211,126,44)" fg:x="88" fg:w="1"/><text x="7.2620%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (73 samples, 5.82%)</title><rect x="1.3546%" y="741" width="5.8167%" height="15" fill="rgb(226,171,33)" fg:x="17" fg:w="73"/><text x="1.6046%" y="751.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="6.9323%" y="725" width="0.2390%" height="15" fill="rgb(253,99,13)" fg:x="87" fg:w="3"/><text x="7.1823%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="6.9323%" y="709" width="0.2390%" height="15" fill="rgb(244,48,7)" fg:x="87" fg:w="3"/><text x="7.1823%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="6.9323%" y="693" width="0.2390%" height="15" fill="rgb(244,217,54)" fg:x="87" fg:w="3"/><text x="7.1823%" y="703.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="6.9323%" y="677" width="0.2390%" height="15" fill="rgb(224,15,18)" fg:x="87" fg:w="3"/><text x="7.1823%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="6.9323%" y="661" width="0.2390%" height="15" fill="rgb(244,99,12)" fg:x="87" fg:w="3"/><text x="7.1823%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0916%" y="645" width="0.0797%" height="15" fill="rgb(233,226,8)" fg:x="89" fg:w="1"/><text x="7.3416%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0916%" y="629" width="0.0797%" height="15" fill="rgb(229,211,3)" fg:x="89" fg:w="1"/><text x="7.3416%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0916%" y="613" width="0.0797%" height="15" fill="rgb(216,140,21)" fg:x="89" fg:w="1"/><text x="7.3416%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0916%" y="597" width="0.0797%" height="15" fill="rgb(234,122,30)" fg:x="89" fg:w="1"/><text x="7.3416%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.0916%" y="581" width="0.0797%" height="15" fill="rgb(236,25,46)" fg:x="89" fg:w="1"/><text x="7.3416%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0916%" y="565" width="0.0797%" height="15" fill="rgb(217,52,54)" fg:x="89" fg:w="1"/><text x="7.3416%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0916%" y="549" width="0.0797%" height="15" fill="rgb(222,29,26)" fg:x="89" fg:w="1"/><text x="7.3416%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0916%" y="533" width="0.0797%" height="15" fill="rgb(216,177,29)" fg:x="89" fg:w="1"/><text x="7.3416%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0916%" y="517" width="0.0797%" height="15" fill="rgb(247,136,51)" fg:x="89" fg:w="1"/><text x="7.3416%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0916%" y="501" width="0.0797%" height="15" fill="rgb(231,47,47)" fg:x="89" fg:w="1"/><text x="7.3416%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="7.1713%" y="741" width="0.0797%" height="15" fill="rgb(211,192,36)" fg:x="90" fg:w="1"/><text x="7.4213%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="7.1713%" y="725" width="0.0797%" height="15" fill="rgb(229,156,32)" fg:x="90" fg:w="1"/><text x="7.4213%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="7.1713%" y="709" width="0.0797%" height="15" fill="rgb(248,213,20)" fg:x="90" fg:w="1"/><text x="7.4213%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.1713%" y="693" width="0.0797%" height="15" fill="rgb(217,64,7)" fg:x="90" fg:w="1"/><text x="7.4213%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1713%" y="677" width="0.0797%" height="15" fill="rgb(232,142,8)" fg:x="90" fg:w="1"/><text x="7.4213%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="7.2510%" y="741" width="0.0797%" height="15" fill="rgb(224,92,44)" fg:x="91" fg:w="1"/><text x="7.5010%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="7.2510%" y="725" width="0.0797%" height="15" fill="rgb(214,169,17)" fg:x="91" fg:w="1"/><text x="7.5010%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2510%" y="709" width="0.0797%" height="15" fill="rgb(210,59,37)" fg:x="91" fg:w="1"/><text x="7.5010%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.3307%" y="725" width="0.0797%" height="15" fill="rgb(214,116,48)" fg:x="92" fg:w="1"/><text x="7.5807%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3307%" y="709" width="0.0797%" height="15" fill="rgb(244,191,6)" fg:x="92" fg:w="1"/><text x="7.5807%" y="719.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="7.4104%" y="725" width="0.0797%" height="15" fill="rgb(241,50,52)" fg:x="93" fg:w="1"/><text x="7.6604%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="7.4104%" y="709" width="0.0797%" height="15" fill="rgb(236,75,39)" fg:x="93" fg:w="1"/><text x="7.6604%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="7.4104%" y="693" width="0.0797%" height="15" fill="rgb(236,99,0)" fg:x="93" fg:w="1"/><text x="7.6604%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="7.4104%" y="677" width="0.0797%" height="15" fill="rgb(207,202,15)" fg:x="93" fg:w="1"/><text x="7.6604%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="7.4104%" y="661" width="0.0797%" height="15" fill="rgb(233,207,14)" fg:x="93" fg:w="1"/><text x="7.6604%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="7.4104%" y="645" width="0.0797%" height="15" fill="rgb(226,27,51)" fg:x="93" fg:w="1"/><text x="7.6604%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="7.4104%" y="629" width="0.0797%" height="15" fill="rgb(206,104,42)" fg:x="93" fg:w="1"/><text x="7.6604%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="7.4104%" y="613" width="0.0797%" height="15" fill="rgb(212,225,4)" fg:x="93" fg:w="1"/><text x="7.6604%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="7.6494%" y="645" width="0.1594%" height="15" fill="rgb(233,96,42)" fg:x="96" fg:w="2"/><text x="7.8994%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.6494%" y="629" width="0.1594%" height="15" fill="rgb(229,21,32)" fg:x="96" fg:w="2"/><text x="7.8994%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7291%" y="613" width="0.0797%" height="15" fill="rgb(226,216,24)" fg:x="97" fg:w="1"/><text x="7.9791%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7291%" y="597" width="0.0797%" height="15" fill="rgb(221,163,17)" fg:x="97" fg:w="1"/><text x="7.9791%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.8884%" y="613" width="0.0797%" height="15" fill="rgb(216,216,42)" fg:x="99" fg:w="1"/><text x="8.1384%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8884%" y="597" width="0.0797%" height="15" fill="rgb(240,118,7)" fg:x="99" fg:w="1"/><text x="8.1384%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8884%" y="581" width="0.0797%" height="15" fill="rgb(221,67,37)" fg:x="99" fg:w="1"/><text x="8.1384%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.9681%" y="613" width="0.0797%" height="15" fill="rgb(241,32,44)" fg:x="100" fg:w="1"/><text x="8.2181%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9681%" y="597" width="0.0797%" height="15" fill="rgb(235,204,43)" fg:x="100" fg:w="1"/><text x="8.2181%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.9681%" y="581" width="0.0797%" height="15" fill="rgb(213,116,10)" fg:x="100" fg:w="1"/><text x="8.2181%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9681%" y="565" width="0.0797%" height="15" fill="rgb(239,15,48)" fg:x="100" fg:w="1"/><text x="8.2181%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.8088%" y="629" width="0.3187%" height="15" fill="rgb(207,123,36)" fg:x="98" fg:w="4"/><text x="8.0588%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0478%" y="613" width="0.0797%" height="15" fill="rgb(209,103,30)" fg:x="101" fg:w="1"/><text x="8.2978%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0478%" y="597" width="0.0797%" height="15" fill="rgb(238,100,19)" fg:x="101" fg:w="1"/><text x="8.2978%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0478%" y="581" width="0.0797%" height="15" fill="rgb(244,30,14)" fg:x="101" fg:w="1"/><text x="8.2978%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0478%" y="565" width="0.0797%" height="15" fill="rgb(249,174,6)" fg:x="101" fg:w="1"/><text x="8.2978%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0478%" y="549" width="0.0797%" height="15" fill="rgb(235,213,41)" fg:x="101" fg:w="1"/><text x="8.2978%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0478%" y="533" width="0.0797%" height="15" fill="rgb(213,118,6)" fg:x="101" fg:w="1"/><text x="8.2978%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="7.6494%" y="661" width="0.5578%" height="15" fill="rgb(235,44,51)" fg:x="96" fg:w="7"/><text x="7.8994%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="7.8088%" y="645" width="0.3984%" height="15" fill="rgb(217,9,53)" fg:x="98" fg:w="5"/><text x="8.0588%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1275%" y="629" width="0.0797%" height="15" fill="rgb(237,172,34)" fg:x="102" fg:w="1"/><text x="8.3775%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1275%" y="613" width="0.0797%" height="15" fill="rgb(206,206,11)" fg:x="102" fg:w="1"/><text x="8.3775%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1275%" y="597" width="0.0797%" height="15" fill="rgb(214,149,29)" fg:x="102" fg:w="1"/><text x="8.3775%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.1275%" y="581" width="0.0797%" height="15" fill="rgb(208,123,3)" fg:x="102" fg:w="1"/><text x="8.3775%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.1275%" y="565" width="0.0797%" height="15" fill="rgb(229,126,4)" fg:x="102" fg:w="1"/><text x="8.3775%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.1275%" y="549" width="0.0797%" height="15" fill="rgb(222,92,36)" fg:x="102" fg:w="1"/><text x="8.3775%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2072%" y="661" width="0.1594%" height="15" fill="rgb(216,39,41)" fg:x="103" fg:w="2"/><text x="8.4572%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.2072%" y="645" width="0.1594%" height="15" fill="rgb(253,127,28)" fg:x="103" fg:w="2"/><text x="8.4572%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2072%" y="629" width="0.1594%" height="15" fill="rgb(249,152,51)" fg:x="103" fg:w="2"/><text x="8.4572%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2072%" y="613" width="0.1594%" height="15" fill="rgb(209,123,42)" fg:x="103" fg:w="2"/><text x="8.4572%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2072%" y="597" width="0.1594%" height="15" fill="rgb(241,118,22)" fg:x="103" fg:w="2"/><text x="8.4572%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2072%" y="581" width="0.1594%" height="15" fill="rgb(208,25,7)" fg:x="103" fg:w="2"/><text x="8.4572%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2072%" y="565" width="0.1594%" height="15" fill="rgb(243,144,39)" fg:x="103" fg:w="2"/><text x="8.4572%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2072%" y="549" width="0.1594%" height="15" fill="rgb(250,50,5)" fg:x="103" fg:w="2"/><text x="8.4572%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.2869%" y="533" width="0.0797%" height="15" fill="rgb(207,67,11)" fg:x="104" fg:w="1"/><text x="8.5369%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6056%" y="565" width="0.0797%" height="15" fill="rgb(245,204,40)" fg:x="108" fg:w="1"/><text x="8.8556%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6056%" y="549" width="0.0797%" height="15" fill="rgb(238,228,24)" fg:x="108" fg:w="1"/><text x="8.8556%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="8.6853%" y="549" width="0.2390%" height="15" fill="rgb(217,116,22)" fg:x="109" fg:w="3"/><text x="8.9353%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.7649%" y="533" width="0.1594%" height="15" fill="rgb(234,98,12)" fg:x="110" fg:w="2"/><text x="9.0149%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="8.3665%" y="629" width="0.7171%" height="15" fill="rgb(242,170,50)" fg:x="105" fg:w="9"/><text x="8.6165%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="8.3665%" y="613" width="0.7171%" height="15" fill="rgb(235,7,5)" fg:x="105" fg:w="9"/><text x="8.6165%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="8.4462%" y="597" width="0.6375%" height="15" fill="rgb(241,114,28)" fg:x="106" fg:w="8"/><text x="8.6962%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="8.4462%" y="581" width="0.6375%" height="15" fill="rgb(246,112,42)" fg:x="106" fg:w="8"/><text x="8.6962%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="8.6853%" y="565" width="0.3984%" height="15" fill="rgb(248,228,14)" fg:x="109" fg:w="5"/><text x="8.9353%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.9243%" y="549" width="0.1594%" height="15" fill="rgb(208,133,18)" fg:x="112" fg:w="2"/><text x="9.1743%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0040%" y="533" width="0.0797%" height="15" fill="rgb(207,35,49)" fg:x="113" fg:w="1"/><text x="9.2540%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.0040%" y="517" width="0.0797%" height="15" fill="rgb(205,68,36)" fg:x="113" fg:w="1"/><text x="9.2540%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0040%" y="501" width="0.0797%" height="15" fill="rgb(245,62,40)" fg:x="113" fg:w="1"/><text x="9.2540%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (11 samples, 0.88%)</title><rect x="8.3665%" y="645" width="0.8765%" height="15" fill="rgb(228,27,24)" fg:x="105" fg:w="11"/><text x="8.6165%" y="655.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="9.0837%" y="629" width="0.1594%" height="15" fill="rgb(253,19,12)" fg:x="114" fg:w="2"/><text x="9.3337%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.0837%" y="613" width="0.1594%" height="15" fill="rgb(232,28,20)" fg:x="114" fg:w="2"/><text x="9.3337%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.1633%" y="597" width="0.0797%" height="15" fill="rgb(218,35,51)" fg:x="115" fg:w="1"/><text x="9.4133%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2430%" y="613" width="0.0797%" height="15" fill="rgb(212,90,40)" fg:x="116" fg:w="1"/><text x="9.4930%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.40%)</title><rect x="9.3227%" y="613" width="0.3984%" height="15" fill="rgb(220,172,12)" fg:x="117" fg:w="5"/><text x="9.5727%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="9.4821%" y="597" width="0.2390%" height="15" fill="rgb(226,159,20)" fg:x="119" fg:w="3"/><text x="9.7321%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.6414%" y="581" width="0.0797%" height="15" fill="rgb(234,205,16)" fg:x="121" fg:w="1"/><text x="9.8914%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7211%" y="613" width="0.0797%" height="15" fill="rgb(207,9,39)" fg:x="122" fg:w="1"/><text x="9.9711%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.7211%" y="597" width="0.0797%" height="15" fill="rgb(249,143,15)" fg:x="122" fg:w="1"/><text x="9.9711%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8008%" y="613" width="0.0797%" height="15" fill="rgb(253,133,29)" fg:x="123" fg:w="1"/><text x="10.0508%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.8008%" y="597" width="0.0797%" height="15" fill="rgb(221,187,0)" fg:x="123" fg:w="1"/><text x="10.0508%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8008%" y="581" width="0.0797%" height="15" fill="rgb(205,204,26)" fg:x="123" fg:w="1"/><text x="10.0508%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="10.0398%" y="565" width="0.1594%" height="15" fill="rgb(224,68,54)" fg:x="126" fg:w="2"/><text x="10.2898%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0398%" y="549" width="0.1594%" height="15" fill="rgb(209,67,4)" fg:x="126" fg:w="2"/><text x="10.2898%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.0398%" y="533" width="0.1594%" height="15" fill="rgb(228,229,18)" fg:x="126" fg:w="2"/><text x="10.2898%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0398%" y="517" width="0.1594%" height="15" fill="rgb(231,89,13)" fg:x="126" fg:w="2"/><text x="10.2898%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.1195%" y="501" width="0.0797%" height="15" fill="rgb(210,182,18)" fg:x="127" fg:w="1"/><text x="10.3695%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2789%" y="533" width="0.0797%" height="15" fill="rgb(240,105,2)" fg:x="129" fg:w="1"/><text x="10.5289%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2789%" y="517" width="0.0797%" height="15" fill="rgb(207,170,50)" fg:x="129" fg:w="1"/><text x="10.5289%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2789%" y="501" width="0.0797%" height="15" fill="rgb(232,133,24)" fg:x="129" fg:w="1"/><text x="10.5289%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.3586%" y="533" width="0.0797%" height="15" fill="rgb(235,166,27)" fg:x="130" fg:w="1"/><text x="10.6086%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7570%" y="469" width="0.0797%" height="15" fill="rgb(209,19,13)" fg:x="135" fg:w="1"/><text x="11.0070%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7570%" y="453" width="0.0797%" height="15" fill="rgb(226,79,39)" fg:x="135" fg:w="1"/><text x="11.0070%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7570%" y="437" width="0.0797%" height="15" fill="rgb(222,163,10)" fg:x="135" fg:w="1"/><text x="11.0070%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (21 samples, 1.67%)</title><rect x="9.2430%" y="645" width="1.6733%" height="15" fill="rgb(214,44,19)" fg:x="116" fg:w="21"/><text x="9.4930%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 1.67%)</title><rect x="9.2430%" y="629" width="1.6733%" height="15" fill="rgb(210,217,13)" fg:x="116" fg:w="21"/><text x="9.4930%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.04%)</title><rect x="9.8805%" y="613" width="1.0359%" height="15" fill="rgb(237,61,54)" fg:x="124" fg:w="13"/><text x="10.1305%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.04%)</title><rect x="9.8805%" y="597" width="1.0359%" height="15" fill="rgb(226,184,24)" fg:x="124" fg:w="13"/><text x="10.1305%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.96%)</title><rect x="9.9602%" y="581" width="0.9562%" height="15" fill="rgb(223,226,4)" fg:x="125" fg:w="12"/><text x="10.2102%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.72%)</title><rect x="10.1992%" y="565" width="0.7171%" height="15" fill="rgb(210,26,41)" fg:x="128" fg:w="9"/><text x="10.4492%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="10.2789%" y="549" width="0.6375%" height="15" fill="rgb(220,221,6)" fg:x="129" fg:w="8"/><text x="10.5289%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="10.4382%" y="533" width="0.4781%" height="15" fill="rgb(225,89,49)" fg:x="131" fg:w="6"/><text x="10.6882%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.6773%" y="517" width="0.2390%" height="15" fill="rgb(218,70,45)" fg:x="134" fg:w="3"/><text x="10.9273%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.7570%" y="501" width="0.1594%" height="15" fill="rgb(238,166,21)" fg:x="135" fg:w="2"/><text x="11.0070%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.7570%" y="485" width="0.1594%" height="15" fill="rgb(224,141,44)" fg:x="135" fg:w="2"/><text x="11.0070%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.8367%" y="469" width="0.0797%" height="15" fill="rgb(230,12,49)" fg:x="136" fg:w="1"/><text x="11.0867%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.8367%" y="453" width="0.0797%" height="15" fill="rgb(212,174,12)" fg:x="136" fg:w="1"/><text x="11.0867%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8367%" y="437" width="0.0797%" height="15" fill="rgb(246,67,9)" fg:x="136" fg:w="1"/><text x="11.0867%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8367%" y="421" width="0.0797%" height="15" fill="rgb(239,35,23)" fg:x="136" fg:w="1"/><text x="11.0867%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8367%" y="405" width="0.0797%" height="15" fill="rgb(211,167,0)" fg:x="136" fg:w="1"/><text x="11.0867%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.0757%" y="517" width="0.1594%" height="15" fill="rgb(225,119,45)" fg:x="139" fg:w="2"/><text x="11.3257%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.0757%" y="501" width="0.1594%" height="15" fill="rgb(210,162,6)" fg:x="139" fg:w="2"/><text x="11.3257%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1554%" y="485" width="0.0797%" height="15" fill="rgb(208,118,35)" fg:x="140" fg:w="1"/><text x="11.4054%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="11.0757%" y="549" width="0.2390%" height="15" fill="rgb(239,4,53)" fg:x="139" fg:w="3"/><text x="11.3257%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="11.0757%" y="533" width="0.2390%" height="15" fill="rgb(213,130,21)" fg:x="139" fg:w="3"/><text x="11.3257%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2351%" y="517" width="0.0797%" height="15" fill="rgb(235,148,0)" fg:x="141" fg:w="1"/><text x="11.4851%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.2351%" y="501" width="0.0797%" height="15" fill="rgb(244,224,18)" fg:x="141" fg:w="1"/><text x="11.4851%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.3147%" y="549" width="0.0797%" height="15" fill="rgb(211,214,4)" fg:x="142" fg:w="1"/><text x="11.5647%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.3147%" y="533" width="0.0797%" height="15" fill="rgb(206,119,25)" fg:x="142" fg:w="1"/><text x="11.5647%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="10.9960%" y="565" width="0.4781%" height="15" fill="rgb(243,93,47)" fg:x="138" fg:w="6"/><text x="11.2460%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3944%" y="549" width="0.0797%" height="15" fill="rgb(224,194,6)" fg:x="143" fg:w="1"/><text x="11.6444%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3944%" y="533" width="0.0797%" height="15" fill="rgb(243,229,6)" fg:x="143" fg:w="1"/><text x="11.6444%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3944%" y="517" width="0.0797%" height="15" fill="rgb(207,23,50)" fg:x="143" fg:w="1"/><text x="11.6444%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="10.9960%" y="581" width="0.5578%" height="15" fill="rgb(253,192,32)" fg:x="138" fg:w="7"/><text x="11.2460%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4741%" y="565" width="0.0797%" height="15" fill="rgb(213,21,6)" fg:x="144" fg:w="1"/><text x="11.7241%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.5538%" y="581" width="0.0797%" height="15" fill="rgb(243,151,13)" fg:x="145" fg:w="1"/><text x="11.8038%" y="591.50"></text></g><g><title>engine::session::Session::close (55 samples, 4.38%)</title><rect x="7.3307%" y="741" width="4.3825%" height="15" fill="rgb(233,165,41)" fg:x="92" fg:w="55"/><text x="7.5807%" y="751.50">engin..</text></g><g><title>engine::session::state::State::close (53 samples, 4.22%)</title><rect x="7.4900%" y="725" width="4.2231%" height="15" fill="rgb(246,176,45)" fg:x="94" fg:w="53"/><text x="7.7400%" y="735.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (52 samples, 4.14%)</title><rect x="7.5697%" y="709" width="4.1434%" height="15" fill="rgb(217,170,52)" fg:x="95" fg:w="52"/><text x="7.8197%" y="719.50">engin..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (52 samples, 4.14%)</title><rect x="7.5697%" y="693" width="4.1434%" height="15" fill="rgb(214,203,54)" fg:x="95" fg:w="52"/><text x="7.8197%" y="703.50">engin..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (51 samples, 4.06%)</title><rect x="7.6494%" y="677" width="4.0637%" height="15" fill="rgb(248,215,49)" fg:x="96" fg:w="51"/><text x="7.8994%" y="687.50">engi..</text></g><g><title>kernel::model::any_entity_changes (42 samples, 3.35%)</title><rect x="8.3665%" y="661" width="3.3466%" height="15" fill="rgb(208,46,10)" fg:x="105" fg:w="42"/><text x="8.6165%" y="671.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.80%)</title><rect x="10.9163%" y="645" width="0.7968%" height="15" fill="rgb(254,5,31)" fg:x="137" fg:w="10"/><text x="11.1663%" y="655.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.80%)</title><rect x="10.9163%" y="629" width="0.7968%" height="15" fill="rgb(222,104,33)" fg:x="137" fg:w="10"/><text x="11.1663%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="10.9163%" y="613" width="0.7968%" height="15" fill="rgb(248,49,16)" fg:x="137" fg:w="10"/><text x="11.1663%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.80%)</title><rect x="10.9163%" y="597" width="0.7968%" height="15" fill="rgb(232,198,41)" fg:x="137" fg:w="10"/><text x="11.1663%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6335%" y="581" width="0.0797%" height="15" fill="rgb(214,125,3)" fg:x="146" fg:w="1"/><text x="11.8835%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6335%" y="565" width="0.0797%" height="15" fill="rgb(229,220,28)" fg:x="146" fg:w="1"/><text x="11.8835%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6335%" y="549" width="0.0797%" height="15" fill="rgb(222,64,37)" fg:x="146" fg:w="1"/><text x="11.8835%" y="559.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="11.8725%" y="533" width="0.1594%" height="15" fill="rgb(249,184,13)" fg:x="149" fg:w="2"/><text x="12.1225%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.8725%" y="517" width="0.1594%" height="15" fill="rgb(252,176,6)" fg:x="149" fg:w="2"/><text x="12.1225%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.8725%" y="501" width="0.1594%" height="15" fill="rgb(228,153,7)" fg:x="149" fg:w="2"/><text x="12.1225%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.8725%" y="485" width="0.1594%" height="15" fill="rgb(242,193,5)" fg:x="149" fg:w="2"/><text x="12.1225%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9522%" y="469" width="0.0797%" height="15" fill="rgb(232,140,9)" fg:x="150" fg:w="1"/><text x="12.2022%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.9522%" y="453" width="0.0797%" height="15" fill="rgb(213,222,16)" fg:x="150" fg:w="1"/><text x="12.2022%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9522%" y="437" width="0.0797%" height="15" fill="rgb(222,75,50)" fg:x="150" fg:w="1"/><text x="12.2022%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.9522%" y="421" width="0.0797%" height="15" fill="rgb(205,180,2)" fg:x="150" fg:w="1"/><text x="12.2022%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9522%" y="405" width="0.0797%" height="15" fill="rgb(216,34,7)" fg:x="150" fg:w="1"/><text x="12.2022%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.9522%" y="389" width="0.0797%" height="15" fill="rgb(253,16,32)" fg:x="150" fg:w="1"/><text x="12.2022%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9522%" y="373" width="0.0797%" height="15" fill="rgb(208,97,28)" fg:x="150" fg:w="1"/><text x="12.2022%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9522%" y="357" width="0.0797%" height="15" fill="rgb(225,92,11)" fg:x="150" fg:w="1"/><text x="12.2022%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.0319%" y="421" width="0.0797%" height="15" fill="rgb(243,38,12)" fg:x="151" fg:w="1"/><text x="12.2819%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.0319%" y="405" width="0.0797%" height="15" fill="rgb(208,139,16)" fg:x="151" fg:w="1"/><text x="12.2819%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.0319%" y="453" width="0.1594%" height="15" fill="rgb(227,24,9)" fg:x="151" fg:w="2"/><text x="12.2819%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.0319%" y="437" width="0.1594%" height="15" fill="rgb(206,62,11)" fg:x="151" fg:w="2"/><text x="12.2819%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="12.1116%" y="421" width="0.0797%" height="15" fill="rgb(228,134,27)" fg:x="152" fg:w="1"/><text x="12.3616%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.1116%" y="405" width="0.0797%" height="15" fill="rgb(205,55,33)" fg:x="152" fg:w="1"/><text x="12.3616%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.1116%" y="389" width="0.0797%" height="15" fill="rgb(243,75,43)" fg:x="152" fg:w="1"/><text x="12.3616%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.1116%" y="373" width="0.0797%" height="15" fill="rgb(223,27,42)" fg:x="152" fg:w="1"/><text x="12.3616%" y="383.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.56%)</title><rect x="11.7928%" y="645" width="0.5578%" height="15" fill="rgb(232,189,33)" fg:x="148" fg:w="7"/><text x="12.0428%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.56%)</title><rect x="11.7928%" y="629" width="0.5578%" height="15" fill="rgb(210,9,39)" fg:x="148" fg:w="7"/><text x="12.0428%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="11.7928%" y="613" width="0.5578%" height="15" fill="rgb(242,85,26)" fg:x="148" fg:w="7"/><text x="12.0428%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.48%)</title><rect x="11.8725%" y="597" width="0.4781%" height="15" fill="rgb(248,44,4)" fg:x="149" fg:w="6"/><text x="12.1225%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="11.8725%" y="581" width="0.4781%" height="15" fill="rgb(250,96,46)" fg:x="149" fg:w="6"/><text x="12.1225%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="11.8725%" y="565" width="0.4781%" height="15" fill="rgb(229,116,26)" fg:x="149" fg:w="6"/><text x="12.1225%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.48%)</title><rect x="11.8725%" y="549" width="0.4781%" height="15" fill="rgb(246,94,34)" fg:x="149" fg:w="6"/><text x="12.1225%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="12.0319%" y="533" width="0.3187%" height="15" fill="rgb(251,73,21)" fg:x="151" fg:w="4"/><text x="12.2819%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="12.0319%" y="517" width="0.3187%" height="15" fill="rgb(254,121,25)" fg:x="151" fg:w="4"/><text x="12.2819%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="12.0319%" y="501" width="0.3187%" height="15" fill="rgb(215,161,49)" fg:x="151" fg:w="4"/><text x="12.2819%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="12.0319%" y="485" width="0.3187%" height="15" fill="rgb(221,43,13)" fg:x="151" fg:w="4"/><text x="12.2819%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="12.0319%" y="469" width="0.3187%" height="15" fill="rgb(249,5,37)" fg:x="151" fg:w="4"/><text x="12.2819%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="12.1912%" y="453" width="0.1594%" height="15" fill="rgb(226,25,44)" fg:x="153" fg:w="2"/><text x="12.4412%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.1912%" y="437" width="0.1594%" height="15" fill="rgb(238,189,16)" fg:x="153" fg:w="2"/><text x="12.4412%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="12.1912%" y="421" width="0.1594%" height="15" fill="rgb(251,186,8)" fg:x="153" fg:w="2"/><text x="12.4412%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="12.1912%" y="405" width="0.1594%" height="15" fill="rgb(254,34,31)" fg:x="153" fg:w="2"/><text x="12.4412%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="12.1912%" y="389" width="0.1594%" height="15" fill="rgb(225,215,27)" fg:x="153" fg:w="2"/><text x="12.4412%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="12.3506%" y="613" width="0.0797%" height="15" fill="rgb(221,192,48)" fg:x="155" fg:w="1"/><text x="12.6006%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3506%" y="597" width="0.0797%" height="15" fill="rgb(219,137,20)" fg:x="155" fg:w="1"/><text x="12.6006%" y="607.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.72%)</title><rect x="11.7928%" y="661" width="0.7171%" height="15" fill="rgb(219,84,11)" fg:x="148" fg:w="9"/><text x="12.0428%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (2 samples, 0.16%)</title><rect x="12.3506%" y="645" width="0.1594%" height="15" fill="rgb(224,10,23)" fg:x="155" fg:w="2"/><text x="12.6006%" y="655.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="12.3506%" y="629" width="0.1594%" height="15" fill="rgb(248,22,39)" fg:x="155" fg:w="2"/><text x="12.6006%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="12.4303%" y="613" width="0.0797%" height="15" fill="rgb(212,154,20)" fg:x="156" fg:w="1"/><text x="12.6803%" y="623.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="12.5100%" y="517" width="0.0797%" height="15" fill="rgb(236,199,50)" fg:x="157" fg:w="1"/><text x="12.7600%" y="527.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5100%" y="501" width="0.0797%" height="15" fill="rgb(211,9,17)" fg:x="157" fg:w="1"/><text x="12.7600%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5100%" y="485" width="0.0797%" height="15" fill="rgb(243,216,36)" fg:x="157" fg:w="1"/><text x="12.7600%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5100%" y="469" width="0.0797%" height="15" fill="rgb(250,2,10)" fg:x="157" fg:w="1"/><text x="12.7600%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.5100%" y="453" width="0.0797%" height="15" fill="rgb(226,50,48)" fg:x="157" fg:w="1"/><text x="12.7600%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.5100%" y="437" width="0.0797%" height="15" fill="rgb(243,81,16)" fg:x="157" fg:w="1"/><text x="12.7600%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.5100%" y="421" width="0.0797%" height="15" fill="rgb(250,14,2)" fg:x="157" fg:w="1"/><text x="12.7600%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7490%" y="357" width="0.0797%" height="15" fill="rgb(233,135,29)" fg:x="160" fg:w="1"/><text x="12.9990%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7490%" y="341" width="0.0797%" height="15" fill="rgb(224,64,43)" fg:x="160" fg:w="1"/><text x="12.9990%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.7490%" y="325" width="0.0797%" height="15" fill="rgb(238,84,13)" fg:x="160" fg:w="1"/><text x="12.9990%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.7490%" y="309" width="0.0797%" height="15" fill="rgb(253,48,26)" fg:x="160" fg:w="1"/><text x="12.9990%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.7490%" y="293" width="0.0797%" height="15" fill="rgb(205,223,31)" fg:x="160" fg:w="1"/><text x="12.9990%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7490%" y="277" width="0.0797%" height="15" fill="rgb(221,41,32)" fg:x="160" fg:w="1"/><text x="12.9990%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7490%" y="261" width="0.0797%" height="15" fill="rgb(213,158,31)" fg:x="160" fg:w="1"/><text x="12.9990%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.7490%" y="245" width="0.0797%" height="15" fill="rgb(245,126,43)" fg:x="160" fg:w="1"/><text x="12.9990%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.7490%" y="229" width="0.0797%" height="15" fill="rgb(227,7,22)" fg:x="160" fg:w="1"/><text x="12.9990%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.7490%" y="213" width="0.0797%" height="15" fill="rgb(252,90,44)" fg:x="160" fg:w="1"/><text x="12.9990%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.7490%" y="197" width="0.0797%" height="15" fill="rgb(253,91,0)" fg:x="160" fg:w="1"/><text x="12.9990%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7490%" y="181" width="0.0797%" height="15" fill="rgb(252,175,49)" fg:x="160" fg:w="1"/><text x="12.9990%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.6693%" y="437" width="0.2390%" height="15" fill="rgb(246,150,1)" fg:x="159" fg:w="3"/><text x="12.9193%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.6693%" y="421" width="0.2390%" height="15" fill="rgb(241,192,25)" fg:x="159" fg:w="3"/><text x="12.9193%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.6693%" y="405" width="0.2390%" height="15" fill="rgb(239,187,11)" fg:x="159" fg:w="3"/><text x="12.9193%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="12.6693%" y="389" width="0.2390%" height="15" fill="rgb(218,202,51)" fg:x="159" fg:w="3"/><text x="12.9193%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.7490%" y="373" width="0.1594%" height="15" fill="rgb(225,176,8)" fg:x="160" fg:w="2"/><text x="12.9990%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8287%" y="357" width="0.0797%" height="15" fill="rgb(219,122,41)" fg:x="161" fg:w="1"/><text x="13.0787%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.9084%" y="405" width="0.0797%" height="15" fill="rgb(248,140,20)" fg:x="162" fg:w="1"/><text x="13.1584%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.9084%" y="389" width="0.0797%" height="15" fill="rgb(245,41,37)" fg:x="162" fg:w="1"/><text x="13.1584%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.9880%" y="405" width="0.0797%" height="15" fill="rgb(235,82,39)" fg:x="163" fg:w="1"/><text x="13.2380%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.1474%" y="277" width="0.0797%" height="15" fill="rgb(230,108,42)" fg:x="165" fg:w="1"/><text x="13.3974%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (8 samples, 0.64%)</title><rect x="12.6693%" y="485" width="0.6375%" height="15" fill="rgb(215,150,50)" fg:x="159" fg:w="8"/><text x="12.9193%" y="495.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.64%)</title><rect x="12.6693%" y="469" width="0.6375%" height="15" fill="rgb(233,212,5)" fg:x="159" fg:w="8"/><text x="12.9193%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.64%)</title><rect x="12.6693%" y="453" width="0.6375%" height="15" fill="rgb(245,80,22)" fg:x="159" fg:w="8"/><text x="12.9193%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="12.9084%" y="437" width="0.3984%" height="15" fill="rgb(238,129,16)" fg:x="162" fg:w="5"/><text x="13.1584%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="12.9084%" y="421" width="0.3984%" height="15" fill="rgb(240,19,0)" fg:x="162" fg:w="5"/><text x="13.1584%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.0677%" y="405" width="0.2390%" height="15" fill="rgb(232,42,35)" fg:x="164" fg:w="3"/><text x="13.3177%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.0677%" y="389" width="0.2390%" height="15" fill="rgb(223,130,24)" fg:x="164" fg:w="3"/><text x="13.3177%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="13.0677%" y="373" width="0.2390%" height="15" fill="rgb(237,16,22)" fg:x="164" fg:w="3"/><text x="13.3177%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.0677%" y="357" width="0.2390%" height="15" fill="rgb(248,192,20)" fg:x="164" fg:w="3"/><text x="13.3177%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.0677%" y="341" width="0.2390%" height="15" fill="rgb(233,167,2)" fg:x="164" fg:w="3"/><text x="13.3177%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.0677%" y="325" width="0.2390%" height="15" fill="rgb(252,71,44)" fg:x="164" fg:w="3"/><text x="13.3177%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.0677%" y="309" width="0.2390%" height="15" fill="rgb(238,37,47)" fg:x="164" fg:w="3"/><text x="13.3177%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.0677%" y="293" width="0.2390%" height="15" fill="rgb(214,202,54)" fg:x="164" fg:w="3"/><text x="13.3177%" y="303.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="13.2271%" y="277" width="0.0797%" height="15" fill="rgb(254,165,40)" fg:x="166" fg:w="1"/><text x="13.4771%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3068%" y="469" width="0.0797%" height="15" fill="rgb(246,173,38)" fg:x="167" fg:w="1"/><text x="13.5568%" y="479.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="13.3865%" y="469" width="0.0797%" height="15" fill="rgb(215,3,27)" fg:x="168" fg:w="1"/><text x="13.6365%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.3865%" y="453" width="0.0797%" height="15" fill="rgb(239,169,51)" fg:x="168" fg:w="1"/><text x="13.6365%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.3865%" y="437" width="0.0797%" height="15" fill="rgb(212,5,25)" fg:x="168" fg:w="1"/><text x="13.6365%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4661%" y="357" width="0.0797%" height="15" fill="rgb(243,45,17)" fg:x="169" fg:w="1"/><text x="13.7161%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.4661%" y="437" width="0.1594%" height="15" fill="rgb(242,97,9)" fg:x="169" fg:w="2"/><text x="13.7161%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.4661%" y="421" width="0.1594%" height="15" fill="rgb(228,71,31)" fg:x="169" fg:w="2"/><text x="13.7161%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.4661%" y="405" width="0.1594%" height="15" fill="rgb(252,184,16)" fg:x="169" fg:w="2"/><text x="13.7161%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.4661%" y="389" width="0.1594%" height="15" fill="rgb(236,169,46)" fg:x="169" fg:w="2"/><text x="13.7161%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.4661%" y="373" width="0.1594%" height="15" fill="rgb(207,17,47)" fg:x="169" fg:w="2"/><text x="13.7161%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5458%" y="357" width="0.0797%" height="15" fill="rgb(206,201,28)" fg:x="170" fg:w="1"/><text x="13.7958%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.6255%" y="437" width="0.0797%" height="15" fill="rgb(224,184,23)" fg:x="171" fg:w="1"/><text x="13.8755%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.7052%" y="437" width="0.0797%" height="15" fill="rgb(208,139,48)" fg:x="172" fg:w="1"/><text x="13.9552%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.7052%" y="421" width="0.0797%" height="15" fill="rgb(208,130,10)" fg:x="172" fg:w="1"/><text x="13.9552%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.7052%" y="405" width="0.0797%" height="15" fill="rgb(211,213,45)" fg:x="172" fg:w="1"/><text x="13.9552%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.7052%" y="389" width="0.0797%" height="15" fill="rgb(235,100,30)" fg:x="172" fg:w="1"/><text x="13.9552%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.7052%" y="373" width="0.0797%" height="15" fill="rgb(206,144,31)" fg:x="172" fg:w="1"/><text x="13.9552%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7849%" y="341" width="0.0797%" height="15" fill="rgb(224,200,26)" fg:x="173" fg:w="1"/><text x="14.0349%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7849%" y="325" width="0.0797%" height="15" fill="rgb(247,104,53)" fg:x="173" fg:w="1"/><text x="14.0349%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="13.3068%" y="485" width="0.6375%" height="15" fill="rgb(220,14,17)" fg:x="167" fg:w="8"/><text x="13.5568%" y="495.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="13.4661%" y="469" width="0.4781%" height="15" fill="rgb(230,140,40)" fg:x="169" fg:w="6"/><text x="13.7161%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="13.4661%" y="453" width="0.4781%" height="15" fill="rgb(229,2,41)" fg:x="169" fg:w="6"/><text x="13.7161%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.7849%" y="437" width="0.1594%" height="15" fill="rgb(232,89,16)" fg:x="173" fg:w="2"/><text x="14.0349%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.7849%" y="421" width="0.1594%" height="15" fill="rgb(247,59,52)" fg:x="173" fg:w="2"/><text x="14.0349%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.7849%" y="405" width="0.1594%" height="15" fill="rgb(226,110,21)" fg:x="173" fg:w="2"/><text x="14.0349%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.7849%" y="389" width="0.1594%" height="15" fill="rgb(224,176,43)" fg:x="173" fg:w="2"/><text x="14.0349%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="13.7849%" y="373" width="0.1594%" height="15" fill="rgb(221,73,6)" fg:x="173" fg:w="2"/><text x="14.0349%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.7849%" y="357" width="0.1594%" height="15" fill="rgb(232,78,19)" fg:x="173" fg:w="2"/><text x="14.0349%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8645%" y="341" width="0.0797%" height="15" fill="rgb(233,112,48)" fg:x="174" fg:w="1"/><text x="14.1145%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8645%" y="325" width="0.0797%" height="15" fill="rgb(243,131,47)" fg:x="174" fg:w="1"/><text x="14.1145%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.8645%" y="309" width="0.0797%" height="15" fill="rgb(226,51,1)" fg:x="174" fg:w="1"/><text x="14.1145%" y="319.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="13.9442%" y="485" width="0.1594%" height="15" fill="rgb(247,58,7)" fg:x="175" fg:w="2"/><text x="14.1942%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="13.9442%" y="469" width="0.1594%" height="15" fill="rgb(209,7,32)" fg:x="175" fg:w="2"/><text x="14.1942%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.1833%" y="389" width="0.0797%" height="15" fill="rgb(209,39,41)" fg:x="178" fg:w="1"/><text x="14.4333%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="14.1036%" y="437" width="0.2390%" height="15" fill="rgb(226,182,46)" fg:x="177" fg:w="3"/><text x="14.3536%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="14.1036%" y="421" width="0.2390%" height="15" fill="rgb(230,219,10)" fg:x="177" fg:w="3"/><text x="14.3536%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.1833%" y="405" width="0.1594%" height="15" fill="rgb(227,175,30)" fg:x="178" fg:w="2"/><text x="14.4333%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.2629%" y="389" width="0.0797%" height="15" fill="rgb(217,2,50)" fg:x="179" fg:w="1"/><text x="14.5129%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.4223%" y="405" width="0.0797%" height="15" fill="rgb(229,160,0)" fg:x="181" fg:w="1"/><text x="14.6723%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.4223%" y="389" width="0.0797%" height="15" fill="rgb(207,78,37)" fg:x="181" fg:w="1"/><text x="14.6723%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.4223%" y="373" width="0.0797%" height="15" fill="rgb(225,57,0)" fg:x="181" fg:w="1"/><text x="14.6723%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4223%" y="357" width="0.0797%" height="15" fill="rgb(232,154,2)" fg:x="181" fg:w="1"/><text x="14.6723%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="14.6614%" y="309" width="0.0797%" height="15" fill="rgb(241,212,25)" fg:x="184" fg:w="1"/><text x="14.9114%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="14.5817%" y="325" width="0.2390%" height="15" fill="rgb(226,69,20)" fg:x="183" fg:w="3"/><text x="14.8317%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="14.7410%" y="309" width="0.0797%" height="15" fill="rgb(247,184,54)" fg:x="185" fg:w="1"/><text x="14.9910%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="14.7410%" y="293" width="0.0797%" height="15" fill="rgb(210,145,0)" fg:x="185" fg:w="1"/><text x="14.9910%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8207%" y="309" width="0.0797%" height="15" fill="rgb(253,82,12)" fg:x="186" fg:w="1"/><text x="15.0707%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="14.9004%" y="309" width="0.0797%" height="15" fill="rgb(245,42,11)" fg:x="187" fg:w="1"/><text x="15.1504%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (7 samples, 0.56%)</title><rect x="14.5020%" y="341" width="0.5578%" height="15" fill="rgb(219,147,32)" fg:x="182" fg:w="7"/><text x="14.7520%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="14.8207%" y="325" width="0.2390%" height="15" fill="rgb(246,12,7)" fg:x="186" fg:w="3"/><text x="15.0707%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="14.9801%" y="309" width="0.0797%" height="15" fill="rgb(243,50,9)" fg:x="188" fg:w="1"/><text x="15.2301%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="14.5020%" y="405" width="0.7171%" height="15" fill="rgb(219,149,6)" fg:x="182" fg:w="9"/><text x="14.7520%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="14.5020%" y="389" width="0.7171%" height="15" fill="rgb(241,51,42)" fg:x="182" fg:w="9"/><text x="14.7520%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (9 samples, 0.72%)</title><rect x="14.5020%" y="373" width="0.7171%" height="15" fill="rgb(226,128,27)" fg:x="182" fg:w="9"/><text x="14.7520%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (9 samples, 0.72%)</title><rect x="14.5020%" y="357" width="0.7171%" height="15" fill="rgb(244,144,4)" fg:x="182" fg:w="9"/><text x="14.7520%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="15.0598%" y="341" width="0.1594%" height="15" fill="rgb(221,4,13)" fg:x="189" fg:w="2"/><text x="15.3098%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="15.1394%" y="325" width="0.0797%" height="15" fill="rgb(208,170,28)" fg:x="190" fg:w="1"/><text x="15.3894%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1394%" y="309" width="0.0797%" height="15" fill="rgb(226,131,13)" fg:x="190" fg:w="1"/><text x="15.3894%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1394%" y="293" width="0.0797%" height="15" fill="rgb(215,72,41)" fg:x="190" fg:w="1"/><text x="15.3894%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.1394%" y="277" width="0.0797%" height="15" fill="rgb(243,108,20)" fg:x="190" fg:w="1"/><text x="15.3894%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2191%" y="389" width="0.0797%" height="15" fill="rgb(230,189,17)" fg:x="191" fg:w="1"/><text x="15.4691%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="15.2988%" y="373" width="0.0797%" height="15" fill="rgb(220,50,17)" fg:x="192" fg:w="1"/><text x="15.5488%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="15.2988%" y="357" width="0.0797%" height="15" fill="rgb(248,152,48)" fg:x="192" fg:w="1"/><text x="15.5488%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="15.2988%" y="341" width="0.0797%" height="15" fill="rgb(244,91,11)" fg:x="192" fg:w="1"/><text x="15.5488%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.2988%" y="325" width="0.0797%" height="15" fill="rgb(220,157,5)" fg:x="192" fg:w="1"/><text x="15.5488%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2988%" y="309" width="0.0797%" height="15" fill="rgb(253,137,8)" fg:x="192" fg:w="1"/><text x="15.5488%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="15.3785%" y="357" width="0.0797%" height="15" fill="rgb(217,137,51)" fg:x="193" fg:w="1"/><text x="15.6285%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.3785%" y="341" width="0.0797%" height="15" fill="rgb(218,209,53)" fg:x="193" fg:w="1"/><text x="15.6285%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="15.4582%" y="357" width="0.0797%" height="15" fill="rgb(249,137,25)" fg:x="194" fg:w="1"/><text x="15.7082%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4582%" y="341" width="0.0797%" height="15" fill="rgb(239,155,26)" fg:x="194" fg:w="1"/><text x="15.7082%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="15.2191%" y="405" width="0.3984%" height="15" fill="rgb(227,85,46)" fg:x="191" fg:w="5"/><text x="15.4691%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="15.2988%" y="389" width="0.3187%" height="15" fill="rgb(251,107,43)" fg:x="192" fg:w="4"/><text x="15.5488%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="15.3785%" y="373" width="0.2390%" height="15" fill="rgb(234,170,33)" fg:x="193" fg:w="3"/><text x="15.6285%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="15.5378%" y="357" width="0.0797%" height="15" fill="rgb(206,29,35)" fg:x="195" fg:w="1"/><text x="15.7878%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.5378%" y="341" width="0.0797%" height="15" fill="rgb(227,138,25)" fg:x="195" fg:w="1"/><text x="15.7878%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="15.6175%" y="389" width="0.1594%" height="15" fill="rgb(249,131,35)" fg:x="196" fg:w="2"/><text x="15.8675%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="15.6175%" y="373" width="0.1594%" height="15" fill="rgb(239,6,40)" fg:x="196" fg:w="2"/><text x="15.8675%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.6175%" y="357" width="0.1594%" height="15" fill="rgb(246,136,47)" fg:x="196" fg:w="2"/><text x="15.8675%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.6175%" y="341" width="0.1594%" height="15" fill="rgb(253,58,26)" fg:x="196" fg:w="2"/><text x="15.8675%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.7769%" y="357" width="0.0797%" height="15" fill="rgb(237,141,10)" fg:x="198" fg:w="1"/><text x="16.0269%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7769%" y="341" width="0.0797%" height="15" fill="rgb(234,156,12)" fg:x="198" fg:w="1"/><text x="16.0269%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.8566%" y="357" width="0.0797%" height="15" fill="rgb(243,224,36)" fg:x="199" fg:w="1"/><text x="16.1066%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="15.9363%" y="357" width="0.1594%" height="15" fill="rgb(205,229,51)" fg:x="200" fg:w="2"/><text x="16.1863%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="15.9363%" y="341" width="0.1594%" height="15" fill="rgb(223,189,4)" fg:x="200" fg:w="2"/><text x="16.1863%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.0159%" y="325" width="0.0797%" height="15" fill="rgb(249,167,54)" fg:x="201" fg:w="1"/><text x="16.2659%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.0159%" y="309" width="0.0797%" height="15" fill="rgb(218,34,28)" fg:x="201" fg:w="1"/><text x="16.2659%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.0159%" y="293" width="0.0797%" height="15" fill="rgb(232,109,42)" fg:x="201" fg:w="1"/><text x="16.2659%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.0159%" y="277" width="0.0797%" height="15" fill="rgb(248,214,46)" fg:x="201" fg:w="1"/><text x="16.2659%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="16.0956%" y="357" width="0.0797%" height="15" fill="rgb(244,216,40)" fg:x="202" fg:w="1"/><text x="16.3456%" y="367.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="16.1753%" y="357" width="0.0797%" height="15" fill="rgb(231,226,31)" fg:x="203" fg:w="1"/><text x="16.4253%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1753%" y="341" width="0.0797%" height="15" fill="rgb(238,38,43)" fg:x="203" fg:w="1"/><text x="16.4253%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4143%" y="325" width="0.0797%" height="15" fill="rgb(208,88,43)" fg:x="206" fg:w="1"/><text x="16.6643%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.20%)</title><rect x="16.3347%" y="341" width="1.1952%" height="15" fill="rgb(205,136,37)" fg:x="205" fg:w="15"/><text x="16.5847%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="16.4940%" y="325" width="1.0359%" height="15" fill="rgb(237,34,14)" fg:x="207" fg:w="13"/><text x="16.7440%" y="335.50"></text></g><g><title>regex_automata::meta::reverse_inner::extract (1 samples, 0.08%)</title><rect x="17.5299%" y="341" width="0.0797%" height="15" fill="rgb(236,193,44)" fg:x="220" fg:w="1"/><text x="17.7799%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="17.6096%" y="325" width="0.0797%" height="15" fill="rgb(231,48,10)" fg:x="221" fg:w="1"/><text x="17.8596%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="17.6096%" y="309" width="0.0797%" height="15" fill="rgb(213,141,34)" fg:x="221" fg:w="1"/><text x="17.8596%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="17.6096%" y="341" width="0.4781%" height="15" fill="rgb(249,130,34)" fg:x="221" fg:w="6"/><text x="17.8596%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="17.6892%" y="325" width="0.3984%" height="15" fill="rgb(219,42,41)" fg:x="222" fg:w="5"/><text x="17.9392%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="18.0080%" y="309" width="0.0797%" height="15" fill="rgb(224,100,54)" fg:x="226" fg:w="1"/><text x="18.2580%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.0080%" y="293" width="0.0797%" height="15" fill="rgb(229,200,27)" fg:x="226" fg:w="1"/><text x="18.2580%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="18.0876%" y="341" width="0.0797%" height="15" fill="rgb(217,118,10)" fg:x="227" fg:w="1"/><text x="18.3376%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="18.0876%" y="325" width="0.0797%" height="15" fill="rgb(206,22,3)" fg:x="227" fg:w="1"/><text x="18.3376%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="18.0876%" y="309" width="0.0797%" height="15" fill="rgb(232,163,46)" fg:x="227" fg:w="1"/><text x="18.3376%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.0876%" y="293" width="0.0797%" height="15" fill="rgb(206,95,13)" fg:x="227" fg:w="1"/><text x="18.3376%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="18.2470%" y="293" width="0.0797%" height="15" fill="rgb(253,154,18)" fg:x="229" fg:w="1"/><text x="18.4970%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="18.5657%" y="277" width="0.1594%" height="15" fill="rgb(219,32,23)" fg:x="233" fg:w="2"/><text x="18.8157%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.7251%" y="277" width="0.0797%" height="15" fill="rgb(230,191,45)" fg:x="235" fg:w="1"/><text x="18.9751%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="18.8048%" y="277" width="0.2390%" height="15" fill="rgb(229,64,36)" fg:x="236" fg:w="3"/><text x="19.0548%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="18.8845%" y="261" width="0.1594%" height="15" fill="rgb(205,129,25)" fg:x="237" fg:w="2"/><text x="19.1345%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.8845%" y="245" width="0.1594%" height="15" fill="rgb(254,112,7)" fg:x="237" fg:w="2"/><text x="19.1345%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="18.8845%" y="229" width="0.1594%" height="15" fill="rgb(226,53,48)" fg:x="237" fg:w="2"/><text x="19.1345%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="19.0438%" y="277" width="0.0797%" height="15" fill="rgb(214,153,38)" fg:x="239" fg:w="1"/><text x="19.2938%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.0438%" y="261" width="0.0797%" height="15" fill="rgb(243,101,7)" fg:x="239" fg:w="1"/><text x="19.2938%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.0438%" y="245" width="0.0797%" height="15" fill="rgb(240,140,22)" fg:x="239" fg:w="1"/><text x="19.2938%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0438%" y="229" width="0.0797%" height="15" fill="rgb(235,114,2)" fg:x="239" fg:w="1"/><text x="19.2938%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="19.2829%" y="245" width="0.1594%" height="15" fill="rgb(242,59,12)" fg:x="242" fg:w="2"/><text x="19.5329%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.3625%" y="229" width="0.0797%" height="15" fill="rgb(252,134,9)" fg:x="243" fg:w="1"/><text x="19.6125%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.3625%" y="213" width="0.0797%" height="15" fill="rgb(236,4,44)" fg:x="243" fg:w="1"/><text x="19.6125%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.3625%" y="197" width="0.0797%" height="15" fill="rgb(254,172,41)" fg:x="243" fg:w="1"/><text x="19.6125%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.56%)</title><rect x="19.1235%" y="277" width="0.5578%" height="15" fill="rgb(244,63,20)" fg:x="240" fg:w="7"/><text x="19.3735%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="19.2032%" y="261" width="0.4781%" height="15" fill="rgb(250,73,31)" fg:x="241" fg:w="6"/><text x="19.4532%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="19.4422%" y="245" width="0.2390%" height="15" fill="rgb(241,38,36)" fg:x="244" fg:w="3"/><text x="19.6922%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="19.6016%" y="229" width="0.0797%" height="15" fill="rgb(245,211,2)" fg:x="246" fg:w="1"/><text x="19.8516%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.6016%" y="213" width="0.0797%" height="15" fill="rgb(206,120,28)" fg:x="246" fg:w="1"/><text x="19.8516%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.6016%" y="197" width="0.0797%" height="15" fill="rgb(211,59,34)" fg:x="246" fg:w="1"/><text x="19.8516%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.6016%" y="181" width="0.0797%" height="15" fill="rgb(233,168,5)" fg:x="246" fg:w="1"/><text x="19.8516%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="19.6813%" y="261" width="0.0797%" height="15" fill="rgb(234,33,13)" fg:x="247" fg:w="1"/><text x="19.9313%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="19.6813%" y="277" width="0.1594%" height="15" fill="rgb(231,150,26)" fg:x="247" fg:w="2"/><text x="19.9313%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="19.7610%" y="261" width="0.0797%" height="15" fill="rgb(217,191,4)" fg:x="248" fg:w="1"/><text x="20.0110%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="19.7610%" y="245" width="0.0797%" height="15" fill="rgb(246,198,38)" fg:x="248" fg:w="1"/><text x="20.0110%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.8406%" y="261" width="0.0797%" height="15" fill="rgb(245,64,37)" fg:x="249" fg:w="1"/><text x="20.0906%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.8406%" y="245" width="0.0797%" height="15" fill="rgb(250,30,36)" fg:x="249" fg:w="1"/><text x="20.0906%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8406%" y="229" width="0.0797%" height="15" fill="rgb(217,86,53)" fg:x="249" fg:w="1"/><text x="20.0906%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (86 samples, 6.85%)</title><rect x="19.8406%" y="277" width="6.8526%" height="15" fill="rgb(228,157,16)" fg:x="249" fg:w="86"/><text x="20.0906%" y="287.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (85 samples, 6.77%)</title><rect x="19.9203%" y="261" width="6.7729%" height="15" fill="rgb(217,59,31)" fg:x="250" fg:w="85"/><text x="20.1703%" y="271.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (85 samples, 6.77%)</title><rect x="19.9203%" y="245" width="6.7729%" height="15" fill="rgb(237,138,41)" fg:x="250" fg:w="85"/><text x="20.1703%" y="255.50">alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 8.92%)</title><rect x="18.1673%" y="325" width="8.9243%" height="15" fill="rgb(227,91,49)" fg:x="228" fg:w="112"/><text x="18.4173%" y="335.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (112 samples, 8.92%)</title><rect x="18.1673%" y="309" width="8.9243%" height="15" fill="rgb(247,21,44)" fg:x="228" fg:w="112"/><text x="18.4173%" y="319.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (110 samples, 8.76%)</title><rect x="18.3267%" y="293" width="8.7649%" height="15" fill="rgb(219,210,51)" fg:x="230" fg:w="110"/><text x="18.5767%" y="303.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="26.6932%" y="277" width="0.3984%" height="15" fill="rgb(209,140,6)" fg:x="335" fg:w="5"/><text x="26.9432%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0120%" y="261" width="0.0797%" height="15" fill="rgb(221,188,24)" fg:x="339" fg:w="1"/><text x="27.2620%" y="271.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="27.3307%" y="309" width="0.1594%" height="15" fill="rgb(232,154,20)" fg:x="343" fg:w="2"/><text x="27.5807%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="27.4900%" y="309" width="0.3187%" height="15" fill="rgb(244,137,50)" fg:x="345" fg:w="4"/><text x="27.7400%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.7291%" y="293" width="0.0797%" height="15" fill="rgb(225,185,43)" fg:x="348" fg:w="1"/><text x="27.9791%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.1275%" y="293" width="0.0797%" height="15" fill="rgb(213,205,38)" fg:x="353" fg:w="1"/><text x="28.3775%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="27.8088%" y="309" width="0.4781%" height="15" fill="rgb(236,73,12)" fg:x="349" fg:w="6"/><text x="28.0588%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.2072%" y="293" width="0.0797%" height="15" fill="rgb(235,219,13)" fg:x="354" fg:w="1"/><text x="28.4572%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.2072%" y="277" width="0.0797%" height="15" fill="rgb(218,59,36)" fg:x="354" fg:w="1"/><text x="28.4572%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2072%" y="261" width="0.0797%" height="15" fill="rgb(205,110,39)" fg:x="354" fg:w="1"/><text x="28.4572%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (17 samples, 1.35%)</title><rect x="27.0916%" y="325" width="1.3546%" height="15" fill="rgb(218,206,42)" fg:x="340" fg:w="17"/><text x="27.3416%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="28.2869%" y="309" width="0.1594%" height="15" fill="rgb(248,125,24)" fg:x="355" fg:w="2"/><text x="28.5369%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="28.4462%" y="325" width="0.0797%" height="15" fill="rgb(242,28,27)" fg:x="357" fg:w="1"/><text x="28.6962%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="28.4462%" y="309" width="0.0797%" height="15" fill="rgb(216,228,15)" fg:x="357" fg:w="1"/><text x="28.6962%" y="319.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="28.6853%" y="309" width="0.0797%" height="15" fill="rgb(235,116,46)" fg:x="360" fg:w="1"/><text x="28.9353%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="28.6853%" y="293" width="0.0797%" height="15" fill="rgb(224,18,32)" fg:x="360" fg:w="1"/><text x="28.9353%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (134 samples, 10.68%)</title><rect x="18.1673%" y="341" width="10.6773%" height="15" fill="rgb(252,5,12)" fg:x="228" fg:w="134"/><text x="18.4173%" y="351.50">regex_automata::..</text></g><g><title>regex_syntax::hir::Hir::dot (4 samples, 0.32%)</title><rect x="28.5259%" y="325" width="0.3187%" height="15" fill="rgb(251,36,5)" fg:x="358" fg:w="4"/><text x="28.7759%" y="335.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="28.7649%" y="309" width="0.0797%" height="15" fill="rgb(217,53,14)" fg:x="361" fg:w="1"/><text x="29.0149%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.7649%" y="293" width="0.0797%" height="15" fill="rgb(215,86,45)" fg:x="361" fg:w="1"/><text x="29.0149%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.7649%" y="277" width="0.0797%" height="15" fill="rgb(242,169,11)" fg:x="361" fg:w="1"/><text x="29.0149%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7649%" y="261" width="0.0797%" height="15" fill="rgb(211,213,45)" fg:x="361" fg:w="1"/><text x="29.0149%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (159 samples, 12.67%)</title><rect x="16.2550%" y="357" width="12.6693%" height="15" fill="rgb(205,88,11)" fg:x="204" fg:w="159"/><text x="16.5050%" y="367.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="28.8446%" y="341" width="0.0797%" height="15" fill="rgb(252,69,26)" fg:x="362" fg:w="1"/><text x="29.0946%" y="351.50"></text></g><g><title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.08%)</title><rect x="28.8446%" y="325" width="0.0797%" height="15" fill="rgb(246,123,37)" fg:x="362" fg:w="1"/><text x="29.0946%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.9243%" y="325" width="0.0797%" height="15" fill="rgb(212,205,5)" fg:x="363" fg:w="1"/><text x="29.1743%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.9243%" y="309" width="0.0797%" height="15" fill="rgb(253,148,0)" fg:x="363" fg:w="1"/><text x="29.1743%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9243%" y="293" width="0.0797%" height="15" fill="rgb(239,22,4)" fg:x="363" fg:w="1"/><text x="29.1743%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="29.0837%" y="309" width="0.1594%" height="15" fill="rgb(226,26,53)" fg:x="365" fg:w="2"/><text x="29.3337%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="29.0837%" y="293" width="0.1594%" height="15" fill="rgb(225,229,45)" fg:x="365" fg:w="2"/><text x="29.3337%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="29.1633%" y="277" width="0.0797%" height="15" fill="rgb(220,60,37)" fg:x="366" fg:w="1"/><text x="29.4133%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="28.9243%" y="357" width="0.4781%" height="15" fill="rgb(217,180,35)" fg:x="363" fg:w="6"/><text x="29.1743%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="28.9243%" y="341" width="0.4781%" height="15" fill="rgb(229,7,53)" fg:x="363" fg:w="6"/><text x="29.1743%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="29.0040%" y="325" width="0.3984%" height="15" fill="rgb(254,137,3)" fg:x="364" fg:w="5"/><text x="29.2540%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="29.2430%" y="309" width="0.1594%" height="15" fill="rgb(215,140,41)" fg:x="367" fg:w="2"/><text x="29.4930%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.3227%" y="293" width="0.0797%" height="15" fill="rgb(250,80,15)" fg:x="368" fg:w="1"/><text x="29.5727%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (173 samples, 13.78%)</title><rect x="15.7769%" y="373" width="13.7849%" height="15" fill="rgb(252,191,6)" fg:x="198" fg:w="173"/><text x="16.0269%" y="383.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="29.4024%" y="357" width="0.1594%" height="15" fill="rgb(246,217,18)" fg:x="369" fg:w="2"/><text x="29.6524%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="29.4024%" y="341" width="0.1594%" height="15" fill="rgb(223,93,7)" fg:x="369" fg:w="2"/><text x="29.6524%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="29.4821%" y="325" width="0.0797%" height="15" fill="rgb(225,55,52)" fg:x="370" fg:w="1"/><text x="29.7321%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="29.5618%" y="373" width="0.0797%" height="15" fill="rgb(240,31,24)" fg:x="371" fg:w="1"/><text x="29.8118%" y="383.50"></text></g><g><title>regex::regex::string::Regex::new (177 samples, 14.10%)</title><rect x="15.6175%" y="405" width="14.1036%" height="15" fill="rgb(205,56,52)" fg:x="196" fg:w="177"/><text x="15.8675%" y="415.50">regex::regex::string:..</text></g><g><title>regex::builders::Builder::build_one_string (175 samples, 13.94%)</title><rect x="15.7769%" y="389" width="13.9442%" height="15" fill="rgb(246,146,12)" fg:x="198" fg:w="175"/><text x="16.0269%" y="399.50">regex::builders::Buil..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="29.6414%" y="373" width="0.0797%" height="15" fill="rgb(239,84,36)" fg:x="372" fg:w="1"/><text x="29.8914%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.4382%" y="325" width="0.0797%" height="15" fill="rgb(207,41,40)" fg:x="382" fg:w="1"/><text x="30.6882%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.4382%" y="309" width="0.0797%" height="15" fill="rgb(241,179,25)" fg:x="382" fg:w="1"/><text x="30.6882%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.4382%" y="293" width="0.0797%" height="15" fill="rgb(210,0,34)" fg:x="382" fg:w="1"/><text x="30.6882%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5179%" y="325" width="0.0797%" height="15" fill="rgb(225,217,29)" fg:x="383" fg:w="1"/><text x="30.7679%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5179%" y="309" width="0.0797%" height="15" fill="rgb(216,191,38)" fg:x="383" fg:w="1"/><text x="30.7679%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="30.5179%" y="293" width="0.0797%" height="15" fill="rgb(232,140,52)" fg:x="383" fg:w="1"/><text x="30.7679%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.04%)</title><rect x="29.8008%" y="341" width="1.0359%" height="15" fill="rgb(223,158,51)" fg:x="374" fg:w="13"/><text x="30.0508%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="30.5976%" y="325" width="0.2390%" height="15" fill="rgb(235,29,51)" fg:x="384" fg:w="3"/><text x="30.8476%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (208 samples, 16.57%)</title><rect x="14.3426%" y="421" width="16.5737%" height="15" fill="rgb(215,181,18)" fg:x="180" fg:w="208"/><text x="14.5926%" y="431.50">indefinite::helper::Helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.20%)</title><rect x="29.7211%" y="405" width="1.1952%" height="15" fill="rgb(227,125,34)" fg:x="373" fg:w="15"/><text x="29.9711%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.20%)</title><rect x="29.7211%" y="389" width="1.1952%" height="15" fill="rgb(230,197,49)" fg:x="373" fg:w="15"/><text x="29.9711%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.12%)</title><rect x="29.8008%" y="373" width="1.1155%" height="15" fill="rgb(239,141,16)" fg:x="374" fg:w="14"/><text x="30.0508%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.12%)</title><rect x="29.8008%" y="357" width="1.1155%" height="15" fill="rgb(225,105,43)" fg:x="374" fg:w="14"/><text x="30.0508%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="30.8367%" y="341" width="0.0797%" height="15" fill="rgb(214,131,14)" fg:x="387" fg:w="1"/><text x="31.0867%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.8367%" y="325" width="0.0797%" height="15" fill="rgb(229,177,11)" fg:x="387" fg:w="1"/><text x="31.0867%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.8367%" y="309" width="0.0797%" height="15" fill="rgb(231,180,14)" fg:x="387" fg:w="1"/><text x="31.0867%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8367%" y="293" width="0.0797%" height="15" fill="rgb(232,88,2)" fg:x="387" fg:w="1"/><text x="31.0867%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.9960%" y="373" width="0.0797%" height="15" fill="rgb(205,220,8)" fg:x="389" fg:w="1"/><text x="31.2460%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="30.9960%" y="357" width="0.0797%" height="15" fill="rgb(225,23,53)" fg:x="389" fg:w="1"/><text x="31.2460%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.9960%" y="341" width="0.0797%" height="15" fill="rgb(213,62,29)" fg:x="389" fg:w="1"/><text x="31.2460%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.9960%" y="325" width="0.0797%" height="15" fill="rgb(227,75,7)" fg:x="389" fg:w="1"/><text x="31.2460%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="30.9163%" y="405" width="0.2390%" height="15" fill="rgb(207,105,14)" fg:x="388" fg:w="3"/><text x="31.1663%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="30.9960%" y="389" width="0.1594%" height="15" fill="rgb(245,62,29)" fg:x="389" fg:w="2"/><text x="31.2460%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="31.0757%" y="373" width="0.0797%" height="15" fill="rgb(236,202,4)" fg:x="390" fg:w="1"/><text x="31.3257%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="31.0757%" y="357" width="0.0797%" height="15" fill="rgb(250,67,1)" fg:x="390" fg:w="1"/><text x="31.3257%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.0757%" y="341" width="0.0797%" height="15" fill="rgb(253,115,44)" fg:x="390" fg:w="1"/><text x="31.3257%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="31.1554%" y="341" width="0.0797%" height="15" fill="rgb(251,139,18)" fg:x="391" fg:w="1"/><text x="31.4054%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="31.1554%" y="325" width="0.0797%" height="15" fill="rgb(218,22,32)" fg:x="391" fg:w="1"/><text x="31.4054%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="31.1554%" y="357" width="0.1594%" height="15" fill="rgb(243,53,5)" fg:x="391" fg:w="2"/><text x="31.4054%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="31.2351%" y="341" width="0.0797%" height="15" fill="rgb(227,56,16)" fg:x="392" fg:w="1"/><text x="31.4851%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="31.1554%" y="389" width="0.2390%" height="15" fill="rgb(245,53,0)" fg:x="391" fg:w="3"/><text x="31.4054%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="31.1554%" y="373" width="0.2390%" height="15" fill="rgb(216,170,35)" fg:x="391" fg:w="3"/><text x="31.4054%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="31.3147%" y="357" width="0.0797%" height="15" fill="rgb(211,200,8)" fg:x="393" fg:w="1"/><text x="31.5647%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3147%" y="341" width="0.0797%" height="15" fill="rgb(228,204,44)" fg:x="393" fg:w="1"/><text x="31.5647%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.3147%" y="325" width="0.0797%" height="15" fill="rgb(214,121,17)" fg:x="393" fg:w="1"/><text x="31.5647%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="31.3944%" y="325" width="0.1594%" height="15" fill="rgb(233,64,38)" fg:x="394" fg:w="2"/><text x="31.6444%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.4741%" y="309" width="0.0797%" height="15" fill="rgb(253,54,19)" fg:x="395" fg:w="1"/><text x="31.7241%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.9522%" y="309" width="0.1594%" height="15" fill="rgb(253,94,18)" fg:x="401" fg:w="2"/><text x="32.2022%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.9522%" y="293" width="0.1594%" height="15" fill="rgb(227,57,52)" fg:x="401" fg:w="2"/><text x="32.2022%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.9522%" y="277" width="0.1594%" height="15" fill="rgb(230,228,50)" fg:x="401" fg:w="2"/><text x="32.2022%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (9 samples, 0.72%)</title><rect x="32.1116%" y="309" width="0.7171%" height="15" fill="rgb(217,205,27)" fg:x="403" fg:w="9"/><text x="32.3616%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.35%)</title><rect x="31.5538%" y="325" width="1.3546%" height="15" fill="rgb(252,71,50)" fg:x="396" fg:w="17"/><text x="31.8038%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="32.8287%" y="309" width="0.0797%" height="15" fill="rgb(209,86,4)" fg:x="412" fg:w="1"/><text x="33.0787%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.8287%" y="293" width="0.0797%" height="15" fill="rgb(229,94,0)" fg:x="412" fg:w="1"/><text x="33.0787%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.8287%" y="277" width="0.0797%" height="15" fill="rgb(252,223,21)" fg:x="412" fg:w="1"/><text x="33.0787%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (25 samples, 1.99%)</title><rect x="31.1554%" y="405" width="1.9920%" height="15" fill="rgb(230,210,4)" fg:x="391" fg:w="25"/><text x="31.4054%" y="415.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (22 samples, 1.75%)</title><rect x="31.3944%" y="389" width="1.7530%" height="15" fill="rgb(240,149,38)" fg:x="394" fg:w="22"/><text x="31.6444%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (22 samples, 1.75%)</title><rect x="31.3944%" y="373" width="1.7530%" height="15" fill="rgb(254,105,20)" fg:x="394" fg:w="22"/><text x="31.6444%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (22 samples, 1.75%)</title><rect x="31.3944%" y="357" width="1.7530%" height="15" fill="rgb(253,87,46)" fg:x="394" fg:w="22"/><text x="31.6444%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (22 samples, 1.75%)</title><rect x="31.3944%" y="341" width="1.7530%" height="15" fill="rgb(253,116,33)" fg:x="394" fg:w="22"/><text x="31.6444%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="32.9084%" y="325" width="0.2390%" height="15" fill="rgb(229,198,5)" fg:x="413" fg:w="3"/><text x="33.1584%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.9880%" y="309" width="0.1594%" height="15" fill="rgb(242,38,37)" fg:x="414" fg:w="2"/><text x="33.2380%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.0677%" y="293" width="0.0797%" height="15" fill="rgb(242,69,53)" fg:x="415" fg:w="1"/><text x="33.3177%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0677%" y="277" width="0.0797%" height="15" fill="rgb(249,80,16)" fg:x="415" fg:w="1"/><text x="33.3177%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.4661%" y="325" width="0.0797%" height="15" fill="rgb(206,128,11)" fg:x="420" fg:w="1"/><text x="33.7161%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.5458%" y="325" width="0.1594%" height="15" fill="rgb(212,35,20)" fg:x="421" fg:w="2"/><text x="33.7958%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="33.7052%" y="325" width="0.0797%" height="15" fill="rgb(236,79,13)" fg:x="423" fg:w="1"/><text x="33.9552%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="33.7052%" y="309" width="0.0797%" height="15" fill="rgb(233,123,3)" fg:x="423" fg:w="1"/><text x="33.9552%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="33.3865%" y="357" width="0.4781%" height="15" fill="rgb(214,93,52)" fg:x="419" fg:w="6"/><text x="33.6365%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="33.3865%" y="341" width="0.4781%" height="15" fill="rgb(251,37,40)" fg:x="419" fg:w="6"/><text x="33.6365%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="33.7849%" y="325" width="0.0797%" height="15" fill="rgb(227,80,54)" fg:x="424" fg:w="1"/><text x="34.0349%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.8645%" y="357" width="0.0797%" height="15" fill="rgb(254,48,11)" fg:x="425" fg:w="1"/><text x="34.1145%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.9442%" y="325" width="0.0797%" height="15" fill="rgb(235,193,26)" fg:x="426" fg:w="1"/><text x="34.1942%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="33.9442%" y="357" width="0.1594%" height="15" fill="rgb(229,99,21)" fg:x="426" fg:w="2"/><text x="34.1942%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="33.9442%" y="341" width="0.1594%" height="15" fill="rgb(211,140,41)" fg:x="426" fg:w="2"/><text x="34.1942%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="34.0239%" y="325" width="0.0797%" height="15" fill="rgb(240,227,30)" fg:x="427" fg:w="1"/><text x="34.2739%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="34.1036%" y="357" width="0.0797%" height="15" fill="rgb(215,224,45)" fg:x="428" fg:w="1"/><text x="34.3536%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.1036%" y="341" width="0.0797%" height="15" fill="rgb(206,123,31)" fg:x="428" fg:w="1"/><text x="34.3536%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3426%" y="341" width="0.0797%" height="15" fill="rgb(210,138,16)" fg:x="431" fg:w="1"/><text x="34.5926%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="34.5020%" y="325" width="0.2390%" height="15" fill="rgb(228,57,28)" fg:x="433" fg:w="3"/><text x="34.7520%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (22 samples, 1.75%)</title><rect x="34.4223%" y="341" width="1.7530%" height="15" fill="rgb(242,170,10)" fg:x="432" fg:w="22"/><text x="34.6723%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18 samples, 1.43%)</title><rect x="34.7410%" y="325" width="1.4343%" height="15" fill="rgb(228,214,39)" fg:x="436" fg:w="18"/><text x="34.9910%" y="335.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="35.7769%" y="309" width="0.3984%" height="15" fill="rgb(218,179,33)" fg:x="449" fg:w="5"/><text x="36.0269%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="36.1753%" y="341" width="0.6375%" height="15" fill="rgb(235,193,39)" fg:x="454" fg:w="8"/><text x="36.4253%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="36.1753%" y="325" width="0.6375%" height="15" fill="rgb(219,221,36)" fg:x="454" fg:w="8"/><text x="36.4253%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="37.4502%" y="309" width="0.2390%" height="15" fill="rgb(248,218,19)" fg:x="470" fg:w="3"/><text x="37.7002%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="37.4502%" y="293" width="0.2390%" height="15" fill="rgb(205,50,9)" fg:x="470" fg:w="3"/><text x="37.7002%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="37.4502%" y="277" width="0.2390%" height="15" fill="rgb(238,81,28)" fg:x="470" fg:w="3"/><text x="37.7002%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="37.4502%" y="261" width="0.2390%" height="15" fill="rgb(235,110,19)" fg:x="470" fg:w="3"/><text x="37.7002%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (16 samples, 1.27%)</title><rect x="37.6892%" y="309" width="1.2749%" height="15" fill="rgb(214,7,14)" fg:x="473" fg:w="16"/><text x="37.9392%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (12 samples, 0.96%)</title><rect x="38.0080%" y="293" width="0.9562%" height="15" fill="rgb(211,77,3)" fg:x="477" fg:w="12"/><text x="38.2580%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.48%)</title><rect x="38.4861%" y="277" width="0.4781%" height="15" fill="rgb(229,5,9)" fg:x="483" fg:w="6"/><text x="38.7361%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="38.4861%" y="261" width="0.4781%" height="15" fill="rgb(225,90,11)" fg:x="483" fg:w="6"/><text x="38.7361%" y="271.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="38.5657%" y="245" width="0.3984%" height="15" fill="rgb(242,56,8)" fg:x="484" fg:w="5"/><text x="38.8157%" y="255.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.08%)</title><rect x="38.9641%" y="293" width="0.0797%" height="15" fill="rgb(249,212,39)" fg:x="489" fg:w="1"/><text x="39.2141%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.64%)</title><rect x="39.0438%" y="293" width="0.6375%" height="15" fill="rgb(236,90,9)" fg:x="490" fg:w="8"/><text x="39.2938%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.64%)</title><rect x="39.0438%" y="277" width="0.6375%" height="15" fill="rgb(206,88,35)" fg:x="490" fg:w="8"/><text x="39.2938%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (37 samples, 2.95%)</title><rect x="36.8127%" y="341" width="2.9482%" height="15" fill="rgb(205,126,30)" fg:x="462" fg:w="37"/><text x="37.0627%" y="351.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (37 samples, 2.95%)</title><rect x="36.8127%" y="325" width="2.9482%" height="15" fill="rgb(230,176,12)" fg:x="462" fg:w="37"/><text x="37.0627%" y="335.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.80%)</title><rect x="38.9641%" y="309" width="0.7968%" height="15" fill="rgb(243,19,9)" fg:x="489" fg:w="10"/><text x="39.2141%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="39.6813%" y="293" width="0.0797%" height="15" fill="rgb(245,171,17)" fg:x="498" fg:w="1"/><text x="39.9313%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="39.7610%" y="341" width="0.1594%" height="15" fill="rgb(227,52,21)" fg:x="499" fg:w="2"/><text x="40.0110%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="39.7610%" y="325" width="0.1594%" height="15" fill="rgb(238,69,14)" fg:x="499" fg:w="2"/><text x="40.0110%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.8406%" y="309" width="0.0797%" height="15" fill="rgb(241,156,39)" fg:x="500" fg:w="1"/><text x="40.0906%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="39.8406%" y="293" width="0.0797%" height="15" fill="rgb(212,227,28)" fg:x="500" fg:w="1"/><text x="40.0906%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.1594%" y="277" width="0.0797%" height="15" fill="rgb(209,118,27)" fg:x="504" fg:w="1"/><text x="40.4094%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.1594%" y="261" width="0.0797%" height="15" fill="rgb(226,102,5)" fg:x="504" fg:w="1"/><text x="40.4094%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.1594%" y="245" width="0.0797%" height="15" fill="rgb(223,34,3)" fg:x="504" fg:w="1"/><text x="40.4094%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="40.1594%" y="293" width="0.1594%" height="15" fill="rgb(221,81,38)" fg:x="504" fg:w="2"/><text x="40.4094%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.2390%" y="277" width="0.0797%" height="15" fill="rgb(236,219,28)" fg:x="505" fg:w="1"/><text x="40.4890%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="41.6733%" y="229" width="0.7171%" height="15" fill="rgb(213,200,14)" fg:x="523" fg:w="9"/><text x="41.9233%" y="239.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="42.3904%" y="229" width="0.3187%" height="15" fill="rgb(240,33,19)" fg:x="532" fg:w="4"/><text x="42.6404%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="42.7092%" y="229" width="0.5578%" height="15" fill="rgb(233,113,27)" fg:x="536" fg:w="7"/><text x="42.9592%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.1076%" y="213" width="0.1594%" height="15" fill="rgb(220,221,18)" fg:x="541" fg:w="2"/><text x="43.3576%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.1076%" y="197" width="0.1594%" height="15" fill="rgb(238,92,8)" fg:x="541" fg:w="2"/><text x="43.3576%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.1076%" y="181" width="0.1594%" height="15" fill="rgb(222,164,16)" fg:x="541" fg:w="2"/><text x="43.3576%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (6 samples, 0.48%)</title><rect x="43.2669%" y="229" width="0.4781%" height="15" fill="rgb(241,119,3)" fg:x="543" fg:w="6"/><text x="43.5169%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.6653%" y="213" width="0.0797%" height="15" fill="rgb(241,44,8)" fg:x="548" fg:w="1"/><text x="43.9153%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.6653%" y="197" width="0.0797%" height="15" fill="rgb(230,36,40)" fg:x="548" fg:w="1"/><text x="43.9153%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.6653%" y="181" width="0.0797%" height="15" fill="rgb(243,16,36)" fg:x="548" fg:w="1"/><text x="43.9153%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="44.3825%" y="197" width="0.1594%" height="15" fill="rgb(231,4,26)" fg:x="557" fg:w="2"/><text x="44.6325%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.7809%" y="165" width="0.0797%" height="15" fill="rgb(240,9,31)" fg:x="562" fg:w="1"/><text x="45.0309%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="44.8606%" y="165" width="0.0797%" height="15" fill="rgb(207,173,15)" fg:x="563" fg:w="1"/><text x="45.1106%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="44.8606%" y="149" width="0.0797%" height="15" fill="rgb(224,192,53)" fg:x="563" fg:w="1"/><text x="45.1106%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="44.9402%" y="165" width="0.1594%" height="15" fill="rgb(223,67,28)" fg:x="564" fg:w="2"/><text x="45.1902%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.64%)</title><rect x="44.5418%" y="197" width="0.6375%" height="15" fill="rgb(211,20,47)" fg:x="559" fg:w="8"/><text x="44.7918%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="44.6215%" y="181" width="0.5578%" height="15" fill="rgb(240,228,2)" fg:x="560" fg:w="7"/><text x="44.8715%" y="191.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="45.0996%" y="165" width="0.0797%" height="15" fill="rgb(248,151,12)" fg:x="566" fg:w="1"/><text x="45.3496%" y="175.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="45.0996%" y="149" width="0.0797%" height="15" fill="rgb(244,8,39)" fg:x="566" fg:w="1"/><text x="45.3496%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (26 samples, 2.07%)</title><rect x="43.7450%" y="229" width="2.0717%" height="15" fill="rgb(222,26,8)" fg:x="549" fg:w="26"/><text x="43.9950%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (25 samples, 1.99%)</title><rect x="43.8247%" y="213" width="1.9920%" height="15" fill="rgb(213,106,44)" fg:x="550" fg:w="25"/><text x="44.0747%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.64%)</title><rect x="45.1793%" y="197" width="0.6375%" height="15" fill="rgb(214,129,20)" fg:x="567" fg:w="8"/><text x="45.4293%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="45.6574%" y="181" width="0.1594%" height="15" fill="rgb(212,32,13)" fg:x="573" fg:w="2"/><text x="45.9074%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.7371%" y="165" width="0.0797%" height="15" fill="rgb(208,168,33)" fg:x="574" fg:w="1"/><text x="45.9871%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.7371%" y="149" width="0.0797%" height="15" fill="rgb(231,207,8)" fg:x="574" fg:w="1"/><text x="45.9871%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.7371%" y="133" width="0.0797%" height="15" fill="rgb(235,219,23)" fg:x="574" fg:w="1"/><text x="45.9871%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (81 samples, 6.45%)</title><rect x="45.8167%" y="229" width="6.4542%" height="15" fill="rgb(226,216,26)" fg:x="575" fg:w="81"/><text x="46.0667%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (81 samples, 6.45%)</title><rect x="45.8167%" y="213" width="6.4542%" height="15" fill="rgb(239,137,16)" fg:x="575" fg:w="81"/><text x="46.0667%" y="223.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (81 samples, 6.45%)</title><rect x="45.8167%" y="197" width="6.4542%" height="15" fill="rgb(207,12,36)" fg:x="575" fg:w="81"/><text x="46.0667%" y="207.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="52.2709%" y="229" width="0.3984%" height="15" fill="rgb(210,214,24)" fg:x="656" fg:w="5"/><text x="52.5209%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="52.6693%" y="229" width="0.0797%" height="15" fill="rgb(206,56,30)" fg:x="661" fg:w="1"/><text x="52.9193%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (161 samples, 12.83%)</title><rect x="40.1594%" y="325" width="12.8287%" height="15" fill="rgb(228,143,26)" fg:x="504" fg:w="161"/><text x="40.4094%" y="335.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (161 samples, 12.83%)</title><rect x="40.1594%" y="309" width="12.8287%" height="15" fill="rgb(216,218,46)" fg:x="504" fg:w="161"/><text x="40.4094%" y="319.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (159 samples, 12.67%)</title><rect x="40.3187%" y="293" width="12.6693%" height="15" fill="rgb(206,6,19)" fg:x="506" fg:w="159"/><text x="40.5687%" y="303.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (159 samples, 12.67%)</title><rect x="40.3187%" y="277" width="12.6693%" height="15" fill="rgb(239,177,51)" fg:x="506" fg:w="159"/><text x="40.5687%" y="287.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (159 samples, 12.67%)</title><rect x="40.3187%" y="261" width="12.6693%" height="15" fill="rgb(216,55,25)" fg:x="506" fg:w="159"/><text x="40.5687%" y="271.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (159 samples, 12.67%)</title><rect x="40.3187%" y="245" width="12.6693%" height="15" fill="rgb(231,163,29)" fg:x="506" fg:w="159"/><text x="40.5687%" y="255.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="52.7490%" y="229" width="0.2390%" height="15" fill="rgb(232,149,50)" fg:x="662" fg:w="3"/><text x="52.9990%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.8287%" y="213" width="0.1594%" height="15" fill="rgb(223,142,48)" fg:x="663" fg:w="2"/><text x="53.0787%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.9084%" y="197" width="0.0797%" height="15" fill="rgb(245,83,23)" fg:x="664" fg:w="1"/><text x="53.1584%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.9880%" y="309" width="0.0797%" height="15" fill="rgb(224,63,2)" fg:x="665" fg:w="1"/><text x="53.2380%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.0677%" y="309" width="0.0797%" height="15" fill="rgb(218,65,53)" fg:x="666" fg:w="1"/><text x="53.3177%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.9442%" y="261" width="0.0797%" height="15" fill="rgb(221,84,29)" fg:x="677" fg:w="1"/><text x="54.1942%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (13 samples, 1.04%)</title><rect x="53.1474%" y="309" width="1.0359%" height="15" fill="rgb(234,0,32)" fg:x="667" fg:w="13"/><text x="53.3974%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="53.9442%" y="293" width="0.2390%" height="15" fill="rgb(206,20,16)" fg:x="677" fg:w="3"/><text x="54.1942%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="53.9442%" y="277" width="0.2390%" height="15" fill="rgb(244,172,18)" fg:x="677" fg:w="3"/><text x="54.1942%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.0239%" y="261" width="0.1594%" height="15" fill="rgb(254,133,1)" fg:x="678" fg:w="2"/><text x="54.2739%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="54.1833%" y="309" width="0.4781%" height="15" fill="rgb(222,206,41)" fg:x="680" fg:w="6"/><text x="54.4333%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.5817%" y="293" width="0.0797%" height="15" fill="rgb(212,3,42)" fg:x="685" fg:w="1"/><text x="54.8317%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (260 samples, 20.72%)</title><rect x="34.1833%" y="357" width="20.7171%" height="15" fill="rgb(241,11,4)" fg:x="429" fg:w="260"/><text x="34.4333%" y="367.50">regex_automata::meta::strategy::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (188 samples, 14.98%)</title><rect x="39.9203%" y="341" width="14.9801%" height="15" fill="rgb(205,19,26)" fg:x="501" fg:w="188"/><text x="40.1703%" y="351.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.91%)</title><rect x="52.9880%" y="325" width="1.9124%" height="15" fill="rgb(210,179,32)" fg:x="665" fg:w="24"/><text x="53.2380%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="54.6614%" y="309" width="0.2390%" height="15" fill="rgb(227,116,49)" fg:x="686" fg:w="3"/><text x="54.9114%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="54.9801%" y="325" width="0.0797%" height="15" fill="rgb(211,146,6)" fg:x="690" fg:w="1"/><text x="55.2301%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="54.9801%" y="309" width="0.0797%" height="15" fill="rgb(219,44,39)" fg:x="690" fg:w="1"/><text x="55.2301%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="54.9801%" y="293" width="0.0797%" height="15" fill="rgb(234,128,11)" fg:x="690" fg:w="1"/><text x="55.2301%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="55.0598%" y="325" width="0.1594%" height="15" fill="rgb(220,183,53)" fg:x="691" fg:w="2"/><text x="55.3098%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="55.2191%" y="309" width="0.0797%" height="15" fill="rgb(213,219,32)" fg:x="693" fg:w="1"/><text x="55.4691%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.2988%" y="309" width="0.0797%" height="15" fill="rgb(232,156,16)" fg:x="694" fg:w="1"/><text x="55.5488%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="54.9004%" y="357" width="0.5578%" height="15" fill="rgb(246,135,34)" fg:x="689" fg:w="7"/><text x="55.1504%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="54.9004%" y="341" width="0.5578%" height="15" fill="rgb(241,99,0)" fg:x="689" fg:w="7"/><text x="55.1504%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="55.2191%" y="325" width="0.2390%" height="15" fill="rgb(222,103,45)" fg:x="693" fg:w="3"/><text x="55.4691%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.3785%" y="309" width="0.0797%" height="15" fill="rgb(212,57,4)" fg:x="695" fg:w="1"/><text x="55.6285%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.5378%" y="309" width="0.0797%" height="15" fill="rgb(215,68,47)" fg:x="697" fg:w="1"/><text x="55.7878%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.5378%" y="293" width="0.0797%" height="15" fill="rgb(230,84,2)" fg:x="697" fg:w="1"/><text x="55.7878%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.5378%" y="277" width="0.0797%" height="15" fill="rgb(220,102,14)" fg:x="697" fg:w="1"/><text x="55.7878%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="55.6175%" y="309" width="0.3187%" height="15" fill="rgb(240,10,32)" fg:x="698" fg:w="4"/><text x="55.8675%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="55.6972%" y="293" width="0.2390%" height="15" fill="rgb(215,47,27)" fg:x="699" fg:w="3"/><text x="55.9472%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.8566%" y="277" width="0.0797%" height="15" fill="rgb(233,188,43)" fg:x="701" fg:w="1"/><text x="56.1066%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="55.5378%" y="325" width="0.4781%" height="15" fill="rgb(253,190,1)" fg:x="697" fg:w="6"/><text x="55.7878%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="55.9363%" y="309" width="0.0797%" height="15" fill="rgb(206,114,52)" fg:x="702" fg:w="1"/><text x="56.1863%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="55.9363%" y="293" width="0.0797%" height="15" fill="rgb(233,120,37)" fg:x="702" fg:w="1"/><text x="56.1863%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="56.0159%" y="309" width="0.0797%" height="15" fill="rgb(214,52,39)" fg:x="703" fg:w="1"/><text x="56.2659%" y="319.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="56.0159%" y="293" width="0.0797%" height="15" fill="rgb(223,80,29)" fg:x="703" fg:w="1"/><text x="56.2659%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="56.0159%" y="325" width="0.1594%" height="15" fill="rgb(230,101,40)" fg:x="703" fg:w="2"/><text x="56.2659%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="56.0956%" y="309" width="0.0797%" height="15" fill="rgb(219,211,8)" fg:x="704" fg:w="1"/><text x="56.3456%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="56.1753%" y="325" width="0.0797%" height="15" fill="rgb(252,126,28)" fg:x="705" fg:w="1"/><text x="56.4253%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="56.1753%" y="309" width="0.0797%" height="15" fill="rgb(215,56,38)" fg:x="705" fg:w="1"/><text x="56.4253%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (319 samples, 25.42%)</title><rect x="30.9163%" y="421" width="25.4183%" height="15" fill="rgb(249,55,44)" fg:x="388" fg:w="319"/><text x="31.1663%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (291 samples, 23.19%)</title><rect x="33.1474%" y="405" width="23.1873%" height="15" fill="rgb(220,221,32)" fg:x="416" fg:w="291"/><text x="33.3974%" y="415.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (291 samples, 23.19%)</title><rect x="33.1474%" y="389" width="23.1873%" height="15" fill="rgb(212,216,41)" fg:x="416" fg:w="291"/><text x="33.3974%" y="399.50">regex::builders::Builder::build_one_s..</text></g><g><title>regex_automata::meta::regex::Builder::build (291 samples, 23.19%)</title><rect x="33.1474%" y="373" width="23.1873%" height="15" fill="rgb(228,213,43)" fg:x="416" fg:w="291"/><text x="33.3974%" y="383.50">regex_automata::meta::regex::Builder:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.88%)</title><rect x="55.4582%" y="357" width="0.8765%" height="15" fill="rgb(211,31,26)" fg:x="696" fg:w="11"/><text x="55.7082%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.88%)</title><rect x="55.4582%" y="341" width="0.8765%" height="15" fill="rgb(229,202,19)" fg:x="696" fg:w="11"/><text x="55.7082%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.2550%" y="325" width="0.0797%" height="15" fill="rgb(229,105,46)" fg:x="706" fg:w="1"/><text x="56.5050%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="56.3347%" y="405" width="0.0797%" height="15" fill="rgb(235,108,1)" fg:x="707" fg:w="1"/><text x="56.5847%" y="415.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="56.3347%" y="389" width="0.0797%" height="15" fill="rgb(245,111,35)" fg:x="707" fg:w="1"/><text x="56.5847%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="56.3347%" y="373" width="0.0797%" height="15" fill="rgb(219,185,31)" fg:x="707" fg:w="1"/><text x="56.5847%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.3347%" y="357" width="0.0797%" height="15" fill="rgb(214,4,43)" fg:x="707" fg:w="1"/><text x="56.5847%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.3347%" y="341" width="0.0797%" height="15" fill="rgb(235,227,40)" fg:x="707" fg:w="1"/><text x="56.5847%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.3347%" y="325" width="0.0797%" height="15" fill="rgb(230,88,30)" fg:x="707" fg:w="1"/><text x="56.5847%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="56.4143%" y="325" width="0.0797%" height="15" fill="rgb(216,217,1)" fg:x="708" fg:w="1"/><text x="56.6643%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="56.4143%" y="389" width="0.1594%" height="15" fill="rgb(248,139,50)" fg:x="708" fg:w="2"/><text x="56.6643%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="56.4143%" y="373" width="0.1594%" height="15" fill="rgb(233,1,21)" fg:x="708" fg:w="2"/><text x="56.6643%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="56.4143%" y="357" width="0.1594%" height="15" fill="rgb(215,183,12)" fg:x="708" fg:w="2"/><text x="56.6643%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="56.4143%" y="341" width="0.1594%" height="15" fill="rgb(229,104,42)" fg:x="708" fg:w="2"/><text x="56.6643%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="56.4940%" y="325" width="0.0797%" height="15" fill="rgb(243,34,48)" fg:x="709" fg:w="1"/><text x="56.7440%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="56.6534%" y="341" width="0.0797%" height="15" fill="rgb(239,11,44)" fg:x="711" fg:w="1"/><text x="56.9034%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.6534%" y="325" width="0.0797%" height="15" fill="rgb(231,98,35)" fg:x="711" fg:w="1"/><text x="56.9034%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.6534%" y="309" width="0.0797%" height="15" fill="rgb(233,28,25)" fg:x="711" fg:w="1"/><text x="56.9034%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="56.6534%" y="357" width="0.1594%" height="15" fill="rgb(234,123,11)" fg:x="711" fg:w="2"/><text x="56.9034%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="56.7331%" y="341" width="0.0797%" height="15" fill="rgb(220,69,3)" fg:x="712" fg:w="1"/><text x="56.9831%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.7331%" y="325" width="0.0797%" height="15" fill="rgb(214,64,36)" fg:x="712" fg:w="1"/><text x="56.9831%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="56.8127%" y="341" width="0.1594%" height="15" fill="rgb(211,138,32)" fg:x="713" fg:w="2"/><text x="57.0627%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.8127%" y="325" width="0.1594%" height="15" fill="rgb(213,118,47)" fg:x="713" fg:w="2"/><text x="57.0627%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="56.5737%" y="389" width="0.4781%" height="15" fill="rgb(243,124,49)" fg:x="710" fg:w="6"/><text x="56.8237%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="56.6534%" y="373" width="0.3984%" height="15" fill="rgb(221,30,28)" fg:x="711" fg:w="5"/><text x="56.9034%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="56.8127%" y="357" width="0.2390%" height="15" fill="rgb(246,37,13)" fg:x="713" fg:w="3"/><text x="57.0627%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="56.9721%" y="341" width="0.0797%" height="15" fill="rgb(249,66,14)" fg:x="715" fg:w="1"/><text x="57.2221%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.0518%" y="373" width="0.0797%" height="15" fill="rgb(213,166,5)" fg:x="716" fg:w="1"/><text x="57.3018%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.1315%" y="341" width="0.0797%" height="15" fill="rgb(221,66,24)" fg:x="717" fg:w="1"/><text x="57.3815%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.1315%" y="325" width="0.0797%" height="15" fill="rgb(210,132,17)" fg:x="717" fg:w="1"/><text x="57.3815%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.1315%" y="309" width="0.0797%" height="15" fill="rgb(243,202,5)" fg:x="717" fg:w="1"/><text x="57.3815%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="57.2112%" y="309" width="0.1594%" height="15" fill="rgb(233,70,48)" fg:x="718" fg:w="2"/><text x="57.4612%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="57.2112%" y="293" width="0.1594%" height="15" fill="rgb(238,41,26)" fg:x="718" fg:w="2"/><text x="57.4612%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="57.2112%" y="277" width="0.1594%" height="15" fill="rgb(241,19,31)" fg:x="718" fg:w="2"/><text x="57.4612%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="57.2112%" y="261" width="0.1594%" height="15" fill="rgb(214,76,10)" fg:x="718" fg:w="2"/><text x="57.4612%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="57.2112%" y="341" width="0.3187%" height="15" fill="rgb(254,202,22)" fg:x="718" fg:w="4"/><text x="57.4612%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="57.2112%" y="325" width="0.3187%" height="15" fill="rgb(214,72,24)" fg:x="718" fg:w="4"/><text x="57.4612%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="57.3705%" y="309" width="0.1594%" height="15" fill="rgb(221,92,46)" fg:x="720" fg:w="2"/><text x="57.6205%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="57.3705%" y="293" width="0.1594%" height="15" fill="rgb(246,13,50)" fg:x="720" fg:w="2"/><text x="57.6205%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.4502%" y="277" width="0.0797%" height="15" fill="rgb(240,165,38)" fg:x="721" fg:w="1"/><text x="57.7002%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.4502%" y="261" width="0.0797%" height="15" fill="rgb(241,24,51)" fg:x="721" fg:w="1"/><text x="57.7002%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.4502%" y="245" width="0.0797%" height="15" fill="rgb(227,51,44)" fg:x="721" fg:w="1"/><text x="57.7002%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.4502%" y="229" width="0.0797%" height="15" fill="rgb(231,121,3)" fg:x="721" fg:w="1"/><text x="57.7002%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="57.5299%" y="341" width="0.0797%" height="15" fill="rgb(245,3,41)" fg:x="722" fg:w="1"/><text x="57.7799%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.5299%" y="325" width="0.0797%" height="15" fill="rgb(214,13,26)" fg:x="722" fg:w="1"/><text x="57.7799%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.5299%" y="309" width="0.0797%" height="15" fill="rgb(252,75,11)" fg:x="722" fg:w="1"/><text x="57.7799%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.5299%" y="293" width="0.0797%" height="15" fill="rgb(218,226,17)" fg:x="722" fg:w="1"/><text x="57.7799%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6096%" y="325" width="0.0797%" height="15" fill="rgb(248,89,38)" fg:x="723" fg:w="1"/><text x="57.8596%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="57.6892%" y="309" width="0.0797%" height="15" fill="rgb(237,73,46)" fg:x="724" fg:w="1"/><text x="57.9392%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="57.6892%" y="293" width="0.0797%" height="15" fill="rgb(242,78,33)" fg:x="724" fg:w="1"/><text x="57.9392%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.6892%" y="277" width="0.0797%" height="15" fill="rgb(235,60,3)" fg:x="724" fg:w="1"/><text x="57.9392%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="57.7689%" y="309" width="0.5578%" height="15" fill="rgb(216,172,19)" fg:x="725" fg:w="7"/><text x="58.0189%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.72%)</title><rect x="57.6892%" y="325" width="0.7171%" height="15" fill="rgb(227,6,42)" fg:x="724" fg:w="9"/><text x="57.9392%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="58.3267%" y="309" width="0.0797%" height="15" fill="rgb(223,207,42)" fg:x="732" fg:w="1"/><text x="58.5767%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="58.3267%" y="293" width="0.0797%" height="15" fill="rgb(246,138,30)" fg:x="732" fg:w="1"/><text x="58.5767%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="58.3267%" y="277" width="0.0797%" height="15" fill="rgb(251,199,47)" fg:x="732" fg:w="1"/><text x="58.5767%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.3267%" y="261" width="0.0797%" height="15" fill="rgb(228,218,44)" fg:x="732" fg:w="1"/><text x="58.5767%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.3267%" y="245" width="0.0797%" height="15" fill="rgb(220,68,6)" fg:x="732" fg:w="1"/><text x="58.5767%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="58.4064%" y="293" width="0.0797%" height="15" fill="rgb(240,60,26)" fg:x="733" fg:w="1"/><text x="58.6564%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.4064%" y="277" width="0.0797%" height="15" fill="rgb(211,200,19)" fg:x="733" fg:w="1"/><text x="58.6564%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.4064%" y="261" width="0.0797%" height="15" fill="rgb(242,145,30)" fg:x="733" fg:w="1"/><text x="58.6564%" y="271.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="58.4064%" y="245" width="0.0797%" height="15" fill="rgb(225,64,13)" fg:x="733" fg:w="1"/><text x="58.6564%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="58.5657%" y="245" width="0.0797%" height="15" fill="rgb(218,103,35)" fg:x="735" fg:w="1"/><text x="58.8157%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.5657%" y="229" width="0.0797%" height="15" fill="rgb(216,93,46)" fg:x="735" fg:w="1"/><text x="58.8157%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.5657%" y="213" width="0.0797%" height="15" fill="rgb(225,159,27)" fg:x="735" fg:w="1"/><text x="58.8157%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.5657%" y="197" width="0.0797%" height="15" fill="rgb(225,204,11)" fg:x="735" fg:w="1"/><text x="58.8157%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="58.4064%" y="309" width="0.3187%" height="15" fill="rgb(205,56,4)" fg:x="733" fg:w="4"/><text x="58.6564%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="58.4861%" y="293" width="0.2390%" height="15" fill="rgb(206,6,35)" fg:x="734" fg:w="3"/><text x="58.7361%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="58.5657%" y="277" width="0.1594%" height="15" fill="rgb(247,73,52)" fg:x="735" fg:w="2"/><text x="58.8157%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="58.5657%" y="261" width="0.1594%" height="15" fill="rgb(246,97,4)" fg:x="735" fg:w="2"/><text x="58.8157%" y="271.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="58.6454%" y="245" width="0.0797%" height="15" fill="rgb(212,37,15)" fg:x="736" fg:w="1"/><text x="58.8954%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="58.7251%" y="293" width="0.0797%" height="15" fill="rgb(208,130,40)" fg:x="737" fg:w="1"/><text x="58.9751%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="58.8048%" y="293" width="0.0797%" height="15" fill="rgb(236,55,29)" fg:x="738" fg:w="1"/><text x="59.0548%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.80%)</title><rect x="58.4064%" y="325" width="0.7968%" height="15" fill="rgb(209,156,45)" fg:x="733" fg:w="10"/><text x="58.6564%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="58.7251%" y="309" width="0.4781%" height="15" fill="rgb(249,107,4)" fg:x="737" fg:w="6"/><text x="58.9751%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="58.8845%" y="293" width="0.3187%" height="15" fill="rgb(227,7,13)" fg:x="739" fg:w="4"/><text x="59.1345%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.67%)</title><rect x="57.6096%" y="341" width="1.6733%" height="15" fill="rgb(250,129,14)" fg:x="723" fg:w="21"/><text x="57.8596%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="59.2032%" y="325" width="0.0797%" height="15" fill="rgb(229,92,13)" fg:x="743" fg:w="1"/><text x="59.4532%" y="335.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (5 samples, 0.40%)</title><rect x="59.3625%" y="293" width="0.3984%" height="15" fill="rgb(245,98,39)" fg:x="745" fg:w="5"/><text x="59.6125%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="59.5219%" y="277" width="0.2390%" height="15" fill="rgb(234,135,48)" fg:x="747" fg:w="3"/><text x="59.7719%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.6016%" y="261" width="0.1594%" height="15" fill="rgb(230,98,28)" fg:x="748" fg:w="2"/><text x="59.8516%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.6016%" y="245" width="0.1594%" height="15" fill="rgb(223,121,0)" fg:x="748" fg:w="2"/><text x="59.8516%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="59.7610%" y="293" width="0.0797%" height="15" fill="rgb(234,173,33)" fg:x="750" fg:w="1"/><text x="60.0110%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="59.8406%" y="293" width="0.0797%" height="15" fill="rgb(245,47,8)" fg:x="751" fg:w="1"/><text x="60.0906%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="59.8406%" y="277" width="0.0797%" height="15" fill="rgb(205,17,20)" fg:x="751" fg:w="1"/><text x="60.0906%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="59.8406%" y="261" width="0.0797%" height="15" fill="rgb(232,151,16)" fg:x="751" fg:w="1"/><text x="60.0906%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.80%)</title><rect x="59.3625%" y="309" width="0.7968%" height="15" fill="rgb(208,30,32)" fg:x="745" fg:w="10"/><text x="59.6125%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="59.9203%" y="293" width="0.2390%" height="15" fill="rgb(254,26,3)" fg:x="752" fg:w="3"/><text x="60.1703%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.0000%" y="277" width="0.1594%" height="15" fill="rgb(240,177,30)" fg:x="753" fg:w="2"/><text x="60.2500%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.0000%" y="261" width="0.1594%" height="15" fill="rgb(248,76,44)" fg:x="753" fg:w="2"/><text x="60.2500%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.0000%" y="245" width="0.1594%" height="15" fill="rgb(241,186,54)" fg:x="753" fg:w="2"/><text x="60.2500%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.96%)</title><rect x="59.2829%" y="341" width="0.9562%" height="15" fill="rgb(249,171,29)" fg:x="744" fg:w="12"/><text x="59.5329%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="59.3625%" y="325" width="0.8765%" height="15" fill="rgb(237,151,44)" fg:x="745" fg:w="11"/><text x="59.6125%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="60.1594%" y="309" width="0.0797%" height="15" fill="rgb(228,174,30)" fg:x="755" fg:w="1"/><text x="60.4094%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.1594%" y="293" width="0.0797%" height="15" fill="rgb(252,14,37)" fg:x="755" fg:w="1"/><text x="60.4094%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1594%" y="277" width="0.0797%" height="15" fill="rgb(207,111,40)" fg:x="755" fg:w="1"/><text x="60.4094%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1594%" y="261" width="0.0797%" height="15" fill="rgb(248,171,54)" fg:x="755" fg:w="1"/><text x="60.4094%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3187%" y="261" width="0.0797%" height="15" fill="rgb(211,127,2)" fg:x="757" fg:w="1"/><text x="60.5687%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="60.2390%" y="309" width="0.3187%" height="15" fill="rgb(236,87,47)" fg:x="756" fg:w="4"/><text x="60.4890%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="60.3187%" y="293" width="0.2390%" height="15" fill="rgb(223,190,45)" fg:x="757" fg:w="3"/><text x="60.5687%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.3187%" y="277" width="0.2390%" height="15" fill="rgb(215,5,16)" fg:x="757" fg:w="3"/><text x="60.5687%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.3984%" y="261" width="0.1594%" height="15" fill="rgb(252,82,33)" fg:x="758" fg:w="2"/><text x="60.6484%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="60.5578%" y="293" width="0.0797%" height="15" fill="rgb(247,213,44)" fg:x="760" fg:w="1"/><text x="60.8078%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="60.5578%" y="277" width="0.0797%" height="15" fill="rgb(205,196,44)" fg:x="760" fg:w="1"/><text x="60.8078%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5578%" y="261" width="0.0797%" height="15" fill="rgb(237,96,54)" fg:x="760" fg:w="1"/><text x="60.8078%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="60.5578%" y="309" width="0.1594%" height="15" fill="rgb(230,113,34)" fg:x="760" fg:w="2"/><text x="60.8078%" y="319.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="60.6375%" y="293" width="0.0797%" height="15" fill="rgb(221,224,12)" fg:x="761" fg:w="1"/><text x="60.8875%" y="303.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.6375%" y="277" width="0.0797%" height="15" fill="rgb(219,112,44)" fg:x="761" fg:w="1"/><text x="60.8875%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (46 samples, 3.67%)</title><rect x="57.1315%" y="357" width="3.6653%" height="15" fill="rgb(210,31,13)" fg:x="717" fg:w="46"/><text x="57.3815%" y="367.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="60.2390%" y="341" width="0.5578%" height="15" fill="rgb(230,25,16)" fg:x="756" fg:w="7"/><text x="60.4890%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="60.2390%" y="325" width="0.5578%" height="15" fill="rgb(246,108,53)" fg:x="756" fg:w="7"/><text x="60.4890%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.7171%" y="309" width="0.0797%" height="15" fill="rgb(241,172,50)" fg:x="762" fg:w="1"/><text x="60.9671%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.7171%" y="293" width="0.0797%" height="15" fill="rgb(235,141,10)" fg:x="762" fg:w="1"/><text x="60.9671%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (48 samples, 3.82%)</title><rect x="57.0518%" y="389" width="3.8247%" height="15" fill="rgb(220,174,43)" fg:x="716" fg:w="48"/><text x="57.3018%" y="399.50">rege..</text></g><g><title>regex::builders::Builder::build_one_string (47 samples, 3.75%)</title><rect x="57.1315%" y="373" width="3.7450%" height="15" fill="rgb(215,181,40)" fg:x="717" fg:w="47"/><text x="57.3815%" y="383.50">rege..</text></g><g><title>regex_automata::meta::regex::Config::match_kind (1 samples, 0.08%)</title><rect x="60.7968%" y="357" width="0.0797%" height="15" fill="rgb(230,97,2)" fg:x="763" fg:w="1"/><text x="61.0468%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.2749%" y="309" width="0.0797%" height="15" fill="rgb(211,25,27)" fg:x="769" fg:w="1"/><text x="61.5249%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.2749%" y="293" width="0.0797%" height="15" fill="rgb(230,87,26)" fg:x="769" fg:w="1"/><text x="61.5249%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2749%" y="277" width="0.0797%" height="15" fill="rgb(227,160,17)" fg:x="769" fg:w="1"/><text x="61.5249%" y="287.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (64 samples, 5.10%)</title><rect x="56.4143%" y="405" width="5.0996%" height="15" fill="rgb(244,85,34)" fg:x="708" fg:w="64"/><text x="56.6643%" y="415.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="60.8765%" y="389" width="0.6375%" height="15" fill="rgb(207,70,0)" fg:x="764" fg:w="8"/><text x="61.1265%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="60.8765%" y="373" width="0.6375%" height="15" fill="rgb(223,129,7)" fg:x="764" fg:w="8"/><text x="61.1265%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="60.8765%" y="357" width="0.6375%" height="15" fill="rgb(246,105,7)" fg:x="764" fg:w="8"/><text x="61.1265%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="60.9562%" y="341" width="0.5578%" height="15" fill="rgb(215,154,42)" fg:x="765" fg:w="7"/><text x="61.2062%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="60.9562%" y="325" width="0.5578%" height="15" fill="rgb(220,215,30)" fg:x="765" fg:w="7"/><text x="61.2062%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="61.3546%" y="309" width="0.1594%" height="15" fill="rgb(228,81,51)" fg:x="770" fg:w="2"/><text x="61.6046%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (616 samples, 49.08%)</title><rect x="12.6693%" y="501" width="49.0837%" height="15" fill="rgb(247,71,54)" fg:x="159" fg:w="616"/><text x="12.9193%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::O..</text></g><g><title>plugins_core::looking::model::qualify_name (598 samples, 47.65%)</title><rect x="14.1036%" y="485" width="47.6494%" height="15" fill="rgb(234,176,34)" fg:x="177" fg:w="598"/><text x="14.3536%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (598 samples, 47.65%)</title><rect x="14.1036%" y="469" width="47.6494%" height="15" fill="rgb(241,103,54)" fg:x="177" fg:w="598"/><text x="14.3536%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (598 samples, 47.65%)</title><rect x="14.1036%" y="453" width="47.6494%" height="15" fill="rgb(228,22,34)" fg:x="177" fg:w="598"/><text x="14.3536%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (595 samples, 47.41%)</title><rect x="14.3426%" y="437" width="47.4104%" height="15" fill="rgb(241,179,48)" fg:x="180" fg:w="595"/><text x="14.5926%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (68 samples, 5.42%)</title><rect x="56.3347%" y="421" width="5.4183%" height="15" fill="rgb(235,167,37)" fg:x="707" fg:w="68"/><text x="56.5847%" y="431.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="61.5139%" y="405" width="0.2390%" height="15" fill="rgb(213,109,30)" fg:x="772" fg:w="3"/><text x="61.7639%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.8327%" y="261" width="0.0797%" height="15" fill="rgb(222,172,16)" fg:x="776" fg:w="1"/><text x="62.0827%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.8327%" y="245" width="0.0797%" height="15" fill="rgb(233,192,5)" fg:x="776" fg:w="1"/><text x="62.0827%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="61.8327%" y="229" width="0.0797%" height="15" fill="rgb(247,189,41)" fg:x="776" fg:w="1"/><text x="62.0827%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="61.8327%" y="213" width="0.0797%" height="15" fill="rgb(218,134,47)" fg:x="776" fg:w="1"/><text x="62.0827%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.8327%" y="197" width="0.0797%" height="15" fill="rgb(216,29,3)" fg:x="776" fg:w="1"/><text x="62.0827%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="61.8327%" y="181" width="0.0797%" height="15" fill="rgb(246,140,12)" fg:x="776" fg:w="1"/><text x="62.0827%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="61.8327%" y="165" width="0.0797%" height="15" fill="rgb(230,136,11)" fg:x="776" fg:w="1"/><text x="62.0827%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="61.8327%" y="149" width="0.0797%" height="15" fill="rgb(247,22,47)" fg:x="776" fg:w="1"/><text x="62.0827%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.8327%" y="133" width="0.0797%" height="15" fill="rgb(218,84,22)" fg:x="776" fg:w="1"/><text x="62.0827%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="61.8327%" y="117" width="0.0797%" height="15" fill="rgb(216,87,39)" fg:x="776" fg:w="1"/><text x="62.0827%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.8327%" y="101" width="0.0797%" height="15" fill="rgb(221,178,8)" fg:x="776" fg:w="1"/><text x="62.0827%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="61.8327%" y="85" width="0.0797%" height="15" fill="rgb(230,42,11)" fg:x="776" fg:w="1"/><text x="62.0827%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="61.8327%" y="69" width="0.0797%" height="15" fill="rgb(237,229,4)" fg:x="776" fg:w="1"/><text x="62.0827%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="61.8327%" y="53" width="0.0797%" height="15" fill="rgb(222,31,33)" fg:x="776" fg:w="1"/><text x="62.0827%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.8327%" y="37" width="0.0797%" height="15" fill="rgb(210,17,39)" fg:x="776" fg:w="1"/><text x="62.0827%" y="47.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="61.8327%" y="325" width="0.1594%" height="15" fill="rgb(244,93,20)" fg:x="776" fg:w="2"/><text x="62.0827%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="61.8327%" y="309" width="0.1594%" height="15" fill="rgb(210,40,47)" fg:x="776" fg:w="2"/><text x="62.0827%" y="319.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="61.8327%" y="293" width="0.1594%" height="15" fill="rgb(239,211,47)" fg:x="776" fg:w="2"/><text x="62.0827%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="61.8327%" y="277" width="0.1594%" height="15" fill="rgb(251,223,49)" fg:x="776" fg:w="2"/><text x="62.0827%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="61.9124%" y="261" width="0.0797%" height="15" fill="rgb(221,149,5)" fg:x="777" fg:w="1"/><text x="62.1624%" y="271.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="61.9124%" y="245" width="0.0797%" height="15" fill="rgb(219,224,51)" fg:x="777" fg:w="1"/><text x="62.1624%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.9124%" y="229" width="0.0797%" height="15" fill="rgb(223,7,8)" fg:x="777" fg:w="1"/><text x="62.1624%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.9124%" y="213" width="0.0797%" height="15" fill="rgb(241,217,22)" fg:x="777" fg:w="1"/><text x="62.1624%" y="223.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="61.9124%" y="197" width="0.0797%" height="15" fill="rgb(248,209,0)" fg:x="777" fg:w="1"/><text x="62.1624%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="61.9124%" y="181" width="0.0797%" height="15" fill="rgb(217,205,4)" fg:x="777" fg:w="1"/><text x="62.1624%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.9124%" y="165" width="0.0797%" height="15" fill="rgb(228,124,39)" fg:x="777" fg:w="1"/><text x="62.1624%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="61.9124%" y="149" width="0.0797%" height="15" fill="rgb(250,116,42)" fg:x="777" fg:w="1"/><text x="62.1624%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="61.9124%" y="133" width="0.0797%" height="15" fill="rgb(223,202,9)" fg:x="777" fg:w="1"/><text x="62.1624%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="61.9124%" y="117" width="0.0797%" height="15" fill="rgb(242,222,40)" fg:x="777" fg:w="1"/><text x="62.1624%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (4 samples, 0.32%)</title><rect x="61.7530%" y="501" width="0.3187%" height="15" fill="rgb(229,99,46)" fg:x="775" fg:w="4"/><text x="62.0030%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="61.7530%" y="485" width="0.3187%" height="15" fill="rgb(225,56,46)" fg:x="775" fg:w="4"/><text x="62.0030%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="61.8327%" y="469" width="0.2390%" height="15" fill="rgb(227,94,5)" fg:x="776" fg:w="3"/><text x="62.0827%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="61.8327%" y="453" width="0.2390%" height="15" fill="rgb(205,112,38)" fg:x="776" fg:w="3"/><text x="62.0827%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="61.8327%" y="437" width="0.2390%" height="15" fill="rgb(231,133,46)" fg:x="776" fg:w="3"/><text x="62.0827%" y="447.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="61.8327%" y="421" width="0.2390%" height="15" fill="rgb(217,16,9)" fg:x="776" fg:w="3"/><text x="62.0827%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="61.8327%" y="405" width="0.2390%" height="15" fill="rgb(249,173,9)" fg:x="776" fg:w="3"/><text x="62.0827%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="61.8327%" y="389" width="0.2390%" height="15" fill="rgb(205,163,53)" fg:x="776" fg:w="3"/><text x="62.0827%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="61.8327%" y="373" width="0.2390%" height="15" fill="rgb(217,54,41)" fg:x="776" fg:w="3"/><text x="62.0827%" y="383.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="61.8327%" y="357" width="0.2390%" height="15" fill="rgb(228,216,12)" fg:x="776" fg:w="3"/><text x="62.0827%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="61.8327%" y="341" width="0.2390%" height="15" fill="rgb(244,228,15)" fg:x="776" fg:w="3"/><text x="62.0827%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.9920%" y="325" width="0.0797%" height="15" fill="rgb(221,176,53)" fg:x="778" fg:w="1"/><text x="62.2420%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="62.1514%" y="373" width="0.0797%" height="15" fill="rgb(205,94,34)" fg:x="780" fg:w="1"/><text x="62.4014%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="62.1514%" y="357" width="0.0797%" height="15" fill="rgb(213,110,48)" fg:x="780" fg:w="1"/><text x="62.4014%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.1514%" y="341" width="0.0797%" height="15" fill="rgb(236,142,28)" fg:x="780" fg:w="1"/><text x="62.4014%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.1514%" y="325" width="0.0797%" height="15" fill="rgb(225,135,29)" fg:x="780" fg:w="1"/><text x="62.4014%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.1514%" y="309" width="0.0797%" height="15" fill="rgb(252,45,31)" fg:x="780" fg:w="1"/><text x="62.4014%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.1514%" y="293" width="0.0797%" height="15" fill="rgb(211,187,50)" fg:x="780" fg:w="1"/><text x="62.4014%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.1514%" y="277" width="0.0797%" height="15" fill="rgb(229,109,7)" fg:x="780" fg:w="1"/><text x="62.4014%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.1514%" y="261" width="0.0797%" height="15" fill="rgb(251,131,51)" fg:x="780" fg:w="1"/><text x="62.4014%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.1514%" y="245" width="0.0797%" height="15" fill="rgb(251,180,35)" fg:x="780" fg:w="1"/><text x="62.4014%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1514%" y="229" width="0.0797%" height="15" fill="rgb(211,46,32)" fg:x="780" fg:w="1"/><text x="62.4014%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.2311%" y="309" width="0.0797%" height="15" fill="rgb(248,123,17)" fg:x="781" fg:w="1"/><text x="62.4811%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.2311%" y="293" width="0.0797%" height="15" fill="rgb(227,141,18)" fg:x="781" fg:w="1"/><text x="62.4811%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="62.2311%" y="277" width="0.0797%" height="15" fill="rgb(216,102,9)" fg:x="781" fg:w="1"/><text x="62.4811%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.3108%" y="245" width="0.0797%" height="15" fill="rgb(253,47,13)" fg:x="782" fg:w="1"/><text x="62.5608%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="62.3108%" y="229" width="0.0797%" height="15" fill="rgb(226,93,23)" fg:x="782" fg:w="1"/><text x="62.5608%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.3904%" y="213" width="0.0797%" height="15" fill="rgb(247,104,17)" fg:x="783" fg:w="1"/><text x="62.6404%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3904%" y="197" width="0.0797%" height="15" fill="rgb(233,203,26)" fg:x="783" fg:w="1"/><text x="62.6404%" y="207.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="62.2311%" y="357" width="0.3187%" height="15" fill="rgb(244,98,49)" fg:x="781" fg:w="4"/><text x="62.4811%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="62.2311%" y="341" width="0.3187%" height="15" fill="rgb(235,134,22)" fg:x="781" fg:w="4"/><text x="62.4811%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="62.2311%" y="325" width="0.3187%" height="15" fill="rgb(221,70,32)" fg:x="781" fg:w="4"/><text x="62.4811%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.3108%" y="309" width="0.2390%" height="15" fill="rgb(238,15,50)" fg:x="782" fg:w="3"/><text x="62.5608%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.3108%" y="293" width="0.2390%" height="15" fill="rgb(215,221,48)" fg:x="782" fg:w="3"/><text x="62.5608%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.3108%" y="277" width="0.2390%" height="15" fill="rgb(236,73,3)" fg:x="782" fg:w="3"/><text x="62.5608%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.3108%" y="261" width="0.2390%" height="15" fill="rgb(250,107,11)" fg:x="782" fg:w="3"/><text x="62.5608%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.3904%" y="245" width="0.1594%" height="15" fill="rgb(242,39,14)" fg:x="783" fg:w="2"/><text x="62.6404%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3904%" y="229" width="0.1594%" height="15" fill="rgb(248,164,37)" fg:x="783" fg:w="2"/><text x="62.6404%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.4701%" y="213" width="0.0797%" height="15" fill="rgb(217,60,12)" fg:x="784" fg:w="1"/><text x="62.7201%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.4701%" y="197" width="0.0797%" height="15" fill="rgb(240,125,29)" fg:x="784" fg:w="1"/><text x="62.7201%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.4701%" y="181" width="0.0797%" height="15" fill="rgb(208,207,28)" fg:x="784" fg:w="1"/><text x="62.7201%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.4701%" y="165" width="0.0797%" height="15" fill="rgb(209,159,27)" fg:x="784" fg:w="1"/><text x="62.7201%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.4701%" y="149" width="0.0797%" height="15" fill="rgb(251,176,53)" fg:x="784" fg:w="1"/><text x="62.7201%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.4701%" y="133" width="0.0797%" height="15" fill="rgb(211,85,7)" fg:x="784" fg:w="1"/><text x="62.7201%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.4701%" y="117" width="0.0797%" height="15" fill="rgb(216,64,54)" fg:x="784" fg:w="1"/><text x="62.7201%" y="127.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="62.4701%" y="101" width="0.0797%" height="15" fill="rgb(217,54,24)" fg:x="784" fg:w="1"/><text x="62.7201%" y="111.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.4701%" y="85" width="0.0797%" height="15" fill="rgb(208,206,53)" fg:x="784" fg:w="1"/><text x="62.7201%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="62.2311%" y="373" width="0.5578%" height="15" fill="rgb(251,74,39)" fg:x="781" fg:w="7"/><text x="62.4811%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="62.5498%" y="357" width="0.2390%" height="15" fill="rgb(226,47,5)" fg:x="785" fg:w="3"/><text x="62.7998%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.5498%" y="341" width="0.2390%" height="15" fill="rgb(234,111,33)" fg:x="785" fg:w="3"/><text x="62.7998%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.7092%" y="325" width="0.0797%" height="15" fill="rgb(251,14,10)" fg:x="787" fg:w="1"/><text x="62.9592%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7092%" y="309" width="0.0797%" height="15" fill="rgb(232,43,0)" fg:x="787" fg:w="1"/><text x="62.9592%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.7092%" y="293" width="0.0797%" height="15" fill="rgb(222,68,43)" fg:x="787" fg:w="1"/><text x="62.9592%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7092%" y="277" width="0.0797%" height="15" fill="rgb(217,24,23)" fg:x="787" fg:w="1"/><text x="62.9592%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.7092%" y="261" width="0.0797%" height="15" fill="rgb(229,209,14)" fg:x="787" fg:w="1"/><text x="62.9592%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.7092%" y="245" width="0.0797%" height="15" fill="rgb(250,149,48)" fg:x="787" fg:w="1"/><text x="62.9592%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7092%" y="229" width="0.0797%" height="15" fill="rgb(210,120,37)" fg:x="787" fg:w="1"/><text x="62.9592%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.7092%" y="213" width="0.0797%" height="15" fill="rgb(210,21,8)" fg:x="787" fg:w="1"/><text x="62.9592%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.7092%" y="197" width="0.0797%" height="15" fill="rgb(243,145,7)" fg:x="787" fg:w="1"/><text x="62.9592%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7092%" y="181" width="0.0797%" height="15" fill="rgb(238,178,32)" fg:x="787" fg:w="1"/><text x="62.9592%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.7092%" y="165" width="0.0797%" height="15" fill="rgb(222,4,10)" fg:x="787" fg:w="1"/><text x="62.9592%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.7092%" y="149" width="0.0797%" height="15" fill="rgb(239,7,37)" fg:x="787" fg:w="1"/><text x="62.9592%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7092%" y="133" width="0.0797%" height="15" fill="rgb(215,31,37)" fg:x="787" fg:w="1"/><text x="62.9592%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.7092%" y="117" width="0.0797%" height="15" fill="rgb(224,83,33)" fg:x="787" fg:w="1"/><text x="62.9592%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.7092%" y="101" width="0.0797%" height="15" fill="rgb(239,55,3)" fg:x="787" fg:w="1"/><text x="62.9592%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7092%" y="85" width="0.0797%" height="15" fill="rgb(247,92,11)" fg:x="787" fg:w="1"/><text x="62.9592%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.7092%" y="69" width="0.0797%" height="15" fill="rgb(239,200,7)" fg:x="787" fg:w="1"/><text x="62.9592%" y="79.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.7092%" y="53" width="0.0797%" height="15" fill="rgb(227,115,8)" fg:x="787" fg:w="1"/><text x="62.9592%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="62.8685%" y="357" width="0.0797%" height="15" fill="rgb(215,189,27)" fg:x="789" fg:w="1"/><text x="63.1185%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.8685%" y="341" width="0.0797%" height="15" fill="rgb(251,216,39)" fg:x="789" fg:w="1"/><text x="63.1185%" y="351.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (12 samples, 0.96%)</title><rect x="62.0717%" y="469" width="0.9562%" height="15" fill="rgb(207,29,47)" fg:x="779" fg:w="12"/><text x="62.3217%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.96%)</title><rect x="62.0717%" y="453" width="0.9562%" height="15" fill="rgb(210,71,34)" fg:x="779" fg:w="12"/><text x="62.3217%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="62.0717%" y="437" width="0.9562%" height="15" fill="rgb(253,217,51)" fg:x="779" fg:w="12"/><text x="62.3217%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (12 samples, 0.96%)</title><rect x="62.0717%" y="421" width="0.9562%" height="15" fill="rgb(222,117,46)" fg:x="779" fg:w="12"/><text x="62.3217%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (12 samples, 0.96%)</title><rect x="62.0717%" y="405" width="0.9562%" height="15" fill="rgb(226,132,6)" fg:x="779" fg:w="12"/><text x="62.3217%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="62.1514%" y="389" width="0.8765%" height="15" fill="rgb(254,145,51)" fg:x="780" fg:w="11"/><text x="62.4014%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="62.7888%" y="373" width="0.2390%" height="15" fill="rgb(231,199,27)" fg:x="788" fg:w="3"/><text x="63.0388%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.9482%" y="357" width="0.0797%" height="15" fill="rgb(245,158,14)" fg:x="790" fg:w="1"/><text x="63.1982%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.9482%" y="341" width="0.0797%" height="15" fill="rgb(240,113,14)" fg:x="790" fg:w="1"/><text x="63.1982%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9482%" y="325" width="0.0797%" height="15" fill="rgb(210,20,13)" fg:x="790" fg:w="1"/><text x="63.1982%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9482%" y="309" width="0.0797%" height="15" fill="rgb(241,144,13)" fg:x="790" fg:w="1"/><text x="63.1982%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9482%" y="293" width="0.0797%" height="15" fill="rgb(235,43,34)" fg:x="790" fg:w="1"/><text x="63.1982%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9482%" y="277" width="0.0797%" height="15" fill="rgb(208,36,20)" fg:x="790" fg:w="1"/><text x="63.1982%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.9482%" y="261" width="0.0797%" height="15" fill="rgb(239,204,10)" fg:x="790" fg:w="1"/><text x="63.1982%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9482%" y="245" width="0.0797%" height="15" fill="rgb(217,84,43)" fg:x="790" fg:w="1"/><text x="63.1982%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.9482%" y="229" width="0.0797%" height="15" fill="rgb(241,170,50)" fg:x="790" fg:w="1"/><text x="63.1982%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.9482%" y="213" width="0.0797%" height="15" fill="rgb(226,205,29)" fg:x="790" fg:w="1"/><text x="63.1982%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.0279%" y="469" width="0.0797%" height="15" fill="rgb(233,113,1)" fg:x="791" fg:w="1"/><text x="63.2779%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1873%" y="437" width="0.0797%" height="15" fill="rgb(253,98,13)" fg:x="793" fg:w="1"/><text x="63.4373%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.2669%" y="437" width="0.0797%" height="15" fill="rgb(211,115,12)" fg:x="794" fg:w="1"/><text x="63.5169%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2669%" y="421" width="0.0797%" height="15" fill="rgb(208,12,16)" fg:x="794" fg:w="1"/><text x="63.5169%" y="431.50"></text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (641 samples, 51.08%)</title><rect x="12.5100%" y="549" width="51.0757%" height="15" fill="rgb(237,193,54)" fg:x="157" fg:w="641"/><text x="12.7600%" y="559.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (641 samples, 51.08%)</title><rect x="12.5100%" y="533" width="51.0757%" height="15" fill="rgb(243,22,42)" fg:x="157" fg:w="641"/><text x="12.7600%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (640 samples, 51.00%)</title><rect x="12.5896%" y="517" width="50.9960%" height="15" fill="rgb(233,151,36)" fg:x="158" fg:w="640"/><text x="12.8396%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (19 samples, 1.51%)</title><rect x="62.0717%" y="501" width="1.5139%" height="15" fill="rgb(237,57,45)" fg:x="779" fg:w="19"/><text x="62.3217%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (19 samples, 1.51%)</title><rect x="62.0717%" y="485" width="1.5139%" height="15" fill="rgb(221,88,17)" fg:x="779" fg:w="19"/><text x="62.3217%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="63.1076%" y="469" width="0.4781%" height="15" fill="rgb(230,79,15)" fg:x="792" fg:w="6"/><text x="63.3576%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="63.1076%" y="453" width="0.4781%" height="15" fill="rgb(213,57,13)" fg:x="792" fg:w="6"/><text x="63.3576%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="63.3466%" y="437" width="0.2390%" height="15" fill="rgb(222,116,39)" fg:x="795" fg:w="3"/><text x="63.5966%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="63.3466%" y="421" width="0.2390%" height="15" fill="rgb(245,107,2)" fg:x="795" fg:w="3"/><text x="63.5966%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="63.3466%" y="405" width="0.2390%" height="15" fill="rgb(238,1,10)" fg:x="795" fg:w="3"/><text x="63.5966%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.3466%" y="389" width="0.2390%" height="15" fill="rgb(249,4,48)" fg:x="795" fg:w="3"/><text x="63.5966%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.3466%" y="373" width="0.2390%" height="15" fill="rgb(223,151,18)" fg:x="795" fg:w="3"/><text x="63.5966%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (652 samples, 51.95%)</title><rect x="11.7131%" y="725" width="51.9522%" height="15" fill="rgb(227,65,43)" fg:x="147" fg:w="652"/><text x="11.9631%" y="735.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (651 samples, 51.87%)</title><rect x="11.7928%" y="709" width="51.8725%" height="15" fill="rgb(218,40,45)" fg:x="148" fg:w="651"/><text x="12.0428%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (651 samples, 51.87%)</title><rect x="11.7928%" y="693" width="51.8725%" height="15" fill="rgb(252,121,31)" fg:x="148" fg:w="651"/><text x="12.0428%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (651 samples, 51.87%)</title><rect x="11.7928%" y="677" width="51.8725%" height="15" fill="rgb(219,158,43)" fg:x="148" fg:w="651"/><text x="12.0428%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::h..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (642 samples, 51.16%)</title><rect x="12.5100%" y="661" width="51.1554%" height="15" fill="rgb(231,162,42)" fg:x="157" fg:w="642"/><text x="12.7600%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (642 samples, 51.16%)</title><rect x="12.5100%" y="645" width="51.1554%" height="15" fill="rgb(217,179,25)" fg:x="157" fg:w="642"/><text x="12.7600%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (642 samples, 51.16%)</title><rect x="12.5100%" y="629" width="51.1554%" height="15" fill="rgb(206,212,31)" fg:x="157" fg:w="642"/><text x="12.7600%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (642 samples, 51.16%)</title><rect x="12.5100%" y="613" width="51.1554%" height="15" fill="rgb(235,144,12)" fg:x="157" fg:w="642"/><text x="12.7600%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (642 samples, 51.16%)</title><rect x="12.5100%" y="597" width="51.1554%" height="15" fill="rgb(213,51,10)" fg:x="157" fg:w="642"/><text x="12.7600%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (642 samples, 51.16%)</title><rect x="12.5100%" y="581" width="51.1554%" height="15" fill="rgb(231,145,14)" fg:x="157" fg:w="642"/><text x="12.7600%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (642 samples, 51.16%)</title><rect x="12.5100%" y="565" width="51.1554%" height="15" fill="rgb(235,15,28)" fg:x="157" fg:w="642"/><text x="12.7600%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5857%" y="549" width="0.0797%" height="15" fill="rgb(237,206,10)" fg:x="798" fg:w="1"/><text x="63.8357%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="63.6653%" y="725" width="0.0797%" height="15" fill="rgb(236,227,27)" fg:x="799" fg:w="1"/><text x="63.9153%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="63.6653%" y="709" width="0.0797%" height="15" fill="rgb(246,83,35)" fg:x="799" fg:w="1"/><text x="63.9153%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="63.6653%" y="693" width="0.0797%" height="15" fill="rgb(220,136,24)" fg:x="799" fg:w="1"/><text x="63.9153%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="63.6653%" y="677" width="0.0797%" height="15" fill="rgb(217,3,25)" fg:x="799" fg:w="1"/><text x="63.9153%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="63.6653%" y="661" width="0.0797%" height="15" fill="rgb(239,24,14)" fg:x="799" fg:w="1"/><text x="63.9153%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="63.6653%" y="645" width="0.0797%" height="15" fill="rgb(244,16,53)" fg:x="799" fg:w="1"/><text x="63.9153%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="63.6653%" y="629" width="0.0797%" height="15" fill="rgb(208,175,44)" fg:x="799" fg:w="1"/><text x="63.9153%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.6653%" y="613" width="0.0797%" height="15" fill="rgb(252,18,48)" fg:x="799" fg:w="1"/><text x="63.9153%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.6653%" y="597" width="0.0797%" height="15" fill="rgb(234,199,32)" fg:x="799" fg:w="1"/><text x="63.9153%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.6653%" y="581" width="0.0797%" height="15" fill="rgb(225,77,54)" fg:x="799" fg:w="1"/><text x="63.9153%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.6653%" y="565" width="0.0797%" height="15" fill="rgb(225,42,25)" fg:x="799" fg:w="1"/><text x="63.9153%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.6653%" y="549" width="0.0797%" height="15" fill="rgb(242,227,46)" fg:x="799" fg:w="1"/><text x="63.9153%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.6653%" y="533" width="0.0797%" height="15" fill="rgb(246,197,35)" fg:x="799" fg:w="1"/><text x="63.9153%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.6653%" y="517" width="0.0797%" height="15" fill="rgb(215,159,26)" fg:x="799" fg:w="1"/><text x="63.9153%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.6653%" y="501" width="0.0797%" height="15" fill="rgb(212,194,50)" fg:x="799" fg:w="1"/><text x="63.9153%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="63.6653%" y="485" width="0.0797%" height="15" fill="rgb(246,132,1)" fg:x="799" fg:w="1"/><text x="63.9153%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="63.7450%" y="661" width="0.0797%" height="15" fill="rgb(217,71,7)" fg:x="800" fg:w="1"/><text x="63.9950%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7450%" y="645" width="0.0797%" height="15" fill="rgb(252,59,32)" fg:x="800" fg:w="1"/><text x="63.9950%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7450%" y="629" width="0.0797%" height="15" fill="rgb(253,204,25)" fg:x="800" fg:w="1"/><text x="63.9950%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7450%" y="613" width="0.0797%" height="15" fill="rgb(232,21,16)" fg:x="800" fg:w="1"/><text x="63.9950%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7450%" y="597" width="0.0797%" height="15" fill="rgb(248,90,29)" fg:x="800" fg:w="1"/><text x="63.9950%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7450%" y="581" width="0.0797%" height="15" fill="rgb(249,223,7)" fg:x="800" fg:w="1"/><text x="63.9950%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7450%" y="565" width="0.0797%" height="15" fill="rgb(231,119,42)" fg:x="800" fg:w="1"/><text x="63.9950%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7450%" y="549" width="0.0797%" height="15" fill="rgb(215,41,35)" fg:x="800" fg:w="1"/><text x="63.9950%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7450%" y="533" width="0.0797%" height="15" fill="rgb(220,44,45)" fg:x="800" fg:w="1"/><text x="63.9950%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7450%" y="517" width="0.0797%" height="15" fill="rgb(253,197,36)" fg:x="800" fg:w="1"/><text x="63.9950%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7450%" y="501" width="0.0797%" height="15" fill="rgb(245,225,54)" fg:x="800" fg:w="1"/><text x="63.9950%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7450%" y="485" width="0.0797%" height="15" fill="rgb(239,94,37)" fg:x="800" fg:w="1"/><text x="63.9950%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7450%" y="469" width="0.0797%" height="15" fill="rgb(242,217,10)" fg:x="800" fg:w="1"/><text x="63.9950%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7450%" y="453" width="0.0797%" height="15" fill="rgb(250,193,7)" fg:x="800" fg:w="1"/><text x="63.9950%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7450%" y="437" width="0.0797%" height="15" fill="rgb(230,104,19)" fg:x="800" fg:w="1"/><text x="63.9950%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.7450%" y="421" width="0.0797%" height="15" fill="rgb(230,181,4)" fg:x="800" fg:w="1"/><text x="63.9950%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.7450%" y="405" width="0.0797%" height="15" fill="rgb(216,219,49)" fg:x="800" fg:w="1"/><text x="63.9950%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7450%" y="389" width="0.0797%" height="15" fill="rgb(254,144,0)" fg:x="800" fg:w="1"/><text x="63.9950%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.8247%" y="581" width="0.0797%" height="15" fill="rgb(205,209,38)" fg:x="801" fg:w="1"/><text x="64.0747%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8247%" y="565" width="0.0797%" height="15" fill="rgb(240,21,42)" fg:x="801" fg:w="1"/><text x="64.0747%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.8247%" y="549" width="0.0797%" height="15" fill="rgb(241,132,3)" fg:x="801" fg:w="1"/><text x="64.0747%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8247%" y="533" width="0.0797%" height="15" fill="rgb(225,14,2)" fg:x="801" fg:w="1"/><text x="64.0747%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8247%" y="517" width="0.0797%" height="15" fill="rgb(210,141,35)" fg:x="801" fg:w="1"/><text x="64.0747%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.8247%" y="501" width="0.0797%" height="15" fill="rgb(251,14,44)" fg:x="801" fg:w="1"/><text x="64.0747%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8247%" y="485" width="0.0797%" height="15" fill="rgb(247,48,18)" fg:x="801" fg:w="1"/><text x="64.0747%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="63.7450%" y="677" width="0.2390%" height="15" fill="rgb(225,0,40)" fg:x="800" fg:w="3"/><text x="63.9950%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.8247%" y="661" width="0.1594%" height="15" fill="rgb(221,31,33)" fg:x="801" fg:w="2"/><text x="64.0747%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.8247%" y="645" width="0.1594%" height="15" fill="rgb(237,42,40)" fg:x="801" fg:w="2"/><text x="64.0747%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="63.8247%" y="629" width="0.1594%" height="15" fill="rgb(233,51,29)" fg:x="801" fg:w="2"/><text x="64.0747%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.8247%" y="613" width="0.1594%" height="15" fill="rgb(226,58,20)" fg:x="801" fg:w="2"/><text x="64.0747%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="63.8247%" y="597" width="0.1594%" height="15" fill="rgb(208,98,7)" fg:x="801" fg:w="2"/><text x="64.0747%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.9044%" y="581" width="0.0797%" height="15" fill="rgb(228,143,44)" fg:x="802" fg:w="1"/><text x="64.1544%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.9044%" y="565" width="0.0797%" height="15" fill="rgb(246,55,38)" fg:x="802" fg:w="1"/><text x="64.1544%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.9044%" y="549" width="0.0797%" height="15" fill="rgb(247,87,16)" fg:x="802" fg:w="1"/><text x="64.1544%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="63.7450%" y="725" width="0.3187%" height="15" fill="rgb(234,129,42)" fg:x="800" fg:w="4"/><text x="63.9950%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="63.7450%" y="709" width="0.3187%" height="15" fill="rgb(220,82,16)" fg:x="800" fg:w="4"/><text x="63.9950%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="63.7450%" y="693" width="0.3187%" height="15" fill="rgb(211,88,4)" fg:x="800" fg:w="4"/><text x="63.9950%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="63.9841%" y="677" width="0.0797%" height="15" fill="rgb(248,151,21)" fg:x="803" fg:w="1"/><text x="64.2341%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="63.9841%" y="661" width="0.0797%" height="15" fill="rgb(238,163,6)" fg:x="803" fg:w="1"/><text x="64.2341%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="63.9841%" y="645" width="0.0797%" height="15" fill="rgb(209,183,11)" fg:x="803" fg:w="1"/><text x="64.2341%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9841%" y="629" width="0.0797%" height="15" fill="rgb(219,37,20)" fg:x="803" fg:w="1"/><text x="64.2341%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9841%" y="613" width="0.0797%" height="15" fill="rgb(210,158,4)" fg:x="803" fg:w="1"/><text x="64.2341%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9841%" y="597" width="0.0797%" height="15" fill="rgb(221,167,53)" fg:x="803" fg:w="1"/><text x="64.2341%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9841%" y="581" width="0.0797%" height="15" fill="rgb(237,151,45)" fg:x="803" fg:w="1"/><text x="64.2341%" y="591.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.0637%" y="677" width="0.0797%" height="15" fill="rgb(231,39,3)" fg:x="804" fg:w="1"/><text x="64.3137%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0637%" y="661" width="0.0797%" height="15" fill="rgb(212,167,28)" fg:x="804" fg:w="1"/><text x="64.3137%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0637%" y="645" width="0.0797%" height="15" fill="rgb(232,178,8)" fg:x="804" fg:w="1"/><text x="64.3137%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (807 samples, 64.30%)</title><rect x="0.0000%" y="789" width="64.3028%" height="15" fill="rgb(225,151,20)" fg:x="0" fg:w="807"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (807 samples, 64.30%)</title><rect x="0.0000%" y="773" width="64.3028%" height="15" fill="rgb(238,3,37)" fg:x="0" fg:w="807"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (807 samples, 64.30%)</title><rect x="0.0000%" y="757" width="64.3028%" height="15" fill="rgb(251,147,42)" fg:x="0" fg:w="807"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (660 samples, 52.59%)</title><rect x="11.7131%" y="741" width="52.5896%" height="15" fill="rgb(208,173,10)" fg:x="147" fg:w="660"/><text x="11.9631%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="64.0637%" y="725" width="0.2390%" height="15" fill="rgb(246,225,4)" fg:x="804" fg:w="3"/><text x="64.3137%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="64.0637%" y="709" width="0.2390%" height="15" fill="rgb(248,102,6)" fg:x="804" fg:w="3"/><text x="64.3137%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="64.0637%" y="693" width="0.2390%" height="15" fill="rgb(232,6,21)" fg:x="804" fg:w="3"/><text x="64.3137%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="64.1434%" y="677" width="0.1594%" height="15" fill="rgb(221,179,22)" fg:x="805" fg:w="2"/><text x="64.3934%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.1434%" y="661" width="0.1594%" height="15" fill="rgb(252,50,20)" fg:x="805" fg:w="2"/><text x="64.3934%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.2231%" y="645" width="0.0797%" height="15" fill="rgb(222,56,38)" fg:x="806" fg:w="1"/><text x="64.4731%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.2231%" y="629" width="0.0797%" height="15" fill="rgb(206,193,29)" fg:x="806" fg:w="1"/><text x="64.4731%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="64.2231%" y="613" width="0.0797%" height="15" fill="rgb(239,192,45)" fg:x="806" fg:w="1"/><text x="64.4731%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="64.3028%" y="725" width="0.0797%" height="15" fill="rgb(254,18,36)" fg:x="807" fg:w="1"/><text x="64.5528%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.3028%" y="709" width="0.0797%" height="15" fill="rgb(221,127,11)" fg:x="807" fg:w="1"/><text x="64.5528%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.4622%" y="629" width="0.0797%" height="15" fill="rgb(234,146,35)" fg:x="809" fg:w="1"/><text x="64.7122%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="64.3028%" y="741" width="0.3187%" height="15" fill="rgb(254,201,37)" fg:x="807" fg:w="4"/><text x="64.5528%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="64.3825%" y="725" width="0.2390%" height="15" fill="rgb(211,202,23)" fg:x="808" fg:w="3"/><text x="64.6325%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="64.3825%" y="709" width="0.2390%" height="15" fill="rgb(237,91,2)" fg:x="808" fg:w="3"/><text x="64.6325%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="64.3825%" y="693" width="0.2390%" height="15" fill="rgb(226,228,36)" fg:x="808" fg:w="3"/><text x="64.6325%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="64.3825%" y="677" width="0.2390%" height="15" fill="rgb(213,63,50)" fg:x="808" fg:w="3"/><text x="64.6325%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="64.3825%" y="661" width="0.2390%" height="15" fill="rgb(235,194,19)" fg:x="808" fg:w="3"/><text x="64.6325%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="64.3825%" y="645" width="0.2390%" height="15" fill="rgb(207,204,18)" fg:x="808" fg:w="3"/><text x="64.6325%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.5418%" y="629" width="0.0797%" height="15" fill="rgb(248,8,7)" fg:x="810" fg:w="1"/><text x="64.7918%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.5418%" y="613" width="0.0797%" height="15" fill="rgb(223,145,47)" fg:x="810" fg:w="1"/><text x="64.7918%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.5418%" y="597" width="0.0797%" height="15" fill="rgb(228,84,11)" fg:x="810" fg:w="1"/><text x="64.7918%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5418%" y="581" width="0.0797%" height="15" fill="rgb(218,76,45)" fg:x="810" fg:w="1"/><text x="64.7918%" y="591.50"></text></g><g><title>libloading::safe::Library::new (1 samples, 0.08%)</title><rect x="64.7809%" y="645" width="0.0797%" height="15" fill="rgb(223,80,15)" fg:x="813" fg:w="1"/><text x="65.0309%" y="655.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="64.7809%" y="629" width="0.0797%" height="15" fill="rgb(219,218,33)" fg:x="813" fg:w="1"/><text x="65.0309%" y="639.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="64.7809%" y="613" width="0.0797%" height="15" fill="rgb(208,51,11)" fg:x="813" fg:w="1"/><text x="65.0309%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="64.7012%" y="677" width="0.2390%" height="15" fill="rgb(229,165,39)" fg:x="812" fg:w="3"/><text x="64.9512%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="64.7012%" y="661" width="0.2390%" height="15" fill="rgb(241,100,24)" fg:x="812" fg:w="3"/><text x="64.9512%" y="671.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="64.8606%" y="645" width="0.0797%" height="15" fill="rgb(228,14,23)" fg:x="814" fg:w="1"/><text x="65.1106%" y="655.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="64.8606%" y="629" width="0.0797%" height="15" fill="rgb(247,116,52)" fg:x="814" fg:w="1"/><text x="65.1106%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.40%)</title><rect x="64.6215%" y="741" width="0.3984%" height="15" fill="rgb(216,149,33)" fg:x="811" fg:w="5"/><text x="64.8715%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (5 samples, 0.40%)</title><rect x="64.6215%" y="725" width="0.3984%" height="15" fill="rgb(238,142,29)" fg:x="811" fg:w="5"/><text x="64.8715%" y="735.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.40%)</title><rect x="64.6215%" y="709" width="0.3984%" height="15" fill="rgb(224,83,40)" fg:x="811" fg:w="5"/><text x="64.8715%" y="719.50"></text></g><g><title>engine::session::Session::initialize (4 samples, 0.32%)</title><rect x="64.7012%" y="693" width="0.3187%" height="15" fill="rgb(234,165,11)" fg:x="812" fg:w="4"/><text x="64.9512%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="64.9402%" y="677" width="0.0797%" height="15" fill="rgb(215,96,23)" fg:x="815" fg:w="1"/><text x="65.1902%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="64.9402%" y="661" width="0.0797%" height="15" fill="rgb(233,179,26)" fg:x="815" fg:w="1"/><text x="65.1902%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.9402%" y="645" width="0.0797%" height="15" fill="rgb(225,129,33)" fg:x="815" fg:w="1"/><text x="65.1902%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="64.9402%" y="629" width="0.0797%" height="15" fill="rgb(237,49,13)" fg:x="815" fg:w="1"/><text x="65.1902%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9402%" y="613" width="0.0797%" height="15" fill="rgb(211,3,31)" fg:x="815" fg:w="1"/><text x="65.1902%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.0996%" y="613" width="0.0797%" height="15" fill="rgb(216,152,19)" fg:x="817" fg:w="1"/><text x="65.3496%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.0996%" y="597" width="0.0797%" height="15" fill="rgb(251,121,35)" fg:x="817" fg:w="1"/><text x="65.3496%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.0996%" y="581" width="0.0797%" height="15" fill="rgb(210,217,47)" fg:x="817" fg:w="1"/><text x="65.3496%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="65.0996%" y="629" width="0.1594%" height="15" fill="rgb(244,116,22)" fg:x="817" fg:w="2"/><text x="65.3496%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.1793%" y="613" width="0.0797%" height="15" fill="rgb(228,17,21)" fg:x="818" fg:w="1"/><text x="65.4293%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.1793%" y="597" width="0.0797%" height="15" fill="rgb(240,149,34)" fg:x="818" fg:w="1"/><text x="65.4293%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.2590%" y="613" width="0.0797%" height="15" fill="rgb(208,125,47)" fg:x="819" fg:w="1"/><text x="65.5090%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.2590%" y="597" width="0.0797%" height="15" fill="rgb(249,186,39)" fg:x="819" fg:w="1"/><text x="65.5090%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="65.3386%" y="597" width="0.0797%" height="15" fill="rgb(240,220,33)" fg:x="820" fg:w="1"/><text x="65.5886%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.3386%" y="581" width="0.0797%" height="15" fill="rgb(243,110,23)" fg:x="820" fg:w="1"/><text x="65.5886%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.3386%" y="565" width="0.0797%" height="15" fill="rgb(219,163,46)" fg:x="820" fg:w="1"/><text x="65.5886%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.3386%" y="549" width="0.0797%" height="15" fill="rgb(216,126,30)" fg:x="820" fg:w="1"/><text x="65.5886%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.4183%" y="565" width="0.0797%" height="15" fill="rgb(208,139,11)" fg:x="821" fg:w="1"/><text x="65.6683%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="65.0199%" y="645" width="0.5578%" height="15" fill="rgb(213,118,36)" fg:x="816" fg:w="7"/><text x="65.2699%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="65.2590%" y="629" width="0.3187%" height="15" fill="rgb(226,43,17)" fg:x="819" fg:w="4"/><text x="65.5090%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.3386%" y="613" width="0.2390%" height="15" fill="rgb(254,217,4)" fg:x="820" fg:w="3"/><text x="65.5886%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.4183%" y="597" width="0.1594%" height="15" fill="rgb(210,134,47)" fg:x="821" fg:w="2"/><text x="65.6683%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.4183%" y="581" width="0.1594%" height="15" fill="rgb(237,24,49)" fg:x="821" fg:w="2"/><text x="65.6683%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.4980%" y="565" width="0.0797%" height="15" fill="rgb(251,39,46)" fg:x="822" fg:w="1"/><text x="65.7480%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.4980%" y="549" width="0.0797%" height="15" fill="rgb(251,220,3)" fg:x="822" fg:w="1"/><text x="65.7480%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.4980%" y="533" width="0.0797%" height="15" fill="rgb(228,105,12)" fg:x="822" fg:w="1"/><text x="65.7480%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="65.5777%" y="549" width="0.0797%" height="15" fill="rgb(215,196,1)" fg:x="823" fg:w="1"/><text x="65.8277%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="65.5777%" y="533" width="0.0797%" height="15" fill="rgb(214,33,39)" fg:x="823" fg:w="1"/><text x="65.8277%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="65.5777%" y="517" width="0.0797%" height="15" fill="rgb(220,19,52)" fg:x="823" fg:w="1"/><text x="65.8277%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="65.5777%" y="501" width="0.0797%" height="15" fill="rgb(221,78,38)" fg:x="823" fg:w="1"/><text x="65.8277%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5777%" y="485" width="0.0797%" height="15" fill="rgb(253,30,16)" fg:x="823" fg:w="1"/><text x="65.8277%" y="495.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.72%)</title><rect x="65.0199%" y="725" width="0.7171%" height="15" fill="rgb(242,65,0)" fg:x="816" fg:w="9"/><text x="65.2699%" y="735.50"></text></g><g><title>engine::session::state::State::close (9 samples, 0.72%)</title><rect x="65.0199%" y="709" width="0.7171%" height="15" fill="rgb(235,201,12)" fg:x="816" fg:w="9"/><text x="65.2699%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (9 samples, 0.72%)</title><rect x="65.0199%" y="693" width="0.7171%" height="15" fill="rgb(233,161,9)" fg:x="816" fg:w="9"/><text x="65.2699%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (9 samples, 0.72%)</title><rect x="65.0199%" y="677" width="0.7171%" height="15" fill="rgb(241,207,41)" fg:x="816" fg:w="9"/><text x="65.2699%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.72%)</title><rect x="65.0199%" y="661" width="0.7171%" height="15" fill="rgb(212,69,46)" fg:x="816" fg:w="9"/><text x="65.2699%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="65.5777%" y="645" width="0.1594%" height="15" fill="rgb(239,69,45)" fg:x="823" fg:w="2"/><text x="65.8277%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="65.5777%" y="629" width="0.1594%" height="15" fill="rgb(242,117,48)" fg:x="823" fg:w="2"/><text x="65.8277%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="65.5777%" y="613" width="0.1594%" height="15" fill="rgb(228,41,36)" fg:x="823" fg:w="2"/><text x="65.8277%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="65.5777%" y="597" width="0.1594%" height="15" fill="rgb(212,3,32)" fg:x="823" fg:w="2"/><text x="65.8277%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="65.5777%" y="581" width="0.1594%" height="15" fill="rgb(233,41,49)" fg:x="823" fg:w="2"/><text x="65.8277%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="65.5777%" y="565" width="0.1594%" height="15" fill="rgb(252,170,49)" fg:x="823" fg:w="2"/><text x="65.8277%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="65.6574%" y="549" width="0.0797%" height="15" fill="rgb(229,53,26)" fg:x="824" fg:w="1"/><text x="65.9074%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="65.6574%" y="533" width="0.0797%" height="15" fill="rgb(217,157,12)" fg:x="824" fg:w="1"/><text x="65.9074%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="65.7371%" y="661" width="0.0797%" height="15" fill="rgb(227,17,9)" fg:x="825" fg:w="1"/><text x="65.9871%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="65.7371%" y="645" width="0.0797%" height="15" fill="rgb(218,84,12)" fg:x="825" fg:w="1"/><text x="65.9871%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="65.7371%" y="629" width="0.0797%" height="15" fill="rgb(212,79,24)" fg:x="825" fg:w="1"/><text x="65.9871%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.7371%" y="613" width="0.0797%" height="15" fill="rgb(217,222,37)" fg:x="825" fg:w="1"/><text x="65.9871%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.7371%" y="597" width="0.0797%" height="15" fill="rgb(246,208,8)" fg:x="825" fg:w="1"/><text x="65.9871%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.7371%" y="581" width="0.0797%" height="15" fill="rgb(244,133,10)" fg:x="825" fg:w="1"/><text x="65.9871%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.7371%" y="565" width="0.0797%" height="15" fill="rgb(209,219,41)" fg:x="825" fg:w="1"/><text x="65.9871%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.7371%" y="549" width="0.0797%" height="15" fill="rgb(253,175,45)" fg:x="825" fg:w="1"/><text x="65.9871%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7371%" y="533" width="0.0797%" height="15" fill="rgb(235,100,37)" fg:x="825" fg:w="1"/><text x="65.9871%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="65.7371%" y="677" width="0.1594%" height="15" fill="rgb(225,87,19)" fg:x="825" fg:w="2"/><text x="65.9871%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8167%" y="661" width="0.0797%" height="15" fill="rgb(217,152,17)" fg:x="826" fg:w="1"/><text x="66.0667%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="65.7371%" y="709" width="0.2390%" height="15" fill="rgb(235,72,13)" fg:x="825" fg:w="3"/><text x="65.9871%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="65.7371%" y="693" width="0.2390%" height="15" fill="rgb(233,140,18)" fg:x="825" fg:w="3"/><text x="65.9871%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="65.8964%" y="677" width="0.0797%" height="15" fill="rgb(207,212,28)" fg:x="827" fg:w="1"/><text x="66.1464%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.8964%" y="661" width="0.0797%" height="15" fill="rgb(220,130,25)" fg:x="827" fg:w="1"/><text x="66.1464%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.8964%" y="645" width="0.0797%" height="15" fill="rgb(205,55,34)" fg:x="827" fg:w="1"/><text x="66.1464%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.8964%" y="629" width="0.0797%" height="15" fill="rgb(237,54,35)" fg:x="827" fg:w="1"/><text x="66.1464%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8964%" y="613" width="0.0797%" height="15" fill="rgb(208,67,23)" fg:x="827" fg:w="1"/><text x="66.1464%" y="623.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="65.7371%" y="725" width="0.3187%" height="15" fill="rgb(206,207,50)" fg:x="825" fg:w="4"/><text x="65.9871%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="65.9761%" y="709" width="0.0797%" height="15" fill="rgb(213,211,42)" fg:x="828" fg:w="1"/><text x="66.2261%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="65.9761%" y="693" width="0.0797%" height="15" fill="rgb(252,197,50)" fg:x="828" fg:w="1"/><text x="66.2261%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="65.9761%" y="677" width="0.0797%" height="15" fill="rgb(251,211,41)" fg:x="828" fg:w="1"/><text x="66.2261%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="65.9761%" y="661" width="0.0797%" height="15" fill="rgb(229,211,5)" fg:x="828" fg:w="1"/><text x="66.2261%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="65.9761%" y="645" width="0.0797%" height="15" fill="rgb(239,36,31)" fg:x="828" fg:w="1"/><text x="66.2261%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.9761%" y="629" width="0.0797%" height="15" fill="rgb(248,67,31)" fg:x="828" fg:w="1"/><text x="66.2261%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.9761%" y="613" width="0.0797%" height="15" fill="rgb(249,55,44)" fg:x="828" fg:w="1"/><text x="66.2261%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9761%" y="597" width="0.0797%" height="15" fill="rgb(216,82,12)" fg:x="828" fg:w="1"/><text x="66.2261%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9761%" y="581" width="0.0797%" height="15" fill="rgb(242,174,1)" fg:x="828" fg:w="1"/><text x="66.2261%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9761%" y="565" width="0.0797%" height="15" fill="rgb(208,120,29)" fg:x="828" fg:w="1"/><text x="66.2261%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9761%" y="549" width="0.0797%" height="15" fill="rgb(221,105,43)" fg:x="828" fg:w="1"/><text x="66.2261%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9761%" y="533" width="0.0797%" height="15" fill="rgb(234,124,22)" fg:x="828" fg:w="1"/><text x="66.2261%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="66.0558%" y="693" width="0.0797%" height="15" fill="rgb(212,23,30)" fg:x="829" fg:w="1"/><text x="66.3058%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="66.0558%" y="677" width="0.0797%" height="15" fill="rgb(219,122,53)" fg:x="829" fg:w="1"/><text x="66.3058%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="66.0558%" y="661" width="0.0797%" height="15" fill="rgb(248,84,24)" fg:x="829" fg:w="1"/><text x="66.3058%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.0558%" y="645" width="0.0797%" height="15" fill="rgb(245,115,18)" fg:x="829" fg:w="1"/><text x="66.3058%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.0558%" y="629" width="0.0797%" height="15" fill="rgb(227,176,51)" fg:x="829" fg:w="1"/><text x="66.3058%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.0558%" y="613" width="0.0797%" height="15" fill="rgb(229,63,42)" fg:x="829" fg:w="1"/><text x="66.3058%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="66.0558%" y="597" width="0.0797%" height="15" fill="rgb(247,202,24)" fg:x="829" fg:w="1"/><text x="66.3058%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="66.0558%" y="581" width="0.0797%" height="15" fill="rgb(244,173,20)" fg:x="829" fg:w="1"/><text x="66.3058%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.0558%" y="565" width="0.0797%" height="15" fill="rgb(242,81,47)" fg:x="829" fg:w="1"/><text x="66.3058%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="66.1355%" y="693" width="0.0797%" height="15" fill="rgb(231,185,54)" fg:x="830" fg:w="1"/><text x="66.3855%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="66.1355%" y="677" width="0.0797%" height="15" fill="rgb(243,55,32)" fg:x="830" fg:w="1"/><text x="66.3855%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.1355%" y="661" width="0.0797%" height="15" fill="rgb(208,167,19)" fg:x="830" fg:w="1"/><text x="66.3855%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.1355%" y="645" width="0.0797%" height="15" fill="rgb(231,72,35)" fg:x="830" fg:w="1"/><text x="66.3855%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.1355%" y="629" width="0.0797%" height="15" fill="rgb(250,173,51)" fg:x="830" fg:w="1"/><text x="66.3855%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2948%" y="661" width="0.0797%" height="15" fill="rgb(209,5,22)" fg:x="832" fg:w="1"/><text x="66.5448%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2948%" y="645" width="0.0797%" height="15" fill="rgb(250,174,19)" fg:x="832" fg:w="1"/><text x="66.5448%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.2948%" y="629" width="0.0797%" height="15" fill="rgb(217,3,49)" fg:x="832" fg:w="1"/><text x="66.5448%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.2948%" y="613" width="0.0797%" height="15" fill="rgb(218,225,5)" fg:x="832" fg:w="1"/><text x="66.5448%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.2948%" y="597" width="0.0797%" height="15" fill="rgb(236,89,11)" fg:x="832" fg:w="1"/><text x="66.5448%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2948%" y="581" width="0.0797%" height="15" fill="rgb(206,33,28)" fg:x="832" fg:w="1"/><text x="66.5448%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2948%" y="565" width="0.0797%" height="15" fill="rgb(241,56,42)" fg:x="832" fg:w="1"/><text x="66.5448%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.2948%" y="549" width="0.0797%" height="15" fill="rgb(222,44,11)" fg:x="832" fg:w="1"/><text x="66.5448%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.2948%" y="533" width="0.0797%" height="15" fill="rgb(234,111,20)" fg:x="832" fg:w="1"/><text x="66.5448%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.2948%" y="517" width="0.0797%" height="15" fill="rgb(237,77,6)" fg:x="832" fg:w="1"/><text x="66.5448%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.2948%" y="501" width="0.0797%" height="15" fill="rgb(235,111,23)" fg:x="832" fg:w="1"/><text x="66.5448%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2948%" y="485" width="0.0797%" height="15" fill="rgb(251,135,29)" fg:x="832" fg:w="1"/><text x="66.5448%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (5 samples, 0.40%)</title><rect x="66.0558%" y="725" width="0.3984%" height="15" fill="rgb(217,57,1)" fg:x="829" fg:w="5"/><text x="66.3058%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="66.0558%" y="709" width="0.3984%" height="15" fill="rgb(249,119,31)" fg:x="829" fg:w="5"/><text x="66.3058%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="66.2151%" y="693" width="0.2390%" height="15" fill="rgb(233,164,33)" fg:x="831" fg:w="3"/><text x="66.4651%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="66.2948%" y="677" width="0.1594%" height="15" fill="rgb(250,217,43)" fg:x="832" fg:w="2"/><text x="66.5448%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="66.3745%" y="661" width="0.0797%" height="15" fill="rgb(232,154,50)" fg:x="833" fg:w="1"/><text x="66.6245%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="66.3745%" y="645" width="0.0797%" height="15" fill="rgb(227,190,8)" fg:x="833" fg:w="1"/><text x="66.6245%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.3745%" y="629" width="0.0797%" height="15" fill="rgb(209,217,32)" fg:x="833" fg:w="1"/><text x="66.6245%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="66.3745%" y="613" width="0.0797%" height="15" fill="rgb(243,203,50)" fg:x="833" fg:w="1"/><text x="66.6245%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.3745%" y="597" width="0.0797%" height="15" fill="rgb(232,152,27)" fg:x="833" fg:w="1"/><text x="66.6245%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="66.3745%" y="581" width="0.0797%" height="15" fill="rgb(240,34,29)" fg:x="833" fg:w="1"/><text x="66.6245%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.3745%" y="565" width="0.0797%" height="15" fill="rgb(215,185,52)" fg:x="833" fg:w="1"/><text x="66.6245%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="66.3745%" y="549" width="0.0797%" height="15" fill="rgb(240,89,49)" fg:x="833" fg:w="1"/><text x="66.6245%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3745%" y="533" width="0.0797%" height="15" fill="rgb(225,12,52)" fg:x="833" fg:w="1"/><text x="66.6245%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4542%" y="645" width="0.0797%" height="15" fill="rgb(239,128,45)" fg:x="834" fg:w="1"/><text x="66.7042%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="66.4542%" y="661" width="0.1594%" height="15" fill="rgb(211,78,47)" fg:x="834" fg:w="2"/><text x="66.7042%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="66.5339%" y="645" width="0.0797%" height="15" fill="rgb(232,31,21)" fg:x="835" fg:w="1"/><text x="66.7839%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="66.5339%" y="629" width="0.0797%" height="15" fill="rgb(222,168,14)" fg:x="835" fg:w="1"/><text x="66.7839%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="66.5339%" y="613" width="0.0797%" height="15" fill="rgb(209,128,24)" fg:x="835" fg:w="1"/><text x="66.7839%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="66.5339%" y="597" width="0.0797%" height="15" fill="rgb(249,35,13)" fg:x="835" fg:w="1"/><text x="66.7839%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5339%" y="581" width="0.0797%" height="15" fill="rgb(218,7,2)" fg:x="835" fg:w="1"/><text x="66.7839%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6135%" y="581" width="0.0797%" height="15" fill="rgb(238,107,27)" fg:x="836" fg:w="1"/><text x="66.8635%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6135%" y="565" width="0.0797%" height="15" fill="rgb(217,88,38)" fg:x="836" fg:w="1"/><text x="66.8635%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6135%" y="549" width="0.0797%" height="15" fill="rgb(230,207,0)" fg:x="836" fg:w="1"/><text x="66.8635%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6135%" y="533" width="0.0797%" height="15" fill="rgb(249,64,54)" fg:x="836" fg:w="1"/><text x="66.8635%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.6135%" y="517" width="0.0797%" height="15" fill="rgb(231,7,11)" fg:x="836" fg:w="1"/><text x="66.8635%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6135%" y="501" width="0.0797%" height="15" fill="rgb(205,149,21)" fg:x="836" fg:w="1"/><text x="66.8635%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="66.6135%" y="661" width="0.1594%" height="15" fill="rgb(215,126,34)" fg:x="836" fg:w="2"/><text x="66.8635%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="66.6135%" y="645" width="0.1594%" height="15" fill="rgb(241,132,45)" fg:x="836" fg:w="2"/><text x="66.8635%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="66.6135%" y="629" width="0.1594%" height="15" fill="rgb(252,69,32)" fg:x="836" fg:w="2"/><text x="66.8635%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="66.6135%" y="613" width="0.1594%" height="15" fill="rgb(232,204,19)" fg:x="836" fg:w="2"/><text x="66.8635%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="66.6135%" y="597" width="0.1594%" height="15" fill="rgb(249,15,47)" fg:x="836" fg:w="2"/><text x="66.8635%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.6932%" y="581" width="0.0797%" height="15" fill="rgb(209,227,23)" fg:x="837" fg:w="1"/><text x="66.9432%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.6932%" y="565" width="0.0797%" height="15" fill="rgb(248,92,24)" fg:x="837" fg:w="1"/><text x="66.9432%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6932%" y="549" width="0.0797%" height="15" fill="rgb(247,59,2)" fg:x="837" fg:w="1"/><text x="66.9432%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.7729%" y="645" width="0.0797%" height="15" fill="rgb(221,30,5)" fg:x="838" fg:w="1"/><text x="67.0229%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.7729%" y="629" width="0.0797%" height="15" fill="rgb(208,108,53)" fg:x="838" fg:w="1"/><text x="67.0229%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.7729%" y="613" width="0.0797%" height="15" fill="rgb(211,183,26)" fg:x="838" fg:w="1"/><text x="67.0229%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.7729%" y="597" width="0.0797%" height="15" fill="rgb(232,132,4)" fg:x="838" fg:w="1"/><text x="67.0229%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.7729%" y="581" width="0.0797%" height="15" fill="rgb(253,128,37)" fg:x="838" fg:w="1"/><text x="67.0229%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.7729%" y="565" width="0.0797%" height="15" fill="rgb(221,58,24)" fg:x="838" fg:w="1"/><text x="67.0229%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.7729%" y="549" width="0.0797%" height="15" fill="rgb(230,54,45)" fg:x="838" fg:w="1"/><text x="67.0229%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.7729%" y="533" width="0.0797%" height="15" fill="rgb(254,21,18)" fg:x="838" fg:w="1"/><text x="67.0229%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.7729%" y="517" width="0.0797%" height="15" fill="rgb(221,108,0)" fg:x="838" fg:w="1"/><text x="67.0229%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.7729%" y="501" width="0.0797%" height="15" fill="rgb(206,95,1)" fg:x="838" fg:w="1"/><text x="67.0229%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.7729%" y="485" width="0.0797%" height="15" fill="rgb(237,52,5)" fg:x="838" fg:w="1"/><text x="67.0229%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="66.7729%" y="469" width="0.0797%" height="15" fill="rgb(218,150,34)" fg:x="838" fg:w="1"/><text x="67.0229%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.7729%" y="453" width="0.0797%" height="15" fill="rgb(235,194,28)" fg:x="838" fg:w="1"/><text x="67.0229%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.48%)</title><rect x="66.4542%" y="709" width="0.4781%" height="15" fill="rgb(245,92,18)" fg:x="834" fg:w="6"/><text x="66.7042%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="66.4542%" y="693" width="0.4781%" height="15" fill="rgb(253,203,53)" fg:x="834" fg:w="6"/><text x="66.7042%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="66.4542%" y="677" width="0.4781%" height="15" fill="rgb(249,185,47)" fg:x="834" fg:w="6"/><text x="66.7042%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="66.7729%" y="661" width="0.1594%" height="15" fill="rgb(252,194,52)" fg:x="838" fg:w="2"/><text x="67.0229%" y="671.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="66.8526%" y="645" width="0.0797%" height="15" fill="rgb(210,53,36)" fg:x="839" fg:w="1"/><text x="67.1026%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="66.8526%" y="629" width="0.0797%" height="15" fill="rgb(237,37,25)" fg:x="839" fg:w="1"/><text x="67.1026%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="66.8526%" y="613" width="0.0797%" height="15" fill="rgb(242,116,27)" fg:x="839" fg:w="1"/><text x="67.1026%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="66.8526%" y="597" width="0.0797%" height="15" fill="rgb(213,185,26)" fg:x="839" fg:w="1"/><text x="67.1026%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.8526%" y="581" width="0.0797%" height="15" fill="rgb(225,204,8)" fg:x="839" fg:w="1"/><text x="67.1026%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.8526%" y="565" width="0.0797%" height="15" fill="rgb(254,111,37)" fg:x="839" fg:w="1"/><text x="67.1026%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.8526%" y="549" width="0.0797%" height="15" fill="rgb(242,35,9)" fg:x="839" fg:w="1"/><text x="67.1026%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8526%" y="533" width="0.0797%" height="15" fill="rgb(232,138,49)" fg:x="839" fg:w="1"/><text x="67.1026%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.8526%" y="517" width="0.0797%" height="15" fill="rgb(247,56,4)" fg:x="839" fg:w="1"/><text x="67.1026%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.8526%" y="501" width="0.0797%" height="15" fill="rgb(226,179,17)" fg:x="839" fg:w="1"/><text x="67.1026%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.8526%" y="485" width="0.0797%" height="15" fill="rgb(216,163,45)" fg:x="839" fg:w="1"/><text x="67.1026%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.8526%" y="469" width="0.0797%" height="15" fill="rgb(211,157,3)" fg:x="839" fg:w="1"/><text x="67.1026%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.8526%" y="453" width="0.0797%" height="15" fill="rgb(234,44,20)" fg:x="839" fg:w="1"/><text x="67.1026%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.8526%" y="437" width="0.0797%" height="15" fill="rgb(254,138,23)" fg:x="839" fg:w="1"/><text x="67.1026%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.8526%" y="421" width="0.0797%" height="15" fill="rgb(206,119,39)" fg:x="839" fg:w="1"/><text x="67.1026%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.8526%" y="405" width="0.0797%" height="15" fill="rgb(231,105,52)" fg:x="839" fg:w="1"/><text x="67.1026%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.8526%" y="389" width="0.0797%" height="15" fill="rgb(250,20,5)" fg:x="839" fg:w="1"/><text x="67.1026%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.8526%" y="373" width="0.0797%" height="15" fill="rgb(215,198,30)" fg:x="839" fg:w="1"/><text x="67.1026%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="66.9323%" y="597" width="0.0797%" height="15" fill="rgb(246,142,8)" fg:x="840" fg:w="1"/><text x="67.1823%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.9323%" y="581" width="0.0797%" height="15" fill="rgb(243,26,38)" fg:x="840" fg:w="1"/><text x="67.1823%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.9323%" y="565" width="0.0797%" height="15" fill="rgb(205,133,28)" fg:x="840" fg:w="1"/><text x="67.1823%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.9323%" y="549" width="0.0797%" height="15" fill="rgb(212,34,0)" fg:x="840" fg:w="1"/><text x="67.1823%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="66.9323%" y="613" width="0.1594%" height="15" fill="rgb(251,226,22)" fg:x="840" fg:w="2"/><text x="67.1823%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0120%" y="597" width="0.0797%" height="15" fill="rgb(252,119,9)" fg:x="841" fg:w="1"/><text x="67.2620%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0120%" y="581" width="0.0797%" height="15" fill="rgb(213,150,50)" fg:x="841" fg:w="1"/><text x="67.2620%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0120%" y="565" width="0.0797%" height="15" fill="rgb(212,24,39)" fg:x="841" fg:w="1"/><text x="67.2620%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0120%" y="549" width="0.0797%" height="15" fill="rgb(213,46,39)" fg:x="841" fg:w="1"/><text x="67.2620%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.0120%" y="533" width="0.0797%" height="15" fill="rgb(239,106,12)" fg:x="841" fg:w="1"/><text x="67.2620%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.0120%" y="517" width="0.0797%" height="15" fill="rgb(249,229,21)" fg:x="841" fg:w="1"/><text x="67.2620%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.0120%" y="501" width="0.0797%" height="15" fill="rgb(212,158,3)" fg:x="841" fg:w="1"/><text x="67.2620%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.0120%" y="485" width="0.0797%" height="15" fill="rgb(253,26,48)" fg:x="841" fg:w="1"/><text x="67.2620%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.0120%" y="469" width="0.0797%" height="15" fill="rgb(238,178,20)" fg:x="841" fg:w="1"/><text x="67.2620%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0916%" y="581" width="0.0797%" height="15" fill="rgb(208,86,15)" fg:x="842" fg:w="1"/><text x="67.3416%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.1713%" y="565" width="0.0797%" height="15" fill="rgb(239,42,53)" fg:x="843" fg:w="1"/><text x="67.4213%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1713%" y="549" width="0.0797%" height="15" fill="rgb(245,226,8)" fg:x="843" fg:w="1"/><text x="67.4213%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="67.0916%" y="613" width="0.3984%" height="15" fill="rgb(216,176,32)" fg:x="842" fg:w="5"/><text x="67.3416%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="67.0916%" y="597" width="0.3984%" height="15" fill="rgb(231,186,21)" fg:x="842" fg:w="5"/><text x="67.3416%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="67.1713%" y="581" width="0.3187%" height="15" fill="rgb(205,95,49)" fg:x="843" fg:w="4"/><text x="67.4213%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.2510%" y="565" width="0.2390%" height="15" fill="rgb(217,145,8)" fg:x="844" fg:w="3"/><text x="67.5010%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.3307%" y="549" width="0.1594%" height="15" fill="rgb(239,144,48)" fg:x="845" fg:w="2"/><text x="67.5807%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4104%" y="533" width="0.0797%" height="15" fill="rgb(214,189,23)" fg:x="846" fg:w="1"/><text x="67.6604%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4104%" y="517" width="0.0797%" height="15" fill="rgb(229,157,17)" fg:x="846" fg:w="1"/><text x="67.6604%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4104%" y="501" width="0.0797%" height="15" fill="rgb(230,5,48)" fg:x="846" fg:w="1"/><text x="67.6604%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4900%" y="565" width="0.0797%" height="15" fill="rgb(224,156,48)" fg:x="847" fg:w="1"/><text x="67.7400%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5697%" y="565" width="0.0797%" height="15" fill="rgb(223,14,29)" fg:x="848" fg:w="1"/><text x="67.8197%" y="575.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.80%)</title><rect x="66.9323%" y="709" width="0.7968%" height="15" fill="rgb(229,96,36)" fg:x="840" fg:w="10"/><text x="67.1823%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (10 samples, 0.80%)</title><rect x="66.9323%" y="693" width="0.7968%" height="15" fill="rgb(231,102,53)" fg:x="840" fg:w="10"/><text x="67.1823%" y="703.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.80%)</title><rect x="66.9323%" y="677" width="0.7968%" height="15" fill="rgb(210,77,38)" fg:x="840" fg:w="10"/><text x="67.1823%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.80%)</title><rect x="66.9323%" y="661" width="0.7968%" height="15" fill="rgb(235,131,6)" fg:x="840" fg:w="10"/><text x="67.1823%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (10 samples, 0.80%)</title><rect x="66.9323%" y="645" width="0.7968%" height="15" fill="rgb(252,55,38)" fg:x="840" fg:w="10"/><text x="67.1823%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.80%)</title><rect x="66.9323%" y="629" width="0.7968%" height="15" fill="rgb(246,38,14)" fg:x="840" fg:w="10"/><text x="67.1823%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="67.4900%" y="613" width="0.2390%" height="15" fill="rgb(242,27,5)" fg:x="847" fg:w="3"/><text x="67.7400%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="67.4900%" y="597" width="0.2390%" height="15" fill="rgb(228,65,35)" fg:x="847" fg:w="3"/><text x="67.7400%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="67.4900%" y="581" width="0.2390%" height="15" fill="rgb(245,93,11)" fg:x="847" fg:w="3"/><text x="67.7400%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="67.6494%" y="565" width="0.0797%" height="15" fill="rgb(213,1,31)" fg:x="849" fg:w="1"/><text x="67.8994%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="67.7291%" y="677" width="0.0797%" height="15" fill="rgb(237,205,14)" fg:x="850" fg:w="1"/><text x="67.9791%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="67.7291%" y="661" width="0.0797%" height="15" fill="rgb(232,118,45)" fg:x="850" fg:w="1"/><text x="67.9791%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.7291%" y="645" width="0.0797%" height="15" fill="rgb(218,5,6)" fg:x="850" fg:w="1"/><text x="67.9791%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7291%" y="629" width="0.0797%" height="15" fill="rgb(251,87,51)" fg:x="850" fg:w="1"/><text x="67.9791%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7291%" y="613" width="0.0797%" height="15" fill="rgb(207,225,20)" fg:x="850" fg:w="1"/><text x="67.9791%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="67.7291%" y="693" width="0.1594%" height="15" fill="rgb(222,78,54)" fg:x="850" fg:w="2"/><text x="67.9791%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="67.8088%" y="677" width="0.0797%" height="15" fill="rgb(232,85,16)" fg:x="851" fg:w="1"/><text x="68.0588%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="67.8088%" y="661" width="0.0797%" height="15" fill="rgb(244,25,33)" fg:x="851" fg:w="1"/><text x="68.0588%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="67.8088%" y="645" width="0.0797%" height="15" fill="rgb(233,24,36)" fg:x="851" fg:w="1"/><text x="68.0588%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="67.8088%" y="629" width="0.0797%" height="15" fill="rgb(253,49,54)" fg:x="851" fg:w="1"/><text x="68.0588%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="67.8088%" y="613" width="0.0797%" height="15" fill="rgb(245,12,22)" fg:x="851" fg:w="1"/><text x="68.0588%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8088%" y="597" width="0.0797%" height="15" fill="rgb(253,141,28)" fg:x="851" fg:w="1"/><text x="68.0588%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.8088%" y="581" width="0.0797%" height="15" fill="rgb(225,207,27)" fg:x="851" fg:w="1"/><text x="68.0588%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8088%" y="565" width="0.0797%" height="15" fill="rgb(220,84,2)" fg:x="851" fg:w="1"/><text x="68.0588%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.8088%" y="549" width="0.0797%" height="15" fill="rgb(224,37,37)" fg:x="851" fg:w="1"/><text x="68.0588%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="67.8088%" y="533" width="0.0797%" height="15" fill="rgb(220,143,18)" fg:x="851" fg:w="1"/><text x="68.0588%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="67.8088%" y="517" width="0.0797%" height="15" fill="rgb(210,88,33)" fg:x="851" fg:w="1"/><text x="68.0588%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.8088%" y="501" width="0.0797%" height="15" fill="rgb(219,87,51)" fg:x="851" fg:w="1"/><text x="68.0588%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.8884%" y="645" width="0.0797%" height="15" fill="rgb(211,7,35)" fg:x="852" fg:w="1"/><text x="68.1384%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.8884%" y="629" width="0.0797%" height="15" fill="rgb(232,77,2)" fg:x="852" fg:w="1"/><text x="68.1384%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.8884%" y="613" width="0.0797%" height="15" fill="rgb(249,94,25)" fg:x="852" fg:w="1"/><text x="68.1384%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8884%" y="597" width="0.0797%" height="15" fill="rgb(215,112,2)" fg:x="852" fg:w="1"/><text x="68.1384%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8884%" y="581" width="0.0797%" height="15" fill="rgb(226,115,48)" fg:x="852" fg:w="1"/><text x="68.1384%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8884%" y="565" width="0.0797%" height="15" fill="rgb(249,196,10)" fg:x="852" fg:w="1"/><text x="68.1384%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.8884%" y="549" width="0.0797%" height="15" fill="rgb(237,109,14)" fg:x="852" fg:w="1"/><text x="68.1384%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.8884%" y="533" width="0.0797%" height="15" fill="rgb(217,103,53)" fg:x="852" fg:w="1"/><text x="68.1384%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.8884%" y="517" width="0.0797%" height="15" fill="rgb(244,137,9)" fg:x="852" fg:w="1"/><text x="68.1384%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.8884%" y="501" width="0.0797%" height="15" fill="rgb(227,201,3)" fg:x="852" fg:w="1"/><text x="68.1384%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.8884%" y="485" width="0.0797%" height="15" fill="rgb(243,94,6)" fg:x="852" fg:w="1"/><text x="68.1384%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.8884%" y="469" width="0.0797%" height="15" fill="rgb(235,118,5)" fg:x="852" fg:w="1"/><text x="68.1384%" y="479.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="67.8884%" y="677" width="0.1594%" height="15" fill="rgb(247,10,30)" fg:x="852" fg:w="2"/><text x="68.1384%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="67.8884%" y="661" width="0.1594%" height="15" fill="rgb(205,26,28)" fg:x="852" fg:w="2"/><text x="68.1384%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.9681%" y="645" width="0.0797%" height="15" fill="rgb(206,99,35)" fg:x="853" fg:w="1"/><text x="68.2181%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.9681%" y="629" width="0.0797%" height="15" fill="rgb(238,130,40)" fg:x="853" fg:w="1"/><text x="68.2181%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.9681%" y="613" width="0.0797%" height="15" fill="rgb(224,126,31)" fg:x="853" fg:w="1"/><text x="68.2181%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.9681%" y="597" width="0.0797%" height="15" fill="rgb(254,105,17)" fg:x="853" fg:w="1"/><text x="68.2181%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9681%" y="581" width="0.0797%" height="15" fill="rgb(216,87,36)" fg:x="853" fg:w="1"/><text x="68.2181%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.9681%" y="565" width="0.0797%" height="15" fill="rgb(240,21,12)" fg:x="853" fg:w="1"/><text x="68.2181%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9681%" y="549" width="0.0797%" height="15" fill="rgb(245,192,34)" fg:x="853" fg:w="1"/><text x="68.2181%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.9681%" y="533" width="0.0797%" height="15" fill="rgb(226,100,49)" fg:x="853" fg:w="1"/><text x="68.2181%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9681%" y="517" width="0.0797%" height="15" fill="rgb(245,188,27)" fg:x="853" fg:w="1"/><text x="68.2181%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.9681%" y="501" width="0.0797%" height="15" fill="rgb(212,170,8)" fg:x="853" fg:w="1"/><text x="68.2181%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9681%" y="485" width="0.0797%" height="15" fill="rgb(217,113,29)" fg:x="853" fg:w="1"/><text x="68.2181%" y="495.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="68.0478%" y="677" width="0.0797%" height="15" fill="rgb(237,30,3)" fg:x="854" fg:w="1"/><text x="68.2978%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0478%" y="661" width="0.0797%" height="15" fill="rgb(227,19,28)" fg:x="854" fg:w="1"/><text x="68.2978%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.0478%" y="645" width="0.0797%" height="15" fill="rgb(239,172,45)" fg:x="854" fg:w="1"/><text x="68.2978%" y="655.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="67.7291%" y="709" width="0.4781%" height="15" fill="rgb(254,55,39)" fg:x="850" fg:w="6"/><text x="67.9791%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="67.8884%" y="693" width="0.3187%" height="15" fill="rgb(249,208,12)" fg:x="852" fg:w="4"/><text x="68.1384%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="68.1275%" y="677" width="0.0797%" height="15" fill="rgb(240,52,13)" fg:x="855" fg:w="1"/><text x="68.3775%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="68.1275%" y="661" width="0.0797%" height="15" fill="rgb(252,149,13)" fg:x="855" fg:w="1"/><text x="68.3775%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.1275%" y="645" width="0.0797%" height="15" fill="rgb(232,81,48)" fg:x="855" fg:w="1"/><text x="68.3775%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.1275%" y="629" width="0.0797%" height="15" fill="rgb(222,144,2)" fg:x="855" fg:w="1"/><text x="68.3775%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.1275%" y="613" width="0.0797%" height="15" fill="rgb(216,81,32)" fg:x="855" fg:w="1"/><text x="68.3775%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.1275%" y="597" width="0.0797%" height="15" fill="rgb(244,78,51)" fg:x="855" fg:w="1"/><text x="68.3775%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1275%" y="581" width="0.0797%" height="15" fill="rgb(217,66,21)" fg:x="855" fg:w="1"/><text x="68.3775%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1275%" y="565" width="0.0797%" height="15" fill="rgb(247,101,42)" fg:x="855" fg:w="1"/><text x="68.3775%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="68.2072%" y="677" width="0.0797%" height="15" fill="rgb(227,81,39)" fg:x="856" fg:w="1"/><text x="68.4572%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.2072%" y="661" width="0.0797%" height="15" fill="rgb(220,223,44)" fg:x="856" fg:w="1"/><text x="68.4572%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.2072%" y="645" width="0.0797%" height="15" fill="rgb(205,218,2)" fg:x="856" fg:w="1"/><text x="68.4572%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.2072%" y="629" width="0.0797%" height="15" fill="rgb(212,207,28)" fg:x="856" fg:w="1"/><text x="68.4572%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.2072%" y="613" width="0.0797%" height="15" fill="rgb(224,12,41)" fg:x="856" fg:w="1"/><text x="68.4572%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2072%" y="597" width="0.0797%" height="15" fill="rgb(216,118,12)" fg:x="856" fg:w="1"/><text x="68.4572%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2072%" y="581" width="0.0797%" height="15" fill="rgb(252,97,46)" fg:x="856" fg:w="1"/><text x="68.4572%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2072%" y="565" width="0.0797%" height="15" fill="rgb(244,206,19)" fg:x="856" fg:w="1"/><text x="68.4572%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2072%" y="549" width="0.0797%" height="15" fill="rgb(231,84,31)" fg:x="856" fg:w="1"/><text x="68.4572%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2072%" y="533" width="0.0797%" height="15" fill="rgb(244,133,0)" fg:x="856" fg:w="1"/><text x="68.4572%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (24 samples, 1.91%)</title><rect x="66.4542%" y="725" width="1.9124%" height="15" fill="rgb(223,15,50)" fg:x="834" fg:w="24"/><text x="66.7042%" y="735.50">p..</text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="68.2072%" y="709" width="0.1594%" height="15" fill="rgb(250,118,49)" fg:x="856" fg:w="2"/><text x="68.4572%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="68.2072%" y="693" width="0.1594%" height="15" fill="rgb(248,25,38)" fg:x="856" fg:w="2"/><text x="68.4572%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="68.2869%" y="677" width="0.0797%" height="15" fill="rgb(215,70,14)" fg:x="857" fg:w="1"/><text x="68.5369%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="68.2869%" y="661" width="0.0797%" height="15" fill="rgb(215,28,15)" fg:x="857" fg:w="1"/><text x="68.5369%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.2869%" y="645" width="0.0797%" height="15" fill="rgb(243,6,28)" fg:x="857" fg:w="1"/><text x="68.5369%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.2869%" y="629" width="0.0797%" height="15" fill="rgb(222,130,1)" fg:x="857" fg:w="1"/><text x="68.5369%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.2869%" y="613" width="0.0797%" height="15" fill="rgb(236,166,44)" fg:x="857" fg:w="1"/><text x="68.5369%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.2869%" y="597" width="0.0797%" height="15" fill="rgb(221,108,14)" fg:x="857" fg:w="1"/><text x="68.5369%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="68.3665%" y="725" width="0.0797%" height="15" fill="rgb(252,3,45)" fg:x="858" fg:w="1"/><text x="68.6165%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="68.3665%" y="709" width="0.0797%" height="15" fill="rgb(237,68,30)" fg:x="858" fg:w="1"/><text x="68.6165%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="68.3665%" y="693" width="0.0797%" height="15" fill="rgb(211,79,22)" fg:x="858" fg:w="1"/><text x="68.6165%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.3665%" y="677" width="0.0797%" height="15" fill="rgb(252,185,21)" fg:x="858" fg:w="1"/><text x="68.6165%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.3665%" y="661" width="0.0797%" height="15" fill="rgb(225,189,26)" fg:x="858" fg:w="1"/><text x="68.6165%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.3665%" y="645" width="0.0797%" height="15" fill="rgb(241,30,40)" fg:x="858" fg:w="1"/><text x="68.6165%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.3665%" y="629" width="0.0797%" height="15" fill="rgb(235,215,44)" fg:x="858" fg:w="1"/><text x="68.6165%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3665%" y="613" width="0.0797%" height="15" fill="rgb(205,8,29)" fg:x="858" fg:w="1"/><text x="68.6165%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="68.4462%" y="709" width="0.0797%" height="15" fill="rgb(241,137,42)" fg:x="859" fg:w="1"/><text x="68.6962%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.4462%" y="693" width="0.0797%" height="15" fill="rgb(237,155,2)" fg:x="859" fg:w="1"/><text x="68.6962%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.4462%" y="677" width="0.0797%" height="15" fill="rgb(245,29,42)" fg:x="859" fg:w="1"/><text x="68.6962%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.4462%" y="661" width="0.0797%" height="15" fill="rgb(234,101,35)" fg:x="859" fg:w="1"/><text x="68.6962%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4462%" y="645" width="0.0797%" height="15" fill="rgb(228,64,37)" fg:x="859" fg:w="1"/><text x="68.6962%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4462%" y="629" width="0.0797%" height="15" fill="rgb(217,214,36)" fg:x="859" fg:w="1"/><text x="68.6962%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4462%" y="613" width="0.0797%" height="15" fill="rgb(243,70,3)" fg:x="859" fg:w="1"/><text x="68.6962%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4462%" y="597" width="0.0797%" height="15" fill="rgb(253,158,52)" fg:x="859" fg:w="1"/><text x="68.6962%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (45 samples, 3.59%)</title><rect x="65.0199%" y="741" width="3.5857%" height="15" fill="rgb(234,111,54)" fg:x="816" fg:w="45"/><text x="65.2699%" y="751.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="68.4462%" y="725" width="0.1594%" height="15" fill="rgb(217,70,32)" fg:x="859" fg:w="2"/><text x="68.6962%" y="735.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="68.5259%" y="709" width="0.0797%" height="15" fill="rgb(234,18,33)" fg:x="860" fg:w="1"/><text x="68.7759%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="68.5259%" y="693" width="0.0797%" height="15" fill="rgb(234,12,49)" fg:x="860" fg:w="1"/><text x="68.7759%" y="703.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="68.5259%" y="677" width="0.0797%" height="15" fill="rgb(236,10,21)" fg:x="860" fg:w="1"/><text x="68.7759%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="68.6056%" y="741" width="0.0797%" height="15" fill="rgb(248,182,45)" fg:x="861" fg:w="1"/><text x="68.8556%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="68.6056%" y="725" width="0.0797%" height="15" fill="rgb(217,95,36)" fg:x="861" fg:w="1"/><text x="68.8556%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6056%" y="709" width="0.0797%" height="15" fill="rgb(212,110,31)" fg:x="861" fg:w="1"/><text x="68.8556%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.6853%" y="693" width="0.0797%" height="15" fill="rgb(206,32,53)" fg:x="862" fg:w="1"/><text x="68.9353%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.6853%" y="677" width="0.0797%" height="15" fill="rgb(246,141,37)" fg:x="862" fg:w="1"/><text x="68.9353%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.6853%" y="661" width="0.0797%" height="15" fill="rgb(219,16,7)" fg:x="862" fg:w="1"/><text x="68.9353%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.6853%" y="645" width="0.0797%" height="15" fill="rgb(230,205,45)" fg:x="862" fg:w="1"/><text x="68.9353%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7649%" y="661" width="0.0797%" height="15" fill="rgb(231,43,49)" fg:x="863" fg:w="1"/><text x="69.0149%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7649%" y="645" width="0.0797%" height="15" fill="rgb(212,106,34)" fg:x="863" fg:w="1"/><text x="69.0149%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.7649%" y="629" width="0.0797%" height="15" fill="rgb(206,83,17)" fg:x="863" fg:w="1"/><text x="69.0149%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.7649%" y="613" width="0.0797%" height="15" fill="rgb(244,154,49)" fg:x="863" fg:w="1"/><text x="69.0149%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.7649%" y="597" width="0.0797%" height="15" fill="rgb(244,149,49)" fg:x="863" fg:w="1"/><text x="69.0149%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.7649%" y="581" width="0.0797%" height="15" fill="rgb(227,134,18)" fg:x="863" fg:w="1"/><text x="69.0149%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.7649%" y="565" width="0.0797%" height="15" fill="rgb(237,116,36)" fg:x="863" fg:w="1"/><text x="69.0149%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.7649%" y="549" width="0.0797%" height="15" fill="rgb(205,129,40)" fg:x="863" fg:w="1"/><text x="69.0149%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.7649%" y="533" width="0.0797%" height="15" fill="rgb(236,178,4)" fg:x="863" fg:w="1"/><text x="69.0149%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.7649%" y="517" width="0.0797%" height="15" fill="rgb(251,76,53)" fg:x="863" fg:w="1"/><text x="69.0149%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.7649%" y="501" width="0.0797%" height="15" fill="rgb(242,92,40)" fg:x="863" fg:w="1"/><text x="69.0149%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7649%" y="485" width="0.0797%" height="15" fill="rgb(209,45,30)" fg:x="863" fg:w="1"/><text x="69.0149%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="68.8446%" y="629" width="0.1594%" height="15" fill="rgb(218,157,36)" fg:x="864" fg:w="2"/><text x="69.0946%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="68.8446%" y="613" width="0.1594%" height="15" fill="rgb(222,186,16)" fg:x="864" fg:w="2"/><text x="69.0946%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="68.8446%" y="597" width="0.1594%" height="15" fill="rgb(254,72,35)" fg:x="864" fg:w="2"/><text x="69.0946%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="68.8446%" y="581" width="0.1594%" height="15" fill="rgb(224,25,35)" fg:x="864" fg:w="2"/><text x="69.0946%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.8446%" y="565" width="0.1594%" height="15" fill="rgb(206,135,52)" fg:x="864" fg:w="2"/><text x="69.0946%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.8446%" y="549" width="0.1594%" height="15" fill="rgb(229,174,47)" fg:x="864" fg:w="2"/><text x="69.0946%" y="559.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="68.8446%" y="533" width="0.1594%" height="15" fill="rgb(242,184,21)" fg:x="864" fg:w="2"/><text x="69.0946%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="68.8446%" y="661" width="0.3984%" height="15" fill="rgb(213,22,45)" fg:x="864" fg:w="5"/><text x="69.0946%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="68.8446%" y="645" width="0.3984%" height="15" fill="rgb(237,81,54)" fg:x="864" fg:w="5"/><text x="69.0946%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="69.0040%" y="629" width="0.2390%" height="15" fill="rgb(248,177,18)" fg:x="866" fg:w="3"/><text x="69.2540%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.0837%" y="613" width="0.1594%" height="15" fill="rgb(254,31,16)" fg:x="867" fg:w="2"/><text x="69.3337%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.1633%" y="597" width="0.0797%" height="15" fill="rgb(235,20,31)" fg:x="868" fg:w="1"/><text x="69.4133%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.1633%" y="581" width="0.0797%" height="15" fill="rgb(240,56,43)" fg:x="868" fg:w="1"/><text x="69.4133%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3227%" y="581" width="0.0797%" height="15" fill="rgb(237,197,51)" fg:x="870" fg:w="1"/><text x="69.5727%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="69.4024%" y="565" width="0.1594%" height="15" fill="rgb(241,162,44)" fg:x="871" fg:w="2"/><text x="69.6524%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4821%" y="549" width="0.0797%" height="15" fill="rgb(224,23,20)" fg:x="872" fg:w="1"/><text x="69.7321%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="69.3227%" y="629" width="0.3187%" height="15" fill="rgb(250,109,34)" fg:x="870" fg:w="4"/><text x="69.5727%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="69.3227%" y="613" width="0.3187%" height="15" fill="rgb(214,175,50)" fg:x="870" fg:w="4"/><text x="69.5727%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="69.3227%" y="597" width="0.3187%" height="15" fill="rgb(213,182,5)" fg:x="870" fg:w="4"/><text x="69.5727%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.4024%" y="581" width="0.2390%" height="15" fill="rgb(209,199,19)" fg:x="871" fg:w="3"/><text x="69.6524%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5618%" y="565" width="0.0797%" height="15" fill="rgb(236,224,42)" fg:x="873" fg:w="1"/><text x="69.8118%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5618%" y="549" width="0.0797%" height="15" fill="rgb(246,226,29)" fg:x="873" fg:w="1"/><text x="69.8118%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5618%" y="533" width="0.0797%" height="15" fill="rgb(227,223,11)" fg:x="873" fg:w="1"/><text x="69.8118%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5618%" y="517" width="0.0797%" height="15" fill="rgb(219,7,51)" fg:x="873" fg:w="1"/><text x="69.8118%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5618%" y="501" width="0.0797%" height="15" fill="rgb(245,167,10)" fg:x="873" fg:w="1"/><text x="69.8118%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="69.6414%" y="613" width="0.2390%" height="15" fill="rgb(237,224,16)" fg:x="874" fg:w="3"/><text x="69.8914%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="69.6414%" y="597" width="0.2390%" height="15" fill="rgb(226,132,13)" fg:x="874" fg:w="3"/><text x="69.8914%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="69.8008%" y="581" width="0.0797%" height="15" fill="rgb(214,140,3)" fg:x="876" fg:w="1"/><text x="70.0508%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="69.8008%" y="565" width="0.0797%" height="15" fill="rgb(221,177,4)" fg:x="876" fg:w="1"/><text x="70.0508%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="69.8008%" y="549" width="0.0797%" height="15" fill="rgb(238,139,3)" fg:x="876" fg:w="1"/><text x="70.0508%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.72%)</title><rect x="69.2430%" y="645" width="0.7171%" height="15" fill="rgb(216,17,39)" fg:x="869" fg:w="9"/><text x="69.4930%" y="655.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="69.6414%" y="629" width="0.3187%" height="15" fill="rgb(238,120,9)" fg:x="874" fg:w="4"/><text x="69.8914%" y="639.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="69.8805%" y="613" width="0.0797%" height="15" fill="rgb(244,92,53)" fg:x="877" fg:w="1"/><text x="70.1305%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="69.8805%" y="597" width="0.0797%" height="15" fill="rgb(224,148,33)" fg:x="877" fg:w="1"/><text x="70.1305%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="69.8805%" y="581" width="0.0797%" height="15" fill="rgb(243,6,36)" fg:x="877" fg:w="1"/><text x="70.1305%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9602%" y="613" width="0.0797%" height="15" fill="rgb(230,102,11)" fg:x="878" fg:w="1"/><text x="70.2102%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9602%" y="597" width="0.0797%" height="15" fill="rgb(234,148,36)" fg:x="878" fg:w="1"/><text x="70.2102%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9602%" y="581" width="0.0797%" height="15" fill="rgb(251,153,25)" fg:x="878" fg:w="1"/><text x="70.2102%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9602%" y="565" width="0.0797%" height="15" fill="rgb(215,129,8)" fg:x="878" fg:w="1"/><text x="70.2102%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9602%" y="549" width="0.0797%" height="15" fill="rgb(224,128,35)" fg:x="878" fg:w="1"/><text x="70.2102%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.1992%" y="565" width="0.0797%" height="15" fill="rgb(237,56,52)" fg:x="881" fg:w="1"/><text x="70.4492%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.1992%" y="549" width="0.0797%" height="15" fill="rgb(234,213,19)" fg:x="881" fg:w="1"/><text x="70.4492%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="70.2789%" y="453" width="0.0797%" height="15" fill="rgb(252,82,23)" fg:x="882" fg:w="1"/><text x="70.5289%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="70.0398%" y="597" width="0.4781%" height="15" fill="rgb(254,201,21)" fg:x="879" fg:w="6"/><text x="70.2898%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="70.1992%" y="581" width="0.3187%" height="15" fill="rgb(250,186,11)" fg:x="881" fg:w="4"/><text x="70.4492%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="70.2789%" y="565" width="0.2390%" height="15" fill="rgb(211,174,5)" fg:x="882" fg:w="3"/><text x="70.5289%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="70.2789%" y="549" width="0.2390%" height="15" fill="rgb(214,121,10)" fg:x="882" fg:w="3"/><text x="70.5289%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="70.2789%" y="533" width="0.2390%" height="15" fill="rgb(241,66,2)" fg:x="882" fg:w="3"/><text x="70.5289%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="70.2789%" y="517" width="0.2390%" height="15" fill="rgb(220,167,19)" fg:x="882" fg:w="3"/><text x="70.5289%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="70.2789%" y="501" width="0.2390%" height="15" fill="rgb(231,54,50)" fg:x="882" fg:w="3"/><text x="70.5289%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="70.2789%" y="485" width="0.2390%" height="15" fill="rgb(239,217,53)" fg:x="882" fg:w="3"/><text x="70.5289%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="70.2789%" y="469" width="0.2390%" height="15" fill="rgb(248,8,0)" fg:x="882" fg:w="3"/><text x="70.5289%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.3586%" y="453" width="0.1594%" height="15" fill="rgb(229,118,37)" fg:x="883" fg:w="2"/><text x="70.6086%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.3586%" y="437" width="0.1594%" height="15" fill="rgb(253,223,43)" fg:x="883" fg:w="2"/><text x="70.6086%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.3586%" y="421" width="0.1594%" height="15" fill="rgb(211,77,36)" fg:x="883" fg:w="2"/><text x="70.6086%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="70.3586%" y="405" width="0.1594%" height="15" fill="rgb(219,3,53)" fg:x="883" fg:w="2"/><text x="70.6086%" y="415.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="69.9602%" y="645" width="0.6375%" height="15" fill="rgb(244,45,42)" fg:x="878" fg:w="8"/><text x="70.2102%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="69.9602%" y="629" width="0.6375%" height="15" fill="rgb(225,95,27)" fg:x="878" fg:w="8"/><text x="70.2102%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="70.0398%" y="613" width="0.5578%" height="15" fill="rgb(207,74,8)" fg:x="879" fg:w="7"/><text x="70.2898%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5179%" y="597" width="0.0797%" height="15" fill="rgb(243,63,36)" fg:x="885" fg:w="1"/><text x="70.7679%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5179%" y="581" width="0.0797%" height="15" fill="rgb(211,180,12)" fg:x="885" fg:w="1"/><text x="70.7679%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.5179%" y="565" width="0.0797%" height="15" fill="rgb(254,166,49)" fg:x="885" fg:w="1"/><text x="70.7679%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.5976%" y="565" width="0.0797%" height="15" fill="rgb(205,19,0)" fg:x="886" fg:w="1"/><text x="70.8476%" y="575.50"></text></g><g><title>engine::session::Session::close (27 samples, 2.15%)</title><rect x="68.6853%" y="741" width="2.1514%" height="15" fill="rgb(224,172,32)" fg:x="862" fg:w="27"/><text x="68.9353%" y="751.50">e..</text></g><g><title>engine::session::state::State::close (27 samples, 2.15%)</title><rect x="68.6853%" y="725" width="2.1514%" height="15" fill="rgb(254,136,30)" fg:x="862" fg:w="27"/><text x="68.9353%" y="735.50">e..</text></g><g><title>engine::session::state::State::flush_entities (27 samples, 2.15%)</title><rect x="68.6853%" y="709" width="2.1514%" height="15" fill="rgb(246,19,35)" fg:x="862" fg:w="27"/><text x="68.9353%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (26 samples, 2.07%)</title><rect x="68.7649%" y="693" width="2.0717%" height="15" fill="rgb(219,24,36)" fg:x="863" fg:w="26"/><text x="69.0149%" y="703.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (26 samples, 2.07%)</title><rect x="68.7649%" y="677" width="2.0717%" height="15" fill="rgb(251,55,1)" fg:x="863" fg:w="26"/><text x="69.0149%" y="687.50">e..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.59%)</title><rect x="69.2430%" y="661" width="1.5936%" height="15" fill="rgb(218,117,39)" fg:x="869" fg:w="20"/><text x="69.4930%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="70.5976%" y="645" width="0.2390%" height="15" fill="rgb(248,169,11)" fg:x="886" fg:w="3"/><text x="70.8476%" y="655.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.5976%" y="629" width="0.2390%" height="15" fill="rgb(244,40,44)" fg:x="886" fg:w="3"/><text x="70.8476%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.5976%" y="613" width="0.2390%" height="15" fill="rgb(234,62,37)" fg:x="886" fg:w="3"/><text x="70.8476%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.5976%" y="597" width="0.2390%" height="15" fill="rgb(207,117,42)" fg:x="886" fg:w="3"/><text x="70.8476%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.5976%" y="581" width="0.2390%" height="15" fill="rgb(213,43,2)" fg:x="886" fg:w="3"/><text x="70.8476%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.6773%" y="565" width="0.1594%" height="15" fill="rgb(244,202,51)" fg:x="887" fg:w="2"/><text x="70.9273%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.6773%" y="549" width="0.1594%" height="15" fill="rgb(253,174,46)" fg:x="887" fg:w="2"/><text x="70.9273%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.6773%" y="533" width="0.1594%" height="15" fill="rgb(251,23,1)" fg:x="887" fg:w="2"/><text x="70.9273%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.6773%" y="517" width="0.1594%" height="15" fill="rgb(253,26,1)" fg:x="887" fg:w="2"/><text x="70.9273%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.6773%" y="501" width="0.1594%" height="15" fill="rgb(216,89,31)" fg:x="887" fg:w="2"/><text x="70.9273%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.6773%" y="485" width="0.1594%" height="15" fill="rgb(209,109,5)" fg:x="887" fg:w="2"/><text x="70.9273%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="70.6773%" y="469" width="0.1594%" height="15" fill="rgb(229,63,13)" fg:x="887" fg:w="2"/><text x="70.9273%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="70.6773%" y="453" width="0.1594%" height="15" fill="rgb(238,137,54)" fg:x="887" fg:w="2"/><text x="70.9273%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.9960%" y="533" width="0.0797%" height="15" fill="rgb(228,1,9)" fg:x="891" fg:w="1"/><text x="71.2460%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.9960%" y="517" width="0.0797%" height="15" fill="rgb(249,120,48)" fg:x="891" fg:w="1"/><text x="71.2460%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.9960%" y="501" width="0.0797%" height="15" fill="rgb(209,72,36)" fg:x="891" fg:w="1"/><text x="71.2460%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.9960%" y="485" width="0.0797%" height="15" fill="rgb(247,98,49)" fg:x="891" fg:w="1"/><text x="71.2460%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.0757%" y="501" width="0.0797%" height="15" fill="rgb(233,75,36)" fg:x="892" fg:w="1"/><text x="71.3257%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0757%" y="485" width="0.0797%" height="15" fill="rgb(225,14,24)" fg:x="892" fg:w="1"/><text x="71.3257%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0757%" y="469" width="0.0797%" height="15" fill="rgb(237,193,20)" fg:x="892" fg:w="1"/><text x="71.3257%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0757%" y="453" width="0.0797%" height="15" fill="rgb(239,122,19)" fg:x="892" fg:w="1"/><text x="71.3257%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0757%" y="437" width="0.0797%" height="15" fill="rgb(231,220,10)" fg:x="892" fg:w="1"/><text x="71.3257%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.0757%" y="421" width="0.0797%" height="15" fill="rgb(220,66,15)" fg:x="892" fg:w="1"/><text x="71.3257%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0757%" y="405" width="0.0797%" height="15" fill="rgb(215,171,52)" fg:x="892" fg:w="1"/><text x="71.3257%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0757%" y="389" width="0.0797%" height="15" fill="rgb(241,169,50)" fg:x="892" fg:w="1"/><text x="71.3257%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.0757%" y="373" width="0.0797%" height="15" fill="rgb(236,189,0)" fg:x="892" fg:w="1"/><text x="71.3257%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0757%" y="357" width="0.0797%" height="15" fill="rgb(217,147,20)" fg:x="892" fg:w="1"/><text x="71.3257%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0757%" y="341" width="0.0797%" height="15" fill="rgb(206,188,39)" fg:x="892" fg:w="1"/><text x="71.3257%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.0757%" y="325" width="0.0797%" height="15" fill="rgb(227,118,25)" fg:x="892" fg:w="1"/><text x="71.3257%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0757%" y="309" width="0.0797%" height="15" fill="rgb(248,171,40)" fg:x="892" fg:w="1"/><text x="71.3257%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0757%" y="293" width="0.0797%" height="15" fill="rgb(251,90,54)" fg:x="892" fg:w="1"/><text x="71.3257%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.0757%" y="277" width="0.0797%" height="15" fill="rgb(234,11,46)" fg:x="892" fg:w="1"/><text x="71.3257%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.0757%" y="261" width="0.0797%" height="15" fill="rgb(229,134,13)" fg:x="892" fg:w="1"/><text x="71.3257%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0757%" y="245" width="0.0797%" height="15" fill="rgb(223,129,3)" fg:x="892" fg:w="1"/><text x="71.3257%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.0757%" y="229" width="0.0797%" height="15" fill="rgb(221,124,13)" fg:x="892" fg:w="1"/><text x="71.3257%" y="239.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="70.9960%" y="661" width="0.2390%" height="15" fill="rgb(234,3,18)" fg:x="891" fg:w="3"/><text x="71.2460%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="70.9960%" y="645" width="0.2390%" height="15" fill="rgb(249,199,20)" fg:x="891" fg:w="3"/><text x="71.2460%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="70.9960%" y="629" width="0.2390%" height="15" fill="rgb(224,134,6)" fg:x="891" fg:w="3"/><text x="71.2460%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="70.9960%" y="613" width="0.2390%" height="15" fill="rgb(254,83,26)" fg:x="891" fg:w="3"/><text x="71.2460%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="70.9960%" y="597" width="0.2390%" height="15" fill="rgb(217,88,9)" fg:x="891" fg:w="3"/><text x="71.2460%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="70.9960%" y="581" width="0.2390%" height="15" fill="rgb(225,73,2)" fg:x="891" fg:w="3"/><text x="71.2460%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="70.9960%" y="565" width="0.2390%" height="15" fill="rgb(226,44,39)" fg:x="891" fg:w="3"/><text x="71.2460%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="70.9960%" y="549" width="0.2390%" height="15" fill="rgb(228,53,17)" fg:x="891" fg:w="3"/><text x="71.2460%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.0757%" y="533" width="0.1594%" height="15" fill="rgb(212,27,27)" fg:x="892" fg:w="2"/><text x="71.3257%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0757%" y="517" width="0.1594%" height="15" fill="rgb(241,50,6)" fg:x="892" fg:w="2"/><text x="71.3257%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1554%" y="501" width="0.0797%" height="15" fill="rgb(225,28,51)" fg:x="893" fg:w="1"/><text x="71.4054%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1554%" y="485" width="0.0797%" height="15" fill="rgb(215,33,16)" fg:x="893" fg:w="1"/><text x="71.4054%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3944%" y="437" width="0.0797%" height="15" fill="rgb(243,40,39)" fg:x="896" fg:w="1"/><text x="71.6444%" y="447.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="71.3944%" y="421" width="0.0797%" height="15" fill="rgb(225,11,42)" fg:x="896" fg:w="1"/><text x="71.6444%" y="431.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.3944%" y="405" width="0.0797%" height="15" fill="rgb(241,220,38)" fg:x="896" fg:w="1"/><text x="71.6444%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (6 samples, 0.48%)</title><rect x="71.3944%" y="485" width="0.4781%" height="15" fill="rgb(244,52,35)" fg:x="896" fg:w="6"/><text x="71.6444%" y="495.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="71.3944%" y="469" width="0.4781%" height="15" fill="rgb(246,42,46)" fg:x="896" fg:w="6"/><text x="71.6444%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="71.3944%" y="453" width="0.4781%" height="15" fill="rgb(205,184,13)" fg:x="896" fg:w="6"/><text x="71.6444%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="71.4741%" y="437" width="0.3984%" height="15" fill="rgb(209,48,36)" fg:x="897" fg:w="5"/><text x="71.7241%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="71.4741%" y="421" width="0.3984%" height="15" fill="rgb(244,34,51)" fg:x="897" fg:w="5"/><text x="71.7241%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="71.5538%" y="405" width="0.3187%" height="15" fill="rgb(221,107,33)" fg:x="898" fg:w="4"/><text x="71.8038%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.5538%" y="389" width="0.3187%" height="15" fill="rgb(224,203,12)" fg:x="898" fg:w="4"/><text x="71.8038%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="71.5538%" y="373" width="0.3187%" height="15" fill="rgb(230,215,18)" fg:x="898" fg:w="4"/><text x="71.8038%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.5538%" y="357" width="0.3187%" height="15" fill="rgb(206,185,35)" fg:x="898" fg:w="4"/><text x="71.8038%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="71.5538%" y="341" width="0.3187%" height="15" fill="rgb(228,140,34)" fg:x="898" fg:w="4"/><text x="71.8038%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.5538%" y="325" width="0.3187%" height="15" fill="rgb(208,93,13)" fg:x="898" fg:w="4"/><text x="71.8038%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7928%" y="309" width="0.0797%" height="15" fill="rgb(221,193,39)" fg:x="901" fg:w="1"/><text x="72.0428%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.7928%" y="293" width="0.0797%" height="15" fill="rgb(241,132,34)" fg:x="901" fg:w="1"/><text x="72.0428%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9522%" y="437" width="0.0797%" height="15" fill="rgb(221,141,10)" fg:x="903" fg:w="1"/><text x="72.2022%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9522%" y="421" width="0.0797%" height="15" fill="rgb(226,90,31)" fg:x="903" fg:w="1"/><text x="72.2022%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="71.8725%" y="485" width="0.3187%" height="15" fill="rgb(243,75,5)" fg:x="902" fg:w="4"/><text x="72.1225%" y="495.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="71.8725%" y="469" width="0.3187%" height="15" fill="rgb(227,156,21)" fg:x="902" fg:w="4"/><text x="72.1225%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="71.8725%" y="453" width="0.3187%" height="15" fill="rgb(250,195,8)" fg:x="902" fg:w="4"/><text x="72.1225%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.0319%" y="437" width="0.1594%" height="15" fill="rgb(220,134,5)" fg:x="904" fg:w="2"/><text x="72.2819%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0319%" y="421" width="0.1594%" height="15" fill="rgb(246,106,34)" fg:x="904" fg:w="2"/><text x="72.2819%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.0319%" y="405" width="0.1594%" height="15" fill="rgb(205,1,4)" fg:x="904" fg:w="2"/><text x="72.2819%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0319%" y="389" width="0.1594%" height="15" fill="rgb(224,151,29)" fg:x="904" fg:w="2"/><text x="72.2819%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="72.0319%" y="373" width="0.1594%" height="15" fill="rgb(251,196,0)" fg:x="904" fg:w="2"/><text x="72.2819%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0319%" y="357" width="0.1594%" height="15" fill="rgb(212,127,0)" fg:x="904" fg:w="2"/><text x="72.2819%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.0319%" y="341" width="0.1594%" height="15" fill="rgb(236,71,53)" fg:x="904" fg:w="2"/><text x="72.2819%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0319%" y="325" width="0.1594%" height="15" fill="rgb(227,99,0)" fg:x="904" fg:w="2"/><text x="72.2819%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1116%" y="309" width="0.0797%" height="15" fill="rgb(239,89,21)" fg:x="905" fg:w="1"/><text x="72.3616%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1116%" y="293" width="0.0797%" height="15" fill="rgb(243,122,19)" fg:x="905" fg:w="1"/><text x="72.3616%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1116%" y="277" width="0.0797%" height="15" fill="rgb(229,192,45)" fg:x="905" fg:w="1"/><text x="72.3616%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1116%" y="261" width="0.0797%" height="15" fill="rgb(235,165,35)" fg:x="905" fg:w="1"/><text x="72.3616%" y="271.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="72.1912%" y="485" width="0.0797%" height="15" fill="rgb(253,202,0)" fg:x="906" fg:w="1"/><text x="72.4412%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.1912%" y="469" width="0.0797%" height="15" fill="rgb(235,51,20)" fg:x="906" fg:w="1"/><text x="72.4412%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="72.1912%" y="453" width="0.0797%" height="15" fill="rgb(218,95,46)" fg:x="906" fg:w="1"/><text x="72.4412%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="72.1912%" y="437" width="0.0797%" height="15" fill="rgb(212,81,10)" fg:x="906" fg:w="1"/><text x="72.4412%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.1912%" y="421" width="0.0797%" height="15" fill="rgb(240,59,0)" fg:x="906" fg:w="1"/><text x="72.4412%" y="431.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="72.1912%" y="405" width="0.0797%" height="15" fill="rgb(212,191,42)" fg:x="906" fg:w="1"/><text x="72.4412%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="72.3506%" y="341" width="0.1594%" height="15" fill="rgb(233,140,3)" fg:x="908" fg:w="2"/><text x="72.6006%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="72.3506%" y="325" width="0.1594%" height="15" fill="rgb(215,69,23)" fg:x="908" fg:w="2"/><text x="72.6006%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="72.3506%" y="309" width="0.1594%" height="15" fill="rgb(240,202,20)" fg:x="908" fg:w="2"/><text x="72.6006%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="72.4303%" y="293" width="0.0797%" height="15" fill="rgb(209,146,50)" fg:x="909" fg:w="1"/><text x="72.6803%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="72.2709%" y="405" width="0.3187%" height="15" fill="rgb(253,102,54)" fg:x="907" fg:w="4"/><text x="72.5209%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="72.2709%" y="389" width="0.3187%" height="15" fill="rgb(250,173,47)" fg:x="907" fg:w="4"/><text x="72.5209%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="72.2709%" y="373" width="0.3187%" height="15" fill="rgb(232,142,7)" fg:x="907" fg:w="4"/><text x="72.5209%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="72.2709%" y="357" width="0.3187%" height="15" fill="rgb(230,157,47)" fg:x="907" fg:w="4"/><text x="72.5209%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="72.5100%" y="341" width="0.0797%" height="15" fill="rgb(214,177,35)" fg:x="910" fg:w="1"/><text x="72.7600%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="72.5100%" y="325" width="0.0797%" height="15" fill="rgb(234,119,46)" fg:x="910" fg:w="1"/><text x="72.7600%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.5100%" y="309" width="0.0797%" height="15" fill="rgb(241,180,50)" fg:x="910" fg:w="1"/><text x="72.7600%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.5100%" y="293" width="0.0797%" height="15" fill="rgb(221,54,25)" fg:x="910" fg:w="1"/><text x="72.7600%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.5100%" y="277" width="0.0797%" height="15" fill="rgb(209,157,44)" fg:x="910" fg:w="1"/><text x="72.7600%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="72.5896%" y="405" width="0.2390%" height="15" fill="rgb(246,115,41)" fg:x="911" fg:w="3"/><text x="72.8396%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="72.5896%" y="389" width="0.2390%" height="15" fill="rgb(229,86,1)" fg:x="911" fg:w="3"/><text x="72.8396%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="72.6693%" y="373" width="0.1594%" height="15" fill="rgb(240,108,53)" fg:x="912" fg:w="2"/><text x="72.9193%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="72.6693%" y="357" width="0.1594%" height="15" fill="rgb(227,134,2)" fg:x="912" fg:w="2"/><text x="72.9193%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="72.6693%" y="341" width="0.1594%" height="15" fill="rgb(213,129,25)" fg:x="912" fg:w="2"/><text x="72.9193%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.7490%" y="325" width="0.0797%" height="15" fill="rgb(226,35,21)" fg:x="913" fg:w="1"/><text x="72.9990%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8287%" y="373" width="0.0797%" height="15" fill="rgb(208,129,26)" fg:x="914" fg:w="1"/><text x="73.0787%" y="383.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.9084%" y="309" width="0.0797%" height="15" fill="rgb(224,83,6)" fg:x="915" fg:w="1"/><text x="73.1584%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="72.9084%" y="357" width="0.2390%" height="15" fill="rgb(227,52,39)" fg:x="915" fg:w="3"/><text x="73.1584%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.9084%" y="341" width="0.2390%" height="15" fill="rgb(241,30,17)" fg:x="915" fg:w="3"/><text x="73.1584%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.24%)</title><rect x="72.9084%" y="325" width="0.2390%" height="15" fill="rgb(246,186,42)" fg:x="915" fg:w="3"/><text x="73.1584%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="72.9880%" y="309" width="0.1594%" height="15" fill="rgb(221,169,15)" fg:x="916" fg:w="2"/><text x="73.2380%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="72.9880%" y="293" width="0.1594%" height="15" fill="rgb(235,108,21)" fg:x="916" fg:w="2"/><text x="73.2380%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.0677%" y="277" width="0.0797%" height="15" fill="rgb(219,148,30)" fg:x="917" fg:w="1"/><text x="73.3177%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3068%" y="325" width="0.0797%" height="15" fill="rgb(220,109,5)" fg:x="920" fg:w="1"/><text x="73.5568%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="73.3068%" y="341" width="0.9562%" height="15" fill="rgb(213,203,48)" fg:x="920" fg:w="12"/><text x="73.5568%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="73.3865%" y="325" width="0.8765%" height="15" fill="rgb(244,71,33)" fg:x="921" fg:w="11"/><text x="73.6365%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="74.2629%" y="341" width="0.3187%" height="15" fill="rgb(209,23,2)" fg:x="932" fg:w="4"/><text x="74.5129%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="74.2629%" y="325" width="0.3187%" height="15" fill="rgb(219,97,7)" fg:x="932" fg:w="4"/><text x="74.5129%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="74.5020%" y="309" width="0.0797%" height="15" fill="rgb(216,161,23)" fg:x="935" fg:w="1"/><text x="74.7520%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="74.9004%" y="277" width="0.1594%" height="15" fill="rgb(207,45,42)" fg:x="940" fg:w="2"/><text x="75.1504%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="75.0598%" y="277" width="0.0797%" height="15" fill="rgb(241,61,4)" fg:x="942" fg:w="1"/><text x="75.3098%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="75.1394%" y="277" width="0.0797%" height="15" fill="rgb(236,170,1)" fg:x="943" fg:w="1"/><text x="75.3894%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="75.1394%" y="261" width="0.0797%" height="15" fill="rgb(239,72,5)" fg:x="943" fg:w="1"/><text x="75.3894%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="75.1394%" y="245" width="0.0797%" height="15" fill="rgb(214,13,50)" fg:x="943" fg:w="1"/><text x="75.3894%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1394%" y="229" width="0.0797%" height="15" fill="rgb(224,88,9)" fg:x="943" fg:w="1"/><text x="75.3894%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2191%" y="245" width="0.0797%" height="15" fill="rgb(238,192,34)" fg:x="944" fg:w="1"/><text x="75.4691%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.67%)</title><rect x="75.2191%" y="277" width="3.6653%" height="15" fill="rgb(217,203,50)" fg:x="944" fg:w="46"/><text x="75.4691%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.67%)</title><rect x="75.2191%" y="261" width="3.6653%" height="15" fill="rgb(241,123,32)" fg:x="944" fg:w="46"/><text x="75.4691%" y="271.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (45 samples, 3.59%)</title><rect x="75.2988%" y="245" width="3.5857%" height="15" fill="rgb(248,151,39)" fg:x="945" fg:w="45"/><text x="75.5488%" y="255.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 4.46%)</title><rect x="74.5817%" y="325" width="4.4622%" height="15" fill="rgb(208,89,6)" fg:x="936" fg:w="56"/><text x="74.8317%" y="335.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (56 samples, 4.46%)</title><rect x="74.5817%" y="309" width="4.4622%" height="15" fill="rgb(254,43,26)" fg:x="936" fg:w="56"/><text x="74.8317%" y="319.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (56 samples, 4.46%)</title><rect x="74.5817%" y="293" width="4.4622%" height="15" fill="rgb(216,158,13)" fg:x="936" fg:w="56"/><text x="74.8317%" y="303.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="78.8845%" y="277" width="0.1594%" height="15" fill="rgb(212,47,37)" fg:x="990" fg:w="2"/><text x="79.1345%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.8845%" y="261" width="0.1594%" height="15" fill="rgb(254,16,10)" fg:x="990" fg:w="2"/><text x="79.1345%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.2032%" y="309" width="0.1594%" height="15" fill="rgb(223,228,16)" fg:x="994" fg:w="2"/><text x="79.4532%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="79.3625%" y="309" width="0.1594%" height="15" fill="rgb(249,108,50)" fg:x="996" fg:w="2"/><text x="79.6125%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.4422%" y="293" width="0.0797%" height="15" fill="rgb(208,220,5)" fg:x="997" fg:w="1"/><text x="79.6922%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="79.5219%" y="309" width="0.1594%" height="15" fill="rgb(217,89,48)" fg:x="998" fg:w="2"/><text x="79.7719%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.6016%" y="293" width="0.0797%" height="15" fill="rgb(212,113,41)" fg:x="999" fg:w="1"/><text x="79.8516%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.6016%" y="277" width="0.0797%" height="15" fill="rgb(231,127,5)" fg:x="999" fg:w="1"/><text x="79.8516%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.6016%" y="261" width="0.0797%" height="15" fill="rgb(217,141,17)" fg:x="999" fg:w="1"/><text x="79.8516%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="79.0438%" y="325" width="0.7171%" height="15" fill="rgb(245,125,54)" fg:x="992" fg:w="9"/><text x="79.2938%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="79.6813%" y="309" width="0.0797%" height="15" fill="rgb(248,125,3)" fg:x="1000" fg:w="1"/><text x="79.9313%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (84 samples, 6.69%)</title><rect x="73.1474%" y="357" width="6.6932%" height="15" fill="rgb(236,119,51)" fg:x="918" fg:w="84"/><text x="73.3974%" y="367.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (66 samples, 5.26%)</title><rect x="74.5817%" y="341" width="5.2590%" height="15" fill="rgb(239,99,8)" fg:x="936" fg:w="66"/><text x="74.8317%" y="351.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="79.7610%" y="325" width="0.0797%" height="15" fill="rgb(224,228,4)" fg:x="1001" fg:w="1"/><text x="80.0110%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="79.8406%" y="357" width="0.1594%" height="15" fill="rgb(220,131,45)" fg:x="1002" fg:w="2"/><text x="80.0906%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="79.8406%" y="341" width="0.1594%" height="15" fill="rgb(215,62,5)" fg:x="1002" fg:w="2"/><text x="80.0906%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="79.8406%" y="325" width="0.1594%" height="15" fill="rgb(253,12,24)" fg:x="1002" fg:w="2"/><text x="80.0906%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="79.8406%" y="309" width="0.1594%" height="15" fill="rgb(248,120,50)" fg:x="1002" fg:w="2"/><text x="80.0906%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="79.9203%" y="293" width="0.0797%" height="15" fill="rgb(245,194,10)" fg:x="1003" fg:w="1"/><text x="80.1703%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.0000%" y="309" width="0.0797%" height="15" fill="rgb(241,149,38)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0000%" y="293" width="0.0797%" height="15" fill="rgb(219,215,7)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.0000%" y="277" width="0.0797%" height="15" fill="rgb(208,120,31)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (91 samples, 7.25%)</title><rect x="72.9084%" y="373" width="7.2510%" height="15" fill="rgb(244,30,8)" fg:x="915" fg:w="91"/><text x="73.1584%" y="383.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="80.0000%" y="357" width="0.1594%" height="15" fill="rgb(238,35,44)" fg:x="1004" fg:w="2"/><text x="80.2500%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="80.0000%" y="341" width="0.1594%" height="15" fill="rgb(243,218,37)" fg:x="1004" fg:w="2"/><text x="80.2500%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="80.0000%" y="325" width="0.1594%" height="15" fill="rgb(218,169,10)" fg:x="1004" fg:w="2"/><text x="80.2500%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="80.0797%" y="309" width="0.0797%" height="15" fill="rgb(221,144,10)" fg:x="1005" fg:w="1"/><text x="80.3297%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="80.1594%" y="373" width="0.0797%" height="15" fill="rgb(226,41,38)" fg:x="1006" fg:w="1"/><text x="80.4094%" y="383.50"></text></g><g><title>regex::regex::string::Regex::new (94 samples, 7.49%)</title><rect x="72.8287%" y="405" width="7.4900%" height="15" fill="rgb(228,3,1)" fg:x="914" fg:w="94"/><text x="73.0787%" y="415.50">regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (94 samples, 7.49%)</title><rect x="72.8287%" y="389" width="7.4900%" height="15" fill="rgb(209,129,12)" fg:x="914" fg:w="94"/><text x="73.0787%" y="399.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="80.2390%" y="373" width="0.0797%" height="15" fill="rgb(213,136,33)" fg:x="1007" fg:w="1"/><text x="80.4890%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.9562%" y="325" width="0.0797%" height="15" fill="rgb(209,181,29)" fg:x="1016" fg:w="1"/><text x="81.2062%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.9562%" y="309" width="0.0797%" height="15" fill="rgb(234,173,18)" fg:x="1016" fg:w="1"/><text x="81.2062%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.9562%" y="293" width="0.0797%" height="15" fill="rgb(227,73,47)" fg:x="1016" fg:w="1"/><text x="81.2062%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (113 samples, 9.00%)</title><rect x="72.2709%" y="421" width="9.0040%" height="15" fill="rgb(234,9,34)" fg:x="907" fg:w="113"/><text x="72.5209%" y="431.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="80.3187%" y="405" width="0.9562%" height="15" fill="rgb(235,172,15)" fg:x="1008" fg:w="12"/><text x="80.5687%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="80.3187%" y="389" width="0.9562%" height="15" fill="rgb(245,61,2)" fg:x="1008" fg:w="12"/><text x="80.5687%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="80.3187%" y="373" width="0.9562%" height="15" fill="rgb(238,39,47)" fg:x="1008" fg:w="12"/><text x="80.5687%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.96%)</title><rect x="80.3187%" y="357" width="0.9562%" height="15" fill="rgb(234,37,24)" fg:x="1008" fg:w="12"/><text x="80.5687%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.96%)</title><rect x="80.3187%" y="341" width="0.9562%" height="15" fill="rgb(248,223,24)" fg:x="1008" fg:w="12"/><text x="80.5687%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="81.0359%" y="325" width="0.2390%" height="15" fill="rgb(223,12,15)" fg:x="1017" fg:w="3"/><text x="81.2859%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.2749%" y="357" width="0.0797%" height="15" fill="rgb(249,6,3)" fg:x="1020" fg:w="1"/><text x="81.5249%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.2749%" y="341" width="0.0797%" height="15" fill="rgb(237,105,33)" fg:x="1020" fg:w="1"/><text x="81.5249%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="81.3546%" y="357" width="0.0797%" height="15" fill="rgb(252,208,35)" fg:x="1021" fg:w="1"/><text x="81.6046%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3546%" y="341" width="0.0797%" height="15" fill="rgb(215,181,35)" fg:x="1021" fg:w="1"/><text x="81.6046%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="81.2749%" y="405" width="0.2390%" height="15" fill="rgb(246,212,3)" fg:x="1020" fg:w="3"/><text x="81.5249%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="81.2749%" y="389" width="0.2390%" height="15" fill="rgb(247,156,24)" fg:x="1020" fg:w="3"/><text x="81.5249%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="81.2749%" y="373" width="0.2390%" height="15" fill="rgb(248,9,31)" fg:x="1020" fg:w="3"/><text x="81.5249%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="81.4343%" y="357" width="0.0797%" height="15" fill="rgb(234,26,45)" fg:x="1022" fg:w="1"/><text x="81.6843%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.4343%" y="341" width="0.0797%" height="15" fill="rgb(249,11,32)" fg:x="1022" fg:w="1"/><text x="81.6843%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.4343%" y="325" width="0.0797%" height="15" fill="rgb(249,162,33)" fg:x="1022" fg:w="1"/><text x="81.6843%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="81.5139%" y="389" width="0.0797%" height="15" fill="rgb(232,4,32)" fg:x="1023" fg:w="1"/><text x="81.7639%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="81.5139%" y="373" width="0.0797%" height="15" fill="rgb(212,5,45)" fg:x="1023" fg:w="1"/><text x="81.7639%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="81.6733%" y="341" width="0.0797%" height="15" fill="rgb(227,95,13)" fg:x="1025" fg:w="1"/><text x="81.9233%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.9124%" y="309" width="0.0797%" height="15" fill="rgb(223,205,10)" fg:x="1028" fg:w="1"/><text x="82.1624%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.9124%" y="293" width="0.0797%" height="15" fill="rgb(222,178,8)" fg:x="1028" fg:w="1"/><text x="82.1624%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="81.9124%" y="277" width="0.0797%" height="15" fill="rgb(216,13,22)" fg:x="1028" fg:w="1"/><text x="82.1624%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="81.9920%" y="309" width="0.1594%" height="15" fill="rgb(240,167,12)" fg:x="1029" fg:w="2"/><text x="82.2420%" y="319.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="81.5139%" y="405" width="0.7171%" height="15" fill="rgb(235,68,35)" fg:x="1023" fg:w="9"/><text x="81.7639%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="81.5936%" y="389" width="0.6375%" height="15" fill="rgb(253,40,27)" fg:x="1024" fg:w="8"/><text x="81.8436%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="81.5936%" y="373" width="0.6375%" height="15" fill="rgb(214,19,28)" fg:x="1024" fg:w="8"/><text x="81.8436%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="81.6733%" y="357" width="0.5578%" height="15" fill="rgb(210,167,45)" fg:x="1025" fg:w="7"/><text x="81.9233%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="81.7530%" y="341" width="0.4781%" height="15" fill="rgb(232,97,40)" fg:x="1026" fg:w="6"/><text x="82.0030%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="81.7530%" y="325" width="0.4781%" height="15" fill="rgb(250,35,23)" fg:x="1026" fg:w="6"/><text x="82.0030%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="82.1514%" y="309" width="0.0797%" height="15" fill="rgb(248,47,53)" fg:x="1031" fg:w="1"/><text x="82.4014%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.2311%" y="357" width="0.0797%" height="15" fill="rgb(226,58,50)" fg:x="1032" fg:w="1"/><text x="82.4811%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.2311%" y="341" width="0.0797%" height="15" fill="rgb(217,105,26)" fg:x="1032" fg:w="1"/><text x="82.4811%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2311%" y="325" width="0.0797%" height="15" fill="rgb(208,64,1)" fg:x="1032" fg:w="1"/><text x="82.4811%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="82.3108%" y="357" width="0.0797%" height="15" fill="rgb(214,80,1)" fg:x="1033" fg:w="1"/><text x="82.5608%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.3108%" y="341" width="0.0797%" height="15" fill="rgb(206,175,26)" fg:x="1033" fg:w="1"/><text x="82.5608%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="82.3108%" y="325" width="0.0797%" height="15" fill="rgb(235,156,37)" fg:x="1033" fg:w="1"/><text x="82.5608%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.3108%" y="309" width="0.0797%" height="15" fill="rgb(213,100,9)" fg:x="1033" fg:w="1"/><text x="82.5608%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.3108%" y="293" width="0.0797%" height="15" fill="rgb(241,15,13)" fg:x="1033" fg:w="1"/><text x="82.5608%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="82.3904%" y="357" width="0.0797%" height="15" fill="rgb(205,97,43)" fg:x="1034" fg:w="1"/><text x="82.6404%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5498%" y="325" width="0.0797%" height="15" fill="rgb(216,106,32)" fg:x="1036" fg:w="1"/><text x="82.7998%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19 samples, 1.51%)</title><rect x="82.4701%" y="341" width="1.5139%" height="15" fill="rgb(226,200,8)" fg:x="1035" fg:w="19"/><text x="82.7201%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (17 samples, 1.35%)</title><rect x="82.6295%" y="325" width="1.3546%" height="15" fill="rgb(244,54,29)" fg:x="1037" fg:w="17"/><text x="82.8795%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.9044%" y="309" width="0.0797%" height="15" fill="rgb(252,169,12)" fg:x="1053" fg:w="1"/><text x="84.1544%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="83.9841%" y="341" width="0.0797%" height="15" fill="rgb(231,199,11)" fg:x="1054" fg:w="1"/><text x="84.2341%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="84.0637%" y="341" width="0.4781%" height="15" fill="rgb(233,191,18)" fg:x="1055" fg:w="6"/><text x="84.3137%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="84.2231%" y="325" width="0.3187%" height="15" fill="rgb(215,83,47)" fg:x="1057" fg:w="4"/><text x="84.4731%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.4622%" y="309" width="0.0797%" height="15" fill="rgb(251,67,19)" fg:x="1060" fg:w="1"/><text x="84.7122%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="84.8606%" y="309" width="0.0797%" height="15" fill="rgb(240,7,20)" fg:x="1065" fg:w="1"/><text x="85.1106%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="84.9402%" y="309" width="0.0797%" height="15" fill="rgb(210,150,26)" fg:x="1066" fg:w="1"/><text x="85.1902%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.9402%" y="293" width="0.0797%" height="15" fill="rgb(228,75,42)" fg:x="1066" fg:w="1"/><text x="85.1902%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9402%" y="277" width="0.0797%" height="15" fill="rgb(237,134,48)" fg:x="1066" fg:w="1"/><text x="85.1902%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.9402%" y="261" width="0.0797%" height="15" fill="rgb(205,80,50)" fg:x="1066" fg:w="1"/><text x="85.1902%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="85.0199%" y="309" width="0.5578%" height="15" fill="rgb(217,74,48)" fg:x="1067" fg:w="7"/><text x="85.2699%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="85.0996%" y="293" width="0.4781%" height="15" fill="rgb(205,82,50)" fg:x="1068" fg:w="6"/><text x="85.3496%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="85.2590%" y="277" width="0.3187%" height="15" fill="rgb(228,1,33)" fg:x="1070" fg:w="4"/><text x="85.5090%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="85.2590%" y="261" width="0.3187%" height="15" fill="rgb(214,50,23)" fg:x="1070" fg:w="4"/><text x="85.5090%" y="271.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="85.2590%" y="245" width="0.3187%" height="15" fill="rgb(210,62,9)" fg:x="1070" fg:w="4"/><text x="85.5090%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.72%)</title><rect x="85.5777%" y="309" width="0.7171%" height="15" fill="rgb(210,104,37)" fg:x="1074" fg:w="9"/><text x="85.8277%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (9 samples, 0.72%)</title><rect x="85.5777%" y="293" width="0.7171%" height="15" fill="rgb(232,104,43)" fg:x="1074" fg:w="9"/><text x="85.8277%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.72%)</title><rect x="85.5777%" y="277" width="0.7171%" height="15" fill="rgb(244,52,6)" fg:x="1074" fg:w="9"/><text x="85.8277%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (23 samples, 1.83%)</title><rect x="84.5418%" y="341" width="1.8327%" height="15" fill="rgb(211,174,52)" fg:x="1061" fg:w="23"/><text x="84.7918%" y="351.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (23 samples, 1.83%)</title><rect x="84.5418%" y="325" width="1.8327%" height="15" fill="rgb(229,48,4)" fg:x="1061" fg:w="23"/><text x="84.7918%" y="335.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="86.2948%" y="309" width="0.0797%" height="15" fill="rgb(205,155,16)" fg:x="1083" fg:w="1"/><text x="86.5448%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="86.9323%" y="229" width="0.3984%" height="15" fill="rgb(211,141,53)" fg:x="1091" fg:w="5"/><text x="87.1823%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.3307%" y="229" width="0.0797%" height="15" fill="rgb(240,148,11)" fg:x="1096" fg:w="1"/><text x="87.5807%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="87.4104%" y="229" width="0.3187%" height="15" fill="rgb(214,45,23)" fg:x="1097" fg:w="4"/><text x="87.6604%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.6494%" y="213" width="0.0797%" height="15" fill="rgb(248,74,26)" fg:x="1100" fg:w="1"/><text x="87.8994%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.6494%" y="197" width="0.0797%" height="15" fill="rgb(218,121,16)" fg:x="1100" fg:w="1"/><text x="87.8994%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.6494%" y="181" width="0.0797%" height="15" fill="rgb(218,10,47)" fg:x="1100" fg:w="1"/><text x="87.8994%" y="191.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="87.8884%" y="181" width="0.0797%" height="15" fill="rgb(227,99,14)" fg:x="1103" fg:w="1"/><text x="88.1384%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="87.7291%" y="229" width="0.3187%" height="15" fill="rgb(229,83,46)" fg:x="1101" fg:w="4"/><text x="87.9791%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="87.8884%" y="213" width="0.1594%" height="15" fill="rgb(228,25,1)" fg:x="1103" fg:w="2"/><text x="88.1384%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.8884%" y="197" width="0.1594%" height="15" fill="rgb(252,190,15)" fg:x="1103" fg:w="2"/><text x="88.1384%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.9681%" y="181" width="0.0797%" height="15" fill="rgb(213,103,51)" fg:x="1104" fg:w="1"/><text x="88.2181%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="88.2869%" y="197" width="0.1594%" height="15" fill="rgb(220,38,44)" fg:x="1108" fg:w="2"/><text x="88.5369%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="88.4462%" y="197" width="0.2390%" height="15" fill="rgb(210,45,26)" fg:x="1110" fg:w="3"/><text x="88.6962%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="88.5259%" y="181" width="0.1594%" height="15" fill="rgb(205,95,48)" fg:x="1111" fg:w="2"/><text x="88.7759%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="88.5259%" y="165" width="0.1594%" height="15" fill="rgb(225,179,37)" fg:x="1111" fg:w="2"/><text x="88.7759%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.88%)</title><rect x="88.0478%" y="229" width="0.8765%" height="15" fill="rgb(230,209,3)" fg:x="1105" fg:w="11"/><text x="88.2978%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="88.1275%" y="213" width="0.7968%" height="15" fill="rgb(248,12,46)" fg:x="1106" fg:w="10"/><text x="88.3775%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="88.6853%" y="197" width="0.2390%" height="15" fill="rgb(234,18,0)" fg:x="1113" fg:w="3"/><text x="88.9353%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (41 samples, 3.27%)</title><rect x="88.9243%" y="229" width="3.2669%" height="15" fill="rgb(238,197,14)" fg:x="1116" fg:w="41"/><text x="89.1743%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (41 samples, 3.27%)</title><rect x="88.9243%" y="213" width="3.2669%" height="15" fill="rgb(251,162,48)" fg:x="1116" fg:w="41"/><text x="89.1743%" y="223.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (41 samples, 3.27%)</title><rect x="88.9243%" y="197" width="3.2669%" height="15" fill="rgb(237,73,42)" fg:x="1116" fg:w="41"/><text x="89.1743%" y="207.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="92.1912%" y="229" width="0.2390%" height="15" fill="rgb(211,108,8)" fg:x="1157" fg:w="3"/><text x="92.4412%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="92.9084%" y="181" width="0.1594%" height="15" fill="rgb(213,45,22)" fg:x="1166" fg:w="2"/><text x="93.1584%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="93.0677%" y="181" width="0.0797%" height="15" fill="rgb(252,154,5)" fg:x="1168" fg:w="1"/><text x="93.3177%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="93.0677%" y="165" width="0.0797%" height="15" fill="rgb(221,79,52)" fg:x="1168" fg:w="1"/><text x="93.3177%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 6.85%)</title><rect x="86.3745%" y="325" width="6.8526%" height="15" fill="rgb(229,220,36)" fg:x="1084" fg:w="86"/><text x="86.6245%" y="335.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (86 samples, 6.85%)</title><rect x="86.3745%" y="309" width="6.8526%" height="15" fill="rgb(211,17,16)" fg:x="1084" fg:w="86"/><text x="86.6245%" y="319.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (86 samples, 6.85%)</title><rect x="86.3745%" y="293" width="6.8526%" height="15" fill="rgb(222,55,31)" fg:x="1084" fg:w="86"/><text x="86.6245%" y="303.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (86 samples, 6.85%)</title><rect x="86.3745%" y="277" width="6.8526%" height="15" fill="rgb(221,221,31)" fg:x="1084" fg:w="86"/><text x="86.6245%" y="287.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (86 samples, 6.85%)</title><rect x="86.3745%" y="261" width="6.8526%" height="15" fill="rgb(227,168,26)" fg:x="1084" fg:w="86"/><text x="86.6245%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (86 samples, 6.85%)</title><rect x="86.3745%" y="245" width="6.8526%" height="15" fill="rgb(224,139,9)" fg:x="1084" fg:w="86"/><text x="86.6245%" y="255.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (10 samples, 0.80%)</title><rect x="92.4303%" y="229" width="0.7968%" height="15" fill="rgb(254,172,0)" fg:x="1160" fg:w="10"/><text x="92.6803%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="92.6693%" y="213" width="0.5578%" height="15" fill="rgb(235,203,1)" fg:x="1163" fg:w="7"/><text x="92.9193%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="92.7490%" y="197" width="0.4781%" height="15" fill="rgb(216,205,24)" fg:x="1164" fg:w="6"/><text x="92.9990%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="93.1474%" y="181" width="0.0797%" height="15" fill="rgb(233,24,6)" fg:x="1169" fg:w="1"/><text x="93.3974%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="93.1474%" y="165" width="0.0797%" height="15" fill="rgb(244,110,9)" fg:x="1169" fg:w="1"/><text x="93.3974%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="93.3068%" y="309" width="0.0797%" height="15" fill="rgb(239,222,42)" fg:x="1171" fg:w="1"/><text x="93.5568%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="93.3865%" y="309" width="0.4781%" height="15" fill="rgb(218,145,13)" fg:x="1172" fg:w="6"/><text x="93.6365%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="93.6255%" y="293" width="0.2390%" height="15" fill="rgb(207,69,11)" fg:x="1175" fg:w="3"/><text x="93.8755%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="93.6255%" y="277" width="0.2390%" height="15" fill="rgb(220,223,22)" fg:x="1175" fg:w="3"/><text x="93.8755%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="93.6255%" y="261" width="0.2390%" height="15" fill="rgb(245,102,5)" fg:x="1175" fg:w="3"/><text x="93.8755%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="93.8645%" y="309" width="0.1594%" height="15" fill="rgb(211,148,2)" fg:x="1178" fg:w="2"/><text x="94.1145%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (148 samples, 11.79%)</title><rect x="82.4701%" y="357" width="11.7928%" height="15" fill="rgb(241,13,44)" fg:x="1035" fg:w="148"/><text x="82.7201%" y="367.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (99 samples, 7.89%)</title><rect x="86.3745%" y="341" width="7.8884%" height="15" fill="rgb(219,137,21)" fg:x="1084" fg:w="99"/><text x="86.6245%" y="351.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="93.2271%" y="325" width="1.0359%" height="15" fill="rgb(242,206,5)" fg:x="1170" fg:w="13"/><text x="93.4771%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="94.0239%" y="309" width="0.2390%" height="15" fill="rgb(217,114,22)" fg:x="1180" fg:w="3"/><text x="94.2739%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.2629%" y="293" width="0.1594%" height="15" fill="rgb(253,206,42)" fg:x="1183" fg:w="2"/><text x="94.5129%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.2629%" y="277" width="0.1594%" height="15" fill="rgb(236,102,18)" fg:x="1183" fg:w="2"/><text x="94.5129%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.2629%" y="261" width="0.1594%" height="15" fill="rgb(208,59,49)" fg:x="1183" fg:w="2"/><text x="94.5129%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="94.2629%" y="357" width="0.2390%" height="15" fill="rgb(215,194,28)" fg:x="1183" fg:w="3"/><text x="94.5129%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="94.2629%" y="341" width="0.2390%" height="15" fill="rgb(243,207,11)" fg:x="1183" fg:w="3"/><text x="94.5129%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="94.2629%" y="325" width="0.2390%" height="15" fill="rgb(254,179,35)" fg:x="1183" fg:w="3"/><text x="94.5129%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="94.2629%" y="309" width="0.2390%" height="15" fill="rgb(235,97,3)" fg:x="1183" fg:w="3"/><text x="94.5129%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="94.4223%" y="293" width="0.0797%" height="15" fill="rgb(215,155,33)" fg:x="1185" fg:w="1"/><text x="94.6723%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (161 samples, 12.83%)</title><rect x="82.2311%" y="373" width="12.8287%" height="15" fill="rgb(223,128,12)" fg:x="1032" fg:w="161"/><text x="82.4811%" y="383.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="94.5020%" y="357" width="0.5578%" height="15" fill="rgb(208,157,18)" fg:x="1186" fg:w="7"/><text x="94.7520%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="94.5020%" y="341" width="0.5578%" height="15" fill="rgb(249,70,54)" fg:x="1186" fg:w="7"/><text x="94.7520%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="94.5817%" y="325" width="0.4781%" height="15" fill="rgb(244,118,24)" fg:x="1187" fg:w="6"/><text x="94.8317%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="94.6614%" y="309" width="0.3984%" height="15" fill="rgb(211,54,0)" fg:x="1188" fg:w="5"/><text x="94.9114%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="94.8207%" y="293" width="0.2390%" height="15" fill="rgb(245,137,45)" fg:x="1190" fg:w="3"/><text x="95.0707%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="94.9801%" y="277" width="0.0797%" height="15" fill="rgb(232,154,31)" fg:x="1192" fg:w="1"/><text x="95.2301%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="94.9801%" y="261" width="0.0797%" height="15" fill="rgb(253,6,39)" fg:x="1192" fg:w="1"/><text x="95.2301%" y="271.50"></text></g><g><title>indefinite::rules::number::Number::check (174 samples, 13.86%)</title><rect x="81.2749%" y="421" width="13.8645%" height="15" fill="rgb(234,183,24)" fg:x="1020" fg:w="174"/><text x="81.5249%" y="431.50">indefinite::rules::nu..</text></g><g><title>regex::regex::string::Regex::new (162 samples, 12.91%)</title><rect x="82.2311%" y="405" width="12.9084%" height="15" fill="rgb(252,84,40)" fg:x="1032" fg:w="162"/><text x="82.4811%" y="415.50">regex::regex::strin..</text></g><g><title>regex::builders::Builder::build_one_string (162 samples, 12.91%)</title><rect x="82.2311%" y="389" width="12.9084%" height="15" fill="rgb(224,65,2)" fg:x="1032" fg:w="162"/><text x="82.4811%" y="399.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="95.0598%" y="373" width="0.0797%" height="15" fill="rgb(229,38,24)" fg:x="1193" fg:w="1"/><text x="95.3098%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="95.1394%" y="405" width="0.0797%" height="15" fill="rgb(218,131,50)" fg:x="1194" fg:w="1"/><text x="95.3894%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.2191%" y="389" width="0.0797%" height="15" fill="rgb(233,106,18)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.2191%" y="373" width="0.0797%" height="15" fill="rgb(220,216,11)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.2191%" y="357" width="0.0797%" height="15" fill="rgb(251,100,45)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.2191%" y="341" width="0.0797%" height="15" fill="rgb(235,143,32)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.2191%" y="325" width="0.0797%" height="15" fill="rgb(248,124,34)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="95.2191%" y="309" width="0.0797%" height="15" fill="rgb(225,221,4)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="95.2191%" y="293" width="0.0797%" height="15" fill="rgb(242,27,43)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="95.2191%" y="277" width="0.0797%" height="15" fill="rgb(227,54,8)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.2988%" y="389" width="0.0797%" height="15" fill="rgb(253,139,49)" fg:x="1196" fg:w="1"/><text x="95.5488%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.2988%" y="373" width="0.0797%" height="15" fill="rgb(231,26,43)" fg:x="1196" fg:w="1"/><text x="95.5488%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.2988%" y="357" width="0.0797%" height="15" fill="rgb(207,121,39)" fg:x="1196" fg:w="1"/><text x="95.5488%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="95.2988%" y="341" width="0.0797%" height="15" fill="rgb(223,101,35)" fg:x="1196" fg:w="1"/><text x="95.5488%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.3785%" y="357" width="0.1594%" height="15" fill="rgb(232,87,23)" fg:x="1197" fg:w="2"/><text x="95.6285%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.5378%" y="341" width="0.0797%" height="15" fill="rgb(225,180,29)" fg:x="1199" fg:w="1"/><text x="95.7878%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.5378%" y="325" width="0.0797%" height="15" fill="rgb(225,25,17)" fg:x="1199" fg:w="1"/><text x="95.7878%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.5378%" y="309" width="0.0797%" height="15" fill="rgb(223,8,52)" fg:x="1199" fg:w="1"/><text x="95.7878%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.6175%" y="341" width="0.0797%" height="15" fill="rgb(246,42,21)" fg:x="1200" fg:w="1"/><text x="95.8675%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="95.6972%" y="341" width="0.1594%" height="15" fill="rgb(205,64,43)" fg:x="1201" fg:w="2"/><text x="95.9472%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.6972%" y="325" width="0.1594%" height="15" fill="rgb(221,160,13)" fg:x="1201" fg:w="2"/><text x="95.9472%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="95.6972%" y="309" width="0.1594%" height="15" fill="rgb(239,58,35)" fg:x="1201" fg:w="2"/><text x="95.9472%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7769%" y="293" width="0.0797%" height="15" fill="rgb(251,26,40)" fg:x="1202" fg:w="1"/><text x="96.0269%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7769%" y="277" width="0.0797%" height="15" fill="rgb(247,0,4)" fg:x="1202" fg:w="1"/><text x="96.0269%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.7769%" y="261" width="0.0797%" height="15" fill="rgb(218,130,10)" fg:x="1202" fg:w="1"/><text x="96.0269%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="95.8566%" y="341" width="0.1594%" height="15" fill="rgb(239,32,7)" fg:x="1203" fg:w="2"/><text x="96.1066%" y="351.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="95.9363%" y="325" width="0.0797%" height="15" fill="rgb(210,192,24)" fg:x="1204" fg:w="1"/><text x="96.1863%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.0956%" y="309" width="0.0797%" height="15" fill="rgb(226,212,17)" fg:x="1206" fg:w="1"/><text x="96.3456%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="96.0956%" y="325" width="0.1594%" height="15" fill="rgb(219,201,28)" fg:x="1206" fg:w="2"/><text x="96.3456%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.1753%" y="309" width="0.0797%" height="15" fill="rgb(235,207,41)" fg:x="1207" fg:w="1"/><text x="96.4253%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.1753%" y="293" width="0.0797%" height="15" fill="rgb(241,95,54)" fg:x="1207" fg:w="1"/><text x="96.4253%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.1753%" y="277" width="0.0797%" height="15" fill="rgb(248,12,23)" fg:x="1207" fg:w="1"/><text x="96.4253%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2550%" y="293" width="0.0797%" height="15" fill="rgb(228,173,4)" fg:x="1208" fg:w="1"/><text x="96.5050%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2550%" y="277" width="0.0797%" height="15" fill="rgb(254,99,5)" fg:x="1208" fg:w="1"/><text x="96.5050%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2550%" y="261" width="0.0797%" height="15" fill="rgb(212,184,17)" fg:x="1208" fg:w="1"/><text x="96.5050%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="96.3347%" y="277" width="0.0797%" height="15" fill="rgb(252,174,1)" fg:x="1209" fg:w="1"/><text x="96.5847%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3347%" y="261" width="0.0797%" height="15" fill="rgb(241,118,51)" fg:x="1209" fg:w="1"/><text x="96.5847%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3347%" y="245" width="0.0797%" height="15" fill="rgb(227,94,47)" fg:x="1209" fg:w="1"/><text x="96.5847%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3347%" y="229" width="0.0797%" height="15" fill="rgb(229,104,2)" fg:x="1209" fg:w="1"/><text x="96.5847%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="96.2550%" y="309" width="0.3187%" height="15" fill="rgb(219,28,31)" fg:x="1208" fg:w="4"/><text x="96.5050%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="96.3347%" y="293" width="0.2390%" height="15" fill="rgb(233,109,36)" fg:x="1209" fg:w="3"/><text x="96.5847%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.4143%" y="277" width="0.1594%" height="15" fill="rgb(246,88,11)" fg:x="1210" fg:w="2"/><text x="96.6643%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.4143%" y="261" width="0.1594%" height="15" fill="rgb(209,212,17)" fg:x="1210" fg:w="2"/><text x="96.6643%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.6534%" y="293" width="0.0797%" height="15" fill="rgb(243,59,29)" fg:x="1213" fg:w="1"/><text x="96.9034%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6534%" y="277" width="0.0797%" height="15" fill="rgb(244,205,48)" fg:x="1213" fg:w="1"/><text x="96.9034%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6534%" y="261" width="0.0797%" height="15" fill="rgb(227,30,6)" fg:x="1213" fg:w="1"/><text x="96.9034%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.6534%" y="245" width="0.0797%" height="15" fill="rgb(220,205,48)" fg:x="1213" fg:w="1"/><text x="96.9034%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="96.2550%" y="325" width="0.7171%" height="15" fill="rgb(250,94,14)" fg:x="1208" fg:w="9"/><text x="96.5050%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="96.5737%" y="309" width="0.3984%" height="15" fill="rgb(216,119,42)" fg:x="1212" fg:w="5"/><text x="96.8237%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="96.7331%" y="293" width="0.2390%" height="15" fill="rgb(232,155,0)" fg:x="1214" fg:w="3"/><text x="96.9831%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (13 samples, 1.04%)</title><rect x="96.0159%" y="341" width="1.0359%" height="15" fill="rgb(212,24,32)" fg:x="1205" fg:w="13"/><text x="96.2659%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.9721%" y="325" width="0.0797%" height="15" fill="rgb(216,69,20)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.9721%" y="309" width="0.0797%" height="15" fill="rgb(229,73,31)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="96.9721%" y="293" width="0.0797%" height="15" fill="rgb(224,219,20)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9721%" y="277" width="0.0797%" height="15" fill="rgb(215,146,41)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="97.0518%" y="293" width="0.0797%" height="15" fill="rgb(244,71,31)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="97.0518%" y="309" width="0.1594%" height="15" fill="rgb(224,24,11)" fg:x="1218" fg:w="2"/><text x="97.3018%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.1315%" y="293" width="0.0797%" height="15" fill="rgb(229,76,15)" fg:x="1219" fg:w="1"/><text x="97.3815%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1315%" y="277" width="0.0797%" height="15" fill="rgb(209,93,2)" fg:x="1219" fg:w="1"/><text x="97.3815%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1315%" y="261" width="0.0797%" height="15" fill="rgb(216,200,50)" fg:x="1219" fg:w="1"/><text x="97.3815%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1315%" y="245" width="0.0797%" height="15" fill="rgb(211,67,34)" fg:x="1219" fg:w="1"/><text x="97.3815%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (2 samples, 0.16%)</title><rect x="97.2112%" y="309" width="0.1594%" height="15" fill="rgb(225,87,47)" fg:x="1220" fg:w="2"/><text x="97.4612%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="97.0518%" y="341" width="0.5578%" height="15" fill="rgb(217,185,16)" fg:x="1218" fg:w="7"/><text x="97.3018%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="97.0518%" y="325" width="0.5578%" height="15" fill="rgb(205,0,0)" fg:x="1218" fg:w="7"/><text x="97.3018%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="97.3705%" y="309" width="0.2390%" height="15" fill="rgb(207,116,45)" fg:x="1222" fg:w="3"/><text x="97.6205%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.6096%" y="309" width="0.0797%" height="15" fill="rgb(221,156,26)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.6096%" y="293" width="0.0797%" height="15" fill="rgb(213,140,4)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.6892%" y="309" width="0.0797%" height="15" fill="rgb(231,224,15)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="97.6892%" y="293" width="0.0797%" height="15" fill="rgb(244,76,20)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="97.6892%" y="277" width="0.0797%" height="15" fill="rgb(238,117,7)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.31%)</title><rect x="95.5378%" y="357" width="2.3108%" height="15" fill="rgb(235,1,10)" fg:x="1199" fg:w="29"/><text x="95.7878%" y="367.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="97.6096%" y="341" width="0.2390%" height="15" fill="rgb(216,165,6)" fg:x="1225" fg:w="3"/><text x="97.8596%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="97.6096%" y="325" width="0.2390%" height="15" fill="rgb(246,91,35)" fg:x="1225" fg:w="3"/><text x="97.8596%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.7689%" y="309" width="0.0797%" height="15" fill="rgb(228,96,24)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (32 samples, 2.55%)</title><rect x="95.3785%" y="389" width="2.5498%" height="15" fill="rgb(254,217,53)" fg:x="1197" fg:w="32"/><text x="95.6285%" y="399.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (32 samples, 2.55%)</title><rect x="95.3785%" y="373" width="2.5498%" height="15" fill="rgb(209,60,0)" fg:x="1197" fg:w="32"/><text x="95.6285%" y="383.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="97.8486%" y="357" width="0.0797%" height="15" fill="rgb(250,93,26)" fg:x="1228" fg:w="1"/><text x="98.0986%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.1673%" y="309" width="0.0797%" height="15" fill="rgb(211,9,40)" fg:x="1232" fg:w="1"/><text x="98.4173%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.1673%" y="293" width="0.0797%" height="15" fill="rgb(242,57,20)" fg:x="1232" fg:w="1"/><text x="98.4173%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="97.9283%" y="325" width="0.3984%" height="15" fill="rgb(248,85,48)" fg:x="1229" fg:w="5"/><text x="98.1783%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.2470%" y="309" width="0.0797%" height="15" fill="rgb(212,117,2)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="97.9283%" y="341" width="0.4781%" height="15" fill="rgb(243,19,3)" fg:x="1229" fg:w="6"/><text x="98.1783%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.3267%" y="325" width="0.0797%" height="15" fill="rgb(232,217,24)" fg:x="1234" fg:w="1"/><text x="98.5767%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.3267%" y="309" width="0.0797%" height="15" fill="rgb(224,175,40)" fg:x="1234" fg:w="1"/><text x="98.5767%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (342 samples, 27.25%)</title><rect x="71.2351%" y="501" width="27.2510%" height="15" fill="rgb(212,162,32)" fg:x="894" fg:w="342"/><text x="71.4851%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_cor..</text></g><g><title>plugins_core::looking::model::qualify_name (329 samples, 26.22%)</title><rect x="72.2709%" y="485" width="26.2151%" height="15" fill="rgb(215,9,4)" fg:x="907" fg:w="329"/><text x="72.5209%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (329 samples, 26.22%)</title><rect x="72.2709%" y="469" width="26.2151%" height="15" fill="rgb(242,42,7)" fg:x="907" fg:w="329"/><text x="72.5209%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (329 samples, 26.22%)</title><rect x="72.2709%" y="453" width="26.2151%" height="15" fill="rgb(242,184,45)" fg:x="907" fg:w="329"/><text x="72.5209%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (329 samples, 26.22%)</title><rect x="72.2709%" y="437" width="26.2151%" height="15" fill="rgb(228,111,51)" fg:x="907" fg:w="329"/><text x="72.5209%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (42 samples, 3.35%)</title><rect x="95.1394%" y="421" width="3.3466%" height="15" fill="rgb(236,147,17)" fg:x="1194" fg:w="42"/><text x="95.3894%" y="431.50">ind..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (41 samples, 3.27%)</title><rect x="95.2191%" y="405" width="3.2669%" height="15" fill="rgb(210,75,22)" fg:x="1195" fg:w="41"/><text x="95.4691%" y="415.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="97.9283%" y="389" width="0.5578%" height="15" fill="rgb(217,159,45)" fg:x="1229" fg:w="7"/><text x="98.1783%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="97.9283%" y="373" width="0.5578%" height="15" fill="rgb(245,165,53)" fg:x="1229" fg:w="7"/><text x="98.1783%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="97.9283%" y="357" width="0.5578%" height="15" fill="rgb(251,190,50)" fg:x="1229" fg:w="7"/><text x="98.1783%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="98.4064%" y="341" width="0.0797%" height="15" fill="rgb(208,203,29)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.4861%" y="501" width="0.0797%" height="15" fill="rgb(207,209,35)" fg:x="1236" fg:w="1"/><text x="98.7361%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="98.5657%" y="501" width="0.0797%" height="15" fill="rgb(230,144,49)" fg:x="1237" fg:w="1"/><text x="98.8157%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6454%" y="373" width="0.0797%" height="15" fill="rgb(229,31,6)" fg:x="1238" fg:w="1"/><text x="98.8954%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.7251%" y="373" width="0.1594%" height="15" fill="rgb(251,129,24)" fg:x="1239" fg:w="2"/><text x="98.9751%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="98.8048%" y="357" width="0.0797%" height="15" fill="rgb(235,105,15)" fg:x="1240" fg:w="1"/><text x="99.0548%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.8845%" y="309" width="0.0797%" height="15" fill="rgb(216,52,43)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8845%" y="293" width="0.0797%" height="15" fill="rgb(238,144,41)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.0438%" y="277" width="0.0797%" height="15" fill="rgb(243,63,9)" fg:x="1243" fg:w="1"/><text x="99.2938%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2032%" y="245" width="0.0797%" height="15" fill="rgb(246,208,1)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2032%" y="229" width="0.0797%" height="15" fill="rgb(233,182,18)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2032%" y="213" width="0.0797%" height="15" fill="rgb(242,224,8)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2829%" y="213" width="0.0797%" height="15" fill="rgb(243,54,37)" fg:x="1246" fg:w="1"/><text x="99.5329%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2829%" y="197" width="0.0797%" height="15" fill="rgb(233,192,12)" fg:x="1246" fg:w="1"/><text x="99.5329%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2829%" y="181" width="0.0797%" height="15" fill="rgb(251,192,53)" fg:x="1246" fg:w="1"/><text x="99.5329%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2829%" y="229" width="0.1594%" height="15" fill="rgb(246,141,26)" fg:x="1246" fg:w="2"/><text x="99.5329%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3625%" y="213" width="0.0797%" height="15" fill="rgb(239,195,19)" fg:x="1247" fg:w="1"/><text x="99.6125%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3625%" y="197" width="0.0797%" height="15" fill="rgb(241,16,39)" fg:x="1247" fg:w="1"/><text x="99.6125%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3625%" y="181" width="0.0797%" height="15" fill="rgb(223,13,53)" fg:x="1247" fg:w="1"/><text x="99.6125%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3625%" y="165" width="0.0797%" height="15" fill="rgb(214,227,0)" fg:x="1247" fg:w="1"/><text x="99.6125%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.3625%" y="149" width="0.0797%" height="15" fill="rgb(228,103,26)" fg:x="1247" fg:w="1"/><text x="99.6125%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3625%" y="133" width="0.0797%" height="15" fill="rgb(254,177,53)" fg:x="1247" fg:w="1"/><text x="99.6125%" y="143.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="98.8845%" y="357" width="0.6375%" height="15" fill="rgb(208,201,34)" fg:x="1241" fg:w="8"/><text x="99.1345%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8 samples, 0.64%)</title><rect x="98.8845%" y="341" width="0.6375%" height="15" fill="rgb(212,39,5)" fg:x="1241" fg:w="8"/><text x="99.1345%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="98.8845%" y="325" width="0.6375%" height="15" fill="rgb(246,117,3)" fg:x="1241" fg:w="8"/><text x="99.1345%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (7 samples, 0.56%)</title><rect x="98.9641%" y="309" width="0.5578%" height="15" fill="rgb(244,118,39)" fg:x="1242" fg:w="7"/><text x="99.2141%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="99.0438%" y="293" width="0.4781%" height="15" fill="rgb(241,64,10)" fg:x="1243" fg:w="6"/><text x="99.2938%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="99.1235%" y="277" width="0.3984%" height="15" fill="rgb(229,39,44)" fg:x="1244" fg:w="5"/><text x="99.3735%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="99.1235%" y="261" width="0.3984%" height="15" fill="rgb(230,226,3)" fg:x="1244" fg:w="5"/><text x="99.3735%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.2829%" y="245" width="0.2390%" height="15" fill="rgb(222,13,42)" fg:x="1246" fg:w="3"/><text x="99.5329%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4422%" y="229" width="0.0797%" height="15" fill="rgb(247,180,54)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4422%" y="213" width="0.0797%" height="15" fill="rgb(205,96,16)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4422%" y="197" width="0.0797%" height="15" fill="rgb(205,100,21)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="207.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.4422%" y="181" width="0.0797%" height="15" fill="rgb(248,51,4)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (360 samples, 28.69%)</title><rect x="70.9163%" y="725" width="28.6853%" height="15" fill="rgb(217,197,30)" fg:x="890" fg:w="360"/><text x="71.1663%" y="735.50">&lt;engine::session::Session as kernel::actions::..</text></g><g><title>kernel::plugins::mw::apply_middleware (360 samples, 28.69%)</title><rect x="70.9163%" y="709" width="28.6853%" height="15" fill="rgb(240,179,40)" fg:x="890" fg:w="360"/><text x="71.1663%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (360 samples, 28.69%)</title><rect x="70.9163%" y="693" width="28.6853%" height="15" fill="rgb(212,185,35)" fg:x="890" fg:w="360"/><text x="71.1663%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (360 samples, 28.69%)</title><rect x="70.9163%" y="677" width="28.6853%" height="15" fill="rgb(251,222,31)" fg:x="890" fg:w="360"/><text x="71.1663%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (356 samples, 28.37%)</title><rect x="71.2351%" y="661" width="28.3665%" height="15" fill="rgb(208,140,36)" fg:x="894" fg:w="356"/><text x="71.4851%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (356 samples, 28.37%)</title><rect x="71.2351%" y="645" width="28.3665%" height="15" fill="rgb(220,148,1)" fg:x="894" fg:w="356"/><text x="71.4851%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (356 samples, 28.37%)</title><rect x="71.2351%" y="629" width="28.3665%" height="15" fill="rgb(254,4,28)" fg:x="894" fg:w="356"/><text x="71.4851%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (356 samples, 28.37%)</title><rect x="71.2351%" y="613" width="28.3665%" height="15" fill="rgb(222,185,44)" fg:x="894" fg:w="356"/><text x="71.4851%" y="623.50">core::ops::function::FnOnce::call_once{{vtable..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (356 samples, 28.37%)</title><rect x="71.2351%" y="597" width="28.3665%" height="15" fill="rgb(215,74,39)" fg:x="894" fg:w="356"/><text x="71.4851%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (356 samples, 28.37%)</title><rect x="71.2351%" y="581" width="28.3665%" height="15" fill="rgb(247,86,4)" fg:x="894" fg:w="356"/><text x="71.4851%" y="591.50">core::ops::function::FnOnce::call_once{{vtable..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (356 samples, 28.37%)</title><rect x="71.2351%" y="565" width="28.3665%" height="15" fill="rgb(231,105,32)" fg:x="894" fg:w="356"/><text x="71.4851%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (356 samples, 28.37%)</title><rect x="71.2351%" y="549" width="28.3665%" height="15" fill="rgb(222,65,35)" fg:x="894" fg:w="356"/><text x="71.4851%" y="559.50">&lt;engine::session::state::State as kernel::acti..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (356 samples, 28.37%)</title><rect x="71.2351%" y="533" width="28.3665%" height="15" fill="rgb(218,145,35)" fg:x="894" fg:w="356"/><text x="71.4851%" y="543.50">&lt;plugins_core::looking::actions::LookAction as..</text></g><g><title>plugins_core::looking::model::new_area_observation (356 samples, 28.37%)</title><rect x="71.2351%" y="517" width="28.3665%" height="15" fill="rgb(208,7,15)" fg:x="894" fg:w="356"/><text x="71.4851%" y="527.50">plugins_core::looking::model::new_area_observa..</text></g><g><title>kernel::model::entry::Entry::scope (12 samples, 0.96%)</title><rect x="98.6454%" y="501" width="0.9562%" height="15" fill="rgb(209,83,13)" fg:x="1238" fg:w="12"/><text x="98.8954%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (12 samples, 0.96%)</title><rect x="98.6454%" y="485" width="0.9562%" height="15" fill="rgb(218,3,10)" fg:x="1238" fg:w="12"/><text x="98.8954%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (12 samples, 0.96%)</title><rect x="98.6454%" y="469" width="0.9562%" height="15" fill="rgb(211,219,4)" fg:x="1238" fg:w="12"/><text x="98.8954%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.96%)</title><rect x="98.6454%" y="453" width="0.9562%" height="15" fill="rgb(228,194,12)" fg:x="1238" fg:w="12"/><text x="98.8954%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="98.6454%" y="437" width="0.9562%" height="15" fill="rgb(210,175,7)" fg:x="1238" fg:w="12"/><text x="98.8954%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (12 samples, 0.96%)</title><rect x="98.6454%" y="421" width="0.9562%" height="15" fill="rgb(243,132,6)" fg:x="1238" fg:w="12"/><text x="98.8954%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (12 samples, 0.96%)</title><rect x="98.6454%" y="405" width="0.9562%" height="15" fill="rgb(207,72,18)" fg:x="1238" fg:w="12"/><text x="98.8954%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="98.6454%" y="389" width="0.9562%" height="15" fill="rgb(236,1,18)" fg:x="1238" fg:w="12"/><text x="98.8954%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (9 samples, 0.72%)</title><rect x="98.8845%" y="373" width="0.7171%" height="15" fill="rgb(227,0,18)" fg:x="1241" fg:w="9"/><text x="99.1345%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5219%" y="357" width="0.0797%" height="15" fill="rgb(247,37,5)" fg:x="1249" fg:w="1"/><text x="99.7719%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5219%" y="341" width="0.0797%" height="15" fill="rgb(237,179,24)" fg:x="1249" fg:w="1"/><text x="99.7719%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5219%" y="325" width="0.0797%" height="15" fill="rgb(226,53,20)" fg:x="1249" fg:w="1"/><text x="99.7719%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5219%" y="309" width="0.0797%" height="15" fill="rgb(247,75,7)" fg:x="1249" fg:w="1"/><text x="99.7719%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5219%" y="293" width="0.0797%" height="15" fill="rgb(233,96,12)" fg:x="1249" fg:w="1"/><text x="99.7719%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6813%" y="549" width="0.0797%" height="15" fill="rgb(224,125,0)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6813%" y="533" width="0.0797%" height="15" fill="rgb(224,92,25)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6813%" y="517" width="0.0797%" height="15" fill="rgb(224,42,24)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6813%" y="501" width="0.0797%" height="15" fill="rgb(234,132,49)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.6016%" y="725" width="0.2390%" height="15" fill="rgb(248,100,35)" fg:x="1250" fg:w="3"/><text x="99.8516%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6016%" y="709" width="0.2390%" height="15" fill="rgb(239,94,40)" fg:x="1250" fg:w="3"/><text x="99.8516%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="99.6016%" y="693" width="0.2390%" height="15" fill="rgb(235,139,28)" fg:x="1250" fg:w="3"/><text x="99.8516%" y="703.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="99.6016%" y="677" width="0.2390%" height="15" fill="rgb(217,144,7)" fg:x="1250" fg:w="3"/><text x="99.8516%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.6016%" y="661" width="0.2390%" height="15" fill="rgb(227,55,4)" fg:x="1250" fg:w="3"/><text x="99.8516%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.6016%" y="645" width="0.2390%" height="15" fill="rgb(252,82,54)" fg:x="1250" fg:w="3"/><text x="99.8516%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.6016%" y="629" width="0.2390%" height="15" fill="rgb(245,172,4)" fg:x="1250" fg:w="3"/><text x="99.8516%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.6016%" y="613" width="0.2390%" height="15" fill="rgb(207,26,27)" fg:x="1250" fg:w="3"/><text x="99.8516%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6813%" y="597" width="0.1594%" height="15" fill="rgb(252,98,18)" fg:x="1251" fg:w="2"/><text x="99.9313%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6813%" y="581" width="0.1594%" height="15" fill="rgb(244,8,26)" fg:x="1251" fg:w="2"/><text x="99.9313%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6813%" y="565" width="0.1594%" height="15" fill="rgb(237,173,45)" fg:x="1251" fg:w="2"/><text x="99.9313%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7610%" y="549" width="0.0797%" height="15" fill="rgb(208,213,49)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7610%" y="533" width="0.0797%" height="15" fill="rgb(212,122,37)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7610%" y="517" width="0.0797%" height="15" fill="rgb(213,80,17)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8406%" y="677" width="0.0797%" height="15" fill="rgb(206,210,43)" fg:x="1253" fg:w="1"/><text x="100.0906%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8406%" y="661" width="0.0797%" height="15" fill="rgb(229,214,3)" fg:x="1253" fg:w="1"/><text x="100.0906%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8406%" y="645" width="0.0797%" height="15" fill="rgb(235,213,29)" fg:x="1253" fg:w="1"/><text x="100.0906%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8406%" y="629" width="0.0797%" height="15" fill="rgb(248,135,26)" fg:x="1253" fg:w="1"/><text x="100.0906%" y="639.50"></text></g><g><title>all (1,255 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(242,188,12)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-484c7248 (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(245,38,12)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1087.50">simple-484c7248</text></g><g><title>_start (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(218,42,13)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(238,132,49)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(209,196,19)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(244,131,22)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,255 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(223,18,34)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,255 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(252,124,54)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,255 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(229,106,42)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,255 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(221,129,1)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,255 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(229,74,15)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,255 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(210,206,50)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,255 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(251,114,31)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,255 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(215,225,28)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,255 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(237,109,14)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,255 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(230,13,37)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,255 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(231,40,28)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,255 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(231,202,18)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,255 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(225,33,18)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (448 samples, 35.70%)</title><rect x="64.3028%" y="789" width="35.6972%" height="15" fill="rgb(223,64,47)" fg:x="807" fg:w="448"/><text x="64.5528%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (448 samples, 35.70%)</title><rect x="64.3028%" y="773" width="35.6972%" height="15" fill="rgb(234,114,13)" fg:x="807" fg:w="448"/><text x="64.5528%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (448 samples, 35.70%)</title><rect x="64.3028%" y="757" width="35.6972%" height="15" fill="rgb(248,56,40)" fg:x="807" fg:w="448"/><text x="64.5528%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (366 samples, 29.16%)</title><rect x="70.8367%" y="741" width="29.1633%" height="15" fill="rgb(221,194,21)" fg:x="889" fg:w="366"/><text x="71.0867%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="99.8406%" y="725" width="0.1594%" height="15" fill="rgb(242,108,46)" fg:x="1253" fg:w="2"/><text x="100.0906%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.8406%" y="709" width="0.1594%" height="15" fill="rgb(220,106,10)" fg:x="1253" fg:w="2"/><text x="100.0906%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.8406%" y="693" width="0.1594%" height="15" fill="rgb(211,88,4)" fg:x="1253" fg:w="2"/><text x="100.0906%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.9203%" y="677" width="0.0797%" height="15" fill="rgb(214,95,34)" fg:x="1254" fg:w="1"/><text x="100.1703%" y="687.50"></text></g></svg></svg>