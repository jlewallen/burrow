<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1258"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0795%" y="725" width="0.0795%" height="15" fill="rgb(224,200,26)" fg:x="1" fg:w="1"/><text x="0.3295%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0795%" y="741" width="0.1590%" height="15" fill="rgb(247,104,53)" fg:x="1" fg:w="2"/><text x="0.3295%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1590%" y="725" width="0.0795%" height="15" fill="rgb(220,14,17)" fg:x="2" fg:w="1"/><text x="0.4090%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3180%" y="725" width="0.0795%" height="15" fill="rgb(230,140,40)" fg:x="4" fg:w="1"/><text x="0.5680%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3975%" y="677" width="0.0795%" height="15" fill="rgb(229,2,41)" fg:x="5" fg:w="1"/><text x="0.6475%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4769%" y="661" width="0.1590%" height="15" fill="rgb(232,89,16)" fg:x="6" fg:w="2"/><text x="0.7269%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.48%)</title><rect x="0.3975%" y="725" width="0.4769%" height="15" fill="rgb(247,59,52)" fg:x="5" fg:w="6"/><text x="0.6475%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.3975%" y="709" width="0.4769%" height="15" fill="rgb(226,110,21)" fg:x="5" fg:w="6"/><text x="0.6475%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.48%)</title><rect x="0.3975%" y="693" width="0.4769%" height="15" fill="rgb(224,176,43)" fg:x="5" fg:w="6"/><text x="0.6475%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.40%)</title><rect x="0.4769%" y="677" width="0.3975%" height="15" fill="rgb(221,73,6)" fg:x="6" fg:w="5"/><text x="0.7269%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="0.6359%" y="661" width="0.2385%" height="15" fill="rgb(232,78,19)" fg:x="8" fg:w="3"/><text x="0.8859%" y="671.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.6359%" y="645" width="0.2385%" height="15" fill="rgb(233,112,48)" fg:x="8" fg:w="3"/><text x="0.8859%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.9539%" y="693" width="0.1590%" height="15" fill="rgb(243,131,47)" fg:x="12" fg:w="2"/><text x="1.2039%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1924%" y="645" width="0.0795%" height="15" fill="rgb(226,51,1)" fg:x="15" fg:w="1"/><text x="1.4424%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3514%" y="629" width="0.0795%" height="15" fill="rgb(247,58,7)" fg:x="17" fg:w="1"/><text x="1.6014%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="1.4308%" y="597" width="0.2385%" height="15" fill="rgb(209,7,32)" fg:x="18" fg:w="3"/><text x="1.6808%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.5103%" y="581" width="0.1590%" height="15" fill="rgb(209,39,41)" fg:x="19" fg:w="2"/><text x="1.7603%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.5103%" y="565" width="0.1590%" height="15" fill="rgb(226,182,46)" fg:x="19" fg:w="2"/><text x="1.7603%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.5103%" y="549" width="0.1590%" height="15" fill="rgb(230,219,10)" fg:x="19" fg:w="2"/><text x="1.7603%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.6693%" y="597" width="0.1590%" height="15" fill="rgb(227,175,30)" fg:x="21" fg:w="2"/><text x="1.9193%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7488%" y="581" width="0.0795%" height="15" fill="rgb(217,2,50)" fg:x="22" fg:w="1"/><text x="1.9988%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="1.1924%" y="661" width="0.7154%" height="15" fill="rgb(229,160,0)" fg:x="15" fg:w="9"/><text x="1.4424%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="1.2719%" y="645" width="0.6359%" height="15" fill="rgb(207,78,37)" fg:x="16" fg:w="8"/><text x="1.5219%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.4308%" y="629" width="0.4769%" height="15" fill="rgb(225,57,0)" fg:x="18" fg:w="6"/><text x="1.6808%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.4308%" y="613" width="0.4769%" height="15" fill="rgb(232,154,2)" fg:x="18" fg:w="6"/><text x="1.6808%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.8283%" y="597" width="0.0795%" height="15" fill="rgb(241,212,25)" fg:x="23" fg:w="1"/><text x="2.0783%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.8283%" y="581" width="0.0795%" height="15" fill="rgb(226,69,20)" fg:x="23" fg:w="1"/><text x="2.0783%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8283%" y="565" width="0.0795%" height="15" fill="rgb(247,184,54)" fg:x="23" fg:w="1"/><text x="2.0783%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9078%" y="597" width="0.0795%" height="15" fill="rgb(210,145,0)" fg:x="24" fg:w="1"/><text x="2.1578%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.9078%" y="613" width="0.1590%" height="15" fill="rgb(253,82,12)" fg:x="24" fg:w="2"/><text x="2.1578%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.9873%" y="597" width="0.0795%" height="15" fill="rgb(245,42,11)" fg:x="25" fg:w="1"/><text x="2.2373%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0668%" y="613" width="0.0795%" height="15" fill="rgb(219,147,32)" fg:x="26" fg:w="1"/><text x="2.3168%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.1463%" y="613" width="0.1590%" height="15" fill="rgb(246,12,7)" fg:x="27" fg:w="2"/><text x="2.3963%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2258%" y="597" width="0.0795%" height="15" fill="rgb(243,50,9)" fg:x="28" fg:w="1"/><text x="2.4758%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="1.9078%" y="661" width="0.6359%" height="15" fill="rgb(219,149,6)" fg:x="24" fg:w="8"/><text x="2.1578%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="1.9078%" y="645" width="0.6359%" height="15" fill="rgb(241,51,42)" fg:x="24" fg:w="8"/><text x="2.1578%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="1.9078%" y="629" width="0.6359%" height="15" fill="rgb(226,128,27)" fg:x="24" fg:w="8"/><text x="2.1578%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.3052%" y="613" width="0.2385%" height="15" fill="rgb(244,144,4)" fg:x="29" fg:w="3"/><text x="2.5552%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.4642%" y="597" width="0.0795%" height="15" fill="rgb(221,4,13)" fg:x="31" fg:w="1"/><text x="2.7142%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.75%)</title><rect x="0.8744%" y="709" width="1.7488%" height="15" fill="rgb(208,170,28)" fg:x="11" fg:w="22"/><text x="1.1244%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (19 samples, 1.51%)</title><rect x="1.1129%" y="693" width="1.5103%" height="15" fill="rgb(226,131,13)" fg:x="14" fg:w="19"/><text x="1.3629%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.51%)</title><rect x="1.1129%" y="677" width="1.5103%" height="15" fill="rgb(215,72,41)" fg:x="14" fg:w="19"/><text x="1.3629%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5437%" y="661" width="0.0795%" height="15" fill="rgb(243,108,20)" fg:x="32" fg:w="1"/><text x="2.7937%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 2.46%)</title><rect x="0.2385%" y="741" width="2.4642%" height="15" fill="rgb(230,189,17)" fg:x="3" fg:w="31"/><text x="0.4885%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (23 samples, 1.83%)</title><rect x="0.8744%" y="725" width="1.8283%" height="15" fill="rgb(220,50,17)" fg:x="11" fg:w="23"/><text x="1.1244%" y="735.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6232%" y="709" width="0.0795%" height="15" fill="rgb(248,152,48)" fg:x="33" fg:w="1"/><text x="2.8732%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.7027%" y="693" width="0.0795%" height="15" fill="rgb(244,91,11)" fg:x="34" fg:w="1"/><text x="2.9527%" y="703.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.7822%" y="693" width="0.0795%" height="15" fill="rgb(220,157,5)" fg:x="35" fg:w="1"/><text x="3.0322%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.7822%" y="677" width="0.0795%" height="15" fill="rgb(253,137,8)" fg:x="35" fg:w="1"/><text x="3.0322%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.1002%" y="645" width="0.0795%" height="15" fill="rgb(217,137,51)" fg:x="39" fg:w="1"/><text x="3.3502%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.1002%" y="629" width="0.0795%" height="15" fill="rgb(218,209,53)" fg:x="39" fg:w="1"/><text x="3.3502%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.1002%" y="613" width="0.0795%" height="15" fill="rgb(249,137,25)" fg:x="39" fg:w="1"/><text x="3.3502%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.1002%" y="597" width="0.0795%" height="15" fill="rgb(239,155,26)" fg:x="39" fg:w="1"/><text x="3.3502%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.1797%" y="645" width="0.0795%" height="15" fill="rgb(227,85,46)" fg:x="40" fg:w="1"/><text x="3.4297%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.1797%" y="629" width="0.0795%" height="15" fill="rgb(251,107,43)" fg:x="40" fg:w="1"/><text x="3.4297%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.1797%" y="613" width="0.0795%" height="15" fill="rgb(234,170,33)" fg:x="40" fg:w="1"/><text x="3.4297%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.1797%" y="597" width="0.0795%" height="15" fill="rgb(206,29,35)" fg:x="40" fg:w="1"/><text x="3.4297%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.2591%" y="645" width="0.0795%" height="15" fill="rgb(227,138,25)" fg:x="41" fg:w="1"/><text x="3.5091%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.2591%" y="629" width="0.0795%" height="15" fill="rgb(249,131,35)" fg:x="41" fg:w="1"/><text x="3.5091%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.2591%" y="613" width="0.0795%" height="15" fill="rgb(239,6,40)" fg:x="41" fg:w="1"/><text x="3.5091%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.2591%" y="597" width="0.0795%" height="15" fill="rgb(246,136,47)" fg:x="41" fg:w="1"/><text x="3.5091%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.3386%" y="597" width="0.0795%" height="15" fill="rgb(253,58,26)" fg:x="42" fg:w="1"/><text x="3.5886%" y="607.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.08%)</title><rect x="3.3386%" y="581" width="0.0795%" height="15" fill="rgb(237,141,10)" fg:x="42" fg:w="1"/><text x="3.5886%" y="591.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.08%)</title><rect x="3.3386%" y="565" width="0.0795%" height="15" fill="rgb(234,156,12)" fg:x="42" fg:w="1"/><text x="3.5886%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.3386%" y="645" width="0.1590%" height="15" fill="rgb(243,224,36)" fg:x="42" fg:w="2"/><text x="3.5886%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.3386%" y="629" width="0.1590%" height="15" fill="rgb(205,229,51)" fg:x="42" fg:w="2"/><text x="3.5886%" y="639.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="3.3386%" y="613" width="0.1590%" height="15" fill="rgb(223,189,4)" fg:x="42" fg:w="2"/><text x="3.5886%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.4181%" y="597" width="0.0795%" height="15" fill="rgb(249,167,54)" fg:x="43" fg:w="1"/><text x="3.6681%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.4181%" y="581" width="0.0795%" height="15" fill="rgb(218,34,28)" fg:x="43" fg:w="1"/><text x="3.6681%" y="591.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="3.4181%" y="565" width="0.0795%" height="15" fill="rgb(232,109,42)" fg:x="43" fg:w="1"/><text x="3.6681%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="3.4181%" y="549" width="0.0795%" height="15" fill="rgb(248,214,46)" fg:x="43" fg:w="1"/><text x="3.6681%" y="559.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.4976%" y="613" width="0.0795%" height="15" fill="rgb(244,216,40)" fg:x="44" fg:w="1"/><text x="3.7476%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.4976%" y="597" width="0.0795%" height="15" fill="rgb(231,226,31)" fg:x="44" fg:w="1"/><text x="3.7476%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9 samples, 0.72%)</title><rect x="2.9412%" y="661" width="0.7154%" height="15" fill="rgb(238,38,43)" fg:x="37" fg:w="9"/><text x="3.1912%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="3.4976%" y="645" width="0.1590%" height="15" fill="rgb(208,88,43)" fg:x="44" fg:w="2"/><text x="3.7476%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="3.4976%" y="629" width="0.1590%" height="15" fill="rgb(205,136,37)" fg:x="44" fg:w="2"/><text x="3.7476%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.5771%" y="613" width="0.0795%" height="15" fill="rgb(237,34,14)" fg:x="45" fg:w="1"/><text x="3.8271%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.6566%" y="645" width="0.0795%" height="15" fill="rgb(236,193,44)" fg:x="46" fg:w="1"/><text x="3.9066%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="3.6566%" y="661" width="0.1590%" height="15" fill="rgb(231,48,10)" fg:x="46" fg:w="2"/><text x="3.9066%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.7361%" y="645" width="0.0795%" height="15" fill="rgb(213,141,34)" fg:x="47" fg:w="1"/><text x="3.9861%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.7361%" y="629" width="0.0795%" height="15" fill="rgb(249,130,34)" fg:x="47" fg:w="1"/><text x="3.9861%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.7361%" y="613" width="0.0795%" height="15" fill="rgb(219,42,41)" fg:x="47" fg:w="1"/><text x="3.9861%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7361%" y="597" width="0.0795%" height="15" fill="rgb(224,100,54)" fg:x="47" fg:w="1"/><text x="3.9861%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7361%" y="581" width="0.0795%" height="15" fill="rgb(229,200,27)" fg:x="47" fg:w="1"/><text x="3.9861%" y="591.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="3.7361%" y="565" width="0.0795%" height="15" fill="rgb(217,118,10)" fg:x="47" fg:w="1"/><text x="3.9861%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.7361%" y="549" width="0.0795%" height="15" fill="rgb(206,22,3)" fg:x="47" fg:w="1"/><text x="3.9861%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.7361%" y="533" width="0.0795%" height="15" fill="rgb(232,163,46)" fg:x="47" fg:w="1"/><text x="3.9861%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.7361%" y="517" width="0.0795%" height="15" fill="rgb(206,95,13)" fg:x="47" fg:w="1"/><text x="3.9861%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.7361%" y="501" width="0.0795%" height="15" fill="rgb(253,154,18)" fg:x="47" fg:w="1"/><text x="3.9861%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="3.7361%" y="485" width="0.0795%" height="15" fill="rgb(219,32,23)" fg:x="47" fg:w="1"/><text x="3.9861%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.7361%" y="469" width="0.0795%" height="15" fill="rgb(230,191,45)" fg:x="47" fg:w="1"/><text x="3.9861%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="3.7361%" y="453" width="0.0795%" height="15" fill="rgb(229,64,36)" fg:x="47" fg:w="1"/><text x="3.9861%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.7361%" y="437" width="0.0795%" height="15" fill="rgb(205,129,25)" fg:x="47" fg:w="1"/><text x="3.9861%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="3.7361%" y="421" width="0.0795%" height="15" fill="rgb(254,112,7)" fg:x="47" fg:w="1"/><text x="3.9861%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="3.7361%" y="405" width="0.0795%" height="15" fill="rgb(226,53,48)" fg:x="47" fg:w="1"/><text x="3.9861%" y="415.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="3.7361%" y="389" width="0.0795%" height="15" fill="rgb(214,153,38)" fg:x="47" fg:w="1"/><text x="3.9861%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.7361%" y="373" width="0.0795%" height="15" fill="rgb(243,101,7)" fg:x="47" fg:w="1"/><text x="3.9861%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8156%" y="645" width="0.0795%" height="15" fill="rgb(240,140,22)" fg:x="48" fg:w="1"/><text x="4.0656%" y="655.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="3.8951%" y="645" width="0.0795%" height="15" fill="rgb(235,114,2)" fg:x="49" fg:w="1"/><text x="4.1451%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8951%" y="629" width="0.0795%" height="15" fill="rgb(242,59,12)" fg:x="49" fg:w="1"/><text x="4.1451%" y="639.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="4.0541%" y="597" width="0.0795%" height="15" fill="rgb(252,134,9)" fg:x="51" fg:w="1"/><text x="4.3041%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="4.0541%" y="581" width="0.0795%" height="15" fill="rgb(236,4,44)" fg:x="51" fg:w="1"/><text x="4.3041%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="4.0541%" y="565" width="0.0795%" height="15" fill="rgb(254,172,41)" fg:x="51" fg:w="1"/><text x="4.3041%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.0541%" y="549" width="0.0795%" height="15" fill="rgb(244,63,20)" fg:x="51" fg:w="1"/><text x="4.3041%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="4.0541%" y="533" width="0.0795%" height="15" fill="rgb(250,73,31)" fg:x="51" fg:w="1"/><text x="4.3041%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="4.0541%" y="517" width="0.0795%" height="15" fill="rgb(241,38,36)" fg:x="51" fg:w="1"/><text x="4.3041%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="4.0541%" y="501" width="0.0795%" height="15" fill="rgb(245,211,2)" fg:x="51" fg:w="1"/><text x="4.3041%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="4.0541%" y="485" width="0.0795%" height="15" fill="rgb(206,120,28)" fg:x="51" fg:w="1"/><text x="4.3041%" y="495.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="4.1335%" y="549" width="0.0795%" height="15" fill="rgb(211,59,34)" fg:x="52" fg:w="1"/><text x="4.3835%" y="559.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="4.1335%" y="533" width="0.0795%" height="15" fill="rgb(233,168,5)" fg:x="52" fg:w="1"/><text x="4.3835%" y="543.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="4.1335%" y="517" width="0.0795%" height="15" fill="rgb(234,33,13)" fg:x="52" fg:w="1"/><text x="4.3835%" y="527.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="3.9746%" y="629" width="0.4769%" height="15" fill="rgb(231,150,26)" fg:x="50" fg:w="6"/><text x="4.2246%" y="639.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="4.0541%" y="613" width="0.3975%" height="15" fill="rgb(217,191,4)" fg:x="51" fg:w="5"/><text x="4.3041%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="4.1335%" y="597" width="0.3180%" height="15" fill="rgb(246,198,38)" fg:x="52" fg:w="4"/><text x="4.3835%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="4.1335%" y="581" width="0.3180%" height="15" fill="rgb(245,64,37)" fg:x="52" fg:w="4"/><text x="4.3835%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="4.1335%" y="565" width="0.3180%" height="15" fill="rgb(250,30,36)" fg:x="52" fg:w="4"/><text x="4.3835%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="4.2130%" y="549" width="0.2385%" height="15" fill="rgb(217,86,53)" fg:x="53" fg:w="3"/><text x="4.4630%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="4.2925%" y="533" width="0.1590%" height="15" fill="rgb(228,157,16)" fg:x="54" fg:w="2"/><text x="4.5425%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="4.2925%" y="517" width="0.1590%" height="15" fill="rgb(217,59,31)" fg:x="54" fg:w="2"/><text x="4.5425%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="4.2925%" y="501" width="0.1590%" height="15" fill="rgb(237,138,41)" fg:x="54" fg:w="2"/><text x="4.5425%" y="511.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.4515%" y="597" width="0.0795%" height="15" fill="rgb(227,91,49)" fg:x="56" fg:w="1"/><text x="4.7015%" y="607.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="4.5310%" y="597" width="0.0795%" height="15" fill="rgb(247,21,44)" fg:x="57" fg:w="1"/><text x="4.7810%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.87%)</title><rect x="3.8156%" y="661" width="0.8744%" height="15" fill="rgb(219,210,51)" fg:x="48" fg:w="11"/><text x="4.0656%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (9 samples, 0.72%)</title><rect x="3.9746%" y="645" width="0.7154%" height="15" fill="rgb(209,140,6)" fg:x="50" fg:w="9"/><text x="4.2246%" y="655.50"></text></g><g><title>glob::glob (3 samples, 0.24%)</title><rect x="4.4515%" y="629" width="0.2385%" height="15" fill="rgb(221,188,24)" fg:x="56" fg:w="3"/><text x="4.7015%" y="639.50"></text></g><g><title>glob::glob_with (3 samples, 0.24%)</title><rect x="4.4515%" y="613" width="0.2385%" height="15" fill="rgb(232,154,20)" fg:x="56" fg:w="3"/><text x="4.7015%" y="623.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (1 samples, 0.08%)</title><rect x="4.6105%" y="597" width="0.0795%" height="15" fill="rgb(244,137,50)" fg:x="58" fg:w="1"/><text x="4.8605%" y="607.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="4.6105%" y="581" width="0.0795%" height="15" fill="rgb(225,185,43)" fg:x="58" fg:w="1"/><text x="4.8605%" y="591.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="4.6105%" y="565" width="0.0795%" height="15" fill="rgb(213,205,38)" fg:x="58" fg:w="1"/><text x="4.8605%" y="575.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.08%)</title><rect x="4.6105%" y="549" width="0.0795%" height="15" fill="rgb(236,73,12)" fg:x="58" fg:w="1"/><text x="4.8605%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7695%" y="645" width="0.0795%" height="15" fill="rgb(235,219,13)" fg:x="60" fg:w="1"/><text x="5.0195%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (25 samples, 1.99%)</title><rect x="2.9412%" y="677" width="1.9873%" height="15" fill="rgb(218,59,36)" fg:x="37" fg:w="25"/><text x="3.1912%" y="687.50">k..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="4.6900%" y="661" width="0.2385%" height="15" fill="rgb(205,110,39)" fg:x="59" fg:w="3"/><text x="4.9400%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="4.8490%" y="645" width="0.0795%" height="15" fill="rgb(218,206,42)" fg:x="61" fg:w="1"/><text x="5.0990%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8490%" y="629" width="0.0795%" height="15" fill="rgb(248,125,24)" fg:x="61" fg:w="1"/><text x="5.0990%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.9285%" y="629" width="0.0795%" height="15" fill="rgb(242,28,27)" fg:x="62" fg:w="1"/><text x="5.1785%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (30 samples, 2.38%)</title><rect x="2.7027%" y="741" width="2.3847%" height="15" fill="rgb(216,228,15)" fg:x="34" fg:w="30"/><text x="2.9527%" y="751.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (30 samples, 2.38%)</title><rect x="2.7027%" y="725" width="2.3847%" height="15" fill="rgb(235,116,46)" fg:x="34" fg:w="30"/><text x="2.9527%" y="735.50">en..</text></g><g><title>engine::session::Session::new (30 samples, 2.38%)</title><rect x="2.7027%" y="709" width="2.3847%" height="15" fill="rgb(224,18,32)" fg:x="34" fg:w="30"/><text x="2.9527%" y="719.50">en..</text></g><g><title>engine::session::Session::initialize (28 samples, 2.23%)</title><rect x="2.8617%" y="693" width="2.2258%" height="15" fill="rgb(252,5,12)" fg:x="36" fg:w="28"/><text x="3.1117%" y="703.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="4.9285%" y="677" width="0.1590%" height="15" fill="rgb(251,36,5)" fg:x="62" fg:w="2"/><text x="5.1785%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.9285%" y="661" width="0.1590%" height="15" fill="rgb(217,53,14)" fg:x="62" fg:w="2"/><text x="5.1785%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::middleware (2 samples, 0.16%)</title><rect x="4.9285%" y="645" width="0.1590%" height="15" fill="rgb(215,86,45)" fg:x="62" fg:w="2"/><text x="5.1785%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0079%" y="629" width="0.0795%" height="15" fill="rgb(242,169,11)" fg:x="63" fg:w="1"/><text x="5.2579%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1669%" y="677" width="0.0795%" height="15" fill="rgb(211,213,45)" fg:x="65" fg:w="1"/><text x="5.4169%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="5.0874%" y="725" width="0.2385%" height="15" fill="rgb(205,88,11)" fg:x="64" fg:w="3"/><text x="5.3374%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="5.0874%" y="709" width="0.2385%" height="15" fill="rgb(252,69,26)" fg:x="64" fg:w="3"/><text x="5.3374%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="5.0874%" y="693" width="0.2385%" height="15" fill="rgb(246,123,37)" fg:x="64" fg:w="3"/><text x="5.3374%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.2464%" y="677" width="0.0795%" height="15" fill="rgb(212,205,5)" fg:x="66" fg:w="1"/><text x="5.4964%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2464%" y="661" width="0.0795%" height="15" fill="rgb(253,148,0)" fg:x="66" fg:w="1"/><text x="5.4964%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="5.3259%" y="725" width="0.0795%" height="15" fill="rgb(239,22,4)" fg:x="67" fg:w="1"/><text x="5.5759%" y="735.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.4054%" y="709" width="0.0795%" height="15" fill="rgb(226,26,53)" fg:x="68" fg:w="1"/><text x="5.6554%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4054%" y="693" width="0.0795%" height="15" fill="rgb(225,229,45)" fg:x="68" fg:w="1"/><text x="5.6554%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4054%" y="677" width="0.0795%" height="15" fill="rgb(220,60,37)" fg:x="68" fg:w="1"/><text x="5.6554%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.4054%" y="661" width="0.0795%" height="15" fill="rgb(217,180,35)" fg:x="68" fg:w="1"/><text x="5.6554%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.4054%" y="645" width="0.0795%" height="15" fill="rgb(229,7,53)" fg:x="68" fg:w="1"/><text x="5.6554%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.4054%" y="629" width="0.0795%" height="15" fill="rgb(254,137,3)" fg:x="68" fg:w="1"/><text x="5.6554%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.4054%" y="613" width="0.0795%" height="15" fill="rgb(215,140,41)" fg:x="68" fg:w="1"/><text x="5.6554%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.4054%" y="597" width="0.0795%" height="15" fill="rgb(250,80,15)" fg:x="68" fg:w="1"/><text x="5.6554%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.4054%" y="581" width="0.0795%" height="15" fill="rgb(252,191,6)" fg:x="68" fg:w="1"/><text x="5.6554%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.4054%" y="565" width="0.0795%" height="15" fill="rgb(246,217,18)" fg:x="68" fg:w="1"/><text x="5.6554%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.4054%" y="549" width="0.0795%" height="15" fill="rgb(223,93,7)" fg:x="68" fg:w="1"/><text x="5.6554%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.4054%" y="533" width="0.0795%" height="15" fill="rgb(225,55,52)" fg:x="68" fg:w="1"/><text x="5.6554%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4054%" y="517" width="0.0795%" height="15" fill="rgb(240,31,24)" fg:x="68" fg:w="1"/><text x="5.6554%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.4849%" y="677" width="0.0795%" height="15" fill="rgb(205,56,52)" fg:x="69" fg:w="1"/><text x="5.7349%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.4849%" y="661" width="0.0795%" height="15" fill="rgb(246,146,12)" fg:x="69" fg:w="1"/><text x="5.7349%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4849%" y="645" width="0.0795%" height="15" fill="rgb(239,84,36)" fg:x="69" fg:w="1"/><text x="5.7349%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.6439%" y="613" width="0.0795%" height="15" fill="rgb(207,41,40)" fg:x="71" fg:w="1"/><text x="5.8939%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6439%" y="597" width="0.0795%" height="15" fill="rgb(241,179,25)" fg:x="71" fg:w="1"/><text x="5.8939%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6439%" y="581" width="0.0795%" height="15" fill="rgb(210,0,34)" fg:x="71" fg:w="1"/><text x="5.8939%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6439%" y="565" width="0.0795%" height="15" fill="rgb(225,217,29)" fg:x="71" fg:w="1"/><text x="5.8939%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.7234%" y="597" width="0.1590%" height="15" fill="rgb(216,191,38)" fg:x="72" fg:w="2"/><text x="5.9734%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.9618%" y="581" width="0.0795%" height="15" fill="rgb(232,140,52)" fg:x="75" fg:w="1"/><text x="6.2118%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9618%" y="565" width="0.0795%" height="15" fill="rgb(223,158,51)" fg:x="75" fg:w="1"/><text x="6.2118%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9618%" y="549" width="0.0795%" height="15" fill="rgb(235,29,51)" fg:x="75" fg:w="1"/><text x="6.2118%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9618%" y="533" width="0.0795%" height="15" fill="rgb(215,181,18)" fg:x="75" fg:w="1"/><text x="6.2118%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.0413%" y="581" width="0.0795%" height="15" fill="rgb(227,125,34)" fg:x="76" fg:w="1"/><text x="6.2913%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0413%" y="565" width="0.0795%" height="15" fill="rgb(230,197,49)" fg:x="76" fg:w="1"/><text x="6.2913%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.1208%" y="565" width="0.0795%" height="15" fill="rgb(239,141,16)" fg:x="77" fg:w="1"/><text x="6.3708%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.2003%" y="549" width="0.0795%" height="15" fill="rgb(225,105,43)" fg:x="78" fg:w="1"/><text x="6.4503%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2003%" y="533" width="0.0795%" height="15" fill="rgb(214,131,14)" fg:x="78" fg:w="1"/><text x="6.4503%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2798%" y="549" width="0.0795%" height="15" fill="rgb(229,177,11)" fg:x="79" fg:w="1"/><text x="6.5298%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2798%" y="533" width="0.0795%" height="15" fill="rgb(231,180,14)" fg:x="79" fg:w="1"/><text x="6.5298%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.2003%" y="565" width="0.2385%" height="15" fill="rgb(232,88,2)" fg:x="78" fg:w="3"/><text x="6.4503%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3593%" y="549" width="0.0795%" height="15" fill="rgb(205,220,8)" fg:x="80" fg:w="1"/><text x="6.6093%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="6.1208%" y="581" width="0.3975%" height="15" fill="rgb(225,23,53)" fg:x="77" fg:w="5"/><text x="6.3708%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4388%" y="565" width="0.0795%" height="15" fill="rgb(213,62,29)" fg:x="81" fg:w="1"/><text x="6.6888%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4388%" y="549" width="0.0795%" height="15" fill="rgb(227,75,7)" fg:x="81" fg:w="1"/><text x="6.6888%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4388%" y="533" width="0.0795%" height="15" fill="rgb(207,105,14)" fg:x="81" fg:w="1"/><text x="6.6888%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="5.8824%" y="597" width="0.7154%" height="15" fill="rgb(245,62,29)" fg:x="74" fg:w="9"/><text x="6.1324%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5183%" y="581" width="0.0795%" height="15" fill="rgb(236,202,4)" fg:x="82" fg:w="1"/><text x="6.7683%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.5183%" y="565" width="0.0795%" height="15" fill="rgb(250,67,1)" fg:x="82" fg:w="1"/><text x="6.7683%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.11%)</title><rect x="5.5644%" y="629" width="1.1129%" height="15" fill="rgb(253,115,44)" fg:x="70" fg:w="14"/><text x="5.8144%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.95%)</title><rect x="5.7234%" y="613" width="0.9539%" height="15" fill="rgb(251,139,18)" fg:x="72" fg:w="12"/><text x="5.9734%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5978%" y="597" width="0.0795%" height="15" fill="rgb(218,22,32)" fg:x="83" fg:w="1"/><text x="6.8478%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.5978%" y="581" width="0.0795%" height="15" fill="rgb(243,53,5)" fg:x="83" fg:w="1"/><text x="6.8478%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.6773%" y="581" width="0.0795%" height="15" fill="rgb(227,56,16)" fg:x="84" fg:w="1"/><text x="6.9273%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.7568%" y="549" width="0.0795%" height="15" fill="rgb(245,53,0)" fg:x="85" fg:w="1"/><text x="7.0068%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.6773%" y="629" width="0.2385%" height="15" fill="rgb(216,170,35)" fg:x="84" fg:w="3"/><text x="6.9273%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="6.6773%" y="613" width="0.2385%" height="15" fill="rgb(211,200,8)" fg:x="84" fg:w="3"/><text x="6.9273%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.6773%" y="597" width="0.2385%" height="15" fill="rgb(228,204,44)" fg:x="84" fg:w="3"/><text x="6.9273%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.7568%" y="581" width="0.1590%" height="15" fill="rgb(214,121,17)" fg:x="85" fg:w="2"/><text x="7.0068%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.7568%" y="565" width="0.1590%" height="15" fill="rgb(233,64,38)" fg:x="85" fg:w="2"/><text x="7.0068%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8362%" y="549" width="0.0795%" height="15" fill="rgb(253,54,19)" fg:x="86" fg:w="1"/><text x="7.0862%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9157%" y="597" width="0.0795%" height="15" fill="rgb(253,94,18)" fg:x="87" fg:w="1"/><text x="7.1657%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9157%" y="581" width="0.0795%" height="15" fill="rgb(227,57,52)" fg:x="87" fg:w="1"/><text x="7.1657%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="6.9952%" y="597" width="0.0795%" height="15" fill="rgb(230,228,50)" fg:x="88" fg:w="1"/><text x="7.2452%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.9952%" y="581" width="0.0795%" height="15" fill="rgb(217,205,27)" fg:x="88" fg:w="1"/><text x="7.2452%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.9952%" y="565" width="0.0795%" height="15" fill="rgb(252,71,50)" fg:x="88" fg:w="1"/><text x="7.2452%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="6.9157%" y="613" width="0.3180%" height="15" fill="rgb(209,86,4)" fg:x="87" fg:w="4"/><text x="7.1657%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="7.0747%" y="597" width="0.1590%" height="15" fill="rgb(229,94,0)" fg:x="89" fg:w="2"/><text x="7.3247%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.0747%" y="581" width="0.1590%" height="15" fill="rgb(252,223,21)" fg:x="89" fg:w="2"/><text x="7.3247%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.1542%" y="565" width="0.0795%" height="15" fill="rgb(230,210,4)" fg:x="90" fg:w="1"/><text x="7.4042%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="7.1542%" y="549" width="0.0795%" height="15" fill="rgb(240,149,38)" fg:x="90" fg:w="1"/><text x="7.4042%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="7.1542%" y="533" width="0.0795%" height="15" fill="rgb(254,105,20)" fg:x="90" fg:w="1"/><text x="7.4042%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="7.2337%" y="597" width="0.0795%" height="15" fill="rgb(253,87,46)" fg:x="91" fg:w="1"/><text x="7.4837%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3132%" y="581" width="0.0795%" height="15" fill="rgb(253,116,33)" fg:x="92" fg:w="1"/><text x="7.5632%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3132%" y="565" width="0.0795%" height="15" fill="rgb(229,198,5)" fg:x="92" fg:w="1"/><text x="7.5632%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.3132%" y="549" width="0.0795%" height="15" fill="rgb(242,38,37)" fg:x="92" fg:w="1"/><text x="7.5632%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.3927%" y="549" width="0.0795%" height="15" fill="rgb(242,69,53)" fg:x="93" fg:w="1"/><text x="7.6427%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4722%" y="485" width="0.0795%" height="15" fill="rgb(249,80,16)" fg:x="94" fg:w="1"/><text x="7.7222%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="7.4722%" y="533" width="0.2385%" height="15" fill="rgb(206,128,11)" fg:x="94" fg:w="3"/><text x="7.7222%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="7.4722%" y="517" width="0.2385%" height="15" fill="rgb(212,35,20)" fg:x="94" fg:w="3"/><text x="7.7222%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="7.4722%" y="501" width="0.2385%" height="15" fill="rgb(236,79,13)" fg:x="94" fg:w="3"/><text x="7.7222%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.5517%" y="485" width="0.1590%" height="15" fill="rgb(233,123,3)" fg:x="95" fg:w="2"/><text x="7.8017%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.6312%" y="469" width="0.0795%" height="15" fill="rgb(214,93,52)" fg:x="96" fg:w="1"/><text x="7.8812%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6312%" y="453" width="0.0795%" height="15" fill="rgb(251,37,40)" fg:x="96" fg:w="1"/><text x="7.8812%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.6312%" y="437" width="0.0795%" height="15" fill="rgb(227,80,54)" fg:x="96" fg:w="1"/><text x="7.8812%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6312%" y="421" width="0.0795%" height="15" fill="rgb(254,48,11)" fg:x="96" fg:w="1"/><text x="7.8812%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6312%" y="405" width="0.0795%" height="15" fill="rgb(235,193,26)" fg:x="96" fg:w="1"/><text x="7.8812%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="7.4722%" y="549" width="0.3975%" height="15" fill="rgb(229,99,21)" fg:x="94" fg:w="5"/><text x="7.7222%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.7107%" y="533" width="0.1590%" height="15" fill="rgb(211,140,41)" fg:x="97" fg:w="2"/><text x="7.9607%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7901%" y="517" width="0.0795%" height="15" fill="rgb(240,227,30)" fg:x="98" fg:w="1"/><text x="8.0401%" y="527.50"></text></g><g><title>engine::session::Session::flush (32 samples, 2.54%)</title><rect x="5.4054%" y="725" width="2.5437%" height="15" fill="rgb(215,224,45)" fg:x="68" fg:w="32"/><text x="5.6554%" y="735.50">en..</text></g><g><title>engine::session::state::State::close (31 samples, 2.46%)</title><rect x="5.4849%" y="709" width="2.4642%" height="15" fill="rgb(206,123,31)" fg:x="69" fg:w="31"/><text x="5.7349%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (31 samples, 2.46%)</title><rect x="5.4849%" y="693" width="2.4642%" height="15" fill="rgb(210,138,16)" fg:x="69" fg:w="31"/><text x="5.7349%" y="703.50">en..</text></g><g><title>core::iter::adapters::try_process (30 samples, 2.38%)</title><rect x="5.5644%" y="677" width="2.3847%" height="15" fill="rgb(228,57,28)" fg:x="70" fg:w="30"/><text x="5.8144%" y="687.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 2.38%)</title><rect x="5.5644%" y="661" width="2.3847%" height="15" fill="rgb(242,170,10)" fg:x="70" fg:w="30"/><text x="5.8144%" y="671.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (30 samples, 2.38%)</title><rect x="5.5644%" y="645" width="2.3847%" height="15" fill="rgb(228,214,39)" fg:x="70" fg:w="30"/><text x="5.8144%" y="655.50">en..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.03%)</title><rect x="6.9157%" y="629" width="1.0334%" height="15" fill="rgb(218,179,33)" fg:x="87" fg:w="13"/><text x="7.1657%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="7.2337%" y="613" width="0.7154%" height="15" fill="rgb(235,193,39)" fg:x="91" fg:w="9"/><text x="7.4837%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="7.3132%" y="597" width="0.6359%" height="15" fill="rgb(219,221,36)" fg:x="92" fg:w="8"/><text x="7.5632%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="7.3927%" y="581" width="0.5564%" height="15" fill="rgb(248,218,19)" fg:x="93" fg:w="7"/><text x="7.6427%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="7.3927%" y="565" width="0.5564%" height="15" fill="rgb(205,50,9)" fg:x="93" fg:w="7"/><text x="7.6427%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.8696%" y="549" width="0.0795%" height="15" fill="rgb(238,81,28)" fg:x="99" fg:w="1"/><text x="8.1196%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8696%" y="533" width="0.0795%" height="15" fill="rgb(235,110,19)" fg:x="99" fg:w="1"/><text x="8.1196%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="7.9491%" y="725" width="0.0795%" height="15" fill="rgb(214,7,14)" fg:x="100" fg:w="1"/><text x="8.1991%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="7.9491%" y="709" width="0.0795%" height="15" fill="rgb(211,77,3)" fg:x="100" fg:w="1"/><text x="8.1991%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.9491%" y="693" width="0.0795%" height="15" fill="rgb(229,5,9)" fg:x="100" fg:w="1"/><text x="8.1991%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.9491%" y="677" width="0.0795%" height="15" fill="rgb(225,90,11)" fg:x="100" fg:w="1"/><text x="8.1991%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9491%" y="661" width="0.0795%" height="15" fill="rgb(242,56,8)" fg:x="100" fg:w="1"/><text x="8.1991%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.9491%" y="645" width="0.0795%" height="15" fill="rgb(249,212,39)" fg:x="100" fg:w="1"/><text x="8.1991%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0286%" y="645" width="0.0795%" height="15" fill="rgb(236,90,9)" fg:x="101" fg:w="1"/><text x="8.2786%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0286%" y="629" width="0.0795%" height="15" fill="rgb(206,88,35)" fg:x="101" fg:w="1"/><text x="8.2786%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0286%" y="613" width="0.0795%" height="15" fill="rgb(205,126,30)" fg:x="101" fg:w="1"/><text x="8.2786%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.0286%" y="597" width="0.0795%" height="15" fill="rgb(230,176,12)" fg:x="101" fg:w="1"/><text x="8.2786%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.0286%" y="581" width="0.0795%" height="15" fill="rgb(243,19,9)" fg:x="101" fg:w="1"/><text x="8.2786%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.0286%" y="565" width="0.0795%" height="15" fill="rgb(245,171,17)" fg:x="101" fg:w="1"/><text x="8.2786%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.0286%" y="549" width="0.0795%" height="15" fill="rgb(227,52,21)" fg:x="101" fg:w="1"/><text x="8.2786%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.0286%" y="533" width="0.0795%" height="15" fill="rgb(238,69,14)" fg:x="101" fg:w="1"/><text x="8.2786%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.0286%" y="517" width="0.0795%" height="15" fill="rgb(241,156,39)" fg:x="101" fg:w="1"/><text x="8.2786%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.0286%" y="501" width="0.0795%" height="15" fill="rgb(212,227,28)" fg:x="101" fg:w="1"/><text x="8.2786%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.0286%" y="485" width="0.0795%" height="15" fill="rgb(209,118,27)" fg:x="101" fg:w="1"/><text x="8.2786%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.0286%" y="469" width="0.0795%" height="15" fill="rgb(226,102,5)" fg:x="101" fg:w="1"/><text x="8.2786%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0286%" y="453" width="0.0795%" height="15" fill="rgb(223,34,3)" fg:x="101" fg:w="1"/><text x="8.2786%" y="463.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.0286%" y="709" width="0.1590%" height="15" fill="rgb(221,81,38)" fg:x="101" fg:w="2"/><text x="8.2786%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="8.0286%" y="693" width="0.1590%" height="15" fill="rgb(236,219,28)" fg:x="101" fg:w="2"/><text x="8.2786%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.0286%" y="677" width="0.1590%" height="15" fill="rgb(213,200,14)" fg:x="101" fg:w="2"/><text x="8.2786%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.0286%" y="661" width="0.1590%" height="15" fill="rgb(240,33,19)" fg:x="101" fg:w="2"/><text x="8.2786%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1081%" y="645" width="0.0795%" height="15" fill="rgb(233,113,27)" fg:x="102" fg:w="1"/><text x="8.3581%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="8.1876%" y="693" width="0.0795%" height="15" fill="rgb(220,221,18)" fg:x="103" fg:w="1"/><text x="8.4376%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="8.1876%" y="677" width="0.0795%" height="15" fill="rgb(238,92,8)" fg:x="103" fg:w="1"/><text x="8.4376%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.1876%" y="661" width="0.0795%" height="15" fill="rgb(222,164,16)" fg:x="103" fg:w="1"/><text x="8.4376%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1876%" y="645" width="0.0795%" height="15" fill="rgb(241,119,3)" fg:x="103" fg:w="1"/><text x="8.4376%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.1876%" y="629" width="0.0795%" height="15" fill="rgb(241,44,8)" fg:x="103" fg:w="1"/><text x="8.4376%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1876%" y="613" width="0.0795%" height="15" fill="rgb(230,36,40)" fg:x="103" fg:w="1"/><text x="8.4376%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.1876%" y="597" width="0.0795%" height="15" fill="rgb(243,16,36)" fg:x="103" fg:w="1"/><text x="8.4376%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.1876%" y="581" width="0.0795%" height="15" fill="rgb(231,4,26)" fg:x="103" fg:w="1"/><text x="8.4376%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3466%" y="629" width="0.0795%" height="15" fill="rgb(240,9,31)" fg:x="105" fg:w="1"/><text x="8.5966%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="8.3466%" y="645" width="0.1590%" height="15" fill="rgb(207,173,15)" fg:x="105" fg:w="2"/><text x="8.5966%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4261%" y="629" width="0.0795%" height="15" fill="rgb(224,192,53)" fg:x="106" fg:w="1"/><text x="8.6761%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4261%" y="613" width="0.0795%" height="15" fill="rgb(223,67,28)" fg:x="106" fg:w="1"/><text x="8.6761%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="8.2671%" y="677" width="0.3180%" height="15" fill="rgb(211,20,47)" fg:x="104" fg:w="4"/><text x="8.5171%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="8.2671%" y="661" width="0.3180%" height="15" fill="rgb(240,228,2)" fg:x="104" fg:w="4"/><text x="8.5171%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="8.5056%" y="645" width="0.0795%" height="15" fill="rgb(248,151,12)" fg:x="107" fg:w="1"/><text x="8.7556%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5056%" y="629" width="0.0795%" height="15" fill="rgb(244,8,39)" fg:x="107" fg:w="1"/><text x="8.7556%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5851%" y="645" width="0.0795%" height="15" fill="rgb(222,26,8)" fg:x="108" fg:w="1"/><text x="8.8351%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="8.2671%" y="693" width="0.5564%" height="15" fill="rgb(213,106,44)" fg:x="104" fg:w="7"/><text x="8.5171%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="8.5851%" y="677" width="0.2385%" height="15" fill="rgb(214,129,20)" fg:x="108" fg:w="3"/><text x="8.8351%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="8.5851%" y="661" width="0.2385%" height="15" fill="rgb(212,32,13)" fg:x="108" fg:w="3"/><text x="8.8351%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.6645%" y="645" width="0.1590%" height="15" fill="rgb(208,168,33)" fg:x="109" fg:w="2"/><text x="8.9145%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="8.6645%" y="629" width="0.1590%" height="15" fill="rgb(231,207,8)" fg:x="109" fg:w="2"/><text x="8.9145%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.6645%" y="613" width="0.1590%" height="15" fill="rgb(235,219,23)" fg:x="109" fg:w="2"/><text x="8.9145%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.6645%" y="597" width="0.1590%" height="15" fill="rgb(226,216,26)" fg:x="109" fg:w="2"/><text x="8.9145%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.6645%" y="581" width="0.1590%" height="15" fill="rgb(239,137,16)" fg:x="109" fg:w="2"/><text x="8.9145%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.6645%" y="565" width="0.1590%" height="15" fill="rgb(207,12,36)" fg:x="109" fg:w="2"/><text x="8.9145%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.6645%" y="549" width="0.1590%" height="15" fill="rgb(210,214,24)" fg:x="109" fg:w="2"/><text x="8.9145%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7440%" y="533" width="0.0795%" height="15" fill="rgb(206,56,30)" fg:x="110" fg:w="1"/><text x="8.9940%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7440%" y="517" width="0.0795%" height="15" fill="rgb(228,143,26)" fg:x="110" fg:w="1"/><text x="8.9940%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.87%)</title><rect x="8.0286%" y="725" width="0.8744%" height="15" fill="rgb(216,218,46)" fg:x="101" fg:w="11"/><text x="8.2786%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="8.1876%" y="709" width="0.7154%" height="15" fill="rgb(206,6,19)" fg:x="103" fg:w="9"/><text x="8.4376%" y="719.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="8.8235%" y="693" width="0.0795%" height="15" fill="rgb(239,177,51)" fg:x="111" fg:w="1"/><text x="9.0735%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="8.8235%" y="677" width="0.0795%" height="15" fill="rgb(216,55,25)" fg:x="111" fg:w="1"/><text x="9.0735%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="8.8235%" y="661" width="0.0795%" height="15" fill="rgb(231,163,29)" fg:x="111" fg:w="1"/><text x="9.0735%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.9030%" y="677" width="0.0795%" height="15" fill="rgb(232,149,50)" fg:x="112" fg:w="1"/><text x="9.1530%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9030%" y="661" width="0.0795%" height="15" fill="rgb(223,142,48)" fg:x="112" fg:w="1"/><text x="9.1530%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9825%" y="613" width="0.0795%" height="15" fill="rgb(245,83,23)" fg:x="113" fg:w="1"/><text x="9.2325%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.24%)</title><rect x="8.9030%" y="725" width="0.2385%" height="15" fill="rgb(224,63,2)" fg:x="112" fg:w="3"/><text x="9.1530%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.24%)</title><rect x="8.9030%" y="709" width="0.2385%" height="15" fill="rgb(218,65,53)" fg:x="112" fg:w="3"/><text x="9.1530%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="8.9030%" y="693" width="0.2385%" height="15" fill="rgb(221,84,29)" fg:x="112" fg:w="3"/><text x="9.1530%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="8.9825%" y="677" width="0.1590%" height="15" fill="rgb(234,0,32)" fg:x="113" fg:w="2"/><text x="9.2325%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.9825%" y="661" width="0.1590%" height="15" fill="rgb(206,20,16)" fg:x="113" fg:w="2"/><text x="9.2325%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="8.9825%" y="645" width="0.1590%" height="15" fill="rgb(244,172,18)" fg:x="113" fg:w="2"/><text x="9.2325%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.9825%" y="629" width="0.1590%" height="15" fill="rgb(254,133,1)" fg:x="113" fg:w="2"/><text x="9.2325%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0620%" y="613" width="0.0795%" height="15" fill="rgb(222,206,41)" fg:x="114" fg:w="1"/><text x="9.3120%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.0620%" y="597" width="0.0795%" height="15" fill="rgb(212,3,42)" fg:x="114" fg:w="1"/><text x="9.3120%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0620%" y="581" width="0.0795%" height="15" fill="rgb(241,11,4)" fg:x="114" fg:w="1"/><text x="9.3120%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScopeRefMut&lt;plugins_core::carrying::model::Containing,kernel::model::entity::Entity&gt;&gt; (1 samples, 0.08%)</title><rect x="9.1415%" y="693" width="0.0795%" height="15" fill="rgb(205,19,26)" fg:x="115" fg:w="1"/><text x="9.3915%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.2210%" y="645" width="0.0795%" height="15" fill="rgb(210,179,32)" fg:x="116" fg:w="1"/><text x="9.4710%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="9.2210%" y="693" width="0.1590%" height="15" fill="rgb(227,116,49)" fg:x="116" fg:w="2"/><text x="9.4710%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="9.2210%" y="677" width="0.1590%" height="15" fill="rgb(211,146,6)" fg:x="116" fg:w="2"/><text x="9.4710%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.2210%" y="661" width="0.1590%" height="15" fill="rgb(219,44,39)" fg:x="116" fg:w="2"/><text x="9.4710%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.3005%" y="645" width="0.0795%" height="15" fill="rgb(234,128,11)" fg:x="117" fg:w="1"/><text x="9.5505%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3005%" y="629" width="0.0795%" height="15" fill="rgb(220,183,53)" fg:x="117" fg:w="1"/><text x="9.5505%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3005%" y="613" width="0.0795%" height="15" fill="rgb(213,219,32)" fg:x="117" fg:w="1"/><text x="9.5505%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3005%" y="597" width="0.0795%" height="15" fill="rgb(232,156,16)" fg:x="117" fg:w="1"/><text x="9.5505%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="9.3800%" y="693" width="0.0795%" height="15" fill="rgb(246,135,34)" fg:x="118" fg:w="1"/><text x="9.6300%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="9.3800%" y="677" width="0.0795%" height="15" fill="rgb(241,99,0)" fg:x="118" fg:w="1"/><text x="9.6300%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.3800%" y="661" width="0.0795%" height="15" fill="rgb(222,103,45)" fg:x="118" fg:w="1"/><text x="9.6300%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.40%)</title><rect x="9.1415%" y="725" width="0.3975%" height="15" fill="rgb(212,57,4)" fg:x="115" fg:w="5"/><text x="9.3915%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="9.1415%" y="709" width="0.3975%" height="15" fill="rgb(215,68,47)" fg:x="115" fg:w="5"/><text x="9.3915%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="9.4595%" y="693" width="0.0795%" height="15" fill="rgb(230,84,2)" fg:x="119" fg:w="1"/><text x="9.7095%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="9.4595%" y="677" width="0.0795%" height="15" fill="rgb(220,102,14)" fg:x="119" fg:w="1"/><text x="9.7095%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4595%" y="661" width="0.0795%" height="15" fill="rgb(240,10,32)" fg:x="119" fg:w="1"/><text x="9.7095%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4595%" y="645" width="0.0795%" height="15" fill="rgb(215,47,27)" fg:x="119" fg:w="1"/><text x="9.7095%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4595%" y="629" width="0.0795%" height="15" fill="rgb(233,188,43)" fg:x="119" fg:w="1"/><text x="9.7095%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4595%" y="613" width="0.0795%" height="15" fill="rgb(253,190,1)" fg:x="119" fg:w="1"/><text x="9.7095%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4595%" y="597" width="0.0795%" height="15" fill="rgb(206,114,52)" fg:x="119" fg:w="1"/><text x="9.7095%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4595%" y="581" width="0.0795%" height="15" fill="rgb(233,120,37)" fg:x="119" fg:w="1"/><text x="9.7095%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.4595%" y="565" width="0.0795%" height="15" fill="rgb(214,52,39)" fg:x="119" fg:w="1"/><text x="9.7095%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="9.6184%" y="693" width="0.0795%" height="15" fill="rgb(223,80,29)" fg:x="121" fg:w="1"/><text x="9.8684%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6184%" y="677" width="0.0795%" height="15" fill="rgb(230,101,40)" fg:x="121" fg:w="1"/><text x="9.8684%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.6184%" y="661" width="0.0795%" height="15" fill="rgb(219,211,8)" fg:x="121" fg:w="1"/><text x="9.8684%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="9.6184%" y="709" width="0.1590%" height="15" fill="rgb(252,126,28)" fg:x="121" fg:w="2"/><text x="9.8684%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="9.6979%" y="693" width="0.0795%" height="15" fill="rgb(215,56,38)" fg:x="122" fg:w="1"/><text x="9.9479%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6979%" y="677" width="0.0795%" height="15" fill="rgb(249,55,44)" fg:x="122" fg:w="1"/><text x="9.9479%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="9.7774%" y="709" width="0.0795%" height="15" fill="rgb(220,221,32)" fg:x="123" fg:w="1"/><text x="10.0274%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.7774%" y="693" width="0.0795%" height="15" fill="rgb(212,216,41)" fg:x="123" fg:w="1"/><text x="10.0274%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.7774%" y="677" width="0.0795%" height="15" fill="rgb(228,213,43)" fg:x="123" fg:w="1"/><text x="10.0274%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7774%" y="661" width="0.0795%" height="15" fill="rgb(211,31,26)" fg:x="123" fg:w="1"/><text x="10.0274%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="9.8569%" y="709" width="0.0795%" height="15" fill="rgb(229,202,19)" fg:x="124" fg:w="1"/><text x="10.1069%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8569%" y="693" width="0.0795%" height="15" fill="rgb(229,105,46)" fg:x="124" fg:w="1"/><text x="10.1069%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="10.0159%" y="597" width="0.2385%" height="15" fill="rgb(235,108,1)" fg:x="126" fg:w="3"/><text x="10.2659%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="10.0159%" y="581" width="0.2385%" height="15" fill="rgb(245,111,35)" fg:x="126" fg:w="3"/><text x="10.2659%" y="591.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="10.0954%" y="565" width="0.1590%" height="15" fill="rgb(219,185,31)" fg:x="127" fg:w="2"/><text x="10.3454%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="10.0954%" y="549" width="0.1590%" height="15" fill="rgb(214,4,43)" fg:x="127" fg:w="2"/><text x="10.3454%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.2544%" y="581" width="0.0795%" height="15" fill="rgb(235,227,40)" fg:x="129" fg:w="1"/><text x="10.5044%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.3339%" y="581" width="0.0795%" height="15" fill="rgb(230,88,30)" fg:x="130" fg:w="1"/><text x="10.5839%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.3339%" y="565" width="0.0795%" height="15" fill="rgb(216,217,1)" fg:x="130" fg:w="1"/><text x="10.5839%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3339%" y="549" width="0.0795%" height="15" fill="rgb(248,139,50)" fg:x="130" fg:w="1"/><text x="10.5839%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3339%" y="533" width="0.0795%" height="15" fill="rgb(233,1,21)" fg:x="130" fg:w="1"/><text x="10.5839%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.3339%" y="517" width="0.0795%" height="15" fill="rgb(215,183,12)" fg:x="130" fg:w="1"/><text x="10.5839%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.3339%" y="501" width="0.0795%" height="15" fill="rgb(229,104,42)" fg:x="130" fg:w="1"/><text x="10.5839%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.3339%" y="485" width="0.0795%" height="15" fill="rgb(243,34,48)" fg:x="130" fg:w="1"/><text x="10.5839%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.3339%" y="469" width="0.0795%" height="15" fill="rgb(239,11,44)" fg:x="130" fg:w="1"/><text x="10.5839%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.4928%" y="565" width="0.0795%" height="15" fill="rgb(231,98,35)" fg:x="132" fg:w="1"/><text x="10.7428%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.5723%" y="565" width="0.0795%" height="15" fill="rgb(233,28,25)" fg:x="133" fg:w="1"/><text x="10.8223%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5723%" y="549" width="0.0795%" height="15" fill="rgb(234,123,11)" fg:x="133" fg:w="1"/><text x="10.8223%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5723%" y="533" width="0.0795%" height="15" fill="rgb(220,69,3)" fg:x="133" fg:w="1"/><text x="10.8223%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="10.6518%" y="565" width="0.3180%" height="15" fill="rgb(214,64,36)" fg:x="134" fg:w="4"/><text x="10.9018%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="10.6518%" y="549" width="0.3180%" height="15" fill="rgb(211,138,32)" fg:x="134" fg:w="4"/><text x="10.9018%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="10.7313%" y="533" width="0.2385%" height="15" fill="rgb(213,118,47)" fg:x="135" fg:w="3"/><text x="10.9813%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.8108%" y="517" width="0.1590%" height="15" fill="rgb(243,124,49)" fg:x="136" fg:w="2"/><text x="11.0608%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.8903%" y="501" width="0.0795%" height="15" fill="rgb(221,30,28)" fg:x="137" fg:w="1"/><text x="11.1403%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.8903%" y="485" width="0.0795%" height="15" fill="rgb(246,37,13)" fg:x="137" fg:w="1"/><text x="11.1403%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.8903%" y="469" width="0.0795%" height="15" fill="rgb(249,66,14)" fg:x="137" fg:w="1"/><text x="11.1403%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.9698%" y="549" width="0.0795%" height="15" fill="rgb(213,166,5)" fg:x="138" fg:w="1"/><text x="11.2198%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9698%" y="533" width="0.0795%" height="15" fill="rgb(221,66,24)" fg:x="138" fg:w="1"/><text x="11.2198%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9698%" y="517" width="0.0795%" height="15" fill="rgb(210,132,17)" fg:x="138" fg:w="1"/><text x="11.2198%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9698%" y="501" width="0.0795%" height="15" fill="rgb(243,202,5)" fg:x="138" fg:w="1"/><text x="11.2198%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.9698%" y="485" width="0.0795%" height="15" fill="rgb(233,70,48)" fg:x="138" fg:w="1"/><text x="11.2198%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.9698%" y="469" width="0.0795%" height="15" fill="rgb(238,41,26)" fg:x="138" fg:w="1"/><text x="11.2198%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.9698%" y="453" width="0.0795%" height="15" fill="rgb(241,19,31)" fg:x="138" fg:w="1"/><text x="11.2198%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.9698%" y="437" width="0.0795%" height="15" fill="rgb(214,76,10)" fg:x="138" fg:w="1"/><text x="11.2198%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.0493%" y="549" width="0.1590%" height="15" fill="rgb(254,202,22)" fg:x="139" fg:w="2"/><text x="11.2993%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.0493%" y="533" width="0.1590%" height="15" fill="rgb(214,72,24)" fg:x="139" fg:w="2"/><text x="11.2993%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.0493%" y="517" width="0.1590%" height="15" fill="rgb(221,92,46)" fg:x="139" fg:w="2"/><text x="11.2993%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.1288%" y="501" width="0.0795%" height="15" fill="rgb(246,13,50)" fg:x="140" fg:w="1"/><text x="11.3788%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.2878%" y="533" width="0.0795%" height="15" fill="rgb(240,165,38)" fg:x="142" fg:w="1"/><text x="11.5378%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2878%" y="517" width="0.0795%" height="15" fill="rgb(241,24,51)" fg:x="142" fg:w="1"/><text x="11.5378%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.2878%" y="501" width="0.0795%" height="15" fill="rgb(227,51,44)" fg:x="142" fg:w="1"/><text x="11.5378%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="11.3672%" y="533" width="0.3975%" height="15" fill="rgb(231,121,3)" fg:x="143" fg:w="5"/><text x="11.6172%" y="543.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="11.3672%" y="517" width="0.3975%" height="15" fill="rgb(245,3,41)" fg:x="143" fg:w="5"/><text x="11.6172%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="11.4467%" y="501" width="0.3180%" height="15" fill="rgb(214,13,26)" fg:x="144" fg:w="4"/><text x="11.6967%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="11.5262%" y="485" width="0.2385%" height="15" fill="rgb(252,75,11)" fg:x="145" fg:w="3"/><text x="11.7762%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="11.5262%" y="469" width="0.2385%" height="15" fill="rgb(218,226,17)" fg:x="145" fg:w="3"/><text x="11.7762%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="11.5262%" y="453" width="0.2385%" height="15" fill="rgb(248,89,38)" fg:x="145" fg:w="3"/><text x="11.7762%" y="463.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="11.5262%" y="437" width="0.2385%" height="15" fill="rgb(237,73,46)" fg:x="145" fg:w="3"/><text x="11.7762%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="11.7647%" y="533" width="0.6359%" height="15" fill="rgb(242,78,33)" fg:x="148" fg:w="8"/><text x="12.0147%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (8 samples, 0.64%)</title><rect x="11.7647%" y="517" width="0.6359%" height="15" fill="rgb(235,60,3)" fg:x="148" fg:w="8"/><text x="12.0147%" y="527.50"></text></g><g><title>std::io::Write::write_all (8 samples, 0.64%)</title><rect x="11.7647%" y="501" width="0.6359%" height="15" fill="rgb(216,172,19)" fg:x="148" fg:w="8"/><text x="12.0147%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (8 samples, 0.64%)</title><rect x="11.7647%" y="485" width="0.6359%" height="15" fill="rgb(227,6,42)" fg:x="148" fg:w="8"/><text x="12.0147%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.64%)</title><rect x="11.7647%" y="469" width="0.6359%" height="15" fill="rgb(223,207,42)" fg:x="148" fg:w="8"/><text x="12.0147%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.48%)</title><rect x="11.9237%" y="453" width="0.4769%" height="15" fill="rgb(246,138,30)" fg:x="150" fg:w="6"/><text x="12.1737%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="11.9237%" y="437" width="0.4769%" height="15" fill="rgb(251,199,47)" fg:x="150" fg:w="6"/><text x="12.1737%" y="447.50"></text></g><g><title>realloc (6 samples, 0.48%)</title><rect x="11.9237%" y="421" width="0.4769%" height="15" fill="rgb(228,218,44)" fg:x="150" fg:w="6"/><text x="12.1737%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.59%)</title><rect x="10.9698%" y="565" width="1.5898%" height="15" fill="rgb(220,68,6)" fg:x="138" fg:w="20"/><text x="11.2198%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.35%)</title><rect x="11.2083%" y="549" width="1.3514%" height="15" fill="rgb(240,60,26)" fg:x="141" fg:w="17"/><text x="11.4583%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.4006%" y="533" width="0.1590%" height="15" fill="rgb(211,200,19)" fg:x="156" fg:w="2"/><text x="12.6506%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.4006%" y="517" width="0.1590%" height="15" fill="rgb(242,145,30)" fg:x="156" fg:w="2"/><text x="12.6506%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (31 samples, 2.46%)</title><rect x="10.2544%" y="597" width="2.4642%" height="15" fill="rgb(225,64,13)" fg:x="129" fg:w="31"/><text x="10.5044%" y="607.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (29 samples, 2.31%)</title><rect x="10.4134%" y="581" width="2.3052%" height="15" fill="rgb(218,103,35)" fg:x="131" fg:w="29"/><text x="10.6634%" y="591.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.5596%" y="565" width="0.1590%" height="15" fill="rgb(216,93,46)" fg:x="158" fg:w="2"/><text x="12.8096%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.6391%" y="549" width="0.0795%" height="15" fill="rgb(225,159,27)" fg:x="159" fg:w="1"/><text x="12.8891%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.6391%" y="533" width="0.0795%" height="15" fill="rgb(225,204,11)" fg:x="159" fg:w="1"/><text x="12.8891%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7186%" y="565" width="0.0795%" height="15" fill="rgb(205,56,4)" fg:x="160" fg:w="1"/><text x="12.9686%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9571%" y="549" width="0.0795%" height="15" fill="rgb(206,6,35)" fg:x="163" fg:w="1"/><text x="13.2071%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.0366%" y="533" width="0.0795%" height="15" fill="rgb(247,73,52)" fg:x="164" fg:w="1"/><text x="13.2866%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1161%" y="517" width="0.0795%" height="15" fill="rgb(246,97,4)" fg:x="165" fg:w="1"/><text x="13.3661%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="13.1955%" y="517" width="0.1590%" height="15" fill="rgb(212,37,15)" fg:x="166" fg:w="2"/><text x="13.4455%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.1955%" y="501" width="0.1590%" height="15" fill="rgb(208,130,40)" fg:x="166" fg:w="2"/><text x="13.4455%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="12.7186%" y="597" width="0.7949%" height="15" fill="rgb(236,55,29)" fg:x="160" fg:w="10"/><text x="12.9686%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.79%)</title><rect x="12.7186%" y="581" width="0.7949%" height="15" fill="rgb(209,156,45)" fg:x="160" fg:w="10"/><text x="12.9686%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="12.7981%" y="565" width="0.7154%" height="15" fill="rgb(249,107,4)" fg:x="161" fg:w="9"/><text x="13.0481%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="13.0366%" y="549" width="0.4769%" height="15" fill="rgb(227,7,13)" fg:x="164" fg:w="6"/><text x="13.2866%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="13.1161%" y="533" width="0.3975%" height="15" fill="rgb(250,129,14)" fg:x="165" fg:w="5"/><text x="13.3661%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.3545%" y="517" width="0.1590%" height="15" fill="rgb(229,92,13)" fg:x="168" fg:w="2"/><text x="13.6045%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="13.4340%" y="501" width="0.0795%" height="15" fill="rgb(245,98,39)" fg:x="169" fg:w="1"/><text x="13.6840%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="13.5135%" y="581" width="0.1590%" height="15" fill="rgb(234,135,48)" fg:x="170" fg:w="2"/><text x="13.7635%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="13.5930%" y="565" width="0.0795%" height="15" fill="rgb(230,98,28)" fg:x="171" fg:w="1"/><text x="13.8430%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="13.5930%" y="549" width="0.0795%" height="15" fill="rgb(223,121,0)" fg:x="171" fg:w="1"/><text x="13.8430%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6725%" y="549" width="0.0795%" height="15" fill="rgb(234,173,33)" fg:x="172" fg:w="1"/><text x="13.9225%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7520%" y="549" width="0.0795%" height="15" fill="rgb(245,47,8)" fg:x="173" fg:w="1"/><text x="14.0020%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8315%" y="549" width="0.0795%" height="15" fill="rgb(205,17,20)" fg:x="174" fg:w="1"/><text x="14.0815%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.8315%" y="533" width="0.0795%" height="15" fill="rgb(232,151,16)" fg:x="174" fg:w="1"/><text x="14.0815%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8315%" y="517" width="0.0795%" height="15" fill="rgb(208,30,32)" fg:x="174" fg:w="1"/><text x="14.0815%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.9905%" y="453" width="0.0795%" height="15" fill="rgb(254,26,3)" fg:x="176" fg:w="1"/><text x="14.2405%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="14.0700%" y="453" width="0.0795%" height="15" fill="rgb(240,177,30)" fg:x="177" fg:w="1"/><text x="14.3200%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="13.9110%" y="533" width="0.3975%" height="15" fill="rgb(248,76,44)" fg:x="175" fg:w="5"/><text x="14.1610%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="13.9905%" y="517" width="0.3180%" height="15" fill="rgb(241,186,54)" fg:x="176" fg:w="4"/><text x="14.2405%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.9905%" y="501" width="0.3180%" height="15" fill="rgb(249,171,29)" fg:x="176" fg:w="4"/><text x="14.2405%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="13.9905%" y="485" width="0.3180%" height="15" fill="rgb(237,151,44)" fg:x="176" fg:w="4"/><text x="14.2405%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.9905%" y="469" width="0.3180%" height="15" fill="rgb(228,174,30)" fg:x="176" fg:w="4"/><text x="14.2405%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.1494%" y="453" width="0.1590%" height="15" fill="rgb(252,14,37)" fg:x="178" fg:w="2"/><text x="14.3994%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.1494%" y="437" width="0.1590%" height="15" fill="rgb(207,111,40)" fg:x="178" fg:w="2"/><text x="14.3994%" y="447.50"></text></g><g><title>engine::session::Session::flush (57 samples, 4.53%)</title><rect x="9.9364%" y="709" width="4.5310%" height="15" fill="rgb(248,171,54)" fg:x="125" fg:w="57"/><text x="10.1864%" y="719.50">engin..</text></g><g><title>engine::session::Session::save_changes (57 samples, 4.53%)</title><rect x="9.9364%" y="693" width="4.5310%" height="15" fill="rgb(211,127,2)" fg:x="125" fg:w="57"/><text x="10.1864%" y="703.50">engin..</text></g><g><title>engine::session::state::State::close (57 samples, 4.53%)</title><rect x="9.9364%" y="677" width="4.5310%" height="15" fill="rgb(236,87,47)" fg:x="125" fg:w="57"/><text x="10.1864%" y="687.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (57 samples, 4.53%)</title><rect x="9.9364%" y="661" width="4.5310%" height="15" fill="rgb(223,190,45)" fg:x="125" fg:w="57"/><text x="10.1864%" y="671.50">engin..</text></g><g><title>core::iter::adapters::try_process (57 samples, 4.53%)</title><rect x="9.9364%" y="645" width="4.5310%" height="15" fill="rgb(215,5,16)" fg:x="125" fg:w="57"/><text x="10.1864%" y="655.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (57 samples, 4.53%)</title><rect x="9.9364%" y="629" width="4.5310%" height="15" fill="rgb(252,82,33)" fg:x="125" fg:w="57"/><text x="10.1864%" y="639.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (57 samples, 4.53%)</title><rect x="9.9364%" y="613" width="4.5310%" height="15" fill="rgb(247,213,44)" fg:x="125" fg:w="57"/><text x="10.1864%" y="623.50">engin..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.95%)</title><rect x="13.5135%" y="597" width="0.9539%" height="15" fill="rgb(205,196,44)" fg:x="170" fg:w="12"/><text x="13.7635%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.79%)</title><rect x="13.6725%" y="581" width="0.7949%" height="15" fill="rgb(237,96,54)" fg:x="172" fg:w="10"/><text x="13.9225%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.79%)</title><rect x="13.6725%" y="565" width="0.7949%" height="15" fill="rgb(230,113,34)" fg:x="172" fg:w="10"/><text x="13.9225%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="13.9110%" y="549" width="0.5564%" height="15" fill="rgb(221,224,12)" fg:x="175" fg:w="7"/><text x="14.1610%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.3084%" y="533" width="0.1590%" height="15" fill="rgb(219,112,44)" fg:x="180" fg:w="2"/><text x="14.5584%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3879%" y="517" width="0.0795%" height="15" fill="rgb(210,31,13)" fg:x="181" fg:w="1"/><text x="14.6379%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="14.4674%" y="693" width="0.0795%" height="15" fill="rgb(230,25,16)" fg:x="182" fg:w="1"/><text x="14.7174%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="14.4674%" y="677" width="0.0795%" height="15" fill="rgb(246,108,53)" fg:x="182" fg:w="1"/><text x="14.7174%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.4674%" y="661" width="0.0795%" height="15" fill="rgb(241,172,50)" fg:x="182" fg:w="1"/><text x="14.7174%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.4674%" y="645" width="0.0795%" height="15" fill="rgb(235,141,10)" fg:x="182" fg:w="1"/><text x="14.7174%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.4674%" y="629" width="0.0795%" height="15" fill="rgb(220,174,43)" fg:x="182" fg:w="1"/><text x="14.7174%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="14.5469%" y="677" width="0.0795%" height="15" fill="rgb(215,181,40)" fg:x="183" fg:w="1"/><text x="14.7969%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="14.5469%" y="661" width="0.0795%" height="15" fill="rgb(230,97,2)" fg:x="183" fg:w="1"/><text x="14.7969%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.5469%" y="645" width="0.0795%" height="15" fill="rgb(211,25,27)" fg:x="183" fg:w="1"/><text x="14.7969%" y="655.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="14.5469%" y="629" width="0.0795%" height="15" fill="rgb(230,87,26)" fg:x="183" fg:w="1"/><text x="14.7969%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="14.5469%" y="613" width="0.0795%" height="15" fill="rgb(227,160,17)" fg:x="183" fg:w="1"/><text x="14.7969%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.5469%" y="597" width="0.0795%" height="15" fill="rgb(244,85,34)" fg:x="183" fg:w="1"/><text x="14.7969%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.5469%" y="581" width="0.0795%" height="15" fill="rgb(207,70,0)" fg:x="183" fg:w="1"/><text x="14.7969%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.5469%" y="565" width="0.0795%" height="15" fill="rgb(223,129,7)" fg:x="183" fg:w="1"/><text x="14.7969%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.5469%" y="549" width="0.0795%" height="15" fill="rgb(246,105,7)" fg:x="183" fg:w="1"/><text x="14.7969%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.5469%" y="533" width="0.0795%" height="15" fill="rgb(215,154,42)" fg:x="183" fg:w="1"/><text x="14.7969%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.5469%" y="517" width="0.0795%" height="15" fill="rgb(220,215,30)" fg:x="183" fg:w="1"/><text x="14.7969%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5469%" y="501" width="0.0795%" height="15" fill="rgb(228,81,51)" fg:x="183" fg:w="1"/><text x="14.7969%" y="511.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="14.6264%" y="677" width="0.0795%" height="15" fill="rgb(247,71,54)" fg:x="184" fg:w="1"/><text x="14.8764%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (4 samples, 0.32%)</title><rect x="14.4674%" y="709" width="0.3180%" height="15" fill="rgb(234,176,34)" fg:x="182" fg:w="4"/><text x="14.7174%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="14.5469%" y="693" width="0.2385%" height="15" fill="rgb(241,103,54)" fg:x="183" fg:w="3"/><text x="14.7969%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7059%" y="677" width="0.0795%" height="15" fill="rgb(228,22,34)" fg:x="185" fg:w="1"/><text x="14.9559%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.7059%" y="661" width="0.0795%" height="15" fill="rgb(241,179,48)" fg:x="185" fg:w="1"/><text x="14.9559%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7854%" y="661" width="0.1590%" height="15" fill="rgb(235,167,37)" fg:x="186" fg:w="2"/><text x="15.0354%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7854%" y="645" width="0.1590%" height="15" fill="rgb(213,109,30)" fg:x="186" fg:w="2"/><text x="15.0354%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7854%" y="629" width="0.1590%" height="15" fill="rgb(222,172,16)" fg:x="186" fg:w="2"/><text x="15.0354%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="14.7854%" y="693" width="0.2385%" height="15" fill="rgb(233,192,5)" fg:x="186" fg:w="3"/><text x="15.0354%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="14.7854%" y="677" width="0.2385%" height="15" fill="rgb(247,189,41)" fg:x="186" fg:w="3"/><text x="15.0354%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9444%" y="661" width="0.0795%" height="15" fill="rgb(218,134,47)" fg:x="188" fg:w="1"/><text x="15.1944%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="15.0238%" y="677" width="0.0795%" height="15" fill="rgb(216,29,3)" fg:x="189" fg:w="1"/><text x="15.2738%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.0238%" y="661" width="0.0795%" height="15" fill="rgb(246,140,12)" fg:x="189" fg:w="1"/><text x="15.2738%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="15.0238%" y="645" width="0.0795%" height="15" fill="rgb(230,136,11)" fg:x="189" fg:w="1"/><text x="15.2738%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.0238%" y="629" width="0.0795%" height="15" fill="rgb(247,22,47)" fg:x="189" fg:w="1"/><text x="15.2738%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.0238%" y="613" width="0.0795%" height="15" fill="rgb(218,84,22)" fg:x="189" fg:w="1"/><text x="15.2738%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.1033%" y="629" width="0.0795%" height="15" fill="rgb(216,87,39)" fg:x="190" fg:w="1"/><text x="15.3533%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.1033%" y="613" width="0.0795%" height="15" fill="rgb(221,178,8)" fg:x="190" fg:w="1"/><text x="15.3533%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="15.1033%" y="661" width="0.1590%" height="15" fill="rgb(230,42,11)" fg:x="190" fg:w="2"/><text x="15.3533%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="15.1033%" y="645" width="0.1590%" height="15" fill="rgb(237,229,4)" fg:x="190" fg:w="2"/><text x="15.3533%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1828%" y="629" width="0.0795%" height="15" fill="rgb(222,31,33)" fg:x="191" fg:w="1"/><text x="15.4328%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1828%" y="613" width="0.0795%" height="15" fill="rgb(210,17,39)" fg:x="191" fg:w="1"/><text x="15.4328%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1828%" y="597" width="0.0795%" height="15" fill="rgb(244,93,20)" fg:x="191" fg:w="1"/><text x="15.4328%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.1828%" y="581" width="0.0795%" height="15" fill="rgb(210,40,47)" fg:x="191" fg:w="1"/><text x="15.4328%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.1828%" y="565" width="0.0795%" height="15" fill="rgb(239,211,47)" fg:x="191" fg:w="1"/><text x="15.4328%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2623%" y="629" width="0.0795%" height="15" fill="rgb(251,223,49)" fg:x="192" fg:w="1"/><text x="15.5123%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="15.3418%" y="629" width="0.0795%" height="15" fill="rgb(221,149,5)" fg:x="193" fg:w="1"/><text x="15.5918%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="15.3418%" y="613" width="0.0795%" height="15" fill="rgb(219,224,51)" fg:x="193" fg:w="1"/><text x="15.5918%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="15.4213%" y="629" width="0.1590%" height="15" fill="rgb(223,7,8)" fg:x="194" fg:w="2"/><text x="15.6713%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.5008%" y="613" width="0.0795%" height="15" fill="rgb(241,217,22)" fg:x="195" fg:w="1"/><text x="15.7508%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.5803%" y="597" width="0.0795%" height="15" fill="rgb(248,209,0)" fg:x="196" fg:w="1"/><text x="15.8303%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5803%" y="581" width="0.0795%" height="15" fill="rgb(217,205,4)" fg:x="196" fg:w="1"/><text x="15.8303%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.5803%" y="565" width="0.0795%" height="15" fill="rgb(228,124,39)" fg:x="196" fg:w="1"/><text x="15.8303%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5803%" y="549" width="0.0795%" height="15" fill="rgb(250,116,42)" fg:x="196" fg:w="1"/><text x="15.8303%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.5803%" y="533" width="0.0795%" height="15" fill="rgb(223,202,9)" fg:x="196" fg:w="1"/><text x="15.8303%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.5803%" y="517" width="0.0795%" height="15" fill="rgb(242,222,40)" fg:x="196" fg:w="1"/><text x="15.8303%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5803%" y="501" width="0.0795%" height="15" fill="rgb(229,99,46)" fg:x="196" fg:w="1"/><text x="15.8303%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="15.5803%" y="613" width="0.1590%" height="15" fill="rgb(225,56,46)" fg:x="196" fg:w="2"/><text x="15.8303%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="15.6598%" y="597" width="0.0795%" height="15" fill="rgb(227,94,5)" fg:x="197" fg:w="1"/><text x="15.9098%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.79%)</title><rect x="15.0238%" y="693" width="0.7949%" height="15" fill="rgb(205,112,38)" fg:x="189" fg:w="10"/><text x="15.2738%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.72%)</title><rect x="15.1033%" y="677" width="0.7154%" height="15" fill="rgb(231,133,46)" fg:x="190" fg:w="9"/><text x="15.3533%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="15.2623%" y="661" width="0.5564%" height="15" fill="rgb(217,16,9)" fg:x="192" fg:w="7"/><text x="15.5123%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="15.2623%" y="645" width="0.5564%" height="15" fill="rgb(249,173,9)" fg:x="192" fg:w="7"/><text x="15.5123%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="15.5803%" y="629" width="0.2385%" height="15" fill="rgb(205,163,53)" fg:x="196" fg:w="3"/><text x="15.8303%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7393%" y="613" width="0.0795%" height="15" fill="rgb(217,54,41)" fg:x="198" fg:w="1"/><text x="15.9893%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.19%)</title><rect x="14.7854%" y="709" width="1.1924%" height="15" fill="rgb(228,216,12)" fg:x="186" fg:w="15"/><text x="15.0354%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.8188%" y="693" width="0.1590%" height="15" fill="rgb(244,228,15)" fg:x="199" fg:w="2"/><text x="16.0688%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.8983%" y="677" width="0.0795%" height="15" fill="rgb(221,176,53)" fg:x="200" fg:w="1"/><text x="16.1483%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="16.0572%" y="549" width="0.0795%" height="15" fill="rgb(205,94,34)" fg:x="202" fg:w="1"/><text x="16.3072%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="15.9777%" y="677" width="0.2385%" height="15" fill="rgb(213,110,48)" fg:x="201" fg:w="3"/><text x="16.2277%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="15.9777%" y="661" width="0.2385%" height="15" fill="rgb(236,142,28)" fg:x="201" fg:w="3"/><text x="16.2277%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="15.9777%" y="645" width="0.2385%" height="15" fill="rgb(225,135,29)" fg:x="201" fg:w="3"/><text x="16.2277%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="15.9777%" y="629" width="0.2385%" height="15" fill="rgb(252,45,31)" fg:x="201" fg:w="3"/><text x="16.2277%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="15.9777%" y="613" width="0.2385%" height="15" fill="rgb(211,187,50)" fg:x="201" fg:w="3"/><text x="16.2277%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.9777%" y="597" width="0.2385%" height="15" fill="rgb(229,109,7)" fg:x="201" fg:w="3"/><text x="16.2277%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="16.0572%" y="581" width="0.1590%" height="15" fill="rgb(251,131,51)" fg:x="202" fg:w="2"/><text x="16.3072%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.0572%" y="565" width="0.1590%" height="15" fill="rgb(251,180,35)" fg:x="202" fg:w="2"/><text x="16.3072%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.1367%" y="549" width="0.0795%" height="15" fill="rgb(211,46,32)" fg:x="203" fg:w="1"/><text x="16.3867%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="15.9777%" y="709" width="0.3180%" height="15" fill="rgb(248,123,17)" fg:x="201" fg:w="4"/><text x="16.2277%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="15.9777%" y="693" width="0.3180%" height="15" fill="rgb(227,141,18)" fg:x="201" fg:w="4"/><text x="16.2277%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.2162%" y="677" width="0.0795%" height="15" fill="rgb(216,102,9)" fg:x="204" fg:w="1"/><text x="16.4662%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2162%" y="661" width="0.0795%" height="15" fill="rgb(253,47,13)" fg:x="204" fg:w="1"/><text x="16.4662%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.2162%" y="645" width="0.0795%" height="15" fill="rgb(226,93,23)" fg:x="204" fg:w="1"/><text x="16.4662%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2162%" y="629" width="0.0795%" height="15" fill="rgb(247,104,17)" fg:x="204" fg:w="1"/><text x="16.4662%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.2957%" y="677" width="0.0795%" height="15" fill="rgb(233,203,26)" fg:x="205" fg:w="1"/><text x="16.5457%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2957%" y="661" width="0.0795%" height="15" fill="rgb(244,98,49)" fg:x="205" fg:w="1"/><text x="16.5457%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.2957%" y="645" width="0.0795%" height="15" fill="rgb(235,134,22)" fg:x="205" fg:w="1"/><text x="16.5457%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2957%" y="629" width="0.0795%" height="15" fill="rgb(221,70,32)" fg:x="205" fg:w="1"/><text x="16.5457%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2957%" y="613" width="0.0795%" height="15" fill="rgb(238,15,50)" fg:x="205" fg:w="1"/><text x="16.5457%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.2957%" y="597" width="0.0795%" height="15" fill="rgb(215,221,48)" fg:x="205" fg:w="1"/><text x="16.5457%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.2957%" y="581" width="0.0795%" height="15" fill="rgb(236,73,3)" fg:x="205" fg:w="1"/><text x="16.5457%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.2957%" y="565" width="0.0795%" height="15" fill="rgb(250,107,11)" fg:x="205" fg:w="1"/><text x="16.5457%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.2957%" y="549" width="0.0795%" height="15" fill="rgb(242,39,14)" fg:x="205" fg:w="1"/><text x="16.5457%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.2957%" y="533" width="0.0795%" height="15" fill="rgb(248,164,37)" fg:x="205" fg:w="1"/><text x="16.5457%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="16.3752%" y="645" width="0.1590%" height="15" fill="rgb(217,60,12)" fg:x="206" fg:w="2"/><text x="16.6252%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="16.3752%" y="629" width="0.1590%" height="15" fill="rgb(240,125,29)" fg:x="206" fg:w="2"/><text x="16.6252%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="16.3752%" y="613" width="0.1590%" height="15" fill="rgb(208,207,28)" fg:x="206" fg:w="2"/><text x="16.6252%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.3752%" y="597" width="0.1590%" height="15" fill="rgb(209,159,27)" fg:x="206" fg:w="2"/><text x="16.6252%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.3752%" y="581" width="0.1590%" height="15" fill="rgb(251,176,53)" fg:x="206" fg:w="2"/><text x="16.6252%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4547%" y="565" width="0.0795%" height="15" fill="rgb(211,85,7)" fg:x="207" fg:w="1"/><text x="16.7047%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="16.2957%" y="693" width="0.3180%" height="15" fill="rgb(216,64,54)" fg:x="205" fg:w="4"/><text x="16.5457%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="16.3752%" y="677" width="0.2385%" height="15" fill="rgb(217,54,24)" fg:x="206" fg:w="3"/><text x="16.6252%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.3752%" y="661" width="0.2385%" height="15" fill="rgb(208,206,53)" fg:x="206" fg:w="3"/><text x="16.6252%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.5342%" y="645" width="0.0795%" height="15" fill="rgb(251,74,39)" fg:x="208" fg:w="1"/><text x="16.7842%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.5342%" y="629" width="0.0795%" height="15" fill="rgb(226,47,5)" fg:x="208" fg:w="1"/><text x="16.7842%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="16.5342%" y="613" width="0.0795%" height="15" fill="rgb(234,111,33)" fg:x="208" fg:w="1"/><text x="16.7842%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (5 samples, 0.40%)</title><rect x="16.2957%" y="709" width="0.3975%" height="15" fill="rgb(251,14,10)" fg:x="205" fg:w="5"/><text x="16.5457%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.6137%" y="693" width="0.0795%" height="15" fill="rgb(232,43,0)" fg:x="209" fg:w="1"/><text x="16.8637%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6137%" y="677" width="0.0795%" height="15" fill="rgb(222,68,43)" fg:x="209" fg:w="1"/><text x="16.8637%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.6137%" y="661" width="0.0795%" height="15" fill="rgb(217,24,23)" fg:x="209" fg:w="1"/><text x="16.8637%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6137%" y="645" width="0.0795%" height="15" fill="rgb(229,209,14)" fg:x="209" fg:w="1"/><text x="16.8637%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6137%" y="629" width="0.0795%" height="15" fill="rgb(250,149,48)" fg:x="209" fg:w="1"/><text x="16.8637%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.6137%" y="613" width="0.0795%" height="15" fill="rgb(210,120,37)" fg:x="209" fg:w="1"/><text x="16.8637%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6137%" y="597" width="0.0795%" height="15" fill="rgb(210,21,8)" fg:x="209" fg:w="1"/><text x="16.8637%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.6932%" y="645" width="0.0795%" height="15" fill="rgb(243,145,7)" fg:x="210" fg:w="1"/><text x="16.9432%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.6932%" y="629" width="0.0795%" height="15" fill="rgb(238,178,32)" fg:x="210" fg:w="1"/><text x="16.9432%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6932%" y="613" width="0.0795%" height="15" fill="rgb(222,4,10)" fg:x="210" fg:w="1"/><text x="16.9432%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6932%" y="597" width="0.0795%" height="15" fill="rgb(239,7,37)" fg:x="210" fg:w="1"/><text x="16.9432%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.6932%" y="581" width="0.0795%" height="15" fill="rgb(215,31,37)" fg:x="210" fg:w="1"/><text x="16.9432%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6932%" y="565" width="0.0795%" height="15" fill="rgb(224,83,33)" fg:x="210" fg:w="1"/><text x="16.9432%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6932%" y="549" width="0.0795%" height="15" fill="rgb(239,55,3)" fg:x="210" fg:w="1"/><text x="16.9432%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.6932%" y="533" width="0.0795%" height="15" fill="rgb(247,92,11)" fg:x="210" fg:w="1"/><text x="16.9432%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.6932%" y="517" width="0.0795%" height="15" fill="rgb(239,200,7)" fg:x="210" fg:w="1"/><text x="16.9432%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.6932%" y="501" width="0.0795%" height="15" fill="rgb(227,115,8)" fg:x="210" fg:w="1"/><text x="16.9432%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6932%" y="485" width="0.0795%" height="15" fill="rgb(215,189,27)" fg:x="210" fg:w="1"/><text x="16.9432%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6932%" y="469" width="0.0795%" height="15" fill="rgb(251,216,39)" fg:x="210" fg:w="1"/><text x="16.9432%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.6932%" y="453" width="0.0795%" height="15" fill="rgb(207,29,47)" fg:x="210" fg:w="1"/><text x="16.9432%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.6932%" y="437" width="0.0795%" height="15" fill="rgb(210,71,34)" fg:x="210" fg:w="1"/><text x="16.9432%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.6932%" y="421" width="0.0795%" height="15" fill="rgb(253,217,51)" fg:x="210" fg:w="1"/><text x="16.9432%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.6932%" y="405" width="0.0795%" height="15" fill="rgb(222,117,46)" fg:x="210" fg:w="1"/><text x="16.9432%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6932%" y="389" width="0.0795%" height="15" fill="rgb(226,132,6)" fg:x="210" fg:w="1"/><text x="16.9432%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7727%" y="613" width="0.0795%" height="15" fill="rgb(254,145,51)" fg:x="211" fg:w="1"/><text x="17.0227%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7727%" y="597" width="0.0795%" height="15" fill="rgb(231,199,27)" fg:x="211" fg:w="1"/><text x="17.0227%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7727%" y="581" width="0.0795%" height="15" fill="rgb(245,158,14)" fg:x="211" fg:w="1"/><text x="17.0227%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7727%" y="565" width="0.0795%" height="15" fill="rgb(240,113,14)" fg:x="211" fg:w="1"/><text x="17.0227%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="16.6932%" y="693" width="0.2385%" height="15" fill="rgb(210,20,13)" fg:x="210" fg:w="3"/><text x="16.9432%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="16.6932%" y="677" width="0.2385%" height="15" fill="rgb(241,144,13)" fg:x="210" fg:w="3"/><text x="16.9432%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="16.6932%" y="661" width="0.2385%" height="15" fill="rgb(235,43,34)" fg:x="210" fg:w="3"/><text x="16.9432%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="16.7727%" y="645" width="0.1590%" height="15" fill="rgb(208,36,20)" fg:x="211" fg:w="2"/><text x="17.0227%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.7727%" y="629" width="0.1590%" height="15" fill="rgb(239,204,10)" fg:x="211" fg:w="2"/><text x="17.0227%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8521%" y="613" width="0.0795%" height="15" fill="rgb(217,84,43)" fg:x="212" fg:w="1"/><text x="17.1021%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="16.6932%" y="709" width="0.3180%" height="15" fill="rgb(241,170,50)" fg:x="210" fg:w="4"/><text x="16.9432%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="16.9316%" y="693" width="0.0795%" height="15" fill="rgb(226,205,29)" fg:x="213" fg:w="1"/><text x="17.1816%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.9316%" y="677" width="0.0795%" height="15" fill="rgb(233,113,1)" fg:x="213" fg:w="1"/><text x="17.1816%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="16.9316%" y="661" width="0.0795%" height="15" fill="rgb(253,98,13)" fg:x="213" fg:w="1"/><text x="17.1816%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.9316%" y="645" width="0.0795%" height="15" fill="rgb(211,115,12)" fg:x="213" fg:w="1"/><text x="17.1816%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.9316%" y="629" width="0.0795%" height="15" fill="rgb(208,12,16)" fg:x="213" fg:w="1"/><text x="17.1816%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (96 samples, 7.63%)</title><rect x="9.5390%" y="725" width="7.6312%" height="15" fill="rgb(237,193,54)" fg:x="120" fg:w="96"/><text x="9.7890%" y="735.50">plugins_co..</text></g><g><title>plugins_core::tools::set_wearing (2 samples, 0.16%)</title><rect x="17.0111%" y="709" width="0.1590%" height="15" fill="rgb(243,22,42)" fg:x="214" fg:w="2"/><text x="17.2611%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="17.0111%" y="693" width="0.1590%" height="15" fill="rgb(233,151,36)" fg:x="214" fg:w="2"/><text x="17.2611%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="17.0111%" y="677" width="0.1590%" height="15" fill="rgb(237,57,45)" fg:x="214" fg:w="2"/><text x="17.2611%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="17.0111%" y="661" width="0.1590%" height="15" fill="rgb(221,88,17)" fg:x="214" fg:w="2"/><text x="17.2611%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.0906%" y="645" width="0.0795%" height="15" fill="rgb(230,79,15)" fg:x="215" fg:w="1"/><text x="17.3406%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="17.1701%" y="693" width="0.0795%" height="15" fill="rgb(213,57,13)" fg:x="216" fg:w="1"/><text x="17.4201%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.1701%" y="677" width="0.0795%" height="15" fill="rgb(222,116,39)" fg:x="216" fg:w="1"/><text x="17.4201%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.1701%" y="661" width="0.0795%" height="15" fill="rgb(245,107,2)" fg:x="216" fg:w="1"/><text x="17.4201%" y="671.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="17.1701%" y="645" width="0.0795%" height="15" fill="rgb(238,1,10)" fg:x="216" fg:w="1"/><text x="17.4201%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="17.1701%" y="629" width="0.0795%" height="15" fill="rgb(249,4,48)" fg:x="216" fg:w="1"/><text x="17.4201%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.1701%" y="613" width="0.0795%" height="15" fill="rgb(223,151,18)" fg:x="216" fg:w="1"/><text x="17.4201%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.1701%" y="597" width="0.0795%" height="15" fill="rgb(227,65,43)" fg:x="216" fg:w="1"/><text x="17.4201%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.1701%" y="581" width="0.0795%" height="15" fill="rgb(218,40,45)" fg:x="216" fg:w="1"/><text x="17.4201%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.1701%" y="565" width="0.0795%" height="15" fill="rgb(252,121,31)" fg:x="216" fg:w="1"/><text x="17.4201%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.1701%" y="549" width="0.0795%" height="15" fill="rgb(219,158,43)" fg:x="216" fg:w="1"/><text x="17.4201%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.1701%" y="533" width="0.0795%" height="15" fill="rgb(231,162,42)" fg:x="216" fg:w="1"/><text x="17.4201%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1701%" y="517" width="0.0795%" height="15" fill="rgb(217,179,25)" fg:x="216" fg:w="1"/><text x="17.4201%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="17.1701%" y="725" width="0.1590%" height="15" fill="rgb(206,212,31)" fg:x="216" fg:w="2"/><text x="17.4201%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="17.1701%" y="709" width="0.1590%" height="15" fill="rgb(235,144,12)" fg:x="216" fg:w="2"/><text x="17.4201%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="17.2496%" y="693" width="0.0795%" height="15" fill="rgb(213,51,10)" fg:x="217" fg:w="1"/><text x="17.4996%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="17.2496%" y="677" width="0.0795%" height="15" fill="rgb(231,145,14)" fg:x="217" fg:w="1"/><text x="17.4996%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2496%" y="661" width="0.0795%" height="15" fill="rgb(235,15,28)" fg:x="217" fg:w="1"/><text x="17.4996%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.3291%" y="677" width="0.0795%" height="15" fill="rgb(237,206,10)" fg:x="218" fg:w="1"/><text x="17.5791%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="17.3291%" y="661" width="0.0795%" height="15" fill="rgb(236,227,27)" fg:x="218" fg:w="1"/><text x="17.5791%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4086%" y="645" width="0.0795%" height="15" fill="rgb(246,83,35)" fg:x="219" fg:w="1"/><text x="17.6586%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="17.4086%" y="661" width="0.1590%" height="15" fill="rgb(220,136,24)" fg:x="219" fg:w="2"/><text x="17.6586%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.4881%" y="645" width="0.0795%" height="15" fill="rgb(217,3,25)" fg:x="220" fg:w="1"/><text x="17.7381%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.4881%" y="629" width="0.0795%" height="15" fill="rgb(239,24,14)" fg:x="220" fg:w="1"/><text x="17.7381%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.4881%" y="613" width="0.0795%" height="15" fill="rgb(244,16,53)" fg:x="220" fg:w="1"/><text x="17.7381%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.4881%" y="597" width="0.0795%" height="15" fill="rgb(208,175,44)" fg:x="220" fg:w="1"/><text x="17.7381%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.4881%" y="581" width="0.0795%" height="15" fill="rgb(252,18,48)" fg:x="220" fg:w="1"/><text x="17.7381%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.4881%" y="565" width="0.0795%" height="15" fill="rgb(234,199,32)" fg:x="220" fg:w="1"/><text x="17.7381%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="17.5676%" y="661" width="0.0795%" height="15" fill="rgb(225,77,54)" fg:x="221" fg:w="1"/><text x="17.8176%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="17.5676%" y="645" width="0.0795%" height="15" fill="rgb(225,42,25)" fg:x="221" fg:w="1"/><text x="17.8176%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="17.5676%" y="629" width="0.0795%" height="15" fill="rgb(242,227,46)" fg:x="221" fg:w="1"/><text x="17.8176%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="17.6471%" y="613" width="0.1590%" height="15" fill="rgb(246,197,35)" fg:x="222" fg:w="2"/><text x="17.8971%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="17.6471%" y="597" width="0.1590%" height="15" fill="rgb(215,159,26)" fg:x="222" fg:w="2"/><text x="17.8971%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.6471%" y="581" width="0.1590%" height="15" fill="rgb(212,194,50)" fg:x="222" fg:w="2"/><text x="17.8971%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="17.6471%" y="565" width="0.1590%" height="15" fill="rgb(246,132,1)" fg:x="222" fg:w="2"/><text x="17.8971%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7266%" y="549" width="0.0795%" height="15" fill="rgb(217,71,7)" fg:x="223" fg:w="1"/><text x="17.9766%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.7266%" y="533" width="0.0795%" height="15" fill="rgb(252,59,32)" fg:x="223" fg:w="1"/><text x="17.9766%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="17.6471%" y="645" width="0.2385%" height="15" fill="rgb(253,204,25)" fg:x="222" fg:w="3"/><text x="17.8971%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="17.6471%" y="629" width="0.2385%" height="15" fill="rgb(232,21,16)" fg:x="222" fg:w="3"/><text x="17.8971%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8060%" y="613" width="0.0795%" height="15" fill="rgb(248,90,29)" fg:x="224" fg:w="1"/><text x="18.0560%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8060%" y="597" width="0.0795%" height="15" fill="rgb(249,223,7)" fg:x="224" fg:w="1"/><text x="18.0560%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8060%" y="581" width="0.0795%" height="15" fill="rgb(231,119,42)" fg:x="224" fg:w="1"/><text x="18.0560%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="17.8060%" y="565" width="0.0795%" height="15" fill="rgb(215,41,35)" fg:x="224" fg:w="1"/><text x="18.0560%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8060%" y="549" width="0.0795%" height="15" fill="rgb(220,44,45)" fg:x="224" fg:w="1"/><text x="18.0560%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8060%" y="533" width="0.0795%" height="15" fill="rgb(253,197,36)" fg:x="224" fg:w="1"/><text x="18.0560%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="17.3291%" y="693" width="0.6359%" height="15" fill="rgb(245,225,54)" fg:x="218" fg:w="8"/><text x="17.5791%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="17.4086%" y="677" width="0.5564%" height="15" fill="rgb(239,94,37)" fg:x="219" fg:w="7"/><text x="17.6586%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="17.6471%" y="661" width="0.3180%" height="15" fill="rgb(242,217,10)" fg:x="222" fg:w="4"/><text x="17.8971%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.8855%" y="645" width="0.0795%" height="15" fill="rgb(250,193,7)" fg:x="225" fg:w="1"/><text x="18.1355%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.8855%" y="629" width="0.0795%" height="15" fill="rgb(230,104,19)" fg:x="225" fg:w="1"/><text x="18.1355%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.8855%" y="613" width="0.0795%" height="15" fill="rgb(230,181,4)" fg:x="225" fg:w="1"/><text x="18.1355%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (9 samples, 0.72%)</title><rect x="17.3291%" y="725" width="0.7154%" height="15" fill="rgb(216,219,49)" fg:x="218" fg:w="9"/><text x="17.5791%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.72%)</title><rect x="17.3291%" y="709" width="0.7154%" height="15" fill="rgb(254,144,0)" fg:x="218" fg:w="9"/><text x="17.5791%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="17.9650%" y="693" width="0.0795%" height="15" fill="rgb(205,209,38)" fg:x="226" fg:w="1"/><text x="18.2150%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="17.9650%" y="677" width="0.0795%" height="15" fill="rgb(240,21,42)" fg:x="226" fg:w="1"/><text x="18.2150%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="17.9650%" y="661" width="0.0795%" height="15" fill="rgb(241,132,3)" fg:x="226" fg:w="1"/><text x="18.2150%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.9650%" y="645" width="0.0795%" height="15" fill="rgb(225,14,2)" fg:x="226" fg:w="1"/><text x="18.2150%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.9650%" y="629" width="0.0795%" height="15" fill="rgb(210,141,35)" fg:x="226" fg:w="1"/><text x="18.2150%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.0445%" y="709" width="0.0795%" height="15" fill="rgb(251,14,44)" fg:x="227" fg:w="1"/><text x="18.2945%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.1240%" y="629" width="0.0795%" height="15" fill="rgb(247,48,18)" fg:x="228" fg:w="1"/><text x="18.3740%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1240%" y="613" width="0.0795%" height="15" fill="rgb(225,0,40)" fg:x="228" fg:w="1"/><text x="18.3740%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1240%" y="597" width="0.0795%" height="15" fill="rgb(221,31,33)" fg:x="228" fg:w="1"/><text x="18.3740%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1240%" y="581" width="0.0795%" height="15" fill="rgb(237,42,40)" fg:x="228" fg:w="1"/><text x="18.3740%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="18.2035%" y="629" width="0.0795%" height="15" fill="rgb(233,51,29)" fg:x="229" fg:w="1"/><text x="18.4535%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2035%" y="613" width="0.0795%" height="15" fill="rgb(226,58,20)" fg:x="229" fg:w="1"/><text x="18.4535%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="18.1240%" y="661" width="0.2385%" height="15" fill="rgb(208,98,7)" fg:x="228" fg:w="3"/><text x="18.3740%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="18.1240%" y="645" width="0.2385%" height="15" fill="rgb(228,143,44)" fg:x="228" fg:w="3"/><text x="18.3740%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2830%" y="629" width="0.0795%" height="15" fill="rgb(246,55,38)" fg:x="230" fg:w="1"/><text x="18.5330%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2830%" y="613" width="0.0795%" height="15" fill="rgb(247,87,16)" fg:x="230" fg:w="1"/><text x="18.5330%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2830%" y="597" width="0.0795%" height="15" fill="rgb(234,129,42)" fg:x="230" fg:w="1"/><text x="18.5330%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.2830%" y="581" width="0.0795%" height="15" fill="rgb(220,82,16)" fg:x="230" fg:w="1"/><text x="18.5330%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2830%" y="565" width="0.0795%" height="15" fill="rgb(211,88,4)" fg:x="230" fg:w="1"/><text x="18.5330%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2830%" y="549" width="0.0795%" height="15" fill="rgb(248,151,21)" fg:x="230" fg:w="1"/><text x="18.5330%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.3625%" y="629" width="0.0795%" height="15" fill="rgb(238,163,6)" fg:x="231" fg:w="1"/><text x="18.6125%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="18.1240%" y="693" width="0.3975%" height="15" fill="rgb(209,183,11)" fg:x="228" fg:w="5"/><text x="18.3740%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="18.1240%" y="677" width="0.3975%" height="15" fill="rgb(219,37,20)" fg:x="228" fg:w="5"/><text x="18.3740%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="18.3625%" y="661" width="0.1590%" height="15" fill="rgb(210,158,4)" fg:x="231" fg:w="2"/><text x="18.6125%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.3625%" y="645" width="0.1590%" height="15" fill="rgb(221,167,53)" fg:x="231" fg:w="2"/><text x="18.6125%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.4420%" y="629" width="0.0795%" height="15" fill="rgb(237,151,45)" fg:x="232" fg:w="1"/><text x="18.6920%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="18.4420%" y="613" width="0.0795%" height="15" fill="rgb(231,39,3)" fg:x="232" fg:w="1"/><text x="18.6920%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.4420%" y="597" width="0.0795%" height="15" fill="rgb(212,167,28)" fg:x="232" fg:w="1"/><text x="18.6920%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4420%" y="581" width="0.0795%" height="15" fill="rgb(232,178,8)" fg:x="232" fg:w="1"/><text x="18.6920%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.4420%" y="565" width="0.0795%" height="15" fill="rgb(225,151,20)" fg:x="232" fg:w="1"/><text x="18.6920%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4420%" y="549" width="0.0795%" height="15" fill="rgb(238,3,37)" fg:x="232" fg:w="1"/><text x="18.6920%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.4420%" y="533" width="0.0795%" height="15" fill="rgb(251,147,42)" fg:x="232" fg:w="1"/><text x="18.6920%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4420%" y="517" width="0.0795%" height="15" fill="rgb(208,173,10)" fg:x="232" fg:w="1"/><text x="18.6920%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4420%" y="501" width="0.0795%" height="15" fill="rgb(246,225,4)" fg:x="232" fg:w="1"/><text x="18.6920%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.4420%" y="485" width="0.0795%" height="15" fill="rgb(248,102,6)" fg:x="232" fg:w="1"/><text x="18.6920%" y="495.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (170 samples, 13.51%)</title><rect x="5.0874%" y="741" width="13.5135%" height="15" fill="rgb(232,6,21)" fg:x="64" fg:w="170"/><text x="5.3374%" y="751.50">&lt;tests::HoldingKeyIn..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="18.0445%" y="725" width="0.5564%" height="15" fill="rgb(221,179,22)" fg:x="227" fg:w="7"/><text x="18.2945%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="18.1240%" y="709" width="0.4769%" height="15" fill="rgb(252,50,20)" fg:x="228" fg:w="6"/><text x="18.3740%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5215%" y="693" width="0.0795%" height="15" fill="rgb(222,56,38)" fg:x="233" fg:w="1"/><text x="18.7715%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5215%" y="677" width="0.0795%" height="15" fill="rgb(206,193,29)" fg:x="233" fg:w="1"/><text x="18.7715%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5215%" y="661" width="0.0795%" height="15" fill="rgb(239,192,45)" fg:x="233" fg:w="1"/><text x="18.7715%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.5215%" y="645" width="0.0795%" height="15" fill="rgb(254,18,36)" fg:x="233" fg:w="1"/><text x="18.7715%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5215%" y="629" width="0.0795%" height="15" fill="rgb(221,127,11)" fg:x="233" fg:w="1"/><text x="18.7715%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.5215%" y="613" width="0.0795%" height="15" fill="rgb(234,146,35)" fg:x="233" fg:w="1"/><text x="18.7715%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.5215%" y="597" width="0.0795%" height="15" fill="rgb(254,201,37)" fg:x="233" fg:w="1"/><text x="18.7715%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.5215%" y="581" width="0.0795%" height="15" fill="rgb(211,202,23)" fg:x="233" fg:w="1"/><text x="18.7715%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.5215%" y="565" width="0.0795%" height="15" fill="rgb(237,91,2)" fg:x="233" fg:w="1"/><text x="18.7715%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.5215%" y="549" width="0.0795%" height="15" fill="rgb(226,228,36)" fg:x="233" fg:w="1"/><text x="18.7715%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.5215%" y="533" width="0.0795%" height="15" fill="rgb(213,63,50)" fg:x="233" fg:w="1"/><text x="18.7715%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="18.6010%" y="741" width="0.1590%" height="15" fill="rgb(235,194,19)" fg:x="234" fg:w="2"/><text x="18.8510%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.6804%" y="725" width="0.0795%" height="15" fill="rgb(207,204,18)" fg:x="235" fg:w="1"/><text x="18.9304%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.8394%" y="709" width="0.0795%" height="15" fill="rgb(248,8,7)" fg:x="237" fg:w="1"/><text x="19.0894%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="18.8394%" y="725" width="0.1590%" height="15" fill="rgb(223,145,47)" fg:x="237" fg:w="2"/><text x="19.0894%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9189%" y="709" width="0.0795%" height="15" fill="rgb(228,84,11)" fg:x="238" fg:w="1"/><text x="19.1689%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.9189%" y="693" width="0.0795%" height="15" fill="rgb(218,76,45)" fg:x="238" fg:w="1"/><text x="19.1689%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="18.9984%" y="693" width="0.1590%" height="15" fill="rgb(223,80,15)" fg:x="239" fg:w="2"/><text x="19.2484%" y="703.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="19.1574%" y="693" width="0.1590%" height="15" fill="rgb(219,218,33)" fg:x="241" fg:w="2"/><text x="19.4074%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="19.1574%" y="677" width="0.1590%" height="15" fill="rgb(208,51,11)" fg:x="241" fg:w="2"/><text x="19.4074%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="19.1574%" y="661" width="0.1590%" height="15" fill="rgb(229,165,39)" fg:x="241" fg:w="2"/><text x="19.4074%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.3164%" y="629" width="0.0795%" height="15" fill="rgb(241,100,24)" fg:x="243" fg:w="1"/><text x="19.5664%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.3164%" y="613" width="0.0795%" height="15" fill="rgb(228,14,23)" fg:x="243" fg:w="1"/><text x="19.5664%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="19.5548%" y="613" width="0.3975%" height="15" fill="rgb(247,116,52)" fg:x="246" fg:w="5"/><text x="19.8048%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="19.7138%" y="597" width="0.2385%" height="15" fill="rgb(216,149,33)" fg:x="248" fg:w="3"/><text x="19.9638%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.8728%" y="581" width="0.0795%" height="15" fill="rgb(238,142,29)" fg:x="250" fg:w="1"/><text x="20.1228%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.8728%" y="565" width="0.0795%" height="15" fill="rgb(224,83,40)" fg:x="250" fg:w="1"/><text x="20.1228%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.8728%" y="549" width="0.0795%" height="15" fill="rgb(234,165,11)" fg:x="250" fg:w="1"/><text x="20.1228%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.8728%" y="533" width="0.0795%" height="15" fill="rgb(215,96,23)" fg:x="250" fg:w="1"/><text x="20.1228%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.8728%" y="517" width="0.0795%" height="15" fill="rgb(233,179,26)" fg:x="250" fg:w="1"/><text x="20.1228%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="19.9523%" y="565" width="0.0795%" height="15" fill="rgb(225,129,33)" fg:x="251" fg:w="1"/><text x="20.2023%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.9523%" y="549" width="0.0795%" height="15" fill="rgb(237,49,13)" fg:x="251" fg:w="1"/><text x="20.2023%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.9523%" y="533" width="0.0795%" height="15" fill="rgb(211,3,31)" fg:x="251" fg:w="1"/><text x="20.2023%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="19.9523%" y="597" width="0.2385%" height="15" fill="rgb(216,152,19)" fg:x="251" fg:w="3"/><text x="20.2023%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="19.9523%" y="581" width="0.2385%" height="15" fill="rgb(251,121,35)" fg:x="251" fg:w="3"/><text x="20.2023%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.0318%" y="565" width="0.1590%" height="15" fill="rgb(210,217,47)" fg:x="252" fg:w="2"/><text x="20.2818%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.2703%" y="581" width="0.0795%" height="15" fill="rgb(244,116,22)" fg:x="255" fg:w="1"/><text x="20.5203%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.3498%" y="581" width="0.1590%" height="15" fill="rgb(228,17,21)" fg:x="256" fg:w="2"/><text x="20.5998%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.3498%" y="565" width="0.1590%" height="15" fill="rgb(240,149,34)" fg:x="256" fg:w="2"/><text x="20.5998%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.4293%" y="549" width="0.0795%" height="15" fill="rgb(208,125,47)" fg:x="257" fg:w="1"/><text x="20.6793%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.4293%" y="533" width="0.0795%" height="15" fill="rgb(249,186,39)" fg:x="257" fg:w="1"/><text x="20.6793%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.4293%" y="517" width="0.0795%" height="15" fill="rgb(240,220,33)" fg:x="257" fg:w="1"/><text x="20.6793%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.4293%" y="501" width="0.0795%" height="15" fill="rgb(243,110,23)" fg:x="257" fg:w="1"/><text x="20.6793%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.4293%" y="485" width="0.0795%" height="15" fill="rgb(219,163,46)" fg:x="257" fg:w="1"/><text x="20.6793%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="20.5087%" y="581" width="0.1590%" height="15" fill="rgb(216,126,30)" fg:x="258" fg:w="2"/><text x="20.7587%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.5087%" y="565" width="0.1590%" height="15" fill="rgb(208,139,11)" fg:x="258" fg:w="2"/><text x="20.7587%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.5087%" y="549" width="0.1590%" height="15" fill="rgb(213,118,36)" fg:x="258" fg:w="2"/><text x="20.7587%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="20.1908%" y="597" width="0.5564%" height="15" fill="rgb(226,43,17)" fg:x="254" fg:w="7"/><text x="20.4408%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.6677%" y="581" width="0.0795%" height="15" fill="rgb(254,217,4)" fg:x="260" fg:w="1"/><text x="20.9177%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.6677%" y="565" width="0.0795%" height="15" fill="rgb(210,134,47)" fg:x="260" fg:w="1"/><text x="20.9177%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.6677%" y="549" width="0.0795%" height="15" fill="rgb(237,24,49)" fg:x="260" fg:w="1"/><text x="20.9177%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.6677%" y="533" width="0.0795%" height="15" fill="rgb(251,39,46)" fg:x="260" fg:w="1"/><text x="20.9177%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.6677%" y="517" width="0.0795%" height="15" fill="rgb(251,220,3)" fg:x="260" fg:w="1"/><text x="20.9177%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.6677%" y="501" width="0.0795%" height="15" fill="rgb(228,105,12)" fg:x="260" fg:w="1"/><text x="20.9177%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.87%)</title><rect x="19.9523%" y="613" width="0.8744%" height="15" fill="rgb(215,196,1)" fg:x="251" fg:w="11"/><text x="20.2023%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.7472%" y="597" width="0.0795%" height="15" fill="rgb(214,33,39)" fg:x="261" fg:w="1"/><text x="20.9972%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.7472%" y="581" width="0.0795%" height="15" fill="rgb(220,19,52)" fg:x="261" fg:w="1"/><text x="20.9972%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (20 samples, 1.59%)</title><rect x="19.3164%" y="645" width="1.5898%" height="15" fill="rgb(221,78,38)" fg:x="243" fg:w="20"/><text x="19.5664%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.51%)</title><rect x="19.3959%" y="629" width="1.5103%" height="15" fill="rgb(253,30,16)" fg:x="244" fg:w="19"/><text x="19.6459%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.8267%" y="613" width="0.0795%" height="15" fill="rgb(242,65,0)" fg:x="262" fg:w="1"/><text x="21.0767%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.9062%" y="645" width="0.0795%" height="15" fill="rgb(235,201,12)" fg:x="263" fg:w="1"/><text x="21.1562%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.9062%" y="629" width="0.0795%" height="15" fill="rgb(233,161,9)" fg:x="263" fg:w="1"/><text x="21.1562%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.9062%" y="613" width="0.0795%" height="15" fill="rgb(241,207,41)" fg:x="263" fg:w="1"/><text x="21.1562%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.9062%" y="597" width="0.0795%" height="15" fill="rgb(212,69,46)" fg:x="263" fg:w="1"/><text x="21.1562%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.9062%" y="581" width="0.0795%" height="15" fill="rgb(239,69,45)" fg:x="263" fg:w="1"/><text x="21.1562%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.9062%" y="565" width="0.0795%" height="15" fill="rgb(242,117,48)" fg:x="263" fg:w="1"/><text x="21.1562%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0652%" y="565" width="0.0795%" height="15" fill="rgb(228,41,36)" fg:x="265" fg:w="1"/><text x="21.3152%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="21.1447%" y="565" width="0.2385%" height="15" fill="rgb(212,3,32)" fg:x="266" fg:w="3"/><text x="21.3947%" y="575.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="21.1447%" y="549" width="0.2385%" height="15" fill="rgb(233,41,49)" fg:x="266" fg:w="3"/><text x="21.3947%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.3831%" y="549" width="0.0795%" height="15" fill="rgb(252,170,49)" fg:x="269" fg:w="1"/><text x="21.6331%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="21.4626%" y="549" width="0.0795%" height="15" fill="rgb(229,53,26)" fg:x="270" fg:w="1"/><text x="21.7126%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="21.4626%" y="533" width="0.0795%" height="15" fill="rgb(217,157,12)" fg:x="270" fg:w="1"/><text x="21.7126%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.4626%" y="517" width="0.0795%" height="15" fill="rgb(227,17,9)" fg:x="270" fg:w="1"/><text x="21.7126%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="21.5421%" y="533" width="0.2385%" height="15" fill="rgb(218,84,12)" fg:x="271" fg:w="3"/><text x="21.7921%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="21.6216%" y="517" width="0.1590%" height="15" fill="rgb(212,79,24)" fg:x="272" fg:w="2"/><text x="21.8716%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.87%)</title><rect x="20.9857%" y="613" width="0.8744%" height="15" fill="rgb(217,222,37)" fg:x="264" fg:w="11"/><text x="21.2357%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="21.0652%" y="597" width="0.7949%" height="15" fill="rgb(246,208,8)" fg:x="265" fg:w="10"/><text x="21.3152%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="21.0652%" y="581" width="0.7949%" height="15" fill="rgb(244,133,10)" fg:x="265" fg:w="10"/><text x="21.3152%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="21.3831%" y="565" width="0.4769%" height="15" fill="rgb(209,219,41)" fg:x="269" fg:w="6"/><text x="21.6331%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="21.5421%" y="549" width="0.3180%" height="15" fill="rgb(253,175,45)" fg:x="271" fg:w="4"/><text x="21.7921%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.7806%" y="533" width="0.0795%" height="15" fill="rgb(235,100,37)" fg:x="274" fg:w="1"/><text x="22.0306%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.8601%" y="613" width="0.0795%" height="15" fill="rgb(225,87,19)" fg:x="275" fg:w="1"/><text x="22.1101%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8601%" y="597" width="0.0795%" height="15" fill="rgb(217,152,17)" fg:x="275" fg:w="1"/><text x="22.1101%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="21.9396%" y="613" width="0.1590%" height="15" fill="rgb(235,72,13)" fg:x="276" fg:w="2"/><text x="22.1896%" y="623.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="22.0191%" y="597" width="0.0795%" height="15" fill="rgb(233,140,18)" fg:x="277" fg:w="1"/><text x="22.2691%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0986%" y="613" width="0.0795%" height="15" fill="rgb(207,212,28)" fg:x="278" fg:w="1"/><text x="22.3486%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (17 samples, 1.35%)</title><rect x="20.9857%" y="629" width="1.3514%" height="15" fill="rgb(220,130,25)" fg:x="264" fg:w="17"/><text x="21.2357%" y="639.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="22.1781%" y="613" width="0.1590%" height="15" fill="rgb(205,55,34)" fg:x="279" fg:w="2"/><text x="22.4281%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="22.1781%" y="597" width="0.1590%" height="15" fill="rgb(237,54,35)" fg:x="279" fg:w="2"/><text x="22.4281%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="22.1781%" y="581" width="0.1590%" height="15" fill="rgb(208,67,23)" fg:x="279" fg:w="2"/><text x="22.4281%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.2576%" y="565" width="0.0795%" height="15" fill="rgb(206,207,50)" fg:x="280" fg:w="1"/><text x="22.5076%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.2576%" y="549" width="0.0795%" height="15" fill="rgb(213,211,42)" fg:x="280" fg:w="1"/><text x="22.5076%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.2576%" y="533" width="0.0795%" height="15" fill="rgb(252,197,50)" fg:x="280" fg:w="1"/><text x="22.5076%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="22.4960%" y="597" width="0.2385%" height="15" fill="rgb(251,211,41)" fg:x="283" fg:w="3"/><text x="22.7460%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="22.7345%" y="597" width="0.0795%" height="15" fill="rgb(229,211,5)" fg:x="286" fg:w="1"/><text x="22.9845%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.7345%" y="581" width="0.0795%" height="15" fill="rgb(239,36,31)" fg:x="286" fg:w="1"/><text x="22.9845%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="22.8140%" y="597" width="0.1590%" height="15" fill="rgb(248,67,31)" fg:x="287" fg:w="2"/><text x="23.0640%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.8935%" y="581" width="0.0795%" height="15" fill="rgb(249,55,44)" fg:x="288" fg:w="1"/><text x="23.1435%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.8935%" y="565" width="0.0795%" height="15" fill="rgb(216,82,12)" fg:x="288" fg:w="1"/><text x="23.1435%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.2909%" y="549" width="0.1590%" height="15" fill="rgb(242,174,1)" fg:x="293" fg:w="2"/><text x="23.5409%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.2909%" y="533" width="0.1590%" height="15" fill="rgb(208,120,29)" fg:x="293" fg:w="2"/><text x="23.5409%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="23.5294%" y="517" width="0.1590%" height="15" fill="rgb(221,105,43)" fg:x="296" fg:w="2"/><text x="23.7794%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="23.5294%" y="501" width="0.1590%" height="15" fill="rgb(234,124,22)" fg:x="296" fg:w="2"/><text x="23.7794%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6089%" y="485" width="0.0795%" height="15" fill="rgb(212,23,30)" fg:x="297" fg:w="1"/><text x="23.8589%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="23.4499%" y="549" width="0.3180%" height="15" fill="rgb(219,122,53)" fg:x="295" fg:w="4"/><text x="23.6999%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="23.5294%" y="533" width="0.2385%" height="15" fill="rgb(248,84,24)" fg:x="296" fg:w="3"/><text x="23.7794%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6884%" y="517" width="0.0795%" height="15" fill="rgb(245,115,18)" fg:x="298" fg:w="1"/><text x="23.9384%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.8474%" y="533" width="0.0795%" height="15" fill="rgb(227,176,51)" fg:x="300" fg:w="1"/><text x="24.0974%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (2 samples, 0.16%)</title><rect x="23.9269%" y="533" width="0.1590%" height="15" fill="rgb(229,63,42)" fg:x="301" fg:w="2"/><text x="24.1769%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1653%" y="517" width="0.0795%" height="15" fill="rgb(247,202,24)" fg:x="304" fg:w="1"/><text x="24.4153%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1653%" y="501" width="0.0795%" height="15" fill="rgb(244,173,20)" fg:x="304" fg:w="1"/><text x="24.4153%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="24.4038%" y="485" width="0.2385%" height="15" fill="rgb(242,81,47)" fg:x="307" fg:w="3"/><text x="24.6538%" y="495.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="24.4038%" y="469" width="0.2385%" height="15" fill="rgb(231,185,54)" fg:x="307" fg:w="3"/><text x="24.6538%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="24.3243%" y="501" width="0.3975%" height="15" fill="rgb(243,55,32)" fg:x="306" fg:w="5"/><text x="24.5743%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.6423%" y="485" width="0.0795%" height="15" fill="rgb(208,167,19)" fg:x="310" fg:w="1"/><text x="24.8923%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.79%)</title><rect x="24.0859%" y="533" width="0.7949%" height="15" fill="rgb(231,72,35)" fg:x="303" fg:w="10"/><text x="24.3359%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="24.2448%" y="517" width="0.6359%" height="15" fill="rgb(250,173,51)" fg:x="305" fg:w="8"/><text x="24.4948%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.7218%" y="501" width="0.1590%" height="15" fill="rgb(209,5,22)" fg:x="311" fg:w="2"/><text x="24.9718%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (23 samples, 1.83%)</title><rect x="23.1320%" y="581" width="1.8283%" height="15" fill="rgb(250,174,19)" fg:x="291" fg:w="23"/><text x="23.3820%" y="591.50">&lt;..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (22 samples, 1.75%)</title><rect x="23.2114%" y="565" width="1.7488%" height="15" fill="rgb(217,3,49)" fg:x="292" fg:w="22"/><text x="23.4614%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (15 samples, 1.19%)</title><rect x="23.7679%" y="549" width="1.1924%" height="15" fill="rgb(218,225,5)" fg:x="299" fg:w="15"/><text x="24.0179%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8808%" y="533" width="0.0795%" height="15" fill="rgb(236,89,11)" fg:x="313" fg:w="1"/><text x="25.1308%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.9603%" y="581" width="0.0795%" height="15" fill="rgb(206,33,28)" fg:x="314" fg:w="1"/><text x="25.2103%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (36 samples, 2.86%)</title><rect x="22.3370%" y="629" width="2.8617%" height="15" fill="rgb(241,56,42)" fg:x="281" fg:w="36"/><text x="22.5870%" y="639.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (36 samples, 2.86%)</title><rect x="22.3370%" y="613" width="2.8617%" height="15" fill="rgb(222,44,11)" fg:x="281" fg:w="36"/><text x="22.5870%" y="623.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (28 samples, 2.23%)</title><rect x="22.9730%" y="597" width="2.2258%" height="15" fill="rgb(234,111,20)" fg:x="289" fg:w="28"/><text x="23.2230%" y="607.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.0397%" y="581" width="0.1590%" height="15" fill="rgb(237,77,6)" fg:x="315" fg:w="2"/><text x="25.2897%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.1192%" y="565" width="0.0795%" height="15" fill="rgb(235,111,23)" fg:x="316" fg:w="1"/><text x="25.3692%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.2782%" y="485" width="0.1590%" height="15" fill="rgb(251,135,29)" fg:x="318" fg:w="2"/><text x="25.5282%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.2782%" y="469" width="0.1590%" height="15" fill="rgb(217,57,1)" fg:x="318" fg:w="2"/><text x="25.5282%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.3577%" y="453" width="0.0795%" height="15" fill="rgb(249,119,31)" fg:x="319" fg:w="1"/><text x="25.6077%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.3577%" y="437" width="0.0795%" height="15" fill="rgb(233,164,33)" fg:x="319" fg:w="1"/><text x="25.6077%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.5167%" y="437" width="0.0795%" height="15" fill="rgb(250,217,43)" fg:x="321" fg:w="1"/><text x="25.7667%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5167%" y="421" width="0.0795%" height="15" fill="rgb(232,154,50)" fg:x="321" fg:w="1"/><text x="25.7667%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.5167%" y="469" width="0.1590%" height="15" fill="rgb(227,190,8)" fg:x="321" fg:w="2"/><text x="25.7667%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.5167%" y="453" width="0.1590%" height="15" fill="rgb(209,217,32)" fg:x="321" fg:w="2"/><text x="25.7667%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.5962%" y="437" width="0.0795%" height="15" fill="rgb(243,203,50)" fg:x="322" fg:w="1"/><text x="25.8462%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.5962%" y="421" width="0.0795%" height="15" fill="rgb(232,152,27)" fg:x="322" fg:w="1"/><text x="25.8462%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="25.2782%" y="501" width="0.5564%" height="15" fill="rgb(240,34,29)" fg:x="318" fg:w="7"/><text x="25.5282%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="25.4372%" y="485" width="0.3975%" height="15" fill="rgb(215,185,52)" fg:x="320" fg:w="5"/><text x="25.6872%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="25.6757%" y="469" width="0.1590%" height="15" fill="rgb(240,89,49)" fg:x="323" fg:w="2"/><text x="25.9257%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.6757%" y="453" width="0.1590%" height="15" fill="rgb(225,12,52)" fg:x="323" fg:w="2"/><text x="25.9257%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="25.2782%" y="517" width="0.6359%" height="15" fill="rgb(239,128,45)" fg:x="318" fg:w="8"/><text x="25.5282%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.8347%" y="501" width="0.0795%" height="15" fill="rgb(211,78,47)" fg:x="325" fg:w="1"/><text x="26.0847%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.8347%" y="485" width="0.0795%" height="15" fill="rgb(232,31,21)" fg:x="325" fg:w="1"/><text x="26.0847%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.79%)</title><rect x="25.1987%" y="533" width="0.7949%" height="15" fill="rgb(222,168,14)" fg:x="317" fg:w="10"/><text x="25.4487%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9141%" y="517" width="0.0795%" height="15" fill="rgb(209,128,24)" fg:x="326" fg:w="1"/><text x="26.1641%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.87%)</title><rect x="25.1987%" y="565" width="0.8744%" height="15" fill="rgb(249,35,13)" fg:x="317" fg:w="11"/><text x="25.4487%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.87%)</title><rect x="25.1987%" y="549" width="0.8744%" height="15" fill="rgb(218,7,2)" fg:x="317" fg:w="11"/><text x="25.4487%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.9936%" y="533" width="0.0795%" height="15" fill="rgb(238,107,27)" fg:x="327" fg:w="1"/><text x="26.2436%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9936%" y="517" width="0.0795%" height="15" fill="rgb(217,88,38)" fg:x="327" fg:w="1"/><text x="26.2436%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="26.0731%" y="565" width="0.1590%" height="15" fill="rgb(230,207,0)" fg:x="328" fg:w="2"/><text x="26.3231%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.1526%" y="549" width="0.0795%" height="15" fill="rgb(249,64,54)" fg:x="329" fg:w="1"/><text x="26.4026%" y="559.50"></text></g><g><title>engine::session::Session::close (95 samples, 7.55%)</title><rect x="18.7599%" y="741" width="7.5517%" height="15" fill="rgb(231,7,11)" fg:x="236" fg:w="95"/><text x="19.0099%" y="751.50">engine::se..</text></g><g><title>engine::session::state::State::close (92 samples, 7.31%)</title><rect x="18.9984%" y="725" width="7.3132%" height="15" fill="rgb(205,149,21)" fg:x="239" fg:w="92"/><text x="19.2484%" y="735.50">engine::se..</text></g><g><title>engine::session::state::State::flush_entities (92 samples, 7.31%)</title><rect x="18.9984%" y="709" width="7.3132%" height="15" fill="rgb(215,126,34)" fg:x="239" fg:w="92"/><text x="19.2484%" y="719.50">engine::se..</text></g><g><title>core::iter::adapters::try_process (88 samples, 7.00%)</title><rect x="19.3164%" y="693" width="6.9952%" height="15" fill="rgb(241,132,45)" fg:x="243" fg:w="88"/><text x="19.5664%" y="703.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (88 samples, 7.00%)</title><rect x="19.3164%" y="677" width="6.9952%" height="15" fill="rgb(252,69,32)" fg:x="243" fg:w="88"/><text x="19.5664%" y="687.50">&lt;alloc::v..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (88 samples, 7.00%)</title><rect x="19.3164%" y="661" width="6.9952%" height="15" fill="rgb(232,204,19)" fg:x="243" fg:w="88"/><text x="19.5664%" y="671.50">engine::s..</text></g><g><title>kernel::model::any_entity_changes (67 samples, 5.33%)</title><rect x="20.9857%" y="645" width="5.3259%" height="15" fill="rgb(249,15,47)" fg:x="264" fg:w="67"/><text x="21.2357%" y="655.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (14 samples, 1.11%)</title><rect x="25.1987%" y="629" width="1.1129%" height="15" fill="rgb(209,227,23)" fg:x="317" fg:w="14"/><text x="25.4487%" y="639.50"></text></g><g><title>serde_json::de::from_trait (14 samples, 1.11%)</title><rect x="25.1987%" y="613" width="1.1129%" height="15" fill="rgb(248,92,24)" fg:x="317" fg:w="14"/><text x="25.4487%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.11%)</title><rect x="25.1987%" y="597" width="1.1129%" height="15" fill="rgb(247,59,2)" fg:x="317" fg:w="14"/><text x="25.4487%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.11%)</title><rect x="25.1987%" y="581" width="1.1129%" height="15" fill="rgb(221,30,5)" fg:x="317" fg:w="14"/><text x="25.4487%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2321%" y="565" width="0.0795%" height="15" fill="rgb(208,108,53)" fg:x="330" fg:w="1"/><text x="26.4821%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2321%" y="549" width="0.0795%" height="15" fill="rgb(211,183,26)" fg:x="330" fg:w="1"/><text x="26.4821%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.2321%" y="533" width="0.0795%" height="15" fill="rgb(232,132,4)" fg:x="330" fg:w="1"/><text x="26.4821%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.3116%" y="709" width="0.0795%" height="15" fill="rgb(253,128,37)" fg:x="331" fg:w="1"/><text x="26.5616%" y="719.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="26.3911%" y="709" width="0.1590%" height="15" fill="rgb(221,58,24)" fg:x="332" fg:w="2"/><text x="26.6411%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="26.3911%" y="693" width="0.1590%" height="15" fill="rgb(230,54,45)" fg:x="332" fg:w="2"/><text x="26.6411%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="26.4706%" y="677" width="0.0795%" height="15" fill="rgb(254,21,18)" fg:x="333" fg:w="1"/><text x="26.7206%" y="687.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="26.5501%" y="597" width="0.1590%" height="15" fill="rgb(221,108,0)" fg:x="334" fg:w="2"/><text x="26.8001%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="26.5501%" y="581" width="0.1590%" height="15" fill="rgb(206,95,1)" fg:x="334" fg:w="2"/><text x="26.8001%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="26.5501%" y="565" width="0.1590%" height="15" fill="rgb(237,52,5)" fg:x="334" fg:w="2"/><text x="26.8001%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="26.5501%" y="549" width="0.1590%" height="15" fill="rgb(218,150,34)" fg:x="334" fg:w="2"/><text x="26.8001%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="26.6296%" y="533" width="0.0795%" height="15" fill="rgb(235,194,28)" fg:x="335" fg:w="1"/><text x="26.8796%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="26.6296%" y="517" width="0.0795%" height="15" fill="rgb(245,92,18)" fg:x="335" fg:w="1"/><text x="26.8796%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="26.6296%" y="501" width="0.0795%" height="15" fill="rgb(253,203,53)" fg:x="335" fg:w="1"/><text x="26.8796%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="26.6296%" y="485" width="0.0795%" height="15" fill="rgb(249,185,47)" fg:x="335" fg:w="1"/><text x="26.8796%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="26.6296%" y="469" width="0.0795%" height="15" fill="rgb(252,194,52)" fg:x="335" fg:w="1"/><text x="26.8796%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="26.6296%" y="453" width="0.0795%" height="15" fill="rgb(210,53,36)" fg:x="335" fg:w="1"/><text x="26.8796%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="26.6296%" y="437" width="0.0795%" height="15" fill="rgb(237,37,25)" fg:x="335" fg:w="1"/><text x="26.8796%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.6296%" y="421" width="0.0795%" height="15" fill="rgb(242,116,27)" fg:x="335" fg:w="1"/><text x="26.8796%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.6296%" y="405" width="0.0795%" height="15" fill="rgb(213,185,26)" fg:x="335" fg:w="1"/><text x="26.8796%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="26.6296%" y="389" width="0.0795%" height="15" fill="rgb(225,204,8)" fg:x="335" fg:w="1"/><text x="26.8796%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="26.6296%" y="373" width="0.0795%" height="15" fill="rgb(254,111,37)" fg:x="335" fg:w="1"/><text x="26.8796%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="26.6296%" y="357" width="0.0795%" height="15" fill="rgb(242,35,9)" fg:x="335" fg:w="1"/><text x="26.8796%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="26.6296%" y="341" width="0.0795%" height="15" fill="rgb(232,138,49)" fg:x="335" fg:w="1"/><text x="26.8796%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="26.6296%" y="325" width="0.0795%" height="15" fill="rgb(247,56,4)" fg:x="335" fg:w="1"/><text x="26.8796%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="26.6296%" y="309" width="0.0795%" height="15" fill="rgb(226,179,17)" fg:x="335" fg:w="1"/><text x="26.8796%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.6296%" y="293" width="0.0795%" height="15" fill="rgb(216,163,45)" fg:x="335" fg:w="1"/><text x="26.8796%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="26.6296%" y="277" width="0.0795%" height="15" fill="rgb(211,157,3)" fg:x="335" fg:w="1"/><text x="26.8796%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.6296%" y="261" width="0.0795%" height="15" fill="rgb(234,44,20)" fg:x="335" fg:w="1"/><text x="26.8796%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="26.6296%" y="245" width="0.0795%" height="15" fill="rgb(254,138,23)" fg:x="335" fg:w="1"/><text x="26.8796%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="26.6296%" y="229" width="0.0795%" height="15" fill="rgb(206,119,39)" fg:x="335" fg:w="1"/><text x="26.8796%" y="239.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="26.6296%" y="213" width="0.0795%" height="15" fill="rgb(231,105,52)" fg:x="335" fg:w="1"/><text x="26.8796%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.6296%" y="197" width="0.0795%" height="15" fill="rgb(250,20,5)" fg:x="335" fg:w="1"/><text x="26.8796%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="26.5501%" y="693" width="0.2385%" height="15" fill="rgb(215,198,30)" fg:x="334" fg:w="3"/><text x="26.8001%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="26.5501%" y="677" width="0.2385%" height="15" fill="rgb(246,142,8)" fg:x="334" fg:w="3"/><text x="26.8001%" y="687.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="26.5501%" y="661" width="0.2385%" height="15" fill="rgb(243,26,38)" fg:x="334" fg:w="3"/><text x="26.8001%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="26.5501%" y="645" width="0.2385%" height="15" fill="rgb(205,133,28)" fg:x="334" fg:w="3"/><text x="26.8001%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="26.5501%" y="629" width="0.2385%" height="15" fill="rgb(212,34,0)" fg:x="334" fg:w="3"/><text x="26.8001%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (3 samples, 0.24%)</title><rect x="26.5501%" y="613" width="0.2385%" height="15" fill="rgb(251,226,22)" fg:x="334" fg:w="3"/><text x="26.8001%" y="623.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="26.7091%" y="597" width="0.0795%" height="15" fill="rgb(252,119,9)" fg:x="336" fg:w="1"/><text x="26.9591%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="26.7091%" y="581" width="0.0795%" height="15" fill="rgb(213,150,50)" fg:x="336" fg:w="1"/><text x="26.9591%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.7091%" y="565" width="0.0795%" height="15" fill="rgb(212,24,39)" fg:x="336" fg:w="1"/><text x="26.9591%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.7091%" y="549" width="0.0795%" height="15" fill="rgb(213,46,39)" fg:x="336" fg:w="1"/><text x="26.9591%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="26.7091%" y="533" width="0.0795%" height="15" fill="rgb(239,106,12)" fg:x="336" fg:w="1"/><text x="26.9591%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="26.7091%" y="517" width="0.0795%" height="15" fill="rgb(249,229,21)" fg:x="336" fg:w="1"/><text x="26.9591%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="26.7091%" y="501" width="0.0795%" height="15" fill="rgb(212,158,3)" fg:x="336" fg:w="1"/><text x="26.9591%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="26.7091%" y="485" width="0.0795%" height="15" fill="rgb(253,26,48)" fg:x="336" fg:w="1"/><text x="26.9591%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="26.7091%" y="469" width="0.0795%" height="15" fill="rgb(238,178,20)" fg:x="336" fg:w="1"/><text x="26.9591%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7886%" y="677" width="0.0795%" height="15" fill="rgb(208,86,15)" fg:x="337" fg:w="1"/><text x="27.0386%" y="687.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (3 samples, 0.24%)</title><rect x="26.8680%" y="645" width="0.2385%" height="15" fill="rgb(239,42,53)" fg:x="338" fg:w="3"/><text x="27.1180%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="27.0270%" y="629" width="0.0795%" height="15" fill="rgb(245,226,8)" fg:x="340" fg:w="1"/><text x="27.2770%" y="639.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (5 samples, 0.40%)</title><rect x="26.8680%" y="677" width="0.3975%" height="15" fill="rgb(216,176,32)" fg:x="338" fg:w="5"/><text x="27.1180%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (5 samples, 0.40%)</title><rect x="26.8680%" y="661" width="0.3975%" height="15" fill="rgb(231,186,21)" fg:x="338" fg:w="5"/><text x="27.1180%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (2 samples, 0.16%)</title><rect x="27.1065%" y="645" width="0.1590%" height="15" fill="rgb(205,95,49)" fg:x="341" fg:w="2"/><text x="27.3565%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="27.1860%" y="629" width="0.0795%" height="15" fill="rgb(217,145,8)" fg:x="342" fg:w="1"/><text x="27.4360%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1860%" y="613" width="0.0795%" height="15" fill="rgb(239,144,48)" fg:x="342" fg:w="1"/><text x="27.4360%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="27.3450%" y="565" width="0.2385%" height="15" fill="rgb(214,189,23)" fg:x="344" fg:w="3"/><text x="27.5950%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="27.3450%" y="549" width="0.2385%" height="15" fill="rgb(229,157,17)" fg:x="344" fg:w="3"/><text x="27.5950%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="27.3450%" y="533" width="0.2385%" height="15" fill="rgb(230,5,48)" fg:x="344" fg:w="3"/><text x="27.5950%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="27.3450%" y="517" width="0.2385%" height="15" fill="rgb(224,156,48)" fg:x="344" fg:w="3"/><text x="27.5950%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="27.3450%" y="501" width="0.2385%" height="15" fill="rgb(223,14,29)" fg:x="344" fg:w="3"/><text x="27.5950%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.5040%" y="485" width="0.0795%" height="15" fill="rgb(229,96,36)" fg:x="346" fg:w="1"/><text x="27.7540%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="27.6630%" y="517" width="0.0795%" height="15" fill="rgb(231,102,53)" fg:x="348" fg:w="1"/><text x="27.9130%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.6630%" y="501" width="0.0795%" height="15" fill="rgb(210,77,38)" fg:x="348" fg:w="1"/><text x="27.9130%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.6630%" y="485" width="0.0795%" height="15" fill="rgb(235,131,6)" fg:x="348" fg:w="1"/><text x="27.9130%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.6630%" y="469" width="0.0795%" height="15" fill="rgb(252,55,38)" fg:x="348" fg:w="1"/><text x="27.9130%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.6630%" y="453" width="0.0795%" height="15" fill="rgb(246,38,14)" fg:x="348" fg:w="1"/><text x="27.9130%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.6630%" y="437" width="0.0795%" height="15" fill="rgb(242,27,5)" fg:x="348" fg:w="1"/><text x="27.9130%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="27.6630%" y="421" width="0.0795%" height="15" fill="rgb(228,65,35)" fg:x="348" fg:w="1"/><text x="27.9130%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="27.6630%" y="405" width="0.0795%" height="15" fill="rgb(245,93,11)" fg:x="348" fg:w="1"/><text x="27.9130%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.7424%" y="469" width="0.1590%" height="15" fill="rgb(213,1,31)" fg:x="349" fg:w="2"/><text x="27.9924%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.7424%" y="453" width="0.1590%" height="15" fill="rgb(237,205,14)" fg:x="349" fg:w="2"/><text x="27.9924%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.7424%" y="437" width="0.1590%" height="15" fill="rgb(232,118,45)" fg:x="349" fg:w="2"/><text x="27.9924%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8219%" y="421" width="0.0795%" height="15" fill="rgb(218,5,6)" fg:x="350" fg:w="1"/><text x="28.0719%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="27.7424%" y="501" width="0.2385%" height="15" fill="rgb(251,87,51)" fg:x="349" fg:w="3"/><text x="27.9924%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="27.7424%" y="485" width="0.2385%" height="15" fill="rgb(207,225,20)" fg:x="349" fg:w="3"/><text x="27.9924%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.9014%" y="469" width="0.0795%" height="15" fill="rgb(222,78,54)" fg:x="351" fg:w="1"/><text x="28.1514%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.9014%" y="453" width="0.0795%" height="15" fill="rgb(232,85,16)" fg:x="351" fg:w="1"/><text x="28.1514%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.9014%" y="437" width="0.0795%" height="15" fill="rgb(244,25,33)" fg:x="351" fg:w="1"/><text x="28.1514%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.9014%" y="421" width="0.0795%" height="15" fill="rgb(233,24,36)" fg:x="351" fg:w="1"/><text x="28.1514%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.9014%" y="405" width="0.0795%" height="15" fill="rgb(253,49,54)" fg:x="351" fg:w="1"/><text x="28.1514%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.9014%" y="389" width="0.0795%" height="15" fill="rgb(245,12,22)" fg:x="351" fg:w="1"/><text x="28.1514%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.9014%" y="373" width="0.0795%" height="15" fill="rgb(253,141,28)" fg:x="351" fg:w="1"/><text x="28.1514%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.9014%" y="357" width="0.0795%" height="15" fill="rgb(225,207,27)" fg:x="351" fg:w="1"/><text x="28.1514%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.9014%" y="341" width="0.0795%" height="15" fill="rgb(220,84,2)" fg:x="351" fg:w="1"/><text x="28.1514%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.9014%" y="325" width="0.0795%" height="15" fill="rgb(224,37,37)" fg:x="351" fg:w="1"/><text x="28.1514%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.9014%" y="309" width="0.0795%" height="15" fill="rgb(220,143,18)" fg:x="351" fg:w="1"/><text x="28.1514%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.9014%" y="293" width="0.0795%" height="15" fill="rgb(210,88,33)" fg:x="351" fg:w="1"/><text x="28.1514%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.9809%" y="485" width="0.1590%" height="15" fill="rgb(219,87,51)" fg:x="352" fg:w="2"/><text x="28.2309%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.9809%" y="469" width="0.1590%" height="15" fill="rgb(211,7,35)" fg:x="352" fg:w="2"/><text x="28.2309%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.9809%" y="453" width="0.1590%" height="15" fill="rgb(232,77,2)" fg:x="352" fg:w="2"/><text x="28.2309%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.0604%" y="437" width="0.0795%" height="15" fill="rgb(249,94,25)" fg:x="353" fg:w="1"/><text x="28.3104%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.0604%" y="421" width="0.0795%" height="15" fill="rgb(215,112,2)" fg:x="353" fg:w="1"/><text x="28.3104%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.0604%" y="405" width="0.0795%" height="15" fill="rgb(226,115,48)" fg:x="353" fg:w="1"/><text x="28.3104%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.0604%" y="389" width="0.0795%" height="15" fill="rgb(249,196,10)" fg:x="353" fg:w="1"/><text x="28.3104%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.0604%" y="373" width="0.0795%" height="15" fill="rgb(237,109,14)" fg:x="353" fg:w="1"/><text x="28.3104%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.0604%" y="357" width="0.0795%" height="15" fill="rgb(217,103,53)" fg:x="353" fg:w="1"/><text x="28.3104%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.0604%" y="341" width="0.0795%" height="15" fill="rgb(244,137,9)" fg:x="353" fg:w="1"/><text x="28.3104%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.0604%" y="325" width="0.0795%" height="15" fill="rgb(227,201,3)" fg:x="353" fg:w="1"/><text x="28.3104%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.0604%" y="309" width="0.0795%" height="15" fill="rgb(243,94,6)" fg:x="353" fg:w="1"/><text x="28.3104%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.0604%" y="293" width="0.0795%" height="15" fill="rgb(235,118,5)" fg:x="353" fg:w="1"/><text x="28.3104%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.0604%" y="277" width="0.0795%" height="15" fill="rgb(247,10,30)" fg:x="353" fg:w="1"/><text x="28.3104%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="27.9809%" y="501" width="0.2385%" height="15" fill="rgb(205,26,28)" fg:x="352" fg:w="3"/><text x="28.2309%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.1399%" y="485" width="0.0795%" height="15" fill="rgb(206,99,35)" fg:x="354" fg:w="1"/><text x="28.3899%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.1399%" y="469" width="0.0795%" height="15" fill="rgb(238,130,40)" fg:x="354" fg:w="1"/><text x="28.3899%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.3784%" y="421" width="0.0795%" height="15" fill="rgb(224,126,31)" fg:x="357" fg:w="1"/><text x="28.6284%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="28.4579%" y="373" width="0.0795%" height="15" fill="rgb(254,105,17)" fg:x="358" fg:w="1"/><text x="28.7079%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5374%" y="357" width="0.0795%" height="15" fill="rgb(216,87,36)" fg:x="359" fg:w="1"/><text x="28.7874%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.5374%" y="341" width="0.0795%" height="15" fill="rgb(240,21,12)" fg:x="359" fg:w="1"/><text x="28.7874%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.5374%" y="325" width="0.0795%" height="15" fill="rgb(245,192,34)" fg:x="359" fg:w="1"/><text x="28.7874%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5374%" y="309" width="0.0795%" height="15" fill="rgb(226,100,49)" fg:x="359" fg:w="1"/><text x="28.7874%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="28.4579%" y="405" width="0.2385%" height="15" fill="rgb(245,188,27)" fg:x="358" fg:w="3"/><text x="28.7079%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="28.4579%" y="389" width="0.2385%" height="15" fill="rgb(212,170,8)" fg:x="358" fg:w="3"/><text x="28.7079%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="28.5374%" y="373" width="0.1590%" height="15" fill="rgb(217,113,29)" fg:x="359" fg:w="2"/><text x="28.7874%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="28.6169%" y="357" width="0.0795%" height="15" fill="rgb(237,30,3)" fg:x="360" fg:w="1"/><text x="28.8669%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.6963%" y="405" width="0.0795%" height="15" fill="rgb(227,19,28)" fg:x="361" fg:w="1"/><text x="28.9463%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.6963%" y="389" width="0.0795%" height="15" fill="rgb(239,172,45)" fg:x="361" fg:w="1"/><text x="28.9463%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.6963%" y="373" width="0.0795%" height="15" fill="rgb(254,55,39)" fg:x="361" fg:w="1"/><text x="28.9463%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.6963%" y="357" width="0.0795%" height="15" fill="rgb(249,208,12)" fg:x="361" fg:w="1"/><text x="28.9463%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.6963%" y="341" width="0.0795%" height="15" fill="rgb(240,52,13)" fg:x="361" fg:w="1"/><text x="28.9463%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="28.3784%" y="453" width="0.4769%" height="15" fill="rgb(252,149,13)" fg:x="357" fg:w="6"/><text x="28.6284%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="28.3784%" y="437" width="0.4769%" height="15" fill="rgb(232,81,48)" fg:x="357" fg:w="6"/><text x="28.6284%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="28.4579%" y="421" width="0.3975%" height="15" fill="rgb(222,144,2)" fg:x="358" fg:w="5"/><text x="28.7079%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.7758%" y="405" width="0.0795%" height="15" fill="rgb(216,81,32)" fg:x="362" fg:w="1"/><text x="29.0258%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.7758%" y="389" width="0.0795%" height="15" fill="rgb(244,78,51)" fg:x="362" fg:w="1"/><text x="29.0258%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="28.7758%" y="373" width="0.0795%" height="15" fill="rgb(217,66,21)" fg:x="362" fg:w="1"/><text x="29.0258%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="28.7758%" y="357" width="0.0795%" height="15" fill="rgb(247,101,42)" fg:x="362" fg:w="1"/><text x="29.0258%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="28.7758%" y="341" width="0.0795%" height="15" fill="rgb(227,81,39)" fg:x="362" fg:w="1"/><text x="29.0258%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (9 samples, 0.72%)</title><rect x="28.2194%" y="501" width="0.7154%" height="15" fill="rgb(220,223,44)" fg:x="355" fg:w="9"/><text x="28.4694%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.72%)</title><rect x="28.2194%" y="485" width="0.7154%" height="15" fill="rgb(205,218,2)" fg:x="355" fg:w="9"/><text x="28.4694%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.72%)</title><rect x="28.2194%" y="469" width="0.7154%" height="15" fill="rgb(212,207,28)" fg:x="355" fg:w="9"/><text x="28.4694%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.8553%" y="453" width="0.0795%" height="15" fill="rgb(224,12,41)" fg:x="363" fg:w="1"/><text x="29.1053%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.9348%" y="373" width="0.0795%" height="15" fill="rgb(216,118,12)" fg:x="364" fg:w="1"/><text x="29.1848%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.9348%" y="357" width="0.0795%" height="15" fill="rgb(252,97,46)" fg:x="364" fg:w="1"/><text x="29.1848%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.9348%" y="341" width="0.0795%" height="15" fill="rgb(244,206,19)" fg:x="364" fg:w="1"/><text x="29.1848%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.9348%" y="325" width="0.0795%" height="15" fill="rgb(231,84,31)" fg:x="364" fg:w="1"/><text x="29.1848%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.9348%" y="309" width="0.0795%" height="15" fill="rgb(244,133,0)" fg:x="364" fg:w="1"/><text x="29.1848%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (23 samples, 1.83%)</title><rect x="27.2655%" y="597" width="1.8283%" height="15" fill="rgb(223,15,50)" fg:x="343" fg:w="23"/><text x="27.5155%" y="607.50">&lt;..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (23 samples, 1.83%)</title><rect x="27.2655%" y="581" width="1.8283%" height="15" fill="rgb(250,118,49)" fg:x="343" fg:w="23"/><text x="27.5155%" y="591.50">&lt;..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (19 samples, 1.51%)</title><rect x="27.5835%" y="565" width="1.5103%" height="15" fill="rgb(248,25,38)" fg:x="347" fg:w="19"/><text x="27.8335%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (19 samples, 1.51%)</title><rect x="27.5835%" y="549" width="1.5103%" height="15" fill="rgb(215,70,14)" fg:x="347" fg:w="19"/><text x="27.8335%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (19 samples, 1.51%)</title><rect x="27.5835%" y="533" width="1.5103%" height="15" fill="rgb(215,28,15)" fg:x="347" fg:w="19"/><text x="27.8335%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.35%)</title><rect x="27.7424%" y="517" width="1.3514%" height="15" fill="rgb(243,6,28)" fg:x="349" fg:w="17"/><text x="27.9924%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="28.9348%" y="501" width="0.1590%" height="15" fill="rgb(222,130,1)" fg:x="364" fg:w="2"/><text x="29.1848%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="28.9348%" y="485" width="0.1590%" height="15" fill="rgb(236,166,44)" fg:x="364" fg:w="2"/><text x="29.1848%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.9348%" y="469" width="0.1590%" height="15" fill="rgb(221,108,14)" fg:x="364" fg:w="2"/><text x="29.1848%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.9348%" y="453" width="0.1590%" height="15" fill="rgb(252,3,45)" fg:x="364" fg:w="2"/><text x="29.1848%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.9348%" y="437" width="0.1590%" height="15" fill="rgb(237,68,30)" fg:x="364" fg:w="2"/><text x="29.1848%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.9348%" y="421" width="0.1590%" height="15" fill="rgb(211,79,22)" fg:x="364" fg:w="2"/><text x="29.1848%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.9348%" y="405" width="0.1590%" height="15" fill="rgb(252,185,21)" fg:x="364" fg:w="2"/><text x="29.1848%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.9348%" y="389" width="0.1590%" height="15" fill="rgb(225,189,26)" fg:x="364" fg:w="2"/><text x="29.1848%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.0143%" y="373" width="0.0795%" height="15" fill="rgb(241,30,40)" fg:x="365" fg:w="1"/><text x="29.2643%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.0143%" y="357" width="0.0795%" height="15" fill="rgb(235,215,44)" fg:x="365" fg:w="1"/><text x="29.2643%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.3323%" y="325" width="0.0795%" height="15" fill="rgb(205,8,29)" fg:x="369" fg:w="1"/><text x="29.5823%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="29.2528%" y="357" width="0.2385%" height="15" fill="rgb(241,137,42)" fg:x="368" fg:w="3"/><text x="29.5028%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.3323%" y="341" width="0.1590%" height="15" fill="rgb(237,155,2)" fg:x="369" fg:w="2"/><text x="29.5823%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.4118%" y="325" width="0.0795%" height="15" fill="rgb(245,29,42)" fg:x="370" fg:w="1"/><text x="29.6618%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="29.4913%" y="357" width="0.2385%" height="15" fill="rgb(234,101,35)" fg:x="371" fg:w="3"/><text x="29.7413%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="29.4913%" y="341" width="0.2385%" height="15" fill="rgb(228,64,37)" fg:x="371" fg:w="3"/><text x="29.7413%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6502%" y="325" width="0.0795%" height="15" fill="rgb(217,214,36)" fg:x="373" fg:w="1"/><text x="29.9002%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6502%" y="309" width="0.0795%" height="15" fill="rgb(243,70,3)" fg:x="373" fg:w="1"/><text x="29.9002%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.6502%" y="293" width="0.0795%" height="15" fill="rgb(253,158,52)" fg:x="373" fg:w="1"/><text x="29.9002%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8092%" y="309" width="0.0795%" height="15" fill="rgb(234,111,54)" fg:x="375" fg:w="1"/><text x="30.0592%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (9 samples, 0.72%)</title><rect x="29.2528%" y="421" width="0.7154%" height="15" fill="rgb(217,70,32)" fg:x="368" fg:w="9"/><text x="29.5028%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (9 samples, 0.72%)</title><rect x="29.2528%" y="405" width="0.7154%" height="15" fill="rgb(234,18,33)" fg:x="368" fg:w="9"/><text x="29.5028%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (9 samples, 0.72%)</title><rect x="29.2528%" y="389" width="0.7154%" height="15" fill="rgb(234,12,49)" fg:x="368" fg:w="9"/><text x="29.5028%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="29.2528%" y="373" width="0.7154%" height="15" fill="rgb(236,10,21)" fg:x="368" fg:w="9"/><text x="29.5028%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="29.7297%" y="357" width="0.2385%" height="15" fill="rgb(248,182,45)" fg:x="374" fg:w="3"/><text x="29.9797%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="29.8092%" y="341" width="0.1590%" height="15" fill="rgb(217,95,36)" fg:x="375" fg:w="2"/><text x="30.0592%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="29.8092%" y="325" width="0.1590%" height="15" fill="rgb(212,110,31)" fg:x="375" fg:w="2"/><text x="30.0592%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.8887%" y="309" width="0.0795%" height="15" fill="rgb(206,32,53)" fg:x="376" fg:w="1"/><text x="30.1387%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="30.1272%" y="373" width="0.0795%" height="15" fill="rgb(246,141,37)" fg:x="379" fg:w="1"/><text x="30.3772%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.1272%" y="357" width="0.0795%" height="15" fill="rgb(219,16,7)" fg:x="379" fg:w="1"/><text x="30.3772%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="30.1272%" y="389" width="0.2385%" height="15" fill="rgb(230,205,45)" fg:x="379" fg:w="3"/><text x="30.3772%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="30.2067%" y="373" width="0.1590%" height="15" fill="rgb(231,43,49)" fg:x="380" fg:w="2"/><text x="30.4567%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.2067%" y="357" width="0.1590%" height="15" fill="rgb(212,106,34)" fg:x="380" fg:w="2"/><text x="30.4567%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.2862%" y="341" width="0.0795%" height="15" fill="rgb(206,83,17)" fg:x="381" fg:w="1"/><text x="30.5362%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.2862%" y="325" width="0.0795%" height="15" fill="rgb(244,154,49)" fg:x="381" fg:w="1"/><text x="30.5362%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="30.4452%" y="357" width="0.2385%" height="15" fill="rgb(244,149,49)" fg:x="383" fg:w="3"/><text x="30.6952%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.5246%" y="341" width="0.1590%" height="15" fill="rgb(227,134,18)" fg:x="384" fg:w="2"/><text x="30.7746%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.5246%" y="325" width="0.1590%" height="15" fill="rgb(237,116,36)" fg:x="384" fg:w="2"/><text x="30.7746%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.6041%" y="309" width="0.0795%" height="15" fill="rgb(205,129,40)" fg:x="385" fg:w="1"/><text x="30.8541%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.6041%" y="293" width="0.0795%" height="15" fill="rgb(236,178,4)" fg:x="385" fg:w="1"/><text x="30.8541%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.6041%" y="277" width="0.0795%" height="15" fill="rgb(251,76,53)" fg:x="385" fg:w="1"/><text x="30.8541%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.6041%" y="261" width="0.0795%" height="15" fill="rgb(242,92,40)" fg:x="385" fg:w="1"/><text x="30.8541%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.6041%" y="245" width="0.0795%" height="15" fill="rgb(209,45,30)" fg:x="385" fg:w="1"/><text x="30.8541%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.6041%" y="229" width="0.0795%" height="15" fill="rgb(218,157,36)" fg:x="385" fg:w="1"/><text x="30.8541%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.6041%" y="213" width="0.0795%" height="15" fill="rgb(222,186,16)" fg:x="385" fg:w="1"/><text x="30.8541%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.6041%" y="197" width="0.0795%" height="15" fill="rgb(254,72,35)" fg:x="385" fg:w="1"/><text x="30.8541%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.6041%" y="181" width="0.0795%" height="15" fill="rgb(224,25,35)" fg:x="385" fg:w="1"/><text x="30.8541%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.6041%" y="165" width="0.0795%" height="15" fill="rgb(206,135,52)" fg:x="385" fg:w="1"/><text x="30.8541%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.6041%" y="149" width="0.0795%" height="15" fill="rgb(229,174,47)" fg:x="385" fg:w="1"/><text x="30.8541%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6041%" y="133" width="0.0795%" height="15" fill="rgb(242,184,21)" fg:x="385" fg:w="1"/><text x="30.8541%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="30.6836%" y="357" width="0.1590%" height="15" fill="rgb(213,22,45)" fg:x="386" fg:w="2"/><text x="30.9336%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.7631%" y="341" width="0.0795%" height="15" fill="rgb(237,81,54)" fg:x="387" fg:w="1"/><text x="31.0131%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="30.4452%" y="373" width="0.5564%" height="15" fill="rgb(248,177,18)" fg:x="383" fg:w="7"/><text x="30.6952%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="30.8426%" y="357" width="0.1590%" height="15" fill="rgb(254,31,16)" fg:x="388" fg:w="2"/><text x="31.0926%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.8426%" y="341" width="0.1590%" height="15" fill="rgb(235,20,31)" fg:x="388" fg:w="2"/><text x="31.0926%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="30.8426%" y="325" width="0.1590%" height="15" fill="rgb(240,56,43)" fg:x="388" fg:w="2"/><text x="31.0926%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.8426%" y="309" width="0.1590%" height="15" fill="rgb(237,197,51)" fg:x="388" fg:w="2"/><text x="31.0926%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.9221%" y="293" width="0.0795%" height="15" fill="rgb(241,162,44)" fg:x="389" fg:w="1"/><text x="31.1721%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.9221%" y="277" width="0.0795%" height="15" fill="rgb(224,23,20)" fg:x="389" fg:w="1"/><text x="31.1721%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (9 samples, 0.72%)</title><rect x="30.3657%" y="389" width="0.7154%" height="15" fill="rgb(250,109,34)" fg:x="382" fg:w="9"/><text x="30.6157%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.0016%" y="373" width="0.0795%" height="15" fill="rgb(214,175,50)" fg:x="390" fg:w="1"/><text x="31.2516%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.0811%" y="373" width="0.0795%" height="15" fill="rgb(213,182,5)" fg:x="391" fg:w="1"/><text x="31.3311%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.0811%" y="357" width="0.0795%" height="15" fill="rgb(209,199,19)" fg:x="391" fg:w="1"/><text x="31.3311%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.0811%" y="341" width="0.0795%" height="15" fill="rgb(236,224,42)" fg:x="391" fg:w="1"/><text x="31.3311%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.0811%" y="325" width="0.0795%" height="15" fill="rgb(246,226,29)" fg:x="391" fg:w="1"/><text x="31.3311%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.0811%" y="309" width="0.0795%" height="15" fill="rgb(227,223,11)" fg:x="391" fg:w="1"/><text x="31.3311%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.0811%" y="293" width="0.0795%" height="15" fill="rgb(219,7,51)" fg:x="391" fg:w="1"/><text x="31.3311%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.0811%" y="277" width="0.0795%" height="15" fill="rgb(245,167,10)" fg:x="391" fg:w="1"/><text x="31.3311%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.1606%" y="309" width="0.0795%" height="15" fill="rgb(237,224,16)" fg:x="392" fg:w="1"/><text x="31.4106%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="31.0811%" y="389" width="0.3180%" height="15" fill="rgb(226,132,13)" fg:x="391" fg:w="4"/><text x="31.3311%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="31.1606%" y="373" width="0.2385%" height="15" fill="rgb(214,140,3)" fg:x="392" fg:w="3"/><text x="31.4106%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.1606%" y="357" width="0.2385%" height="15" fill="rgb(221,177,4)" fg:x="392" fg:w="3"/><text x="31.4106%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="31.1606%" y="341" width="0.2385%" height="15" fill="rgb(238,139,3)" fg:x="392" fg:w="3"/><text x="31.4106%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.1606%" y="325" width="0.2385%" height="15" fill="rgb(216,17,39)" fg:x="392" fg:w="3"/><text x="31.4106%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="31.2401%" y="309" width="0.1590%" height="15" fill="rgb(238,120,9)" fg:x="393" fg:w="2"/><text x="31.4901%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.2401%" y="293" width="0.1590%" height="15" fill="rgb(244,92,53)" fg:x="393" fg:w="2"/><text x="31.4901%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.6375%" y="357" width="0.0795%" height="15" fill="rgb(224,148,33)" fg:x="398" fg:w="1"/><text x="31.8875%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="31.7170%" y="357" width="0.1590%" height="15" fill="rgb(243,6,36)" fg:x="399" fg:w="2"/><text x="31.9670%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.7965%" y="341" width="0.0795%" height="15" fill="rgb(230,102,11)" fg:x="400" fg:w="1"/><text x="32.0465%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.7965%" y="325" width="0.0795%" height="15" fill="rgb(234,148,36)" fg:x="400" fg:w="1"/><text x="32.0465%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.7965%" y="309" width="0.0795%" height="15" fill="rgb(251,153,25)" fg:x="400" fg:w="1"/><text x="32.0465%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.7965%" y="293" width="0.0795%" height="15" fill="rgb(215,129,8)" fg:x="400" fg:w="1"/><text x="32.0465%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.7965%" y="277" width="0.0795%" height="15" fill="rgb(224,128,35)" fg:x="400" fg:w="1"/><text x="32.0465%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.7965%" y="261" width="0.0795%" height="15" fill="rgb(237,56,52)" fg:x="400" fg:w="1"/><text x="32.0465%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.7965%" y="245" width="0.0795%" height="15" fill="rgb(234,213,19)" fg:x="400" fg:w="1"/><text x="32.0465%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.7965%" y="229" width="0.0795%" height="15" fill="rgb(252,82,23)" fg:x="400" fg:w="1"/><text x="32.0465%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.7965%" y="213" width="0.0795%" height="15" fill="rgb(254,201,21)" fg:x="400" fg:w="1"/><text x="32.0465%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.7965%" y="197" width="0.0795%" height="15" fill="rgb(250,186,11)" fg:x="400" fg:w="1"/><text x="32.0465%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.7965%" y="181" width="0.0795%" height="15" fill="rgb(211,174,5)" fg:x="400" fg:w="1"/><text x="32.0465%" y="191.50"></text></g><g><title>kernel::model::EntityPtr::gid (7 samples, 0.56%)</title><rect x="31.3990%" y="389" width="0.5564%" height="15" fill="rgb(214,121,10)" fg:x="395" fg:w="7"/><text x="31.6490%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="31.4785%" y="373" width="0.4769%" height="15" fill="rgb(241,66,2)" fg:x="396" fg:w="6"/><text x="31.7285%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.8760%" y="357" width="0.0795%" height="15" fill="rgb(220,167,19)" fg:x="401" fg:w="1"/><text x="32.1260%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.8760%" y="341" width="0.0795%" height="15" fill="rgb(231,54,50)" fg:x="401" fg:w="1"/><text x="32.1260%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="31.8760%" y="325" width="0.0795%" height="15" fill="rgb(239,217,53)" fg:x="401" fg:w="1"/><text x="32.1260%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.8760%" y="309" width="0.0795%" height="15" fill="rgb(248,8,0)" fg:x="401" fg:w="1"/><text x="32.1260%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.8760%" y="293" width="0.0795%" height="15" fill="rgb(229,118,37)" fg:x="401" fg:w="1"/><text x="32.1260%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.8760%" y="277" width="0.0795%" height="15" fill="rgb(253,223,43)" fg:x="401" fg:w="1"/><text x="32.1260%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.9555%" y="309" width="0.0795%" height="15" fill="rgb(211,77,36)" fg:x="402" fg:w="1"/><text x="32.2055%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.9555%" y="293" width="0.0795%" height="15" fill="rgb(219,3,53)" fg:x="402" fg:w="1"/><text x="32.2055%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.9555%" y="277" width="0.0795%" height="15" fill="rgb(244,45,42)" fg:x="402" fg:w="1"/><text x="32.2055%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9555%" y="261" width="0.0795%" height="15" fill="rgb(225,95,27)" fg:x="402" fg:w="1"/><text x="32.2055%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="32.0350%" y="309" width="0.0795%" height="15" fill="rgb(207,74,8)" fg:x="403" fg:w="1"/><text x="32.2850%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="32.0350%" y="293" width="0.0795%" height="15" fill="rgb(243,63,36)" fg:x="403" fg:w="1"/><text x="32.2850%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="32.0350%" y="277" width="0.0795%" height="15" fill="rgb(211,180,12)" fg:x="403" fg:w="1"/><text x="32.2850%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="32.0350%" y="261" width="0.0795%" height="15" fill="rgb(254,166,49)" fg:x="403" fg:w="1"/><text x="32.2850%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="32.0350%" y="245" width="0.0795%" height="15" fill="rgb(205,19,0)" fg:x="403" fg:w="1"/><text x="32.2850%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="32.0350%" y="229" width="0.0795%" height="15" fill="rgb(224,172,32)" fg:x="403" fg:w="1"/><text x="32.2850%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="32.0350%" y="213" width="0.0795%" height="15" fill="rgb(254,136,30)" fg:x="403" fg:w="1"/><text x="32.2850%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="32.1145%" y="261" width="0.0795%" height="15" fill="rgb(246,19,35)" fg:x="404" fg:w="1"/><text x="32.3645%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="32.1145%" y="245" width="0.0795%" height="15" fill="rgb(219,24,36)" fg:x="404" fg:w="1"/><text x="32.3645%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::RegexInfoI&gt; (1 samples, 0.08%)</title><rect x="32.1145%" y="229" width="0.0795%" height="15" fill="rgb(251,55,1)" fg:x="404" fg:w="1"/><text x="32.3645%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="32.1145%" y="277" width="0.1590%" height="15" fill="rgb(218,117,39)" fg:x="404" fg:w="2"/><text x="32.3645%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="32.1940%" y="261" width="0.0795%" height="15" fill="rgb(248,169,11)" fg:x="405" fg:w="1"/><text x="32.4440%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.1940%" y="245" width="0.0795%" height="15" fill="rgb(244,40,44)" fg:x="405" fg:w="1"/><text x="32.4440%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn regex_automata::meta::strategy::Strategy&gt;&gt; (2 samples, 0.16%)</title><rect x="32.2734%" y="277" width="0.1590%" height="15" fill="rgb(234,62,37)" fg:x="406" fg:w="2"/><text x="32.5234%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="32.1145%" y="309" width="0.4769%" height="15" fill="rgb(207,117,42)" fg:x="404" fg:w="6"/><text x="32.3645%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="32.1145%" y="293" width="0.4769%" height="15" fill="rgb(213,43,2)" fg:x="404" fg:w="6"/><text x="32.3645%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="32.4324%" y="277" width="0.1590%" height="15" fill="rgb(244,202,51)" fg:x="408" fg:w="2"/><text x="32.6824%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="32.4324%" y="261" width="0.1590%" height="15" fill="rgb(253,174,46)" fg:x="408" fg:w="2"/><text x="32.6824%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5119%" y="245" width="0.0795%" height="15" fill="rgb(251,23,1)" fg:x="409" fg:w="1"/><text x="32.7619%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="32.6709%" y="261" width="0.1590%" height="15" fill="rgb(253,26,1)" fg:x="411" fg:w="2"/><text x="32.9209%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="32.7504%" y="245" width="0.0795%" height="15" fill="rgb(216,89,31)" fg:x="412" fg:w="1"/><text x="33.0004%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="32.8299%" y="261" width="0.0795%" height="15" fill="rgb(209,109,5)" fg:x="413" fg:w="1"/><text x="33.0799%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.8299%" y="245" width="0.0795%" height="15" fill="rgb(229,63,13)" fg:x="413" fg:w="1"/><text x="33.0799%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0684%" y="245" width="0.0795%" height="15" fill="rgb(238,137,54)" fg:x="416" fg:w="1"/><text x="33.3184%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.27%)</title><rect x="33.1479%" y="245" width="1.2719%" height="15" fill="rgb(228,1,9)" fg:x="417" fg:w="16"/><text x="33.3979%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.27%)</title><rect x="33.1479%" y="229" width="1.2719%" height="15" fill="rgb(249,120,48)" fg:x="417" fg:w="16"/><text x="33.3979%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.2607%" y="213" width="0.1590%" height="15" fill="rgb(209,72,36)" fg:x="431" fg:w="2"/><text x="34.5107%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="34.4197%" y="245" width="0.3180%" height="15" fill="rgb(247,98,49)" fg:x="433" fg:w="4"/><text x="34.6697%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="34.4992%" y="229" width="0.2385%" height="15" fill="rgb(233,75,36)" fg:x="434" fg:w="3"/><text x="34.7492%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="34.7377%" y="245" width="0.0795%" height="15" fill="rgb(225,14,24)" fg:x="437" fg:w="1"/><text x="34.9877%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.7377%" y="229" width="0.0795%" height="15" fill="rgb(237,193,20)" fg:x="437" fg:w="1"/><text x="34.9877%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="34.8172%" y="213" width="0.0795%" height="15" fill="rgb(239,122,19)" fg:x="438" fg:w="1"/><text x="35.0672%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.2146%" y="181" width="0.0795%" height="15" fill="rgb(231,220,10)" fg:x="443" fg:w="1"/><text x="35.4646%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.2146%" y="165" width="0.0795%" height="15" fill="rgb(220,66,15)" fg:x="443" fg:w="1"/><text x="35.4646%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.2146%" y="149" width="0.0795%" height="15" fill="rgb(215,171,52)" fg:x="443" fg:w="1"/><text x="35.4646%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.2146%" y="133" width="0.0795%" height="15" fill="rgb(241,169,50)" fg:x="443" fg:w="1"/><text x="35.4646%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="35.2941%" y="181" width="0.1590%" height="15" fill="rgb(236,189,0)" fg:x="444" fg:w="2"/><text x="35.5441%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="35.2941%" y="165" width="0.1590%" height="15" fill="rgb(217,147,20)" fg:x="444" fg:w="2"/><text x="35.5441%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="35.2941%" y="149" width="0.1590%" height="15" fill="rgb(206,188,39)" fg:x="444" fg:w="2"/><text x="35.5441%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.3736%" y="133" width="0.0795%" height="15" fill="rgb(227,118,25)" fg:x="445" fg:w="1"/><text x="35.6236%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.4531%" y="165" width="0.1590%" height="15" fill="rgb(248,171,40)" fg:x="446" fg:w="2"/><text x="35.7031%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.4531%" y="149" width="0.1590%" height="15" fill="rgb(251,90,54)" fg:x="446" fg:w="2"/><text x="35.7031%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.4531%" y="133" width="0.1590%" height="15" fill="rgb(234,11,46)" fg:x="446" fg:w="2"/><text x="35.7031%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="35.6121%" y="149" width="0.0795%" height="15" fill="rgb(229,134,13)" fg:x="448" fg:w="1"/><text x="35.8621%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="35.6121%" y="133" width="0.0795%" height="15" fill="rgb(223,129,3)" fg:x="448" fg:w="1"/><text x="35.8621%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (61 samples, 4.85%)</title><rect x="35.4531%" y="181" width="4.8490%" height="15" fill="rgb(221,124,13)" fg:x="446" fg:w="61"/><text x="35.7031%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (59 samples, 4.69%)</title><rect x="35.6121%" y="165" width="4.6900%" height="15" fill="rgb(234,3,18)" fg:x="448" fg:w="59"/><text x="35.8621%" y="175.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (58 samples, 4.61%)</title><rect x="35.6916%" y="149" width="4.6105%" height="15" fill="rgb(249,199,20)" fg:x="449" fg:w="58"/><text x="35.9416%" y="159.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="40.3021%" y="181" width="0.2385%" height="15" fill="rgb(224,134,6)" fg:x="507" fg:w="3"/><text x="40.5521%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 5.80%)</title><rect x="34.8172%" y="229" width="5.8029%" height="15" fill="rgb(254,83,26)" fg:x="438" fg:w="73"/><text x="35.0672%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.72%)</title><rect x="34.8967%" y="213" width="5.7234%" height="15" fill="rgb(217,88,9)" fg:x="439" fg:w="72"/><text x="35.1467%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.64%)</title><rect x="34.9762%" y="197" width="5.6439%" height="15" fill="rgb(225,73,2)" fg:x="440" fg:w="71"/><text x="35.2262%" y="207.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="40.5405%" y="181" width="0.0795%" height="15" fill="rgb(226,44,39)" fg:x="510" fg:w="1"/><text x="40.7905%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="40.9380%" y="213" width="0.3180%" height="15" fill="rgb(228,53,17)" fg:x="515" fg:w="4"/><text x="41.1880%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.0970%" y="197" width="0.1590%" height="15" fill="rgb(212,27,27)" fg:x="517" fg:w="2"/><text x="41.3470%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.0970%" y="181" width="0.1590%" height="15" fill="rgb(241,50,6)" fg:x="517" fg:w="2"/><text x="41.3470%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.0970%" y="165" width="0.1590%" height="15" fill="rgb(225,28,51)" fg:x="517" fg:w="2"/><text x="41.3470%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.3355%" y="197" width="0.0795%" height="15" fill="rgb(215,33,16)" fg:x="520" fg:w="1"/><text x="41.5855%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="41.2560%" y="213" width="0.2385%" height="15" fill="rgb(243,40,39)" fg:x="519" fg:w="3"/><text x="41.5060%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.4149%" y="197" width="0.0795%" height="15" fill="rgb(225,11,42)" fg:x="521" fg:w="1"/><text x="41.6649%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.4149%" y="181" width="0.0795%" height="15" fill="rgb(241,220,38)" fg:x="521" fg:w="1"/><text x="41.6649%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.4149%" y="165" width="0.0795%" height="15" fill="rgb(244,52,35)" fg:x="521" fg:w="1"/><text x="41.6649%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (86 samples, 6.84%)</title><rect x="34.8172%" y="245" width="6.8362%" height="15" fill="rgb(246,42,46)" fg:x="438" fg:w="86"/><text x="35.0672%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.03%)</title><rect x="40.6200%" y="229" width="1.0334%" height="15" fill="rgb(205,184,13)" fg:x="511" fg:w="13"/><text x="40.8700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="41.4944%" y="213" width="0.1590%" height="15" fill="rgb(209,48,36)" fg:x="522" fg:w="2"/><text x="41.7444%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (111 samples, 8.82%)</title><rect x="32.9094%" y="261" width="8.8235%" height="15" fill="rgb(244,34,51)" fg:x="414" fg:w="111"/><text x="33.1594%" y="271.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="41.6534%" y="245" width="0.0795%" height="15" fill="rgb(221,107,33)" fg:x="524" fg:w="1"/><text x="41.9034%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="41.6534%" y="229" width="0.0795%" height="15" fill="rgb(224,203,12)" fg:x="524" fg:w="1"/><text x="41.9034%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="41.6534%" y="213" width="0.0795%" height="15" fill="rgb(230,215,18)" fg:x="524" fg:w="1"/><text x="41.9034%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.6534%" y="197" width="0.0795%" height="15" fill="rgb(206,185,35)" fg:x="524" fg:w="1"/><text x="41.9034%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.6534%" y="181" width="0.0795%" height="15" fill="rgb(228,140,34)" fg:x="524" fg:w="1"/><text x="41.9034%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.6534%" y="165" width="0.0795%" height="15" fill="rgb(208,93,13)" fg:x="524" fg:w="1"/><text x="41.9034%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="41.7329%" y="261" width="0.0795%" height="15" fill="rgb(221,193,39)" fg:x="525" fg:w="1"/><text x="41.9829%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="41.7329%" y="245" width="0.0795%" height="15" fill="rgb(241,132,34)" fg:x="525" fg:w="1"/><text x="41.9829%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="41.7329%" y="229" width="0.0795%" height="15" fill="rgb(221,141,10)" fg:x="525" fg:w="1"/><text x="41.9829%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="41.7329%" y="213" width="0.0795%" height="15" fill="rgb(226,90,31)" fg:x="525" fg:w="1"/><text x="41.9829%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="41.7329%" y="197" width="0.0795%" height="15" fill="rgb(243,75,5)" fg:x="525" fg:w="1"/><text x="41.9829%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="41.8124%" y="213" width="0.0795%" height="15" fill="rgb(227,156,21)" fg:x="526" fg:w="1"/><text x="42.0624%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="41.8919%" y="197" width="0.0795%" height="15" fill="rgb(250,195,8)" fg:x="527" fg:w="1"/><text x="42.1419%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="41.8919%" y="213" width="0.1590%" height="15" fill="rgb(220,134,5)" fg:x="527" fg:w="2"/><text x="42.1419%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="41.9714%" y="197" width="0.0795%" height="15" fill="rgb(246,106,34)" fg:x="528" fg:w="1"/><text x="42.2214%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="41.8124%" y="261" width="0.5564%" height="15" fill="rgb(205,1,4)" fg:x="526" fg:w="7"/><text x="42.0624%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="41.8124%" y="245" width="0.5564%" height="15" fill="rgb(224,151,29)" fg:x="526" fg:w="7"/><text x="42.0624%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="41.8124%" y="229" width="0.5564%" height="15" fill="rgb(251,196,0)" fg:x="526" fg:w="7"/><text x="42.0624%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="42.0509%" y="213" width="0.3180%" height="15" fill="rgb(212,127,0)" fg:x="529" fg:w="4"/><text x="42.3009%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="42.0509%" y="197" width="0.3180%" height="15" fill="rgb(236,71,53)" fg:x="529" fg:w="4"/><text x="42.3009%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="42.0509%" y="181" width="0.3180%" height="15" fill="rgb(227,99,0)" fg:x="529" fg:w="4"/><text x="42.3009%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="42.1304%" y="165" width="0.2385%" height="15" fill="rgb(239,89,21)" fg:x="530" fg:w="3"/><text x="42.3804%" y="175.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (124 samples, 9.86%)</title><rect x="32.5914%" y="293" width="9.8569%" height="15" fill="rgb(243,122,19)" fg:x="410" fg:w="124"/><text x="32.8414%" y="303.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (124 samples, 9.86%)</title><rect x="32.5914%" y="277" width="9.8569%" height="15" fill="rgb(229,192,45)" fg:x="410" fg:w="124"/><text x="32.8414%" y="287.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="42.3688%" y="261" width="0.0795%" height="15" fill="rgb(235,165,35)" fg:x="533" fg:w="1"/><text x="42.6188%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="42.3688%" y="245" width="0.0795%" height="15" fill="rgb(253,202,0)" fg:x="533" fg:w="1"/><text x="42.6188%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="42.3688%" y="229" width="0.0795%" height="15" fill="rgb(235,51,20)" fg:x="533" fg:w="1"/><text x="42.6188%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.3688%" y="213" width="0.0795%" height="15" fill="rgb(218,95,46)" fg:x="533" fg:w="1"/><text x="42.6188%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.3688%" y="197" width="0.0795%" height="15" fill="rgb(212,81,10)" fg:x="533" fg:w="1"/><text x="42.6188%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.3688%" y="181" width="0.0795%" height="15" fill="rgb(240,59,0)" fg:x="533" fg:w="1"/><text x="42.6188%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (126 samples, 10.02%)</title><rect x="32.5914%" y="309" width="10.0159%" height="15" fill="rgb(212,191,42)" fg:x="410" fg:w="126"/><text x="32.8414%" y="319.50">regex::regex::..</text></g><g><title>regex::builders::string::RegexBuilder::new (2 samples, 0.16%)</title><rect x="42.4483%" y="293" width="0.1590%" height="15" fill="rgb(233,140,3)" fg:x="534" fg:w="2"/><text x="42.6983%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="42.5278%" y="277" width="0.0795%" height="15" fill="rgb(215,69,23)" fg:x="535" fg:w="1"/><text x="42.7778%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="42.6868%" y="245" width="0.1590%" height="15" fill="rgb(240,202,20)" fg:x="537" fg:w="2"/><text x="42.9368%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="42.7663%" y="229" width="0.0795%" height="15" fill="rgb(209,146,50)" fg:x="538" fg:w="1"/><text x="43.0163%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="42.7663%" y="213" width="0.0795%" height="15" fill="rgb(253,102,54)" fg:x="538" fg:w="1"/><text x="43.0163%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="43.3227%" y="229" width="0.1590%" height="15" fill="rgb(250,173,47)" fg:x="545" fg:w="2"/><text x="43.5727%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.3227%" y="213" width="0.1590%" height="15" fill="rgb(232,142,7)" fg:x="545" fg:w="2"/><text x="43.5727%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.4022%" y="197" width="0.0795%" height="15" fill="rgb(230,157,47)" fg:x="546" fg:w="1"/><text x="43.6522%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.72%)</title><rect x="42.8458%" y="245" width="0.7154%" height="15" fill="rgb(214,177,35)" fg:x="539" fg:w="9"/><text x="43.0958%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="43.4817%" y="229" width="0.0795%" height="15" fill="rgb(234,119,46)" fg:x="547" fg:w="1"/><text x="43.7317%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.03%)</title><rect x="42.6073%" y="261" width="1.0334%" height="15" fill="rgb(241,180,50)" fg:x="536" fg:w="13"/><text x="42.8573%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="43.5612%" y="245" width="0.0795%" height="15" fill="rgb(221,54,25)" fg:x="548" fg:w="1"/><text x="43.8112%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="43.5612%" y="229" width="0.0795%" height="15" fill="rgb(209,157,44)" fg:x="548" fg:w="1"/><text x="43.8112%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.5612%" y="213" width="0.0795%" height="15" fill="rgb(246,115,41)" fg:x="548" fg:w="1"/><text x="43.8112%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5612%" y="197" width="0.0795%" height="15" fill="rgb(229,86,1)" fg:x="548" fg:w="1"/><text x="43.8112%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (150 samples, 11.92%)</title><rect x="31.9555%" y="325" width="11.9237%" height="15" fill="rgb(240,108,53)" fg:x="402" fg:w="150"/><text x="32.2055%" y="335.50">indefinite::helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.27%)</title><rect x="42.6073%" y="309" width="1.2719%" height="15" fill="rgb(227,134,2)" fg:x="536" fg:w="16"/><text x="42.8573%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.27%)</title><rect x="42.6073%" y="293" width="1.2719%" height="15" fill="rgb(213,129,25)" fg:x="536" fg:w="16"/><text x="42.8573%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.27%)</title><rect x="42.6073%" y="277" width="1.2719%" height="15" fill="rgb(226,35,21)" fg:x="536" fg:w="16"/><text x="42.8573%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (3 samples, 0.24%)</title><rect x="43.6407%" y="261" width="0.2385%" height="15" fill="rgb(208,129,26)" fg:x="549" fg:w="3"/><text x="43.8907%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (3 samples, 0.24%)</title><rect x="43.6407%" y="245" width="0.2385%" height="15" fill="rgb(224,83,6)" fg:x="549" fg:w="3"/><text x="43.8907%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="43.6407%" y="229" width="0.2385%" height="15" fill="rgb(227,52,39)" fg:x="549" fg:w="3"/><text x="43.8907%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.7202%" y="213" width="0.1590%" height="15" fill="rgb(241,30,17)" fg:x="550" fg:w="2"/><text x="43.9702%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.7202%" y="197" width="0.1590%" height="15" fill="rgb(246,186,42)" fg:x="550" fg:w="2"/><text x="43.9702%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.8792%" y="261" width="0.0795%" height="15" fill="rgb(221,169,15)" fg:x="552" fg:w="1"/><text x="44.1292%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="43.8792%" y="309" width="0.1590%" height="15" fill="rgb(235,108,21)" fg:x="552" fg:w="2"/><text x="44.1292%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="43.8792%" y="293" width="0.1590%" height="15" fill="rgb(219,148,30)" fg:x="552" fg:w="2"/><text x="44.1292%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="43.8792%" y="277" width="0.1590%" height="15" fill="rgb(220,109,5)" fg:x="552" fg:w="2"/><text x="44.1292%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="43.9587%" y="261" width="0.0795%" height="15" fill="rgb(213,203,48)" fg:x="553" fg:w="1"/><text x="44.2087%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.9587%" y="245" width="0.0795%" height="15" fill="rgb(244,71,33)" fg:x="553" fg:w="1"/><text x="44.2087%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="44.0382%" y="293" width="0.0795%" height="15" fill="rgb(209,23,2)" fg:x="554" fg:w="1"/><text x="44.2882%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="44.0382%" y="277" width="0.0795%" height="15" fill="rgb(219,97,7)" fg:x="554" fg:w="1"/><text x="44.2882%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="44.0382%" y="261" width="0.0795%" height="15" fill="rgb(216,161,23)" fg:x="554" fg:w="1"/><text x="44.2882%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.2766%" y="213" width="0.0795%" height="15" fill="rgb(207,45,42)" fg:x="557" fg:w="1"/><text x="44.5266%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.2766%" y="197" width="0.0795%" height="15" fill="rgb(241,61,4)" fg:x="557" fg:w="1"/><text x="44.5266%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.2766%" y="181" width="0.0795%" height="15" fill="rgb(236,170,1)" fg:x="557" fg:w="1"/><text x="44.5266%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="44.3561%" y="213" width="0.1590%" height="15" fill="rgb(239,72,5)" fg:x="558" fg:w="2"/><text x="44.6061%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="44.1176%" y="245" width="0.4769%" height="15" fill="rgb(214,13,50)" fg:x="555" fg:w="6"/><text x="44.3676%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="44.1176%" y="229" width="0.4769%" height="15" fill="rgb(224,88,9)" fg:x="555" fg:w="6"/><text x="44.3676%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="44.5151%" y="213" width="0.0795%" height="15" fill="rgb(238,192,34)" fg:x="560" fg:w="1"/><text x="44.7651%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.5151%" y="197" width="0.0795%" height="15" fill="rgb(217,203,50)" fg:x="560" fg:w="1"/><text x="44.7651%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="44.1176%" y="261" width="0.5564%" height="15" fill="rgb(241,123,32)" fg:x="555" fg:w="7"/><text x="44.3676%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="44.5946%" y="245" width="0.0795%" height="15" fill="rgb(248,151,39)" fg:x="561" fg:w="1"/><text x="44.8446%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="44.5946%" y="229" width="0.0795%" height="15" fill="rgb(208,89,6)" fg:x="561" fg:w="1"/><text x="44.8446%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="44.0382%" y="309" width="0.7154%" height="15" fill="rgb(254,43,26)" fg:x="554" fg:w="9"/><text x="44.2882%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="44.1176%" y="293" width="0.6359%" height="15" fill="rgb(216,158,13)" fg:x="555" fg:w="8"/><text x="44.3676%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="44.1176%" y="277" width="0.6359%" height="15" fill="rgb(212,47,37)" fg:x="555" fg:w="8"/><text x="44.3676%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::Core::is_match_nofail (1 samples, 0.08%)</title><rect x="44.6741%" y="261" width="0.0795%" height="15" fill="rgb(254,16,10)" fg:x="562" fg:w="1"/><text x="44.9241%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.7536%" y="261" width="0.0795%" height="15" fill="rgb(223,228,16)" fg:x="563" fg:w="1"/><text x="45.0036%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.7536%" y="245" width="0.0795%" height="15" fill="rgb(249,108,50)" fg:x="563" fg:w="1"/><text x="45.0036%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.7536%" y="229" width="0.0795%" height="15" fill="rgb(208,220,5)" fg:x="563" fg:w="1"/><text x="45.0036%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="44.8331%" y="261" width="0.1590%" height="15" fill="rgb(217,89,48)" fg:x="564" fg:w="2"/><text x="45.0831%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="44.8331%" y="245" width="0.1590%" height="15" fill="rgb(212,113,41)" fg:x="564" fg:w="2"/><text x="45.0831%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="44.9126%" y="229" width="0.0795%" height="15" fill="rgb(231,127,5)" fg:x="565" fg:w="1"/><text x="45.1626%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.9126%" y="213" width="0.0795%" height="15" fill="rgb(217,141,17)" fg:x="565" fg:w="1"/><text x="45.1626%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="44.9126%" y="197" width="0.0795%" height="15" fill="rgb(245,125,54)" fg:x="565" fg:w="1"/><text x="45.1626%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.0715%" y="229" width="0.0795%" height="15" fill="rgb(248,125,3)" fg:x="567" fg:w="1"/><text x="45.3215%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.35%)</title><rect x="45.0715%" y="245" width="1.3514%" height="15" fill="rgb(236,119,51)" fg:x="567" fg:w="17"/><text x="45.3215%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.27%)</title><rect x="45.1510%" y="229" width="1.2719%" height="15" fill="rgb(239,99,8)" fg:x="568" fg:w="16"/><text x="45.4010%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="46.2639%" y="213" width="0.1590%" height="15" fill="rgb(224,228,4)" fg:x="582" fg:w="2"/><text x="46.5139%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="46.4229%" y="245" width="0.1590%" height="15" fill="rgb(220,131,45)" fg:x="584" fg:w="2"/><text x="46.6729%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="46.4229%" y="229" width="0.1590%" height="15" fill="rgb(215,62,5)" fg:x="584" fg:w="2"/><text x="46.6729%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="46.7409%" y="213" width="0.0795%" height="15" fill="rgb(253,12,24)" fg:x="588" fg:w="1"/><text x="46.9909%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.7409%" y="197" width="0.0795%" height="15" fill="rgb(248,120,50)" fg:x="588" fg:w="1"/><text x="46.9909%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.7409%" y="181" width="0.0795%" height="15" fill="rgb(245,194,10)" fg:x="588" fg:w="1"/><text x="46.9909%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.7409%" y="165" width="0.0795%" height="15" fill="rgb(241,149,38)" fg:x="588" fg:w="1"/><text x="46.9909%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="47.1383%" y="181" width="0.2385%" height="15" fill="rgb(219,215,7)" fg:x="593" fg:w="3"/><text x="47.3883%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.1383%" y="165" width="0.2385%" height="15" fill="rgb(208,120,31)" fg:x="593" fg:w="3"/><text x="47.3883%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="47.1383%" y="149" width="0.2385%" height="15" fill="rgb(244,30,8)" fg:x="593" fg:w="3"/><text x="47.3883%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="46.8203%" y="213" width="0.6359%" height="15" fill="rgb(238,35,44)" fg:x="589" fg:w="8"/><text x="47.0703%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="46.9793%" y="197" width="0.4769%" height="15" fill="rgb(243,218,37)" fg:x="591" fg:w="6"/><text x="47.2293%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.3768%" y="181" width="0.0795%" height="15" fill="rgb(218,169,10)" fg:x="596" fg:w="1"/><text x="47.6268%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.3768%" y="165" width="0.0795%" height="15" fill="rgb(221,144,10)" fg:x="596" fg:w="1"/><text x="47.6268%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.3768%" y="149" width="0.0795%" height="15" fill="rgb(226,41,38)" fg:x="596" fg:w="1"/><text x="47.6268%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (19 samples, 1.51%)</title><rect x="46.5819%" y="245" width="1.5103%" height="15" fill="rgb(228,3,1)" fg:x="586" fg:w="19"/><text x="46.8319%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (19 samples, 1.51%)</title><rect x="46.5819%" y="229" width="1.5103%" height="15" fill="rgb(209,129,12)" fg:x="586" fg:w="19"/><text x="46.8319%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="47.4563%" y="213" width="0.6359%" height="15" fill="rgb(213,136,33)" fg:x="597" fg:w="8"/><text x="47.7063%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.64%)</title><rect x="47.4563%" y="197" width="0.6359%" height="15" fill="rgb(209,181,29)" fg:x="597" fg:w="8"/><text x="47.7063%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.64%)</title><rect x="47.4563%" y="181" width="0.6359%" height="15" fill="rgb(234,173,18)" fg:x="597" fg:w="8"/><text x="47.7063%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="48.1717%" y="197" width="0.1590%" height="15" fill="rgb(227,73,47)" fg:x="606" fg:w="2"/><text x="48.4217%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.1717%" y="181" width="0.1590%" height="15" fill="rgb(234,9,34)" fg:x="606" fg:w="2"/><text x="48.4217%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.1717%" y="165" width="0.1590%" height="15" fill="rgb(235,172,15)" fg:x="606" fg:w="2"/><text x="48.4217%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="48.1717%" y="149" width="0.1590%" height="15" fill="rgb(245,61,2)" fg:x="606" fg:w="2"/><text x="48.4217%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="48.3307%" y="181" width="0.0795%" height="15" fill="rgb(238,39,47)" fg:x="608" fg:w="1"/><text x="48.5807%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="48.4102%" y="165" width="0.0795%" height="15" fill="rgb(234,37,24)" fg:x="609" fg:w="1"/><text x="48.6602%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="49.1256%" y="133" width="0.2385%" height="15" fill="rgb(248,223,24)" fg:x="618" fg:w="3"/><text x="49.3756%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="49.3641%" y="133" width="0.1590%" height="15" fill="rgb(223,12,15)" fg:x="621" fg:w="2"/><text x="49.6141%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="49.5231%" y="133" width="0.1590%" height="15" fill="rgb(249,6,3)" fg:x="623" fg:w="2"/><text x="49.7731%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="49.5231%" y="117" width="0.1590%" height="15" fill="rgb(237,105,33)" fg:x="623" fg:w="2"/><text x="49.7731%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.5231%" y="101" width="0.1590%" height="15" fill="rgb(252,208,35)" fg:x="623" fg:w="2"/><text x="49.7731%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="49.5231%" y="85" width="0.1590%" height="15" fill="rgb(215,181,35)" fg:x="623" fg:w="2"/><text x="49.7731%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="49.6820%" y="133" width="0.1590%" height="15" fill="rgb(246,212,3)" fg:x="625" fg:w="2"/><text x="49.9320%" y="143.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="50.0000%" y="69" width="0.2385%" height="15" fill="rgb(247,156,24)" fg:x="629" fg:w="3"/><text x="50.2500%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="50.0000%" y="101" width="0.3975%" height="15" fill="rgb(248,9,31)" fg:x="629" fg:w="5"/><text x="50.2500%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="50.0000%" y="85" width="0.3975%" height="15" fill="rgb(234,26,45)" fg:x="629" fg:w="5"/><text x="50.2500%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="50.2385%" y="69" width="0.1590%" height="15" fill="rgb(249,11,32)" fg:x="632" fg:w="2"/><text x="50.4885%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.7154%" y="85" width="0.0795%" height="15" fill="rgb(249,162,33)" fg:x="638" fg:w="1"/><text x="50.9654%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (13 samples, 1.03%)</title><rect x="49.8410%" y="133" width="1.0334%" height="15" fill="rgb(232,4,32)" fg:x="627" fg:w="13"/><text x="50.0910%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.87%)</title><rect x="50.0000%" y="117" width="0.8744%" height="15" fill="rgb(212,5,45)" fg:x="629" fg:w="11"/><text x="50.2500%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="50.3975%" y="101" width="0.4769%" height="15" fill="rgb(227,95,13)" fg:x="634" fg:w="6"/><text x="50.6475%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.7949%" y="85" width="0.0795%" height="15" fill="rgb(223,205,10)" fg:x="639" fg:w="1"/><text x="51.0449%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.7949%" y="69" width="0.0795%" height="15" fill="rgb(222,178,8)" fg:x="639" fg:w="1"/><text x="51.0449%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.7949%" y="53" width="0.0795%" height="15" fill="rgb(216,13,22)" fg:x="639" fg:w="1"/><text x="51.0449%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.7949%" y="37" width="0.0795%" height="15" fill="rgb(240,167,12)" fg:x="639" fg:w="1"/><text x="51.0449%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (41 samples, 3.26%)</title><rect x="50.8744%" y="133" width="3.2591%" height="15" fill="rgb(235,68,35)" fg:x="640" fg:w="41"/><text x="51.1244%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (40 samples, 3.18%)</title><rect x="50.9539%" y="117" width="3.1797%" height="15" fill="rgb(253,40,27)" fg:x="641" fg:w="40"/><text x="51.2039%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (40 samples, 3.18%)</title><rect x="50.9539%" y="101" width="3.1797%" height="15" fill="rgb(214,19,28)" fg:x="641" fg:w="40"/><text x="51.2039%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="54.1335%" y="133" width="0.1590%" height="15" fill="rgb(210,167,45)" fg:x="681" fg:w="2"/><text x="54.3835%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.2130%" y="117" width="0.0795%" height="15" fill="rgb(232,97,40)" fg:x="682" fg:w="1"/><text x="54.4630%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 6.44%)</title><rect x="48.0922%" y="229" width="6.4388%" height="15" fill="rgb(250,35,23)" fg:x="605" fg:w="81"/><text x="48.3422%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (80 samples, 6.36%)</title><rect x="48.1717%" y="213" width="6.3593%" height="15" fill="rgb(248,47,53)" fg:x="606" fg:w="80"/><text x="48.4217%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (78 samples, 6.20%)</title><rect x="48.3307%" y="197" width="6.2003%" height="15" fill="rgb(226,58,50)" fg:x="608" fg:w="78"/><text x="48.5807%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.12%)</title><rect x="48.4102%" y="181" width="6.1208%" height="15" fill="rgb(217,105,26)" fg:x="609" fg:w="77"/><text x="48.6602%" y="191.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (76 samples, 6.04%)</title><rect x="48.4897%" y="165" width="6.0413%" height="15" fill="rgb(208,64,1)" fg:x="610" fg:w="76"/><text x="48.7397%" y="175.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (76 samples, 6.04%)</title><rect x="48.4897%" y="149" width="6.0413%" height="15" fill="rgb(214,80,1)" fg:x="610" fg:w="76"/><text x="48.7397%" y="159.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="54.2925%" y="133" width="0.2385%" height="15" fill="rgb(206,175,26)" fg:x="683" fg:w="3"/><text x="54.5425%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="54.5310%" y="229" width="0.0795%" height="15" fill="rgb(235,156,37)" fg:x="686" fg:w="1"/><text x="54.7810%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.8490%" y="213" width="0.0795%" height="15" fill="rgb(213,100,9)" fg:x="690" fg:w="1"/><text x="55.0990%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.9285%" y="213" width="0.0795%" height="15" fill="rgb(241,15,13)" fg:x="691" fg:w="1"/><text x="55.1785%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="55.0079%" y="213" width="0.1590%" height="15" fill="rgb(205,97,43)" fg:x="692" fg:w="2"/><text x="55.2579%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.0874%" y="197" width="0.0795%" height="15" fill="rgb(216,106,32)" fg:x="693" fg:w="1"/><text x="55.3374%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.0874%" y="181" width="0.0795%" height="15" fill="rgb(226,200,8)" fg:x="693" fg:w="1"/><text x="55.3374%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.0874%" y="165" width="0.0795%" height="15" fill="rgb(244,54,29)" fg:x="693" fg:w="1"/><text x="55.3374%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (132 samples, 10.49%)</title><rect x="44.9921%" y="261" width="10.4928%" height="15" fill="rgb(252,169,12)" fg:x="566" fg:w="132"/><text x="45.2421%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (93 samples, 7.39%)</title><rect x="48.0922%" y="245" width="7.3927%" height="15" fill="rgb(231,199,11)" fg:x="605" fg:w="93"/><text x="48.3422%" y="255.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.87%)</title><rect x="54.6105%" y="229" width="0.8744%" height="15" fill="rgb(233,191,18)" fg:x="687" fg:w="11"/><text x="54.8605%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="55.1669%" y="213" width="0.3180%" height="15" fill="rgb(215,83,47)" fg:x="694" fg:w="4"/><text x="55.4169%" y="223.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="55.4849%" y="261" width="0.0795%" height="15" fill="rgb(251,67,19)" fg:x="698" fg:w="1"/><text x="55.7349%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="55.4849%" y="245" width="0.0795%" height="15" fill="rgb(240,7,20)" fg:x="698" fg:w="1"/><text x="55.7349%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="55.4849%" y="229" width="0.0795%" height="15" fill="rgb(210,150,26)" fg:x="698" fg:w="1"/><text x="55.7349%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="55.4849%" y="213" width="0.0795%" height="15" fill="rgb(228,75,42)" fg:x="698" fg:w="1"/><text x="55.7349%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="55.4849%" y="197" width="0.0795%" height="15" fill="rgb(237,134,48)" fg:x="698" fg:w="1"/><text x="55.7349%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="55.5644%" y="213" width="0.0795%" height="15" fill="rgb(205,80,50)" fg:x="699" fg:w="1"/><text x="55.8144%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="55.5644%" y="197" width="0.0795%" height="15" fill="rgb(217,74,48)" fg:x="699" fg:w="1"/><text x="55.8144%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="55.5644%" y="229" width="0.2385%" height="15" fill="rgb(205,82,50)" fg:x="699" fg:w="3"/><text x="55.8144%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="55.6439%" y="213" width="0.1590%" height="15" fill="rgb(228,1,33)" fg:x="700" fg:w="2"/><text x="55.8939%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="55.7234%" y="197" width="0.0795%" height="15" fill="rgb(214,50,23)" fg:x="701" fg:w="1"/><text x="55.9734%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="55.5644%" y="261" width="0.3975%" height="15" fill="rgb(210,62,9)" fg:x="699" fg:w="5"/><text x="55.8144%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="55.5644%" y="245" width="0.3975%" height="15" fill="rgb(210,104,37)" fg:x="699" fg:w="5"/><text x="55.8144%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="55.8029%" y="229" width="0.1590%" height="15" fill="rgb(232,104,43)" fg:x="702" fg:w="2"/><text x="56.0529%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.8824%" y="213" width="0.0795%" height="15" fill="rgb(244,52,6)" fg:x="703" fg:w="1"/><text x="56.1324%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="55.9618%" y="229" width="0.1590%" height="15" fill="rgb(211,174,52)" fg:x="704" fg:w="2"/><text x="56.2118%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="55.9618%" y="213" width="0.1590%" height="15" fill="rgb(229,48,4)" fg:x="704" fg:w="2"/><text x="56.2118%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="56.0413%" y="197" width="0.0795%" height="15" fill="rgb(205,155,16)" fg:x="705" fg:w="1"/><text x="56.2913%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (146 samples, 11.61%)</title><rect x="44.7536%" y="293" width="11.6057%" height="15" fill="rgb(211,141,53)" fg:x="563" fg:w="146"/><text x="45.0036%" y="303.50">regex::builders::..</text></g><g><title>regex_automata::meta::regex::Builder::build (146 samples, 11.61%)</title><rect x="44.7536%" y="277" width="11.6057%" height="15" fill="rgb(240,148,11)" fg:x="563" fg:w="146"/><text x="45.0036%" y="287.50">regex_automata::m..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="55.9618%" y="261" width="0.3975%" height="15" fill="rgb(214,45,23)" fg:x="704" fg:w="5"/><text x="56.2118%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="55.9618%" y="245" width="0.3975%" height="15" fill="rgb(248,74,26)" fg:x="704" fg:w="5"/><text x="56.2118%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="56.1208%" y="229" width="0.2385%" height="15" fill="rgb(218,121,16)" fg:x="706" fg:w="3"/><text x="56.3708%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="56.2003%" y="213" width="0.1590%" height="15" fill="rgb(218,10,47)" fg:x="707" fg:w="2"/><text x="56.4503%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="56.2798%" y="197" width="0.0795%" height="15" fill="rgb(227,99,14)" fg:x="708" fg:w="1"/><text x="56.5298%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (158 samples, 12.56%)</title><rect x="43.8792%" y="325" width="12.5596%" height="15" fill="rgb(229,83,46)" fg:x="552" fg:w="158"/><text x="44.1292%" y="335.50">indefinite::rules::..</text></g><g><title>regex::regex::string::Regex::new (147 samples, 11.69%)</title><rect x="44.7536%" y="309" width="11.6852%" height="15" fill="rgb(228,25,1)" fg:x="563" fg:w="147"/><text x="45.0036%" y="319.50">regex::regex::str..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="56.3593%" y="293" width="0.0795%" height="15" fill="rgb(252,190,15)" fg:x="709" fg:w="1"/><text x="56.6093%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.3593%" y="277" width="0.0795%" height="15" fill="rgb(213,103,51)" fg:x="709" fg:w="1"/><text x="56.6093%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="56.4388%" y="293" width="0.0795%" height="15" fill="rgb(220,38,44)" fg:x="710" fg:w="1"/><text x="56.6888%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="56.4388%" y="277" width="0.0795%" height="15" fill="rgb(210,45,26)" fg:x="710" fg:w="1"/><text x="56.6888%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="56.4388%" y="261" width="0.0795%" height="15" fill="rgb(205,95,48)" fg:x="710" fg:w="1"/><text x="56.6888%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="56.4388%" y="245" width="0.0795%" height="15" fill="rgb(225,179,37)" fg:x="710" fg:w="1"/><text x="56.6888%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.4388%" y="229" width="0.0795%" height="15" fill="rgb(230,209,3)" fg:x="710" fg:w="1"/><text x="56.6888%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.4388%" y="213" width="0.0795%" height="15" fill="rgb(248,12,46)" fg:x="710" fg:w="1"/><text x="56.6888%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4388%" y="197" width="0.0795%" height="15" fill="rgb(234,18,0)" fg:x="710" fg:w="1"/><text x="56.6888%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.5183%" y="293" width="0.0795%" height="15" fill="rgb(238,197,14)" fg:x="711" fg:w="1"/><text x="56.7683%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="56.5978%" y="245" width="0.0795%" height="15" fill="rgb(251,162,48)" fg:x="712" fg:w="1"/><text x="56.8478%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="56.5978%" y="261" width="0.1590%" height="15" fill="rgb(237,73,42)" fg:x="712" fg:w="2"/><text x="56.8478%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="56.6773%" y="245" width="0.0795%" height="15" fill="rgb(211,108,8)" fg:x="713" fg:w="1"/><text x="56.9273%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="56.6773%" y="229" width="0.0795%" height="15" fill="rgb(213,45,22)" fg:x="713" fg:w="1"/><text x="56.9273%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="56.5978%" y="293" width="0.2385%" height="15" fill="rgb(252,154,5)" fg:x="712" fg:w="3"/><text x="56.8478%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="56.5978%" y="277" width="0.2385%" height="15" fill="rgb(221,79,52)" fg:x="712" fg:w="3"/><text x="56.8478%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="56.7568%" y="261" width="0.0795%" height="15" fill="rgb(229,220,36)" fg:x="714" fg:w="1"/><text x="57.0068%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.8362%" y="245" width="0.0795%" height="15" fill="rgb(211,17,16)" fg:x="715" fg:w="1"/><text x="57.0862%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.8362%" y="229" width="0.0795%" height="15" fill="rgb(222,55,31)" fg:x="715" fg:w="1"/><text x="57.0862%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="56.9157%" y="245" width="0.2385%" height="15" fill="rgb(221,221,31)" fg:x="716" fg:w="3"/><text x="57.1657%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.9157%" y="229" width="0.2385%" height="15" fill="rgb(227,168,26)" fg:x="716" fg:w="3"/><text x="57.1657%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="56.9952%" y="213" width="0.1590%" height="15" fill="rgb(224,139,9)" fg:x="717" fg:w="2"/><text x="57.2452%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="56.9952%" y="197" width="0.1590%" height="15" fill="rgb(254,172,0)" fg:x="717" fg:w="2"/><text x="57.2452%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.0747%" y="181" width="0.0795%" height="15" fill="rgb(235,203,1)" fg:x="718" fg:w="1"/><text x="57.3247%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.0747%" y="165" width="0.0795%" height="15" fill="rgb(216,205,24)" fg:x="718" fg:w="1"/><text x="57.3247%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.0747%" y="149" width="0.0795%" height="15" fill="rgb(233,24,6)" fg:x="718" fg:w="1"/><text x="57.3247%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.0747%" y="133" width="0.0795%" height="15" fill="rgb(244,110,9)" fg:x="718" fg:w="1"/><text x="57.3247%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="57.2337%" y="229" width="0.0795%" height="15" fill="rgb(239,222,42)" fg:x="720" fg:w="1"/><text x="57.4837%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.2337%" y="213" width="0.0795%" height="15" fill="rgb(218,145,13)" fg:x="720" fg:w="1"/><text x="57.4837%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="57.3132%" y="213" width="0.5564%" height="15" fill="rgb(207,69,11)" fg:x="721" fg:w="7"/><text x="57.5632%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="57.7107%" y="197" width="0.1590%" height="15" fill="rgb(220,223,22)" fg:x="726" fg:w="2"/><text x="57.9607%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="57.3132%" y="229" width="0.6359%" height="15" fill="rgb(245,102,5)" fg:x="721" fg:w="8"/><text x="57.5632%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="57.8696%" y="213" width="0.0795%" height="15" fill="rgb(211,148,2)" fg:x="728" fg:w="1"/><text x="58.1196%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="57.8696%" y="197" width="0.0795%" height="15" fill="rgb(241,13,44)" fg:x="728" fg:w="1"/><text x="58.1196%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="58.1081%" y="213" width="0.0795%" height="15" fill="rgb(219,137,21)" fg:x="731" fg:w="1"/><text x="58.3581%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="58.1081%" y="197" width="0.0795%" height="15" fill="rgb(242,206,5)" fg:x="731" fg:w="1"/><text x="58.3581%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="58.1081%" y="181" width="0.0795%" height="15" fill="rgb(217,114,22)" fg:x="731" fg:w="1"/><text x="58.3581%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="58.1081%" y="165" width="0.0795%" height="15" fill="rgb(253,206,42)" fg:x="731" fg:w="1"/><text x="58.3581%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="58.1081%" y="149" width="0.0795%" height="15" fill="rgb(236,102,18)" fg:x="731" fg:w="1"/><text x="58.3581%" y="159.50"></text></g><g><title>__libc_calloc (3 samples, 0.24%)</title><rect x="58.1876%" y="197" width="0.2385%" height="15" fill="rgb(208,59,49)" fg:x="732" fg:w="3"/><text x="58.4376%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="58.4261%" y="197" width="0.1590%" height="15" fill="rgb(215,194,28)" fg:x="735" fg:w="2"/><text x="58.6761%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.4261%" y="181" width="0.1590%" height="15" fill="rgb(243,207,11)" fg:x="735" fg:w="2"/><text x="58.6761%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.4261%" y="165" width="0.1590%" height="15" fill="rgb(254,179,35)" fg:x="735" fg:w="2"/><text x="58.6761%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.4261%" y="149" width="0.1590%" height="15" fill="rgb(235,97,3)" fg:x="735" fg:w="2"/><text x="58.6761%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="58.5851%" y="197" width="0.1590%" height="15" fill="rgb(215,155,33)" fg:x="737" fg:w="2"/><text x="58.8351%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="58.7440%" y="197" width="0.0795%" height="15" fill="rgb(223,128,12)" fg:x="739" fg:w="1"/><text x="58.9940%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (22 samples, 1.75%)</title><rect x="57.1542%" y="245" width="1.7488%" height="15" fill="rgb(208,157,18)" fg:x="719" fg:w="22"/><text x="57.4042%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (12 samples, 0.95%)</title><rect x="57.9491%" y="229" width="0.9539%" height="15" fill="rgb(249,70,54)" fg:x="729" fg:w="12"/><text x="58.1991%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="58.1876%" y="213" width="0.7154%" height="15" fill="rgb(244,118,24)" fg:x="732" fg:w="9"/><text x="58.4376%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="58.8235%" y="197" width="0.0795%" height="15" fill="rgb(211,54,0)" fg:x="740" fg:w="1"/><text x="59.0735%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="58.9030%" y="213" width="0.3180%" height="15" fill="rgb(245,137,45)" fg:x="741" fg:w="4"/><text x="59.1530%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="59.0620%" y="197" width="0.1590%" height="15" fill="rgb(232,154,31)" fg:x="743" fg:w="2"/><text x="59.3120%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.0620%" y="181" width="0.1590%" height="15" fill="rgb(253,6,39)" fg:x="743" fg:w="2"/><text x="59.3120%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.0620%" y="165" width="0.1590%" height="15" fill="rgb(234,183,24)" fg:x="743" fg:w="2"/><text x="59.3120%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.0620%" y="149" width="0.1590%" height="15" fill="rgb(252,84,40)" fg:x="743" fg:w="2"/><text x="59.3120%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="58.9030%" y="245" width="0.3975%" height="15" fill="rgb(224,65,2)" fg:x="741" fg:w="5"/><text x="59.1530%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="58.9030%" y="229" width="0.3975%" height="15" fill="rgb(229,38,24)" fg:x="741" fg:w="5"/><text x="59.1530%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="59.2210%" y="213" width="0.0795%" height="15" fill="rgb(218,131,50)" fg:x="745" fg:w="1"/><text x="59.4710%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="59.2210%" y="197" width="0.0795%" height="15" fill="rgb(233,106,18)" fg:x="745" fg:w="1"/><text x="59.4710%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (33 samples, 2.62%)</title><rect x="56.8362%" y="293" width="2.6232%" height="15" fill="rgb(220,216,11)" fg:x="715" fg:w="33"/><text x="57.0862%" y="303.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::build (33 samples, 2.62%)</title><rect x="56.8362%" y="277" width="2.6232%" height="15" fill="rgb(251,100,45)" fg:x="715" fg:w="33"/><text x="57.0862%" y="287.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (33 samples, 2.62%)</title><rect x="56.8362%" y="261" width="2.6232%" height="15" fill="rgb(235,143,32)" fg:x="715" fg:w="33"/><text x="57.0862%" y="271.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="59.3005%" y="245" width="0.1590%" height="15" fill="rgb(248,124,34)" fg:x="746" fg:w="2"/><text x="59.5505%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="59.3005%" y="229" width="0.1590%" height="15" fill="rgb(225,221,4)" fg:x="746" fg:w="2"/><text x="59.5505%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="59.3800%" y="213" width="0.0795%" height="15" fill="rgb(242,27,43)" fg:x="747" fg:w="1"/><text x="59.6300%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.6979%" y="213" width="0.0795%" height="15" fill="rgb(227,54,8)" fg:x="751" fg:w="1"/><text x="59.9479%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.6979%" y="197" width="0.0795%" height="15" fill="rgb(253,139,49)" fg:x="751" fg:w="1"/><text x="59.9479%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (43 samples, 3.42%)</title><rect x="56.4388%" y="309" width="3.4181%" height="15" fill="rgb(231,26,43)" fg:x="710" fg:w="43"/><text x="56.6888%" y="319.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="59.4595%" y="293" width="0.3975%" height="15" fill="rgb(207,121,39)" fg:x="748" fg:w="5"/><text x="59.7095%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="59.4595%" y="277" width="0.3975%" height="15" fill="rgb(223,101,35)" fg:x="748" fg:w="5"/><text x="59.7095%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="59.4595%" y="261" width="0.3975%" height="15" fill="rgb(232,87,23)" fg:x="748" fg:w="5"/><text x="59.7095%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="59.4595%" y="245" width="0.3975%" height="15" fill="rgb(225,180,29)" fg:x="748" fg:w="5"/><text x="59.7095%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="59.4595%" y="229" width="0.3975%" height="15" fill="rgb(225,25,17)" fg:x="748" fg:w="5"/><text x="59.7095%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="59.7774%" y="213" width="0.0795%" height="15" fill="rgb(223,8,52)" fg:x="752" fg:w="1"/><text x="60.0274%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7774%" y="197" width="0.0795%" height="15" fill="rgb(246,42,21)" fg:x="752" fg:w="1"/><text x="60.0274%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (375 samples, 29.81%)</title><rect x="30.1272%" y="405" width="29.8092%" height="15" fill="rgb(205,64,43)" fg:x="379" fg:w="375"/><text x="30.3772%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::look..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (352 samples, 27.98%)</title><rect x="31.9555%" y="389" width="27.9809%" height="15" fill="rgb(221,160,13)" fg:x="402" fg:w="352"/><text x="32.2055%" y="399.50">plugins_core::looking::model::Unqualified::qu..</text></g><g><title>indefinite::indefinite (352 samples, 27.98%)</title><rect x="31.9555%" y="373" width="27.9809%" height="15" fill="rgb(239,58,35)" fg:x="402" fg:w="352"/><text x="32.2055%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (352 samples, 27.98%)</title><rect x="31.9555%" y="357" width="27.9809%" height="15" fill="rgb(251,26,40)" fg:x="402" fg:w="352"/><text x="32.2055%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (352 samples, 27.98%)</title><rect x="31.9555%" y="341" width="27.9809%" height="15" fill="rgb(247,0,4)" fg:x="402" fg:w="352"/><text x="32.2055%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (44 samples, 3.50%)</title><rect x="56.4388%" y="325" width="3.4976%" height="15" fill="rgb(218,130,10)" fg:x="710" fg:w="44"/><text x="56.6888%" y="335.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="59.8569%" y="309" width="0.0795%" height="15" fill="rgb(239,32,7)" fg:x="753" fg:w="1"/><text x="60.1069%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.9364%" y="389" width="0.0795%" height="15" fill="rgb(210,192,24)" fg:x="754" fg:w="1"/><text x="60.1864%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.9364%" y="373" width="0.0795%" height="15" fill="rgb(226,212,17)" fg:x="754" fg:w="1"/><text x="60.1864%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.9364%" y="357" width="0.0795%" height="15" fill="rgb(219,201,28)" fg:x="754" fg:w="1"/><text x="60.1864%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.9364%" y="341" width="0.0795%" height="15" fill="rgb(235,207,41)" fg:x="754" fg:w="1"/><text x="60.1864%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.9364%" y="325" width="0.0795%" height="15" fill="rgb(241,95,54)" fg:x="754" fg:w="1"/><text x="60.1864%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.0159%" y="389" width="0.0795%" height="15" fill="rgb(248,12,23)" fg:x="755" fg:w="1"/><text x="60.2659%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.1749%" y="229" width="0.0795%" height="15" fill="rgb(228,173,4)" fg:x="757" fg:w="1"/><text x="60.4249%" y="239.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="60.1749%" y="309" width="0.1590%" height="15" fill="rgb(254,99,5)" fg:x="757" fg:w="2"/><text x="60.4249%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.1749%" y="293" width="0.1590%" height="15" fill="rgb(212,184,17)" fg:x="757" fg:w="2"/><text x="60.4249%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.1749%" y="277" width="0.1590%" height="15" fill="rgb(252,174,1)" fg:x="757" fg:w="2"/><text x="60.4249%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.1749%" y="261" width="0.1590%" height="15" fill="rgb(241,118,51)" fg:x="757" fg:w="2"/><text x="60.4249%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.1749%" y="245" width="0.1590%" height="15" fill="rgb(227,94,47)" fg:x="757" fg:w="2"/><text x="60.4249%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="60.2544%" y="229" width="0.0795%" height="15" fill="rgb(229,104,2)" fg:x="758" fg:w="1"/><text x="60.5044%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="60.0954%" y="357" width="0.3180%" height="15" fill="rgb(219,28,31)" fg:x="756" fg:w="4"/><text x="60.3454%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="60.1749%" y="341" width="0.2385%" height="15" fill="rgb(233,109,36)" fg:x="757" fg:w="3"/><text x="60.4249%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="60.1749%" y="325" width="0.2385%" height="15" fill="rgb(246,88,11)" fg:x="757" fg:w="3"/><text x="60.4249%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.3339%" y="309" width="0.0795%" height="15" fill="rgb(209,212,17)" fg:x="759" fg:w="1"/><text x="60.5839%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.3339%" y="293" width="0.0795%" height="15" fill="rgb(243,59,29)" fg:x="759" fg:w="1"/><text x="60.5839%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="59.9364%" y="405" width="0.5564%" height="15" fill="rgb(244,205,48)" fg:x="754" fg:w="7"/><text x="60.1864%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="60.0954%" y="389" width="0.3975%" height="15" fill="rgb(227,30,6)" fg:x="756" fg:w="5"/><text x="60.3454%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="60.0954%" y="373" width="0.3975%" height="15" fill="rgb(220,205,48)" fg:x="756" fg:w="5"/><text x="60.3454%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.4134%" y="357" width="0.0795%" height="15" fill="rgb(250,94,14)" fg:x="760" fg:w="1"/><text x="60.6634%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.4134%" y="341" width="0.0795%" height="15" fill="rgb(216,119,42)" fg:x="760" fg:w="1"/><text x="60.6634%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="60.4134%" y="325" width="0.0795%" height="15" fill="rgb(232,155,0)" fg:x="760" fg:w="1"/><text x="60.6634%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="60.4134%" y="309" width="0.0795%" height="15" fill="rgb(212,24,32)" fg:x="760" fg:w="1"/><text x="60.6634%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="60.4134%" y="293" width="0.0795%" height="15" fill="rgb(216,69,20)" fg:x="760" fg:w="1"/><text x="60.6634%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.4928%" y="405" width="0.0795%" height="15" fill="rgb(229,73,31)" fg:x="761" fg:w="1"/><text x="60.7428%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.5723%" y="341" width="0.0795%" height="15" fill="rgb(224,219,20)" fg:x="762" fg:w="1"/><text x="60.8223%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.5723%" y="325" width="0.0795%" height="15" fill="rgb(215,146,41)" fg:x="762" fg:w="1"/><text x="60.8223%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.5723%" y="309" width="0.0795%" height="15" fill="rgb(244,71,31)" fg:x="762" fg:w="1"/><text x="60.8223%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5723%" y="293" width="0.0795%" height="15" fill="rgb(224,24,11)" fg:x="762" fg:w="1"/><text x="60.8223%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5723%" y="277" width="0.0795%" height="15" fill="rgb(229,76,15)" fg:x="762" fg:w="1"/><text x="60.8223%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.5723%" y="261" width="0.0795%" height="15" fill="rgb(209,93,2)" fg:x="762" fg:w="1"/><text x="60.8223%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.5723%" y="245" width="0.0795%" height="15" fill="rgb(216,200,50)" fg:x="762" fg:w="1"/><text x="60.8223%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.5723%" y="229" width="0.0795%" height="15" fill="rgb(211,67,34)" fg:x="762" fg:w="1"/><text x="60.8223%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.5723%" y="213" width="0.0795%" height="15" fill="rgb(225,87,47)" fg:x="762" fg:w="1"/><text x="60.8223%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.5723%" y="197" width="0.0795%" height="15" fill="rgb(217,185,16)" fg:x="762" fg:w="1"/><text x="60.8223%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.5723%" y="181" width="0.0795%" height="15" fill="rgb(205,0,0)" fg:x="762" fg:w="1"/><text x="60.8223%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.5723%" y="165" width="0.0795%" height="15" fill="rgb(207,116,45)" fg:x="762" fg:w="1"/><text x="60.8223%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.5723%" y="149" width="0.0795%" height="15" fill="rgb(221,156,26)" fg:x="762" fg:w="1"/><text x="60.8223%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.5723%" y="133" width="0.0795%" height="15" fill="rgb(213,140,4)" fg:x="762" fg:w="1"/><text x="60.8223%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="60.5723%" y="117" width="0.0795%" height="15" fill="rgb(231,224,15)" fg:x="762" fg:w="1"/><text x="60.8223%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="60.5723%" y="101" width="0.0795%" height="15" fill="rgb(244,76,20)" fg:x="762" fg:w="1"/><text x="60.8223%" y="111.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="60.5723%" y="373" width="0.1590%" height="15" fill="rgb(238,117,7)" fg:x="762" fg:w="2"/><text x="60.8223%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="60.5723%" y="357" width="0.1590%" height="15" fill="rgb(235,1,10)" fg:x="762" fg:w="2"/><text x="60.8223%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.6518%" y="341" width="0.0795%" height="15" fill="rgb(216,165,6)" fg:x="763" fg:w="1"/><text x="60.9018%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6518%" y="325" width="0.0795%" height="15" fill="rgb(246,91,35)" fg:x="763" fg:w="1"/><text x="60.9018%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.6518%" y="309" width="0.0795%" height="15" fill="rgb(228,96,24)" fg:x="763" fg:w="1"/><text x="60.9018%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6518%" y="293" width="0.0795%" height="15" fill="rgb(254,217,53)" fg:x="763" fg:w="1"/><text x="60.9018%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.6518%" y="277" width="0.0795%" height="15" fill="rgb(209,60,0)" fg:x="763" fg:w="1"/><text x="60.9018%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6518%" y="261" width="0.0795%" height="15" fill="rgb(250,93,26)" fg:x="763" fg:w="1"/><text x="60.9018%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.7313%" y="357" width="0.0795%" height="15" fill="rgb(211,9,40)" fg:x="764" fg:w="1"/><text x="60.9813%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.7313%" y="341" width="0.0795%" height="15" fill="rgb(242,57,20)" fg:x="764" fg:w="1"/><text x="60.9813%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.7313%" y="325" width="0.0795%" height="15" fill="rgb(248,85,48)" fg:x="764" fg:w="1"/><text x="60.9813%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="60.7313%" y="373" width="0.1590%" height="15" fill="rgb(212,117,2)" fg:x="764" fg:w="2"/><text x="60.9813%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8108%" y="357" width="0.0795%" height="15" fill="rgb(243,19,3)" fg:x="765" fg:w="1"/><text x="61.0608%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8903%" y="341" width="0.0795%" height="15" fill="rgb(232,217,24)" fg:x="766" fg:w="1"/><text x="61.1403%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8903%" y="325" width="0.0795%" height="15" fill="rgb(224,175,40)" fg:x="766" fg:w="1"/><text x="61.1403%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8903%" y="309" width="0.0795%" height="15" fill="rgb(212,162,32)" fg:x="766" fg:w="1"/><text x="61.1403%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.8903%" y="293" width="0.0795%" height="15" fill="rgb(215,9,4)" fg:x="766" fg:w="1"/><text x="61.1403%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.8903%" y="277" width="0.0795%" height="15" fill="rgb(242,42,7)" fg:x="766" fg:w="1"/><text x="61.1403%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.8903%" y="261" width="0.0795%" height="15" fill="rgb(242,184,45)" fg:x="766" fg:w="1"/><text x="61.1403%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8903%" y="245" width="0.0795%" height="15" fill="rgb(228,111,51)" fg:x="766" fg:w="1"/><text x="61.1403%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8903%" y="229" width="0.0795%" height="15" fill="rgb(236,147,17)" fg:x="766" fg:w="1"/><text x="61.1403%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.8903%" y="213" width="0.0795%" height="15" fill="rgb(210,75,22)" fg:x="766" fg:w="1"/><text x="61.1403%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.8903%" y="197" width="0.0795%" height="15" fill="rgb(217,159,45)" fg:x="766" fg:w="1"/><text x="61.1403%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.8903%" y="181" width="0.0795%" height="15" fill="rgb(245,165,53)" fg:x="766" fg:w="1"/><text x="61.1403%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.8903%" y="165" width="0.0795%" height="15" fill="rgb(251,190,50)" fg:x="766" fg:w="1"/><text x="61.1403%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8903%" y="149" width="0.0795%" height="15" fill="rgb(208,203,29)" fg:x="766" fg:w="1"/><text x="61.1403%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.48%)</title><rect x="60.5723%" y="389" width="0.4769%" height="15" fill="rgb(207,209,35)" fg:x="762" fg:w="6"/><text x="60.8223%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="60.8903%" y="373" width="0.1590%" height="15" fill="rgb(230,144,49)" fg:x="766" fg:w="2"/><text x="61.1403%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="60.8903%" y="357" width="0.1590%" height="15" fill="rgb(229,31,6)" fg:x="766" fg:w="2"/><text x="61.1403%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.9698%" y="341" width="0.0795%" height="15" fill="rgb(251,129,24)" fg:x="767" fg:w="1"/><text x="61.2198%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9698%" y="325" width="0.0795%" height="15" fill="rgb(235,105,15)" fg:x="767" fg:w="1"/><text x="61.2198%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="60.9698%" y="309" width="0.0795%" height="15" fill="rgb(216,52,43)" fg:x="767" fg:w="1"/><text x="61.2198%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9698%" y="293" width="0.0795%" height="15" fill="rgb(238,144,41)" fg:x="767" fg:w="1"/><text x="61.2198%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.9698%" y="277" width="0.0795%" height="15" fill="rgb(243,63,9)" fg:x="767" fg:w="1"/><text x="61.2198%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9698%" y="261" width="0.0795%" height="15" fill="rgb(246,208,1)" fg:x="767" fg:w="1"/><text x="61.2198%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.9698%" y="245" width="0.0795%" height="15" fill="rgb(233,182,18)" fg:x="767" fg:w="1"/><text x="61.2198%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.0493%" y="229" width="0.0795%" height="15" fill="rgb(242,224,8)" fg:x="768" fg:w="1"/><text x="61.2993%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0493%" y="213" width="0.0795%" height="15" fill="rgb(243,54,37)" fg:x="768" fg:w="1"/><text x="61.2993%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.0493%" y="197" width="0.0795%" height="15" fill="rgb(233,192,12)" fg:x="768" fg:w="1"/><text x="61.2993%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0493%" y="181" width="0.0795%" height="15" fill="rgb(251,192,53)" fg:x="768" fg:w="1"/><text x="61.2993%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="61.0493%" y="165" width="0.0795%" height="15" fill="rgb(246,141,26)" fg:x="768" fg:w="1"/><text x="61.2993%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.0493%" y="149" width="0.0795%" height="15" fill="rgb(239,195,19)" fg:x="768" fg:w="1"/><text x="61.2993%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0493%" y="133" width="0.0795%" height="15" fill="rgb(241,16,39)" fg:x="768" fg:w="1"/><text x="61.2993%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="61.0493%" y="117" width="0.0795%" height="15" fill="rgb(223,13,53)" fg:x="768" fg:w="1"/><text x="61.2993%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.0493%" y="101" width="0.0795%" height="15" fill="rgb(214,227,0)" fg:x="768" fg:w="1"/><text x="61.2993%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0493%" y="85" width="0.0795%" height="15" fill="rgb(228,103,26)" fg:x="768" fg:w="1"/><text x="61.2993%" y="95.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="61.0493%" y="277" width="0.2385%" height="15" fill="rgb(254,177,53)" fg:x="768" fg:w="3"/><text x="61.2993%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.0493%" y="261" width="0.2385%" height="15" fill="rgb(208,201,34)" fg:x="768" fg:w="3"/><text x="61.2993%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.0493%" y="245" width="0.2385%" height="15" fill="rgb(212,39,5)" fg:x="768" fg:w="3"/><text x="61.2993%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.1288%" y="229" width="0.1590%" height="15" fill="rgb(246,117,3)" fg:x="769" fg:w="2"/><text x="61.3788%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.1288%" y="213" width="0.1590%" height="15" fill="rgb(244,118,39)" fg:x="769" fg:w="2"/><text x="61.3788%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="61.1288%" y="197" width="0.1590%" height="15" fill="rgb(241,64,10)" fg:x="769" fg:w="2"/><text x="61.3788%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.1288%" y="181" width="0.1590%" height="15" fill="rgb(229,39,44)" fg:x="769" fg:w="2"/><text x="61.3788%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.2083%" y="165" width="0.0795%" height="15" fill="rgb(230,226,3)" fg:x="770" fg:w="1"/><text x="61.4583%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.2083%" y="149" width="0.0795%" height="15" fill="rgb(222,13,42)" fg:x="770" fg:w="1"/><text x="61.4583%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2083%" y="133" width="0.0795%" height="15" fill="rgb(247,180,54)" fg:x="770" fg:w="1"/><text x="61.4583%" y="143.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (405 samples, 32.19%)</title><rect x="29.1733%" y="565" width="32.1940%" height="15" fill="rgb(205,96,16)" fg:x="367" fg:w="405"/><text x="29.4233%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (405 samples, 32.19%)</title><rect x="29.1733%" y="549" width="32.1940%" height="15" fill="rgb(205,100,21)" fg:x="367" fg:w="405"/><text x="29.4233%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (405 samples, 32.19%)</title><rect x="29.1733%" y="533" width="32.1940%" height="15" fill="rgb(248,51,4)" fg:x="367" fg:w="405"/><text x="29.4233%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (405 samples, 32.19%)</title><rect x="29.1733%" y="517" width="32.1940%" height="15" fill="rgb(217,197,30)" fg:x="367" fg:w="405"/><text x="29.4233%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (405 samples, 32.19%)</title><rect x="29.1733%" y="501" width="32.1940%" height="15" fill="rgb(240,179,40)" fg:x="367" fg:w="405"/><text x="29.4233%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (405 samples, 32.19%)</title><rect x="29.1733%" y="485" width="32.1940%" height="15" fill="rgb(212,185,35)" fg:x="367" fg:w="405"/><text x="29.4233%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (405 samples, 32.19%)</title><rect x="29.1733%" y="469" width="32.1940%" height="15" fill="rgb(251,222,31)" fg:x="367" fg:w="405"/><text x="29.4233%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOn..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (405 samples, 32.19%)</title><rect x="29.1733%" y="453" width="32.1940%" height="15" fill="rgb(208,140,36)" fg:x="367" fg:w="405"/><text x="29.4233%" y="463.50">&lt;engine::session::state::State as kernel::actions::P..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (405 samples, 32.19%)</title><rect x="29.1733%" y="437" width="32.1940%" height="15" fill="rgb(220,148,1)" fg:x="367" fg:w="405"/><text x="29.4233%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kerne..</text></g><g><title>plugins_core::looking::model::new_area_observation (395 samples, 31.40%)</title><rect x="29.9682%" y="421" width="31.3990%" height="15" fill="rgb(254,4,28)" fg:x="377" fg:w="395"/><text x="30.2182%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.79%)</title><rect x="60.5723%" y="405" width="0.7949%" height="15" fill="rgb(222,185,44)" fg:x="762" fg:w="10"/><text x="60.8223%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="61.0493%" y="389" width="0.3180%" height="15" fill="rgb(215,74,39)" fg:x="768" fg:w="4"/><text x="61.2993%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="61.0493%" y="373" width="0.3180%" height="15" fill="rgb(247,86,4)" fg:x="768" fg:w="4"/><text x="61.2993%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="61.0493%" y="357" width="0.3180%" height="15" fill="rgb(231,105,32)" fg:x="768" fg:w="4"/><text x="61.2993%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="61.0493%" y="341" width="0.3180%" height="15" fill="rgb(222,65,35)" fg:x="768" fg:w="4"/><text x="61.2993%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="61.0493%" y="325" width="0.3180%" height="15" fill="rgb(218,145,35)" fg:x="768" fg:w="4"/><text x="61.2993%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="61.0493%" y="309" width="0.3180%" height="15" fill="rgb(208,7,15)" fg:x="768" fg:w="4"/><text x="61.2993%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="61.0493%" y="293" width="0.3180%" height="15" fill="rgb(209,83,13)" fg:x="768" fg:w="4"/><text x="61.2993%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.2878%" y="277" width="0.0795%" height="15" fill="rgb(218,3,10)" fg:x="771" fg:w="1"/><text x="61.5378%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2878%" y="261" width="0.0795%" height="15" fill="rgb(211,219,4)" fg:x="771" fg:w="1"/><text x="61.5378%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.3672%" y="533" width="0.0795%" height="15" fill="rgb(228,194,12)" fg:x="772" fg:w="1"/><text x="61.6172%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3672%" y="517" width="0.0795%" height="15" fill="rgb(210,175,7)" fg:x="772" fg:w="1"/><text x="61.6172%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.4467%" y="533" width="0.0795%" height="15" fill="rgb(243,132,6)" fg:x="773" fg:w="1"/><text x="61.6967%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="61.5262%" y="517" width="0.1590%" height="15" fill="rgb(207,72,18)" fg:x="774" fg:w="2"/><text x="61.7762%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.5262%" y="501" width="0.1590%" height="15" fill="rgb(236,1,18)" fg:x="774" fg:w="2"/><text x="61.7762%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.5262%" y="485" width="0.1590%" height="15" fill="rgb(227,0,18)" fg:x="774" fg:w="2"/><text x="61.7762%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.7647%" y="389" width="0.0795%" height="15" fill="rgb(247,37,5)" fg:x="777" fg:w="1"/><text x="62.0147%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.7647%" y="373" width="0.0795%" height="15" fill="rgb(237,179,24)" fg:x="777" fg:w="1"/><text x="62.0147%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.7647%" y="421" width="0.1590%" height="15" fill="rgb(226,53,20)" fg:x="777" fg:w="2"/><text x="62.0147%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.7647%" y="405" width="0.1590%" height="15" fill="rgb(247,75,7)" fg:x="777" fg:w="2"/><text x="62.0147%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.8442%" y="389" width="0.0795%" height="15" fill="rgb(233,96,12)" fg:x="778" fg:w="1"/><text x="62.0942%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.8442%" y="373" width="0.0795%" height="15" fill="rgb(224,125,0)" fg:x="778" fg:w="1"/><text x="62.0942%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.8442%" y="357" width="0.0795%" height="15" fill="rgb(224,92,25)" fg:x="778" fg:w="1"/><text x="62.0942%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.8442%" y="341" width="0.0795%" height="15" fill="rgb(224,42,24)" fg:x="778" fg:w="1"/><text x="62.0942%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.8442%" y="325" width="0.0795%" height="15" fill="rgb(234,132,49)" fg:x="778" fg:w="1"/><text x="62.0942%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.8442%" y="309" width="0.0795%" height="15" fill="rgb(248,100,35)" fg:x="778" fg:w="1"/><text x="62.0942%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.8442%" y="293" width="0.0795%" height="15" fill="rgb(239,94,40)" fg:x="778" fg:w="1"/><text x="62.0942%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.8442%" y="277" width="0.0795%" height="15" fill="rgb(235,139,28)" fg:x="778" fg:w="1"/><text x="62.0942%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.8442%" y="261" width="0.0795%" height="15" fill="rgb(217,144,7)" fg:x="778" fg:w="1"/><text x="62.0942%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.8442%" y="245" width="0.0795%" height="15" fill="rgb(227,55,4)" fg:x="778" fg:w="1"/><text x="62.0942%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.8442%" y="229" width="0.0795%" height="15" fill="rgb(252,82,54)" fg:x="778" fg:w="1"/><text x="62.0942%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8442%" y="213" width="0.0795%" height="15" fill="rgb(245,172,4)" fg:x="778" fg:w="1"/><text x="62.0942%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="61.6852%" y="453" width="0.3180%" height="15" fill="rgb(207,26,27)" fg:x="776" fg:w="4"/><text x="61.9352%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="61.6852%" y="437" width="0.3180%" height="15" fill="rgb(252,98,18)" fg:x="776" fg:w="4"/><text x="61.9352%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.9237%" y="421" width="0.0795%" height="15" fill="rgb(244,8,26)" fg:x="779" fg:w="1"/><text x="62.1737%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.0032%" y="357" width="0.0795%" height="15" fill="rgb(237,173,45)" fg:x="780" fg:w="1"/><text x="62.2532%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.0032%" y="341" width="0.0795%" height="15" fill="rgb(208,213,49)" fg:x="780" fg:w="1"/><text x="62.2532%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="62.0032%" y="325" width="0.0795%" height="15" fill="rgb(212,122,37)" fg:x="780" fg:w="1"/><text x="62.2532%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.0827%" y="357" width="0.0795%" height="15" fill="rgb(213,80,17)" fg:x="781" fg:w="1"/><text x="62.3327%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.0827%" y="341" width="0.0795%" height="15" fill="rgb(206,210,43)" fg:x="781" fg:w="1"/><text x="62.3327%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.0827%" y="325" width="0.0795%" height="15" fill="rgb(229,214,3)" fg:x="781" fg:w="1"/><text x="62.3327%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.0827%" y="309" width="0.0795%" height="15" fill="rgb(235,213,29)" fg:x="781" fg:w="1"/><text x="62.3327%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.0827%" y="293" width="0.0795%" height="15" fill="rgb(248,135,26)" fg:x="781" fg:w="1"/><text x="62.3327%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="62.0032%" y="405" width="0.2385%" height="15" fill="rgb(242,188,12)" fg:x="780" fg:w="3"/><text x="62.2532%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.0032%" y="389" width="0.2385%" height="15" fill="rgb(245,38,12)" fg:x="780" fg:w="3"/><text x="62.2532%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.0032%" y="373" width="0.2385%" height="15" fill="rgb(218,42,13)" fg:x="780" fg:w="3"/><text x="62.2532%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.1622%" y="357" width="0.0795%" height="15" fill="rgb(238,132,49)" fg:x="782" fg:w="1"/><text x="62.4122%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1622%" y="341" width="0.0795%" height="15" fill="rgb(209,196,19)" fg:x="782" fg:w="1"/><text x="62.4122%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.1622%" y="325" width="0.0795%" height="15" fill="rgb(244,131,22)" fg:x="782" fg:w="1"/><text x="62.4122%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="62.0032%" y="453" width="0.3180%" height="15" fill="rgb(223,18,34)" fg:x="780" fg:w="4"/><text x="62.2532%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="62.0032%" y="437" width="0.3180%" height="15" fill="rgb(252,124,54)" fg:x="780" fg:w="4"/><text x="62.2532%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="62.0032%" y="421" width="0.3180%" height="15" fill="rgb(229,106,42)" fg:x="780" fg:w="4"/><text x="62.2532%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2417%" y="405" width="0.0795%" height="15" fill="rgb(221,129,1)" fg:x="783" fg:w="1"/><text x="62.4917%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2417%" y="389" width="0.0795%" height="15" fill="rgb(229,74,15)" fg:x="783" fg:w="1"/><text x="62.4917%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.2417%" y="373" width="0.0795%" height="15" fill="rgb(210,206,50)" fg:x="783" fg:w="1"/><text x="62.4917%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.3211%" y="293" width="0.0795%" height="15" fill="rgb(251,114,31)" fg:x="784" fg:w="1"/><text x="62.5711%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3211%" y="277" width="0.0795%" height="15" fill="rgb(215,225,28)" fg:x="784" fg:w="1"/><text x="62.5711%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.3211%" y="261" width="0.0795%" height="15" fill="rgb(237,109,14)" fg:x="784" fg:w="1"/><text x="62.5711%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.3211%" y="245" width="0.0795%" height="15" fill="rgb(230,13,37)" fg:x="784" fg:w="1"/><text x="62.5711%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3211%" y="229" width="0.0795%" height="15" fill="rgb(231,40,28)" fg:x="784" fg:w="1"/><text x="62.5711%" y="239.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.79%)</title><rect x="61.6852%" y="501" width="0.7949%" height="15" fill="rgb(231,202,18)" fg:x="776" fg:w="10"/><text x="61.9352%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.79%)</title><rect x="61.6852%" y="485" width="0.7949%" height="15" fill="rgb(225,33,18)" fg:x="776" fg:w="10"/><text x="61.9352%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.79%)</title><rect x="61.6852%" y="469" width="0.7949%" height="15" fill="rgb(223,64,47)" fg:x="776" fg:w="10"/><text x="61.9352%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="62.3211%" y="453" width="0.1590%" height="15" fill="rgb(234,114,13)" fg:x="784" fg:w="2"/><text x="62.5711%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="62.3211%" y="437" width="0.1590%" height="15" fill="rgb(248,56,40)" fg:x="784" fg:w="2"/><text x="62.5711%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.3211%" y="421" width="0.1590%" height="15" fill="rgb(221,194,21)" fg:x="784" fg:w="2"/><text x="62.5711%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3211%" y="405" width="0.1590%" height="15" fill="rgb(242,108,46)" fg:x="784" fg:w="2"/><text x="62.5711%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.3211%" y="389" width="0.1590%" height="15" fill="rgb(220,106,10)" fg:x="784" fg:w="2"/><text x="62.5711%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3211%" y="373" width="0.1590%" height="15" fill="rgb(211,88,4)" fg:x="784" fg:w="2"/><text x="62.5711%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.3211%" y="357" width="0.1590%" height="15" fill="rgb(214,95,34)" fg:x="784" fg:w="2"/><text x="62.5711%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3211%" y="341" width="0.1590%" height="15" fill="rgb(250,160,33)" fg:x="784" fg:w="2"/><text x="62.5711%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.3211%" y="325" width="0.1590%" height="15" fill="rgb(225,29,10)" fg:x="784" fg:w="2"/><text x="62.5711%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3211%" y="309" width="0.1590%" height="15" fill="rgb(224,28,30)" fg:x="784" fg:w="2"/><text x="62.5711%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.4006%" y="293" width="0.0795%" height="15" fill="rgb(231,77,4)" fg:x="785" fg:w="1"/><text x="62.6506%" y="303.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.87%)</title><rect x="61.6852%" y="517" width="0.8744%" height="15" fill="rgb(209,63,21)" fg:x="776" fg:w="11"/><text x="61.9352%" y="527.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="62.4801%" y="501" width="0.0795%" height="15" fill="rgb(226,22,11)" fg:x="786" fg:w="1"/><text x="62.7301%" y="511.50"></text></g><g><title>plugins_core::tools::contained_by (14 samples, 1.11%)</title><rect x="61.5262%" y="533" width="1.1129%" height="15" fill="rgb(216,82,30)" fg:x="774" fg:w="14"/><text x="61.7762%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="62.5596%" y="517" width="0.0795%" height="15" fill="rgb(246,227,38)" fg:x="787" fg:w="1"/><text x="62.8096%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5596%" y="501" width="0.0795%" height="15" fill="rgb(251,203,53)" fg:x="787" fg:w="1"/><text x="62.8096%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.7186%" y="501" width="0.1590%" height="15" fill="rgb(254,101,1)" fg:x="789" fg:w="2"/><text x="62.9686%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7981%" y="485" width="0.0795%" height="15" fill="rgb(241,180,5)" fg:x="790" fg:w="1"/><text x="63.0481%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7981%" y="469" width="0.0795%" height="15" fill="rgb(218,168,4)" fg:x="790" fg:w="1"/><text x="63.0481%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7981%" y="453" width="0.0795%" height="15" fill="rgb(224,223,32)" fg:x="790" fg:w="1"/><text x="63.0481%" y="463.50"></text></g><g><title>engine::session::Session::captured (458 samples, 36.41%)</title><rect x="26.5501%" y="709" width="36.4070%" height="15" fill="rgb(236,106,22)" fg:x="334" fg:w="458"/><text x="26.8001%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (455 samples, 36.17%)</title><rect x="26.7886%" y="693" width="36.1685%" height="15" fill="rgb(206,121,5)" fg:x="337" fg:w="455"/><text x="27.0386%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (449 samples, 35.69%)</title><rect x="27.2655%" y="677" width="35.6916%" height="15" fill="rgb(233,87,28)" fg:x="343" fg:w="449"/><text x="27.5155%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (449 samples, 35.69%)</title><rect x="27.2655%" y="661" width="35.6916%" height="15" fill="rgb(236,137,17)" fg:x="343" fg:w="449"/><text x="27.5155%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::..</text></g><g><title>kernel::plugins::mw::apply_middleware (449 samples, 35.69%)</title><rect x="27.2655%" y="645" width="35.6916%" height="15" fill="rgb(209,183,38)" fg:x="343" fg:w="449"/><text x="27.5155%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (449 samples, 35.69%)</title><rect x="27.2655%" y="629" width="35.6916%" height="15" fill="rgb(206,162,44)" fg:x="343" fg:w="449"/><text x="27.5155%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (449 samples, 35.69%)</title><rect x="27.2655%" y="613" width="35.6916%" height="15" fill="rgb(237,70,39)" fg:x="343" fg:w="449"/><text x="27.5155%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (426 samples, 33.86%)</title><rect x="29.0938%" y="597" width="33.8633%" height="15" fill="rgb(212,176,5)" fg:x="366" fg:w="426"/><text x="29.3438%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (426 samples, 33.86%)</title><rect x="29.0938%" y="581" width="33.8633%" height="15" fill="rgb(232,95,16)" fg:x="366" fg:w="426"/><text x="29.3438%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::M..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (20 samples, 1.59%)</title><rect x="61.3672%" y="565" width="1.5898%" height="15" fill="rgb(219,115,35)" fg:x="772" fg:w="20"/><text x="61.6172%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (20 samples, 1.59%)</title><rect x="61.3672%" y="549" width="1.5898%" height="15" fill="rgb(251,67,27)" fg:x="772" fg:w="20"/><text x="61.6172%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="62.6391%" y="533" width="0.3180%" height="15" fill="rgb(222,95,40)" fg:x="788" fg:w="4"/><text x="62.8891%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="62.7186%" y="517" width="0.2385%" height="15" fill="rgb(250,35,16)" fg:x="789" fg:w="3"/><text x="62.9686%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.8776%" y="501" width="0.0795%" height="15" fill="rgb(224,86,44)" fg:x="791" fg:w="1"/><text x="63.1276%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.8776%" y="485" width="0.0795%" height="15" fill="rgb(237,53,53)" fg:x="791" fg:w="1"/><text x="63.1276%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0366%" y="661" width="0.0795%" height="15" fill="rgb(208,171,33)" fg:x="793" fg:w="1"/><text x="63.2866%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0366%" y="645" width="0.0795%" height="15" fill="rgb(222,64,27)" fg:x="793" fg:w="1"/><text x="63.2866%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.0366%" y="629" width="0.0795%" height="15" fill="rgb(221,121,35)" fg:x="793" fg:w="1"/><text x="63.2866%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.0366%" y="613" width="0.0795%" height="15" fill="rgb(228,137,42)" fg:x="793" fg:w="1"/><text x="63.2866%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.0366%" y="597" width="0.0795%" height="15" fill="rgb(227,54,21)" fg:x="793" fg:w="1"/><text x="63.2866%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.0366%" y="581" width="0.0795%" height="15" fill="rgb(240,168,33)" fg:x="793" fg:w="1"/><text x="63.2866%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.0366%" y="565" width="0.0795%" height="15" fill="rgb(243,159,6)" fg:x="793" fg:w="1"/><text x="63.2866%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.0366%" y="549" width="0.0795%" height="15" fill="rgb(205,211,41)" fg:x="793" fg:w="1"/><text x="63.2866%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.0366%" y="533" width="0.0795%" height="15" fill="rgb(253,30,1)" fg:x="793" fg:w="1"/><text x="63.2866%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.0366%" y="517" width="0.0795%" height="15" fill="rgb(226,80,18)" fg:x="793" fg:w="1"/><text x="63.2866%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.0366%" y="501" width="0.0795%" height="15" fill="rgb(253,156,46)" fg:x="793" fg:w="1"/><text x="63.2866%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.0366%" y="485" width="0.0795%" height="15" fill="rgb(248,87,27)" fg:x="793" fg:w="1"/><text x="63.2866%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.0366%" y="469" width="0.0795%" height="15" fill="rgb(227,122,2)" fg:x="793" fg:w="1"/><text x="63.2866%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.0366%" y="453" width="0.0795%" height="15" fill="rgb(229,94,39)" fg:x="793" fg:w="1"/><text x="63.2866%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1161%" y="613" width="0.0795%" height="15" fill="rgb(225,173,31)" fg:x="794" fg:w="1"/><text x="63.3661%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1955%" y="565" width="0.0795%" height="15" fill="rgb(239,176,30)" fg:x="795" fg:w="1"/><text x="63.4455%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1955%" y="549" width="0.0795%" height="15" fill="rgb(212,104,21)" fg:x="795" fg:w="1"/><text x="63.4455%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.1955%" y="533" width="0.0795%" height="15" fill="rgb(240,209,40)" fg:x="795" fg:w="1"/><text x="63.4455%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.1955%" y="517" width="0.0795%" height="15" fill="rgb(234,195,5)" fg:x="795" fg:w="1"/><text x="63.4455%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.1955%" y="501" width="0.0795%" height="15" fill="rgb(238,213,1)" fg:x="795" fg:w="1"/><text x="63.4455%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.1955%" y="485" width="0.0795%" height="15" fill="rgb(235,182,54)" fg:x="795" fg:w="1"/><text x="63.4455%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.1955%" y="469" width="0.0795%" height="15" fill="rgb(229,50,46)" fg:x="795" fg:w="1"/><text x="63.4455%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.1955%" y="453" width="0.0795%" height="15" fill="rgb(219,145,13)" fg:x="795" fg:w="1"/><text x="63.4455%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.1955%" y="437" width="0.0795%" height="15" fill="rgb(220,226,10)" fg:x="795" fg:w="1"/><text x="63.4455%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.1955%" y="421" width="0.0795%" height="15" fill="rgb(248,47,30)" fg:x="795" fg:w="1"/><text x="63.4455%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.1955%" y="405" width="0.0795%" height="15" fill="rgb(231,209,44)" fg:x="795" fg:w="1"/><text x="63.4455%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.1955%" y="389" width="0.0795%" height="15" fill="rgb(209,80,30)" fg:x="795" fg:w="1"/><text x="63.4455%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.1955%" y="373" width="0.0795%" height="15" fill="rgb(232,9,14)" fg:x="795" fg:w="1"/><text x="63.4455%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.2750%" y="485" width="0.0795%" height="15" fill="rgb(243,91,43)" fg:x="796" fg:w="1"/><text x="63.5250%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.2750%" y="469" width="0.0795%" height="15" fill="rgb(231,90,52)" fg:x="796" fg:w="1"/><text x="63.5250%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.2750%" y="453" width="0.0795%" height="15" fill="rgb(253,192,44)" fg:x="796" fg:w="1"/><text x="63.5250%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.3545%" y="453" width="0.0795%" height="15" fill="rgb(241,66,31)" fg:x="797" fg:w="1"/><text x="63.6045%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.3545%" y="469" width="0.1590%" height="15" fill="rgb(235,81,37)" fg:x="797" fg:w="2"/><text x="63.6045%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.4340%" y="453" width="0.0795%" height="15" fill="rgb(223,221,9)" fg:x="798" fg:w="1"/><text x="63.6840%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="63.2750%" y="565" width="0.3180%" height="15" fill="rgb(242,180,7)" fg:x="796" fg:w="4"/><text x="63.5250%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="63.2750%" y="549" width="0.3180%" height="15" fill="rgb(243,78,19)" fg:x="796" fg:w="4"/><text x="63.5250%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="63.2750%" y="533" width="0.3180%" height="15" fill="rgb(233,23,17)" fg:x="796" fg:w="4"/><text x="63.5250%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="63.2750%" y="517" width="0.3180%" height="15" fill="rgb(252,122,45)" fg:x="796" fg:w="4"/><text x="63.5250%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="63.2750%" y="501" width="0.3180%" height="15" fill="rgb(247,108,20)" fg:x="796" fg:w="4"/><text x="63.5250%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (3 samples, 0.24%)</title><rect x="63.3545%" y="485" width="0.2385%" height="15" fill="rgb(235,84,21)" fg:x="797" fg:w="3"/><text x="63.6045%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="63.5135%" y="469" width="0.0795%" height="15" fill="rgb(247,129,10)" fg:x="799" fg:w="1"/><text x="63.7635%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="63.5135%" y="453" width="0.0795%" height="15" fill="rgb(208,173,14)" fg:x="799" fg:w="1"/><text x="63.7635%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="63.5135%" y="437" width="0.0795%" height="15" fill="rgb(236,31,38)" fg:x="799" fg:w="1"/><text x="63.7635%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="63.5135%" y="421" width="0.0795%" height="15" fill="rgb(232,65,17)" fg:x="799" fg:w="1"/><text x="63.7635%" y="431.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="63.5135%" y="405" width="0.0795%" height="15" fill="rgb(224,45,49)" fg:x="799" fg:w="1"/><text x="63.7635%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="63.5135%" y="389" width="0.0795%" height="15" fill="rgb(225,2,53)" fg:x="799" fg:w="1"/><text x="63.7635%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="63.5135%" y="373" width="0.0795%" height="15" fill="rgb(248,210,53)" fg:x="799" fg:w="1"/><text x="63.7635%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="63.5135%" y="357" width="0.0795%" height="15" fill="rgb(211,1,30)" fg:x="799" fg:w="1"/><text x="63.7635%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="63.5135%" y="341" width="0.0795%" height="15" fill="rgb(224,96,15)" fg:x="799" fg:w="1"/><text x="63.7635%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="63.5135%" y="325" width="0.0795%" height="15" fill="rgb(252,45,11)" fg:x="799" fg:w="1"/><text x="63.7635%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="63.5135%" y="309" width="0.0795%" height="15" fill="rgb(220,125,38)" fg:x="799" fg:w="1"/><text x="63.7635%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="63.1161%" y="661" width="0.5564%" height="15" fill="rgb(243,161,33)" fg:x="794" fg:w="7"/><text x="63.3661%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="63.1161%" y="645" width="0.5564%" height="15" fill="rgb(248,197,34)" fg:x="794" fg:w="7"/><text x="63.3661%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="63.1161%" y="629" width="0.5564%" height="15" fill="rgb(228,165,23)" fg:x="794" fg:w="7"/><text x="63.3661%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="63.1955%" y="613" width="0.4769%" height="15" fill="rgb(236,94,38)" fg:x="795" fg:w="6"/><text x="63.4455%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="63.1955%" y="597" width="0.4769%" height="15" fill="rgb(220,13,23)" fg:x="795" fg:w="6"/><text x="63.4455%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="63.1955%" y="581" width="0.4769%" height="15" fill="rgb(234,26,39)" fg:x="795" fg:w="6"/><text x="63.4455%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.5930%" y="565" width="0.0795%" height="15" fill="rgb(205,117,44)" fg:x="800" fg:w="1"/><text x="63.8430%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5930%" y="549" width="0.0795%" height="15" fill="rgb(250,42,2)" fg:x="800" fg:w="1"/><text x="63.8430%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.5930%" y="533" width="0.0795%" height="15" fill="rgb(223,83,14)" fg:x="800" fg:w="1"/><text x="63.8430%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (11 samples, 0.87%)</title><rect x="62.9571%" y="693" width="0.8744%" height="15" fill="rgb(241,147,50)" fg:x="792" fg:w="11"/><text x="63.2071%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (10 samples, 0.79%)</title><rect x="63.0366%" y="677" width="0.7949%" height="15" fill="rgb(218,90,6)" fg:x="793" fg:w="10"/><text x="63.2866%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.6725%" y="661" width="0.1590%" height="15" fill="rgb(210,191,5)" fg:x="801" fg:w="2"/><text x="63.9225%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.6725%" y="645" width="0.1590%" height="15" fill="rgb(225,139,19)" fg:x="801" fg:w="2"/><text x="63.9225%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.6725%" y="629" width="0.1590%" height="15" fill="rgb(210,1,33)" fg:x="801" fg:w="2"/><text x="63.9225%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7520%" y="613" width="0.0795%" height="15" fill="rgb(213,50,3)" fg:x="802" fg:w="1"/><text x="64.0020%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.8315%" y="533" width="0.0795%" height="15" fill="rgb(234,227,4)" fg:x="803" fg:w="1"/><text x="64.0815%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.8315%" y="517" width="0.0795%" height="15" fill="rgb(246,63,5)" fg:x="803" fg:w="1"/><text x="64.0815%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.8315%" y="501" width="0.0795%" height="15" fill="rgb(245,136,27)" fg:x="803" fg:w="1"/><text x="64.0815%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.8315%" y="485" width="0.0795%" height="15" fill="rgb(247,199,27)" fg:x="803" fg:w="1"/><text x="64.0815%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.8315%" y="469" width="0.0795%" height="15" fill="rgb(252,158,49)" fg:x="803" fg:w="1"/><text x="64.0815%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.8315%" y="453" width="0.0795%" height="15" fill="rgb(254,73,1)" fg:x="803" fg:w="1"/><text x="64.0815%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8315%" y="437" width="0.0795%" height="15" fill="rgb(248,93,19)" fg:x="803" fg:w="1"/><text x="64.0815%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.8315%" y="661" width="0.1590%" height="15" fill="rgb(206,67,5)" fg:x="803" fg:w="2"/><text x="64.0815%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.8315%" y="645" width="0.1590%" height="15" fill="rgb(209,210,4)" fg:x="803" fg:w="2"/><text x="64.0815%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.8315%" y="629" width="0.1590%" height="15" fill="rgb(214,185,36)" fg:x="803" fg:w="2"/><text x="64.0815%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="63.8315%" y="613" width="0.1590%" height="15" fill="rgb(233,191,26)" fg:x="803" fg:w="2"/><text x="64.0815%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="63.8315%" y="597" width="0.1590%" height="15" fill="rgb(248,94,17)" fg:x="803" fg:w="2"/><text x="64.0815%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="63.8315%" y="581" width="0.1590%" height="15" fill="rgb(250,64,4)" fg:x="803" fg:w="2"/><text x="64.0815%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="63.8315%" y="565" width="0.1590%" height="15" fill="rgb(218,41,53)" fg:x="803" fg:w="2"/><text x="64.0815%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="63.8315%" y="549" width="0.1590%" height="15" fill="rgb(251,176,28)" fg:x="803" fg:w="2"/><text x="64.0815%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="63.9110%" y="533" width="0.0795%" height="15" fill="rgb(247,22,9)" fg:x="804" fg:w="1"/><text x="64.1610%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.9110%" y="517" width="0.0795%" height="15" fill="rgb(218,201,14)" fg:x="804" fg:w="1"/><text x="64.1610%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="63.8315%" y="677" width="0.2385%" height="15" fill="rgb(218,94,10)" fg:x="803" fg:w="3"/><text x="64.0815%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9905%" y="661" width="0.0795%" height="15" fill="rgb(222,183,52)" fg:x="805" fg:w="1"/><text x="64.2405%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9905%" y="645" width="0.0795%" height="15" fill="rgb(242,140,25)" fg:x="805" fg:w="1"/><text x="64.2405%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.9905%" y="629" width="0.0795%" height="15" fill="rgb(235,197,38)" fg:x="805" fg:w="1"/><text x="64.2405%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.9905%" y="613" width="0.0795%" height="15" fill="rgb(237,136,15)" fg:x="805" fg:w="1"/><text x="64.2405%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.9905%" y="597" width="0.0795%" height="15" fill="rgb(223,44,49)" fg:x="805" fg:w="1"/><text x="64.2405%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.9905%" y="581" width="0.0795%" height="15" fill="rgb(227,71,15)" fg:x="805" fg:w="1"/><text x="64.2405%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.9905%" y="565" width="0.0795%" height="15" fill="rgb(225,153,20)" fg:x="805" fg:w="1"/><text x="64.2405%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.9905%" y="549" width="0.0795%" height="15" fill="rgb(210,190,26)" fg:x="805" fg:w="1"/><text x="64.2405%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.9905%" y="533" width="0.0795%" height="15" fill="rgb(223,147,5)" fg:x="805" fg:w="1"/><text x="64.2405%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.9905%" y="517" width="0.0795%" height="15" fill="rgb(207,14,23)" fg:x="805" fg:w="1"/><text x="64.2405%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.9905%" y="501" width="0.0795%" height="15" fill="rgb(211,195,53)" fg:x="805" fg:w="1"/><text x="64.2405%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9905%" y="485" width="0.0795%" height="15" fill="rgb(237,75,46)" fg:x="805" fg:w="1"/><text x="64.2405%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.0700%" y="597" width="0.0795%" height="15" fill="rgb(254,55,14)" fg:x="806" fg:w="1"/><text x="64.3200%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.0700%" y="581" width="0.0795%" height="15" fill="rgb(230,185,30)" fg:x="806" fg:w="1"/><text x="64.3200%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0700%" y="565" width="0.0795%" height="15" fill="rgb(220,14,11)" fg:x="806" fg:w="1"/><text x="64.3200%" y="575.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="64.0700%" y="677" width="0.1590%" height="15" fill="rgb(215,169,44)" fg:x="806" fg:w="2"/><text x="64.3200%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="64.0700%" y="661" width="0.1590%" height="15" fill="rgb(253,203,20)" fg:x="806" fg:w="2"/><text x="64.3200%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.0700%" y="645" width="0.1590%" height="15" fill="rgb(229,225,17)" fg:x="806" fg:w="2"/><text x="64.3200%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="64.0700%" y="629" width="0.1590%" height="15" fill="rgb(236,76,26)" fg:x="806" fg:w="2"/><text x="64.3200%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.0700%" y="613" width="0.1590%" height="15" fill="rgb(234,15,30)" fg:x="806" fg:w="2"/><text x="64.3200%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.1494%" y="597" width="0.0795%" height="15" fill="rgb(211,113,48)" fg:x="807" fg:w="1"/><text x="64.3994%" y="607.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="64.2289%" y="677" width="0.0795%" height="15" fill="rgb(221,31,36)" fg:x="808" fg:w="1"/><text x="64.4789%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.3879%" y="533" width="0.0795%" height="15" fill="rgb(215,118,52)" fg:x="810" fg:w="1"/><text x="64.6379%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.3879%" y="517" width="0.0795%" height="15" fill="rgb(241,151,27)" fg:x="810" fg:w="1"/><text x="64.6379%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3879%" y="501" width="0.0795%" height="15" fill="rgb(253,51,3)" fg:x="810" fg:w="1"/><text x="64.6379%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.3084%" y="581" width="0.2385%" height="15" fill="rgb(216,201,24)" fg:x="809" fg:w="3"/><text x="64.5584%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.3084%" y="565" width="0.2385%" height="15" fill="rgb(231,107,4)" fg:x="809" fg:w="3"/><text x="64.5584%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.3084%" y="549" width="0.2385%" height="15" fill="rgb(243,97,54)" fg:x="809" fg:w="3"/><text x="64.5584%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.4674%" y="533" width="0.0795%" height="15" fill="rgb(221,32,51)" fg:x="811" fg:w="1"/><text x="64.7174%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.4674%" y="517" width="0.0795%" height="15" fill="rgb(218,171,35)" fg:x="811" fg:w="1"/><text x="64.7174%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.4674%" y="501" width="0.0795%" height="15" fill="rgb(214,20,53)" fg:x="811" fg:w="1"/><text x="64.7174%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.4674%" y="485" width="0.0795%" height="15" fill="rgb(239,9,52)" fg:x="811" fg:w="1"/><text x="64.7174%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (21 samples, 1.67%)</title><rect x="62.9571%" y="709" width="1.6693%" height="15" fill="rgb(215,114,45)" fg:x="792" fg:w="21"/><text x="63.2071%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.79%)</title><rect x="63.8315%" y="693" width="0.7949%" height="15" fill="rgb(208,118,9)" fg:x="803" fg:w="10"/><text x="64.0815%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="64.3084%" y="677" width="0.3180%" height="15" fill="rgb(235,7,39)" fg:x="809" fg:w="4"/><text x="64.5584%" y="687.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="64.3084%" y="661" width="0.3180%" height="15" fill="rgb(243,225,15)" fg:x="809" fg:w="4"/><text x="64.5584%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="64.3084%" y="645" width="0.3180%" height="15" fill="rgb(225,216,18)" fg:x="809" fg:w="4"/><text x="64.5584%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="64.3084%" y="629" width="0.3180%" height="15" fill="rgb(233,36,38)" fg:x="809" fg:w="4"/><text x="64.5584%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="64.3084%" y="613" width="0.3180%" height="15" fill="rgb(239,88,23)" fg:x="809" fg:w="4"/><text x="64.5584%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="64.3084%" y="597" width="0.3180%" height="15" fill="rgb(219,181,35)" fg:x="809" fg:w="4"/><text x="64.5584%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.5469%" y="581" width="0.0795%" height="15" fill="rgb(215,18,46)" fg:x="812" fg:w="1"/><text x="64.7969%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="64.5469%" y="565" width="0.0795%" height="15" fill="rgb(241,38,11)" fg:x="812" fg:w="1"/><text x="64.7969%" y="575.50"></text></g><g><title>engine::users::model::username_to_key (4 samples, 0.32%)</title><rect x="64.6264%" y="709" width="0.3180%" height="15" fill="rgb(248,169,45)" fg:x="813" fg:w="4"/><text x="64.8764%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="64.6264%" y="693" width="0.3180%" height="15" fill="rgb(239,50,49)" fg:x="813" fg:w="4"/><text x="64.8764%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.8649%" y="677" width="0.0795%" height="15" fill="rgb(231,96,31)" fg:x="816" fg:w="1"/><text x="65.1149%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8649%" y="661" width="0.0795%" height="15" fill="rgb(224,193,37)" fg:x="816" fg:w="1"/><text x="65.1149%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.8649%" y="645" width="0.0795%" height="15" fill="rgb(227,153,50)" fg:x="816" fg:w="1"/><text x="65.1149%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.8649%" y="629" width="0.0795%" height="15" fill="rgb(249,228,3)" fg:x="816" fg:w="1"/><text x="65.1149%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.8649%" y="613" width="0.0795%" height="15" fill="rgb(219,164,43)" fg:x="816" fg:w="1"/><text x="65.1149%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.8649%" y="597" width="0.0795%" height="15" fill="rgb(216,45,41)" fg:x="816" fg:w="1"/><text x="65.1149%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9444%" y="661" width="0.0795%" height="15" fill="rgb(210,226,51)" fg:x="817" fg:w="1"/><text x="65.1944%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9444%" y="645" width="0.0795%" height="15" fill="rgb(209,117,49)" fg:x="817" fg:w="1"/><text x="65.1944%" y="655.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="65.0238%" y="661" width="0.0795%" height="15" fill="rgb(206,196,24)" fg:x="818" fg:w="1"/><text x="65.2738%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0238%" y="645" width="0.0795%" height="15" fill="rgb(253,218,3)" fg:x="818" fg:w="1"/><text x="65.2738%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="65.0238%" y="629" width="0.0795%" height="15" fill="rgb(252,166,2)" fg:x="818" fg:w="1"/><text x="65.2738%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.1828%" y="613" width="0.0795%" height="15" fill="rgb(236,218,26)" fg:x="820" fg:w="1"/><text x="65.4328%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.1828%" y="597" width="0.0795%" height="15" fill="rgb(254,84,19)" fg:x="820" fg:w="1"/><text x="65.4328%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.1828%" y="581" width="0.0795%" height="15" fill="rgb(219,137,29)" fg:x="820" fg:w="1"/><text x="65.4328%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="65.1828%" y="565" width="0.0795%" height="15" fill="rgb(227,47,52)" fg:x="820" fg:w="1"/><text x="65.4328%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.1828%" y="549" width="0.0795%" height="15" fill="rgb(229,167,24)" fg:x="820" fg:w="1"/><text x="65.4328%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="65.1033%" y="661" width="0.2385%" height="15" fill="rgb(233,164,1)" fg:x="819" fg:w="3"/><text x="65.3533%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="65.1033%" y="645" width="0.2385%" height="15" fill="rgb(218,88,48)" fg:x="819" fg:w="3"/><text x="65.3533%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="65.1033%" y="629" width="0.2385%" height="15" fill="rgb(226,214,24)" fg:x="819" fg:w="3"/><text x="65.3533%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.2623%" y="613" width="0.0795%" height="15" fill="rgb(233,29,12)" fg:x="821" fg:w="1"/><text x="65.5123%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (823 samples, 65.42%)</title><rect x="0.0000%" y="789" width="65.4213%" height="15" fill="rgb(219,120,34)" fg:x="0" fg:w="823"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (823 samples, 65.42%)</title><rect x="0.0000%" y="773" width="65.4213%" height="15" fill="rgb(226,78,44)" fg:x="0" fg:w="823"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (822 samples, 65.34%)</title><rect x="0.0795%" y="757" width="65.3418%" height="15" fill="rgb(240,15,48)" fg:x="1" fg:w="822"/><text x="0.3295%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (492 samples, 39.11%)</title><rect x="26.3116%" y="741" width="39.1097%" height="15" fill="rgb(253,176,7)" fg:x="331" fg:w="492"/><text x="26.5616%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (492 samples, 39.11%)</title><rect x="26.3116%" y="725" width="39.1097%" height="15" fill="rgb(206,166,28)" fg:x="331" fg:w="492"/><text x="26.5616%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.48%)</title><rect x="64.9444%" y="709" width="0.4769%" height="15" fill="rgb(241,53,51)" fg:x="817" fg:w="6"/><text x="65.1944%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="64.9444%" y="693" width="0.4769%" height="15" fill="rgb(249,112,30)" fg:x="817" fg:w="6"/><text x="65.1944%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="64.9444%" y="677" width="0.4769%" height="15" fill="rgb(217,85,30)" fg:x="817" fg:w="6"/><text x="65.1944%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="65.3418%" y="661" width="0.0795%" height="15" fill="rgb(233,49,7)" fg:x="822" fg:w="1"/><text x="65.5918%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="65.3418%" y="645" width="0.0795%" height="15" fill="rgb(234,109,9)" fg:x="822" fg:w="1"/><text x="65.5918%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.3418%" y="629" width="0.0795%" height="15" fill="rgb(253,95,22)" fg:x="822" fg:w="1"/><text x="65.5918%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.3418%" y="613" width="0.0795%" height="15" fill="rgb(233,176,25)" fg:x="822" fg:w="1"/><text x="65.5918%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.3418%" y="597" width="0.0795%" height="15" fill="rgb(236,33,39)" fg:x="822" fg:w="1"/><text x="65.5918%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="65.3418%" y="581" width="0.0795%" height="15" fill="rgb(223,226,42)" fg:x="822" fg:w="1"/><text x="65.5918%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.4213%" y="725" width="0.0795%" height="15" fill="rgb(216,99,33)" fg:x="823" fg:w="1"/><text x="65.6713%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.4213%" y="741" width="0.1590%" height="15" fill="rgb(235,84,23)" fg:x="823" fg:w="2"/><text x="65.6713%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.5008%" y="725" width="0.0795%" height="15" fill="rgb(232,2,27)" fg:x="824" fg:w="1"/><text x="65.7508%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.5008%" y="709" width="0.0795%" height="15" fill="rgb(241,23,22)" fg:x="824" fg:w="1"/><text x="65.7508%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.5803%" y="725" width="0.0795%" height="15" fill="rgb(211,73,27)" fg:x="825" fg:w="1"/><text x="65.8303%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.5803%" y="709" width="0.0795%" height="15" fill="rgb(235,109,49)" fg:x="825" fg:w="1"/><text x="65.8303%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.6598%" y="645" width="0.0795%" height="15" fill="rgb(230,99,29)" fg:x="826" fg:w="1"/><text x="65.9098%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.8188%" y="629" width="0.0795%" height="15" fill="rgb(245,199,7)" fg:x="828" fg:w="1"/><text x="66.0688%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8188%" y="613" width="0.0795%" height="15" fill="rgb(217,179,10)" fg:x="828" fg:w="1"/><text x="66.0688%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="65.6598%" y="661" width="0.3180%" height="15" fill="rgb(254,99,47)" fg:x="826" fg:w="4"/><text x="65.9098%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="65.7393%" y="645" width="0.2385%" height="15" fill="rgb(251,121,7)" fg:x="827" fg:w="3"/><text x="65.9893%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.8983%" y="629" width="0.0795%" height="15" fill="rgb(250,177,26)" fg:x="829" fg:w="1"/><text x="66.1483%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.8983%" y="613" width="0.0795%" height="15" fill="rgb(232,88,15)" fg:x="829" fg:w="1"/><text x="66.1483%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.8983%" y="597" width="0.0795%" height="15" fill="rgb(251,54,54)" fg:x="829" fg:w="1"/><text x="66.1483%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.9777%" y="613" width="0.0795%" height="15" fill="rgb(208,177,15)" fg:x="830" fg:w="1"/><text x="66.2277%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.0572%" y="613" width="0.0795%" height="15" fill="rgb(205,97,32)" fg:x="831" fg:w="1"/><text x="66.3072%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.1367%" y="613" width="0.0795%" height="15" fill="rgb(217,192,13)" fg:x="832" fg:w="1"/><text x="66.3867%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="65.6598%" y="709" width="0.7154%" height="15" fill="rgb(215,163,41)" fg:x="826" fg:w="9"/><text x="65.9098%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.72%)</title><rect x="65.6598%" y="693" width="0.7154%" height="15" fill="rgb(246,83,29)" fg:x="826" fg:w="9"/><text x="65.9098%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="65.6598%" y="677" width="0.7154%" height="15" fill="rgb(219,2,45)" fg:x="826" fg:w="9"/><text x="65.9098%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="65.9777%" y="661" width="0.3975%" height="15" fill="rgb(242,215,33)" fg:x="830" fg:w="5"/><text x="66.2277%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="65.9777%" y="645" width="0.3975%" height="15" fill="rgb(217,1,6)" fg:x="830" fg:w="5"/><text x="66.2277%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="65.9777%" y="629" width="0.3975%" height="15" fill="rgb(207,85,52)" fg:x="830" fg:w="5"/><text x="66.2277%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.2162%" y="613" width="0.1590%" height="15" fill="rgb(231,171,19)" fg:x="833" fg:w="2"/><text x="66.4662%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2957%" y="597" width="0.0795%" height="15" fill="rgb(207,128,4)" fg:x="834" fg:w="1"/><text x="66.5457%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.87%)</title><rect x="65.5803%" y="741" width="0.8744%" height="15" fill="rgb(219,208,4)" fg:x="825" fg:w="11"/><text x="65.8303%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.79%)</title><rect x="65.6598%" y="725" width="0.7949%" height="15" fill="rgb(235,161,42)" fg:x="826" fg:w="10"/><text x="65.9098%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3752%" y="709" width="0.0795%" height="15" fill="rgb(247,218,18)" fg:x="835" fg:w="1"/><text x="66.6252%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4547%" y="613" width="0.0795%" height="15" fill="rgb(232,114,51)" fg:x="836" fg:w="1"/><text x="66.7047%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="66.4547%" y="645" width="0.2385%" height="15" fill="rgb(222,95,3)" fg:x="836" fg:w="3"/><text x="66.7047%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="66.4547%" y="629" width="0.2385%" height="15" fill="rgb(240,65,29)" fg:x="836" fg:w="3"/><text x="66.7047%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="66.5342%" y="613" width="0.1590%" height="15" fill="rgb(249,209,20)" fg:x="837" fg:w="2"/><text x="66.7842%" y="623.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="66.6932%" y="645" width="0.2385%" height="15" fill="rgb(241,48,37)" fg:x="839" fg:w="3"/><text x="66.9432%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="66.7727%" y="629" width="0.1590%" height="15" fill="rgb(230,140,42)" fg:x="840" fg:w="2"/><text x="67.0227%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="66.8521%" y="613" width="0.0795%" height="15" fill="rgb(230,176,45)" fg:x="841" fg:w="1"/><text x="67.1021%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.56%)</title><rect x="66.4547%" y="661" width="0.5564%" height="15" fill="rgb(245,112,21)" fg:x="836" fg:w="7"/><text x="66.7047%" y="671.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="66.9316%" y="645" width="0.0795%" height="15" fill="rgb(207,183,35)" fg:x="842" fg:w="1"/><text x="67.1816%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="66.9316%" y="629" width="0.0795%" height="15" fill="rgb(227,44,33)" fg:x="842" fg:w="1"/><text x="67.1816%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="66.9316%" y="613" width="0.0795%" height="15" fill="rgb(246,120,21)" fg:x="842" fg:w="1"/><text x="67.1816%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="66.9316%" y="597" width="0.0795%" height="15" fill="rgb(235,57,52)" fg:x="842" fg:w="1"/><text x="67.1816%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9316%" y="581" width="0.0795%" height="15" fill="rgb(238,84,10)" fg:x="842" fg:w="1"/><text x="67.1816%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="67.0111%" y="661" width="0.1590%" height="15" fill="rgb(251,200,32)" fg:x="843" fg:w="2"/><text x="67.2611%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="67.0906%" y="645" width="0.0795%" height="15" fill="rgb(247,159,13)" fg:x="844" fg:w="1"/><text x="67.3406%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="67.0906%" y="629" width="0.0795%" height="15" fill="rgb(238,64,4)" fg:x="844" fg:w="1"/><text x="67.3406%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="67.0906%" y="613" width="0.0795%" height="15" fill="rgb(221,131,51)" fg:x="844" fg:w="1"/><text x="67.3406%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="67.0906%" y="597" width="0.0795%" height="15" fill="rgb(242,5,29)" fg:x="844" fg:w="1"/><text x="67.3406%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="67.0906%" y="581" width="0.0795%" height="15" fill="rgb(214,130,32)" fg:x="844" fg:w="1"/><text x="67.3406%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="67.0906%" y="565" width="0.0795%" height="15" fill="rgb(244,210,16)" fg:x="844" fg:w="1"/><text x="67.3406%" y="575.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="67.0906%" y="549" width="0.0795%" height="15" fill="rgb(234,48,26)" fg:x="844" fg:w="1"/><text x="67.3406%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1701%" y="613" width="0.0795%" height="15" fill="rgb(231,82,38)" fg:x="845" fg:w="1"/><text x="67.4201%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1701%" y="597" width="0.0795%" height="15" fill="rgb(254,128,41)" fg:x="845" fg:w="1"/><text x="67.4201%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.1701%" y="581" width="0.0795%" height="15" fill="rgb(212,73,49)" fg:x="845" fg:w="1"/><text x="67.4201%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.1701%" y="565" width="0.0795%" height="15" fill="rgb(205,62,54)" fg:x="845" fg:w="1"/><text x="67.4201%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.1701%" y="549" width="0.0795%" height="15" fill="rgb(228,0,8)" fg:x="845" fg:w="1"/><text x="67.4201%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1701%" y="533" width="0.0795%" height="15" fill="rgb(251,28,17)" fg:x="845" fg:w="1"/><text x="67.4201%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1701%" y="517" width="0.0795%" height="15" fill="rgb(238,105,27)" fg:x="845" fg:w="1"/><text x="67.4201%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.1701%" y="501" width="0.0795%" height="15" fill="rgb(237,216,33)" fg:x="845" fg:w="1"/><text x="67.4201%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.1701%" y="485" width="0.0795%" height="15" fill="rgb(229,228,25)" fg:x="845" fg:w="1"/><text x="67.4201%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.1701%" y="469" width="0.0795%" height="15" fill="rgb(233,75,23)" fg:x="845" fg:w="1"/><text x="67.4201%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.1701%" y="453" width="0.0795%" height="15" fill="rgb(231,207,16)" fg:x="845" fg:w="1"/><text x="67.4201%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1701%" y="437" width="0.0795%" height="15" fill="rgb(231,191,45)" fg:x="845" fg:w="1"/><text x="67.4201%" y="447.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="67.1701%" y="645" width="0.2385%" height="15" fill="rgb(224,133,17)" fg:x="845" fg:w="3"/><text x="67.4201%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="67.1701%" y="629" width="0.2385%" height="15" fill="rgb(209,178,27)" fg:x="845" fg:w="3"/><text x="67.4201%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="67.2496%" y="613" width="0.1590%" height="15" fill="rgb(218,37,11)" fg:x="846" fg:w="2"/><text x="67.4996%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.2496%" y="597" width="0.1590%" height="15" fill="rgb(251,226,25)" fg:x="846" fg:w="2"/><text x="67.4996%" y="607.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="67.4881%" y="597" width="0.3180%" height="15" fill="rgb(209,222,27)" fg:x="849" fg:w="4"/><text x="67.7381%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="67.5676%" y="581" width="0.2385%" height="15" fill="rgb(238,22,21)" fg:x="850" fg:w="3"/><text x="67.8176%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="67.5676%" y="565" width="0.2385%" height="15" fill="rgb(233,161,25)" fg:x="850" fg:w="3"/><text x="67.8176%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="67.5676%" y="549" width="0.2385%" height="15" fill="rgb(226,122,53)" fg:x="850" fg:w="3"/><text x="67.8176%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="67.5676%" y="533" width="0.2385%" height="15" fill="rgb(220,123,17)" fg:x="850" fg:w="3"/><text x="67.8176%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="67.5676%" y="517" width="0.2385%" height="15" fill="rgb(230,224,35)" fg:x="850" fg:w="3"/><text x="67.8176%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="67.5676%" y="501" width="0.2385%" height="15" fill="rgb(246,83,8)" fg:x="850" fg:w="3"/><text x="67.8176%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="67.5676%" y="485" width="0.2385%" height="15" fill="rgb(230,214,17)" fg:x="850" fg:w="3"/><text x="67.8176%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="67.4086%" y="629" width="0.4769%" height="15" fill="rgb(222,97,18)" fg:x="848" fg:w="6"/><text x="67.6586%" y="639.50"></text></g><g><title>glob::fill_todo (6 samples, 0.48%)</title><rect x="67.4086%" y="613" width="0.4769%" height="15" fill="rgb(206,79,1)" fg:x="848" fg:w="6"/><text x="67.6586%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="67.8060%" y="597" width="0.0795%" height="15" fill="rgb(214,121,34)" fg:x="853" fg:w="1"/><text x="68.0560%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="67.8060%" y="581" width="0.0795%" height="15" fill="rgb(249,199,46)" fg:x="853" fg:w="1"/><text x="68.0560%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="67.8060%" y="565" width="0.0795%" height="15" fill="rgb(214,222,46)" fg:x="853" fg:w="1"/><text x="68.0560%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="67.8060%" y="549" width="0.0795%" height="15" fill="rgb(248,168,30)" fg:x="853" fg:w="1"/><text x="68.0560%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="67.8060%" y="533" width="0.0795%" height="15" fill="rgb(226,14,28)" fg:x="853" fg:w="1"/><text x="68.0560%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="67.8060%" y="517" width="0.0795%" height="15" fill="rgb(253,123,1)" fg:x="853" fg:w="1"/><text x="68.0560%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="67.8060%" y="501" width="0.0795%" height="15" fill="rgb(225,24,42)" fg:x="853" fg:w="1"/><text x="68.0560%" y="511.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="67.9650%" y="597" width="0.2385%" height="15" fill="rgb(216,161,37)" fg:x="855" fg:w="3"/><text x="68.2150%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (2 samples, 0.16%)</title><rect x="68.0445%" y="581" width="0.1590%" height="15" fill="rgb(251,164,26)" fg:x="856" fg:w="2"/><text x="68.2945%" y="591.50"></text></g><g><title>std::ffi::os_str::OsString::push (2 samples, 0.16%)</title><rect x="68.0445%" y="565" width="0.1590%" height="15" fill="rgb(219,177,3)" fg:x="856" fg:w="2"/><text x="68.2945%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (2 samples, 0.16%)</title><rect x="68.0445%" y="549" width="0.1590%" height="15" fill="rgb(222,65,0)" fg:x="856" fg:w="2"/><text x="68.2945%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="68.0445%" y="533" width="0.1590%" height="15" fill="rgb(223,69,54)" fg:x="856" fg:w="2"/><text x="68.2945%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="68.0445%" y="517" width="0.1590%" height="15" fill="rgb(235,30,27)" fg:x="856" fg:w="2"/><text x="68.2945%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="68.0445%" y="501" width="0.1590%" height="15" fill="rgb(220,183,50)" fg:x="856" fg:w="2"/><text x="68.2945%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="68.0445%" y="485" width="0.1590%" height="15" fill="rgb(248,198,15)" fg:x="856" fg:w="2"/><text x="68.2945%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="68.0445%" y="469" width="0.1590%" height="15" fill="rgb(222,211,4)" fg:x="856" fg:w="2"/><text x="68.2945%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.0445%" y="453" width="0.1590%" height="15" fill="rgb(214,102,34)" fg:x="856" fg:w="2"/><text x="68.2945%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="68.0445%" y="437" width="0.1590%" height="15" fill="rgb(245,92,5)" fg:x="856" fg:w="2"/><text x="68.2945%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="68.0445%" y="421" width="0.1590%" height="15" fill="rgb(252,72,51)" fg:x="856" fg:w="2"/><text x="68.2945%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1240%" y="405" width="0.0795%" height="15" fill="rgb(252,208,19)" fg:x="857" fg:w="1"/><text x="68.3740%" y="415.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="68.2035%" y="597" width="0.0795%" height="15" fill="rgb(211,69,7)" fg:x="858" fg:w="1"/><text x="68.4535%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.2035%" y="581" width="0.0795%" height="15" fill="rgb(211,27,16)" fg:x="858" fg:w="1"/><text x="68.4535%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.2035%" y="565" width="0.0795%" height="15" fill="rgb(219,216,14)" fg:x="858" fg:w="1"/><text x="68.4535%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.2035%" y="549" width="0.0795%" height="15" fill="rgb(219,71,8)" fg:x="858" fg:w="1"/><text x="68.4535%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.2035%" y="533" width="0.0795%" height="15" fill="rgb(223,170,53)" fg:x="858" fg:w="1"/><text x="68.4535%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (15 samples, 1.19%)</title><rect x="67.1701%" y="661" width="1.1924%" height="15" fill="rgb(246,21,26)" fg:x="845" fg:w="15"/><text x="67.4201%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (12 samples, 0.95%)</title><rect x="67.4086%" y="645" width="0.9539%" height="15" fill="rgb(248,20,46)" fg:x="848" fg:w="12"/><text x="67.6586%" y="655.50"></text></g><g><title>glob::glob (6 samples, 0.48%)</title><rect x="67.8855%" y="629" width="0.4769%" height="15" fill="rgb(252,94,11)" fg:x="854" fg:w="6"/><text x="68.1355%" y="639.50"></text></g><g><title>glob::glob_with (6 samples, 0.48%)</title><rect x="67.8855%" y="613" width="0.4769%" height="15" fill="rgb(236,163,8)" fg:x="854" fg:w="6"/><text x="68.1355%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="68.2830%" y="597" width="0.0795%" height="15" fill="rgb(217,221,45)" fg:x="859" fg:w="1"/><text x="68.5330%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.2830%" y="581" width="0.0795%" height="15" fill="rgb(238,38,17)" fg:x="859" fg:w="1"/><text x="68.5330%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.2830%" y="565" width="0.0795%" height="15" fill="rgb(242,210,23)" fg:x="859" fg:w="1"/><text x="68.5330%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.2830%" y="549" width="0.0795%" height="15" fill="rgb(250,86,53)" fg:x="859" fg:w="1"/><text x="68.5330%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.2830%" y="533" width="0.0795%" height="15" fill="rgb(223,168,25)" fg:x="859" fg:w="1"/><text x="68.5330%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.2830%" y="517" width="0.0795%" height="15" fill="rgb(251,189,4)" fg:x="859" fg:w="1"/><text x="68.5330%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.2830%" y="501" width="0.0795%" height="15" fill="rgb(245,19,28)" fg:x="859" fg:w="1"/><text x="68.5330%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.2830%" y="485" width="0.0795%" height="15" fill="rgb(207,10,34)" fg:x="859" fg:w="1"/><text x="68.5330%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.2830%" y="469" width="0.0795%" height="15" fill="rgb(235,153,31)" fg:x="859" fg:w="1"/><text x="68.5330%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.2830%" y="453" width="0.0795%" height="15" fill="rgb(228,72,37)" fg:x="859" fg:w="1"/><text x="68.5330%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.2830%" y="437" width="0.0795%" height="15" fill="rgb(215,15,16)" fg:x="859" fg:w="1"/><text x="68.5330%" y="447.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="68.3625%" y="661" width="0.0795%" height="15" fill="rgb(250,119,29)" fg:x="860" fg:w="1"/><text x="68.6125%" y="671.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="68.3625%" y="645" width="0.0795%" height="15" fill="rgb(214,59,1)" fg:x="860" fg:w="1"/><text x="68.6125%" y="655.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="68.3625%" y="629" width="0.0795%" height="15" fill="rgb(223,109,25)" fg:x="860" fg:w="1"/><text x="68.6125%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="68.3625%" y="613" width="0.0795%" height="15" fill="rgb(230,198,22)" fg:x="860" fg:w="1"/><text x="68.6125%" y="623.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="68.3625%" y="597" width="0.0795%" height="15" fill="rgb(245,184,46)" fg:x="860" fg:w="1"/><text x="68.6125%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.4420%" y="645" width="0.1590%" height="15" fill="rgb(253,73,16)" fg:x="861" fg:w="2"/><text x="68.6920%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="68.4420%" y="661" width="0.2385%" height="15" fill="rgb(206,94,45)" fg:x="861" fg:w="3"/><text x="68.6920%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="68.6010%" y="645" width="0.0795%" height="15" fill="rgb(236,83,27)" fg:x="863" fg:w="1"/><text x="68.8510%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6010%" y="629" width="0.0795%" height="15" fill="rgb(220,196,8)" fg:x="863" fg:w="1"/><text x="68.8510%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (30 samples, 2.38%)</title><rect x="66.4547%" y="677" width="2.3847%" height="15" fill="rgb(254,185,14)" fg:x="836" fg:w="30"/><text x="66.7047%" y="687.50">ke..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="68.6804%" y="661" width="0.1590%" height="15" fill="rgb(226,50,22)" fg:x="864" fg:w="2"/><text x="68.9304%" y="671.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="68.6804%" y="645" width="0.1590%" height="15" fill="rgb(253,147,0)" fg:x="864" fg:w="2"/><text x="68.9304%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (31 samples, 2.46%)</title><rect x="66.4547%" y="741" width="2.4642%" height="15" fill="rgb(252,46,33)" fg:x="836" fg:w="31"/><text x="66.7047%" y="751.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (31 samples, 2.46%)</title><rect x="66.4547%" y="725" width="2.4642%" height="15" fill="rgb(242,22,54)" fg:x="836" fg:w="31"/><text x="66.7047%" y="735.50">en..</text></g><g><title>engine::session::Session::new (31 samples, 2.46%)</title><rect x="66.4547%" y="709" width="2.4642%" height="15" fill="rgb(223,178,32)" fg:x="836" fg:w="31"/><text x="66.7047%" y="719.50">en..</text></g><g><title>engine::session::Session::initialize (31 samples, 2.46%)</title><rect x="66.4547%" y="693" width="2.4642%" height="15" fill="rgb(214,106,53)" fg:x="836" fg:w="31"/><text x="66.7047%" y="703.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="68.8394%" y="677" width="0.0795%" height="15" fill="rgb(232,65,50)" fg:x="866" fg:w="1"/><text x="69.0894%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.8394%" y="661" width="0.0795%" height="15" fill="rgb(231,110,28)" fg:x="866" fg:w="1"/><text x="69.0894%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="68.8394%" y="645" width="0.0795%" height="15" fill="rgb(216,71,40)" fg:x="866" fg:w="1"/><text x="69.0894%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8394%" y="629" width="0.0795%" height="15" fill="rgb(229,89,53)" fg:x="866" fg:w="1"/><text x="69.0894%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="68.9189%" y="613" width="0.0795%" height="15" fill="rgb(210,124,14)" fg:x="867" fg:w="1"/><text x="69.1689%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.9189%" y="597" width="0.0795%" height="15" fill="rgb(236,213,6)" fg:x="867" fg:w="1"/><text x="69.1689%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.9189%" y="581" width="0.0795%" height="15" fill="rgb(228,41,5)" fg:x="867" fg:w="1"/><text x="69.1689%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.9189%" y="565" width="0.0795%" height="15" fill="rgb(221,167,25)" fg:x="867" fg:w="1"/><text x="69.1689%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="68.9189%" y="549" width="0.0795%" height="15" fill="rgb(228,144,37)" fg:x="867" fg:w="1"/><text x="69.1689%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.9984%" y="597" width="0.0795%" height="15" fill="rgb(227,189,38)" fg:x="868" fg:w="1"/><text x="69.2484%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0779%" y="597" width="0.0795%" height="15" fill="rgb(218,8,2)" fg:x="869" fg:w="1"/><text x="69.3279%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0779%" y="581" width="0.0795%" height="15" fill="rgb(209,61,28)" fg:x="869" fg:w="1"/><text x="69.3279%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0779%" y="565" width="0.0795%" height="15" fill="rgb(233,140,39)" fg:x="869" fg:w="1"/><text x="69.3279%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="69.0779%" y="549" width="0.0795%" height="15" fill="rgb(251,66,48)" fg:x="869" fg:w="1"/><text x="69.3279%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="68.9189%" y="629" width="0.3180%" height="15" fill="rgb(210,44,45)" fg:x="867" fg:w="4"/><text x="69.1689%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.9984%" y="613" width="0.2385%" height="15" fill="rgb(214,136,46)" fg:x="868" fg:w="3"/><text x="69.2484%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.1574%" y="597" width="0.0795%" height="15" fill="rgb(207,130,50)" fg:x="870" fg:w="1"/><text x="69.4074%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.1574%" y="581" width="0.0795%" height="15" fill="rgb(228,102,49)" fg:x="870" fg:w="1"/><text x="69.4074%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.2369%" y="629" width="0.2385%" height="15" fill="rgb(253,55,1)" fg:x="871" fg:w="3"/><text x="69.4869%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="69.2369%" y="613" width="0.2385%" height="15" fill="rgb(238,222,9)" fg:x="871" fg:w="3"/><text x="69.4869%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.3164%" y="597" width="0.1590%" height="15" fill="rgb(246,99,6)" fg:x="872" fg:w="2"/><text x="69.5664%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.3959%" y="581" width="0.0795%" height="15" fill="rgb(219,110,26)" fg:x="873" fg:w="1"/><text x="69.6459%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.3959%" y="565" width="0.0795%" height="15" fill="rgb(239,160,33)" fg:x="873" fg:w="1"/><text x="69.6459%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.3959%" y="549" width="0.0795%" height="15" fill="rgb(220,202,23)" fg:x="873" fg:w="1"/><text x="69.6459%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3959%" y="533" width="0.0795%" height="15" fill="rgb(208,80,26)" fg:x="873" fg:w="1"/><text x="69.6459%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.5548%" y="549" width="0.0795%" height="15" fill="rgb(243,85,7)" fg:x="875" fg:w="1"/><text x="69.8048%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5548%" y="533" width="0.0795%" height="15" fill="rgb(228,77,47)" fg:x="875" fg:w="1"/><text x="69.8048%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5548%" y="517" width="0.0795%" height="15" fill="rgb(212,226,8)" fg:x="875" fg:w="1"/><text x="69.8048%" y="527.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.79%)</title><rect x="68.9189%" y="725" width="0.7949%" height="15" fill="rgb(241,120,54)" fg:x="867" fg:w="10"/><text x="69.1689%" y="735.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.79%)</title><rect x="68.9189%" y="709" width="0.7949%" height="15" fill="rgb(226,80,16)" fg:x="867" fg:w="10"/><text x="69.1689%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.79%)</title><rect x="68.9189%" y="693" width="0.7949%" height="15" fill="rgb(240,76,13)" fg:x="867" fg:w="10"/><text x="69.1689%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.79%)</title><rect x="68.9189%" y="677" width="0.7949%" height="15" fill="rgb(252,74,8)" fg:x="867" fg:w="10"/><text x="69.1689%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.79%)</title><rect x="68.9189%" y="661" width="0.7949%" height="15" fill="rgb(244,155,2)" fg:x="867" fg:w="10"/><text x="69.1689%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.79%)</title><rect x="68.9189%" y="645" width="0.7949%" height="15" fill="rgb(215,81,35)" fg:x="867" fg:w="10"/><text x="69.1689%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="69.4754%" y="629" width="0.2385%" height="15" fill="rgb(206,55,2)" fg:x="874" fg:w="3"/><text x="69.7254%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="69.4754%" y="613" width="0.2385%" height="15" fill="rgb(231,2,34)" fg:x="874" fg:w="3"/><text x="69.7254%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="69.4754%" y="597" width="0.2385%" height="15" fill="rgb(242,176,48)" fg:x="874" fg:w="3"/><text x="69.7254%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="69.4754%" y="581" width="0.2385%" height="15" fill="rgb(249,31,36)" fg:x="874" fg:w="3"/><text x="69.7254%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="69.5548%" y="565" width="0.1590%" height="15" fill="rgb(205,18,17)" fg:x="875" fg:w="2"/><text x="69.8048%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.6343%" y="549" width="0.0795%" height="15" fill="rgb(254,130,5)" fg:x="876" fg:w="1"/><text x="69.8843%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="69.7138%" y="725" width="0.1590%" height="15" fill="rgb(229,42,45)" fg:x="877" fg:w="2"/><text x="69.9638%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="69.7138%" y="709" width="0.1590%" height="15" fill="rgb(245,95,25)" fg:x="877" fg:w="2"/><text x="69.9638%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="69.7138%" y="693" width="0.1590%" height="15" fill="rgb(249,193,38)" fg:x="877" fg:w="2"/><text x="69.9638%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="69.7138%" y="677" width="0.1590%" height="15" fill="rgb(241,140,43)" fg:x="877" fg:w="2"/><text x="69.9638%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="69.7138%" y="661" width="0.1590%" height="15" fill="rgb(245,78,48)" fg:x="877" fg:w="2"/><text x="69.9638%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.8728%" y="709" width="0.0795%" height="15" fill="rgb(214,92,39)" fg:x="879" fg:w="1"/><text x="70.1228%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.8728%" y="693" width="0.0795%" height="15" fill="rgb(211,189,14)" fg:x="879" fg:w="1"/><text x="70.1228%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8728%" y="677" width="0.0795%" height="15" fill="rgb(218,7,24)" fg:x="879" fg:w="1"/><text x="70.1228%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8728%" y="661" width="0.0795%" height="15" fill="rgb(224,200,49)" fg:x="879" fg:w="1"/><text x="70.1228%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8728%" y="645" width="0.0795%" height="15" fill="rgb(218,210,14)" fg:x="879" fg:w="1"/><text x="70.1228%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8728%" y="629" width="0.0795%" height="15" fill="rgb(234,142,31)" fg:x="879" fg:w="1"/><text x="70.1228%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8728%" y="613" width="0.0795%" height="15" fill="rgb(227,165,2)" fg:x="879" fg:w="1"/><text x="70.1228%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8728%" y="597" width="0.0795%" height="15" fill="rgb(232,44,46)" fg:x="879" fg:w="1"/><text x="70.1228%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8728%" y="581" width="0.0795%" height="15" fill="rgb(236,149,47)" fg:x="879" fg:w="1"/><text x="70.1228%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8728%" y="565" width="0.0795%" height="15" fill="rgb(227,45,31)" fg:x="879" fg:w="1"/><text x="70.1228%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.8728%" y="549" width="0.0795%" height="15" fill="rgb(240,176,51)" fg:x="879" fg:w="1"/><text x="70.1228%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.8728%" y="533" width="0.0795%" height="15" fill="rgb(249,146,41)" fg:x="879" fg:w="1"/><text x="70.1228%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.8728%" y="517" width="0.0795%" height="15" fill="rgb(213,208,4)" fg:x="879" fg:w="1"/><text x="70.1228%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.8728%" y="501" width="0.0795%" height="15" fill="rgb(245,84,36)" fg:x="879" fg:w="1"/><text x="70.1228%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8728%" y="485" width="0.0795%" height="15" fill="rgb(254,84,18)" fg:x="879" fg:w="1"/><text x="70.1228%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="69.9523%" y="677" width="0.0795%" height="15" fill="rgb(225,38,54)" fg:x="880" fg:w="1"/><text x="70.2023%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="69.9523%" y="661" width="0.0795%" height="15" fill="rgb(246,50,30)" fg:x="880" fg:w="1"/><text x="70.2023%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="69.9523%" y="645" width="0.0795%" height="15" fill="rgb(246,148,9)" fg:x="880" fg:w="1"/><text x="70.2023%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.9523%" y="629" width="0.0795%" height="15" fill="rgb(223,75,4)" fg:x="880" fg:w="1"/><text x="70.2023%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.9523%" y="613" width="0.0795%" height="15" fill="rgb(239,148,41)" fg:x="880" fg:w="1"/><text x="70.2023%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.9523%" y="597" width="0.0795%" height="15" fill="rgb(205,195,3)" fg:x="880" fg:w="1"/><text x="70.2023%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9523%" y="581" width="0.0795%" height="15" fill="rgb(254,161,1)" fg:x="880" fg:w="1"/><text x="70.2023%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9523%" y="565" width="0.0795%" height="15" fill="rgb(211,229,8)" fg:x="880" fg:w="1"/><text x="70.2023%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.9523%" y="549" width="0.0795%" height="15" fill="rgb(220,97,9)" fg:x="880" fg:w="1"/><text x="70.2023%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.9523%" y="533" width="0.0795%" height="15" fill="rgb(240,218,8)" fg:x="880" fg:w="1"/><text x="70.2023%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.9523%" y="517" width="0.0795%" height="15" fill="rgb(250,44,0)" fg:x="880" fg:w="1"/><text x="70.2023%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9523%" y="501" width="0.0795%" height="15" fill="rgb(236,41,53)" fg:x="880" fg:w="1"/><text x="70.2023%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9523%" y="485" width="0.0795%" height="15" fill="rgb(218,227,13)" fg:x="880" fg:w="1"/><text x="70.2023%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.9523%" y="469" width="0.0795%" height="15" fill="rgb(217,94,32)" fg:x="880" fg:w="1"/><text x="70.2023%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.9523%" y="453" width="0.0795%" height="15" fill="rgb(213,217,12)" fg:x="880" fg:w="1"/><text x="70.2023%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.9523%" y="437" width="0.0795%" height="15" fill="rgb(229,13,46)" fg:x="880" fg:w="1"/><text x="70.2023%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.9523%" y="421" width="0.0795%" height="15" fill="rgb(243,139,5)" fg:x="880" fg:w="1"/><text x="70.2023%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9523%" y="405" width="0.0795%" height="15" fill="rgb(249,38,45)" fg:x="880" fg:w="1"/><text x="70.2023%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0318%" y="645" width="0.0795%" height="15" fill="rgb(216,70,11)" fg:x="881" fg:w="1"/><text x="70.2818%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.0318%" y="629" width="0.0795%" height="15" fill="rgb(253,101,25)" fg:x="881" fg:w="1"/><text x="70.2818%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0318%" y="613" width="0.0795%" height="15" fill="rgb(207,197,30)" fg:x="881" fg:w="1"/><text x="70.2818%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0318%" y="597" width="0.0795%" height="15" fill="rgb(238,87,13)" fg:x="881" fg:w="1"/><text x="70.2818%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0318%" y="581" width="0.0795%" height="15" fill="rgb(215,155,8)" fg:x="881" fg:w="1"/><text x="70.2818%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="69.8728%" y="725" width="0.3180%" height="15" fill="rgb(239,166,38)" fg:x="879" fg:w="4"/><text x="70.1228%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="69.9523%" y="709" width="0.2385%" height="15" fill="rgb(240,194,35)" fg:x="880" fg:w="3"/><text x="70.2023%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="69.9523%" y="693" width="0.2385%" height="15" fill="rgb(219,10,44)" fg:x="880" fg:w="3"/><text x="70.2023%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="70.0318%" y="677" width="0.1590%" height="15" fill="rgb(251,220,35)" fg:x="881" fg:w="2"/><text x="70.2818%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="70.0318%" y="661" width="0.1590%" height="15" fill="rgb(218,117,13)" fg:x="881" fg:w="2"/><text x="70.2818%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.1113%" y="645" width="0.0795%" height="15" fill="rgb(221,213,40)" fg:x="882" fg:w="1"/><text x="70.3613%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="70.1113%" y="629" width="0.0795%" height="15" fill="rgb(251,224,35)" fg:x="882" fg:w="1"/><text x="70.3613%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.1113%" y="613" width="0.0795%" height="15" fill="rgb(241,33,39)" fg:x="882" fg:w="1"/><text x="70.3613%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.1113%" y="597" width="0.0795%" height="15" fill="rgb(222,74,17)" fg:x="882" fg:w="1"/><text x="70.3613%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.1113%" y="581" width="0.0795%" height="15" fill="rgb(225,103,0)" fg:x="882" fg:w="1"/><text x="70.3613%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.1113%" y="565" width="0.0795%" height="15" fill="rgb(240,0,12)" fg:x="882" fg:w="1"/><text x="70.3613%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.1113%" y="549" width="0.0795%" height="15" fill="rgb(233,213,37)" fg:x="882" fg:w="1"/><text x="70.3613%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.1113%" y="533" width="0.0795%" height="15" fill="rgb(225,84,52)" fg:x="882" fg:w="1"/><text x="70.3613%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1113%" y="517" width="0.0795%" height="15" fill="rgb(247,160,51)" fg:x="882" fg:w="1"/><text x="70.3613%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="70.1908%" y="725" width="0.0795%" height="15" fill="rgb(244,60,51)" fg:x="883" fg:w="1"/><text x="70.4408%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="70.1908%" y="709" width="0.0795%" height="15" fill="rgb(233,114,7)" fg:x="883" fg:w="1"/><text x="70.4408%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="70.1908%" y="693" width="0.0795%" height="15" fill="rgb(246,136,16)" fg:x="883" fg:w="1"/><text x="70.4408%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="70.1908%" y="677" width="0.0795%" height="15" fill="rgb(243,114,45)" fg:x="883" fg:w="1"/><text x="70.4408%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1908%" y="661" width="0.0795%" height="15" fill="rgb(247,183,43)" fg:x="883" fg:w="1"/><text x="70.4408%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1908%" y="645" width="0.0795%" height="15" fill="rgb(251,210,42)" fg:x="883" fg:w="1"/><text x="70.4408%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1908%" y="629" width="0.0795%" height="15" fill="rgb(221,88,35)" fg:x="883" fg:w="1"/><text x="70.4408%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="70.2703%" y="709" width="0.0795%" height="15" fill="rgb(242,21,20)" fg:x="884" fg:w="1"/><text x="70.5203%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="70.2703%" y="693" width="0.0795%" height="15" fill="rgb(233,226,36)" fg:x="884" fg:w="1"/><text x="70.5203%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="70.2703%" y="677" width="0.0795%" height="15" fill="rgb(243,189,34)" fg:x="884" fg:w="1"/><text x="70.5203%" y="687.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2703%" y="661" width="0.0795%" height="15" fill="rgb(207,145,50)" fg:x="884" fg:w="1"/><text x="70.5203%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.2703%" y="645" width="0.0795%" height="15" fill="rgb(242,1,50)" fg:x="884" fg:w="1"/><text x="70.5203%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.2703%" y="629" width="0.0795%" height="15" fill="rgb(231,65,32)" fg:x="884" fg:w="1"/><text x="70.5203%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="70.3498%" y="709" width="0.0795%" height="15" fill="rgb(208,68,49)" fg:x="885" fg:w="1"/><text x="70.5998%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.3498%" y="693" width="0.0795%" height="15" fill="rgb(253,54,49)" fg:x="885" fg:w="1"/><text x="70.5998%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.3498%" y="677" width="0.0795%" height="15" fill="rgb(245,186,24)" fg:x="885" fg:w="1"/><text x="70.5998%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3498%" y="661" width="0.0795%" height="15" fill="rgb(209,2,41)" fg:x="885" fg:w="1"/><text x="70.5998%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="70.4293%" y="693" width="0.0795%" height="15" fill="rgb(242,208,54)" fg:x="886" fg:w="1"/><text x="70.6793%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4293%" y="677" width="0.0795%" height="15" fill="rgb(225,9,51)" fg:x="886" fg:w="1"/><text x="70.6793%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.5087%" y="581" width="0.0795%" height="15" fill="rgb(207,207,25)" fg:x="887" fg:w="1"/><text x="70.7587%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.5087%" y="565" width="0.0795%" height="15" fill="rgb(253,96,18)" fg:x="887" fg:w="1"/><text x="70.7587%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.5087%" y="549" width="0.0795%" height="15" fill="rgb(252,215,20)" fg:x="887" fg:w="1"/><text x="70.7587%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.5087%" y="533" width="0.0795%" height="15" fill="rgb(245,227,26)" fg:x="887" fg:w="1"/><text x="70.7587%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.5882%" y="565" width="0.0795%" height="15" fill="rgb(241,208,0)" fg:x="888" fg:w="1"/><text x="70.8382%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.5882%" y="549" width="0.0795%" height="15" fill="rgb(224,130,10)" fg:x="888" fg:w="1"/><text x="70.8382%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.5882%" y="533" width="0.0795%" height="15" fill="rgb(237,29,0)" fg:x="888" fg:w="1"/><text x="70.8382%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.5882%" y="517" width="0.0795%" height="15" fill="rgb(219,27,41)" fg:x="888" fg:w="1"/><text x="70.8382%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.6677%" y="517" width="0.0795%" height="15" fill="rgb(245,101,19)" fg:x="889" fg:w="1"/><text x="70.9177%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="70.6677%" y="549" width="0.1590%" height="15" fill="rgb(243,44,37)" fg:x="889" fg:w="2"/><text x="70.9177%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.6677%" y="533" width="0.1590%" height="15" fill="rgb(228,213,43)" fg:x="889" fg:w="2"/><text x="70.9177%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7472%" y="517" width="0.0795%" height="15" fill="rgb(219,163,21)" fg:x="890" fg:w="1"/><text x="70.9972%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7472%" y="501" width="0.0795%" height="15" fill="rgb(234,86,24)" fg:x="890" fg:w="1"/><text x="70.9972%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7472%" y="485" width="0.0795%" height="15" fill="rgb(225,10,24)" fg:x="890" fg:w="1"/><text x="70.9972%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.7472%" y="469" width="0.0795%" height="15" fill="rgb(218,109,7)" fg:x="890" fg:w="1"/><text x="70.9972%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="70.8267%" y="549" width="0.1590%" height="15" fill="rgb(210,20,26)" fg:x="891" fg:w="2"/><text x="71.0767%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="70.8267%" y="533" width="0.1590%" height="15" fill="rgb(216,18,1)" fg:x="891" fg:w="2"/><text x="71.0767%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="70.8267%" y="517" width="0.1590%" height="15" fill="rgb(206,163,23)" fg:x="891" fg:w="2"/><text x="71.0767%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="70.8267%" y="501" width="0.1590%" height="15" fill="rgb(229,150,31)" fg:x="891" fg:w="2"/><text x="71.0767%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.9857%" y="517" width="0.0795%" height="15" fill="rgb(231,10,5)" fg:x="893" fg:w="1"/><text x="71.2357%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.9857%" y="501" width="0.0795%" height="15" fill="rgb(250,40,50)" fg:x="893" fg:w="1"/><text x="71.2357%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.9857%" y="485" width="0.0795%" height="15" fill="rgb(217,119,7)" fg:x="893" fg:w="1"/><text x="71.2357%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.9857%" y="469" width="0.0795%" height="15" fill="rgb(245,214,40)" fg:x="893" fg:w="1"/><text x="71.2357%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.9857%" y="453" width="0.0795%" height="15" fill="rgb(216,187,1)" fg:x="893" fg:w="1"/><text x="71.2357%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.9857%" y="437" width="0.0795%" height="15" fill="rgb(237,146,21)" fg:x="893" fg:w="1"/><text x="71.2357%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.9857%" y="421" width="0.0795%" height="15" fill="rgb(210,174,47)" fg:x="893" fg:w="1"/><text x="71.2357%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="70.5087%" y="597" width="0.6359%" height="15" fill="rgb(218,111,39)" fg:x="887" fg:w="8"/><text x="70.7587%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="70.5882%" y="581" width="0.5564%" height="15" fill="rgb(224,95,19)" fg:x="888" fg:w="7"/><text x="70.8382%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="70.6677%" y="565" width="0.4769%" height="15" fill="rgb(234,15,38)" fg:x="889" fg:w="6"/><text x="70.9177%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.9857%" y="549" width="0.1590%" height="15" fill="rgb(246,56,12)" fg:x="893" fg:w="2"/><text x="71.2357%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.9857%" y="533" width="0.1590%" height="15" fill="rgb(247,16,17)" fg:x="893" fg:w="2"/><text x="71.2357%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0652%" y="517" width="0.0795%" height="15" fill="rgb(215,151,11)" fg:x="894" fg:w="1"/><text x="71.3152%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.1447%" y="565" width="0.0795%" height="15" fill="rgb(225,16,24)" fg:x="895" fg:w="1"/><text x="71.3947%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2242%" y="549" width="0.0795%" height="15" fill="rgb(217,117,5)" fg:x="896" fg:w="1"/><text x="71.4742%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="71.1447%" y="597" width="0.3180%" height="15" fill="rgb(246,187,53)" fg:x="895" fg:w="4"/><text x="71.3947%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="71.1447%" y="581" width="0.3180%" height="15" fill="rgb(241,71,40)" fg:x="895" fg:w="4"/><text x="71.3947%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.2242%" y="565" width="0.2385%" height="15" fill="rgb(231,67,39)" fg:x="896" fg:w="3"/><text x="71.4742%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3037%" y="549" width="0.1590%" height="15" fill="rgb(222,120,24)" fg:x="897" fg:w="2"/><text x="71.5537%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3037%" y="533" width="0.1590%" height="15" fill="rgb(248,3,3)" fg:x="897" fg:w="2"/><text x="71.5537%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.3831%" y="517" width="0.0795%" height="15" fill="rgb(228,218,5)" fg:x="898" fg:w="1"/><text x="71.6331%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.3831%" y="501" width="0.0795%" height="15" fill="rgb(212,202,43)" fg:x="898" fg:w="1"/><text x="71.6331%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4626%" y="565" width="0.0795%" height="15" fill="rgb(235,183,2)" fg:x="899" fg:w="1"/><text x="71.7126%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="71.4626%" y="581" width="0.1590%" height="15" fill="rgb(230,165,10)" fg:x="899" fg:w="2"/><text x="71.7126%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="71.5421%" y="565" width="0.0795%" height="15" fill="rgb(219,54,40)" fg:x="900" fg:w="1"/><text x="71.7921%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.5421%" y="549" width="0.0795%" height="15" fill="rgb(244,73,9)" fg:x="900" fg:w="1"/><text x="71.7921%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.5421%" y="533" width="0.0795%" height="15" fill="rgb(212,32,45)" fg:x="900" fg:w="1"/><text x="71.7921%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="71.5421%" y="517" width="0.0795%" height="15" fill="rgb(205,58,31)" fg:x="900" fg:w="1"/><text x="71.7921%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.5421%" y="501" width="0.0795%" height="15" fill="rgb(250,120,43)" fg:x="900" fg:w="1"/><text x="71.7921%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="71.6216%" y="549" width="0.1590%" height="15" fill="rgb(235,13,10)" fg:x="901" fg:w="2"/><text x="71.8716%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="71.7011%" y="533" width="0.0795%" height="15" fill="rgb(232,219,31)" fg:x="902" fg:w="1"/><text x="71.9511%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7806%" y="549" width="0.0795%" height="15" fill="rgb(218,157,51)" fg:x="903" fg:w="1"/><text x="72.0306%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7806%" y="533" width="0.0795%" height="15" fill="rgb(211,91,52)" fg:x="903" fg:w="1"/><text x="72.0306%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7806%" y="517" width="0.0795%" height="15" fill="rgb(240,173,1)" fg:x="903" fg:w="1"/><text x="72.0306%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8601%" y="501" width="0.0795%" height="15" fill="rgb(248,20,47)" fg:x="904" fg:w="1"/><text x="72.1101%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8601%" y="485" width="0.0795%" height="15" fill="rgb(217,221,40)" fg:x="904" fg:w="1"/><text x="72.1101%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="71.8601%" y="517" width="0.2385%" height="15" fill="rgb(226,149,51)" fg:x="904" fg:w="3"/><text x="72.1101%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="71.9396%" y="501" width="0.1590%" height="15" fill="rgb(252,193,7)" fg:x="905" fg:w="2"/><text x="72.1896%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.0191%" y="485" width="0.0795%" height="15" fill="rgb(205,123,0)" fg:x="906" fg:w="1"/><text x="72.2691%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0191%" y="469" width="0.0795%" height="15" fill="rgb(233,173,25)" fg:x="906" fg:w="1"/><text x="72.2691%" y="479.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.75%)</title><rect x="70.4293%" y="709" width="1.7488%" height="15" fill="rgb(216,63,32)" fg:x="886" fg:w="22"/><text x="70.6793%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (21 samples, 1.67%)</title><rect x="70.5087%" y="693" width="1.6693%" height="15" fill="rgb(209,56,45)" fg:x="887" fg:w="21"/><text x="70.7587%" y="703.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.67%)</title><rect x="70.5087%" y="677" width="1.6693%" height="15" fill="rgb(226,111,49)" fg:x="887" fg:w="21"/><text x="70.7587%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.67%)</title><rect x="70.5087%" y="661" width="1.6693%" height="15" fill="rgb(244,181,21)" fg:x="887" fg:w="21"/><text x="70.7587%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.67%)</title><rect x="70.5087%" y="645" width="1.6693%" height="15" fill="rgb(222,126,15)" fg:x="887" fg:w="21"/><text x="70.7587%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.67%)</title><rect x="70.5087%" y="629" width="1.6693%" height="15" fill="rgb(222,95,17)" fg:x="887" fg:w="21"/><text x="70.7587%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.67%)</title><rect x="70.5087%" y="613" width="1.6693%" height="15" fill="rgb(254,46,5)" fg:x="887" fg:w="21"/><text x="70.7587%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="71.4626%" y="597" width="0.7154%" height="15" fill="rgb(236,216,35)" fg:x="899" fg:w="9"/><text x="71.7126%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="71.6216%" y="581" width="0.5564%" height="15" fill="rgb(217,187,26)" fg:x="901" fg:w="7"/><text x="71.8716%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="71.6216%" y="565" width="0.5564%" height="15" fill="rgb(207,192,25)" fg:x="901" fg:w="7"/><text x="71.8716%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="71.8601%" y="549" width="0.3180%" height="15" fill="rgb(253,135,27)" fg:x="904" fg:w="4"/><text x="72.1101%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="71.8601%" y="533" width="0.3180%" height="15" fill="rgb(211,122,29)" fg:x="904" fg:w="4"/><text x="72.1101%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.0986%" y="517" width="0.0795%" height="15" fill="rgb(233,162,40)" fg:x="907" fg:w="1"/><text x="72.3486%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0986%" y="501" width="0.0795%" height="15" fill="rgb(222,184,47)" fg:x="907" fg:w="1"/><text x="72.3486%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="72.1781%" y="677" width="0.0795%" height="15" fill="rgb(249,99,23)" fg:x="908" fg:w="1"/><text x="72.4281%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.1781%" y="661" width="0.0795%" height="15" fill="rgb(214,60,12)" fg:x="908" fg:w="1"/><text x="72.4281%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="72.1781%" y="645" width="0.0795%" height="15" fill="rgb(250,229,36)" fg:x="908" fg:w="1"/><text x="72.4281%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.1781%" y="629" width="0.0795%" height="15" fill="rgb(232,195,10)" fg:x="908" fg:w="1"/><text x="72.4281%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="72.2576%" y="629" width="0.0795%" height="15" fill="rgb(205,213,31)" fg:x="909" fg:w="1"/><text x="72.5076%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2576%" y="613" width="0.0795%" height="15" fill="rgb(237,43,8)" fg:x="909" fg:w="1"/><text x="72.5076%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2576%" y="597" width="0.0795%" height="15" fill="rgb(216,208,3)" fg:x="909" fg:w="1"/><text x="72.5076%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2576%" y="581" width="0.0795%" height="15" fill="rgb(228,179,44)" fg:x="909" fg:w="1"/><text x="72.5076%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="72.3370%" y="629" width="0.0795%" height="15" fill="rgb(230,192,27)" fg:x="910" fg:w="1"/><text x="72.5870%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3370%" y="613" width="0.0795%" height="15" fill="rgb(251,30,38)" fg:x="910" fg:w="1"/><text x="72.5870%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="72.2576%" y="661" width="0.2385%" height="15" fill="rgb(246,55,52)" fg:x="909" fg:w="3"/><text x="72.5076%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="72.2576%" y="645" width="0.2385%" height="15" fill="rgb(249,79,26)" fg:x="909" fg:w="3"/><text x="72.5076%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4165%" y="629" width="0.0795%" height="15" fill="rgb(220,202,16)" fg:x="911" fg:w="1"/><text x="72.6665%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4165%" y="613" width="0.0795%" height="15" fill="rgb(250,170,23)" fg:x="911" fg:w="1"/><text x="72.6665%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4165%" y="597" width="0.0795%" height="15" fill="rgb(230,7,37)" fg:x="911" fg:w="1"/><text x="72.6665%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="72.4165%" y="581" width="0.0795%" height="15" fill="rgb(213,71,1)" fg:x="911" fg:w="1"/><text x="72.6665%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="72.1781%" y="709" width="0.3975%" height="15" fill="rgb(227,87,39)" fg:x="908" fg:w="5"/><text x="72.4281%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="72.1781%" y="693" width="0.3975%" height="15" fill="rgb(210,41,29)" fg:x="908" fg:w="5"/><text x="72.4281%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="72.2576%" y="677" width="0.3180%" height="15" fill="rgb(206,191,31)" fg:x="909" fg:w="4"/><text x="72.5076%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4960%" y="661" width="0.0795%" height="15" fill="rgb(247,75,54)" fg:x="912" fg:w="1"/><text x="72.7460%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.4960%" y="645" width="0.0795%" height="15" fill="rgb(208,54,50)" fg:x="912" fg:w="1"/><text x="72.7460%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.4960%" y="629" width="0.0795%" height="15" fill="rgb(214,90,37)" fg:x="912" fg:w="1"/><text x="72.7460%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="72.4960%" y="613" width="0.0795%" height="15" fill="rgb(220,132,6)" fg:x="912" fg:w="1"/><text x="72.7460%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.4960%" y="597" width="0.0795%" height="15" fill="rgb(213,167,7)" fg:x="912" fg:w="1"/><text x="72.7460%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4960%" y="581" width="0.0795%" height="15" fill="rgb(243,36,27)" fg:x="912" fg:w="1"/><text x="72.7460%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.4960%" y="565" width="0.0795%" height="15" fill="rgb(235,147,12)" fg:x="912" fg:w="1"/><text x="72.7460%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5755%" y="613" width="0.0795%" height="15" fill="rgb(212,198,44)" fg:x="913" fg:w="1"/><text x="72.8255%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5755%" y="597" width="0.0795%" height="15" fill="rgb(218,68,50)" fg:x="913" fg:w="1"/><text x="72.8255%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5755%" y="581" width="0.0795%" height="15" fill="rgb(224,79,48)" fg:x="913" fg:w="1"/><text x="72.8255%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="72.5755%" y="645" width="0.1590%" height="15" fill="rgb(213,191,50)" fg:x="913" fg:w="2"/><text x="72.8255%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="72.5755%" y="629" width="0.1590%" height="15" fill="rgb(254,146,10)" fg:x="913" fg:w="2"/><text x="72.8255%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="72.6550%" y="613" width="0.0795%" height="15" fill="rgb(215,175,11)" fg:x="914" fg:w="1"/><text x="72.9050%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6550%" y="597" width="0.0795%" height="15" fill="rgb(207,49,7)" fg:x="914" fg:w="1"/><text x="72.9050%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="72.5755%" y="709" width="0.2385%" height="15" fill="rgb(234,144,29)" fg:x="913" fg:w="3"/><text x="72.8255%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="72.5755%" y="693" width="0.2385%" height="15" fill="rgb(213,222,48)" fg:x="913" fg:w="3"/><text x="72.8255%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="72.5755%" y="677" width="0.2385%" height="15" fill="rgb(222,8,6)" fg:x="913" fg:w="3"/><text x="72.8255%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="72.5755%" y="661" width="0.2385%" height="15" fill="rgb(221,114,49)" fg:x="913" fg:w="3"/><text x="72.8255%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.7345%" y="645" width="0.0795%" height="15" fill="rgb(250,140,42)" fg:x="915" fg:w="1"/><text x="72.9845%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.7345%" y="629" width="0.0795%" height="15" fill="rgb(250,150,27)" fg:x="915" fg:w="1"/><text x="72.9845%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7345%" y="613" width="0.0795%" height="15" fill="rgb(252,159,3)" fg:x="915" fg:w="1"/><text x="72.9845%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7345%" y="597" width="0.0795%" height="15" fill="rgb(241,182,3)" fg:x="915" fg:w="1"/><text x="72.9845%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7345%" y="581" width="0.0795%" height="15" fill="rgb(236,3,9)" fg:x="915" fg:w="1"/><text x="72.9845%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7345%" y="565" width="0.0795%" height="15" fill="rgb(223,227,51)" fg:x="915" fg:w="1"/><text x="72.9845%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7345%" y="549" width="0.0795%" height="15" fill="rgb(232,133,30)" fg:x="915" fg:w="1"/><text x="72.9845%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.7345%" y="533" width="0.0795%" height="15" fill="rgb(209,93,27)" fg:x="915" fg:w="1"/><text x="72.9845%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.7345%" y="517" width="0.0795%" height="15" fill="rgb(208,108,34)" fg:x="915" fg:w="1"/><text x="72.9845%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.7345%" y="501" width="0.0795%" height="15" fill="rgb(215,189,13)" fg:x="915" fg:w="1"/><text x="72.9845%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7345%" y="485" width="0.0795%" height="15" fill="rgb(206,88,23)" fg:x="915" fg:w="1"/><text x="72.9845%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7345%" y="469" width="0.0795%" height="15" fill="rgb(240,173,0)" fg:x="915" fg:w="1"/><text x="72.9845%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.7345%" y="453" width="0.0795%" height="15" fill="rgb(223,106,52)" fg:x="915" fg:w="1"/><text x="72.9845%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.7345%" y="437" width="0.0795%" height="15" fill="rgb(206,130,16)" fg:x="915" fg:w="1"/><text x="72.9845%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.7345%" y="421" width="0.0795%" height="15" fill="rgb(220,54,25)" fg:x="915" fg:w="1"/><text x="72.9845%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.7345%" y="405" width="0.0795%" height="15" fill="rgb(210,4,38)" fg:x="915" fg:w="1"/><text x="72.9845%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7345%" y="389" width="0.0795%" height="15" fill="rgb(238,94,39)" fg:x="915" fg:w="1"/><text x="72.9845%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="72.8140%" y="693" width="0.0795%" height="15" fill="rgb(234,124,34)" fg:x="916" fg:w="1"/><text x="73.0640%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.8140%" y="677" width="0.0795%" height="15" fill="rgb(221,91,40)" fg:x="916" fg:w="1"/><text x="73.0640%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.8140%" y="661" width="0.0795%" height="15" fill="rgb(246,53,28)" fg:x="916" fg:w="1"/><text x="73.0640%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.8935%" y="661" width="0.0795%" height="15" fill="rgb(229,109,7)" fg:x="917" fg:w="1"/><text x="73.1435%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.8935%" y="645" width="0.0795%" height="15" fill="rgb(249,117,8)" fg:x="917" fg:w="1"/><text x="73.1435%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="72.8935%" y="629" width="0.0795%" height="15" fill="rgb(210,181,1)" fg:x="917" fg:w="1"/><text x="73.1435%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.8935%" y="613" width="0.0795%" height="15" fill="rgb(211,66,1)" fg:x="917" fg:w="1"/><text x="73.1435%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8935%" y="597" width="0.0795%" height="15" fill="rgb(221,90,14)" fg:x="917" fg:w="1"/><text x="73.1435%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="72.8140%" y="709" width="0.2385%" height="15" fill="rgb(219,222,44)" fg:x="916" fg:w="3"/><text x="73.0640%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="72.8935%" y="693" width="0.1590%" height="15" fill="rgb(246,34,33)" fg:x="917" fg:w="2"/><text x="73.1435%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="72.8935%" y="677" width="0.1590%" height="15" fill="rgb(227,135,41)" fg:x="917" fg:w="2"/><text x="73.1435%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9730%" y="661" width="0.0795%" height="15" fill="rgb(226,15,14)" fg:x="918" fg:w="1"/><text x="73.2230%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (36 samples, 2.86%)</title><rect x="70.2703%" y="725" width="2.8617%" height="15" fill="rgb(236,148,47)" fg:x="884" fg:w="36"/><text x="70.5203%" y="735.50">pl..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.0525%" y="709" width="0.0795%" height="15" fill="rgb(233,162,52)" fg:x="919" fg:w="1"/><text x="73.3025%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="73.0525%" y="693" width="0.0795%" height="15" fill="rgb(244,35,28)" fg:x="919" fg:w="1"/><text x="73.3025%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.0525%" y="677" width="0.0795%" height="15" fill="rgb(205,121,10)" fg:x="919" fg:w="1"/><text x="73.3025%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.0525%" y="661" width="0.0795%" height="15" fill="rgb(250,58,18)" fg:x="919" fg:w="1"/><text x="73.3025%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.0525%" y="645" width="0.0795%" height="15" fill="rgb(216,37,13)" fg:x="919" fg:w="1"/><text x="73.3025%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.0525%" y="629" width="0.0795%" height="15" fill="rgb(221,215,42)" fg:x="919" fg:w="1"/><text x="73.3025%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0525%" y="613" width="0.0795%" height="15" fill="rgb(217,214,19)" fg:x="919" fg:w="1"/><text x="73.3025%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0525%" y="597" width="0.0795%" height="15" fill="rgb(233,139,13)" fg:x="919" fg:w="1"/><text x="73.3025%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0525%" y="581" width="0.0795%" height="15" fill="rgb(247,168,23)" fg:x="919" fg:w="1"/><text x="73.3025%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0525%" y="565" width="0.0795%" height="15" fill="rgb(207,202,1)" fg:x="919" fg:w="1"/><text x="73.3025%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0525%" y="549" width="0.0795%" height="15" fill="rgb(220,155,48)" fg:x="919" fg:w="1"/><text x="73.3025%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0525%" y="533" width="0.0795%" height="15" fill="rgb(250,43,26)" fg:x="919" fg:w="1"/><text x="73.3025%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0525%" y="517" width="0.0795%" height="15" fill="rgb(212,190,23)" fg:x="919" fg:w="1"/><text x="73.3025%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0525%" y="501" width="0.0795%" height="15" fill="rgb(216,39,24)" fg:x="919" fg:w="1"/><text x="73.3025%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0525%" y="485" width="0.0795%" height="15" fill="rgb(252,113,16)" fg:x="919" fg:w="1"/><text x="73.3025%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0525%" y="469" width="0.0795%" height="15" fill="rgb(208,113,19)" fg:x="919" fg:w="1"/><text x="73.3025%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0525%" y="453" width="0.0795%" height="15" fill="rgb(234,107,25)" fg:x="919" fg:w="1"/><text x="73.3025%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0525%" y="437" width="0.0795%" height="15" fill="rgb(234,217,51)" fg:x="919" fg:w="1"/><text x="73.3025%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0525%" y="421" width="0.0795%" height="15" fill="rgb(251,29,42)" fg:x="919" fg:w="1"/><text x="73.3025%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="73.1320%" y="725" width="0.0795%" height="15" fill="rgb(221,62,51)" fg:x="920" fg:w="1"/><text x="73.3820%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="73.1320%" y="709" width="0.0795%" height="15" fill="rgb(240,192,43)" fg:x="920" fg:w="1"/><text x="73.3820%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="73.1320%" y="693" width="0.0795%" height="15" fill="rgb(224,157,47)" fg:x="920" fg:w="1"/><text x="73.3820%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.2114%" y="693" width="0.0795%" height="15" fill="rgb(226,84,45)" fg:x="921" fg:w="1"/><text x="73.4614%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.2114%" y="677" width="0.0795%" height="15" fill="rgb(208,207,23)" fg:x="921" fg:w="1"/><text x="73.4614%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.2114%" y="661" width="0.0795%" height="15" fill="rgb(253,34,51)" fg:x="921" fg:w="1"/><text x="73.4614%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2114%" y="645" width="0.0795%" height="15" fill="rgb(227,26,34)" fg:x="921" fg:w="1"/><text x="73.4614%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.2909%" y="677" width="0.0795%" height="15" fill="rgb(245,75,19)" fg:x="922" fg:w="1"/><text x="73.5409%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.2909%" y="661" width="0.0795%" height="15" fill="rgb(250,191,31)" fg:x="922" fg:w="1"/><text x="73.5409%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2909%" y="645" width="0.0795%" height="15" fill="rgb(224,11,50)" fg:x="922" fg:w="1"/><text x="73.5409%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2909%" y="629" width="0.0795%" height="15" fill="rgb(231,171,7)" fg:x="922" fg:w="1"/><text x="73.5409%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.2909%" y="613" width="0.0795%" height="15" fill="rgb(252,214,10)" fg:x="922" fg:w="1"/><text x="73.5409%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2909%" y="597" width="0.0795%" height="15" fill="rgb(249,45,46)" fg:x="922" fg:w="1"/><text x="73.5409%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2909%" y="581" width="0.0795%" height="15" fill="rgb(240,173,7)" fg:x="922" fg:w="1"/><text x="73.5409%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2909%" y="565" width="0.0795%" height="15" fill="rgb(235,214,13)" fg:x="922" fg:w="1"/><text x="73.5409%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.2909%" y="549" width="0.0795%" height="15" fill="rgb(245,156,8)" fg:x="922" fg:w="1"/><text x="73.5409%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.3704%" y="645" width="0.0795%" height="15" fill="rgb(235,46,12)" fg:x="923" fg:w="1"/><text x="73.6204%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.3704%" y="629" width="0.0795%" height="15" fill="rgb(221,81,14)" fg:x="923" fg:w="1"/><text x="73.6204%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.3704%" y="613" width="0.0795%" height="15" fill="rgb(238,207,9)" fg:x="923" fg:w="1"/><text x="73.6204%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="73.3704%" y="597" width="0.0795%" height="15" fill="rgb(224,129,35)" fg:x="923" fg:w="1"/><text x="73.6204%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.4499%" y="645" width="0.0795%" height="15" fill="rgb(243,218,34)" fg:x="924" fg:w="1"/><text x="73.6999%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.48%)</title><rect x="73.2114%" y="725" width="0.4769%" height="15" fill="rgb(220,166,13)" fg:x="921" fg:w="6"/><text x="73.4614%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="73.2114%" y="709" width="0.4769%" height="15" fill="rgb(227,167,49)" fg:x="921" fg:w="6"/><text x="73.4614%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="73.2909%" y="693" width="0.3975%" height="15" fill="rgb(234,142,12)" fg:x="922" fg:w="5"/><text x="73.5409%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="73.3704%" y="677" width="0.3180%" height="15" fill="rgb(207,100,48)" fg:x="923" fg:w="4"/><text x="73.6204%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="73.3704%" y="661" width="0.3180%" height="15" fill="rgb(210,25,14)" fg:x="923" fg:w="4"/><text x="73.6204%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="73.5294%" y="645" width="0.1590%" height="15" fill="rgb(246,116,27)" fg:x="925" fg:w="2"/><text x="73.7794%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.6089%" y="629" width="0.0795%" height="15" fill="rgb(214,193,42)" fg:x="926" fg:w="1"/><text x="73.8589%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6089%" y="613" width="0.0795%" height="15" fill="rgb(214,122,8)" fg:x="926" fg:w="1"/><text x="73.8589%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="73.6884%" y="629" width="0.1590%" height="15" fill="rgb(244,173,18)" fg:x="927" fg:w="2"/><text x="73.9384%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.6884%" y="613" width="0.1590%" height="15" fill="rgb(232,68,19)" fg:x="927" fg:w="2"/><text x="73.9384%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.6884%" y="597" width="0.1590%" height="15" fill="rgb(236,224,1)" fg:x="927" fg:w="2"/><text x="73.9384%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="73.6884%" y="581" width="0.1590%" height="15" fill="rgb(240,11,8)" fg:x="927" fg:w="2"/><text x="73.9384%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.6884%" y="565" width="0.1590%" height="15" fill="rgb(244,159,20)" fg:x="927" fg:w="2"/><text x="73.9384%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="73.6884%" y="661" width="0.2385%" height="15" fill="rgb(240,223,54)" fg:x="927" fg:w="3"/><text x="73.9384%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="73.6884%" y="645" width="0.2385%" height="15" fill="rgb(237,146,5)" fg:x="927" fg:w="3"/><text x="73.9384%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="73.8474%" y="629" width="0.0795%" height="15" fill="rgb(218,221,32)" fg:x="929" fg:w="1"/><text x="74.0974%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.8474%" y="613" width="0.0795%" height="15" fill="rgb(244,96,26)" fg:x="929" fg:w="1"/><text x="74.0974%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.8474%" y="597" width="0.0795%" height="15" fill="rgb(245,184,37)" fg:x="929" fg:w="1"/><text x="74.0974%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="73.9269%" y="661" width="0.1590%" height="15" fill="rgb(248,91,47)" fg:x="930" fg:w="2"/><text x="74.1769%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0064%" y="645" width="0.0795%" height="15" fill="rgb(243,199,8)" fg:x="931" fg:w="1"/><text x="74.2564%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.0064%" y="629" width="0.0795%" height="15" fill="rgb(249,12,15)" fg:x="931" fg:w="1"/><text x="74.2564%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="73.6884%" y="677" width="0.4769%" height="15" fill="rgb(245,97,12)" fg:x="927" fg:w="6"/><text x="73.9384%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0859%" y="661" width="0.0795%" height="15" fill="rgb(244,61,1)" fg:x="932" fg:w="1"/><text x="74.3359%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.0859%" y="645" width="0.0795%" height="15" fill="rgb(222,194,10)" fg:x="932" fg:w="1"/><text x="74.3359%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="74.0859%" y="629" width="0.0795%" height="15" fill="rgb(226,178,8)" fg:x="932" fg:w="1"/><text x="74.3359%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="74.0859%" y="613" width="0.0795%" height="15" fill="rgb(241,32,34)" fg:x="932" fg:w="1"/><text x="74.3359%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.0859%" y="597" width="0.0795%" height="15" fill="rgb(254,26,6)" fg:x="932" fg:w="1"/><text x="74.3359%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0859%" y="581" width="0.0795%" height="15" fill="rgb(249,71,11)" fg:x="932" fg:w="1"/><text x="74.3359%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.0859%" y="565" width="0.0795%" height="15" fill="rgb(232,170,27)" fg:x="932" fg:w="1"/><text x="74.3359%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0859%" y="549" width="0.0795%" height="15" fill="rgb(214,223,17)" fg:x="932" fg:w="1"/><text x="74.3359%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0859%" y="533" width="0.0795%" height="15" fill="rgb(250,18,15)" fg:x="932" fg:w="1"/><text x="74.3359%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="73.6884%" y="693" width="0.5564%" height="15" fill="rgb(212,153,51)" fg:x="927" fg:w="7"/><text x="73.9384%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="74.1653%" y="677" width="0.0795%" height="15" fill="rgb(219,194,12)" fg:x="933" fg:w="1"/><text x="74.4153%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (68 samples, 5.41%)</title><rect x="68.9189%" y="741" width="5.4054%" height="15" fill="rgb(212,58,17)" fg:x="867" fg:w="68"/><text x="69.1689%" y="751.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (8 samples, 0.64%)</title><rect x="73.6884%" y="725" width="0.6359%" height="15" fill="rgb(254,5,10)" fg:x="927" fg:w="8"/><text x="73.9384%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="73.6884%" y="709" width="0.6359%" height="15" fill="rgb(246,91,7)" fg:x="927" fg:w="8"/><text x="73.9384%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2448%" y="693" width="0.0795%" height="15" fill="rgb(218,108,49)" fg:x="934" fg:w="1"/><text x="74.4948%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.2448%" y="677" width="0.0795%" height="15" fill="rgb(238,123,20)" fg:x="934" fg:w="1"/><text x="74.4948%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="74.3243%" y="741" width="0.1590%" height="15" fill="rgb(231,69,23)" fg:x="935" fg:w="2"/><text x="74.5743%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="74.3243%" y="725" width="0.1590%" height="15" fill="rgb(230,209,3)" fg:x="935" fg:w="2"/><text x="74.5743%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="74.3243%" y="709" width="0.1590%" height="15" fill="rgb(231,19,0)" fg:x="935" fg:w="2"/><text x="74.5743%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.3243%" y="693" width="0.1590%" height="15" fill="rgb(226,192,25)" fg:x="935" fg:w="2"/><text x="74.5743%" y="703.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="74.3243%" y="677" width="0.1590%" height="15" fill="rgb(223,175,53)" fg:x="935" fg:w="2"/><text x="74.5743%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="74.6423%" y="725" width="0.0795%" height="15" fill="rgb(248,35,51)" fg:x="939" fg:w="1"/><text x="74.8923%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6423%" y="709" width="0.0795%" height="15" fill="rgb(230,37,26)" fg:x="939" fg:w="1"/><text x="74.8923%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6423%" y="693" width="0.0795%" height="15" fill="rgb(206,120,22)" fg:x="939" fg:w="1"/><text x="74.8923%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.6423%" y="677" width="0.0795%" height="15" fill="rgb(207,165,28)" fg:x="939" fg:w="1"/><text x="74.8923%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.6423%" y="661" width="0.0795%" height="15" fill="rgb(226,23,46)" fg:x="939" fg:w="1"/><text x="74.8923%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.6423%" y="645" width="0.0795%" height="15" fill="rgb(208,130,44)" fg:x="939" fg:w="1"/><text x="74.8923%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.6423%" y="629" width="0.0795%" height="15" fill="rgb(231,67,8)" fg:x="939" fg:w="1"/><text x="74.8923%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.6423%" y="613" width="0.0795%" height="15" fill="rgb(205,183,22)" fg:x="939" fg:w="1"/><text x="74.8923%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.6423%" y="597" width="0.0795%" height="15" fill="rgb(224,47,9)" fg:x="939" fg:w="1"/><text x="74.8923%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.6423%" y="581" width="0.0795%" height="15" fill="rgb(250,183,49)" fg:x="939" fg:w="1"/><text x="74.8923%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.6423%" y="565" width="0.0795%" height="15" fill="rgb(220,151,39)" fg:x="939" fg:w="1"/><text x="74.8923%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.6423%" y="549" width="0.0795%" height="15" fill="rgb(220,118,20)" fg:x="939" fg:w="1"/><text x="74.8923%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6423%" y="533" width="0.0795%" height="15" fill="rgb(231,65,51)" fg:x="939" fg:w="1"/><text x="74.8923%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.7218%" y="693" width="0.0795%" height="15" fill="rgb(253,125,37)" fg:x="940" fg:w="1"/><text x="74.9718%" y="703.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.8013%" y="693" width="0.0795%" height="15" fill="rgb(232,102,6)" fg:x="941" fg:w="1"/><text x="75.0513%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="74.8013%" y="677" width="0.0795%" height="15" fill="rgb(251,105,13)" fg:x="941" fg:w="1"/><text x="75.0513%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="74.8013%" y="661" width="0.0795%" height="15" fill="rgb(222,179,29)" fg:x="941" fg:w="1"/><text x="75.0513%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8013%" y="645" width="0.0795%" height="15" fill="rgb(229,180,53)" fg:x="941" fg:w="1"/><text x="75.0513%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.8013%" y="629" width="0.0795%" height="15" fill="rgb(238,104,13)" fg:x="941" fg:w="1"/><text x="75.0513%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.8013%" y="613" width="0.0795%" height="15" fill="rgb(210,130,5)" fg:x="941" fg:w="1"/><text x="75.0513%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.8013%" y="597" width="0.0795%" height="15" fill="rgb(233,87,49)" fg:x="941" fg:w="1"/><text x="75.0513%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.8013%" y="581" width="0.0795%" height="15" fill="rgb(243,34,9)" fg:x="941" fg:w="1"/><text x="75.0513%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8013%" y="565" width="0.0795%" height="15" fill="rgb(235,225,10)" fg:x="941" fg:w="1"/><text x="75.0513%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.8013%" y="549" width="0.0795%" height="15" fill="rgb(212,0,30)" fg:x="941" fg:w="1"/><text x="75.0513%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.8013%" y="533" width="0.0795%" height="15" fill="rgb(211,177,0)" fg:x="941" fg:w="1"/><text x="75.0513%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.8013%" y="517" width="0.0795%" height="15" fill="rgb(225,220,11)" fg:x="941" fg:w="1"/><text x="75.0513%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.8013%" y="501" width="0.0795%" height="15" fill="rgb(215,10,13)" fg:x="941" fg:w="1"/><text x="75.0513%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.8013%" y="485" width="0.0795%" height="15" fill="rgb(240,177,14)" fg:x="941" fg:w="1"/><text x="75.0513%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8013%" y="469" width="0.0795%" height="15" fill="rgb(243,7,39)" fg:x="941" fg:w="1"/><text x="75.0513%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.9603%" y="629" width="0.0795%" height="15" fill="rgb(212,99,0)" fg:x="943" fg:w="1"/><text x="75.2103%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.9603%" y="613" width="0.0795%" height="15" fill="rgb(225,162,48)" fg:x="943" fg:w="1"/><text x="75.2103%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.0397%" y="613" width="0.1590%" height="15" fill="rgb(246,16,25)" fg:x="944" fg:w="2"/><text x="75.2897%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.1192%" y="597" width="0.0795%" height="15" fill="rgb(220,150,2)" fg:x="945" fg:w="1"/><text x="75.3692%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.1987%" y="597" width="0.0795%" height="15" fill="rgb(237,113,11)" fg:x="946" fg:w="1"/><text x="75.4487%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3577%" y="581" width="0.0795%" height="15" fill="rgb(236,70,20)" fg:x="948" fg:w="1"/><text x="75.6077%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.3577%" y="565" width="0.0795%" height="15" fill="rgb(234,94,7)" fg:x="948" fg:w="1"/><text x="75.6077%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.3577%" y="549" width="0.0795%" height="15" fill="rgb(250,221,0)" fg:x="948" fg:w="1"/><text x="75.6077%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.3577%" y="533" width="0.0795%" height="15" fill="rgb(245,149,46)" fg:x="948" fg:w="1"/><text x="75.6077%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.3577%" y="517" width="0.0795%" height="15" fill="rgb(215,37,27)" fg:x="948" fg:w="1"/><text x="75.6077%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.3577%" y="501" width="0.0795%" height="15" fill="rgb(232,65,3)" fg:x="948" fg:w="1"/><text x="75.6077%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.3577%" y="485" width="0.0795%" height="15" fill="rgb(214,2,16)" fg:x="948" fg:w="1"/><text x="75.6077%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.3577%" y="469" width="0.0795%" height="15" fill="rgb(227,131,50)" fg:x="948" fg:w="1"/><text x="75.6077%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="75.1987%" y="613" width="0.3180%" height="15" fill="rgb(247,131,45)" fg:x="946" fg:w="4"/><text x="75.4487%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.2782%" y="597" width="0.2385%" height="15" fill="rgb(215,97,47)" fg:x="947" fg:w="3"/><text x="75.5282%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.4372%" y="581" width="0.0795%" height="15" fill="rgb(233,143,12)" fg:x="949" fg:w="1"/><text x="75.6872%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.4372%" y="565" width="0.0795%" height="15" fill="rgb(222,57,17)" fg:x="949" fg:w="1"/><text x="75.6872%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="75.4372%" y="549" width="0.0795%" height="15" fill="rgb(214,119,38)" fg:x="949" fg:w="1"/><text x="75.6872%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="74.9603%" y="645" width="0.6359%" height="15" fill="rgb(217,28,47)" fg:x="943" fg:w="8"/><text x="75.2103%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="75.0397%" y="629" width="0.5564%" height="15" fill="rgb(231,14,52)" fg:x="944" fg:w="7"/><text x="75.2897%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.5167%" y="613" width="0.0795%" height="15" fill="rgb(220,158,18)" fg:x="950" fg:w="1"/><text x="75.7667%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5962%" y="613" width="0.0795%" height="15" fill="rgb(222,143,46)" fg:x="951" fg:w="1"/><text x="75.8462%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6757%" y="565" width="0.0795%" height="15" fill="rgb(227,165,5)" fg:x="952" fg:w="1"/><text x="75.9257%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.5962%" y="645" width="0.2385%" height="15" fill="rgb(216,222,49)" fg:x="951" fg:w="3"/><text x="75.8462%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.5962%" y="629" width="0.2385%" height="15" fill="rgb(238,73,39)" fg:x="951" fg:w="3"/><text x="75.8462%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.6757%" y="613" width="0.1590%" height="15" fill="rgb(252,115,9)" fg:x="952" fg:w="2"/><text x="75.9257%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.6757%" y="597" width="0.1590%" height="15" fill="rgb(238,202,4)" fg:x="952" fg:w="2"/><text x="75.9257%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.6757%" y="581" width="0.1590%" height="15" fill="rgb(252,153,44)" fg:x="952" fg:w="2"/><text x="75.9257%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7552%" y="565" width="0.0795%" height="15" fill="rgb(235,128,27)" fg:x="953" fg:w="1"/><text x="76.0052%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.8347%" y="597" width="0.0795%" height="15" fill="rgb(221,121,47)" fg:x="954" fg:w="1"/><text x="76.0847%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8347%" y="581" width="0.0795%" height="15" fill="rgb(247,211,47)" fg:x="954" fg:w="1"/><text x="76.0847%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.9141%" y="581" width="0.0795%" height="15" fill="rgb(252,47,49)" fg:x="955" fg:w="1"/><text x="76.1641%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1526%" y="549" width="0.0795%" height="15" fill="rgb(219,119,53)" fg:x="958" fg:w="1"/><text x="76.4026%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="75.8347%" y="613" width="0.4769%" height="15" fill="rgb(243,165,53)" fg:x="954" fg:w="6"/><text x="76.0847%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="75.9141%" y="597" width="0.3975%" height="15" fill="rgb(230,12,35)" fg:x="955" fg:w="5"/><text x="76.1641%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.9936%" y="581" width="0.3180%" height="15" fill="rgb(239,57,49)" fg:x="956" fg:w="4"/><text x="76.2436%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.9936%" y="565" width="0.3180%" height="15" fill="rgb(231,154,7)" fg:x="956" fg:w="4"/><text x="76.2436%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2321%" y="549" width="0.0795%" height="15" fill="rgb(248,81,34)" fg:x="959" fg:w="1"/><text x="76.4821%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2321%" y="533" width="0.0795%" height="15" fill="rgb(247,9,5)" fg:x="959" fg:w="1"/><text x="76.4821%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (10 samples, 0.79%)</title><rect x="75.8347%" y="629" width="0.7949%" height="15" fill="rgb(228,172,27)" fg:x="954" fg:w="10"/><text x="76.0847%" y="639.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="76.3116%" y="613" width="0.3180%" height="15" fill="rgb(230,57,44)" fg:x="960" fg:w="4"/><text x="76.5616%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="76.3116%" y="597" width="0.3180%" height="15" fill="rgb(249,35,22)" fg:x="960" fg:w="4"/><text x="76.5616%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="76.3911%" y="581" width="0.2385%" height="15" fill="rgb(250,137,27)" fg:x="961" fg:w="3"/><text x="76.6411%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="76.3911%" y="565" width="0.2385%" height="15" fill="rgb(251,57,31)" fg:x="961" fg:w="3"/><text x="76.6411%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="76.5501%" y="549" width="0.0795%" height="15" fill="rgb(238,60,0)" fg:x="963" fg:w="1"/><text x="76.8001%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.6296%" y="613" width="0.0795%" height="15" fill="rgb(242,185,39)" fg:x="964" fg:w="1"/><text x="76.8796%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.8680%" y="597" width="0.1590%" height="15" fill="rgb(240,63,43)" fg:x="967" fg:w="2"/><text x="77.1180%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.9475%" y="581" width="0.0795%" height="15" fill="rgb(236,155,6)" fg:x="968" fg:w="1"/><text x="77.1975%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0270%" y="597" width="0.0795%" height="15" fill="rgb(215,11,29)" fg:x="969" fg:w="1"/><text x="77.2770%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1065%" y="597" width="0.0795%" height="15" fill="rgb(228,180,48)" fg:x="970" fg:w="1"/><text x="77.3565%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.1065%" y="581" width="0.0795%" height="15" fill="rgb(241,102,12)" fg:x="970" fg:w="1"/><text x="77.3565%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1065%" y="565" width="0.0795%" height="15" fill="rgb(246,213,4)" fg:x="970" fg:w="1"/><text x="77.3565%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.4245%" y="549" width="0.0795%" height="15" fill="rgb(218,134,35)" fg:x="974" fg:w="1"/><text x="77.6745%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4245%" y="533" width="0.0795%" height="15" fill="rgb(251,117,35)" fg:x="974" fg:w="1"/><text x="77.6745%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.4245%" y="517" width="0.0795%" height="15" fill="rgb(206,156,45)" fg:x="974" fg:w="1"/><text x="77.6745%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4245%" y="501" width="0.0795%" height="15" fill="rgb(218,52,27)" fg:x="974" fg:w="1"/><text x="77.6745%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.4245%" y="485" width="0.0795%" height="15" fill="rgb(238,83,36)" fg:x="974" fg:w="1"/><text x="77.6745%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4245%" y="469" width="0.0795%" height="15" fill="rgb(218,53,43)" fg:x="974" fg:w="1"/><text x="77.6745%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.4245%" y="453" width="0.0795%" height="15" fill="rgb(239,54,39)" fg:x="974" fg:w="1"/><text x="77.6745%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="77.3450%" y="581" width="0.4769%" height="15" fill="rgb(212,198,13)" fg:x="973" fg:w="6"/><text x="77.5950%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="77.3450%" y="565" width="0.4769%" height="15" fill="rgb(234,54,46)" fg:x="973" fg:w="6"/><text x="77.5950%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="77.5040%" y="549" width="0.3180%" height="15" fill="rgb(217,120,7)" fg:x="975" fg:w="4"/><text x="77.7540%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="77.5835%" y="533" width="0.2385%" height="15" fill="rgb(246,39,15)" fg:x="976" fg:w="3"/><text x="77.8335%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.7424%" y="517" width="0.0795%" height="15" fill="rgb(242,143,31)" fg:x="978" fg:w="1"/><text x="77.9924%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.27%)</title><rect x="76.6296%" y="629" width="1.2719%" height="15" fill="rgb(252,60,24)" fg:x="964" fg:w="16"/><text x="76.8796%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.19%)</title><rect x="76.7091%" y="613" width="1.1924%" height="15" fill="rgb(249,220,7)" fg:x="965" fg:w="15"/><text x="76.9591%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="77.1860%" y="597" width="0.7154%" height="15" fill="rgb(236,67,13)" fg:x="971" fg:w="9"/><text x="77.4360%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8219%" y="581" width="0.0795%" height="15" fill="rgb(210,62,39)" fg:x="979" fg:w="1"/><text x="78.0719%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9014%" y="533" width="0.0795%" height="15" fill="rgb(219,122,53)" fg:x="980" fg:w="1"/><text x="78.1514%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9014%" y="517" width="0.0795%" height="15" fill="rgb(218,87,25)" fg:x="980" fg:w="1"/><text x="78.1514%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9014%" y="501" width="0.0795%" height="15" fill="rgb(234,179,48)" fg:x="980" fg:w="1"/><text x="78.1514%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9014%" y="485" width="0.0795%" height="15" fill="rgb(248,90,0)" fg:x="980" fg:w="1"/><text x="78.1514%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9014%" y="469" width="0.0795%" height="15" fill="rgb(207,228,37)" fg:x="980" fg:w="1"/><text x="78.1514%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9014%" y="453" width="0.0795%" height="15" fill="rgb(235,214,15)" fg:x="980" fg:w="1"/><text x="78.1514%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9014%" y="437" width="0.0795%" height="15" fill="rgb(210,144,39)" fg:x="980" fg:w="1"/><text x="78.1514%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.9014%" y="421" width="0.0795%" height="15" fill="rgb(222,67,41)" fg:x="980" fg:w="1"/><text x="78.1514%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.9014%" y="405" width="0.0795%" height="15" fill="rgb(205,35,37)" fg:x="980" fg:w="1"/><text x="78.1514%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9014%" y="389" width="0.0795%" height="15" fill="rgb(216,125,40)" fg:x="980" fg:w="1"/><text x="78.1514%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9014%" y="373" width="0.0795%" height="15" fill="rgb(228,227,20)" fg:x="980" fg:w="1"/><text x="78.1514%" y="383.50"></text></g><g><title>engine::session::Session::close (45 samples, 3.58%)</title><rect x="74.4833%" y="741" width="3.5771%" height="15" fill="rgb(242,173,45)" fg:x="937" fg:w="45"/><text x="74.7333%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (42 samples, 3.34%)</title><rect x="74.7218%" y="725" width="3.3386%" height="15" fill="rgb(215,79,24)" fg:x="940" fg:w="42"/><text x="74.9718%" y="735.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.34%)</title><rect x="74.7218%" y="709" width="3.3386%" height="15" fill="rgb(238,164,38)" fg:x="940" fg:w="42"/><text x="74.9718%" y="719.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.18%)</title><rect x="74.8808%" y="693" width="3.1797%" height="15" fill="rgb(245,196,38)" fg:x="942" fg:w="40"/><text x="75.1308%" y="703.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.18%)</title><rect x="74.8808%" y="677" width="3.1797%" height="15" fill="rgb(231,217,29)" fg:x="942" fg:w="40"/><text x="75.1308%" y="687.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.18%)</title><rect x="74.8808%" y="661" width="3.1797%" height="15" fill="rgb(245,6,4)" fg:x="942" fg:w="40"/><text x="75.1308%" y="671.50">eng..</text></g><g><title>kernel::model::any_entity_changes (28 samples, 2.23%)</title><rect x="75.8347%" y="645" width="2.2258%" height="15" fill="rgb(214,76,49)" fg:x="954" fg:w="28"/><text x="76.0847%" y="655.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="77.9014%" y="629" width="0.1590%" height="15" fill="rgb(205,96,12)" fg:x="980" fg:w="2"/><text x="78.1514%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="77.9014%" y="613" width="0.1590%" height="15" fill="rgb(243,131,4)" fg:x="980" fg:w="2"/><text x="78.1514%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.9014%" y="597" width="0.1590%" height="15" fill="rgb(214,114,4)" fg:x="980" fg:w="2"/><text x="78.1514%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.9014%" y="581" width="0.1590%" height="15" fill="rgb(234,215,15)" fg:x="980" fg:w="2"/><text x="78.1514%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.9014%" y="565" width="0.1590%" height="15" fill="rgb(250,216,45)" fg:x="980" fg:w="2"/><text x="78.1514%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.9014%" y="549" width="0.1590%" height="15" fill="rgb(236,128,4)" fg:x="980" fg:w="2"/><text x="78.1514%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.9809%" y="533" width="0.0795%" height="15" fill="rgb(234,50,33)" fg:x="981" fg:w="1"/><text x="78.2309%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.1399%" y="709" width="0.0795%" height="15" fill="rgb(253,131,37)" fg:x="983" fg:w="1"/><text x="78.3899%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="78.1399%" y="693" width="0.0795%" height="15" fill="rgb(218,55,27)" fg:x="983" fg:w="1"/><text x="78.3899%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.1399%" y="677" width="0.0795%" height="15" fill="rgb(241,220,28)" fg:x="983" fg:w="1"/><text x="78.3899%" y="687.50"></text></g><g><title>&lt;plugins_rune::parser::EditActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="78.1399%" y="661" width="0.0795%" height="15" fill="rgb(241,90,48)" fg:x="983" fg:w="1"/><text x="78.3899%" y="671.50"></text></g><g><title>&lt;kernel::model::base::DomainError as core::convert::From&lt;anyhow::Error&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.1399%" y="645" width="0.0795%" height="15" fill="rgb(216,43,37)" fg:x="983" fg:w="1"/><text x="78.3899%" y="655.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="78.2989%" y="677" width="0.0795%" height="15" fill="rgb(207,173,9)" fg:x="985" fg:w="1"/><text x="78.5489%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="78.2989%" y="661" width="0.0795%" height="15" fill="rgb(240,126,30)" fg:x="985" fg:w="1"/><text x="78.5489%" y="671.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="78.2989%" y="645" width="0.0795%" height="15" fill="rgb(228,178,53)" fg:x="985" fg:w="1"/><text x="78.5489%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.5374%" y="533" width="0.0795%" height="15" fill="rgb(217,33,4)" fg:x="988" fg:w="1"/><text x="78.7874%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="78.4579%" y="565" width="0.2385%" height="15" fill="rgb(206,124,34)" fg:x="987" fg:w="3"/><text x="78.7079%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="78.4579%" y="549" width="0.2385%" height="15" fill="rgb(208,122,53)" fg:x="987" fg:w="3"/><text x="78.7079%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.6169%" y="533" width="0.0795%" height="15" fill="rgb(215,202,26)" fg:x="989" fg:w="1"/><text x="78.8669%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="78.6963%" y="517" width="0.0795%" height="15" fill="rgb(232,198,31)" fg:x="990" fg:w="1"/><text x="78.9463%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.6963%" y="501" width="0.0795%" height="15" fill="rgb(222,23,35)" fg:x="990" fg:w="1"/><text x="78.9463%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.6963%" y="485" width="0.0795%" height="15" fill="rgb(242,27,53)" fg:x="990" fg:w="1"/><text x="78.9463%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.6963%" y="469" width="0.0795%" height="15" fill="rgb(210,216,42)" fg:x="990" fg:w="1"/><text x="78.9463%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.6963%" y="453" width="0.0795%" height="15" fill="rgb(234,39,38)" fg:x="990" fg:w="1"/><text x="78.9463%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.6963%" y="437" width="0.0795%" height="15" fill="rgb(235,126,54)" fg:x="990" fg:w="1"/><text x="78.9463%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.6963%" y="421" width="0.0795%" height="15" fill="rgb(235,150,33)" fg:x="990" fg:w="1"/><text x="78.9463%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.6963%" y="405" width="0.0795%" height="15" fill="rgb(249,49,53)" fg:x="990" fg:w="1"/><text x="78.9463%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.6963%" y="389" width="0.0795%" height="15" fill="rgb(238,60,50)" fg:x="990" fg:w="1"/><text x="78.9463%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.6963%" y="373" width="0.0795%" height="15" fill="rgb(210,5,2)" fg:x="990" fg:w="1"/><text x="78.9463%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.6963%" y="357" width="0.0795%" height="15" fill="rgb(214,207,24)" fg:x="990" fg:w="1"/><text x="78.9463%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.6963%" y="341" width="0.0795%" height="15" fill="rgb(228,173,2)" fg:x="990" fg:w="1"/><text x="78.9463%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6963%" y="325" width="0.0795%" height="15" fill="rgb(244,26,8)" fg:x="990" fg:w="1"/><text x="78.9463%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7758%" y="501" width="0.0795%" height="15" fill="rgb(249,153,35)" fg:x="991" fg:w="1"/><text x="79.0258%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7758%" y="485" width="0.0795%" height="15" fill="rgb(221,215,40)" fg:x="991" fg:w="1"/><text x="79.0258%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.7758%" y="469" width="0.0795%" height="15" fill="rgb(238,106,35)" fg:x="991" fg:w="1"/><text x="79.0258%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7758%" y="453" width="0.0795%" height="15" fill="rgb(207,195,21)" fg:x="991" fg:w="1"/><text x="79.0258%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7758%" y="437" width="0.0795%" height="15" fill="rgb(205,43,29)" fg:x="991" fg:w="1"/><text x="79.0258%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.7758%" y="421" width="0.0795%" height="15" fill="rgb(236,35,21)" fg:x="991" fg:w="1"/><text x="79.0258%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.7758%" y="405" width="0.0795%" height="15" fill="rgb(244,74,8)" fg:x="991" fg:w="1"/><text x="79.0258%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.7758%" y="389" width="0.0795%" height="15" fill="rgb(241,229,7)" fg:x="991" fg:w="1"/><text x="79.0258%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.7758%" y="373" width="0.0795%" height="15" fill="rgb(212,223,25)" fg:x="991" fg:w="1"/><text x="79.0258%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.7758%" y="357" width="0.0795%" height="15" fill="rgb(234,58,53)" fg:x="991" fg:w="1"/><text x="79.0258%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.7758%" y="341" width="0.0795%" height="15" fill="rgb(244,36,1)" fg:x="991" fg:w="1"/><text x="79.0258%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.7758%" y="325" width="0.0795%" height="15" fill="rgb(222,40,54)" fg:x="991" fg:w="1"/><text x="79.0258%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.7758%" y="309" width="0.0795%" height="15" fill="rgb(210,207,39)" fg:x="991" fg:w="1"/><text x="79.0258%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.7758%" y="293" width="0.0795%" height="15" fill="rgb(234,52,14)" fg:x="991" fg:w="1"/><text x="79.0258%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7758%" y="277" width="0.0795%" height="15" fill="rgb(239,108,46)" fg:x="991" fg:w="1"/><text x="79.0258%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="78.8553%" y="501" width="0.0795%" height="15" fill="rgb(252,223,5)" fg:x="992" fg:w="1"/><text x="79.1053%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.8553%" y="485" width="0.0795%" height="15" fill="rgb(227,181,11)" fg:x="992" fg:w="1"/><text x="79.1053%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="78.9348%" y="501" width="0.0795%" height="15" fill="rgb(248,126,40)" fg:x="993" fg:w="1"/><text x="79.1848%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.9348%" y="485" width="0.0795%" height="15" fill="rgb(243,1,18)" fg:x="993" fg:w="1"/><text x="79.1848%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9348%" y="469" width="0.0795%" height="15" fill="rgb(214,145,23)" fg:x="993" fg:w="1"/><text x="79.1848%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.9348%" y="453" width="0.0795%" height="15" fill="rgb(241,218,11)" fg:x="993" fg:w="1"/><text x="79.1848%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9348%" y="437" width="0.0795%" height="15" fill="rgb(214,219,24)" fg:x="993" fg:w="1"/><text x="79.1848%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.9348%" y="421" width="0.0795%" height="15" fill="rgb(235,32,7)" fg:x="993" fg:w="1"/><text x="79.1848%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.9348%" y="405" width="0.0795%" height="15" fill="rgb(227,121,28)" fg:x="993" fg:w="1"/><text x="79.1848%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9348%" y="389" width="0.0795%" height="15" fill="rgb(216,129,49)" fg:x="993" fg:w="1"/><text x="79.1848%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.9348%" y="373" width="0.0795%" height="15" fill="rgb(207,194,50)" fg:x="993" fg:w="1"/><text x="79.1848%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9348%" y="357" width="0.0795%" height="15" fill="rgb(207,4,18)" fg:x="993" fg:w="1"/><text x="79.1848%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.9348%" y="341" width="0.0795%" height="15" fill="rgb(213,50,30)" fg:x="993" fg:w="1"/><text x="79.1848%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9348%" y="325" width="0.0795%" height="15" fill="rgb(208,77,22)" fg:x="993" fg:w="1"/><text x="79.1848%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="78.9348%" y="309" width="0.0795%" height="15" fill="rgb(244,204,34)" fg:x="993" fg:w="1"/><text x="79.1848%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (8 samples, 0.64%)</title><rect x="78.4579%" y="597" width="0.6359%" height="15" fill="rgb(230,20,17)" fg:x="987" fg:w="8"/><text x="78.7079%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (8 samples, 0.64%)</title><rect x="78.4579%" y="581" width="0.6359%" height="15" fill="rgb(237,83,15)" fg:x="987" fg:w="8"/><text x="78.7079%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="78.6963%" y="565" width="0.3975%" height="15" fill="rgb(221,109,25)" fg:x="990" fg:w="5"/><text x="78.9463%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="78.6963%" y="549" width="0.3975%" height="15" fill="rgb(205,194,52)" fg:x="990" fg:w="5"/><text x="78.9463%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="78.6963%" y="533" width="0.3975%" height="15" fill="rgb(244,173,54)" fg:x="990" fg:w="5"/><text x="78.9463%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="78.7758%" y="517" width="0.3180%" height="15" fill="rgb(227,181,18)" fg:x="991" fg:w="4"/><text x="79.0258%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="79.0143%" y="501" width="0.0795%" height="15" fill="rgb(238,36,30)" fg:x="994" fg:w="1"/><text x="79.2643%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="79.0143%" y="485" width="0.0795%" height="15" fill="rgb(254,85,0)" fg:x="994" fg:w="1"/><text x="79.2643%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.0143%" y="469" width="0.0795%" height="15" fill="rgb(247,63,33)" fg:x="994" fg:w="1"/><text x="79.2643%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0143%" y="453" width="0.0795%" height="15" fill="rgb(220,7,54)" fg:x="994" fg:w="1"/><text x="79.2643%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.0143%" y="437" width="0.0795%" height="15" fill="rgb(238,227,21)" fg:x="994" fg:w="1"/><text x="79.2643%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0143%" y="421" width="0.0795%" height="15" fill="rgb(237,29,31)" fg:x="994" fg:w="1"/><text x="79.2643%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.0143%" y="405" width="0.0795%" height="15" fill="rgb(211,21,50)" fg:x="994" fg:w="1"/><text x="79.2643%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0143%" y="389" width="0.0795%" height="15" fill="rgb(239,119,2)" fg:x="994" fg:w="1"/><text x="79.2643%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.0143%" y="373" width="0.0795%" height="15" fill="rgb(250,2,39)" fg:x="994" fg:w="1"/><text x="79.2643%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2528%" y="389" width="0.0795%" height="15" fill="rgb(244,46,53)" fg:x="997" fg:w="1"/><text x="79.5028%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3323%" y="357" width="0.0795%" height="15" fill="rgb(209,21,19)" fg:x="998" fg:w="1"/><text x="79.5823%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.4118%" y="357" width="0.1590%" height="15" fill="rgb(236,145,4)" fg:x="999" fg:w="2"/><text x="79.6618%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4913%" y="341" width="0.0795%" height="15" fill="rgb(220,133,36)" fg:x="1000" fg:w="1"/><text x="79.7413%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4913%" y="325" width="0.0795%" height="15" fill="rgb(244,18,3)" fg:x="1000" fg:w="1"/><text x="79.7413%" y="335.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="79.2528%" y="405" width="0.3975%" height="15" fill="rgb(232,171,48)" fg:x="997" fg:w="5"/><text x="79.5028%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="79.3323%" y="389" width="0.3180%" height="15" fill="rgb(223,223,53)" fg:x="998" fg:w="4"/><text x="79.5823%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="79.3323%" y="373" width="0.3180%" height="15" fill="rgb(246,92,13)" fg:x="998" fg:w="4"/><text x="79.5823%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.5707%" y="357" width="0.0795%" height="15" fill="rgb(229,171,10)" fg:x="1001" fg:w="1"/><text x="79.8207%" y="367.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (6 samples, 0.48%)</title><rect x="79.2528%" y="421" width="0.4769%" height="15" fill="rgb(213,131,26)" fg:x="997" fg:w="6"/><text x="79.5028%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="79.6502%" y="405" width="0.0795%" height="15" fill="rgb(242,87,54)" fg:x="1002" fg:w="1"/><text x="79.9002%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.6502%" y="389" width="0.0795%" height="15" fill="rgb(237,21,35)" fg:x="1002" fg:w="1"/><text x="79.9002%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6502%" y="373" width="0.0795%" height="15" fill="rgb(253,13,47)" fg:x="1002" fg:w="1"/><text x="79.9002%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0477%" y="357" width="0.0795%" height="15" fill="rgb(215,122,49)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0477%" y="341" width="0.0795%" height="15" fill="rgb(209,179,30)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0477%" y="325" width="0.0795%" height="15" fill="rgb(235,100,24)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.0477%" y="309" width="0.0795%" height="15" fill="rgb(209,67,24)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.0477%" y="293" width="0.0795%" height="15" fill="rgb(206,74,32)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.0477%" y="277" width="0.0795%" height="15" fill="rgb(212,45,25)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.0477%" y="261" width="0.0795%" height="15" fill="rgb(239,26,3)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.0477%" y="245" width="0.0795%" height="15" fill="rgb(218,36,15)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.0477%" y="229" width="0.0795%" height="15" fill="rgb(206,108,24)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.0477%" y="213" width="0.0795%" height="15" fill="rgb(234,204,42)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.0477%" y="197" width="0.0795%" height="15" fill="rgb(229,2,11)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.0477%" y="181" width="0.0795%" height="15" fill="rgb(221,20,48)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.0477%" y="165" width="0.0795%" height="15" fill="rgb(244,164,10)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.0477%" y="149" width="0.0795%" height="15" fill="rgb(243,229,2)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="159.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="80.0477%" y="133" width="0.0795%" height="15" fill="rgb(232,131,37)" fg:x="1007" fg:w="1"/><text x="80.2977%" y="143.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="80.0477%" y="389" width="0.3180%" height="15" fill="rgb(217,156,11)" fg:x="1007" fg:w="4"/><text x="80.2977%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="80.0477%" y="373" width="0.3180%" height="15" fill="rgb(239,99,48)" fg:x="1007" fg:w="4"/><text x="80.2977%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="80.1272%" y="357" width="0.2385%" height="15" fill="rgb(231,209,9)" fg:x="1008" fg:w="3"/><text x="80.3772%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="80.1272%" y="341" width="0.2385%" height="15" fill="rgb(254,97,27)" fg:x="1008" fg:w="3"/><text x="80.3772%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="80.1272%" y="325" width="0.2385%" height="15" fill="rgb(223,151,38)" fg:x="1008" fg:w="3"/><text x="80.3772%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="80.1272%" y="309" width="0.2385%" height="15" fill="rgb(219,206,35)" fg:x="1008" fg:w="3"/><text x="80.3772%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.2067%" y="293" width="0.1590%" height="15" fill="rgb(216,130,31)" fg:x="1009" fg:w="2"/><text x="80.4567%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.2067%" y="277" width="0.1590%" height="15" fill="rgb(251,97,34)" fg:x="1009" fg:w="2"/><text x="80.4567%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.2862%" y="261" width="0.0795%" height="15" fill="rgb(246,159,47)" fg:x="1010" fg:w="1"/><text x="80.5362%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.2862%" y="245" width="0.0795%" height="15" fill="rgb(232,87,10)" fg:x="1010" fg:w="1"/><text x="80.5362%" y="255.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="80.3657%" y="389" width="0.0795%" height="15" fill="rgb(249,1,37)" fg:x="1011" fg:w="1"/><text x="80.6157%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="80.3657%" y="373" width="0.0795%" height="15" fill="rgb(239,135,14)" fg:x="1011" fg:w="1"/><text x="80.6157%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.3657%" y="357" width="0.0795%" height="15" fill="rgb(253,116,46)" fg:x="1011" fg:w="1"/><text x="80.6157%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.4452%" y="389" width="0.0795%" height="15" fill="rgb(222,217,37)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4452%" y="373" width="0.0795%" height="15" fill="rgb(252,96,8)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4452%" y="357" width="0.0795%" height="15" fill="rgb(254,103,41)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.4452%" y="341" width="0.0795%" height="15" fill="rgb(218,213,19)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4452%" y="325" width="0.0795%" height="15" fill="rgb(253,95,21)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4452%" y="309" width="0.0795%" height="15" fill="rgb(229,26,28)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4452%" y="293" width="0.0795%" height="15" fill="rgb(230,129,16)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4452%" y="277" width="0.0795%" height="15" fill="rgb(236,126,17)" fg:x="1012" fg:w="1"/><text x="80.6952%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.5246%" y="389" width="0.0795%" height="15" fill="rgb(209,33,33)" fg:x="1013" fg:w="1"/><text x="80.7746%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="80.6041%" y="389" width="0.1590%" height="15" fill="rgb(227,85,29)" fg:x="1014" fg:w="2"/><text x="80.8541%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.6041%" y="373" width="0.1590%" height="15" fill="rgb(241,53,46)" fg:x="1014" fg:w="2"/><text x="80.8541%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6836%" y="357" width="0.0795%" height="15" fill="rgb(228,167,53)" fg:x="1015" fg:w="1"/><text x="80.9336%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6836%" y="341" width="0.0795%" height="15" fill="rgb(238,195,45)" fg:x="1015" fg:w="1"/><text x="80.9336%" y="351.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="80.7631%" y="389" width="0.0795%" height="15" fill="rgb(252,124,45)" fg:x="1016" fg:w="1"/><text x="81.0131%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.7631%" y="373" width="0.0795%" height="15" fill="rgb(251,38,35)" fg:x="1016" fg:w="1"/><text x="81.0131%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.7631%" y="357" width="0.0795%" height="15" fill="rgb(227,33,2)" fg:x="1016" fg:w="1"/><text x="81.0131%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="80.8426%" y="245" width="0.0795%" height="15" fill="rgb(223,157,46)" fg:x="1017" fg:w="1"/><text x="81.0926%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="80.8426%" y="229" width="0.0795%" height="15" fill="rgb(222,78,41)" fg:x="1017" fg:w="1"/><text x="81.0926%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="80.8426%" y="213" width="0.0795%" height="15" fill="rgb(248,176,11)" fg:x="1017" fg:w="1"/><text x="81.0926%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="80.8426%" y="309" width="0.1590%" height="15" fill="rgb(241,221,18)" fg:x="1017" fg:w="2"/><text x="81.0926%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="80.8426%" y="293" width="0.1590%" height="15" fill="rgb(218,85,22)" fg:x="1017" fg:w="2"/><text x="81.0926%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="80.8426%" y="277" width="0.1590%" height="15" fill="rgb(222,223,7)" fg:x="1017" fg:w="2"/><text x="81.0926%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="80.8426%" y="261" width="0.1590%" height="15" fill="rgb(254,59,39)" fg:x="1017" fg:w="2"/><text x="81.0926%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="80.9221%" y="245" width="0.0795%" height="15" fill="rgb(247,100,27)" fg:x="1018" fg:w="1"/><text x="81.1721%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="80.9221%" y="229" width="0.0795%" height="15" fill="rgb(237,207,10)" fg:x="1018" fg:w="1"/><text x="81.1721%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="81.0016%" y="309" width="0.0795%" height="15" fill="rgb(220,121,28)" fg:x="1019" fg:w="1"/><text x="81.2516%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="81.0811%" y="261" width="0.0795%" height="15" fill="rgb(213,223,20)" fg:x="1020" fg:w="1"/><text x="81.3311%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="81.1606%" y="261" width="0.1590%" height="15" fill="rgb(205,121,27)" fg:x="1021" fg:w="2"/><text x="81.4106%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.4785%" y="229" width="0.0795%" height="15" fill="rgb(253,24,53)" fg:x="1025" fg:w="1"/><text x="81.7285%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="81.4785%" y="245" width="0.7154%" height="15" fill="rgb(224,224,47)" fg:x="1025" fg:w="9"/><text x="81.7285%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="81.5580%" y="229" width="0.6359%" height="15" fill="rgb(250,125,36)" fg:x="1026" fg:w="8"/><text x="81.8080%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.1145%" y="213" width="0.0795%" height="15" fill="rgb(240,144,38)" fg:x="1033" fg:w="1"/><text x="82.3645%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="82.1940%" y="245" width="0.2385%" height="15" fill="rgb(250,15,50)" fg:x="1034" fg:w="3"/><text x="82.4440%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="82.2734%" y="229" width="0.1590%" height="15" fill="rgb(210,24,26)" fg:x="1035" fg:w="2"/><text x="82.5234%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="82.5119%" y="213" width="0.0795%" height="15" fill="rgb(234,53,53)" fg:x="1038" fg:w="1"/><text x="82.7619%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.7504%" y="181" width="0.0795%" height="15" fill="rgb(208,108,28)" fg:x="1041" fg:w="1"/><text x="83.0004%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.8299%" y="165" width="0.0795%" height="15" fill="rgb(227,143,7)" fg:x="1042" fg:w="1"/><text x="83.0799%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.8299%" y="149" width="0.0795%" height="15" fill="rgb(238,189,38)" fg:x="1042" fg:w="1"/><text x="83.0799%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.8299%" y="133" width="0.0795%" height="15" fill="rgb(222,69,15)" fg:x="1042" fg:w="1"/><text x="83.0799%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.02%)</title><rect x="82.8299%" y="181" width="3.0207%" height="15" fill="rgb(213,169,7)" fg:x="1042" fg:w="38"/><text x="83.0799%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 2.94%)</title><rect x="82.9094%" y="165" width="2.9412%" height="15" fill="rgb(251,219,4)" fg:x="1043" fg:w="37"/><text x="83.1594%" y="175.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (37 samples, 2.94%)</title><rect x="82.9094%" y="149" width="2.9412%" height="15" fill="rgb(241,55,40)" fg:x="1043" fg:w="37"/><text x="83.1594%" y="159.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="85.8506%" y="181" width="0.1590%" height="15" fill="rgb(243,57,30)" fg:x="1080" fg:w="2"/><text x="86.1006%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="85.8506%" y="165" width="0.1590%" height="15" fill="rgb(234,50,30)" fg:x="1080" fg:w="2"/><text x="86.1006%" y="175.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="86.0095%" y="181" width="0.0795%" height="15" fill="rgb(239,23,42)" fg:x="1082" fg:w="1"/><text x="86.2595%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.66%)</title><rect x="82.5119%" y="229" width="3.6566%" height="15" fill="rgb(217,38,19)" fg:x="1038" fg:w="46"/><text x="82.7619%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (45 samples, 3.58%)</title><rect x="82.5914%" y="213" width="3.5771%" height="15" fill="rgb(215,179,16)" fg:x="1039" fg:w="45"/><text x="82.8414%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (45 samples, 3.58%)</title><rect x="82.5914%" y="197" width="3.5771%" height="15" fill="rgb(254,21,37)" fg:x="1039" fg:w="45"/><text x="82.8414%" y="207.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="86.0890%" y="181" width="0.0795%" height="15" fill="rgb(219,207,48)" fg:x="1083" fg:w="1"/><text x="86.3390%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.3275%" y="213" width="0.0795%" height="15" fill="rgb(227,225,41)" fg:x="1086" fg:w="1"/><text x="86.5775%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="86.4070%" y="213" width="0.1590%" height="15" fill="rgb(223,130,1)" fg:x="1087" fg:w="2"/><text x="86.6570%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (67 samples, 5.33%)</title><rect x="81.3196%" y="261" width="5.3259%" height="15" fill="rgb(249,54,42)" fg:x="1023" fg:w="67"/><text x="81.5696%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (53 samples, 4.21%)</title><rect x="82.4324%" y="245" width="4.2130%" height="15" fill="rgb(248,69,25)" fg:x="1037" fg:w="53"/><text x="82.6824%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="86.1685%" y="229" width="0.4769%" height="15" fill="rgb(234,21,32)" fg:x="1084" fg:w="6"/><text x="86.4185%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="86.5660%" y="213" width="0.0795%" height="15" fill="rgb(252,136,6)" fg:x="1089" fg:w="1"/><text x="86.8160%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="86.6455%" y="213" width="0.0795%" height="15" fill="rgb(245,87,12)" fg:x="1090" fg:w="1"/><text x="86.8955%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="86.6455%" y="229" width="0.1590%" height="15" fill="rgb(208,12,15)" fg:x="1090" fg:w="2"/><text x="86.8955%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="86.7250%" y="213" width="0.0795%" height="15" fill="rgb(250,98,2)" fg:x="1091" fg:w="1"/><text x="86.9750%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.7250%" y="197" width="0.0795%" height="15" fill="rgb(205,213,15)" fg:x="1091" fg:w="1"/><text x="86.9750%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.7250%" y="181" width="0.0795%" height="15" fill="rgb(248,192,44)" fg:x="1091" fg:w="1"/><text x="86.9750%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.7250%" y="165" width="0.0795%" height="15" fill="rgb(221,89,17)" fg:x="1091" fg:w="1"/><text x="86.9750%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="86.6455%" y="261" width="0.2385%" height="15" fill="rgb(209,55,3)" fg:x="1090" fg:w="3"/><text x="86.8955%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="86.6455%" y="245" width="0.2385%" height="15" fill="rgb(247,23,45)" fg:x="1090" fg:w="3"/><text x="86.8955%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.8045%" y="229" width="0.0795%" height="15" fill="rgb(235,152,23)" fg:x="1092" fg:w="1"/><text x="87.0545%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="86.8045%" y="213" width="0.0795%" height="15" fill="rgb(244,63,13)" fg:x="1092" fg:w="1"/><text x="87.0545%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.8839%" y="229" width="0.0795%" height="15" fill="rgb(227,30,37)" fg:x="1093" fg:w="1"/><text x="87.1339%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (75 samples, 5.96%)</title><rect x="81.0811%" y="309" width="5.9618%" height="15" fill="rgb(224,49,42)" fg:x="1020" fg:w="75"/><text x="81.3311%" y="319.50">regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (75 samples, 5.96%)</title><rect x="81.0811%" y="293" width="5.9618%" height="15" fill="rgb(218,129,5)" fg:x="1020" fg:w="75"/><text x="81.3311%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (75 samples, 5.96%)</title><rect x="81.0811%" y="277" width="5.9618%" height="15" fill="rgb(240,199,54)" fg:x="1020" fg:w="75"/><text x="81.3311%" y="287.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="86.8839%" y="261" width="0.1590%" height="15" fill="rgb(234,31,13)" fg:x="1093" fg:w="2"/><text x="87.1339%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.8839%" y="245" width="0.1590%" height="15" fill="rgb(219,73,54)" fg:x="1093" fg:w="2"/><text x="87.1339%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="86.9634%" y="229" width="0.0795%" height="15" fill="rgb(251,162,10)" fg:x="1094" fg:w="1"/><text x="87.2134%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (80 samples, 6.36%)</title><rect x="80.8426%" y="325" width="6.3593%" height="15" fill="rgb(240,138,47)" fg:x="1017" fg:w="80"/><text x="81.0926%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="87.0429%" y="309" width="0.1590%" height="15" fill="rgb(216,138,26)" fg:x="1095" fg:w="2"/><text x="87.2929%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="87.0429%" y="293" width="0.1590%" height="15" fill="rgb(243,17,35)" fg:x="1095" fg:w="2"/><text x="87.2929%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="87.0429%" y="277" width="0.1590%" height="15" fill="rgb(241,60,18)" fg:x="1095" fg:w="2"/><text x="87.2929%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="87.0429%" y="261" width="0.1590%" height="15" fill="rgb(234,2,44)" fg:x="1095" fg:w="2"/><text x="87.2929%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="87.0429%" y="245" width="0.1590%" height="15" fill="rgb(225,225,33)" fg:x="1095" fg:w="2"/><text x="87.2929%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="87.2019%" y="309" width="0.0795%" height="15" fill="rgb(234,50,31)" fg:x="1097" fg:w="1"/><text x="87.4519%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="87.2019%" y="293" width="0.0795%" height="15" fill="rgb(249,6,25)" fg:x="1097" fg:w="1"/><text x="87.4519%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.2019%" y="277" width="0.0795%" height="15" fill="rgb(241,5,17)" fg:x="1097" fg:w="1"/><text x="87.4519%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="87.2019%" y="261" width="0.0795%" height="15" fill="rgb(207,116,10)" fg:x="1097" fg:w="1"/><text x="87.4519%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="87.2019%" y="245" width="0.0795%" height="15" fill="rgb(222,128,18)" fg:x="1097" fg:w="1"/><text x="87.4519%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.2019%" y="229" width="0.0795%" height="15" fill="rgb(229,109,25)" fg:x="1097" fg:w="1"/><text x="87.4519%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="87.2814%" y="229" width="0.3180%" height="15" fill="rgb(222,102,25)" fg:x="1098" fg:w="4"/><text x="87.5314%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="87.4404%" y="213" width="0.1590%" height="15" fill="rgb(239,211,5)" fg:x="1100" fg:w="2"/><text x="87.6904%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="87.2814%" y="309" width="0.3975%" height="15" fill="rgb(223,136,26)" fg:x="1098" fg:w="5"/><text x="87.5314%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="87.2814%" y="293" width="0.3975%" height="15" fill="rgb(227,30,15)" fg:x="1098" fg:w="5"/><text x="87.5314%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="87.2814%" y="277" width="0.3975%" height="15" fill="rgb(247,76,4)" fg:x="1098" fg:w="5"/><text x="87.5314%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="87.2814%" y="261" width="0.3975%" height="15" fill="rgb(245,38,48)" fg:x="1098" fg:w="5"/><text x="87.5314%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="87.2814%" y="245" width="0.3975%" height="15" fill="rgb(210,220,14)" fg:x="1098" fg:w="5"/><text x="87.5314%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="87.5994%" y="229" width="0.0795%" height="15" fill="rgb(224,60,51)" fg:x="1102" fg:w="1"/><text x="87.8494%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.5994%" y="213" width="0.0795%" height="15" fill="rgb(212,133,49)" fg:x="1102" fg:w="1"/><text x="87.8494%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.5994%" y="197" width="0.0795%" height="15" fill="rgb(231,39,22)" fg:x="1102" fg:w="1"/><text x="87.8494%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.5994%" y="181" width="0.0795%" height="15" fill="rgb(236,173,22)" fg:x="1102" fg:w="1"/><text x="87.8494%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.6789%" y="229" width="0.0795%" height="15" fill="rgb(210,70,0)" fg:x="1103" fg:w="1"/><text x="87.9289%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.6789%" y="213" width="0.0795%" height="15" fill="rgb(215,170,11)" fg:x="1103" fg:w="1"/><text x="87.9289%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.6789%" y="197" width="0.0795%" height="15" fill="rgb(220,154,28)" fg:x="1103" fg:w="1"/><text x="87.9289%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.6789%" y="181" width="0.0795%" height="15" fill="rgb(240,160,41)" fg:x="1103" fg:w="1"/><text x="87.9289%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.6789%" y="245" width="0.1590%" height="15" fill="rgb(243,215,41)" fg:x="1103" fg:w="2"/><text x="87.9289%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.7583%" y="229" width="0.0795%" height="15" fill="rgb(214,208,31)" fg:x="1104" fg:w="1"/><text x="88.0083%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="87.6789%" y="261" width="0.2385%" height="15" fill="rgb(247,57,22)" fg:x="1103" fg:w="3"/><text x="87.9289%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="87.8378%" y="245" width="0.0795%" height="15" fill="rgb(228,73,52)" fg:x="1105" fg:w="1"/><text x="88.0878%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.9173%" y="261" width="0.0795%" height="15" fill="rgb(252,60,9)" fg:x="1106" fg:w="1"/><text x="88.1673%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.9968%" y="261" width="0.0795%" height="15" fill="rgb(233,9,51)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.9968%" y="245" width="0.0795%" height="15" fill="rgb(223,67,14)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.9968%" y="229" width="0.0795%" height="15" fill="rgb(222,86,2)" fg:x="1107" fg:w="1"/><text x="88.2468%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="88.1558%" y="245" width="0.5564%" height="15" fill="rgb(243,58,54)" fg:x="1109" fg:w="7"/><text x="88.4058%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="88.1558%" y="229" width="0.5564%" height="15" fill="rgb(210,200,39)" fg:x="1109" fg:w="7"/><text x="88.4058%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.6328%" y="213" width="0.0795%" height="15" fill="rgb(238,135,9)" fg:x="1115" fg:w="1"/><text x="88.8828%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="88.7122%" y="229" width="0.1590%" height="15" fill="rgb(232,179,7)" fg:x="1116" fg:w="2"/><text x="88.9622%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="88.7122%" y="245" width="0.2385%" height="15" fill="rgb(245,65,41)" fg:x="1116" fg:w="3"/><text x="88.9622%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.8712%" y="229" width="0.0795%" height="15" fill="rgb(227,43,8)" fg:x="1118" fg:w="1"/><text x="89.1212%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.8712%" y="213" width="0.0795%" height="15" fill="rgb(235,91,14)" fg:x="1118" fg:w="1"/><text x="89.1212%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="88.8712%" y="197" width="0.0795%" height="15" fill="rgb(235,219,31)" fg:x="1118" fg:w="1"/><text x="89.1212%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.8712%" y="181" width="0.0795%" height="15" fill="rgb(227,121,25)" fg:x="1118" fg:w="1"/><text x="89.1212%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="89.0302%" y="213" width="0.3975%" height="15" fill="rgb(254,129,24)" fg:x="1120" fg:w="5"/><text x="89.2802%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="89.0302%" y="197" width="0.3975%" height="15" fill="rgb(226,144,49)" fg:x="1120" fg:w="5"/><text x="89.2802%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="89.1892%" y="181" width="0.2385%" height="15" fill="rgb(214,187,32)" fg:x="1122" fg:w="3"/><text x="89.4392%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.1892%" y="165" width="0.2385%" height="15" fill="rgb(243,129,46)" fg:x="1122" fg:w="3"/><text x="89.4392%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="89.1892%" y="149" width="0.2385%" height="15" fill="rgb(221,185,35)" fg:x="1122" fg:w="3"/><text x="89.4392%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.72%)</title><rect x="88.9507%" y="245" width="0.7154%" height="15" fill="rgb(205,0,32)" fg:x="1119" fg:w="9"/><text x="89.2007%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="88.9507%" y="229" width="0.7154%" height="15" fill="rgb(229,179,12)" fg:x="1119" fg:w="9"/><text x="89.2007%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="89.4277%" y="213" width="0.2385%" height="15" fill="rgb(252,107,19)" fg:x="1125" fg:w="3"/><text x="89.6777%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="89.4277%" y="197" width="0.2385%" height="15" fill="rgb(220,95,27)" fg:x="1125" fg:w="3"/><text x="89.6777%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="89.4277%" y="181" width="0.2385%" height="15" fill="rgb(240,113,40)" fg:x="1125" fg:w="3"/><text x="89.6777%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.9046%" y="133" width="0.0795%" height="15" fill="rgb(208,4,43)" fg:x="1131" fg:w="1"/><text x="90.1546%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.9841%" y="133" width="0.1590%" height="15" fill="rgb(247,189,30)" fg:x="1132" fg:w="2"/><text x="90.2341%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="90.1431%" y="133" width="0.1590%" height="15" fill="rgb(231,157,17)" fg:x="1134" fg:w="2"/><text x="90.3931%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.2226%" y="117" width="0.0795%" height="15" fill="rgb(224,139,6)" fg:x="1135" fg:w="1"/><text x="90.4726%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.2226%" y="101" width="0.0795%" height="15" fill="rgb(223,83,16)" fg:x="1135" fg:w="1"/><text x="90.4726%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.2226%" y="85" width="0.0795%" height="15" fill="rgb(232,211,20)" fg:x="1135" fg:w="1"/><text x="90.4726%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.3021%" y="133" width="0.0795%" height="15" fill="rgb(225,203,35)" fg:x="1136" fg:w="1"/><text x="90.5521%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.3021%" y="117" width="0.0795%" height="15" fill="rgb(215,211,44)" fg:x="1136" fg:w="1"/><text x="90.5521%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3021%" y="101" width="0.0795%" height="15" fill="rgb(248,213,26)" fg:x="1136" fg:w="1"/><text x="90.5521%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.3021%" y="85" width="0.0795%" height="15" fill="rgb(214,23,52)" fg:x="1136" fg:w="1"/><text x="90.5521%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="90.4610%" y="101" width="0.2385%" height="15" fill="rgb(225,173,50)" fg:x="1138" fg:w="3"/><text x="90.7110%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.5405%" y="85" width="0.1590%" height="15" fill="rgb(206,150,22)" fg:x="1139" fg:w="2"/><text x="90.7905%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.6200%" y="69" width="0.0795%" height="15" fill="rgb(239,64,23)" fg:x="1140" fg:w="1"/><text x="90.8700%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="90.3816%" y="133" width="0.6359%" height="15" fill="rgb(242,50,38)" fg:x="1137" fg:w="8"/><text x="90.6316%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="90.3816%" y="117" width="0.6359%" height="15" fill="rgb(217,91,15)" fg:x="1137" fg:w="8"/><text x="90.6316%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="90.6995%" y="101" width="0.3180%" height="15" fill="rgb(230,172,6)" fg:x="1141" fg:w="4"/><text x="90.9495%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9380%" y="85" width="0.0795%" height="15" fill="rgb(221,98,26)" fg:x="1144" fg:w="1"/><text x="91.1880%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.46%)</title><rect x="91.0175%" y="133" width="2.4642%" height="15" fill="rgb(227,210,45)" fg:x="1145" fg:w="31"/><text x="91.2675%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.46%)</title><rect x="91.0175%" y="117" width="2.4642%" height="15" fill="rgb(206,8,30)" fg:x="1145" fg:w="31"/><text x="91.2675%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.46%)</title><rect x="91.0175%" y="101" width="2.4642%" height="15" fill="rgb(241,219,17)" fg:x="1145" fg:w="31"/><text x="91.2675%" y="111.50">al..</text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="93.4817%" y="133" width="0.0795%" height="15" fill="rgb(247,121,29)" fg:x="1176" fg:w="1"/><text x="93.7317%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="93.5612%" y="133" width="0.0795%" height="15" fill="rgb(219,169,49)" fg:x="1177" fg:w="1"/><text x="93.8112%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 4.29%)</title><rect x="89.6661%" y="229" width="4.2925%" height="15" fill="rgb(253,49,49)" fg:x="1128" fg:w="54"/><text x="89.9161%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.29%)</title><rect x="89.6661%" y="213" width="4.2925%" height="15" fill="rgb(217,178,3)" fg:x="1128" fg:w="54"/><text x="89.9161%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.29%)</title><rect x="89.6661%" y="197" width="4.2925%" height="15" fill="rgb(234,73,37)" fg:x="1128" fg:w="54"/><text x="89.9161%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.29%)</title><rect x="89.6661%" y="181" width="4.2925%" height="15" fill="rgb(250,98,22)" fg:x="1128" fg:w="54"/><text x="89.9161%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (54 samples, 4.29%)</title><rect x="89.6661%" y="165" width="4.2925%" height="15" fill="rgb(220,108,37)" fg:x="1128" fg:w="54"/><text x="89.9161%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.29%)</title><rect x="89.6661%" y="149" width="4.2925%" height="15" fill="rgb(225,168,10)" fg:x="1128" fg:w="54"/><text x="89.9161%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="93.6407%" y="133" width="0.3180%" height="15" fill="rgb(247,215,21)" fg:x="1178" fg:w="4"/><text x="93.8907%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="93.7202%" y="117" width="0.2385%" height="15" fill="rgb(253,189,31)" fg:x="1179" fg:w="3"/><text x="93.9702%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="93.7202%" y="101" width="0.2385%" height="15" fill="rgb(241,54,22)" fg:x="1179" fg:w="3"/><text x="93.9702%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.8792%" y="85" width="0.0795%" height="15" fill="rgb(211,87,4)" fg:x="1181" fg:w="1"/><text x="94.1292%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.9587%" y="229" width="0.0795%" height="15" fill="rgb(245,112,24)" fg:x="1182" fg:w="1"/><text x="94.2087%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.0382%" y="213" width="0.0795%" height="15" fill="rgb(235,190,41)" fg:x="1183" fg:w="1"/><text x="94.2882%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="94.1176%" y="213" width="0.1590%" height="15" fill="rgb(214,89,8)" fg:x="1184" fg:w="2"/><text x="94.3676%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.1971%" y="197" width="0.0795%" height="15" fill="rgb(249,155,35)" fg:x="1185" fg:w="1"/><text x="94.4471%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.1971%" y="181" width="0.0795%" height="15" fill="rgb(249,88,26)" fg:x="1185" fg:w="1"/><text x="94.4471%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.1971%" y="165" width="0.0795%" height="15" fill="rgb(232,56,8)" fg:x="1185" fg:w="1"/><text x="94.4471%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (81 samples, 6.44%)</title><rect x="88.0763%" y="261" width="6.4388%" height="15" fill="rgb(240,95,3)" fg:x="1108" fg:w="81"/><text x="88.3263%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (61 samples, 4.85%)</title><rect x="89.6661%" y="245" width="4.8490%" height="15" fill="rgb(222,44,28)" fg:x="1128" fg:w="61"/><text x="89.9161%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="94.0382%" y="229" width="0.4769%" height="15" fill="rgb(234,16,30)" fg:x="1183" fg:w="6"/><text x="94.2882%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="94.2766%" y="213" width="0.2385%" height="15" fill="rgb(223,26,17)" fg:x="1186" fg:w="3"/><text x="94.5266%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="94.3561%" y="197" width="0.1590%" height="15" fill="rgb(239,187,47)" fg:x="1187" fg:w="2"/><text x="94.6061%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.4356%" y="181" width="0.0795%" height="15" fill="rgb(247,102,50)" fg:x="1188" fg:w="1"/><text x="94.6856%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.4356%" y="165" width="0.0795%" height="15" fill="rgb(231,216,22)" fg:x="1188" fg:w="1"/><text x="94.6856%" y="175.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="94.5151%" y="261" width="0.0795%" height="15" fill="rgb(216,201,26)" fg:x="1189" fg:w="1"/><text x="94.7651%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="94.5946%" y="229" width="0.0795%" height="15" fill="rgb(214,186,23)" fg:x="1190" fg:w="1"/><text x="94.8446%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="94.5946%" y="261" width="0.1590%" height="15" fill="rgb(235,184,4)" fg:x="1190" fg:w="2"/><text x="94.8446%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="94.5946%" y="245" width="0.1590%" height="15" fill="rgb(244,46,17)" fg:x="1190" fg:w="2"/><text x="94.8446%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="94.6741%" y="229" width="0.0795%" height="15" fill="rgb(248,74,46)" fg:x="1191" fg:w="1"/><text x="94.9241%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7536%" y="197" width="0.0795%" height="15" fill="rgb(243,79,5)" fg:x="1192" fg:w="1"/><text x="95.0036%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7536%" y="181" width="0.0795%" height="15" fill="rgb(213,148,1)" fg:x="1192" fg:w="1"/><text x="95.0036%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.7536%" y="165" width="0.0795%" height="15" fill="rgb(221,30,0)" fg:x="1192" fg:w="1"/><text x="95.0036%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="94.7536%" y="229" width="0.1590%" height="15" fill="rgb(207,85,29)" fg:x="1192" fg:w="2"/><text x="95.0036%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="94.7536%" y="213" width="0.1590%" height="15" fill="rgb(239,31,46)" fg:x="1192" fg:w="2"/><text x="95.0036%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="94.8331%" y="197" width="0.0795%" height="15" fill="rgb(219,6,1)" fg:x="1193" fg:w="1"/><text x="95.0831%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (93 samples, 7.39%)</title><rect x="87.6789%" y="277" width="7.3927%" height="15" fill="rgb(229,90,29)" fg:x="1103" fg:w="93"/><text x="87.9289%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="94.7536%" y="261" width="0.3180%" height="15" fill="rgb(242,201,42)" fg:x="1192" fg:w="4"/><text x="95.0036%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="94.7536%" y="245" width="0.3180%" height="15" fill="rgb(243,80,54)" fg:x="1192" fg:w="4"/><text x="95.0036%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="94.9126%" y="229" width="0.1590%" height="15" fill="rgb(223,166,15)" fg:x="1194" fg:w="2"/><text x="95.1626%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="94.9921%" y="213" width="0.0795%" height="15" fill="rgb(238,78,27)" fg:x="1195" fg:w="1"/><text x="95.2421%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.9921%" y="197" width="0.0795%" height="15" fill="rgb(235,28,43)" fg:x="1195" fg:w="1"/><text x="95.2421%" y="207.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (94 samples, 7.47%)</title><rect x="87.6789%" y="293" width="7.4722%" height="15" fill="rgb(240,210,28)" fg:x="1103" fg:w="94"/><text x="87.9289%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="95.0715%" y="277" width="0.0795%" height="15" fill="rgb(253,6,46)" fg:x="1196" fg:w="1"/><text x="95.3215%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (101 samples, 8.03%)</title><rect x="87.2019%" y="325" width="8.0286%" height="15" fill="rgb(250,159,47)" fg:x="1097" fg:w="101"/><text x="87.4519%" y="335.50">indefinite:..</text></g><g><title>regex::regex::string::Regex::new (95 samples, 7.55%)</title><rect x="87.6789%" y="309" width="7.5517%" height="15" fill="rgb(216,139,2)" fg:x="1103" fg:w="95"/><text x="87.9289%" y="319.50">regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="95.1510%" y="293" width="0.0795%" height="15" fill="rgb(221,124,44)" fg:x="1197" fg:w="1"/><text x="95.4010%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="95.1510%" y="277" width="0.0795%" height="15" fill="rgb(205,37,22)" fg:x="1197" fg:w="1"/><text x="95.4010%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Config::hybrid_cache_capacity (1 samples, 0.08%)</title><rect x="95.1510%" y="261" width="0.0795%" height="15" fill="rgb(250,55,8)" fg:x="1197" fg:w="1"/><text x="95.4010%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3895%" y="245" width="0.0795%" height="15" fill="rgb(215,83,48)" fg:x="1200" fg:w="1"/><text x="95.6395%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="95.4690%" y="245" width="0.0795%" height="15" fill="rgb(253,2,32)" fg:x="1201" fg:w="1"/><text x="95.7190%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.4690%" y="229" width="0.0795%" height="15" fill="rgb(236,67,28)" fg:x="1201" fg:w="1"/><text x="95.7190%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="95.4690%" y="213" width="0.0795%" height="15" fill="rgb(252,55,15)" fg:x="1201" fg:w="1"/><text x="95.7190%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="95.5485%" y="245" width="0.0795%" height="15" fill="rgb(243,173,17)" fg:x="1202" fg:w="1"/><text x="95.7985%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.6280%" y="229" width="0.0795%" height="15" fill="rgb(215,212,13)" fg:x="1203" fg:w="1"/><text x="95.8780%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="95.7075%" y="229" width="0.0795%" height="15" fill="rgb(253,176,6)" fg:x="1204" fg:w="1"/><text x="95.9575%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="95.7075%" y="213" width="0.0795%" height="15" fill="rgb(236,105,26)" fg:x="1204" fg:w="1"/><text x="95.9575%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (3 samples, 0.24%)</title><rect x="95.6280%" y="245" width="0.2385%" height="15" fill="rgb(239,226,32)" fg:x="1203" fg:w="3"/><text x="95.8780%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="95.7870%" y="229" width="0.0795%" height="15" fill="rgb(236,104,51)" fg:x="1205" fg:w="1"/><text x="96.0370%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="95.8665%" y="197" width="0.0795%" height="15" fill="rgb(220,172,33)" fg:x="1206" fg:w="1"/><text x="96.1165%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.8665%" y="181" width="0.0795%" height="15" fill="rgb(224,182,25)" fg:x="1206" fg:w="1"/><text x="96.1165%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.8665%" y="165" width="0.0795%" height="15" fill="rgb(236,184,24)" fg:x="1206" fg:w="1"/><text x="96.1165%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.8665%" y="149" width="0.0795%" height="15" fill="rgb(241,221,14)" fg:x="1206" fg:w="1"/><text x="96.1165%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.8665%" y="245" width="0.1590%" height="15" fill="rgb(227,146,5)" fg:x="1206" fg:w="2"/><text x="96.1165%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.8665%" y="229" width="0.1590%" height="15" fill="rgb(214,15,23)" fg:x="1206" fg:w="2"/><text x="96.1165%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.8665%" y="213" width="0.1590%" height="15" fill="rgb(233,157,31)" fg:x="1206" fg:w="2"/><text x="96.1165%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.9459%" y="197" width="0.0795%" height="15" fill="rgb(211,27,52)" fg:x="1207" fg:w="1"/><text x="96.1959%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9459%" y="181" width="0.0795%" height="15" fill="rgb(212,223,15)" fg:x="1207" fg:w="1"/><text x="96.1959%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9459%" y="165" width="0.0795%" height="15" fill="rgb(254,211,0)" fg:x="1207" fg:w="1"/><text x="96.1959%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9459%" y="149" width="0.0795%" height="15" fill="rgb(205,43,38)" fg:x="1207" fg:w="1"/><text x="96.1959%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="96.0254%" y="213" width="0.0795%" height="15" fill="rgb(242,206,46)" fg:x="1208" fg:w="1"/><text x="96.2754%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.0254%" y="197" width="0.0795%" height="15" fill="rgb(220,221,12)" fg:x="1208" fg:w="1"/><text x="96.2754%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.0254%" y="181" width="0.0795%" height="15" fill="rgb(217,156,35)" fg:x="1208" fg:w="1"/><text x="96.2754%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.0254%" y="165" width="0.0795%" height="15" fill="rgb(207,181,49)" fg:x="1208" fg:w="1"/><text x="96.2754%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.0254%" y="149" width="0.0795%" height="15" fill="rgb(235,103,47)" fg:x="1208" fg:w="1"/><text x="96.2754%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (11 samples, 0.87%)</title><rect x="95.3100%" y="293" width="0.8744%" height="15" fill="rgb(222,63,28)" fg:x="1199" fg:w="11"/><text x="95.5600%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (11 samples, 0.87%)</title><rect x="95.3100%" y="277" width="0.8744%" height="15" fill="rgb(244,137,21)" fg:x="1199" fg:w="11"/><text x="95.5600%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.87%)</title><rect x="95.3100%" y="261" width="0.8744%" height="15" fill="rgb(228,35,27)" fg:x="1199" fg:w="11"/><text x="95.5600%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="96.0254%" y="245" width="0.1590%" height="15" fill="rgb(226,191,41)" fg:x="1208" fg:w="2"/><text x="96.2754%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="96.0254%" y="229" width="0.1590%" height="15" fill="rgb(210,154,3)" fg:x="1208" fg:w="2"/><text x="96.2754%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.1049%" y="213" width="0.0795%" height="15" fill="rgb(216,60,49)" fg:x="1209" fg:w="1"/><text x="96.3549%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (207 samples, 16.45%)</title><rect x="79.8887%" y="405" width="16.4547%" height="15" fill="rgb(226,17,20)" fg:x="1005" fg:w="207"/><text x="80.1387%" y="415.50">&lt;&amp;kernel::model::EntityPt..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (195 samples, 15.50%)</title><rect x="80.8426%" y="389" width="15.5008%" height="15" fill="rgb(206,115,35)" fg:x="1017" fg:w="195"/><text x="81.0926%" y="399.50">plugins_core::looking::m..</text></g><g><title>indefinite::indefinite (195 samples, 15.50%)</title><rect x="80.8426%" y="373" width="15.5008%" height="15" fill="rgb(227,88,1)" fg:x="1017" fg:w="195"/><text x="81.0926%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (195 samples, 15.50%)</title><rect x="80.8426%" y="357" width="15.5008%" height="15" fill="rgb(230,222,24)" fg:x="1017" fg:w="195"/><text x="81.0926%" y="367.50">indefinite::methods::ind..</text></g><g><title>indefinite::methods::apply_rules (195 samples, 15.50%)</title><rect x="80.8426%" y="341" width="15.5008%" height="15" fill="rgb(214,124,32)" fg:x="1017" fg:w="195"/><text x="81.0926%" y="351.50">indefinite::methods::app..</text></g><g><title>indefinite::rules::other::Other::run (14 samples, 1.11%)</title><rect x="95.2305%" y="325" width="1.1129%" height="15" fill="rgb(240,41,36)" fg:x="1198" fg:w="14"/><text x="95.4805%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (14 samples, 1.11%)</title><rect x="95.2305%" y="309" width="1.1129%" height="15" fill="rgb(221,17,52)" fg:x="1198" fg:w="14"/><text x="95.4805%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="96.1844%" y="293" width="0.1590%" height="15" fill="rgb(252,70,16)" fg:x="1210" fg:w="2"/><text x="96.4344%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="96.1844%" y="277" width="0.1590%" height="15" fill="rgb(250,177,4)" fg:x="1210" fg:w="2"/><text x="96.4344%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="96.1844%" y="261" width="0.1590%" height="15" fill="rgb(240,188,47)" fg:x="1210" fg:w="2"/><text x="96.4344%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="96.1844%" y="245" width="0.1590%" height="15" fill="rgb(215,92,12)" fg:x="1210" fg:w="2"/><text x="96.4344%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.1844%" y="229" width="0.1590%" height="15" fill="rgb(242,110,29)" fg:x="1210" fg:w="2"/><text x="96.4344%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.2639%" y="213" width="0.0795%" height="15" fill="rgb(208,211,26)" fg:x="1211" fg:w="1"/><text x="96.5139%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.2639%" y="197" width="0.0795%" height="15" fill="rgb(244,147,6)" fg:x="1211" fg:w="1"/><text x="96.5139%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2639%" y="181" width="0.0795%" height="15" fill="rgb(211,130,42)" fg:x="1211" fg:w="1"/><text x="96.5139%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2639%" y="165" width="0.0795%" height="15" fill="rgb(220,63,1)" fg:x="1211" fg:w="1"/><text x="96.5139%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="96.3434%" y="405" width="0.1590%" height="15" fill="rgb(241,212,30)" fg:x="1212" fg:w="2"/><text x="96.5934%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.3434%" y="389" width="0.1590%" height="15" fill="rgb(233,153,17)" fg:x="1212" fg:w="2"/><text x="96.5934%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4229%" y="373" width="0.0795%" height="15" fill="rgb(236,3,10)" fg:x="1213" fg:w="1"/><text x="96.6729%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4229%" y="357" width="0.0795%" height="15" fill="rgb(232,41,21)" fg:x="1213" fg:w="1"/><text x="96.6729%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4229%" y="341" width="0.0795%" height="15" fill="rgb(206,63,51)" fg:x="1213" fg:w="1"/><text x="96.6729%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4229%" y="325" width="0.0795%" height="15" fill="rgb(250,214,3)" fg:x="1213" fg:w="1"/><text x="96.6729%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4229%" y="309" width="0.0795%" height="15" fill="rgb(254,89,27)" fg:x="1213" fg:w="1"/><text x="96.6729%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5024%" y="341" width="0.0795%" height="15" fill="rgb(249,41,14)" fg:x="1214" fg:w="1"/><text x="96.7524%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="96.5024%" y="373" width="0.1590%" height="15" fill="rgb(221,196,51)" fg:x="1214" fg:w="2"/><text x="96.7524%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="96.5024%" y="357" width="0.1590%" height="15" fill="rgb(214,116,26)" fg:x="1214" fg:w="2"/><text x="96.7524%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.5819%" y="341" width="0.0795%" height="15" fill="rgb(236,67,7)" fg:x="1215" fg:w="1"/><text x="96.8319%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5819%" y="325" width="0.0795%" height="15" fill="rgb(253,179,32)" fg:x="1215" fg:w="1"/><text x="96.8319%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.5819%" y="309" width="0.0795%" height="15" fill="rgb(218,33,15)" fg:x="1215" fg:w="1"/><text x="96.8319%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5819%" y="293" width="0.0795%" height="15" fill="rgb(217,202,41)" fg:x="1215" fg:w="1"/><text x="96.8319%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.5819%" y="277" width="0.0795%" height="15" fill="rgb(234,133,5)" fg:x="1215" fg:w="1"/><text x="96.8319%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (3 samples, 0.24%)</title><rect x="96.5024%" y="389" width="0.2385%" height="15" fill="rgb(240,47,40)" fg:x="1214" fg:w="3"/><text x="96.7524%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="96.6614%" y="373" width="0.0795%" height="15" fill="rgb(234,166,26)" fg:x="1216" fg:w="1"/><text x="96.9114%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.6614%" y="357" width="0.0795%" height="15" fill="rgb(244,125,51)" fg:x="1216" fg:w="1"/><text x="96.9114%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.6614%" y="341" width="0.0795%" height="15" fill="rgb(229,171,11)" fg:x="1216" fg:w="1"/><text x="96.9114%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.6614%" y="325" width="0.0795%" height="15" fill="rgb(224,38,45)" fg:x="1216" fg:w="1"/><text x="96.9114%" y="335.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="96.7409%" y="325" width="0.0795%" height="15" fill="rgb(237,27,7)" fg:x="1217" fg:w="1"/><text x="96.9909%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.7409%" y="309" width="0.0795%" height="15" fill="rgb(216,52,7)" fg:x="1217" fg:w="1"/><text x="96.9909%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.8203%" y="229" width="0.0795%" height="15" fill="rgb(243,11,11)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.8203%" y="213" width="0.0795%" height="15" fill="rgb(253,167,20)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.8203%" y="197" width="0.0795%" height="15" fill="rgb(215,207,5)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.8203%" y="181" width="0.0795%" height="15" fill="rgb(252,127,31)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.8203%" y="165" width="0.0795%" height="15" fill="rgb(209,106,27)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.8203%" y="149" width="0.0795%" height="15" fill="rgb(214,220,18)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.8203%" y="133" width="0.0795%" height="15" fill="rgb(237,89,12)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.8203%" y="117" width="0.0795%" height="15" fill="rgb(209,167,36)" fg:x="1218" fg:w="1"/><text x="97.0703%" y="127.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (225 samples, 17.89%)</title><rect x="79.0938%" y="565" width="17.8855%" height="15" fill="rgb(243,45,22)" fg:x="995" fg:w="225"/><text x="79.3438%" y="575.50">kernel::plugins::mw::Middlew..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (225 samples, 17.89%)</title><rect x="79.0938%" y="549" width="17.8855%" height="15" fill="rgb(239,2,46)" fg:x="995" fg:w="225"/><text x="79.3438%" y="559.50">&lt;plugins_dynlib::DynamicMidd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (225 samples, 17.89%)</title><rect x="79.0938%" y="533" width="17.8855%" height="15" fill="rgb(241,101,0)" fg:x="995" fg:w="225"/><text x="79.3438%" y="543.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (225 samples, 17.89%)</title><rect x="79.0938%" y="517" width="17.8855%" height="15" fill="rgb(244,34,31)" fg:x="995" fg:w="225"/><text x="79.3438%" y="527.50">core::ops::function::FnOnce:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (225 samples, 17.89%)</title><rect x="79.0938%" y="501" width="17.8855%" height="15" fill="rgb(248,23,22)" fg:x="995" fg:w="225"/><text x="79.3438%" y="511.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (225 samples, 17.89%)</title><rect x="79.0938%" y="485" width="17.8855%" height="15" fill="rgb(218,27,48)" fg:x="995" fg:w="225"/><text x="79.3438%" y="495.50">core::ops::function::FnOnce:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (225 samples, 17.89%)</title><rect x="79.0938%" y="469" width="17.8855%" height="15" fill="rgb(232,78,1)" fg:x="995" fg:w="225"/><text x="79.3438%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (224 samples, 17.81%)</title><rect x="79.1733%" y="453" width="17.8060%" height="15" fill="rgb(233,169,12)" fg:x="996" fg:w="224"/><text x="79.4233%" y="463.50">&lt;engine::session::state::Sta..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (223 samples, 17.73%)</title><rect x="79.2528%" y="437" width="17.7266%" height="15" fill="rgb(225,222,54)" fg:x="997" fg:w="223"/><text x="79.5028%" y="447.50">&lt;plugins_core::looking::acti..</text></g><g><title>plugins_core::looking::model::new_area_observation (217 samples, 17.25%)</title><rect x="79.7297%" y="421" width="17.2496%" height="15" fill="rgb(245,126,29)" fg:x="1003" fg:w="217"/><text x="79.9797%" y="431.50">plugins_core::looking::mode..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="96.5024%" y="405" width="0.4769%" height="15" fill="rgb(241,63,48)" fg:x="1214" fg:w="6"/><text x="96.7524%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="96.7409%" y="389" width="0.2385%" height="15" fill="rgb(235,126,38)" fg:x="1217" fg:w="3"/><text x="96.9909%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="96.7409%" y="373" width="0.2385%" height="15" fill="rgb(232,96,49)" fg:x="1217" fg:w="3"/><text x="96.9909%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="96.7409%" y="357" width="0.2385%" height="15" fill="rgb(211,146,40)" fg:x="1217" fg:w="3"/><text x="96.9909%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="96.7409%" y="341" width="0.2385%" height="15" fill="rgb(247,93,44)" fg:x="1217" fg:w="3"/><text x="96.9909%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="96.8203%" y="325" width="0.1590%" height="15" fill="rgb(251,41,49)" fg:x="1218" fg:w="2"/><text x="97.0703%" y="335.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="96.8203%" y="309" width="0.1590%" height="15" fill="rgb(218,155,12)" fg:x="1218" fg:w="2"/><text x="97.0703%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="96.8203%" y="293" width="0.1590%" height="15" fill="rgb(221,161,30)" fg:x="1218" fg:w="2"/><text x="97.0703%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="96.8203%" y="277" width="0.1590%" height="15" fill="rgb(221,179,11)" fg:x="1218" fg:w="2"/><text x="97.0703%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="96.8203%" y="261" width="0.1590%" height="15" fill="rgb(224,170,48)" fg:x="1218" fg:w="2"/><text x="97.0703%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="96.8203%" y="245" width="0.1590%" height="15" fill="rgb(223,117,5)" fg:x="1218" fg:w="2"/><text x="97.0703%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.8998%" y="229" width="0.0795%" height="15" fill="rgb(209,52,20)" fg:x="1219" fg:w="1"/><text x="97.1498%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.9793%" y="549" width="0.0795%" height="15" fill="rgb(209,19,41)" fg:x="1220" fg:w="1"/><text x="97.2293%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.0588%" y="549" width="0.0795%" height="15" fill="rgb(210,177,12)" fg:x="1221" fg:w="1"/><text x="97.3088%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="97.1383%" y="549" width="0.0795%" height="15" fill="rgb(211,159,37)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1383%" y="533" width="0.0795%" height="15" fill="rgb(209,20,2)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1383%" y="517" width="0.0795%" height="15" fill="rgb(244,3,46)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.1383%" y="501" width="0.0795%" height="15" fill="rgb(220,94,38)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.1383%" y="485" width="0.0795%" height="15" fill="rgb(253,14,31)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.1383%" y="469" width="0.0795%" height="15" fill="rgb(234,176,13)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1383%" y="453" width="0.0795%" height="15" fill="rgb(218,62,25)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1383%" y="437" width="0.0795%" height="15" fill="rgb(216,124,40)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.1383%" y="421" width="0.0795%" height="15" fill="rgb(228,170,12)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.1383%" y="405" width="0.0795%" height="15" fill="rgb(231,226,5)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.1383%" y="389" width="0.0795%" height="15" fill="rgb(237,122,22)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.1383%" y="373" width="0.0795%" height="15" fill="rgb(209,185,25)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1383%" y="357" width="0.0795%" height="15" fill="rgb(228,200,32)" fg:x="1222" fg:w="1"/><text x="97.3883%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2178%" y="501" width="0.0795%" height="15" fill="rgb(217,140,10)" fg:x="1223" fg:w="1"/><text x="97.4678%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2178%" y="485" width="0.0795%" height="15" fill="rgb(253,17,24)" fg:x="1223" fg:w="1"/><text x="97.4678%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.2178%" y="517" width="0.1590%" height="15" fill="rgb(212,61,6)" fg:x="1223" fg:w="2"/><text x="97.4678%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2973%" y="501" width="0.0795%" height="15" fill="rgb(205,14,25)" fg:x="1224" fg:w="1"/><text x="97.5473%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2973%" y="485" width="0.0795%" height="15" fill="rgb(232,69,41)" fg:x="1224" fg:w="1"/><text x="97.5473%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.3768%" y="453" width="0.0795%" height="15" fill="rgb(241,106,47)" fg:x="1225" fg:w="1"/><text x="97.6268%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3768%" y="437" width="0.0795%" height="15" fill="rgb(210,213,53)" fg:x="1225" fg:w="1"/><text x="97.6268%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3768%" y="421" width="0.0795%" height="15" fill="rgb(253,175,27)" fg:x="1225" fg:w="1"/><text x="97.6268%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.3768%" y="405" width="0.0795%" height="15" fill="rgb(211,171,24)" fg:x="1225" fg:w="1"/><text x="97.6268%" y="415.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="97.4563%" y="453" width="0.0795%" height="15" fill="rgb(229,80,7)" fg:x="1226" fg:w="1"/><text x="97.7063%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.4563%" y="437" width="0.0795%" height="15" fill="rgb(212,46,39)" fg:x="1226" fg:w="1"/><text x="97.7063%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6153%" y="373" width="0.0795%" height="15" fill="rgb(240,80,45)" fg:x="1228" fg:w="1"/><text x="97.8653%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6153%" y="357" width="0.0795%" height="15" fill="rgb(253,177,40)" fg:x="1228" fg:w="1"/><text x="97.8653%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7742%" y="325" width="0.0795%" height="15" fill="rgb(249,200,15)" fg:x="1230" fg:w="1"/><text x="98.0242%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7742%" y="309" width="0.0795%" height="15" fill="rgb(217,78,26)" fg:x="1230" fg:w="1"/><text x="98.0242%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7742%" y="293" width="0.0795%" height="15" fill="rgb(254,151,32)" fg:x="1230" fg:w="1"/><text x="98.0242%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7742%" y="277" width="0.0795%" height="15" fill="rgb(226,165,27)" fg:x="1230" fg:w="1"/><text x="98.0242%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.7742%" y="261" width="0.0795%" height="15" fill="rgb(250,206,4)" fg:x="1230" fg:w="1"/><text x="98.0242%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="97.5358%" y="453" width="0.3975%" height="15" fill="rgb(231,229,27)" fg:x="1227" fg:w="5"/><text x="97.7858%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="97.5358%" y="437" width="0.3975%" height="15" fill="rgb(239,217,8)" fg:x="1227" fg:w="5"/><text x="97.7858%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="97.5358%" y="421" width="0.3975%" height="15" fill="rgb(225,204,27)" fg:x="1227" fg:w="5"/><text x="97.7858%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="97.5358%" y="405" width="0.3975%" height="15" fill="rgb(230,56,32)" fg:x="1227" fg:w="5"/><text x="97.7858%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="97.5358%" y="389" width="0.3975%" height="15" fill="rgb(222,56,27)" fg:x="1227" fg:w="5"/><text x="97.7858%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.6948%" y="373" width="0.2385%" height="15" fill="rgb(253,108,27)" fg:x="1229" fg:w="3"/><text x="97.9448%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.6948%" y="357" width="0.2385%" height="15" fill="rgb(212,87,36)" fg:x="1229" fg:w="3"/><text x="97.9448%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.7742%" y="341" width="0.1590%" height="15" fill="rgb(247,82,36)" fg:x="1230" fg:w="2"/><text x="98.0242%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.8537%" y="325" width="0.0795%" height="15" fill="rgb(222,143,9)" fg:x="1231" fg:w="1"/><text x="98.1037%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0127%" y="325" width="0.0795%" height="15" fill="rgb(238,162,48)" fg:x="1233" fg:w="1"/><text x="98.2627%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0127%" y="309" width="0.0795%" height="15" fill="rgb(221,59,43)" fg:x="1233" fg:w="1"/><text x="98.2627%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.0127%" y="293" width="0.0795%" height="15" fill="rgb(205,166,41)" fg:x="1233" fg:w="1"/><text x="98.2627%" y="303.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="98.0127%" y="277" width="0.0795%" height="15" fill="rgb(241,186,40)" fg:x="1233" fg:w="1"/><text x="98.2627%" y="287.50"></text></g><g><title>plugins_core::tools::contained_by (12 samples, 0.95%)</title><rect x="97.2178%" y="533" width="0.9539%" height="15" fill="rgb(216,119,35)" fg:x="1223" fg:w="12"/><text x="97.4678%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.79%)</title><rect x="97.3768%" y="517" width="0.7949%" height="15" fill="rgb(208,68,38)" fg:x="1225" fg:w="10"/><text x="97.6268%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.79%)</title><rect x="97.3768%" y="501" width="0.7949%" height="15" fill="rgb(217,113,1)" fg:x="1225" fg:w="10"/><text x="97.6268%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.79%)</title><rect x="97.3768%" y="485" width="0.7949%" height="15" fill="rgb(242,153,3)" fg:x="1225" fg:w="10"/><text x="97.6268%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.79%)</title><rect x="97.3768%" y="469" width="0.7949%" height="15" fill="rgb(229,76,35)" fg:x="1225" fg:w="10"/><text x="97.6268%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.9332%" y="453" width="0.2385%" height="15" fill="rgb(229,125,34)" fg:x="1232" fg:w="3"/><text x="98.1832%" y="463.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.9332%" y="437" width="0.2385%" height="15" fill="rgb(238,179,36)" fg:x="1232" fg:w="3"/><text x="98.1832%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.9332%" y="421" width="0.2385%" height="15" fill="rgb(244,183,19)" fg:x="1232" fg:w="3"/><text x="98.1832%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.9332%" y="405" width="0.2385%" height="15" fill="rgb(216,85,49)" fg:x="1232" fg:w="3"/><text x="98.1832%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.9332%" y="389" width="0.2385%" height="15" fill="rgb(208,161,47)" fg:x="1232" fg:w="3"/><text x="98.1832%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.9332%" y="373" width="0.2385%" height="15" fill="rgb(233,210,18)" fg:x="1232" fg:w="3"/><text x="98.1832%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.0127%" y="357" width="0.1590%" height="15" fill="rgb(205,104,42)" fg:x="1233" fg:w="2"/><text x="98.2627%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.0127%" y="341" width="0.1590%" height="15" fill="rgb(248,90,43)" fg:x="1233" fg:w="2"/><text x="98.2627%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.0922%" y="325" width="0.0795%" height="15" fill="rgb(206,198,11)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0922%" y="309" width="0.0795%" height="15" fill="rgb(239,165,27)" fg:x="1234" fg:w="1"/><text x="98.3422%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1717%" y="469" width="0.0795%" height="15" fill="rgb(246,44,32)" fg:x="1235" fg:w="1"/><text x="98.4217%" y="479.50"></text></g><g><title>engine::session::Session::captured (253 samples, 20.11%)</title><rect x="78.2194%" y="709" width="20.1113%" height="15" fill="rgb(252,65,42)" fg:x="984" fg:w="253"/><text x="78.4694%" y="719.50">engine::session::Session::captur..</text></g><g><title>engine::session::logs::capture (252 samples, 20.03%)</title><rect x="78.2989%" y="693" width="20.0318%" height="15" fill="rgb(246,197,18)" fg:x="985" fg:w="252"/><text x="78.5489%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (251 samples, 19.95%)</title><rect x="78.3784%" y="677" width="19.9523%" height="15" fill="rgb(216,192,4)" fg:x="986" fg:w="251"/><text x="78.6284%" y="687.50">tracing_core::dispatcher::with_..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (250 samples, 19.87%)</title><rect x="78.4579%" y="661" width="19.8728%" height="15" fill="rgb(208,117,10)" fg:x="987" fg:w="250"/><text x="78.7079%" y="671.50">&lt;engine::session::Session as ke..</text></g><g><title>kernel::plugins::mw::apply_middleware (250 samples, 19.87%)</title><rect x="78.4579%" y="645" width="19.8728%" height="15" fill="rgb(240,61,47)" fg:x="987" fg:w="250"/><text x="78.7079%" y="655.50">kernel::plugins::mw::apply_midd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (250 samples, 19.87%)</title><rect x="78.4579%" y="629" width="19.8728%" height="15" fill="rgb(228,178,21)" fg:x="987" fg:w="250"/><text x="78.7079%" y="639.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (250 samples, 19.87%)</title><rect x="78.4579%" y="613" width="19.8728%" height="15" fill="rgb(219,96,54)" fg:x="987" fg:w="250"/><text x="78.7079%" y="623.50">&lt;engine::session::ExpandSurroun..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (242 samples, 19.24%)</title><rect x="79.0938%" y="597" width="19.2369%" height="15" fill="rgb(250,177,24)" fg:x="995" fg:w="242"/><text x="79.3438%" y="607.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (242 samples, 19.24%)</title><rect x="79.0938%" y="581" width="19.2369%" height="15" fill="rgb(242,154,46)" fg:x="995" fg:w="242"/><text x="79.3438%" y="591.50">&lt;plugins_rune::RuneMiddleware ..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (17 samples, 1.35%)</title><rect x="96.9793%" y="565" width="1.3514%" height="15" fill="rgb(226,176,29)" fg:x="1220" fg:w="17"/><text x="97.2293%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (14 samples, 1.11%)</title><rect x="97.2178%" y="549" width="1.1129%" height="15" fill="rgb(226,29,2)" fg:x="1223" fg:w="14"/><text x="97.4678%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="98.1717%" y="533" width="0.1590%" height="15" fill="rgb(237,104,14)" fg:x="1235" fg:w="2"/><text x="98.4217%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.1717%" y="517" width="0.1590%" height="15" fill="rgb(245,207,31)" fg:x="1235" fg:w="2"/><text x="98.4217%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.1717%" y="501" width="0.1590%" height="15" fill="rgb(229,211,45)" fg:x="1235" fg:w="2"/><text x="98.4217%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.1717%" y="485" width="0.1590%" height="15" fill="rgb(229,113,15)" fg:x="1235" fg:w="2"/><text x="98.4217%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.2512%" y="469" width="0.0795%" height="15" fill="rgb(237,147,15)" fg:x="1236" fg:w="1"/><text x="98.5012%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.2512%" y="453" width="0.0795%" height="15" fill="rgb(244,120,12)" fg:x="1236" fg:w="1"/><text x="98.5012%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.2512%" y="437" width="0.0795%" height="15" fill="rgb(205,120,12)" fg:x="1236" fg:w="1"/><text x="98.5012%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2512%" y="421" width="0.0795%" height="15" fill="rgb(231,26,45)" fg:x="1236" fg:w="1"/><text x="98.5012%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2512%" y="405" width="0.0795%" height="15" fill="rgb(246,98,1)" fg:x="1236" fg:w="1"/><text x="98.5012%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.3307%" y="629" width="0.1590%" height="15" fill="rgb(207,68,45)" fg:x="1237" fg:w="2"/><text x="98.5807%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.3307%" y="613" width="0.1590%" height="15" fill="rgb(231,27,38)" fg:x="1237" fg:w="2"/><text x="98.5807%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.3307%" y="597" width="0.1590%" height="15" fill="rgb(214,223,3)" fg:x="1237" fg:w="2"/><text x="98.5807%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.3307%" y="581" width="0.1590%" height="15" fill="rgb(228,195,46)" fg:x="1237" fg:w="2"/><text x="98.5807%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.3307%" y="565" width="0.1590%" height="15" fill="rgb(231,100,42)" fg:x="1237" fg:w="2"/><text x="98.5807%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="98.3307%" y="549" width="0.1590%" height="15" fill="rgb(236,53,4)" fg:x="1237" fg:w="2"/><text x="98.5807%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="98.3307%" y="533" width="0.1590%" height="15" fill="rgb(230,152,12)" fg:x="1237" fg:w="2"/><text x="98.5807%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="98.3307%" y="517" width="0.1590%" height="15" fill="rgb(226,101,19)" fg:x="1237" fg:w="2"/><text x="98.5807%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4102%" y="501" width="0.0795%" height="15" fill="rgb(250,149,32)" fg:x="1238" fg:w="1"/><text x="98.6602%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4102%" y="485" width="0.0795%" height="15" fill="rgb(232,178,12)" fg:x="1238" fg:w="1"/><text x="98.6602%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.4102%" y="469" width="0.0795%" height="15" fill="rgb(246,151,17)" fg:x="1238" fg:w="1"/><text x="98.6602%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.4102%" y="453" width="0.0795%" height="15" fill="rgb(252,17,51)" fg:x="1238" fg:w="1"/><text x="98.6602%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.4102%" y="437" width="0.0795%" height="15" fill="rgb(250,207,23)" fg:x="1238" fg:w="1"/><text x="98.6602%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.4102%" y="421" width="0.0795%" height="15" fill="rgb(205,27,5)" fg:x="1238" fg:w="1"/><text x="98.6602%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.4102%" y="405" width="0.0795%" height="15" fill="rgb(224,32,19)" fg:x="1238" fg:w="1"/><text x="98.6602%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="98.3307%" y="645" width="0.2385%" height="15" fill="rgb(247,214,40)" fg:x="1237" fg:w="3"/><text x="98.5807%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4897%" y="629" width="0.0795%" height="15" fill="rgb(239,199,17)" fg:x="1239" fg:w="1"/><text x="98.7397%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="98.3307%" y="661" width="0.3180%" height="15" fill="rgb(251,159,9)" fg:x="1237" fg:w="4"/><text x="98.5807%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5692%" y="645" width="0.0795%" height="15" fill="rgb(225,78,32)" fg:x="1240" fg:w="1"/><text x="98.8192%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6486%" y="661" width="0.0795%" height="15" fill="rgb(206,97,47)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.6486%" y="645" width="0.0795%" height="15" fill="rgb(227,107,4)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.6486%" y="629" width="0.0795%" height="15" fill="rgb(241,146,50)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6486%" y="613" width="0.0795%" height="15" fill="rgb(232,92,30)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6486%" y="597" width="0.0795%" height="15" fill="rgb(222,0,40)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.6486%" y="581" width="0.0795%" height="15" fill="rgb(219,54,33)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.6486%" y="565" width="0.0795%" height="15" fill="rgb(226,209,28)" fg:x="1241" fg:w="1"/><text x="98.8986%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (6 samples, 0.48%)</title><rect x="98.3307%" y="693" width="0.4769%" height="15" fill="rgb(254,205,35)" fg:x="1237" fg:w="6"/><text x="98.5807%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="98.3307%" y="677" width="0.4769%" height="15" fill="rgb(230,159,3)" fg:x="1237" fg:w="6"/><text x="98.5807%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7281%" y="661" width="0.0795%" height="15" fill="rgb(232,190,24)" fg:x="1242" fg:w="1"/><text x="98.9781%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7281%" y="645" width="0.0795%" height="15" fill="rgb(217,227,44)" fg:x="1242" fg:w="1"/><text x="98.9781%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7281%" y="629" width="0.0795%" height="15" fill="rgb(236,211,1)" fg:x="1242" fg:w="1"/><text x="98.9781%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7281%" y="613" width="0.0795%" height="15" fill="rgb(250,127,46)" fg:x="1242" fg:w="1"/><text x="98.9781%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7281%" y="597" width="0.0795%" height="15" fill="rgb(229,213,6)" fg:x="1242" fg:w="1"/><text x="98.9781%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7281%" y="581" width="0.0795%" height="15" fill="rgb(237,15,36)" fg:x="1242" fg:w="1"/><text x="98.9781%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.8076%" y="677" width="0.0795%" height="15" fill="rgb(213,131,41)" fg:x="1243" fg:w="1"/><text x="99.0576%" y="687.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9666%" y="581" width="0.0795%" height="15" fill="rgb(225,82,44)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9666%" y="565" width="0.0795%" height="15" fill="rgb(249,42,11)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9666%" y="549" width="0.0795%" height="15" fill="rgb(253,11,29)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9666%" y="533" width="0.0795%" height="15" fill="rgb(206,8,54)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.9666%" y="517" width="0.0795%" height="15" fill="rgb(222,186,2)" fg:x="1245" fg:w="1"/><text x="99.2166%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="98.8871%" y="677" width="0.2385%" height="15" fill="rgb(221,206,53)" fg:x="1244" fg:w="3"/><text x="99.1371%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.9666%" y="661" width="0.1590%" height="15" fill="rgb(230,150,21)" fg:x="1245" fg:w="2"/><text x="99.2166%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9666%" y="645" width="0.1590%" height="15" fill="rgb(253,202,10)" fg:x="1245" fg:w="2"/><text x="99.2166%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.9666%" y="629" width="0.1590%" height="15" fill="rgb(238,109,40)" fg:x="1245" fg:w="2"/><text x="99.2166%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9666%" y="613" width="0.1590%" height="15" fill="rgb(247,120,22)" fg:x="1245" fg:w="2"/><text x="99.2166%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.9666%" y="597" width="0.1590%" height="15" fill="rgb(207,43,30)" fg:x="1245" fg:w="2"/><text x="99.2166%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.0461%" y="581" width="0.0795%" height="15" fill="rgb(213,211,24)" fg:x="1246" fg:w="1"/><text x="99.2961%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.0461%" y="565" width="0.0795%" height="15" fill="rgb(239,73,39)" fg:x="1246" fg:w="1"/><text x="99.2961%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.0461%" y="549" width="0.0795%" height="15" fill="rgb(245,182,19)" fg:x="1246" fg:w="1"/><text x="99.2961%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.95%)</title><rect x="98.3307%" y="709" width="0.9539%" height="15" fill="rgb(247,143,26)" fg:x="1237" fg:w="12"/><text x="98.5807%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.8076%" y="693" width="0.4769%" height="15" fill="rgb(228,191,23)" fg:x="1243" fg:w="6"/><text x="99.0576%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.1256%" y="677" width="0.1590%" height="15" fill="rgb(253,165,31)" fg:x="1247" fg:w="2"/><text x="99.3756%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.1256%" y="661" width="0.1590%" height="15" fill="rgb(234,138,20)" fg:x="1247" fg:w="2"/><text x="99.3756%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1256%" y="645" width="0.1590%" height="15" fill="rgb(218,191,29)" fg:x="1247" fg:w="2"/><text x="99.3756%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1256%" y="629" width="0.1590%" height="15" fill="rgb(221,157,19)" fg:x="1247" fg:w="2"/><text x="99.3756%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1256%" y="613" width="0.1590%" height="15" fill="rgb(237,26,42)" fg:x="1247" fg:w="2"/><text x="99.3756%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1256%" y="597" width="0.1590%" height="15" fill="rgb(220,163,24)" fg:x="1247" fg:w="2"/><text x="99.3756%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1256%" y="581" width="0.1590%" height="15" fill="rgb(242,115,20)" fg:x="1247" fg:w="2"/><text x="99.3756%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2051%" y="565" width="0.0795%" height="15" fill="rgb(210,206,9)" fg:x="1248" fg:w="1"/><text x="99.4551%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2051%" y="549" width="0.0795%" height="15" fill="rgb(208,71,17)" fg:x="1248" fg:w="1"/><text x="99.4551%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2051%" y="533" width="0.0795%" height="15" fill="rgb(233,7,5)" fg:x="1248" fg:w="1"/><text x="99.4551%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2051%" y="517" width="0.0795%" height="15" fill="rgb(207,92,33)" fg:x="1248" fg:w="1"/><text x="99.4551%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.2051%" y="501" width="0.0795%" height="15" fill="rgb(218,87,9)" fg:x="1248" fg:w="1"/><text x="99.4551%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.2051%" y="485" width="0.0795%" height="15" fill="rgb(219,47,37)" fg:x="1248" fg:w="1"/><text x="99.4551%" y="495.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.2846%" y="709" width="0.0795%" height="15" fill="rgb(221,152,34)" fg:x="1249" fg:w="1"/><text x="99.5346%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.2846%" y="693" width="0.0795%" height="15" fill="rgb(235,176,21)" fg:x="1249" fg:w="1"/><text x="99.5346%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2846%" y="677" width="0.0795%" height="15" fill="rgb(232,212,21)" fg:x="1249" fg:w="1"/><text x="99.5346%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2846%" y="661" width="0.0795%" height="15" fill="rgb(245,82,39)" fg:x="1249" fg:w="1"/><text x="99.5346%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.4436%" y="661" width="0.0795%" height="15" fill="rgb(241,52,51)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4436%" y="645" width="0.0795%" height="15" fill="rgb(219,91,24)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4436%" y="629" width="0.0795%" height="15" fill="rgb(241,142,12)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4436%" y="613" width="0.0795%" height="15" fill="rgb(230,27,9)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4436%" y="597" width="0.0795%" height="15" fill="rgb(249,181,32)" fg:x="1251" fg:w="1"/><text x="99.6936%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.6025%" y="613" width="0.0795%" height="15" fill="rgb(230,107,3)" fg:x="1253" fg:w="1"/><text x="99.8525%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="99.5231%" y="661" width="0.3180%" height="15" fill="rgb(246,204,14)" fg:x="1252" fg:w="4"/><text x="99.7731%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="99.5231%" y="645" width="0.3180%" height="15" fill="rgb(213,192,47)" fg:x="1252" fg:w="4"/><text x="99.7731%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.5231%" y="629" width="0.3180%" height="15" fill="rgb(240,44,36)" fg:x="1252" fg:w="4"/><text x="99.7731%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6820%" y="613" width="0.1590%" height="15" fill="rgb(244,209,38)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6820%" y="597" width="0.1590%" height="15" fill="rgb(219,34,37)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6820%" y="581" width="0.1590%" height="15" fill="rgb(210,28,6)" fg:x="1254" fg:w="2"/><text x="99.9320%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7615%" y="565" width="0.0795%" height="15" fill="rgb(244,110,52)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7615%" y="549" width="0.0795%" height="15" fill="rgb(254,124,47)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7615%" y="533" width="0.0795%" height="15" fill="rgb(254,110,13)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7615%" y="517" width="0.0795%" height="15" fill="rgb(252,57,21)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.7615%" y="501" width="0.0795%" height="15" fill="rgb(242,60,45)" fg:x="1255" fg:w="1"/><text x="100.0115%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8410%" y="533" width="0.0795%" height="15" fill="rgb(234,49,30)" fg:x="1256" fg:w="1"/><text x="100.0910%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8410%" y="517" width="0.0795%" height="15" fill="rgb(218,98,6)" fg:x="1256" fg:w="1"/><text x="100.0910%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8410%" y="501" width="0.0795%" height="15" fill="rgb(220,174,29)" fg:x="1256" fg:w="1"/><text x="100.0910%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.8410%" y="485" width="0.0795%" height="15" fill="rgb(236,163,23)" fg:x="1256" fg:w="1"/><text x="100.0910%" y="495.50"></text></g><g><title>all (1,258 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(242,114,45)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-4ed3b75e (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(232,10,53)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1087.50">simple-4ed3b75e</text></g><g><title>_start (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(245,108,29)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(240,89,53)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(226,60,45)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,258 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(230,41,44)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,258 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(230,26,20)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,258 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(237,170,32)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,258 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(212,35,42)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,258 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(227,31,34)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,258 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(216,19,18)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,258 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(211,133,42)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,258 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(244,66,13)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,258 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(218,185,50)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,258 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,258 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(221,125,0)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,258 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(247,126,27)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,258 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(250,138,30)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,258 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(230,151,9)" fg:x="0" fg:w="1258"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (435 samples, 34.58%)</title><rect x="65.4213%" y="789" width="34.5787%" height="15" fill="rgb(233,80,38)" fg:x="823" fg:w="435"/><text x="65.6713%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routi..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (435 samples, 34.58%)</title><rect x="65.4213%" y="773" width="34.5787%" height="15" fill="rgb(232,68,43)" fg:x="823" fg:w="435"/><text x="65.6713%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (435 samples, 34.58%)</title><rect x="65.4213%" y="757" width="34.5787%" height="15" fill="rgb(254,5,50)" fg:x="823" fg:w="435"/><text x="65.6713%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (276 samples, 21.94%)</title><rect x="78.0604%" y="741" width="21.9396%" height="15" fill="rgb(225,45,5)" fg:x="982" fg:w="276"/><text x="78.3104%" y="751.50">engine::session::Session::evaluate_..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (276 samples, 21.94%)</title><rect x="78.0604%" y="725" width="21.9396%" height="15" fill="rgb(239,22,3)" fg:x="982" fg:w="276"/><text x="78.3104%" y="735.50">engine::session::Session::evaluate_..</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.64%)</title><rect x="99.3641%" y="709" width="0.6359%" height="15" fill="rgb(243,129,0)" fg:x="1250" fg:w="8"/><text x="99.6141%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="99.3641%" y="693" width="0.6359%" height="15" fill="rgb(223,164,0)" fg:x="1250" fg:w="8"/><text x="99.6141%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="99.4436%" y="677" width="0.5564%" height="15" fill="rgb(221,46,29)" fg:x="1251" fg:w="7"/><text x="99.6936%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8410%" y="661" width="0.1590%" height="15" fill="rgb(205,97,47)" fg:x="1256" fg:w="2"/><text x="100.0910%" y="671.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8410%" y="645" width="0.1590%" height="15" fill="rgb(249,14,8)" fg:x="1256" fg:w="2"/><text x="100.0910%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8410%" y="629" width="0.1590%" height="15" fill="rgb(216,77,3)" fg:x="1256" fg:w="2"/><text x="100.0910%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8410%" y="613" width="0.1590%" height="15" fill="rgb(206,168,54)" fg:x="1256" fg:w="2"/><text x="100.0910%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8410%" y="597" width="0.1590%" height="15" fill="rgb(236,3,41)" fg:x="1256" fg:w="2"/><text x="100.0910%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8410%" y="581" width="0.1590%" height="15" fill="rgb(231,132,24)" fg:x="1256" fg:w="2"/><text x="100.0910%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8410%" y="565" width="0.1590%" height="15" fill="rgb(227,221,40)" fg:x="1256" fg:w="2"/><text x="100.0910%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8410%" y="549" width="0.1590%" height="15" fill="rgb(233,151,11)" fg:x="1256" fg:w="2"/><text x="100.0910%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9205%" y="533" width="0.0795%" height="15" fill="rgb(247,81,35)" fg:x="1257" fg:w="1"/><text x="100.1705%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.9205%" y="517" width="0.0795%" height="15" fill="rgb(243,128,48)" fg:x="1257" fg:w="1"/><text x="100.1705%" y="527.50"></text></g></svg></svg>