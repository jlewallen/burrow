<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1244"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="661" width="0.0804%" height="15" fill="rgb(212,59,30)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0804%" y="645" width="0.0804%" height="15" fill="rgb(213,80,3)" fg:x="1" fg:w="1"/><text x="0.3304%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0804%" y="629" width="0.0804%" height="15" fill="rgb(251,178,7)" fg:x="1" fg:w="1"/><text x="0.3304%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0000%" y="677" width="0.2412%" height="15" fill="rgb(213,154,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0804%" y="661" width="0.1608%" height="15" fill="rgb(238,165,49)" fg:x="1" fg:w="2"/><text x="0.3304%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.1608%" y="645" width="0.0804%" height="15" fill="rgb(248,91,46)" fg:x="2" fg:w="1"/><text x="0.4108%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1608%" y="629" width="0.0804%" height="15" fill="rgb(244,21,52)" fg:x="2" fg:w="1"/><text x="0.4108%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2412%" y="677" width="0.0804%" height="15" fill="rgb(247,122,20)" fg:x="3" fg:w="1"/><text x="0.4912%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0000%" y="709" width="0.4019%" height="15" fill="rgb(218,27,9)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.0000%" y="693" width="0.4019%" height="15" fill="rgb(246,7,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3215%" y="677" width="0.0804%" height="15" fill="rgb(227,135,54)" fg:x="4" fg:w="1"/><text x="0.5715%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4019%" y="693" width="0.1608%" height="15" fill="rgb(247,14,11)" fg:x="5" fg:w="2"/><text x="0.6519%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.5627%" y="661" width="0.0804%" height="15" fill="rgb(206,149,34)" fg:x="7" fg:w="1"/><text x="0.8127%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.5627%" y="693" width="0.3215%" height="15" fill="rgb(227,228,4)" fg:x="7" fg:w="4"/><text x="0.8127%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.5627%" y="677" width="0.3215%" height="15" fill="rgb(238,218,28)" fg:x="7" fg:w="4"/><text x="0.8127%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.6431%" y="661" width="0.2412%" height="15" fill="rgb(252,86,40)" fg:x="8" fg:w="3"/><text x="0.8931%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (3 samples, 0.24%)</title><rect x="0.6431%" y="645" width="0.2412%" height="15" fill="rgb(251,225,11)" fg:x="8" fg:w="3"/><text x="0.8931%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="0.6431%" y="629" width="0.2412%" height="15" fill="rgb(206,46,49)" fg:x="8" fg:w="3"/><text x="0.8931%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.7235%" y="613" width="0.1608%" height="15" fill="rgb(245,128,24)" fg:x="9" fg:w="2"/><text x="0.9735%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0450%" y="613" width="0.0804%" height="15" fill="rgb(219,177,34)" fg:x="13" fg:w="1"/><text x="1.2950%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="1.1254%" y="613" width="0.2412%" height="15" fill="rgb(218,60,48)" fg:x="14" fg:w="3"/><text x="1.3754%" y="623.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="1.4469%" y="597" width="0.4019%" height="15" fill="rgb(221,11,5)" fg:x="18" fg:w="5"/><text x="1.6969%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8489%" y="581" width="0.0804%" height="15" fill="rgb(220,148,13)" fg:x="23" fg:w="1"/><text x="2.0989%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9293%" y="549" width="0.0804%" height="15" fill="rgb(210,16,3)" fg:x="24" fg:w="1"/><text x="2.1793%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.9293%" y="565" width="0.1608%" height="15" fill="rgb(236,80,2)" fg:x="24" fg:w="2"/><text x="2.1793%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0096%" y="549" width="0.0804%" height="15" fill="rgb(239,129,19)" fg:x="25" fg:w="1"/><text x="2.2596%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0096%" y="533" width="0.0804%" height="15" fill="rgb(220,106,35)" fg:x="25" fg:w="1"/><text x="2.2596%" y="543.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="2.0900%" y="565" width="0.2412%" height="15" fill="rgb(252,139,45)" fg:x="26" fg:w="3"/><text x="2.3400%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.3312%" y="565" width="0.1608%" height="15" fill="rgb(229,8,36)" fg:x="29" fg:w="2"/><text x="2.5812%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4116%" y="549" width="0.0804%" height="15" fill="rgb(230,126,33)" fg:x="30" fg:w="1"/><text x="2.6616%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.77%)</title><rect x="0.9646%" y="629" width="1.7685%" height="15" fill="rgb(239,140,21)" fg:x="12" fg:w="22"/><text x="1.2146%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (17 samples, 1.37%)</title><rect x="1.3666%" y="613" width="1.3666%" height="15" fill="rgb(254,104,9)" fg:x="17" fg:w="17"/><text x="1.6166%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="1.8489%" y="597" width="0.8842%" height="15" fill="rgb(239,52,14)" fg:x="23" fg:w="11"/><text x="2.0989%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="1.9293%" y="581" width="0.8039%" height="15" fill="rgb(208,227,44)" fg:x="24" fg:w="10"/><text x="2.1793%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.4920%" y="565" width="0.2412%" height="15" fill="rgb(246,18,19)" fg:x="31" fg:w="3"/><text x="2.7420%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.5723%" y="549" width="0.1608%" height="15" fill="rgb(235,228,25)" fg:x="32" fg:w="2"/><text x="2.8223%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.8939%" y="597" width="0.1608%" height="15" fill="rgb(240,156,20)" fg:x="36" fg:w="2"/><text x="3.1439%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.0547%" y="597" width="0.0804%" height="15" fill="rgb(224,8,20)" fg:x="38" fg:w="1"/><text x="3.3047%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="3.1350%" y="565" width="0.1608%" height="15" fill="rgb(214,12,52)" fg:x="39" fg:w="2"/><text x="3.3850%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.2958%" y="565" width="0.0804%" height="15" fill="rgb(211,220,47)" fg:x="41" fg:w="1"/><text x="3.5458%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="3.1350%" y="581" width="0.4019%" height="15" fill="rgb(250,173,5)" fg:x="39" fg:w="5"/><text x="3.3850%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.3762%" y="565" width="0.1608%" height="15" fill="rgb(250,125,52)" fg:x="42" fg:w="2"/><text x="3.6262%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.4566%" y="549" width="0.0804%" height="15" fill="rgb(209,133,18)" fg:x="43" fg:w="1"/><text x="3.7066%" y="559.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="3.5370%" y="581" width="0.2412%" height="15" fill="rgb(216,173,22)" fg:x="44" fg:w="3"/><text x="3.7870%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.13%)</title><rect x="2.7331%" y="613" width="1.1254%" height="15" fill="rgb(205,3,22)" fg:x="34" fg:w="14"/><text x="2.9831%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="3.1350%" y="597" width="0.7235%" height="15" fill="rgb(248,22,20)" fg:x="39" fg:w="9"/><text x="3.3850%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7781%" y="581" width="0.0804%" height="15" fill="rgb(233,6,29)" fg:x="47" fg:w="1"/><text x="4.0281%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.7781%" y="565" width="0.0804%" height="15" fill="rgb(240,22,54)" fg:x="47" fg:w="1"/><text x="4.0281%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.7781%" y="549" width="0.0804%" height="15" fill="rgb(231,133,32)" fg:x="47" fg:w="1"/><text x="4.0281%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 3.05%)</title><rect x="0.8842%" y="677" width="3.0547%" height="15" fill="rgb(248,193,4)" fg:x="11" fg:w="38"/><text x="1.1342%" y="687.50">&lt;ha..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (38 samples, 3.05%)</title><rect x="0.8842%" y="661" width="3.0547%" height="15" fill="rgb(211,178,46)" fg:x="11" fg:w="38"/><text x="1.1342%" y="671.50">cor..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 2.97%)</title><rect x="0.9646%" y="645" width="2.9743%" height="15" fill="rgb(224,5,42)" fg:x="12" fg:w="37"/><text x="1.2146%" y="655.50">&lt;al..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.21%)</title><rect x="2.7331%" y="629" width="1.2058%" height="15" fill="rgb(239,176,25)" fg:x="34" fg:w="15"/><text x="2.9831%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8585%" y="613" width="0.0804%" height="15" fill="rgb(245,187,50)" fg:x="48" fg:w="1"/><text x="4.1085%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (39 samples, 3.14%)</title><rect x="0.8842%" y="693" width="3.1350%" height="15" fill="rgb(248,24,15)" fg:x="11" fg:w="39"/><text x="1.1342%" y="703.50">cor..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9389%" y="677" width="0.0804%" height="15" fill="rgb(205,166,13)" fg:x="49" fg:w="1"/><text x="4.1889%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 3.70%)</title><rect x="0.4019%" y="709" width="3.6977%" height="15" fill="rgb(208,114,23)" fg:x="5" fg:w="46"/><text x="0.6519%" y="719.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="4.0193%" y="693" width="0.0804%" height="15" fill="rgb(239,127,18)" fg:x="50" fg:w="1"/><text x="4.2693%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.0997%" y="661" width="0.0804%" height="15" fill="rgb(219,154,28)" fg:x="51" fg:w="1"/><text x="4.3497%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="4.0997%" y="645" width="0.0804%" height="15" fill="rgb(225,157,23)" fg:x="51" fg:w="1"/><text x="4.3497%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.1801%" y="645" width="0.0804%" height="15" fill="rgb(219,8,6)" fg:x="52" fg:w="1"/><text x="4.4301%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.1801%" y="629" width="0.0804%" height="15" fill="rgb(212,47,6)" fg:x="52" fg:w="1"/><text x="4.4301%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.1801%" y="613" width="0.0804%" height="15" fill="rgb(224,190,4)" fg:x="52" fg:w="1"/><text x="4.4301%" y="623.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.5820%" y="581" width="0.0804%" height="15" fill="rgb(239,183,29)" fg:x="57" fg:w="1"/><text x="4.8320%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.5820%" y="565" width="0.0804%" height="15" fill="rgb(213,57,7)" fg:x="57" fg:w="1"/><text x="4.8320%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.5820%" y="613" width="0.1608%" height="15" fill="rgb(216,148,1)" fg:x="57" fg:w="2"/><text x="4.8320%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.5820%" y="597" width="0.1608%" height="15" fill="rgb(236,182,29)" fg:x="57" fg:w="2"/><text x="4.8320%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.6624%" y="581" width="0.0804%" height="15" fill="rgb(244,120,48)" fg:x="58" fg:w="1"/><text x="4.9124%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.6624%" y="565" width="0.0804%" height="15" fill="rgb(206,71,34)" fg:x="58" fg:w="1"/><text x="4.9124%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.8232%" y="581" width="0.0804%" height="15" fill="rgb(242,32,6)" fg:x="60" fg:w="1"/><text x="5.0732%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.8232%" y="565" width="0.0804%" height="15" fill="rgb(241,35,3)" fg:x="60" fg:w="1"/><text x="5.0732%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.9035%" y="581" width="0.0804%" height="15" fill="rgb(222,62,19)" fg:x="61" fg:w="1"/><text x="5.1535%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.9035%" y="565" width="0.0804%" height="15" fill="rgb(223,110,41)" fg:x="61" fg:w="1"/><text x="5.1535%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9035%" y="549" width="0.0804%" height="15" fill="rgb(208,224,4)" fg:x="61" fg:w="1"/><text x="5.1535%" y="559.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.9839%" y="581" width="0.0804%" height="15" fill="rgb(241,137,19)" fg:x="62" fg:w="1"/><text x="5.2339%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9839%" y="565" width="0.0804%" height="15" fill="rgb(244,24,17)" fg:x="62" fg:w="1"/><text x="5.2339%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="4.7428%" y="613" width="0.4019%" height="15" fill="rgb(245,178,49)" fg:x="59" fg:w="5"/><text x="4.9928%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="4.7428%" y="597" width="0.4019%" height="15" fill="rgb(219,160,38)" fg:x="59" fg:w="5"/><text x="4.9928%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.0643%" y="581" width="0.0804%" height="15" fill="rgb(228,137,14)" fg:x="63" fg:w="1"/><text x="5.3143%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0643%" y="565" width="0.0804%" height="15" fill="rgb(237,134,11)" fg:x="63" fg:w="1"/><text x="5.3143%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.1447%" y="613" width="0.0804%" height="15" fill="rgb(211,126,44)" fg:x="64" fg:w="1"/><text x="5.3947%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.1447%" y="597" width="0.0804%" height="15" fill="rgb(226,171,33)" fg:x="64" fg:w="1"/><text x="5.3947%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.1447%" y="581" width="0.0804%" height="15" fill="rgb(253,99,13)" fg:x="64" fg:w="1"/><text x="5.3947%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.2251%" y="613" width="0.0804%" height="15" fill="rgb(244,48,7)" fg:x="65" fg:w="1"/><text x="5.4751%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.2251%" y="597" width="0.0804%" height="15" fill="rgb(244,217,54)" fg:x="65" fg:w="1"/><text x="5.4751%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="5.2251%" y="581" width="0.0804%" height="15" fill="rgb(224,15,18)" fg:x="65" fg:w="1"/><text x="5.4751%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.2251%" y="565" width="0.0804%" height="15" fill="rgb(244,99,12)" fg:x="65" fg:w="1"/><text x="5.4751%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="5.3055%" y="613" width="0.0804%" height="15" fill="rgb(233,226,8)" fg:x="66" fg:w="1"/><text x="5.5555%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="5.3055%" y="597" width="0.0804%" height="15" fill="rgb(229,211,3)" fg:x="66" fg:w="1"/><text x="5.5555%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="5.3055%" y="581" width="0.0804%" height="15" fill="rgb(216,140,21)" fg:x="66" fg:w="1"/><text x="5.5555%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="5.3055%" y="565" width="0.0804%" height="15" fill="rgb(234,122,30)" fg:x="66" fg:w="1"/><text x="5.5555%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (13 samples, 1.05%)</title><rect x="4.4212%" y="629" width="1.0450%" height="15" fill="rgb(236,25,46)" fg:x="55" fg:w="13"/><text x="4.6712%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.3859%" y="613" width="0.0804%" height="15" fill="rgb(217,52,54)" fg:x="67" fg:w="1"/><text x="5.6359%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.4662%" y="469" width="0.0804%" height="15" fill="rgb(222,29,26)" fg:x="68" fg:w="1"/><text x="5.7162%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.4662%" y="453" width="0.0804%" height="15" fill="rgb(216,177,29)" fg:x="68" fg:w="1"/><text x="5.7162%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.4662%" y="437" width="0.0804%" height="15" fill="rgb(247,136,51)" fg:x="68" fg:w="1"/><text x="5.7162%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="5.4662%" y="421" width="0.0804%" height="15" fill="rgb(231,47,47)" fg:x="68" fg:w="1"/><text x="5.7162%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.4662%" y="405" width="0.0804%" height="15" fill="rgb(211,192,36)" fg:x="68" fg:w="1"/><text x="5.7162%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="5.4662%" y="389" width="0.0804%" height="15" fill="rgb(229,156,32)" fg:x="68" fg:w="1"/><text x="5.7162%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="5.4662%" y="373" width="0.0804%" height="15" fill="rgb(248,213,20)" fg:x="68" fg:w="1"/><text x="5.7162%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="5.4662%" y="357" width="0.0804%" height="15" fill="rgb(217,64,7)" fg:x="68" fg:w="1"/><text x="5.7162%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.4662%" y="341" width="0.0804%" height="15" fill="rgb(232,142,8)" fg:x="68" fg:w="1"/><text x="5.7162%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="5.4662%" y="613" width="0.1608%" height="15" fill="rgb(224,92,44)" fg:x="68" fg:w="2"/><text x="5.7162%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="5.4662%" y="597" width="0.1608%" height="15" fill="rgb(214,169,17)" fg:x="68" fg:w="2"/><text x="5.7162%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="5.4662%" y="581" width="0.1608%" height="15" fill="rgb(210,59,37)" fg:x="68" fg:w="2"/><text x="5.7162%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.4662%" y="565" width="0.1608%" height="15" fill="rgb(214,116,48)" fg:x="68" fg:w="2"/><text x="5.7162%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.4662%" y="549" width="0.1608%" height="15" fill="rgb(244,191,6)" fg:x="68" fg:w="2"/><text x="5.7162%" y="559.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="5.4662%" y="533" width="0.1608%" height="15" fill="rgb(241,50,52)" fg:x="68" fg:w="2"/><text x="5.7162%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="5.4662%" y="517" width="0.1608%" height="15" fill="rgb(236,75,39)" fg:x="68" fg:w="2"/><text x="5.7162%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="5.4662%" y="501" width="0.1608%" height="15" fill="rgb(236,99,0)" fg:x="68" fg:w="2"/><text x="5.7162%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="5.4662%" y="485" width="0.1608%" height="15" fill="rgb(207,202,15)" fg:x="68" fg:w="2"/><text x="5.7162%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.5466%" y="469" width="0.0804%" height="15" fill="rgb(233,207,14)" fg:x="69" fg:w="1"/><text x="5.7966%" y="479.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="5.6270%" y="613" width="0.0804%" height="15" fill="rgb(226,27,51)" fg:x="70" fg:w="1"/><text x="5.8770%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="5.6270%" y="597" width="0.0804%" height="15" fill="rgb(206,104,42)" fg:x="70" fg:w="1"/><text x="5.8770%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="5.6270%" y="581" width="0.0804%" height="15" fill="rgb(212,225,4)" fg:x="70" fg:w="1"/><text x="5.8770%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="5.6270%" y="565" width="0.0804%" height="15" fill="rgb(233,96,42)" fg:x="70" fg:w="1"/><text x="5.8770%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="5.6270%" y="549" width="0.0804%" height="15" fill="rgb(229,21,32)" fg:x="70" fg:w="1"/><text x="5.8770%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.08%)</title><rect x="5.6270%" y="533" width="0.0804%" height="15" fill="rgb(226,216,24)" fg:x="70" fg:w="1"/><text x="5.8770%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.7074%" y="565" width="0.0804%" height="15" fill="rgb(221,163,17)" fg:x="71" fg:w="1"/><text x="5.9574%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.80%)</title><rect x="5.4662%" y="629" width="0.8039%" height="15" fill="rgb(216,216,42)" fg:x="68" fg:w="10"/><text x="5.7162%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (7 samples, 0.56%)</title><rect x="5.7074%" y="613" width="0.5627%" height="15" fill="rgb(240,118,7)" fg:x="71" fg:w="7"/><text x="5.9574%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (7 samples, 0.56%)</title><rect x="5.7074%" y="597" width="0.5627%" height="15" fill="rgb(221,67,37)" fg:x="71" fg:w="7"/><text x="5.9574%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (7 samples, 0.56%)</title><rect x="5.7074%" y="581" width="0.5627%" height="15" fill="rgb(241,32,44)" fg:x="71" fg:w="7"/><text x="5.9574%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.48%)</title><rect x="5.7878%" y="565" width="0.4823%" height="15" fill="rgb(235,204,43)" fg:x="72" fg:w="6"/><text x="6.0378%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.48%)</title><rect x="5.7878%" y="549" width="0.4823%" height="15" fill="rgb(213,116,10)" fg:x="72" fg:w="6"/><text x="6.0378%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.48%)</title><rect x="5.7878%" y="533" width="0.4823%" height="15" fill="rgb(239,15,48)" fg:x="72" fg:w="6"/><text x="6.0378%" y="543.50"></text></g><g><title>statx (6 samples, 0.48%)</title><rect x="5.7878%" y="517" width="0.4823%" height="15" fill="rgb(207,123,36)" fg:x="72" fg:w="6"/><text x="6.0378%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::add_runners_for (1 samples, 0.08%)</title><rect x="6.3505%" y="613" width="0.0804%" height="15" fill="rgb(209,103,30)" fg:x="79" fg:w="1"/><text x="6.6005%" y="623.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (9 samples, 0.72%)</title><rect x="6.4309%" y="613" width="0.7235%" height="15" fill="rgb(238,100,19)" fg:x="80" fg:w="9"/><text x="6.6809%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.64%)</title><rect x="6.5113%" y="597" width="0.6431%" height="15" fill="rgb(244,30,14)" fg:x="81" fg:w="8"/><text x="6.7613%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.56%)</title><rect x="6.5916%" y="581" width="0.5627%" height="15" fill="rgb(249,174,6)" fg:x="82" fg:w="7"/><text x="6.8416%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="6.8328%" y="565" width="0.3215%" height="15" fill="rgb(235,213,41)" fg:x="85" fg:w="4"/><text x="7.0828%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.9936%" y="549" width="0.1608%" height="15" fill="rgb(213,118,6)" fg:x="87" fg:w="2"/><text x="7.2436%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="6.9936%" y="533" width="0.1608%" height="15" fill="rgb(235,44,51)" fg:x="87" fg:w="2"/><text x="7.2436%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="6.9936%" y="517" width="0.1608%" height="15" fill="rgb(217,9,53)" fg:x="87" fg:w="2"/><text x="7.2436%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="6.9936%" y="501" width="0.1608%" height="15" fill="rgb(237,172,34)" fg:x="87" fg:w="2"/><text x="7.2436%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.9936%" y="485" width="0.1608%" height="15" fill="rgb(206,206,11)" fg:x="87" fg:w="2"/><text x="7.2436%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.9936%" y="469" width="0.1608%" height="15" fill="rgb(214,149,29)" fg:x="87" fg:w="2"/><text x="7.2436%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="6.9936%" y="453" width="0.1608%" height="15" fill="rgb(208,123,3)" fg:x="87" fg:w="2"/><text x="7.2436%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="6.9936%" y="437" width="0.1608%" height="15" fill="rgb(229,126,4)" fg:x="87" fg:w="2"/><text x="7.2436%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="6.9936%" y="421" width="0.1608%" height="15" fill="rgb(222,92,36)" fg:x="87" fg:w="2"/><text x="7.2436%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="6.9936%" y="405" width="0.1608%" height="15" fill="rgb(216,39,41)" fg:x="87" fg:w="2"/><text x="7.2436%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.9936%" y="389" width="0.1608%" height="15" fill="rgb(253,127,28)" fg:x="87" fg:w="2"/><text x="7.2436%" y="399.50"></text></g><g><title>glob::is_dir (9 samples, 0.72%)</title><rect x="7.4759%" y="565" width="0.7235%" height="15" fill="rgb(249,152,51)" fg:x="93" fg:w="9"/><text x="7.7259%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (9 samples, 0.72%)</title><rect x="7.4759%" y="549" width="0.7235%" height="15" fill="rgb(209,123,42)" fg:x="93" fg:w="9"/><text x="7.7259%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (9 samples, 0.72%)</title><rect x="7.4759%" y="533" width="0.7235%" height="15" fill="rgb(241,118,22)" fg:x="93" fg:w="9"/><text x="7.7259%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (9 samples, 0.72%)</title><rect x="7.4759%" y="517" width="0.7235%" height="15" fill="rgb(208,25,7)" fg:x="93" fg:w="9"/><text x="7.7259%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (9 samples, 0.72%)</title><rect x="7.4759%" y="501" width="0.7235%" height="15" fill="rgb(243,144,39)" fg:x="93" fg:w="9"/><text x="7.7259%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (9 samples, 0.72%)</title><rect x="7.4759%" y="485" width="0.7235%" height="15" fill="rgb(250,50,5)" fg:x="93" fg:w="9"/><text x="7.7259%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (9 samples, 0.72%)</title><rect x="7.4759%" y="469" width="0.7235%" height="15" fill="rgb(207,67,11)" fg:x="93" fg:w="9"/><text x="7.7259%" y="479.50"></text></g><g><title>statx (9 samples, 0.72%)</title><rect x="7.4759%" y="453" width="0.7235%" height="15" fill="rgb(245,204,40)" fg:x="93" fg:w="9"/><text x="7.7259%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.05%)</title><rect x="7.3151%" y="597" width="1.0450%" height="15" fill="rgb(238,228,24)" fg:x="91" fg:w="13"/><text x="7.5651%" y="607.50"></text></g><g><title>glob::fill_todo (13 samples, 1.05%)</title><rect x="7.3151%" y="581" width="1.0450%" height="15" fill="rgb(217,116,22)" fg:x="91" fg:w="13"/><text x="7.5651%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="8.1994%" y="565" width="0.1608%" height="15" fill="rgb(234,98,12)" fg:x="102" fg:w="2"/><text x="8.4494%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="8.1994%" y="549" width="0.1608%" height="15" fill="rgb(242,170,50)" fg:x="102" fg:w="2"/><text x="8.4494%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="8.1994%" y="533" width="0.1608%" height="15" fill="rgb(235,7,5)" fg:x="102" fg:w="2"/><text x="8.4494%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="8.1994%" y="517" width="0.1608%" height="15" fill="rgb(241,114,28)" fg:x="102" fg:w="2"/><text x="8.4494%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="8.1994%" y="501" width="0.1608%" height="15" fill="rgb(246,112,42)" fg:x="102" fg:w="2"/><text x="8.4494%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="8.1994%" y="485" width="0.1608%" height="15" fill="rgb(248,228,14)" fg:x="102" fg:w="2"/><text x="8.4494%" y="495.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="8.1994%" y="469" width="0.1608%" height="15" fill="rgb(208,133,18)" fg:x="102" fg:w="2"/><text x="8.4494%" y="479.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.4405%" y="565" width="0.0804%" height="15" fill="rgb(207,35,49)" fg:x="105" fg:w="1"/><text x="8.6905%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (30 samples, 2.41%)</title><rect x="6.2701%" y="629" width="2.4116%" height="15" fill="rgb(205,68,36)" fg:x="78" fg:w="30"/><text x="6.5201%" y="639.50">&lt;p..</text></g><g><title>plugins_rune::sources::load_directory_sources (19 samples, 1.53%)</title><rect x="7.1543%" y="613" width="1.5273%" height="15" fill="rgb(245,62,40)" fg:x="89" fg:w="19"/><text x="7.4043%" y="623.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="8.3601%" y="597" width="0.3215%" height="15" fill="rgb(228,27,24)" fg:x="104" fg:w="4"/><text x="8.6101%" y="607.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="8.3601%" y="581" width="0.3215%" height="15" fill="rgb(253,19,12)" fg:x="104" fg:w="4"/><text x="8.6101%" y="591.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="8.5209%" y="565" width="0.1608%" height="15" fill="rgb(232,28,20)" fg:x="106" fg:w="2"/><text x="8.7709%" y="575.50"></text></g><g><title>std::path::PathBuf::_push (2 samples, 0.16%)</title><rect x="8.5209%" y="549" width="0.1608%" height="15" fill="rgb(218,35,51)" fg:x="106" fg:w="2"/><text x="8.7709%" y="559.50"></text></g><g><title>std::ffi::os_str::OsString::push (2 samples, 0.16%)</title><rect x="8.5209%" y="533" width="0.1608%" height="15" fill="rgb(212,90,40)" fg:x="106" fg:w="2"/><text x="8.7709%" y="543.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (2 samples, 0.16%)</title><rect x="8.5209%" y="517" width="0.1608%" height="15" fill="rgb(220,172,12)" fg:x="106" fg:w="2"/><text x="8.7709%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="8.5209%" y="501" width="0.1608%" height="15" fill="rgb(226,159,20)" fg:x="106" fg:w="2"/><text x="8.7709%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="8.5209%" y="485" width="0.1608%" height="15" fill="rgb(234,205,16)" fg:x="106" fg:w="2"/><text x="8.7709%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="8.5209%" y="469" width="0.1608%" height="15" fill="rgb(207,9,39)" fg:x="106" fg:w="2"/><text x="8.7709%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="8.5209%" y="453" width="0.1608%" height="15" fill="rgb(249,143,15)" fg:x="106" fg:w="2"/><text x="8.7709%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="8.5209%" y="437" width="0.1608%" height="15" fill="rgb(253,133,29)" fg:x="106" fg:w="2"/><text x="8.7709%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.5209%" y="421" width="0.1608%" height="15" fill="rgb(221,187,0)" fg:x="106" fg:w="2"/><text x="8.7709%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="8.5209%" y="405" width="0.1608%" height="15" fill="rgb(205,204,26)" fg:x="106" fg:w="2"/><text x="8.7709%" y="415.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="8.6817%" y="629" width="0.0804%" height="15" fill="rgb(224,68,54)" fg:x="108" fg:w="1"/><text x="8.9317%" y="639.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="8.7621%" y="613" width="0.2412%" height="15" fill="rgb(209,67,4)" fg:x="109" fg:w="3"/><text x="9.0121%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (5 samples, 0.40%)</title><rect x="8.7621%" y="629" width="0.4019%" height="15" fill="rgb(228,229,18)" fg:x="109" fg:w="5"/><text x="9.0121%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="9.0032%" y="613" width="0.1608%" height="15" fill="rgb(231,89,13)" fg:x="112" fg:w="2"/><text x="9.2532%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0836%" y="597" width="0.0804%" height="15" fill="rgb(210,182,18)" fg:x="113" fg:w="1"/><text x="9.3336%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (63 samples, 5.06%)</title><rect x="4.2605%" y="645" width="5.0643%" height="15" fill="rgb(240,105,2)" fg:x="53" fg:w="63"/><text x="4.5105%" y="655.50">kernel..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="9.1640%" y="629" width="0.1608%" height="15" fill="rgb(207,170,50)" fg:x="114" fg:w="2"/><text x="9.4140%" y="639.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="9.1640%" y="613" width="0.1608%" height="15" fill="rgb(232,133,24)" fg:x="114" fg:w="2"/><text x="9.4140%" y="623.50"></text></g><g><title>engine::session::Session::initialize (65 samples, 5.23%)</title><rect x="4.1801%" y="661" width="5.2251%" height="15" fill="rgb(235,166,27)" fg:x="52" fg:w="65"/><text x="4.4301%" y="671.50">engine..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="9.3248%" y="645" width="0.0804%" height="15" fill="rgb(209,19,13)" fg:x="116" fg:w="1"/><text x="9.5748%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.3248%" y="629" width="0.0804%" height="15" fill="rgb(226,79,39)" fg:x="116" fg:w="1"/><text x="9.5748%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.3248%" y="613" width="0.0804%" height="15" fill="rgb(222,163,10)" fg:x="116" fg:w="1"/><text x="9.5748%" y="623.50"></text></g><g><title>&lt;plugins_core::memory::MemoryPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="9.5659%" y="629" width="0.0804%" height="15" fill="rgb(214,44,19)" fg:x="119" fg:w="1"/><text x="9.8159%" y="639.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (5 samples, 0.40%)</title><rect x="9.4051%" y="661" width="0.4019%" height="15" fill="rgb(210,217,13)" fg:x="117" fg:w="5"/><text x="9.6551%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="9.4051%" y="645" width="0.4019%" height="15" fill="rgb(237,61,54)" fg:x="117" fg:w="5"/><text x="9.6551%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="9.6463%" y="629" width="0.1608%" height="15" fill="rgb(226,184,24)" fg:x="120" fg:w="2"/><text x="9.8963%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="9.6463%" y="613" width="0.1608%" height="15" fill="rgb(223,226,4)" fg:x="120" fg:w="2"/><text x="9.8963%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.7267%" y="597" width="0.0804%" height="15" fill="rgb(210,26,41)" fg:x="121" fg:w="1"/><text x="9.9767%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (72 samples, 5.79%)</title><rect x="4.0997%" y="709" width="5.7878%" height="15" fill="rgb(220,221,6)" fg:x="51" fg:w="72"/><text x="4.3497%" y="719.50">&lt;engine..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (72 samples, 5.79%)</title><rect x="4.0997%" y="693" width="5.7878%" height="15" fill="rgb(225,89,49)" fg:x="51" fg:w="72"/><text x="4.3497%" y="703.50">engine:..</text></g><g><title>engine::session::Session::new (72 samples, 5.79%)</title><rect x="4.0997%" y="677" width="5.7878%" height="15" fill="rgb(218,70,45)" fg:x="51" fg:w="72"/><text x="4.3497%" y="687.50">engine:..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="9.8071%" y="661" width="0.0804%" height="15" fill="rgb(238,166,21)" fg:x="122" fg:w="1"/><text x="10.0571%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="9.8071%" y="645" width="0.0804%" height="15" fill="rgb(224,141,44)" fg:x="122" fg:w="1"/><text x="10.0571%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.8875%" y="693" width="0.0804%" height="15" fill="rgb(230,12,49)" fg:x="123" fg:w="1"/><text x="10.1375%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="9.8875%" y="677" width="0.0804%" height="15" fill="rgb(212,174,12)" fg:x="123" fg:w="1"/><text x="10.1375%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.8875%" y="661" width="0.0804%" height="15" fill="rgb(246,67,9)" fg:x="123" fg:w="1"/><text x="10.1375%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.8875%" y="645" width="0.0804%" height="15" fill="rgb(239,35,23)" fg:x="123" fg:w="1"/><text x="10.1375%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.8875%" y="629" width="0.0804%" height="15" fill="rgb(211,167,0)" fg:x="123" fg:w="1"/><text x="10.1375%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.8875%" y="613" width="0.0804%" height="15" fill="rgb(225,119,45)" fg:x="123" fg:w="1"/><text x="10.1375%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="9.9678%" y="693" width="0.0804%" height="15" fill="rgb(210,162,6)" fg:x="124" fg:w="1"/><text x="10.2178%" y="703.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.9678%" y="677" width="0.0804%" height="15" fill="rgb(208,118,35)" fg:x="124" fg:w="1"/><text x="10.2178%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="10.1286%" y="565" width="0.3215%" height="15" fill="rgb(239,4,53)" fg:x="126" fg:w="4"/><text x="10.3786%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="10.1286%" y="549" width="0.3215%" height="15" fill="rgb(213,130,21)" fg:x="126" fg:w="4"/><text x="10.3786%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.2894%" y="533" width="0.1608%" height="15" fill="rgb(235,148,0)" fg:x="128" fg:w="2"/><text x="10.5394%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.2894%" y="517" width="0.1608%" height="15" fill="rgb(244,224,18)" fg:x="128" fg:w="2"/><text x="10.5394%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.3698%" y="501" width="0.0804%" height="15" fill="rgb(211,214,4)" fg:x="129" fg:w="1"/><text x="10.6198%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.3698%" y="485" width="0.0804%" height="15" fill="rgb(206,119,25)" fg:x="129" fg:w="1"/><text x="10.6198%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.3698%" y="469" width="0.0804%" height="15" fill="rgb(243,93,47)" fg:x="129" fg:w="1"/><text x="10.6198%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.6109%" y="517" width="0.1608%" height="15" fill="rgb(224,194,6)" fg:x="132" fg:w="2"/><text x="10.8609%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.6109%" y="501" width="0.1608%" height="15" fill="rgb(243,229,6)" fg:x="132" fg:w="2"/><text x="10.8609%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.6913%" y="485" width="0.0804%" height="15" fill="rgb(207,23,50)" fg:x="133" fg:w="1"/><text x="10.9413%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.6913%" y="469" width="0.0804%" height="15" fill="rgb(253,192,32)" fg:x="133" fg:w="1"/><text x="10.9413%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.6913%" y="453" width="0.0804%" height="15" fill="rgb(213,21,6)" fg:x="133" fg:w="1"/><text x="10.9413%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="10.5305%" y="549" width="0.4019%" height="15" fill="rgb(243,151,13)" fg:x="131" fg:w="5"/><text x="10.7805%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="10.5305%" y="533" width="0.4019%" height="15" fill="rgb(233,165,41)" fg:x="131" fg:w="5"/><text x="10.7805%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.7717%" y="517" width="0.1608%" height="15" fill="rgb(246,176,45)" fg:x="134" fg:w="2"/><text x="11.0217%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.8521%" y="501" width="0.0804%" height="15" fill="rgb(217,170,52)" fg:x="135" fg:w="1"/><text x="11.1021%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="10.8521%" y="485" width="0.0804%" height="15" fill="rgb(214,203,54)" fg:x="135" fg:w="1"/><text x="11.1021%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.9325%" y="549" width="0.1608%" height="15" fill="rgb(248,215,49)" fg:x="136" fg:w="2"/><text x="11.1825%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.9325%" y="533" width="0.1608%" height="15" fill="rgb(208,46,10)" fg:x="136" fg:w="2"/><text x="11.1825%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.0129%" y="517" width="0.0804%" height="15" fill="rgb(254,5,31)" fg:x="137" fg:w="1"/><text x="11.2629%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.0129%" y="501" width="0.0804%" height="15" fill="rgb(222,104,33)" fg:x="137" fg:w="1"/><text x="11.2629%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2540%" y="533" width="0.0804%" height="15" fill="rgb(248,49,16)" fg:x="140" fg:w="1"/><text x="11.5040%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2540%" y="517" width="0.0804%" height="15" fill="rgb(232,198,41)" fg:x="140" fg:w="1"/><text x="11.5040%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.2540%" y="501" width="0.0804%" height="15" fill="rgb(214,125,3)" fg:x="140" fg:w="1"/><text x="11.5040%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.2540%" y="485" width="0.0804%" height="15" fill="rgb(229,220,28)" fg:x="140" fg:w="1"/><text x="11.5040%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="11.0932%" y="549" width="0.4019%" height="15" fill="rgb(222,64,37)" fg:x="138" fg:w="5"/><text x="11.3432%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.3344%" y="533" width="0.1608%" height="15" fill="rgb(249,184,13)" fg:x="141" fg:w="2"/><text x="11.5844%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.21%)</title><rect x="10.4502%" y="565" width="1.2058%" height="15" fill="rgb(252,176,6)" fg:x="130" fg:w="15"/><text x="10.7002%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.4952%" y="549" width="0.1608%" height="15" fill="rgb(228,153,7)" fg:x="143" fg:w="2"/><text x="11.7452%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.4952%" y="533" width="0.1608%" height="15" fill="rgb(242,193,5)" fg:x="143" fg:w="2"/><text x="11.7452%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (2 samples, 0.16%)</title><rect x="11.4952%" y="517" width="0.1608%" height="15" fill="rgb(232,140,9)" fg:x="143" fg:w="2"/><text x="11.7452%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.77%)</title><rect x="10.0482%" y="581" width="1.7685%" height="15" fill="rgb(213,222,16)" fg:x="125" fg:w="22"/><text x="10.2982%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.6559%" y="565" width="0.1608%" height="15" fill="rgb(222,75,50)" fg:x="145" fg:w="2"/><text x="11.9059%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.7363%" y="549" width="0.0804%" height="15" fill="rgb(205,180,2)" fg:x="146" fg:w="1"/><text x="11.9863%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.7363%" y="533" width="0.0804%" height="15" fill="rgb(216,34,7)" fg:x="146" fg:w="1"/><text x="11.9863%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (23 samples, 1.85%)</title><rect x="10.0482%" y="597" width="1.8489%" height="15" fill="rgb(253,16,32)" fg:x="125" fg:w="23"/><text x="10.2982%" y="607.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.8167%" y="581" width="0.0804%" height="15" fill="rgb(208,97,28)" fg:x="147" fg:w="1"/><text x="12.0667%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.8167%" y="565" width="0.0804%" height="15" fill="rgb(225,92,11)" fg:x="147" fg:w="1"/><text x="12.0667%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.8167%" y="549" width="0.0804%" height="15" fill="rgb(243,38,12)" fg:x="147" fg:w="1"/><text x="12.0667%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.8167%" y="533" width="0.0804%" height="15" fill="rgb(208,139,16)" fg:x="147" fg:w="1"/><text x="12.0667%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.8167%" y="517" width="0.0804%" height="15" fill="rgb(227,24,9)" fg:x="147" fg:w="1"/><text x="12.0667%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8167%" y="501" width="0.0804%" height="15" fill="rgb(206,62,11)" fg:x="147" fg:w="1"/><text x="12.0667%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.8971%" y="565" width="0.0804%" height="15" fill="rgb(228,134,27)" fg:x="148" fg:w="1"/><text x="12.1471%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.9775%" y="549" width="0.1608%" height="15" fill="rgb(205,55,33)" fg:x="149" fg:w="2"/><text x="12.2275%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.1383%" y="549" width="0.0804%" height="15" fill="rgb(243,75,43)" fg:x="151" fg:w="1"/><text x="12.3883%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.1383%" y="533" width="0.0804%" height="15" fill="rgb(223,27,42)" fg:x="151" fg:w="1"/><text x="12.3883%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="11.8971%" y="597" width="0.4019%" height="15" fill="rgb(232,189,33)" fg:x="148" fg:w="5"/><text x="12.1471%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="11.8971%" y="581" width="0.4019%" height="15" fill="rgb(210,9,39)" fg:x="148" fg:w="5"/><text x="12.1471%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="11.9775%" y="565" width="0.3215%" height="15" fill="rgb(242,85,26)" fg:x="149" fg:w="4"/><text x="12.2275%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.2186%" y="549" width="0.0804%" height="15" fill="rgb(248,44,4)" fg:x="152" fg:w="1"/><text x="12.4686%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.2186%" y="533" width="0.0804%" height="15" fill="rgb(250,96,46)" fg:x="152" fg:w="1"/><text x="12.4686%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="12.2186%" y="517" width="0.0804%" height="15" fill="rgb(229,116,26)" fg:x="152" fg:w="1"/><text x="12.4686%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.2186%" y="501" width="0.0804%" height="15" fill="rgb(246,94,34)" fg:x="152" fg:w="1"/><text x="12.4686%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2186%" y="485" width="0.0804%" height="15" fill="rgb(251,73,21)" fg:x="152" fg:w="1"/><text x="12.4686%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.2990%" y="565" width="0.0804%" height="15" fill="rgb(254,121,25)" fg:x="153" fg:w="1"/><text x="12.5490%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="12.2990%" y="581" width="0.1608%" height="15" fill="rgb(215,161,49)" fg:x="153" fg:w="2"/><text x="12.5490%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="12.3794%" y="565" width="0.0804%" height="15" fill="rgb(221,43,13)" fg:x="154" fg:w="1"/><text x="12.6294%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.3794%" y="549" width="0.0804%" height="15" fill="rgb(249,5,37)" fg:x="154" fg:w="1"/><text x="12.6294%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.3794%" y="533" width="0.0804%" height="15" fill="rgb(226,25,44)" fg:x="154" fg:w="1"/><text x="12.6294%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.3794%" y="517" width="0.0804%" height="15" fill="rgb(238,189,16)" fg:x="154" fg:w="1"/><text x="12.6294%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5402%" y="549" width="0.0804%" height="15" fill="rgb(251,186,8)" fg:x="156" fg:w="1"/><text x="12.7902%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.5402%" y="533" width="0.0804%" height="15" fill="rgb(254,34,31)" fg:x="156" fg:w="1"/><text x="12.7902%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="12.6206%" y="549" width="0.2412%" height="15" fill="rgb(225,215,27)" fg:x="157" fg:w="3"/><text x="12.8706%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="12.6206%" y="533" width="0.2412%" height="15" fill="rgb(221,192,48)" fg:x="157" fg:w="3"/><text x="12.8706%" y="543.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="12.6206%" y="517" width="0.2412%" height="15" fill="rgb(219,137,20)" fg:x="157" fg:w="3"/><text x="12.8706%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1833%" y="501" width="0.0804%" height="15" fill="rgb(219,84,11)" fg:x="164" fg:w="1"/><text x="13.4333%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="13.2637%" y="501" width="0.2412%" height="15" fill="rgb(224,10,23)" fg:x="165" fg:w="3"/><text x="13.5137%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.3441%" y="485" width="0.1608%" height="15" fill="rgb(248,22,39)" fg:x="166" fg:w="2"/><text x="13.5941%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.4244%" y="469" width="0.0804%" height="15" fill="rgb(212,154,20)" fg:x="167" fg:w="1"/><text x="13.6744%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4244%" y="453" width="0.0804%" height="15" fill="rgb(236,199,50)" fg:x="167" fg:w="1"/><text x="13.6744%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.4244%" y="437" width="0.0804%" height="15" fill="rgb(211,9,17)" fg:x="167" fg:w="1"/><text x="13.6744%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4244%" y="421" width="0.0804%" height="15" fill="rgb(243,216,36)" fg:x="167" fg:w="1"/><text x="13.6744%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4244%" y="405" width="0.0804%" height="15" fill="rgb(250,2,10)" fg:x="167" fg:w="1"/><text x="13.6744%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.5852%" y="485" width="0.2412%" height="15" fill="rgb(226,50,48)" fg:x="169" fg:w="3"/><text x="13.8352%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="13.5852%" y="469" width="0.2412%" height="15" fill="rgb(243,81,16)" fg:x="169" fg:w="3"/><text x="13.8352%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.7460%" y="453" width="0.0804%" height="15" fill="rgb(250,14,2)" fg:x="171" fg:w="1"/><text x="13.9960%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7460%" y="437" width="0.0804%" height="15" fill="rgb(233,135,29)" fg:x="171" fg:w="1"/><text x="13.9960%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7460%" y="421" width="0.0804%" height="15" fill="rgb(224,64,43)" fg:x="171" fg:w="1"/><text x="13.9960%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="13.0225%" y="517" width="0.8842%" height="15" fill="rgb(238,84,13)" fg:x="162" fg:w="11"/><text x="13.2725%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="13.5048%" y="501" width="0.4019%" height="15" fill="rgb(253,48,26)" fg:x="168" fg:w="5"/><text x="13.7548%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8264%" y="485" width="0.0804%" height="15" fill="rgb(205,223,31)" fg:x="172" fg:w="1"/><text x="14.0764%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.05%)</title><rect x="12.9421%" y="533" width="1.0450%" height="15" fill="rgb(221,41,32)" fg:x="161" fg:w="13"/><text x="13.1921%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="13.9068%" y="517" width="0.0804%" height="15" fill="rgb(213,158,31)" fg:x="173" fg:w="1"/><text x="14.1568%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9068%" y="501" width="0.0804%" height="15" fill="rgb(245,126,43)" fg:x="173" fg:w="1"/><text x="14.1568%" y="511.50"></text></g><g><title>engine::session::Session::flush (55 samples, 4.42%)</title><rect x="10.0482%" y="693" width="4.4212%" height="15" fill="rgb(227,7,22)" fg:x="125" fg:w="55"/><text x="10.2982%" y="703.50">engin..</text></g><g><title>engine::session::state::State::close (55 samples, 4.42%)</title><rect x="10.0482%" y="677" width="4.4212%" height="15" fill="rgb(252,90,44)" fg:x="125" fg:w="55"/><text x="10.2982%" y="687.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (55 samples, 4.42%)</title><rect x="10.0482%" y="661" width="4.4212%" height="15" fill="rgb(253,91,0)" fg:x="125" fg:w="55"/><text x="10.2982%" y="671.50">engin..</text></g><g><title>core::iter::adapters::try_process (55 samples, 4.42%)</title><rect x="10.0482%" y="645" width="4.4212%" height="15" fill="rgb(252,175,49)" fg:x="125" fg:w="55"/><text x="10.2982%" y="655.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (55 samples, 4.42%)</title><rect x="10.0482%" y="629" width="4.4212%" height="15" fill="rgb(246,150,1)" fg:x="125" fg:w="55"/><text x="10.2982%" y="639.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (55 samples, 4.42%)</title><rect x="10.0482%" y="613" width="4.4212%" height="15" fill="rgb(241,192,25)" fg:x="125" fg:w="55"/><text x="10.2982%" y="623.50">engin..</text></g><g><title>kernel::model::any_entity_changes (27 samples, 2.17%)</title><rect x="12.2990%" y="597" width="2.1704%" height="15" fill="rgb(239,187,11)" fg:x="153" fg:w="27"/><text x="12.5490%" y="607.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (25 samples, 2.01%)</title><rect x="12.4598%" y="581" width="2.0096%" height="15" fill="rgb(218,202,51)" fg:x="155" fg:w="25"/><text x="12.7098%" y="591.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (24 samples, 1.93%)</title><rect x="12.5402%" y="565" width="1.9293%" height="15" fill="rgb(225,176,8)" fg:x="156" fg:w="24"/><text x="12.7902%" y="575.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (20 samples, 1.61%)</title><rect x="12.8617%" y="549" width="1.6077%" height="15" fill="rgb(219,122,41)" fg:x="160" fg:w="20"/><text x="13.1117%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (6 samples, 0.48%)</title><rect x="13.9871%" y="533" width="0.4823%" height="15" fill="rgb(248,140,20)" fg:x="174" fg:w="6"/><text x="14.2371%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="14.3087%" y="517" width="0.1608%" height="15" fill="rgb(245,41,37)" fg:x="178" fg:w="2"/><text x="14.5587%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4695%" y="645" width="0.0804%" height="15" fill="rgb(235,82,39)" fg:x="180" fg:w="1"/><text x="14.7195%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4695%" y="629" width="0.0804%" height="15" fill="rgb(230,108,42)" fg:x="180" fg:w="1"/><text x="14.7195%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4695%" y="613" width="0.0804%" height="15" fill="rgb(215,150,50)" fg:x="180" fg:w="1"/><text x="14.7195%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4695%" y="597" width="0.0804%" height="15" fill="rgb(233,212,5)" fg:x="180" fg:w="1"/><text x="14.7195%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="14.5498%" y="645" width="0.0804%" height="15" fill="rgb(245,80,22)" fg:x="181" fg:w="1"/><text x="14.7998%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5498%" y="629" width="0.0804%" height="15" fill="rgb(238,129,16)" fg:x="181" fg:w="1"/><text x="14.7998%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6302%" y="581" width="0.0804%" height="15" fill="rgb(240,19,0)" fg:x="182" fg:w="1"/><text x="14.8802%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="14.4695%" y="677" width="0.3215%" height="15" fill="rgb(232,42,35)" fg:x="180" fg:w="4"/><text x="14.7195%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="14.4695%" y="661" width="0.3215%" height="15" fill="rgb(223,130,24)" fg:x="180" fg:w="4"/><text x="14.7195%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.6302%" y="645" width="0.1608%" height="15" fill="rgb(237,16,22)" fg:x="182" fg:w="2"/><text x="14.8802%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.6302%" y="629" width="0.1608%" height="15" fill="rgb(248,192,20)" fg:x="182" fg:w="2"/><text x="14.8802%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.6302%" y="613" width="0.1608%" height="15" fill="rgb(233,167,2)" fg:x="182" fg:w="2"/><text x="14.8802%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.6302%" y="597" width="0.1608%" height="15" fill="rgb(252,71,44)" fg:x="182" fg:w="2"/><text x="14.8802%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.7106%" y="581" width="0.0804%" height="15" fill="rgb(238,37,47)" fg:x="183" fg:w="1"/><text x="14.9606%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7106%" y="565" width="0.0804%" height="15" fill="rgb(214,202,54)" fg:x="183" fg:w="1"/><text x="14.9606%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7106%" y="549" width="0.0804%" height="15" fill="rgb(254,165,40)" fg:x="183" fg:w="1"/><text x="14.9606%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.7910%" y="661" width="0.0804%" height="15" fill="rgb(246,173,38)" fg:x="184" fg:w="1"/><text x="15.0410%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="14.7910%" y="645" width="0.0804%" height="15" fill="rgb(215,3,27)" fg:x="184" fg:w="1"/><text x="15.0410%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7910%" y="629" width="0.0804%" height="15" fill="rgb(239,169,51)" fg:x="184" fg:w="1"/><text x="15.0410%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8714%" y="629" width="0.0804%" height="15" fill="rgb(212,5,25)" fg:x="185" fg:w="1"/><text x="15.1214%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8714%" y="613" width="0.0804%" height="15" fill="rgb(243,45,17)" fg:x="185" fg:w="1"/><text x="15.1214%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.8714%" y="597" width="0.0804%" height="15" fill="rgb(242,97,9)" fg:x="185" fg:w="1"/><text x="15.1214%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.8714%" y="581" width="0.0804%" height="15" fill="rgb(228,71,31)" fg:x="185" fg:w="1"/><text x="15.1214%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.8714%" y="565" width="0.0804%" height="15" fill="rgb(252,184,16)" fg:x="185" fg:w="1"/><text x="15.1214%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.8714%" y="549" width="0.0804%" height="15" fill="rgb(236,169,46)" fg:x="185" fg:w="1"/><text x="15.1214%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.8714%" y="533" width="0.0804%" height="15" fill="rgb(207,17,47)" fg:x="185" fg:w="1"/><text x="15.1214%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.8714%" y="517" width="0.0804%" height="15" fill="rgb(206,201,28)" fg:x="185" fg:w="1"/><text x="15.1214%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.8714%" y="501" width="0.0804%" height="15" fill="rgb(224,184,23)" fg:x="185" fg:w="1"/><text x="15.1214%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.8714%" y="485" width="0.0804%" height="15" fill="rgb(208,139,48)" fg:x="185" fg:w="1"/><text x="15.1214%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.8714%" y="469" width="0.0804%" height="15" fill="rgb(208,130,10)" fg:x="185" fg:w="1"/><text x="15.1214%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8714%" y="453" width="0.0804%" height="15" fill="rgb(211,213,45)" fg:x="185" fg:w="1"/><text x="15.1214%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="14.8714%" y="661" width="0.1608%" height="15" fill="rgb(235,100,30)" fg:x="185" fg:w="2"/><text x="15.1214%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="14.8714%" y="645" width="0.1608%" height="15" fill="rgb(206,144,31)" fg:x="185" fg:w="2"/><text x="15.1214%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9518%" y="629" width="0.0804%" height="15" fill="rgb(224,200,26)" fg:x="186" fg:w="1"/><text x="15.2018%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.0322%" y="597" width="0.0804%" height="15" fill="rgb(247,104,53)" fg:x="187" fg:w="1"/><text x="15.2822%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="15.0322%" y="645" width="0.2412%" height="15" fill="rgb(220,14,17)" fg:x="187" fg:w="3"/><text x="15.2822%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.0322%" y="629" width="0.2412%" height="15" fill="rgb(230,140,40)" fg:x="187" fg:w="3"/><text x="15.2822%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.0322%" y="613" width="0.2412%" height="15" fill="rgb(229,2,41)" fg:x="187" fg:w="3"/><text x="15.2822%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (2 samples, 0.16%)</title><rect x="15.1125%" y="597" width="0.1608%" height="15" fill="rgb(232,89,16)" fg:x="188" fg:w="2"/><text x="15.3625%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.1125%" y="581" width="0.1608%" height="15" fill="rgb(247,59,52)" fg:x="188" fg:w="2"/><text x="15.3625%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="15.1125%" y="565" width="0.1608%" height="15" fill="rgb(226,110,21)" fg:x="188" fg:w="2"/><text x="15.3625%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="15.1125%" y="549" width="0.1608%" height="15" fill="rgb(224,176,43)" fg:x="188" fg:w="2"/><text x="15.3625%" y="559.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="15.1929%" y="533" width="0.0804%" height="15" fill="rgb(221,73,6)" fg:x="189" fg:w="1"/><text x="15.4429%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="15.0322%" y="661" width="0.3215%" height="15" fill="rgb(232,78,19)" fg:x="187" fg:w="4"/><text x="15.2822%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.2733%" y="645" width="0.0804%" height="15" fill="rgb(233,112,48)" fg:x="190" fg:w="1"/><text x="15.5233%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.2733%" y="629" width="0.0804%" height="15" fill="rgb(243,131,47)" fg:x="190" fg:w="1"/><text x="15.5233%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.2733%" y="613" width="0.0804%" height="15" fill="rgb(226,51,1)" fg:x="190" fg:w="1"/><text x="15.5233%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.2733%" y="597" width="0.0804%" height="15" fill="rgb(247,58,7)" fg:x="190" fg:w="1"/><text x="15.5233%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.4341%" y="549" width="0.0804%" height="15" fill="rgb(209,7,32)" fg:x="192" fg:w="1"/><text x="15.6841%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.4341%" y="533" width="0.0804%" height="15" fill="rgb(209,39,41)" fg:x="192" fg:w="1"/><text x="15.6841%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.4341%" y="517" width="0.0804%" height="15" fill="rgb(226,182,46)" fg:x="192" fg:w="1"/><text x="15.6841%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.4341%" y="501" width="0.0804%" height="15" fill="rgb(230,219,10)" fg:x="192" fg:w="1"/><text x="15.6841%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.4341%" y="485" width="0.0804%" height="15" fill="rgb(227,175,30)" fg:x="192" fg:w="1"/><text x="15.6841%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.4341%" y="469" width="0.0804%" height="15" fill="rgb(217,2,50)" fg:x="192" fg:w="1"/><text x="15.6841%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.4341%" y="453" width="0.0804%" height="15" fill="rgb(229,160,0)" fg:x="192" fg:w="1"/><text x="15.6841%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.4341%" y="437" width="0.0804%" height="15" fill="rgb(207,78,37)" fg:x="192" fg:w="1"/><text x="15.6841%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.4341%" y="421" width="0.0804%" height="15" fill="rgb(225,57,0)" fg:x="192" fg:w="1"/><text x="15.6841%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.4341%" y="405" width="0.0804%" height="15" fill="rgb(232,154,2)" fg:x="192" fg:w="1"/><text x="15.6841%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.4341%" y="389" width="0.0804%" height="15" fill="rgb(241,212,25)" fg:x="192" fg:w="1"/><text x="15.6841%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4341%" y="373" width="0.0804%" height="15" fill="rgb(226,69,20)" fg:x="192" fg:w="1"/><text x="15.6841%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="15.4341%" y="613" width="0.1608%" height="15" fill="rgb(247,184,54)" fg:x="192" fg:w="2"/><text x="15.6841%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.4341%" y="597" width="0.1608%" height="15" fill="rgb(210,145,0)" fg:x="192" fg:w="2"/><text x="15.6841%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.4341%" y="581" width="0.1608%" height="15" fill="rgb(253,82,12)" fg:x="192" fg:w="2"/><text x="15.6841%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.4341%" y="565" width="0.1608%" height="15" fill="rgb(245,42,11)" fg:x="192" fg:w="2"/><text x="15.6841%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5145%" y="549" width="0.0804%" height="15" fill="rgb(219,147,32)" fg:x="193" fg:w="1"/><text x="15.7645%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.5949%" y="613" width="0.0804%" height="15" fill="rgb(246,12,7)" fg:x="194" fg:w="1"/><text x="15.8449%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="15.3537%" y="645" width="0.4019%" height="15" fill="rgb(243,50,9)" fg:x="191" fg:w="5"/><text x="15.6037%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.40%)</title><rect x="15.3537%" y="629" width="0.4019%" height="15" fill="rgb(219,149,6)" fg:x="191" fg:w="5"/><text x="15.6037%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="15.6752%" y="613" width="0.0804%" height="15" fill="rgb(241,51,42)" fg:x="195" fg:w="1"/><text x="15.9252%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6752%" y="597" width="0.0804%" height="15" fill="rgb(226,128,27)" fg:x="195" fg:w="1"/><text x="15.9252%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="15.7556%" y="645" width="0.1608%" height="15" fill="rgb(244,144,4)" fg:x="196" fg:w="2"/><text x="16.0056%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8360%" y="629" width="0.0804%" height="15" fill="rgb(221,4,13)" fg:x="197" fg:w="1"/><text x="16.0860%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.8360%" y="613" width="0.0804%" height="15" fill="rgb(208,170,28)" fg:x="197" fg:w="1"/><text x="16.0860%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (16 samples, 1.29%)</title><rect x="14.7910%" y="677" width="1.2862%" height="15" fill="rgb(226,131,13)" fg:x="184" fg:w="16"/><text x="15.0410%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.72%)</title><rect x="15.3537%" y="661" width="0.7235%" height="15" fill="rgb(215,72,41)" fg:x="191" fg:w="9"/><text x="15.6037%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9164%" y="645" width="0.1608%" height="15" fill="rgb(243,108,20)" fg:x="198" fg:w="2"/><text x="16.1664%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.9164%" y="629" width="0.1608%" height="15" fill="rgb(230,189,17)" fg:x="198" fg:w="2"/><text x="16.1664%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="15.9164%" y="613" width="0.1608%" height="15" fill="rgb(220,50,17)" fg:x="198" fg:w="2"/><text x="16.1664%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="15.9164%" y="597" width="0.1608%" height="15" fill="rgb(248,152,48)" fg:x="198" fg:w="2"/><text x="16.1664%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.9164%" y="581" width="0.1608%" height="15" fill="rgb(244,91,11)" fg:x="198" fg:w="2"/><text x="16.1664%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9164%" y="565" width="0.1608%" height="15" fill="rgb(220,157,5)" fg:x="198" fg:w="2"/><text x="16.1664%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.9164%" y="549" width="0.1608%" height="15" fill="rgb(253,137,8)" fg:x="198" fg:w="2"/><text x="16.1664%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9164%" y="533" width="0.1608%" height="15" fill="rgb(217,137,51)" fg:x="198" fg:w="2"/><text x="16.1664%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.9164%" y="517" width="0.1608%" height="15" fill="rgb(218,209,53)" fg:x="198" fg:w="2"/><text x="16.1664%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9968%" y="501" width="0.0804%" height="15" fill="rgb(249,137,25)" fg:x="199" fg:w="1"/><text x="16.2468%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9968%" y="485" width="0.0804%" height="15" fill="rgb(239,155,26)" fg:x="199" fg:w="1"/><text x="16.2468%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (22 samples, 1.77%)</title><rect x="14.4695%" y="693" width="1.7685%" height="15" fill="rgb(227,85,46)" fg:x="180" fg:w="22"/><text x="14.7195%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.0772%" y="677" width="0.1608%" height="15" fill="rgb(251,107,43)" fg:x="200" fg:w="2"/><text x="16.3272%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1576%" y="661" width="0.0804%" height="15" fill="rgb(234,170,33)" fg:x="201" fg:w="1"/><text x="16.4076%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.1576%" y="645" width="0.0804%" height="15" fill="rgb(206,29,35)" fg:x="201" fg:w="1"/><text x="16.4076%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.1576%" y="629" width="0.0804%" height="15" fill="rgb(227,138,25)" fg:x="201" fg:w="1"/><text x="16.4076%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.1576%" y="613" width="0.0804%" height="15" fill="rgb(249,131,35)" fg:x="201" fg:w="1"/><text x="16.4076%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.1576%" y="597" width="0.0804%" height="15" fill="rgb(239,6,40)" fg:x="201" fg:w="1"/><text x="16.4076%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.1576%" y="581" width="0.0804%" height="15" fill="rgb(246,136,47)" fg:x="201" fg:w="1"/><text x="16.4076%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.1576%" y="565" width="0.0804%" height="15" fill="rgb(253,58,26)" fg:x="201" fg:w="1"/><text x="16.4076%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.1576%" y="549" width="0.0804%" height="15" fill="rgb(237,141,10)" fg:x="201" fg:w="1"/><text x="16.4076%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.1576%" y="533" width="0.0804%" height="15" fill="rgb(234,156,12)" fg:x="201" fg:w="1"/><text x="16.4076%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.1576%" y="517" width="0.0804%" height="15" fill="rgb(243,224,36)" fg:x="201" fg:w="1"/><text x="16.4076%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.1576%" y="501" width="0.0804%" height="15" fill="rgb(205,229,51)" fg:x="201" fg:w="1"/><text x="16.4076%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.1576%" y="485" width="0.0804%" height="15" fill="rgb(223,189,4)" fg:x="201" fg:w="1"/><text x="16.4076%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.2379%" y="661" width="0.0804%" height="15" fill="rgb(249,167,54)" fg:x="202" fg:w="1"/><text x="16.4879%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="16.2379%" y="645" width="0.0804%" height="15" fill="rgb(218,34,28)" fg:x="202" fg:w="1"/><text x="16.4879%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="16.2379%" y="629" width="0.0804%" height="15" fill="rgb(232,109,42)" fg:x="202" fg:w="1"/><text x="16.4879%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="16.2379%" y="613" width="0.0804%" height="15" fill="rgb(248,214,46)" fg:x="202" fg:w="1"/><text x="16.4879%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="16.2379%" y="597" width="0.0804%" height="15" fill="rgb(244,216,40)" fg:x="202" fg:w="1"/><text x="16.4879%" y="607.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="16.2379%" y="581" width="0.0804%" height="15" fill="rgb(231,226,31)" fg:x="202" fg:w="1"/><text x="16.4879%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="16.2379%" y="565" width="0.0804%" height="15" fill="rgb(238,38,43)" fg:x="202" fg:w="1"/><text x="16.4879%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2379%" y="549" width="0.0804%" height="15" fill="rgb(208,88,43)" fg:x="202" fg:w="1"/><text x="16.4879%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2379%" y="533" width="0.0804%" height="15" fill="rgb(205,136,37)" fg:x="202" fg:w="1"/><text x="16.4879%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.2379%" y="517" width="0.0804%" height="15" fill="rgb(237,34,14)" fg:x="202" fg:w="1"/><text x="16.4879%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.2379%" y="501" width="0.0804%" height="15" fill="rgb(236,193,44)" fg:x="202" fg:w="1"/><text x="16.4879%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.2379%" y="485" width="0.0804%" height="15" fill="rgb(231,48,10)" fg:x="202" fg:w="1"/><text x="16.4879%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.2379%" y="469" width="0.0804%" height="15" fill="rgb(213,141,34)" fg:x="202" fg:w="1"/><text x="16.4879%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2379%" y="453" width="0.0804%" height="15" fill="rgb(249,130,34)" fg:x="202" fg:w="1"/><text x="16.4879%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="16.2379%" y="693" width="0.1608%" height="15" fill="rgb(219,42,41)" fg:x="202" fg:w="2"/><text x="16.4879%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="16.2379%" y="677" width="0.1608%" height="15" fill="rgb(224,100,54)" fg:x="202" fg:w="2"/><text x="16.4879%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.3183%" y="661" width="0.0804%" height="15" fill="rgb(229,200,27)" fg:x="203" fg:w="1"/><text x="16.5683%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3183%" y="645" width="0.0804%" height="15" fill="rgb(217,118,10)" fg:x="203" fg:w="1"/><text x="16.5683%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.3987%" y="629" width="0.0804%" height="15" fill="rgb(206,22,3)" fg:x="204" fg:w="1"/><text x="16.6487%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.3987%" y="613" width="0.0804%" height="15" fill="rgb(232,163,46)" fg:x="204" fg:w="1"/><text x="16.6487%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3987%" y="597" width="0.0804%" height="15" fill="rgb(206,95,13)" fg:x="204" fg:w="1"/><text x="16.6487%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3987%" y="581" width="0.0804%" height="15" fill="rgb(253,154,18)" fg:x="204" fg:w="1"/><text x="16.6487%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.3987%" y="565" width="0.0804%" height="15" fill="rgb(219,32,23)" fg:x="204" fg:w="1"/><text x="16.6487%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3987%" y="549" width="0.0804%" height="15" fill="rgb(230,191,45)" fg:x="204" fg:w="1"/><text x="16.6487%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.3987%" y="533" width="0.0804%" height="15" fill="rgb(229,64,36)" fg:x="204" fg:w="1"/><text x="16.6487%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.3987%" y="517" width="0.0804%" height="15" fill="rgb(205,129,25)" fg:x="204" fg:w="1"/><text x="16.6487%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="16.3987%" y="661" width="0.1608%" height="15" fill="rgb(254,112,7)" fg:x="204" fg:w="2"/><text x="16.6487%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="16.3987%" y="645" width="0.1608%" height="15" fill="rgb(226,53,48)" fg:x="204" fg:w="2"/><text x="16.6487%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="16.4791%" y="629" width="0.0804%" height="15" fill="rgb(214,153,38)" fg:x="205" fg:w="1"/><text x="16.7291%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.4791%" y="613" width="0.0804%" height="15" fill="rgb(243,101,7)" fg:x="205" fg:w="1"/><text x="16.7291%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.4791%" y="597" width="0.0804%" height="15" fill="rgb(240,140,22)" fg:x="205" fg:w="1"/><text x="16.7291%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4791%" y="581" width="0.0804%" height="15" fill="rgb(235,114,2)" fg:x="205" fg:w="1"/><text x="16.7291%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.4791%" y="565" width="0.0804%" height="15" fill="rgb(242,59,12)" fg:x="205" fg:w="1"/><text x="16.7291%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4791%" y="549" width="0.0804%" height="15" fill="rgb(252,134,9)" fg:x="205" fg:w="1"/><text x="16.7291%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.5595%" y="661" width="0.0804%" height="15" fill="rgb(236,4,44)" fg:x="206" fg:w="1"/><text x="16.8095%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="16.5595%" y="645" width="0.0804%" height="15" fill="rgb(254,172,41)" fg:x="206" fg:w="1"/><text x="16.8095%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.5595%" y="629" width="0.0804%" height="15" fill="rgb(244,63,20)" fg:x="206" fg:w="1"/><text x="16.8095%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.5595%" y="613" width="0.0804%" height="15" fill="rgb(250,73,31)" fg:x="206" fg:w="1"/><text x="16.8095%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="16.5595%" y="597" width="0.0804%" height="15" fill="rgb(241,38,36)" fg:x="206" fg:w="1"/><text x="16.8095%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="16.6399%" y="629" width="0.1608%" height="15" fill="rgb(245,211,2)" fg:x="207" fg:w="2"/><text x="16.8899%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="16.6399%" y="613" width="0.1608%" height="15" fill="rgb(206,120,28)" fg:x="207" fg:w="2"/><text x="16.8899%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.7203%" y="597" width="0.0804%" height="15" fill="rgb(211,59,34)" fg:x="208" fg:w="1"/><text x="16.9703%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="16.6399%" y="645" width="0.2412%" height="15" fill="rgb(233,168,5)" fg:x="207" fg:w="3"/><text x="16.8899%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.8006%" y="629" width="0.0804%" height="15" fill="rgb(234,33,13)" fg:x="209" fg:w="1"/><text x="17.0506%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.8006%" y="613" width="0.0804%" height="15" fill="rgb(231,150,26)" fg:x="209" fg:w="1"/><text x="17.0506%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="16.6399%" y="661" width="0.3215%" height="15" fill="rgb(217,191,4)" fg:x="207" fg:w="4"/><text x="16.8899%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="16.8810%" y="645" width="0.0804%" height="15" fill="rgb(246,198,38)" fg:x="210" fg:w="1"/><text x="17.1310%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="16.8810%" y="629" width="0.0804%" height="15" fill="rgb(245,64,37)" fg:x="210" fg:w="1"/><text x="17.1310%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="16.8810%" y="613" width="0.0804%" height="15" fill="rgb(250,30,36)" fg:x="210" fg:w="1"/><text x="17.1310%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.8810%" y="597" width="0.0804%" height="15" fill="rgb(217,86,53)" fg:x="210" fg:w="1"/><text x="17.1310%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8810%" y="581" width="0.0804%" height="15" fill="rgb(228,157,16)" fg:x="210" fg:w="1"/><text x="17.1310%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8810%" y="565" width="0.0804%" height="15" fill="rgb(217,59,31)" fg:x="210" fg:w="1"/><text x="17.1310%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8810%" y="549" width="0.0804%" height="15" fill="rgb(237,138,41)" fg:x="210" fg:w="1"/><text x="17.1310%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8810%" y="533" width="0.0804%" height="15" fill="rgb(227,91,49)" fg:x="210" fg:w="1"/><text x="17.1310%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.8810%" y="517" width="0.0804%" height="15" fill="rgb(247,21,44)" fg:x="210" fg:w="1"/><text x="17.1310%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.8810%" y="501" width="0.0804%" height="15" fill="rgb(219,210,51)" fg:x="210" fg:w="1"/><text x="17.1310%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.8810%" y="485" width="0.0804%" height="15" fill="rgb(209,140,6)" fg:x="210" fg:w="1"/><text x="17.1310%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8810%" y="469" width="0.0804%" height="15" fill="rgb(221,188,24)" fg:x="210" fg:w="1"/><text x="17.1310%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8810%" y="453" width="0.0804%" height="15" fill="rgb(232,154,20)" fg:x="210" fg:w="1"/><text x="17.1310%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.8810%" y="437" width="0.0804%" height="15" fill="rgb(244,137,50)" fg:x="210" fg:w="1"/><text x="17.1310%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (8 samples, 0.64%)</title><rect x="16.3987%" y="693" width="0.6431%" height="15" fill="rgb(225,185,43)" fg:x="204" fg:w="8"/><text x="16.6487%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="16.3987%" y="677" width="0.6431%" height="15" fill="rgb(213,205,38)" fg:x="204" fg:w="8"/><text x="16.6487%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="16.9614%" y="661" width="0.0804%" height="15" fill="rgb(236,73,12)" fg:x="211" fg:w="1"/><text x="17.2114%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.9614%" y="645" width="0.0804%" height="15" fill="rgb(235,219,13)" fg:x="211" fg:w="1"/><text x="17.2114%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="16.9614%" y="629" width="0.0804%" height="15" fill="rgb(218,59,36)" fg:x="211" fg:w="1"/><text x="17.2114%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="16.9614%" y="613" width="0.0804%" height="15" fill="rgb(205,110,39)" fg:x="211" fg:w="1"/><text x="17.2114%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="17.1222%" y="677" width="0.0804%" height="15" fill="rgb(218,206,42)" fg:x="213" fg:w="1"/><text x="17.3722%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="17.1222%" y="661" width="0.0804%" height="15" fill="rgb(248,125,24)" fg:x="213" fg:w="1"/><text x="17.3722%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.1222%" y="645" width="0.0804%" height="15" fill="rgb(242,28,27)" fg:x="213" fg:w="1"/><text x="17.3722%" y="655.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="17.1222%" y="629" width="0.0804%" height="15" fill="rgb(216,228,15)" fg:x="213" fg:w="1"/><text x="17.3722%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.1222%" y="613" width="0.0804%" height="15" fill="rgb(235,116,46)" fg:x="213" fg:w="1"/><text x="17.3722%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.2830%" y="597" width="0.0804%" height="15" fill="rgb(224,18,32)" fg:x="215" fg:w="1"/><text x="17.5330%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.2830%" y="581" width="0.0804%" height="15" fill="rgb(252,5,12)" fg:x="215" fg:w="1"/><text x="17.5330%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.2830%" y="565" width="0.0804%" height="15" fill="rgb(251,36,5)" fg:x="215" fg:w="1"/><text x="17.5330%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.2830%" y="549" width="0.0804%" height="15" fill="rgb(217,53,14)" fg:x="215" fg:w="1"/><text x="17.5330%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.2830%" y="533" width="0.0804%" height="15" fill="rgb(215,86,45)" fg:x="215" fg:w="1"/><text x="17.5330%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.2830%" y="517" width="0.0804%" height="15" fill="rgb(242,169,11)" fg:x="215" fg:w="1"/><text x="17.5330%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.2830%" y="501" width="0.0804%" height="15" fill="rgb(211,213,45)" fg:x="215" fg:w="1"/><text x="17.5330%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.2830%" y="485" width="0.0804%" height="15" fill="rgb(205,88,11)" fg:x="215" fg:w="1"/><text x="17.5330%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="17.2026%" y="677" width="0.2412%" height="15" fill="rgb(252,69,26)" fg:x="214" fg:w="3"/><text x="17.4526%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="17.2026%" y="661" width="0.2412%" height="15" fill="rgb(246,123,37)" fg:x="214" fg:w="3"/><text x="17.4526%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="17.2026%" y="645" width="0.2412%" height="15" fill="rgb(212,205,5)" fg:x="214" fg:w="3"/><text x="17.4526%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="17.2830%" y="629" width="0.1608%" height="15" fill="rgb(253,148,0)" fg:x="215" fg:w="2"/><text x="17.5330%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="17.2830%" y="613" width="0.1608%" height="15" fill="rgb(239,22,4)" fg:x="215" fg:w="2"/><text x="17.5330%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.3633%" y="597" width="0.0804%" height="15" fill="rgb(226,26,53)" fg:x="216" fg:w="1"/><text x="17.6133%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.3633%" y="581" width="0.0804%" height="15" fill="rgb(225,229,45)" fg:x="216" fg:w="1"/><text x="17.6133%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3633%" y="565" width="0.0804%" height="15" fill="rgb(220,60,37)" fg:x="216" fg:w="1"/><text x="17.6133%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3633%" y="549" width="0.0804%" height="15" fill="rgb(217,180,35)" fg:x="216" fg:w="1"/><text x="17.6133%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.3633%" y="533" width="0.0804%" height="15" fill="rgb(229,7,53)" fg:x="216" fg:w="1"/><text x="17.6133%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3633%" y="517" width="0.0804%" height="15" fill="rgb(254,137,3)" fg:x="216" fg:w="1"/><text x="17.6133%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3633%" y="501" width="0.0804%" height="15" fill="rgb(215,140,41)" fg:x="216" fg:w="1"/><text x="17.6133%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3633%" y="485" width="0.0804%" height="15" fill="rgb(250,80,15)" fg:x="216" fg:w="1"/><text x="17.6133%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.3633%" y="469" width="0.0804%" height="15" fill="rgb(252,191,6)" fg:x="216" fg:w="1"/><text x="17.6133%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.5241%" y="613" width="0.0804%" height="15" fill="rgb(246,217,18)" fg:x="218" fg:w="1"/><text x="17.7741%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="17.5241%" y="597" width="0.0804%" height="15" fill="rgb(223,93,7)" fg:x="218" fg:w="1"/><text x="17.7741%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="17.5241%" y="581" width="0.0804%" height="15" fill="rgb(225,55,52)" fg:x="218" fg:w="1"/><text x="17.7741%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.5241%" y="565" width="0.0804%" height="15" fill="rgb(240,31,24)" fg:x="218" fg:w="1"/><text x="17.7741%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.5241%" y="549" width="0.0804%" height="15" fill="rgb(205,56,52)" fg:x="218" fg:w="1"/><text x="17.7741%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.5241%" y="533" width="0.0804%" height="15" fill="rgb(246,146,12)" fg:x="218" fg:w="1"/><text x="17.7741%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="17.6849%" y="533" width="0.3215%" height="15" fill="rgb(239,84,36)" fg:x="220" fg:w="4"/><text x="17.9349%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="17.7653%" y="517" width="0.2412%" height="15" fill="rgb(207,41,40)" fg:x="221" fg:w="3"/><text x="18.0153%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="17.8457%" y="501" width="0.1608%" height="15" fill="rgb(241,179,25)" fg:x="222" fg:w="2"/><text x="18.0957%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="17.8457%" y="485" width="0.1608%" height="15" fill="rgb(210,0,34)" fg:x="222" fg:w="2"/><text x="18.0957%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="17.8457%" y="469" width="0.1608%" height="15" fill="rgb(225,217,29)" fg:x="222" fg:w="2"/><text x="18.0957%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="17.8457%" y="453" width="0.1608%" height="15" fill="rgb(216,191,38)" fg:x="222" fg:w="2"/><text x="18.0957%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="17.8457%" y="437" width="0.1608%" height="15" fill="rgb(232,140,52)" fg:x="222" fg:w="2"/><text x="18.0957%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="17.6849%" y="549" width="0.4019%" height="15" fill="rgb(223,158,51)" fg:x="220" fg:w="5"/><text x="17.9349%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.0064%" y="533" width="0.0804%" height="15" fill="rgb(235,29,51)" fg:x="224" fg:w="1"/><text x="18.2564%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.0868%" y="533" width="0.0804%" height="15" fill="rgb(215,181,18)" fg:x="225" fg:w="1"/><text x="18.3368%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.0868%" y="517" width="0.0804%" height="15" fill="rgb(227,125,34)" fg:x="225" fg:w="1"/><text x="18.3368%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.0868%" y="501" width="0.0804%" height="15" fill="rgb(230,197,49)" fg:x="225" fg:w="1"/><text x="18.3368%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.0868%" y="485" width="0.0804%" height="15" fill="rgb(239,141,16)" fg:x="225" fg:w="1"/><text x="18.3368%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="18.1672%" y="533" width="0.3215%" height="15" fill="rgb(225,105,43)" fg:x="226" fg:w="4"/><text x="18.4172%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="18.1672%" y="517" width="0.3215%" height="15" fill="rgb(214,131,14)" fg:x="226" fg:w="4"/><text x="18.4172%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="18.2476%" y="501" width="0.2412%" height="15" fill="rgb(229,177,11)" fg:x="227" fg:w="3"/><text x="18.4976%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="18.3280%" y="485" width="0.1608%" height="15" fill="rgb(231,180,14)" fg:x="228" fg:w="2"/><text x="18.5780%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="18.3280%" y="469" width="0.1608%" height="15" fill="rgb(232,88,2)" fg:x="228" fg:w="2"/><text x="18.5780%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.3280%" y="453" width="0.1608%" height="15" fill="rgb(205,220,8)" fg:x="228" fg:w="2"/><text x="18.5780%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="18.3280%" y="437" width="0.1608%" height="15" fill="rgb(225,23,53)" fg:x="228" fg:w="2"/><text x="18.5780%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.6495%" y="469" width="0.1608%" height="15" fill="rgb(213,62,29)" fg:x="232" fg:w="2"/><text x="18.8995%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.6495%" y="453" width="0.1608%" height="15" fill="rgb(227,75,7)" fg:x="232" fg:w="2"/><text x="18.8995%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="18.6495%" y="485" width="0.2412%" height="15" fill="rgb(207,105,14)" fg:x="232" fg:w="3"/><text x="18.8995%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.8103%" y="469" width="0.0804%" height="15" fill="rgb(245,62,29)" fg:x="234" fg:w="1"/><text x="19.0603%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="18.6495%" y="517" width="0.3215%" height="15" fill="rgb(236,202,4)" fg:x="232" fg:w="4"/><text x="18.8995%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="18.6495%" y="501" width="0.3215%" height="15" fill="rgb(250,67,1)" fg:x="232" fg:w="4"/><text x="18.8995%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.8907%" y="485" width="0.0804%" height="15" fill="rgb(253,115,44)" fg:x="235" fg:w="1"/><text x="19.1407%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="18.9711%" y="517" width="0.4019%" height="15" fill="rgb(251,139,18)" fg:x="236" fg:w="5"/><text x="19.2211%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="19.0514%" y="501" width="0.3215%" height="15" fill="rgb(218,22,32)" fg:x="237" fg:w="4"/><text x="19.3014%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.2122%" y="485" width="0.1608%" height="15" fill="rgb(243,53,5)" fg:x="239" fg:w="2"/><text x="19.4622%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.2926%" y="469" width="0.0804%" height="15" fill="rgb(227,56,16)" fg:x="240" fg:w="1"/><text x="19.5426%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.5338%" y="501" width="0.1608%" height="15" fill="rgb(245,53,0)" fg:x="243" fg:w="2"/><text x="19.7838%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.6141%" y="485" width="0.0804%" height="15" fill="rgb(216,170,35)" fg:x="244" fg:w="1"/><text x="19.8641%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.6945%" y="485" width="0.0804%" height="15" fill="rgb(211,200,8)" fg:x="245" fg:w="1"/><text x="19.9445%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="19.7749%" y="485" width="0.2412%" height="15" fill="rgb(228,204,44)" fg:x="246" fg:w="3"/><text x="20.0249%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.8553%" y="469" width="0.1608%" height="15" fill="rgb(214,121,17)" fg:x="247" fg:w="2"/><text x="20.1053%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.8553%" y="453" width="0.1608%" height="15" fill="rgb(233,64,38)" fg:x="247" fg:w="2"/><text x="20.1053%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="19.8553%" y="437" width="0.1608%" height="15" fill="rgb(253,54,19)" fg:x="247" fg:w="2"/><text x="20.1053%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="19.8553%" y="421" width="0.1608%" height="15" fill="rgb(253,94,18)" fg:x="247" fg:w="2"/><text x="20.1053%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="19.8553%" y="405" width="0.1608%" height="15" fill="rgb(227,57,52)" fg:x="247" fg:w="2"/><text x="20.1053%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="19.8553%" y="389" width="0.1608%" height="15" fill="rgb(230,228,50)" fg:x="247" fg:w="2"/><text x="20.1053%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.0161%" y="469" width="0.0804%" height="15" fill="rgb(217,205,27)" fg:x="249" fg:w="1"/><text x="20.2661%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.0161%" y="453" width="0.0804%" height="15" fill="rgb(252,71,50)" fg:x="249" fg:w="1"/><text x="20.2661%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.0161%" y="437" width="0.0804%" height="15" fill="rgb(209,86,4)" fg:x="249" fg:w="1"/><text x="20.2661%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.0161%" y="421" width="0.0804%" height="15" fill="rgb(229,94,0)" fg:x="249" fg:w="1"/><text x="20.2661%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="20.0161%" y="485" width="0.1608%" height="15" fill="rgb(252,223,21)" fg:x="249" fg:w="2"/><text x="20.2661%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.0965%" y="469" width="0.0804%" height="15" fill="rgb(230,210,4)" fg:x="250" fg:w="1"/><text x="20.3465%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.77%)</title><rect x="18.4887%" y="533" width="1.7685%" height="15" fill="rgb(240,149,38)" fg:x="230" fg:w="22"/><text x="18.7387%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="19.3730%" y="517" width="0.8842%" height="15" fill="rgb(254,105,20)" fg:x="241" fg:w="11"/><text x="19.6230%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="19.6945%" y="501" width="0.5627%" height="15" fill="rgb(253,87,46)" fg:x="245" fg:w="7"/><text x="19.9445%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.1768%" y="485" width="0.0804%" height="15" fill="rgb(253,116,33)" fg:x="251" fg:w="1"/><text x="20.4268%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (28 samples, 2.25%)</title><rect x="18.0868%" y="549" width="2.2508%" height="15" fill="rgb(229,198,5)" fg:x="225" fg:w="28"/><text x="18.3368%" y="559.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.2572%" y="533" width="0.0804%" height="15" fill="rgb(242,38,37)" fg:x="252" fg:w="1"/><text x="20.5072%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.2572%" y="517" width="0.0804%" height="15" fill="rgb(242,69,53)" fg:x="252" fg:w="1"/><text x="20.5072%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="20.2572%" y="501" width="0.0804%" height="15" fill="rgb(249,80,16)" fg:x="252" fg:w="1"/><text x="20.5072%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (34 samples, 2.73%)</title><rect x="17.6849%" y="565" width="2.7331%" height="15" fill="rgb(206,128,11)" fg:x="220" fg:w="34"/><text x="17.9349%" y="575.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.3376%" y="549" width="0.0804%" height="15" fill="rgb(212,35,20)" fg:x="253" fg:w="1"/><text x="20.5876%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.3376%" y="533" width="0.0804%" height="15" fill="rgb(236,79,13)" fg:x="253" fg:w="1"/><text x="20.5876%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.3376%" y="517" width="0.0804%" height="15" fill="rgb(233,123,3)" fg:x="253" fg:w="1"/><text x="20.5876%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4180%" y="533" width="0.0804%" height="15" fill="rgb(214,93,52)" fg:x="254" fg:w="1"/><text x="20.6680%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.4984%" y="501" width="0.1608%" height="15" fill="rgb(251,37,40)" fg:x="255" fg:w="2"/><text x="20.7484%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="20.4180%" y="565" width="0.3215%" height="15" fill="rgb(227,80,54)" fg:x="254" fg:w="4"/><text x="20.6680%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="20.4180%" y="549" width="0.3215%" height="15" fill="rgb(254,48,11)" fg:x="254" fg:w="4"/><text x="20.6680%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.4984%" y="533" width="0.2412%" height="15" fill="rgb(235,193,26)" fg:x="255" fg:w="3"/><text x="20.7484%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.4984%" y="517" width="0.2412%" height="15" fill="rgb(229,99,21)" fg:x="255" fg:w="3"/><text x="20.7484%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.6592%" y="501" width="0.0804%" height="15" fill="rgb(211,140,41)" fg:x="257" fg:w="1"/><text x="20.9092%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7395%" y="533" width="0.0804%" height="15" fill="rgb(240,227,30)" fg:x="258" fg:w="1"/><text x="20.9895%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.7395%" y="517" width="0.0804%" height="15" fill="rgb(215,224,45)" fg:x="258" fg:w="1"/><text x="20.9895%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="20.8199%" y="533" width="0.2412%" height="15" fill="rgb(206,123,31)" fg:x="259" fg:w="3"/><text x="21.0699%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.9807%" y="517" width="0.0804%" height="15" fill="rgb(210,138,16)" fg:x="261" fg:w="1"/><text x="21.2307%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.0611%" y="517" width="0.0804%" height="15" fill="rgb(228,57,28)" fg:x="262" fg:w="1"/><text x="21.3111%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.0611%" y="501" width="0.0804%" height="15" fill="rgb(242,170,10)" fg:x="262" fg:w="1"/><text x="21.3111%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.0611%" y="485" width="0.0804%" height="15" fill="rgb(228,214,39)" fg:x="262" fg:w="1"/><text x="21.3111%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="20.7395%" y="549" width="0.4823%" height="15" fill="rgb(218,179,33)" fg:x="258" fg:w="6"/><text x="20.9895%" y="559.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="21.0611%" y="533" width="0.1608%" height="15" fill="rgb(235,193,39)" fg:x="262" fg:w="2"/><text x="21.3111%" y="543.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="21.1415%" y="517" width="0.0804%" height="15" fill="rgb(219,221,36)" fg:x="263" fg:w="1"/><text x="21.3915%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.1415%" y="501" width="0.0804%" height="15" fill="rgb(248,218,19)" fg:x="263" fg:w="1"/><text x="21.3915%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.3023%" y="517" width="0.0804%" height="15" fill="rgb(205,50,9)" fg:x="265" fg:w="1"/><text x="21.5523%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="21.3826%" y="517" width="0.2412%" height="15" fill="rgb(238,81,28)" fg:x="266" fg:w="3"/><text x="21.6326%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="21.5434%" y="501" width="0.0804%" height="15" fill="rgb(235,110,19)" fg:x="268" fg:w="1"/><text x="21.7934%" y="511.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="21.6238%" y="517" width="0.0804%" height="15" fill="rgb(214,7,14)" fg:x="269" fg:w="1"/><text x="21.8738%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="21.7042%" y="517" width="0.0804%" height="15" fill="rgb(211,77,3)" fg:x="270" fg:w="1"/><text x="21.9542%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.7042%" y="501" width="0.0804%" height="15" fill="rgb(229,5,9)" fg:x="270" fg:w="1"/><text x="21.9542%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.7042%" y="485" width="0.0804%" height="15" fill="rgb(225,90,11)" fg:x="270" fg:w="1"/><text x="21.9542%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (4 samples, 0.32%)</title><rect x="21.7846%" y="517" width="0.3215%" height="15" fill="rgb(242,56,8)" fg:x="271" fg:w="4"/><text x="22.0346%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="21.8650%" y="501" width="0.2412%" height="15" fill="rgb(249,212,39)" fg:x="272" fg:w="3"/><text x="22.1150%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.9453%" y="485" width="0.1608%" height="15" fill="rgb(236,90,9)" fg:x="273" fg:w="2"/><text x="22.1953%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="22.2669%" y="469" width="0.2412%" height="15" fill="rgb(206,88,35)" fg:x="277" fg:w="3"/><text x="22.5169%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="22.2669%" y="453" width="0.2412%" height="15" fill="rgb(205,126,30)" fg:x="277" fg:w="3"/><text x="22.5169%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="22.5080%" y="469" width="0.1608%" height="15" fill="rgb(230,176,12)" fg:x="280" fg:w="2"/><text x="22.7580%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="22.5080%" y="453" width="0.1608%" height="15" fill="rgb(243,19,9)" fg:x="280" fg:w="2"/><text x="22.7580%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="22.5884%" y="437" width="0.0804%" height="15" fill="rgb(245,171,17)" fg:x="281" fg:w="1"/><text x="22.8384%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.5884%" y="421" width="0.0804%" height="15" fill="rgb(227,52,21)" fg:x="281" fg:w="1"/><text x="22.8384%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="22.1865%" y="501" width="0.8842%" height="15" fill="rgb(238,69,14)" fg:x="276" fg:w="11"/><text x="22.4365%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="22.2669%" y="485" width="0.8039%" height="15" fill="rgb(241,156,39)" fg:x="277" fg:w="10"/><text x="22.5169%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="22.6688%" y="469" width="0.4019%" height="15" fill="rgb(212,227,28)" fg:x="282" fg:w="5"/><text x="22.9188%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="22.7492%" y="453" width="0.3215%" height="15" fill="rgb(209,118,27)" fg:x="283" fg:w="4"/><text x="22.9992%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="22.7492%" y="437" width="0.3215%" height="15" fill="rgb(226,102,5)" fg:x="283" fg:w="4"/><text x="22.9992%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="22.9100%" y="421" width="0.1608%" height="15" fill="rgb(223,34,3)" fg:x="285" fg:w="2"/><text x="23.1600%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.9904%" y="405" width="0.0804%" height="15" fill="rgb(221,81,38)" fg:x="286" fg:w="1"/><text x="23.2404%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9904%" y="389" width="0.0804%" height="15" fill="rgb(236,219,28)" fg:x="286" fg:w="1"/><text x="23.2404%" y="399.50"></text></g><g><title>engine::session::Session::flush (72 samples, 5.79%)</title><rect x="17.4437%" y="677" width="5.7878%" height="15" fill="rgb(213,200,14)" fg:x="217" fg:w="72"/><text x="17.6937%" y="687.50">engine:..</text></g><g><title>engine::session::Session::save_changes (72 samples, 5.79%)</title><rect x="17.4437%" y="661" width="5.7878%" height="15" fill="rgb(240,33,19)" fg:x="217" fg:w="72"/><text x="17.6937%" y="671.50">engine:..</text></g><g><title>engine::session::state::State::close (72 samples, 5.79%)</title><rect x="17.4437%" y="645" width="5.7878%" height="15" fill="rgb(233,113,27)" fg:x="217" fg:w="72"/><text x="17.6937%" y="655.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (72 samples, 5.79%)</title><rect x="17.4437%" y="629" width="5.7878%" height="15" fill="rgb(220,221,18)" fg:x="217" fg:w="72"/><text x="17.6937%" y="639.50">engine:..</text></g><g><title>core::iter::adapters::try_process (70 samples, 5.63%)</title><rect x="17.6045%" y="613" width="5.6270%" height="15" fill="rgb(238,92,8)" fg:x="219" fg:w="70"/><text x="17.8545%" y="623.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (70 samples, 5.63%)</title><rect x="17.6045%" y="597" width="5.6270%" height="15" fill="rgb(222,164,16)" fg:x="219" fg:w="70"/><text x="17.8545%" y="607.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (70 samples, 5.63%)</title><rect x="17.6045%" y="581" width="5.6270%" height="15" fill="rgb(241,119,3)" fg:x="219" fg:w="70"/><text x="17.8545%" y="591.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (31 samples, 2.49%)</title><rect x="20.7395%" y="565" width="2.4920%" height="15" fill="rgb(241,44,8)" fg:x="258" fg:w="31"/><text x="20.9895%" y="575.50">ke..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (25 samples, 2.01%)</title><rect x="21.2219%" y="549" width="2.0096%" height="15" fill="rgb(230,36,40)" fg:x="264" fg:w="25"/><text x="21.4719%" y="559.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (24 samples, 1.93%)</title><rect x="21.3023%" y="533" width="1.9293%" height="15" fill="rgb(243,16,36)" fg:x="265" fg:w="24"/><text x="21.5523%" y="543.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.13%)</title><rect x="22.1061%" y="517" width="1.1254%" height="15" fill="rgb(231,4,26)" fg:x="275" fg:w="14"/><text x="22.3561%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.0707%" y="501" width="0.1608%" height="15" fill="rgb(240,9,31)" fg:x="287" fg:w="2"/><text x="23.3207%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.1511%" y="485" width="0.0804%" height="15" fill="rgb(207,173,15)" fg:x="288" fg:w="1"/><text x="23.4011%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="23.3119%" y="645" width="0.0804%" height="15" fill="rgb(224,192,53)" fg:x="290" fg:w="1"/><text x="23.5619%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.3119%" y="629" width="0.0804%" height="15" fill="rgb(223,67,28)" fg:x="290" fg:w="1"/><text x="23.5619%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.3119%" y="613" width="0.0804%" height="15" fill="rgb(211,20,47)" fg:x="290" fg:w="1"/><text x="23.5619%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.24%)</title><rect x="23.2315%" y="677" width="0.2412%" height="15" fill="rgb(240,228,2)" fg:x="289" fg:w="3"/><text x="23.4815%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="23.2315%" y="661" width="0.2412%" height="15" fill="rgb(248,151,12)" fg:x="289" fg:w="3"/><text x="23.4815%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.3923%" y="645" width="0.0804%" height="15" fill="rgb(244,8,39)" fg:x="291" fg:w="1"/><text x="23.6423%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="23.3923%" y="629" width="0.0804%" height="15" fill="rgb(222,26,8)" fg:x="291" fg:w="1"/><text x="23.6423%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.5531%" y="629" width="0.0804%" height="15" fill="rgb(213,106,44)" fg:x="293" fg:w="1"/><text x="23.8031%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.5531%" y="613" width="0.0804%" height="15" fill="rgb(214,129,20)" fg:x="293" fg:w="1"/><text x="23.8031%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.5531%" y="597" width="0.0804%" height="15" fill="rgb(212,32,13)" fg:x="293" fg:w="1"/><text x="23.8031%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5531%" y="581" width="0.0804%" height="15" fill="rgb(208,168,33)" fg:x="293" fg:w="1"/><text x="23.8031%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.6334%" y="565" width="0.0804%" height="15" fill="rgb(231,207,8)" fg:x="294" fg:w="1"/><text x="23.8834%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="23.5531%" y="661" width="0.2412%" height="15" fill="rgb(235,219,23)" fg:x="293" fg:w="3"/><text x="23.8031%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="23.5531%" y="645" width="0.2412%" height="15" fill="rgb(226,216,26)" fg:x="293" fg:w="3"/><text x="23.8031%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.6334%" y="629" width="0.1608%" height="15" fill="rgb(239,137,16)" fg:x="294" fg:w="2"/><text x="23.8834%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.6334%" y="613" width="0.1608%" height="15" fill="rgb(207,12,36)" fg:x="294" fg:w="2"/><text x="23.8834%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.6334%" y="597" width="0.1608%" height="15" fill="rgb(210,214,24)" fg:x="294" fg:w="2"/><text x="23.8834%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.6334%" y="581" width="0.1608%" height="15" fill="rgb(206,56,30)" fg:x="294" fg:w="2"/><text x="23.8834%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.7138%" y="565" width="0.0804%" height="15" fill="rgb(228,143,26)" fg:x="295" fg:w="1"/><text x="23.9638%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.7138%" y="549" width="0.0804%" height="15" fill="rgb(216,218,46)" fg:x="295" fg:w="1"/><text x="23.9638%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.7138%" y="533" width="0.0804%" height="15" fill="rgb(206,6,19)" fg:x="295" fg:w="1"/><text x="23.9638%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.7942%" y="629" width="0.0804%" height="15" fill="rgb(239,177,51)" fg:x="296" fg:w="1"/><text x="24.0442%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="23.7942%" y="645" width="0.1608%" height="15" fill="rgb(216,55,25)" fg:x="296" fg:w="2"/><text x="24.0442%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.8746%" y="629" width="0.0804%" height="15" fill="rgb(231,163,29)" fg:x="297" fg:w="1"/><text x="24.1246%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.8746%" y="613" width="0.0804%" height="15" fill="rgb(232,149,50)" fg:x="297" fg:w="1"/><text x="24.1246%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="23.8746%" y="597" width="0.0804%" height="15" fill="rgb(223,142,48)" fg:x="297" fg:w="1"/><text x="24.1246%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.8746%" y="581" width="0.0804%" height="15" fill="rgb(245,83,23)" fg:x="297" fg:w="1"/><text x="24.1246%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="23.9550%" y="645" width="0.0804%" height="15" fill="rgb(224,63,2)" fg:x="298" fg:w="1"/><text x="24.2050%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="23.9550%" y="629" width="0.0804%" height="15" fill="rgb(218,65,53)" fg:x="298" fg:w="1"/><text x="24.2050%" y="639.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="23.9550%" y="613" width="0.0804%" height="15" fill="rgb(221,84,29)" fg:x="298" fg:w="1"/><text x="24.2050%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.9550%" y="597" width="0.0804%" height="15" fill="rgb(234,0,32)" fg:x="298" fg:w="1"/><text x="24.2050%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.9550%" y="581" width="0.0804%" height="15" fill="rgb(206,20,16)" fg:x="298" fg:w="1"/><text x="24.2050%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.0354%" y="581" width="0.0804%" height="15" fill="rgb(244,172,18)" fg:x="299" fg:w="1"/><text x="24.2854%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.0354%" y="565" width="0.0804%" height="15" fill="rgb(254,133,1)" fg:x="299" fg:w="1"/><text x="24.2854%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.0354%" y="549" width="0.0804%" height="15" fill="rgb(222,206,41)" fg:x="299" fg:w="1"/><text x="24.2854%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.0354%" y="533" width="0.0804%" height="15" fill="rgb(212,3,42)" fg:x="299" fg:w="1"/><text x="24.2854%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.0354%" y="517" width="0.0804%" height="15" fill="rgb(241,11,4)" fg:x="299" fg:w="1"/><text x="24.2854%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.0354%" y="501" width="0.0804%" height="15" fill="rgb(205,19,26)" fg:x="299" fg:w="1"/><text x="24.2854%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.0354%" y="485" width="0.0804%" height="15" fill="rgb(210,179,32)" fg:x="299" fg:w="1"/><text x="24.2854%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.0354%" y="469" width="0.0804%" height="15" fill="rgb(227,116,49)" fg:x="299" fg:w="1"/><text x="24.2854%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.0354%" y="453" width="0.0804%" height="15" fill="rgb(211,146,6)" fg:x="299" fg:w="1"/><text x="24.2854%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.0354%" y="437" width="0.0804%" height="15" fill="rgb(219,44,39)" fg:x="299" fg:w="1"/><text x="24.2854%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.0354%" y="421" width="0.0804%" height="15" fill="rgb(234,128,11)" fg:x="299" fg:w="1"/><text x="24.2854%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.0354%" y="405" width="0.0804%" height="15" fill="rgb(220,183,53)" fg:x="299" fg:w="1"/><text x="24.2854%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.0354%" y="389" width="0.0804%" height="15" fill="rgb(213,219,32)" fg:x="299" fg:w="1"/><text x="24.2854%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.0354%" y="373" width="0.0804%" height="15" fill="rgb(232,156,16)" fg:x="299" fg:w="1"/><text x="24.2854%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.0354%" y="357" width="0.0804%" height="15" fill="rgb(246,135,34)" fg:x="299" fg:w="1"/><text x="24.2854%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="24.0354%" y="597" width="0.1608%" height="15" fill="rgb(241,99,0)" fg:x="299" fg:w="2"/><text x="24.2854%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.1158%" y="581" width="0.0804%" height="15" fill="rgb(222,103,45)" fg:x="300" fg:w="1"/><text x="24.3658%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.1158%" y="565" width="0.0804%" height="15" fill="rgb(212,57,4)" fg:x="300" fg:w="1"/><text x="24.3658%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.1158%" y="549" width="0.0804%" height="15" fill="rgb(215,68,47)" fg:x="300" fg:w="1"/><text x="24.3658%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="24.0354%" y="629" width="0.2412%" height="15" fill="rgb(230,84,2)" fg:x="299" fg:w="3"/><text x="24.2854%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="24.0354%" y="613" width="0.2412%" height="15" fill="rgb(220,102,14)" fg:x="299" fg:w="3"/><text x="24.2854%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="24.1961%" y="597" width="0.0804%" height="15" fill="rgb(240,10,32)" fg:x="301" fg:w="1"/><text x="24.4461%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1961%" y="581" width="0.0804%" height="15" fill="rgb(215,47,27)" fg:x="301" fg:w="1"/><text x="24.4461%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.2765%" y="597" width="0.0804%" height="15" fill="rgb(233,188,43)" fg:x="302" fg:w="1"/><text x="24.5265%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="24.3569%" y="597" width="0.0804%" height="15" fill="rgb(253,190,1)" fg:x="303" fg:w="1"/><text x="24.6069%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.3569%" y="581" width="0.0804%" height="15" fill="rgb(206,114,52)" fg:x="303" fg:w="1"/><text x="24.6069%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.5177%" y="485" width="0.0804%" height="15" fill="rgb(233,120,37)" fg:x="305" fg:w="1"/><text x="24.7677%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.88%)</title><rect x="23.7942%" y="661" width="0.8842%" height="15" fill="rgb(214,52,39)" fg:x="296" fg:w="11"/><text x="24.0442%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="24.0354%" y="645" width="0.6431%" height="15" fill="rgb(223,80,29)" fg:x="299" fg:w="8"/><text x="24.2854%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="24.2765%" y="629" width="0.4019%" height="15" fill="rgb(230,101,40)" fg:x="302" fg:w="5"/><text x="24.5265%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="24.2765%" y="613" width="0.4019%" height="15" fill="rgb(219,211,8)" fg:x="302" fg:w="5"/><text x="24.5265%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="24.4373%" y="597" width="0.2412%" height="15" fill="rgb(252,126,28)" fg:x="304" fg:w="3"/><text x="24.6873%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="24.4373%" y="581" width="0.2412%" height="15" fill="rgb(215,56,38)" fg:x="304" fg:w="3"/><text x="24.6873%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.5177%" y="565" width="0.1608%" height="15" fill="rgb(249,55,44)" fg:x="305" fg:w="2"/><text x="24.7677%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.5177%" y="549" width="0.1608%" height="15" fill="rgb(220,221,32)" fg:x="305" fg:w="2"/><text x="24.7677%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.5177%" y="533" width="0.1608%" height="15" fill="rgb(212,216,41)" fg:x="305" fg:w="2"/><text x="24.7677%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.5177%" y="517" width="0.1608%" height="15" fill="rgb(228,213,43)" fg:x="305" fg:w="2"/><text x="24.7677%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.5177%" y="501" width="0.1608%" height="15" fill="rgb(211,31,26)" fg:x="305" fg:w="2"/><text x="24.7677%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.5981%" y="485" width="0.0804%" height="15" fill="rgb(229,202,19)" fg:x="306" fg:w="1"/><text x="24.8481%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.5981%" y="469" width="0.0804%" height="15" fill="rgb(229,105,46)" fg:x="306" fg:w="1"/><text x="24.8481%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.6785%" y="629" width="0.0804%" height="15" fill="rgb(235,108,1)" fg:x="307" fg:w="1"/><text x="24.9285%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6785%" y="613" width="0.0804%" height="15" fill="rgb(245,111,35)" fg:x="307" fg:w="1"/><text x="24.9285%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (17 samples, 1.37%)</title><rect x="23.4727%" y="677" width="1.3666%" height="15" fill="rgb(219,185,31)" fg:x="292" fg:w="17"/><text x="23.7227%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="24.6785%" y="661" width="0.1608%" height="15" fill="rgb(214,4,43)" fg:x="307" fg:w="2"/><text x="24.9285%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.6785%" y="645" width="0.1608%" height="15" fill="rgb(235,227,40)" fg:x="307" fg:w="2"/><text x="24.9285%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7588%" y="629" width="0.0804%" height="15" fill="rgb(230,88,30)" fg:x="308" fg:w="1"/><text x="25.0088%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="24.8392%" y="677" width="0.0804%" height="15" fill="rgb(216,217,1)" fg:x="309" fg:w="1"/><text x="25.0892%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="24.8392%" y="661" width="0.0804%" height="15" fill="rgb(248,139,50)" fg:x="309" fg:w="1"/><text x="25.0892%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="24.8392%" y="645" width="0.0804%" height="15" fill="rgb(233,1,21)" fg:x="309" fg:w="1"/><text x="25.0892%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="24.8392%" y="629" width="0.0804%" height="15" fill="rgb(215,183,12)" fg:x="309" fg:w="1"/><text x="25.0892%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.8392%" y="613" width="0.0804%" height="15" fill="rgb(229,104,42)" fg:x="309" fg:w="1"/><text x="25.0892%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="24.9196%" y="645" width="0.0804%" height="15" fill="rgb(243,34,48)" fg:x="310" fg:w="1"/><text x="25.1696%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="24.9196%" y="629" width="0.0804%" height="15" fill="rgb(239,11,44)" fg:x="310" fg:w="1"/><text x="25.1696%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="24.9196%" y="613" width="0.0804%" height="15" fill="rgb(231,98,35)" fg:x="310" fg:w="1"/><text x="25.1696%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="24.9196%" y="597" width="0.0804%" height="15" fill="rgb(233,28,25)" fg:x="310" fg:w="1"/><text x="25.1696%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.0000%" y="581" width="0.0804%" height="15" fill="rgb(234,123,11)" fg:x="311" fg:w="1"/><text x="25.2500%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.0000%" y="565" width="0.0804%" height="15" fill="rgb(220,69,3)" fg:x="311" fg:w="1"/><text x="25.2500%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0000%" y="549" width="0.0804%" height="15" fill="rgb(214,64,36)" fg:x="311" fg:w="1"/><text x="25.2500%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.0804%" y="581" width="0.0804%" height="15" fill="rgb(211,138,32)" fg:x="312" fg:w="1"/><text x="25.3304%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="25.0000%" y="597" width="0.2412%" height="15" fill="rgb(213,118,47)" fg:x="311" fg:w="3"/><text x="25.2500%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.1608%" y="581" width="0.0804%" height="15" fill="rgb(243,124,49)" fg:x="313" fg:w="1"/><text x="25.4108%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.1608%" y="565" width="0.0804%" height="15" fill="rgb(221,30,28)" fg:x="313" fg:w="1"/><text x="25.4108%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="25.0000%" y="645" width="0.4019%" height="15" fill="rgb(246,37,13)" fg:x="311" fg:w="5"/><text x="25.2500%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.40%)</title><rect x="25.0000%" y="629" width="0.4019%" height="15" fill="rgb(249,66,14)" fg:x="311" fg:w="5"/><text x="25.2500%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="25.0000%" y="613" width="0.4019%" height="15" fill="rgb(213,166,5)" fg:x="311" fg:w="5"/><text x="25.2500%" y="623.50"></text></g><g><title>kernel::model::props::Props::string_property (2 samples, 0.16%)</title><rect x="25.2412%" y="597" width="0.1608%" height="15" fill="rgb(221,66,24)" fg:x="314" fg:w="2"/><text x="25.4912%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="25.3215%" y="581" width="0.0804%" height="15" fill="rgb(210,132,17)" fg:x="315" fg:w="1"/><text x="25.5715%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="25.4019%" y="629" width="0.0804%" height="15" fill="rgb(243,202,5)" fg:x="316" fg:w="1"/><text x="25.6519%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.4019%" y="613" width="0.0804%" height="15" fill="rgb(233,70,48)" fg:x="316" fg:w="1"/><text x="25.6519%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="25.4019%" y="597" width="0.0804%" height="15" fill="rgb(238,41,26)" fg:x="316" fg:w="1"/><text x="25.6519%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="25.4019%" y="581" width="0.0804%" height="15" fill="rgb(241,19,31)" fg:x="316" fg:w="1"/><text x="25.6519%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (8 samples, 0.64%)</title><rect x="24.9196%" y="677" width="0.6431%" height="15" fill="rgb(214,76,10)" fg:x="310" fg:w="8"/><text x="25.1696%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (8 samples, 0.64%)</title><rect x="24.9196%" y="661" width="0.6431%" height="15" fill="rgb(254,202,22)" fg:x="310" fg:w="8"/><text x="25.1696%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="25.4019%" y="645" width="0.1608%" height="15" fill="rgb(214,72,24)" fg:x="316" fg:w="2"/><text x="25.6519%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="25.4823%" y="629" width="0.0804%" height="15" fill="rgb(221,92,46)" fg:x="317" fg:w="1"/><text x="25.7323%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.4823%" y="613" width="0.0804%" height="15" fill="rgb(246,13,50)" fg:x="317" fg:w="1"/><text x="25.7323%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="25.4823%" y="597" width="0.0804%" height="15" fill="rgb(240,165,38)" fg:x="317" fg:w="1"/><text x="25.7323%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="25.4823%" y="581" width="0.0804%" height="15" fill="rgb(241,24,51)" fg:x="317" fg:w="1"/><text x="25.7323%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="25.4823%" y="565" width="0.0804%" height="15" fill="rgb(227,51,44)" fg:x="317" fg:w="1"/><text x="25.7323%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.32%)</title><rect x="25.5627%" y="677" width="0.3215%" height="15" fill="rgb(231,121,3)" fg:x="318" fg:w="4"/><text x="25.8127%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="25.5627%" y="661" width="0.3215%" height="15" fill="rgb(245,3,41)" fg:x="318" fg:w="4"/><text x="25.8127%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="25.5627%" y="645" width="0.3215%" height="15" fill="rgb(214,13,26)" fg:x="318" fg:w="4"/><text x="25.8127%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="25.5627%" y="629" width="0.3215%" height="15" fill="rgb(252,75,11)" fg:x="318" fg:w="4"/><text x="25.8127%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="25.6431%" y="613" width="0.2412%" height="15" fill="rgb(218,226,17)" fg:x="319" fg:w="3"/><text x="25.8931%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="25.6431%" y="597" width="0.2412%" height="15" fill="rgb(248,89,38)" fg:x="319" fg:w="3"/><text x="25.8931%" y="607.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="25.6431%" y="581" width="0.2412%" height="15" fill="rgb(237,73,46)" fg:x="319" fg:w="3"/><text x="25.8931%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="25.6431%" y="565" width="0.2412%" height="15" fill="rgb(242,78,33)" fg:x="319" fg:w="3"/><text x="25.8931%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.6431%" y="549" width="0.2412%" height="15" fill="rgb(235,60,3)" fg:x="319" fg:w="3"/><text x="25.8931%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="25.8039%" y="533" width="0.0804%" height="15" fill="rgb(216,172,19)" fg:x="321" fg:w="1"/><text x="26.0539%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8842%" y="597" width="0.0804%" height="15" fill="rgb(227,6,42)" fg:x="322" fg:w="1"/><text x="26.1342%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="25.8842%" y="661" width="0.2412%" height="15" fill="rgb(223,207,42)" fg:x="322" fg:w="3"/><text x="26.1342%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="25.8842%" y="645" width="0.2412%" height="15" fill="rgb(246,138,30)" fg:x="322" fg:w="3"/><text x="26.1342%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="25.8842%" y="629" width="0.2412%" height="15" fill="rgb(251,199,47)" fg:x="322" fg:w="3"/><text x="26.1342%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="25.8842%" y="613" width="0.2412%" height="15" fill="rgb(228,218,44)" fg:x="322" fg:w="3"/><text x="26.1342%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.9646%" y="597" width="0.1608%" height="15" fill="rgb(220,68,6)" fg:x="323" fg:w="2"/><text x="26.2146%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.9646%" y="581" width="0.1608%" height="15" fill="rgb(240,60,26)" fg:x="323" fg:w="2"/><text x="26.2146%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="25.9646%" y="565" width="0.1608%" height="15" fill="rgb(211,200,19)" fg:x="323" fg:w="2"/><text x="26.2146%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.9646%" y="549" width="0.1608%" height="15" fill="rgb(242,145,30)" fg:x="323" fg:w="2"/><text x="26.2146%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.9646%" y="533" width="0.1608%" height="15" fill="rgb(225,64,13)" fg:x="323" fg:w="2"/><text x="26.2146%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.1254%" y="629" width="0.0804%" height="15" fill="rgb(218,103,35)" fg:x="325" fg:w="1"/><text x="26.3754%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="26.1254%" y="645" width="0.1608%" height="15" fill="rgb(216,93,46)" fg:x="325" fg:w="2"/><text x="26.3754%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.2058%" y="629" width="0.0804%" height="15" fill="rgb(225,159,27)" fg:x="326" fg:w="1"/><text x="26.4558%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.2058%" y="613" width="0.0804%" height="15" fill="rgb(225,204,11)" fg:x="326" fg:w="1"/><text x="26.4558%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="26.1254%" y="661" width="0.2412%" height="15" fill="rgb(205,56,4)" fg:x="325" fg:w="3"/><text x="26.3754%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="26.2862%" y="645" width="0.0804%" height="15" fill="rgb(206,6,35)" fg:x="327" fg:w="1"/><text x="26.5362%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="26.2862%" y="629" width="0.0804%" height="15" fill="rgb(247,73,52)" fg:x="327" fg:w="1"/><text x="26.5362%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="26.2862%" y="613" width="0.0804%" height="15" fill="rgb(246,97,4)" fg:x="327" fg:w="1"/><text x="26.5362%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="26.2862%" y="597" width="0.0804%" height="15" fill="rgb(212,37,15)" fg:x="327" fg:w="1"/><text x="26.5362%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.2862%" y="581" width="0.0804%" height="15" fill="rgb(208,130,40)" fg:x="327" fg:w="1"/><text x="26.5362%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.2862%" y="565" width="0.0804%" height="15" fill="rgb(236,55,29)" fg:x="327" fg:w="1"/><text x="26.5362%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="26.2862%" y="549" width="0.0804%" height="15" fill="rgb(209,156,45)" fg:x="327" fg:w="1"/><text x="26.5362%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.2862%" y="533" width="0.0804%" height="15" fill="rgb(249,107,4)" fg:x="327" fg:w="1"/><text x="26.5362%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2862%" y="517" width="0.0804%" height="15" fill="rgb(227,7,13)" fg:x="327" fg:w="1"/><text x="26.5362%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="26.3666%" y="629" width="0.0804%" height="15" fill="rgb(250,129,14)" fg:x="328" fg:w="1"/><text x="26.6166%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.3666%" y="613" width="0.0804%" height="15" fill="rgb(229,92,13)" fg:x="328" fg:w="1"/><text x="26.6166%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="26.3666%" y="597" width="0.0804%" height="15" fill="rgb(245,98,39)" fg:x="328" fg:w="1"/><text x="26.6166%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="25.8842%" y="677" width="0.6431%" height="15" fill="rgb(234,135,48)" fg:x="322" fg:w="8"/><text x="26.1342%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="26.3666%" y="661" width="0.1608%" height="15" fill="rgb(230,98,28)" fg:x="328" fg:w="2"/><text x="26.6166%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="26.3666%" y="645" width="0.1608%" height="15" fill="rgb(223,121,0)" fg:x="328" fg:w="2"/><text x="26.6166%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="26.4469%" y="629" width="0.0804%" height="15" fill="rgb(234,173,33)" fg:x="329" fg:w="1"/><text x="26.6969%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.4469%" y="613" width="0.0804%" height="15" fill="rgb(245,47,8)" fg:x="329" fg:w="1"/><text x="26.6969%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="26.4469%" y="597" width="0.0804%" height="15" fill="rgb(205,17,20)" fg:x="329" fg:w="1"/><text x="26.6969%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.4469%" y="581" width="0.0804%" height="15" fill="rgb(232,151,16)" fg:x="329" fg:w="1"/><text x="26.6969%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4469%" y="565" width="0.0804%" height="15" fill="rgb(208,30,32)" fg:x="329" fg:w="1"/><text x="26.6969%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (119 samples, 9.57%)</title><rect x="17.0418%" y="693" width="9.5659%" height="15" fill="rgb(254,26,3)" fg:x="212" fg:w="119"/><text x="17.2918%" y="703.50">plugins_core::..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="26.5273%" y="677" width="0.0804%" height="15" fill="rgb(240,177,30)" fg:x="330" fg:w="1"/><text x="26.7773%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="26.5273%" y="661" width="0.0804%" height="15" fill="rgb(248,76,44)" fg:x="330" fg:w="1"/><text x="26.7773%" y="671.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="26.5273%" y="645" width="0.0804%" height="15" fill="rgb(241,186,54)" fg:x="330" fg:w="1"/><text x="26.7773%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.5273%" y="629" width="0.0804%" height="15" fill="rgb(249,171,29)" fg:x="330" fg:w="1"/><text x="26.7773%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="26.6077%" y="693" width="0.0804%" height="15" fill="rgb(237,151,44)" fg:x="331" fg:w="1"/><text x="26.8577%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="26.6077%" y="677" width="0.0804%" height="15" fill="rgb(228,174,30)" fg:x="331" fg:w="1"/><text x="26.8577%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="26.6077%" y="661" width="0.0804%" height="15" fill="rgb(252,14,37)" fg:x="331" fg:w="1"/><text x="26.8577%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="26.6077%" y="645" width="0.0804%" height="15" fill="rgb(207,111,40)" fg:x="331" fg:w="1"/><text x="26.8577%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="26.6077%" y="629" width="0.0804%" height="15" fill="rgb(248,171,54)" fg:x="331" fg:w="1"/><text x="26.8577%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.6881%" y="661" width="0.0804%" height="15" fill="rgb(211,127,2)" fg:x="332" fg:w="1"/><text x="26.9381%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.6881%" y="645" width="0.0804%" height="15" fill="rgb(236,87,47)" fg:x="332" fg:w="1"/><text x="26.9381%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="26.6881%" y="629" width="0.0804%" height="15" fill="rgb(223,190,45)" fg:x="332" fg:w="1"/><text x="26.9381%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.6881%" y="613" width="0.0804%" height="15" fill="rgb(215,5,16)" fg:x="332" fg:w="1"/><text x="26.9381%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="26.7685%" y="661" width="0.0804%" height="15" fill="rgb(252,82,33)" fg:x="333" fg:w="1"/><text x="27.0185%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="26.7685%" y="645" width="0.0804%" height="15" fill="rgb(247,213,44)" fg:x="333" fg:w="1"/><text x="27.0185%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="26.7685%" y="629" width="0.0804%" height="15" fill="rgb(205,196,44)" fg:x="333" fg:w="1"/><text x="27.0185%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="26.7685%" y="613" width="0.0804%" height="15" fill="rgb(237,96,54)" fg:x="333" fg:w="1"/><text x="27.0185%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.8489%" y="613" width="0.0804%" height="15" fill="rgb(230,113,34)" fg:x="334" fg:w="1"/><text x="27.0989%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.8489%" y="597" width="0.0804%" height="15" fill="rgb(221,224,12)" fg:x="334" fg:w="1"/><text x="27.0989%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.8489%" y="581" width="0.0804%" height="15" fill="rgb(219,112,44)" fg:x="334" fg:w="1"/><text x="27.0989%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.8489%" y="565" width="0.0804%" height="15" fill="rgb(210,31,13)" fg:x="334" fg:w="1"/><text x="27.0989%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.8489%" y="549" width="0.0804%" height="15" fill="rgb(230,25,16)" fg:x="334" fg:w="1"/><text x="27.0989%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="26.8489%" y="533" width="0.0804%" height="15" fill="rgb(246,108,53)" fg:x="334" fg:w="1"/><text x="27.0989%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="26.8489%" y="517" width="0.0804%" height="15" fill="rgb(241,172,50)" fg:x="334" fg:w="1"/><text x="27.0989%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="26.8489%" y="501" width="0.0804%" height="15" fill="rgb(235,141,10)" fg:x="334" fg:w="1"/><text x="27.0989%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.8489%" y="485" width="0.0804%" height="15" fill="rgb(220,174,43)" fg:x="334" fg:w="1"/><text x="27.0989%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="26.8489%" y="469" width="0.0804%" height="15" fill="rgb(215,181,40)" fg:x="334" fg:w="1"/><text x="27.0989%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="26.8489%" y="453" width="0.0804%" height="15" fill="rgb(230,97,2)" fg:x="334" fg:w="1"/><text x="27.0989%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="26.8489%" y="437" width="0.0804%" height="15" fill="rgb(211,25,27)" fg:x="334" fg:w="1"/><text x="27.0989%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="26.8489%" y="421" width="0.0804%" height="15" fill="rgb(230,87,26)" fg:x="334" fg:w="1"/><text x="27.0989%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="26.8489%" y="405" width="0.0804%" height="15" fill="rgb(227,160,17)" fg:x="334" fg:w="1"/><text x="27.0989%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8489%" y="389" width="0.0804%" height="15" fill="rgb(244,85,34)" fg:x="334" fg:w="1"/><text x="27.0989%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9293%" y="613" width="0.0804%" height="15" fill="rgb(207,70,0)" fg:x="335" fg:w="1"/><text x="27.1793%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="26.8489%" y="645" width="0.2412%" height="15" fill="rgb(223,129,7)" fg:x="334" fg:w="3"/><text x="27.0989%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="26.8489%" y="629" width="0.2412%" height="15" fill="rgb(246,105,7)" fg:x="334" fg:w="3"/><text x="27.0989%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.0096%" y="613" width="0.0804%" height="15" fill="rgb(215,154,42)" fg:x="336" fg:w="1"/><text x="27.2596%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.0096%" y="597" width="0.0804%" height="15" fill="rgb(220,215,30)" fg:x="336" fg:w="1"/><text x="27.2596%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="27.0096%" y="581" width="0.0804%" height="15" fill="rgb(228,81,51)" fg:x="336" fg:w="1"/><text x="27.2596%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.0096%" y="565" width="0.0804%" height="15" fill="rgb(247,71,54)" fg:x="336" fg:w="1"/><text x="27.2596%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.0096%" y="549" width="0.0804%" height="15" fill="rgb(234,176,34)" fg:x="336" fg:w="1"/><text x="27.2596%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0096%" y="533" width="0.0804%" height="15" fill="rgb(241,103,54)" fg:x="336" fg:w="1"/><text x="27.2596%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.0900%" y="613" width="0.1608%" height="15" fill="rgb(228,22,34)" fg:x="337" fg:w="2"/><text x="27.3400%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.0900%" y="597" width="0.1608%" height="15" fill="rgb(241,179,48)" fg:x="337" fg:w="2"/><text x="27.3400%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="27.0900%" y="581" width="0.1608%" height="15" fill="rgb(235,167,37)" fg:x="337" fg:w="2"/><text x="27.3400%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="27.0900%" y="565" width="0.1608%" height="15" fill="rgb(213,109,30)" fg:x="337" fg:w="2"/><text x="27.3400%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="27.0900%" y="549" width="0.1608%" height="15" fill="rgb(222,172,16)" fg:x="337" fg:w="2"/><text x="27.3400%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="27.0900%" y="533" width="0.1608%" height="15" fill="rgb(233,192,5)" fg:x="337" fg:w="2"/><text x="27.3400%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="27.0900%" y="517" width="0.1608%" height="15" fill="rgb(247,189,41)" fg:x="337" fg:w="2"/><text x="27.3400%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="27.0900%" y="501" width="0.1608%" height="15" fill="rgb(218,134,47)" fg:x="337" fg:w="2"/><text x="27.3400%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="27.0900%" y="485" width="0.1608%" height="15" fill="rgb(216,29,3)" fg:x="337" fg:w="2"/><text x="27.3400%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="27.0900%" y="469" width="0.1608%" height="15" fill="rgb(246,140,12)" fg:x="337" fg:w="2"/><text x="27.3400%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="27.0900%" y="453" width="0.1608%" height="15" fill="rgb(230,136,11)" fg:x="337" fg:w="2"/><text x="27.3400%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="27.0900%" y="437" width="0.1608%" height="15" fill="rgb(247,22,47)" fg:x="337" fg:w="2"/><text x="27.3400%" y="447.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="27.0900%" y="421" width="0.1608%" height="15" fill="rgb(218,84,22)" fg:x="337" fg:w="2"/><text x="27.3400%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.0900%" y="405" width="0.1608%" height="15" fill="rgb(216,87,39)" fg:x="337" fg:w="2"/><text x="27.3400%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="27.0900%" y="629" width="0.2412%" height="15" fill="rgb(221,178,8)" fg:x="337" fg:w="3"/><text x="27.3400%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.2508%" y="613" width="0.0804%" height="15" fill="rgb(230,42,11)" fg:x="339" fg:w="1"/><text x="27.5008%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.2508%" y="597" width="0.0804%" height="15" fill="rgb(237,229,4)" fg:x="339" fg:w="1"/><text x="27.5008%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.2508%" y="581" width="0.0804%" height="15" fill="rgb(222,31,33)" fg:x="339" fg:w="1"/><text x="27.5008%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="27.3312%" y="629" width="0.0804%" height="15" fill="rgb(210,17,39)" fg:x="340" fg:w="1"/><text x="27.5812%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="27.4116%" y="629" width="0.0804%" height="15" fill="rgb(244,93,20)" fg:x="341" fg:w="1"/><text x="27.6616%" y="639.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="27.4116%" y="613" width="0.0804%" height="15" fill="rgb(210,40,47)" fg:x="341" fg:w="1"/><text x="27.6616%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.4116%" y="597" width="0.0804%" height="15" fill="rgb(239,211,47)" fg:x="341" fg:w="1"/><text x="27.6616%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="27.5723%" y="565" width="0.0804%" height="15" fill="rgb(251,223,49)" fg:x="343" fg:w="1"/><text x="27.8223%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.5723%" y="549" width="0.0804%" height="15" fill="rgb(221,149,5)" fg:x="343" fg:w="1"/><text x="27.8223%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="27.5723%" y="533" width="0.0804%" height="15" fill="rgb(219,224,51)" fg:x="343" fg:w="1"/><text x="27.8223%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="27.5723%" y="581" width="0.1608%" height="15" fill="rgb(223,7,8)" fg:x="343" fg:w="2"/><text x="27.8223%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.6527%" y="565" width="0.0804%" height="15" fill="rgb(241,217,22)" fg:x="344" fg:w="1"/><text x="27.9027%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6527%" y="549" width="0.0804%" height="15" fill="rgb(248,209,0)" fg:x="344" fg:w="1"/><text x="27.9027%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="27.6527%" y="533" width="0.0804%" height="15" fill="rgb(217,205,4)" fg:x="344" fg:w="1"/><text x="27.9027%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6527%" y="517" width="0.0804%" height="15" fill="rgb(228,124,39)" fg:x="344" fg:w="1"/><text x="27.9027%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.6527%" y="501" width="0.0804%" height="15" fill="rgb(250,116,42)" fg:x="344" fg:w="1"/><text x="27.9027%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.6527%" y="485" width="0.0804%" height="15" fill="rgb(223,202,9)" fg:x="344" fg:w="1"/><text x="27.9027%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.6527%" y="469" width="0.0804%" height="15" fill="rgb(242,222,40)" fg:x="344" fg:w="1"/><text x="27.9027%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="27.5723%" y="613" width="0.2412%" height="15" fill="rgb(229,99,46)" fg:x="343" fg:w="3"/><text x="27.8223%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="27.5723%" y="597" width="0.2412%" height="15" fill="rgb(225,56,46)" fg:x="343" fg:w="3"/><text x="27.8223%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="27.7331%" y="581" width="0.0804%" height="15" fill="rgb(227,94,5)" fg:x="345" fg:w="1"/><text x="27.9831%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="27.7331%" y="565" width="0.0804%" height="15" fill="rgb(205,112,38)" fg:x="345" fg:w="1"/><text x="27.9831%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.8135%" y="581" width="0.1608%" height="15" fill="rgb(231,133,46)" fg:x="346" fg:w="2"/><text x="28.0635%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="27.9743%" y="581" width="0.0804%" height="15" fill="rgb(217,16,9)" fg:x="348" fg:w="1"/><text x="28.2243%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="28.0547%" y="581" width="0.0804%" height="15" fill="rgb(249,173,9)" fg:x="349" fg:w="1"/><text x="28.3047%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.0547%" y="565" width="0.0804%" height="15" fill="rgb(205,163,53)" fg:x="349" fg:w="1"/><text x="28.3047%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.0547%" y="549" width="0.0804%" height="15" fill="rgb(217,54,41)" fg:x="349" fg:w="1"/><text x="28.3047%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.0547%" y="533" width="0.0804%" height="15" fill="rgb(228,216,12)" fg:x="349" fg:w="1"/><text x="28.3047%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0547%" y="517" width="0.0804%" height="15" fill="rgb(244,228,15)" fg:x="349" fg:w="1"/><text x="28.3047%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.72%)</title><rect x="27.4920%" y="629" width="0.7235%" height="15" fill="rgb(221,176,53)" fg:x="342" fg:w="9"/><text x="27.7420%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="27.8135%" y="613" width="0.4019%" height="15" fill="rgb(205,94,34)" fg:x="346" fg:w="5"/><text x="28.0635%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="27.8135%" y="597" width="0.4019%" height="15" fill="rgb(213,110,48)" fg:x="346" fg:w="5"/><text x="28.0635%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="28.1350%" y="581" width="0.0804%" height="15" fill="rgb(236,142,28)" fg:x="350" fg:w="1"/><text x="28.3850%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="28.1350%" y="565" width="0.0804%" height="15" fill="rgb(225,135,29)" fg:x="350" fg:w="1"/><text x="28.3850%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.1350%" y="549" width="0.0804%" height="15" fill="rgb(252,45,31)" fg:x="350" fg:w="1"/><text x="28.3850%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.1350%" y="533" width="0.0804%" height="15" fill="rgb(211,187,50)" fg:x="350" fg:w="1"/><text x="28.3850%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.1350%" y="517" width="0.0804%" height="15" fill="rgb(229,109,7)" fg:x="350" fg:w="1"/><text x="28.3850%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.1350%" y="501" width="0.0804%" height="15" fill="rgb(251,131,51)" fg:x="350" fg:w="1"/><text x="28.3850%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.1350%" y="485" width="0.0804%" height="15" fill="rgb(251,180,35)" fg:x="350" fg:w="1"/><text x="28.3850%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.1350%" y="469" width="0.0804%" height="15" fill="rgb(211,46,32)" fg:x="350" fg:w="1"/><text x="28.3850%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1350%" y="453" width="0.0804%" height="15" fill="rgb(248,123,17)" fg:x="350" fg:w="1"/><text x="28.3850%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (15 samples, 1.21%)</title><rect x="27.0900%" y="645" width="1.2058%" height="15" fill="rgb(227,141,18)" fg:x="337" fg:w="15"/><text x="27.3400%" y="655.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="28.2154%" y="629" width="0.0804%" height="15" fill="rgb(216,102,9)" fg:x="351" fg:w="1"/><text x="28.4654%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.2154%" y="613" width="0.0804%" height="15" fill="rgb(253,47,13)" fg:x="351" fg:w="1"/><text x="28.4654%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (20 samples, 1.61%)</title><rect x="26.8489%" y="661" width="1.6077%" height="15" fill="rgb(226,93,23)" fg:x="334" fg:w="20"/><text x="27.0989%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.2958%" y="645" width="0.1608%" height="15" fill="rgb(247,104,17)" fg:x="352" fg:w="2"/><text x="28.5458%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.2958%" y="629" width="0.1608%" height="15" fill="rgb(233,203,26)" fg:x="352" fg:w="2"/><text x="28.5458%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.2958%" y="613" width="0.1608%" height="15" fill="rgb(244,98,49)" fg:x="352" fg:w="2"/><text x="28.5458%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="28.2958%" y="597" width="0.1608%" height="15" fill="rgb(235,134,22)" fg:x="352" fg:w="2"/><text x="28.5458%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="28.2958%" y="581" width="0.1608%" height="15" fill="rgb(221,70,32)" fg:x="352" fg:w="2"/><text x="28.5458%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="28.2958%" y="565" width="0.1608%" height="15" fill="rgb(238,15,50)" fg:x="352" fg:w="2"/><text x="28.5458%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.2958%" y="549" width="0.1608%" height="15" fill="rgb(215,221,48)" fg:x="352" fg:w="2"/><text x="28.5458%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.2958%" y="533" width="0.1608%" height="15" fill="rgb(236,73,3)" fg:x="352" fg:w="2"/><text x="28.5458%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="28.2958%" y="517" width="0.1608%" height="15" fill="rgb(250,107,11)" fg:x="352" fg:w="2"/><text x="28.5458%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="28.2958%" y="501" width="0.1608%" height="15" fill="rgb(242,39,14)" fg:x="352" fg:w="2"/><text x="28.5458%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="28.2958%" y="485" width="0.1608%" height="15" fill="rgb(248,164,37)" fg:x="352" fg:w="2"/><text x="28.5458%" y="495.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="28.2958%" y="469" width="0.1608%" height="15" fill="rgb(217,60,12)" fg:x="352" fg:w="2"/><text x="28.5458%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.2958%" y="453" width="0.1608%" height="15" fill="rgb(240,125,29)" fg:x="352" fg:w="2"/><text x="28.5458%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::into_entity (1 samples, 0.08%)</title><rect x="28.4566%" y="661" width="0.0804%" height="15" fill="rgb(208,207,28)" fg:x="354" fg:w="1"/><text x="28.7066%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (24 samples, 1.93%)</title><rect x="26.6881%" y="693" width="1.9293%" height="15" fill="rgb(209,159,27)" fg:x="332" fg:w="24"/><text x="26.9381%" y="703.50">p..</text></g><g><title>plugins_core::build::QuickThing::make (24 samples, 1.93%)</title><rect x="26.6881%" y="677" width="1.9293%" height="15" fill="rgb(251,176,53)" fg:x="332" fg:w="24"/><text x="26.9381%" y="687.50">p..</text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="28.5370%" y="661" width="0.0804%" height="15" fill="rgb(211,85,7)" fg:x="355" fg:w="1"/><text x="28.7870%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="28.5370%" y="645" width="0.0804%" height="15" fill="rgb(216,64,54)" fg:x="355" fg:w="1"/><text x="28.7870%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="28.6174%" y="661" width="0.0804%" height="15" fill="rgb(217,54,24)" fg:x="356" fg:w="1"/><text x="28.8674%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="28.6174%" y="645" width="0.0804%" height="15" fill="rgb(208,206,53)" fg:x="356" fg:w="1"/><text x="28.8674%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="28.6174%" y="677" width="0.1608%" height="15" fill="rgb(251,74,39)" fg:x="356" fg:w="2"/><text x="28.8674%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="28.6977%" y="661" width="0.0804%" height="15" fill="rgb(226,47,5)" fg:x="357" fg:w="1"/><text x="28.9477%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.6977%" y="645" width="0.0804%" height="15" fill="rgb(234,111,33)" fg:x="357" fg:w="1"/><text x="28.9477%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="28.6977%" y="629" width="0.0804%" height="15" fill="rgb(251,14,10)" fg:x="357" fg:w="1"/><text x="28.9477%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="28.6977%" y="613" width="0.0804%" height="15" fill="rgb(232,43,0)" fg:x="357" fg:w="1"/><text x="28.9477%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="28.7781%" y="677" width="0.0804%" height="15" fill="rgb(222,68,43)" fg:x="358" fg:w="1"/><text x="29.0281%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="28.7781%" y="661" width="0.0804%" height="15" fill="rgb(217,24,23)" fg:x="358" fg:w="1"/><text x="29.0281%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="28.7781%" y="645" width="0.0804%" height="15" fill="rgb(229,209,14)" fg:x="358" fg:w="1"/><text x="29.0281%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="28.9389%" y="645" width="0.0804%" height="15" fill="rgb(250,149,48)" fg:x="360" fg:w="1"/><text x="29.1889%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.9389%" y="629" width="0.0804%" height="15" fill="rgb(210,120,37)" fg:x="360" fg:w="1"/><text x="29.1889%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="29.0193%" y="597" width="0.0804%" height="15" fill="rgb(210,21,8)" fg:x="361" fg:w="1"/><text x="29.2693%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.0193%" y="581" width="0.0804%" height="15" fill="rgb(243,145,7)" fg:x="361" fg:w="1"/><text x="29.2693%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.0193%" y="565" width="0.0804%" height="15" fill="rgb(238,178,32)" fg:x="361" fg:w="1"/><text x="29.2693%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="29.0997%" y="597" width="0.0804%" height="15" fill="rgb(222,4,10)" fg:x="362" fg:w="1"/><text x="29.3497%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.0997%" y="581" width="0.0804%" height="15" fill="rgb(239,7,37)" fg:x="362" fg:w="1"/><text x="29.3497%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.0997%" y="565" width="0.0804%" height="15" fill="rgb(215,31,37)" fg:x="362" fg:w="1"/><text x="29.3497%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="29.0997%" y="549" width="0.0804%" height="15" fill="rgb(224,83,33)" fg:x="362" fg:w="1"/><text x="29.3497%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="29.1801%" y="597" width="0.0804%" height="15" fill="rgb(239,55,3)" fg:x="363" fg:w="1"/><text x="29.4301%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.1801%" y="581" width="0.0804%" height="15" fill="rgb(247,92,11)" fg:x="363" fg:w="1"/><text x="29.4301%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.2605%" y="581" width="0.0804%" height="15" fill="rgb(239,200,7)" fg:x="364" fg:w="1"/><text x="29.5105%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.2605%" y="565" width="0.0804%" height="15" fill="rgb(227,115,8)" fg:x="364" fg:w="1"/><text x="29.5105%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="29.2605%" y="549" width="0.0804%" height="15" fill="rgb(215,189,27)" fg:x="364" fg:w="1"/><text x="29.5105%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="29.2605%" y="533" width="0.0804%" height="15" fill="rgb(251,216,39)" fg:x="364" fg:w="1"/><text x="29.5105%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="29.3408%" y="549" width="0.0804%" height="15" fill="rgb(207,29,47)" fg:x="365" fg:w="1"/><text x="29.5908%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3408%" y="533" width="0.0804%" height="15" fill="rgb(210,71,34)" fg:x="365" fg:w="1"/><text x="29.5908%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.3408%" y="517" width="0.0804%" height="15" fill="rgb(253,217,51)" fg:x="365" fg:w="1"/><text x="29.5908%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (6 samples, 0.48%)</title><rect x="29.0193%" y="629" width="0.4823%" height="15" fill="rgb(222,117,46)" fg:x="361" fg:w="6"/><text x="29.2693%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (6 samples, 0.48%)</title><rect x="29.0193%" y="613" width="0.4823%" height="15" fill="rgb(226,132,6)" fg:x="361" fg:w="6"/><text x="29.2693%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="29.2605%" y="597" width="0.2412%" height="15" fill="rgb(254,145,51)" fg:x="364" fg:w="3"/><text x="29.5105%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="29.3408%" y="581" width="0.1608%" height="15" fill="rgb(231,199,27)" fg:x="365" fg:w="2"/><text x="29.5908%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="29.3408%" y="565" width="0.1608%" height="15" fill="rgb(245,158,14)" fg:x="365" fg:w="2"/><text x="29.5908%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.4212%" y="549" width="0.0804%" height="15" fill="rgb(240,113,14)" fg:x="366" fg:w="1"/><text x="29.6712%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.4212%" y="533" width="0.0804%" height="15" fill="rgb(210,20,13)" fg:x="366" fg:w="1"/><text x="29.6712%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="29.5016%" y="629" width="0.0804%" height="15" fill="rgb(241,144,13)" fg:x="367" fg:w="1"/><text x="29.7516%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6624%" y="597" width="0.0804%" height="15" fill="rgb(235,43,34)" fg:x="369" fg:w="1"/><text x="29.9124%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.6624%" y="581" width="0.0804%" height="15" fill="rgb(208,36,20)" fg:x="369" fg:w="1"/><text x="29.9124%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="29.7428%" y="597" width="0.0804%" height="15" fill="rgb(239,204,10)" fg:x="370" fg:w="1"/><text x="29.9928%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.7428%" y="581" width="0.0804%" height="15" fill="rgb(217,84,43)" fg:x="370" fg:w="1"/><text x="29.9928%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (11 samples, 0.88%)</title><rect x="29.0193%" y="645" width="0.8842%" height="15" fill="rgb(241,170,50)" fg:x="361" fg:w="11"/><text x="29.2693%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="29.5820%" y="629" width="0.3215%" height="15" fill="rgb(226,205,29)" fg:x="368" fg:w="4"/><text x="29.8320%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="29.6624%" y="613" width="0.2412%" height="15" fill="rgb(233,113,1)" fg:x="369" fg:w="3"/><text x="29.9124%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="29.8232%" y="597" width="0.0804%" height="15" fill="rgb(253,98,13)" fg:x="371" fg:w="1"/><text x="30.0732%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="29.8232%" y="581" width="0.0804%" height="15" fill="rgb(211,115,12)" fg:x="371" fg:w="1"/><text x="30.0732%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="29.8232%" y="565" width="0.0804%" height="15" fill="rgb(208,12,16)" fg:x="371" fg:w="1"/><text x="30.0732%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="29.8232%" y="549" width="0.0804%" height="15" fill="rgb(237,193,54)" fg:x="371" fg:w="1"/><text x="30.0732%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.05%)</title><rect x="28.9389%" y="661" width="1.0450%" height="15" fill="rgb(243,22,42)" fg:x="360" fg:w="13"/><text x="29.1889%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="29.9035%" y="645" width="0.0804%" height="15" fill="rgb(233,151,36)" fg:x="372" fg:w="1"/><text x="30.1535%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (18 samples, 1.45%)</title><rect x="28.6174%" y="693" width="1.4469%" height="15" fill="rgb(237,57,45)" fg:x="356" fg:w="18"/><text x="28.8674%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.21%)</title><rect x="28.8585%" y="677" width="1.2058%" height="15" fill="rgb(221,88,17)" fg:x="359" fg:w="15"/><text x="29.1085%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.9839%" y="661" width="0.0804%" height="15" fill="rgb(230,79,15)" fg:x="373" fg:w="1"/><text x="30.2339%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.9839%" y="645" width="0.0804%" height="15" fill="rgb(213,57,13)" fg:x="373" fg:w="1"/><text x="30.2339%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9839%" y="629" width="0.0804%" height="15" fill="rgb(222,116,39)" fg:x="373" fg:w="1"/><text x="30.2339%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (252 samples, 20.26%)</title><rect x="9.8875%" y="709" width="20.2572%" height="15" fill="rgb(245,107,2)" fg:x="123" fg:w="252"/><text x="10.1375%" y="719.50">&lt;tests::HoldingKeyInVessel as te..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="30.0643%" y="693" width="0.0804%" height="15" fill="rgb(238,1,10)" fg:x="374" fg:w="1"/><text x="30.3143%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.0643%" y="677" width="0.0804%" height="15" fill="rgb(249,4,48)" fg:x="374" fg:w="1"/><text x="30.3143%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.0643%" y="661" width="0.0804%" height="15" fill="rgb(223,151,18)" fg:x="374" fg:w="1"/><text x="30.3143%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0643%" y="645" width="0.0804%" height="15" fill="rgb(227,65,43)" fg:x="374" fg:w="1"/><text x="30.3143%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.1447%" y="677" width="0.0804%" height="15" fill="rgb(218,40,45)" fg:x="375" fg:w="1"/><text x="30.3947%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="30.1447%" y="709" width="0.1608%" height="15" fill="rgb(252,121,31)" fg:x="375" fg:w="2"/><text x="30.3947%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="30.1447%" y="693" width="0.1608%" height="15" fill="rgb(219,158,43)" fg:x="375" fg:w="2"/><text x="30.3947%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::RegisteredPlugins&gt; (1 samples, 0.08%)</title><rect x="30.2251%" y="677" width="0.0804%" height="15" fill="rgb(231,162,42)" fg:x="376" fg:w="1"/><text x="30.4751%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.3859%" y="677" width="0.0804%" height="15" fill="rgb(217,179,25)" fg:x="378" fg:w="1"/><text x="30.6359%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.3859%" y="661" width="0.0804%" height="15" fill="rgb(206,212,31)" fg:x="378" fg:w="1"/><text x="30.6359%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.3859%" y="645" width="0.0804%" height="15" fill="rgb(235,144,12)" fg:x="378" fg:w="1"/><text x="30.6359%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.3859%" y="629" width="0.0804%" height="15" fill="rgb(213,51,10)" fg:x="378" fg:w="1"/><text x="30.6359%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.3859%" y="613" width="0.0804%" height="15" fill="rgb(231,145,14)" fg:x="378" fg:w="1"/><text x="30.6359%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.3859%" y="597" width="0.0804%" height="15" fill="rgb(235,15,28)" fg:x="378" fg:w="1"/><text x="30.6359%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.3859%" y="581" width="0.0804%" height="15" fill="rgb(237,206,10)" fg:x="378" fg:w="1"/><text x="30.6359%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.3859%" y="565" width="0.0804%" height="15" fill="rgb(236,227,27)" fg:x="378" fg:w="1"/><text x="30.6359%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.3859%" y="549" width="0.0804%" height="15" fill="rgb(246,83,35)" fg:x="378" fg:w="1"/><text x="30.6359%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.3859%" y="533" width="0.0804%" height="15" fill="rgb(220,136,24)" fg:x="378" fg:w="1"/><text x="30.6359%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.3859%" y="517" width="0.0804%" height="15" fill="rgb(217,3,25)" fg:x="378" fg:w="1"/><text x="30.6359%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3859%" y="501" width="0.0804%" height="15" fill="rgb(239,24,14)" fg:x="378" fg:w="1"/><text x="30.6359%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="30.3055%" y="693" width="0.2412%" height="15" fill="rgb(244,16,53)" fg:x="377" fg:w="3"/><text x="30.5555%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.4662%" y="677" width="0.0804%" height="15" fill="rgb(208,175,44)" fg:x="379" fg:w="1"/><text x="30.7162%" y="687.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="30.6270%" y="581" width="0.0804%" height="15" fill="rgb(252,18,48)" fg:x="381" fg:w="1"/><text x="30.8770%" y="591.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.16%)</title><rect x="30.7074%" y="549" width="0.1608%" height="15" fill="rgb(234,199,32)" fg:x="382" fg:w="2"/><text x="30.9574%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (5 samples, 0.40%)</title><rect x="30.5466%" y="693" width="0.4019%" height="15" fill="rgb(225,77,54)" fg:x="380" fg:w="5"/><text x="30.7966%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.40%)</title><rect x="30.5466%" y="677" width="0.4019%" height="15" fill="rgb(225,42,25)" fg:x="380" fg:w="5"/><text x="30.7966%" y="687.50"></text></g><g><title>core::fmt::write (5 samples, 0.40%)</title><rect x="30.5466%" y="661" width="0.4019%" height="15" fill="rgb(242,227,46)" fg:x="380" fg:w="5"/><text x="30.7966%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (5 samples, 0.40%)</title><rect x="30.5466%" y="645" width="0.4019%" height="15" fill="rgb(246,197,35)" fg:x="380" fg:w="5"/><text x="30.7966%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (5 samples, 0.40%)</title><rect x="30.5466%" y="629" width="0.4019%" height="15" fill="rgb(215,159,26)" fg:x="380" fg:w="5"/><text x="30.7966%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (5 samples, 0.40%)</title><rect x="30.5466%" y="613" width="0.4019%" height="15" fill="rgb(212,194,50)" fg:x="380" fg:w="5"/><text x="30.7966%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (5 samples, 0.40%)</title><rect x="30.5466%" y="597" width="0.4019%" height="15" fill="rgb(246,132,1)" fg:x="380" fg:w="5"/><text x="30.7966%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="30.7074%" y="581" width="0.2412%" height="15" fill="rgb(217,71,7)" fg:x="382" fg:w="3"/><text x="30.9574%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="30.7074%" y="565" width="0.2412%" height="15" fill="rgb(252,59,32)" fg:x="382" fg:w="3"/><text x="30.9574%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="30.8682%" y="549" width="0.0804%" height="15" fill="rgb(253,204,25)" fg:x="384" fg:w="1"/><text x="31.1182%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="30.8682%" y="533" width="0.0804%" height="15" fill="rgb(232,21,16)" fg:x="384" fg:w="1"/><text x="31.1182%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="30.8682%" y="517" width="0.0804%" height="15" fill="rgb(248,90,29)" fg:x="384" fg:w="1"/><text x="31.1182%" y="527.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="30.8682%" y="501" width="0.0804%" height="15" fill="rgb(249,223,7)" fg:x="384" fg:w="1"/><text x="31.1182%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="30.9486%" y="661" width="0.1608%" height="15" fill="rgb(231,119,42)" fg:x="385" fg:w="2"/><text x="31.1986%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="30.9486%" y="645" width="0.1608%" height="15" fill="rgb(215,41,35)" fg:x="385" fg:w="2"/><text x="31.1986%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="30.9486%" y="629" width="0.1608%" height="15" fill="rgb(220,44,45)" fg:x="385" fg:w="2"/><text x="31.1986%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.1897%" y="629" width="0.0804%" height="15" fill="rgb(253,197,36)" fg:x="388" fg:w="1"/><text x="31.4397%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.5916%" y="565" width="0.0804%" height="15" fill="rgb(245,225,54)" fg:x="393" fg:w="1"/><text x="31.8416%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.5916%" y="549" width="0.0804%" height="15" fill="rgb(239,94,37)" fg:x="393" fg:w="1"/><text x="31.8416%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="31.5916%" y="613" width="0.1608%" height="15" fill="rgb(242,217,10)" fg:x="393" fg:w="2"/><text x="31.8416%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="31.5916%" y="597" width="0.1608%" height="15" fill="rgb(250,193,7)" fg:x="393" fg:w="2"/><text x="31.8416%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="31.5916%" y="581" width="0.1608%" height="15" fill="rgb(230,104,19)" fg:x="393" fg:w="2"/><text x="31.8416%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="31.6720%" y="565" width="0.0804%" height="15" fill="rgb(230,181,4)" fg:x="394" fg:w="1"/><text x="31.9220%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.6720%" y="549" width="0.0804%" height="15" fill="rgb(216,219,49)" fg:x="394" fg:w="1"/><text x="31.9220%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.6720%" y="533" width="0.0804%" height="15" fill="rgb(254,144,0)" fg:x="394" fg:w="1"/><text x="31.9220%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.6720%" y="517" width="0.0804%" height="15" fill="rgb(205,209,38)" fg:x="394" fg:w="1"/><text x="31.9220%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.6720%" y="501" width="0.0804%" height="15" fill="rgb(240,21,42)" fg:x="394" fg:w="1"/><text x="31.9220%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="31.7524%" y="581" width="0.2412%" height="15" fill="rgb(241,132,3)" fg:x="395" fg:w="3"/><text x="32.0024%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="31.8328%" y="565" width="0.1608%" height="15" fill="rgb(225,14,2)" fg:x="396" fg:w="2"/><text x="32.0828%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="31.9132%" y="549" width="0.0804%" height="15" fill="rgb(210,141,35)" fg:x="397" fg:w="1"/><text x="32.1632%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="31.7524%" y="597" width="0.3215%" height="15" fill="rgb(251,14,44)" fg:x="395" fg:w="4"/><text x="32.0024%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="31.9936%" y="581" width="0.0804%" height="15" fill="rgb(247,48,18)" fg:x="398" fg:w="1"/><text x="32.2436%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="32.3955%" y="581" width="0.0804%" height="15" fill="rgb(225,0,40)" fg:x="403" fg:w="1"/><text x="32.6455%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.3955%" y="565" width="0.0804%" height="15" fill="rgb(221,31,33)" fg:x="403" fg:w="1"/><text x="32.6455%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.3955%" y="549" width="0.0804%" height="15" fill="rgb(237,42,40)" fg:x="403" fg:w="1"/><text x="32.6455%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.3955%" y="533" width="0.0804%" height="15" fill="rgb(233,51,29)" fg:x="403" fg:w="1"/><text x="32.6455%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="32.5563%" y="533" width="0.0804%" height="15" fill="rgb(226,58,20)" fg:x="405" fg:w="1"/><text x="32.8063%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.5563%" y="517" width="0.0804%" height="15" fill="rgb(208,98,7)" fg:x="405" fg:w="1"/><text x="32.8063%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.5563%" y="501" width="0.0804%" height="15" fill="rgb(228,143,44)" fg:x="405" fg:w="1"/><text x="32.8063%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.5563%" y="485" width="0.0804%" height="15" fill="rgb(246,55,38)" fg:x="405" fg:w="1"/><text x="32.8063%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.5563%" y="469" width="0.0804%" height="15" fill="rgb(247,87,16)" fg:x="405" fg:w="1"/><text x="32.8063%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.5563%" y="453" width="0.0804%" height="15" fill="rgb(234,129,42)" fg:x="405" fg:w="1"/><text x="32.8063%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.5563%" y="437" width="0.0804%" height="15" fill="rgb(220,82,16)" fg:x="405" fg:w="1"/><text x="32.8063%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="32.5563%" y="549" width="0.1608%" height="15" fill="rgb(211,88,4)" fg:x="405" fg:w="2"/><text x="32.8063%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.6367%" y="533" width="0.0804%" height="15" fill="rgb(248,151,21)" fg:x="406" fg:w="1"/><text x="32.8867%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.6367%" y="517" width="0.0804%" height="15" fill="rgb(238,163,6)" fg:x="406" fg:w="1"/><text x="32.8867%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="32.6367%" y="501" width="0.0804%" height="15" fill="rgb(209,183,11)" fg:x="406" fg:w="1"/><text x="32.8867%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="32.5563%" y="565" width="0.2412%" height="15" fill="rgb(219,37,20)" fg:x="405" fg:w="3"/><text x="32.8063%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.7170%" y="549" width="0.0804%" height="15" fill="rgb(210,158,4)" fg:x="407" fg:w="1"/><text x="32.9670%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="32.7974%" y="565" width="0.2412%" height="15" fill="rgb(221,167,53)" fg:x="408" fg:w="3"/><text x="33.0474%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="33.1994%" y="549" width="0.2412%" height="15" fill="rgb(237,151,45)" fg:x="413" fg:w="3"/><text x="33.4494%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="33.1994%" y="533" width="0.2412%" height="15" fill="rgb(231,39,3)" fg:x="413" fg:w="3"/><text x="33.4494%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="33.1994%" y="517" width="0.2412%" height="15" fill="rgb(212,167,28)" fg:x="413" fg:w="3"/><text x="33.4494%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="33.1994%" y="501" width="0.2412%" height="15" fill="rgb(232,178,8)" fg:x="413" fg:w="3"/><text x="33.4494%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.3601%" y="485" width="0.0804%" height="15" fill="rgb(225,151,20)" fg:x="415" fg:w="1"/><text x="33.6101%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.3601%" y="469" width="0.0804%" height="15" fill="rgb(238,3,37)" fg:x="415" fg:w="1"/><text x="33.6101%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.3601%" y="453" width="0.0804%" height="15" fill="rgb(251,147,42)" fg:x="415" fg:w="1"/><text x="33.6101%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="33.4405%" y="549" width="0.1608%" height="15" fill="rgb(208,173,10)" fg:x="416" fg:w="2"/><text x="33.6905%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="33.5209%" y="533" width="0.0804%" height="15" fill="rgb(246,225,4)" fg:x="417" fg:w="1"/><text x="33.7709%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="33.5209%" y="517" width="0.0804%" height="15" fill="rgb(248,102,6)" fg:x="417" fg:w="1"/><text x="33.7709%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="33.5209%" y="501" width="0.0804%" height="15" fill="rgb(232,6,21)" fg:x="417" fg:w="1"/><text x="33.7709%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.5209%" y="485" width="0.0804%" height="15" fill="rgb(221,179,22)" fg:x="417" fg:w="1"/><text x="33.7709%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.5209%" y="469" width="0.0804%" height="15" fill="rgb(252,50,20)" fg:x="417" fg:w="1"/><text x="33.7709%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.5209%" y="453" width="0.0804%" height="15" fill="rgb(222,56,38)" fg:x="417" fg:w="1"/><text x="33.7709%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.5209%" y="437" width="0.0804%" height="15" fill="rgb(206,193,29)" fg:x="417" fg:w="1"/><text x="33.7709%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="33.0386%" y="565" width="0.7235%" height="15" fill="rgb(239,192,45)" fg:x="411" fg:w="9"/><text x="33.2886%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="33.6013%" y="549" width="0.1608%" height="15" fill="rgb(254,18,36)" fg:x="418" fg:w="2"/><text x="33.8513%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="33.6817%" y="533" width="0.0804%" height="15" fill="rgb(221,127,11)" fg:x="419" fg:w="1"/><text x="33.9317%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="33.6817%" y="517" width="0.0804%" height="15" fill="rgb(234,146,35)" fg:x="419" fg:w="1"/><text x="33.9317%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.37%)</title><rect x="32.4759%" y="581" width="1.3666%" height="15" fill="rgb(254,201,37)" fg:x="404" fg:w="17"/><text x="32.7259%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="33.7621%" y="565" width="0.0804%" height="15" fill="rgb(211,202,23)" fg:x="420" fg:w="1"/><text x="34.0121%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="33.7621%" y="549" width="0.0804%" height="15" fill="rgb(237,91,2)" fg:x="420" fg:w="1"/><text x="34.0121%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="33.7621%" y="533" width="0.0804%" height="15" fill="rgb(226,228,36)" fg:x="420" fg:w="1"/><text x="34.0121%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (24 samples, 1.93%)</title><rect x="32.0740%" y="597" width="1.9293%" height="15" fill="rgb(213,63,50)" fg:x="399" fg:w="24"/><text x="32.3240%" y="607.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="33.8424%" y="581" width="0.1608%" height="15" fill="rgb(235,194,19)" fg:x="421" fg:w="2"/><text x="34.0924%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (30 samples, 2.41%)</title><rect x="31.7524%" y="613" width="2.4116%" height="15" fill="rgb(207,204,18)" fg:x="395" fg:w="30"/><text x="32.0024%" y="623.50">&lt;s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="34.0032%" y="597" width="0.1608%" height="15" fill="rgb(248,8,7)" fg:x="423" fg:w="2"/><text x="34.2532%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="34.0836%" y="581" width="0.0804%" height="15" fill="rgb(223,145,47)" fg:x="424" fg:w="1"/><text x="34.3336%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.0836%" y="565" width="0.0804%" height="15" fill="rgb(228,84,11)" fg:x="424" fg:w="1"/><text x="34.3336%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.0836%" y="549" width="0.0804%" height="15" fill="rgb(218,76,45)" fg:x="424" fg:w="1"/><text x="34.3336%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.0836%" y="533" width="0.0804%" height="15" fill="rgb(223,80,15)" fg:x="424" fg:w="1"/><text x="34.3336%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0836%" y="517" width="0.0804%" height="15" fill="rgb(219,218,33)" fg:x="424" fg:w="1"/><text x="34.3336%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="34.1640%" y="613" width="0.0804%" height="15" fill="rgb(208,51,11)" fg:x="425" fg:w="1"/><text x="34.4140%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1640%" y="597" width="0.0804%" height="15" fill="rgb(229,165,39)" fg:x="425" fg:w="1"/><text x="34.4140%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.3248%" y="565" width="0.0804%" height="15" fill="rgb(241,100,24)" fg:x="427" fg:w="1"/><text x="34.5748%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3248%" y="549" width="0.0804%" height="15" fill="rgb(228,14,23)" fg:x="427" fg:w="1"/><text x="34.5748%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.4051%" y="549" width="0.0804%" height="15" fill="rgb(247,116,52)" fg:x="428" fg:w="1"/><text x="34.6551%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="34.4855%" y="533" width="0.0804%" height="15" fill="rgb(216,149,33)" fg:x="429" fg:w="1"/><text x="34.7355%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="34.4855%" y="517" width="0.0804%" height="15" fill="rgb(238,142,29)" fg:x="429" fg:w="1"/><text x="34.7355%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.4855%" y="501" width="0.0804%" height="15" fill="rgb(224,83,40)" fg:x="429" fg:w="1"/><text x="34.7355%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="34.2444%" y="613" width="0.4019%" height="15" fill="rgb(234,165,11)" fg:x="426" fg:w="5"/><text x="34.4944%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="34.2444%" y="597" width="0.4019%" height="15" fill="rgb(215,96,23)" fg:x="426" fg:w="5"/><text x="34.4944%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="34.2444%" y="581" width="0.4019%" height="15" fill="rgb(233,179,26)" fg:x="426" fg:w="5"/><text x="34.4944%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="34.4051%" y="565" width="0.2412%" height="15" fill="rgb(225,129,33)" fg:x="428" fg:w="3"/><text x="34.6551%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="34.4855%" y="549" width="0.1608%" height="15" fill="rgb(237,49,13)" fg:x="429" fg:w="2"/><text x="34.7355%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="34.5659%" y="533" width="0.0804%" height="15" fill="rgb(211,3,31)" fg:x="430" fg:w="1"/><text x="34.8159%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="34.5659%" y="517" width="0.0804%" height="15" fill="rgb(216,152,19)" fg:x="430" fg:w="1"/><text x="34.8159%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8071%" y="565" width="0.0804%" height="15" fill="rgb(251,121,35)" fg:x="433" fg:w="1"/><text x="35.0571%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9678%" y="549" width="0.0804%" height="15" fill="rgb(210,217,47)" fg:x="435" fg:w="1"/><text x="35.2178%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.0482%" y="549" width="0.0804%" height="15" fill="rgb(244,116,22)" fg:x="436" fg:w="1"/><text x="35.2982%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.0482%" y="533" width="0.0804%" height="15" fill="rgb(228,17,21)" fg:x="436" fg:w="1"/><text x="35.2982%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="35.1286%" y="533" width="0.2412%" height="15" fill="rgb(240,149,34)" fg:x="437" fg:w="3"/><text x="35.3786%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.2090%" y="517" width="0.1608%" height="15" fill="rgb(208,125,47)" fg:x="438" fg:w="2"/><text x="35.4590%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.3698%" y="517" width="0.0804%" height="15" fill="rgb(249,186,39)" fg:x="440" fg:w="1"/><text x="35.6198%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.4502%" y="517" width="0.0804%" height="15" fill="rgb(240,220,33)" fg:x="441" fg:w="1"/><text x="35.7002%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.4502%" y="501" width="0.0804%" height="15" fill="rgb(243,110,23)" fg:x="441" fg:w="1"/><text x="35.7002%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="35.5305%" y="517" width="0.0804%" height="15" fill="rgb(219,163,46)" fg:x="442" fg:w="1"/><text x="35.7805%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="35.5305%" y="501" width="0.0804%" height="15" fill="rgb(216,126,30)" fg:x="442" fg:w="1"/><text x="35.7805%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.5305%" y="485" width="0.0804%" height="15" fill="rgb(208,139,11)" fg:x="442" fg:w="1"/><text x="35.7805%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="34.8071%" y="581" width="0.8842%" height="15" fill="rgb(213,118,36)" fg:x="433" fg:w="11"/><text x="35.0571%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="34.8875%" y="565" width="0.8039%" height="15" fill="rgb(226,43,17)" fg:x="434" fg:w="10"/><text x="35.1375%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="35.1286%" y="549" width="0.5627%" height="15" fill="rgb(254,217,4)" fg:x="437" fg:w="7"/><text x="35.3786%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="35.3698%" y="533" width="0.3215%" height="15" fill="rgb(210,134,47)" fg:x="440" fg:w="4"/><text x="35.6198%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="35.6109%" y="517" width="0.0804%" height="15" fill="rgb(237,24,49)" fg:x="443" fg:w="1"/><text x="35.8609%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.6109%" y="501" width="0.0804%" height="15" fill="rgb(251,39,46)" fg:x="443" fg:w="1"/><text x="35.8609%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.6913%" y="581" width="0.0804%" height="15" fill="rgb(251,220,3)" fg:x="444" fg:w="1"/><text x="35.9413%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;treediff::tools::record::Recorder&lt;treediff::value::shared::Key,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="35.7717%" y="581" width="0.0804%" height="15" fill="rgb(228,105,12)" fg:x="445" fg:w="1"/><text x="36.0217%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="35.8521%" y="565" width="0.2412%" height="15" fill="rgb(215,196,1)" fg:x="446" fg:w="3"/><text x="36.1021%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="36.0129%" y="549" width="0.0804%" height="15" fill="rgb(214,33,39)" fg:x="448" fg:w="1"/><text x="36.2629%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="36.0129%" y="533" width="0.0804%" height="15" fill="rgb(220,19,52)" fg:x="448" fg:w="1"/><text x="36.2629%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (18 samples, 1.45%)</title><rect x="34.7267%" y="597" width="1.4469%" height="15" fill="rgb(221,78,38)" fg:x="432" fg:w="18"/><text x="34.9767%" y="607.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="35.8521%" y="581" width="0.3215%" height="15" fill="rgb(253,30,16)" fg:x="446" fg:w="4"/><text x="36.1021%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.0932%" y="565" width="0.0804%" height="15" fill="rgb(242,65,0)" fg:x="449" fg:w="1"/><text x="36.3432%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.0932%" y="549" width="0.0804%" height="15" fill="rgb(235,201,12)" fg:x="449" fg:w="1"/><text x="36.3432%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.0932%" y="533" width="0.0804%" height="15" fill="rgb(233,161,9)" fg:x="449" fg:w="1"/><text x="36.3432%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2540%" y="565" width="0.0804%" height="15" fill="rgb(241,207,41)" fg:x="451" fg:w="1"/><text x="36.5040%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="36.3344%" y="565" width="0.1608%" height="15" fill="rgb(212,69,46)" fg:x="452" fg:w="2"/><text x="36.5844%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="36.3344%" y="549" width="0.1608%" height="15" fill="rgb(239,69,45)" fg:x="452" fg:w="2"/><text x="36.5844%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="36.4952%" y="565" width="0.0804%" height="15" fill="rgb(242,117,48)" fg:x="454" fg:w="1"/><text x="36.7452%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="36.4952%" y="549" width="0.0804%" height="15" fill="rgb(228,41,36)" fg:x="454" fg:w="1"/><text x="36.7452%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.7363%" y="533" width="0.0804%" height="15" fill="rgb(212,3,32)" fg:x="457" fg:w="1"/><text x="36.9863%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (4 samples, 0.32%)</title><rect x="36.5756%" y="565" width="0.3215%" height="15" fill="rgb(233,41,49)" fg:x="455" fg:w="4"/><text x="36.8256%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="36.6559%" y="549" width="0.2412%" height="15" fill="rgb(252,170,49)" fg:x="456" fg:w="3"/><text x="36.9059%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.8167%" y="533" width="0.0804%" height="15" fill="rgb(229,53,26)" fg:x="458" fg:w="1"/><text x="37.0667%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8167%" y="517" width="0.0804%" height="15" fill="rgb(217,157,12)" fg:x="458" fg:w="1"/><text x="37.0667%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="37.5402%" y="533" width="0.0804%" height="15" fill="rgb(227,17,9)" fg:x="467" fg:w="1"/><text x="37.7902%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.7814%" y="517" width="0.0804%" height="15" fill="rgb(218,84,12)" fg:x="470" fg:w="1"/><text x="38.0314%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.7814%" y="501" width="0.0804%" height="15" fill="rgb(212,79,24)" fg:x="470" fg:w="1"/><text x="38.0314%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.1833%" y="469" width="0.0804%" height="15" fill="rgb(217,222,37)" fg:x="475" fg:w="1"/><text x="38.4333%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="37.8617%" y="517" width="0.4823%" height="15" fill="rgb(246,208,8)" fg:x="471" fg:w="6"/><text x="38.1117%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="37.8617%" y="501" width="0.4823%" height="15" fill="rgb(244,133,10)" fg:x="471" fg:w="6"/><text x="38.1117%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="38.0225%" y="485" width="0.3215%" height="15" fill="rgb(209,219,41)" fg:x="473" fg:w="4"/><text x="38.2725%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="38.2637%" y="469" width="0.0804%" height="15" fill="rgb(253,175,45)" fg:x="476" fg:w="1"/><text x="38.5137%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="38.2637%" y="453" width="0.0804%" height="15" fill="rgb(235,100,37)" fg:x="476" fg:w="1"/><text x="38.5137%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.2637%" y="437" width="0.0804%" height="15" fill="rgb(225,87,19)" fg:x="476" fg:w="1"/><text x="38.5137%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="38.5048%" y="485" width="0.1608%" height="15" fill="rgb(217,152,17)" fg:x="479" fg:w="2"/><text x="38.7548%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.5852%" y="469" width="0.0804%" height="15" fill="rgb(235,72,13)" fg:x="480" fg:w="1"/><text x="38.8352%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.8264%" y="469" width="0.0804%" height="15" fill="rgb(233,140,18)" fg:x="483" fg:w="1"/><text x="39.0764%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="38.9068%" y="469" width="0.2412%" height="15" fill="rgb(207,212,28)" fg:x="484" fg:w="3"/><text x="39.1568%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="38.9871%" y="453" width="0.1608%" height="15" fill="rgb(220,130,25)" fg:x="485" fg:w="2"/><text x="39.2371%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.0675%" y="437" width="0.0804%" height="15" fill="rgb(205,55,34)" fg:x="486" fg:w="1"/><text x="39.3175%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (13 samples, 1.05%)</title><rect x="38.3441%" y="501" width="1.0450%" height="15" fill="rgb(237,54,35)" fg:x="477" fg:w="13"/><text x="38.5941%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.72%)</title><rect x="38.6656%" y="485" width="0.7235%" height="15" fill="rgb(208,67,23)" fg:x="481" fg:w="9"/><text x="38.9156%" y="495.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="39.1479%" y="469" width="0.2412%" height="15" fill="rgb(206,207,50)" fg:x="487" fg:w="3"/><text x="39.3979%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (24 samples, 1.93%)</title><rect x="37.6206%" y="533" width="1.9293%" height="15" fill="rgb(213,211,42)" fg:x="468" fg:w="24"/><text x="37.8706%" y="543.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (15 samples, 1.21%)</title><rect x="38.3441%" y="517" width="1.2058%" height="15" fill="rgb(252,197,50)" fg:x="477" fg:w="15"/><text x="38.5941%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.3891%" y="501" width="0.1608%" height="15" fill="rgb(251,211,41)" fg:x="490" fg:w="2"/><text x="39.6391%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (29 samples, 2.33%)</title><rect x="37.2990%" y="549" width="2.3312%" height="15" fill="rgb(229,211,5)" fg:x="464" fg:w="29"/><text x="37.5490%" y="559.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="39.5498%" y="533" width="0.0804%" height="15" fill="rgb(239,36,31)" fg:x="492" fg:w="1"/><text x="39.7998%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.5498%" y="517" width="0.0804%" height="15" fill="rgb(248,67,31)" fg:x="492" fg:w="1"/><text x="39.7998%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6302%" y="549" width="0.0804%" height="15" fill="rgb(249,55,44)" fg:x="493" fg:w="1"/><text x="39.8802%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.7910%" y="533" width="0.0804%" height="15" fill="rgb(216,82,12)" fg:x="495" fg:w="1"/><text x="40.0410%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (47 samples, 3.78%)</title><rect x="36.1736%" y="597" width="3.7781%" height="15" fill="rgb(242,174,1)" fg:x="450" fg:w="47"/><text x="36.4236%" y="607.50">kern..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (47 samples, 3.78%)</title><rect x="36.1736%" y="581" width="3.7781%" height="15" fill="rgb(208,120,29)" fg:x="450" fg:w="47"/><text x="36.4236%" y="591.50">&lt;ser..</text></g><g><title>serde::ser::Serializer::collect_map (38 samples, 3.05%)</title><rect x="36.8971%" y="565" width="3.0547%" height="15" fill="rgb(221,105,43)" fg:x="459" fg:w="38"/><text x="37.1471%" y="575.50">ser..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="39.7106%" y="549" width="0.2412%" height="15" fill="rgb(234,124,22)" fg:x="494" fg:w="3"/><text x="39.9606%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="39.8714%" y="533" width="0.0804%" height="15" fill="rgb(212,23,30)" fg:x="496" fg:w="1"/><text x="40.1214%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="40.0322%" y="453" width="0.0804%" height="15" fill="rgb(219,122,53)" fg:x="498" fg:w="1"/><text x="40.2822%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="40.0322%" y="437" width="0.0804%" height="15" fill="rgb(248,84,24)" fg:x="498" fg:w="1"/><text x="40.2822%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="40.2733%" y="405" width="0.0804%" height="15" fill="rgb(245,115,18)" fg:x="501" fg:w="1"/><text x="40.5233%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="40.2733%" y="389" width="0.0804%" height="15" fill="rgb(227,176,51)" fg:x="501" fg:w="1"/><text x="40.5233%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="40.1929%" y="437" width="0.3215%" height="15" fill="rgb(229,63,42)" fg:x="500" fg:w="4"/><text x="40.4429%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="40.2733%" y="421" width="0.2412%" height="15" fill="rgb(247,202,24)" fg:x="501" fg:w="3"/><text x="40.5233%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="40.3537%" y="405" width="0.1608%" height="15" fill="rgb(244,173,20)" fg:x="502" fg:w="2"/><text x="40.6037%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="40.3537%" y="389" width="0.1608%" height="15" fill="rgb(242,81,47)" fg:x="502" fg:w="2"/><text x="40.6037%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.3537%" y="373" width="0.1608%" height="15" fill="rgb(231,185,54)" fg:x="502" fg:w="2"/><text x="40.6037%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.5145%" y="405" width="0.0804%" height="15" fill="rgb(243,55,32)" fg:x="504" fg:w="1"/><text x="40.7645%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="40.0322%" y="469" width="0.6431%" height="15" fill="rgb(208,167,19)" fg:x="498" fg:w="8"/><text x="40.2822%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="40.1125%" y="453" width="0.5627%" height="15" fill="rgb(231,72,35)" fg:x="499" fg:w="7"/><text x="40.3625%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="40.5145%" y="437" width="0.1608%" height="15" fill="rgb(250,173,51)" fg:x="504" fg:w="2"/><text x="40.7645%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="40.5145%" y="421" width="0.1608%" height="15" fill="rgb(209,5,22)" fg:x="504" fg:w="2"/><text x="40.7645%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="40.5949%" y="405" width="0.0804%" height="15" fill="rgb(250,174,19)" fg:x="505" fg:w="1"/><text x="40.8449%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="40.0322%" y="485" width="0.7235%" height="15" fill="rgb(217,3,49)" fg:x="498" fg:w="9"/><text x="40.2822%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.6752%" y="469" width="0.0804%" height="15" fill="rgb(218,225,5)" fg:x="506" fg:w="1"/><text x="40.9252%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="40.0322%" y="501" width="0.8039%" height="15" fill="rgb(236,89,11)" fg:x="498" fg:w="10"/><text x="40.2822%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7556%" y="485" width="0.0804%" height="15" fill="rgb(206,33,28)" fg:x="507" fg:w="1"/><text x="41.0056%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.05%)</title><rect x="39.9518%" y="517" width="1.0450%" height="15" fill="rgb(241,56,42)" fg:x="497" fg:w="13"/><text x="40.2018%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="40.8360%" y="501" width="0.1608%" height="15" fill="rgb(222,44,11)" fg:x="508" fg:w="2"/><text x="41.0860%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.8360%" y="485" width="0.1608%" height="15" fill="rgb(234,111,20)" fg:x="508" fg:w="2"/><text x="41.0860%" y="495.50"></text></g><g><title>engine::session::state::State::close (126 samples, 10.13%)</title><rect x="30.9486%" y="693" width="10.1286%" height="15" fill="rgb(237,77,6)" fg:x="385" fg:w="126"/><text x="31.1986%" y="703.50">engine::session..</text></g><g><title>engine::session::state::State::flush_entities (126 samples, 10.13%)</title><rect x="30.9486%" y="677" width="10.1286%" height="15" fill="rgb(235,111,23)" fg:x="385" fg:w="126"/><text x="31.1986%" y="687.50">engine::session..</text></g><g><title>core::iter::adapters::try_process (124 samples, 9.97%)</title><rect x="31.1093%" y="661" width="9.9678%" height="15" fill="rgb(251,135,29)" fg:x="387" fg:w="124"/><text x="31.3593%" y="671.50">core::iter::ad..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (123 samples, 9.89%)</title><rect x="31.1897%" y="645" width="9.8875%" height="15" fill="rgb(217,57,1)" fg:x="388" fg:w="123"/><text x="31.4397%" y="655.50">&lt;alloc::vec::V..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (122 samples, 9.81%)</title><rect x="31.2701%" y="629" width="9.8071%" height="15" fill="rgb(249,119,31)" fg:x="389" fg:w="122"/><text x="31.5201%" y="639.50">engine::sessio..</text></g><g><title>kernel::model::any_entity_changes (80 samples, 6.43%)</title><rect x="34.6463%" y="613" width="6.4309%" height="15" fill="rgb(233,164,33)" fg:x="431" fg:w="80"/><text x="34.8963%" y="623.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (14 samples, 1.13%)</title><rect x="39.9518%" y="597" width="1.1254%" height="15" fill="rgb(250,217,43)" fg:x="497" fg:w="14"/><text x="40.2018%" y="607.50"></text></g><g><title>serde_json::de::from_trait (14 samples, 1.13%)</title><rect x="39.9518%" y="581" width="1.1254%" height="15" fill="rgb(232,154,50)" fg:x="497" fg:w="14"/><text x="40.2018%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.13%)</title><rect x="39.9518%" y="565" width="1.1254%" height="15" fill="rgb(227,190,8)" fg:x="497" fg:w="14"/><text x="40.2018%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.13%)</title><rect x="39.9518%" y="549" width="1.1254%" height="15" fill="rgb(209,217,32)" fg:x="497" fg:w="14"/><text x="40.2018%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.13%)</title><rect x="39.9518%" y="533" width="1.1254%" height="15" fill="rgb(243,203,50)" fg:x="497" fg:w="14"/><text x="40.2018%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.9968%" y="517" width="0.0804%" height="15" fill="rgb(232,152,27)" fg:x="510" fg:w="1"/><text x="41.2468%" y="527.50"></text></g><g><title>engine::session::Session::close (136 samples, 10.93%)</title><rect x="30.3055%" y="709" width="10.9325%" height="15" fill="rgb(240,34,29)" fg:x="377" fg:w="136"/><text x="30.5555%" y="719.50">engine::session:..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="41.0772%" y="693" width="0.1608%" height="15" fill="rgb(215,185,52)" fg:x="511" fg:w="2"/><text x="41.3272%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.2379%" y="677" width="0.0804%" height="15" fill="rgb(240,89,49)" fg:x="513" fg:w="1"/><text x="41.4879%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.3183%" y="661" width="0.0804%" height="15" fill="rgb(225,12,52)" fg:x="514" fg:w="1"/><text x="41.5683%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="41.3183%" y="645" width="0.0804%" height="15" fill="rgb(239,128,45)" fg:x="514" fg:w="1"/><text x="41.5683%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="41.3183%" y="629" width="0.0804%" height="15" fill="rgb(211,78,47)" fg:x="514" fg:w="1"/><text x="41.5683%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="41.3183%" y="613" width="0.0804%" height="15" fill="rgb(232,31,21)" fg:x="514" fg:w="1"/><text x="41.5683%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="41.3183%" y="597" width="0.0804%" height="15" fill="rgb(222,168,14)" fg:x="514" fg:w="1"/><text x="41.5683%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.3183%" y="581" width="0.0804%" height="15" fill="rgb(209,128,24)" fg:x="514" fg:w="1"/><text x="41.5683%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="41.3183%" y="565" width="0.0804%" height="15" fill="rgb(249,35,13)" fg:x="514" fg:w="1"/><text x="41.5683%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="41.3183%" y="549" width="0.0804%" height="15" fill="rgb(218,7,2)" fg:x="514" fg:w="1"/><text x="41.5683%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="41.3183%" y="533" width="0.0804%" height="15" fill="rgb(238,107,27)" fg:x="514" fg:w="1"/><text x="41.5683%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="41.3183%" y="517" width="0.0804%" height="15" fill="rgb(217,88,38)" fg:x="514" fg:w="1"/><text x="41.5683%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="41.3183%" y="501" width="0.0804%" height="15" fill="rgb(230,207,0)" fg:x="514" fg:w="1"/><text x="41.5683%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.3183%" y="485" width="0.0804%" height="15" fill="rgb(249,64,54)" fg:x="514" fg:w="1"/><text x="41.5683%" y="495.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="41.3987%" y="517" width="0.0804%" height="15" fill="rgb(231,7,11)" fg:x="515" fg:w="1"/><text x="41.6487%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="41.3987%" y="501" width="0.0804%" height="15" fill="rgb(205,149,21)" fg:x="515" fg:w="1"/><text x="41.6487%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="41.3987%" y="485" width="0.0804%" height="15" fill="rgb(215,126,34)" fg:x="515" fg:w="1"/><text x="41.6487%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="41.3987%" y="469" width="0.0804%" height="15" fill="rgb(241,132,45)" fg:x="515" fg:w="1"/><text x="41.6487%" y="479.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="41.3987%" y="453" width="0.0804%" height="15" fill="rgb(252,69,32)" fg:x="515" fg:w="1"/><text x="41.6487%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="41.3987%" y="661" width="0.1608%" height="15" fill="rgb(232,204,19)" fg:x="515" fg:w="2"/><text x="41.6487%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="41.3987%" y="645" width="0.1608%" height="15" fill="rgb(249,15,47)" fg:x="515" fg:w="2"/><text x="41.6487%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="41.3987%" y="629" width="0.1608%" height="15" fill="rgb(209,227,23)" fg:x="515" fg:w="2"/><text x="41.6487%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="41.3987%" y="613" width="0.1608%" height="15" fill="rgb(248,92,24)" fg:x="515" fg:w="2"/><text x="41.6487%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="41.3987%" y="597" width="0.1608%" height="15" fill="rgb(247,59,2)" fg:x="515" fg:w="2"/><text x="41.6487%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="41.3987%" y="581" width="0.1608%" height="15" fill="rgb(221,30,5)" fg:x="515" fg:w="2"/><text x="41.6487%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="41.3987%" y="565" width="0.1608%" height="15" fill="rgb(208,108,53)" fg:x="515" fg:w="2"/><text x="41.6487%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="41.3987%" y="549" width="0.1608%" height="15" fill="rgb(211,183,26)" fg:x="515" fg:w="2"/><text x="41.6487%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="41.3987%" y="533" width="0.1608%" height="15" fill="rgb(232,132,4)" fg:x="515" fg:w="2"/><text x="41.6487%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="41.4791%" y="517" width="0.0804%" height="15" fill="rgb(253,128,37)" fg:x="516" fg:w="1"/><text x="41.7291%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_struct (1 samples, 0.08%)</title><rect x="41.4791%" y="501" width="0.0804%" height="15" fill="rgb(221,58,24)" fg:x="516" fg:w="1"/><text x="41.7291%" y="511.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="41.4791%" y="485" width="0.0804%" height="15" fill="rgb(230,54,45)" fg:x="516" fg:w="1"/><text x="41.7291%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="41.4791%" y="469" width="0.0804%" height="15" fill="rgb(254,21,18)" fg:x="516" fg:w="1"/><text x="41.7291%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="41.4791%" y="453" width="0.0804%" height="15" fill="rgb(221,108,0)" fg:x="516" fg:w="1"/><text x="41.7291%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="41.4791%" y="437" width="0.0804%" height="15" fill="rgb(206,95,1)" fg:x="516" fg:w="1"/><text x="41.7291%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="41.4791%" y="421" width="0.0804%" height="15" fill="rgb(237,52,5)" fg:x="516" fg:w="1"/><text x="41.7291%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="41.4791%" y="405" width="0.0804%" height="15" fill="rgb(218,150,34)" fg:x="516" fg:w="1"/><text x="41.7291%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.4791%" y="389" width="0.0804%" height="15" fill="rgb(235,194,28)" fg:x="516" fg:w="1"/><text x="41.7291%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="41.4791%" y="373" width="0.0804%" height="15" fill="rgb(245,92,18)" fg:x="516" fg:w="1"/><text x="41.7291%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="41.4791%" y="357" width="0.0804%" height="15" fill="rgb(253,203,53)" fg:x="516" fg:w="1"/><text x="41.7291%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="41.4791%" y="341" width="0.0804%" height="15" fill="rgb(249,185,47)" fg:x="516" fg:w="1"/><text x="41.7291%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.4791%" y="325" width="0.0804%" height="15" fill="rgb(252,194,52)" fg:x="516" fg:w="1"/><text x="41.7291%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="41.4791%" y="309" width="0.0804%" height="15" fill="rgb(210,53,36)" fg:x="516" fg:w="1"/><text x="41.7291%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.4791%" y="293" width="0.0804%" height="15" fill="rgb(237,37,25)" fg:x="516" fg:w="1"/><text x="41.7291%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="41.4791%" y="277" width="0.0804%" height="15" fill="rgb(242,116,27)" fg:x="516" fg:w="1"/><text x="41.7291%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="41.4791%" y="261" width="0.0804%" height="15" fill="rgb(213,185,26)" fg:x="516" fg:w="1"/><text x="41.7291%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="41.4791%" y="245" width="0.0804%" height="15" fill="rgb(225,204,8)" fg:x="516" fg:w="1"/><text x="41.7291%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.4791%" y="229" width="0.0804%" height="15" fill="rgb(254,111,37)" fg:x="516" fg:w="1"/><text x="41.7291%" y="239.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="41.5595%" y="661" width="0.0804%" height="15" fill="rgb(242,35,9)" fg:x="517" fg:w="1"/><text x="41.8095%" y="671.50"></text></g><g><title>alloc::rc::rcbox_layout_for_value_layout (1 samples, 0.08%)</title><rect x="41.5595%" y="645" width="0.0804%" height="15" fill="rgb(232,138,49)" fg:x="517" fg:w="1"/><text x="41.8095%" y="655.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="41.5595%" y="629" width="0.0804%" height="15" fill="rgb(247,56,4)" fg:x="517" fg:w="1"/><text x="41.8095%" y="639.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.6399%" y="645" width="0.1608%" height="15" fill="rgb(226,179,17)" fg:x="518" fg:w="2"/><text x="41.8899%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="41.8006%" y="645" width="0.1608%" height="15" fill="rgb(216,163,45)" fg:x="520" fg:w="2"/><text x="42.0506%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="41.8006%" y="629" width="0.1608%" height="15" fill="rgb(211,157,3)" fg:x="520" fg:w="2"/><text x="42.0506%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="41.8006%" y="613" width="0.1608%" height="15" fill="rgb(234,44,20)" fg:x="520" fg:w="2"/><text x="42.0506%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="41.8810%" y="597" width="0.0804%" height="15" fill="rgb(254,138,23)" fg:x="521" fg:w="1"/><text x="42.1310%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.3633%" y="517" width="0.0804%" height="15" fill="rgb(206,119,39)" fg:x="527" fg:w="1"/><text x="42.6133%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.3633%" y="501" width="0.0804%" height="15" fill="rgb(231,105,52)" fg:x="527" fg:w="1"/><text x="42.6133%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.3633%" y="485" width="0.0804%" height="15" fill="rgb(250,20,5)" fg:x="527" fg:w="1"/><text x="42.6133%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.3633%" y="469" width="0.0804%" height="15" fill="rgb(215,198,30)" fg:x="527" fg:w="1"/><text x="42.6133%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="42.3633%" y="453" width="0.0804%" height="15" fill="rgb(246,142,8)" fg:x="527" fg:w="1"/><text x="42.6133%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="42.3633%" y="437" width="0.0804%" height="15" fill="rgb(243,26,38)" fg:x="527" fg:w="1"/><text x="42.6133%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="42.3633%" y="421" width="0.0804%" height="15" fill="rgb(205,133,28)" fg:x="527" fg:w="1"/><text x="42.6133%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.3633%" y="405" width="0.0804%" height="15" fill="rgb(212,34,0)" fg:x="527" fg:w="1"/><text x="42.6133%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.3633%" y="389" width="0.0804%" height="15" fill="rgb(251,226,22)" fg:x="527" fg:w="1"/><text x="42.6133%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="42.3633%" y="373" width="0.0804%" height="15" fill="rgb(252,119,9)" fg:x="527" fg:w="1"/><text x="42.6133%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="42.3633%" y="357" width="0.0804%" height="15" fill="rgb(213,150,50)" fg:x="527" fg:w="1"/><text x="42.6133%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="42.3633%" y="341" width="0.0804%" height="15" fill="rgb(212,24,39)" fg:x="527" fg:w="1"/><text x="42.6133%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="42.3633%" y="325" width="0.0804%" height="15" fill="rgb(213,46,39)" fg:x="527" fg:w="1"/><text x="42.6133%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.3633%" y="309" width="0.0804%" height="15" fill="rgb(239,106,12)" fg:x="527" fg:w="1"/><text x="42.6133%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="42.3633%" y="533" width="0.2412%" height="15" fill="rgb(249,229,21)" fg:x="527" fg:w="3"/><text x="42.6133%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="42.4437%" y="517" width="0.1608%" height="15" fill="rgb(212,158,3)" fg:x="528" fg:w="2"/><text x="42.6937%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.4437%" y="501" width="0.1608%" height="15" fill="rgb(253,26,48)" fg:x="528" fg:w="2"/><text x="42.6937%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="42.4437%" y="485" width="0.1608%" height="15" fill="rgb(238,178,20)" fg:x="528" fg:w="2"/><text x="42.6937%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.4437%" y="469" width="0.1608%" height="15" fill="rgb(208,86,15)" fg:x="528" fg:w="2"/><text x="42.6937%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="42.5241%" y="453" width="0.0804%" height="15" fill="rgb(239,42,53)" fg:x="529" fg:w="1"/><text x="42.7741%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="42.6849%" y="469" width="0.0804%" height="15" fill="rgb(245,226,8)" fg:x="531" fg:w="1"/><text x="42.9349%" y="479.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="42.7653%" y="421" width="0.0804%" height="15" fill="rgb(216,176,32)" fg:x="532" fg:w="1"/><text x="43.0153%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.7653%" y="405" width="0.0804%" height="15" fill="rgb(231,186,21)" fg:x="532" fg:w="1"/><text x="43.0153%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.7653%" y="389" width="0.0804%" height="15" fill="rgb(205,95,49)" fg:x="532" fg:w="1"/><text x="43.0153%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="42.8457%" y="389" width="0.0804%" height="15" fill="rgb(217,145,8)" fg:x="533" fg:w="1"/><text x="43.0957%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.9260%" y="373" width="0.0804%" height="15" fill="rgb(239,144,48)" fg:x="534" fg:w="1"/><text x="43.1760%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.9260%" y="357" width="0.0804%" height="15" fill="rgb(214,189,23)" fg:x="534" fg:w="1"/><text x="43.1760%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.9260%" y="341" width="0.0804%" height="15" fill="rgb(229,157,17)" fg:x="534" fg:w="1"/><text x="43.1760%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.0868%" y="341" width="0.0804%" height="15" fill="rgb(230,5,48)" fg:x="536" fg:w="1"/><text x="43.3368%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="43.0064%" y="373" width="0.2412%" height="15" fill="rgb(224,156,48)" fg:x="535" fg:w="3"/><text x="43.2564%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="43.0868%" y="357" width="0.1608%" height="15" fill="rgb(223,14,29)" fg:x="536" fg:w="2"/><text x="43.3368%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="43.1672%" y="341" width="0.0804%" height="15" fill="rgb(229,96,36)" fg:x="537" fg:w="1"/><text x="43.4172%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="42.7653%" y="469" width="0.6431%" height="15" fill="rgb(231,102,53)" fg:x="532" fg:w="8"/><text x="43.0153%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="42.7653%" y="453" width="0.6431%" height="15" fill="rgb(210,77,38)" fg:x="532" fg:w="8"/><text x="43.0153%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="42.7653%" y="437" width="0.6431%" height="15" fill="rgb(235,131,6)" fg:x="532" fg:w="8"/><text x="43.0153%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="42.8457%" y="421" width="0.5627%" height="15" fill="rgb(252,55,38)" fg:x="533" fg:w="7"/><text x="43.0957%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="42.8457%" y="405" width="0.5627%" height="15" fill="rgb(246,38,14)" fg:x="533" fg:w="7"/><text x="43.0957%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="42.9260%" y="389" width="0.4823%" height="15" fill="rgb(242,27,5)" fg:x="534" fg:w="6"/><text x="43.1760%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.2476%" y="373" width="0.1608%" height="15" fill="rgb(228,65,35)" fg:x="538" fg:w="2"/><text x="43.4976%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="43.2476%" y="357" width="0.1608%" height="15" fill="rgb(245,93,11)" fg:x="538" fg:w="2"/><text x="43.4976%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="43.2476%" y="341" width="0.1608%" height="15" fill="rgb(213,1,31)" fg:x="538" fg:w="2"/><text x="43.4976%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="43.2476%" y="325" width="0.1608%" height="15" fill="rgb(237,205,14)" fg:x="538" fg:w="2"/><text x="43.4976%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="43.2476%" y="309" width="0.1608%" height="15" fill="rgb(232,118,45)" fg:x="538" fg:w="2"/><text x="43.4976%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3280%" y="293" width="0.0804%" height="15" fill="rgb(218,5,6)" fg:x="539" fg:w="1"/><text x="43.5780%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="43.3280%" y="277" width="0.0804%" height="15" fill="rgb(251,87,51)" fg:x="539" fg:w="1"/><text x="43.5780%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="43.3280%" y="261" width="0.0804%" height="15" fill="rgb(207,225,20)" fg:x="539" fg:w="1"/><text x="43.5780%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3280%" y="245" width="0.0804%" height="15" fill="rgb(222,78,54)" fg:x="539" fg:w="1"/><text x="43.5780%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="43.3280%" y="229" width="0.0804%" height="15" fill="rgb(232,85,16)" fg:x="539" fg:w="1"/><text x="43.5780%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="43.3280%" y="213" width="0.0804%" height="15" fill="rgb(244,25,33)" fg:x="539" fg:w="1"/><text x="43.5780%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.3280%" y="197" width="0.0804%" height="15" fill="rgb(233,24,36)" fg:x="539" fg:w="1"/><text x="43.5780%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="43.3280%" y="181" width="0.0804%" height="15" fill="rgb(253,49,54)" fg:x="539" fg:w="1"/><text x="43.5780%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="43.3280%" y="165" width="0.0804%" height="15" fill="rgb(245,12,22)" fg:x="539" fg:w="1"/><text x="43.5780%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="43.4084%" y="373" width="0.3215%" height="15" fill="rgb(253,141,28)" fg:x="540" fg:w="4"/><text x="43.6584%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="43.4084%" y="357" width="0.3215%" height="15" fill="rgb(225,207,27)" fg:x="540" fg:w="4"/><text x="43.6584%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="43.4887%" y="341" width="0.2412%" height="15" fill="rgb(220,84,2)" fg:x="541" fg:w="3"/><text x="43.7387%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="43.6495%" y="325" width="0.0804%" height="15" fill="rgb(224,37,37)" fg:x="543" fg:w="1"/><text x="43.8995%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="43.6495%" y="309" width="0.0804%" height="15" fill="rgb(220,143,18)" fg:x="543" fg:w="1"/><text x="43.8995%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="43.6495%" y="293" width="0.0804%" height="15" fill="rgb(210,88,33)" fg:x="543" fg:w="1"/><text x="43.8995%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="43.6495%" y="277" width="0.0804%" height="15" fill="rgb(219,87,51)" fg:x="543" fg:w="1"/><text x="43.8995%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="43.6495%" y="261" width="0.0804%" height="15" fill="rgb(211,7,35)" fg:x="543" fg:w="1"/><text x="43.8995%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="43.6495%" y="245" width="0.0804%" height="15" fill="rgb(232,77,2)" fg:x="543" fg:w="1"/><text x="43.8995%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="43.6495%" y="229" width="0.0804%" height="15" fill="rgb(249,94,25)" fg:x="543" fg:w="1"/><text x="43.8995%" y="239.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.29%)</title><rect x="42.6045%" y="533" width="1.2862%" height="15" fill="rgb(215,112,2)" fg:x="530" fg:w="16"/><text x="42.8545%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (15 samples, 1.21%)</title><rect x="42.6849%" y="517" width="1.2058%" height="15" fill="rgb(226,115,48)" fg:x="531" fg:w="15"/><text x="42.9349%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.21%)</title><rect x="42.6849%" y="501" width="1.2058%" height="15" fill="rgb(249,196,10)" fg:x="531" fg:w="15"/><text x="42.9349%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.21%)</title><rect x="42.6849%" y="485" width="1.2058%" height="15" fill="rgb(237,109,14)" fg:x="531" fg:w="15"/><text x="42.9349%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="43.4084%" y="469" width="0.4823%" height="15" fill="rgb(217,103,53)" fg:x="540" fg:w="6"/><text x="43.6584%" y="479.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="43.4084%" y="453" width="0.4823%" height="15" fill="rgb(244,137,9)" fg:x="540" fg:w="6"/><text x="43.6584%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="43.4084%" y="437" width="0.4823%" height="15" fill="rgb(227,201,3)" fg:x="540" fg:w="6"/><text x="43.6584%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="43.4084%" y="421" width="0.4823%" height="15" fill="rgb(243,94,6)" fg:x="540" fg:w="6"/><text x="43.6584%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="43.4084%" y="405" width="0.4823%" height="15" fill="rgb(235,118,5)" fg:x="540" fg:w="6"/><text x="43.6584%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="43.4084%" y="389" width="0.4823%" height="15" fill="rgb(247,10,30)" fg:x="540" fg:w="6"/><text x="43.6584%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="43.7299%" y="373" width="0.1608%" height="15" fill="rgb(205,26,28)" fg:x="544" fg:w="2"/><text x="43.9799%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="43.8103%" y="357" width="0.0804%" height="15" fill="rgb(206,99,35)" fg:x="545" fg:w="1"/><text x="44.0603%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (20 samples, 1.61%)</title><rect x="42.3633%" y="565" width="1.6077%" height="15" fill="rgb(238,130,40)" fg:x="527" fg:w="20"/><text x="42.6133%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (20 samples, 1.61%)</title><rect x="42.3633%" y="549" width="1.6077%" height="15" fill="rgb(224,126,31)" fg:x="527" fg:w="20"/><text x="42.6133%" y="559.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (1 samples, 0.08%)</title><rect x="43.8907%" y="533" width="0.0804%" height="15" fill="rgb(254,105,17)" fg:x="546" fg:w="1"/><text x="44.1407%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="43.8907%" y="517" width="0.0804%" height="15" fill="rgb(216,87,36)" fg:x="546" fg:w="1"/><text x="44.1407%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="43.8907%" y="501" width="0.0804%" height="15" fill="rgb(240,21,12)" fg:x="546" fg:w="1"/><text x="44.1407%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.3730%" y="293" width="0.1608%" height="15" fill="rgb(245,192,34)" fg:x="552" fg:w="2"/><text x="44.6230%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="44.3730%" y="325" width="0.3215%" height="15" fill="rgb(226,100,49)" fg:x="552" fg:w="4"/><text x="44.6230%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="44.3730%" y="309" width="0.3215%" height="15" fill="rgb(245,188,27)" fg:x="552" fg:w="4"/><text x="44.6230%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="44.5338%" y="293" width="0.1608%" height="15" fill="rgb(212,170,8)" fg:x="554" fg:w="2"/><text x="44.7838%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="44.5338%" y="277" width="0.1608%" height="15" fill="rgb(217,113,29)" fg:x="554" fg:w="2"/><text x="44.7838%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="44.6141%" y="261" width="0.0804%" height="15" fill="rgb(237,30,3)" fg:x="555" fg:w="1"/><text x="44.8641%" y="271.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="44.6945%" y="309" width="0.0804%" height="15" fill="rgb(227,19,28)" fg:x="556" fg:w="1"/><text x="44.9445%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="44.6945%" y="293" width="0.0804%" height="15" fill="rgb(239,172,45)" fg:x="556" fg:w="1"/><text x="44.9445%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.6945%" y="277" width="0.0804%" height="15" fill="rgb(254,55,39)" fg:x="556" fg:w="1"/><text x="44.9445%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (2 samples, 0.16%)</title><rect x="44.7749%" y="293" width="0.1608%" height="15" fill="rgb(249,208,12)" fg:x="557" fg:w="2"/><text x="45.0249%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="44.8553%" y="277" width="0.0804%" height="15" fill="rgb(240,52,13)" fg:x="558" fg:w="1"/><text x="45.1053%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.8553%" y="261" width="0.0804%" height="15" fill="rgb(252,149,13)" fg:x="558" fg:w="1"/><text x="45.1053%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="44.9357%" y="293" width="0.0804%" height="15" fill="rgb(232,81,48)" fg:x="559" fg:w="1"/><text x="45.1857%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="44.9357%" y="277" width="0.0804%" height="15" fill="rgb(222,144,2)" fg:x="559" fg:w="1"/><text x="45.1857%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="44.9357%" y="261" width="0.0804%" height="15" fill="rgb(216,81,32)" fg:x="559" fg:w="1"/><text x="45.1857%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9357%" y="245" width="0.0804%" height="15" fill="rgb(244,78,51)" fg:x="559" fg:w="1"/><text x="45.1857%" y="255.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (11 samples, 0.88%)</title><rect x="44.2122%" y="373" width="0.8842%" height="15" fill="rgb(217,66,21)" fg:x="550" fg:w="11"/><text x="44.4622%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (10 samples, 0.80%)</title><rect x="44.2926%" y="357" width="0.8039%" height="15" fill="rgb(247,101,42)" fg:x="551" fg:w="10"/><text x="44.5426%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="44.2926%" y="341" width="0.8039%" height="15" fill="rgb(227,81,39)" fg:x="551" fg:w="10"/><text x="44.5426%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="44.6945%" y="325" width="0.4019%" height="15" fill="rgb(220,223,44)" fg:x="556" fg:w="5"/><text x="44.9445%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (4 samples, 0.32%)</title><rect x="44.7749%" y="309" width="0.3215%" height="15" fill="rgb(205,218,2)" fg:x="557" fg:w="4"/><text x="45.0249%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="45.0161%" y="293" width="0.0804%" height="15" fill="rgb(212,207,28)" fg:x="560" fg:w="1"/><text x="45.2661%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.0161%" y="277" width="0.0804%" height="15" fill="rgb(224,12,41)" fg:x="560" fg:w="1"/><text x="45.2661%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (12 samples, 0.96%)</title><rect x="44.2122%" y="389" width="0.9646%" height="15" fill="rgb(216,118,12)" fg:x="550" fg:w="12"/><text x="44.4622%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="45.0965%" y="373" width="0.0804%" height="15" fill="rgb(252,97,46)" fg:x="561" fg:w="1"/><text x="45.3465%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="45.2572%" y="357" width="0.1608%" height="15" fill="rgb(244,206,19)" fg:x="563" fg:w="2"/><text x="45.5072%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="45.2572%" y="341" width="0.1608%" height="15" fill="rgb(231,84,31)" fg:x="563" fg:w="2"/><text x="45.5072%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="45.5788%" y="293" width="0.0804%" height="15" fill="rgb(244,133,0)" fg:x="567" fg:w="1"/><text x="45.8288%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.5788%" y="277" width="0.0804%" height="15" fill="rgb(223,15,50)" fg:x="567" fg:w="1"/><text x="45.8288%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.5788%" y="261" width="0.0804%" height="15" fill="rgb(250,118,49)" fg:x="567" fg:w="1"/><text x="45.8288%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.5788%" y="245" width="0.0804%" height="15" fill="rgb(248,25,38)" fg:x="567" fg:w="1"/><text x="45.8288%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.5788%" y="229" width="0.0804%" height="15" fill="rgb(215,70,14)" fg:x="567" fg:w="1"/><text x="45.8288%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.5788%" y="213" width="0.0804%" height="15" fill="rgb(215,28,15)" fg:x="567" fg:w="1"/><text x="45.8288%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.5788%" y="197" width="0.0804%" height="15" fill="rgb(243,6,28)" fg:x="567" fg:w="1"/><text x="45.8288%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.5788%" y="181" width="0.0804%" height="15" fill="rgb(222,130,1)" fg:x="567" fg:w="1"/><text x="45.8288%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.5788%" y="165" width="0.0804%" height="15" fill="rgb(236,166,44)" fg:x="567" fg:w="1"/><text x="45.8288%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.5788%" y="149" width="0.0804%" height="15" fill="rgb(221,108,14)" fg:x="567" fg:w="1"/><text x="45.8288%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.5788%" y="133" width="0.0804%" height="15" fill="rgb(252,3,45)" fg:x="567" fg:w="1"/><text x="45.8288%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.5788%" y="117" width="0.0804%" height="15" fill="rgb(237,68,30)" fg:x="567" fg:w="1"/><text x="45.8288%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.5788%" y="101" width="0.0804%" height="15" fill="rgb(211,79,22)" fg:x="567" fg:w="1"/><text x="45.8288%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="45.5788%" y="325" width="0.1608%" height="15" fill="rgb(252,185,21)" fg:x="567" fg:w="2"/><text x="45.8288%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="45.5788%" y="309" width="0.1608%" height="15" fill="rgb(225,189,26)" fg:x="567" fg:w="2"/><text x="45.8288%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.6592%" y="293" width="0.0804%" height="15" fill="rgb(241,30,40)" fg:x="568" fg:w="1"/><text x="45.9092%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.6592%" y="277" width="0.0804%" height="15" fill="rgb(235,215,44)" fg:x="568" fg:w="1"/><text x="45.9092%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.6592%" y="261" width="0.0804%" height="15" fill="rgb(205,8,29)" fg:x="568" fg:w="1"/><text x="45.9092%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.6592%" y="245" width="0.0804%" height="15" fill="rgb(241,137,42)" fg:x="568" fg:w="1"/><text x="45.9092%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.6592%" y="229" width="0.0804%" height="15" fill="rgb(237,155,2)" fg:x="568" fg:w="1"/><text x="45.9092%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.6592%" y="213" width="0.0804%" height="15" fill="rgb(245,29,42)" fg:x="568" fg:w="1"/><text x="45.9092%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.6592%" y="197" width="0.0804%" height="15" fill="rgb(234,101,35)" fg:x="568" fg:w="1"/><text x="45.9092%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.6592%" y="181" width="0.0804%" height="15" fill="rgb(228,64,37)" fg:x="568" fg:w="1"/><text x="45.9092%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.6592%" y="165" width="0.0804%" height="15" fill="rgb(217,214,36)" fg:x="568" fg:w="1"/><text x="45.9092%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.6592%" y="149" width="0.0804%" height="15" fill="rgb(243,70,3)" fg:x="568" fg:w="1"/><text x="45.9092%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.6592%" y="133" width="0.0804%" height="15" fill="rgb(253,158,52)" fg:x="568" fg:w="1"/><text x="45.9092%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.6592%" y="117" width="0.0804%" height="15" fill="rgb(234,111,54)" fg:x="568" fg:w="1"/><text x="45.9092%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="45.7395%" y="325" width="0.1608%" height="15" fill="rgb(217,70,32)" fg:x="569" fg:w="2"/><text x="45.9895%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.8199%" y="309" width="0.0804%" height="15" fill="rgb(234,18,33)" fg:x="570" fg:w="1"/><text x="46.0699%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.8199%" y="293" width="0.0804%" height="15" fill="rgb(234,12,49)" fg:x="570" fg:w="1"/><text x="46.0699%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.8199%" y="277" width="0.0804%" height="15" fill="rgb(236,10,21)" fg:x="570" fg:w="1"/><text x="46.0699%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.8199%" y="261" width="0.0804%" height="15" fill="rgb(248,182,45)" fg:x="570" fg:w="1"/><text x="46.0699%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.8199%" y="245" width="0.0804%" height="15" fill="rgb(217,95,36)" fg:x="570" fg:w="1"/><text x="46.0699%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.8199%" y="229" width="0.0804%" height="15" fill="rgb(212,110,31)" fg:x="570" fg:w="1"/><text x="46.0699%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.8199%" y="213" width="0.0804%" height="15" fill="rgb(206,32,53)" fg:x="570" fg:w="1"/><text x="46.0699%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.8199%" y="197" width="0.0804%" height="15" fill="rgb(246,141,37)" fg:x="570" fg:w="1"/><text x="46.0699%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.8199%" y="181" width="0.0804%" height="15" fill="rgb(219,16,7)" fg:x="570" fg:w="1"/><text x="46.0699%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.8199%" y="165" width="0.0804%" height="15" fill="rgb(230,205,45)" fg:x="570" fg:w="1"/><text x="46.0699%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.8199%" y="149" width="0.0804%" height="15" fill="rgb(231,43,49)" fg:x="570" fg:w="1"/><text x="46.0699%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.8199%" y="133" width="0.0804%" height="15" fill="rgb(212,106,34)" fg:x="570" fg:w="1"/><text x="46.0699%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.9003%" y="325" width="0.0804%" height="15" fill="rgb(206,83,17)" fg:x="571" fg:w="1"/><text x="46.1503%" y="335.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="45.9807%" y="325" width="0.0804%" height="15" fill="rgb(244,154,49)" fg:x="572" fg:w="1"/><text x="46.2307%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="46.0611%" y="293" width="0.0804%" height="15" fill="rgb(244,149,49)" fg:x="573" fg:w="1"/><text x="46.3111%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.0611%" y="277" width="0.0804%" height="15" fill="rgb(227,134,18)" fg:x="573" fg:w="1"/><text x="46.3111%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (11 samples, 0.88%)</title><rect x="45.4984%" y="341" width="0.8842%" height="15" fill="rgb(237,116,36)" fg:x="566" fg:w="11"/><text x="45.7484%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="46.0611%" y="325" width="0.3215%" height="15" fill="rgb(205,129,40)" fg:x="573" fg:w="4"/><text x="46.3111%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="46.0611%" y="309" width="0.3215%" height="15" fill="rgb(236,178,4)" fg:x="573" fg:w="4"/><text x="46.3111%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="46.1415%" y="293" width="0.2412%" height="15" fill="rgb(251,76,53)" fg:x="574" fg:w="3"/><text x="46.3915%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="46.1415%" y="277" width="0.2412%" height="15" fill="rgb(242,92,40)" fg:x="574" fg:w="3"/><text x="46.3915%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="46.1415%" y="261" width="0.2412%" height="15" fill="rgb(209,45,30)" fg:x="574" fg:w="3"/><text x="46.3915%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="46.1415%" y="245" width="0.2412%" height="15" fill="rgb(218,157,36)" fg:x="574" fg:w="3"/><text x="46.3915%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="46.3023%" y="229" width="0.0804%" height="15" fill="rgb(222,186,16)" fg:x="576" fg:w="1"/><text x="46.5523%" y="239.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (13 samples, 1.05%)</title><rect x="45.4180%" y="357" width="1.0450%" height="15" fill="rgb(254,72,35)" fg:x="565" fg:w="13"/><text x="45.6680%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.3826%" y="341" width="0.0804%" height="15" fill="rgb(224,25,35)" fg:x="577" fg:w="1"/><text x="46.6326%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="46.4630%" y="357" width="0.0804%" height="15" fill="rgb(206,135,52)" fg:x="578" fg:w="1"/><text x="46.7130%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="46.4630%" y="341" width="0.0804%" height="15" fill="rgb(229,174,47)" fg:x="578" fg:w="1"/><text x="46.7130%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="46.4630%" y="325" width="0.0804%" height="15" fill="rgb(242,184,21)" fg:x="578" fg:w="1"/><text x="46.7130%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="46.4630%" y="309" width="0.0804%" height="15" fill="rgb(213,22,45)" fg:x="578" fg:w="1"/><text x="46.7130%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="46.4630%" y="293" width="0.0804%" height="15" fill="rgb(237,81,54)" fg:x="578" fg:w="1"/><text x="46.7130%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.5434%" y="341" width="0.0804%" height="15" fill="rgb(248,177,18)" fg:x="579" fg:w="1"/><text x="46.7934%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.5434%" y="325" width="0.0804%" height="15" fill="rgb(254,31,16)" fg:x="579" fg:w="1"/><text x="46.7934%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="46.5434%" y="309" width="0.0804%" height="15" fill="rgb(235,20,31)" fg:x="579" fg:w="1"/><text x="46.7934%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.6238%" y="341" width="0.0804%" height="15" fill="rgb(240,56,43)" fg:x="580" fg:w="1"/><text x="46.8738%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="46.7042%" y="341" width="0.0804%" height="15" fill="rgb(237,197,51)" fg:x="581" fg:w="1"/><text x="46.9542%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="46.7846%" y="277" width="0.0804%" height="15" fill="rgb(241,162,44)" fg:x="582" fg:w="1"/><text x="47.0346%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="46.5434%" y="357" width="0.4823%" height="15" fill="rgb(224,23,20)" fg:x="579" fg:w="6"/><text x="46.7934%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="46.7846%" y="341" width="0.2412%" height="15" fill="rgb(250,109,34)" fg:x="582" fg:w="3"/><text x="47.0346%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="46.7846%" y="325" width="0.2412%" height="15" fill="rgb(214,175,50)" fg:x="582" fg:w="3"/><text x="47.0346%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="46.7846%" y="309" width="0.2412%" height="15" fill="rgb(213,182,5)" fg:x="582" fg:w="3"/><text x="47.0346%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="46.7846%" y="293" width="0.2412%" height="15" fill="rgb(209,199,19)" fg:x="582" fg:w="3"/><text x="47.0346%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="46.8650%" y="277" width="0.1608%" height="15" fill="rgb(236,224,42)" fg:x="583" fg:w="2"/><text x="47.1150%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.8650%" y="261" width="0.1608%" height="15" fill="rgb(246,226,29)" fg:x="583" fg:w="2"/><text x="47.1150%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="47.0257%" y="357" width="0.1608%" height="15" fill="rgb(227,223,11)" fg:x="585" fg:w="2"/><text x="47.2757%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="47.1865%" y="325" width="0.1608%" height="15" fill="rgb(219,7,51)" fg:x="587" fg:w="2"/><text x="47.4365%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="47.2669%" y="309" width="0.0804%" height="15" fill="rgb(245,167,10)" fg:x="588" fg:w="1"/><text x="47.5169%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.3473%" y="325" width="0.0804%" height="15" fill="rgb(237,224,16)" fg:x="589" fg:w="1"/><text x="47.5973%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.3473%" y="309" width="0.0804%" height="15" fill="rgb(226,132,13)" fg:x="589" fg:w="1"/><text x="47.5973%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="47.3473%" y="293" width="0.0804%" height="15" fill="rgb(214,140,3)" fg:x="589" fg:w="1"/><text x="47.5973%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="47.3473%" y="277" width="0.0804%" height="15" fill="rgb(221,177,4)" fg:x="589" fg:w="1"/><text x="47.5973%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="47.3473%" y="261" width="0.0804%" height="15" fill="rgb(238,139,3)" fg:x="589" fg:w="1"/><text x="47.5973%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="47.3473%" y="245" width="0.0804%" height="15" fill="rgb(216,17,39)" fg:x="589" fg:w="1"/><text x="47.5973%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="47.3473%" y="229" width="0.0804%" height="15" fill="rgb(238,120,9)" fg:x="589" fg:w="1"/><text x="47.5973%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="47.3473%" y="213" width="0.0804%" height="15" fill="rgb(244,92,53)" fg:x="589" fg:w="1"/><text x="47.5973%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="47.3473%" y="197" width="0.0804%" height="15" fill="rgb(224,148,33)" fg:x="589" fg:w="1"/><text x="47.5973%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="47.3473%" y="181" width="0.0804%" height="15" fill="rgb(243,6,36)" fg:x="589" fg:w="1"/><text x="47.5973%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="47.3473%" y="165" width="0.0804%" height="15" fill="rgb(230,102,11)" fg:x="589" fg:w="1"/><text x="47.5973%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="47.3473%" y="149" width="0.0804%" height="15" fill="rgb(234,148,36)" fg:x="589" fg:w="1"/><text x="47.5973%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="47.3473%" y="133" width="0.0804%" height="15" fill="rgb(251,153,25)" fg:x="589" fg:w="1"/><text x="47.5973%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="47.3473%" y="117" width="0.0804%" height="15" fill="rgb(215,129,8)" fg:x="589" fg:w="1"/><text x="47.5973%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.56%)</title><rect x="47.1865%" y="341" width="0.5627%" height="15" fill="rgb(224,128,35)" fg:x="587" fg:w="7"/><text x="47.4365%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="47.4277%" y="325" width="0.3215%" height="15" fill="rgb(237,56,52)" fg:x="590" fg:w="4"/><text x="47.6777%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="47.4277%" y="309" width="0.3215%" height="15" fill="rgb(234,213,19)" fg:x="590" fg:w="4"/><text x="47.6777%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="47.4277%" y="293" width="0.3215%" height="15" fill="rgb(252,82,23)" fg:x="590" fg:w="4"/><text x="47.6777%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="47.5080%" y="277" width="0.2412%" height="15" fill="rgb(254,201,21)" fg:x="591" fg:w="3"/><text x="47.7580%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="47.5080%" y="261" width="0.2412%" height="15" fill="rgb(250,186,11)" fg:x="591" fg:w="3"/><text x="47.7580%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="47.5080%" y="245" width="0.2412%" height="15" fill="rgb(211,174,5)" fg:x="591" fg:w="3"/><text x="47.7580%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.6688%" y="229" width="0.0804%" height="15" fill="rgb(214,121,10)" fg:x="593" fg:w="1"/><text x="47.9188%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="47.7492%" y="341" width="0.0804%" height="15" fill="rgb(241,66,2)" fg:x="594" fg:w="1"/><text x="47.9992%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.7492%" y="325" width="0.0804%" height="15" fill="rgb(220,167,19)" fg:x="594" fg:w="1"/><text x="47.9992%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (9 samples, 0.72%)</title><rect x="47.1865%" y="357" width="0.7235%" height="15" fill="rgb(231,54,50)" fg:x="587" fg:w="9"/><text x="47.4365%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="47.8296%" y="341" width="0.0804%" height="15" fill="rgb(239,217,53)" fg:x="595" fg:w="1"/><text x="48.0796%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="47.9904%" y="277" width="0.0804%" height="15" fill="rgb(248,8,0)" fg:x="597" fg:w="1"/><text x="48.2404%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="47.9904%" y="261" width="0.0804%" height="15" fill="rgb(229,118,37)" fg:x="597" fg:w="1"/><text x="48.2404%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="47.9904%" y="245" width="0.0804%" height="15" fill="rgb(253,223,43)" fg:x="597" fg:w="1"/><text x="48.2404%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="47.9904%" y="229" width="0.0804%" height="15" fill="rgb(211,77,36)" fg:x="597" fg:w="1"/><text x="48.2404%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="48.0707%" y="277" width="0.1608%" height="15" fill="rgb(219,3,53)" fg:x="598" fg:w="2"/><text x="48.3207%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="48.1511%" y="261" width="0.0804%" height="15" fill="rgb(244,45,42)" fg:x="599" fg:w="1"/><text x="48.4011%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="48.3923%" y="229" width="0.0804%" height="15" fill="rgb(225,95,27)" fg:x="602" fg:w="1"/><text x="48.6423%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.4727%" y="213" width="0.0804%" height="15" fill="rgb(207,74,8)" fg:x="603" fg:w="1"/><text x="48.7227%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="48.5531%" y="213" width="0.0804%" height="15" fill="rgb(243,63,36)" fg:x="604" fg:w="1"/><text x="48.8031%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7138%" y="197" width="0.0804%" height="15" fill="rgb(211,180,12)" fg:x="606" fg:w="1"/><text x="48.9638%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.21%)</title><rect x="48.6334%" y="213" width="1.2058%" height="15" fill="rgb(254,166,49)" fg:x="605" fg:w="15"/><text x="48.8834%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.05%)</title><rect x="48.7942%" y="197" width="1.0450%" height="15" fill="rgb(205,19,0)" fg:x="607" fg:w="13"/><text x="49.0442%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.7588%" y="181" width="0.0804%" height="15" fill="rgb(224,172,32)" fg:x="619" fg:w="1"/><text x="50.0088%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="49.8392%" y="213" width="0.0804%" height="15" fill="rgb(254,136,30)" fg:x="620" fg:w="1"/><text x="50.0892%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="49.8392%" y="197" width="0.0804%" height="15" fill="rgb(246,19,35)" fg:x="620" fg:w="1"/><text x="50.0892%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="50.0000%" y="149" width="0.0804%" height="15" fill="rgb(219,24,36)" fg:x="622" fg:w="1"/><text x="50.2500%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="50.0804%" y="149" width="0.0804%" height="15" fill="rgb(251,55,1)" fg:x="623" fg:w="1"/><text x="50.3304%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="50.1608%" y="149" width="0.2412%" height="15" fill="rgb(218,117,39)" fg:x="624" fg:w="3"/><text x="50.4108%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="50.1608%" y="133" width="0.2412%" height="15" fill="rgb(248,169,11)" fg:x="624" fg:w="3"/><text x="50.4108%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="50.3215%" y="117" width="0.0804%" height="15" fill="rgb(244,40,44)" fg:x="626" fg:w="1"/><text x="50.5715%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (30 samples, 2.41%)</title><rect x="50.4019%" y="149" width="2.4116%" height="15" fill="rgb(234,62,37)" fg:x="627" fg:w="30"/><text x="50.6519%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (30 samples, 2.41%)</title><rect x="50.4019%" y="133" width="2.4116%" height="15" fill="rgb(207,117,42)" fg:x="627" fg:w="30"/><text x="50.6519%" y="143.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.41%)</title><rect x="50.4019%" y="117" width="2.4116%" height="15" fill="rgb(213,43,2)" fg:x="627" fg:w="30"/><text x="50.6519%" y="127.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="52.8135%" y="149" width="0.0804%" height="15" fill="rgb(244,202,51)" fg:x="657" fg:w="1"/><text x="53.0635%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.8135%" y="133" width="0.0804%" height="15" fill="rgb(253,174,46)" fg:x="657" fg:w="1"/><text x="53.0635%" y="143.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="52.8939%" y="149" width="0.0804%" height="15" fill="rgb(251,23,1)" fg:x="658" fg:w="1"/><text x="53.1439%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.05%)</title><rect x="50.0000%" y="197" width="3.0547%" height="15" fill="rgb(253,26,1)" fg:x="622" fg:w="38"/><text x="50.2500%" y="207.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.05%)</title><rect x="50.0000%" y="181" width="3.0547%" height="15" fill="rgb(216,89,31)" fg:x="622" fg:w="38"/><text x="50.2500%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.05%)</title><rect x="50.0000%" y="165" width="3.0547%" height="15" fill="rgb(209,109,5)" fg:x="622" fg:w="38"/><text x="50.2500%" y="175.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="52.9743%" y="149" width="0.0804%" height="15" fill="rgb(229,63,13)" fg:x="659" fg:w="1"/><text x="53.2243%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.9743%" y="133" width="0.0804%" height="15" fill="rgb(238,137,54)" fg:x="659" fg:w="1"/><text x="53.2243%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.9743%" y="117" width="0.0804%" height="15" fill="rgb(228,1,9)" fg:x="659" fg:w="1"/><text x="53.2243%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.9743%" y="101" width="0.0804%" height="15" fill="rgb(249,120,48)" fg:x="659" fg:w="1"/><text x="53.2243%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="53.0547%" y="197" width="0.4823%" height="15" fill="rgb(209,72,36)" fg:x="660" fg:w="6"/><text x="53.3047%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="53.2154%" y="181" width="0.3215%" height="15" fill="rgb(247,98,49)" fg:x="662" fg:w="4"/><text x="53.4654%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="53.3762%" y="165" width="0.1608%" height="15" fill="rgb(233,75,36)" fg:x="664" fg:w="2"/><text x="53.6262%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4566%" y="149" width="0.0804%" height="15" fill="rgb(225,14,24)" fg:x="665" fg:w="1"/><text x="53.7066%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.4566%" y="133" width="0.0804%" height="15" fill="rgb(237,193,20)" fg:x="665" fg:w="1"/><text x="53.7066%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (46 samples, 3.70%)</title><rect x="49.9196%" y="213" width="3.6977%" height="15" fill="rgb(239,122,19)" fg:x="621" fg:w="46"/><text x="50.1696%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="53.5370%" y="197" width="0.0804%" height="15" fill="rgb(231,220,10)" fg:x="666" fg:w="1"/><text x="53.7870%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="53.5370%" y="181" width="0.0804%" height="15" fill="rgb(220,66,15)" fg:x="666" fg:w="1"/><text x="53.7870%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.5370%" y="165" width="0.0804%" height="15" fill="rgb(215,171,52)" fg:x="666" fg:w="1"/><text x="53.7870%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (65 samples, 5.23%)</title><rect x="48.4727%" y="229" width="5.2251%" height="15" fill="rgb(241,169,50)" fg:x="603" fg:w="65"/><text x="48.7227%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.6174%" y="213" width="0.0804%" height="15" fill="rgb(236,189,0)" fg:x="667" fg:w="1"/><text x="53.8674%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="53.6174%" y="197" width="0.0804%" height="15" fill="rgb(217,147,20)" fg:x="667" fg:w="1"/><text x="53.8674%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.6174%" y="181" width="0.0804%" height="15" fill="rgb(206,188,39)" fg:x="667" fg:w="1"/><text x="53.8674%" y="191.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="53.6977%" y="229" width="0.0804%" height="15" fill="rgb(227,118,25)" fg:x="668" fg:w="1"/><text x="53.9477%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="53.6977%" y="213" width="0.0804%" height="15" fill="rgb(248,171,40)" fg:x="668" fg:w="1"/><text x="53.9477%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="53.6977%" y="197" width="0.0804%" height="15" fill="rgb(251,90,54)" fg:x="668" fg:w="1"/><text x="53.9477%" y="207.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="53.6977%" y="181" width="0.0804%" height="15" fill="rgb(234,11,46)" fg:x="668" fg:w="1"/><text x="53.9477%" y="191.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="53.6977%" y="165" width="0.0804%" height="15" fill="rgb(229,134,13)" fg:x="668" fg:w="1"/><text x="53.9477%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="53.8585%" y="197" width="0.0804%" height="15" fill="rgb(223,129,3)" fg:x="670" fg:w="1"/><text x="54.1085%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="54.0193%" y="181" width="0.0804%" height="15" fill="rgb(221,124,13)" fg:x="672" fg:w="1"/><text x="54.2693%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="53.7781%" y="229" width="0.6431%" height="15" fill="rgb(234,3,18)" fg:x="669" fg:w="8"/><text x="54.0281%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="53.7781%" y="213" width="0.6431%" height="15" fill="rgb(249,199,20)" fg:x="669" fg:w="8"/><text x="54.0281%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="53.9389%" y="197" width="0.4823%" height="15" fill="rgb(224,134,6)" fg:x="671" fg:w="6"/><text x="54.1889%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="54.0997%" y="181" width="0.3215%" height="15" fill="rgb(254,83,26)" fg:x="673" fg:w="4"/><text x="54.3497%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="54.0997%" y="165" width="0.3215%" height="15" fill="rgb(217,88,9)" fg:x="673" fg:w="4"/><text x="54.3497%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="54.0997%" y="149" width="0.3215%" height="15" fill="rgb(225,73,2)" fg:x="673" fg:w="4"/><text x="54.3497%" y="159.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="54.0997%" y="133" width="0.3215%" height="15" fill="rgb(226,44,39)" fg:x="673" fg:w="4"/><text x="54.3497%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (80 samples, 6.43%)</title><rect x="48.2315%" y="277" width="6.4309%" height="15" fill="rgb(228,53,17)" fg:x="600" fg:w="80"/><text x="48.4815%" y="287.50">regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::build (80 samples, 6.43%)</title><rect x="48.2315%" y="261" width="6.4309%" height="15" fill="rgb(212,27,27)" fg:x="600" fg:w="80"/><text x="48.4815%" y="271.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (79 samples, 6.35%)</title><rect x="48.3119%" y="245" width="6.3505%" height="15" fill="rgb(241,50,6)" fg:x="601" fg:w="79"/><text x="48.5619%" y="255.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="54.4212%" y="229" width="0.2412%" height="15" fill="rgb(225,28,51)" fg:x="677" fg:w="3"/><text x="54.6712%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="54.4212%" y="213" width="0.2412%" height="15" fill="rgb(215,33,16)" fg:x="677" fg:w="3"/><text x="54.6712%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="54.5016%" y="197" width="0.1608%" height="15" fill="rgb(243,40,39)" fg:x="678" fg:w="2"/><text x="54.7516%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="54.5016%" y="181" width="0.1608%" height="15" fill="rgb(225,11,42)" fg:x="678" fg:w="2"/><text x="54.7516%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.5820%" y="165" width="0.0804%" height="15" fill="rgb(241,220,38)" fg:x="679" fg:w="1"/><text x="54.8320%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.5820%" y="149" width="0.0804%" height="15" fill="rgb(244,52,35)" fg:x="679" fg:w="1"/><text x="54.8320%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.5820%" y="133" width="0.0804%" height="15" fill="rgb(246,42,46)" fg:x="679" fg:w="1"/><text x="54.8320%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="54.8232%" y="197" width="0.1608%" height="15" fill="rgb(205,184,13)" fg:x="682" fg:w="2"/><text x="55.0732%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="54.9035%" y="181" width="0.0804%" height="15" fill="rgb(209,48,36)" fg:x="683" fg:w="1"/><text x="55.1535%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="54.7428%" y="213" width="0.4019%" height="15" fill="rgb(244,34,51)" fg:x="681" fg:w="5"/><text x="54.9928%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="54.9839%" y="197" width="0.1608%" height="15" fill="rgb(221,107,33)" fg:x="684" fg:w="2"/><text x="55.2339%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (91 samples, 7.32%)</title><rect x="47.9100%" y="293" width="7.3151%" height="15" fill="rgb(224,203,12)" fg:x="596" fg:w="91"/><text x="48.1600%" y="303.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="54.6624%" y="277" width="0.5627%" height="15" fill="rgb(230,215,18)" fg:x="680" fg:w="7"/><text x="54.9124%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="54.6624%" y="261" width="0.5627%" height="15" fill="rgb(206,185,35)" fg:x="680" fg:w="7"/><text x="54.9124%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="54.6624%" y="245" width="0.5627%" height="15" fill="rgb(228,140,34)" fg:x="680" fg:w="7"/><text x="54.9124%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="54.6624%" y="229" width="0.5627%" height="15" fill="rgb(208,93,13)" fg:x="680" fg:w="7"/><text x="54.9124%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="55.1447%" y="213" width="0.0804%" height="15" fill="rgb(221,193,39)" fg:x="686" fg:w="1"/><text x="55.3947%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.1447%" y="197" width="0.0804%" height="15" fill="rgb(241,132,34)" fg:x="686" fg:w="1"/><text x="55.3947%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="55.2251%" y="277" width="0.0804%" height="15" fill="rgb(221,141,10)" fg:x="687" fg:w="1"/><text x="55.4751%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="55.2251%" y="261" width="0.0804%" height="15" fill="rgb(226,90,31)" fg:x="687" fg:w="1"/><text x="55.4751%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="55.2251%" y="245" width="0.0804%" height="15" fill="rgb(243,75,5)" fg:x="687" fg:w="1"/><text x="55.4751%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="55.2251%" y="229" width="0.0804%" height="15" fill="rgb(227,156,21)" fg:x="687" fg:w="1"/><text x="55.4751%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.2251%" y="213" width="0.0804%" height="15" fill="rgb(250,195,8)" fg:x="687" fg:w="1"/><text x="55.4751%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="55.3859%" y="261" width="0.0804%" height="15" fill="rgb(220,134,5)" fg:x="689" fg:w="1"/><text x="55.6359%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="55.3859%" y="245" width="0.0804%" height="15" fill="rgb(246,106,34)" fg:x="689" fg:w="1"/><text x="55.6359%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="55.3859%" y="229" width="0.0804%" height="15" fill="rgb(205,1,4)" fg:x="689" fg:w="1"/><text x="55.6359%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="55.7878%" y="181" width="0.3215%" height="15" fill="rgb(224,151,29)" fg:x="694" fg:w="4"/><text x="56.0378%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="55.7878%" y="165" width="0.3215%" height="15" fill="rgb(251,196,0)" fg:x="694" fg:w="4"/><text x="56.0378%" y="175.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="55.7878%" y="149" width="0.3215%" height="15" fill="rgb(212,127,0)" fg:x="694" fg:w="4"/><text x="56.0378%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="55.4662%" y="213" width="0.8842%" height="15" fill="rgb(236,71,53)" fg:x="690" fg:w="11"/><text x="55.7162%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.88%)</title><rect x="55.4662%" y="197" width="0.8842%" height="15" fill="rgb(227,99,0)" fg:x="690" fg:w="11"/><text x="55.7162%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="56.1093%" y="181" width="0.2412%" height="15" fill="rgb(239,89,21)" fg:x="698" fg:w="3"/><text x="56.3593%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="55.4662%" y="229" width="0.9646%" height="15" fill="rgb(243,122,19)" fg:x="690" fg:w="12"/><text x="55.7162%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="56.3505%" y="213" width="0.0804%" height="15" fill="rgb(229,192,45)" fg:x="701" fg:w="1"/><text x="56.6005%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="56.3505%" y="197" width="0.0804%" height="15" fill="rgb(235,165,35)" fg:x="701" fg:w="1"/><text x="56.6005%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.3505%" y="181" width="0.0804%" height="15" fill="rgb(253,202,0)" fg:x="701" fg:w="1"/><text x="56.6005%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.3505%" y="165" width="0.0804%" height="15" fill="rgb(235,51,20)" fg:x="701" fg:w="1"/><text x="56.6005%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.3505%" y="149" width="0.0804%" height="15" fill="rgb(218,95,46)" fg:x="701" fg:w="1"/><text x="56.6005%" y="159.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.21%)</title><rect x="55.3055%" y="277" width="1.2058%" height="15" fill="rgb(212,81,10)" fg:x="688" fg:w="15"/><text x="55.5555%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.05%)</title><rect x="55.4662%" y="261" width="1.0450%" height="15" fill="rgb(240,59,0)" fg:x="690" fg:w="13"/><text x="55.7162%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.05%)</title><rect x="55.4662%" y="245" width="1.0450%" height="15" fill="rgb(212,191,42)" fg:x="690" fg:w="13"/><text x="55.7162%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::Core::is_match_nofail (1 samples, 0.08%)</title><rect x="56.4309%" y="229" width="0.0804%" height="15" fill="rgb(233,140,3)" fg:x="702" fg:w="1"/><text x="56.6809%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="56.5916%" y="245" width="0.0804%" height="15" fill="rgb(215,69,23)" fg:x="704" fg:w="1"/><text x="56.8416%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="56.5916%" y="229" width="0.0804%" height="15" fill="rgb(240,202,20)" fg:x="704" fg:w="1"/><text x="56.8416%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.6720%" y="197" width="0.0804%" height="15" fill="rgb(209,146,50)" fg:x="705" fg:w="1"/><text x="56.9220%" y="207.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.6720%" y="181" width="0.0804%" height="15" fill="rgb(253,102,54)" fg:x="705" fg:w="1"/><text x="56.9220%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="56.6720%" y="229" width="0.1608%" height="15" fill="rgb(250,173,47)" fg:x="705" fg:w="2"/><text x="56.9220%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="56.6720%" y="213" width="0.1608%" height="15" fill="rgb(232,142,7)" fg:x="705" fg:w="2"/><text x="56.9220%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="56.7524%" y="197" width="0.0804%" height="15" fill="rgb(230,157,47)" fg:x="706" fg:w="1"/><text x="57.0024%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.8328%" y="197" width="0.0804%" height="15" fill="rgb(214,177,35)" fg:x="707" fg:w="1"/><text x="57.0828%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.8328%" y="181" width="0.0804%" height="15" fill="rgb(234,119,46)" fg:x="707" fg:w="1"/><text x="57.0828%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.9132%" y="197" width="0.0804%" height="15" fill="rgb(241,180,50)" fg:x="708" fg:w="1"/><text x="57.1632%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="56.8328%" y="229" width="0.2412%" height="15" fill="rgb(221,54,25)" fg:x="707" fg:w="3"/><text x="57.0828%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.8328%" y="213" width="0.2412%" height="15" fill="rgb(209,157,44)" fg:x="707" fg:w="3"/><text x="57.0828%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.9936%" y="197" width="0.0804%" height="15" fill="rgb(246,115,41)" fg:x="709" fg:w="1"/><text x="57.2436%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.9936%" y="181" width="0.0804%" height="15" fill="rgb(229,86,1)" fg:x="709" fg:w="1"/><text x="57.2436%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="57.0740%" y="229" width="0.0804%" height="15" fill="rgb(240,108,53)" fg:x="710" fg:w="1"/><text x="57.3240%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.0740%" y="213" width="0.0804%" height="15" fill="rgb(227,134,2)" fg:x="710" fg:w="1"/><text x="57.3240%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.1543%" y="213" width="0.0804%" height="15" fill="rgb(213,129,25)" fg:x="711" fg:w="1"/><text x="57.4043%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="57.3151%" y="197" width="0.9646%" height="15" fill="rgb(226,35,21)" fg:x="713" fg:w="12"/><text x="57.5651%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.13%)</title><rect x="57.2347%" y="213" width="1.1254%" height="15" fill="rgb(208,129,26)" fg:x="712" fg:w="14"/><text x="57.4847%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="58.2797%" y="197" width="0.0804%" height="15" fill="rgb(224,83,6)" fg:x="725" fg:w="1"/><text x="58.5297%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.2797%" y="181" width="0.0804%" height="15" fill="rgb(227,52,39)" fg:x="725" fg:w="1"/><text x="58.5297%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="58.3601%" y="197" width="0.0804%" height="15" fill="rgb(241,30,17)" fg:x="726" fg:w="1"/><text x="58.6101%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="58.3601%" y="213" width="0.1608%" height="15" fill="rgb(246,186,42)" fg:x="726" fg:w="2"/><text x="58.6101%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="58.4405%" y="197" width="0.0804%" height="15" fill="rgb(221,169,15)" fg:x="727" fg:w="1"/><text x="58.6905%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="58.4405%" y="181" width="0.0804%" height="15" fill="rgb(235,108,21)" fg:x="727" fg:w="1"/><text x="58.6905%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="58.8424%" y="181" width="0.0804%" height="15" fill="rgb(219,148,30)" fg:x="732" fg:w="1"/><text x="59.0924%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="58.9228%" y="181" width="0.1608%" height="15" fill="rgb(220,109,5)" fg:x="733" fg:w="2"/><text x="59.1728%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="59.0836%" y="165" width="0.0804%" height="15" fill="rgb(213,203,48)" fg:x="735" fg:w="1"/><text x="59.3336%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="59.0836%" y="149" width="0.0804%" height="15" fill="rgb(244,71,33)" fg:x="735" fg:w="1"/><text x="59.3336%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.72%)</title><rect x="58.5209%" y="213" width="0.7235%" height="15" fill="rgb(209,23,2)" fg:x="728" fg:w="9"/><text x="58.7709%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="58.5209%" y="197" width="0.7235%" height="15" fill="rgb(219,97,7)" fg:x="728" fg:w="9"/><text x="58.7709%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="59.0836%" y="181" width="0.1608%" height="15" fill="rgb(216,161,23)" fg:x="735" fg:w="2"/><text x="59.3336%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="59.1640%" y="165" width="0.0804%" height="15" fill="rgb(207,45,42)" fg:x="736" fg:w="1"/><text x="59.4140%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="59.2444%" y="117" width="0.0804%" height="15" fill="rgb(241,61,4)" fg:x="737" fg:w="1"/><text x="59.4944%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="59.4855%" y="101" width="0.0804%" height="15" fill="rgb(236,170,1)" fg:x="740" fg:w="1"/><text x="59.7355%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.5659%" y="101" width="0.0804%" height="15" fill="rgb(239,72,5)" fg:x="741" fg:w="1"/><text x="59.8159%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.5659%" y="85" width="0.0804%" height="15" fill="rgb(214,13,50)" fg:x="741" fg:w="1"/><text x="59.8159%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.5659%" y="69" width="0.0804%" height="15" fill="rgb(224,88,9)" fg:x="741" fg:w="1"/><text x="59.8159%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.5659%" y="53" width="0.0804%" height="15" fill="rgb(238,192,34)" fg:x="741" fg:w="1"/><text x="59.8159%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="59.6463%" y="101" width="0.0804%" height="15" fill="rgb(217,203,50)" fg:x="742" fg:w="1"/><text x="59.8963%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="59.7267%" y="101" width="0.0804%" height="15" fill="rgb(241,123,32)" fg:x="743" fg:w="1"/><text x="59.9767%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.7267%" y="85" width="0.0804%" height="15" fill="rgb(248,151,39)" fg:x="743" fg:w="1"/><text x="59.9767%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7267%" y="69" width="0.0804%" height="15" fill="rgb(208,89,6)" fg:x="743" fg:w="1"/><text x="59.9767%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.7267%" y="53" width="0.0804%" height="15" fill="rgb(254,43,26)" fg:x="743" fg:w="1"/><text x="59.9767%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.0482%" y="69" width="0.1608%" height="15" fill="rgb(216,158,13)" fg:x="747" fg:w="2"/><text x="60.2982%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.0482%" y="53" width="0.1608%" height="15" fill="rgb(212,47,37)" fg:x="747" fg:w="2"/><text x="60.2982%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.0482%" y="37" width="0.1608%" height="15" fill="rgb(254,16,10)" fg:x="747" fg:w="2"/><text x="60.2982%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="59.8071%" y="101" width="0.6431%" height="15" fill="rgb(223,228,16)" fg:x="744" fg:w="8"/><text x="60.0571%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="59.8071%" y="85" width="0.6431%" height="15" fill="rgb(249,108,50)" fg:x="744" fg:w="8"/><text x="60.0571%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="60.2090%" y="69" width="0.2412%" height="15" fill="rgb(208,220,5)" fg:x="749" fg:w="3"/><text x="60.4590%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3698%" y="53" width="0.0804%" height="15" fill="rgb(217,89,48)" fg:x="751" fg:w="1"/><text x="60.6198%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.4502%" y="69" width="0.1608%" height="15" fill="rgb(212,113,41)" fg:x="752" fg:w="2"/><text x="60.7002%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.33%)</title><rect x="60.4502%" y="101" width="2.3312%" height="15" fill="rgb(231,127,5)" fg:x="752" fg:w="29"/><text x="60.7002%" y="111.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.33%)</title><rect x="60.4502%" y="85" width="2.3312%" height="15" fill="rgb(217,141,17)" fg:x="752" fg:w="29"/><text x="60.7002%" y="95.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 2.17%)</title><rect x="60.6109%" y="69" width="2.1704%" height="15" fill="rgb(245,125,54)" fg:x="754" fg:w="27"/><text x="60.8609%" y="79.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="62.7814%" y="101" width="0.1608%" height="15" fill="rgb(248,125,3)" fg:x="781" fg:w="2"/><text x="63.0314%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 3.94%)</title><rect x="59.2444%" y="197" width="3.9389%" height="15" fill="rgb(236,119,51)" fg:x="737" fg:w="49"/><text x="59.4944%" y="207.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 3.94%)</title><rect x="59.2444%" y="181" width="3.9389%" height="15" fill="rgb(239,99,8)" fg:x="737" fg:w="49"/><text x="59.4944%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 3.94%)</title><rect x="59.2444%" y="165" width="3.9389%" height="15" fill="rgb(224,228,4)" fg:x="737" fg:w="49"/><text x="59.4944%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 3.94%)</title><rect x="59.2444%" y="149" width="3.9389%" height="15" fill="rgb(220,131,45)" fg:x="737" fg:w="49"/><text x="59.4944%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (49 samples, 3.94%)</title><rect x="59.2444%" y="133" width="3.9389%" height="15" fill="rgb(215,62,5)" fg:x="737" fg:w="49"/><text x="59.4944%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (48 samples, 3.86%)</title><rect x="59.3248%" y="117" width="3.8585%" height="15" fill="rgb(253,12,24)" fg:x="738" fg:w="48"/><text x="59.5748%" y="127.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="62.9421%" y="101" width="0.2412%" height="15" fill="rgb(248,120,50)" fg:x="783" fg:w="3"/><text x="63.1921%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.1029%" y="85" width="0.0804%" height="15" fill="rgb(245,194,10)" fg:x="785" fg:w="1"/><text x="63.3529%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.1029%" y="69" width="0.0804%" height="15" fill="rgb(241,149,38)" fg:x="785" fg:w="1"/><text x="63.3529%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.1029%" y="53" width="0.0804%" height="15" fill="rgb(219,215,7)" fg:x="785" fg:w="1"/><text x="63.3529%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="63.3441%" y="181" width="0.5627%" height="15" fill="rgb(208,120,31)" fg:x="788" fg:w="7"/><text x="63.5941%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.8264%" y="165" width="0.0804%" height="15" fill="rgb(244,30,8)" fg:x="794" fg:w="1"/><text x="64.0764%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.8264%" y="149" width="0.0804%" height="15" fill="rgb(238,35,44)" fg:x="794" fg:w="1"/><text x="64.0764%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.0675%" y="165" width="0.0804%" height="15" fill="rgb(243,218,37)" fg:x="797" fg:w="1"/><text x="64.3175%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.0675%" y="149" width="0.0804%" height="15" fill="rgb(218,169,10)" fg:x="797" fg:w="1"/><text x="64.3175%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0675%" y="133" width="0.0804%" height="15" fill="rgb(221,144,10)" fg:x="797" fg:w="1"/><text x="64.3175%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="63.9068%" y="181" width="0.3215%" height="15" fill="rgb(226,41,38)" fg:x="795" fg:w="4"/><text x="64.1568%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.1479%" y="165" width="0.0804%" height="15" fill="rgb(228,3,1)" fg:x="798" fg:w="1"/><text x="64.3979%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (89 samples, 7.15%)</title><rect x="57.1543%" y="229" width="7.1543%" height="15" fill="rgb(209,129,12)" fg:x="711" fg:w="89"/><text x="57.4043%" y="239.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (63 samples, 5.06%)</title><rect x="59.2444%" y="213" width="5.0643%" height="15" fill="rgb(213,136,33)" fg:x="737" fg:w="63"/><text x="59.4944%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.13%)</title><rect x="63.1833%" y="197" width="1.1254%" height="15" fill="rgb(209,181,29)" fg:x="786" fg:w="14"/><text x="63.4333%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="64.2283%" y="181" width="0.0804%" height="15" fill="rgb(234,173,18)" fg:x="799" fg:w="1"/><text x="64.4783%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="64.2283%" y="165" width="0.0804%" height="15" fill="rgb(227,73,47)" fg:x="799" fg:w="1"/><text x="64.4783%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2283%" y="149" width="0.0804%" height="15" fill="rgb(234,9,34)" fg:x="799" fg:w="1"/><text x="64.4783%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="64.3087%" y="197" width="0.0804%" height="15" fill="rgb(235,172,15)" fg:x="800" fg:w="1"/><text x="64.5587%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="64.3087%" y="181" width="0.0804%" height="15" fill="rgb(245,61,2)" fg:x="800" fg:w="1"/><text x="64.5587%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="64.3891%" y="197" width="0.3215%" height="15" fill="rgb(238,39,47)" fg:x="801" fg:w="4"/><text x="64.6391%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="64.4695%" y="181" width="0.2412%" height="15" fill="rgb(234,37,24)" fg:x="802" fg:w="3"/><text x="64.7195%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="64.4695%" y="165" width="0.2412%" height="15" fill="rgb(248,223,24)" fg:x="802" fg:w="3"/><text x="64.7195%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="64.4695%" y="149" width="0.2412%" height="15" fill="rgb(223,12,15)" fg:x="802" fg:w="3"/><text x="64.7195%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="64.4695%" y="133" width="0.2412%" height="15" fill="rgb(249,6,3)" fg:x="802" fg:w="3"/><text x="64.7195%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="64.7106%" y="197" width="0.0804%" height="15" fill="rgb(237,105,33)" fg:x="805" fg:w="1"/><text x="64.9606%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="64.7910%" y="197" width="0.0804%" height="15" fill="rgb(252,208,35)" fg:x="806" fg:w="1"/><text x="65.0410%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7910%" y="181" width="0.0804%" height="15" fill="rgb(215,181,35)" fg:x="806" fg:w="1"/><text x="65.0410%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="64.3087%" y="229" width="0.6431%" height="15" fill="rgb(246,212,3)" fg:x="800" fg:w="8"/><text x="64.5587%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="64.3087%" y="213" width="0.6431%" height="15" fill="rgb(247,156,24)" fg:x="800" fg:w="8"/><text x="64.5587%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="64.8714%" y="197" width="0.0804%" height="15" fill="rgb(248,9,31)" fg:x="807" fg:w="1"/><text x="65.1214%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="64.8714%" y="181" width="0.0804%" height="15" fill="rgb(234,26,45)" fg:x="807" fg:w="1"/><text x="65.1214%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.0322%" y="165" width="0.0804%" height="15" fill="rgb(249,11,32)" fg:x="809" fg:w="1"/><text x="65.2822%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0322%" y="149" width="0.0804%" height="15" fill="rgb(249,162,33)" fg:x="809" fg:w="1"/><text x="65.2822%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.0322%" y="133" width="0.0804%" height="15" fill="rgb(232,4,32)" fg:x="809" fg:w="1"/><text x="65.2822%" y="143.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="64.9518%" y="181" width="0.2412%" height="15" fill="rgb(212,5,45)" fg:x="808" fg:w="3"/><text x="65.2018%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="65.1125%" y="165" width="0.0804%" height="15" fill="rgb(227,95,13)" fg:x="810" fg:w="1"/><text x="65.3625%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="64.9518%" y="197" width="0.3215%" height="15" fill="rgb(223,205,10)" fg:x="808" fg:w="4"/><text x="65.2018%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="65.1929%" y="181" width="0.0804%" height="15" fill="rgb(222,178,8)" fg:x="811" fg:w="1"/><text x="65.4429%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="65.1929%" y="165" width="0.0804%" height="15" fill="rgb(216,13,22)" fg:x="811" fg:w="1"/><text x="65.4429%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (126 samples, 10.13%)</title><rect x="55.2251%" y="293" width="10.1286%" height="15" fill="rgb(240,167,12)" fg:x="687" fg:w="126"/><text x="55.4751%" y="303.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::new (110 samples, 8.84%)</title><rect x="56.5113%" y="277" width="8.8424%" height="15" fill="rgb(235,68,35)" fg:x="703" fg:w="110"/><text x="56.7613%" y="287.50">regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (110 samples, 8.84%)</title><rect x="56.5113%" y="261" width="8.8424%" height="15" fill="rgb(253,40,27)" fg:x="703" fg:w="110"/><text x="56.7613%" y="271.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (108 samples, 8.68%)</title><rect x="56.6720%" y="245" width="8.6817%" height="15" fill="rgb(214,19,28)" fg:x="705" fg:w="108"/><text x="56.9220%" y="255.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="64.9518%" y="229" width="0.4019%" height="15" fill="rgb(210,167,45)" fg:x="808" fg:w="5"/><text x="65.2018%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="64.9518%" y="213" width="0.4019%" height="15" fill="rgb(232,97,40)" fg:x="808" fg:w="5"/><text x="65.2018%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="65.2733%" y="197" width="0.0804%" height="15" fill="rgb(250,35,23)" fg:x="812" fg:w="1"/><text x="65.5233%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="65.2733%" y="181" width="0.0804%" height="15" fill="rgb(248,47,53)" fg:x="812" fg:w="1"/><text x="65.5233%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3537%" y="277" width="0.0804%" height="15" fill="rgb(226,58,50)" fg:x="813" fg:w="1"/><text x="65.6037%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="65.4341%" y="261" width="0.0804%" height="15" fill="rgb(217,105,26)" fg:x="814" fg:w="1"/><text x="65.6841%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="65.4341%" y="245" width="0.0804%" height="15" fill="rgb(208,64,1)" fg:x="814" fg:w="1"/><text x="65.6841%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::search_finish (1 samples, 0.08%)</title><rect x="65.4341%" y="229" width="0.0804%" height="15" fill="rgb(214,80,1)" fg:x="814" fg:w="1"/><text x="65.6841%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="65.5145%" y="261" width="0.0804%" height="15" fill="rgb(206,175,26)" fg:x="815" fg:w="1"/><text x="65.7645%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="65.5145%" y="245" width="0.0804%" height="15" fill="rgb(235,156,37)" fg:x="815" fg:w="1"/><text x="65.7645%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="65.5145%" y="229" width="0.0804%" height="15" fill="rgb(213,100,9)" fg:x="815" fg:w="1"/><text x="65.7645%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="65.5145%" y="213" width="0.0804%" height="15" fill="rgb(241,15,13)" fg:x="815" fg:w="1"/><text x="65.7645%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="65.5949%" y="197" width="0.1608%" height="15" fill="rgb(205,97,43)" fg:x="816" fg:w="2"/><text x="65.8449%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="65.6752%" y="181" width="0.0804%" height="15" fill="rgb(216,106,32)" fg:x="817" fg:w="1"/><text x="65.9252%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="65.6752%" y="165" width="0.0804%" height="15" fill="rgb(226,200,8)" fg:x="817" fg:w="1"/><text x="65.9252%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="65.7556%" y="149" width="0.0804%" height="15" fill="rgb(244,54,29)" fg:x="818" fg:w="1"/><text x="66.0056%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.7556%" y="133" width="0.0804%" height="15" fill="rgb(252,169,12)" fg:x="818" fg:w="1"/><text x="66.0056%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7556%" y="117" width="0.0804%" height="15" fill="rgb(231,199,11)" fg:x="818" fg:w="1"/><text x="66.0056%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7556%" y="101" width="0.0804%" height="15" fill="rgb(233,191,18)" fg:x="818" fg:w="1"/><text x="66.0056%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="65.7556%" y="181" width="0.3215%" height="15" fill="rgb(215,83,47)" fg:x="818" fg:w="4"/><text x="66.0056%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="65.7556%" y="165" width="0.3215%" height="15" fill="rgb(251,67,19)" fg:x="818" fg:w="4"/><text x="66.0056%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="65.8360%" y="149" width="0.2412%" height="15" fill="rgb(240,7,20)" fg:x="819" fg:w="3"/><text x="66.0860%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="65.9164%" y="133" width="0.1608%" height="15" fill="rgb(210,150,26)" fg:x="820" fg:w="2"/><text x="66.1664%" y="143.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="65.9968%" y="117" width="0.0804%" height="15" fill="rgb(228,75,42)" fg:x="821" fg:w="1"/><text x="66.2468%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="66.1576%" y="165" width="0.2412%" height="15" fill="rgb(237,134,48)" fg:x="823" fg:w="3"/><text x="66.4076%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="65.5949%" y="213" width="0.8842%" height="15" fill="rgb(205,80,50)" fg:x="816" fg:w="11"/><text x="65.8449%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="65.7556%" y="197" width="0.7235%" height="15" fill="rgb(217,74,48)" fg:x="818" fg:w="9"/><text x="66.0056%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="66.0772%" y="181" width="0.4019%" height="15" fill="rgb(205,82,50)" fg:x="822" fg:w="5"/><text x="66.3272%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="66.3987%" y="165" width="0.0804%" height="15" fill="rgb(228,1,33)" fg:x="826" fg:w="1"/><text x="66.6487%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="66.5595%" y="165" width="0.1608%" height="15" fill="rgb(214,50,23)" fg:x="828" fg:w="2"/><text x="66.8095%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.6399%" y="149" width="0.0804%" height="15" fill="rgb(210,62,9)" fg:x="829" fg:w="1"/><text x="66.8899%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.6399%" y="133" width="0.0804%" height="15" fill="rgb(210,104,37)" fg:x="829" fg:w="1"/><text x="66.8899%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.6399%" y="117" width="0.0804%" height="15" fill="rgb(232,104,43)" fg:x="829" fg:w="1"/><text x="66.8899%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="66.4791%" y="181" width="0.4019%" height="15" fill="rgb(244,52,6)" fg:x="827" fg:w="5"/><text x="66.7291%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="66.7203%" y="165" width="0.1608%" height="15" fill="rgb(211,174,52)" fg:x="830" fg:w="2"/><text x="66.9703%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="66.7203%" y="149" width="0.1608%" height="15" fill="rgb(229,48,4)" fg:x="830" fg:w="2"/><text x="66.9703%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.7203%" y="133" width="0.1608%" height="15" fill="rgb(205,155,16)" fg:x="830" fg:w="2"/><text x="66.9703%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.7203%" y="117" width="0.1608%" height="15" fill="rgb(211,141,53)" fg:x="830" fg:w="2"/><text x="66.9703%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="66.4791%" y="213" width="0.4823%" height="15" fill="rgb(240,148,11)" fg:x="827" fg:w="6"/><text x="66.7291%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="66.4791%" y="197" width="0.4823%" height="15" fill="rgb(214,45,23)" fg:x="827" fg:w="6"/><text x="66.7291%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="66.8810%" y="181" width="0.0804%" height="15" fill="rgb(248,74,26)" fg:x="832" fg:w="1"/><text x="67.1310%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="66.9614%" y="181" width="0.0804%" height="15" fill="rgb(218,121,16)" fg:x="833" fg:w="1"/><text x="67.2114%" y="191.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="66.9614%" y="165" width="0.0804%" height="15" fill="rgb(218,10,47)" fg:x="833" fg:w="1"/><text x="67.2114%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="67.1222%" y="165" width="0.0804%" height="15" fill="rgb(227,99,14)" fg:x="835" fg:w="1"/><text x="67.3722%" y="175.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="67.1222%" y="149" width="0.0804%" height="15" fill="rgb(229,83,46)" fg:x="835" fg:w="1"/><text x="67.3722%" y="159.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (22 samples, 1.77%)</title><rect x="65.5949%" y="229" width="1.7685%" height="15" fill="rgb(228,25,1)" fg:x="816" fg:w="22"/><text x="65.8449%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="66.9614%" y="213" width="0.4019%" height="15" fill="rgb(252,190,15)" fg:x="833" fg:w="5"/><text x="67.2114%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="66.9614%" y="197" width="0.4019%" height="15" fill="rgb(213,103,51)" fg:x="833" fg:w="5"/><text x="67.2114%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="67.0418%" y="181" width="0.3215%" height="15" fill="rgb(220,38,44)" fg:x="834" fg:w="4"/><text x="67.2918%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="67.2026%" y="165" width="0.1608%" height="15" fill="rgb(210,45,26)" fg:x="836" fg:w="2"/><text x="67.4526%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.2830%" y="149" width="0.0804%" height="15" fill="rgb(205,95,48)" fg:x="837" fg:w="1"/><text x="67.5330%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2830%" y="133" width="0.0804%" height="15" fill="rgb(225,179,37)" fg:x="837" fg:w="1"/><text x="67.5330%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2830%" y="117" width="0.0804%" height="15" fill="rgb(230,209,3)" fg:x="837" fg:w="1"/><text x="67.5330%" y="127.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (23 samples, 1.85%)</title><rect x="65.5949%" y="245" width="1.8489%" height="15" fill="rgb(248,12,46)" fg:x="816" fg:w="23"/><text x="65.8449%" y="255.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="67.3633%" y="229" width="0.0804%" height="15" fill="rgb(234,18,0)" fg:x="838" fg:w="1"/><text x="67.6133%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (24 samples, 1.93%)</title><rect x="65.5949%" y="261" width="1.9293%" height="15" fill="rgb(238,197,14)" fg:x="816" fg:w="24"/><text x="65.8449%" y="271.50">r..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="67.4437%" y="245" width="0.0804%" height="15" fill="rgb(251,162,48)" fg:x="839" fg:w="1"/><text x="67.6937%" y="255.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="67.4437%" y="229" width="0.0804%" height="15" fill="rgb(237,73,42)" fg:x="839" fg:w="1"/><text x="67.6937%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Config::hybrid_cache_capacity (1 samples, 0.08%)</title><rect x="67.4437%" y="213" width="0.0804%" height="15" fill="rgb(211,108,8)" fg:x="839" fg:w="1"/><text x="67.6937%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (30 samples, 2.41%)</title><rect x="65.4341%" y="277" width="2.4116%" height="15" fill="rgb(213,45,22)" fg:x="814" fg:w="30"/><text x="65.6841%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="67.5241%" y="261" width="0.3215%" height="15" fill="rgb(252,154,5)" fg:x="840" fg:w="4"/><text x="67.7741%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="67.5241%" y="245" width="0.3215%" height="15" fill="rgb(221,79,52)" fg:x="840" fg:w="4"/><text x="67.7741%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="67.5241%" y="229" width="0.3215%" height="15" fill="rgb(229,220,36)" fg:x="840" fg:w="4"/><text x="67.7741%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="67.5241%" y="213" width="0.3215%" height="15" fill="rgb(211,17,16)" fg:x="840" fg:w="4"/><text x="67.7741%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="67.5241%" y="197" width="0.3215%" height="15" fill="rgb(222,55,31)" fg:x="840" fg:w="4"/><text x="67.7741%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.7653%" y="181" width="0.0804%" height="15" fill="rgb(221,221,31)" fg:x="843" fg:w="1"/><text x="68.0153%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7653%" y="165" width="0.0804%" height="15" fill="rgb(227,168,26)" fg:x="843" fg:w="1"/><text x="68.0153%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.7653%" y="149" width="0.0804%" height="15" fill="rgb(224,139,9)" fg:x="843" fg:w="1"/><text x="68.0153%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (285 samples, 22.91%)</title><rect x="45.1768%" y="373" width="22.9100%" height="15" fill="rgb(254,172,0)" fg:x="562" fg:w="285"/><text x="45.4268%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugin..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (251 samples, 20.18%)</title><rect x="47.9100%" y="357" width="20.1768%" height="15" fill="rgb(235,203,1)" fg:x="596" fg:w="251"/><text x="48.1600%" y="367.50">plugins_core::looking::model::Un..</text></g><g><title>indefinite::indefinite (251 samples, 20.18%)</title><rect x="47.9100%" y="341" width="20.1768%" height="15" fill="rgb(216,205,24)" fg:x="596" fg:w="251"/><text x="48.1600%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (251 samples, 20.18%)</title><rect x="47.9100%" y="325" width="20.1768%" height="15" fill="rgb(233,24,6)" fg:x="596" fg:w="251"/><text x="48.1600%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (251 samples, 20.18%)</title><rect x="47.9100%" y="309" width="20.1768%" height="15" fill="rgb(244,110,9)" fg:x="596" fg:w="251"/><text x="48.1600%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (34 samples, 2.73%)</title><rect x="65.3537%" y="293" width="2.7331%" height="15" fill="rgb(239,222,42)" fg:x="813" fg:w="34"/><text x="65.6037%" y="303.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="67.8457%" y="277" width="0.2412%" height="15" fill="rgb(218,145,13)" fg:x="844" fg:w="3"/><text x="68.0957%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1672%" y="309" width="0.0804%" height="15" fill="rgb(207,69,11)" fg:x="848" fg:w="1"/><text x="68.4172%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1672%" y="293" width="0.0804%" height="15" fill="rgb(220,223,22)" fg:x="848" fg:w="1"/><text x="68.4172%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1672%" y="277" width="0.0804%" height="15" fill="rgb(245,102,5)" fg:x="848" fg:w="1"/><text x="68.4172%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1672%" y="261" width="0.0804%" height="15" fill="rgb(211,148,2)" fg:x="848" fg:w="1"/><text x="68.4172%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1672%" y="245" width="0.0804%" height="15" fill="rgb(241,13,44)" fg:x="848" fg:w="1"/><text x="68.4172%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1672%" y="229" width="0.0804%" height="15" fill="rgb(219,137,21)" fg:x="848" fg:w="1"/><text x="68.4172%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1672%" y="213" width="0.0804%" height="15" fill="rgb(242,206,5)" fg:x="848" fg:w="1"/><text x="68.4172%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1672%" y="197" width="0.0804%" height="15" fill="rgb(217,114,22)" fg:x="848" fg:w="1"/><text x="68.4172%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1672%" y="181" width="0.0804%" height="15" fill="rgb(253,206,42)" fg:x="848" fg:w="1"/><text x="68.4172%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1672%" y="165" width="0.0804%" height="15" fill="rgb(236,102,18)" fg:x="848" fg:w="1"/><text x="68.4172%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1672%" y="149" width="0.0804%" height="15" fill="rgb(208,59,49)" fg:x="848" fg:w="1"/><text x="68.4172%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1672%" y="133" width="0.0804%" height="15" fill="rgb(215,194,28)" fg:x="848" fg:w="1"/><text x="68.4172%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1672%" y="117" width="0.0804%" height="15" fill="rgb(243,207,11)" fg:x="848" fg:w="1"/><text x="68.4172%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.1672%" y="357" width="0.2412%" height="15" fill="rgb(254,179,35)" fg:x="848" fg:w="3"/><text x="68.4172%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="68.1672%" y="341" width="0.2412%" height="15" fill="rgb(235,97,3)" fg:x="848" fg:w="3"/><text x="68.4172%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.1672%" y="325" width="0.2412%" height="15" fill="rgb(215,155,33)" fg:x="848" fg:w="3"/><text x="68.4172%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.2476%" y="309" width="0.1608%" height="15" fill="rgb(223,128,12)" fg:x="849" fg:w="2"/><text x="68.4976%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.2476%" y="293" width="0.1608%" height="15" fill="rgb(208,157,18)" fg:x="849" fg:w="2"/><text x="68.4976%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="68.2476%" y="277" width="0.1608%" height="15" fill="rgb(249,70,54)" fg:x="849" fg:w="2"/><text x="68.4976%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="68.2476%" y="261" width="0.1608%" height="15" fill="rgb(244,118,24)" fg:x="849" fg:w="2"/><text x="68.4976%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="68.2476%" y="245" width="0.1608%" height="15" fill="rgb(211,54,0)" fg:x="849" fg:w="2"/><text x="68.4976%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="68.2476%" y="229" width="0.1608%" height="15" fill="rgb(245,137,45)" fg:x="849" fg:w="2"/><text x="68.4976%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="68.2476%" y="213" width="0.1608%" height="15" fill="rgb(232,154,31)" fg:x="849" fg:w="2"/><text x="68.4976%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="68.2476%" y="197" width="0.1608%" height="15" fill="rgb(253,6,39)" fg:x="849" fg:w="2"/><text x="68.4976%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="68.2476%" y="181" width="0.1608%" height="15" fill="rgb(234,183,24)" fg:x="849" fg:w="2"/><text x="68.4976%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="68.2476%" y="165" width="0.1608%" height="15" fill="rgb(252,84,40)" fg:x="849" fg:w="2"/><text x="68.4976%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="68.2476%" y="149" width="0.1608%" height="15" fill="rgb(224,65,2)" fg:x="849" fg:w="2"/><text x="68.4976%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3280%" y="133" width="0.0804%" height="15" fill="rgb(229,38,24)" fg:x="850" fg:w="1"/><text x="68.5780%" y="143.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="68.0868%" y="373" width="0.4019%" height="15" fill="rgb(218,131,50)" fg:x="847" fg:w="5"/><text x="68.3368%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="68.4084%" y="357" width="0.0804%" height="15" fill="rgb(233,106,18)" fg:x="851" fg:w="1"/><text x="68.6584%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.4887%" y="341" width="0.1608%" height="15" fill="rgb(220,216,11)" fg:x="852" fg:w="2"/><text x="68.7387%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="68.4887%" y="325" width="0.1608%" height="15" fill="rgb(251,100,45)" fg:x="852" fg:w="2"/><text x="68.7387%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.4887%" y="309" width="0.1608%" height="15" fill="rgb(235,143,32)" fg:x="852" fg:w="2"/><text x="68.7387%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.4887%" y="293" width="0.1608%" height="15" fill="rgb(248,124,34)" fg:x="852" fg:w="2"/><text x="68.7387%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.4887%" y="277" width="0.1608%" height="15" fill="rgb(225,221,4)" fg:x="852" fg:w="2"/><text x="68.7387%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.4887%" y="261" width="0.1608%" height="15" fill="rgb(242,27,43)" fg:x="852" fg:w="2"/><text x="68.7387%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.4887%" y="245" width="0.1608%" height="15" fill="rgb(227,54,8)" fg:x="852" fg:w="2"/><text x="68.7387%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.4887%" y="229" width="0.1608%" height="15" fill="rgb(253,139,49)" fg:x="852" fg:w="2"/><text x="68.7387%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.5691%" y="213" width="0.0804%" height="15" fill="rgb(231,26,43)" fg:x="853" fg:w="1"/><text x="68.8191%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.6495%" y="341" width="0.0804%" height="15" fill="rgb(207,121,39)" fg:x="854" fg:w="1"/><text x="68.8995%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="68.7299%" y="325" width="0.0804%" height="15" fill="rgb(223,101,35)" fg:x="855" fg:w="1"/><text x="68.9799%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7299%" y="309" width="0.0804%" height="15" fill="rgb(232,87,23)" fg:x="855" fg:w="1"/><text x="68.9799%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7299%" y="293" width="0.0804%" height="15" fill="rgb(225,180,29)" fg:x="855" fg:w="1"/><text x="68.9799%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7299%" y="277" width="0.0804%" height="15" fill="rgb(225,25,17)" fg:x="855" fg:w="1"/><text x="68.9799%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7299%" y="261" width="0.0804%" height="15" fill="rgb(223,8,52)" fg:x="855" fg:w="1"/><text x="68.9799%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.7299%" y="245" width="0.0804%" height="15" fill="rgb(246,42,21)" fg:x="855" fg:w="1"/><text x="68.9799%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.7299%" y="229" width="0.0804%" height="15" fill="rgb(205,64,43)" fg:x="855" fg:w="1"/><text x="68.9799%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.7299%" y="213" width="0.0804%" height="15" fill="rgb(221,160,13)" fg:x="855" fg:w="1"/><text x="68.9799%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.7299%" y="197" width="0.0804%" height="15" fill="rgb(239,58,35)" fg:x="855" fg:w="1"/><text x="68.9799%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.7299%" y="181" width="0.0804%" height="15" fill="rgb(251,26,40)" fg:x="855" fg:w="1"/><text x="68.9799%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.7299%" y="165" width="0.0804%" height="15" fill="rgb(247,0,4)" fg:x="855" fg:w="1"/><text x="68.9799%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.7299%" y="149" width="0.0804%" height="15" fill="rgb(218,130,10)" fg:x="855" fg:w="1"/><text x="68.9799%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.7299%" y="133" width="0.0804%" height="15" fill="rgb(239,32,7)" fg:x="855" fg:w="1"/><text x="68.9799%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.7299%" y="117" width="0.0804%" height="15" fill="rgb(210,192,24)" fg:x="855" fg:w="1"/><text x="68.9799%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7299%" y="101" width="0.0804%" height="15" fill="rgb(226,212,17)" fg:x="855" fg:w="1"/><text x="68.9799%" y="111.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (5 samples, 0.40%)</title><rect x="68.4887%" y="357" width="0.4019%" height="15" fill="rgb(219,201,28)" fg:x="852" fg:w="5"/><text x="68.7387%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="68.7299%" y="341" width="0.1608%" height="15" fill="rgb(235,207,41)" fg:x="855" fg:w="2"/><text x="68.9799%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.8103%" y="325" width="0.0804%" height="15" fill="rgb(241,95,54)" fg:x="856" fg:w="1"/><text x="69.0603%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8103%" y="309" width="0.0804%" height="15" fill="rgb(248,12,23)" fg:x="856" fg:w="1"/><text x="69.0603%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8907%" y="277" width="0.0804%" height="15" fill="rgb(228,173,4)" fg:x="857" fg:w="1"/><text x="69.1407%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8907%" y="261" width="0.0804%" height="15" fill="rgb(254,99,5)" fg:x="857" fg:w="1"/><text x="69.1407%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9711%" y="197" width="0.0804%" height="15" fill="rgb(212,184,17)" fg:x="858" fg:w="1"/><text x="69.2211%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9711%" y="181" width="0.0804%" height="15" fill="rgb(252,174,1)" fg:x="858" fg:w="1"/><text x="69.2211%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.9711%" y="165" width="0.0804%" height="15" fill="rgb(241,118,51)" fg:x="858" fg:w="1"/><text x="69.2211%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.9711%" y="149" width="0.0804%" height="15" fill="rgb(227,94,47)" fg:x="858" fg:w="1"/><text x="69.2211%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.9711%" y="133" width="0.0804%" height="15" fill="rgb(229,104,2)" fg:x="858" fg:w="1"/><text x="69.2211%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.9711%" y="117" width="0.0804%" height="15" fill="rgb(219,28,31)" fg:x="858" fg:w="1"/><text x="69.2211%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9711%" y="101" width="0.0804%" height="15" fill="rgb(233,109,36)" fg:x="858" fg:w="1"/><text x="69.2211%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="68.8907%" y="293" width="0.2412%" height="15" fill="rgb(246,88,11)" fg:x="857" fg:w="3"/><text x="69.1407%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.9711%" y="277" width="0.1608%" height="15" fill="rgb(209,212,17)" fg:x="858" fg:w="2"/><text x="69.2211%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.9711%" y="261" width="0.1608%" height="15" fill="rgb(243,59,29)" fg:x="858" fg:w="2"/><text x="69.2211%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="68.9711%" y="245" width="0.1608%" height="15" fill="rgb(244,205,48)" fg:x="858" fg:w="2"/><text x="69.2211%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="68.9711%" y="229" width="0.1608%" height="15" fill="rgb(227,30,6)" fg:x="858" fg:w="2"/><text x="69.2211%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="68.9711%" y="213" width="0.1608%" height="15" fill="rgb(220,205,48)" fg:x="858" fg:w="2"/><text x="69.2211%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.0514%" y="197" width="0.0804%" height="15" fill="rgb(250,94,14)" fg:x="859" fg:w="1"/><text x="69.3014%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.0514%" y="181" width="0.0804%" height="15" fill="rgb(216,119,42)" fg:x="859" fg:w="1"/><text x="69.3014%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1318%" y="277" width="0.0804%" height="15" fill="rgb(232,155,0)" fg:x="860" fg:w="1"/><text x="69.3818%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.1318%" y="293" width="0.1608%" height="15" fill="rgb(212,24,32)" fg:x="860" fg:w="2"/><text x="69.3818%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2122%" y="277" width="0.0804%" height="15" fill="rgb(216,69,20)" fg:x="861" fg:w="1"/><text x="69.4622%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2122%" y="261" width="0.0804%" height="15" fill="rgb(229,73,31)" fg:x="861" fg:w="1"/><text x="69.4622%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.2122%" y="245" width="0.0804%" height="15" fill="rgb(224,219,20)" fg:x="861" fg:w="1"/><text x="69.4622%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2122%" y="229" width="0.0804%" height="15" fill="rgb(215,146,41)" fg:x="861" fg:w="1"/><text x="69.4622%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2122%" y="213" width="0.0804%" height="15" fill="rgb(244,71,31)" fg:x="861" fg:w="1"/><text x="69.4622%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2122%" y="197" width="0.0804%" height="15" fill="rgb(224,24,11)" fg:x="861" fg:w="1"/><text x="69.4622%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2122%" y="181" width="0.0804%" height="15" fill="rgb(229,76,15)" fg:x="861" fg:w="1"/><text x="69.4622%" y="191.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.2926%" y="245" width="0.0804%" height="15" fill="rgb(209,93,2)" fg:x="862" fg:w="1"/><text x="69.5426%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2926%" y="229" width="0.0804%" height="15" fill="rgb(216,200,50)" fg:x="862" fg:w="1"/><text x="69.5426%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2926%" y="213" width="0.0804%" height="15" fill="rgb(211,67,34)" fg:x="862" fg:w="1"/><text x="69.5426%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3730%" y="197" width="0.0804%" height="15" fill="rgb(225,87,47)" fg:x="863" fg:w="1"/><text x="69.6230%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3730%" y="181" width="0.0804%" height="15" fill="rgb(217,185,16)" fg:x="863" fg:w="1"/><text x="69.6230%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="69.4534%" y="197" width="0.2412%" height="15" fill="rgb(205,0,0)" fg:x="864" fg:w="3"/><text x="69.7034%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.4534%" y="181" width="0.2412%" height="15" fill="rgb(207,116,45)" fg:x="864" fg:w="3"/><text x="69.7034%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="69.4534%" y="165" width="0.2412%" height="15" fill="rgb(221,156,26)" fg:x="864" fg:w="3"/><text x="69.7034%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="69.5338%" y="149" width="0.1608%" height="15" fill="rgb(213,140,4)" fg:x="865" fg:w="2"/><text x="69.7838%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.6141%" y="133" width="0.0804%" height="15" fill="rgb(231,224,15)" fg:x="866" fg:w="1"/><text x="69.8641%" y="143.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="69.2926%" y="293" width="0.5627%" height="15" fill="rgb(244,76,20)" fg:x="862" fg:w="7"/><text x="69.5426%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="69.2926%" y="277" width="0.5627%" height="15" fill="rgb(238,117,7)" fg:x="862" fg:w="7"/><text x="69.5426%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="69.2926%" y="261" width="0.5627%" height="15" fill="rgb(235,1,10)" fg:x="862" fg:w="7"/><text x="69.5426%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="69.3730%" y="245" width="0.4823%" height="15" fill="rgb(216,165,6)" fg:x="863" fg:w="6"/><text x="69.6230%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="69.3730%" y="229" width="0.4823%" height="15" fill="rgb(246,91,35)" fg:x="863" fg:w="6"/><text x="69.6230%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="69.3730%" y="213" width="0.4823%" height="15" fill="rgb(228,96,24)" fg:x="863" fg:w="6"/><text x="69.6230%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6945%" y="197" width="0.1608%" height="15" fill="rgb(254,217,53)" fg:x="867" fg:w="2"/><text x="69.9445%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.6945%" y="181" width="0.1608%" height="15" fill="rgb(209,60,0)" fg:x="867" fg:w="2"/><text x="69.9445%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.7749%" y="165" width="0.0804%" height="15" fill="rgb(250,93,26)" fg:x="868" fg:w="1"/><text x="70.0249%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7749%" y="149" width="0.0804%" height="15" fill="rgb(211,9,40)" fg:x="868" fg:w="1"/><text x="70.0249%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7749%" y="133" width="0.0804%" height="15" fill="rgb(242,57,20)" fg:x="868" fg:w="1"/><text x="70.0249%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.7749%" y="117" width="0.0804%" height="15" fill="rgb(248,85,48)" fg:x="868" fg:w="1"/><text x="70.0249%" y="127.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (321 samples, 25.80%)</title><rect x="44.2122%" y="533" width="25.8039%" height="15" fill="rgb(212,117,2)" fg:x="550" fg:w="321"/><text x="44.4622%" y="543.50">kernel::plugins::mw::MiddlewareNext::hand..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (321 samples, 25.80%)</title><rect x="44.2122%" y="517" width="25.8039%" height="15" fill="rgb(243,19,3)" fg:x="550" fg:w="321"/><text x="44.4622%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as ker..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (321 samples, 25.80%)</title><rect x="44.2122%" y="501" width="25.8039%" height="15" fill="rgb(232,217,24)" fg:x="550" fg:w="321"/><text x="44.4622%" y="511.50">kernel::plugins::mw::MiddlewareNext::hand..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (321 samples, 25.80%)</title><rect x="44.2122%" y="485" width="25.8039%" height="15" fill="rgb(224,175,40)" fg:x="550" fg:w="321"/><text x="44.4622%" y="495.50">core::ops::function::FnOnce::call_once{{v..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (321 samples, 25.80%)</title><rect x="44.2122%" y="469" width="25.8039%" height="15" fill="rgb(212,162,32)" fg:x="550" fg:w="321"/><text x="44.4622%" y="479.50">kernel::plugins::mw::MiddlewareNext::hand..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (321 samples, 25.80%)</title><rect x="44.2122%" y="453" width="25.8039%" height="15" fill="rgb(215,9,4)" fg:x="550" fg:w="321"/><text x="44.4622%" y="463.50">core::ops::function::FnOnce::call_once{{v..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (321 samples, 25.80%)</title><rect x="44.2122%" y="437" width="25.8039%" height="15" fill="rgb(242,42,7)" fg:x="550" fg:w="321"/><text x="44.4622%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fun..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (321 samples, 25.80%)</title><rect x="44.2122%" y="421" width="25.8039%" height="15" fill="rgb(242,184,45)" fg:x="550" fg:w="321"/><text x="44.4622%" y="431.50">&lt;engine::session::state::State as kernel:..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (321 samples, 25.80%)</title><rect x="44.2122%" y="405" width="25.8039%" height="15" fill="rgb(228,111,51)" fg:x="550" fg:w="321"/><text x="44.4622%" y="415.50">&lt;plugins_core::looking::actions::LookActi..</text></g><g><title>plugins_core::looking::model::new_area_observation (309 samples, 24.84%)</title><rect x="45.1768%" y="389" width="24.8392%" height="15" fill="rgb(236,147,17)" fg:x="562" fg:w="309"/><text x="45.4268%" y="399.50">plugins_core::looking::model::new_area_o..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 1.53%)</title><rect x="68.4887%" y="373" width="1.5273%" height="15" fill="rgb(210,75,22)" fg:x="852" fg:w="19"/><text x="68.7387%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.13%)</title><rect x="68.8907%" y="357" width="1.1254%" height="15" fill="rgb(217,159,45)" fg:x="857" fg:w="14"/><text x="69.1407%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.13%)</title><rect x="68.8907%" y="341" width="1.1254%" height="15" fill="rgb(245,165,53)" fg:x="857" fg:w="14"/><text x="69.1407%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.13%)</title><rect x="68.8907%" y="325" width="1.1254%" height="15" fill="rgb(251,190,50)" fg:x="857" fg:w="14"/><text x="69.1407%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.13%)</title><rect x="68.8907%" y="309" width="1.1254%" height="15" fill="rgb(208,203,29)" fg:x="857" fg:w="14"/><text x="69.1407%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="69.8553%" y="293" width="0.1608%" height="15" fill="rgb(207,209,35)" fg:x="869" fg:w="2"/><text x="70.1053%" y="303.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="69.8553%" y="277" width="0.1608%" height="15" fill="rgb(230,144,49)" fg:x="869" fg:w="2"/><text x="70.1053%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.8553%" y="261" width="0.1608%" height="15" fill="rgb(229,31,6)" fg:x="869" fg:w="2"/><text x="70.1053%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8553%" y="245" width="0.1608%" height="15" fill="rgb(251,129,24)" fg:x="869" fg:w="2"/><text x="70.1053%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.8553%" y="229" width="0.1608%" height="15" fill="rgb(235,105,15)" fg:x="869" fg:w="2"/><text x="70.1053%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8553%" y="213" width="0.1608%" height="15" fill="rgb(216,52,43)" fg:x="869" fg:w="2"/><text x="70.1053%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.8553%" y="197" width="0.1608%" height="15" fill="rgb(238,144,41)" fg:x="869" fg:w="2"/><text x="70.1053%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9357%" y="181" width="0.0804%" height="15" fill="rgb(243,63,9)" fg:x="870" fg:w="1"/><text x="70.1857%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9357%" y="165" width="0.0804%" height="15" fill="rgb(246,208,1)" fg:x="870" fg:w="1"/><text x="70.1857%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1768%" y="341" width="0.0804%" height="15" fill="rgb(233,182,18)" fg:x="873" fg:w="1"/><text x="70.4268%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1768%" y="325" width="0.0804%" height="15" fill="rgb(242,224,8)" fg:x="873" fg:w="1"/><text x="70.4268%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1768%" y="309" width="0.0804%" height="15" fill="rgb(243,54,37)" fg:x="873" fg:w="1"/><text x="70.4268%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1768%" y="293" width="0.0804%" height="15" fill="rgb(233,192,12)" fg:x="873" fg:w="1"/><text x="70.4268%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1768%" y="277" width="0.0804%" height="15" fill="rgb(251,192,53)" fg:x="873" fg:w="1"/><text x="70.4268%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1768%" y="261" width="0.0804%" height="15" fill="rgb(246,141,26)" fg:x="873" fg:w="1"/><text x="70.4268%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1768%" y="245" width="0.0804%" height="15" fill="rgb(239,195,19)" fg:x="873" fg:w="1"/><text x="70.4268%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1768%" y="229" width="0.0804%" height="15" fill="rgb(241,16,39)" fg:x="873" fg:w="1"/><text x="70.4268%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1768%" y="213" width="0.0804%" height="15" fill="rgb(223,13,53)" fg:x="873" fg:w="1"/><text x="70.4268%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1768%" y="197" width="0.0804%" height="15" fill="rgb(214,227,0)" fg:x="873" fg:w="1"/><text x="70.4268%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1768%" y="181" width="0.0804%" height="15" fill="rgb(228,103,26)" fg:x="873" fg:w="1"/><text x="70.4268%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1768%" y="165" width="0.0804%" height="15" fill="rgb(254,177,53)" fg:x="873" fg:w="1"/><text x="70.4268%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.1768%" y="357" width="0.1608%" height="15" fill="rgb(208,201,34)" fg:x="873" fg:w="2"/><text x="70.4268%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2572%" y="341" width="0.0804%" height="15" fill="rgb(212,39,5)" fg:x="874" fg:w="1"/><text x="70.5072%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.1768%" y="421" width="0.2412%" height="15" fill="rgb(246,117,3)" fg:x="873" fg:w="3"/><text x="70.4268%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.1768%" y="405" width="0.2412%" height="15" fill="rgb(244,118,39)" fg:x="873" fg:w="3"/><text x="70.4268%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.1768%" y="389" width="0.2412%" height="15" fill="rgb(241,64,10)" fg:x="873" fg:w="3"/><text x="70.4268%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.1768%" y="373" width="0.2412%" height="15" fill="rgb(229,39,44)" fg:x="873" fg:w="3"/><text x="70.4268%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3376%" y="357" width="0.0804%" height="15" fill="rgb(230,226,3)" fg:x="875" fg:w="1"/><text x="70.5876%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3376%" y="341" width="0.0804%" height="15" fill="rgb(222,13,42)" fg:x="875" fg:w="1"/><text x="70.5876%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.3376%" y="325" width="0.0804%" height="15" fill="rgb(247,180,54)" fg:x="875" fg:w="1"/><text x="70.5876%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.3376%" y="309" width="0.0804%" height="15" fill="rgb(205,96,16)" fg:x="875" fg:w="1"/><text x="70.5876%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.3376%" y="293" width="0.0804%" height="15" fill="rgb(205,100,21)" fg:x="875" fg:w="1"/><text x="70.5876%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.3376%" y="277" width="0.0804%" height="15" fill="rgb(248,51,4)" fg:x="875" fg:w="1"/><text x="70.5876%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.3376%" y="261" width="0.0804%" height="15" fill="rgb(217,197,30)" fg:x="875" fg:w="1"/><text x="70.5876%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.4180%" y="421" width="0.0804%" height="15" fill="rgb(240,179,40)" fg:x="876" fg:w="1"/><text x="70.6680%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.4180%" y="405" width="0.0804%" height="15" fill="rgb(212,185,35)" fg:x="876" fg:w="1"/><text x="70.6680%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4984%" y="325" width="0.0804%" height="15" fill="rgb(251,222,31)" fg:x="877" fg:w="1"/><text x="70.7484%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4984%" y="309" width="0.0804%" height="15" fill="rgb(208,140,36)" fg:x="877" fg:w="1"/><text x="70.7484%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4984%" y="293" width="0.0804%" height="15" fill="rgb(220,148,1)" fg:x="877" fg:w="1"/><text x="70.7484%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4984%" y="277" width="0.0804%" height="15" fill="rgb(254,4,28)" fg:x="877" fg:w="1"/><text x="70.7484%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4984%" y="261" width="0.0804%" height="15" fill="rgb(222,185,44)" fg:x="877" fg:w="1"/><text x="70.7484%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4984%" y="245" width="0.0804%" height="15" fill="rgb(215,74,39)" fg:x="877" fg:w="1"/><text x="70.7484%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.4984%" y="229" width="0.0804%" height="15" fill="rgb(247,86,4)" fg:x="877" fg:w="1"/><text x="70.7484%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="70.4984%" y="213" width="0.0804%" height="15" fill="rgb(231,105,32)" fg:x="877" fg:w="1"/><text x="70.7484%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5788%" y="325" width="0.0804%" height="15" fill="rgb(222,65,35)" fg:x="878" fg:w="1"/><text x="70.8288%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="70.4984%" y="421" width="0.3215%" height="15" fill="rgb(218,145,35)" fg:x="877" fg:w="4"/><text x="70.7484%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="70.4984%" y="405" width="0.3215%" height="15" fill="rgb(208,7,15)" fg:x="877" fg:w="4"/><text x="70.7484%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.4984%" y="389" width="0.3215%" height="15" fill="rgb(209,83,13)" fg:x="877" fg:w="4"/><text x="70.7484%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="70.4984%" y="373" width="0.3215%" height="15" fill="rgb(218,3,10)" fg:x="877" fg:w="4"/><text x="70.7484%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.4984%" y="357" width="0.3215%" height="15" fill="rgb(211,219,4)" fg:x="877" fg:w="4"/><text x="70.7484%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="70.4984%" y="341" width="0.3215%" height="15" fill="rgb(228,194,12)" fg:x="877" fg:w="4"/><text x="70.7484%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.6592%" y="325" width="0.1608%" height="15" fill="rgb(210,175,7)" fg:x="879" fg:w="2"/><text x="70.9092%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.6592%" y="309" width="0.1608%" height="15" fill="rgb(243,132,6)" fg:x="879" fg:w="2"/><text x="70.9092%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="70.6592%" y="293" width="0.1608%" height="15" fill="rgb(207,72,18)" fg:x="879" fg:w="2"/><text x="70.9092%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7395%" y="277" width="0.0804%" height="15" fill="rgb(236,1,18)" fg:x="880" fg:w="1"/><text x="70.9895%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7395%" y="261" width="0.0804%" height="15" fill="rgb(227,0,18)" fg:x="880" fg:w="1"/><text x="70.9895%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.8199%" y="293" width="0.1608%" height="15" fill="rgb(247,37,5)" fg:x="881" fg:w="2"/><text x="71.0699%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.8199%" y="277" width="0.1608%" height="15" fill="rgb(237,179,24)" fg:x="881" fg:w="2"/><text x="71.0699%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.8199%" y="261" width="0.1608%" height="15" fill="rgb(226,53,20)" fg:x="881" fg:w="2"/><text x="71.0699%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.8199%" y="245" width="0.1608%" height="15" fill="rgb(247,75,7)" fg:x="881" fg:w="2"/><text x="71.0699%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="70.8199%" y="229" width="0.1608%" height="15" fill="rgb(233,96,12)" fg:x="881" fg:w="2"/><text x="71.0699%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="70.8199%" y="213" width="0.1608%" height="15" fill="rgb(224,125,0)" fg:x="881" fg:w="2"/><text x="71.0699%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (14 samples, 1.13%)</title><rect x="70.0965%" y="501" width="1.1254%" height="15" fill="rgb(224,92,25)" fg:x="872" fg:w="14"/><text x="70.3465%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.05%)</title><rect x="70.1768%" y="485" width="1.0450%" height="15" fill="rgb(224,42,24)" fg:x="873" fg:w="13"/><text x="70.4268%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.05%)</title><rect x="70.1768%" y="469" width="1.0450%" height="15" fill="rgb(234,132,49)" fg:x="873" fg:w="13"/><text x="70.4268%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.05%)</title><rect x="70.1768%" y="453" width="1.0450%" height="15" fill="rgb(248,100,35)" fg:x="873" fg:w="13"/><text x="70.4268%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.05%)</title><rect x="70.1768%" y="437" width="1.0450%" height="15" fill="rgb(239,94,40)" fg:x="873" fg:w="13"/><text x="70.4268%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="70.8199%" y="421" width="0.4019%" height="15" fill="rgb(235,139,28)" fg:x="881" fg:w="5"/><text x="71.0699%" y="431.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="70.8199%" y="405" width="0.4019%" height="15" fill="rgb(217,144,7)" fg:x="881" fg:w="5"/><text x="71.0699%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="70.8199%" y="389" width="0.4019%" height="15" fill="rgb(227,55,4)" fg:x="881" fg:w="5"/><text x="71.0699%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.8199%" y="373" width="0.4019%" height="15" fill="rgb(252,82,54)" fg:x="881" fg:w="5"/><text x="71.0699%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="70.8199%" y="357" width="0.4019%" height="15" fill="rgb(245,172,4)" fg:x="881" fg:w="5"/><text x="71.0699%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.8199%" y="341" width="0.4019%" height="15" fill="rgb(207,26,27)" fg:x="881" fg:w="5"/><text x="71.0699%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="70.8199%" y="325" width="0.4019%" height="15" fill="rgb(252,98,18)" fg:x="881" fg:w="5"/><text x="71.0699%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.8199%" y="309" width="0.4019%" height="15" fill="rgb(244,8,26)" fg:x="881" fg:w="5"/><text x="71.0699%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="70.9807%" y="293" width="0.2412%" height="15" fill="rgb(237,173,45)" fg:x="883" fg:w="3"/><text x="71.2307%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="71.0611%" y="277" width="0.1608%" height="15" fill="rgb(208,213,49)" fg:x="884" fg:w="2"/><text x="71.3111%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="71.2219%" y="373" width="0.0804%" height="15" fill="rgb(212,122,37)" fg:x="886" fg:w="1"/><text x="71.4719%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="71.2219%" y="437" width="0.1608%" height="15" fill="rgb(213,80,17)" fg:x="886" fg:w="2"/><text x="71.4719%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="71.2219%" y="421" width="0.1608%" height="15" fill="rgb(206,210,43)" fg:x="886" fg:w="2"/><text x="71.4719%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="71.2219%" y="405" width="0.1608%" height="15" fill="rgb(229,214,3)" fg:x="886" fg:w="2"/><text x="71.4719%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.2219%" y="389" width="0.1608%" height="15" fill="rgb(235,213,29)" fg:x="886" fg:w="2"/><text x="71.4719%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3023%" y="373" width="0.0804%" height="15" fill="rgb(248,135,26)" fg:x="887" fg:w="1"/><text x="71.5523%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3023%" y="357" width="0.0804%" height="15" fill="rgb(242,188,12)" fg:x="887" fg:w="1"/><text x="71.5523%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3023%" y="341" width="0.0804%" height="15" fill="rgb(245,38,12)" fg:x="887" fg:w="1"/><text x="71.5523%" y="351.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="71.2219%" y="501" width="0.2412%" height="15" fill="rgb(218,42,13)" fg:x="886" fg:w="3"/><text x="71.4719%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="71.2219%" y="485" width="0.2412%" height="15" fill="rgb(238,132,49)" fg:x="886" fg:w="3"/><text x="71.4719%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="71.2219%" y="469" width="0.2412%" height="15" fill="rgb(209,196,19)" fg:x="886" fg:w="3"/><text x="71.4719%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="71.2219%" y="453" width="0.2412%" height="15" fill="rgb(244,131,22)" fg:x="886" fg:w="3"/><text x="71.4719%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3826%" y="437" width="0.0804%" height="15" fill="rgb(223,18,34)" fg:x="888" fg:w="1"/><text x="71.6326%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3826%" y="421" width="0.0804%" height="15" fill="rgb(252,124,54)" fg:x="888" fg:w="1"/><text x="71.6326%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3826%" y="405" width="0.0804%" height="15" fill="rgb(229,106,42)" fg:x="888" fg:w="1"/><text x="71.6326%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.4630%" y="437" width="0.0804%" height="15" fill="rgb(221,129,1)" fg:x="889" fg:w="1"/><text x="71.7130%" y="447.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (20 samples, 1.61%)</title><rect x="70.0161%" y="517" width="1.6077%" height="15" fill="rgb(229,74,15)" fg:x="871" fg:w="20"/><text x="70.2661%" y="527.50"></text></g><g><title>plugins_core::tools::worn_by (2 samples, 0.16%)</title><rect x="71.4630%" y="501" width="0.1608%" height="15" fill="rgb(210,206,50)" fg:x="889" fg:w="2"/><text x="71.7130%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="71.4630%" y="485" width="0.1608%" height="15" fill="rgb(251,114,31)" fg:x="889" fg:w="2"/><text x="71.7130%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4630%" y="469" width="0.1608%" height="15" fill="rgb(215,225,28)" fg:x="889" fg:w="2"/><text x="71.7130%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4630%" y="453" width="0.1608%" height="15" fill="rgb(237,109,14)" fg:x="889" fg:w="2"/><text x="71.7130%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.5434%" y="437" width="0.0804%" height="15" fill="rgb(230,13,37)" fg:x="890" fg:w="1"/><text x="71.7934%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.5434%" y="421" width="0.0804%" height="15" fill="rgb(231,40,28)" fg:x="890" fg:w="1"/><text x="71.7934%" y="431.50"></text></g><g><title>engine::session::Session::captured (378 samples, 30.39%)</title><rect x="41.3183%" y="677" width="30.3859%" height="15" fill="rgb(231,202,18)" fg:x="514" fg:w="378"/><text x="41.5683%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (374 samples, 30.06%)</title><rect x="41.6399%" y="661" width="30.0643%" height="15" fill="rgb(225,33,18)" fg:x="518" fg:w="374"/><text x="41.8899%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (370 samples, 29.74%)</title><rect x="41.9614%" y="645" width="29.7428%" height="15" fill="rgb(223,64,47)" fg:x="522" fg:w="370"/><text x="42.2114%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (369 samples, 29.66%)</title><rect x="42.0418%" y="629" width="29.6624%" height="15" fill="rgb(234,114,13)" fg:x="523" fg:w="369"/><text x="42.2918%" y="639.50">&lt;engine::session::Session as kernel::actions::Pe..</text></g><g><title>kernel::plugins::mw::apply_middleware (368 samples, 29.58%)</title><rect x="42.1222%" y="613" width="29.5820%" height="15" fill="rgb(248,56,40)" fg:x="524" fg:w="368"/><text x="42.3722%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (366 samples, 29.42%)</title><rect x="42.2830%" y="597" width="29.4212%" height="15" fill="rgb(221,194,21)" fg:x="526" fg:w="366"/><text x="42.5330%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (365 samples, 29.34%)</title><rect x="42.3633%" y="581" width="29.3408%" height="15" fill="rgb(242,108,46)" fg:x="527" fg:w="365"/><text x="42.6133%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware ..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (345 samples, 27.73%)</title><rect x="43.9711%" y="565" width="27.7331%" height="15" fill="rgb(220,106,10)" fg:x="547" fg:w="345"/><text x="44.2211%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (344 samples, 27.65%)</title><rect x="44.0514%" y="549" width="27.6527%" height="15" fill="rgb(211,88,4)" fg:x="548" fg:w="344"/><text x="44.3014%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plu..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (21 samples, 1.69%)</title><rect x="70.0161%" y="533" width="1.6881%" height="15" fill="rgb(214,95,34)" fg:x="871" fg:w="21"/><text x="70.2661%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::new_from_surroundings (1 samples, 0.08%)</title><rect x="71.6238%" y="517" width="0.0804%" height="15" fill="rgb(250,160,33)" fg:x="891" fg:w="1"/><text x="71.8738%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6238%" y="501" width="0.0804%" height="15" fill="rgb(225,29,10)" fg:x="891" fg:w="1"/><text x="71.8738%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="71.7042%" y="661" width="0.0804%" height="15" fill="rgb(224,28,30)" fg:x="892" fg:w="1"/><text x="71.9542%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7846%" y="629" width="0.1608%" height="15" fill="rgb(231,77,4)" fg:x="893" fg:w="2"/><text x="72.0346%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7846%" y="613" width="0.1608%" height="15" fill="rgb(209,63,21)" fg:x="893" fg:w="2"/><text x="72.0346%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7846%" y="597" width="0.1608%" height="15" fill="rgb(226,22,11)" fg:x="893" fg:w="2"/><text x="72.0346%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8650%" y="581" width="0.0804%" height="15" fill="rgb(216,82,30)" fg:x="894" fg:w="1"/><text x="72.1150%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8650%" y="565" width="0.0804%" height="15" fill="rgb(246,227,38)" fg:x="894" fg:w="1"/><text x="72.1150%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8650%" y="549" width="0.0804%" height="15" fill="rgb(251,203,53)" fg:x="894" fg:w="1"/><text x="72.1150%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8650%" y="533" width="0.0804%" height="15" fill="rgb(254,101,1)" fg:x="894" fg:w="1"/><text x="72.1150%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8650%" y="517" width="0.0804%" height="15" fill="rgb(241,180,5)" fg:x="894" fg:w="1"/><text x="72.1150%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.8650%" y="501" width="0.0804%" height="15" fill="rgb(218,168,4)" fg:x="894" fg:w="1"/><text x="72.1150%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.8650%" y="485" width="0.0804%" height="15" fill="rgb(224,223,32)" fg:x="894" fg:w="1"/><text x="72.1150%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9453%" y="517" width="0.0804%" height="15" fill="rgb(236,106,22)" fg:x="895" fg:w="1"/><text x="72.1953%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9453%" y="501" width="0.0804%" height="15" fill="rgb(206,121,5)" fg:x="895" fg:w="1"/><text x="72.1953%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9453%" y="485" width="0.0804%" height="15" fill="rgb(233,87,28)" fg:x="895" fg:w="1"/><text x="72.1953%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9453%" y="469" width="0.0804%" height="15" fill="rgb(236,137,17)" fg:x="895" fg:w="1"/><text x="72.1953%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9453%" y="453" width="0.0804%" height="15" fill="rgb(209,183,38)" fg:x="895" fg:w="1"/><text x="72.1953%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9453%" y="437" width="0.0804%" height="15" fill="rgb(206,162,44)" fg:x="895" fg:w="1"/><text x="72.1953%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9453%" y="421" width="0.0804%" height="15" fill="rgb(237,70,39)" fg:x="895" fg:w="1"/><text x="72.1953%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9453%" y="405" width="0.0804%" height="15" fill="rgb(212,176,5)" fg:x="895" fg:w="1"/><text x="72.1953%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9453%" y="389" width="0.0804%" height="15" fill="rgb(232,95,16)" fg:x="895" fg:w="1"/><text x="72.1953%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9453%" y="373" width="0.0804%" height="15" fill="rgb(219,115,35)" fg:x="895" fg:w="1"/><text x="72.1953%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9453%" y="357" width="0.0804%" height="15" fill="rgb(251,67,27)" fg:x="895" fg:w="1"/><text x="72.1953%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9453%" y="341" width="0.0804%" height="15" fill="rgb(222,95,40)" fg:x="895" fg:w="1"/><text x="72.1953%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9453%" y="581" width="0.1608%" height="15" fill="rgb(250,35,16)" fg:x="895" fg:w="2"/><text x="72.1953%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9453%" y="565" width="0.1608%" height="15" fill="rgb(224,86,44)" fg:x="895" fg:w="2"/><text x="72.1953%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9453%" y="549" width="0.1608%" height="15" fill="rgb(237,53,53)" fg:x="895" fg:w="2"/><text x="72.1953%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9453%" y="533" width="0.1608%" height="15" fill="rgb(208,171,33)" fg:x="895" fg:w="2"/><text x="72.1953%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0257%" y="517" width="0.0804%" height="15" fill="rgb(222,64,27)" fg:x="896" fg:w="1"/><text x="72.2757%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.1865%" y="533" width="0.2412%" height="15" fill="rgb(221,121,35)" fg:x="898" fg:w="3"/><text x="72.4365%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.2669%" y="517" width="0.1608%" height="15" fill="rgb(228,137,42)" fg:x="899" fg:w="2"/><text x="72.5169%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.3473%" y="501" width="0.0804%" height="15" fill="rgb(227,54,21)" fg:x="900" fg:w="1"/><text x="72.5973%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.5884%" y="485" width="0.1608%" height="15" fill="rgb(240,168,33)" fg:x="903" fg:w="2"/><text x="72.8384%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="72.5884%" y="469" width="0.1608%" height="15" fill="rgb(243,159,6)" fg:x="903" fg:w="2"/><text x="72.8384%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="72.5884%" y="453" width="0.1608%" height="15" fill="rgb(205,211,41)" fg:x="903" fg:w="2"/><text x="72.8384%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.5884%" y="437" width="0.1608%" height="15" fill="rgb(253,30,1)" fg:x="903" fg:w="2"/><text x="72.8384%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.5884%" y="421" width="0.1608%" height="15" fill="rgb(226,80,18)" fg:x="903" fg:w="2"/><text x="72.8384%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="72.4277%" y="533" width="0.4019%" height="15" fill="rgb(253,156,46)" fg:x="901" fg:w="5"/><text x="72.6777%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="72.5080%" y="517" width="0.3215%" height="15" fill="rgb(248,87,27)" fg:x="902" fg:w="4"/><text x="72.7580%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="72.5884%" y="501" width="0.2412%" height="15" fill="rgb(227,122,2)" fg:x="903" fg:w="3"/><text x="72.8384%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.7492%" y="485" width="0.0804%" height="15" fill="rgb(229,94,39)" fg:x="905" fg:w="1"/><text x="72.9992%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.7492%" y="469" width="0.0804%" height="15" fill="rgb(225,173,31)" fg:x="905" fg:w="1"/><text x="72.9992%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="72.7492%" y="453" width="0.0804%" height="15" fill="rgb(239,176,30)" fg:x="905" fg:w="1"/><text x="72.9992%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="72.7492%" y="437" width="0.0804%" height="15" fill="rgb(212,104,21)" fg:x="905" fg:w="1"/><text x="72.9992%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.8296%" y="501" width="0.0804%" height="15" fill="rgb(240,209,40)" fg:x="906" fg:w="1"/><text x="73.0796%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8296%" y="485" width="0.0804%" height="15" fill="rgb(234,195,5)" fg:x="906" fg:w="1"/><text x="73.0796%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.8296%" y="469" width="0.0804%" height="15" fill="rgb(238,213,1)" fg:x="906" fg:w="1"/><text x="73.0796%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8296%" y="453" width="0.0804%" height="15" fill="rgb(235,182,54)" fg:x="906" fg:w="1"/><text x="73.0796%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="72.1061%" y="581" width="0.8842%" height="15" fill="rgb(229,50,46)" fg:x="897" fg:w="11"/><text x="72.3561%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="72.1061%" y="565" width="0.8842%" height="15" fill="rgb(219,145,13)" fg:x="897" fg:w="11"/><text x="72.3561%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (10 samples, 0.80%)</title><rect x="72.1865%" y="549" width="0.8039%" height="15" fill="rgb(220,226,10)" fg:x="898" fg:w="10"/><text x="72.4365%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.8296%" y="533" width="0.1608%" height="15" fill="rgb(248,47,30)" fg:x="906" fg:w="2"/><text x="73.0796%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.8296%" y="517" width="0.1608%" height="15" fill="rgb(231,209,44)" fg:x="906" fg:w="2"/><text x="73.0796%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9100%" y="501" width="0.0804%" height="15" fill="rgb(209,80,30)" fg:x="907" fg:w="1"/><text x="73.1600%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.9100%" y="485" width="0.0804%" height="15" fill="rgb(232,9,14)" fg:x="907" fg:w="1"/><text x="73.1600%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.9100%" y="469" width="0.0804%" height="15" fill="rgb(243,91,43)" fg:x="907" fg:w="1"/><text x="73.1600%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9100%" y="453" width="0.0804%" height="15" fill="rgb(231,90,52)" fg:x="907" fg:w="1"/><text x="73.1600%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.13%)</title><rect x="71.9453%" y="629" width="1.1254%" height="15" fill="rgb(253,192,44)" fg:x="895" fg:w="14"/><text x="72.1953%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.13%)</title><rect x="71.9453%" y="613" width="1.1254%" height="15" fill="rgb(241,66,31)" fg:x="895" fg:w="14"/><text x="72.1953%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (14 samples, 1.13%)</title><rect x="71.9453%" y="597" width="1.1254%" height="15" fill="rgb(235,81,37)" fg:x="895" fg:w="14"/><text x="72.1953%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9904%" y="581" width="0.0804%" height="15" fill="rgb(223,221,9)" fg:x="908" fg:w="1"/><text x="73.2404%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9904%" y="565" width="0.0804%" height="15" fill="rgb(242,180,7)" fg:x="908" fg:w="1"/><text x="73.2404%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.9904%" y="549" width="0.0804%" height="15" fill="rgb(243,78,19)" fg:x="908" fg:w="1"/><text x="73.2404%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9904%" y="533" width="0.0804%" height="15" fill="rgb(233,23,17)" fg:x="908" fg:w="1"/><text x="73.2404%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.0707%" y="565" width="0.0804%" height="15" fill="rgb(252,122,45)" fg:x="909" fg:w="1"/><text x="73.3207%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.0707%" y="549" width="0.0804%" height="15" fill="rgb(247,108,20)" fg:x="909" fg:w="1"/><text x="73.3207%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1511%" y="549" width="0.0804%" height="15" fill="rgb(235,84,21)" fg:x="910" fg:w="1"/><text x="73.4011%" y="559.50"></text></g><g><title>engine::session::internal::Added::find_refs (19 samples, 1.53%)</title><rect x="71.7846%" y="661" width="1.5273%" height="15" fill="rgb(247,129,10)" fg:x="893" fg:w="19"/><text x="72.0346%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (19 samples, 1.53%)</title><rect x="71.7846%" y="645" width="1.5273%" height="15" fill="rgb(208,173,14)" fg:x="893" fg:w="19"/><text x="72.0346%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.0707%" y="629" width="0.2412%" height="15" fill="rgb(236,31,38)" fg:x="909" fg:w="3"/><text x="73.3207%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.0707%" y="613" width="0.2412%" height="15" fill="rgb(232,65,17)" fg:x="909" fg:w="3"/><text x="73.3207%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.0707%" y="597" width="0.2412%" height="15" fill="rgb(224,45,49)" fg:x="909" fg:w="3"/><text x="73.3207%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="73.0707%" y="581" width="0.2412%" height="15" fill="rgb(225,2,53)" fg:x="909" fg:w="3"/><text x="73.3207%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.1511%" y="565" width="0.1608%" height="15" fill="rgb(248,210,53)" fg:x="910" fg:w="2"/><text x="73.4011%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.2315%" y="549" width="0.0804%" height="15" fill="rgb(211,1,30)" fg:x="911" fg:w="1"/><text x="73.4815%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2315%" y="533" width="0.0804%" height="15" fill="rgb(224,96,15)" fg:x="911" fg:w="1"/><text x="73.4815%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2315%" y="517" width="0.0804%" height="15" fill="rgb(252,45,11)" fg:x="911" fg:w="1"/><text x="73.4815%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3119%" y="645" width="0.0804%" height="15" fill="rgb(220,125,38)" fg:x="912" fg:w="1"/><text x="73.5619%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3119%" y="629" width="0.0804%" height="15" fill="rgb(243,161,33)" fg:x="912" fg:w="1"/><text x="73.5619%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.3119%" y="613" width="0.0804%" height="15" fill="rgb(248,197,34)" fg:x="912" fg:w="1"/><text x="73.5619%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3119%" y="597" width="0.0804%" height="15" fill="rgb(228,165,23)" fg:x="912" fg:w="1"/><text x="73.5619%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.3923%" y="645" width="0.0804%" height="15" fill="rgb(236,94,38)" fg:x="913" fg:w="1"/><text x="73.6423%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3923%" y="629" width="0.0804%" height="15" fill="rgb(220,13,23)" fg:x="913" fg:w="1"/><text x="73.6423%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="73.4727%" y="645" width="0.0804%" height="15" fill="rgb(234,26,39)" fg:x="914" fg:w="1"/><text x="73.7227%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4727%" y="629" width="0.0804%" height="15" fill="rgb(205,117,44)" fg:x="914" fg:w="1"/><text x="73.7227%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6334%" y="597" width="0.0804%" height="15" fill="rgb(250,42,2)" fg:x="916" fg:w="1"/><text x="73.8834%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.7138%" y="597" width="0.0804%" height="15" fill="rgb(223,83,14)" fg:x="917" fg:w="1"/><text x="73.9638%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.7138%" y="581" width="0.0804%" height="15" fill="rgb(241,147,50)" fg:x="917" fg:w="1"/><text x="73.9638%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7942%" y="549" width="0.0804%" height="15" fill="rgb(218,90,6)" fg:x="918" fg:w="1"/><text x="74.0442%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7942%" y="533" width="0.0804%" height="15" fill="rgb(210,191,5)" fg:x="918" fg:w="1"/><text x="74.0442%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.7942%" y="517" width="0.0804%" height="15" fill="rgb(225,139,19)" fg:x="918" fg:w="1"/><text x="74.0442%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="73.5531%" y="645" width="0.4019%" height="15" fill="rgb(210,1,33)" fg:x="915" fg:w="5"/><text x="73.8031%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="73.5531%" y="629" width="0.4019%" height="15" fill="rgb(213,50,3)" fg:x="915" fg:w="5"/><text x="73.8031%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.5531%" y="613" width="0.4019%" height="15" fill="rgb(234,227,4)" fg:x="915" fg:w="5"/><text x="73.8031%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="73.7942%" y="597" width="0.1608%" height="15" fill="rgb(246,63,5)" fg:x="918" fg:w="2"/><text x="74.0442%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.7942%" y="581" width="0.1608%" height="15" fill="rgb(245,136,27)" fg:x="918" fg:w="2"/><text x="74.0442%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.7942%" y="565" width="0.1608%" height="15" fill="rgb(247,199,27)" fg:x="918" fg:w="2"/><text x="74.0442%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8746%" y="549" width="0.0804%" height="15" fill="rgb(252,158,49)" fg:x="919" fg:w="1"/><text x="74.1246%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8746%" y="533" width="0.0804%" height="15" fill="rgb(254,73,1)" fg:x="919" fg:w="1"/><text x="74.1246%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.8746%" y="517" width="0.0804%" height="15" fill="rgb(248,93,19)" fg:x="919" fg:w="1"/><text x="74.1246%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.8746%" y="501" width="0.0804%" height="15" fill="rgb(206,67,5)" fg:x="919" fg:w="1"/><text x="74.1246%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.8746%" y="485" width="0.0804%" height="15" fill="rgb(209,210,4)" fg:x="919" fg:w="1"/><text x="74.1246%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8746%" y="469" width="0.0804%" height="15" fill="rgb(214,185,36)" fg:x="919" fg:w="1"/><text x="74.1246%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8746%" y="453" width="0.0804%" height="15" fill="rgb(233,191,26)" fg:x="919" fg:w="1"/><text x="74.1246%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.8746%" y="437" width="0.0804%" height="15" fill="rgb(248,94,17)" fg:x="919" fg:w="1"/><text x="74.1246%" y="447.50"></text></g><g><title>engine::session::Session::load_entity (32 samples, 2.57%)</title><rect x="71.7042%" y="677" width="2.5723%" height="15" fill="rgb(250,64,4)" fg:x="892" fg:w="32"/><text x="71.9542%" y="687.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="73.3119%" y="661" width="0.9646%" height="15" fill="rgb(218,41,53)" fg:x="912" fg:w="12"/><text x="73.5619%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="73.9550%" y="645" width="0.3215%" height="15" fill="rgb(251,176,28)" fg:x="920" fg:w="4"/><text x="74.2050%" y="655.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="73.9550%" y="629" width="0.3215%" height="15" fill="rgb(247,22,9)" fg:x="920" fg:w="4"/><text x="74.2050%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.9550%" y="613" width="0.3215%" height="15" fill="rgb(218,201,14)" fg:x="920" fg:w="4"/><text x="74.2050%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="73.9550%" y="597" width="0.3215%" height="15" fill="rgb(218,94,10)" fg:x="920" fg:w="4"/><text x="74.2050%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.9550%" y="581" width="0.3215%" height="15" fill="rgb(222,183,52)" fg:x="920" fg:w="4"/><text x="74.2050%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.0354%" y="565" width="0.2412%" height="15" fill="rgb(242,140,25)" fg:x="921" fg:w="3"/><text x="74.2854%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.1961%" y="549" width="0.0804%" height="15" fill="rgb(235,197,38)" fg:x="923" fg:w="1"/><text x="74.4461%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.1961%" y="533" width="0.0804%" height="15" fill="rgb(237,136,15)" fg:x="923" fg:w="1"/><text x="74.4461%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.1961%" y="517" width="0.0804%" height="15" fill="rgb(223,44,49)" fg:x="923" fg:w="1"/><text x="74.4461%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.1961%" y="501" width="0.0804%" height="15" fill="rgb(227,71,15)" fg:x="923" fg:w="1"/><text x="74.4461%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3569%" y="645" width="0.0804%" height="15" fill="rgb(225,153,20)" fg:x="925" fg:w="1"/><text x="74.6069%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3569%" y="629" width="0.0804%" height="15" fill="rgb(210,190,26)" fg:x="925" fg:w="1"/><text x="74.6069%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3569%" y="613" width="0.0804%" height="15" fill="rgb(223,147,5)" fg:x="925" fg:w="1"/><text x="74.6069%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3569%" y="597" width="0.0804%" height="15" fill="rgb(207,14,23)" fg:x="925" fg:w="1"/><text x="74.6069%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3569%" y="581" width="0.0804%" height="15" fill="rgb(211,195,53)" fg:x="925" fg:w="1"/><text x="74.6069%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3569%" y="565" width="0.0804%" height="15" fill="rgb(237,75,46)" fg:x="925" fg:w="1"/><text x="74.6069%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3569%" y="549" width="0.0804%" height="15" fill="rgb(254,55,14)" fg:x="925" fg:w="1"/><text x="74.6069%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3569%" y="533" width="0.0804%" height="15" fill="rgb(230,185,30)" fg:x="925" fg:w="1"/><text x="74.6069%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3569%" y="517" width="0.0804%" height="15" fill="rgb(220,14,11)" fg:x="925" fg:w="1"/><text x="74.6069%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3569%" y="501" width="0.0804%" height="15" fill="rgb(215,169,44)" fg:x="925" fg:w="1"/><text x="74.6069%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3569%" y="485" width="0.0804%" height="15" fill="rgb(253,203,20)" fg:x="925" fg:w="1"/><text x="74.6069%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3569%" y="469" width="0.0804%" height="15" fill="rgb(229,225,17)" fg:x="925" fg:w="1"/><text x="74.6069%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3569%" y="453" width="0.0804%" height="15" fill="rgb(236,76,26)" fg:x="925" fg:w="1"/><text x="74.6069%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3569%" y="437" width="0.0804%" height="15" fill="rgb(234,15,30)" fg:x="925" fg:w="1"/><text x="74.6069%" y="447.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="74.3569%" y="661" width="0.2412%" height="15" fill="rgb(211,113,48)" fg:x="925" fg:w="3"/><text x="74.6069%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.4373%" y="645" width="0.1608%" height="15" fill="rgb(221,31,36)" fg:x="926" fg:w="2"/><text x="74.6873%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.4373%" y="629" width="0.1608%" height="15" fill="rgb(215,118,52)" fg:x="926" fg:w="2"/><text x="74.6873%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.4373%" y="613" width="0.1608%" height="15" fill="rgb(241,151,27)" fg:x="926" fg:w="2"/><text x="74.6873%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.4373%" y="597" width="0.1608%" height="15" fill="rgb(253,51,3)" fg:x="926" fg:w="2"/><text x="74.6873%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="74.5177%" y="581" width="0.0804%" height="15" fill="rgb(216,201,24)" fg:x="927" fg:w="1"/><text x="74.7677%" y="591.50"></text></g><g><title>engine::users::model::username_to_key (5 samples, 0.40%)</title><rect x="74.2765%" y="677" width="0.4019%" height="15" fill="rgb(231,107,4)" fg:x="924" fg:w="5"/><text x="74.5265%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.5981%" y="661" width="0.0804%" height="15" fill="rgb(243,97,54)" fg:x="928" fg:w="1"/><text x="74.8481%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.7588%" y="613" width="0.0804%" height="15" fill="rgb(221,32,51)" fg:x="930" fg:w="1"/><text x="75.0088%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.7588%" y="629" width="0.1608%" height="15" fill="rgb(218,171,35)" fg:x="930" fg:w="2"/><text x="75.0088%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8392%" y="613" width="0.0804%" height="15" fill="rgb(214,20,53)" fg:x="931" fg:w="1"/><text x="75.0892%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="74.9196%" y="629" width="0.1608%" height="15" fill="rgb(239,9,52)" fg:x="932" fg:w="2"/><text x="75.1696%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.9196%" y="613" width="0.1608%" height="15" fill="rgb(215,114,45)" fg:x="932" fg:w="2"/><text x="75.1696%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.9196%" y="597" width="0.1608%" height="15" fill="rgb(208,118,9)" fg:x="932" fg:w="2"/><text x="75.1696%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.9196%" y="581" width="0.1608%" height="15" fill="rgb(235,7,39)" fg:x="932" fg:w="2"/><text x="75.1696%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.9196%" y="565" width="0.1608%" height="15" fill="rgb(243,225,15)" fg:x="932" fg:w="2"/><text x="75.1696%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.9196%" y="549" width="0.1608%" height="15" fill="rgb(225,216,18)" fg:x="932" fg:w="2"/><text x="75.1696%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0000%" y="533" width="0.0804%" height="15" fill="rgb(233,36,38)" fg:x="933" fg:w="1"/><text x="75.2500%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="75.1608%" y="581" width="0.0804%" height="15" fill="rgb(239,88,23)" fg:x="935" fg:w="1"/><text x="75.4108%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2412%" y="581" width="0.0804%" height="15" fill="rgb(219,181,35)" fg:x="936" fg:w="1"/><text x="75.4912%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.4019%" y="533" width="0.0804%" height="15" fill="rgb(215,18,46)" fg:x="938" fg:w="1"/><text x="75.6519%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.4019%" y="517" width="0.0804%" height="15" fill="rgb(241,38,11)" fg:x="938" fg:w="1"/><text x="75.6519%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4823%" y="501" width="0.0804%" height="15" fill="rgb(248,169,45)" fg:x="939" fg:w="1"/><text x="75.7323%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="75.0804%" y="629" width="0.6431%" height="15" fill="rgb(239,50,49)" fg:x="934" fg:w="8"/><text x="75.3304%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="75.0804%" y="613" width="0.6431%" height="15" fill="rgb(231,96,31)" fg:x="934" fg:w="8"/><text x="75.3304%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="75.0804%" y="597" width="0.6431%" height="15" fill="rgb(224,193,37)" fg:x="934" fg:w="8"/><text x="75.3304%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="75.3215%" y="581" width="0.4019%" height="15" fill="rgb(227,153,50)" fg:x="937" fg:w="5"/><text x="75.5715%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="75.3215%" y="565" width="0.4019%" height="15" fill="rgb(249,228,3)" fg:x="937" fg:w="5"/><text x="75.5715%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="75.3215%" y="549" width="0.4019%" height="15" fill="rgb(219,164,43)" fg:x="937" fg:w="5"/><text x="75.5715%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="75.4823%" y="533" width="0.2412%" height="15" fill="rgb(216,45,41)" fg:x="939" fg:w="3"/><text x="75.7323%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="75.4823%" y="517" width="0.2412%" height="15" fill="rgb(210,226,51)" fg:x="939" fg:w="3"/><text x="75.7323%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="75.5627%" y="501" width="0.1608%" height="15" fill="rgb(209,117,49)" fg:x="940" fg:w="2"/><text x="75.8127%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.6431%" y="485" width="0.0804%" height="15" fill="rgb(206,196,24)" fg:x="941" fg:w="1"/><text x="75.8931%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7235%" y="501" width="0.0804%" height="15" fill="rgb(253,218,3)" fg:x="942" fg:w="1"/><text x="75.9735%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7235%" y="485" width="0.0804%" height="15" fill="rgb(252,166,2)" fg:x="942" fg:w="1"/><text x="75.9735%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7235%" y="469" width="0.0804%" height="15" fill="rgb(236,218,26)" fg:x="942" fg:w="1"/><text x="75.9735%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7235%" y="453" width="0.0804%" height="15" fill="rgb(254,84,19)" fg:x="942" fg:w="1"/><text x="75.9735%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7235%" y="437" width="0.0804%" height="15" fill="rgb(219,137,29)" fg:x="942" fg:w="1"/><text x="75.9735%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7235%" y="421" width="0.0804%" height="15" fill="rgb(227,47,52)" fg:x="942" fg:w="1"/><text x="75.9735%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7235%" y="405" width="0.0804%" height="15" fill="rgb(229,167,24)" fg:x="942" fg:w="1"/><text x="75.9735%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7235%" y="565" width="0.1608%" height="15" fill="rgb(233,164,1)" fg:x="942" fg:w="2"/><text x="75.9735%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7235%" y="549" width="0.1608%" height="15" fill="rgb(218,88,48)" fg:x="942" fg:w="2"/><text x="75.9735%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7235%" y="533" width="0.1608%" height="15" fill="rgb(226,214,24)" fg:x="942" fg:w="2"/><text x="75.9735%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7235%" y="517" width="0.1608%" height="15" fill="rgb(233,29,12)" fg:x="942" fg:w="2"/><text x="75.9735%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.8039%" y="501" width="0.0804%" height="15" fill="rgb(219,120,34)" fg:x="943" fg:w="1"/><text x="76.0539%" y="511.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (433 samples, 34.81%)</title><rect x="41.2379%" y="709" width="34.8071%" height="15" fill="rgb(226,78,44)" fg:x="513" fg:w="433"/><text x="41.4879%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (433 samples, 34.81%)</title><rect x="41.2379%" y="693" width="34.8071%" height="15" fill="rgb(240,15,48)" fg:x="513" fg:w="433"/><text x="41.4879%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (17 samples, 1.37%)</title><rect x="74.6785%" y="677" width="1.3666%" height="15" fill="rgb(253,176,7)" fg:x="929" fg:w="17"/><text x="74.9285%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (17 samples, 1.37%)</title><rect x="74.6785%" y="661" width="1.3666%" height="15" fill="rgb(206,166,28)" fg:x="929" fg:w="17"/><text x="74.9285%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.37%)</title><rect x="74.6785%" y="645" width="1.3666%" height="15" fill="rgb(241,53,51)" fg:x="929" fg:w="17"/><text x="74.9285%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="75.7235%" y="629" width="0.3215%" height="15" fill="rgb(249,112,30)" fg:x="942" fg:w="4"/><text x="75.9735%" y="639.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="75.7235%" y="613" width="0.3215%" height="15" fill="rgb(217,85,30)" fg:x="942" fg:w="4"/><text x="75.9735%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.7235%" y="597" width="0.3215%" height="15" fill="rgb(233,49,7)" fg:x="942" fg:w="4"/><text x="75.9735%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="75.7235%" y="581" width="0.3215%" height="15" fill="rgb(234,109,9)" fg:x="942" fg:w="4"/><text x="75.9735%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.8842%" y="565" width="0.1608%" height="15" fill="rgb(253,95,22)" fg:x="944" fg:w="2"/><text x="76.1342%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.8842%" y="549" width="0.1608%" height="15" fill="rgb(233,176,25)" fg:x="944" fg:w="2"/><text x="76.1342%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="75.8842%" y="533" width="0.1608%" height="15" fill="rgb(236,33,39)" fg:x="944" fg:w="2"/><text x="76.1342%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (949 samples, 76.29%)</title><rect x="0.0000%" y="757" width="76.2862%" height="15" fill="rgb(223,226,42)" fg:x="0" fg:w="949"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (949 samples, 76.29%)</title><rect x="0.0000%" y="741" width="76.2862%" height="15" fill="rgb(216,99,33)" fg:x="0" fg:w="949"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (949 samples, 76.29%)</title><rect x="0.0000%" y="725" width="76.2862%" height="15" fill="rgb(235,84,23)" fg:x="0" fg:w="949"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (3 samples, 0.24%)</title><rect x="76.0450%" y="709" width="0.2412%" height="15" fill="rgb(232,2,27)" fg:x="946" fg:w="3"/><text x="76.2950%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.2058%" y="693" width="0.0804%" height="15" fill="rgb(241,23,22)" fg:x="948" fg:w="1"/><text x="76.4558%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2862%" y="693" width="0.0804%" height="15" fill="rgb(211,73,27)" fg:x="949" fg:w="1"/><text x="76.5362%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.2862%" y="709" width="0.1608%" height="15" fill="rgb(235,109,49)" fg:x="949" fg:w="2"/><text x="76.5362%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.3666%" y="693" width="0.0804%" height="15" fill="rgb(230,99,29)" fg:x="950" fg:w="1"/><text x="76.6166%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.3666%" y="677" width="0.0804%" height="15" fill="rgb(245,199,7)" fg:x="950" fg:w="1"/><text x="76.6166%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.4469%" y="661" width="0.0804%" height="15" fill="rgb(217,179,10)" fg:x="951" fg:w="1"/><text x="76.6969%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.4469%" y="693" width="0.1608%" height="15" fill="rgb(254,99,47)" fg:x="951" fg:w="2"/><text x="76.6969%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.4469%" y="677" width="0.1608%" height="15" fill="rgb(251,121,7)" fg:x="951" fg:w="2"/><text x="76.6969%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.5273%" y="661" width="0.0804%" height="15" fill="rgb(250,177,26)" fg:x="952" fg:w="1"/><text x="76.7773%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="76.5273%" y="645" width="0.0804%" height="15" fill="rgb(232,88,15)" fg:x="952" fg:w="1"/><text x="76.7773%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="76.5273%" y="629" width="0.0804%" height="15" fill="rgb(251,54,54)" fg:x="952" fg:w="1"/><text x="76.7773%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6077%" y="613" width="0.0804%" height="15" fill="rgb(208,177,15)" fg:x="953" fg:w="1"/><text x="76.8577%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.6881%" y="613" width="0.0804%" height="15" fill="rgb(205,97,32)" fg:x="954" fg:w="1"/><text x="76.9381%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7685%" y="597" width="0.0804%" height="15" fill="rgb(217,192,13)" fg:x="955" fg:w="1"/><text x="77.0185%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7685%" y="581" width="0.0804%" height="15" fill="rgb(215,163,41)" fg:x="955" fg:w="1"/><text x="77.0185%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="76.6077%" y="629" width="0.3215%" height="15" fill="rgb(246,83,29)" fg:x="953" fg:w="4"/><text x="76.8577%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.7685%" y="613" width="0.1608%" height="15" fill="rgb(219,2,45)" fg:x="955" fg:w="2"/><text x="77.0185%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.8489%" y="597" width="0.0804%" height="15" fill="rgb(242,215,33)" fg:x="956" fg:w="1"/><text x="77.0989%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.8489%" y="581" width="0.0804%" height="15" fill="rgb(217,1,6)" fg:x="956" fg:w="1"/><text x="77.0989%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.8489%" y="565" width="0.0804%" height="15" fill="rgb(207,85,52)" fg:x="956" fg:w="1"/><text x="77.0989%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9293%" y="597" width="0.0804%" height="15" fill="rgb(231,171,19)" fg:x="957" fg:w="1"/><text x="77.1793%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1704%" y="565" width="0.0804%" height="15" fill="rgb(207,128,4)" fg:x="960" fg:w="1"/><text x="77.4204%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.1704%" y="581" width="0.1608%" height="15" fill="rgb(219,208,4)" fg:x="960" fg:w="2"/><text x="77.4204%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.2508%" y="565" width="0.0804%" height="15" fill="rgb(235,161,42)" fg:x="961" fg:w="1"/><text x="77.5008%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2508%" y="549" width="0.0804%" height="15" fill="rgb(247,218,18)" fg:x="961" fg:w="1"/><text x="77.5008%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="76.9293%" y="613" width="0.4823%" height="15" fill="rgb(232,114,51)" fg:x="957" fg:w="6"/><text x="77.1793%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="77.0096%" y="597" width="0.4019%" height="15" fill="rgb(222,95,3)" fg:x="958" fg:w="5"/><text x="77.2596%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3312%" y="581" width="0.0804%" height="15" fill="rgb(240,65,29)" fg:x="962" fg:w="1"/><text x="77.5812%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.3312%" y="565" width="0.0804%" height="15" fill="rgb(249,209,20)" fg:x="962" fg:w="1"/><text x="77.5812%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="76.6077%" y="677" width="0.8842%" height="15" fill="rgb(241,48,37)" fg:x="953" fg:w="11"/><text x="76.8577%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (11 samples, 0.88%)</title><rect x="76.6077%" y="661" width="0.8842%" height="15" fill="rgb(230,140,42)" fg:x="953" fg:w="11"/><text x="76.8577%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="76.6077%" y="645" width="0.8842%" height="15" fill="rgb(230,176,45)" fg:x="953" fg:w="11"/><text x="76.8577%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="76.9293%" y="629" width="0.5627%" height="15" fill="rgb(245,112,21)" fg:x="957" fg:w="7"/><text x="77.1793%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4116%" y="613" width="0.0804%" height="15" fill="rgb(207,183,35)" fg:x="963" fg:w="1"/><text x="77.6616%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (12 samples, 0.96%)</title><rect x="76.6077%" y="693" width="0.9646%" height="15" fill="rgb(227,44,33)" fg:x="953" fg:w="12"/><text x="76.8577%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4920%" y="677" width="0.0804%" height="15" fill="rgb(246,120,21)" fg:x="964" fg:w="1"/><text x="77.7420%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.21%)</title><rect x="76.4469%" y="709" width="1.2058%" height="15" fill="rgb(235,57,52)" fg:x="951" fg:w="15"/><text x="76.6969%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="77.5723%" y="693" width="0.0804%" height="15" fill="rgb(238,84,10)" fg:x="965" fg:w="1"/><text x="77.8223%" y="703.50"></text></g><g><title>&lt;&amp;str as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (1 samples, 0.08%)</title><rect x="77.7331%" y="629" width="0.0804%" height="15" fill="rgb(251,200,32)" fg:x="967" fg:w="1"/><text x="77.9831%" y="639.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.8939%" y="613" width="0.0804%" height="15" fill="rgb(247,159,13)" fg:x="969" fg:w="1"/><text x="78.1439%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.8939%" y="597" width="0.0804%" height="15" fill="rgb(238,64,4)" fg:x="969" fg:w="1"/><text x="78.1439%" y="607.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="77.8939%" y="581" width="0.0804%" height="15" fill="rgb(221,131,51)" fg:x="969" fg:w="1"/><text x="78.1439%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="77.8939%" y="565" width="0.0804%" height="15" fill="rgb(242,5,29)" fg:x="969" fg:w="1"/><text x="78.1439%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.8939%" y="549" width="0.0804%" height="15" fill="rgb(214,130,32)" fg:x="969" fg:w="1"/><text x="78.1439%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.8939%" y="533" width="0.0804%" height="15" fill="rgb(244,210,16)" fg:x="969" fg:w="1"/><text x="78.1439%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8939%" y="517" width="0.0804%" height="15" fill="rgb(234,48,26)" fg:x="969" fg:w="1"/><text x="78.1439%" y="527.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.9743%" y="613" width="0.0804%" height="15" fill="rgb(231,82,38)" fg:x="970" fg:w="1"/><text x="78.2243%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.9743%" y="597" width="0.0804%" height="15" fill="rgb(254,128,41)" fg:x="970" fg:w="1"/><text x="78.2243%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="77.9743%" y="581" width="0.0804%" height="15" fill="rgb(212,73,49)" fg:x="970" fg:w="1"/><text x="78.2243%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.9743%" y="565" width="0.0804%" height="15" fill="rgb(205,62,54)" fg:x="970" fg:w="1"/><text x="78.2243%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="78.0547%" y="613" width="0.0804%" height="15" fill="rgb(228,0,8)" fg:x="971" fg:w="1"/><text x="78.3047%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="78.0547%" y="597" width="0.0804%" height="15" fill="rgb(251,28,17)" fg:x="971" fg:w="1"/><text x="78.3047%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0547%" y="581" width="0.0804%" height="15" fill="rgb(238,105,27)" fg:x="971" fg:w="1"/><text x="78.3047%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (5 samples, 0.40%)</title><rect x="77.8135%" y="629" width="0.4019%" height="15" fill="rgb(237,216,33)" fg:x="968" fg:w="5"/><text x="78.0635%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="78.1350%" y="613" width="0.0804%" height="15" fill="rgb(229,228,25)" fg:x="972" fg:w="1"/><text x="78.3850%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="78.1350%" y="597" width="0.0804%" height="15" fill="rgb(233,75,23)" fg:x="972" fg:w="1"/><text x="78.3850%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="78.1350%" y="581" width="0.0804%" height="15" fill="rgb(231,207,16)" fg:x="972" fg:w="1"/><text x="78.3850%" y="591.50"></text></g><g><title>&lt;core::char::ToUppercase as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.08%)</title><rect x="78.1350%" y="565" width="0.0804%" height="15" fill="rgb(231,191,45)" fg:x="972" fg:w="1"/><text x="78.3850%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.2154%" y="613" width="0.0804%" height="15" fill="rgb(224,133,17)" fg:x="973" fg:w="1"/><text x="78.4654%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.2154%" y="597" width="0.0804%" height="15" fill="rgb(209,178,27)" fg:x="973" fg:w="1"/><text x="78.4654%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.2154%" y="581" width="0.0804%" height="15" fill="rgb(218,37,11)" fg:x="973" fg:w="1"/><text x="78.4654%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.2154%" y="565" width="0.0804%" height="15" fill="rgb(251,226,25)" fg:x="973" fg:w="1"/><text x="78.4654%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.2154%" y="549" width="0.0804%" height="15" fill="rgb(209,222,27)" fg:x="973" fg:w="1"/><text x="78.4654%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="78.2154%" y="533" width="0.0804%" height="15" fill="rgb(238,22,21)" fg:x="973" fg:w="1"/><text x="78.4654%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.2154%" y="517" width="0.0804%" height="15" fill="rgb(233,161,25)" fg:x="973" fg:w="1"/><text x="78.4654%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.2154%" y="501" width="0.0804%" height="15" fill="rgb(226,122,53)" fg:x="973" fg:w="1"/><text x="78.4654%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.2154%" y="485" width="0.0804%" height="15" fill="rgb(220,123,17)" fg:x="973" fg:w="1"/><text x="78.4654%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.2154%" y="469" width="0.0804%" height="15" fill="rgb(230,224,35)" fg:x="973" fg:w="1"/><text x="78.4654%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.2154%" y="453" width="0.0804%" height="15" fill="rgb(246,83,8)" fg:x="973" fg:w="1"/><text x="78.4654%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.2154%" y="437" width="0.0804%" height="15" fill="rgb(230,214,17)" fg:x="973" fg:w="1"/><text x="78.4654%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="78.2154%" y="421" width="0.0804%" height="15" fill="rgb(222,97,18)" fg:x="973" fg:w="1"/><text x="78.4654%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.2154%" y="405" width="0.0804%" height="15" fill="rgb(206,79,1)" fg:x="973" fg:w="1"/><text x="78.4654%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="78.2154%" y="389" width="0.0804%" height="15" fill="rgb(214,121,34)" fg:x="973" fg:w="1"/><text x="78.4654%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="78.2154%" y="373" width="0.0804%" height="15" fill="rgb(249,199,46)" fg:x="973" fg:w="1"/><text x="78.4654%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="78.2154%" y="357" width="0.0804%" height="15" fill="rgb(214,222,46)" fg:x="973" fg:w="1"/><text x="78.4654%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.2154%" y="341" width="0.0804%" height="15" fill="rgb(248,168,30)" fg:x="973" fg:w="1"/><text x="78.4654%" y="351.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="78.2154%" y="629" width="0.2412%" height="15" fill="rgb(226,14,28)" fg:x="973" fg:w="3"/><text x="78.4654%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="78.2958%" y="613" width="0.1608%" height="15" fill="rgb(253,123,1)" fg:x="974" fg:w="2"/><text x="78.5458%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="78.2958%" y="597" width="0.1608%" height="15" fill="rgb(225,24,42)" fg:x="974" fg:w="2"/><text x="78.5458%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="78.2958%" y="581" width="0.1608%" height="15" fill="rgb(216,161,37)" fg:x="974" fg:w="2"/><text x="78.5458%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="78.2958%" y="565" width="0.1608%" height="15" fill="rgb(251,164,26)" fg:x="974" fg:w="2"/><text x="78.5458%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="78.2958%" y="549" width="0.1608%" height="15" fill="rgb(219,177,3)" fg:x="974" fg:w="2"/><text x="78.5458%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="78.2958%" y="533" width="0.1608%" height="15" fill="rgb(222,65,0)" fg:x="974" fg:w="2"/><text x="78.5458%" y="543.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="78.2958%" y="517" width="0.1608%" height="15" fill="rgb(223,69,54)" fg:x="974" fg:w="2"/><text x="78.5458%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="78.4566%" y="613" width="0.1608%" height="15" fill="rgb(235,30,27)" fg:x="976" fg:w="2"/><text x="78.7066%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.4566%" y="597" width="0.1608%" height="15" fill="rgb(220,183,50)" fg:x="976" fg:w="2"/><text x="78.7066%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.4566%" y="581" width="0.1608%" height="15" fill="rgb(248,198,15)" fg:x="976" fg:w="2"/><text x="78.7066%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.5370%" y="565" width="0.0804%" height="15" fill="rgb(222,211,4)" fg:x="977" fg:w="1"/><text x="78.7870%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.5370%" y="549" width="0.0804%" height="15" fill="rgb(214,102,34)" fg:x="977" fg:w="1"/><text x="78.7870%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.5370%" y="533" width="0.0804%" height="15" fill="rgb(245,92,5)" fg:x="977" fg:w="1"/><text x="78.7870%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.5370%" y="517" width="0.0804%" height="15" fill="rgb(252,72,51)" fg:x="977" fg:w="1"/><text x="78.7870%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.5370%" y="501" width="0.0804%" height="15" fill="rgb(252,208,19)" fg:x="977" fg:w="1"/><text x="78.7870%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.5370%" y="485" width="0.0804%" height="15" fill="rgb(211,69,7)" fg:x="977" fg:w="1"/><text x="78.7870%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.5370%" y="469" width="0.0804%" height="15" fill="rgb(211,27,16)" fg:x="977" fg:w="1"/><text x="78.7870%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.5370%" y="453" width="0.0804%" height="15" fill="rgb(219,216,14)" fg:x="977" fg:w="1"/><text x="78.7870%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.5370%" y="437" width="0.0804%" height="15" fill="rgb(219,71,8)" fg:x="977" fg:w="1"/><text x="78.7870%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.5370%" y="421" width="0.0804%" height="15" fill="rgb(223,170,53)" fg:x="977" fg:w="1"/><text x="78.7870%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.5370%" y="405" width="0.0804%" height="15" fill="rgb(246,21,26)" fg:x="977" fg:w="1"/><text x="78.7870%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5370%" y="389" width="0.0804%" height="15" fill="rgb(248,20,46)" fg:x="977" fg:w="1"/><text x="78.7870%" y="399.50"></text></g><g><title>glob::is_dir (2 samples, 0.16%)</title><rect x="78.6174%" y="565" width="0.1608%" height="15" fill="rgb(252,94,11)" fg:x="978" fg:w="2"/><text x="78.8674%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="78.6174%" y="549" width="0.1608%" height="15" fill="rgb(236,163,8)" fg:x="978" fg:w="2"/><text x="78.8674%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="78.6174%" y="533" width="0.1608%" height="15" fill="rgb(217,221,45)" fg:x="978" fg:w="2"/><text x="78.8674%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="78.6174%" y="517" width="0.1608%" height="15" fill="rgb(238,38,17)" fg:x="978" fg:w="2"/><text x="78.8674%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="78.6174%" y="501" width="0.1608%" height="15" fill="rgb(242,210,23)" fg:x="978" fg:w="2"/><text x="78.8674%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="78.6977%" y="485" width="0.0804%" height="15" fill="rgb(250,86,53)" fg:x="979" fg:w="1"/><text x="78.9477%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="78.6977%" y="469" width="0.0804%" height="15" fill="rgb(223,168,25)" fg:x="979" fg:w="1"/><text x="78.9477%" y="479.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="78.6977%" y="453" width="0.0804%" height="15" fill="rgb(251,189,4)" fg:x="979" fg:w="1"/><text x="78.9477%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="78.6174%" y="597" width="0.2412%" height="15" fill="rgb(245,19,28)" fg:x="978" fg:w="3"/><text x="78.8674%" y="607.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="78.6174%" y="581" width="0.2412%" height="15" fill="rgb(207,10,34)" fg:x="978" fg:w="3"/><text x="78.8674%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="78.7781%" y="565" width="0.0804%" height="15" fill="rgb(235,153,31)" fg:x="980" fg:w="1"/><text x="79.0281%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="78.7781%" y="549" width="0.0804%" height="15" fill="rgb(228,72,37)" fg:x="980" fg:w="1"/><text x="79.0281%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="78.7781%" y="533" width="0.0804%" height="15" fill="rgb(215,15,16)" fg:x="980" fg:w="1"/><text x="79.0281%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="78.7781%" y="517" width="0.0804%" height="15" fill="rgb(250,119,29)" fg:x="980" fg:w="1"/><text x="79.0281%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="78.7781%" y="501" width="0.0804%" height="15" fill="rgb(214,59,1)" fg:x="980" fg:w="1"/><text x="79.0281%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="78.7781%" y="485" width="0.0804%" height="15" fill="rgb(223,109,25)" fg:x="980" fg:w="1"/><text x="79.0281%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="78.7781%" y="469" width="0.0804%" height="15" fill="rgb(230,198,22)" fg:x="980" fg:w="1"/><text x="79.0281%" y="479.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="78.4566%" y="629" width="0.4823%" height="15" fill="rgb(245,184,46)" fg:x="976" fg:w="6"/><text x="78.7066%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (4 samples, 0.32%)</title><rect x="78.6174%" y="613" width="0.3215%" height="15" fill="rgb(253,73,16)" fg:x="978" fg:w="4"/><text x="78.8674%" y="623.50"></text></g><g><title>glob::glob (1 samples, 0.08%)</title><rect x="78.8585%" y="597" width="0.0804%" height="15" fill="rgb(206,94,45)" fg:x="981" fg:w="1"/><text x="79.1085%" y="607.50"></text></g><g><title>glob::glob_with (1 samples, 0.08%)</title><rect x="78.8585%" y="581" width="0.0804%" height="15" fill="rgb(236,83,27)" fg:x="981" fg:w="1"/><text x="79.1085%" y="591.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (1 samples, 0.08%)</title><rect x="78.8585%" y="565" width="0.0804%" height="15" fill="rgb(220,196,8)" fg:x="981" fg:w="1"/><text x="79.1085%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="78.8585%" y="549" width="0.0804%" height="15" fill="rgb(254,185,14)" fg:x="981" fg:w="1"/><text x="79.1085%" y="559.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="78.8585%" y="533" width="0.0804%" height="15" fill="rgb(226,50,22)" fg:x="981" fg:w="1"/><text x="79.1085%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="78.9389%" y="629" width="0.0804%" height="15" fill="rgb(253,147,0)" fg:x="982" fg:w="1"/><text x="79.1889%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9389%" y="613" width="0.0804%" height="15" fill="rgb(252,46,33)" fg:x="982" fg:w="1"/><text x="79.1889%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.37%)</title><rect x="77.7331%" y="645" width="1.3666%" height="15" fill="rgb(242,22,54)" fg:x="967" fg:w="17"/><text x="77.9831%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="79.0193%" y="629" width="0.0804%" height="15" fill="rgb(223,178,32)" fg:x="983" fg:w="1"/><text x="79.2693%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="79.0193%" y="613" width="0.0804%" height="15" fill="rgb(214,106,53)" fg:x="983" fg:w="1"/><text x="79.2693%" y="623.50"></text></g><g><title>engine::session::Session::initialize (18 samples, 1.45%)</title><rect x="77.7331%" y="661" width="1.4469%" height="15" fill="rgb(232,65,50)" fg:x="967" fg:w="18"/><text x="77.9831%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="79.0997%" y="645" width="0.0804%" height="15" fill="rgb(231,110,28)" fg:x="984" fg:w="1"/><text x="79.3497%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.0997%" y="629" width="0.0804%" height="15" fill="rgb(216,71,40)" fg:x="984" fg:w="1"/><text x="79.3497%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.0997%" y="613" width="0.0804%" height="15" fill="rgb(229,89,53)" fg:x="984" fg:w="1"/><text x="79.3497%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.0997%" y="597" width="0.0804%" height="15" fill="rgb(210,124,14)" fg:x="984" fg:w="1"/><text x="79.3497%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (21 samples, 1.69%)</title><rect x="77.6527%" y="709" width="1.6881%" height="15" fill="rgb(236,213,6)" fg:x="966" fg:w="21"/><text x="77.9027%" y="719.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (21 samples, 1.69%)</title><rect x="77.6527%" y="693" width="1.6881%" height="15" fill="rgb(228,41,5)" fg:x="966" fg:w="21"/><text x="77.9027%" y="703.50"></text></g><g><title>engine::session::Session::new (21 samples, 1.69%)</title><rect x="77.6527%" y="677" width="1.6881%" height="15" fill="rgb(221,167,25)" fg:x="966" fg:w="21"/><text x="77.9027%" y="687.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="79.1801%" y="661" width="0.1608%" height="15" fill="rgb(228,144,37)" fg:x="985" fg:w="2"/><text x="79.4301%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.1801%" y="645" width="0.1608%" height="15" fill="rgb(227,189,38)" fg:x="985" fg:w="2"/><text x="79.4301%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="79.1801%" y="629" width="0.1608%" height="15" fill="rgb(218,8,2)" fg:x="985" fg:w="2"/><text x="79.4301%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.2605%" y="613" width="0.0804%" height="15" fill="rgb(209,61,28)" fg:x="986" fg:w="1"/><text x="79.5105%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.2605%" y="597" width="0.0804%" height="15" fill="rgb(233,140,39)" fg:x="986" fg:w="1"/><text x="79.5105%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.3408%" y="581" width="0.0804%" height="15" fill="rgb(251,66,48)" fg:x="987" fg:w="1"/><text x="79.5908%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.3408%" y="565" width="0.0804%" height="15" fill="rgb(210,44,45)" fg:x="987" fg:w="1"/><text x="79.5908%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.3408%" y="549" width="0.0804%" height="15" fill="rgb(214,136,46)" fg:x="987" fg:w="1"/><text x="79.5908%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.3408%" y="533" width="0.0804%" height="15" fill="rgb(207,130,50)" fg:x="987" fg:w="1"/><text x="79.5908%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.3408%" y="517" width="0.0804%" height="15" fill="rgb(228,102,49)" fg:x="987" fg:w="1"/><text x="79.5908%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.3408%" y="501" width="0.0804%" height="15" fill="rgb(253,55,1)" fg:x="987" fg:w="1"/><text x="79.5908%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.3408%" y="485" width="0.0804%" height="15" fill="rgb(238,222,9)" fg:x="987" fg:w="1"/><text x="79.5908%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.3408%" y="469" width="0.0804%" height="15" fill="rgb(246,99,6)" fg:x="987" fg:w="1"/><text x="79.5908%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.4212%" y="517" width="0.0804%" height="15" fill="rgb(219,110,26)" fg:x="988" fg:w="1"/><text x="79.6712%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.4212%" y="565" width="0.1608%" height="15" fill="rgb(239,160,33)" fg:x="988" fg:w="2"/><text x="79.6712%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.4212%" y="549" width="0.1608%" height="15" fill="rgb(220,202,23)" fg:x="988" fg:w="2"/><text x="79.6712%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="79.4212%" y="533" width="0.1608%" height="15" fill="rgb(208,80,26)" fg:x="988" fg:w="2"/><text x="79.6712%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="79.5016%" y="517" width="0.0804%" height="15" fill="rgb(243,85,7)" fg:x="989" fg:w="1"/><text x="79.7516%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="79.3408%" y="597" width="0.3215%" height="15" fill="rgb(228,77,47)" fg:x="987" fg:w="4"/><text x="79.5908%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.4212%" y="581" width="0.2412%" height="15" fill="rgb(212,226,8)" fg:x="988" fg:w="3"/><text x="79.6712%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5820%" y="565" width="0.0804%" height="15" fill="rgb(241,120,54)" fg:x="990" fg:w="1"/><text x="79.8320%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5820%" y="549" width="0.0804%" height="15" fill="rgb(226,80,16)" fg:x="990" fg:w="1"/><text x="79.8320%" y="559.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="79.5820%" y="533" width="0.0804%" height="15" fill="rgb(240,76,13)" fg:x="990" fg:w="1"/><text x="79.8320%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.6624%" y="517" width="0.0804%" height="15" fill="rgb(252,74,8)" fg:x="991" fg:w="1"/><text x="79.9124%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6624%" y="597" width="0.1608%" height="15" fill="rgb(244,155,2)" fg:x="991" fg:w="2"/><text x="79.9124%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="79.6624%" y="581" width="0.1608%" height="15" fill="rgb(215,81,35)" fg:x="991" fg:w="2"/><text x="79.9124%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6624%" y="565" width="0.1608%" height="15" fill="rgb(206,55,2)" fg:x="991" fg:w="2"/><text x="79.9124%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6624%" y="549" width="0.1608%" height="15" fill="rgb(231,2,34)" fg:x="991" fg:w="2"/><text x="79.9124%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.6624%" y="533" width="0.1608%" height="15" fill="rgb(242,176,48)" fg:x="991" fg:w="2"/><text x="79.9124%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="79.7428%" y="517" width="0.0804%" height="15" fill="rgb(249,31,36)" fg:x="992" fg:w="1"/><text x="79.9928%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.7428%" y="501" width="0.0804%" height="15" fill="rgb(205,18,17)" fg:x="992" fg:w="1"/><text x="79.9928%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.7428%" y="485" width="0.0804%" height="15" fill="rgb(254,130,5)" fg:x="992" fg:w="1"/><text x="79.9928%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.7428%" y="469" width="0.0804%" height="15" fill="rgb(229,42,45)" fg:x="992" fg:w="1"/><text x="79.9928%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.8232%" y="565" width="0.0804%" height="15" fill="rgb(245,95,25)" fg:x="993" fg:w="1"/><text x="80.0732%" y="575.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="79.8232%" y="581" width="0.1608%" height="15" fill="rgb(249,193,38)" fg:x="993" fg:w="2"/><text x="80.0732%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="79.9035%" y="565" width="0.0804%" height="15" fill="rgb(241,140,43)" fg:x="994" fg:w="1"/><text x="80.1535%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.0643%" y="501" width="0.0804%" height="15" fill="rgb(245,78,48)" fg:x="996" fg:w="1"/><text x="80.3143%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0643%" y="485" width="0.0804%" height="15" fill="rgb(214,92,39)" fg:x="996" fg:w="1"/><text x="80.3143%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0643%" y="469" width="0.0804%" height="15" fill="rgb(211,189,14)" fg:x="996" fg:w="1"/><text x="80.3143%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1447%" y="469" width="0.0804%" height="15" fill="rgb(218,7,24)" fg:x="997" fg:w="1"/><text x="80.3947%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="79.9839%" y="533" width="0.4019%" height="15" fill="rgb(224,200,49)" fg:x="995" fg:w="5"/><text x="80.2339%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="79.9839%" y="517" width="0.4019%" height="15" fill="rgb(218,210,14)" fg:x="995" fg:w="5"/><text x="80.2339%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="80.1447%" y="501" width="0.2412%" height="15" fill="rgb(234,142,31)" fg:x="997" fg:w="3"/><text x="80.3947%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="80.1447%" y="485" width="0.2412%" height="15" fill="rgb(227,165,2)" fg:x="997" fg:w="3"/><text x="80.3947%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="80.2251%" y="469" width="0.1608%" height="15" fill="rgb(232,44,46)" fg:x="998" fg:w="2"/><text x="80.4751%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="80.2251%" y="453" width="0.1608%" height="15" fill="rgb(236,149,47)" fg:x="998" fg:w="2"/><text x="80.4751%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3055%" y="437" width="0.0804%" height="15" fill="rgb(227,45,31)" fg:x="999" fg:w="1"/><text x="80.5555%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3055%" y="421" width="0.0804%" height="15" fill="rgb(240,176,51)" fg:x="999" fg:w="1"/><text x="80.5555%" y="431.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.13%)</title><rect x="79.3408%" y="693" width="1.1254%" height="15" fill="rgb(249,146,41)" fg:x="987" fg:w="14"/><text x="79.5908%" y="703.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.13%)</title><rect x="79.3408%" y="677" width="1.1254%" height="15" fill="rgb(213,208,4)" fg:x="987" fg:w="14"/><text x="79.5908%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.13%)</title><rect x="79.3408%" y="661" width="1.1254%" height="15" fill="rgb(245,84,36)" fg:x="987" fg:w="14"/><text x="79.5908%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.13%)</title><rect x="79.3408%" y="645" width="1.1254%" height="15" fill="rgb(254,84,18)" fg:x="987" fg:w="14"/><text x="79.5908%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.13%)</title><rect x="79.3408%" y="629" width="1.1254%" height="15" fill="rgb(225,38,54)" fg:x="987" fg:w="14"/><text x="79.5908%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.13%)</title><rect x="79.3408%" y="613" width="1.1254%" height="15" fill="rgb(246,50,30)" fg:x="987" fg:w="14"/><text x="79.5908%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="79.8232%" y="597" width="0.6431%" height="15" fill="rgb(246,148,9)" fg:x="993" fg:w="8"/><text x="80.0732%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="79.9839%" y="581" width="0.4823%" height="15" fill="rgb(223,75,4)" fg:x="995" fg:w="6"/><text x="80.2339%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="79.9839%" y="565" width="0.4823%" height="15" fill="rgb(239,148,41)" fg:x="995" fg:w="6"/><text x="80.2339%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="79.9839%" y="549" width="0.4823%" height="15" fill="rgb(205,195,3)" fg:x="995" fg:w="6"/><text x="80.2339%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3859%" y="533" width="0.0804%" height="15" fill="rgb(254,161,1)" fg:x="1000" fg:w="1"/><text x="80.6359%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.4662%" y="677" width="0.0804%" height="15" fill="rgb(211,229,8)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="80.4662%" y="661" width="0.0804%" height="15" fill="rgb(220,97,9)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4662%" y="645" width="0.0804%" height="15" fill="rgb(240,218,8)" fg:x="1001" fg:w="1"/><text x="80.7162%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="80.5466%" y="661" width="0.0804%" height="15" fill="rgb(250,44,0)" fg:x="1002" fg:w="1"/><text x="80.7966%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.5466%" y="645" width="0.0804%" height="15" fill="rgb(236,41,53)" fg:x="1002" fg:w="1"/><text x="80.7966%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.5466%" y="629" width="0.0804%" height="15" fill="rgb(218,227,13)" fg:x="1002" fg:w="1"/><text x="80.7966%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5466%" y="613" width="0.0804%" height="15" fill="rgb(217,94,32)" fg:x="1002" fg:w="1"/><text x="80.7966%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.6270%" y="613" width="0.0804%" height="15" fill="rgb(213,217,12)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.6270%" y="597" width="0.0804%" height="15" fill="rgb(229,13,46)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6270%" y="581" width="0.0804%" height="15" fill="rgb(243,139,5)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.6270%" y="565" width="0.0804%" height="15" fill="rgb(249,38,45)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6270%" y="549" width="0.0804%" height="15" fill="rgb(216,70,11)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.6270%" y="533" width="0.0804%" height="15" fill="rgb(253,101,25)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.6270%" y="517" width="0.0804%" height="15" fill="rgb(207,197,30)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="527.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="80.7074%" y="613" width="0.0804%" height="15" fill="rgb(238,87,13)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7074%" y="597" width="0.0804%" height="15" fill="rgb(215,155,8)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="80.6270%" y="645" width="0.2412%" height="15" fill="rgb(239,166,38)" fg:x="1003" fg:w="3"/><text x="80.8770%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="80.6270%" y="629" width="0.2412%" height="15" fill="rgb(240,194,35)" fg:x="1003" fg:w="3"/><text x="80.8770%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7878%" y="613" width="0.0804%" height="15" fill="rgb(219,10,44)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7878%" y="597" width="0.0804%" height="15" fill="rgb(251,220,35)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7878%" y="581" width="0.0804%" height="15" fill="rgb(218,117,13)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.7878%" y="565" width="0.0804%" height="15" fill="rgb(221,213,40)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="80.5466%" y="677" width="0.4019%" height="15" fill="rgb(251,224,35)" fg:x="1002" fg:w="5"/><text x="80.7966%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="80.6270%" y="661" width="0.3215%" height="15" fill="rgb(241,33,39)" fg:x="1003" fg:w="4"/><text x="80.8770%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8682%" y="645" width="0.0804%" height="15" fill="rgb(222,74,17)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.8682%" y="629" width="0.0804%" height="15" fill="rgb(225,103,0)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.8682%" y="613" width="0.0804%" height="15" fill="rgb(240,0,12)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.8682%" y="597" width="0.0804%" height="15" fill="rgb(233,213,37)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8682%" y="581" width="0.0804%" height="15" fill="rgb(225,84,52)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8682%" y="565" width="0.0804%" height="15" fill="rgb(247,160,51)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8682%" y="549" width="0.0804%" height="15" fill="rgb(244,60,51)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8682%" y="533" width="0.0804%" height="15" fill="rgb(233,114,7)" fg:x="1006" fg:w="1"/><text x="81.1182%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="80.4662%" y="693" width="0.6431%" height="15" fill="rgb(246,136,16)" fg:x="1001" fg:w="8"/><text x="80.7162%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="80.9486%" y="677" width="0.1608%" height="15" fill="rgb(243,114,45)" fg:x="1007" fg:w="2"/><text x="81.1986%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.9486%" y="661" width="0.1608%" height="15" fill="rgb(247,183,43)" fg:x="1007" fg:w="2"/><text x="81.1986%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="81.1093%" y="693" width="0.0804%" height="15" fill="rgb(251,210,42)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="81.1093%" y="677" width="0.0804%" height="15" fill="rgb(221,88,35)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="81.1093%" y="661" width="0.0804%" height="15" fill="rgb(242,21,20)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.1093%" y="645" width="0.0804%" height="15" fill="rgb(233,226,36)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.1093%" y="629" width="0.0804%" height="15" fill="rgb(243,189,34)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.1093%" y="613" width="0.0804%" height="15" fill="rgb(207,145,50)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.1093%" y="597" width="0.0804%" height="15" fill="rgb(242,1,50)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.1093%" y="581" width="0.0804%" height="15" fill="rgb(231,65,32)" fg:x="1009" fg:w="1"/><text x="81.3593%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="81.1897%" y="677" width="0.1608%" height="15" fill="rgb(208,68,49)" fg:x="1010" fg:w="2"/><text x="81.4397%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="81.1897%" y="661" width="0.1608%" height="15" fill="rgb(253,54,49)" fg:x="1010" fg:w="2"/><text x="81.4397%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="81.1897%" y="645" width="0.1608%" height="15" fill="rgb(245,186,24)" fg:x="1010" fg:w="2"/><text x="81.4397%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.2701%" y="629" width="0.0804%" height="15" fill="rgb(209,2,41)" fg:x="1011" fg:w="1"/><text x="81.5201%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="81.4309%" y="661" width="0.0804%" height="15" fill="rgb(242,208,54)" fg:x="1013" fg:w="1"/><text x="81.6809%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.5916%" y="549" width="0.0804%" height="15" fill="rgb(225,9,51)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.5916%" y="533" width="0.0804%" height="15" fill="rgb(207,207,25)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.5916%" y="517" width="0.0804%" height="15" fill="rgb(253,96,18)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.5916%" y="501" width="0.0804%" height="15" fill="rgb(252,215,20)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.5916%" y="485" width="0.0804%" height="15" fill="rgb(245,227,26)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.5916%" y="469" width="0.0804%" height="15" fill="rgb(241,208,0)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.5916%" y="453" width="0.0804%" height="15" fill="rgb(224,130,10)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.5916%" y="437" width="0.0804%" height="15" fill="rgb(237,29,0)" fg:x="1015" fg:w="1"/><text x="81.8416%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.6720%" y="533" width="0.0804%" height="15" fill="rgb(219,27,41)" fg:x="1016" fg:w="1"/><text x="81.9220%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.8328%" y="517" width="0.0804%" height="15" fill="rgb(245,101,19)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.8328%" y="501" width="0.0804%" height="15" fill="rgb(243,44,37)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.8328%" y="485" width="0.0804%" height="15" fill="rgb(228,213,43)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="81.8328%" y="469" width="0.0804%" height="15" fill="rgb(219,163,21)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="81.9132%" y="501" width="0.3215%" height="15" fill="rgb(234,86,24)" fg:x="1019" fg:w="4"/><text x="82.1632%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="81.9132%" y="485" width="0.3215%" height="15" fill="rgb(225,10,24)" fg:x="1019" fg:w="4"/><text x="82.1632%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="82.0740%" y="469" width="0.1608%" height="15" fill="rgb(218,109,7)" fg:x="1021" fg:w="2"/><text x="82.3240%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="82.0740%" y="453" width="0.1608%" height="15" fill="rgb(210,20,26)" fg:x="1021" fg:w="2"/><text x="82.3240%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="82.0740%" y="437" width="0.1608%" height="15" fill="rgb(216,18,1)" fg:x="1021" fg:w="2"/><text x="82.3240%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.0740%" y="421" width="0.1608%" height="15" fill="rgb(206,163,23)" fg:x="1021" fg:w="2"/><text x="82.3240%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="82.0740%" y="405" width="0.1608%" height="15" fill="rgb(229,150,31)" fg:x="1021" fg:w="2"/><text x="82.3240%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="81.5113%" y="565" width="0.8842%" height="15" fill="rgb(231,10,5)" fg:x="1014" fg:w="11"/><text x="81.7613%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="81.6720%" y="549" width="0.7235%" height="15" fill="rgb(250,40,50)" fg:x="1016" fg:w="9"/><text x="81.9220%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="81.7524%" y="533" width="0.6431%" height="15" fill="rgb(217,119,7)" fg:x="1017" fg:w="8"/><text x="82.0024%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="81.9132%" y="517" width="0.4823%" height="15" fill="rgb(245,214,40)" fg:x="1019" fg:w="6"/><text x="82.1632%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.2347%" y="501" width="0.1608%" height="15" fill="rgb(216,187,1)" fg:x="1023" fg:w="2"/><text x="82.4847%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.2347%" y="485" width="0.1608%" height="15" fill="rgb(237,146,21)" fg:x="1023" fg:w="2"/><text x="82.4847%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.2347%" y="469" width="0.1608%" height="15" fill="rgb(210,174,47)" fg:x="1023" fg:w="2"/><text x="82.4847%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="82.2347%" y="453" width="0.1608%" height="15" fill="rgb(218,111,39)" fg:x="1023" fg:w="2"/><text x="82.4847%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.3151%" y="437" width="0.0804%" height="15" fill="rgb(224,95,19)" fg:x="1024" fg:w="1"/><text x="82.5651%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.3151%" y="421" width="0.0804%" height="15" fill="rgb(234,15,38)" fg:x="1024" fg:w="1"/><text x="82.5651%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.3151%" y="405" width="0.0804%" height="15" fill="rgb(246,56,12)" fg:x="1024" fg:w="1"/><text x="82.5651%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.3151%" y="389" width="0.0804%" height="15" fill="rgb(247,16,17)" fg:x="1024" fg:w="1"/><text x="82.5651%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.3955%" y="533" width="0.0804%" height="15" fill="rgb(215,151,11)" fg:x="1025" fg:w="1"/><text x="82.6455%" y="543.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="82.3955%" y="517" width="0.0804%" height="15" fill="rgb(225,16,24)" fg:x="1025" fg:w="1"/><text x="82.6455%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="82.3955%" y="549" width="0.1608%" height="15" fill="rgb(217,117,5)" fg:x="1025" fg:w="2"/><text x="82.6455%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="82.4759%" y="533" width="0.0804%" height="15" fill="rgb(246,187,53)" fg:x="1026" fg:w="1"/><text x="82.7259%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.4759%" y="517" width="0.0804%" height="15" fill="rgb(241,71,40)" fg:x="1026" fg:w="1"/><text x="82.7259%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="82.5563%" y="485" width="0.1608%" height="15" fill="rgb(231,67,39)" fg:x="1027" fg:w="2"/><text x="82.8063%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.7170%" y="469" width="0.0804%" height="15" fill="rgb(222,120,24)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7170%" y="453" width="0.0804%" height="15" fill="rgb(248,3,3)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7170%" y="437" width="0.0804%" height="15" fill="rgb(228,218,5)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7170%" y="421" width="0.0804%" height="15" fill="rgb(212,202,43)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7170%" y="405" width="0.0804%" height="15" fill="rgb(235,183,2)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.7170%" y="389" width="0.0804%" height="15" fill="rgb(230,165,10)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.7170%" y="373" width="0.0804%" height="15" fill="rgb(219,54,40)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.7170%" y="357" width="0.0804%" height="15" fill="rgb(244,73,9)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="82.7170%" y="341" width="0.0804%" height="15" fill="rgb(212,32,45)" fg:x="1029" fg:w="1"/><text x="82.9670%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.9582%" y="405" width="0.0804%" height="15" fill="rgb(205,58,31)" fg:x="1032" fg:w="1"/><text x="83.2082%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="82.7170%" y="485" width="0.4019%" height="15" fill="rgb(250,120,43)" fg:x="1029" fg:w="5"/><text x="82.9670%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="82.7974%" y="469" width="0.3215%" height="15" fill="rgb(235,13,10)" fg:x="1030" fg:w="4"/><text x="83.0474%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="82.7974%" y="453" width="0.3215%" height="15" fill="rgb(232,219,31)" fg:x="1030" fg:w="4"/><text x="83.0474%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="82.9582%" y="437" width="0.1608%" height="15" fill="rgb(218,157,51)" fg:x="1032" fg:w="2"/><text x="83.2082%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="82.9582%" y="421" width="0.1608%" height="15" fill="rgb(211,91,52)" fg:x="1032" fg:w="2"/><text x="83.2082%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0386%" y="405" width="0.0804%" height="15" fill="rgb(240,173,1)" fg:x="1033" fg:w="1"/><text x="83.2886%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.0386%" y="389" width="0.0804%" height="15" fill="rgb(248,20,47)" fg:x="1033" fg:w="1"/><text x="83.2886%" y="399.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.85%)</title><rect x="81.3505%" y="677" width="1.8489%" height="15" fill="rgb(217,221,40)" fg:x="1012" fg:w="23"/><text x="81.6005%" y="687.50">e..</text></g><g><title>engine::session::Session::save_changes (21 samples, 1.69%)</title><rect x="81.5113%" y="661" width="1.6881%" height="15" fill="rgb(226,149,51)" fg:x="1014" fg:w="21"/><text x="81.7613%" y="671.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.69%)</title><rect x="81.5113%" y="645" width="1.6881%" height="15" fill="rgb(252,193,7)" fg:x="1014" fg:w="21"/><text x="81.7613%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.69%)</title><rect x="81.5113%" y="629" width="1.6881%" height="15" fill="rgb(205,123,0)" fg:x="1014" fg:w="21"/><text x="81.7613%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.69%)</title><rect x="81.5113%" y="613" width="1.6881%" height="15" fill="rgb(233,173,25)" fg:x="1014" fg:w="21"/><text x="81.7613%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.69%)</title><rect x="81.5113%" y="597" width="1.6881%" height="15" fill="rgb(216,63,32)" fg:x="1014" fg:w="21"/><text x="81.7613%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.69%)</title><rect x="81.5113%" y="581" width="1.6881%" height="15" fill="rgb(209,56,45)" fg:x="1014" fg:w="21"/><text x="81.7613%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="82.3955%" y="565" width="0.8039%" height="15" fill="rgb(226,111,49)" fg:x="1025" fg:w="10"/><text x="82.6455%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="82.5563%" y="549" width="0.6431%" height="15" fill="rgb(244,181,21)" fg:x="1027" fg:w="8"/><text x="82.8063%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="82.5563%" y="533" width="0.6431%" height="15" fill="rgb(222,126,15)" fg:x="1027" fg:w="8"/><text x="82.8063%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="82.5563%" y="517" width="0.6431%" height="15" fill="rgb(222,95,17)" fg:x="1027" fg:w="8"/><text x="82.8063%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="82.5563%" y="501" width="0.6431%" height="15" fill="rgb(254,46,5)" fg:x="1027" fg:w="8"/><text x="82.8063%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="83.1190%" y="485" width="0.0804%" height="15" fill="rgb(236,216,35)" fg:x="1034" fg:w="1"/><text x="83.3690%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1190%" y="469" width="0.0804%" height="15" fill="rgb(217,187,26)" fg:x="1034" fg:w="1"/><text x="83.3690%" y="479.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="83.1994%" y="677" width="0.1608%" height="15" fill="rgb(207,192,25)" fg:x="1035" fg:w="2"/><text x="83.4494%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="83.1994%" y="661" width="0.1608%" height="15" fill="rgb(253,135,27)" fg:x="1035" fg:w="2"/><text x="83.4494%" y="671.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="83.1994%" y="645" width="0.1608%" height="15" fill="rgb(211,122,29)" fg:x="1035" fg:w="2"/><text x="83.4494%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2797%" y="629" width="0.0804%" height="15" fill="rgb(233,162,40)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.2797%" y="613" width="0.0804%" height="15" fill="rgb(222,184,47)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.2797%" y="597" width="0.0804%" height="15" fill="rgb(249,99,23)" fg:x="1036" fg:w="1"/><text x="83.5297%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.3601%" y="661" width="0.0804%" height="15" fill="rgb(214,60,12)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.3601%" y="645" width="0.0804%" height="15" fill="rgb(250,229,36)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.3601%" y="629" width="0.0804%" height="15" fill="rgb(232,195,10)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3601%" y="613" width="0.0804%" height="15" fill="rgb(205,213,31)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.3601%" y="597" width="0.0804%" height="15" fill="rgb(237,43,8)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3601%" y="581" width="0.0804%" height="15" fill="rgb(216,208,3)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.3601%" y="565" width="0.0804%" height="15" fill="rgb(228,179,44)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.3601%" y="549" width="0.0804%" height="15" fill="rgb(230,192,27)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.3601%" y="533" width="0.0804%" height="15" fill="rgb(251,30,38)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.3601%" y="517" width="0.0804%" height="15" fill="rgb(246,55,52)" fg:x="1037" fg:w="1"/><text x="83.6101%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="83.4405%" y="629" width="0.1608%" height="15" fill="rgb(249,79,26)" fg:x="1038" fg:w="2"/><text x="83.6905%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="83.4405%" y="613" width="0.1608%" height="15" fill="rgb(220,202,16)" fg:x="1038" fg:w="2"/><text x="83.6905%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="83.6013%" y="597" width="0.0804%" height="15" fill="rgb(250,170,23)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.6013%" y="581" width="0.0804%" height="15" fill="rgb(230,7,37)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.6817%" y="597" width="0.0804%" height="15" fill="rgb(213,71,1)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.6817%" y="581" width="0.0804%" height="15" fill="rgb(227,87,39)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6817%" y="565" width="0.0804%" height="15" fill="rgb(210,41,29)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.6817%" y="549" width="0.0804%" height="15" fill="rgb(206,191,31)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6817%" y="533" width="0.0804%" height="15" fill="rgb(247,75,54)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="83.4405%" y="661" width="0.4019%" height="15" fill="rgb(208,54,50)" fg:x="1038" fg:w="5"/><text x="83.6905%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="83.4405%" y="645" width="0.4019%" height="15" fill="rgb(214,90,37)" fg:x="1038" fg:w="5"/><text x="83.6905%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="83.6013%" y="629" width="0.2412%" height="15" fill="rgb(220,132,6)" fg:x="1040" fg:w="3"/><text x="83.8513%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="83.6013%" y="613" width="0.2412%" height="15" fill="rgb(213,167,7)" fg:x="1040" fg:w="3"/><text x="83.8513%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="83.7621%" y="597" width="0.0804%" height="15" fill="rgb(243,36,27)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="83.7621%" y="581" width="0.0804%" height="15" fill="rgb(235,147,12)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.7621%" y="565" width="0.0804%" height="15" fill="rgb(212,198,44)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.7621%" y="549" width="0.0804%" height="15" fill="rgb(218,68,50)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.7621%" y="533" width="0.0804%" height="15" fill="rgb(224,79,48)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.7621%" y="517" width="0.0804%" height="15" fill="rgb(213,191,50)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.7621%" y="501" width="0.0804%" height="15" fill="rgb(254,146,10)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.7621%" y="485" width="0.0804%" height="15" fill="rgb(215,175,11)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7621%" y="469" width="0.0804%" height="15" fill="rgb(207,49,7)" fg:x="1042" fg:w="1"/><text x="84.0121%" y="479.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="83.3601%" y="677" width="0.5627%" height="15" fill="rgb(234,144,29)" fg:x="1037" fg:w="7"/><text x="83.6101%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.8424%" y="661" width="0.0804%" height="15" fill="rgb(213,222,48)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.8424%" y="645" width="0.0804%" height="15" fill="rgb(222,8,6)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8424%" y="629" width="0.0804%" height="15" fill="rgb(221,114,49)" fg:x="1043" fg:w="1"/><text x="84.0924%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="83.9228%" y="677" width="0.0804%" height="15" fill="rgb(250,140,42)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="83.9228%" y="661" width="0.0804%" height="15" fill="rgb(250,150,27)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="83.9228%" y="645" width="0.0804%" height="15" fill="rgb(252,159,3)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="83.9228%" y="629" width="0.0804%" height="15" fill="rgb(241,182,3)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.9228%" y="613" width="0.0804%" height="15" fill="rgb(236,3,9)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9228%" y="597" width="0.0804%" height="15" fill="rgb(223,227,51)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9228%" y="581" width="0.0804%" height="15" fill="rgb(232,133,30)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="83.9228%" y="565" width="0.0804%" height="15" fill="rgb(209,93,27)" fg:x="1044" fg:w="1"/><text x="84.1728%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.0836%" y="581" width="0.0804%" height="15" fill="rgb(208,108,34)" fg:x="1046" fg:w="1"/><text x="84.3336%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="84.0032%" y="677" width="0.2412%" height="15" fill="rgb(215,189,13)" fg:x="1045" fg:w="3"/><text x="84.2532%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="84.0836%" y="661" width="0.1608%" height="15" fill="rgb(206,88,23)" fg:x="1046" fg:w="2"/><text x="84.3336%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="84.0836%" y="645" width="0.1608%" height="15" fill="rgb(240,173,0)" fg:x="1046" fg:w="2"/><text x="84.3336%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="84.0836%" y="629" width="0.1608%" height="15" fill="rgb(223,106,52)" fg:x="1046" fg:w="2"/><text x="84.3336%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="84.0836%" y="613" width="0.1608%" height="15" fill="rgb(206,130,16)" fg:x="1046" fg:w="2"/><text x="84.3336%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="84.0836%" y="597" width="0.1608%" height="15" fill="rgb(220,54,25)" fg:x="1046" fg:w="2"/><text x="84.3336%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.1640%" y="581" width="0.0804%" height="15" fill="rgb(210,4,38)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.1640%" y="565" width="0.0804%" height="15" fill="rgb(238,94,39)" fg:x="1047" fg:w="1"/><text x="84.4140%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="84.2444%" y="661" width="0.0804%" height="15" fill="rgb(234,124,34)" fg:x="1048" fg:w="1"/><text x="84.4944%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="84.2444%" y="645" width="0.0804%" height="15" fill="rgb(221,91,40)" fg:x="1048" fg:w="1"/><text x="84.4944%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="84.2444%" y="629" width="0.0804%" height="15" fill="rgb(246,53,28)" fg:x="1048" fg:w="1"/><text x="84.4944%" y="639.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="84.2444%" y="613" width="0.0804%" height="15" fill="rgb(229,109,7)" fg:x="1048" fg:w="1"/><text x="84.4944%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="84.3248%" y="661" width="0.0804%" height="15" fill="rgb(249,117,8)" fg:x="1049" fg:w="1"/><text x="84.5748%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3248%" y="645" width="0.0804%" height="15" fill="rgb(210,181,1)" fg:x="1049" fg:w="1"/><text x="84.5748%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.3248%" y="629" width="0.0804%" height="15" fill="rgb(211,66,1)" fg:x="1049" fg:w="1"/><text x="84.5748%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="84.3248%" y="613" width="0.0804%" height="15" fill="rgb(221,90,14)" fg:x="1049" fg:w="1"/><text x="84.5748%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3248%" y="597" width="0.0804%" height="15" fill="rgb(219,222,44)" fg:x="1049" fg:w="1"/><text x="84.5748%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.3248%" y="581" width="0.0804%" height="15" fill="rgb(246,34,33)" fg:x="1049" fg:w="1"/><text x="84.5748%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (41 samples, 3.30%)</title><rect x="81.1897%" y="693" width="3.2958%" height="15" fill="rgb(227,135,41)" fg:x="1010" fg:w="41"/><text x="81.4397%" y="703.50">plu..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="84.2444%" y="677" width="0.2412%" height="15" fill="rgb(226,15,14)" fg:x="1048" fg:w="3"/><text x="84.4944%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="84.4051%" y="661" width="0.0804%" height="15" fill="rgb(236,148,47)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.4051%" y="645" width="0.0804%" height="15" fill="rgb(233,162,52)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4051%" y="629" width="0.0804%" height="15" fill="rgb(244,35,28)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4051%" y="613" width="0.0804%" height="15" fill="rgb(205,121,10)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4051%" y="597" width="0.0804%" height="15" fill="rgb(250,58,18)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4051%" y="581" width="0.0804%" height="15" fill="rgb(216,37,13)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.4051%" y="565" width="0.0804%" height="15" fill="rgb(221,215,42)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.4051%" y="549" width="0.0804%" height="15" fill="rgb(217,214,19)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="84.4051%" y="533" width="0.0804%" height="15" fill="rgb(233,139,13)" fg:x="1050" fg:w="1"/><text x="84.6551%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="84.4855%" y="693" width="0.0804%" height="15" fill="rgb(247,168,23)" fg:x="1051" fg:w="1"/><text x="84.7355%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="84.4855%" y="677" width="0.0804%" height="15" fill="rgb(207,202,1)" fg:x="1051" fg:w="1"/><text x="84.7355%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="84.4855%" y="661" width="0.0804%" height="15" fill="rgb(220,155,48)" fg:x="1051" fg:w="1"/><text x="84.7355%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="84.5659%" y="613" width="0.0804%" height="15" fill="rgb(250,43,26)" fg:x="1052" fg:w="1"/><text x="84.8159%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="84.5659%" y="597" width="0.0804%" height="15" fill="rgb(212,190,23)" fg:x="1052" fg:w="1"/><text x="84.8159%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="84.5659%" y="581" width="0.0804%" height="15" fill="rgb(216,39,24)" fg:x="1052" fg:w="1"/><text x="84.8159%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="84.5659%" y="565" width="0.0804%" height="15" fill="rgb(252,113,16)" fg:x="1052" fg:w="1"/><text x="84.8159%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="84.5659%" y="549" width="0.0804%" height="15" fill="rgb(208,113,19)" fg:x="1052" fg:w="1"/><text x="84.8159%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="84.5659%" y="693" width="0.1608%" height="15" fill="rgb(234,107,25)" fg:x="1052" fg:w="2"/><text x="84.8159%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="84.5659%" y="677" width="0.1608%" height="15" fill="rgb(234,217,51)" fg:x="1052" fg:w="2"/><text x="84.8159%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="84.5659%" y="661" width="0.1608%" height="15" fill="rgb(251,29,42)" fg:x="1052" fg:w="2"/><text x="84.8159%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="84.5659%" y="645" width="0.1608%" height="15" fill="rgb(221,62,51)" fg:x="1052" fg:w="2"/><text x="84.8159%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="84.5659%" y="629" width="0.1608%" height="15" fill="rgb(240,192,43)" fg:x="1052" fg:w="2"/><text x="84.8159%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.6463%" y="613" width="0.0804%" height="15" fill="rgb(224,157,47)" fg:x="1053" fg:w="1"/><text x="84.8963%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.6463%" y="597" width="0.0804%" height="15" fill="rgb(226,84,45)" fg:x="1053" fg:w="1"/><text x="84.8963%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="84.6463%" y="581" width="0.0804%" height="15" fill="rgb(208,207,23)" fg:x="1053" fg:w="1"/><text x="84.8963%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.7267%" y="613" width="0.0804%" height="15" fill="rgb(253,34,51)" fg:x="1054" fg:w="1"/><text x="84.9767%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="84.7267%" y="661" width="0.1608%" height="15" fill="rgb(227,26,34)" fg:x="1054" fg:w="2"/><text x="84.9767%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="84.7267%" y="645" width="0.1608%" height="15" fill="rgb(245,75,19)" fg:x="1054" fg:w="2"/><text x="84.9767%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.7267%" y="629" width="0.1608%" height="15" fill="rgb(250,191,31)" fg:x="1054" fg:w="2"/><text x="84.9767%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.8071%" y="613" width="0.0804%" height="15" fill="rgb(224,11,50)" fg:x="1055" fg:w="1"/><text x="85.0571%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.8071%" y="597" width="0.0804%" height="15" fill="rgb(231,171,7)" fg:x="1055" fg:w="1"/><text x="85.0571%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.8071%" y="581" width="0.0804%" height="15" fill="rgb(252,214,10)" fg:x="1055" fg:w="1"/><text x="85.0571%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="84.8875%" y="661" width="0.0804%" height="15" fill="rgb(249,45,46)" fg:x="1056" fg:w="1"/><text x="85.1375%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.8875%" y="645" width="0.0804%" height="15" fill="rgb(240,173,7)" fg:x="1056" fg:w="1"/><text x="85.1375%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="84.8875%" y="629" width="0.0804%" height="15" fill="rgb(235,214,13)" fg:x="1056" fg:w="1"/><text x="85.1375%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.32%)</title><rect x="84.7267%" y="677" width="0.3215%" height="15" fill="rgb(245,156,8)" fg:x="1054" fg:w="4"/><text x="84.9767%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="84.9678%" y="661" width="0.0804%" height="15" fill="rgb(235,46,12)" fg:x="1057" fg:w="1"/><text x="85.2178%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.9678%" y="645" width="0.0804%" height="15" fill="rgb(221,81,14)" fg:x="1057" fg:w="1"/><text x="85.2178%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="84.9678%" y="629" width="0.0804%" height="15" fill="rgb(238,207,9)" fg:x="1057" fg:w="1"/><text x="85.2178%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="84.9678%" y="613" width="0.0804%" height="15" fill="rgb(224,129,35)" fg:x="1057" fg:w="1"/><text x="85.2178%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.9678%" y="597" width="0.0804%" height="15" fill="rgb(243,218,34)" fg:x="1057" fg:w="1"/><text x="85.2178%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.9678%" y="581" width="0.0804%" height="15" fill="rgb(220,166,13)" fg:x="1057" fg:w="1"/><text x="85.2178%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0482%" y="629" width="0.0804%" height="15" fill="rgb(227,167,49)" fg:x="1058" fg:w="1"/><text x="85.2982%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0482%" y="613" width="0.0804%" height="15" fill="rgb(234,142,12)" fg:x="1058" fg:w="1"/><text x="85.2982%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.0482%" y="597" width="0.0804%" height="15" fill="rgb(207,100,48)" fg:x="1058" fg:w="1"/><text x="85.2982%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="85.0482%" y="661" width="0.1608%" height="15" fill="rgb(210,25,14)" fg:x="1058" fg:w="2"/><text x="85.2982%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="85.0482%" y="645" width="0.1608%" height="15" fill="rgb(246,116,27)" fg:x="1058" fg:w="2"/><text x="85.2982%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.1286%" y="629" width="0.0804%" height="15" fill="rgb(214,193,42)" fg:x="1059" fg:w="1"/><text x="85.3786%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.1286%" y="613" width="0.0804%" height="15" fill="rgb(214,122,8)" fg:x="1059" fg:w="1"/><text x="85.3786%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.1286%" y="597" width="0.0804%" height="15" fill="rgb(244,173,18)" fg:x="1059" fg:w="1"/><text x="85.3786%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.1286%" y="581" width="0.0804%" height="15" fill="rgb(232,68,19)" fg:x="1059" fg:w="1"/><text x="85.3786%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.1286%" y="565" width="0.0804%" height="15" fill="rgb(236,224,1)" fg:x="1059" fg:w="1"/><text x="85.3786%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.1286%" y="549" width="0.0804%" height="15" fill="rgb(240,11,8)" fg:x="1059" fg:w="1"/><text x="85.3786%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.1286%" y="533" width="0.0804%" height="15" fill="rgb(244,159,20)" fg:x="1059" fg:w="1"/><text x="85.3786%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.2090%" y="549" width="0.0804%" height="15" fill="rgb(240,223,54)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.2090%" y="533" width="0.0804%" height="15" fill="rgb(237,146,5)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.2090%" y="517" width="0.0804%" height="15" fill="rgb(218,221,32)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.2090%" y="501" width="0.0804%" height="15" fill="rgb(244,96,26)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.2090%" y="485" width="0.0804%" height="15" fill="rgb(245,184,37)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.2090%" y="469" width="0.0804%" height="15" fill="rgb(248,91,47)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="85.2090%" y="453" width="0.0804%" height="15" fill="rgb(243,199,8)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="85.2090%" y="437" width="0.0804%" height="15" fill="rgb(249,12,15)" fg:x="1060" fg:w="1"/><text x="85.4590%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="85.2090%" y="597" width="0.1608%" height="15" fill="rgb(245,97,12)" fg:x="1060" fg:w="2"/><text x="85.4590%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.2090%" y="581" width="0.1608%" height="15" fill="rgb(244,61,1)" fg:x="1060" fg:w="2"/><text x="85.4590%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.2090%" y="565" width="0.1608%" height="15" fill="rgb(222,194,10)" fg:x="1060" fg:w="2"/><text x="85.4590%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.2894%" y="549" width="0.0804%" height="15" fill="rgb(226,178,8)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.2894%" y="533" width="0.0804%" height="15" fill="rgb(241,32,34)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.2894%" y="517" width="0.0804%" height="15" fill="rgb(254,26,6)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.2894%" y="501" width="0.0804%" height="15" fill="rgb(249,71,11)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.2894%" y="485" width="0.0804%" height="15" fill="rgb(232,170,27)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.2894%" y="469" width="0.0804%" height="15" fill="rgb(214,223,17)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.2894%" y="453" width="0.0804%" height="15" fill="rgb(250,18,15)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.2894%" y="437" width="0.0804%" height="15" fill="rgb(212,153,51)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.2894%" y="421" width="0.0804%" height="15" fill="rgb(219,194,12)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.2894%" y="405" width="0.0804%" height="15" fill="rgb(212,58,17)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.2894%" y="389" width="0.0804%" height="15" fill="rgb(254,5,10)" fg:x="1061" fg:w="1"/><text x="85.5394%" y="399.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (76 samples, 6.11%)</title><rect x="79.3408%" y="709" width="6.1093%" height="15" fill="rgb(246,91,7)" fg:x="987" fg:w="76"/><text x="79.5908%" y="719.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.72%)</title><rect x="84.7267%" y="693" width="0.7235%" height="15" fill="rgb(218,108,49)" fg:x="1054" fg:w="9"/><text x="84.9767%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="85.0482%" y="677" width="0.4019%" height="15" fill="rgb(238,123,20)" fg:x="1058" fg:w="5"/><text x="85.2982%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="85.2090%" y="661" width="0.2412%" height="15" fill="rgb(231,69,23)" fg:x="1060" fg:w="3"/><text x="85.4590%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="85.2090%" y="645" width="0.2412%" height="15" fill="rgb(230,209,3)" fg:x="1060" fg:w="3"/><text x="85.4590%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="85.2090%" y="629" width="0.2412%" height="15" fill="rgb(231,19,0)" fg:x="1060" fg:w="3"/><text x="85.4590%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="85.2090%" y="613" width="0.2412%" height="15" fill="rgb(226,192,25)" fg:x="1060" fg:w="3"/><text x="85.4590%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="85.3698%" y="597" width="0.0804%" height="15" fill="rgb(223,175,53)" fg:x="1062" fg:w="1"/><text x="85.6198%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.3698%" y="581" width="0.0804%" height="15" fill="rgb(248,35,51)" fg:x="1062" fg:w="1"/><text x="85.6198%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="85.4502%" y="693" width="0.0804%" height="15" fill="rgb(230,37,26)" fg:x="1063" fg:w="1"/><text x="85.7002%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.4502%" y="677" width="0.0804%" height="15" fill="rgb(206,120,22)" fg:x="1063" fg:w="1"/><text x="85.7002%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.4502%" y="661" width="0.0804%" height="15" fill="rgb(207,165,28)" fg:x="1063" fg:w="1"/><text x="85.7002%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.4502%" y="645" width="0.0804%" height="15" fill="rgb(226,23,46)" fg:x="1063" fg:w="1"/><text x="85.7002%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.4502%" y="629" width="0.0804%" height="15" fill="rgb(208,130,44)" fg:x="1063" fg:w="1"/><text x="85.7002%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.4502%" y="613" width="0.0804%" height="15" fill="rgb(231,67,8)" fg:x="1063" fg:w="1"/><text x="85.7002%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="85.4502%" y="597" width="0.0804%" height="15" fill="rgb(205,183,22)" fg:x="1063" fg:w="1"/><text x="85.7002%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="85.4502%" y="581" width="0.0804%" height="15" fill="rgb(224,47,9)" fg:x="1063" fg:w="1"/><text x="85.7002%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="85.5305%" y="693" width="0.0804%" height="15" fill="rgb(250,183,49)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="85.5305%" y="677" width="0.0804%" height="15" fill="rgb(220,151,39)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="85.5305%" y="661" width="0.0804%" height="15" fill="rgb(220,118,20)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="85.5305%" y="645" width="0.0804%" height="15" fill="rgb(231,65,51)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="85.5305%" y="629" width="0.0804%" height="15" fill="rgb(253,125,37)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="85.5305%" y="613" width="0.0804%" height="15" fill="rgb(232,102,6)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="85.5305%" y="597" width="0.0804%" height="15" fill="rgb(251,105,13)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="85.5305%" y="581" width="0.0804%" height="15" fill="rgb(222,179,29)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="85.5305%" y="565" width="0.0804%" height="15" fill="rgb(229,180,53)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="575.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="85.5305%" y="549" width="0.0804%" height="15" fill="rgb(238,104,13)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="85.5305%" y="533" width="0.0804%" height="15" fill="rgb(210,130,5)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.5305%" y="517" width="0.0804%" height="15" fill="rgb(233,87,49)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.5305%" y="501" width="0.0804%" height="15" fill="rgb(243,34,9)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="85.5305%" y="485" width="0.0804%" height="15" fill="rgb(235,225,10)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="85.5305%" y="469" width="0.0804%" height="15" fill="rgb(212,0,30)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.5305%" y="453" width="0.0804%" height="15" fill="rgb(211,177,0)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="85.5305%" y="437" width="0.0804%" height="15" fill="rgb(225,220,11)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="85.5305%" y="421" width="0.0804%" height="15" fill="rgb(215,10,13)" fg:x="1064" fg:w="1"/><text x="85.7805%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="85.6109%" y="661" width="0.0804%" height="15" fill="rgb(240,177,14)" fg:x="1065" fg:w="1"/><text x="85.8609%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="85.6109%" y="645" width="0.0804%" height="15" fill="rgb(243,7,39)" fg:x="1065" fg:w="1"/><text x="85.8609%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="85.9325%" y="501" width="0.0804%" height="15" fill="rgb(212,99,0)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="85.9325%" y="485" width="0.0804%" height="15" fill="rgb(225,162,48)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="85.9325%" y="565" width="0.1608%" height="15" fill="rgb(246,16,25)" fg:x="1069" fg:w="2"/><text x="86.1825%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="85.9325%" y="549" width="0.1608%" height="15" fill="rgb(220,150,2)" fg:x="1069" fg:w="2"/><text x="86.1825%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="85.9325%" y="533" width="0.1608%" height="15" fill="rgb(237,113,11)" fg:x="1069" fg:w="2"/><text x="86.1825%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="85.9325%" y="517" width="0.1608%" height="15" fill="rgb(236,70,20)" fg:x="1069" fg:w="2"/><text x="86.1825%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="86.0129%" y="501" width="0.0804%" height="15" fill="rgb(234,94,7)" fg:x="1070" fg:w="1"/><text x="86.2629%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="86.0129%" y="485" width="0.0804%" height="15" fill="rgb(250,221,0)" fg:x="1070" fg:w="1"/><text x="86.2629%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.0129%" y="469" width="0.0804%" height="15" fill="rgb(245,149,46)" fg:x="1070" fg:w="1"/><text x="86.2629%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="86.0932%" y="549" width="0.0804%" height="15" fill="rgb(215,37,27)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.0932%" y="533" width="0.0804%" height="15" fill="rgb(232,65,3)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.0932%" y="517" width="0.0804%" height="15" fill="rgb(214,2,16)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.0932%" y="501" width="0.0804%" height="15" fill="rgb(227,131,50)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.0932%" y="485" width="0.0804%" height="15" fill="rgb(247,131,45)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.0932%" y="469" width="0.0804%" height="15" fill="rgb(215,97,47)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.0932%" y="453" width="0.0804%" height="15" fill="rgb(233,143,12)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="85.6913%" y="597" width="0.6431%" height="15" fill="rgb(222,57,17)" fg:x="1066" fg:w="8"/><text x="85.9413%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="85.9325%" y="581" width="0.4019%" height="15" fill="rgb(214,119,38)" fg:x="1069" fg:w="5"/><text x="86.1825%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="86.0932%" y="565" width="0.2412%" height="15" fill="rgb(217,28,47)" fg:x="1071" fg:w="3"/><text x="86.3432%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="86.1736%" y="549" width="0.1608%" height="15" fill="rgb(231,14,52)" fg:x="1072" fg:w="2"/><text x="86.4236%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="86.2540%" y="533" width="0.0804%" height="15" fill="rgb(220,158,18)" fg:x="1073" fg:w="1"/><text x="86.5040%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.2540%" y="517" width="0.0804%" height="15" fill="rgb(222,143,46)" fg:x="1073" fg:w="1"/><text x="86.5040%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.2540%" y="501" width="0.0804%" height="15" fill="rgb(227,165,5)" fg:x="1073" fg:w="1"/><text x="86.5040%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.2540%" y="485" width="0.0804%" height="15" fill="rgb(216,222,49)" fg:x="1073" fg:w="1"/><text x="86.5040%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="85.6913%" y="613" width="0.7235%" height="15" fill="rgb(238,73,39)" fg:x="1066" fg:w="9"/><text x="85.9413%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.3344%" y="597" width="0.0804%" height="15" fill="rgb(252,115,9)" fg:x="1074" fg:w="1"/><text x="86.5844%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.3344%" y="581" width="0.0804%" height="15" fill="rgb(238,202,4)" fg:x="1074" fg:w="1"/><text x="86.5844%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4952%" y="565" width="0.0804%" height="15" fill="rgb(252,153,44)" fg:x="1076" fg:w="1"/><text x="86.7452%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.5756%" y="565" width="0.0804%" height="15" fill="rgb(235,128,27)" fg:x="1077" fg:w="1"/><text x="86.8256%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.7363%" y="517" width="0.0804%" height="15" fill="rgb(221,121,47)" fg:x="1079" fg:w="1"/><text x="86.9863%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="86.8167%" y="517" width="0.0804%" height="15" fill="rgb(247,211,47)" fg:x="1080" fg:w="1"/><text x="87.0667%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="86.8167%" y="501" width="0.0804%" height="15" fill="rgb(252,47,49)" fg:x="1080" fg:w="1"/><text x="87.0667%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.8167%" y="485" width="0.0804%" height="15" fill="rgb(219,119,53)" fg:x="1080" fg:w="1"/><text x="87.0667%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="86.4952%" y="581" width="0.4823%" height="15" fill="rgb(243,165,53)" fg:x="1076" fg:w="6"/><text x="86.7452%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="86.6559%" y="565" width="0.3215%" height="15" fill="rgb(230,12,35)" fg:x="1078" fg:w="4"/><text x="86.9059%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="86.7363%" y="549" width="0.2412%" height="15" fill="rgb(239,57,49)" fg:x="1079" fg:w="3"/><text x="86.9863%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="86.7363%" y="533" width="0.2412%" height="15" fill="rgb(231,154,7)" fg:x="1079" fg:w="3"/><text x="86.9863%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="86.8971%" y="517" width="0.0804%" height="15" fill="rgb(248,81,34)" fg:x="1081" fg:w="1"/><text x="87.1471%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="86.8971%" y="501" width="0.0804%" height="15" fill="rgb(247,9,5)" fg:x="1081" fg:w="1"/><text x="87.1471%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="86.4952%" y="597" width="0.6431%" height="15" fill="rgb(228,172,27)" fg:x="1076" fg:w="8"/><text x="86.7452%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="86.9775%" y="581" width="0.1608%" height="15" fill="rgb(230,57,44)" fg:x="1082" fg:w="2"/><text x="87.2275%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="86.9775%" y="565" width="0.1608%" height="15" fill="rgb(249,35,22)" fg:x="1082" fg:w="2"/><text x="87.2275%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="86.9775%" y="549" width="0.1608%" height="15" fill="rgb(250,137,27)" fg:x="1082" fg:w="2"/><text x="87.2275%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="87.0579%" y="533" width="0.0804%" height="15" fill="rgb(251,57,31)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="87.0579%" y="517" width="0.0804%" height="15" fill="rgb(238,60,0)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="87.0579%" y="501" width="0.0804%" height="15" fill="rgb(242,185,39)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.2186%" y="565" width="0.0804%" height="15" fill="rgb(240,63,43)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="87.2186%" y="549" width="0.0804%" height="15" fill="rgb(236,155,6)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="87.2990%" y="565" width="0.0804%" height="15" fill="rgb(215,11,29)" fg:x="1086" fg:w="1"/><text x="87.5490%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.2990%" y="549" width="0.0804%" height="15" fill="rgb(228,180,48)" fg:x="1086" fg:w="1"/><text x="87.5490%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.2990%" y="533" width="0.0804%" height="15" fill="rgb(241,102,12)" fg:x="1086" fg:w="1"/><text x="87.5490%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2990%" y="517" width="0.0804%" height="15" fill="rgb(246,213,4)" fg:x="1086" fg:w="1"/><text x="87.5490%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="87.3794%" y="565" width="0.0804%" height="15" fill="rgb(218,134,35)" fg:x="1087" fg:w="1"/><text x="87.6294%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="87.4598%" y="565" width="0.0804%" height="15" fill="rgb(251,117,35)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.4598%" y="549" width="0.0804%" height="15" fill="rgb(206,156,45)" fg:x="1088" fg:w="1"/><text x="87.7098%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="87.6206%" y="517" width="0.1608%" height="15" fill="rgb(218,52,27)" fg:x="1090" fg:w="2"/><text x="87.8706%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="87.6206%" y="501" width="0.1608%" height="15" fill="rgb(238,83,36)" fg:x="1090" fg:w="2"/><text x="87.8706%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="87.6206%" y="485" width="0.1608%" height="15" fill="rgb(218,53,43)" fg:x="1090" fg:w="2"/><text x="87.8706%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="87.7010%" y="469" width="0.0804%" height="15" fill="rgb(239,54,39)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="87.7010%" y="453" width="0.0804%" height="15" fill="rgb(212,198,13)" fg:x="1091" fg:w="1"/><text x="87.9510%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="87.9421%" y="469" width="0.0804%" height="15" fill="rgb(234,54,46)" fg:x="1094" fg:w="1"/><text x="88.1921%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.9421%" y="453" width="0.0804%" height="15" fill="rgb(217,120,7)" fg:x="1094" fg:w="1"/><text x="88.1921%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="87.5402%" y="549" width="0.6431%" height="15" fill="rgb(246,39,15)" fg:x="1089" fg:w="8"/><text x="87.7902%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="87.5402%" y="533" width="0.6431%" height="15" fill="rgb(242,143,31)" fg:x="1089" fg:w="8"/><text x="87.7902%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="87.7814%" y="517" width="0.4019%" height="15" fill="rgb(252,60,24)" fg:x="1092" fg:w="5"/><text x="88.0314%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="87.8617%" y="501" width="0.3215%" height="15" fill="rgb(249,220,7)" fg:x="1093" fg:w="4"/><text x="88.1117%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="87.9421%" y="485" width="0.2412%" height="15" fill="rgb(236,67,13)" fg:x="1094" fg:w="3"/><text x="88.1921%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="88.0225%" y="469" width="0.1608%" height="15" fill="rgb(210,62,39)" fg:x="1095" fg:w="2"/><text x="88.2725%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1833%" y="549" width="0.0804%" height="15" fill="rgb(219,122,53)" fg:x="1097" fg:w="1"/><text x="88.4333%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.21%)</title><rect x="87.1383%" y="597" width="1.2058%" height="15" fill="rgb(218,87,25)" fg:x="1084" fg:w="15"/><text x="87.3883%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.21%)</title><rect x="87.1383%" y="581" width="1.2058%" height="15" fill="rgb(234,179,48)" fg:x="1084" fg:w="15"/><text x="87.3883%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="87.5402%" y="565" width="0.8039%" height="15" fill="rgb(248,90,0)" fg:x="1089" fg:w="10"/><text x="87.7902%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.2637%" y="549" width="0.0804%" height="15" fill="rgb(207,228,37)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2637%" y="533" width="0.0804%" height="15" fill="rgb(235,214,15)" fg:x="1098" fg:w="1"/><text x="88.5137%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.3441%" y="453" width="0.0804%" height="15" fill="rgb(210,144,39)" fg:x="1099" fg:w="1"/><text x="88.5941%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.4244%" y="437" width="0.0804%" height="15" fill="rgb(222,67,41)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.4244%" y="421" width="0.0804%" height="15" fill="rgb(205,35,37)" fg:x="1100" fg:w="1"/><text x="88.6744%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="88.3441%" y="533" width="0.2412%" height="15" fill="rgb(216,125,40)" fg:x="1099" fg:w="3"/><text x="88.5941%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="88.3441%" y="517" width="0.2412%" height="15" fill="rgb(228,227,20)" fg:x="1099" fg:w="3"/><text x="88.5941%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="88.3441%" y="501" width="0.2412%" height="15" fill="rgb(242,173,45)" fg:x="1099" fg:w="3"/><text x="88.5941%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="88.3441%" y="485" width="0.2412%" height="15" fill="rgb(215,79,24)" fg:x="1099" fg:w="3"/><text x="88.5941%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="88.3441%" y="469" width="0.2412%" height="15" fill="rgb(238,164,38)" fg:x="1099" fg:w="3"/><text x="88.5941%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="88.4244%" y="453" width="0.1608%" height="15" fill="rgb(245,196,38)" fg:x="1100" fg:w="2"/><text x="88.6744%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.5048%" y="437" width="0.0804%" height="15" fill="rgb(231,217,29)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.5048%" y="421" width="0.0804%" height="15" fill="rgb(245,6,4)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="88.5048%" y="405" width="0.0804%" height="15" fill="rgb(214,76,49)" fg:x="1101" fg:w="1"/><text x="88.7548%" y="415.50"></text></g><g><title>engine::session::state::State::close (38 samples, 3.05%)</title><rect x="85.6109%" y="693" width="3.0547%" height="15" fill="rgb(205,96,12)" fg:x="1065" fg:w="38"/><text x="85.8609%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (38 samples, 3.05%)</title><rect x="85.6109%" y="677" width="3.0547%" height="15" fill="rgb(243,131,4)" fg:x="1065" fg:w="38"/><text x="85.8609%" y="687.50">eng..</text></g><g><title>core::iter::adapters::try_process (37 samples, 2.97%)</title><rect x="85.6913%" y="661" width="2.9743%" height="15" fill="rgb(214,114,4)" fg:x="1066" fg:w="37"/><text x="85.9413%" y="671.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 2.97%)</title><rect x="85.6913%" y="645" width="2.9743%" height="15" fill="rgb(234,215,15)" fg:x="1066" fg:w="37"/><text x="85.9413%" y="655.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (37 samples, 2.97%)</title><rect x="85.6913%" y="629" width="2.9743%" height="15" fill="rgb(250,216,45)" fg:x="1066" fg:w="37"/><text x="85.9413%" y="639.50">eng..</text></g><g><title>kernel::model::any_entity_changes (28 samples, 2.25%)</title><rect x="86.4148%" y="613" width="2.2508%" height="15" fill="rgb(236,128,4)" fg:x="1075" fg:w="28"/><text x="86.6648%" y="623.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="88.3441%" y="597" width="0.3215%" height="15" fill="rgb(234,50,33)" fg:x="1099" fg:w="4"/><text x="88.5941%" y="607.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="88.3441%" y="581" width="0.3215%" height="15" fill="rgb(253,131,37)" fg:x="1099" fg:w="4"/><text x="88.5941%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="88.3441%" y="565" width="0.3215%" height="15" fill="rgb(218,55,27)" fg:x="1099" fg:w="4"/><text x="88.5941%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="88.3441%" y="549" width="0.3215%" height="15" fill="rgb(241,220,28)" fg:x="1099" fg:w="4"/><text x="88.5941%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.5852%" y="533" width="0.0804%" height="15" fill="rgb(241,90,48)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="88.5852%" y="517" width="0.0804%" height="15" fill="rgb(216,43,37)" fg:x="1102" fg:w="1"/><text x="88.8352%" y="527.50"></text></g><g><title>engine::session::Session::close (42 samples, 3.38%)</title><rect x="85.4502%" y="709" width="3.3762%" height="15" fill="rgb(207,173,9)" fg:x="1063" fg:w="42"/><text x="85.7002%" y="719.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="88.6656%" y="693" width="0.1608%" height="15" fill="rgb(240,126,30)" fg:x="1103" fg:w="2"/><text x="88.9156%" y="703.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="88.8264%" y="645" width="0.0804%" height="15" fill="rgb(228,178,53)" fg:x="1105" fg:w="1"/><text x="89.0764%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="88.8264%" y="629" width="0.0804%" height="15" fill="rgb(217,33,4)" fg:x="1105" fg:w="1"/><text x="89.0764%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.9068%" y="453" width="0.0804%" height="15" fill="rgb(206,124,34)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="88.9068%" y="437" width="0.0804%" height="15" fill="rgb(208,122,53)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="88.9068%" y="469" width="0.1608%" height="15" fill="rgb(215,202,26)" fg:x="1106" fg:w="2"/><text x="89.1568%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.9871%" y="453" width="0.0804%" height="15" fill="rgb(232,198,31)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="88.9871%" y="437" width="0.0804%" height="15" fill="rgb(222,23,35)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="88.9871%" y="421" width="0.0804%" height="15" fill="rgb(242,27,53)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="88.9871%" y="405" width="0.0804%" height="15" fill="rgb(210,216,42)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="88.9871%" y="389" width="0.0804%" height="15" fill="rgb(234,39,38)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.9871%" y="373" width="0.0804%" height="15" fill="rgb(235,126,54)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="88.9871%" y="357" width="0.0804%" height="15" fill="rgb(235,150,33)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="88.9871%" y="341" width="0.0804%" height="15" fill="rgb(249,49,53)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="88.9871%" y="325" width="0.0804%" height="15" fill="rgb(238,60,50)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="88.9871%" y="309" width="0.0804%" height="15" fill="rgb(210,5,2)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="88.9871%" y="293" width="0.0804%" height="15" fill="rgb(214,207,24)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.9871%" y="277" width="0.0804%" height="15" fill="rgb(228,173,2)" fg:x="1107" fg:w="1"/><text x="89.2371%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="89.0675%" y="469" width="0.0804%" height="15" fill="rgb(244,26,8)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.0675%" y="453" width="0.0804%" height="15" fill="rgb(249,153,35)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.0675%" y="437" width="0.0804%" height="15" fill="rgb(221,215,40)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.0675%" y="421" width="0.0804%" height="15" fill="rgb(238,106,35)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.0675%" y="405" width="0.0804%" height="15" fill="rgb(207,195,21)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="89.0675%" y="389" width="0.0804%" height="15" fill="rgb(205,43,29)" fg:x="1108" fg:w="1"/><text x="89.3175%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="89.1479%" y="389" width="0.0804%" height="15" fill="rgb(236,35,21)" fg:x="1109" fg:w="1"/><text x="89.3979%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="89.1479%" y="373" width="0.0804%" height="15" fill="rgb(244,74,8)" fg:x="1109" fg:w="1"/><text x="89.3979%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="89.1479%" y="469" width="0.1608%" height="15" fill="rgb(241,229,7)" fg:x="1109" fg:w="2"/><text x="89.3979%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="89.1479%" y="453" width="0.1608%" height="15" fill="rgb(212,223,25)" fg:x="1109" fg:w="2"/><text x="89.3979%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.1479%" y="437" width="0.1608%" height="15" fill="rgb(234,58,53)" fg:x="1109" fg:w="2"/><text x="89.3979%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="89.1479%" y="421" width="0.1608%" height="15" fill="rgb(244,36,1)" fg:x="1109" fg:w="2"/><text x="89.3979%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.1479%" y="405" width="0.1608%" height="15" fill="rgb(222,40,54)" fg:x="1109" fg:w="2"/><text x="89.3979%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="89.2283%" y="389" width="0.0804%" height="15" fill="rgb(210,207,39)" fg:x="1110" fg:w="1"/><text x="89.4783%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.2283%" y="373" width="0.0804%" height="15" fill="rgb(234,52,14)" fg:x="1110" fg:w="1"/><text x="89.4783%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.2283%" y="357" width="0.0804%" height="15" fill="rgb(239,108,46)" fg:x="1110" fg:w="1"/><text x="89.4783%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="89.3087%" y="293" width="0.0804%" height="15" fill="rgb(252,223,5)" fg:x="1111" fg:w="1"/><text x="89.5587%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.3087%" y="277" width="0.0804%" height="15" fill="rgb(227,181,11)" fg:x="1111" fg:w="1"/><text x="89.5587%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="89.3087%" y="261" width="0.0804%" height="15" fill="rgb(248,126,40)" fg:x="1111" fg:w="1"/><text x="89.5587%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="89.3087%" y="245" width="0.0804%" height="15" fill="rgb(243,1,18)" fg:x="1111" fg:w="1"/><text x="89.5587%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="89.3087%" y="325" width="0.1608%" height="15" fill="rgb(214,145,23)" fg:x="1111" fg:w="2"/><text x="89.5587%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="89.3087%" y="309" width="0.1608%" height="15" fill="rgb(241,218,11)" fg:x="1111" fg:w="2"/><text x="89.5587%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.3891%" y="293" width="0.0804%" height="15" fill="rgb(214,219,24)" fg:x="1112" fg:w="1"/><text x="89.6391%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="89.3087%" y="341" width="0.2412%" height="15" fill="rgb(235,32,7)" fg:x="1111" fg:w="3"/><text x="89.5587%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.4695%" y="325" width="0.0804%" height="15" fill="rgb(227,121,28)" fg:x="1113" fg:w="1"/><text x="89.7195%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="89.4695%" y="309" width="0.0804%" height="15" fill="rgb(216,129,49)" fg:x="1113" fg:w="1"/><text x="89.7195%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.4695%" y="293" width="0.0804%" height="15" fill="rgb(207,194,50)" fg:x="1113" fg:w="1"/><text x="89.7195%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (10 samples, 0.80%)</title><rect x="88.9068%" y="565" width="0.8039%" height="15" fill="rgb(207,4,18)" fg:x="1106" fg:w="10"/><text x="89.1568%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (10 samples, 0.80%)</title><rect x="88.9068%" y="549" width="0.8039%" height="15" fill="rgb(213,50,30)" fg:x="1106" fg:w="10"/><text x="89.1568%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.80%)</title><rect x="88.9068%" y="533" width="0.8039%" height="15" fill="rgb(208,77,22)" fg:x="1106" fg:w="10"/><text x="89.1568%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.80%)</title><rect x="88.9068%" y="517" width="0.8039%" height="15" fill="rgb(244,204,34)" fg:x="1106" fg:w="10"/><text x="89.1568%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="88.9068%" y="501" width="0.8039%" height="15" fill="rgb(230,20,17)" fg:x="1106" fg:w="10"/><text x="89.1568%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="88.9068%" y="485" width="0.8039%" height="15" fill="rgb(237,83,15)" fg:x="1106" fg:w="10"/><text x="89.1568%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="89.3087%" y="469" width="0.4019%" height="15" fill="rgb(221,109,25)" fg:x="1111" fg:w="5"/><text x="89.5587%" y="479.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="89.3087%" y="453" width="0.4019%" height="15" fill="rgb(205,194,52)" fg:x="1111" fg:w="5"/><text x="89.5587%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="89.3087%" y="437" width="0.4019%" height="15" fill="rgb(244,173,54)" fg:x="1111" fg:w="5"/><text x="89.5587%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="89.3087%" y="421" width="0.4019%" height="15" fill="rgb(227,181,18)" fg:x="1111" fg:w="5"/><text x="89.5587%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="89.3087%" y="405" width="0.4019%" height="15" fill="rgb(238,36,30)" fg:x="1111" fg:w="5"/><text x="89.5587%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="89.3087%" y="389" width="0.4019%" height="15" fill="rgb(254,85,0)" fg:x="1111" fg:w="5"/><text x="89.5587%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="89.3087%" y="373" width="0.4019%" height="15" fill="rgb(247,63,33)" fg:x="1111" fg:w="5"/><text x="89.5587%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="89.3087%" y="357" width="0.4019%" height="15" fill="rgb(220,7,54)" fg:x="1111" fg:w="5"/><text x="89.5587%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="89.5498%" y="341" width="0.1608%" height="15" fill="rgb(238,227,21)" fg:x="1114" fg:w="2"/><text x="89.7998%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="89.5498%" y="325" width="0.1608%" height="15" fill="rgb(237,29,31)" fg:x="1114" fg:w="2"/><text x="89.7998%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.6302%" y="309" width="0.0804%" height="15" fill="rgb(211,21,50)" fg:x="1115" fg:w="1"/><text x="89.8802%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (3 samples, 0.24%)</title><rect x="89.7910%" y="389" width="0.2412%" height="15" fill="rgb(239,119,2)" fg:x="1117" fg:w="3"/><text x="90.0410%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="89.7910%" y="373" width="0.2412%" height="15" fill="rgb(250,2,39)" fg:x="1117" fg:w="3"/><text x="90.0410%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (3 samples, 0.24%)</title><rect x="89.7910%" y="357" width="0.2412%" height="15" fill="rgb(244,46,53)" fg:x="1117" fg:w="3"/><text x="90.0410%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="89.7910%" y="341" width="0.2412%" height="15" fill="rgb(209,21,19)" fg:x="1117" fg:w="3"/><text x="90.0410%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="89.7910%" y="325" width="0.2412%" height="15" fill="rgb(236,145,4)" fg:x="1117" fg:w="3"/><text x="90.0410%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="89.7910%" y="309" width="0.2412%" height="15" fill="rgb(220,133,36)" fg:x="1117" fg:w="3"/><text x="90.0410%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="89.8714%" y="293" width="0.1608%" height="15" fill="rgb(244,18,3)" fg:x="1118" fg:w="2"/><text x="90.1214%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.9518%" y="277" width="0.0804%" height="15" fill="rgb(232,171,48)" fg:x="1119" fg:w="1"/><text x="90.2018%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="89.9518%" y="261" width="0.0804%" height="15" fill="rgb(223,223,53)" fg:x="1119" fg:w="1"/><text x="90.2018%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="90.0322%" y="357" width="0.0804%" height="15" fill="rgb(246,92,13)" fg:x="1120" fg:w="1"/><text x="90.2822%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.0322%" y="341" width="0.0804%" height="15" fill="rgb(229,171,10)" fg:x="1120" fg:w="1"/><text x="90.2822%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0322%" y="325" width="0.0804%" height="15" fill="rgb(213,131,26)" fg:x="1120" fg:w="1"/><text x="90.2822%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.0322%" y="309" width="0.0804%" height="15" fill="rgb(242,87,54)" fg:x="1120" fg:w="1"/><text x="90.2822%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0322%" y="293" width="0.0804%" height="15" fill="rgb(237,21,35)" fg:x="1120" fg:w="1"/><text x="90.2822%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.0322%" y="277" width="0.0804%" height="15" fill="rgb(253,13,47)" fg:x="1120" fg:w="1"/><text x="90.2822%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.1125%" y="325" width="0.0804%" height="15" fill="rgb(215,122,49)" fg:x="1121" fg:w="1"/><text x="90.3625%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="90.1125%" y="341" width="0.1608%" height="15" fill="rgb(209,179,30)" fg:x="1121" fg:w="2"/><text x="90.3625%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.1929%" y="325" width="0.0804%" height="15" fill="rgb(235,100,24)" fg:x="1122" fg:w="1"/><text x="90.4429%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.1929%" y="309" width="0.0804%" height="15" fill="rgb(209,67,24)" fg:x="1122" fg:w="1"/><text x="90.4429%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.1929%" y="293" width="0.0804%" height="15" fill="rgb(206,74,32)" fg:x="1122" fg:w="1"/><text x="90.4429%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.1929%" y="277" width="0.0804%" height="15" fill="rgb(212,45,25)" fg:x="1122" fg:w="1"/><text x="90.4429%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="90.1125%" y="357" width="0.2412%" height="15" fill="rgb(239,26,3)" fg:x="1121" fg:w="3"/><text x="90.3625%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="90.2733%" y="341" width="0.0804%" height="15" fill="rgb(218,36,15)" fg:x="1123" fg:w="1"/><text x="90.5233%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.3537%" y="357" width="0.0804%" height="15" fill="rgb(206,108,24)" fg:x="1124" fg:w="1"/><text x="90.6037%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.4341%" y="229" width="0.0804%" height="15" fill="rgb(234,204,42)" fg:x="1125" fg:w="1"/><text x="90.6841%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="90.4341%" y="357" width="0.1608%" height="15" fill="rgb(229,2,11)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="90.4341%" y="341" width="0.1608%" height="15" fill="rgb(221,20,48)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="90.4341%" y="325" width="0.1608%" height="15" fill="rgb(244,164,10)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="90.4341%" y="309" width="0.1608%" height="15" fill="rgb(243,229,2)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="90.4341%" y="293" width="0.1608%" height="15" fill="rgb(232,131,37)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="90.4341%" y="277" width="0.1608%" height="15" fill="rgb(217,156,11)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="90.4341%" y="261" width="0.1608%" height="15" fill="rgb(239,99,48)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="90.4341%" y="245" width="0.1608%" height="15" fill="rgb(231,209,9)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="90.5145%" y="229" width="0.0804%" height="15" fill="rgb(254,97,27)" fg:x="1126" fg:w="1"/><text x="90.7645%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.5949%" y="341" width="0.0804%" height="15" fill="rgb(223,151,38)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="90.7556%" y="181" width="0.0804%" height="15" fill="rgb(219,206,35)" fg:x="1129" fg:w="1"/><text x="91.0056%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="90.7556%" y="277" width="0.1608%" height="15" fill="rgb(216,130,31)" fg:x="1129" fg:w="2"/><text x="91.0056%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="90.7556%" y="261" width="0.1608%" height="15" fill="rgb(251,97,34)" fg:x="1129" fg:w="2"/><text x="91.0056%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="90.7556%" y="245" width="0.1608%" height="15" fill="rgb(246,159,47)" fg:x="1129" fg:w="2"/><text x="91.0056%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="90.7556%" y="229" width="0.1608%" height="15" fill="rgb(232,87,10)" fg:x="1129" fg:w="2"/><text x="91.0056%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="90.7556%" y="213" width="0.1608%" height="15" fill="rgb(249,1,37)" fg:x="1129" fg:w="2"/><text x="91.0056%" y="223.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="90.7556%" y="197" width="0.1608%" height="15" fill="rgb(239,135,14)" fg:x="1129" fg:w="2"/><text x="91.0056%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="90.8360%" y="181" width="0.0804%" height="15" fill="rgb(253,116,46)" fg:x="1130" fg:w="1"/><text x="91.0860%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="90.9164%" y="229" width="0.0804%" height="15" fill="rgb(222,217,37)" fg:x="1131" fg:w="1"/><text x="91.1664%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9164%" y="213" width="0.0804%" height="15" fill="rgb(252,96,8)" fg:x="1131" fg:w="1"/><text x="91.1664%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.0772%" y="197" width="0.0804%" height="15" fill="rgb(254,103,41)" fg:x="1133" fg:w="1"/><text x="91.3272%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="90.9968%" y="213" width="0.4019%" height="15" fill="rgb(218,213,19)" fg:x="1132" fg:w="5"/><text x="91.2468%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="91.1576%" y="197" width="0.2412%" height="15" fill="rgb(253,95,21)" fg:x="1134" fg:w="3"/><text x="91.4076%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.3183%" y="181" width="0.0804%" height="15" fill="rgb(229,26,28)" fg:x="1136" fg:w="1"/><text x="91.5683%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="91.5595%" y="149" width="0.0804%" height="15" fill="rgb(230,129,16)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="91.5595%" y="133" width="0.0804%" height="15" fill="rgb(236,126,17)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5595%" y="117" width="0.0804%" height="15" fill="rgb(209,33,33)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5595%" y="101" width="0.0804%" height="15" fill="rgb(227,85,29)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5595%" y="85" width="0.0804%" height="15" fill="rgb(241,53,46)" fg:x="1139" fg:w="1"/><text x="91.8095%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (16 samples, 1.29%)</title><rect x="91.6399%" y="149" width="1.2862%" height="15" fill="rgb(228,167,53)" fg:x="1140" fg:w="16"/><text x="91.8899%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (16 samples, 1.29%)</title><rect x="91.6399%" y="133" width="1.2862%" height="15" fill="rgb(238,195,45)" fg:x="1140" fg:w="16"/><text x="91.8899%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 1.29%)</title><rect x="91.6399%" y="117" width="1.2862%" height="15" fill="rgb(252,124,45)" fg:x="1140" fg:w="16"/><text x="91.8899%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.61%)</title><rect x="91.3987%" y="197" width="1.6077%" height="15" fill="rgb(251,38,35)" fg:x="1137" fg:w="20"/><text x="91.6487%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (20 samples, 1.61%)</title><rect x="91.3987%" y="181" width="1.6077%" height="15" fill="rgb(227,33,2)" fg:x="1137" fg:w="20"/><text x="91.6487%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (20 samples, 1.61%)</title><rect x="91.3987%" y="165" width="1.6077%" height="15" fill="rgb(223,157,46)" fg:x="1137" fg:w="20"/><text x="91.6487%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="92.9260%" y="149" width="0.0804%" height="15" fill="rgb(222,78,41)" fg:x="1156" fg:w="1"/><text x="93.1760%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="93.0064%" y="181" width="0.0804%" height="15" fill="rgb(248,176,11)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.0064%" y="165" width="0.0804%" height="15" fill="rgb(241,221,18)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.0064%" y="149" width="0.0804%" height="15" fill="rgb(218,85,22)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.0064%" y="133" width="0.0804%" height="15" fill="rgb(222,223,7)" fg:x="1157" fg:w="1"/><text x="93.2564%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="93.0868%" y="181" width="0.0804%" height="15" fill="rgb(254,59,39)" fg:x="1158" fg:w="1"/><text x="93.3368%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.0868%" y="165" width="0.0804%" height="15" fill="rgb(247,100,27)" fg:x="1158" fg:w="1"/><text x="93.3368%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (28 samples, 2.25%)</title><rect x="90.9968%" y="229" width="2.2508%" height="15" fill="rgb(237,207,10)" fg:x="1132" fg:w="28"/><text x="91.2468%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (23 samples, 1.85%)</title><rect x="91.3987%" y="213" width="1.8489%" height="15" fill="rgb(220,121,28)" fg:x="1137" fg:w="23"/><text x="91.6487%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="93.0064%" y="197" width="0.2412%" height="15" fill="rgb(213,223,20)" fg:x="1157" fg:w="3"/><text x="93.2564%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="93.1672%" y="181" width="0.0804%" height="15" fill="rgb(205,121,27)" fg:x="1159" fg:w="1"/><text x="93.4172%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.2476%" y="181" width="0.0804%" height="15" fill="rgb(253,24,53)" fg:x="1160" fg:w="1"/><text x="93.4976%" y="191.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (31 samples, 2.49%)</title><rect x="90.9164%" y="261" width="2.4920%" height="15" fill="rgb(224,224,47)" fg:x="1131" fg:w="31"/><text x="91.1664%" y="271.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (31 samples, 2.49%)</title><rect x="90.9164%" y="245" width="2.4920%" height="15" fill="rgb(250,125,36)" fg:x="1131" fg:w="31"/><text x="91.1664%" y="255.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="93.2476%" y="229" width="0.1608%" height="15" fill="rgb(240,144,38)" fg:x="1160" fg:w="2"/><text x="93.4976%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="93.2476%" y="213" width="0.1608%" height="15" fill="rgb(250,15,50)" fg:x="1160" fg:w="2"/><text x="93.4976%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="93.2476%" y="197" width="0.1608%" height="15" fill="rgb(210,24,26)" fg:x="1160" fg:w="2"/><text x="93.4976%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="93.3280%" y="181" width="0.0804%" height="15" fill="rgb(234,53,53)" fg:x="1161" fg:w="1"/><text x="93.5780%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.3280%" y="165" width="0.0804%" height="15" fill="rgb(208,108,28)" fg:x="1161" fg:w="1"/><text x="93.5780%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.3280%" y="149" width="0.0804%" height="15" fill="rgb(227,143,7)" fg:x="1161" fg:w="1"/><text x="93.5780%" y="159.50"></text></g><g><title>regex::regex::string::Regex::new (32 samples, 2.57%)</title><rect x="90.9164%" y="277" width="2.5723%" height="15" fill="rgb(238,189,38)" fg:x="1131" fg:w="32"/><text x="91.1664%" y="287.50">re..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="93.4084%" y="261" width="0.0804%" height="15" fill="rgb(222,69,15)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="271.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="93.4084%" y="245" width="0.0804%" height="15" fill="rgb(213,169,7)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (37 samples, 2.97%)</title><rect x="90.6752%" y="293" width="2.9743%" height="15" fill="rgb(251,219,4)" fg:x="1128" fg:w="37"/><text x="90.9252%" y="303.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="93.4887%" y="277" width="0.1608%" height="15" fill="rgb(241,55,40)" fg:x="1163" fg:w="2"/><text x="93.7387%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="93.4887%" y="261" width="0.1608%" height="15" fill="rgb(243,57,30)" fg:x="1163" fg:w="2"/><text x="93.7387%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="93.4887%" y="245" width="0.1608%" height="15" fill="rgb(234,50,30)" fg:x="1163" fg:w="2"/><text x="93.7387%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="93.5691%" y="229" width="0.0804%" height="15" fill="rgb(239,23,42)" fg:x="1164" fg:w="1"/><text x="93.8191%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="93.5691%" y="213" width="0.0804%" height="15" fill="rgb(217,38,19)" fg:x="1164" fg:w="1"/><text x="93.8191%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.6495%" y="277" width="0.0804%" height="15" fill="rgb(215,179,16)" fg:x="1165" fg:w="1"/><text x="93.8995%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="93.6495%" y="261" width="0.0804%" height="15" fill="rgb(254,21,37)" fg:x="1165" fg:w="1"/><text x="93.8995%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.6495%" y="245" width="0.0804%" height="15" fill="rgb(219,207,48)" fg:x="1165" fg:w="1"/><text x="93.8995%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="93.6495%" y="229" width="0.0804%" height="15" fill="rgb(227,225,41)" fg:x="1165" fg:w="1"/><text x="93.8995%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="93.6495%" y="213" width="0.0804%" height="15" fill="rgb(223,130,1)" fg:x="1165" fg:w="1"/><text x="93.8995%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.6495%" y="197" width="0.0804%" height="15" fill="rgb(249,54,42)" fg:x="1165" fg:w="1"/><text x="93.8995%" y="207.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="93.7299%" y="277" width="0.1608%" height="15" fill="rgb(248,69,25)" fg:x="1166" fg:w="2"/><text x="93.9799%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="93.7299%" y="261" width="0.1608%" height="15" fill="rgb(234,21,32)" fg:x="1166" fg:w="2"/><text x="93.9799%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="93.7299%" y="245" width="0.1608%" height="15" fill="rgb(252,136,6)" fg:x="1166" fg:w="2"/><text x="93.9799%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="93.7299%" y="229" width="0.1608%" height="15" fill="rgb(245,87,12)" fg:x="1166" fg:w="2"/><text x="93.9799%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="93.7299%" y="213" width="0.1608%" height="15" fill="rgb(208,12,15)" fg:x="1166" fg:w="2"/><text x="93.9799%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="93.7299%" y="197" width="0.1608%" height="15" fill="rgb(250,98,2)" fg:x="1166" fg:w="2"/><text x="93.9799%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.8103%" y="181" width="0.0804%" height="15" fill="rgb(205,213,15)" fg:x="1167" fg:w="1"/><text x="94.0603%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.8103%" y="165" width="0.0804%" height="15" fill="rgb(248,192,44)" fg:x="1167" fg:w="1"/><text x="94.0603%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.8103%" y="149" width="0.0804%" height="15" fill="rgb(221,89,17)" fg:x="1167" fg:w="1"/><text x="94.0603%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="93.8907%" y="213" width="0.1608%" height="15" fill="rgb(209,55,3)" fg:x="1168" fg:w="2"/><text x="94.1407%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="93.9711%" y="197" width="0.0804%" height="15" fill="rgb(247,23,45)" fg:x="1169" fg:w="1"/><text x="94.2211%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.1318%" y="181" width="0.0804%" height="15" fill="rgb(235,152,23)" fg:x="1171" fg:w="1"/><text x="94.3818%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.1318%" y="165" width="0.0804%" height="15" fill="rgb(244,63,13)" fg:x="1171" fg:w="1"/><text x="94.3818%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.1318%" y="149" width="0.0804%" height="15" fill="rgb(227,30,37)" fg:x="1171" fg:w="1"/><text x="94.3818%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="94.0514%" y="213" width="0.2412%" height="15" fill="rgb(224,49,42)" fg:x="1170" fg:w="3"/><text x="94.3014%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="94.0514%" y="197" width="0.2412%" height="15" fill="rgb(218,129,5)" fg:x="1170" fg:w="3"/><text x="94.3014%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="94.2122%" y="181" width="0.0804%" height="15" fill="rgb(240,199,54)" fg:x="1172" fg:w="1"/><text x="94.4622%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.2122%" y="165" width="0.0804%" height="15" fill="rgb(234,31,13)" fg:x="1172" fg:w="1"/><text x="94.4622%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.6141%" y="101" width="0.0804%" height="15" fill="rgb(219,73,54)" fg:x="1177" fg:w="1"/><text x="94.8641%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="94.6945%" y="101" width="0.1608%" height="15" fill="rgb(251,162,10)" fg:x="1178" fg:w="2"/><text x="94.9445%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="94.8553%" y="101" width="0.2412%" height="15" fill="rgb(240,138,47)" fg:x="1180" fg:w="3"/><text x="95.1053%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="95.0965%" y="101" width="0.1608%" height="15" fill="rgb(216,138,26)" fg:x="1183" fg:w="2"/><text x="95.3465%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="95.2572%" y="101" width="0.2412%" height="15" fill="rgb(243,17,35)" fg:x="1185" fg:w="3"/><text x="95.5072%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="95.2572%" y="85" width="0.2412%" height="15" fill="rgb(241,60,18)" fg:x="1185" fg:w="3"/><text x="95.5072%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.3376%" y="69" width="0.1608%" height="15" fill="rgb(234,2,44)" fg:x="1186" fg:w="2"/><text x="95.5876%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.4180%" y="53" width="0.0804%" height="15" fill="rgb(225,225,33)" fg:x="1187" fg:w="1"/><text x="95.6680%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4180%" y="37" width="0.0804%" height="15" fill="rgb(234,50,31)" fg:x="1187" fg:w="1"/><text x="95.6680%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (10 samples, 0.80%)</title><rect x="95.4984%" y="101" width="0.8039%" height="15" fill="rgb(249,6,25)" fg:x="1188" fg:w="10"/><text x="95.7484%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (10 samples, 0.80%)</title><rect x="95.4984%" y="85" width="0.8039%" height="15" fill="rgb(241,5,17)" fg:x="1188" fg:w="10"/><text x="95.7484%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (10 samples, 0.80%)</title><rect x="95.4984%" y="69" width="0.8039%" height="15" fill="rgb(207,116,10)" fg:x="1188" fg:w="10"/><text x="95.7484%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 2.09%)</title><rect x="94.2926%" y="197" width="2.0900%" height="15" fill="rgb(222,128,18)" fg:x="1173" fg:w="26"/><text x="94.5426%" y="207.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (26 samples, 2.09%)</title><rect x="94.2926%" y="181" width="2.0900%" height="15" fill="rgb(229,109,25)" fg:x="1173" fg:w="26"/><text x="94.5426%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.09%)</title><rect x="94.2926%" y="165" width="2.0900%" height="15" fill="rgb(222,102,25)" fg:x="1173" fg:w="26"/><text x="94.5426%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (26 samples, 2.09%)</title><rect x="94.2926%" y="149" width="2.0900%" height="15" fill="rgb(239,211,5)" fg:x="1173" fg:w="26"/><text x="94.5426%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (25 samples, 2.01%)</title><rect x="94.3730%" y="133" width="2.0096%" height="15" fill="rgb(223,136,26)" fg:x="1174" fg:w="25"/><text x="94.6230%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25 samples, 2.01%)</title><rect x="94.3730%" y="117" width="2.0096%" height="15" fill="rgb(227,30,15)" fg:x="1174" fg:w="25"/><text x="94.6230%" y="127.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.3023%" y="101" width="0.0804%" height="15" fill="rgb(247,76,4)" fg:x="1198" fg:w="1"/><text x="96.5523%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="96.3826%" y="181" width="0.1608%" height="15" fill="rgb(245,38,48)" fg:x="1199" fg:w="2"/><text x="96.6326%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.5434%" y="181" width="0.0804%" height="15" fill="rgb(210,220,14)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (36 samples, 2.89%)</title><rect x="93.8907%" y="229" width="2.8939%" height="15" fill="rgb(224,60,51)" fg:x="1168" fg:w="36"/><text x="94.1407%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (31 samples, 2.49%)</title><rect x="94.2926%" y="213" width="2.4920%" height="15" fill="rgb(212,133,49)" fg:x="1173" fg:w="31"/><text x="94.5426%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="96.3826%" y="197" width="0.4019%" height="15" fill="rgb(231,39,22)" fg:x="1199" fg:w="5"/><text x="96.6326%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="96.6238%" y="181" width="0.1608%" height="15" fill="rgb(236,173,22)" fg:x="1202" fg:w="2"/><text x="96.8738%" y="191.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="96.7846%" y="229" width="0.0804%" height="15" fill="rgb(210,70,0)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="96.7846%" y="213" width="0.0804%" height="15" fill="rgb(215,170,11)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="96.7846%" y="197" width="0.0804%" height="15" fill="rgb(220,154,28)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="207.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="96.7846%" y="181" width="0.0804%" height="15" fill="rgb(240,160,41)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="191.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="96.7846%" y="165" width="0.0804%" height="15" fill="rgb(243,215,41)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.8650%" y="197" width="0.0804%" height="15" fill="rgb(214,208,31)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.8650%" y="181" width="0.0804%" height="15" fill="rgb(247,57,22)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8650%" y="165" width="0.0804%" height="15" fill="rgb(228,73,52)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8650%" y="149" width="0.0804%" height="15" fill="rgb(252,60,9)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8650%" y="133" width="0.0804%" height="15" fill="rgb(233,9,51)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="96.9453%" y="197" width="0.1608%" height="15" fill="rgb(223,67,14)" fg:x="1206" fg:w="2"/><text x="97.1953%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="97.0257%" y="181" width="0.0804%" height="15" fill="rgb(222,86,2)" fg:x="1207" fg:w="1"/><text x="97.2757%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (44 samples, 3.54%)</title><rect x="93.6495%" y="293" width="3.5370%" height="15" fill="rgb(243,58,54)" fg:x="1165" fg:w="44"/><text x="93.8995%" y="303.50">ind..</text></g><g><title>regex::regex::string::Regex::new (41 samples, 3.30%)</title><rect x="93.8907%" y="277" width="3.2958%" height="15" fill="rgb(210,200,39)" fg:x="1168" fg:w="41"/><text x="94.1407%" y="287.50">reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (41 samples, 3.30%)</title><rect x="93.8907%" y="261" width="3.2958%" height="15" fill="rgb(238,135,9)" fg:x="1168" fg:w="41"/><text x="94.1407%" y="271.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (41 samples, 3.30%)</title><rect x="93.8907%" y="245" width="3.2958%" height="15" fill="rgb(232,179,7)" fg:x="1168" fg:w="41"/><text x="94.1407%" y="255.50">reg..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="96.8650%" y="229" width="0.3215%" height="15" fill="rgb(245,65,41)" fg:x="1205" fg:w="4"/><text x="97.1150%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="96.8650%" y="213" width="0.3215%" height="15" fill="rgb(227,43,8)" fg:x="1205" fg:w="4"/><text x="97.1150%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.1061%" y="197" width="0.0804%" height="15" fill="rgb(235,91,14)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.3473%" y="181" width="0.0804%" height="15" fill="rgb(235,219,31)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.3473%" y="165" width="0.0804%" height="15" fill="rgb(227,121,25)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3473%" y="149" width="0.0804%" height="15" fill="rgb(254,129,24)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.3473%" y="133" width="0.0804%" height="15" fill="rgb(226,144,49)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="97.2669%" y="213" width="0.2412%" height="15" fill="rgb(214,187,32)" fg:x="1210" fg:w="3"/><text x="97.5169%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="97.2669%" y="197" width="0.2412%" height="15" fill="rgb(243,129,46)" fg:x="1210" fg:w="3"/><text x="97.5169%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4277%" y="181" width="0.0804%" height="15" fill="rgb(221,185,35)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.5080%" y="181" width="0.0804%" height="15" fill="rgb(205,0,32)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="97.5080%" y="165" width="0.0804%" height="15" fill="rgb(229,179,12)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.5080%" y="149" width="0.0804%" height="15" fill="rgb(252,107,19)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.5080%" y="133" width="0.0804%" height="15" fill="rgb(220,95,27)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.5080%" y="117" width="0.0804%" height="15" fill="rgb(240,113,40)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5080%" y="101" width="0.0804%" height="15" fill="rgb(208,4,43)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5080%" y="85" width="0.0804%" height="15" fill="rgb(247,189,30)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.5080%" y="69" width="0.0804%" height="15" fill="rgb(231,157,17)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="97.5884%" y="181" width="0.1608%" height="15" fill="rgb(224,139,6)" fg:x="1214" fg:w="2"/><text x="97.8384%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="97.5884%" y="165" width="0.1608%" height="15" fill="rgb(223,83,16)" fg:x="1214" fg:w="2"/><text x="97.8384%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="97.5080%" y="213" width="0.3215%" height="15" fill="rgb(232,211,20)" fg:x="1213" fg:w="4"/><text x="97.7580%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="97.5080%" y="197" width="0.3215%" height="15" fill="rgb(225,203,35)" fg:x="1213" fg:w="4"/><text x="97.7580%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="97.7492%" y="181" width="0.0804%" height="15" fill="rgb(215,211,44)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.8296%" y="181" width="0.1608%" height="15" fill="rgb(248,213,26)" fg:x="1217" fg:w="2"/><text x="98.0796%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.9100%" y="165" width="0.0804%" height="15" fill="rgb(214,23,52)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.9100%" y="149" width="0.0804%" height="15" fill="rgb(225,173,50)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9100%" y="133" width="0.0804%" height="15" fill="rgb(206,150,22)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.9100%" y="117" width="0.0804%" height="15" fill="rgb(239,64,23)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="127.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (11 samples, 0.88%)</title><rect x="97.1865%" y="245" width="0.8842%" height="15" fill="rgb(242,50,38)" fg:x="1209" fg:w="11"/><text x="97.4365%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.88%)</title><rect x="97.1865%" y="229" width="0.8842%" height="15" fill="rgb(217,91,15)" fg:x="1209" fg:w="11"/><text x="97.4365%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="97.8296%" y="213" width="0.2412%" height="15" fill="rgb(230,172,6)" fg:x="1217" fg:w="3"/><text x="98.0796%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="97.8296%" y="197" width="0.2412%" height="15" fill="rgb(221,98,26)" fg:x="1217" fg:w="3"/><text x="98.0796%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.9904%" y="181" width="0.0804%" height="15" fill="rgb(227,210,45)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (101 samples, 8.12%)</title><rect x="90.0322%" y="373" width="8.1190%" height="15" fill="rgb(206,8,30)" fg:x="1120" fg:w="101"/><text x="90.2822%" y="383.50">&lt;&amp;kernel::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (94 samples, 7.56%)</title><rect x="90.5949%" y="357" width="7.5563%" height="15" fill="rgb(241,219,17)" fg:x="1127" fg:w="94"/><text x="90.8449%" y="367.50">plugins_co..</text></g><g><title>indefinite::indefinite (93 samples, 7.48%)</title><rect x="90.6752%" y="341" width="7.4759%" height="15" fill="rgb(247,121,29)" fg:x="1128" fg:w="93"/><text x="90.9252%" y="351.50">indefinite..</text></g><g><title>indefinite::methods::indefinite (93 samples, 7.48%)</title><rect x="90.6752%" y="325" width="7.4759%" height="15" fill="rgb(219,169,49)" fg:x="1128" fg:w="93"/><text x="90.9252%" y="335.50">indefinite..</text></g><g><title>indefinite::methods::apply_rules (93 samples, 7.48%)</title><rect x="90.6752%" y="309" width="7.4759%" height="15" fill="rgb(253,49,49)" fg:x="1128" fg:w="93"/><text x="90.9252%" y="319.50">indefinite..</text></g><g><title>indefinite::rules::other::Other::run (12 samples, 0.96%)</title><rect x="97.1865%" y="293" width="0.9646%" height="15" fill="rgb(217,178,3)" fg:x="1209" fg:w="12"/><text x="97.4365%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.96%)</title><rect x="97.1865%" y="277" width="0.9646%" height="15" fill="rgb(234,73,37)" fg:x="1209" fg:w="12"/><text x="97.4365%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (12 samples, 0.96%)</title><rect x="97.1865%" y="261" width="0.9646%" height="15" fill="rgb(250,98,22)" fg:x="1209" fg:w="12"/><text x="97.4365%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="98.0707%" y="245" width="0.0804%" height="15" fill="rgb(220,108,37)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="255.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="98.0707%" y="229" width="0.0804%" height="15" fill="rgb(225,168,10)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Config::new (1 samples, 0.08%)</title><rect x="98.0707%" y="213" width="0.0804%" height="15" fill="rgb(247,215,21)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.1511%" y="373" width="0.0804%" height="15" fill="rgb(253,189,31)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1511%" y="357" width="0.0804%" height="15" fill="rgb(241,54,22)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1511%" y="341" width="0.0804%" height="15" fill="rgb(211,87,4)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.1511%" y="325" width="0.0804%" height="15" fill="rgb(245,112,24)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.1511%" y="309" width="0.0804%" height="15" fill="rgb(235,190,41)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.1511%" y="293" width="0.0804%" height="15" fill="rgb(214,89,8)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.1511%" y="277" width="0.0804%" height="15" fill="rgb(249,155,35)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1511%" y="261" width="0.0804%" height="15" fill="rgb(249,88,26)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1511%" y="245" width="0.0804%" height="15" fill="rgb(232,56,8)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1511%" y="229" width="0.0804%" height="15" fill="rgb(240,95,3)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1511%" y="213" width="0.0804%" height="15" fill="rgb(222,44,28)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1511%" y="197" width="0.0804%" height="15" fill="rgb(234,16,30)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.2315%" y="293" width="0.0804%" height="15" fill="rgb(223,26,17)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2315%" y="277" width="0.0804%" height="15" fill="rgb(239,187,47)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2315%" y="261" width="0.0804%" height="15" fill="rgb(247,102,50)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2315%" y="245" width="0.0804%" height="15" fill="rgb(231,216,22)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2315%" y="229" width="0.0804%" height="15" fill="rgb(216,201,26)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2315%" y="213" width="0.0804%" height="15" fill="rgb(214,186,23)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2315%" y="197" width="0.0804%" height="15" fill="rgb(235,184,4)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2315%" y="181" width="0.0804%" height="15" fill="rgb(244,46,17)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2315%" y="165" width="0.0804%" height="15" fill="rgb(248,74,46)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2315%" y="149" width="0.0804%" height="15" fill="rgb(243,79,5)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2315%" y="133" width="0.0804%" height="15" fill="rgb(213,148,1)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2315%" y="117" width="0.0804%" height="15" fill="rgb(221,30,0)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2315%" y="101" width="0.0804%" height="15" fill="rgb(207,85,29)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2315%" y="85" width="0.0804%" height="15" fill="rgb(239,31,46)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2315%" y="69" width="0.0804%" height="15" fill="rgb(219,6,1)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2315%" y="53" width="0.0804%" height="15" fill="rgb(229,90,29)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="63.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (107 samples, 8.60%)</title><rect x="89.7910%" y="533" width="8.6013%" height="15" fill="rgb(242,201,42)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="543.50">kernel::plug..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (107 samples, 8.60%)</title><rect x="89.7910%" y="517" width="8.6013%" height="15" fill="rgb(243,80,54)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="527.50">&lt;plugins_dyn..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (107 samples, 8.60%)</title><rect x="89.7910%" y="501" width="8.6013%" height="15" fill="rgb(223,166,15)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="511.50">kernel::plug..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (107 samples, 8.60%)</title><rect x="89.7910%" y="485" width="8.6013%" height="15" fill="rgb(238,78,27)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="495.50">core::ops::f..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (107 samples, 8.60%)</title><rect x="89.7910%" y="469" width="8.6013%" height="15" fill="rgb(235,28,43)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="479.50">kernel::plug..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (107 samples, 8.60%)</title><rect x="89.7910%" y="453" width="8.6013%" height="15" fill="rgb(240,210,28)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="463.50">core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (107 samples, 8.60%)</title><rect x="89.7910%" y="437" width="8.6013%" height="15" fill="rgb(253,6,46)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="447.50">&lt;alloc::boxe..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (107 samples, 8.60%)</title><rect x="89.7910%" y="421" width="8.6013%" height="15" fill="rgb(250,159,47)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="431.50">&lt;engine::ses..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (107 samples, 8.60%)</title><rect x="89.7910%" y="405" width="8.6013%" height="15" fill="rgb(216,139,2)" fg:x="1117" fg:w="107"/><text x="90.0410%" y="415.50">&lt;plugins_cor..</text></g><g><title>plugins_core::looking::model::new_area_observation (104 samples, 8.36%)</title><rect x="90.0322%" y="389" width="8.3601%" height="15" fill="rgb(221,124,44)" fg:x="1120" fg:w="104"/><text x="90.2822%" y="399.50">plugins_core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.2315%" y="373" width="0.1608%" height="15" fill="rgb(205,37,22)" fg:x="1222" fg:w="2"/><text x="98.4815%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="98.2315%" y="357" width="0.1608%" height="15" fill="rgb(250,55,8)" fg:x="1222" fg:w="2"/><text x="98.4815%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="98.2315%" y="341" width="0.1608%" height="15" fill="rgb(215,83,48)" fg:x="1222" fg:w="2"/><text x="98.4815%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="98.2315%" y="325" width="0.1608%" height="15" fill="rgb(253,2,32)" fg:x="1222" fg:w="2"/><text x="98.4815%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="98.2315%" y="309" width="0.1608%" height="15" fill="rgb(236,67,28)" fg:x="1222" fg:w="2"/><text x="98.4815%" y="319.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="98.3119%" y="293" width="0.0804%" height="15" fill="rgb(252,55,15)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.3119%" y="277" width="0.0804%" height="15" fill="rgb(243,173,17)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.3119%" y="261" width="0.0804%" height="15" fill="rgb(215,212,13)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.3923%" y="421" width="0.0804%" height="15" fill="rgb(253,176,6)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3923%" y="405" width="0.0804%" height="15" fill="rgb(236,105,26)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3923%" y="389" width="0.0804%" height="15" fill="rgb(239,226,32)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3923%" y="373" width="0.0804%" height="15" fill="rgb(236,104,51)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3923%" y="357" width="0.0804%" height="15" fill="rgb(220,172,33)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3923%" y="341" width="0.0804%" height="15" fill="rgb(224,182,25)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3923%" y="325" width="0.0804%" height="15" fill="rgb(236,184,24)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3923%" y="309" width="0.0804%" height="15" fill="rgb(241,221,14)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3923%" y="293" width="0.0804%" height="15" fill="rgb(227,146,5)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3923%" y="277" width="0.0804%" height="15" fill="rgb(214,15,23)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3923%" y="261" width="0.0804%" height="15" fill="rgb(233,157,31)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.3923%" y="245" width="0.0804%" height="15" fill="rgb(211,27,52)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.3923%" y="229" width="0.0804%" height="15" fill="rgb(212,223,15)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.3923%" y="213" width="0.0804%" height="15" fill="rgb(254,211,0)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.3923%" y="197" width="0.0804%" height="15" fill="rgb(205,43,38)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3923%" y="181" width="0.0804%" height="15" fill="rgb(242,206,46)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.4727%" y="373" width="0.0804%" height="15" fill="rgb(220,221,12)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4727%" y="357" width="0.0804%" height="15" fill="rgb(217,156,35)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4727%" y="341" width="0.0804%" height="15" fill="rgb(207,181,49)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4727%" y="325" width="0.0804%" height="15" fill="rgb(235,103,47)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4727%" y="309" width="0.0804%" height="15" fill="rgb(222,63,28)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.4727%" y="293" width="0.0804%" height="15" fill="rgb(244,137,21)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.4727%" y="277" width="0.0804%" height="15" fill="rgb(228,35,27)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.4727%" y="261" width="0.0804%" height="15" fill="rgb(226,191,41)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4727%" y="245" width="0.0804%" height="15" fill="rgb(210,154,3)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4727%" y="229" width="0.0804%" height="15" fill="rgb(216,60,49)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.4727%" y="213" width="0.0804%" height="15" fill="rgb(226,17,20)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (3 samples, 0.24%)</title><rect x="98.3923%" y="501" width="0.2412%" height="15" fill="rgb(206,115,35)" fg:x="1224" fg:w="3"/><text x="98.6423%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="98.3923%" y="485" width="0.2412%" height="15" fill="rgb(227,88,1)" fg:x="1224" fg:w="3"/><text x="98.6423%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="98.3923%" y="469" width="0.2412%" height="15" fill="rgb(230,222,24)" fg:x="1224" fg:w="3"/><text x="98.6423%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="98.3923%" y="453" width="0.2412%" height="15" fill="rgb(214,124,32)" fg:x="1224" fg:w="3"/><text x="98.6423%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.3923%" y="437" width="0.2412%" height="15" fill="rgb(240,41,36)" fg:x="1224" fg:w="3"/><text x="98.6423%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.4727%" y="421" width="0.1608%" height="15" fill="rgb(221,17,52)" fg:x="1225" fg:w="2"/><text x="98.7227%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.4727%" y="405" width="0.1608%" height="15" fill="rgb(252,70,16)" fg:x="1225" fg:w="2"/><text x="98.7227%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.4727%" y="389" width="0.1608%" height="15" fill="rgb(250,177,4)" fg:x="1225" fg:w="2"/><text x="98.7227%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5531%" y="373" width="0.0804%" height="15" fill="rgb(240,188,47)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5531%" y="357" width="0.0804%" height="15" fill="rgb(215,92,12)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5531%" y="341" width="0.0804%" height="15" fill="rgb(242,110,29)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="351.50"></text></g><g><title>engine::session::Session::captured (123 samples, 9.89%)</title><rect x="88.8264%" y="677" width="9.8875%" height="15" fill="rgb(208,211,26)" fg:x="1105" fg:w="123"/><text x="89.0764%" y="687.50">engine::sessio..</text></g><g><title>engine::session::logs::capture (123 samples, 9.89%)</title><rect x="88.8264%" y="661" width="9.8875%" height="15" fill="rgb(244,147,6)" fg:x="1105" fg:w="123"/><text x="89.0764%" y="671.50">engine::sessio..</text></g><g><title>tracing_core::dispatcher::with_default (122 samples, 9.81%)</title><rect x="88.9068%" y="645" width="9.8071%" height="15" fill="rgb(211,130,42)" fg:x="1106" fg:w="122"/><text x="89.1568%" y="655.50">tracing_core::..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (122 samples, 9.81%)</title><rect x="88.9068%" y="629" width="9.8071%" height="15" fill="rgb(220,63,1)" fg:x="1106" fg:w="122"/><text x="89.1568%" y="639.50">&lt;engine::sessi..</text></g><g><title>kernel::plugins::mw::apply_middleware (122 samples, 9.81%)</title><rect x="88.9068%" y="613" width="9.8071%" height="15" fill="rgb(241,212,30)" fg:x="1106" fg:w="122"/><text x="89.1568%" y="623.50">kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (122 samples, 9.81%)</title><rect x="88.9068%" y="597" width="9.8071%" height="15" fill="rgb(233,153,17)" fg:x="1106" fg:w="122"/><text x="89.1568%" y="607.50">kernel::plugin..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (122 samples, 9.81%)</title><rect x="88.9068%" y="581" width="9.8071%" height="15" fill="rgb(236,3,10)" fg:x="1106" fg:w="122"/><text x="89.1568%" y="591.50">&lt;engine::sessi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (112 samples, 9.00%)</title><rect x="89.7106%" y="565" width="9.0032%" height="15" fill="rgb(232,41,21)" fg:x="1116" fg:w="112"/><text x="89.9606%" y="575.50">kernel::plugi..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (112 samples, 9.00%)</title><rect x="89.7106%" y="549" width="9.0032%" height="15" fill="rgb(206,63,51)" fg:x="1116" fg:w="112"/><text x="89.9606%" y="559.50">&lt;plugins_rune..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (4 samples, 0.32%)</title><rect x="98.3923%" y="533" width="0.3215%" height="15" fill="rgb(250,214,3)" fg:x="1224" fg:w="4"/><text x="98.6423%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (4 samples, 0.32%)</title><rect x="98.3923%" y="517" width="0.3215%" height="15" fill="rgb(254,89,27)" fg:x="1224" fg:w="4"/><text x="98.6423%" y="527.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="98.6334%" y="501" width="0.0804%" height="15" fill="rgb(249,41,14)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.6334%" y="485" width="0.0804%" height="15" fill="rgb(221,196,51)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6334%" y="469" width="0.0804%" height="15" fill="rgb(214,116,26)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6334%" y="453" width="0.0804%" height="15" fill="rgb(236,67,7)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.6334%" y="437" width="0.0804%" height="15" fill="rgb(253,179,32)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.6334%" y="421" width="0.0804%" height="15" fill="rgb(218,33,15)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.6334%" y="405" width="0.0804%" height="15" fill="rgb(217,202,41)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6334%" y="389" width="0.0804%" height="15" fill="rgb(234,133,5)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7942%" y="485" width="0.0804%" height="15" fill="rgb(240,47,40)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.7942%" y="469" width="0.0804%" height="15" fill="rgb(234,166,26)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.7942%" y="453" width="0.0804%" height="15" fill="rgb(244,125,51)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7942%" y="437" width="0.0804%" height="15" fill="rgb(229,171,11)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7942%" y="421" width="0.0804%" height="15" fill="rgb(224,38,45)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.7942%" y="405" width="0.0804%" height="15" fill="rgb(237,27,7)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.7942%" y="533" width="0.2412%" height="15" fill="rgb(216,52,7)" fg:x="1229" fg:w="3"/><text x="99.0442%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.7942%" y="517" width="0.2412%" height="15" fill="rgb(243,11,11)" fg:x="1229" fg:w="3"/><text x="99.0442%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.7942%" y="501" width="0.2412%" height="15" fill="rgb(253,167,20)" fg:x="1229" fg:w="3"/><text x="99.0442%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.8746%" y="485" width="0.1608%" height="15" fill="rgb(215,207,5)" fg:x="1230" fg:w="2"/><text x="99.1246%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.8746%" y="469" width="0.1608%" height="15" fill="rgb(252,127,31)" fg:x="1230" fg:w="2"/><text x="99.1246%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.9550%" y="453" width="0.0804%" height="15" fill="rgb(209,106,27)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.9550%" y="437" width="0.0804%" height="15" fill="rgb(214,220,18)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.9550%" y="421" width="0.0804%" height="15" fill="rgb(237,89,12)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.9550%" y="405" width="0.0804%" height="15" fill="rgb(209,167,36)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.9550%" y="389" width="0.0804%" height="15" fill="rgb(243,45,22)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.9550%" y="373" width="0.0804%" height="15" fill="rgb(239,2,46)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.9550%" y="357" width="0.0804%" height="15" fill="rgb(241,101,0)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.9550%" y="341" width="0.0804%" height="15" fill="rgb(244,34,31)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="351.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.40%)</title><rect x="98.7138%" y="661" width="0.4019%" height="15" fill="rgb(248,23,22)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.7138%" y="645" width="0.4019%" height="15" fill="rgb(218,27,48)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.7138%" y="629" width="0.4019%" height="15" fill="rgb(232,78,1)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="98.7138%" y="613" width="0.4019%" height="15" fill="rgb(233,169,12)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.7138%" y="597" width="0.4019%" height="15" fill="rgb(225,222,54)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.7942%" y="581" width="0.3215%" height="15" fill="rgb(245,126,29)" fg:x="1229" fg:w="4"/><text x="99.0442%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="98.7942%" y="565" width="0.3215%" height="15" fill="rgb(241,63,48)" fg:x="1229" fg:w="4"/><text x="99.0442%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.7942%" y="549" width="0.3215%" height="15" fill="rgb(235,126,38)" fg:x="1229" fg:w="4"/><text x="99.0442%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0354%" y="533" width="0.0804%" height="15" fill="rgb(232,96,49)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0354%" y="517" width="0.0804%" height="15" fill="rgb(211,146,40)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0354%" y="501" width="0.0804%" height="15" fill="rgb(247,93,44)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1158%" y="645" width="0.0804%" height="15" fill="rgb(251,41,49)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1158%" y="629" width="0.0804%" height="15" fill="rgb(218,155,12)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1158%" y="613" width="0.0804%" height="15" fill="rgb(221,161,30)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1158%" y="597" width="0.0804%" height="15" fill="rgb(221,179,11)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1158%" y="581" width="0.0804%" height="15" fill="rgb(224,170,48)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1158%" y="565" width="0.0804%" height="15" fill="rgb(223,117,5)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1158%" y="549" width="0.0804%" height="15" fill="rgb(209,52,20)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1158%" y="533" width="0.0804%" height="15" fill="rgb(209,19,41)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1158%" y="517" width="0.0804%" height="15" fill="rgb(210,177,12)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1158%" y="501" width="0.0804%" height="15" fill="rgb(211,159,37)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1158%" y="485" width="0.0804%" height="15" fill="rgb(209,20,2)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1158%" y="469" width="0.0804%" height="15" fill="rgb(244,3,46)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1158%" y="453" width="0.0804%" height="15" fill="rgb(220,94,38)" fg:x="1233" fg:w="1"/><text x="99.3658%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.1961%" y="645" width="0.0804%" height="15" fill="rgb(253,14,31)" fg:x="1234" fg:w="1"/><text x="99.4461%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.1961%" y="629" width="0.0804%" height="15" fill="rgb(234,176,13)" fg:x="1234" fg:w="1"/><text x="99.4461%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.2765%" y="645" width="0.0804%" height="15" fill="rgb(218,62,25)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2765%" y="629" width="0.0804%" height="15" fill="rgb(216,124,40)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2765%" y="613" width="0.0804%" height="15" fill="rgb(228,170,12)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.2765%" y="597" width="0.0804%" height="15" fill="rgb(231,226,5)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2765%" y="581" width="0.0804%" height="15" fill="rgb(237,122,22)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2765%" y="565" width="0.0804%" height="15" fill="rgb(209,185,25)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2765%" y="549" width="0.0804%" height="15" fill="rgb(228,200,32)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2765%" y="533" width="0.0804%" height="15" fill="rgb(217,140,10)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2765%" y="517" width="0.0804%" height="15" fill="rgb(253,17,24)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2765%" y="501" width="0.0804%" height="15" fill="rgb(212,61,6)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.2765%" y="485" width="0.0804%" height="15" fill="rgb(205,14,25)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="98.7138%" y="677" width="0.7235%" height="15" fill="rgb(232,69,41)" fg:x="1228" fg:w="9"/><text x="98.9638%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.1158%" y="661" width="0.3215%" height="15" fill="rgb(241,106,47)" fg:x="1233" fg:w="4"/><text x="99.3658%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.3569%" y="645" width="0.0804%" height="15" fill="rgb(210,213,53)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.3569%" y="629" width="0.0804%" height="15" fill="rgb(253,175,27)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3569%" y="613" width="0.0804%" height="15" fill="rgb(211,171,24)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3569%" y="597" width="0.0804%" height="15" fill="rgb(229,80,7)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3569%" y="581" width="0.0804%" height="15" fill="rgb(212,46,39)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3569%" y="565" width="0.0804%" height="15" fill="rgb(240,80,45)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3569%" y="549" width="0.0804%" height="15" fill="rgb(253,177,40)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3569%" y="533" width="0.0804%" height="15" fill="rgb(249,200,15)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3569%" y="517" width="0.0804%" height="15" fill="rgb(217,78,26)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3569%" y="501" width="0.0804%" height="15" fill="rgb(254,151,32)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3569%" y="485" width="0.0804%" height="15" fill="rgb(226,165,27)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="495.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.4373%" y="677" width="0.0804%" height="15" fill="rgb(250,206,4)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.4373%" y="661" width="0.0804%" height="15" fill="rgb(231,229,27)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="99.4373%" y="645" width="0.0804%" height="15" fill="rgb(239,217,8)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.4373%" y="629" width="0.0804%" height="15" fill="rgb(225,204,27)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5981%" y="501" width="0.0804%" height="15" fill="rgb(230,56,32)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5981%" y="485" width="0.0804%" height="15" fill="rgb(222,56,27)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5981%" y="469" width="0.0804%" height="15" fill="rgb(253,108,27)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.5981%" y="629" width="0.1608%" height="15" fill="rgb(212,87,36)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5981%" y="613" width="0.1608%" height="15" fill="rgb(247,82,36)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5981%" y="597" width="0.1608%" height="15" fill="rgb(222,143,9)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.5981%" y="581" width="0.1608%" height="15" fill="rgb(238,162,48)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5981%" y="565" width="0.1608%" height="15" fill="rgb(221,59,43)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5981%" y="549" width="0.1608%" height="15" fill="rgb(205,166,41)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5981%" y="533" width="0.1608%" height="15" fill="rgb(241,186,40)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5981%" y="517" width="0.1608%" height="15" fill="rgb(216,119,35)" fg:x="1239" fg:w="2"/><text x="99.8481%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.6785%" y="501" width="0.0804%" height="15" fill="rgb(208,68,38)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6785%" y="485" width="0.0804%" height="15" fill="rgb(217,113,1)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6785%" y="469" width="0.0804%" height="15" fill="rgb(242,153,3)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6785%" y="453" width="0.0804%" height="15" fill="rgb(229,76,35)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7588%" y="565" width="0.1608%" height="15" fill="rgb(229,125,34)" fg:x="1241" fg:w="2"/><text x="100.0088%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7588%" y="549" width="0.1608%" height="15" fill="rgb(238,179,36)" fg:x="1241" fg:w="2"/><text x="100.0088%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8392%" y="533" width="0.0804%" height="15" fill="rgb(244,183,19)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="543.50"></text></g><g><title>all (1,244 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(216,85,49)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-4ed3b75e (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(208,161,47)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1055.50">simple-4ed3b75e</text></g><g><title>_start (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(233,210,18)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(205,104,42)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(248,90,43)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,244 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(206,198,11)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(239,165,27)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(246,44,32)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(252,65,42)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(246,197,18)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(216,192,4)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(208,117,10)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(240,61,47)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,244 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(228,178,21)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(219,96,54)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,244 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(250,177,24)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(242,154,46)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,244 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(226,176,29)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,244 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(226,29,2)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (295 samples, 23.71%)</title><rect x="76.2862%" y="757" width="23.7138%" height="15" fill="rgb(237,104,14)" fg:x="949" fg:w="295"/><text x="76.5362%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (295 samples, 23.71%)</title><rect x="76.2862%" y="741" width="23.7138%" height="15" fill="rgb(245,207,31)" fg:x="949" fg:w="295"/><text x="76.5362%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (295 samples, 23.71%)</title><rect x="76.2862%" y="725" width="23.7138%" height="15" fill="rgb(229,211,45)" fg:x="949" fg:w="295"/><text x="76.5362%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (139 samples, 11.17%)</title><rect x="88.8264%" y="709" width="11.1736%" height="15" fill="rgb(229,113,15)" fg:x="1105" fg:w="139"/><text x="89.0764%" y="719.50">engine::session:..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (139 samples, 11.17%)</title><rect x="88.8264%" y="693" width="11.1736%" height="15" fill="rgb(237,147,15)" fg:x="1105" fg:w="139"/><text x="89.0764%" y="703.50">engine::session:..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.48%)</title><rect x="99.5177%" y="677" width="0.4823%" height="15" fill="rgb(244,120,12)" fg:x="1238" fg:w="6"/><text x="99.7677%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="99.5177%" y="661" width="0.4823%" height="15" fill="rgb(205,120,12)" fg:x="1238" fg:w="6"/><text x="99.7677%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.5177%" y="645" width="0.4823%" height="15" fill="rgb(231,26,45)" fg:x="1238" fg:w="6"/><text x="99.7677%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="99.7588%" y="629" width="0.2412%" height="15" fill="rgb(246,98,1)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="639.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="99.7588%" y="613" width="0.2412%" height="15" fill="rgb(207,68,45)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.7588%" y="597" width="0.2412%" height="15" fill="rgb(231,27,38)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.7588%" y="581" width="0.2412%" height="15" fill="rgb(214,223,3)" fg:x="1241" fg:w="3"/><text x="100.0088%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9196%" y="565" width="0.0804%" height="15" fill="rgb(228,195,46)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="575.50"></text></g></svg></svg>