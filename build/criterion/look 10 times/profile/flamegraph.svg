<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1141.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="1244"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="741" width="0.0804%" height="15" fill="rgb(231,88,51)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1608%" y="661" width="0.0804%" height="15" fill="rgb(240,58,21)" fg:x="2" fg:w="1"/><text x="0.4108%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2412%" y="629" width="0.0804%" height="15" fill="rgb(237,21,10)" fg:x="3" fg:w="1"/><text x="0.4912%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="757" width="0.4823%" height="15" fill="rgb(218,43,11)" fg:x="0" fg:w="6"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (5 samples, 0.40%)</title><rect x="0.0804%" y="741" width="0.4019%" height="15" fill="rgb(218,221,29)" fg:x="1" fg:w="5"/><text x="0.3304%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0804%" y="725" width="0.4019%" height="15" fill="rgb(214,118,42)" fg:x="1" fg:w="5"/><text x="0.3304%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="0.0804%" y="709" width="0.4019%" height="15" fill="rgb(251,200,26)" fg:x="1" fg:w="5"/><text x="0.3304%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0804%" y="693" width="0.4019%" height="15" fill="rgb(237,101,39)" fg:x="1" fg:w="5"/><text x="0.3304%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0804%" y="677" width="0.4019%" height="15" fill="rgb(251,117,11)" fg:x="1" fg:w="5"/><text x="0.3304%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.2412%" y="661" width="0.2412%" height="15" fill="rgb(216,223,23)" fg:x="3" fg:w="3"/><text x="0.4912%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="0.2412%" y="645" width="0.2412%" height="15" fill="rgb(251,54,12)" fg:x="3" fg:w="3"/><text x="0.4912%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.3215%" y="629" width="0.1608%" height="15" fill="rgb(254,176,54)" fg:x="4" fg:w="2"/><text x="0.5715%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.4019%" y="613" width="0.0804%" height="15" fill="rgb(210,32,8)" fg:x="5" fg:w="1"/><text x="0.6519%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.4019%" y="597" width="0.0804%" height="15" fill="rgb(235,52,38)" fg:x="5" fg:w="1"/><text x="0.6519%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4019%" y="581" width="0.0804%" height="15" fill="rgb(231,4,44)" fg:x="5" fg:w="1"/><text x="0.6519%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="0.4823%" y="677" width="0.0804%" height="15" fill="rgb(249,2,32)" fg:x="6" fg:w="1"/><text x="0.7323%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.4823%" y="661" width="0.0804%" height="15" fill="rgb(224,65,26)" fg:x="6" fg:w="1"/><text x="0.7323%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.4823%" y="645" width="0.0804%" height="15" fill="rgb(250,73,40)" fg:x="6" fg:w="1"/><text x="0.7323%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="0.4823%" y="629" width="0.0804%" height="15" fill="rgb(253,177,16)" fg:x="6" fg:w="1"/><text x="0.7323%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="0.4823%" y="613" width="0.0804%" height="15" fill="rgb(217,32,34)" fg:x="6" fg:w="1"/><text x="0.7323%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="0.4823%" y="597" width="0.0804%" height="15" fill="rgb(212,7,10)" fg:x="6" fg:w="1"/><text x="0.7323%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="0.4823%" y="581" width="0.0804%" height="15" fill="rgb(245,89,8)" fg:x="6" fg:w="1"/><text x="0.7323%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="0.4823%" y="565" width="0.0804%" height="15" fill="rgb(237,16,53)" fg:x="6" fg:w="1"/><text x="0.7323%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="0.4823%" y="549" width="0.0804%" height="15" fill="rgb(250,204,30)" fg:x="6" fg:w="1"/><text x="0.7323%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="0.4823%" y="533" width="0.0804%" height="15" fill="rgb(208,77,27)" fg:x="6" fg:w="1"/><text x="0.7323%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="0.4823%" y="517" width="0.0804%" height="15" fill="rgb(250,204,28)" fg:x="6" fg:w="1"/><text x="0.7323%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="0.4823%" y="501" width="0.0804%" height="15" fill="rgb(244,63,21)" fg:x="6" fg:w="1"/><text x="0.7323%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="0.4823%" y="485" width="0.0804%" height="15" fill="rgb(236,85,44)" fg:x="6" fg:w="1"/><text x="0.7323%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="0.4823%" y="469" width="0.0804%" height="15" fill="rgb(215,98,4)" fg:x="6" fg:w="1"/><text x="0.7323%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.5627%" y="517" width="0.0804%" height="15" fill="rgb(235,38,11)" fg:x="7" fg:w="1"/><text x="0.8127%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.5627%" y="501" width="0.0804%" height="15" fill="rgb(254,186,25)" fg:x="7" fg:w="1"/><text x="0.8127%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.5627%" y="485" width="0.0804%" height="15" fill="rgb(225,55,31)" fg:x="7" fg:w="1"/><text x="0.8127%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="0.4823%" y="725" width="0.2412%" height="15" fill="rgb(211,15,21)" fg:x="6" fg:w="3"/><text x="0.7323%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="0.4823%" y="709" width="0.2412%" height="15" fill="rgb(215,187,41)" fg:x="6" fg:w="3"/><text x="0.7323%" y="719.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="0.4823%" y="693" width="0.2412%" height="15" fill="rgb(248,69,32)" fg:x="6" fg:w="3"/><text x="0.7323%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="0.5627%" y="677" width="0.1608%" height="15" fill="rgb(252,102,52)" fg:x="7" fg:w="2"/><text x="0.8127%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="0.5627%" y="661" width="0.1608%" height="15" fill="rgb(253,140,32)" fg:x="7" fg:w="2"/><text x="0.8127%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.5627%" y="645" width="0.1608%" height="15" fill="rgb(216,56,42)" fg:x="7" fg:w="2"/><text x="0.8127%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.5627%" y="629" width="0.1608%" height="15" fill="rgb(216,184,14)" fg:x="7" fg:w="2"/><text x="0.8127%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.5627%" y="613" width="0.1608%" height="15" fill="rgb(237,187,27)" fg:x="7" fg:w="2"/><text x="0.8127%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.5627%" y="597" width="0.1608%" height="15" fill="rgb(219,65,3)" fg:x="7" fg:w="2"/><text x="0.8127%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.5627%" y="581" width="0.1608%" height="15" fill="rgb(245,83,25)" fg:x="7" fg:w="2"/><text x="0.8127%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.5627%" y="565" width="0.1608%" height="15" fill="rgb(214,205,45)" fg:x="7" fg:w="2"/><text x="0.8127%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.5627%" y="549" width="0.1608%" height="15" fill="rgb(241,20,18)" fg:x="7" fg:w="2"/><text x="0.8127%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.5627%" y="533" width="0.1608%" height="15" fill="rgb(232,163,23)" fg:x="7" fg:w="2"/><text x="0.8127%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.6431%" y="517" width="0.0804%" height="15" fill="rgb(214,5,46)" fg:x="8" fg:w="1"/><text x="0.8931%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.6431%" y="501" width="0.0804%" height="15" fill="rgb(229,78,17)" fg:x="8" fg:w="1"/><text x="0.8931%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.6431%" y="485" width="0.0804%" height="15" fill="rgb(248,89,10)" fg:x="8" fg:w="1"/><text x="0.8931%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.6431%" y="469" width="0.0804%" height="15" fill="rgb(248,54,15)" fg:x="8" fg:w="1"/><text x="0.8931%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.6431%" y="453" width="0.0804%" height="15" fill="rgb(223,116,6)" fg:x="8" fg:w="1"/><text x="0.8931%" y="463.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="0.7235%" y="725" width="0.0804%" height="15" fill="rgb(205,125,38)" fg:x="9" fg:w="1"/><text x="0.9735%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7235%" y="709" width="0.0804%" height="15" fill="rgb(251,78,38)" fg:x="9" fg:w="1"/><text x="0.9735%" y="719.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.8842%" y="677" width="0.0804%" height="15" fill="rgb(253,78,28)" fg:x="11" fg:w="1"/><text x="1.1342%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="0.8039%" y="725" width="0.4823%" height="15" fill="rgb(209,120,3)" fg:x="10" fg:w="6"/><text x="1.0539%" y="735.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="0.8039%" y="709" width="0.4823%" height="15" fill="rgb(238,229,9)" fg:x="10" fg:w="6"/><text x="1.0539%" y="719.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.48%)</title><rect x="0.8039%" y="693" width="0.4823%" height="15" fill="rgb(253,159,18)" fg:x="10" fg:w="6"/><text x="1.0539%" y="703.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="0.9646%" y="677" width="0.3215%" height="15" fill="rgb(244,42,34)" fg:x="12" fg:w="4"/><text x="1.2146%" y="687.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="0.9646%" y="661" width="0.3215%" height="15" fill="rgb(224,8,7)" fg:x="12" fg:w="4"/><text x="1.2146%" y="671.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="0.9646%" y="645" width="0.3215%" height="15" fill="rgb(210,201,45)" fg:x="12" fg:w="4"/><text x="1.2146%" y="655.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="0.9646%" y="629" width="0.3215%" height="15" fill="rgb(252,185,21)" fg:x="12" fg:w="4"/><text x="1.2146%" y="639.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="0.9646%" y="613" width="0.3215%" height="15" fill="rgb(223,131,1)" fg:x="12" fg:w="4"/><text x="1.2146%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (11 samples, 0.88%)</title><rect x="0.4823%" y="757" width="0.8842%" height="15" fill="rgb(245,141,16)" fg:x="6" fg:w="11"/><text x="0.7323%" y="767.50"></text></g><g><title>engine::session::Session::new (11 samples, 0.88%)</title><rect x="0.4823%" y="741" width="0.8842%" height="15" fill="rgb(229,55,45)" fg:x="6" fg:w="11"/><text x="0.7323%" y="751.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.2862%" y="725" width="0.0804%" height="15" fill="rgb(208,92,15)" fg:x="16" fg:w="1"/><text x="1.5362%" y="735.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.2862%" y="709" width="0.0804%" height="15" fill="rgb(234,185,47)" fg:x="16" fg:w="1"/><text x="1.5362%" y="719.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.3666%" y="709" width="0.0804%" height="15" fill="rgb(253,104,50)" fg:x="17" fg:w="1"/><text x="1.6166%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="1.3666%" y="693" width="0.0804%" height="15" fill="rgb(205,70,7)" fg:x="17" fg:w="1"/><text x="1.6166%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3666%" y="677" width="0.0804%" height="15" fill="rgb(240,178,43)" fg:x="17" fg:w="1"/><text x="1.6166%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.4469%" y="661" width="0.0804%" height="15" fill="rgb(214,112,2)" fg:x="18" fg:w="1"/><text x="1.6969%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.4469%" y="645" width="0.0804%" height="15" fill="rgb(206,46,17)" fg:x="18" fg:w="1"/><text x="1.6969%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4469%" y="629" width="0.0804%" height="15" fill="rgb(225,220,16)" fg:x="18" fg:w="1"/><text x="1.6969%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.5273%" y="629" width="0.0804%" height="15" fill="rgb(238,65,40)" fg:x="19" fg:w="1"/><text x="1.7773%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5273%" y="613" width="0.0804%" height="15" fill="rgb(230,151,21)" fg:x="19" fg:w="1"/><text x="1.7773%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5273%" y="597" width="0.0804%" height="15" fill="rgb(218,58,49)" fg:x="19" fg:w="1"/><text x="1.7773%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.5273%" y="581" width="0.0804%" height="15" fill="rgb(219,179,14)" fg:x="19" fg:w="1"/><text x="1.7773%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5273%" y="565" width="0.0804%" height="15" fill="rgb(223,72,1)" fg:x="19" fg:w="1"/><text x="1.7773%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="1.4469%" y="677" width="0.2412%" height="15" fill="rgb(238,126,10)" fg:x="18" fg:w="3"/><text x="1.6969%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.5273%" y="661" width="0.1608%" height="15" fill="rgb(224,206,38)" fg:x="19" fg:w="2"/><text x="1.7773%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.5273%" y="645" width="0.1608%" height="15" fill="rgb(212,201,54)" fg:x="19" fg:w="2"/><text x="1.7773%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6077%" y="629" width="0.0804%" height="15" fill="rgb(218,154,48)" fg:x="20" fg:w="1"/><text x="1.8577%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6077%" y="613" width="0.0804%" height="15" fill="rgb(232,93,24)" fg:x="20" fg:w="1"/><text x="1.8577%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6077%" y="597" width="0.0804%" height="15" fill="rgb(245,30,21)" fg:x="20" fg:w="1"/><text x="1.8577%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6077%" y="581" width="0.0804%" height="15" fill="rgb(242,148,29)" fg:x="20" fg:w="1"/><text x="1.8577%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.6077%" y="565" width="0.0804%" height="15" fill="rgb(244,153,54)" fg:x="20" fg:w="1"/><text x="1.8577%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6881%" y="677" width="0.0804%" height="15" fill="rgb(252,87,22)" fg:x="21" fg:w="1"/><text x="1.9381%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.6881%" y="661" width="0.0804%" height="15" fill="rgb(210,51,29)" fg:x="21" fg:w="1"/><text x="1.9381%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6881%" y="645" width="0.0804%" height="15" fill="rgb(242,136,47)" fg:x="21" fg:w="1"/><text x="1.9381%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.7685%" y="629" width="0.0804%" height="15" fill="rgb(238,68,4)" fg:x="22" fg:w="1"/><text x="2.0185%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8489%" y="629" width="0.0804%" height="15" fill="rgb(242,161,30)" fg:x="23" fg:w="1"/><text x="2.0989%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1.8489%" y="613" width="0.0804%" height="15" fill="rgb(218,58,44)" fg:x="23" fg:w="1"/><text x="2.0989%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9293%" y="629" width="0.0804%" height="15" fill="rgb(252,125,32)" fg:x="24" fg:w="1"/><text x="2.1793%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1.9293%" y="613" width="0.0804%" height="15" fill="rgb(219,178,0)" fg:x="24" fg:w="1"/><text x="2.1793%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="1.9293%" y="597" width="0.0804%" height="15" fill="rgb(213,152,7)" fg:x="24" fg:w="1"/><text x="2.1793%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9293%" y="581" width="0.0804%" height="15" fill="rgb(249,109,34)" fg:x="24" fg:w="1"/><text x="2.1793%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.9293%" y="565" width="0.0804%" height="15" fill="rgb(232,96,21)" fg:x="24" fg:w="1"/><text x="2.1793%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.0096%" y="581" width="0.0804%" height="15" fill="rgb(228,27,39)" fg:x="25" fg:w="1"/><text x="2.2596%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.0096%" y="565" width="0.0804%" height="15" fill="rgb(211,182,52)" fg:x="25" fg:w="1"/><text x="2.2596%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.0096%" y="597" width="0.1608%" height="15" fill="rgb(234,178,38)" fg:x="25" fg:w="2"/><text x="2.2596%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.0900%" y="581" width="0.0804%" height="15" fill="rgb(221,111,3)" fg:x="26" fg:w="1"/><text x="2.3400%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.0900%" y="565" width="0.0804%" height="15" fill="rgb(228,175,21)" fg:x="26" fg:w="1"/><text x="2.3400%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0900%" y="549" width="0.0804%" height="15" fill="rgb(228,174,43)" fg:x="26" fg:w="1"/><text x="2.3400%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0900%" y="533" width="0.0804%" height="15" fill="rgb(211,191,0)" fg:x="26" fg:w="1"/><text x="2.3400%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.0900%" y="517" width="0.0804%" height="15" fill="rgb(253,117,3)" fg:x="26" fg:w="1"/><text x="2.3400%" y="527.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.05%)</title><rect x="1.3666%" y="741" width="1.0450%" height="15" fill="rgb(241,127,19)" fg:x="17" fg:w="13"/><text x="1.6166%" y="751.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.05%)</title><rect x="1.3666%" y="725" width="1.0450%" height="15" fill="rgb(218,103,12)" fg:x="17" fg:w="13"/><text x="1.6166%" y="735.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="1.4469%" y="709" width="0.9646%" height="15" fill="rgb(236,214,43)" fg:x="18" fg:w="12"/><text x="1.6969%" y="719.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="1.4469%" y="693" width="0.9646%" height="15" fill="rgb(244,144,19)" fg:x="18" fg:w="12"/><text x="1.6969%" y="703.50"></text></g><g><title>kernel::compare::any_entity_changes (8 samples, 0.64%)</title><rect x="1.7685%" y="677" width="0.6431%" height="15" fill="rgb(246,188,10)" fg:x="22" fg:w="8"/><text x="2.0185%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="1.7685%" y="661" width="0.6431%" height="15" fill="rgb(212,193,33)" fg:x="22" fg:w="8"/><text x="2.0185%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="1.7685%" y="645" width="0.6431%" height="15" fill="rgb(241,51,29)" fg:x="22" fg:w="8"/><text x="2.0185%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="2.0096%" y="629" width="0.4019%" height="15" fill="rgb(211,58,19)" fg:x="25" fg:w="5"/><text x="2.2596%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (5 samples, 0.40%)</title><rect x="2.0096%" y="613" width="0.4019%" height="15" fill="rgb(229,111,26)" fg:x="25" fg:w="5"/><text x="2.2596%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="2.1704%" y="597" width="0.2412%" height="15" fill="rgb(213,115,40)" fg:x="27" fg:w="3"/><text x="2.4204%" y="607.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="2.3312%" y="581" width="0.0804%" height="15" fill="rgb(209,56,44)" fg:x="29" fg:w="1"/><text x="2.5812%" y="591.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.3312%" y="565" width="0.0804%" height="15" fill="rgb(230,108,32)" fg:x="29" fg:w="1"/><text x="2.5812%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="2.4116%" y="741" width="0.1608%" height="15" fill="rgb(216,165,31)" fg:x="30" fg:w="2"/><text x="2.6616%" y="751.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="2.4116%" y="725" width="0.1608%" height="15" fill="rgb(218,122,21)" fg:x="30" fg:w="2"/><text x="2.6616%" y="735.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="2.4116%" y="709" width="0.1608%" height="15" fill="rgb(223,224,47)" fg:x="30" fg:w="2"/><text x="2.6616%" y="719.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="2.4116%" y="693" width="0.1608%" height="15" fill="rgb(238,102,44)" fg:x="30" fg:w="2"/><text x="2.6616%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4920%" y="677" width="0.0804%" height="15" fill="rgb(236,46,40)" fg:x="31" fg:w="1"/><text x="2.7420%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.4920%" y="661" width="0.0804%" height="15" fill="rgb(247,202,50)" fg:x="31" fg:w="1"/><text x="2.7420%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4920%" y="645" width="0.0804%" height="15" fill="rgb(209,99,20)" fg:x="31" fg:w="1"/><text x="2.7420%" y="655.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="2.5723%" y="741" width="0.0804%" height="15" fill="rgb(252,27,34)" fg:x="32" fg:w="1"/><text x="2.8223%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="2.5723%" y="725" width="0.0804%" height="15" fill="rgb(215,206,23)" fg:x="32" fg:w="1"/><text x="2.8223%" y="735.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="2.5723%" y="709" width="0.0804%" height="15" fill="rgb(212,135,36)" fg:x="32" fg:w="1"/><text x="2.8223%" y="719.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="2.5723%" y="693" width="0.0804%" height="15" fill="rgb(240,189,1)" fg:x="32" fg:w="1"/><text x="2.8223%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="2.6527%" y="725" width="0.0804%" height="15" fill="rgb(242,56,20)" fg:x="33" fg:w="1"/><text x="2.9027%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.6527%" y="709" width="0.0804%" height="15" fill="rgb(247,132,33)" fg:x="33" fg:w="1"/><text x="2.9027%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="2.6527%" y="693" width="0.0804%" height="15" fill="rgb(208,149,11)" fg:x="33" fg:w="1"/><text x="2.9027%" y="703.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="2.6527%" y="677" width="0.0804%" height="15" fill="rgb(211,33,11)" fg:x="33" fg:w="1"/><text x="2.9027%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="2.6527%" y="661" width="0.0804%" height="15" fill="rgb(221,29,38)" fg:x="33" fg:w="1"/><text x="2.9027%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="2.6527%" y="645" width="0.0804%" height="15" fill="rgb(206,182,49)" fg:x="33" fg:w="1"/><text x="2.9027%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="2.6527%" y="629" width="0.0804%" height="15" fill="rgb(216,140,1)" fg:x="33" fg:w="1"/><text x="2.9027%" y="639.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="2.6527%" y="613" width="0.0804%" height="15" fill="rgb(232,57,40)" fg:x="33" fg:w="1"/><text x="2.9027%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6527%" y="597" width="0.0804%" height="15" fill="rgb(224,186,18)" fg:x="33" fg:w="1"/><text x="2.9027%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6527%" y="581" width="0.0804%" height="15" fill="rgb(215,121,11)" fg:x="33" fg:w="1"/><text x="2.9027%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6527%" y="565" width="0.0804%" height="15" fill="rgb(245,147,10)" fg:x="33" fg:w="1"/><text x="2.9027%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.6527%" y="549" width="0.0804%" height="15" fill="rgb(238,153,13)" fg:x="33" fg:w="1"/><text x="2.9027%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.6527%" y="533" width="0.0804%" height="15" fill="rgb(233,108,0)" fg:x="33" fg:w="1"/><text x="2.9027%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.6527%" y="517" width="0.0804%" height="15" fill="rgb(212,157,17)" fg:x="33" fg:w="1"/><text x="2.9027%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.6527%" y="501" width="0.0804%" height="15" fill="rgb(225,213,38)" fg:x="33" fg:w="1"/><text x="2.9027%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.6527%" y="485" width="0.0804%" height="15" fill="rgb(248,16,11)" fg:x="33" fg:w="1"/><text x="2.9027%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.6527%" y="469" width="0.0804%" height="15" fill="rgb(241,33,4)" fg:x="33" fg:w="1"/><text x="2.9027%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.7331%" y="645" width="0.0804%" height="15" fill="rgb(222,26,43)" fg:x="34" fg:w="1"/><text x="2.9831%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.7331%" y="629" width="0.0804%" height="15" fill="rgb(243,29,36)" fg:x="34" fg:w="1"/><text x="2.9831%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.8939%" y="629" width="0.0804%" height="15" fill="rgb(241,9,27)" fg:x="36" fg:w="1"/><text x="3.1439%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8939%" y="613" width="0.0804%" height="15" fill="rgb(205,117,26)" fg:x="36" fg:w="1"/><text x="3.1439%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8939%" y="597" width="0.0804%" height="15" fill="rgb(209,80,39)" fg:x="36" fg:w="1"/><text x="3.1439%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.9743%" y="581" width="0.0804%" height="15" fill="rgb(239,155,6)" fg:x="37" fg:w="1"/><text x="3.2243%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.9743%" y="565" width="0.0804%" height="15" fill="rgb(212,104,12)" fg:x="37" fg:w="1"/><text x="3.2243%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.9743%" y="549" width="0.0804%" height="15" fill="rgb(234,204,3)" fg:x="37" fg:w="1"/><text x="3.2243%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.9743%" y="533" width="0.0804%" height="15" fill="rgb(251,218,7)" fg:x="37" fg:w="1"/><text x="3.2243%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="2.9743%" y="613" width="0.2412%" height="15" fill="rgb(221,81,32)" fg:x="37" fg:w="3"/><text x="3.2243%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.9743%" y="597" width="0.2412%" height="15" fill="rgb(214,152,26)" fg:x="37" fg:w="3"/><text x="3.2243%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.0547%" y="581" width="0.1608%" height="15" fill="rgb(223,22,3)" fg:x="38" fg:w="2"/><text x="3.3047%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="3.0547%" y="565" width="0.1608%" height="15" fill="rgb(207,174,7)" fg:x="38" fg:w="2"/><text x="3.3047%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.1350%" y="549" width="0.0804%" height="15" fill="rgb(224,19,52)" fg:x="39" fg:w="1"/><text x="3.3850%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.2154%" y="613" width="0.0804%" height="15" fill="rgb(228,24,14)" fg:x="40" fg:w="1"/><text x="3.4654%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.2154%" y="597" width="0.0804%" height="15" fill="rgb(230,153,43)" fg:x="40" fg:w="1"/><text x="3.4654%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.2154%" y="581" width="0.0804%" height="15" fill="rgb(231,106,12)" fg:x="40" fg:w="1"/><text x="3.4654%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="2.7331%" y="661" width="0.7235%" height="15" fill="rgb(215,92,2)" fg:x="34" fg:w="9"/><text x="2.9831%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="2.8135%" y="645" width="0.6431%" height="15" fill="rgb(249,143,25)" fg:x="35" fg:w="8"/><text x="3.0635%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="2.9743%" y="629" width="0.4823%" height="15" fill="rgb(252,7,35)" fg:x="37" fg:w="6"/><text x="3.2243%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.2958%" y="613" width="0.1608%" height="15" fill="rgb(216,69,40)" fg:x="41" fg:w="2"/><text x="3.5458%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.2958%" y="597" width="0.1608%" height="15" fill="rgb(240,36,33)" fg:x="41" fg:w="2"/><text x="3.5458%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.2958%" y="581" width="0.1608%" height="15" fill="rgb(231,128,14)" fg:x="41" fg:w="2"/><text x="3.5458%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.3762%" y="565" width="0.0804%" height="15" fill="rgb(245,143,14)" fg:x="42" fg:w="1"/><text x="3.6262%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.3762%" y="549" width="0.0804%" height="15" fill="rgb(222,130,28)" fg:x="42" fg:w="1"/><text x="3.6262%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.3762%" y="533" width="0.0804%" height="15" fill="rgb(212,10,48)" fg:x="42" fg:w="1"/><text x="3.6262%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5370%" y="613" width="0.0804%" height="15" fill="rgb(254,118,45)" fg:x="44" fg:w="1"/><text x="3.7870%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5370%" y="597" width="0.0804%" height="15" fill="rgb(228,6,45)" fg:x="44" fg:w="1"/><text x="3.7870%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5370%" y="581" width="0.0804%" height="15" fill="rgb(241,18,35)" fg:x="44" fg:w="1"/><text x="3.7870%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5370%" y="565" width="0.0804%" height="15" fill="rgb(227,214,53)" fg:x="44" fg:w="1"/><text x="3.7870%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="3.6174%" y="613" width="0.1608%" height="15" fill="rgb(224,107,51)" fg:x="45" fg:w="2"/><text x="3.8674%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.6174%" y="597" width="0.1608%" height="15" fill="rgb(248,60,28)" fg:x="45" fg:w="2"/><text x="3.8674%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.6174%" y="581" width="0.1608%" height="15" fill="rgb(249,101,23)" fg:x="45" fg:w="2"/><text x="3.8674%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6977%" y="565" width="0.0804%" height="15" fill="rgb(228,51,19)" fg:x="46" fg:w="1"/><text x="3.9477%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6977%" y="549" width="0.0804%" height="15" fill="rgb(213,20,6)" fg:x="46" fg:w="1"/><text x="3.9477%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6977%" y="533" width="0.0804%" height="15" fill="rgb(212,124,10)" fg:x="46" fg:w="1"/><text x="3.9477%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.8585%" y="533" width="0.0804%" height="15" fill="rgb(248,3,40)" fg:x="48" fg:w="1"/><text x="4.1085%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="3.8585%" y="581" width="0.1608%" height="15" fill="rgb(223,178,23)" fg:x="48" fg:w="2"/><text x="4.1085%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="3.8585%" y="565" width="0.1608%" height="15" fill="rgb(240,132,45)" fg:x="48" fg:w="2"/><text x="4.1085%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="3.8585%" y="549" width="0.1608%" height="15" fill="rgb(245,164,36)" fg:x="48" fg:w="2"/><text x="4.1085%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9389%" y="533" width="0.0804%" height="15" fill="rgb(231,188,53)" fg:x="49" fg:w="1"/><text x="4.1889%" y="543.50"></text></g><g><title>kernel::compare::any_entity_changes (8 samples, 0.64%)</title><rect x="3.4566%" y="661" width="0.6431%" height="15" fill="rgb(237,198,39)" fg:x="43" fg:w="8"/><text x="3.7066%" y="671.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="3.4566%" y="645" width="0.6431%" height="15" fill="rgb(223,120,35)" fg:x="43" fg:w="8"/><text x="3.7066%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="3.4566%" y="629" width="0.6431%" height="15" fill="rgb(253,107,49)" fg:x="43" fg:w="8"/><text x="3.7066%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="3.7781%" y="613" width="0.3215%" height="15" fill="rgb(216,44,31)" fg:x="47" fg:w="4"/><text x="4.0281%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="3.8585%" y="597" width="0.2412%" height="15" fill="rgb(253,87,21)" fg:x="48" fg:w="3"/><text x="4.1085%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.0193%" y="581" width="0.0804%" height="15" fill="rgb(226,18,2)" fg:x="50" fg:w="1"/><text x="4.2693%" y="591.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (19 samples, 1.53%)</title><rect x="2.7331%" y="693" width="1.5273%" height="15" fill="rgb(216,8,46)" fg:x="34" fg:w="19"/><text x="2.9831%" y="703.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (19 samples, 1.53%)</title><rect x="2.7331%" y="677" width="1.5273%" height="15" fill="rgb(226,140,39)" fg:x="34" fg:w="19"/><text x="2.9831%" y="687.50"></text></g><g><title>kernel::model::Entity::set_gid (2 samples, 0.16%)</title><rect x="4.0997%" y="661" width="0.1608%" height="15" fill="rgb(221,194,54)" fg:x="51" fg:w="2"/><text x="4.3497%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1801%" y="645" width="0.0804%" height="15" fill="rgb(213,92,11)" fg:x="52" fg:w="1"/><text x="4.4301%" y="655.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.61%)</title><rect x="2.7331%" y="725" width="1.6077%" height="15" fill="rgb(229,162,46)" fg:x="34" fg:w="20"/><text x="2.9831%" y="735.50"></text></g><g><title>engine::session::Session::save_entity_changes (20 samples, 1.61%)</title><rect x="2.7331%" y="709" width="1.6077%" height="15" fill="rgb(214,111,36)" fg:x="34" fg:w="20"/><text x="2.9831%" y="719.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="4.2605%" y="693" width="0.0804%" height="15" fill="rgb(207,6,21)" fg:x="53" fg:w="1"/><text x="4.5105%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="4.3408%" y="709" width="0.4823%" height="15" fill="rgb(213,127,38)" fg:x="54" fg:w="6"/><text x="4.5908%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="4.3408%" y="693" width="0.4823%" height="15" fill="rgb(238,118,32)" fg:x="54" fg:w="6"/><text x="4.5908%" y="703.50"></text></g><g><title>engine::internal::EntityMap::add_entity (6 samples, 0.48%)</title><rect x="4.3408%" y="677" width="0.4823%" height="15" fill="rgb(240,139,39)" fg:x="54" fg:w="6"/><text x="4.5908%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.40%)</title><rect x="4.4212%" y="661" width="0.4019%" height="15" fill="rgb(235,10,37)" fg:x="55" fg:w="5"/><text x="4.6712%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.40%)</title><rect x="4.4212%" y="645" width="0.4019%" height="15" fill="rgb(249,171,38)" fg:x="55" fg:w="5"/><text x="4.6712%" y="655.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="4.4212%" y="629" width="0.4019%" height="15" fill="rgb(242,144,32)" fg:x="55" fg:w="5"/><text x="4.6712%" y="639.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.64%)</title><rect x="4.3408%" y="725" width="0.6431%" height="15" fill="rgb(217,117,21)" fg:x="54" fg:w="8"/><text x="4.5908%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="4.8232%" y="709" width="0.1608%" height="15" fill="rgb(249,87,1)" fg:x="60" fg:w="2"/><text x="5.0732%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="4.9035%" y="693" width="0.0804%" height="15" fill="rgb(248,196,48)" fg:x="61" fg:w="1"/><text x="5.1535%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="4.9839%" y="693" width="0.0804%" height="15" fill="rgb(251,206,33)" fg:x="62" fg:w="1"/><text x="5.2339%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="4.9839%" y="677" width="0.0804%" height="15" fill="rgb(232,141,28)" fg:x="62" fg:w="1"/><text x="5.2339%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.9839%" y="661" width="0.0804%" height="15" fill="rgb(209,167,14)" fg:x="62" fg:w="1"/><text x="5.2339%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.9839%" y="645" width="0.0804%" height="15" fill="rgb(225,11,50)" fg:x="62" fg:w="1"/><text x="5.2339%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.9839%" y="629" width="0.0804%" height="15" fill="rgb(209,50,20)" fg:x="62" fg:w="1"/><text x="5.2339%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.9839%" y="613" width="0.0804%" height="15" fill="rgb(212,17,46)" fg:x="62" fg:w="1"/><text x="5.2339%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.9839%" y="597" width="0.0804%" height="15" fill="rgb(216,101,39)" fg:x="62" fg:w="1"/><text x="5.2339%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.9839%" y="581" width="0.0804%" height="15" fill="rgb(212,228,48)" fg:x="62" fg:w="1"/><text x="5.2339%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.9839%" y="565" width="0.0804%" height="15" fill="rgb(250,6,50)" fg:x="62" fg:w="1"/><text x="5.2339%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.9839%" y="549" width="0.0804%" height="15" fill="rgb(250,160,48)" fg:x="62" fg:w="1"/><text x="5.2339%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.9839%" y="533" width="0.0804%" height="15" fill="rgb(244,216,33)" fg:x="62" fg:w="1"/><text x="5.2339%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.9839%" y="517" width="0.0804%" height="15" fill="rgb(207,157,5)" fg:x="62" fg:w="1"/><text x="5.2339%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.9839%" y="501" width="0.0804%" height="15" fill="rgb(228,199,8)" fg:x="62" fg:w="1"/><text x="5.2339%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="4.9839%" y="725" width="0.1608%" height="15" fill="rgb(227,80,20)" fg:x="62" fg:w="2"/><text x="5.2339%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.9839%" y="709" width="0.1608%" height="15" fill="rgb(222,9,33)" fg:x="62" fg:w="2"/><text x="5.2339%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.0643%" y="693" width="0.0804%" height="15" fill="rgb(239,44,28)" fg:x="63" fg:w="1"/><text x="5.3143%" y="703.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.0643%" y="677" width="0.0804%" height="15" fill="rgb(249,187,43)" fg:x="63" fg:w="1"/><text x="5.3143%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.0643%" y="661" width="0.0804%" height="15" fill="rgb(216,141,28)" fg:x="63" fg:w="1"/><text x="5.3143%" y="671.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="5.1447%" y="725" width="0.0804%" height="15" fill="rgb(230,154,53)" fg:x="64" fg:w="1"/><text x="5.3947%" y="735.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.1447%" y="709" width="0.0804%" height="15" fill="rgb(227,82,4)" fg:x="64" fg:w="1"/><text x="5.3947%" y="719.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="5.1447%" y="693" width="0.0804%" height="15" fill="rgb(220,107,16)" fg:x="64" fg:w="1"/><text x="5.3947%" y="703.50"></text></g><g><title>kernel::model::Entity::new_with_key (1 samples, 0.08%)</title><rect x="5.1447%" y="677" width="0.0804%" height="15" fill="rgb(207,187,2)" fg:x="64" fg:w="1"/><text x="5.3947%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.2251%" y="709" width="0.0804%" height="15" fill="rgb(210,162,52)" fg:x="65" fg:w="1"/><text x="5.4751%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.2251%" y="693" width="0.0804%" height="15" fill="rgb(217,216,49)" fg:x="65" fg:w="1"/><text x="5.4751%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.2251%" y="677" width="0.0804%" height="15" fill="rgb(218,146,49)" fg:x="65" fg:w="1"/><text x="5.4751%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.2251%" y="661" width="0.0804%" height="15" fill="rgb(216,55,40)" fg:x="65" fg:w="1"/><text x="5.4751%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.2251%" y="645" width="0.0804%" height="15" fill="rgb(208,196,21)" fg:x="65" fg:w="1"/><text x="5.4751%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.2251%" y="629" width="0.0804%" height="15" fill="rgb(242,117,42)" fg:x="65" fg:w="1"/><text x="5.4751%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.2251%" y="613" width="0.0804%" height="15" fill="rgb(210,11,23)" fg:x="65" fg:w="1"/><text x="5.4751%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.2251%" y="597" width="0.0804%" height="15" fill="rgb(217,110,2)" fg:x="65" fg:w="1"/><text x="5.4751%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.2251%" y="581" width="0.0804%" height="15" fill="rgb(229,77,54)" fg:x="65" fg:w="1"/><text x="5.4751%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.2251%" y="565" width="0.0804%" height="15" fill="rgb(218,53,16)" fg:x="65" fg:w="1"/><text x="5.4751%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.2251%" y="549" width="0.0804%" height="15" fill="rgb(215,38,13)" fg:x="65" fg:w="1"/><text x="5.4751%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.2251%" y="533" width="0.0804%" height="15" fill="rgb(235,42,18)" fg:x="65" fg:w="1"/><text x="5.4751%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.2251%" y="517" width="0.0804%" height="15" fill="rgb(219,66,54)" fg:x="65" fg:w="1"/><text x="5.4751%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.2251%" y="501" width="0.0804%" height="15" fill="rgb(222,205,4)" fg:x="65" fg:w="1"/><text x="5.4751%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2251%" y="485" width="0.0804%" height="15" fill="rgb(227,213,46)" fg:x="65" fg:w="1"/><text x="5.4751%" y="495.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="5.2251%" y="725" width="0.1608%" height="15" fill="rgb(250,145,42)" fg:x="65" fg:w="2"/><text x="5.4751%" y="735.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="5.3055%" y="709" width="0.0804%" height="15" fill="rgb(219,15,2)" fg:x="66" fg:w="1"/><text x="5.5555%" y="719.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="5.3055%" y="693" width="0.0804%" height="15" fill="rgb(231,181,52)" fg:x="66" fg:w="1"/><text x="5.5555%" y="703.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.3055%" y="677" width="0.0804%" height="15" fill="rgb(235,1,42)" fg:x="66" fg:w="1"/><text x="5.5555%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3055%" y="661" width="0.0804%" height="15" fill="rgb(249,88,27)" fg:x="66" fg:w="1"/><text x="5.5555%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.3055%" y="645" width="0.0804%" height="15" fill="rgb(235,145,16)" fg:x="66" fg:w="1"/><text x="5.5555%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.3055%" y="629" width="0.0804%" height="15" fill="rgb(237,114,19)" fg:x="66" fg:w="1"/><text x="5.5555%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3055%" y="613" width="0.0804%" height="15" fill="rgb(238,51,50)" fg:x="66" fg:w="1"/><text x="5.5555%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (35 samples, 2.81%)</title><rect x="2.6527%" y="741" width="2.8135%" height="15" fill="rgb(205,194,25)" fg:x="33" fg:w="35"/><text x="2.9027%" y="751.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="5.3859%" y="725" width="0.0804%" height="15" fill="rgb(215,203,17)" fg:x="67" fg:w="1"/><text x="5.6359%" y="735.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="5.3859%" y="709" width="0.0804%" height="15" fill="rgb(233,112,49)" fg:x="67" fg:w="1"/><text x="5.6359%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="5.3859%" y="693" width="0.0804%" height="15" fill="rgb(241,130,26)" fg:x="67" fg:w="1"/><text x="5.6359%" y="703.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="5.3859%" y="677" width="0.0804%" height="15" fill="rgb(252,223,19)" fg:x="67" fg:w="1"/><text x="5.6359%" y="687.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.3859%" y="661" width="0.0804%" height="15" fill="rgb(211,95,25)" fg:x="67" fg:w="1"/><text x="5.6359%" y="671.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3859%" y="645" width="0.0804%" height="15" fill="rgb(251,182,27)" fg:x="67" fg:w="1"/><text x="5.6359%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.3859%" y="629" width="0.0804%" height="15" fill="rgb(238,24,4)" fg:x="67" fg:w="1"/><text x="5.6359%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.3859%" y="613" width="0.0804%" height="15" fill="rgb(224,220,25)" fg:x="67" fg:w="1"/><text x="5.6359%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3859%" y="597" width="0.0804%" height="15" fill="rgb(239,133,26)" fg:x="67" fg:w="1"/><text x="5.6359%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3859%" y="581" width="0.0804%" height="15" fill="rgb(211,94,48)" fg:x="67" fg:w="1"/><text x="5.6359%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3859%" y="565" width="0.0804%" height="15" fill="rgb(239,87,6)" fg:x="67" fg:w="1"/><text x="5.6359%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (52 samples, 4.18%)</title><rect x="1.3666%" y="757" width="4.1801%" height="15" fill="rgb(227,62,0)" fg:x="17" fg:w="52"/><text x="1.6166%" y="767.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="5.4662%" y="741" width="0.0804%" height="15" fill="rgb(211,226,4)" fg:x="68" fg:w="1"/><text x="5.7162%" y="751.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.4662%" y="725" width="0.0804%" height="15" fill="rgb(253,38,52)" fg:x="68" fg:w="1"/><text x="5.7162%" y="735.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="5.4662%" y="709" width="0.0804%" height="15" fill="rgb(229,126,40)" fg:x="68" fg:w="1"/><text x="5.7162%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="5.4662%" y="693" width="0.0804%" height="15" fill="rgb(229,165,44)" fg:x="68" fg:w="1"/><text x="5.7162%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="5.4662%" y="677" width="0.0804%" height="15" fill="rgb(247,95,47)" fg:x="68" fg:w="1"/><text x="5.7162%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.4662%" y="661" width="0.0804%" height="15" fill="rgb(216,140,30)" fg:x="68" fg:w="1"/><text x="5.7162%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.4662%" y="645" width="0.0804%" height="15" fill="rgb(246,214,8)" fg:x="68" fg:w="1"/><text x="5.7162%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.4662%" y="629" width="0.0804%" height="15" fill="rgb(227,224,15)" fg:x="68" fg:w="1"/><text x="5.7162%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.4662%" y="613" width="0.0804%" height="15" fill="rgb(233,175,4)" fg:x="68" fg:w="1"/><text x="5.7162%" y="623.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="5.4662%" y="597" width="0.0804%" height="15" fill="rgb(221,66,45)" fg:x="68" fg:w="1"/><text x="5.7162%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="5.4662%" y="581" width="0.0804%" height="15" fill="rgb(221,178,18)" fg:x="68" fg:w="1"/><text x="5.7162%" y="591.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="5.4662%" y="565" width="0.0804%" height="15" fill="rgb(213,81,29)" fg:x="68" fg:w="1"/><text x="5.7162%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="5.5466%" y="757" width="0.0804%" height="15" fill="rgb(220,89,49)" fg:x="69" fg:w="1"/><text x="5.7966%" y="767.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="5.5466%" y="741" width="0.0804%" height="15" fill="rgb(227,60,33)" fg:x="69" fg:w="1"/><text x="5.7966%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="5.5466%" y="725" width="0.0804%" height="15" fill="rgb(205,113,12)" fg:x="69" fg:w="1"/><text x="5.7966%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.5466%" y="709" width="0.0804%" height="15" fill="rgb(211,32,1)" fg:x="69" fg:w="1"/><text x="5.7966%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.5466%" y="693" width="0.0804%" height="15" fill="rgb(246,2,12)" fg:x="69" fg:w="1"/><text x="5.7966%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="5.6270%" y="757" width="0.0804%" height="15" fill="rgb(243,37,27)" fg:x="70" fg:w="1"/><text x="5.8770%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="5.6270%" y="741" width="0.0804%" height="15" fill="rgb(248,211,31)" fg:x="70" fg:w="1"/><text x="5.8770%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6270%" y="725" width="0.0804%" height="15" fill="rgb(242,146,47)" fg:x="70" fg:w="1"/><text x="5.8770%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.7074%" y="741" width="0.0804%" height="15" fill="rgb(206,70,20)" fg:x="71" fg:w="1"/><text x="5.9574%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.7074%" y="725" width="0.0804%" height="15" fill="rgb(215,10,51)" fg:x="71" fg:w="1"/><text x="5.9574%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.7074%" y="709" width="0.0804%" height="15" fill="rgb(243,178,53)" fg:x="71" fg:w="1"/><text x="5.9574%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.7074%" y="693" width="0.0804%" height="15" fill="rgb(233,221,20)" fg:x="71" fg:w="1"/><text x="5.9574%" y="703.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.7074%" y="677" width="0.0804%" height="15" fill="rgb(218,95,35)" fg:x="71" fg:w="1"/><text x="5.9574%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="5.7074%" y="661" width="0.0804%" height="15" fill="rgb(229,13,5)" fg:x="71" fg:w="1"/><text x="5.9574%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="5.7074%" y="645" width="0.0804%" height="15" fill="rgb(252,164,30)" fg:x="71" fg:w="1"/><text x="5.9574%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.7074%" y="629" width="0.0804%" height="15" fill="rgb(232,68,36)" fg:x="71" fg:w="1"/><text x="5.9574%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.7074%" y="613" width="0.0804%" height="15" fill="rgb(219,59,54)" fg:x="71" fg:w="1"/><text x="5.9574%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.7074%" y="597" width="0.0804%" height="15" fill="rgb(250,92,33)" fg:x="71" fg:w="1"/><text x="5.9574%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7074%" y="581" width="0.0804%" height="15" fill="rgb(229,162,54)" fg:x="71" fg:w="1"/><text x="5.9574%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7074%" y="565" width="0.0804%" height="15" fill="rgb(244,114,52)" fg:x="71" fg:w="1"/><text x="5.9574%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="5.7074%" y="549" width="0.0804%" height="15" fill="rgb(212,211,43)" fg:x="71" fg:w="1"/><text x="5.9574%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="5.7074%" y="533" width="0.0804%" height="15" fill="rgb(226,147,8)" fg:x="71" fg:w="1"/><text x="5.9574%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="5.7074%" y="517" width="0.0804%" height="15" fill="rgb(226,23,13)" fg:x="71" fg:w="1"/><text x="5.9574%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="5.7074%" y="501" width="0.0804%" height="15" fill="rgb(240,63,4)" fg:x="71" fg:w="1"/><text x="5.9574%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.7074%" y="485" width="0.0804%" height="15" fill="rgb(221,1,32)" fg:x="71" fg:w="1"/><text x="5.9574%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.7074%" y="469" width="0.0804%" height="15" fill="rgb(242,117,10)" fg:x="71" fg:w="1"/><text x="5.9574%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.7074%" y="453" width="0.0804%" height="15" fill="rgb(249,172,44)" fg:x="71" fg:w="1"/><text x="5.9574%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="5.7074%" y="437" width="0.0804%" height="15" fill="rgb(244,46,45)" fg:x="71" fg:w="1"/><text x="5.9574%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.7074%" y="421" width="0.0804%" height="15" fill="rgb(206,43,17)" fg:x="71" fg:w="1"/><text x="5.9574%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="5.7074%" y="405" width="0.0804%" height="15" fill="rgb(239,218,39)" fg:x="71" fg:w="1"/><text x="5.9574%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="5.7074%" y="389" width="0.0804%" height="15" fill="rgb(208,169,54)" fg:x="71" fg:w="1"/><text x="5.9574%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="5.7074%" y="373" width="0.0804%" height="15" fill="rgb(247,25,42)" fg:x="71" fg:w="1"/><text x="5.9574%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.7074%" y="357" width="0.0804%" height="15" fill="rgb(226,23,31)" fg:x="71" fg:w="1"/><text x="5.9574%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.7878%" y="725" width="0.0804%" height="15" fill="rgb(247,16,28)" fg:x="72" fg:w="1"/><text x="6.0378%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7878%" y="709" width="0.0804%" height="15" fill="rgb(231,147,38)" fg:x="72" fg:w="1"/><text x="6.0378%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.8682%" y="725" width="0.0804%" height="15" fill="rgb(253,81,48)" fg:x="73" fg:w="1"/><text x="6.1182%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8682%" y="709" width="0.0804%" height="15" fill="rgb(249,222,43)" fg:x="73" fg:w="1"/><text x="6.1182%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="5.9486%" y="725" width="0.0804%" height="15" fill="rgb(221,3,27)" fg:x="74" fg:w="1"/><text x="6.1986%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="5.9486%" y="709" width="0.0804%" height="15" fill="rgb(228,180,5)" fg:x="74" fg:w="1"/><text x="6.1986%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.1093%" y="677" width="0.0804%" height="15" fill="rgb(227,131,42)" fg:x="76" fg:w="1"/><text x="6.3593%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.1897%" y="661" width="0.1608%" height="15" fill="rgb(212,3,39)" fg:x="77" fg:w="2"/><text x="6.4397%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.1897%" y="645" width="0.1608%" height="15" fill="rgb(226,45,5)" fg:x="77" fg:w="2"/><text x="6.4397%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.1897%" y="629" width="0.1608%" height="15" fill="rgb(215,167,45)" fg:x="77" fg:w="2"/><text x="6.4397%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.1897%" y="613" width="0.1608%" height="15" fill="rgb(250,218,53)" fg:x="77" fg:w="2"/><text x="6.4397%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="6.1897%" y="677" width="0.3215%" height="15" fill="rgb(207,140,0)" fg:x="77" fg:w="4"/><text x="6.4397%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.3505%" y="661" width="0.1608%" height="15" fill="rgb(238,133,51)" fg:x="79" fg:w="2"/><text x="6.6005%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4309%" y="645" width="0.0804%" height="15" fill="rgb(218,203,53)" fg:x="80" fg:w="1"/><text x="6.6809%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="6.5916%" y="661" width="0.1608%" height="15" fill="rgb(226,184,25)" fg:x="82" fg:w="2"/><text x="6.8416%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.7524%" y="661" width="0.0804%" height="15" fill="rgb(231,121,21)" fg:x="84" fg:w="1"/><text x="7.0024%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7524%" y="645" width="0.0804%" height="15" fill="rgb(251,14,34)" fg:x="84" fg:w="1"/><text x="7.0024%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7524%" y="629" width="0.0804%" height="15" fill="rgb(249,193,11)" fg:x="84" fg:w="1"/><text x="7.0024%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.7524%" y="613" width="0.0804%" height="15" fill="rgb(220,172,37)" fg:x="84" fg:w="1"/><text x="7.0024%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.7524%" y="597" width="0.0804%" height="15" fill="rgb(231,229,43)" fg:x="84" fg:w="1"/><text x="7.0024%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.7524%" y="581" width="0.0804%" height="15" fill="rgb(250,161,5)" fg:x="84" fg:w="1"/><text x="7.0024%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.7524%" y="565" width="0.0804%" height="15" fill="rgb(218,225,18)" fg:x="84" fg:w="1"/><text x="7.0024%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.9132%" y="629" width="0.0804%" height="15" fill="rgb(245,45,42)" fg:x="86" fg:w="1"/><text x="7.1632%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.9936%" y="629" width="0.1608%" height="15" fill="rgb(211,115,1)" fg:x="87" fg:w="2"/><text x="7.2436%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.9936%" y="613" width="0.1608%" height="15" fill="rgb(248,133,52)" fg:x="87" fg:w="2"/><text x="7.2436%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.9936%" y="597" width="0.1608%" height="15" fill="rgb(238,100,21)" fg:x="87" fg:w="2"/><text x="7.2436%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.9936%" y="581" width="0.1608%" height="15" fill="rgb(247,144,11)" fg:x="87" fg:w="2"/><text x="7.2436%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.9132%" y="645" width="0.3215%" height="15" fill="rgb(206,164,16)" fg:x="86" fg:w="4"/><text x="7.1632%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1543%" y="629" width="0.0804%" height="15" fill="rgb(222,34,3)" fg:x="89" fg:w="1"/><text x="7.4043%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="6.8328%" y="661" width="0.4823%" height="15" fill="rgb(248,82,4)" fg:x="85" fg:w="6"/><text x="7.0828%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2347%" y="645" width="0.0804%" height="15" fill="rgb(228,81,46)" fg:x="90" fg:w="1"/><text x="7.4847%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="6.5113%" y="677" width="0.9646%" height="15" fill="rgb(227,67,47)" fg:x="81" fg:w="12"/><text x="6.7613%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.3151%" y="661" width="0.1608%" height="15" fill="rgb(215,93,53)" fg:x="91" fg:w="2"/><text x="7.5651%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.3151%" y="645" width="0.1608%" height="15" fill="rgb(248,194,39)" fg:x="91" fg:w="2"/><text x="7.5651%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.3151%" y="629" width="0.1608%" height="15" fill="rgb(215,5,19)" fg:x="91" fg:w="2"/><text x="7.5651%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="7.3151%" y="613" width="0.1608%" height="15" fill="rgb(226,215,51)" fg:x="91" fg:w="2"/><text x="7.5651%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="7.3151%" y="597" width="0.1608%" height="15" fill="rgb(225,56,26)" fg:x="91" fg:w="2"/><text x="7.5651%" y="607.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="7.3151%" y="581" width="0.1608%" height="15" fill="rgb(222,75,29)" fg:x="91" fg:w="2"/><text x="7.5651%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (18 samples, 1.45%)</title><rect x="6.1093%" y="693" width="1.4469%" height="15" fill="rgb(236,139,6)" fg:x="76" fg:w="18"/><text x="6.3593%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.4759%" y="677" width="0.0804%" height="15" fill="rgb(223,137,36)" fg:x="93" fg:w="1"/><text x="7.7259%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.4759%" y="661" width="0.0804%" height="15" fill="rgb(226,99,2)" fg:x="93" fg:w="1"/><text x="7.7259%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4759%" y="645" width="0.0804%" height="15" fill="rgb(206,133,23)" fg:x="93" fg:w="1"/><text x="7.7259%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.4759%" y="629" width="0.0804%" height="15" fill="rgb(243,173,15)" fg:x="93" fg:w="1"/><text x="7.7259%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.4759%" y="613" width="0.0804%" height="15" fill="rgb(228,69,28)" fg:x="93" fg:w="1"/><text x="7.7259%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4759%" y="597" width="0.0804%" height="15" fill="rgb(212,51,22)" fg:x="93" fg:w="1"/><text x="7.7259%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.5563%" y="693" width="0.0804%" height="15" fill="rgb(227,113,0)" fg:x="94" fg:w="1"/><text x="7.8063%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.5563%" y="677" width="0.0804%" height="15" fill="rgb(252,84,27)" fg:x="94" fg:w="1"/><text x="7.8063%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.5563%" y="661" width="0.0804%" height="15" fill="rgb(223,145,39)" fg:x="94" fg:w="1"/><text x="7.8063%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.5563%" y="645" width="0.0804%" height="15" fill="rgb(239,219,30)" fg:x="94" fg:w="1"/><text x="7.8063%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.5563%" y="629" width="0.0804%" height="15" fill="rgb(224,196,39)" fg:x="94" fg:w="1"/><text x="7.8063%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.5563%" y="613" width="0.0804%" height="15" fill="rgb(205,35,43)" fg:x="94" fg:w="1"/><text x="7.8063%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5563%" y="597" width="0.0804%" height="15" fill="rgb(228,201,21)" fg:x="94" fg:w="1"/><text x="7.8063%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.7170%" y="629" width="0.0804%" height="15" fill="rgb(237,118,16)" fg:x="96" fg:w="1"/><text x="7.9670%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.7170%" y="613" width="0.0804%" height="15" fill="rgb(241,17,19)" fg:x="96" fg:w="1"/><text x="7.9670%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="7.6367%" y="677" width="0.3215%" height="15" fill="rgb(214,10,25)" fg:x="95" fg:w="4"/><text x="7.8867%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="7.6367%" y="661" width="0.3215%" height="15" fill="rgb(238,37,29)" fg:x="95" fg:w="4"/><text x="7.8867%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="7.6367%" y="645" width="0.3215%" height="15" fill="rgb(253,83,25)" fg:x="95" fg:w="4"/><text x="7.8867%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.7974%" y="629" width="0.1608%" height="15" fill="rgb(234,192,12)" fg:x="97" fg:w="2"/><text x="8.0474%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.7974%" y="613" width="0.1608%" height="15" fill="rgb(241,216,45)" fg:x="97" fg:w="2"/><text x="8.0474%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="7.8778%" y="597" width="0.0804%" height="15" fill="rgb(242,22,33)" fg:x="98" fg:w="1"/><text x="8.1278%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.8778%" y="581" width="0.0804%" height="15" fill="rgb(231,105,49)" fg:x="98" fg:w="1"/><text x="8.1278%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.8778%" y="565" width="0.0804%" height="15" fill="rgb(218,204,15)" fg:x="98" fg:w="1"/><text x="8.1278%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8778%" y="549" width="0.0804%" height="15" fill="rgb(235,138,41)" fg:x="98" fg:w="1"/><text x="8.1278%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.9582%" y="645" width="0.1608%" height="15" fill="rgb(246,0,9)" fg:x="99" fg:w="2"/><text x="8.2082%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.9582%" y="629" width="0.1608%" height="15" fill="rgb(210,74,4)" fg:x="99" fg:w="2"/><text x="8.2082%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.0386%" y="613" width="0.0804%" height="15" fill="rgb(250,60,41)" fg:x="100" fg:w="1"/><text x="8.2886%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1190%" y="645" width="0.0804%" height="15" fill="rgb(220,115,12)" fg:x="101" fg:w="1"/><text x="8.3690%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.1190%" y="629" width="0.0804%" height="15" fill="rgb(237,100,13)" fg:x="101" fg:w="1"/><text x="8.3690%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.2797%" y="597" width="0.1608%" height="15" fill="rgb(213,55,26)" fg:x="103" fg:w="2"/><text x="8.5297%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.2797%" y="581" width="0.1608%" height="15" fill="rgb(216,17,4)" fg:x="103" fg:w="2"/><text x="8.5297%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.2797%" y="565" width="0.1608%" height="15" fill="rgb(220,153,47)" fg:x="103" fg:w="2"/><text x="8.5297%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.32%)</title><rect x="8.1994%" y="645" width="0.3215%" height="15" fill="rgb(215,131,9)" fg:x="102" fg:w="4"/><text x="8.4494%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="8.1994%" y="629" width="0.3215%" height="15" fill="rgb(233,46,42)" fg:x="102" fg:w="4"/><text x="8.4494%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="8.2797%" y="613" width="0.2412%" height="15" fill="rgb(226,86,7)" fg:x="103" fg:w="3"/><text x="8.5297%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4405%" y="597" width="0.0804%" height="15" fill="rgb(239,226,21)" fg:x="105" fg:w="1"/><text x="8.6905%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.5209%" y="597" width="0.0804%" height="15" fill="rgb(244,137,22)" fg:x="106" fg:w="1"/><text x="8.7709%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5209%" y="581" width="0.0804%" height="15" fill="rgb(211,139,35)" fg:x="106" fg:w="1"/><text x="8.7709%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.5209%" y="565" width="0.0804%" height="15" fill="rgb(214,62,50)" fg:x="106" fg:w="1"/><text x="8.7709%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5209%" y="549" width="0.0804%" height="15" fill="rgb(212,113,44)" fg:x="106" fg:w="1"/><text x="8.7709%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5209%" y="533" width="0.0804%" height="15" fill="rgb(226,150,43)" fg:x="106" fg:w="1"/><text x="8.7709%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="7.9582%" y="677" width="0.7235%" height="15" fill="rgb(250,71,37)" fg:x="99" fg:w="9"/><text x="8.2082%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="7.9582%" y="661" width="0.7235%" height="15" fill="rgb(219,76,19)" fg:x="99" fg:w="9"/><text x="8.2082%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.5209%" y="645" width="0.1608%" height="15" fill="rgb(250,39,11)" fg:x="106" fg:w="2"/><text x="8.7709%" y="655.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5209%" y="629" width="0.1608%" height="15" fill="rgb(230,64,31)" fg:x="106" fg:w="2"/><text x="8.7709%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.5209%" y="613" width="0.1608%" height="15" fill="rgb(208,222,23)" fg:x="106" fg:w="2"/><text x="8.7709%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6013%" y="597" width="0.0804%" height="15" fill="rgb(227,125,18)" fg:x="107" fg:w="1"/><text x="8.8513%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.6013%" y="581" width="0.0804%" height="15" fill="rgb(234,210,9)" fg:x="107" fg:w="1"/><text x="8.8513%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.0032%" y="517" width="0.0804%" height="15" fill="rgb(217,127,24)" fg:x="112" fg:w="1"/><text x="9.2532%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.0032%" y="501" width="0.0804%" height="15" fill="rgb(239,141,48)" fg:x="112" fg:w="1"/><text x="9.2532%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.0032%" y="485" width="0.0804%" height="15" fill="rgb(227,109,8)" fg:x="112" fg:w="1"/><text x="9.2532%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.0836%" y="517" width="0.0804%" height="15" fill="rgb(235,184,23)" fg:x="113" fg:w="1"/><text x="9.3336%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0836%" y="501" width="0.0804%" height="15" fill="rgb(227,226,48)" fg:x="113" fg:w="1"/><text x="9.3336%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="8.9228%" y="549" width="0.4019%" height="15" fill="rgb(206,150,11)" fg:x="111" fg:w="5"/><text x="9.1728%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="8.9228%" y="533" width="0.4019%" height="15" fill="rgb(254,2,33)" fg:x="111" fg:w="5"/><text x="9.1728%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.1640%" y="517" width="0.1608%" height="15" fill="rgb(243,160,20)" fg:x="114" fg:w="2"/><text x="9.4140%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.1640%" y="501" width="0.1608%" height="15" fill="rgb(218,208,30)" fg:x="114" fg:w="2"/><text x="9.4140%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="9.1640%" y="485" width="0.1608%" height="15" fill="rgb(224,120,49)" fg:x="114" fg:w="2"/><text x="9.4140%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="9.3248%" y="549" width="0.1608%" height="15" fill="rgb(246,12,2)" fg:x="116" fg:w="2"/><text x="9.5748%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4051%" y="533" width="0.0804%" height="15" fill="rgb(236,117,3)" fg:x="117" fg:w="1"/><text x="9.6551%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="8.7621%" y="613" width="0.8842%" height="15" fill="rgb(216,128,52)" fg:x="109" fg:w="11"/><text x="9.0121%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.80%)</title><rect x="8.8424%" y="597" width="0.8039%" height="15" fill="rgb(246,145,19)" fg:x="110" fg:w="10"/><text x="9.0924%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="8.8424%" y="581" width="0.8039%" height="15" fill="rgb(222,11,46)" fg:x="110" fg:w="10"/><text x="9.0924%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.80%)</title><rect x="8.8424%" y="565" width="0.8039%" height="15" fill="rgb(245,82,36)" fg:x="110" fg:w="10"/><text x="9.0924%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.4855%" y="549" width="0.1608%" height="15" fill="rgb(250,73,51)" fg:x="118" fg:w="2"/><text x="9.7355%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5659%" y="533" width="0.0804%" height="15" fill="rgb(221,189,23)" fg:x="119" fg:w="1"/><text x="9.8159%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5659%" y="517" width="0.0804%" height="15" fill="rgb(210,33,7)" fg:x="119" fg:w="1"/><text x="9.8159%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.6463%" y="613" width="0.0804%" height="15" fill="rgb(210,107,22)" fg:x="120" fg:w="1"/><text x="9.8963%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6463%" y="597" width="0.0804%" height="15" fill="rgb(222,116,37)" fg:x="120" fg:w="1"/><text x="9.8963%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (15 samples, 1.21%)</title><rect x="8.6817%" y="677" width="1.2058%" height="15" fill="rgb(254,17,48)" fg:x="108" fg:w="15"/><text x="8.9317%" y="687.50"></text></g><g><title>serde_json::de::from_trait (15 samples, 1.21%)</title><rect x="8.6817%" y="661" width="1.2058%" height="15" fill="rgb(224,36,32)" fg:x="108" fg:w="15"/><text x="8.9317%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.21%)</title><rect x="8.6817%" y="645" width="1.2058%" height="15" fill="rgb(232,90,46)" fg:x="108" fg:w="15"/><text x="8.9317%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.21%)</title><rect x="8.6817%" y="629" width="1.2058%" height="15" fill="rgb(241,66,40)" fg:x="108" fg:w="15"/><text x="8.9317%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.7267%" y="613" width="0.1608%" height="15" fill="rgb(249,184,29)" fg:x="121" fg:w="2"/><text x="9.9767%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8071%" y="597" width="0.0804%" height="15" fill="rgb(231,181,1)" fg:x="122" fg:w="1"/><text x="10.0571%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.8875%" y="645" width="0.1608%" height="15" fill="rgb(224,94,2)" fg:x="123" fg:w="2"/><text x="10.1375%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.9678%" y="629" width="0.0804%" height="15" fill="rgb(229,170,15)" fg:x="124" fg:w="1"/><text x="10.2178%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.9678%" y="613" width="0.0804%" height="15" fill="rgb(240,127,35)" fg:x="124" fg:w="1"/><text x="10.2178%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.9678%" y="597" width="0.0804%" height="15" fill="rgb(248,196,34)" fg:x="124" fg:w="1"/><text x="10.2178%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="9.8875%" y="661" width="0.2412%" height="15" fill="rgb(236,137,7)" fg:x="123" fg:w="3"/><text x="10.1375%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.0482%" y="645" width="0.0804%" height="15" fill="rgb(235,127,16)" fg:x="125" fg:w="1"/><text x="10.2982%" y="655.50"></text></g><g><title>engine::session::Session::close (56 samples, 4.50%)</title><rect x="5.7074%" y="757" width="4.5016%" height="15" fill="rgb(250,192,54)" fg:x="71" fg:w="56"/><text x="5.9574%" y="767.50">engin..</text></g><g><title>engine::session::Session::save_entity_changes (55 samples, 4.42%)</title><rect x="5.7878%" y="741" width="4.4212%" height="15" fill="rgb(218,98,20)" fg:x="72" fg:w="55"/><text x="6.0378%" y="751.50">engin..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (52 samples, 4.18%)</title><rect x="6.0289%" y="725" width="4.1801%" height="15" fill="rgb(230,176,47)" fg:x="75" fg:w="52"/><text x="6.2789%" y="735.50">engin..</text></g><g><title>engine::session::SavesEntities::check_for_changes (52 samples, 4.18%)</title><rect x="6.0289%" y="709" width="4.1801%" height="15" fill="rgb(244,2,33)" fg:x="75" fg:w="52"/><text x="6.2789%" y="719.50">engin..</text></g><g><title>kernel::compare::any_entity_changes (32 samples, 2.57%)</title><rect x="7.6367%" y="693" width="2.5723%" height="15" fill="rgb(231,100,17)" fg:x="95" fg:w="32"/><text x="7.8867%" y="703.50">ke..</text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="9.8875%" y="677" width="0.3215%" height="15" fill="rgb(245,23,12)" fg:x="123" fg:w="4"/><text x="10.1375%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.1286%" y="661" width="0.0804%" height="15" fill="rgb(249,55,22)" fg:x="126" fg:w="1"/><text x="10.3786%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.2090%" y="709" width="0.0804%" height="15" fill="rgb(207,134,9)" fg:x="127" fg:w="1"/><text x="10.4590%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.2090%" y="693" width="0.0804%" height="15" fill="rgb(218,134,0)" fg:x="127" fg:w="1"/><text x="10.4590%" y="703.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.2090%" y="677" width="0.0804%" height="15" fill="rgb(213,212,33)" fg:x="127" fg:w="1"/><text x="10.4590%" y="687.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="10.4502%" y="597" width="0.0804%" height="15" fill="rgb(252,106,18)" fg:x="130" fg:w="1"/><text x="10.7002%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4502%" y="581" width="0.0804%" height="15" fill="rgb(208,126,42)" fg:x="130" fg:w="1"/><text x="10.7002%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4502%" y="565" width="0.0804%" height="15" fill="rgb(246,175,29)" fg:x="130" fg:w="1"/><text x="10.7002%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4502%" y="549" width="0.0804%" height="15" fill="rgb(215,13,50)" fg:x="130" fg:w="1"/><text x="10.7002%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.4502%" y="533" width="0.0804%" height="15" fill="rgb(216,172,15)" fg:x="130" fg:w="1"/><text x="10.7002%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.4502%" y="517" width="0.0804%" height="15" fill="rgb(212,103,13)" fg:x="130" fg:w="1"/><text x="10.7002%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.4502%" y="501" width="0.0804%" height="15" fill="rgb(231,171,36)" fg:x="130" fg:w="1"/><text x="10.7002%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="10.4502%" y="485" width="0.0804%" height="15" fill="rgb(250,123,20)" fg:x="130" fg:w="1"/><text x="10.7002%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.4502%" y="469" width="0.0804%" height="15" fill="rgb(212,53,50)" fg:x="130" fg:w="1"/><text x="10.7002%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7717%" y="389" width="0.0804%" height="15" fill="rgb(243,54,12)" fg:x="134" fg:w="1"/><text x="11.0217%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.7717%" y="373" width="0.0804%" height="15" fill="rgb(234,101,34)" fg:x="134" fg:w="1"/><text x="11.0217%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="10.7717%" y="405" width="0.1608%" height="15" fill="rgb(254,67,22)" fg:x="134" fg:w="2"/><text x="11.0217%" y="415.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="10.8521%" y="389" width="0.0804%" height="15" fill="rgb(250,35,47)" fg:x="135" fg:w="1"/><text x="11.1021%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="10.6913%" y="421" width="0.3215%" height="15" fill="rgb(226,126,38)" fg:x="133" fg:w="4"/><text x="10.9413%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="10.9325%" y="405" width="0.0804%" height="15" fill="rgb(216,138,53)" fg:x="136" fg:w="1"/><text x="11.1825%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="10.6913%" y="485" width="0.4019%" height="15" fill="rgb(246,199,43)" fg:x="133" fg:w="5"/><text x="10.9413%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="10.6913%" y="469" width="0.4019%" height="15" fill="rgb(232,125,11)" fg:x="133" fg:w="5"/><text x="10.9413%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="10.6913%" y="453" width="0.4019%" height="15" fill="rgb(218,219,45)" fg:x="133" fg:w="5"/><text x="10.9413%" y="463.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.40%)</title><rect x="10.6913%" y="437" width="0.4019%" height="15" fill="rgb(216,102,54)" fg:x="133" fg:w="5"/><text x="10.9413%" y="447.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="11.0129%" y="421" width="0.0804%" height="15" fill="rgb(250,228,7)" fg:x="137" fg:w="1"/><text x="11.2629%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="11.0129%" y="405" width="0.0804%" height="15" fill="rgb(226,125,25)" fg:x="137" fg:w="1"/><text x="11.2629%" y="415.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="11.0129%" y="389" width="0.0804%" height="15" fill="rgb(224,165,27)" fg:x="137" fg:w="1"/><text x="11.2629%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="11.0129%" y="373" width="0.0804%" height="15" fill="rgb(233,86,3)" fg:x="137" fg:w="1"/><text x="11.2629%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0932%" y="469" width="0.0804%" height="15" fill="rgb(228,116,20)" fg:x="138" fg:w="1"/><text x="11.3432%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="11.0932%" y="485" width="0.2412%" height="15" fill="rgb(209,192,17)" fg:x="138" fg:w="3"/><text x="11.3432%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="11.1736%" y="469" width="0.1608%" height="15" fill="rgb(224,88,34)" fg:x="139" fg:w="2"/><text x="11.4236%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="11.2540%" y="453" width="0.0804%" height="15" fill="rgb(233,38,6)" fg:x="140" fg:w="1"/><text x="11.5040%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="11.2540%" y="437" width="0.0804%" height="15" fill="rgb(212,59,30)" fg:x="140" fg:w="1"/><text x="11.5040%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2540%" y="421" width="0.0804%" height="15" fill="rgb(213,80,3)" fg:x="140" fg:w="1"/><text x="11.5040%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.7363%" y="421" width="0.1608%" height="15" fill="rgb(251,178,7)" fg:x="146" fg:w="2"/><text x="11.9863%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9775%" y="405" width="0.0804%" height="15" fill="rgb(213,154,26)" fg:x="149" fg:w="1"/><text x="12.2275%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (29 samples, 2.33%)</title><rect x="11.8971%" y="421" width="2.3312%" height="15" fill="rgb(238,165,49)" fg:x="148" fg:w="29"/><text x="12.1471%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (27 samples, 2.17%)</title><rect x="12.0579%" y="405" width="2.1704%" height="15" fill="rgb(248,91,46)" fg:x="150" fg:w="27"/><text x="12.3079%" y="415.50">c..</text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="14.2283%" y="421" width="0.0804%" height="15" fill="rgb(244,21,52)" fg:x="177" fg:w="1"/><text x="14.4783%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="14.3087%" y="405" width="0.0804%" height="15" fill="rgb(247,122,20)" fg:x="178" fg:w="1"/><text x="14.5587%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="14.3087%" y="421" width="0.5627%" height="15" fill="rgb(218,27,9)" fg:x="178" fg:w="7"/><text x="14.5587%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="14.3891%" y="405" width="0.4823%" height="15" fill="rgb(246,7,6)" fg:x="179" fg:w="6"/><text x="14.6391%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.7910%" y="389" width="0.0804%" height="15" fill="rgb(227,135,54)" fg:x="184" fg:w="1"/><text x="15.0410%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="14.8714%" y="421" width="0.0804%" height="15" fill="rgb(247,14,11)" fg:x="185" fg:w="1"/><text x="15.1214%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.9518%" y="389" width="0.0804%" height="15" fill="rgb(206,149,34)" fg:x="186" fg:w="1"/><text x="15.2018%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.9518%" y="373" width="0.0804%" height="15" fill="rgb(227,228,4)" fg:x="186" fg:w="1"/><text x="15.2018%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9518%" y="357" width="0.0804%" height="15" fill="rgb(238,218,28)" fg:x="186" fg:w="1"/><text x="15.2018%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4341%" y="357" width="0.0804%" height="15" fill="rgb(252,86,40)" fg:x="192" fg:w="1"/><text x="15.6841%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="15.5145%" y="357" width="0.1608%" height="15" fill="rgb(251,225,11)" fg:x="193" fg:w="2"/><text x="15.7645%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="15.5145%" y="341" width="0.1608%" height="15" fill="rgb(206,46,49)" fg:x="193" fg:w="2"/><text x="15.7645%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.5145%" y="325" width="0.1608%" height="15" fill="rgb(245,128,24)" fg:x="193" fg:w="2"/><text x="15.7645%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.5949%" y="309" width="0.0804%" height="15" fill="rgb(219,177,34)" fg:x="194" fg:w="1"/><text x="15.8449%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="15.6752%" y="357" width="0.1608%" height="15" fill="rgb(218,60,48)" fg:x="195" fg:w="2"/><text x="15.9252%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="15.6752%" y="341" width="0.1608%" height="15" fill="rgb(221,11,5)" fg:x="195" fg:w="2"/><text x="15.9252%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.6752%" y="325" width="0.1608%" height="15" fill="rgb(220,148,13)" fg:x="195" fg:w="2"/><text x="15.9252%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="15.6752%" y="309" width="0.1608%" height="15" fill="rgb(210,16,3)" fg:x="195" fg:w="2"/><text x="15.9252%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0772%" y="293" width="0.0804%" height="15" fill="rgb(236,80,2)" fg:x="200" fg:w="1"/><text x="16.3272%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="15.9968%" y="325" width="0.2412%" height="15" fill="rgb(239,129,19)" fg:x="199" fg:w="3"/><text x="16.2468%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="16.0772%" y="309" width="0.1608%" height="15" fill="rgb(220,106,35)" fg:x="200" fg:w="2"/><text x="16.3272%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.1576%" y="293" width="0.0804%" height="15" fill="rgb(252,139,45)" fg:x="201" fg:w="1"/><text x="16.4076%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="15.8360%" y="357" width="0.4823%" height="15" fill="rgb(229,8,36)" fg:x="197" fg:w="6"/><text x="16.0860%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="15.9164%" y="341" width="0.4019%" height="15" fill="rgb(230,126,33)" fg:x="198" fg:w="5"/><text x="16.1664%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="16.2379%" y="325" width="0.0804%" height="15" fill="rgb(239,140,21)" fg:x="202" fg:w="1"/><text x="16.4879%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="16.2379%" y="309" width="0.0804%" height="15" fill="rgb(254,104,9)" fg:x="202" fg:w="1"/><text x="16.4879%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="16.3183%" y="357" width="0.0804%" height="15" fill="rgb(239,52,14)" fg:x="203" fg:w="1"/><text x="16.5683%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="16.3183%" y="341" width="0.0804%" height="15" fill="rgb(208,227,44)" fg:x="203" fg:w="1"/><text x="16.5683%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="16.3183%" y="325" width="0.0804%" height="15" fill="rgb(246,18,19)" fg:x="203" fg:w="1"/><text x="16.5683%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3987%" y="325" width="0.0804%" height="15" fill="rgb(235,228,25)" fg:x="204" fg:w="1"/><text x="16.6487%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (91 samples, 7.32%)</title><rect x="16.3987%" y="357" width="7.3151%" height="15" fill="rgb(240,156,20)" fg:x="204" fg:w="91"/><text x="16.6487%" y="367.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (91 samples, 7.32%)</title><rect x="16.3987%" y="341" width="7.3151%" height="15" fill="rgb(224,8,20)" fg:x="204" fg:w="91"/><text x="16.6487%" y="351.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (90 samples, 7.23%)</title><rect x="16.4791%" y="325" width="7.2347%" height="15" fill="rgb(214,12,52)" fg:x="205" fg:w="90"/><text x="16.7291%" y="335.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.56%)</title><rect x="23.7138%" y="357" width="0.5627%" height="15" fill="rgb(211,220,47)" fg:x="295" fg:w="7"/><text x="23.9638%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1961%" y="341" width="0.0804%" height="15" fill="rgb(250,173,5)" fg:x="301" fg:w="1"/><text x="24.4461%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 9.41%)</title><rect x="14.9518%" y="405" width="9.4051%" height="15" fill="rgb(250,125,52)" fg:x="186" fg:w="117"/><text x="15.2018%" y="415.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (116 samples, 9.32%)</title><rect x="15.0322%" y="389" width="9.3248%" height="15" fill="rgb(209,133,18)" fg:x="187" fg:w="116"/><text x="15.2822%" y="399.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (116 samples, 9.32%)</title><rect x="15.0322%" y="373" width="9.3248%" height="15" fill="rgb(216,173,22)" fg:x="187" fg:w="116"/><text x="15.2822%" y="383.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="24.2765%" y="357" width="0.0804%" height="15" fill="rgb(205,3,22)" fg:x="302" fg:w="1"/><text x="24.5265%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.2765%" y="341" width="0.0804%" height="15" fill="rgb(248,22,20)" fg:x="302" fg:w="1"/><text x="24.5265%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.2765%" y="325" width="0.0804%" height="15" fill="rgb(233,6,29)" fg:x="302" fg:w="1"/><text x="24.5265%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.2765%" y="309" width="0.0804%" height="15" fill="rgb(240,22,54)" fg:x="302" fg:w="1"/><text x="24.5265%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.4373%" y="389" width="0.1608%" height="15" fill="rgb(231,133,32)" fg:x="304" fg:w="2"/><text x="24.6873%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="24.5981%" y="389" width="0.3215%" height="15" fill="rgb(248,193,4)" fg:x="306" fg:w="4"/><text x="24.8481%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="24.7588%" y="373" width="0.1608%" height="15" fill="rgb(211,178,46)" fg:x="308" fg:w="2"/><text x="25.0088%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="24.7588%" y="357" width="0.1608%" height="15" fill="rgb(224,5,42)" fg:x="308" fg:w="2"/><text x="25.0088%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="24.7588%" y="341" width="0.1608%" height="15" fill="rgb(239,176,25)" fg:x="308" fg:w="2"/><text x="25.0088%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.72%)</title><rect x="24.9196%" y="389" width="0.7235%" height="15" fill="rgb(245,187,50)" fg:x="310" fg:w="9"/><text x="25.1696%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.5627%" y="373" width="0.0804%" height="15" fill="rgb(248,24,15)" fg:x="318" fg:w="1"/><text x="25.8127%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.5627%" y="357" width="0.0804%" height="15" fill="rgb(205,166,13)" fg:x="318" fg:w="1"/><text x="25.8127%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="25.5627%" y="341" width="0.0804%" height="15" fill="rgb(208,114,23)" fg:x="318" fg:w="1"/><text x="25.8127%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (17 samples, 1.37%)</title><rect x="24.3569%" y="405" width="1.3666%" height="15" fill="rgb(239,127,18)" fg:x="303" fg:w="17"/><text x="24.6069%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="25.6431%" y="389" width="0.0804%" height="15" fill="rgb(219,154,28)" fg:x="319" fg:w="1"/><text x="25.8931%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="25.7235%" y="389" width="0.0804%" height="15" fill="rgb(225,157,23)" fg:x="320" fg:w="1"/><text x="25.9735%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.7235%" y="373" width="0.0804%" height="15" fill="rgb(219,8,6)" fg:x="320" fg:w="1"/><text x="25.9735%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.7235%" y="357" width="0.0804%" height="15" fill="rgb(212,47,6)" fg:x="320" fg:w="1"/><text x="25.9735%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7235%" y="341" width="0.0804%" height="15" fill="rgb(224,190,4)" fg:x="320" fg:w="1"/><text x="25.9735%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (137 samples, 11.01%)</title><rect x="14.9518%" y="421" width="11.0129%" height="15" fill="rgb(239,183,29)" fg:x="186" fg:w="137"/><text x="15.2018%" y="431.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="25.7235%" y="405" width="0.2412%" height="15" fill="rgb(213,57,7)" fg:x="320" fg:w="3"/><text x="25.9735%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="25.8039%" y="389" width="0.1608%" height="15" fill="rgb(216,148,1)" fg:x="321" fg:w="2"/><text x="26.0539%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8842%" y="373" width="0.0804%" height="15" fill="rgb(236,182,29)" fg:x="322" fg:w="1"/><text x="26.1342%" y="383.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="25.9646%" y="421" width="0.0804%" height="15" fill="rgb(244,120,48)" fg:x="323" fg:w="1"/><text x="26.2146%" y="431.50"></text></g><g><title>regex_automata::meta::strategy::new (181 samples, 14.55%)</title><rect x="11.5756%" y="437" width="14.5498%" height="15" fill="rgb(206,71,34)" fg:x="144" fg:w="181"/><text x="11.8256%" y="447.50">regex_automata::meta::..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="26.0450%" y="421" width="0.0804%" height="15" fill="rgb(242,32,6)" fg:x="324" fg:w="1"/><text x="26.2950%" y="431.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="26.2862%" y="389" width="0.0804%" height="15" fill="rgb(241,35,3)" fg:x="327" fg:w="1"/><text x="26.5362%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="26.3666%" y="389" width="0.0804%" height="15" fill="rgb(222,62,19)" fg:x="328" fg:w="1"/><text x="26.6166%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="26.3666%" y="373" width="0.0804%" height="15" fill="rgb(223,110,41)" fg:x="328" fg:w="1"/><text x="26.6166%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="26.3666%" y="357" width="0.0804%" height="15" fill="rgb(208,224,4)" fg:x="328" fg:w="1"/><text x="26.6166%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="26.4469%" y="389" width="0.1608%" height="15" fill="rgb(241,137,19)" fg:x="329" fg:w="2"/><text x="26.6969%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="26.5273%" y="373" width="0.0804%" height="15" fill="rgb(244,24,17)" fg:x="330" fg:w="1"/><text x="26.7773%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.05%)</title><rect x="26.1254%" y="437" width="1.0450%" height="15" fill="rgb(245,178,49)" fg:x="325" fg:w="13"/><text x="26.3754%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.96%)</title><rect x="26.2058%" y="421" width="0.9646%" height="15" fill="rgb(219,160,38)" fg:x="326" fg:w="12"/><text x="26.4558%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (11 samples, 0.88%)</title><rect x="26.2862%" y="405" width="0.8842%" height="15" fill="rgb(228,137,14)" fg:x="327" fg:w="11"/><text x="26.5362%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="26.6077%" y="389" width="0.5627%" height="15" fill="rgb(237,134,11)" fg:x="331" fg:w="7"/><text x="26.8577%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="26.6077%" y="373" width="0.5627%" height="15" fill="rgb(211,126,44)" fg:x="331" fg:w="7"/><text x="26.8577%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="26.6077%" y="357" width="0.5627%" height="15" fill="rgb(226,171,33)" fg:x="331" fg:w="7"/><text x="26.8577%" y="367.50"></text></g><g><title>__libc_malloc (7 samples, 0.56%)</title><rect x="26.6077%" y="341" width="0.5627%" height="15" fill="rgb(253,99,13)" fg:x="331" fg:w="7"/><text x="26.8577%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.3312%" y="373" width="0.0804%" height="15" fill="rgb(244,48,7)" fg:x="340" fg:w="1"/><text x="27.5812%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.3312%" y="357" width="0.0804%" height="15" fill="rgb(244,217,54)" fg:x="340" fg:w="1"/><text x="27.5812%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.3312%" y="341" width="0.0804%" height="15" fill="rgb(224,15,18)" fg:x="340" fg:w="1"/><text x="27.5812%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="27.1704%" y="405" width="0.3215%" height="15" fill="rgb(244,99,12)" fg:x="338" fg:w="4"/><text x="27.4204%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="27.2508%" y="389" width="0.2412%" height="15" fill="rgb(233,226,8)" fg:x="339" fg:w="3"/><text x="27.5008%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="27.4116%" y="373" width="0.0804%" height="15" fill="rgb(229,211,3)" fg:x="341" fg:w="1"/><text x="27.6616%" y="383.50"></text></g><g><title>regex::regex::string::Regex::new (202 samples, 16.24%)</title><rect x="11.3344%" y="485" width="16.2379%" height="15" fill="rgb(216,140,21)" fg:x="141" fg:w="202"/><text x="11.5844%" y="495.50">regex::regex::string::Reg..</text></g><g><title>regex::builders::Builder::build_one_string (202 samples, 16.24%)</title><rect x="11.3344%" y="469" width="16.2379%" height="15" fill="rgb(234,122,30)" fg:x="141" fg:w="202"/><text x="11.5844%" y="479.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Builder::build (200 samples, 16.08%)</title><rect x="11.4952%" y="453" width="16.0772%" height="15" fill="rgb(236,25,46)" fg:x="143" fg:w="200"/><text x="11.7452%" y="463.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="27.1704%" y="437" width="0.4019%" height="15" fill="rgb(217,52,54)" fg:x="338" fg:w="5"/><text x="27.4204%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="27.1704%" y="421" width="0.4019%" height="15" fill="rgb(222,29,26)" fg:x="338" fg:w="5"/><text x="27.4204%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="27.4920%" y="405" width="0.0804%" height="15" fill="rgb(216,177,29)" fg:x="342" fg:w="1"/><text x="27.7420%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.2154%" y="405" width="0.0804%" height="15" fill="rgb(247,136,51)" fg:x="351" fg:w="1"/><text x="28.4654%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.2958%" y="405" width="0.0804%" height="15" fill="rgb(231,47,47)" fg:x="352" fg:w="1"/><text x="28.5458%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.2958%" y="389" width="0.0804%" height="15" fill="rgb(211,192,36)" fg:x="352" fg:w="1"/><text x="28.5458%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="28.3762%" y="405" width="0.1608%" height="15" fill="rgb(229,156,32)" fg:x="353" fg:w="2"/><text x="28.6262%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.05%)</title><rect x="27.5723%" y="421" width="1.0450%" height="15" fill="rgb(248,213,20)" fg:x="343" fg:w="13"/><text x="27.8223%" y="431.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="28.5370%" y="405" width="0.0804%" height="15" fill="rgb(217,64,7)" fg:x="355" fg:w="1"/><text x="28.7870%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5370%" y="389" width="0.0804%" height="15" fill="rgb(232,142,8)" fg:x="355" fg:w="1"/><text x="28.7870%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.29%)</title><rect x="27.5723%" y="437" width="1.2862%" height="15" fill="rgb(224,92,44)" fg:x="343" fg:w="16"/><text x="27.8223%" y="447.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="28.6174%" y="421" width="0.2412%" height="15" fill="rgb(214,169,17)" fg:x="356" fg:w="3"/><text x="28.8674%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="28.6977%" y="405" width="0.1608%" height="15" fill="rgb(210,59,37)" fg:x="357" fg:w="2"/><text x="28.9477%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.6977%" y="389" width="0.1608%" height="15" fill="rgb(214,116,48)" fg:x="357" fg:w="2"/><text x="28.9477%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7781%" y="373" width="0.0804%" height="15" fill="rgb(244,191,6)" fg:x="358" fg:w="1"/><text x="29.0281%" y="383.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (231 samples, 18.57%)</title><rect x="10.5305%" y="501" width="18.5691%" height="15" fill="rgb(241,50,52)" fg:x="131" fg:w="231"/><text x="10.7805%" y="511.50">indefinite::helper::Helper::g..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (19 samples, 1.53%)</title><rect x="27.5723%" y="485" width="1.5273%" height="15" fill="rgb(236,75,39)" fg:x="343" fg:w="19"/><text x="27.8223%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (19 samples, 1.53%)</title><rect x="27.5723%" y="469" width="1.5273%" height="15" fill="rgb(236,99,0)" fg:x="343" fg:w="19"/><text x="27.8223%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (19 samples, 1.53%)</title><rect x="27.5723%" y="453" width="1.5273%" height="15" fill="rgb(207,202,15)" fg:x="343" fg:w="19"/><text x="27.8223%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (3 samples, 0.24%)</title><rect x="28.8585%" y="437" width="0.2412%" height="15" fill="rgb(233,207,14)" fg:x="359" fg:w="3"/><text x="29.1085%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (3 samples, 0.24%)</title><rect x="28.8585%" y="421" width="0.2412%" height="15" fill="rgb(226,27,51)" fg:x="359" fg:w="3"/><text x="29.1085%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="28.9389%" y="405" width="0.1608%" height="15" fill="rgb(206,104,42)" fg:x="360" fg:w="2"/><text x="29.1889%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.9389%" y="389" width="0.1608%" height="15" fill="rgb(212,225,4)" fg:x="360" fg:w="2"/><text x="29.1889%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.9389%" y="373" width="0.1608%" height="15" fill="rgb(233,96,42)" fg:x="360" fg:w="2"/><text x="29.1889%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.0997%" y="469" width="0.0804%" height="15" fill="rgb(229,21,32)" fg:x="362" fg:w="1"/><text x="29.3497%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.1801%" y="469" width="0.0804%" height="15" fill="rgb(226,216,24)" fg:x="363" fg:w="1"/><text x="29.4301%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.2605%" y="453" width="0.0804%" height="15" fill="rgb(221,163,17)" fg:x="364" fg:w="1"/><text x="29.5105%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.2605%" y="437" width="0.0804%" height="15" fill="rgb(216,216,42)" fg:x="364" fg:w="1"/><text x="29.5105%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.2605%" y="421" width="0.0804%" height="15" fill="rgb(240,118,7)" fg:x="364" fg:w="1"/><text x="29.5105%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="29.0997%" y="485" width="0.4019%" height="15" fill="rgb(221,67,37)" fg:x="362" fg:w="5"/><text x="29.3497%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="29.2605%" y="469" width="0.2412%" height="15" fill="rgb(241,32,44)" fg:x="364" fg:w="3"/><text x="29.5105%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="29.3408%" y="453" width="0.1608%" height="15" fill="rgb(235,204,43)" fg:x="365" fg:w="2"/><text x="29.5908%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="29.4212%" y="437" width="0.0804%" height="15" fill="rgb(213,116,10)" fg:x="366" fg:w="1"/><text x="29.6712%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="29.5016%" y="469" width="0.0804%" height="15" fill="rgb(239,15,48)" fg:x="367" fg:w="1"/><text x="29.7516%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="29.5016%" y="453" width="0.0804%" height="15" fill="rgb(207,123,36)" fg:x="367" fg:w="1"/><text x="29.7516%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="29.5016%" y="437" width="0.0804%" height="15" fill="rgb(209,103,30)" fg:x="367" fg:w="1"/><text x="29.7516%" y="447.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="29.5016%" y="421" width="0.0804%" height="15" fill="rgb(238,100,19)" fg:x="367" fg:w="1"/><text x="29.7516%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="29.5820%" y="421" width="0.0804%" height="15" fill="rgb(244,30,14)" fg:x="368" fg:w="1"/><text x="29.8320%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.5820%" y="405" width="0.0804%" height="15" fill="rgb(249,174,6)" fg:x="368" fg:w="1"/><text x="29.8320%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.5820%" y="389" width="0.0804%" height="15" fill="rgb(235,213,41)" fg:x="368" fg:w="1"/><text x="29.8320%" y="399.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="29.5820%" y="373" width="0.0804%" height="15" fill="rgb(213,118,6)" fg:x="368" fg:w="1"/><text x="29.8320%" y="383.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="29.5820%" y="357" width="0.0804%" height="15" fill="rgb(235,44,51)" fg:x="368" fg:w="1"/><text x="29.8320%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="30.2251%" y="357" width="0.0804%" height="15" fill="rgb(217,9,53)" fg:x="376" fg:w="1"/><text x="30.4751%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="30.2251%" y="341" width="0.0804%" height="15" fill="rgb(237,172,34)" fg:x="376" fg:w="1"/><text x="30.4751%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="30.2251%" y="389" width="0.4019%" height="15" fill="rgb(206,206,11)" fg:x="376" fg:w="5"/><text x="30.4751%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="30.2251%" y="373" width="0.4019%" height="15" fill="rgb(214,149,29)" fg:x="376" fg:w="5"/><text x="30.4751%" y="383.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="30.3055%" y="357" width="0.3215%" height="15" fill="rgb(208,123,3)" fg:x="377" fg:w="4"/><text x="30.5555%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6270%" y="389" width="0.0804%" height="15" fill="rgb(229,126,4)" fg:x="381" fg:w="1"/><text x="30.8770%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6270%" y="373" width="0.0804%" height="15" fill="rgb(222,92,36)" fg:x="381" fg:w="1"/><text x="30.8770%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="30.6270%" y="357" width="0.0804%" height="15" fill="rgb(216,39,41)" fg:x="381" fg:w="1"/><text x="30.8770%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (18 samples, 1.45%)</title><rect x="29.7428%" y="405" width="1.4469%" height="15" fill="rgb(253,127,28)" fg:x="370" fg:w="18"/><text x="29.9928%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="30.7074%" y="389" width="0.4823%" height="15" fill="rgb(249,152,51)" fg:x="382" fg:w="6"/><text x="30.9574%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (22 samples, 1.77%)</title><rect x="29.6624%" y="421" width="1.7685%" height="15" fill="rgb(209,123,42)" fg:x="369" fg:w="22"/><text x="29.9124%" y="431.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="31.1897%" y="405" width="0.2412%" height="15" fill="rgb(241,118,22)" fg:x="388" fg:w="3"/><text x="31.4397%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.2701%" y="389" width="0.1608%" height="15" fill="rgb(208,25,7)" fg:x="389" fg:w="2"/><text x="31.5201%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.3505%" y="373" width="0.0804%" height="15" fill="rgb(243,144,39)" fg:x="390" fg:w="1"/><text x="31.6005%" y="383.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (25 samples, 2.01%)</title><rect x="29.5016%" y="485" width="2.0096%" height="15" fill="rgb(250,50,5)" fg:x="367" fg:w="25"/><text x="29.7516%" y="495.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (24 samples, 1.93%)</title><rect x="29.5820%" y="469" width="1.9293%" height="15" fill="rgb(207,67,11)" fg:x="368" fg:w="24"/><text x="29.8320%" y="479.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (24 samples, 1.93%)</title><rect x="29.5820%" y="453" width="1.9293%" height="15" fill="rgb(245,204,40)" fg:x="368" fg:w="24"/><text x="29.8320%" y="463.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (24 samples, 1.93%)</title><rect x="29.5820%" y="437" width="1.9293%" height="15" fill="rgb(238,228,24)" fg:x="368" fg:w="24"/><text x="29.8320%" y="447.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="31.4309%" y="421" width="0.0804%" height="15" fill="rgb(217,116,22)" fg:x="391" fg:w="1"/><text x="31.6809%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="31.4309%" y="405" width="0.0804%" height="15" fill="rgb(234,98,12)" fg:x="391" fg:w="1"/><text x="31.6809%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.4309%" y="389" width="0.0804%" height="15" fill="rgb(242,170,50)" fg:x="391" fg:w="1"/><text x="31.6809%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.4309%" y="373" width="0.0804%" height="15" fill="rgb(235,7,5)" fg:x="391" fg:w="1"/><text x="31.6809%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4309%" y="357" width="0.0804%" height="15" fill="rgb(241,114,28)" fg:x="391" fg:w="1"/><text x="31.6809%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="31.5113%" y="453" width="0.0804%" height="15" fill="rgb(246,112,42)" fg:x="392" fg:w="1"/><text x="31.7613%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="31.5113%" y="437" width="0.0804%" height="15" fill="rgb(248,228,14)" fg:x="392" fg:w="1"/><text x="31.7613%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.8328%" y="405" width="0.0804%" height="15" fill="rgb(208,133,18)" fg:x="396" fg:w="1"/><text x="32.0828%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="31.7524%" y="437" width="0.2412%" height="15" fill="rgb(207,35,49)" fg:x="395" fg:w="3"/><text x="32.0024%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="31.7524%" y="421" width="0.2412%" height="15" fill="rgb(205,68,36)" fg:x="395" fg:w="3"/><text x="32.0024%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="31.9132%" y="405" width="0.0804%" height="15" fill="rgb(245,62,40)" fg:x="397" fg:w="1"/><text x="32.1632%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9936%" y="437" width="0.0804%" height="15" fill="rgb(228,27,24)" fg:x="398" fg:w="1"/><text x="32.2436%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="32.0740%" y="405" width="0.0804%" height="15" fill="rgb(253,19,12)" fg:x="399" fg:w="1"/><text x="32.3240%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.0740%" y="389" width="0.0804%" height="15" fill="rgb(232,28,20)" fg:x="399" fg:w="1"/><text x="32.3240%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="32.0740%" y="437" width="0.1608%" height="15" fill="rgb(218,35,51)" fg:x="399" fg:w="2"/><text x="32.3240%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="32.0740%" y="421" width="0.1608%" height="15" fill="rgb(212,90,40)" fg:x="399" fg:w="2"/><text x="32.3240%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="32.1543%" y="405" width="0.0804%" height="15" fill="rgb(220,172,12)" fg:x="400" fg:w="1"/><text x="32.4043%" y="415.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.1543%" y="389" width="0.0804%" height="15" fill="rgb(226,159,20)" fg:x="400" fg:w="1"/><text x="32.4043%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.5563%" y="421" width="0.0804%" height="15" fill="rgb(234,205,16)" fg:x="405" fg:w="1"/><text x="32.8063%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.8778%" y="405" width="0.0804%" height="15" fill="rgb(207,9,39)" fg:x="409" fg:w="1"/><text x="33.1278%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (24 samples, 1.93%)</title><rect x="32.6367%" y="421" width="1.9293%" height="15" fill="rgb(249,143,15)" fg:x="406" fg:w="24"/><text x="32.8867%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (20 samples, 1.61%)</title><rect x="32.9582%" y="405" width="1.6077%" height="15" fill="rgb(253,133,29)" fg:x="410" fg:w="20"/><text x="33.2082%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="34.5659%" y="421" width="0.0804%" height="15" fill="rgb(221,187,0)" fg:x="430" fg:w="1"/><text x="34.8159%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.5659%" y="405" width="0.0804%" height="15" fill="rgb(205,204,26)" fg:x="430" fg:w="1"/><text x="34.8159%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="34.5659%" y="389" width="0.0804%" height="15" fill="rgb(224,68,54)" fg:x="430" fg:w="1"/><text x="34.8159%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="34.7267%" y="405" width="0.5627%" height="15" fill="rgb(209,67,4)" fg:x="432" fg:w="7"/><text x="34.9767%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.3698%" y="325" width="0.0804%" height="15" fill="rgb(228,229,18)" fg:x="440" fg:w="1"/><text x="35.6198%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.88%)</title><rect x="34.6463%" y="421" width="0.8842%" height="15" fill="rgb(231,89,13)" fg:x="431" fg:w="11"/><text x="34.8963%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="35.2894%" y="405" width="0.2412%" height="15" fill="rgb(210,182,18)" fg:x="439" fg:w="3"/><text x="35.5394%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (3 samples, 0.24%)</title><rect x="35.2894%" y="389" width="0.2412%" height="15" fill="rgb(240,105,2)" fg:x="439" fg:w="3"/><text x="35.5394%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="35.3698%" y="373" width="0.1608%" height="15" fill="rgb(207,170,50)" fg:x="440" fg:w="2"/><text x="35.6198%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="35.3698%" y="357" width="0.1608%" height="15" fill="rgb(232,133,24)" fg:x="440" fg:w="2"/><text x="35.6198%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="35.3698%" y="341" width="0.1608%" height="15" fill="rgb(235,166,27)" fg:x="440" fg:w="2"/><text x="35.6198%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="35.4502%" y="325" width="0.0804%" height="15" fill="rgb(209,19,13)" fg:x="441" fg:w="1"/><text x="35.7002%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="35.4502%" y="309" width="0.0804%" height="15" fill="rgb(226,79,39)" fg:x="441" fg:w="1"/><text x="35.7002%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.8521%" y="389" width="0.0804%" height="15" fill="rgb(222,163,10)" fg:x="446" fg:w="1"/><text x="36.1021%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.9325%" y="389" width="0.0804%" height="15" fill="rgb(214,44,19)" fg:x="447" fg:w="1"/><text x="36.1825%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.9325%" y="373" width="0.0804%" height="15" fill="rgb(210,217,13)" fg:x="447" fg:w="1"/><text x="36.1825%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.9325%" y="357" width="0.0804%" height="15" fill="rgb(237,61,54)" fg:x="447" fg:w="1"/><text x="36.1825%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="36.0129%" y="389" width="0.2412%" height="15" fill="rgb(226,184,24)" fg:x="448" fg:w="3"/><text x="36.2629%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="36.0932%" y="373" width="0.1608%" height="15" fill="rgb(223,226,4)" fg:x="449" fg:w="2"/><text x="36.3432%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.0932%" y="357" width="0.1608%" height="15" fill="rgb(210,26,41)" fg:x="449" fg:w="2"/><text x="36.3432%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.0932%" y="341" width="0.1608%" height="15" fill="rgb(220,221,6)" fg:x="449" fg:w="2"/><text x="36.3432%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (11 samples, 0.88%)</title><rect x="36.2540%" y="389" width="0.8842%" height="15" fill="rgb(225,89,49)" fg:x="451" fg:w="11"/><text x="36.5040%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="36.7363%" y="373" width="0.4019%" height="15" fill="rgb(218,70,45)" fg:x="457" fg:w="5"/><text x="36.9863%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="36.8167%" y="357" width="0.3215%" height="15" fill="rgb(238,166,21)" fg:x="458" fg:w="4"/><text x="37.0667%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="36.8167%" y="341" width="0.3215%" height="15" fill="rgb(224,141,44)" fg:x="458" fg:w="4"/><text x="37.0667%" y="351.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="36.8167%" y="325" width="0.3215%" height="15" fill="rgb(230,12,49)" fg:x="458" fg:w="4"/><text x="37.0667%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="37.1383%" y="373" width="0.5627%" height="15" fill="rgb(212,174,12)" fg:x="462" fg:w="7"/><text x="37.3883%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.56%)</title><rect x="37.1383%" y="357" width="0.5627%" height="15" fill="rgb(246,67,9)" fg:x="462" fg:w="7"/><text x="37.3883%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.25%)</title><rect x="35.5305%" y="421" width="2.2508%" height="15" fill="rgb(239,35,23)" fg:x="442" fg:w="28"/><text x="35.7805%" y="431.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (28 samples, 2.25%)</title><rect x="35.5305%" y="405" width="2.2508%" height="15" fill="rgb(211,167,0)" fg:x="442" fg:w="28"/><text x="35.7805%" y="415.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="37.1383%" y="389" width="0.6431%" height="15" fill="rgb(225,119,45)" fg:x="462" fg:w="8"/><text x="37.3883%" y="399.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="37.7010%" y="373" width="0.0804%" height="15" fill="rgb(210,162,6)" fg:x="469" fg:w="1"/><text x="37.9510%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="37.8617%" y="357" width="0.0804%" height="15" fill="rgb(208,118,35)" fg:x="471" fg:w="1"/><text x="38.1117%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="37.9421%" y="325" width="0.0804%" height="15" fill="rgb(239,4,53)" fg:x="472" fg:w="1"/><text x="38.1921%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.9421%" y="309" width="0.0804%" height="15" fill="rgb(213,130,21)" fg:x="472" fg:w="1"/><text x="38.1921%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="38.9871%" y="309" width="0.6431%" height="15" fill="rgb(235,148,0)" fg:x="485" fg:w="8"/><text x="39.2371%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="39.6302%" y="309" width="0.1608%" height="15" fill="rgb(244,224,18)" fg:x="493" fg:w="2"/><text x="39.8802%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="39.7910%" y="309" width="0.2412%" height="15" fill="rgb(211,214,4)" fg:x="495" fg:w="3"/><text x="40.0410%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.9518%" y="293" width="0.0804%" height="15" fill="rgb(206,119,25)" fg:x="497" fg:w="1"/><text x="40.2018%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.9518%" y="277" width="0.0804%" height="15" fill="rgb(243,93,47)" fg:x="497" fg:w="1"/><text x="40.2018%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.9518%" y="261" width="0.0804%" height="15" fill="rgb(224,194,6)" fg:x="497" fg:w="1"/><text x="40.2018%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (6 samples, 0.48%)</title><rect x="40.0322%" y="309" width="0.4823%" height="15" fill="rgb(243,229,6)" fg:x="498" fg:w="6"/><text x="40.2822%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.4341%" y="293" width="0.0804%" height="15" fill="rgb(207,23,50)" fg:x="503" fg:w="1"/><text x="40.6841%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.4341%" y="277" width="0.0804%" height="15" fill="rgb(253,192,32)" fg:x="503" fg:w="1"/><text x="40.6841%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.4341%" y="261" width="0.0804%" height="15" fill="rgb(213,21,6)" fg:x="503" fg:w="1"/><text x="40.6841%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.8360%" y="277" width="0.0804%" height="15" fill="rgb(243,151,13)" fg:x="508" fg:w="1"/><text x="41.0860%" y="287.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="40.9164%" y="245" width="0.2412%" height="15" fill="rgb(233,165,41)" fg:x="509" fg:w="3"/><text x="41.1664%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="40.9164%" y="277" width="0.4019%" height="15" fill="rgb(246,176,45)" fg:x="509" fg:w="5"/><text x="41.1664%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="40.9164%" y="261" width="0.4019%" height="15" fill="rgb(217,170,52)" fg:x="509" fg:w="5"/><text x="41.1664%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.1576%" y="245" width="0.1608%" height="15" fill="rgb(214,203,54)" fg:x="512" fg:w="2"/><text x="41.4076%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (18 samples, 1.45%)</title><rect x="40.5145%" y="309" width="1.4469%" height="15" fill="rgb(248,215,49)" fg:x="504" fg:w="18"/><text x="40.7645%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (17 samples, 1.37%)</title><rect x="40.5949%" y="293" width="1.3666%" height="15" fill="rgb(208,46,10)" fg:x="505" fg:w="17"/><text x="40.8449%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.64%)</title><rect x="41.3183%" y="277" width="0.6431%" height="15" fill="rgb(254,5,31)" fg:x="514" fg:w="8"/><text x="41.5683%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="41.7203%" y="261" width="0.2412%" height="15" fill="rgb(222,104,33)" fg:x="519" fg:w="3"/><text x="41.9703%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.8006%" y="245" width="0.1608%" height="15" fill="rgb(248,49,16)" fg:x="520" fg:w="2"/><text x="42.0506%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.8006%" y="229" width="0.1608%" height="15" fill="rgb(232,198,41)" fg:x="520" fg:w="2"/><text x="42.0506%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.8006%" y="213" width="0.1608%" height="15" fill="rgb(214,125,3)" fg:x="520" fg:w="2"/><text x="42.0506%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.9614%" y="293" width="0.0804%" height="15" fill="rgb(229,220,28)" fg:x="522" fg:w="1"/><text x="42.2114%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (81 samples, 6.51%)</title><rect x="41.9614%" y="309" width="6.5113%" height="15" fill="rgb(222,64,37)" fg:x="522" fg:w="81"/><text x="42.2114%" y="319.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (80 samples, 6.43%)</title><rect x="42.0418%" y="293" width="6.4309%" height="15" fill="rgb(249,184,13)" fg:x="523" fg:w="80"/><text x="42.2918%" y="303.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (79 samples, 6.35%)</title><rect x="42.1222%" y="277" width="6.3505%" height="15" fill="rgb(252,176,6)" fg:x="524" fg:w="79"/><text x="42.3722%" y="287.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="48.4727%" y="309" width="0.1608%" height="15" fill="rgb(228,153,7)" fg:x="603" fg:w="2"/><text x="48.7227%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.5531%" y="293" width="0.0804%" height="15" fill="rgb(242,193,5)" fg:x="604" fg:w="1"/><text x="48.8031%" y="303.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="48.6334%" y="309" width="0.0804%" height="15" fill="rgb(232,140,9)" fg:x="605" fg:w="1"/><text x="48.8834%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.5177%" y="261" width="0.0804%" height="15" fill="rgb(213,222,16)" fg:x="616" fg:w="1"/><text x="49.7677%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (147 samples, 11.82%)</title><rect x="37.8617%" y="405" width="11.8167%" height="15" fill="rgb(222,75,50)" fg:x="471" fg:w="147"/><text x="38.1117%" y="415.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (147 samples, 11.82%)</title><rect x="37.8617%" y="389" width="11.8167%" height="15" fill="rgb(205,180,2)" fg:x="471" fg:w="147"/><text x="38.1117%" y="399.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (147 samples, 11.82%)</title><rect x="37.8617%" y="373" width="11.8167%" height="15" fill="rgb(216,34,7)" fg:x="471" fg:w="147"/><text x="38.1117%" y="383.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (146 samples, 11.74%)</title><rect x="37.9421%" y="357" width="11.7363%" height="15" fill="rgb(253,16,32)" fg:x="472" fg:w="146"/><text x="38.1921%" y="367.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (146 samples, 11.74%)</title><rect x="37.9421%" y="341" width="11.7363%" height="15" fill="rgb(208,97,28)" fg:x="472" fg:w="146"/><text x="38.1921%" y="351.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (145 samples, 11.66%)</title><rect x="38.0225%" y="325" width="11.6559%" height="15" fill="rgb(225,92,11)" fg:x="473" fg:w="145"/><text x="38.2725%" y="335.50">regex_automata::n..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (12 samples, 0.96%)</title><rect x="48.7138%" y="309" width="0.9646%" height="15" fill="rgb(243,38,12)" fg:x="606" fg:w="12"/><text x="48.9638%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="49.1158%" y="293" width="0.5627%" height="15" fill="rgb(208,139,16)" fg:x="611" fg:w="7"/><text x="49.3658%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="49.3569%" y="277" width="0.3215%" height="15" fill="rgb(227,24,9)" fg:x="614" fg:w="4"/><text x="49.6069%" y="287.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="49.5981%" y="261" width="0.0804%" height="15" fill="rgb(206,62,11)" fg:x="617" fg:w="1"/><text x="49.8481%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="49.5981%" y="245" width="0.0804%" height="15" fill="rgb(228,134,27)" fg:x="617" fg:w="1"/><text x="49.8481%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="49.9196%" y="389" width="0.1608%" height="15" fill="rgb(205,55,33)" fg:x="621" fg:w="2"/><text x="50.1696%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="50.0804%" y="389" width="0.5627%" height="15" fill="rgb(243,75,43)" fg:x="623" fg:w="7"/><text x="50.3304%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="50.4019%" y="373" width="0.2412%" height="15" fill="rgb(223,27,42)" fg:x="627" fg:w="3"/><text x="50.6519%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.4823%" y="357" width="0.1608%" height="15" fill="rgb(232,189,33)" fg:x="628" fg:w="2"/><text x="50.7323%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="50.4823%" y="341" width="0.1608%" height="15" fill="rgb(210,9,39)" fg:x="628" fg:w="2"/><text x="50.7323%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="50.6431%" y="389" width="0.4019%" height="15" fill="rgb(242,85,26)" fg:x="630" fg:w="5"/><text x="50.8931%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.9646%" y="373" width="0.0804%" height="15" fill="rgb(248,44,4)" fg:x="634" fg:w="1"/><text x="51.2146%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="51.0450%" y="389" width="0.2412%" height="15" fill="rgb(250,96,46)" fg:x="635" fg:w="3"/><text x="51.2950%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (238 samples, 19.13%)</title><rect x="32.2347%" y="437" width="19.1318%" height="15" fill="rgb(229,116,26)" fg:x="401" fg:w="238"/><text x="32.4847%" y="447.50">regex_automata::meta::strategy..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (169 samples, 13.59%)</title><rect x="37.7814%" y="421" width="13.5852%" height="15" fill="rgb(246,94,34)" fg:x="470" fg:w="169"/><text x="38.0314%" y="431.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21 samples, 1.69%)</title><rect x="49.6785%" y="405" width="1.6881%" height="15" fill="rgb(251,73,21)" fg:x="618" fg:w="21"/><text x="49.9285%" y="415.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="51.2862%" y="389" width="0.0804%" height="15" fill="rgb(254,121,25)" fg:x="638" fg:w="1"/><text x="51.5362%" y="399.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="51.2862%" y="373" width="0.0804%" height="15" fill="rgb(215,161,49)" fg:x="638" fg:w="1"/><text x="51.5362%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="51.4469%" y="405" width="0.2412%" height="15" fill="rgb(221,43,13)" fg:x="640" fg:w="3"/><text x="51.6969%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="51.4469%" y="389" width="0.2412%" height="15" fill="rgb(249,5,37)" fg:x="640" fg:w="3"/><text x="51.6969%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="51.4469%" y="373" width="0.2412%" height="15" fill="rgb(226,25,44)" fg:x="640" fg:w="3"/><text x="51.6969%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="51.4469%" y="357" width="0.2412%" height="15" fill="rgb(238,189,16)" fg:x="640" fg:w="3"/><text x="51.6969%" y="367.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="51.4469%" y="341" width="0.2412%" height="15" fill="rgb(251,186,8)" fg:x="640" fg:w="3"/><text x="51.6969%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="51.6881%" y="405" width="0.0804%" height="15" fill="rgb(254,34,31)" fg:x="643" fg:w="1"/><text x="51.9381%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="51.6881%" y="389" width="0.0804%" height="15" fill="rgb(225,215,27)" fg:x="643" fg:w="1"/><text x="51.9381%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="51.3666%" y="437" width="0.5627%" height="15" fill="rgb(221,192,48)" fg:x="639" fg:w="7"/><text x="51.6166%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="51.3666%" y="421" width="0.5627%" height="15" fill="rgb(219,137,20)" fg:x="639" fg:w="7"/><text x="51.6166%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="51.7685%" y="405" width="0.1608%" height="15" fill="rgb(219,84,11)" fg:x="644" fg:w="2"/><text x="52.0185%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.0900%" y="373" width="0.0804%" height="15" fill="rgb(224,10,23)" fg:x="648" fg:w="1"/><text x="52.3400%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.0900%" y="357" width="0.0804%" height="15" fill="rgb(248,22,39)" fg:x="648" fg:w="1"/><text x="52.3400%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.0900%" y="341" width="0.0804%" height="15" fill="rgb(212,154,20)" fg:x="648" fg:w="1"/><text x="52.3400%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (292 samples, 23.47%)</title><rect x="29.0997%" y="501" width="23.4727%" height="15" fill="rgb(236,199,50)" fg:x="362" fg:w="292"/><text x="29.3497%" y="511.50">indefinite::rules::number::Number::ch..</text></g><g><title>regex::regex::string::Regex::new (262 samples, 21.06%)</title><rect x="31.5113%" y="485" width="21.0611%" height="15" fill="rgb(211,9,17)" fg:x="392" fg:w="262"/><text x="31.7613%" y="495.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (262 samples, 21.06%)</title><rect x="31.5113%" y="469" width="21.0611%" height="15" fill="rgb(243,216,36)" fg:x="392" fg:w="262"/><text x="31.7613%" y="479.50">regex::builders::Builder::build_o..</text></g><g><title>regex_automata::meta::regex::Builder::build (261 samples, 20.98%)</title><rect x="31.5916%" y="453" width="20.9807%" height="15" fill="rgb(250,2,10)" fg:x="393" fg:w="261"/><text x="31.8416%" y="463.50">regex_automata::meta::regex::Buil..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="51.9293%" y="437" width="0.6431%" height="15" fill="rgb(226,50,48)" fg:x="646" fg:w="8"/><text x="52.1793%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="51.9293%" y="421" width="0.6431%" height="15" fill="rgb(243,81,16)" fg:x="646" fg:w="8"/><text x="52.1793%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.64%)</title><rect x="51.9293%" y="405" width="0.6431%" height="15" fill="rgb(250,14,2)" fg:x="646" fg:w="8"/><text x="52.1793%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (8 samples, 0.64%)</title><rect x="51.9293%" y="389" width="0.6431%" height="15" fill="rgb(233,135,29)" fg:x="646" fg:w="8"/><text x="52.1793%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (5 samples, 0.40%)</title><rect x="52.1704%" y="373" width="0.4019%" height="15" fill="rgb(224,64,43)" fg:x="649" fg:w="5"/><text x="52.4204%" y="383.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="52.5723%" y="469" width="0.0804%" height="15" fill="rgb(238,84,13)" fg:x="654" fg:w="1"/><text x="52.8223%" y="479.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="52.5723%" y="453" width="0.0804%" height="15" fill="rgb(253,48,26)" fg:x="654" fg:w="1"/><text x="52.8223%" y="463.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="52.5723%" y="437" width="0.0804%" height="15" fill="rgb(205,223,31)" fg:x="654" fg:w="1"/><text x="52.8223%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="52.5723%" y="421" width="0.0804%" height="15" fill="rgb(221,41,32)" fg:x="654" fg:w="1"/><text x="52.8223%" y="431.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.16%)</title><rect x="52.5723%" y="485" width="0.1608%" height="15" fill="rgb(213,158,31)" fg:x="654" fg:w="2"/><text x="52.8223%" y="495.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="52.6527%" y="469" width="0.0804%" height="15" fill="rgb(245,126,43)" fg:x="655" fg:w="1"/><text x="52.9027%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="52.6527%" y="453" width="0.0804%" height="15" fill="rgb(227,7,22)" fg:x="655" fg:w="1"/><text x="52.9027%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="52.6527%" y="437" width="0.0804%" height="15" fill="rgb(252,90,44)" fg:x="655" fg:w="1"/><text x="52.9027%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="52.6527%" y="421" width="0.0804%" height="15" fill="rgb(253,91,0)" fg:x="655" fg:w="1"/><text x="52.9027%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="52.6527%" y="405" width="0.0804%" height="15" fill="rgb(252,175,49)" fg:x="655" fg:w="1"/><text x="52.9027%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="52.6527%" y="389" width="0.0804%" height="15" fill="rgb(246,150,1)" fg:x="655" fg:w="1"/><text x="52.9027%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="52.6527%" y="373" width="0.0804%" height="15" fill="rgb(241,192,25)" fg:x="655" fg:w="1"/><text x="52.9027%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="52.6527%" y="357" width="0.0804%" height="15" fill="rgb(239,187,11)" fg:x="655" fg:w="1"/><text x="52.9027%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.6527%" y="341" width="0.0804%" height="15" fill="rgb(218,202,51)" fg:x="655" fg:w="1"/><text x="52.9027%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.7331%" y="421" width="0.0804%" height="15" fill="rgb(225,176,8)" fg:x="656" fg:w="1"/><text x="52.9831%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.7331%" y="405" width="0.0804%" height="15" fill="rgb(219,122,41)" fg:x="656" fg:w="1"/><text x="52.9831%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.7331%" y="389" width="0.0804%" height="15" fill="rgb(248,140,20)" fg:x="656" fg:w="1"/><text x="52.9831%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="52.7331%" y="469" width="0.1608%" height="15" fill="rgb(245,41,37)" fg:x="656" fg:w="2"/><text x="52.9831%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="52.7331%" y="453" width="0.1608%" height="15" fill="rgb(235,82,39)" fg:x="656" fg:w="2"/><text x="52.9831%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="52.7331%" y="437" width="0.1608%" height="15" fill="rgb(230,108,42)" fg:x="656" fg:w="2"/><text x="52.9831%" y="447.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="52.8135%" y="421" width="0.0804%" height="15" fill="rgb(215,150,50)" fg:x="657" fg:w="1"/><text x="53.0635%" y="431.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="52.8135%" y="405" width="0.0804%" height="15" fill="rgb(233,212,5)" fg:x="657" fg:w="1"/><text x="53.0635%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.9743%" y="437" width="0.0804%" height="15" fill="rgb(245,80,22)" fg:x="659" fg:w="1"/><text x="53.2243%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.0547%" y="421" width="0.0804%" height="15" fill="rgb(238,129,16)" fg:x="660" fg:w="1"/><text x="53.3047%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="53.1350%" y="421" width="0.0804%" height="15" fill="rgb(240,19,0)" fg:x="661" fg:w="1"/><text x="53.3850%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="53.2154%" y="421" width="0.0804%" height="15" fill="rgb(232,42,35)" fg:x="662" fg:w="1"/><text x="53.4654%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.2154%" y="405" width="0.0804%" height="15" fill="rgb(223,130,24)" fg:x="662" fg:w="1"/><text x="53.4654%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="52.8939%" y="469" width="0.4823%" height="15" fill="rgb(237,16,22)" fg:x="658" fg:w="6"/><text x="53.1439%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="52.9743%" y="453" width="0.4019%" height="15" fill="rgb(248,192,20)" fg:x="659" fg:w="5"/><text x="53.2243%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="53.0547%" y="437" width="0.3215%" height="15" fill="rgb(233,167,2)" fg:x="660" fg:w="4"/><text x="53.3047%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="53.2958%" y="421" width="0.0804%" height="15" fill="rgb(252,71,44)" fg:x="663" fg:w="1"/><text x="53.5458%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.2958%" y="405" width="0.0804%" height="15" fill="rgb(238,37,47)" fg:x="663" fg:w="1"/><text x="53.5458%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.4566%" y="389" width="0.0804%" height="15" fill="rgb(214,202,54)" fg:x="665" fg:w="1"/><text x="53.7066%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="53.4566%" y="421" width="0.1608%" height="15" fill="rgb(254,165,40)" fg:x="665" fg:w="2"/><text x="53.7066%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="53.4566%" y="405" width="0.1608%" height="15" fill="rgb(246,173,38)" fg:x="665" fg:w="2"/><text x="53.7066%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="53.5370%" y="389" width="0.0804%" height="15" fill="rgb(215,3,27)" fg:x="666" fg:w="1"/><text x="53.7870%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.6174%" y="421" width="0.1608%" height="15" fill="rgb(239,169,51)" fg:x="667" fg:w="2"/><text x="53.8674%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="53.8585%" y="389" width="0.1608%" height="15" fill="rgb(212,5,25)" fg:x="670" fg:w="2"/><text x="54.1085%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="53.8585%" y="373" width="0.1608%" height="15" fill="rgb(243,45,17)" fg:x="670" fg:w="2"/><text x="54.1085%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.9389%" y="357" width="0.0804%" height="15" fill="rgb(242,97,9)" fg:x="671" fg:w="1"/><text x="54.1889%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.9389%" y="341" width="0.0804%" height="15" fill="rgb(228,71,31)" fg:x="671" fg:w="1"/><text x="54.1889%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="54.0193%" y="389" width="0.0804%" height="15" fill="rgb(252,184,16)" fg:x="672" fg:w="1"/><text x="54.2693%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.0193%" y="373" width="0.0804%" height="15" fill="rgb(236,169,46)" fg:x="672" fg:w="1"/><text x="54.2693%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="53.7781%" y="421" width="0.4019%" height="15" fill="rgb(207,17,47)" fg:x="669" fg:w="5"/><text x="54.0281%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="53.7781%" y="405" width="0.4019%" height="15" fill="rgb(206,201,28)" fg:x="669" fg:w="5"/><text x="54.0281%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="54.0997%" y="389" width="0.0804%" height="15" fill="rgb(224,184,23)" fg:x="673" fg:w="1"/><text x="54.3497%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.0997%" y="373" width="0.0804%" height="15" fill="rgb(208,139,48)" fg:x="673" fg:w="1"/><text x="54.3497%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="54.0997%" y="357" width="0.0804%" height="15" fill="rgb(208,130,10)" fg:x="673" fg:w="1"/><text x="54.3497%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.0997%" y="341" width="0.0804%" height="15" fill="rgb(211,213,45)" fg:x="673" fg:w="1"/><text x="54.3497%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.0997%" y="325" width="0.0804%" height="15" fill="rgb(235,100,30)" fg:x="673" fg:w="1"/><text x="54.3497%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.0997%" y="309" width="0.0804%" height="15" fill="rgb(206,144,31)" fg:x="673" fg:w="1"/><text x="54.3497%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="54.4212%" y="405" width="0.0804%" height="15" fill="rgb(224,200,26)" fg:x="677" fg:w="1"/><text x="54.6712%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.4212%" y="389" width="0.0804%" height="15" fill="rgb(247,104,53)" fg:x="677" fg:w="1"/><text x="54.6712%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (10 samples, 0.80%)</title><rect x="54.5820%" y="389" width="0.8039%" height="15" fill="rgb(220,14,17)" fg:x="679" fg:w="10"/><text x="54.8320%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="55.3055%" y="373" width="0.0804%" height="15" fill="rgb(230,140,40)" fg:x="688" fg:w="1"/><text x="55.5555%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (12 samples, 0.96%)</title><rect x="54.5016%" y="405" width="0.9646%" height="15" fill="rgb(229,2,41)" fg:x="678" fg:w="12"/><text x="54.7516%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="55.3859%" y="389" width="0.0804%" height="15" fill="rgb(232,89,16)" fg:x="689" fg:w="1"/><text x="55.6359%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="55.3859%" y="373" width="0.0804%" height="15" fill="rgb(247,59,52)" fg:x="689" fg:w="1"/><text x="55.6359%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="55.4662%" y="389" width="0.3215%" height="15" fill="rgb(226,110,21)" fg:x="690" fg:w="4"/><text x="55.7162%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="55.4662%" y="373" width="0.3215%" height="15" fill="rgb(224,176,43)" fg:x="690" fg:w="4"/><text x="55.7162%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="55.4662%" y="357" width="0.3215%" height="15" fill="rgb(221,73,6)" fg:x="690" fg:w="4"/><text x="55.7162%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="55.5466%" y="341" width="0.2412%" height="15" fill="rgb(232,78,19)" fg:x="691" fg:w="3"/><text x="55.7966%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="55.7074%" y="325" width="0.0804%" height="15" fill="rgb(233,112,48)" fg:x="693" fg:w="1"/><text x="55.9574%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.7074%" y="309" width="0.0804%" height="15" fill="rgb(243,131,47)" fg:x="693" fg:w="1"/><text x="55.9574%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.7074%" y="293" width="0.0804%" height="15" fill="rgb(226,51,1)" fg:x="693" fg:w="1"/><text x="55.9574%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.7074%" y="277" width="0.0804%" height="15" fill="rgb(247,58,7)" fg:x="693" fg:w="1"/><text x="55.9574%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="55.8682%" y="373" width="0.1608%" height="15" fill="rgb(209,7,32)" fg:x="695" fg:w="2"/><text x="56.1182%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="55.7878%" y="389" width="0.4019%" height="15" fill="rgb(209,39,41)" fg:x="694" fg:w="5"/><text x="56.0378%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="56.0289%" y="373" width="0.1608%" height="15" fill="rgb(226,182,46)" fg:x="697" fg:w="2"/><text x="56.2789%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.80%)</title><rect x="55.4662%" y="405" width="0.8039%" height="15" fill="rgb(230,219,10)" fg:x="690" fg:w="10"/><text x="55.7162%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="56.1897%" y="389" width="0.0804%" height="15" fill="rgb(227,175,30)" fg:x="699" fg:w="1"/><text x="56.4397%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (27 samples, 2.17%)</title><rect x="54.1801%" y="421" width="2.1704%" height="15" fill="rgb(217,2,50)" fg:x="674" fg:w="27"/><text x="54.4301%" y="431.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.2701%" y="405" width="0.0804%" height="15" fill="rgb(229,160,0)" fg:x="700" fg:w="1"/><text x="56.5201%" y="415.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (3 samples, 0.24%)</title><rect x="56.3505%" y="373" width="0.2412%" height="15" fill="rgb(207,78,37)" fg:x="701" fg:w="3"/><text x="56.6005%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="56.4309%" y="357" width="0.1608%" height="15" fill="rgb(225,57,0)" fg:x="702" fg:w="2"/><text x="56.6809%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.5113%" y="341" width="0.0804%" height="15" fill="rgb(232,154,2)" fg:x="703" fg:w="1"/><text x="56.7613%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.5113%" y="325" width="0.0804%" height="15" fill="rgb(241,212,25)" fg:x="703" fg:w="1"/><text x="56.7613%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="56.5916%" y="373" width="0.0804%" height="15" fill="rgb(226,69,20)" fg:x="704" fg:w="1"/><text x="56.8416%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="56.6720%" y="373" width="0.0804%" height="15" fill="rgb(247,184,54)" fg:x="705" fg:w="1"/><text x="56.9220%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="56.3505%" y="389" width="0.4823%" height="15" fill="rgb(210,145,0)" fg:x="701" fg:w="6"/><text x="56.6005%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="56.7524%" y="373" width="0.0804%" height="15" fill="rgb(253,82,12)" fg:x="706" fg:w="1"/><text x="57.0024%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.7524%" y="357" width="0.0804%" height="15" fill="rgb(245,42,11)" fg:x="706" fg:w="1"/><text x="57.0024%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.7524%" y="341" width="0.0804%" height="15" fill="rgb(219,147,32)" fg:x="706" fg:w="1"/><text x="57.0024%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.7524%" y="325" width="0.0804%" height="15" fill="rgb(246,12,7)" fg:x="706" fg:w="1"/><text x="57.0024%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="56.3505%" y="421" width="0.5627%" height="15" fill="rgb(243,50,9)" fg:x="701" fg:w="7"/><text x="56.6005%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="56.3505%" y="405" width="0.5627%" height="15" fill="rgb(219,149,6)" fg:x="701" fg:w="7"/><text x="56.6005%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="56.8328%" y="389" width="0.0804%" height="15" fill="rgb(241,51,42)" fg:x="707" fg:w="1"/><text x="57.0828%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="56.9936%" y="389" width="0.1608%" height="15" fill="rgb(226,128,27)" fg:x="709" fg:w="2"/><text x="57.2436%" y="399.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="56.9936%" y="373" width="0.1608%" height="15" fill="rgb(244,144,4)" fg:x="709" fg:w="2"/><text x="57.2436%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.0740%" y="357" width="0.0804%" height="15" fill="rgb(221,4,13)" fg:x="710" fg:w="1"/><text x="57.3240%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.0740%" y="341" width="0.0804%" height="15" fill="rgb(208,170,28)" fg:x="710" fg:w="1"/><text x="57.3240%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.0740%" y="325" width="0.0804%" height="15" fill="rgb(226,131,13)" fg:x="710" fg:w="1"/><text x="57.3240%" y="335.50"></text></g><g><title>regex::regex::string::Regex::new (48 samples, 3.86%)</title><rect x="53.3762%" y="469" width="3.8585%" height="15" fill="rgb(215,72,41)" fg:x="664" fg:w="48"/><text x="53.6262%" y="479.50">rege..</text></g><g><title>regex::builders::Builder::build_one_string (48 samples, 3.86%)</title><rect x="53.3762%" y="453" width="3.8585%" height="15" fill="rgb(243,108,20)" fg:x="664" fg:w="48"/><text x="53.6262%" y="463.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (47 samples, 3.78%)</title><rect x="53.4566%" y="437" width="3.7781%" height="15" fill="rgb(230,189,17)" fg:x="665" fg:w="47"/><text x="53.7066%" y="447.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="56.9132%" y="421" width="0.3215%" height="15" fill="rgb(220,50,17)" fg:x="708" fg:w="4"/><text x="57.1632%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="56.9132%" y="405" width="0.3215%" height="15" fill="rgb(248,152,48)" fg:x="708" fg:w="4"/><text x="57.1632%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="57.1543%" y="389" width="0.0804%" height="15" fill="rgb(244,91,11)" fg:x="711" fg:w="1"/><text x="57.4043%" y="399.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="57.1543%" y="373" width="0.0804%" height="15" fill="rgb(220,157,5)" fg:x="711" fg:w="1"/><text x="57.4043%" y="383.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="57.1543%" y="357" width="0.0804%" height="15" fill="rgb(253,137,8)" fg:x="711" fg:w="1"/><text x="57.4043%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.3955%" y="405" width="0.0804%" height="15" fill="rgb(217,137,51)" fg:x="714" fg:w="1"/><text x="57.6455%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="57.3955%" y="389" width="0.0804%" height="15" fill="rgb(218,209,53)" fg:x="714" fg:w="1"/><text x="57.6455%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.1994%" y="389" width="0.0804%" height="15" fill="rgb(249,137,25)" fg:x="724" fg:w="1"/><text x="58.4494%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.1994%" y="373" width="0.0804%" height="15" fill="rgb(239,155,26)" fg:x="724" fg:w="1"/><text x="58.4494%" y="383.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (70 samples, 5.63%)</title><rect x="52.7331%" y="485" width="5.6270%" height="15" fill="rgb(227,85,46)" fg:x="656" fg:w="70"/><text x="52.9831%" y="495.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.13%)</title><rect x="57.2347%" y="469" width="1.1254%" height="15" fill="rgb(251,107,43)" fg:x="712" fg:w="14"/><text x="57.4847%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.05%)</title><rect x="57.3151%" y="453" width="1.0450%" height="15" fill="rgb(234,170,33)" fg:x="713" fg:w="13"/><text x="57.5651%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.05%)</title><rect x="57.3151%" y="437" width="1.0450%" height="15" fill="rgb(206,29,35)" fg:x="713" fg:w="13"/><text x="57.5651%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.96%)</title><rect x="57.3955%" y="421" width="0.9646%" height="15" fill="rgb(227,138,25)" fg:x="714" fg:w="12"/><text x="57.6455%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.88%)</title><rect x="57.4759%" y="405" width="0.8842%" height="15" fill="rgb(249,131,35)" fg:x="715" fg:w="11"/><text x="57.7259%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="58.2797%" y="389" width="0.0804%" height="15" fill="rgb(239,6,40)" fg:x="725" fg:w="1"/><text x="58.5297%" y="399.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (596 samples, 47.91%)</title><rect x="10.5305%" y="581" width="47.9100%" height="15" fill="rgb(246,136,47)" fg:x="131" fg:w="596"/><text x="10.7805%" y="591.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies:..</text></g><g><title>plugins_core::looking::model::qualify_name (596 samples, 47.91%)</title><rect x="10.5305%" y="565" width="47.9100%" height="15" fill="rgb(253,58,26)" fg:x="131" fg:w="596"/><text x="10.7805%" y="575.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (596 samples, 47.91%)</title><rect x="10.5305%" y="549" width="47.9100%" height="15" fill="rgb(237,141,10)" fg:x="131" fg:w="596"/><text x="10.7805%" y="559.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (596 samples, 47.91%)</title><rect x="10.5305%" y="533" width="47.9100%" height="15" fill="rgb(234,156,12)" fg:x="131" fg:w="596"/><text x="10.7805%" y="543.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (596 samples, 47.91%)</title><rect x="10.5305%" y="517" width="47.9100%" height="15" fill="rgb(243,224,36)" fg:x="131" fg:w="596"/><text x="10.7805%" y="527.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (73 samples, 5.87%)</title><rect x="52.5723%" y="501" width="5.8682%" height="15" fill="rgb(205,229,51)" fg:x="654" fg:w="73"/><text x="52.8223%" y="511.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="58.3601%" y="485" width="0.0804%" height="15" fill="rgb(223,189,4)" fg:x="726" fg:w="1"/><text x="58.6101%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="58.4405%" y="581" width="0.0804%" height="15" fill="rgb(249,167,54)" fg:x="727" fg:w="1"/><text x="58.6905%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="58.4405%" y="565" width="0.0804%" height="15" fill="rgb(218,34,28)" fg:x="727" fg:w="1"/><text x="58.6905%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.5209%" y="549" width="0.0804%" height="15" fill="rgb(232,109,42)" fg:x="728" fg:w="1"/><text x="58.7709%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.5209%" y="533" width="0.0804%" height="15" fill="rgb(248,214,46)" fg:x="728" fg:w="1"/><text x="58.7709%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.5209%" y="517" width="0.0804%" height="15" fill="rgb(244,216,40)" fg:x="728" fg:w="1"/><text x="58.7709%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.5209%" y="501" width="0.0804%" height="15" fill="rgb(231,226,31)" fg:x="728" fg:w="1"/><text x="58.7709%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.5209%" y="485" width="0.0804%" height="15" fill="rgb(238,38,43)" fg:x="728" fg:w="1"/><text x="58.7709%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.5209%" y="469" width="0.0804%" height="15" fill="rgb(208,88,43)" fg:x="728" fg:w="1"/><text x="58.7709%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.5209%" y="453" width="0.0804%" height="15" fill="rgb(205,136,37)" fg:x="728" fg:w="1"/><text x="58.7709%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.5209%" y="437" width="0.0804%" height="15" fill="rgb(237,34,14)" fg:x="728" fg:w="1"/><text x="58.7709%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="58.5209%" y="421" width="0.0804%" height="15" fill="rgb(236,193,44)" fg:x="728" fg:w="1"/><text x="58.7709%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="58.5209%" y="405" width="0.0804%" height="15" fill="rgb(231,48,10)" fg:x="728" fg:w="1"/><text x="58.7709%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="58.6013%" y="533" width="0.0804%" height="15" fill="rgb(213,141,34)" fg:x="729" fg:w="1"/><text x="58.8513%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="58.6013%" y="517" width="0.0804%" height="15" fill="rgb(249,130,34)" fg:x="729" fg:w="1"/><text x="58.8513%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="58.6013%" y="501" width="0.0804%" height="15" fill="rgb(219,42,41)" fg:x="729" fg:w="1"/><text x="58.8513%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="58.6013%" y="485" width="0.0804%" height="15" fill="rgb(224,100,54)" fg:x="729" fg:w="1"/><text x="58.8513%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.6013%" y="469" width="0.0804%" height="15" fill="rgb(229,200,27)" fg:x="729" fg:w="1"/><text x="58.8513%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="58.6013%" y="549" width="0.1608%" height="15" fill="rgb(217,118,10)" fg:x="729" fg:w="2"/><text x="58.8513%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="58.6817%" y="533" width="0.0804%" height="15" fill="rgb(206,22,3)" fg:x="730" fg:w="1"/><text x="58.9317%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.6817%" y="517" width="0.0804%" height="15" fill="rgb(232,163,46)" fg:x="730" fg:w="1"/><text x="58.9317%" y="527.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="58.7621%" y="549" width="0.1608%" height="15" fill="rgb(206,95,13)" fg:x="731" fg:w="2"/><text x="59.0121%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (2 samples, 0.16%)</title><rect x="58.7621%" y="533" width="0.1608%" height="15" fill="rgb(253,154,18)" fg:x="731" fg:w="2"/><text x="59.0121%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="58.7621%" y="517" width="0.1608%" height="15" fill="rgb(219,32,23)" fg:x="731" fg:w="2"/><text x="59.0121%" y="527.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (604 samples, 48.55%)</title><rect x="10.4502%" y="613" width="48.5531%" height="15" fill="rgb(230,191,45)" fg:x="130" fg:w="604"/><text x="10.7002%" y="623.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (603 samples, 48.47%)</title><rect x="10.5305%" y="597" width="48.4727%" height="15" fill="rgb(229,64,36)" fg:x="131" fg:w="603"/><text x="10.7805%" y="607.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="58.5209%" y="581" width="0.4823%" height="15" fill="rgb(205,129,25)" fg:x="728" fg:w="6"/><text x="58.7709%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.48%)</title><rect x="58.5209%" y="565" width="0.4823%" height="15" fill="rgb(254,112,7)" fg:x="728" fg:w="6"/><text x="58.7709%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.9228%" y="549" width="0.0804%" height="15" fill="rgb(226,53,48)" fg:x="733" fg:w="1"/><text x="59.1728%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.9228%" y="533" width="0.0804%" height="15" fill="rgb(214,153,38)" fg:x="733" fg:w="1"/><text x="59.1728%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="58.9228%" y="517" width="0.0804%" height="15" fill="rgb(243,101,7)" fg:x="733" fg:w="1"/><text x="59.1728%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="58.9228%" y="501" width="0.0804%" height="15" fill="rgb(240,140,22)" fg:x="733" fg:w="1"/><text x="59.1728%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="58.9228%" y="485" width="0.0804%" height="15" fill="rgb(235,114,2)" fg:x="733" fg:w="1"/><text x="59.1728%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.9228%" y="469" width="0.0804%" height="15" fill="rgb(242,59,12)" fg:x="733" fg:w="1"/><text x="59.1728%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.9228%" y="453" width="0.0804%" height="15" fill="rgb(252,134,9)" fg:x="733" fg:w="1"/><text x="59.1728%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="58.9228%" y="437" width="0.0804%" height="15" fill="rgb(236,4,44)" fg:x="733" fg:w="1"/><text x="59.1728%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="59.0032%" y="549" width="0.2412%" height="15" fill="rgb(254,172,41)" fg:x="734" fg:w="3"/><text x="59.2532%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="59.0032%" y="533" width="0.2412%" height="15" fill="rgb(244,63,20)" fg:x="734" fg:w="3"/><text x="59.2532%" y="543.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="59.0032%" y="517" width="0.2412%" height="15" fill="rgb(250,73,31)" fg:x="734" fg:w="3"/><text x="59.2532%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="59.0032%" y="501" width="0.2412%" height="15" fill="rgb(241,38,36)" fg:x="734" fg:w="3"/><text x="59.2532%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="59.0032%" y="485" width="0.2412%" height="15" fill="rgb(245,211,2)" fg:x="734" fg:w="3"/><text x="59.2532%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.0032%" y="469" width="0.2412%" height="15" fill="rgb(206,120,28)" fg:x="734" fg:w="3"/><text x="59.2532%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="59.0032%" y="453" width="0.2412%" height="15" fill="rgb(211,59,34)" fg:x="734" fg:w="3"/><text x="59.2532%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.0836%" y="437" width="0.1608%" height="15" fill="rgb(233,168,5)" fg:x="735" fg:w="2"/><text x="59.3336%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.0836%" y="421" width="0.1608%" height="15" fill="rgb(234,33,13)" fg:x="735" fg:w="2"/><text x="59.3336%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.0836%" y="405" width="0.1608%" height="15" fill="rgb(231,150,26)" fg:x="735" fg:w="2"/><text x="59.3336%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.0836%" y="389" width="0.1608%" height="15" fill="rgb(217,191,4)" fg:x="735" fg:w="2"/><text x="59.3336%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.1640%" y="373" width="0.0804%" height="15" fill="rgb(246,198,38)" fg:x="736" fg:w="1"/><text x="59.4140%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.1640%" y="357" width="0.0804%" height="15" fill="rgb(245,64,37)" fg:x="736" fg:w="1"/><text x="59.4140%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.1640%" y="341" width="0.0804%" height="15" fill="rgb(250,30,36)" fg:x="736" fg:w="1"/><text x="59.4140%" y="351.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (6 samples, 0.48%)</title><rect x="59.0032%" y="613" width="0.4823%" height="15" fill="rgb(217,86,53)" fg:x="734" fg:w="6"/><text x="59.2532%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.48%)</title><rect x="59.0032%" y="597" width="0.4823%" height="15" fill="rgb(228,157,16)" fg:x="734" fg:w="6"/><text x="59.2532%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="59.0032%" y="581" width="0.4823%" height="15" fill="rgb(217,59,31)" fg:x="734" fg:w="6"/><text x="59.2532%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.48%)</title><rect x="59.0032%" y="565" width="0.4823%" height="15" fill="rgb(237,138,41)" fg:x="734" fg:w="6"/><text x="59.2532%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="59.2444%" y="549" width="0.2412%" height="15" fill="rgb(227,91,49)" fg:x="737" fg:w="3"/><text x="59.4944%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.2444%" y="533" width="0.2412%" height="15" fill="rgb(247,21,44)" fg:x="737" fg:w="3"/><text x="59.4944%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.3248%" y="517" width="0.1608%" height="15" fill="rgb(219,210,51)" fg:x="738" fg:w="2"/><text x="59.5748%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.3248%" y="501" width="0.1608%" height="15" fill="rgb(209,140,6)" fg:x="738" fg:w="2"/><text x="59.5748%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="59.4051%" y="485" width="0.0804%" height="15" fill="rgb(221,188,24)" fg:x="739" fg:w="1"/><text x="59.6551%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="59.5659%" y="517" width="0.2412%" height="15" fill="rgb(232,154,20)" fg:x="741" fg:w="3"/><text x="59.8159%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.6463%" y="501" width="0.1608%" height="15" fill="rgb(244,137,50)" fg:x="742" fg:w="2"/><text x="59.8963%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="59.6463%" y="485" width="0.1608%" height="15" fill="rgb(225,185,43)" fg:x="742" fg:w="2"/><text x="59.8963%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="59.5659%" y="549" width="0.4019%" height="15" fill="rgb(213,205,38)" fg:x="741" fg:w="5"/><text x="59.8159%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="59.5659%" y="533" width="0.4019%" height="15" fill="rgb(236,73,12)" fg:x="741" fg:w="5"/><text x="59.8159%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="59.8071%" y="517" width="0.1608%" height="15" fill="rgb(235,219,13)" fg:x="744" fg:w="2"/><text x="60.0571%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (7 samples, 0.56%)</title><rect x="59.4855%" y="581" width="0.5627%" height="15" fill="rgb(218,59,36)" fg:x="740" fg:w="7"/><text x="59.7355%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="59.4855%" y="565" width="0.5627%" height="15" fill="rgb(205,110,39)" fg:x="740" fg:w="7"/><text x="59.7355%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.9678%" y="549" width="0.0804%" height="15" fill="rgb(218,206,42)" fg:x="746" fg:w="1"/><text x="60.2178%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.0482%" y="549" width="0.0804%" height="15" fill="rgb(248,125,24)" fg:x="747" fg:w="1"/><text x="60.2982%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="60.0482%" y="533" width="0.0804%" height="15" fill="rgb(242,28,27)" fg:x="747" fg:w="1"/><text x="60.2982%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="60.0482%" y="517" width="0.0804%" height="15" fill="rgb(216,228,15)" fg:x="747" fg:w="1"/><text x="60.2982%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="60.0482%" y="501" width="0.0804%" height="15" fill="rgb(235,116,46)" fg:x="747" fg:w="1"/><text x="60.2982%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.0482%" y="485" width="0.0804%" height="15" fill="rgb(224,18,32)" fg:x="747" fg:w="1"/><text x="60.2982%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.0482%" y="469" width="0.0804%" height="15" fill="rgb(252,5,12)" fg:x="747" fg:w="1"/><text x="60.2982%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="60.0482%" y="453" width="0.0804%" height="15" fill="rgb(251,36,5)" fg:x="747" fg:w="1"/><text x="60.2982%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.0482%" y="437" width="0.0804%" height="15" fill="rgb(217,53,14)" fg:x="747" fg:w="1"/><text x="60.2982%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0482%" y="421" width="0.0804%" height="15" fill="rgb(215,86,45)" fg:x="747" fg:w="1"/><text x="60.2982%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.2090%" y="485" width="0.1608%" height="15" fill="rgb(242,169,11)" fg:x="749" fg:w="2"/><text x="60.4590%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="60.3698%" y="453" width="0.0804%" height="15" fill="rgb(211,213,45)" fg:x="751" fg:w="1"/><text x="60.6198%" y="463.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="60.3698%" y="437" width="0.0804%" height="15" fill="rgb(205,88,11)" fg:x="751" fg:w="1"/><text x="60.6198%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="60.3698%" y="421" width="0.0804%" height="15" fill="rgb(252,69,26)" fg:x="751" fg:w="1"/><text x="60.6198%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="60.3698%" y="405" width="0.0804%" height="15" fill="rgb(246,123,37)" fg:x="751" fg:w="1"/><text x="60.6198%" y="415.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="60.3698%" y="389" width="0.0804%" height="15" fill="rgb(212,205,5)" fg:x="751" fg:w="1"/><text x="60.6198%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3698%" y="373" width="0.0804%" height="15" fill="rgb(253,148,0)" fg:x="751" fg:w="1"/><text x="60.6198%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3698%" y="357" width="0.0804%" height="15" fill="rgb(239,22,4)" fg:x="751" fg:w="1"/><text x="60.6198%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3698%" y="341" width="0.0804%" height="15" fill="rgb(226,26,53)" fg:x="751" fg:w="1"/><text x="60.6198%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.3698%" y="325" width="0.0804%" height="15" fill="rgb(225,229,45)" fg:x="751" fg:w="1"/><text x="60.6198%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.3698%" y="309" width="0.0804%" height="15" fill="rgb(220,60,37)" fg:x="751" fg:w="1"/><text x="60.6198%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.3698%" y="293" width="0.0804%" height="15" fill="rgb(217,180,35)" fg:x="751" fg:w="1"/><text x="60.6198%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.3698%" y="277" width="0.0804%" height="15" fill="rgb(229,7,53)" fg:x="751" fg:w="1"/><text x="60.6198%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.3698%" y="261" width="0.0804%" height="15" fill="rgb(254,137,3)" fg:x="751" fg:w="1"/><text x="60.6198%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.3698%" y="245" width="0.0804%" height="15" fill="rgb(215,140,41)" fg:x="751" fg:w="1"/><text x="60.6198%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.3698%" y="229" width="0.0804%" height="15" fill="rgb(250,80,15)" fg:x="751" fg:w="1"/><text x="60.6198%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.3698%" y="213" width="0.0804%" height="15" fill="rgb(252,191,6)" fg:x="751" fg:w="1"/><text x="60.6198%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.3698%" y="197" width="0.0804%" height="15" fill="rgb(246,217,18)" fg:x="751" fg:w="1"/><text x="60.6198%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3698%" y="181" width="0.0804%" height="15" fill="rgb(223,93,7)" fg:x="751" fg:w="1"/><text x="60.6198%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.3698%" y="469" width="0.1608%" height="15" fill="rgb(225,55,52)" fg:x="751" fg:w="2"/><text x="60.6198%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::ops::control_flow::ControlFlow&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="60.4502%" y="453" width="0.0804%" height="15" fill="rgb(240,31,24)" fg:x="752" fg:w="1"/><text x="60.7002%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6109%" y="357" width="0.0804%" height="15" fill="rgb(205,56,52)" fg:x="754" fg:w="1"/><text x="60.8609%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="60.6109%" y="405" width="0.1608%" height="15" fill="rgb(246,146,12)" fg:x="754" fg:w="2"/><text x="60.8609%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="60.6109%" y="389" width="0.1608%" height="15" fill="rgb(239,84,36)" fg:x="754" fg:w="2"/><text x="60.8609%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="60.6109%" y="373" width="0.1608%" height="15" fill="rgb(207,41,40)" fg:x="754" fg:w="2"/><text x="60.8609%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="60.6913%" y="357" width="0.0804%" height="15" fill="rgb(241,179,25)" fg:x="755" fg:w="1"/><text x="60.9413%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="60.6913%" y="341" width="0.0804%" height="15" fill="rgb(210,0,34)" fg:x="755" fg:w="1"/><text x="60.9413%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="60.6913%" y="325" width="0.0804%" height="15" fill="rgb(225,217,29)" fg:x="755" fg:w="1"/><text x="60.9413%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.6913%" y="309" width="0.0804%" height="15" fill="rgb(216,191,38)" fg:x="755" fg:w="1"/><text x="60.9413%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6913%" y="293" width="0.0804%" height="15" fill="rgb(232,140,52)" fg:x="755" fg:w="1"/><text x="60.9413%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.6913%" y="277" width="0.0804%" height="15" fill="rgb(223,158,51)" fg:x="755" fg:w="1"/><text x="60.9413%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6913%" y="261" width="0.0804%" height="15" fill="rgb(235,29,51)" fg:x="755" fg:w="1"/><text x="60.9413%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.48%)</title><rect x="60.3698%" y="485" width="0.4823%" height="15" fill="rgb(215,181,18)" fg:x="751" fg:w="6"/><text x="60.6198%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="60.5305%" y="469" width="0.3215%" height="15" fill="rgb(227,125,34)" fg:x="753" fg:w="4"/><text x="60.7805%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="60.6109%" y="453" width="0.2412%" height="15" fill="rgb(230,197,49)" fg:x="754" fg:w="3"/><text x="60.8609%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.24%)</title><rect x="60.6109%" y="437" width="0.2412%" height="15" fill="rgb(239,141,16)" fg:x="754" fg:w="3"/><text x="60.8609%" y="447.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="60.6109%" y="421" width="0.2412%" height="15" fill="rgb(225,105,43)" fg:x="754" fg:w="3"/><text x="60.8609%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.7717%" y="405" width="0.0804%" height="15" fill="rgb(214,131,14)" fg:x="756" fg:w="1"/><text x="61.0217%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.7717%" y="389" width="0.0804%" height="15" fill="rgb(229,177,11)" fg:x="756" fg:w="1"/><text x="61.0217%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.7717%" y="373" width="0.0804%" height="15" fill="rgb(231,180,14)" fg:x="756" fg:w="1"/><text x="61.0217%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.7717%" y="357" width="0.0804%" height="15" fill="rgb(232,88,2)" fg:x="756" fg:w="1"/><text x="61.0217%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="60.7717%" y="341" width="0.0804%" height="15" fill="rgb(205,220,8)" fg:x="756" fg:w="1"/><text x="61.0217%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="60.8521%" y="453" width="0.2412%" height="15" fill="rgb(225,23,53)" fg:x="757" fg:w="3"/><text x="61.1021%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="60.8521%" y="437" width="0.2412%" height="15" fill="rgb(213,62,29)" fg:x="757" fg:w="3"/><text x="61.1021%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.9325%" y="421" width="0.1608%" height="15" fill="rgb(227,75,7)" fg:x="758" fg:w="2"/><text x="61.1825%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.9325%" y="405" width="0.1608%" height="15" fill="rgb(207,105,14)" fg:x="758" fg:w="2"/><text x="61.1825%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.9325%" y="389" width="0.1608%" height="15" fill="rgb(245,62,29)" fg:x="758" fg:w="2"/><text x="61.1825%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="60.9325%" y="373" width="0.1608%" height="15" fill="rgb(236,202,4)" fg:x="758" fg:w="2"/><text x="61.1825%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="60.9325%" y="357" width="0.1608%" height="15" fill="rgb(250,67,1)" fg:x="758" fg:w="2"/><text x="61.1825%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="60.9325%" y="341" width="0.1608%" height="15" fill="rgb(253,115,44)" fg:x="758" fg:w="2"/><text x="61.1825%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="60.9325%" y="325" width="0.1608%" height="15" fill="rgb(251,139,18)" fg:x="758" fg:w="2"/><text x="61.1825%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="60.9325%" y="309" width="0.1608%" height="15" fill="rgb(218,22,32)" fg:x="758" fg:w="2"/><text x="61.1825%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="60.9325%" y="293" width="0.1608%" height="15" fill="rgb(243,53,5)" fg:x="758" fg:w="2"/><text x="61.1825%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="60.9325%" y="277" width="0.1608%" height="15" fill="rgb(227,56,16)" fg:x="758" fg:w="2"/><text x="61.1825%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="60.9325%" y="261" width="0.1608%" height="15" fill="rgb(245,53,0)" fg:x="758" fg:w="2"/><text x="61.1825%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="60.9325%" y="245" width="0.1608%" height="15" fill="rgb(216,170,35)" fg:x="758" fg:w="2"/><text x="61.1825%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.9325%" y="229" width="0.1608%" height="15" fill="rgb(211,200,8)" fg:x="758" fg:w="2"/><text x="61.1825%" y="239.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="61.0932%" y="453" width="0.1608%" height="15" fill="rgb(228,204,44)" fg:x="760" fg:w="2"/><text x="61.3432%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="61.0932%" y="437" width="0.1608%" height="15" fill="rgb(214,121,17)" fg:x="760" fg:w="2"/><text x="61.3432%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="61.0932%" y="421" width="0.1608%" height="15" fill="rgb(233,64,38)" fg:x="760" fg:w="2"/><text x="61.3432%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="61.0932%" y="405" width="0.1608%" height="15" fill="rgb(253,54,19)" fg:x="760" fg:w="2"/><text x="61.3432%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="61.0932%" y="389" width="0.1608%" height="15" fill="rgb(253,94,18)" fg:x="760" fg:w="2"/><text x="61.3432%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (2 samples, 0.16%)</title><rect x="61.0932%" y="373" width="0.1608%" height="15" fill="rgb(227,57,52)" fg:x="760" fg:w="2"/><text x="61.3432%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.1736%" y="357" width="0.0804%" height="15" fill="rgb(230,228,50)" fg:x="761" fg:w="1"/><text x="61.4236%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.1736%" y="341" width="0.0804%" height="15" fill="rgb(217,205,27)" fg:x="761" fg:w="1"/><text x="61.4236%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.1736%" y="325" width="0.0804%" height="15" fill="rgb(252,71,50)" fg:x="761" fg:w="1"/><text x="61.4236%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.1736%" y="309" width="0.0804%" height="15" fill="rgb(209,86,4)" fg:x="761" fg:w="1"/><text x="61.4236%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.1736%" y="293" width="0.0804%" height="15" fill="rgb(229,94,0)" fg:x="761" fg:w="1"/><text x="61.4236%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.1736%" y="277" width="0.0804%" height="15" fill="rgb(252,223,21)" fg:x="761" fg:w="1"/><text x="61.4236%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.1736%" y="261" width="0.0804%" height="15" fill="rgb(230,210,4)" fg:x="761" fg:w="1"/><text x="61.4236%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.1736%" y="245" width="0.0804%" height="15" fill="rgb(240,149,38)" fg:x="761" fg:w="1"/><text x="61.4236%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.1736%" y="229" width="0.0804%" height="15" fill="rgb(254,105,20)" fg:x="761" fg:w="1"/><text x="61.4236%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.1736%" y="213" width="0.0804%" height="15" fill="rgb(253,87,46)" fg:x="761" fg:w="1"/><text x="61.4236%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.1736%" y="197" width="0.0804%" height="15" fill="rgb(253,116,33)" fg:x="761" fg:w="1"/><text x="61.4236%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1736%" y="181" width="0.0804%" height="15" fill="rgb(229,198,5)" fg:x="761" fg:w="1"/><text x="61.4236%" y="191.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (14 samples, 1.13%)</title><rect x="60.2090%" y="501" width="1.1254%" height="15" fill="rgb(242,38,37)" fg:x="749" fg:w="14"/><text x="60.4590%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="60.8521%" y="485" width="0.4823%" height="15" fill="rgb(242,69,53)" fg:x="757" fg:w="6"/><text x="61.1021%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.48%)</title><rect x="60.8521%" y="469" width="0.4823%" height="15" fill="rgb(249,80,16)" fg:x="757" fg:w="6"/><text x="61.1021%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.2540%" y="453" width="0.0804%" height="15" fill="rgb(206,128,11)" fg:x="762" fg:w="1"/><text x="61.5040%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2540%" y="437" width="0.0804%" height="15" fill="rgb(212,35,20)" fg:x="762" fg:w="1"/><text x="61.5040%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="61.2540%" y="421" width="0.0804%" height="15" fill="rgb(236,79,13)" fg:x="762" fg:w="1"/><text x="61.5040%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="61.2540%" y="405" width="0.0804%" height="15" fill="rgb(233,123,3)" fg:x="762" fg:w="1"/><text x="61.5040%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="61.2540%" y="389" width="0.0804%" height="15" fill="rgb(214,93,52)" fg:x="762" fg:w="1"/><text x="61.5040%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.2540%" y="373" width="0.0804%" height="15" fill="rgb(251,37,40)" fg:x="762" fg:w="1"/><text x="61.5040%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2540%" y="357" width="0.0804%" height="15" fill="rgb(227,80,54)" fg:x="762" fg:w="1"/><text x="61.5040%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3344%" y="229" width="0.0804%" height="15" fill="rgb(254,48,11)" fg:x="763" fg:w="1"/><text x="61.5844%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.3344%" y="453" width="0.1608%" height="15" fill="rgb(235,193,26)" fg:x="763" fg:w="2"/><text x="61.5844%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.3344%" y="437" width="0.1608%" height="15" fill="rgb(229,99,21)" fg:x="763" fg:w="2"/><text x="61.5844%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.3344%" y="421" width="0.1608%" height="15" fill="rgb(211,140,41)" fg:x="763" fg:w="2"/><text x="61.5844%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.3344%" y="405" width="0.1608%" height="15" fill="rgb(240,227,30)" fg:x="763" fg:w="2"/><text x="61.5844%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.3344%" y="389" width="0.1608%" height="15" fill="rgb(215,224,45)" fg:x="763" fg:w="2"/><text x="61.5844%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="61.3344%" y="373" width="0.1608%" height="15" fill="rgb(206,123,31)" fg:x="763" fg:w="2"/><text x="61.5844%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="61.3344%" y="357" width="0.1608%" height="15" fill="rgb(210,138,16)" fg:x="763" fg:w="2"/><text x="61.5844%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="61.3344%" y="341" width="0.1608%" height="15" fill="rgb(228,57,28)" fg:x="763" fg:w="2"/><text x="61.5844%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="61.3344%" y="325" width="0.1608%" height="15" fill="rgb(242,170,10)" fg:x="763" fg:w="2"/><text x="61.5844%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="61.3344%" y="309" width="0.1608%" height="15" fill="rgb(228,214,39)" fg:x="763" fg:w="2"/><text x="61.5844%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="61.3344%" y="293" width="0.1608%" height="15" fill="rgb(218,179,33)" fg:x="763" fg:w="2"/><text x="61.5844%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="61.3344%" y="277" width="0.1608%" height="15" fill="rgb(235,193,39)" fg:x="763" fg:w="2"/><text x="61.5844%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="61.3344%" y="261" width="0.1608%" height="15" fill="rgb(219,221,36)" fg:x="763" fg:w="2"/><text x="61.5844%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="61.3344%" y="245" width="0.1608%" height="15" fill="rgb(248,218,19)" fg:x="763" fg:w="2"/><text x="61.5844%" y="255.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="61.4148%" y="229" width="0.0804%" height="15" fill="rgb(205,50,9)" fg:x="764" fg:w="1"/><text x="61.6648%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.6559%" y="213" width="0.1608%" height="15" fill="rgb(238,81,28)" fg:x="767" fg:w="2"/><text x="61.9059%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.6559%" y="197" width="0.1608%" height="15" fill="rgb(235,110,19)" fg:x="767" fg:w="2"/><text x="61.9059%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.6559%" y="181" width="0.1608%" height="15" fill="rgb(214,7,14)" fg:x="767" fg:w="2"/><text x="61.9059%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.6559%" y="165" width="0.1608%" height="15" fill="rgb(211,77,3)" fg:x="767" fg:w="2"/><text x="61.9059%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.7363%" y="149" width="0.0804%" height="15" fill="rgb(229,5,9)" fg:x="768" fg:w="1"/><text x="61.9863%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.8167%" y="181" width="0.0804%" height="15" fill="rgb(225,90,11)" fg:x="769" fg:w="1"/><text x="62.0667%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="61.8167%" y="213" width="0.1608%" height="15" fill="rgb(242,56,8)" fg:x="769" fg:w="2"/><text x="62.0667%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.8167%" y="197" width="0.1608%" height="15" fill="rgb(249,212,39)" fg:x="769" fg:w="2"/><text x="62.0667%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.8971%" y="181" width="0.0804%" height="15" fill="rgb(236,90,9)" fg:x="770" fg:w="1"/><text x="62.1471%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.8971%" y="165" width="0.0804%" height="15" fill="rgb(206,88,35)" fg:x="770" fg:w="1"/><text x="62.1471%" y="175.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (7 samples, 0.56%)</title><rect x="61.4952%" y="325" width="0.5627%" height="15" fill="rgb(205,126,30)" fg:x="765" fg:w="7"/><text x="61.7452%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (7 samples, 0.56%)</title><rect x="61.4952%" y="309" width="0.5627%" height="15" fill="rgb(230,176,12)" fg:x="765" fg:w="7"/><text x="61.7452%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="61.5756%" y="293" width="0.4823%" height="15" fill="rgb(243,19,9)" fg:x="766" fg:w="6"/><text x="61.8256%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="61.5756%" y="277" width="0.4823%" height="15" fill="rgb(245,171,17)" fg:x="766" fg:w="6"/><text x="61.8256%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (6 samples, 0.48%)</title><rect x="61.5756%" y="261" width="0.4823%" height="15" fill="rgb(227,52,21)" fg:x="766" fg:w="6"/><text x="61.8256%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="61.5756%" y="245" width="0.4823%" height="15" fill="rgb(238,69,14)" fg:x="766" fg:w="6"/><text x="61.8256%" y="255.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="61.6559%" y="229" width="0.4019%" height="15" fill="rgb(241,156,39)" fg:x="767" fg:w="5"/><text x="61.9059%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.9775%" y="213" width="0.0804%" height="15" fill="rgb(212,227,28)" fg:x="771" fg:w="1"/><text x="62.2275%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.9775%" y="197" width="0.0804%" height="15" fill="rgb(209,118,27)" fg:x="771" fg:w="1"/><text x="62.2275%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.9775%" y="181" width="0.0804%" height="15" fill="rgb(226,102,5)" fg:x="771" fg:w="1"/><text x="62.2275%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.9775%" y="165" width="0.0804%" height="15" fill="rgb(223,34,3)" fg:x="771" fg:w="1"/><text x="62.2275%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.9775%" y="149" width="0.0804%" height="15" fill="rgb(221,81,38)" fg:x="771" fg:w="1"/><text x="62.2275%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.9775%" y="133" width="0.0804%" height="15" fill="rgb(236,219,28)" fg:x="771" fg:w="1"/><text x="62.2275%" y="143.50"></text></g><g><title>plugins_core::tools::get_contained_keys (11 samples, 0.88%)</title><rect x="61.3344%" y="501" width="0.8842%" height="15" fill="rgb(213,200,14)" fg:x="763" fg:w="11"/><text x="61.5844%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (11 samples, 0.88%)</title><rect x="61.3344%" y="485" width="0.8842%" height="15" fill="rgb(240,33,19)" fg:x="763" fg:w="11"/><text x="61.5844%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (11 samples, 0.88%)</title><rect x="61.3344%" y="469" width="0.8842%" height="15" fill="rgb(233,113,27)" fg:x="763" fg:w="11"/><text x="61.5844%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.72%)</title><rect x="61.4952%" y="453" width="0.7235%" height="15" fill="rgb(220,221,18)" fg:x="765" fg:w="9"/><text x="61.7452%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.72%)</title><rect x="61.4952%" y="437" width="0.7235%" height="15" fill="rgb(238,92,8)" fg:x="765" fg:w="9"/><text x="61.7452%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="61.4952%" y="421" width="0.7235%" height="15" fill="rgb(222,164,16)" fg:x="765" fg:w="9"/><text x="61.7452%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.72%)</title><rect x="61.4952%" y="405" width="0.7235%" height="15" fill="rgb(241,119,3)" fg:x="765" fg:w="9"/><text x="61.7452%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.72%)</title><rect x="61.4952%" y="389" width="0.7235%" height="15" fill="rgb(241,44,8)" fg:x="765" fg:w="9"/><text x="61.7452%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.72%)</title><rect x="61.4952%" y="373" width="0.7235%" height="15" fill="rgb(230,36,40)" fg:x="765" fg:w="9"/><text x="61.7452%" y="383.50"></text></g><g><title>engine::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="61.4952%" y="357" width="0.7235%" height="15" fill="rgb(243,16,36)" fg:x="765" fg:w="9"/><text x="61.7452%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity (9 samples, 0.72%)</title><rect x="61.4952%" y="341" width="0.7235%" height="15" fill="rgb(231,4,26)" fg:x="765" fg:w="9"/><text x="61.7452%" y="351.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="62.0579%" y="325" width="0.1608%" height="15" fill="rgb(240,9,31)" fg:x="772" fg:w="2"/><text x="62.3079%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.0579%" y="309" width="0.1608%" height="15" fill="rgb(207,173,15)" fg:x="772" fg:w="2"/><text x="62.3079%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1383%" y="293" width="0.0804%" height="15" fill="rgb(224,192,53)" fg:x="773" fg:w="1"/><text x="62.3883%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1383%" y="277" width="0.0804%" height="15" fill="rgb(223,67,28)" fg:x="773" fg:w="1"/><text x="62.3883%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1383%" y="261" width="0.0804%" height="15" fill="rgb(211,20,47)" fg:x="773" fg:w="1"/><text x="62.3883%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.1383%" y="245" width="0.0804%" height="15" fill="rgb(240,228,2)" fg:x="773" fg:w="1"/><text x="62.3883%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.1383%" y="229" width="0.0804%" height="15" fill="rgb(248,151,12)" fg:x="773" fg:w="1"/><text x="62.3883%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 2.17%)</title><rect x="60.1286%" y="517" width="2.1704%" height="15" fill="rgb(244,8,39)" fg:x="748" fg:w="27"/><text x="60.3786%" y="527.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="62.2186%" y="501" width="0.0804%" height="15" fill="rgb(222,26,8)" fg:x="774" fg:w="1"/><text x="62.4686%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="62.2186%" y="485" width="0.0804%" height="15" fill="rgb(213,106,44)" fg:x="774" fg:w="1"/><text x="62.4686%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="62.2186%" y="469" width="0.0804%" height="15" fill="rgb(214,129,20)" fg:x="774" fg:w="1"/><text x="62.4686%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.2186%" y="453" width="0.0804%" height="15" fill="rgb(212,32,13)" fg:x="774" fg:w="1"/><text x="62.4686%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.25%)</title><rect x="60.1286%" y="533" width="2.2508%" height="15" fill="rgb(208,168,33)" fg:x="748" fg:w="28"/><text x="60.3786%" y="543.50">&lt;..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2990%" y="517" width="0.0804%" height="15" fill="rgb(231,207,8)" fg:x="775" fg:w="1"/><text x="62.5490%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4598%" y="485" width="0.0804%" height="15" fill="rgb(235,219,23)" fg:x="777" fg:w="1"/><text x="62.7098%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.4598%" y="469" width="0.0804%" height="15" fill="rgb(226,216,26)" fg:x="777" fg:w="1"/><text x="62.7098%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.4598%" y="453" width="0.0804%" height="15" fill="rgb(239,137,16)" fg:x="777" fg:w="1"/><text x="62.7098%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.4598%" y="437" width="0.0804%" height="15" fill="rgb(207,12,36)" fg:x="777" fg:w="1"/><text x="62.7098%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.4598%" y="421" width="0.0804%" height="15" fill="rgb(210,214,24)" fg:x="777" fg:w="1"/><text x="62.7098%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.4598%" y="405" width="0.0804%" height="15" fill="rgb(206,56,30)" fg:x="777" fg:w="1"/><text x="62.7098%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.4598%" y="389" width="0.0804%" height="15" fill="rgb(228,143,26)" fg:x="777" fg:w="1"/><text x="62.7098%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.4598%" y="373" width="0.0804%" height="15" fill="rgb(216,218,46)" fg:x="777" fg:w="1"/><text x="62.7098%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.4598%" y="357" width="0.0804%" height="15" fill="rgb(206,6,19)" fg:x="777" fg:w="1"/><text x="62.7098%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.4598%" y="341" width="0.0804%" height="15" fill="rgb(239,177,51)" fg:x="777" fg:w="1"/><text x="62.7098%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.4598%" y="325" width="0.0804%" height="15" fill="rgb(216,55,25)" fg:x="777" fg:w="1"/><text x="62.7098%" y="335.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="62.4598%" y="309" width="0.0804%" height="15" fill="rgb(231,163,29)" fg:x="777" fg:w="1"/><text x="62.7098%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.4598%" y="293" width="0.0804%" height="15" fill="rgb(232,149,50)" fg:x="777" fg:w="1"/><text x="62.7098%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.5402%" y="261" width="0.0804%" height="15" fill="rgb(223,142,48)" fg:x="778" fg:w="1"/><text x="62.7902%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.5402%" y="245" width="0.0804%" height="15" fill="rgb(245,83,23)" fg:x="778" fg:w="1"/><text x="62.7902%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="62.5402%" y="229" width="0.0804%" height="15" fill="rgb(224,63,2)" fg:x="778" fg:w="1"/><text x="62.7902%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="62.5402%" y="213" width="0.0804%" height="15" fill="rgb(218,65,53)" fg:x="778" fg:w="1"/><text x="62.7902%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.5402%" y="197" width="0.0804%" height="15" fill="rgb(221,84,29)" fg:x="778" fg:w="1"/><text x="62.7902%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="62.5402%" y="181" width="0.0804%" height="15" fill="rgb(234,0,32)" fg:x="778" fg:w="1"/><text x="62.7902%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.5402%" y="165" width="0.0804%" height="15" fill="rgb(206,20,16)" fg:x="778" fg:w="1"/><text x="62.7902%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.5402%" y="149" width="0.0804%" height="15" fill="rgb(244,172,18)" fg:x="778" fg:w="1"/><text x="62.7902%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.5402%" y="133" width="0.0804%" height="15" fill="rgb(254,133,1)" fg:x="778" fg:w="1"/><text x="62.7902%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="62.5402%" y="117" width="0.0804%" height="15" fill="rgb(222,206,41)" fg:x="778" fg:w="1"/><text x="62.7902%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.5402%" y="101" width="0.0804%" height="15" fill="rgb(212,3,42)" fg:x="778" fg:w="1"/><text x="62.7902%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="62.5402%" y="85" width="0.0804%" height="15" fill="rgb(241,11,4)" fg:x="778" fg:w="1"/><text x="62.7902%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="62.5402%" y="69" width="0.0804%" height="15" fill="rgb(205,19,26)" fg:x="778" fg:w="1"/><text x="62.7902%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="62.5402%" y="53" width="0.0804%" height="15" fill="rgb(210,179,32)" fg:x="778" fg:w="1"/><text x="62.7902%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.5402%" y="37" width="0.0804%" height="15" fill="rgb(227,116,49)" fg:x="778" fg:w="1"/><text x="62.7902%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.6206%" y="229" width="0.0804%" height="15" fill="rgb(211,146,6)" fg:x="779" fg:w="1"/><text x="62.8706%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.6206%" y="213" width="0.0804%" height="15" fill="rgb(219,44,39)" fg:x="779" fg:w="1"/><text x="62.8706%" y="223.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="62.6206%" y="197" width="0.0804%" height="15" fill="rgb(234,128,11)" fg:x="779" fg:w="1"/><text x="62.8706%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="62.6206%" y="181" width="0.0804%" height="15" fill="rgb(220,183,53)" fg:x="779" fg:w="1"/><text x="62.8706%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.6206%" y="165" width="0.0804%" height="15" fill="rgb(213,219,32)" fg:x="779" fg:w="1"/><text x="62.8706%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="62.6206%" y="149" width="0.0804%" height="15" fill="rgb(232,156,16)" fg:x="779" fg:w="1"/><text x="62.8706%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.6206%" y="133" width="0.0804%" height="15" fill="rgb(246,135,34)" fg:x="779" fg:w="1"/><text x="62.8706%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.6206%" y="117" width="0.0804%" height="15" fill="rgb(241,99,0)" fg:x="779" fg:w="1"/><text x="62.8706%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.6206%" y="101" width="0.0804%" height="15" fill="rgb(222,103,45)" fg:x="779" fg:w="1"/><text x="62.8706%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="62.6206%" y="85" width="0.0804%" height="15" fill="rgb(212,57,4)" fg:x="779" fg:w="1"/><text x="62.8706%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.6206%" y="69" width="0.0804%" height="15" fill="rgb(215,68,47)" fg:x="779" fg:w="1"/><text x="62.8706%" y="79.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="62.6206%" y="53" width="0.0804%" height="15" fill="rgb(230,84,2)" fg:x="779" fg:w="1"/><text x="62.8706%" y="63.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="62.5402%" y="485" width="0.2412%" height="15" fill="rgb(220,102,14)" fg:x="778" fg:w="3"/><text x="62.7902%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="62.5402%" y="469" width="0.2412%" height="15" fill="rgb(240,10,32)" fg:x="778" fg:w="3"/><text x="62.7902%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="62.5402%" y="453" width="0.2412%" height="15" fill="rgb(215,47,27)" fg:x="778" fg:w="3"/><text x="62.7902%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="62.5402%" y="437" width="0.2412%" height="15" fill="rgb(233,188,43)" fg:x="778" fg:w="3"/><text x="62.7902%" y="447.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="62.5402%" y="421" width="0.2412%" height="15" fill="rgb(253,190,1)" fg:x="778" fg:w="3"/><text x="62.7902%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="62.5402%" y="405" width="0.2412%" height="15" fill="rgb(206,114,52)" fg:x="778" fg:w="3"/><text x="62.7902%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="62.5402%" y="389" width="0.2412%" height="15" fill="rgb(233,120,37)" fg:x="778" fg:w="3"/><text x="62.7902%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="62.5402%" y="373" width="0.2412%" height="15" fill="rgb(214,52,39)" fg:x="778" fg:w="3"/><text x="62.7902%" y="383.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="62.5402%" y="357" width="0.2412%" height="15" fill="rgb(223,80,29)" fg:x="778" fg:w="3"/><text x="62.7902%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="62.5402%" y="341" width="0.2412%" height="15" fill="rgb(230,101,40)" fg:x="778" fg:w="3"/><text x="62.7902%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="62.5402%" y="325" width="0.2412%" height="15" fill="rgb(219,211,8)" fg:x="778" fg:w="3"/><text x="62.7902%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="62.5402%" y="309" width="0.2412%" height="15" fill="rgb(252,126,28)" fg:x="778" fg:w="3"/><text x="62.7902%" y="319.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="62.5402%" y="293" width="0.2412%" height="15" fill="rgb(215,56,38)" fg:x="778" fg:w="3"/><text x="62.7902%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="62.5402%" y="277" width="0.2412%" height="15" fill="rgb(249,55,44)" fg:x="778" fg:w="3"/><text x="62.7902%" y="287.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (2 samples, 0.16%)</title><rect x="62.6206%" y="261" width="0.1608%" height="15" fill="rgb(220,221,32)" fg:x="779" fg:w="2"/><text x="62.8706%" y="271.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.16%)</title><rect x="62.6206%" y="245" width="0.1608%" height="15" fill="rgb(212,216,41)" fg:x="779" fg:w="2"/><text x="62.8706%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="62.7010%" y="229" width="0.0804%" height="15" fill="rgb(228,213,43)" fg:x="780" fg:w="1"/><text x="62.9510%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="63.1029%" y="277" width="0.3215%" height="15" fill="rgb(211,31,26)" fg:x="785" fg:w="4"/><text x="63.3529%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="63.1833%" y="261" width="0.2412%" height="15" fill="rgb(229,202,19)" fg:x="786" fg:w="3"/><text x="63.4333%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="63.1833%" y="245" width="0.2412%" height="15" fill="rgb(229,105,46)" fg:x="786" fg:w="3"/><text x="63.4333%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="63.2637%" y="229" width="0.1608%" height="15" fill="rgb(235,108,1)" fg:x="787" fg:w="2"/><text x="63.5137%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="63.0225%" y="293" width="0.4823%" height="15" fill="rgb(245,111,35)" fg:x="784" fg:w="6"/><text x="63.2725%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.4244%" y="277" width="0.0804%" height="15" fill="rgb(219,185,31)" fg:x="789" fg:w="1"/><text x="63.6744%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.64%)</title><rect x="62.9421%" y="373" width="0.6431%" height="15" fill="rgb(214,4,43)" fg:x="783" fg:w="8"/><text x="63.1921%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="63.0225%" y="357" width="0.5627%" height="15" fill="rgb(235,227,40)" fg:x="784" fg:w="7"/><text x="63.2725%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="63.0225%" y="341" width="0.5627%" height="15" fill="rgb(230,88,30)" fg:x="784" fg:w="7"/><text x="63.2725%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.56%)</title><rect x="63.0225%" y="325" width="0.5627%" height="15" fill="rgb(216,217,1)" fg:x="784" fg:w="7"/><text x="63.2725%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="63.0225%" y="309" width="0.5627%" height="15" fill="rgb(248,139,50)" fg:x="784" fg:w="7"/><text x="63.2725%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="63.5048%" y="293" width="0.0804%" height="15" fill="rgb(233,1,21)" fg:x="790" fg:w="1"/><text x="63.7548%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5048%" y="277" width="0.0804%" height="15" fill="rgb(215,183,12)" fg:x="790" fg:w="1"/><text x="63.7548%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.72%)</title><rect x="62.9421%" y="389" width="0.7235%" height="15" fill="rgb(229,104,42)" fg:x="783" fg:w="9"/><text x="63.1921%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.5852%" y="373" width="0.0804%" height="15" fill="rgb(243,34,48)" fg:x="791" fg:w="1"/><text x="63.8352%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.5852%" y="357" width="0.0804%" height="15" fill="rgb(239,11,44)" fg:x="791" fg:w="1"/><text x="63.8352%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.05%)</title><rect x="62.8617%" y="421" width="1.0450%" height="15" fill="rgb(231,98,35)" fg:x="782" fg:w="13"/><text x="63.1117%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.05%)</title><rect x="62.8617%" y="405" width="1.0450%" height="15" fill="rgb(233,28,25)" fg:x="782" fg:w="13"/><text x="63.1117%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="63.6656%" y="389" width="0.2412%" height="15" fill="rgb(234,123,11)" fg:x="792" fg:w="3"/><text x="63.9156%" y="399.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="63.6656%" y="373" width="0.2412%" height="15" fill="rgb(220,69,3)" fg:x="792" fg:w="3"/><text x="63.9156%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (15 samples, 1.21%)</title><rect x="62.7814%" y="469" width="1.2058%" height="15" fill="rgb(214,64,36)" fg:x="781" fg:w="15"/><text x="63.0314%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.21%)</title><rect x="62.7814%" y="453" width="1.2058%" height="15" fill="rgb(211,138,32)" fg:x="781" fg:w="15"/><text x="63.0314%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.21%)</title><rect x="62.7814%" y="437" width="1.2058%" height="15" fill="rgb(213,118,47)" fg:x="781" fg:w="15"/><text x="63.0314%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.9068%" y="421" width="0.0804%" height="15" fill="rgb(243,124,49)" fg:x="795" fg:w="1"/><text x="64.1568%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.9068%" y="405" width="0.0804%" height="15" fill="rgb(221,30,28)" fg:x="795" fg:w="1"/><text x="64.1568%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9871%" y="421" width="0.0804%" height="15" fill="rgb(246,37,13)" fg:x="796" fg:w="1"/><text x="64.2371%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="64.0675%" y="421" width="0.1608%" height="15" fill="rgb(249,66,14)" fg:x="797" fg:w="2"/><text x="64.3175%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1479%" y="405" width="0.0804%" height="15" fill="rgb(213,166,5)" fg:x="798" fg:w="1"/><text x="64.3979%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2283%" y="373" width="0.0804%" height="15" fill="rgb(221,66,24)" fg:x="799" fg:w="1"/><text x="64.4783%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="64.2283%" y="421" width="0.2412%" height="15" fill="rgb(210,132,17)" fg:x="799" fg:w="3"/><text x="64.4783%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="64.2283%" y="405" width="0.2412%" height="15" fill="rgb(243,202,5)" fg:x="799" fg:w="3"/><text x="64.4783%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="64.2283%" y="389" width="0.2412%" height="15" fill="rgb(233,70,48)" fg:x="799" fg:w="3"/><text x="64.4783%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="64.3087%" y="373" width="0.1608%" height="15" fill="rgb(238,41,26)" fg:x="800" fg:w="2"/><text x="64.5587%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="64.3087%" y="357" width="0.1608%" height="15" fill="rgb(241,19,31)" fg:x="800" fg:w="2"/><text x="64.5587%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="64.3087%" y="341" width="0.1608%" height="15" fill="rgb(214,76,10)" fg:x="800" fg:w="2"/><text x="64.5587%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.3891%" y="325" width="0.0804%" height="15" fill="rgb(254,202,22)" fg:x="801" fg:w="1"/><text x="64.6391%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3891%" y="309" width="0.0804%" height="15" fill="rgb(214,72,24)" fg:x="801" fg:w="1"/><text x="64.6391%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3891%" y="293" width="0.0804%" height="15" fill="rgb(221,92,46)" fg:x="801" fg:w="1"/><text x="64.6391%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3891%" y="277" width="0.0804%" height="15" fill="rgb(246,13,50)" fg:x="801" fg:w="1"/><text x="64.6391%" y="287.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="64.4695%" y="373" width="0.1608%" height="15" fill="rgb(240,165,38)" fg:x="802" fg:w="2"/><text x="64.7195%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="64.4695%" y="357" width="0.1608%" height="15" fill="rgb(241,24,51)" fg:x="802" fg:w="2"/><text x="64.7195%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5498%" y="341" width="0.0804%" height="15" fill="rgb(227,51,44)" fg:x="803" fg:w="1"/><text x="64.7998%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6302%" y="341" width="0.0804%" height="15" fill="rgb(231,121,3)" fg:x="804" fg:w="1"/><text x="64.8802%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="64.6302%" y="357" width="0.1608%" height="15" fill="rgb(245,3,41)" fg:x="804" fg:w="2"/><text x="64.8802%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="64.7106%" y="341" width="0.0804%" height="15" fill="rgb(214,13,26)" fg:x="805" fg:w="1"/><text x="64.9606%" y="351.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (60 samples, 4.82%)</title><rect x="60.0482%" y="565" width="4.8232%" height="15" fill="rgb(252,75,11)" fg:x="747" fg:w="60"/><text x="60.2982%" y="575.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (59 samples, 4.74%)</title><rect x="60.1286%" y="549" width="4.7428%" height="15" fill="rgb(218,226,17)" fg:x="748" fg:w="59"/><text x="60.3786%" y="559.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (31 samples, 2.49%)</title><rect x="62.3794%" y="533" width="2.4920%" height="15" fill="rgb(248,89,38)" fg:x="776" fg:w="31"/><text x="62.6294%" y="543.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 2.41%)</title><rect x="62.4598%" y="517" width="2.4116%" height="15" fill="rgb(237,73,46)" fg:x="777" fg:w="30"/><text x="62.7098%" y="527.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (30 samples, 2.41%)</title><rect x="62.4598%" y="501" width="2.4116%" height="15" fill="rgb(242,78,33)" fg:x="777" fg:w="30"/><text x="62.7098%" y="511.50">pl..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (26 samples, 2.09%)</title><rect x="62.7814%" y="485" width="2.0900%" height="15" fill="rgb(235,60,3)" fg:x="781" fg:w="26"/><text x="63.0314%" y="495.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (11 samples, 0.88%)</title><rect x="63.9871%" y="469" width="0.8842%" height="15" fill="rgb(216,172,19)" fg:x="796" fg:w="11"/><text x="64.2371%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="63.9871%" y="453" width="0.8842%" height="15" fill="rgb(227,6,42)" fg:x="796" fg:w="11"/><text x="64.2371%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="63.9871%" y="437" width="0.8842%" height="15" fill="rgb(223,207,42)" fg:x="796" fg:w="11"/><text x="64.2371%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="64.4695%" y="421" width="0.4019%" height="15" fill="rgb(246,138,30)" fg:x="802" fg:w="5"/><text x="64.7195%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (5 samples, 0.40%)</title><rect x="64.4695%" y="405" width="0.4019%" height="15" fill="rgb(251,199,47)" fg:x="802" fg:w="5"/><text x="64.7195%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="64.4695%" y="389" width="0.4019%" height="15" fill="rgb(228,218,44)" fg:x="802" fg:w="5"/><text x="64.7195%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="64.6302%" y="373" width="0.2412%" height="15" fill="rgb(220,68,6)" fg:x="804" fg:w="3"/><text x="64.8802%" y="383.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="64.7910%" y="357" width="0.0804%" height="15" fill="rgb(240,60,26)" fg:x="806" fg:w="1"/><text x="65.0410%" y="367.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (678 samples, 54.50%)</title><rect x="10.4502%" y="629" width="54.5016%" height="15" fill="rgb(211,200,19)" fg:x="130" fg:w="678"/><text x="10.7002%" y="639.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (68 samples, 5.47%)</title><rect x="59.4855%" y="613" width="5.4662%" height="15" fill="rgb(242,145,30)" fg:x="740" fg:w="68"/><text x="59.7355%" y="623.50">kernel:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (68 samples, 5.47%)</title><rect x="59.4855%" y="597" width="5.4662%" height="15" fill="rgb(225,64,13)" fg:x="740" fg:w="68"/><text x="59.7355%" y="607.50">&lt;plugin..</text></g><g><title>plugins_rpc::querying::have_surroundings (61 samples, 4.90%)</title><rect x="60.0482%" y="581" width="4.9035%" height="15" fill="rgb(218,103,35)" fg:x="747" fg:w="61"/><text x="60.2982%" y="591.50">plugin..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.8714%" y="565" width="0.0804%" height="15" fill="rgb(216,93,46)" fg:x="807" fg:w="1"/><text x="65.1214%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8714%" y="549" width="0.0804%" height="15" fill="rgb(225,159,27)" fg:x="807" fg:w="1"/><text x="65.1214%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.8714%" y="533" width="0.0804%" height="15" fill="rgb(225,204,11)" fg:x="807" fg:w="1"/><text x="65.1214%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="64.9518%" y="405" width="0.0804%" height="15" fill="rgb(205,56,4)" fg:x="808" fg:w="1"/><text x="65.2018%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="64.9518%" y="389" width="0.0804%" height="15" fill="rgb(206,6,35)" fg:x="808" fg:w="1"/><text x="65.2018%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="64.9518%" y="373" width="0.0804%" height="15" fill="rgb(247,73,52)" fg:x="808" fg:w="1"/><text x="65.2018%" y="383.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="64.9518%" y="357" width="0.0804%" height="15" fill="rgb(246,97,4)" fg:x="808" fg:w="1"/><text x="65.2018%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="64.9518%" y="549" width="0.1608%" height="15" fill="rgb(212,37,15)" fg:x="808" fg:w="2"/><text x="65.2018%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="64.9518%" y="533" width="0.1608%" height="15" fill="rgb(208,130,40)" fg:x="808" fg:w="2"/><text x="65.2018%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="64.9518%" y="517" width="0.1608%" height="15" fill="rgb(236,55,29)" fg:x="808" fg:w="2"/><text x="65.2018%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.9518%" y="501" width="0.1608%" height="15" fill="rgb(209,156,45)" fg:x="808" fg:w="2"/><text x="65.2018%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="64.9518%" y="485" width="0.1608%" height="15" fill="rgb(249,107,4)" fg:x="808" fg:w="2"/><text x="65.2018%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.9518%" y="469" width="0.1608%" height="15" fill="rgb(227,7,13)" fg:x="808" fg:w="2"/><text x="65.2018%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="64.9518%" y="453" width="0.1608%" height="15" fill="rgb(250,129,14)" fg:x="808" fg:w="2"/><text x="65.2018%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.9518%" y="437" width="0.1608%" height="15" fill="rgb(229,92,13)" fg:x="808" fg:w="2"/><text x="65.2018%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.9518%" y="421" width="0.1608%" height="15" fill="rgb(245,98,39)" fg:x="808" fg:w="2"/><text x="65.2018%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0322%" y="405" width="0.0804%" height="15" fill="rgb(234,135,48)" fg:x="809" fg:w="1"/><text x="65.2822%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.1125%" y="501" width="0.1608%" height="15" fill="rgb(230,98,28)" fg:x="810" fg:w="2"/><text x="65.3625%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.1929%" y="485" width="0.0804%" height="15" fill="rgb(223,121,0)" fg:x="811" fg:w="1"/><text x="65.4429%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="65.1929%" y="469" width="0.0804%" height="15" fill="rgb(234,173,33)" fg:x="811" fg:w="1"/><text x="65.4429%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3537%" y="469" width="0.0804%" height="15" fill="rgb(245,47,8)" fg:x="813" fg:w="1"/><text x="65.6037%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.64%)</title><rect x="64.9518%" y="597" width="0.6431%" height="15" fill="rgb(205,17,20)" fg:x="808" fg:w="8"/><text x="65.2018%" y="607.50"></text></g><g><title>engine::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="64.9518%" y="581" width="0.6431%" height="15" fill="rgb(232,151,16)" fg:x="808" fg:w="8"/><text x="65.2018%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (8 samples, 0.64%)</title><rect x="64.9518%" y="565" width="0.6431%" height="15" fill="rgb(208,30,32)" fg:x="808" fg:w="8"/><text x="65.2018%" y="575.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="65.1125%" y="549" width="0.4823%" height="15" fill="rgb(254,26,3)" fg:x="810" fg:w="6"/><text x="65.3625%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.48%)</title><rect x="65.1125%" y="533" width="0.4823%" height="15" fill="rgb(240,177,30)" fg:x="810" fg:w="6"/><text x="65.3625%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="65.1125%" y="517" width="0.4823%" height="15" fill="rgb(248,76,44)" fg:x="810" fg:w="6"/><text x="65.3625%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="65.2733%" y="501" width="0.3215%" height="15" fill="rgb(241,186,54)" fg:x="812" fg:w="4"/><text x="65.5233%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="65.3537%" y="485" width="0.2412%" height="15" fill="rgb(249,171,29)" fg:x="813" fg:w="3"/><text x="65.6037%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.4341%" y="469" width="0.1608%" height="15" fill="rgb(237,151,44)" fg:x="814" fg:w="2"/><text x="65.6841%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.5145%" y="453" width="0.0804%" height="15" fill="rgb(228,174,30)" fg:x="815" fg:w="1"/><text x="65.7645%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.5145%" y="437" width="0.0804%" height="15" fill="rgb(252,14,37)" fg:x="815" fg:w="1"/><text x="65.7645%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.5145%" y="421" width="0.0804%" height="15" fill="rgb(207,111,40)" fg:x="815" fg:w="1"/><text x="65.7645%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.5145%" y="405" width="0.0804%" height="15" fill="rgb(248,171,54)" fg:x="815" fg:w="1"/><text x="65.7645%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.5145%" y="389" width="0.0804%" height="15" fill="rgb(211,127,2)" fg:x="815" fg:w="1"/><text x="65.7645%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5145%" y="373" width="0.0804%" height="15" fill="rgb(236,87,47)" fg:x="815" fg:w="1"/><text x="65.7645%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (9 samples, 0.72%)</title><rect x="64.9518%" y="613" width="0.7235%" height="15" fill="rgb(223,190,45)" fg:x="808" fg:w="9"/><text x="65.2018%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="65.5949%" y="597" width="0.0804%" height="15" fill="rgb(215,5,16)" fg:x="816" fg:w="1"/><text x="65.8449%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5949%" y="581" width="0.0804%" height="15" fill="rgb(252,82,33)" fg:x="816" fg:w="1"/><text x="65.8449%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.5949%" y="565" width="0.0804%" height="15" fill="rgb(247,213,44)" fg:x="816" fg:w="1"/><text x="65.8449%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.5949%" y="549" width="0.0804%" height="15" fill="rgb(205,196,44)" fg:x="816" fg:w="1"/><text x="65.8449%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.5949%" y="533" width="0.0804%" height="15" fill="rgb(237,96,54)" fg:x="816" fg:w="1"/><text x="65.8449%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.5949%" y="517" width="0.0804%" height="15" fill="rgb(230,113,34)" fg:x="816" fg:w="1"/><text x="65.8449%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.5949%" y="501" width="0.0804%" height="15" fill="rgb(221,224,12)" fg:x="816" fg:w="1"/><text x="65.8449%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.5949%" y="485" width="0.0804%" height="15" fill="rgb(219,112,44)" fg:x="816" fg:w="1"/><text x="65.8449%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.5949%" y="469" width="0.0804%" height="15" fill="rgb(210,31,13)" fg:x="816" fg:w="1"/><text x="65.8449%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.5949%" y="453" width="0.0804%" height="15" fill="rgb(230,25,16)" fg:x="816" fg:w="1"/><text x="65.8449%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.5949%" y="437" width="0.0804%" height="15" fill="rgb(246,108,53)" fg:x="816" fg:w="1"/><text x="65.8449%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.5949%" y="421" width="0.0804%" height="15" fill="rgb(241,172,50)" fg:x="816" fg:w="1"/><text x="65.8449%" y="431.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="65.5949%" y="405" width="0.0804%" height="15" fill="rgb(235,141,10)" fg:x="816" fg:w="1"/><text x="65.8449%" y="415.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (689 samples, 55.39%)</title><rect x="10.3698%" y="661" width="55.3859%" height="15" fill="rgb(220,174,43)" fg:x="129" fg:w="689"/><text x="10.6198%" y="671.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (689 samples, 55.39%)</title><rect x="10.3698%" y="645" width="55.3859%" height="15" fill="rgb(215,181,40)" fg:x="129" fg:w="689"/><text x="10.6198%" y="655.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (10 samples, 0.80%)</title><rect x="64.9518%" y="629" width="0.8039%" height="15" fill="rgb(230,97,2)" fg:x="808" fg:w="10"/><text x="65.2018%" y="639.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="65.6752%" y="613" width="0.0804%" height="15" fill="rgb(211,25,27)" fg:x="817" fg:w="1"/><text x="65.9252%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="65.6752%" y="597" width="0.0804%" height="15" fill="rgb(230,87,26)" fg:x="817" fg:w="1"/><text x="65.9252%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="65.6752%" y="581" width="0.0804%" height="15" fill="rgb(227,160,17)" fg:x="817" fg:w="1"/><text x="65.9252%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="65.6752%" y="565" width="0.0804%" height="15" fill="rgb(244,85,34)" fg:x="817" fg:w="1"/><text x="65.9252%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.6752%" y="549" width="0.0804%" height="15" fill="rgb(207,70,0)" fg:x="817" fg:w="1"/><text x="65.9252%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.6752%" y="533" width="0.0804%" height="15" fill="rgb(223,129,7)" fg:x="817" fg:w="1"/><text x="65.9252%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.6752%" y="517" width="0.0804%" height="15" fill="rgb(246,105,7)" fg:x="817" fg:w="1"/><text x="65.9252%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="65.6752%" y="501" width="0.0804%" height="15" fill="rgb(215,154,42)" fg:x="817" fg:w="1"/><text x="65.9252%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="65.6752%" y="485" width="0.0804%" height="15" fill="rgb(220,215,30)" fg:x="817" fg:w="1"/><text x="65.9252%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.6752%" y="469" width="0.0804%" height="15" fill="rgb(228,81,51)" fg:x="817" fg:w="1"/><text x="65.9252%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.6752%" y="453" width="0.0804%" height="15" fill="rgb(247,71,54)" fg:x="817" fg:w="1"/><text x="65.9252%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="65.6752%" y="437" width="0.0804%" height="15" fill="rgb(234,176,34)" fg:x="817" fg:w="1"/><text x="65.9252%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="65.6752%" y="421" width="0.0804%" height="15" fill="rgb(241,103,54)" fg:x="817" fg:w="1"/><text x="65.9252%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.6752%" y="405" width="0.0804%" height="15" fill="rgb(228,22,34)" fg:x="817" fg:w="1"/><text x="65.9252%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.6752%" y="389" width="0.0804%" height="15" fill="rgb(241,179,48)" fg:x="817" fg:w="1"/><text x="65.9252%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (691 samples, 55.55%)</title><rect x="10.2894%" y="677" width="55.5466%" height="15" fill="rgb(235,167,37)" fg:x="128" fg:w="691"/><text x="10.5394%" y="687.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="65.7556%" y="661" width="0.0804%" height="15" fill="rgb(213,109,30)" fg:x="818" fg:w="1"/><text x="66.0056%" y="671.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::take_produced (1 samples, 0.08%)</title><rect x="65.7556%" y="645" width="0.0804%" height="15" fill="rgb(222,172,16)" fg:x="818" fg:w="1"/><text x="66.0056%" y="655.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (693 samples, 55.71%)</title><rect x="10.2090%" y="757" width="55.7074%" height="15" fill="rgb(233,192,5)" fg:x="127" fg:w="693"/><text x="10.4590%" y="767.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (693 samples, 55.71%)</title><rect x="10.2090%" y="741" width="55.7074%" height="15" fill="rgb(247,189,41)" fg:x="127" fg:w="693"/><text x="10.4590%" y="751.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (693 samples, 55.71%)</title><rect x="10.2090%" y="725" width="55.7074%" height="15" fill="rgb(218,134,47)" fg:x="127" fg:w="693"/><text x="10.4590%" y="735.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (692 samples, 55.63%)</title><rect x="10.2894%" y="709" width="55.6270%" height="15" fill="rgb(216,29,3)" fg:x="128" fg:w="692"/><text x="10.5394%" y="719.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (692 samples, 55.63%)</title><rect x="10.2894%" y="693" width="55.6270%" height="15" fill="rgb(246,140,12)" fg:x="128" fg:w="692"/><text x="10.5394%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.8360%" y="677" width="0.0804%" height="15" fill="rgb(230,136,11)" fg:x="819" fg:w="1"/><text x="66.0860%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8360%" y="661" width="0.0804%" height="15" fill="rgb(247,22,47)" fg:x="819" fg:w="1"/><text x="66.0860%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.8360%" y="645" width="0.0804%" height="15" fill="rgb(218,84,22)" fg:x="819" fg:w="1"/><text x="66.0860%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (821 samples, 66.00%)</title><rect x="0.0000%" y="805" width="65.9968%" height="15" fill="rgb(216,87,39)" fg:x="0" fg:w="821"/><text x="0.2500%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (821 samples, 66.00%)</title><rect x="0.0000%" y="789" width="65.9968%" height="15" fill="rgb(221,178,8)" fg:x="0" fg:w="821"/><text x="0.2500%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (821 samples, 66.00%)</title><rect x="0.0000%" y="773" width="65.9968%" height="15" fill="rgb(230,42,11)" fg:x="0" fg:w="821"/><text x="0.2500%" y="783.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="65.9164%" y="757" width="0.0804%" height="15" fill="rgb(237,229,4)" fg:x="820" fg:w="1"/><text x="66.1664%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.0772%" y="677" width="0.0804%" height="15" fill="rgb(222,31,33)" fg:x="822" fg:w="1"/><text x="66.3272%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="66.0772%" y="661" width="0.0804%" height="15" fill="rgb(210,17,39)" fg:x="822" fg:w="1"/><text x="66.3272%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="66.0772%" y="645" width="0.0804%" height="15" fill="rgb(244,93,20)" fg:x="822" fg:w="1"/><text x="66.3272%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.0772%" y="629" width="0.0804%" height="15" fill="rgb(210,40,47)" fg:x="822" fg:w="1"/><text x="66.3272%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="66.0772%" y="693" width="0.1608%" height="15" fill="rgb(239,211,47)" fg:x="822" fg:w="2"/><text x="66.3272%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.1576%" y="677" width="0.0804%" height="15" fill="rgb(251,223,49)" fg:x="823" fg:w="1"/><text x="66.4076%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="66.0772%" y="757" width="0.2412%" height="15" fill="rgb(221,149,5)" fg:x="822" fg:w="3"/><text x="66.3272%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (3 samples, 0.24%)</title><rect x="66.0772%" y="741" width="0.2412%" height="15" fill="rgb(219,224,51)" fg:x="822" fg:w="3"/><text x="66.3272%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="66.0772%" y="725" width="0.2412%" height="15" fill="rgb(223,7,8)" fg:x="822" fg:w="3"/><text x="66.3272%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="66.0772%" y="709" width="0.2412%" height="15" fill="rgb(241,217,22)" fg:x="822" fg:w="3"/><text x="66.3272%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2379%" y="693" width="0.0804%" height="15" fill="rgb(248,209,0)" fg:x="824" fg:w="1"/><text x="66.4879%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="66.3987%" y="661" width="0.0804%" height="15" fill="rgb(217,205,4)" fg:x="826" fg:w="1"/><text x="66.6487%" y="671.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="66.3987%" y="645" width="0.0804%" height="15" fill="rgb(228,124,39)" fg:x="826" fg:w="1"/><text x="66.6487%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3987%" y="629" width="0.0804%" height="15" fill="rgb(250,116,42)" fg:x="826" fg:w="1"/><text x="66.6487%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3987%" y="613" width="0.0804%" height="15" fill="rgb(223,202,9)" fg:x="826" fg:w="1"/><text x="66.6487%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.3987%" y="597" width="0.0804%" height="15" fill="rgb(242,222,40)" fg:x="826" fg:w="1"/><text x="66.6487%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3987%" y="581" width="0.0804%" height="15" fill="rgb(229,99,46)" fg:x="826" fg:w="1"/><text x="66.6487%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.3987%" y="565" width="0.0804%" height="15" fill="rgb(225,56,46)" fg:x="826" fg:w="1"/><text x="66.6487%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3987%" y="549" width="0.0804%" height="15" fill="rgb(227,94,5)" fg:x="826" fg:w="1"/><text x="66.6487%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.3987%" y="533" width="0.0804%" height="15" fill="rgb(205,112,38)" fg:x="826" fg:w="1"/><text x="66.6487%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.3987%" y="517" width="0.0804%" height="15" fill="rgb(231,133,46)" fg:x="826" fg:w="1"/><text x="66.6487%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3987%" y="501" width="0.0804%" height="15" fill="rgb(217,16,9)" fg:x="826" fg:w="1"/><text x="66.6487%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.3987%" y="485" width="0.0804%" height="15" fill="rgb(249,173,9)" fg:x="826" fg:w="1"/><text x="66.6487%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.3987%" y="469" width="0.0804%" height="15" fill="rgb(205,163,53)" fg:x="826" fg:w="1"/><text x="66.6487%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.3987%" y="453" width="0.0804%" height="15" fill="rgb(217,54,41)" fg:x="826" fg:w="1"/><text x="66.6487%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3987%" y="437" width="0.0804%" height="15" fill="rgb(228,216,12)" fg:x="826" fg:w="1"/><text x="66.6487%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="66.3183%" y="709" width="0.2412%" height="15" fill="rgb(244,228,15)" fg:x="825" fg:w="3"/><text x="66.5683%" y="719.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="66.3987%" y="693" width="0.1608%" height="15" fill="rgb(221,176,53)" fg:x="826" fg:w="2"/><text x="66.6487%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="66.3987%" y="677" width="0.1608%" height="15" fill="rgb(205,94,34)" fg:x="826" fg:w="2"/><text x="66.6487%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="66.4791%" y="661" width="0.0804%" height="15" fill="rgb(213,110,48)" fg:x="827" fg:w="1"/><text x="66.7291%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4791%" y="645" width="0.0804%" height="15" fill="rgb(236,142,28)" fg:x="827" fg:w="1"/><text x="66.7291%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4791%" y="629" width="0.0804%" height="15" fill="rgb(225,135,29)" fg:x="827" fg:w="1"/><text x="66.7291%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4791%" y="613" width="0.0804%" height="15" fill="rgb(252,45,31)" fg:x="827" fg:w="1"/><text x="66.7291%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4791%" y="597" width="0.0804%" height="15" fill="rgb(211,187,50)" fg:x="827" fg:w="1"/><text x="66.7291%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4791%" y="581" width="0.0804%" height="15" fill="rgb(229,109,7)" fg:x="827" fg:w="1"/><text x="66.7291%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4791%" y="565" width="0.0804%" height="15" fill="rgb(251,131,51)" fg:x="827" fg:w="1"/><text x="66.7291%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4791%" y="549" width="0.0804%" height="15" fill="rgb(251,180,35)" fg:x="827" fg:w="1"/><text x="66.7291%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.4791%" y="533" width="0.0804%" height="15" fill="rgb(211,46,32)" fg:x="827" fg:w="1"/><text x="66.7291%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.4791%" y="517" width="0.0804%" height="15" fill="rgb(248,123,17)" fg:x="827" fg:w="1"/><text x="66.7291%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="66.3183%" y="725" width="0.3215%" height="15" fill="rgb(227,141,18)" fg:x="825" fg:w="4"/><text x="66.5683%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="66.5595%" y="709" width="0.0804%" height="15" fill="rgb(216,102,9)" fg:x="828" fg:w="1"/><text x="66.8095%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="66.5595%" y="693" width="0.0804%" height="15" fill="rgb(253,47,13)" fg:x="828" fg:w="1"/><text x="66.8095%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.5595%" y="677" width="0.0804%" height="15" fill="rgb(226,93,23)" fg:x="828" fg:w="1"/><text x="66.8095%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.5595%" y="661" width="0.0804%" height="15" fill="rgb(247,104,17)" fg:x="828" fg:w="1"/><text x="66.8095%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.5595%" y="645" width="0.0804%" height="15" fill="rgb(233,203,26)" fg:x="828" fg:w="1"/><text x="66.8095%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="66.5595%" y="629" width="0.0804%" height="15" fill="rgb(244,98,49)" fg:x="828" fg:w="1"/><text x="66.8095%" y="639.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="66.6399%" y="677" width="0.1608%" height="15" fill="rgb(235,134,22)" fg:x="829" fg:w="2"/><text x="66.8899%" y="687.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="66.7203%" y="661" width="0.0804%" height="15" fill="rgb(221,70,32)" fg:x="830" fg:w="1"/><text x="66.9703%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.72%)</title><rect x="66.3183%" y="757" width="0.7235%" height="15" fill="rgb(238,15,50)" fg:x="825" fg:w="9"/><text x="66.5683%" y="767.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.72%)</title><rect x="66.3183%" y="741" width="0.7235%" height="15" fill="rgb(215,221,48)" fg:x="825" fg:w="9"/><text x="66.5683%" y="751.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="66.6399%" y="725" width="0.4019%" height="15" fill="rgb(236,73,3)" fg:x="829" fg:w="5"/><text x="66.8899%" y="735.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="66.6399%" y="709" width="0.4019%" height="15" fill="rgb(250,107,11)" fg:x="829" fg:w="5"/><text x="66.8899%" y="719.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.40%)</title><rect x="66.6399%" y="693" width="0.4019%" height="15" fill="rgb(242,39,14)" fg:x="829" fg:w="5"/><text x="66.8899%" y="703.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="66.8006%" y="677" width="0.2412%" height="15" fill="rgb(248,164,37)" fg:x="831" fg:w="3"/><text x="67.0506%" y="687.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="66.8006%" y="661" width="0.2412%" height="15" fill="rgb(217,60,12)" fg:x="831" fg:w="3"/><text x="67.0506%" y="671.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="66.8006%" y="645" width="0.2412%" height="15" fill="rgb(240,125,29)" fg:x="831" fg:w="3"/><text x="67.0506%" y="655.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="66.8006%" y="629" width="0.2412%" height="15" fill="rgb(208,207,28)" fg:x="831" fg:w="3"/><text x="67.0506%" y="639.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="66.8006%" y="613" width="0.2412%" height="15" fill="rgb(209,159,27)" fg:x="831" fg:w="3"/><text x="67.0506%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0418%" y="693" width="0.0804%" height="15" fill="rgb(251,176,53)" fg:x="834" fg:w="1"/><text x="67.2918%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="67.0418%" y="709" width="0.1608%" height="15" fill="rgb(211,85,7)" fg:x="834" fg:w="2"/><text x="67.2918%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.1222%" y="693" width="0.0804%" height="15" fill="rgb(216,64,54)" fg:x="835" fg:w="1"/><text x="67.3722%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.1222%" y="677" width="0.0804%" height="15" fill="rgb(217,54,24)" fg:x="835" fg:w="1"/><text x="67.3722%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.2026%" y="629" width="0.0804%" height="15" fill="rgb(208,206,53)" fg:x="836" fg:w="1"/><text x="67.4526%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.2026%" y="613" width="0.0804%" height="15" fill="rgb(251,74,39)" fg:x="836" fg:w="1"/><text x="67.4526%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.2026%" y="597" width="0.0804%" height="15" fill="rgb(226,47,5)" fg:x="836" fg:w="1"/><text x="67.4526%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.2026%" y="581" width="0.0804%" height="15" fill="rgb(234,111,33)" fg:x="836" fg:w="1"/><text x="67.4526%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="67.2026%" y="677" width="0.2412%" height="15" fill="rgb(251,14,10)" fg:x="836" fg:w="3"/><text x="67.4526%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="67.2026%" y="661" width="0.2412%" height="15" fill="rgb(232,43,0)" fg:x="836" fg:w="3"/><text x="67.4526%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="67.2026%" y="645" width="0.2412%" height="15" fill="rgb(222,68,43)" fg:x="836" fg:w="3"/><text x="67.4526%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.2830%" y="629" width="0.1608%" height="15" fill="rgb(217,24,23)" fg:x="837" fg:w="2"/><text x="67.5330%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.2830%" y="613" width="0.1608%" height="15" fill="rgb(229,209,14)" fg:x="837" fg:w="2"/><text x="67.5330%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.3633%" y="597" width="0.0804%" height="15" fill="rgb(250,149,48)" fg:x="838" fg:w="1"/><text x="67.6133%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4437%" y="629" width="0.0804%" height="15" fill="rgb(210,120,37)" fg:x="839" fg:w="1"/><text x="67.6937%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4437%" y="613" width="0.0804%" height="15" fill="rgb(210,21,8)" fg:x="839" fg:w="1"/><text x="67.6937%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5241%" y="629" width="0.0804%" height="15" fill="rgb(243,145,7)" fg:x="840" fg:w="1"/><text x="67.7741%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.5241%" y="613" width="0.0804%" height="15" fill="rgb(238,178,32)" fg:x="840" fg:w="1"/><text x="67.7741%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5241%" y="597" width="0.0804%" height="15" fill="rgb(222,4,10)" fg:x="840" fg:w="1"/><text x="67.7741%" y="607.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="67.0418%" y="741" width="0.6431%" height="15" fill="rgb(239,7,37)" fg:x="834" fg:w="8"/><text x="67.2918%" y="751.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.64%)</title><rect x="67.0418%" y="725" width="0.6431%" height="15" fill="rgb(215,31,37)" fg:x="834" fg:w="8"/><text x="67.2918%" y="735.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.48%)</title><rect x="67.2026%" y="709" width="0.4823%" height="15" fill="rgb(224,83,33)" fg:x="836" fg:w="6"/><text x="67.4526%" y="719.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (6 samples, 0.48%)</title><rect x="67.2026%" y="693" width="0.4823%" height="15" fill="rgb(239,55,3)" fg:x="836" fg:w="6"/><text x="67.4526%" y="703.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.24%)</title><rect x="67.4437%" y="677" width="0.2412%" height="15" fill="rgb(247,92,11)" fg:x="839" fg:w="3"/><text x="67.6937%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="67.4437%" y="661" width="0.2412%" height="15" fill="rgb(239,200,7)" fg:x="839" fg:w="3"/><text x="67.6937%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="67.4437%" y="645" width="0.2412%" height="15" fill="rgb(227,115,8)" fg:x="839" fg:w="3"/><text x="67.6937%" y="655.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="67.6045%" y="629" width="0.0804%" height="15" fill="rgb(215,189,27)" fg:x="841" fg:w="1"/><text x="67.8545%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.6045%" y="613" width="0.0804%" height="15" fill="rgb(251,216,39)" fg:x="841" fg:w="1"/><text x="67.8545%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="67.6045%" y="597" width="0.0804%" height="15" fill="rgb(207,29,47)" fg:x="841" fg:w="1"/><text x="67.8545%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="67.6045%" y="581" width="0.0804%" height="15" fill="rgb(210,71,34)" fg:x="841" fg:w="1"/><text x="67.8545%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="67.6849%" y="741" width="0.0804%" height="15" fill="rgb(253,217,51)" fg:x="842" fg:w="1"/><text x="67.9349%" y="751.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="67.6849%" y="725" width="0.0804%" height="15" fill="rgb(222,117,46)" fg:x="842" fg:w="1"/><text x="67.9349%" y="735.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="67.6849%" y="709" width="0.0804%" height="15" fill="rgb(226,132,6)" fg:x="842" fg:w="1"/><text x="67.9349%" y="719.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="67.6849%" y="693" width="0.0804%" height="15" fill="rgb(254,145,51)" fg:x="842" fg:w="1"/><text x="67.9349%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="67.6849%" y="677" width="0.0804%" height="15" fill="rgb(231,199,27)" fg:x="842" fg:w="1"/><text x="67.9349%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.6849%" y="661" width="0.0804%" height="15" fill="rgb(245,158,14)" fg:x="842" fg:w="1"/><text x="67.9349%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6849%" y="645" width="0.0804%" height="15" fill="rgb(240,113,14)" fg:x="842" fg:w="1"/><text x="67.9349%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="67.7653%" y="693" width="0.0804%" height="15" fill="rgb(210,20,13)" fg:x="843" fg:w="1"/><text x="68.0153%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7653%" y="677" width="0.0804%" height="15" fill="rgb(241,144,13)" fg:x="843" fg:w="1"/><text x="68.0153%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.7653%" y="661" width="0.0804%" height="15" fill="rgb(235,43,34)" fg:x="843" fg:w="1"/><text x="68.0153%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.7653%" y="645" width="0.0804%" height="15" fill="rgb(208,36,20)" fg:x="843" fg:w="1"/><text x="68.0153%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.7653%" y="629" width="0.0804%" height="15" fill="rgb(239,204,10)" fg:x="843" fg:w="1"/><text x="68.0153%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.7653%" y="613" width="0.0804%" height="15" fill="rgb(217,84,43)" fg:x="843" fg:w="1"/><text x="68.0153%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.7653%" y="597" width="0.0804%" height="15" fill="rgb(241,170,50)" fg:x="843" fg:w="1"/><text x="68.0153%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.7653%" y="581" width="0.0804%" height="15" fill="rgb(226,205,29)" fg:x="843" fg:w="1"/><text x="68.0153%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="67.8457%" y="645" width="0.0804%" height="15" fill="rgb(233,113,1)" fg:x="844" fg:w="1"/><text x="68.0957%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.8457%" y="629" width="0.0804%" height="15" fill="rgb(253,98,13)" fg:x="844" fg:w="1"/><text x="68.0957%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.9260%" y="629" width="0.1608%" height="15" fill="rgb(211,115,12)" fg:x="845" fg:w="2"/><text x="68.1760%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.9260%" y="613" width="0.1608%" height="15" fill="rgb(208,12,16)" fg:x="845" fg:w="2"/><text x="68.1760%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="67.9260%" y="597" width="0.1608%" height="15" fill="rgb(237,193,54)" fg:x="845" fg:w="2"/><text x="68.1760%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="67.9260%" y="581" width="0.1608%" height="15" fill="rgb(243,22,42)" fg:x="845" fg:w="2"/><text x="68.1760%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.0064%" y="565" width="0.0804%" height="15" fill="rgb(233,151,36)" fg:x="846" fg:w="1"/><text x="68.2564%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.0868%" y="613" width="0.0804%" height="15" fill="rgb(237,57,45)" fg:x="847" fg:w="1"/><text x="68.3368%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0868%" y="597" width="0.0804%" height="15" fill="rgb(221,88,17)" fg:x="847" fg:w="1"/><text x="68.3368%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0868%" y="581" width="0.0804%" height="15" fill="rgb(230,79,15)" fg:x="847" fg:w="1"/><text x="68.3368%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.0868%" y="565" width="0.0804%" height="15" fill="rgb(213,57,13)" fg:x="847" fg:w="1"/><text x="68.3368%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.0868%" y="549" width="0.0804%" height="15" fill="rgb(222,116,39)" fg:x="847" fg:w="1"/><text x="68.3368%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1672%" y="613" width="0.0804%" height="15" fill="rgb(245,107,2)" fg:x="848" fg:w="1"/><text x="68.4172%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.1672%" y="597" width="0.0804%" height="15" fill="rgb(238,1,10)" fg:x="848" fg:w="1"/><text x="68.4172%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.0868%" y="629" width="0.2412%" height="15" fill="rgb(249,4,48)" fg:x="847" fg:w="3"/><text x="68.3368%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.2476%" y="613" width="0.0804%" height="15" fill="rgb(223,151,18)" fg:x="849" fg:w="1"/><text x="68.4976%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.2476%" y="597" width="0.0804%" height="15" fill="rgb(227,65,43)" fg:x="849" fg:w="1"/><text x="68.4976%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.2476%" y="581" width="0.0804%" height="15" fill="rgb(218,40,45)" fg:x="849" fg:w="1"/><text x="68.4976%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="67.8457%" y="661" width="0.7235%" height="15" fill="rgb(252,121,31)" fg:x="844" fg:w="9"/><text x="68.0957%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="67.9260%" y="645" width="0.6431%" height="15" fill="rgb(219,158,43)" fg:x="845" fg:w="8"/><text x="68.1760%" y="655.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="68.3280%" y="629" width="0.2412%" height="15" fill="rgb(231,162,42)" fg:x="850" fg:w="3"/><text x="68.5780%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="68.3280%" y="613" width="0.2412%" height="15" fill="rgb(217,179,25)" fg:x="850" fg:w="3"/><text x="68.5780%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="68.3280%" y="597" width="0.2412%" height="15" fill="rgb(206,212,31)" fg:x="850" fg:w="3"/><text x="68.5780%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.4887%" y="581" width="0.0804%" height="15" fill="rgb(235,144,12)" fg:x="852" fg:w="1"/><text x="68.7387%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.4887%" y="565" width="0.0804%" height="15" fill="rgb(213,51,10)" fg:x="852" fg:w="1"/><text x="68.7387%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.4887%" y="549" width="0.0804%" height="15" fill="rgb(231,145,14)" fg:x="852" fg:w="1"/><text x="68.7387%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5691%" y="613" width="0.0804%" height="15" fill="rgb(235,15,28)" fg:x="853" fg:w="1"/><text x="68.8191%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="68.6495%" y="613" width="0.0804%" height="15" fill="rgb(237,206,10)" fg:x="854" fg:w="1"/><text x="68.8995%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.6495%" y="597" width="0.0804%" height="15" fill="rgb(236,227,27)" fg:x="854" fg:w="1"/><text x="68.8995%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="68.6495%" y="581" width="0.0804%" height="15" fill="rgb(246,83,35)" fg:x="854" fg:w="1"/><text x="68.8995%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="68.6495%" y="565" width="0.0804%" height="15" fill="rgb(220,136,24)" fg:x="854" fg:w="1"/><text x="68.8995%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="68.6495%" y="549" width="0.0804%" height="15" fill="rgb(217,3,25)" fg:x="854" fg:w="1"/><text x="68.8995%" y="559.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.05%)</title><rect x="67.7653%" y="725" width="1.0450%" height="15" fill="rgb(239,24,14)" fg:x="843" fg:w="13"/><text x="68.0153%" y="735.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.05%)</title><rect x="67.7653%" y="709" width="1.0450%" height="15" fill="rgb(244,16,53)" fg:x="843" fg:w="13"/><text x="68.0153%" y="719.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.96%)</title><rect x="67.8457%" y="693" width="0.9646%" height="15" fill="rgb(208,175,44)" fg:x="844" fg:w="12"/><text x="68.0957%" y="703.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.96%)</title><rect x="67.8457%" y="677" width="0.9646%" height="15" fill="rgb(252,18,48)" fg:x="844" fg:w="12"/><text x="68.0957%" y="687.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.24%)</title><rect x="68.5691%" y="661" width="0.2412%" height="15" fill="rgb(234,199,32)" fg:x="853" fg:w="3"/><text x="68.8191%" y="671.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="68.5691%" y="645" width="0.2412%" height="15" fill="rgb(225,77,54)" fg:x="853" fg:w="3"/><text x="68.8191%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="68.5691%" y="629" width="0.2412%" height="15" fill="rgb(225,42,25)" fg:x="853" fg:w="3"/><text x="68.8191%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="68.7299%" y="613" width="0.0804%" height="15" fill="rgb(242,227,46)" fg:x="855" fg:w="1"/><text x="68.9799%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="68.7299%" y="597" width="0.0804%" height="15" fill="rgb(246,197,35)" fg:x="855" fg:w="1"/><text x="68.9799%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="68.7299%" y="581" width="0.0804%" height="15" fill="rgb(215,159,26)" fg:x="855" fg:w="1"/><text x="68.9799%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7299%" y="565" width="0.0804%" height="15" fill="rgb(212,194,50)" fg:x="855" fg:w="1"/><text x="68.9799%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="68.8103%" y="709" width="0.0804%" height="15" fill="rgb(246,132,1)" fg:x="856" fg:w="1"/><text x="69.0603%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="68.8103%" y="693" width="0.0804%" height="15" fill="rgb(217,71,7)" fg:x="856" fg:w="1"/><text x="69.0603%" y="703.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.8103%" y="677" width="0.0804%" height="15" fill="rgb(252,59,32)" fg:x="856" fg:w="1"/><text x="69.0603%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.8103%" y="661" width="0.0804%" height="15" fill="rgb(253,204,25)" fg:x="856" fg:w="1"/><text x="69.0603%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.8103%" y="645" width="0.0804%" height="15" fill="rgb(232,21,16)" fg:x="856" fg:w="1"/><text x="69.0603%" y="655.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="68.8103%" y="725" width="0.1608%" height="15" fill="rgb(248,90,29)" fg:x="856" fg:w="2"/><text x="69.0603%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="68.8907%" y="709" width="0.0804%" height="15" fill="rgb(249,223,7)" fg:x="857" fg:w="1"/><text x="69.1407%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="68.8907%" y="693" width="0.0804%" height="15" fill="rgb(231,119,42)" fg:x="857" fg:w="1"/><text x="69.1407%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8907%" y="677" width="0.0804%" height="15" fill="rgb(215,41,35)" fg:x="857" fg:w="1"/><text x="69.1407%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="68.9711%" y="725" width="0.0804%" height="15" fill="rgb(220,44,45)" fg:x="858" fg:w="1"/><text x="69.2211%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="68.9711%" y="709" width="0.0804%" height="15" fill="rgb(253,197,36)" fg:x="858" fg:w="1"/><text x="69.2211%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="68.9711%" y="693" width="0.0804%" height="15" fill="rgb(245,225,54)" fg:x="858" fg:w="1"/><text x="69.2211%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="68.9711%" y="677" width="0.0804%" height="15" fill="rgb(239,94,37)" fg:x="858" fg:w="1"/><text x="69.2211%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="68.9711%" y="661" width="0.0804%" height="15" fill="rgb(242,217,10)" fg:x="858" fg:w="1"/><text x="69.2211%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="68.9711%" y="645" width="0.0804%" height="15" fill="rgb(250,193,7)" fg:x="858" fg:w="1"/><text x="69.2211%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.9711%" y="629" width="0.0804%" height="15" fill="rgb(230,104,19)" fg:x="858" fg:w="1"/><text x="69.2211%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.9711%" y="613" width="0.0804%" height="15" fill="rgb(230,181,4)" fg:x="858" fg:w="1"/><text x="69.2211%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="68.9711%" y="597" width="0.0804%" height="15" fill="rgb(216,219,49)" fg:x="858" fg:w="1"/><text x="69.2211%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.9711%" y="581" width="0.0804%" height="15" fill="rgb(254,144,0)" fg:x="858" fg:w="1"/><text x="69.2211%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.9711%" y="565" width="0.0804%" height="15" fill="rgb(205,209,38)" fg:x="858" fg:w="1"/><text x="69.2211%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.9711%" y="549" width="0.0804%" height="15" fill="rgb(240,21,42)" fg:x="858" fg:w="1"/><text x="69.2211%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.9711%" y="533" width="0.0804%" height="15" fill="rgb(241,132,3)" fg:x="858" fg:w="1"/><text x="69.2211%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="68.9711%" y="517" width="0.0804%" height="15" fill="rgb(225,14,2)" fg:x="858" fg:w="1"/><text x="69.2211%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="68.9711%" y="501" width="0.0804%" height="15" fill="rgb(210,141,35)" fg:x="858" fg:w="1"/><text x="69.2211%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.9711%" y="485" width="0.0804%" height="15" fill="rgb(251,14,44)" fg:x="858" fg:w="1"/><text x="69.2211%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="68.9711%" y="469" width="0.0804%" height="15" fill="rgb(247,48,18)" fg:x="858" fg:w="1"/><text x="69.2211%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="68.9711%" y="453" width="0.0804%" height="15" fill="rgb(225,0,40)" fg:x="858" fg:w="1"/><text x="69.2211%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="68.9711%" y="437" width="0.0804%" height="15" fill="rgb(221,31,33)" fg:x="858" fg:w="1"/><text x="69.2211%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.9711%" y="421" width="0.0804%" height="15" fill="rgb(237,42,40)" fg:x="858" fg:w="1"/><text x="69.2211%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="68.9711%" y="405" width="0.0804%" height="15" fill="rgb(233,51,29)" fg:x="858" fg:w="1"/><text x="69.2211%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.9711%" y="389" width="0.0804%" height="15" fill="rgb(226,58,20)" fg:x="858" fg:w="1"/><text x="69.2211%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="68.9711%" y="373" width="0.0804%" height="15" fill="rgb(208,98,7)" fg:x="858" fg:w="1"/><text x="69.2211%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="68.9711%" y="357" width="0.0804%" height="15" fill="rgb(228,143,44)" fg:x="858" fg:w="1"/><text x="69.2211%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="68.9711%" y="341" width="0.0804%" height="15" fill="rgb(246,55,38)" fg:x="858" fg:w="1"/><text x="69.2211%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.9711%" y="325" width="0.0804%" height="15" fill="rgb(247,87,16)" fg:x="858" fg:w="1"/><text x="69.2211%" y="335.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (26 samples, 2.09%)</title><rect x="67.0418%" y="757" width="2.0900%" height="15" fill="rgb(234,129,42)" fg:x="834" fg:w="26"/><text x="67.2918%" y="767.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::build (17 samples, 1.37%)</title><rect x="67.7653%" y="741" width="1.3666%" height="15" fill="rgb(220,82,16)" fg:x="843" fg:w="17"/><text x="68.0153%" y="751.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="69.0514%" y="725" width="0.0804%" height="15" fill="rgb(211,88,4)" fg:x="859" fg:w="1"/><text x="69.3014%" y="735.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="69.0514%" y="709" width="0.0804%" height="15" fill="rgb(248,151,21)" fg:x="859" fg:w="1"/><text x="69.3014%" y="719.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="69.0514%" y="693" width="0.0804%" height="15" fill="rgb(238,163,6)" fg:x="859" fg:w="1"/><text x="69.3014%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="69.0514%" y="677" width="0.0804%" height="15" fill="rgb(209,183,11)" fg:x="859" fg:w="1"/><text x="69.3014%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.1318%" y="725" width="0.0804%" height="15" fill="rgb(219,37,20)" fg:x="860" fg:w="1"/><text x="69.3818%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.1318%" y="709" width="0.0804%" height="15" fill="rgb(210,158,4)" fg:x="860" fg:w="1"/><text x="69.3818%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="69.1318%" y="693" width="0.0804%" height="15" fill="rgb(221,167,53)" fg:x="860" fg:w="1"/><text x="69.3818%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1318%" y="677" width="0.0804%" height="15" fill="rgb(237,151,45)" fg:x="860" fg:w="1"/><text x="69.3818%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1318%" y="661" width="0.0804%" height="15" fill="rgb(231,39,3)" fg:x="860" fg:w="1"/><text x="69.3818%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.1318%" y="645" width="0.0804%" height="15" fill="rgb(212,167,28)" fg:x="860" fg:w="1"/><text x="69.3818%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.1318%" y="629" width="0.0804%" height="15" fill="rgb(232,178,8)" fg:x="860" fg:w="1"/><text x="69.3818%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.1318%" y="613" width="0.0804%" height="15" fill="rgb(225,151,20)" fg:x="860" fg:w="1"/><text x="69.3818%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.1318%" y="597" width="0.0804%" height="15" fill="rgb(238,3,37)" fg:x="860" fg:w="1"/><text x="69.3818%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.1318%" y="581" width="0.0804%" height="15" fill="rgb(251,147,42)" fg:x="860" fg:w="1"/><text x="69.3818%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.2122%" y="677" width="0.0804%" height="15" fill="rgb(208,173,10)" fg:x="861" fg:w="1"/><text x="69.4622%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.2122%" y="661" width="0.0804%" height="15" fill="rgb(246,225,4)" fg:x="861" fg:w="1"/><text x="69.4622%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.2122%" y="645" width="0.0804%" height="15" fill="rgb(248,102,6)" fg:x="861" fg:w="1"/><text x="69.4622%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.2122%" y="629" width="0.0804%" height="15" fill="rgb(232,6,21)" fg:x="861" fg:w="1"/><text x="69.4622%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.2122%" y="613" width="0.0804%" height="15" fill="rgb(221,179,22)" fg:x="861" fg:w="1"/><text x="69.4622%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.2926%" y="661" width="0.0804%" height="15" fill="rgb(252,50,20)" fg:x="862" fg:w="1"/><text x="69.5426%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.2926%" y="645" width="0.0804%" height="15" fill="rgb(222,56,38)" fg:x="862" fg:w="1"/><text x="69.5426%" y="655.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="69.2122%" y="693" width="0.2412%" height="15" fill="rgb(206,193,29)" fg:x="861" fg:w="3"/><text x="69.4622%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="69.2926%" y="677" width="0.1608%" height="15" fill="rgb(239,192,45)" fg:x="862" fg:w="2"/><text x="69.5426%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.3730%" y="661" width="0.0804%" height="15" fill="rgb(254,18,36)" fg:x="863" fg:w="1"/><text x="69.6230%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.3730%" y="645" width="0.0804%" height="15" fill="rgb(221,127,11)" fg:x="863" fg:w="1"/><text x="69.6230%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.3730%" y="629" width="0.0804%" height="15" fill="rgb(234,146,35)" fg:x="863" fg:w="1"/><text x="69.6230%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.4534%" y="693" width="0.1608%" height="15" fill="rgb(254,201,37)" fg:x="864" fg:w="2"/><text x="69.7034%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="69.4534%" y="677" width="0.1608%" height="15" fill="rgb(211,202,23)" fg:x="864" fg:w="2"/><text x="69.7034%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.4534%" y="661" width="0.1608%" height="15" fill="rgb(237,91,2)" fg:x="864" fg:w="2"/><text x="69.7034%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5338%" y="645" width="0.0804%" height="15" fill="rgb(226,228,36)" fg:x="865" fg:w="1"/><text x="69.7838%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.5338%" y="629" width="0.0804%" height="15" fill="rgb(213,63,50)" fg:x="865" fg:w="1"/><text x="69.7838%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="69.5338%" y="613" width="0.0804%" height="15" fill="rgb(235,194,19)" fg:x="865" fg:w="1"/><text x="69.7838%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.5338%" y="597" width="0.0804%" height="15" fill="rgb(207,204,18)" fg:x="865" fg:w="1"/><text x="69.7838%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.5338%" y="581" width="0.0804%" height="15" fill="rgb(248,8,7)" fg:x="865" fg:w="1"/><text x="69.7838%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5338%" y="565" width="0.0804%" height="15" fill="rgb(223,145,47)" fg:x="865" fg:w="1"/><text x="69.7838%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6141%" y="629" width="0.0804%" height="15" fill="rgb(228,84,11)" fg:x="866" fg:w="1"/><text x="69.8641%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6945%" y="597" width="0.0804%" height="15" fill="rgb(218,76,45)" fg:x="867" fg:w="1"/><text x="69.9445%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.7749%" y="597" width="0.0804%" height="15" fill="rgb(223,80,15)" fg:x="868" fg:w="1"/><text x="70.0249%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="69.6141%" y="677" width="0.3215%" height="15" fill="rgb(219,218,33)" fg:x="866" fg:w="4"/><text x="69.8641%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="69.6141%" y="661" width="0.3215%" height="15" fill="rgb(208,51,11)" fg:x="866" fg:w="4"/><text x="69.8641%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="69.6141%" y="645" width="0.3215%" height="15" fill="rgb(229,165,39)" fg:x="866" fg:w="4"/><text x="69.8641%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.6945%" y="629" width="0.2412%" height="15" fill="rgb(241,100,24)" fg:x="867" fg:w="3"/><text x="69.9445%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.6945%" y="613" width="0.2412%" height="15" fill="rgb(228,14,23)" fg:x="867" fg:w="3"/><text x="69.9445%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="69.8553%" y="597" width="0.0804%" height="15" fill="rgb(247,116,52)" fg:x="869" fg:w="1"/><text x="70.1053%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="69.9357%" y="645" width="0.2412%" height="15" fill="rgb(216,149,33)" fg:x="870" fg:w="3"/><text x="70.1857%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0965%" y="629" width="0.0804%" height="15" fill="rgb(238,142,29)" fg:x="872" fg:w="1"/><text x="70.3465%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.0965%" y="613" width="0.0804%" height="15" fill="rgb(224,83,40)" fg:x="872" fg:w="1"/><text x="70.3465%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="70.1768%" y="645" width="0.2412%" height="15" fill="rgb(234,165,11)" fg:x="873" fg:w="3"/><text x="70.4268%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="70.1768%" y="629" width="0.2412%" height="15" fill="rgb(215,96,23)" fg:x="873" fg:w="3"/><text x="70.4268%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.2572%" y="613" width="0.1608%" height="15" fill="rgb(233,179,26)" fg:x="874" fg:w="2"/><text x="70.5072%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4180%" y="613" width="0.0804%" height="15" fill="rgb(225,129,33)" fg:x="876" fg:w="1"/><text x="70.6680%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4984%" y="565" width="0.0804%" height="15" fill="rgb(237,49,13)" fg:x="877" fg:w="1"/><text x="70.7484%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.32%)</title><rect x="70.4180%" y="645" width="0.3215%" height="15" fill="rgb(211,3,31)" fg:x="876" fg:w="4"/><text x="70.6680%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="70.4180%" y="629" width="0.3215%" height="15" fill="rgb(216,152,19)" fg:x="876" fg:w="4"/><text x="70.6680%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="70.4984%" y="613" width="0.2412%" height="15" fill="rgb(251,121,35)" fg:x="877" fg:w="3"/><text x="70.7484%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.24%)</title><rect x="70.4984%" y="597" width="0.2412%" height="15" fill="rgb(210,217,47)" fg:x="877" fg:w="3"/><text x="70.7484%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="70.4984%" y="581" width="0.2412%" height="15" fill="rgb(244,116,22)" fg:x="877" fg:w="3"/><text x="70.7484%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="70.5788%" y="565" width="0.1608%" height="15" fill="rgb(228,17,21)" fg:x="878" fg:w="2"/><text x="70.8288%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7395%" y="645" width="0.0804%" height="15" fill="rgb(240,149,34)" fg:x="880" fg:w="1"/><text x="70.9895%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.8199%" y="613" width="0.0804%" height="15" fill="rgb(208,125,47)" fg:x="881" fg:w="1"/><text x="71.0699%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.8199%" y="597" width="0.0804%" height="15" fill="rgb(249,186,39)" fg:x="881" fg:w="1"/><text x="71.0699%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8199%" y="581" width="0.0804%" height="15" fill="rgb(240,220,33)" fg:x="881" fg:w="1"/><text x="71.0699%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.8199%" y="565" width="0.0804%" height="15" fill="rgb(243,110,23)" fg:x="881" fg:w="1"/><text x="71.0699%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8199%" y="549" width="0.0804%" height="15" fill="rgb(219,163,46)" fg:x="881" fg:w="1"/><text x="71.0699%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.8199%" y="533" width="0.0804%" height="15" fill="rgb(216,126,30)" fg:x="881" fg:w="1"/><text x="71.0699%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8199%" y="517" width="0.0804%" height="15" fill="rgb(208,139,11)" fg:x="881" fg:w="1"/><text x="71.0699%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (13 samples, 1.05%)</title><rect x="69.9357%" y="677" width="1.0450%" height="15" fill="rgb(213,118,36)" fg:x="870" fg:w="13"/><text x="70.1857%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.05%)</title><rect x="69.9357%" y="661" width="1.0450%" height="15" fill="rgb(226,43,17)" fg:x="870" fg:w="13"/><text x="70.1857%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="70.8199%" y="645" width="0.1608%" height="15" fill="rgb(254,217,4)" fg:x="881" fg:w="2"/><text x="71.0699%" y="655.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="70.8199%" y="629" width="0.1608%" height="15" fill="rgb(210,134,47)" fg:x="881" fg:w="2"/><text x="71.0699%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.9003%" y="613" width="0.0804%" height="15" fill="rgb(237,24,49)" fg:x="882" fg:w="1"/><text x="71.1503%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="70.9807%" y="677" width="0.1608%" height="15" fill="rgb(251,39,46)" fg:x="883" fg:w="2"/><text x="71.2307%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="70.9807%" y="661" width="0.1608%" height="15" fill="rgb(251,220,3)" fg:x="883" fg:w="2"/><text x="71.2307%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.9807%" y="645" width="0.1608%" height="15" fill="rgb(228,105,12)" fg:x="883" fg:w="2"/><text x="71.2307%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.9807%" y="629" width="0.1608%" height="15" fill="rgb(215,196,1)" fg:x="883" fg:w="2"/><text x="71.2307%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.9807%" y="613" width="0.1608%" height="15" fill="rgb(214,33,39)" fg:x="883" fg:w="2"/><text x="71.2307%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.9807%" y="597" width="0.1608%" height="15" fill="rgb(220,19,52)" fg:x="883" fg:w="2"/><text x="71.2307%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0611%" y="581" width="0.0804%" height="15" fill="rgb(221,78,38)" fg:x="884" fg:w="1"/><text x="71.3111%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0611%" y="565" width="0.0804%" height="15" fill="rgb(253,30,16)" fg:x="884" fg:w="1"/><text x="71.3111%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0611%" y="549" width="0.0804%" height="15" fill="rgb(242,65,0)" fg:x="884" fg:w="1"/><text x="71.3111%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0611%" y="533" width="0.0804%" height="15" fill="rgb(235,201,12)" fg:x="884" fg:w="1"/><text x="71.3111%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.0611%" y="517" width="0.0804%" height="15" fill="rgb(233,161,9)" fg:x="884" fg:w="1"/><text x="71.3111%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="71.0611%" y="501" width="0.0804%" height="15" fill="rgb(241,207,41)" fg:x="884" fg:w="1"/><text x="71.3111%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="71.0611%" y="485" width="0.0804%" height="15" fill="rgb(212,69,46)" fg:x="884" fg:w="1"/><text x="71.3111%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="71.1415%" y="661" width="0.2412%" height="15" fill="rgb(239,69,45)" fg:x="885" fg:w="3"/><text x="71.3915%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="71.1415%" y="645" width="0.2412%" height="15" fill="rgb(242,117,48)" fg:x="885" fg:w="3"/><text x="71.3915%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="71.2219%" y="629" width="0.1608%" height="15" fill="rgb(228,41,36)" fg:x="886" fg:w="2"/><text x="71.4719%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="71.3023%" y="613" width="0.0804%" height="15" fill="rgb(212,3,32)" fg:x="887" fg:w="1"/><text x="71.5523%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (28 samples, 2.25%)</title><rect x="69.2122%" y="725" width="2.2508%" height="15" fill="rgb(233,41,49)" fg:x="861" fg:w="28"/><text x="69.4622%" y="735.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (28 samples, 2.25%)</title><rect x="69.2122%" y="709" width="2.2508%" height="15" fill="rgb(252,170,49)" fg:x="861" fg:w="28"/><text x="69.4622%" y="719.50">e..</text></g><g><title>kernel::compare::any_entity_changes (23 samples, 1.85%)</title><rect x="69.6141%" y="693" width="1.8489%" height="15" fill="rgb(229,53,26)" fg:x="866" fg:w="23"/><text x="69.8641%" y="703.50">k..</text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="71.1415%" y="677" width="0.3215%" height="15" fill="rgb(217,157,12)" fg:x="885" fg:w="4"/><text x="71.3915%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.3826%" y="661" width="0.0804%" height="15" fill="rgb(227,17,9)" fg:x="888" fg:w="1"/><text x="71.6326%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.3826%" y="645" width="0.0804%" height="15" fill="rgb(218,84,12)" fg:x="888" fg:w="1"/><text x="71.6326%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3826%" y="629" width="0.0804%" height="15" fill="rgb(212,79,24)" fg:x="888" fg:w="1"/><text x="71.6326%" y="639.50"></text></g><g><title>engine::session::Session::close (31 samples, 2.49%)</title><rect x="69.1318%" y="757" width="2.4920%" height="15" fill="rgb(217,222,37)" fg:x="860" fg:w="31"/><text x="69.3818%" y="767.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (31 samples, 2.49%)</title><rect x="69.1318%" y="741" width="2.4920%" height="15" fill="rgb(246,208,8)" fg:x="860" fg:w="31"/><text x="69.3818%" y="751.50">en..</text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="71.4630%" y="725" width="0.1608%" height="15" fill="rgb(244,133,10)" fg:x="889" fg:w="2"/><text x="71.7130%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="71.4630%" y="709" width="0.1608%" height="15" fill="rgb(209,219,41)" fg:x="889" fg:w="2"/><text x="71.7130%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="71.4630%" y="693" width="0.1608%" height="15" fill="rgb(253,175,45)" fg:x="889" fg:w="2"/><text x="71.7130%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="71.4630%" y="677" width="0.1608%" height="15" fill="rgb(235,100,37)" fg:x="889" fg:w="2"/><text x="71.7130%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="71.4630%" y="661" width="0.1608%" height="15" fill="rgb(225,87,19)" fg:x="889" fg:w="2"/><text x="71.7130%" y="671.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="71.4630%" y="645" width="0.1608%" height="15" fill="rgb(217,152,17)" fg:x="889" fg:w="2"/><text x="71.7130%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="71.4630%" y="629" width="0.1608%" height="15" fill="rgb(235,72,13)" fg:x="889" fg:w="2"/><text x="71.7130%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="71.4630%" y="613" width="0.1608%" height="15" fill="rgb(233,140,18)" fg:x="889" fg:w="2"/><text x="71.7130%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="71.4630%" y="597" width="0.1608%" height="15" fill="rgb(207,212,28)" fg:x="889" fg:w="2"/><text x="71.7130%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="71.4630%" y="581" width="0.1608%" height="15" fill="rgb(220,130,25)" fg:x="889" fg:w="2"/><text x="71.7130%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="71.4630%" y="565" width="0.1608%" height="15" fill="rgb(205,55,34)" fg:x="889" fg:w="2"/><text x="71.7130%" y="575.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="71.4630%" y="549" width="0.1608%" height="15" fill="rgb(237,54,35)" fg:x="889" fg:w="2"/><text x="71.7130%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.5434%" y="533" width="0.0804%" height="15" fill="rgb(208,67,23)" fg:x="890" fg:w="1"/><text x="71.7934%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.5434%" y="517" width="0.0804%" height="15" fill="rgb(206,207,50)" fg:x="890" fg:w="1"/><text x="71.7934%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.5434%" y="501" width="0.0804%" height="15" fill="rgb(213,211,42)" fg:x="890" fg:w="1"/><text x="71.7934%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.5434%" y="485" width="0.0804%" height="15" fill="rgb(252,197,50)" fg:x="890" fg:w="1"/><text x="71.7934%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.5434%" y="469" width="0.0804%" height="15" fill="rgb(251,211,41)" fg:x="890" fg:w="1"/><text x="71.7934%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="71.5434%" y="453" width="0.0804%" height="15" fill="rgb(229,211,5)" fg:x="890" fg:w="1"/><text x="71.7934%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="71.5434%" y="437" width="0.0804%" height="15" fill="rgb(239,36,31)" fg:x="890" fg:w="1"/><text x="71.7934%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.5434%" y="421" width="0.0804%" height="15" fill="rgb(248,67,31)" fg:x="890" fg:w="1"/><text x="71.7934%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="71.5434%" y="405" width="0.0804%" height="15" fill="rgb(249,55,44)" fg:x="890" fg:w="1"/><text x="71.7934%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.5434%" y="389" width="0.0804%" height="15" fill="rgb(216,82,12)" fg:x="890" fg:w="1"/><text x="71.7934%" y="399.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="71.6238%" y="597" width="0.0804%" height="15" fill="rgb(242,174,1)" fg:x="891" fg:w="1"/><text x="71.8738%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6238%" y="581" width="0.0804%" height="15" fill="rgb(208,120,29)" fg:x="891" fg:w="1"/><text x="71.8738%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6238%" y="565" width="0.0804%" height="15" fill="rgb(221,105,43)" fg:x="891" fg:w="1"/><text x="71.8738%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6238%" y="549" width="0.0804%" height="15" fill="rgb(234,124,22)" fg:x="891" fg:w="1"/><text x="71.8738%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6238%" y="533" width="0.0804%" height="15" fill="rgb(212,23,30)" fg:x="891" fg:w="1"/><text x="71.8738%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6238%" y="517" width="0.0804%" height="15" fill="rgb(219,122,53)" fg:x="891" fg:w="1"/><text x="71.8738%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6238%" y="501" width="0.0804%" height="15" fill="rgb(248,84,24)" fg:x="891" fg:w="1"/><text x="71.8738%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6238%" y="485" width="0.0804%" height="15" fill="rgb(245,115,18)" fg:x="891" fg:w="1"/><text x="71.8738%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6238%" y="469" width="0.0804%" height="15" fill="rgb(227,176,51)" fg:x="891" fg:w="1"/><text x="71.8738%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6238%" y="453" width="0.0804%" height="15" fill="rgb(229,63,42)" fg:x="891" fg:w="1"/><text x="71.8738%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6238%" y="437" width="0.0804%" height="15" fill="rgb(247,202,24)" fg:x="891" fg:w="1"/><text x="71.8738%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6238%" y="421" width="0.0804%" height="15" fill="rgb(244,173,20)" fg:x="891" fg:w="1"/><text x="71.8738%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6238%" y="405" width="0.0804%" height="15" fill="rgb(242,81,47)" fg:x="891" fg:w="1"/><text x="71.8738%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6238%" y="389" width="0.0804%" height="15" fill="rgb(231,185,54)" fg:x="891" fg:w="1"/><text x="71.8738%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="71.7846%" y="405" width="0.0804%" height="15" fill="rgb(243,55,32)" fg:x="893" fg:w="1"/><text x="72.0346%" y="415.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="71.7846%" y="389" width="0.0804%" height="15" fill="rgb(208,167,19)" fg:x="893" fg:w="1"/><text x="72.0346%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="71.7846%" y="373" width="0.0804%" height="15" fill="rgb(231,72,35)" fg:x="893" fg:w="1"/><text x="72.0346%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="71.7042%" y="421" width="0.2412%" height="15" fill="rgb(250,173,51)" fg:x="892" fg:w="3"/><text x="71.9542%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="71.8650%" y="405" width="0.0804%" height="15" fill="rgb(209,5,22)" fg:x="894" fg:w="1"/><text x="72.1150%" y="415.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="71.8650%" y="389" width="0.0804%" height="15" fill="rgb(250,174,19)" fg:x="894" fg:w="1"/><text x="72.1150%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.8650%" y="373" width="0.0804%" height="15" fill="rgb(217,3,49)" fg:x="894" fg:w="1"/><text x="72.1150%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8650%" y="357" width="0.0804%" height="15" fill="rgb(218,225,5)" fg:x="894" fg:w="1"/><text x="72.1150%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="71.9453%" y="405" width="0.0804%" height="15" fill="rgb(236,89,11)" fg:x="895" fg:w="1"/><text x="72.1953%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9453%" y="389" width="0.0804%" height="15" fill="rgb(206,33,28)" fg:x="895" fg:w="1"/><text x="72.1953%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.9453%" y="373" width="0.0804%" height="15" fill="rgb(241,56,42)" fg:x="895" fg:w="1"/><text x="72.1953%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="71.7042%" y="485" width="0.4019%" height="15" fill="rgb(222,44,11)" fg:x="892" fg:w="5"/><text x="71.9542%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="71.7042%" y="469" width="0.4019%" height="15" fill="rgb(234,111,20)" fg:x="892" fg:w="5"/><text x="71.9542%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="71.7042%" y="453" width="0.4019%" height="15" fill="rgb(237,77,6)" fg:x="892" fg:w="5"/><text x="71.9542%" y="463.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.40%)</title><rect x="71.7042%" y="437" width="0.4019%" height="15" fill="rgb(235,111,23)" fg:x="892" fg:w="5"/><text x="71.9542%" y="447.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="71.9453%" y="421" width="0.1608%" height="15" fill="rgb(251,135,29)" fg:x="895" fg:w="2"/><text x="72.1953%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="72.0257%" y="405" width="0.0804%" height="15" fill="rgb(217,57,1)" fg:x="896" fg:w="1"/><text x="72.2757%" y="415.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="72.0257%" y="389" width="0.0804%" height="15" fill="rgb(249,119,31)" fg:x="896" fg:w="1"/><text x="72.2757%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.0257%" y="373" width="0.0804%" height="15" fill="rgb(233,164,33)" fg:x="896" fg:w="1"/><text x="72.2757%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.0257%" y="357" width="0.0804%" height="15" fill="rgb(250,217,43)" fg:x="896" fg:w="1"/><text x="72.2757%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="72.1061%" y="437" width="0.1608%" height="15" fill="rgb(232,154,50)" fg:x="897" fg:w="2"/><text x="72.3561%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="72.1061%" y="421" width="0.1608%" height="15" fill="rgb(227,190,8)" fg:x="897" fg:w="2"/><text x="72.3561%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="72.1061%" y="405" width="0.1608%" height="15" fill="rgb(209,217,32)" fg:x="897" fg:w="2"/><text x="72.3561%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="72.1061%" y="453" width="0.3215%" height="15" fill="rgb(243,203,50)" fg:x="897" fg:w="4"/><text x="72.3561%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="72.2669%" y="437" width="0.1608%" height="15" fill="rgb(232,152,27)" fg:x="899" fg:w="2"/><text x="72.5169%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="72.3473%" y="421" width="0.0804%" height="15" fill="rgb(240,34,29)" fg:x="900" fg:w="1"/><text x="72.5973%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3473%" y="405" width="0.0804%" height="15" fill="rgb(215,185,52)" fg:x="900" fg:w="1"/><text x="72.5973%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="72.1061%" y="485" width="0.4019%" height="15" fill="rgb(240,89,49)" fg:x="897" fg:w="5"/><text x="72.3561%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="72.1061%" y="469" width="0.4019%" height="15" fill="rgb(225,12,52)" fg:x="897" fg:w="5"/><text x="72.3561%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="72.4277%" y="453" width="0.0804%" height="15" fill="rgb(239,128,45)" fg:x="901" fg:w="1"/><text x="72.6777%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4277%" y="437" width="0.0804%" height="15" fill="rgb(211,78,47)" fg:x="901" fg:w="1"/><text x="72.6777%" y="447.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="72.5080%" y="469" width="0.0804%" height="15" fill="rgb(232,31,21)" fg:x="902" fg:w="1"/><text x="72.7580%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5884%" y="405" width="0.0804%" height="15" fill="rgb(222,168,14)" fg:x="903" fg:w="1"/><text x="72.8384%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="72.5884%" y="421" width="0.9646%" height="15" fill="rgb(209,128,24)" fg:x="903" fg:w="12"/><text x="72.8384%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="72.6688%" y="405" width="0.8842%" height="15" fill="rgb(249,35,13)" fg:x="904" fg:w="11"/><text x="72.9188%" y="415.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="73.3119%" y="389" width="0.2412%" height="15" fill="rgb(218,7,2)" fg:x="912" fg:w="3"/><text x="73.5619%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="73.5531%" y="421" width="0.2412%" height="15" fill="rgb(238,107,27)" fg:x="915" fg:w="3"/><text x="73.8031%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="73.6334%" y="405" width="0.1608%" height="15" fill="rgb(217,88,38)" fg:x="916" fg:w="2"/><text x="73.8834%" y="415.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="73.9550%" y="357" width="0.1608%" height="15" fill="rgb(230,207,0)" fg:x="920" fg:w="2"/><text x="74.2050%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="74.1158%" y="357" width="0.0804%" height="15" fill="rgb(249,64,54)" fg:x="922" fg:w="1"/><text x="74.3658%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="74.1158%" y="341" width="0.0804%" height="15" fill="rgb(231,7,11)" fg:x="922" fg:w="1"/><text x="74.3658%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.1158%" y="325" width="0.0804%" height="15" fill="rgb(205,149,21)" fg:x="922" fg:w="1"/><text x="74.3658%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (34 samples, 2.73%)</title><rect x="74.1961%" y="325" width="2.7331%" height="15" fill="rgb(215,126,34)" fg:x="923" fg:w="34"/><text x="74.4461%" y="335.50">al..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (35 samples, 2.81%)</title><rect x="74.1961%" y="357" width="2.8135%" height="15" fill="rgb(241,132,45)" fg:x="923" fg:w="35"/><text x="74.4461%" y="367.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (35 samples, 2.81%)</title><rect x="74.1961%" y="341" width="2.8135%" height="15" fill="rgb(252,69,32)" fg:x="923" fg:w="35"/><text x="74.4461%" y="351.50">re..</text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="76.9293%" y="325" width="0.0804%" height="15" fill="rgb(232,204,19)" fg:x="957" fg:w="1"/><text x="77.1793%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="77.0096%" y="357" width="0.3215%" height="15" fill="rgb(249,15,47)" fg:x="958" fg:w="4"/><text x="77.2596%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2508%" y="341" width="0.0804%" height="15" fill="rgb(209,227,23)" fg:x="961" fg:w="1"/><text x="77.5008%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 3.62%)</title><rect x="73.7942%" y="405" width="3.6174%" height="15" fill="rgb(248,92,24)" fg:x="918" fg:w="45"/><text x="74.0442%" y="415.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (45 samples, 3.62%)</title><rect x="73.7942%" y="389" width="3.6174%" height="15" fill="rgb(247,59,2)" fg:x="918" fg:w="45"/><text x="74.0442%" y="399.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (45 samples, 3.62%)</title><rect x="73.7942%" y="373" width="3.6174%" height="15" fill="rgb(221,30,5)" fg:x="918" fg:w="45"/><text x="74.0442%" y="383.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="77.3312%" y="357" width="0.0804%" height="15" fill="rgb(208,108,53)" fg:x="962" fg:w="1"/><text x="77.5812%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.3312%" y="341" width="0.0804%" height="15" fill="rgb(211,183,26)" fg:x="962" fg:w="1"/><text x="77.5812%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.3312%" y="325" width="0.0804%" height="15" fill="rgb(232,132,4)" fg:x="962" fg:w="1"/><text x="77.5812%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3312%" y="309" width="0.0804%" height="15" fill="rgb(253,128,37)" fg:x="962" fg:w="1"/><text x="77.5812%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="77.4920%" y="389" width="0.0804%" height="15" fill="rgb(221,58,24)" fg:x="964" fg:w="1"/><text x="77.7420%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.4920%" y="373" width="0.0804%" height="15" fill="rgb(230,54,45)" fg:x="964" fg:w="1"/><text x="77.7420%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="77.4116%" y="405" width="0.4019%" height="15" fill="rgb(254,21,18)" fg:x="963" fg:w="5"/><text x="77.6616%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="77.5723%" y="389" width="0.2412%" height="15" fill="rgb(221,108,0)" fg:x="965" fg:w="3"/><text x="77.8223%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.7331%" y="373" width="0.0804%" height="15" fill="rgb(206,95,1)" fg:x="967" fg:w="1"/><text x="77.9831%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (66 samples, 5.31%)</title><rect x="72.5884%" y="437" width="5.3055%" height="15" fill="rgb(237,52,5)" fg:x="903" fg:w="66"/><text x="72.8384%" y="447.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (51 samples, 4.10%)</title><rect x="73.7942%" y="421" width="4.0997%" height="15" fill="rgb(218,150,34)" fg:x="918" fg:w="51"/><text x="74.0442%" y="431.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="77.8135%" y="405" width="0.0804%" height="15" fill="rgb(235,194,28)" fg:x="968" fg:w="1"/><text x="78.0635%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="77.8135%" y="389" width="0.0804%" height="15" fill="rgb(245,92,18)" fg:x="968" fg:w="1"/><text x="78.0635%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8135%" y="373" width="0.0804%" height="15" fill="rgb(253,203,53)" fg:x="968" fg:w="1"/><text x="78.0635%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="77.8939%" y="437" width="0.0804%" height="15" fill="rgb(249,185,47)" fg:x="969" fg:w="1"/><text x="78.1439%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="77.8939%" y="421" width="0.0804%" height="15" fill="rgb(252,194,52)" fg:x="969" fg:w="1"/><text x="78.1439%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="77.8939%" y="405" width="0.0804%" height="15" fill="rgb(210,53,36)" fg:x="969" fg:w="1"/><text x="78.1439%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="77.9743%" y="389" width="0.0804%" height="15" fill="rgb(237,37,25)" fg:x="970" fg:w="1"/><text x="78.2243%" y="399.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="78.0547%" y="389" width="0.0804%" height="15" fill="rgb(242,116,27)" fg:x="971" fg:w="1"/><text x="78.3047%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.0547%" y="373" width="0.0804%" height="15" fill="rgb(213,185,26)" fg:x="971" fg:w="1"/><text x="78.3047%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="77.9743%" y="405" width="0.2412%" height="15" fill="rgb(225,204,8)" fg:x="970" fg:w="3"/><text x="78.2243%" y="415.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="78.1350%" y="389" width="0.0804%" height="15" fill="rgb(254,111,37)" fg:x="972" fg:w="1"/><text x="78.3850%" y="399.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="78.1350%" y="373" width="0.0804%" height="15" fill="rgb(242,35,9)" fg:x="972" fg:w="1"/><text x="78.3850%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1350%" y="357" width="0.0804%" height="15" fill="rgb(232,138,49)" fg:x="972" fg:w="1"/><text x="78.3850%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (71 samples, 5.71%)</title><rect x="72.5884%" y="453" width="5.7074%" height="15" fill="rgb(247,56,4)" fg:x="903" fg:w="71"/><text x="72.8384%" y="463.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="77.9743%" y="437" width="0.3215%" height="15" fill="rgb(226,179,17)" fg:x="970" fg:w="4"/><text x="78.2243%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="77.9743%" y="421" width="0.3215%" height="15" fill="rgb(216,163,45)" fg:x="970" fg:w="4"/><text x="78.2243%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="78.2154%" y="405" width="0.0804%" height="15" fill="rgb(211,157,3)" fg:x="973" fg:w="1"/><text x="78.4654%" y="415.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="78.2154%" y="389" width="0.0804%" height="15" fill="rgb(234,44,20)" fg:x="973" fg:w="1"/><text x="78.4654%" y="399.50"></text></g><g><title>regex::regex::string::Regex::new (73 samples, 5.87%)</title><rect x="72.5080%" y="485" width="5.8682%" height="15" fill="rgb(254,138,23)" fg:x="902" fg:w="73"/><text x="72.7580%" y="495.50">regex::..</text></g><g><title>regex::builders::Builder::build_one_string (72 samples, 5.79%)</title><rect x="72.5884%" y="469" width="5.7878%" height="15" fill="rgb(206,119,39)" fg:x="903" fg:w="72"/><text x="72.8384%" y="479.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="78.2958%" y="453" width="0.0804%" height="15" fill="rgb(231,105,52)" fg:x="974" fg:w="1"/><text x="78.5458%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6174%" y="405" width="0.0804%" height="15" fill="rgb(250,20,5)" fg:x="978" fg:w="1"/><text x="78.8674%" y="415.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (89 samples, 7.15%)</title><rect x="71.7042%" y="501" width="7.1543%" height="15" fill="rgb(215,198,30)" fg:x="892" fg:w="89"/><text x="71.9542%" y="511.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="78.3762%" y="485" width="0.4823%" height="15" fill="rgb(246,142,8)" fg:x="975" fg:w="6"/><text x="78.6262%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="78.3762%" y="469" width="0.4823%" height="15" fill="rgb(243,26,38)" fg:x="975" fg:w="6"/><text x="78.6262%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="78.3762%" y="453" width="0.4823%" height="15" fill="rgb(205,133,28)" fg:x="975" fg:w="6"/><text x="78.6262%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="78.3762%" y="437" width="0.4823%" height="15" fill="rgb(212,34,0)" fg:x="975" fg:w="6"/><text x="78.6262%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="78.3762%" y="421" width="0.4823%" height="15" fill="rgb(251,226,22)" fg:x="975" fg:w="6"/><text x="78.6262%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="78.6977%" y="405" width="0.1608%" height="15" fill="rgb(252,119,9)" fg:x="979" fg:w="2"/><text x="78.9477%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="78.8585%" y="437" width="0.1608%" height="15" fill="rgb(213,150,50)" fg:x="981" fg:w="2"/><text x="79.1085%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9389%" y="421" width="0.0804%" height="15" fill="rgb(212,24,39)" fg:x="982" fg:w="1"/><text x="79.1889%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="79.0193%" y="437" width="0.0804%" height="15" fill="rgb(213,46,39)" fg:x="983" fg:w="1"/><text x="79.2693%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.0193%" y="421" width="0.0804%" height="15" fill="rgb(239,106,12)" fg:x="983" fg:w="1"/><text x="79.2693%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.0193%" y="405" width="0.0804%" height="15" fill="rgb(249,229,21)" fg:x="983" fg:w="1"/><text x="79.2693%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.0997%" y="421" width="0.0804%" height="15" fill="rgb(212,158,3)" fg:x="984" fg:w="1"/><text x="79.3497%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="78.8585%" y="453" width="0.4019%" height="15" fill="rgb(253,26,48)" fg:x="981" fg:w="5"/><text x="79.1085%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="79.0997%" y="437" width="0.1608%" height="15" fill="rgb(238,178,20)" fg:x="984" fg:w="2"/><text x="79.3497%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.1801%" y="421" width="0.0804%" height="15" fill="rgb(208,86,15)" fg:x="985" fg:w="1"/><text x="79.4301%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.1801%" y="405" width="0.0804%" height="15" fill="rgb(239,42,53)" fg:x="985" fg:w="1"/><text x="79.4301%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1801%" y="389" width="0.0804%" height="15" fill="rgb(245,226,8)" fg:x="985" fg:w="1"/><text x="79.4301%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2605%" y="437" width="0.0804%" height="15" fill="rgb(216,176,32)" fg:x="986" fg:w="1"/><text x="79.5105%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.3408%" y="421" width="0.0804%" height="15" fill="rgb(231,186,21)" fg:x="987" fg:w="1"/><text x="79.5908%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="78.8585%" y="485" width="0.6431%" height="15" fill="rgb(205,95,49)" fg:x="981" fg:w="8"/><text x="79.1085%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="78.8585%" y="469" width="0.6431%" height="15" fill="rgb(217,145,8)" fg:x="981" fg:w="8"/><text x="79.1085%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="79.2605%" y="453" width="0.2412%" height="15" fill="rgb(239,144,48)" fg:x="986" fg:w="3"/><text x="79.5105%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="79.3408%" y="437" width="0.1608%" height="15" fill="rgb(214,189,23)" fg:x="987" fg:w="2"/><text x="79.5908%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4212%" y="421" width="0.0804%" height="15" fill="rgb(229,157,17)" fg:x="988" fg:w="1"/><text x="79.6712%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="79.5016%" y="469" width="0.0804%" height="15" fill="rgb(230,5,48)" fg:x="989" fg:w="1"/><text x="79.7516%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="79.5016%" y="453" width="0.0804%" height="15" fill="rgb(224,156,48)" fg:x="989" fg:w="1"/><text x="79.7516%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.0643%" y="389" width="0.0804%" height="15" fill="rgb(223,14,29)" fg:x="996" fg:w="1"/><text x="80.3143%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0643%" y="373" width="0.0804%" height="15" fill="rgb(229,96,36)" fg:x="996" fg:w="1"/><text x="80.3143%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0643%" y="357" width="0.0804%" height="15" fill="rgb(231,102,53)" fg:x="996" fg:w="1"/><text x="80.3143%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.05%)</title><rect x="79.5820%" y="421" width="1.0450%" height="15" fill="rgb(210,77,38)" fg:x="990" fg:w="13"/><text x="79.8320%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.05%)</title><rect x="79.5820%" y="405" width="1.0450%" height="15" fill="rgb(235,131,6)" fg:x="990" fg:w="13"/><text x="79.8320%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="80.1447%" y="389" width="0.4823%" height="15" fill="rgb(252,55,38)" fg:x="997" fg:w="6"/><text x="80.3947%" y="399.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.21%)</title><rect x="79.5016%" y="485" width="1.2058%" height="15" fill="rgb(246,38,14)" fg:x="989" fg:w="15"/><text x="79.7516%" y="495.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.13%)</title><rect x="79.5820%" y="469" width="1.1254%" height="15" fill="rgb(242,27,5)" fg:x="990" fg:w="14"/><text x="79.8320%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.13%)</title><rect x="79.5820%" y="453" width="1.1254%" height="15" fill="rgb(228,65,35)" fg:x="990" fg:w="14"/><text x="79.8320%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.13%)</title><rect x="79.5820%" y="437" width="1.1254%" height="15" fill="rgb(245,93,11)" fg:x="990" fg:w="14"/><text x="79.8320%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="80.6270%" y="421" width="0.0804%" height="15" fill="rgb(213,1,31)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="80.6270%" y="405" width="0.0804%" height="15" fill="rgb(237,205,14)" fg:x="1003" fg:w="1"/><text x="80.8770%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="80.7074%" y="437" width="0.0804%" height="15" fill="rgb(232,118,45)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.7074%" y="421" width="0.0804%" height="15" fill="rgb(218,5,6)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.7074%" y="405" width="0.0804%" height="15" fill="rgb(251,87,51)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.7074%" y="389" width="0.0804%" height="15" fill="rgb(207,225,20)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.7074%" y="373" width="0.0804%" height="15" fill="rgb(222,78,54)" fg:x="1004" fg:w="1"/><text x="80.9574%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7878%" y="405" width="0.0804%" height="15" fill="rgb(232,85,16)" fg:x="1005" fg:w="1"/><text x="81.0378%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.05%)</title><rect x="80.7878%" y="421" width="1.0450%" height="15" fill="rgb(244,25,33)" fg:x="1005" fg:w="13"/><text x="81.0378%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="80.8682%" y="405" width="0.9646%" height="15" fill="rgb(233,24,36)" fg:x="1006" fg:w="12"/><text x="81.1182%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="81.8328%" y="421" width="0.0804%" height="15" fill="rgb(253,49,54)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="81.8328%" y="405" width="0.0804%" height="15" fill="rgb(245,12,22)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="81.8328%" y="389" width="0.0804%" height="15" fill="rgb(253,141,28)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.8328%" y="373" width="0.0804%" height="15" fill="rgb(225,207,27)" fg:x="1018" fg:w="1"/><text x="82.0828%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="81.9132%" y="421" width="0.1608%" height="15" fill="rgb(220,84,2)" fg:x="1019" fg:w="2"/><text x="82.1632%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="81.9132%" y="405" width="0.1608%" height="15" fill="rgb(224,37,37)" fg:x="1019" fg:w="2"/><text x="82.1632%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.64%)</title><rect x="82.3151%" y="389" width="0.6431%" height="15" fill="rgb(220,143,18)" fg:x="1024" fg:w="8"/><text x="82.5651%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="82.6367%" y="373" width="0.3215%" height="15" fill="rgb(210,88,33)" fg:x="1028" fg:w="4"/><text x="82.8867%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="82.7170%" y="357" width="0.2412%" height="15" fill="rgb(219,87,51)" fg:x="1029" fg:w="3"/><text x="82.9670%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="82.7170%" y="341" width="0.2412%" height="15" fill="rgb(211,7,35)" fg:x="1029" fg:w="3"/><text x="82.9670%" y="351.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="82.7170%" y="325" width="0.2412%" height="15" fill="rgb(232,77,2)" fg:x="1029" fg:w="3"/><text x="82.9670%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="82.9582%" y="373" width="0.5627%" height="15" fill="rgb(249,94,25)" fg:x="1032" fg:w="7"/><text x="83.2082%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.56%)</title><rect x="82.9582%" y="357" width="0.5627%" height="15" fill="rgb(215,112,2)" fg:x="1032" fg:w="7"/><text x="83.2082%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (19 samples, 1.53%)</title><rect x="82.0740%" y="421" width="1.5273%" height="15" fill="rgb(226,115,48)" fg:x="1021" fg:w="19"/><text x="82.3240%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (17 samples, 1.37%)</title><rect x="82.2347%" y="405" width="1.3666%" height="15" fill="rgb(249,196,10)" fg:x="1023" fg:w="17"/><text x="82.4847%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="82.9582%" y="389" width="0.6431%" height="15" fill="rgb(237,109,14)" fg:x="1032" fg:w="8"/><text x="83.2082%" y="399.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="83.5209%" y="373" width="0.0804%" height="15" fill="rgb(217,103,53)" fg:x="1039" fg:w="1"/><text x="83.7709%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="83.6013%" y="341" width="0.0804%" height="15" fill="rgb(244,137,9)" fg:x="1040" fg:w="1"/><text x="83.8513%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="83.6817%" y="325" width="0.0804%" height="15" fill="rgb(227,201,3)" fg:x="1041" fg:w="1"/><text x="83.9317%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="84.4855%" y="309" width="0.2412%" height="15" fill="rgb(243,94,6)" fg:x="1051" fg:w="3"/><text x="84.7355%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="84.7267%" y="309" width="0.1608%" height="15" fill="rgb(235,118,5)" fg:x="1054" fg:w="2"/><text x="84.9767%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="84.8875%" y="309" width="0.3215%" height="15" fill="rgb(247,10,30)" fg:x="1056" fg:w="4"/><text x="85.1375%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.0482%" y="293" width="0.1608%" height="15" fill="rgb(205,26,28)" fg:x="1058" fg:w="2"/><text x="85.2982%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.0482%" y="277" width="0.1608%" height="15" fill="rgb(206,99,35)" fg:x="1058" fg:w="2"/><text x="85.2982%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="85.0482%" y="261" width="0.1608%" height="15" fill="rgb(238,130,40)" fg:x="1058" fg:w="2"/><text x="85.2982%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="85.2090%" y="309" width="0.2412%" height="15" fill="rgb(224,126,31)" fg:x="1060" fg:w="3"/><text x="85.4590%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.2894%" y="293" width="0.1608%" height="15" fill="rgb(254,105,17)" fg:x="1061" fg:w="2"/><text x="85.5394%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.2894%" y="277" width="0.1608%" height="15" fill="rgb(216,87,36)" fg:x="1061" fg:w="2"/><text x="85.5394%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="85.2894%" y="261" width="0.1608%" height="15" fill="rgb(240,21,12)" fg:x="1061" fg:w="2"/><text x="85.5394%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.9325%" y="277" width="0.0804%" height="15" fill="rgb(245,192,34)" fg:x="1069" fg:w="1"/><text x="86.1825%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="86.0129%" y="277" width="0.3215%" height="15" fill="rgb(226,100,49)" fg:x="1070" fg:w="4"/><text x="86.2629%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="86.0129%" y="261" width="0.3215%" height="15" fill="rgb(245,188,27)" fg:x="1070" fg:w="4"/><text x="86.2629%" y="271.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="86.0932%" y="245" width="0.2412%" height="15" fill="rgb(212,170,8)" fg:x="1071" fg:w="3"/><text x="86.3432%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="86.5756%" y="261" width="0.0804%" height="15" fill="rgb(217,113,29)" fg:x="1077" fg:w="1"/><text x="86.8256%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="86.5756%" y="245" width="0.0804%" height="15" fill="rgb(237,30,3)" fg:x="1077" fg:w="1"/><text x="86.8256%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (17 samples, 1.37%)</title><rect x="85.4502%" y="309" width="1.3666%" height="15" fill="rgb(227,19,28)" fg:x="1063" fg:w="17"/><text x="85.7002%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (15 samples, 1.21%)</title><rect x="85.6109%" y="293" width="1.2058%" height="15" fill="rgb(239,172,45)" fg:x="1065" fg:w="15"/><text x="85.8609%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="86.3344%" y="277" width="0.4823%" height="15" fill="rgb(254,55,39)" fg:x="1074" fg:w="6"/><text x="86.5844%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="86.6559%" y="261" width="0.1608%" height="15" fill="rgb(249,208,12)" fg:x="1078" fg:w="2"/><text x="86.9059%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="86.6559%" y="245" width="0.1608%" height="15" fill="rgb(240,52,13)" fg:x="1078" fg:w="2"/><text x="86.9059%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.7363%" y="229" width="0.0804%" height="15" fill="rgb(252,149,13)" fg:x="1079" fg:w="1"/><text x="86.9863%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.7363%" y="213" width="0.0804%" height="15" fill="rgb(232,81,48)" fg:x="1079" fg:w="1"/><text x="86.9863%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="86.8167%" y="309" width="0.0804%" height="15" fill="rgb(222,144,2)" fg:x="1080" fg:w="1"/><text x="87.0667%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="86.8167%" y="293" width="0.0804%" height="15" fill="rgb(216,81,32)" fg:x="1080" fg:w="1"/><text x="87.0667%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="86.8167%" y="277" width="0.0804%" height="15" fill="rgb(244,78,51)" fg:x="1080" fg:w="1"/><text x="87.0667%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (43 samples, 3.46%)</title><rect x="86.8971%" y="309" width="3.4566%" height="15" fill="rgb(217,66,21)" fg:x="1081" fg:w="43"/><text x="87.1471%" y="319.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (43 samples, 3.46%)</title><rect x="86.8971%" y="293" width="3.4566%" height="15" fill="rgb(247,101,42)" fg:x="1081" fg:w="43"/><text x="87.1471%" y="303.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (43 samples, 3.46%)</title><rect x="86.8971%" y="277" width="3.4566%" height="15" fill="rgb(227,81,39)" fg:x="1081" fg:w="43"/><text x="87.1471%" y="287.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="90.3537%" y="309" width="0.4019%" height="15" fill="rgb(220,223,44)" fg:x="1124" fg:w="5"/><text x="90.6037%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="90.5949%" y="293" width="0.1608%" height="15" fill="rgb(205,218,2)" fg:x="1127" fg:w="2"/><text x="90.8449%" y="303.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="90.7556%" y="309" width="0.0804%" height="15" fill="rgb(212,207,28)" fg:x="1129" fg:w="1"/><text x="91.0056%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 7.32%)</title><rect x="83.6013%" y="405" width="7.3151%" height="15" fill="rgb(224,12,41)" fg:x="1040" fg:w="91"/><text x="83.8513%" y="415.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (91 samples, 7.32%)</title><rect x="83.6013%" y="389" width="7.3151%" height="15" fill="rgb(216,118,12)" fg:x="1040" fg:w="91"/><text x="83.8513%" y="399.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (91 samples, 7.32%)</title><rect x="83.6013%" y="373" width="7.3151%" height="15" fill="rgb(252,97,46)" fg:x="1040" fg:w="91"/><text x="83.8513%" y="383.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (91 samples, 7.32%)</title><rect x="83.6013%" y="357" width="7.3151%" height="15" fill="rgb(244,206,19)" fg:x="1040" fg:w="91"/><text x="83.8513%" y="367.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (90 samples, 7.23%)</title><rect x="83.6817%" y="341" width="7.2347%" height="15" fill="rgb(231,84,31)" fg:x="1041" fg:w="90"/><text x="83.9317%" y="351.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (89 samples, 7.15%)</title><rect x="83.7621%" y="325" width="7.1543%" height="15" fill="rgb(244,133,0)" fg:x="1042" fg:w="89"/><text x="84.0121%" y="335.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="90.8360%" y="309" width="0.0804%" height="15" fill="rgb(223,15,50)" fg:x="1130" fg:w="1"/><text x="91.0860%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.9164%" y="405" width="0.0804%" height="15" fill="rgb(250,118,49)" fg:x="1131" fg:w="1"/><text x="91.1664%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.9164%" y="389" width="0.0804%" height="15" fill="rgb(248,25,38)" fg:x="1131" fg:w="1"/><text x="91.1664%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9164%" y="373" width="0.0804%" height="15" fill="rgb(215,70,14)" fg:x="1131" fg:w="1"/><text x="91.1664%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9164%" y="357" width="0.0804%" height="15" fill="rgb(215,28,15)" fg:x="1131" fg:w="1"/><text x="91.1664%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.1576%" y="389" width="0.0804%" height="15" fill="rgb(243,6,28)" fg:x="1134" fg:w="1"/><text x="91.4076%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="91.2379%" y="389" width="0.0804%" height="15" fill="rgb(222,130,1)" fg:x="1135" fg:w="1"/><text x="91.4879%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="91.3183%" y="389" width="0.4823%" height="15" fill="rgb(236,166,44)" fg:x="1136" fg:w="6"/><text x="91.5683%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.7203%" y="373" width="0.0804%" height="15" fill="rgb(221,108,14)" fg:x="1141" fg:w="1"/><text x="91.9703%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.7203%" y="357" width="0.0804%" height="15" fill="rgb(252,3,45)" fg:x="1141" fg:w="1"/><text x="91.9703%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.7203%" y="341" width="0.0804%" height="15" fill="rgb(237,68,30)" fg:x="1141" fg:w="1"/><text x="91.9703%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="91.8006%" y="389" width="0.4823%" height="15" fill="rgb(211,79,22)" fg:x="1142" fg:w="6"/><text x="92.0506%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (145 samples, 11.66%)</title><rect x="80.7878%" y="437" width="11.6559%" height="15" fill="rgb(252,185,21)" fg:x="1005" fg:w="145"/><text x="81.0378%" y="447.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (110 samples, 8.84%)</title><rect x="83.6013%" y="421" width="8.8424%" height="15" fill="rgb(225,189,26)" fg:x="1040" fg:w="110"/><text x="83.8513%" y="431.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.45%)</title><rect x="90.9968%" y="405" width="1.4469%" height="15" fill="rgb(241,30,40)" fg:x="1132" fg:w="18"/><text x="91.2468%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="92.2830%" y="389" width="0.1608%" height="15" fill="rgb(235,215,44)" fg:x="1148" fg:w="2"/><text x="92.5330%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="92.4437%" y="405" width="0.0804%" height="15" fill="rgb(205,8,29)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="92.4437%" y="389" width="0.0804%" height="15" fill="rgb(241,137,42)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.4437%" y="373" width="0.0804%" height="15" fill="rgb(237,155,2)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.4437%" y="357" width="0.0804%" height="15" fill="rgb(245,29,42)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.4437%" y="341" width="0.0804%" height="15" fill="rgb(234,101,35)" fg:x="1150" fg:w="1"/><text x="92.6937%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="92.5241%" y="405" width="0.0804%" height="15" fill="rgb(228,64,37)" fg:x="1151" fg:w="1"/><text x="92.7741%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="92.4437%" y="437" width="0.2412%" height="15" fill="rgb(217,214,36)" fg:x="1150" fg:w="3"/><text x="92.6937%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="92.4437%" y="421" width="0.2412%" height="15" fill="rgb(243,70,3)" fg:x="1150" fg:w="3"/><text x="92.6937%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.6045%" y="405" width="0.0804%" height="15" fill="rgb(253,158,52)" fg:x="1152" fg:w="1"/><text x="92.8545%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.6045%" y="389" width="0.0804%" height="15" fill="rgb(234,111,54)" fg:x="1152" fg:w="1"/><text x="92.8545%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="92.7653%" y="405" width="0.0804%" height="15" fill="rgb(217,70,32)" fg:x="1154" fg:w="1"/><text x="93.0153%" y="415.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="92.7653%" y="389" width="0.0804%" height="15" fill="rgb(234,18,33)" fg:x="1154" fg:w="1"/><text x="93.0153%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.8457%" y="389" width="0.0804%" height="15" fill="rgb(234,12,49)" fg:x="1155" fg:w="1"/><text x="93.0957%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.8457%" y="373" width="0.0804%" height="15" fill="rgb(236,10,21)" fg:x="1155" fg:w="1"/><text x="93.0957%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.8457%" y="357" width="0.0804%" height="15" fill="rgb(248,182,45)" fg:x="1155" fg:w="1"/><text x="93.0957%" y="367.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="92.9260%" y="389" width="0.2412%" height="15" fill="rgb(217,95,36)" fg:x="1156" fg:w="3"/><text x="93.1760%" y="399.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="92.9260%" y="373" width="0.2412%" height="15" fill="rgb(212,110,31)" fg:x="1156" fg:w="3"/><text x="93.1760%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="92.8457%" y="405" width="0.4019%" height="15" fill="rgb(206,32,53)" fg:x="1155" fg:w="5"/><text x="93.0957%" y="415.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_unicode_class (1 samples, 0.08%)</title><rect x="93.1672%" y="389" width="0.0804%" height="15" fill="rgb(246,141,37)" fg:x="1159" fg:w="1"/><text x="93.4172%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="93.2476%" y="405" width="0.0804%" height="15" fill="rgb(219,16,7)" fg:x="1160" fg:w="1"/><text x="93.4976%" y="415.50"></text></g><g><title>indefinite::rules::number::Number::check (182 samples, 14.63%)</title><rect x="78.8585%" y="501" width="14.6302%" height="15" fill="rgb(230,205,45)" fg:x="981" fg:w="182"/><text x="79.1085%" y="511.50">indefinite::rules::num..</text></g><g><title>regex::regex::string::Regex::new (159 samples, 12.78%)</title><rect x="80.7074%" y="485" width="12.7814%" height="15" fill="rgb(231,43,49)" fg:x="1004" fg:w="159"/><text x="80.9574%" y="495.50">regex::regex::strin..</text></g><g><title>regex::builders::Builder::build_one_string (159 samples, 12.78%)</title><rect x="80.7074%" y="469" width="12.7814%" height="15" fill="rgb(212,106,34)" fg:x="1004" fg:w="159"/><text x="80.9574%" y="479.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (159 samples, 12.78%)</title><rect x="80.7074%" y="453" width="12.7814%" height="15" fill="rgb(206,83,17)" fg:x="1004" fg:w="159"/><text x="80.9574%" y="463.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.80%)</title><rect x="92.6849%" y="437" width="0.8039%" height="15" fill="rgb(244,154,49)" fg:x="1153" fg:w="10"/><text x="92.9349%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.80%)</title><rect x="92.6849%" y="421" width="0.8039%" height="15" fill="rgb(244,149,49)" fg:x="1153" fg:w="10"/><text x="92.9349%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="93.3280%" y="405" width="0.1608%" height="15" fill="rgb(227,134,18)" fg:x="1161" fg:w="2"/><text x="93.5780%" y="415.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="93.4084%" y="389" width="0.0804%" height="15" fill="rgb(237,116,36)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.4084%" y="373" width="0.0804%" height="15" fill="rgb(205,129,40)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.4084%" y="357" width="0.0804%" height="15" fill="rgb(236,178,4)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.4084%" y="341" width="0.0804%" height="15" fill="rgb(251,76,53)" fg:x="1162" fg:w="1"/><text x="93.6584%" y="351.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="93.4887%" y="485" width="0.0804%" height="15" fill="rgb(242,92,40)" fg:x="1163" fg:w="1"/><text x="93.7387%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5691%" y="421" width="0.0804%" height="15" fill="rgb(209,45,30)" fg:x="1164" fg:w="1"/><text x="93.8191%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5691%" y="405" width="0.0804%" height="15" fill="rgb(218,157,36)" fg:x="1164" fg:w="1"/><text x="93.8191%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.5691%" y="389" width="0.0804%" height="15" fill="rgb(222,186,16)" fg:x="1164" fg:w="1"/><text x="93.8191%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.7299%" y="357" width="0.0804%" height="15" fill="rgb(254,72,35)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.7299%" y="341" width="0.0804%" height="15" fill="rgb(224,25,35)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.7299%" y="325" width="0.0804%" height="15" fill="rgb(206,135,52)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.7299%" y="309" width="0.0804%" height="15" fill="rgb(229,174,47)" fg:x="1166" fg:w="1"/><text x="93.9799%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="93.6495%" y="421" width="0.2412%" height="15" fill="rgb(242,184,21)" fg:x="1165" fg:w="3"/><text x="93.8995%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="93.6495%" y="405" width="0.2412%" height="15" fill="rgb(213,22,45)" fg:x="1165" fg:w="3"/><text x="93.8995%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="93.7299%" y="389" width="0.1608%" height="15" fill="rgb(237,81,54)" fg:x="1166" fg:w="2"/><text x="93.9799%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="93.7299%" y="373" width="0.1608%" height="15" fill="rgb(248,177,18)" fg:x="1166" fg:w="2"/><text x="93.9799%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.8103%" y="357" width="0.0804%" height="15" fill="rgb(254,31,16)" fg:x="1167" fg:w="1"/><text x="94.0603%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="93.8907%" y="405" width="0.1608%" height="15" fill="rgb(235,20,31)" fg:x="1168" fg:w="2"/><text x="94.1407%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="93.8907%" y="389" width="0.1608%" height="15" fill="rgb(240,56,43)" fg:x="1168" fg:w="2"/><text x="94.1407%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="94.0514%" y="405" width="0.3215%" height="15" fill="rgb(237,197,51)" fg:x="1170" fg:w="4"/><text x="94.3014%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="94.1318%" y="389" width="0.2412%" height="15" fill="rgb(241,162,44)" fg:x="1171" fg:w="3"/><text x="94.3818%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.3730%" y="389" width="0.0804%" height="15" fill="rgb(224,23,20)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="94.3730%" y="373" width="0.0804%" height="15" fill="rgb(250,109,34)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.3730%" y="357" width="0.0804%" height="15" fill="rgb(214,175,50)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.3730%" y="341" width="0.0804%" height="15" fill="rgb(213,182,5)" fg:x="1174" fg:w="1"/><text x="94.6230%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="93.8907%" y="421" width="0.7235%" height="15" fill="rgb(209,199,19)" fg:x="1168" fg:w="9"/><text x="94.1407%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="94.3730%" y="405" width="0.2412%" height="15" fill="rgb(236,224,42)" fg:x="1174" fg:w="3"/><text x="94.6230%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="94.4534%" y="389" width="0.1608%" height="15" fill="rgb(246,226,29)" fg:x="1175" fg:w="2"/><text x="94.7034%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="94.5338%" y="373" width="0.0804%" height="15" fill="rgb(227,223,11)" fg:x="1176" fg:w="1"/><text x="94.7838%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="94.6945%" y="389" width="0.0804%" height="15" fill="rgb(219,7,51)" fg:x="1178" fg:w="1"/><text x="94.9445%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="94.9357%" y="357" width="0.0804%" height="15" fill="rgb(245,167,10)" fg:x="1181" fg:w="1"/><text x="95.1857%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="94.9357%" y="373" width="0.1608%" height="15" fill="rgb(237,224,16)" fg:x="1181" fg:w="2"/><text x="95.1857%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="95.0161%" y="357" width="0.0804%" height="15" fill="rgb(226,132,13)" fg:x="1182" fg:w="1"/><text x="95.2661%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="95.0161%" y="341" width="0.0804%" height="15" fill="rgb(214,140,3)" fg:x="1182" fg:w="1"/><text x="95.2661%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="94.7749%" y="389" width="0.4019%" height="15" fill="rgb(221,177,4)" fg:x="1179" fg:w="5"/><text x="95.0249%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.0965%" y="373" width="0.0804%" height="15" fill="rgb(238,139,3)" fg:x="1183" fg:w="1"/><text x="95.3465%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="94.6141%" y="421" width="0.6431%" height="15" fill="rgb(216,17,39)" fg:x="1177" fg:w="8"/><text x="94.8641%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="94.6141%" y="405" width="0.6431%" height="15" fill="rgb(238,120,9)" fg:x="1177" fg:w="8"/><text x="94.8641%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.1768%" y="389" width="0.0804%" height="15" fill="rgb(244,92,53)" fg:x="1184" fg:w="1"/><text x="95.4268%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="95.1768%" y="373" width="0.0804%" height="15" fill="rgb(224,148,33)" fg:x="1184" fg:w="1"/><text x="95.4268%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.2572%" y="373" width="0.0804%" height="15" fill="rgb(243,6,36)" fg:x="1185" fg:w="1"/><text x="95.5072%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.2572%" y="357" width="0.0804%" height="15" fill="rgb(230,102,11)" fg:x="1185" fg:w="1"/><text x="95.5072%" y="367.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="95.2572%" y="341" width="0.0804%" height="15" fill="rgb(234,148,36)" fg:x="1185" fg:w="1"/><text x="95.5072%" y="351.50"></text></g><g><title>regex::regex::string::Regex::new (23 samples, 1.85%)</title><rect x="93.5691%" y="469" width="1.8489%" height="15" fill="rgb(251,153,25)" fg:x="1164" fg:w="23"/><text x="93.8191%" y="479.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (23 samples, 1.85%)</title><rect x="93.5691%" y="453" width="1.8489%" height="15" fill="rgb(215,129,8)" fg:x="1164" fg:w="23"/><text x="93.8191%" y="463.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.85%)</title><rect x="93.5691%" y="437" width="1.8489%" height="15" fill="rgb(224,128,35)" fg:x="1164" fg:w="23"/><text x="93.8191%" y="447.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="95.2572%" y="421" width="0.1608%" height="15" fill="rgb(237,56,52)" fg:x="1185" fg:w="2"/><text x="95.5072%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="95.2572%" y="405" width="0.1608%" height="15" fill="rgb(234,213,19)" fg:x="1185" fg:w="2"/><text x="95.5072%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.2572%" y="389" width="0.1608%" height="15" fill="rgb(252,82,23)" fg:x="1185" fg:w="2"/><text x="95.5072%" y="399.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.3376%" y="373" width="0.0804%" height="15" fill="rgb(254,201,21)" fg:x="1186" fg:w="1"/><text x="95.5876%" y="383.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="95.3376%" y="357" width="0.0804%" height="15" fill="rgb(250,186,11)" fg:x="1186" fg:w="1"/><text x="95.5876%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="95.4180%" y="389" width="0.1608%" height="15" fill="rgb(211,174,5)" fg:x="1187" fg:w="2"/><text x="95.6680%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.4180%" y="373" width="0.1608%" height="15" fill="rgb(214,121,10)" fg:x="1187" fg:w="2"/><text x="95.6680%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.4984%" y="357" width="0.0804%" height="15" fill="rgb(241,66,2)" fg:x="1188" fg:w="1"/><text x="95.7484%" y="367.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (299 samples, 24.04%)</title><rect x="71.7042%" y="581" width="24.0354%" height="15" fill="rgb(220,167,19)" fg:x="892" fg:w="299"/><text x="71.9542%" y="591.50">&lt;&amp;kernel::model::entry::Entry as plugi..</text></g><g><title>plugins_core::looking::model::qualify_name (299 samples, 24.04%)</title><rect x="71.7042%" y="565" width="24.0354%" height="15" fill="rgb(231,54,50)" fg:x="892" fg:w="299"/><text x="71.9542%" y="575.50">plugins_core::looking::model::qualify_..</text></g><g><title>indefinite::indefinite (299 samples, 24.04%)</title><rect x="71.7042%" y="549" width="24.0354%" height="15" fill="rgb(239,217,53)" fg:x="892" fg:w="299"/><text x="71.9542%" y="559.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (299 samples, 24.04%)</title><rect x="71.7042%" y="533" width="24.0354%" height="15" fill="rgb(248,8,0)" fg:x="892" fg:w="299"/><text x="71.9542%" y="543.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (299 samples, 24.04%)</title><rect x="71.7042%" y="517" width="24.0354%" height="15" fill="rgb(229,118,37)" fg:x="892" fg:w="299"/><text x="71.9542%" y="527.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (28 samples, 2.25%)</title><rect x="93.4887%" y="501" width="2.2508%" height="15" fill="rgb(253,223,43)" fg:x="1163" fg:w="28"/><text x="93.7387%" y="511.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (27 samples, 2.17%)</title><rect x="93.5691%" y="485" width="2.1704%" height="15" fill="rgb(211,77,36)" fg:x="1164" fg:w="27"/><text x="93.8191%" y="495.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="95.4180%" y="469" width="0.3215%" height="15" fill="rgb(219,3,53)" fg:x="1187" fg:w="4"/><text x="95.6680%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="95.4180%" y="453" width="0.3215%" height="15" fill="rgb(244,45,42)" fg:x="1187" fg:w="4"/><text x="95.6680%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="95.4180%" y="437" width="0.3215%" height="15" fill="rgb(225,95,27)" fg:x="1187" fg:w="4"/><text x="95.6680%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="95.4180%" y="421" width="0.3215%" height="15" fill="rgb(207,74,8)" fg:x="1187" fg:w="4"/><text x="95.6680%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="95.4180%" y="405" width="0.3215%" height="15" fill="rgb(243,63,36)" fg:x="1187" fg:w="4"/><text x="95.6680%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="95.5788%" y="389" width="0.1608%" height="15" fill="rgb(211,180,12)" fg:x="1189" fg:w="2"/><text x="95.8288%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.7395%" y="549" width="0.0804%" height="15" fill="rgb(254,166,49)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.7395%" y="533" width="0.0804%" height="15" fill="rgb(205,19,0)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.7395%" y="517" width="0.0804%" height="15" fill="rgb(224,172,32)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.7395%" y="501" width="0.0804%" height="15" fill="rgb(254,136,30)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.7395%" y="485" width="0.0804%" height="15" fill="rgb(246,19,35)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="95.7395%" y="469" width="0.0804%" height="15" fill="rgb(219,24,36)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="95.7395%" y="453" width="0.0804%" height="15" fill="rgb(251,55,1)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="95.7395%" y="437" width="0.0804%" height="15" fill="rgb(218,117,39)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.7395%" y="421" width="0.0804%" height="15" fill="rgb(248,169,11)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.7395%" y="405" width="0.0804%" height="15" fill="rgb(244,40,44)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="95.7395%" y="389" width="0.0804%" height="15" fill="rgb(234,62,37)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="95.7395%" y="373" width="0.0804%" height="15" fill="rgb(207,117,42)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="95.7395%" y="357" width="0.0804%" height="15" fill="rgb(213,43,2)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="95.7395%" y="341" width="0.0804%" height="15" fill="rgb(244,202,51)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="351.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="95.7395%" y="325" width="0.0804%" height="15" fill="rgb(253,174,46)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="335.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (303 samples, 24.36%)</title><rect x="71.6238%" y="613" width="24.3569%" height="15" fill="rgb(251,23,1)" fg:x="891" fg:w="303"/><text x="71.8738%" y="623.50">&lt;plugins_core::looking::actions::LookAc..</text></g><g><title>plugins_core::looking::model::new_area_observation (302 samples, 24.28%)</title><rect x="71.7042%" y="597" width="24.2765%" height="15" fill="rgb(253,26,1)" fg:x="892" fg:w="302"/><text x="71.9542%" y="607.50">plugins_core::looking::model::new_area_..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="95.7395%" y="581" width="0.2412%" height="15" fill="rgb(216,89,31)" fg:x="1191" fg:w="3"/><text x="95.9895%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="95.7395%" y="565" width="0.2412%" height="15" fill="rgb(209,109,5)" fg:x="1191" fg:w="3"/><text x="95.9895%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="95.8199%" y="549" width="0.1608%" height="15" fill="rgb(229,63,13)" fg:x="1192" fg:w="2"/><text x="96.0699%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="95.9003%" y="533" width="0.0804%" height="15" fill="rgb(238,137,54)" fg:x="1193" fg:w="1"/><text x="96.1503%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="95.9003%" y="517" width="0.0804%" height="15" fill="rgb(228,1,9)" fg:x="1193" fg:w="1"/><text x="96.1503%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="95.9807%" y="357" width="0.0804%" height="15" fill="rgb(249,120,48)" fg:x="1194" fg:w="1"/><text x="96.2307%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="95.9807%" y="549" width="0.1608%" height="15" fill="rgb(209,72,36)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="95.9807%" y="533" width="0.1608%" height="15" fill="rgb(247,98,49)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="543.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="95.9807%" y="517" width="0.1608%" height="15" fill="rgb(233,75,36)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="95.9807%" y="501" width="0.1608%" height="15" fill="rgb(225,14,24)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="95.9807%" y="485" width="0.1608%" height="15" fill="rgb(237,193,20)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="95.9807%" y="469" width="0.1608%" height="15" fill="rgb(239,122,19)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="95.9807%" y="453" width="0.1608%" height="15" fill="rgb(231,220,10)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="95.9807%" y="437" width="0.1608%" height="15" fill="rgb(220,66,15)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="95.9807%" y="421" width="0.1608%" height="15" fill="rgb(215,171,52)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="95.9807%" y="405" width="0.1608%" height="15" fill="rgb(241,169,50)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="95.9807%" y="389" width="0.1608%" height="15" fill="rgb(236,189,0)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="95.9807%" y="373" width="0.1608%" height="15" fill="rgb(217,147,20)" fg:x="1194" fg:w="2"/><text x="96.2307%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.0611%" y="357" width="0.0804%" height="15" fill="rgb(206,188,39)" fg:x="1195" fg:w="1"/><text x="96.3111%" y="367.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (3 samples, 0.24%)</title><rect x="95.9807%" y="613" width="0.2412%" height="15" fill="rgb(227,118,25)" fg:x="1194" fg:w="3"/><text x="96.2307%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="95.9807%" y="597" width="0.2412%" height="15" fill="rgb(248,171,40)" fg:x="1194" fg:w="3"/><text x="96.2307%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="95.9807%" y="581" width="0.2412%" height="15" fill="rgb(251,90,54)" fg:x="1194" fg:w="3"/><text x="96.2307%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="95.9807%" y="565" width="0.2412%" height="15" fill="rgb(234,11,46)" fg:x="1194" fg:w="3"/><text x="96.2307%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="96.1415%" y="549" width="0.0804%" height="15" fill="rgb(229,134,13)" fg:x="1196" fg:w="1"/><text x="96.3915%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1415%" y="533" width="0.0804%" height="15" fill="rgb(223,129,3)" fg:x="1196" fg:w="1"/><text x="96.3915%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="96.3023%" y="501" width="0.1608%" height="15" fill="rgb(221,124,13)" fg:x="1198" fg:w="2"/><text x="96.5523%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="96.3023%" y="549" width="0.2412%" height="15" fill="rgb(234,3,18)" fg:x="1198" fg:w="3"/><text x="96.5523%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="96.3023%" y="533" width="0.2412%" height="15" fill="rgb(249,199,20)" fg:x="1198" fg:w="3"/><text x="96.5523%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="96.3023%" y="517" width="0.2412%" height="15" fill="rgb(224,134,6)" fg:x="1198" fg:w="3"/><text x="96.5523%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="96.4630%" y="501" width="0.0804%" height="15" fill="rgb(254,83,26)" fg:x="1200" fg:w="1"/><text x="96.7130%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5434%" y="549" width="0.0804%" height="15" fill="rgb(217,88,9)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="96.3023%" y="565" width="0.4019%" height="15" fill="rgb(225,73,2)" fg:x="1198" fg:w="5"/><text x="96.5523%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="96.6238%" y="549" width="0.0804%" height="15" fill="rgb(226,44,39)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (7 samples, 0.56%)</title><rect x="96.2219%" y="581" width="0.5627%" height="15" fill="rgb(228,53,17)" fg:x="1197" fg:w="7"/><text x="96.4719%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.7042%" y="565" width="0.0804%" height="15" fill="rgb(212,27,27)" fg:x="1203" fg:w="1"/><text x="96.9542%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.7846%" y="549" width="0.0804%" height="15" fill="rgb(241,50,6)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7846%" y="533" width="0.0804%" height="15" fill="rgb(225,28,51)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.8650%" y="549" width="0.0804%" height="15" fill="rgb(215,33,16)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.8650%" y="533" width="0.0804%" height="15" fill="rgb(243,40,39)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8650%" y="517" width="0.0804%" height="15" fill="rgb(225,11,42)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.9453%" y="469" width="0.0804%" height="15" fill="rgb(241,220,38)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="96.9453%" y="453" width="0.0804%" height="15" fill="rgb(244,52,35)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="463.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="96.9453%" y="437" width="0.0804%" height="15" fill="rgb(246,42,46)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="96.9453%" y="421" width="0.0804%" height="15" fill="rgb(205,184,13)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="96.9453%" y="405" width="0.0804%" height="15" fill="rgb(209,48,36)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="415.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="96.9453%" y="389" width="0.0804%" height="15" fill="rgb(244,34,51)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9453%" y="373" width="0.0804%" height="15" fill="rgb(221,107,33)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9453%" y="357" width="0.0804%" height="15" fill="rgb(224,203,12)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9453%" y="341" width="0.0804%" height="15" fill="rgb(230,215,18)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.9453%" y="325" width="0.0804%" height="15" fill="rgb(206,185,35)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.9453%" y="309" width="0.0804%" height="15" fill="rgb(228,140,34)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.9453%" y="293" width="0.0804%" height="15" fill="rgb(208,93,13)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="96.9453%" y="277" width="0.0804%" height="15" fill="rgb(221,193,39)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="96.9453%" y="261" width="0.0804%" height="15" fill="rgb(241,132,34)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="96.9453%" y="485" width="0.2412%" height="15" fill="rgb(221,141,10)" fg:x="1206" fg:w="3"/><text x="97.1953%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.0257%" y="469" width="0.1608%" height="15" fill="rgb(226,90,31)" fg:x="1207" fg:w="2"/><text x="97.2757%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="97.0257%" y="453" width="0.1608%" height="15" fill="rgb(243,75,5)" fg:x="1207" fg:w="2"/><text x="97.2757%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="97.0257%" y="437" width="0.1608%" height="15" fill="rgb(227,156,21)" fg:x="1207" fg:w="2"/><text x="97.2757%" y="447.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.1061%" y="421" width="0.0804%" height="15" fill="rgb(250,195,8)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.1061%" y="405" width="0.0804%" height="15" fill="rgb(220,134,5)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="97.1061%" y="389" width="0.0804%" height="15" fill="rgb(246,106,34)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="97.1061%" y="373" width="0.0804%" height="15" fill="rgb(205,1,4)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.1061%" y="357" width="0.0804%" height="15" fill="rgb(224,151,29)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.1061%" y="341" width="0.0804%" height="15" fill="rgb(251,196,0)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.1061%" y="325" width="0.0804%" height="15" fill="rgb(212,127,0)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1061%" y="309" width="0.0804%" height="15" fill="rgb(236,71,53)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1061%" y="293" width="0.0804%" height="15" fill="rgb(227,99,0)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1061%" y="277" width="0.0804%" height="15" fill="rgb(239,89,21)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1061%" y="261" width="0.0804%" height="15" fill="rgb(243,122,19)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="97.1061%" y="245" width="0.0804%" height="15" fill="rgb(229,192,45)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="255.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (4 samples, 0.32%)</title><rect x="96.9453%" y="501" width="0.3215%" height="15" fill="rgb(235,165,35)" fg:x="1206" fg:w="4"/><text x="97.1953%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.1865%" y="485" width="0.0804%" height="15" fill="rgb(253,202,0)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.1865%" y="469" width="0.0804%" height="15" fill="rgb(235,51,20)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1865%" y="453" width="0.0804%" height="15" fill="rgb(218,95,46)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1865%" y="437" width="0.0804%" height="15" fill="rgb(212,81,10)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1865%" y="421" width="0.0804%" height="15" fill="rgb(240,59,0)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2669%" y="453" width="0.0804%" height="15" fill="rgb(212,191,42)" fg:x="1210" fg:w="1"/><text x="97.5169%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3473%" y="229" width="0.0804%" height="15" fill="rgb(233,140,3)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3473%" y="213" width="0.0804%" height="15" fill="rgb(215,69,23)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="223.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="97.3473%" y="325" width="0.1608%" height="15" fill="rgb(240,202,20)" fg:x="1211" fg:w="2"/><text x="97.5973%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="97.3473%" y="309" width="0.1608%" height="15" fill="rgb(209,146,50)" fg:x="1211" fg:w="2"/><text x="97.5973%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.3473%" y="293" width="0.1608%" height="15" fill="rgb(253,102,54)" fg:x="1211" fg:w="2"/><text x="97.5973%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.3473%" y="277" width="0.1608%" height="15" fill="rgb(250,173,47)" fg:x="1211" fg:w="2"/><text x="97.5973%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.3473%" y="261" width="0.1608%" height="15" fill="rgb(232,142,7)" fg:x="1211" fg:w="2"/><text x="97.5973%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.3473%" y="245" width="0.1608%" height="15" fill="rgb(230,157,47)" fg:x="1211" fg:w="2"/><text x="97.5973%" y="255.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.4277%" y="229" width="0.0804%" height="15" fill="rgb(214,177,35)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4277%" y="213" width="0.0804%" height="15" fill="rgb(234,119,46)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.4277%" y="197" width="0.0804%" height="15" fill="rgb(241,180,50)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.4277%" y="181" width="0.0804%" height="15" fill="rgb(221,54,25)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4277%" y="165" width="0.0804%" height="15" fill="rgb(209,157,44)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.4277%" y="149" width="0.0804%" height="15" fill="rgb(246,115,41)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.4277%" y="133" width="0.0804%" height="15" fill="rgb(229,86,1)" fg:x="1212" fg:w="1"/><text x="97.6777%" y="143.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.5080%" y="277" width="0.0804%" height="15" fill="rgb(240,108,53)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="97.5080%" y="261" width="0.0804%" height="15" fill="rgb(227,134,2)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.5884%" y="245" width="0.0804%" height="15" fill="rgb(213,129,25)" fg:x="1214" fg:w="1"/><text x="97.8384%" y="255.50"></text></g><g><title>plugins_core::tools::get_contained_keys (6 samples, 0.48%)</title><rect x="97.2669%" y="501" width="0.4823%" height="15" fill="rgb(226,35,21)" fg:x="1210" fg:w="6"/><text x="97.5169%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="97.2669%" y="485" width="0.4823%" height="15" fill="rgb(208,129,26)" fg:x="1210" fg:w="6"/><text x="97.5169%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.48%)</title><rect x="97.2669%" y="469" width="0.4823%" height="15" fill="rgb(224,83,6)" fg:x="1210" fg:w="6"/><text x="97.5169%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.40%)</title><rect x="97.3473%" y="453" width="0.4019%" height="15" fill="rgb(227,52,39)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="97.3473%" y="437" width="0.4019%" height="15" fill="rgb(241,30,17)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="97.3473%" y="421" width="0.4019%" height="15" fill="rgb(246,186,42)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.40%)</title><rect x="97.3473%" y="405" width="0.4019%" height="15" fill="rgb(221,169,15)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="97.3473%" y="389" width="0.4019%" height="15" fill="rgb(235,108,21)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="97.3473%" y="373" width="0.4019%" height="15" fill="rgb(219,148,30)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="383.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="97.3473%" y="357" width="0.4019%" height="15" fill="rgb(220,109,5)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="97.3473%" y="341" width="0.4019%" height="15" fill="rgb(213,203,48)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="351.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.5080%" y="325" width="0.2412%" height="15" fill="rgb(244,71,33)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.5080%" y="309" width="0.2412%" height="15" fill="rgb(209,23,2)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.5080%" y="293" width="0.2412%" height="15" fill="rgb(219,97,7)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.5884%" y="277" width="0.1608%" height="15" fill="rgb(216,161,23)" fg:x="1214" fg:w="2"/><text x="97.8384%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.5884%" y="261" width="0.1608%" height="15" fill="rgb(207,45,42)" fg:x="1214" fg:w="2"/><text x="97.8384%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.6688%" y="245" width="0.0804%" height="15" fill="rgb(241,61,4)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6688%" y="229" width="0.0804%" height="15" fill="rgb(236,170,1)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.6688%" y="213" width="0.0804%" height="15" fill="rgb(239,72,5)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6688%" y="197" width="0.0804%" height="15" fill="rgb(214,13,50)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="96.9453%" y="533" width="0.8842%" height="15" fill="rgb(224,88,9)" fg:x="1206" fg:w="11"/><text x="97.1953%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.88%)</title><rect x="96.9453%" y="517" width="0.8842%" height="15" fill="rgb(238,192,34)" fg:x="1206" fg:w="11"/><text x="97.1953%" y="527.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="97.7492%" y="501" width="0.0804%" height="15" fill="rgb(217,203,50)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.7492%" y="485" width="0.0804%" height="15" fill="rgb(241,123,32)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.7492%" y="469" width="0.0804%" height="15" fill="rgb(248,151,39)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7492%" y="453" width="0.0804%" height="15" fill="rgb(208,89,6)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7492%" y="437" width="0.0804%" height="15" fill="rgb(254,43,26)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.7492%" y="421" width="0.0804%" height="15" fill="rgb(216,158,13)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.7492%" y="405" width="0.0804%" height="15" fill="rgb(212,47,37)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9100%" y="485" width="0.0804%" height="15" fill="rgb(254,16,10)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9100%" y="469" width="0.0804%" height="15" fill="rgb(223,228,16)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9100%" y="453" width="0.0804%" height="15" fill="rgb(249,108,50)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9100%" y="437" width="0.0804%" height="15" fill="rgb(208,220,5)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9100%" y="421" width="0.0804%" height="15" fill="rgb(217,89,48)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9100%" y="405" width="0.0804%" height="15" fill="rgb(212,113,41)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9100%" y="389" width="0.0804%" height="15" fill="rgb(231,127,5)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9100%" y="373" width="0.0804%" height="15" fill="rgb(217,141,17)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.9100%" y="357" width="0.0804%" height="15" fill="rgb(245,125,54)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.9100%" y="341" width="0.0804%" height="15" fill="rgb(248,125,3)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.9100%" y="325" width="0.0804%" height="15" fill="rgb(236,119,51)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9100%" y="309" width="0.0804%" height="15" fill="rgb(239,99,8)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9904%" y="453" width="0.0804%" height="15" fill="rgb(224,228,4)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9904%" y="437" width="0.0804%" height="15" fill="rgb(220,131,45)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9904%" y="421" width="0.0804%" height="15" fill="rgb(215,62,5)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9904%" y="405" width="0.0804%" height="15" fill="rgb(253,12,24)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9904%" y="389" width="0.0804%" height="15" fill="rgb(248,120,50)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9904%" y="373" width="0.0804%" height="15" fill="rgb(245,194,10)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9904%" y="357" width="0.0804%" height="15" fill="rgb(241,149,38)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9904%" y="341" width="0.0804%" height="15" fill="rgb(219,215,7)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.9904%" y="325" width="0.0804%" height="15" fill="rgb(208,120,31)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.9904%" y="309" width="0.0804%" height="15" fill="rgb(244,30,8)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.9904%" y="293" width="0.0804%" height="15" fill="rgb(238,35,44)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9904%" y="277" width="0.0804%" height="15" fill="rgb(243,218,37)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="97.9904%" y="485" width="0.1608%" height="15" fill="rgb(218,169,10)" fg:x="1219" fg:w="2"/><text x="98.2404%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="97.9904%" y="469" width="0.1608%" height="15" fill="rgb(221,144,10)" fg:x="1219" fg:w="2"/><text x="98.2404%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.0707%" y="453" width="0.0804%" height="15" fill="rgb(226,41,38)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.0707%" y="437" width="0.0804%" height="15" fill="rgb(228,3,1)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.0707%" y="421" width="0.0804%" height="15" fill="rgb(209,129,12)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.0707%" y="405" width="0.0804%" height="15" fill="rgb(213,136,33)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.0707%" y="389" width="0.0804%" height="15" fill="rgb(209,181,29)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.0707%" y="373" width="0.0804%" height="15" fill="rgb(234,173,18)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.0707%" y="357" width="0.0804%" height="15" fill="rgb(227,73,47)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.0707%" y="341" width="0.0804%" height="15" fill="rgb(234,9,34)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.0707%" y="325" width="0.0804%" height="15" fill="rgb(235,172,15)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.0707%" y="309" width="0.0804%" height="15" fill="rgb(245,61,2)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.0707%" y="293" width="0.0804%" height="15" fill="rgb(238,39,47)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.0707%" y="277" width="0.0804%" height="15" fill="rgb(234,37,24)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.0707%" y="261" width="0.0804%" height="15" fill="rgb(248,223,24)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.0707%" y="245" width="0.0804%" height="15" fill="rgb(223,12,15)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.0707%" y="229" width="0.0804%" height="15" fill="rgb(249,6,3)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="98.0707%" y="213" width="0.0804%" height="15" fill="rgb(237,105,33)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.0707%" y="197" width="0.0804%" height="15" fill="rgb(252,208,35)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="98.0707%" y="181" width="0.0804%" height="15" fill="rgb(215,181,35)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.0707%" y="165" width="0.0804%" height="15" fill="rgb(246,212,3)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="98.0707%" y="149" width="0.0804%" height="15" fill="rgb(247,156,24)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="98.0707%" y="133" width="0.0804%" height="15" fill="rgb(248,9,31)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="98.0707%" y="117" width="0.0804%" height="15" fill="rgb(234,26,45)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.0707%" y="101" width="0.0804%" height="15" fill="rgb(249,11,32)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.4727%" y="309" width="0.1608%" height="15" fill="rgb(249,162,33)" fg:x="1225" fg:w="2"/><text x="98.7227%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.4727%" y="293" width="0.1608%" height="15" fill="rgb(232,4,32)" fg:x="1225" fg:w="2"/><text x="98.7227%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.5531%" y="277" width="0.0804%" height="15" fill="rgb(212,5,45)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5531%" y="261" width="0.0804%" height="15" fill="rgb(227,95,13)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="98.3923%" y="373" width="0.3215%" height="15" fill="rgb(223,205,10)" fg:x="1224" fg:w="4"/><text x="98.6423%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.3923%" y="357" width="0.3215%" height="15" fill="rgb(222,178,8)" fg:x="1224" fg:w="4"/><text x="98.6423%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.4727%" y="341" width="0.2412%" height="15" fill="rgb(216,13,22)" fg:x="1225" fg:w="3"/><text x="98.7227%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.4727%" y="325" width="0.2412%" height="15" fill="rgb(240,167,12)" fg:x="1225" fg:w="3"/><text x="98.7227%" y="335.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6334%" y="309" width="0.0804%" height="15" fill="rgb(235,68,35)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.6334%" y="293" width="0.0804%" height="15" fill="rgb(253,40,27)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="98.2315%" y="389" width="0.6431%" height="15" fill="rgb(214,19,28)" fg:x="1222" fg:w="8"/><text x="98.4815%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.7138%" y="373" width="0.1608%" height="15" fill="rgb(210,167,45)" fg:x="1228" fg:w="2"/><text x="98.9638%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="98.7138%" y="357" width="0.1608%" height="15" fill="rgb(232,97,40)" fg:x="1228" fg:w="2"/><text x="98.9638%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.7942%" y="341" width="0.0804%" height="15" fill="rgb(250,35,23)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.80%)</title><rect x="98.1511%" y="421" width="0.8039%" height="15" fill="rgb(248,47,53)" fg:x="1221" fg:w="10"/><text x="98.4011%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="98.2315%" y="405" width="0.7235%" height="15" fill="rgb(226,58,50)" fg:x="1222" fg:w="9"/><text x="98.4815%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.8746%" y="389" width="0.0804%" height="15" fill="rgb(217,105,26)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8746%" y="373" width="0.0804%" height="15" fill="rgb(208,64,1)" fg:x="1230" fg:w="1"/><text x="99.1246%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.88%)</title><rect x="98.1511%" y="437" width="0.8842%" height="15" fill="rgb(214,80,1)" fg:x="1221" fg:w="11"/><text x="98.4011%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9550%" y="421" width="0.0804%" height="15" fill="rgb(206,175,26)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9550%" y="405" width="0.0804%" height="15" fill="rgb(235,156,37)" fg:x="1231" fg:w="1"/><text x="99.2050%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.13%)</title><rect x="98.1511%" y="469" width="1.1254%" height="15" fill="rgb(213,100,9)" fg:x="1221" fg:w="14"/><text x="98.4011%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (14 samples, 1.13%)</title><rect x="98.1511%" y="453" width="1.1254%" height="15" fill="rgb(241,15,13)" fg:x="1221" fg:w="14"/><text x="98.4011%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="99.0354%" y="437" width="0.2412%" height="15" fill="rgb(205,97,43)" fg:x="1232" fg:w="3"/><text x="99.2854%" y="447.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="99.0354%" y="421" width="0.2412%" height="15" fill="rgb(216,106,32)" fg:x="1232" fg:w="3"/><text x="99.2854%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3569%" y="421" width="0.0804%" height="15" fill="rgb(226,200,8)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4373%" y="421" width="0.0804%" height="15" fill="rgb(244,54,29)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5177%" y="373" width="0.0804%" height="15" fill="rgb(252,169,12)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="99.5177%" y="421" width="0.1608%" height="15" fill="rgb(231,199,11)" fg:x="1238" fg:w="2"/><text x="99.7677%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.5177%" y="405" width="0.1608%" height="15" fill="rgb(233,191,18)" fg:x="1238" fg:w="2"/><text x="99.7677%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.5177%" y="389" width="0.1608%" height="15" fill="rgb(215,83,47)" fg:x="1238" fg:w="2"/><text x="99.7677%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5981%" y="373" width="0.0804%" height="15" fill="rgb(251,67,19)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.5981%" y="357" width="0.0804%" height="15" fill="rgb(240,7,20)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5981%" y="341" width="0.0804%" height="15" fill="rgb(210,150,26)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.6785%" y="341" width="0.0804%" height="15" fill="rgb(228,75,42)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6785%" y="325" width="0.0804%" height="15" fill="rgb(237,134,48)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6785%" y="309" width="0.0804%" height="15" fill="rgb(205,80,50)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="99.6785%" y="373" width="0.1608%" height="15" fill="rgb(217,74,48)" fg:x="1240" fg:w="2"/><text x="99.9285%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="99.6785%" y="357" width="0.1608%" height="15" fill="rgb(205,82,50)" fg:x="1240" fg:w="2"/><text x="99.9285%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7588%" y="341" width="0.0804%" height="15" fill="rgb(228,1,33)" fg:x="1241" fg:w="1"/><text x="100.0088%" y="351.50"></text></g><g><title>all (1,244 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(214,50,23)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1119.50"></text></g><g><title>simple-bd24e590 (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(210,62,9)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1103.50">simple-bd24e590</text></g><g><title>_start (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(210,104,37)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1087.50">_start</text></g><g><title>__libc_start_main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(232,104,43)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1071.50">__libc_start_main</text></g><g><title>main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(244,52,6)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1055.50">main</text></g><g><title>std::rt::lang_start_internal (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(211,174,52)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1039.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(229,48,4)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(205,155,16)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(211,141,53)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="991.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(240,148,11)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="975.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(214,45,23)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(248,74,26)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(218,121,16)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="927.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,244 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(218,10,47)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="911.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(227,99,14)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="895.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,244 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(229,83,46)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(228,25,1)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="863.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,244 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(252,190,15)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="847.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,244 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(213,103,51)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="831.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (423 samples, 34.00%)</title><rect x="65.9968%" y="805" width="34.0032%" height="15" fill="rgb(220,38,44)" fg:x="821" fg:w="423"/><text x="66.2468%" y="815.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::rout..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (423 samples, 34.00%)</title><rect x="65.9968%" y="789" width="34.0032%" height="15" fill="rgb(210,45,26)" fg:x="821" fg:w="423"/><text x="66.2468%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (423 samples, 34.00%)</title><rect x="65.9968%" y="773" width="34.0032%" height="15" fill="rgb(205,95,48)" fg:x="821" fg:w="423"/><text x="66.2468%" y="783.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (353 samples, 28.38%)</title><rect x="71.6238%" y="757" width="28.3762%" height="15" fill="rgb(225,179,37)" fg:x="891" fg:w="353"/><text x="71.8738%" y="767.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (353 samples, 28.38%)</title><rect x="71.6238%" y="741" width="28.3762%" height="15" fill="rgb(230,209,3)" fg:x="891" fg:w="353"/><text x="71.8738%" y="751.50">engine::perform::StandardPerformer::evaluate_a..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (353 samples, 28.38%)</title><rect x="71.6238%" y="725" width="28.3762%" height="15" fill="rgb(248,12,46)" fg:x="891" fg:w="353"/><text x="71.8738%" y="735.50">&lt;kernel::plugins::SessionPlugins as kernel::pl..</text></g><g><title>core::iter::adapters::try_process (353 samples, 28.38%)</title><rect x="71.6238%" y="709" width="28.3762%" height="15" fill="rgb(234,18,0)" fg:x="891" fg:w="353"/><text x="71.8738%" y="719.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (353 samples, 28.38%)</title><rect x="71.6238%" y="693" width="28.3762%" height="15" fill="rgb(238,197,14)" fg:x="891" fg:w="353"/><text x="71.8738%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_i..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (353 samples, 28.38%)</title><rect x="71.6238%" y="677" width="28.3762%" height="15" fill="rgb(251,162,48)" fg:x="891" fg:w="353"/><text x="71.8738%" y="687.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as co..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (353 samples, 28.38%)</title><rect x="71.6238%" y="661" width="28.3762%" height="15" fill="rgb(237,73,42)" fg:x="891" fg:w="353"/><text x="71.8738%" y="671.50">&lt;plugins_core::looking::LookingPlugin as kerne..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (353 samples, 28.38%)</title><rect x="71.6238%" y="645" width="28.3762%" height="15" fill="rgb(211,108,8)" fg:x="891" fg:w="353"/><text x="71.8738%" y="655.50">&lt;engine::perform::StandardPerformer as kernel:..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (353 samples, 28.38%)</title><rect x="71.6238%" y="629" width="28.3762%" height="15" fill="rgb(213,45,22)" fg:x="891" fg:w="353"/><text x="71.8738%" y="639.50">&lt;engine::perform::StandardPerformer as kernel:..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (47 samples, 3.78%)</title><rect x="96.2219%" y="613" width="3.7781%" height="15" fill="rgb(252,154,5)" fg:x="1197" fg:w="47"/><text x="96.4719%" y="623.50">kern..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (47 samples, 3.78%)</title><rect x="96.2219%" y="597" width="3.7781%" height="15" fill="rgb(221,79,52)" fg:x="1197" fg:w="47"/><text x="96.4719%" y="607.50">&lt;plu..</text></g><g><title>plugins_rpc::querying::have_surroundings (40 samples, 3.22%)</title><rect x="96.7846%" y="581" width="3.2154%" height="15" fill="rgb(229,220,36)" fg:x="1204" fg:w="40"/><text x="97.0346%" y="591.50">plu..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (40 samples, 3.22%)</title><rect x="96.7846%" y="565" width="3.2154%" height="15" fill="rgb(211,17,16)" fg:x="1204" fg:w="40"/><text x="97.0346%" y="575.50">&lt;pl..</text></g><g><title>core::iter::adapters::try_process (38 samples, 3.05%)</title><rect x="96.9453%" y="549" width="3.0547%" height="15" fill="rgb(222,55,31)" fg:x="1206" fg:w="38"/><text x="97.1953%" y="559.50">cor..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (27 samples, 2.17%)</title><rect x="97.8296%" y="533" width="2.1704%" height="15" fill="rgb(221,221,31)" fg:x="1217" fg:w="27"/><text x="98.0796%" y="543.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26 samples, 2.09%)</title><rect x="97.9100%" y="517" width="2.0900%" height="15" fill="rgb(227,168,26)" fg:x="1218" fg:w="26"/><text x="98.1600%" y="527.50">&lt;..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (26 samples, 2.09%)</title><rect x="97.9100%" y="501" width="2.0900%" height="15" fill="rgb(224,139,9)" fg:x="1218" fg:w="26"/><text x="98.1600%" y="511.50">p..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (23 samples, 1.85%)</title><rect x="98.1511%" y="485" width="1.8489%" height="15" fill="rgb(254,172,0)" fg:x="1221" fg:w="23"/><text x="98.4011%" y="495.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (9 samples, 0.72%)</title><rect x="99.2765%" y="469" width="0.7235%" height="15" fill="rgb(235,203,1)" fg:x="1235" fg:w="9"/><text x="99.5265%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="99.2765%" y="453" width="0.7235%" height="15" fill="rgb(216,205,24)" fg:x="1235" fg:w="9"/><text x="99.5265%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="99.2765%" y="437" width="0.7235%" height="15" fill="rgb(233,24,6)" fg:x="1235" fg:w="9"/><text x="99.5265%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="99.6785%" y="421" width="0.3215%" height="15" fill="rgb(244,110,9)" fg:x="1240" fg:w="4"/><text x="99.9285%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (4 samples, 0.32%)</title><rect x="99.6785%" y="405" width="0.3215%" height="15" fill="rgb(239,222,42)" fg:x="1240" fg:w="4"/><text x="99.9285%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="99.6785%" y="389" width="0.3215%" height="15" fill="rgb(218,145,13)" fg:x="1240" fg:w="4"/><text x="99.9285%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="99.8392%" y="373" width="0.1608%" height="15" fill="rgb(207,69,11)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.8392%" y="357" width="0.1608%" height="15" fill="rgb(220,223,22)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.8392%" y="341" width="0.1608%" height="15" fill="rgb(245,102,5)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9196%" y="325" width="0.0804%" height="15" fill="rgb(211,148,2)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9196%" y="309" width="0.0804%" height="15" fill="rgb(241,13,44)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="319.50"></text></g></svg></svg>