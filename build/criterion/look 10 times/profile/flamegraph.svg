<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1270"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0787%" y="533" width="0.0787%" height="15" fill="rgb(222,75,29)" fg:x="1" fg:w="1"/><text x="0.3287%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1575%" y="517" width="0.0787%" height="15" fill="rgb(236,139,6)" fg:x="2" fg:w="1"/><text x="0.4075%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1575%" y="501" width="0.0787%" height="15" fill="rgb(223,137,36)" fg:x="2" fg:w="1"/><text x="0.4075%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1575%" y="485" width="0.0787%" height="15" fill="rgb(226,99,2)" fg:x="2" fg:w="1"/><text x="0.4075%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0000%" y="645" width="0.3150%" height="15" fill="rgb(206,133,23)" fg:x="0" fg:w="4"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::state::State&gt;&gt; (4 samples, 0.31%)</title><rect x="0.0000%" y="629" width="0.3150%" height="15" fill="rgb(243,173,15)" fg:x="0" fg:w="4"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="0.0000%" y="613" width="0.3150%" height="15" fill="rgb(228,69,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="0.0787%" y="597" width="0.2362%" height="15" fill="rgb(212,51,22)" fg:x="1" fg:w="3"/><text x="0.3287%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0787%" y="581" width="0.2362%" height="15" fill="rgb(227,113,0)" fg:x="1" fg:w="3"/><text x="0.3287%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0787%" y="565" width="0.2362%" height="15" fill="rgb(252,84,27)" fg:x="1" fg:w="3"/><text x="0.3287%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0787%" y="549" width="0.2362%" height="15" fill="rgb(223,145,39)" fg:x="1" fg:w="3"/><text x="0.3287%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.1575%" y="533" width="0.1575%" height="15" fill="rgb(239,219,30)" fg:x="2" fg:w="2"/><text x="0.4075%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2362%" y="517" width="0.0787%" height="15" fill="rgb(224,196,39)" fg:x="3" fg:w="1"/><text x="0.4862%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2362%" y="501" width="0.0787%" height="15" fill="rgb(205,35,43)" fg:x="3" fg:w="1"/><text x="0.4862%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2362%" y="485" width="0.0787%" height="15" fill="rgb(228,201,21)" fg:x="3" fg:w="1"/><text x="0.4862%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2362%" y="469" width="0.0787%" height="15" fill="rgb(237,118,16)" fg:x="3" fg:w="1"/><text x="0.4862%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="0.3150%" y="549" width="0.1575%" height="15" fill="rgb(241,17,19)" fg:x="4" fg:w="2"/><text x="0.5650%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.3150%" y="533" width="0.1575%" height="15" fill="rgb(214,10,25)" fg:x="4" fg:w="2"/><text x="0.5650%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.3937%" y="517" width="0.0787%" height="15" fill="rgb(238,37,29)" fg:x="5" fg:w="1"/><text x="0.6437%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.3937%" y="501" width="0.0787%" height="15" fill="rgb(253,83,25)" fg:x="5" fg:w="1"/><text x="0.6437%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.3937%" y="485" width="0.0787%" height="15" fill="rgb(234,192,12)" fg:x="5" fg:w="1"/><text x="0.6437%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.3937%" y="469" width="0.0787%" height="15" fill="rgb(241,216,45)" fg:x="5" fg:w="1"/><text x="0.6437%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.3937%" y="453" width="0.0787%" height="15" fill="rgb(242,22,33)" fg:x="5" fg:w="1"/><text x="0.6437%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.3937%" y="437" width="0.0787%" height="15" fill="rgb(231,105,49)" fg:x="5" fg:w="1"/><text x="0.6437%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="0.3150%" y="613" width="0.2362%" height="15" fill="rgb(218,204,15)" fg:x="4" fg:w="3"/><text x="0.5650%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="0.3150%" y="597" width="0.2362%" height="15" fill="rgb(235,138,41)" fg:x="4" fg:w="3"/><text x="0.5650%" y="607.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="0.3150%" y="581" width="0.2362%" height="15" fill="rgb(246,0,9)" fg:x="4" fg:w="3"/><text x="0.5650%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::from_str (3 samples, 0.24%)</title><rect x="0.3150%" y="565" width="0.2362%" height="15" fill="rgb(210,74,4)" fg:x="4" fg:w="3"/><text x="0.5650%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.4724%" y="549" width="0.0787%" height="15" fill="rgb(250,60,41)" fg:x="6" fg:w="1"/><text x="0.7224%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4724%" y="533" width="0.0787%" height="15" fill="rgb(220,115,12)" fg:x="6" fg:w="1"/><text x="0.7224%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="0.4724%" y="517" width="0.0787%" height="15" fill="rgb(237,100,13)" fg:x="6" fg:w="1"/><text x="0.7224%" y="527.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="0.5512%" y="565" width="0.1575%" height="15" fill="rgb(213,55,26)" fg:x="7" fg:w="2"/><text x="0.8012%" y="575.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.08%)</title><rect x="0.6299%" y="549" width="0.0787%" height="15" fill="rgb(216,17,4)" fg:x="8" fg:w="1"/><text x="0.8799%" y="559.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.31%)</title><rect x="0.5512%" y="613" width="0.3150%" height="15" fill="rgb(220,153,47)" fg:x="7" fg:w="4"/><text x="0.8012%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.31%)</title><rect x="0.5512%" y="597" width="0.3150%" height="15" fill="rgb(215,131,9)" fg:x="7" fg:w="4"/><text x="0.8012%" y="607.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.31%)</title><rect x="0.5512%" y="581" width="0.3150%" height="15" fill="rgb(233,46,42)" fg:x="7" fg:w="4"/><text x="0.8012%" y="591.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="0.7087%" y="565" width="0.1575%" height="15" fill="rgb(226,86,7)" fg:x="9" fg:w="2"/><text x="0.9587%" y="575.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="0.7087%" y="549" width="0.1575%" height="15" fill="rgb(239,226,21)" fg:x="9" fg:w="2"/><text x="0.9587%" y="559.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="0.7087%" y="533" width="0.1575%" height="15" fill="rgb(244,137,22)" fg:x="9" fg:w="2"/><text x="0.9587%" y="543.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="0.7087%" y="517" width="0.1575%" height="15" fill="rgb(211,139,35)" fg:x="9" fg:w="2"/><text x="0.9587%" y="527.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="0.7087%" y="501" width="0.1575%" height="15" fill="rgb(214,62,50)" fg:x="9" fg:w="2"/><text x="0.9587%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (8 samples, 0.63%)</title><rect x="0.3150%" y="645" width="0.6299%" height="15" fill="rgb(212,113,44)" fg:x="4" fg:w="8"/><text x="0.5650%" y="655.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.63%)</title><rect x="0.3150%" y="629" width="0.6299%" height="15" fill="rgb(226,150,43)" fg:x="4" fg:w="8"/><text x="0.5650%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="0.8661%" y="613" width="0.0787%" height="15" fill="rgb(250,71,37)" fg:x="11" fg:w="1"/><text x="1.1161%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="0.9449%" y="597" width="0.0787%" height="15" fill="rgb(219,76,19)" fg:x="12" fg:w="1"/><text x="1.1949%" y="607.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="0.9449%" y="581" width="0.0787%" height="15" fill="rgb(250,39,11)" fg:x="12" fg:w="1"/><text x="1.1949%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.0236%" y="549" width="0.0787%" height="15" fill="rgb(230,64,31)" fg:x="13" fg:w="1"/><text x="1.2736%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.0236%" y="533" width="0.0787%" height="15" fill="rgb(208,222,23)" fg:x="13" fg:w="1"/><text x="1.2736%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.0236%" y="517" width="0.0787%" height="15" fill="rgb(227,125,18)" fg:x="13" fg:w="1"/><text x="1.2736%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="1.0236%" y="501" width="0.0787%" height="15" fill="rgb(234,210,9)" fg:x="13" fg:w="1"/><text x="1.2736%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.1024%" y="517" width="0.0787%" height="15" fill="rgb(217,127,24)" fg:x="14" fg:w="1"/><text x="1.3524%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.1024%" y="501" width="0.0787%" height="15" fill="rgb(239,141,48)" fg:x="14" fg:w="1"/><text x="1.3524%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.2598%" y="485" width="0.0787%" height="15" fill="rgb(227,109,8)" fg:x="16" fg:w="1"/><text x="1.5098%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.2598%" y="469" width="0.0787%" height="15" fill="rgb(235,184,23)" fg:x="16" fg:w="1"/><text x="1.5098%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.2598%" y="453" width="0.0787%" height="15" fill="rgb(227,226,48)" fg:x="16" fg:w="1"/><text x="1.5098%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.3386%" y="469" width="0.0787%" height="15" fill="rgb(206,150,11)" fg:x="17" fg:w="1"/><text x="1.5886%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="1.1024%" y="533" width="0.3937%" height="15" fill="rgb(254,2,33)" fg:x="14" fg:w="5"/><text x="1.3524%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="1.1811%" y="517" width="0.3150%" height="15" fill="rgb(243,160,20)" fg:x="15" fg:w="4"/><text x="1.4311%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.2598%" y="501" width="0.2362%" height="15" fill="rgb(218,208,30)" fg:x="16" fg:w="3"/><text x="1.5098%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.3386%" y="485" width="0.1575%" height="15" fill="rgb(224,120,49)" fg:x="17" fg:w="2"/><text x="1.5886%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4173%" y="469" width="0.0787%" height="15" fill="rgb(246,12,2)" fg:x="18" fg:w="1"/><text x="1.6673%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.4173%" y="453" width="0.0787%" height="15" fill="rgb(236,117,3)" fg:x="18" fg:w="1"/><text x="1.6673%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.55%)</title><rect x="1.0236%" y="565" width="0.5512%" height="15" fill="rgb(216,128,52)" fg:x="13" fg:w="7"/><text x="1.2736%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="1.1024%" y="549" width="0.4724%" height="15" fill="rgb(246,145,19)" fg:x="14" fg:w="6"/><text x="1.3524%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4961%" y="533" width="0.0787%" height="15" fill="rgb(222,11,46)" fg:x="19" fg:w="1"/><text x="1.7461%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5748%" y="565" width="0.0787%" height="15" fill="rgb(245,82,36)" fg:x="20" fg:w="1"/><text x="1.8248%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.5748%" y="549" width="0.0787%" height="15" fill="rgb(250,73,51)" fg:x="20" fg:w="1"/><text x="1.8248%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5748%" y="533" width="0.0787%" height="15" fill="rgb(221,189,23)" fg:x="20" fg:w="1"/><text x="1.8248%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5748%" y="517" width="0.0787%" height="15" fill="rgb(210,33,7)" fg:x="20" fg:w="1"/><text x="1.8248%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5748%" y="501" width="0.0787%" height="15" fill="rgb(210,107,22)" fg:x="20" fg:w="1"/><text x="1.8248%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5748%" y="485" width="0.0787%" height="15" fill="rgb(222,116,37)" fg:x="20" fg:w="1"/><text x="1.8248%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5748%" y="469" width="0.0787%" height="15" fill="rgb(254,17,48)" fg:x="20" fg:w="1"/><text x="1.8248%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5748%" y="453" width="0.0787%" height="15" fill="rgb(224,36,32)" fg:x="20" fg:w="1"/><text x="1.8248%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6535%" y="517" width="0.0787%" height="15" fill="rgb(232,90,46)" fg:x="21" fg:w="1"/><text x="1.9035%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1.6535%" y="501" width="0.0787%" height="15" fill="rgb(241,66,40)" fg:x="21" fg:w="1"/><text x="1.9035%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.6535%" y="485" width="0.0787%" height="15" fill="rgb(249,184,29)" fg:x="21" fg:w="1"/><text x="1.9035%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.7323%" y="469" width="0.0787%" height="15" fill="rgb(231,181,1)" fg:x="22" fg:w="1"/><text x="1.9823%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.7323%" y="453" width="0.0787%" height="15" fill="rgb(224,94,2)" fg:x="22" fg:w="1"/><text x="1.9823%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.7323%" y="437" width="0.0787%" height="15" fill="rgb(229,170,15)" fg:x="22" fg:w="1"/><text x="1.9823%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.8898%" y="437" width="0.0787%" height="15" fill="rgb(240,127,35)" fg:x="24" fg:w="1"/><text x="2.1398%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.8898%" y="421" width="0.0787%" height="15" fill="rgb(248,196,34)" fg:x="24" fg:w="1"/><text x="2.1398%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.8898%" y="405" width="0.0787%" height="15" fill="rgb(236,137,7)" fg:x="24" fg:w="1"/><text x="2.1398%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1.9685%" y="421" width="0.0787%" height="15" fill="rgb(235,127,16)" fg:x="25" fg:w="1"/><text x="2.2185%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9685%" y="405" width="0.0787%" height="15" fill="rgb(250,192,54)" fg:x="25" fg:w="1"/><text x="2.2185%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1.9685%" y="389" width="0.0787%" height="15" fill="rgb(218,98,20)" fg:x="25" fg:w="1"/><text x="2.2185%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="1.7323%" y="485" width="0.3937%" height="15" fill="rgb(230,176,47)" fg:x="22" fg:w="5"/><text x="1.9823%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.31%)</title><rect x="1.8110%" y="469" width="0.3150%" height="15" fill="rgb(244,2,33)" fg:x="23" fg:w="4"/><text x="2.0610%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="1.8898%" y="453" width="0.2362%" height="15" fill="rgb(231,100,17)" fg:x="24" fg:w="3"/><text x="2.1398%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="1.9685%" y="437" width="0.1575%" height="15" fill="rgb(245,23,12)" fg:x="25" fg:w="2"/><text x="2.2185%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0472%" y="421" width="0.0787%" height="15" fill="rgb(249,55,22)" fg:x="26" fg:w="1"/><text x="2.2972%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.47%)</title><rect x="1.7323%" y="501" width="0.4724%" height="15" fill="rgb(207,134,9)" fg:x="22" fg:w="6"/><text x="1.9823%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="2.1260%" y="485" width="0.0787%" height="15" fill="rgb(218,134,0)" fg:x="27" fg:w="1"/><text x="2.3760%" y="495.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.34%)</title><rect x="0.9449%" y="629" width="1.3386%" height="15" fill="rgb(213,212,33)" fg:x="12" fg:w="17"/><text x="1.1949%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (17 samples, 1.34%)</title><rect x="0.9449%" y="613" width="1.3386%" height="15" fill="rgb(252,106,18)" fg:x="12" fg:w="17"/><text x="1.1949%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (16 samples, 1.26%)</title><rect x="1.0236%" y="597" width="1.2598%" height="15" fill="rgb(208,126,42)" fg:x="13" fg:w="16"/><text x="1.2736%" y="607.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (16 samples, 1.26%)</title><rect x="1.0236%" y="581" width="1.2598%" height="15" fill="rgb(246,175,29)" fg:x="13" fg:w="16"/><text x="1.2736%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.63%)</title><rect x="1.6535%" y="565" width="0.6299%" height="15" fill="rgb(215,13,50)" fg:x="21" fg:w="8"/><text x="1.9035%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="1.6535%" y="549" width="0.6299%" height="15" fill="rgb(216,172,15)" fg:x="21" fg:w="8"/><text x="1.9035%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="1.6535%" y="533" width="0.6299%" height="15" fill="rgb(212,103,13)" fg:x="21" fg:w="8"/><text x="1.9035%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="1.7323%" y="517" width="0.5512%" height="15" fill="rgb(231,171,36)" fg:x="22" fg:w="7"/><text x="1.9823%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.2047%" y="501" width="0.0787%" height="15" fill="rgb(250,123,20)" fg:x="28" fg:w="1"/><text x="2.4547%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3622%" y="597" width="0.0787%" height="15" fill="rgb(212,53,50)" fg:x="30" fg:w="1"/><text x="2.6122%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="2.3622%" y="613" width="0.1575%" height="15" fill="rgb(243,54,12)" fg:x="30" fg:w="2"/><text x="2.6122%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="2.4409%" y="597" width="0.0787%" height="15" fill="rgb(234,101,34)" fg:x="31" fg:w="1"/><text x="2.6909%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="2.4409%" y="581" width="0.0787%" height="15" fill="rgb(254,67,22)" fg:x="31" fg:w="1"/><text x="2.6909%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="2.4409%" y="565" width="0.0787%" height="15" fill="rgb(250,35,47)" fg:x="31" fg:w="1"/><text x="2.6909%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.4409%" y="549" width="0.0787%" height="15" fill="rgb(226,126,38)" fg:x="31" fg:w="1"/><text x="2.6909%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.4409%" y="533" width="0.0787%" height="15" fill="rgb(216,138,53)" fg:x="31" fg:w="1"/><text x="2.6909%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.4409%" y="517" width="0.0787%" height="15" fill="rgb(246,199,43)" fg:x="31" fg:w="1"/><text x="2.6909%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.4409%" y="501" width="0.0787%" height="15" fill="rgb(232,125,11)" fg:x="31" fg:w="1"/><text x="2.6909%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.4409%" y="485" width="0.0787%" height="15" fill="rgb(218,219,45)" fg:x="31" fg:w="1"/><text x="2.6909%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.4409%" y="469" width="0.0787%" height="15" fill="rgb(216,102,54)" fg:x="31" fg:w="1"/><text x="2.6909%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4409%" y="453" width="0.0787%" height="15" fill="rgb(250,228,7)" fg:x="31" fg:w="1"/><text x="2.6909%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.5197%" y="597" width="0.0787%" height="15" fill="rgb(226,125,25)" fg:x="32" fg:w="1"/><text x="2.7697%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5197%" y="581" width="0.0787%" height="15" fill="rgb(224,165,27)" fg:x="32" fg:w="1"/><text x="2.7697%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5197%" y="565" width="0.0787%" height="15" fill="rgb(233,86,3)" fg:x="32" fg:w="1"/><text x="2.7697%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5197%" y="549" width="0.0787%" height="15" fill="rgb(228,116,20)" fg:x="32" fg:w="1"/><text x="2.7697%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.5197%" y="533" width="0.0787%" height="15" fill="rgb(209,192,17)" fg:x="32" fg:w="1"/><text x="2.7697%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.5197%" y="517" width="0.0787%" height="15" fill="rgb(224,88,34)" fg:x="32" fg:w="1"/><text x="2.7697%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.5197%" y="501" width="0.0787%" height="15" fill="rgb(233,38,6)" fg:x="32" fg:w="1"/><text x="2.7697%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5197%" y="485" width="0.0787%" height="15" fill="rgb(212,59,30)" fg:x="32" fg:w="1"/><text x="2.7697%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5197%" y="469" width="0.0787%" height="15" fill="rgb(213,80,3)" fg:x="32" fg:w="1"/><text x="2.7697%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.5197%" y="453" width="0.0787%" height="15" fill="rgb(251,178,7)" fg:x="32" fg:w="1"/><text x="2.7697%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.5197%" y="437" width="0.0787%" height="15" fill="rgb(213,154,26)" fg:x="32" fg:w="1"/><text x="2.7697%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.5197%" y="421" width="0.0787%" height="15" fill="rgb(238,165,49)" fg:x="32" fg:w="1"/><text x="2.7697%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.5197%" y="405" width="0.0787%" height="15" fill="rgb(248,91,46)" fg:x="32" fg:w="1"/><text x="2.7697%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5197%" y="389" width="0.0787%" height="15" fill="rgb(244,21,52)" fg:x="32" fg:w="1"/><text x="2.7697%" y="399.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.5984%" y="597" width="0.0787%" height="15" fill="rgb(247,122,20)" fg:x="33" fg:w="1"/><text x="2.8484%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5984%" y="581" width="0.0787%" height="15" fill="rgb(218,27,9)" fg:x="33" fg:w="1"/><text x="2.8484%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.5984%" y="565" width="0.0787%" height="15" fill="rgb(246,7,6)" fg:x="33" fg:w="1"/><text x="2.8484%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.55%)</title><rect x="2.2835%" y="629" width="0.5512%" height="15" fill="rgb(227,135,54)" fg:x="29" fg:w="7"/><text x="2.5335%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.31%)</title><rect x="2.5197%" y="613" width="0.3150%" height="15" fill="rgb(247,14,11)" fg:x="32" fg:w="4"/><text x="2.7697%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="2.6772%" y="597" width="0.1575%" height="15" fill="rgb(206,149,34)" fg:x="34" fg:w="2"/><text x="2.9272%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.6772%" y="581" width="0.1575%" height="15" fill="rgb(227,228,4)" fg:x="34" fg:w="2"/><text x="2.9272%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="2.6772%" y="565" width="0.1575%" height="15" fill="rgb(238,218,28)" fg:x="34" fg:w="2"/><text x="2.9272%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="2.6772%" y="549" width="0.1575%" height="15" fill="rgb(252,86,40)" fg:x="34" fg:w="2"/><text x="2.9272%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.7559%" y="533" width="0.0787%" height="15" fill="rgb(251,225,11)" fg:x="35" fg:w="1"/><text x="3.0059%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.7559%" y="517" width="0.0787%" height="15" fill="rgb(206,46,49)" fg:x="35" fg:w="1"/><text x="3.0059%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="2.7559%" y="501" width="0.0787%" height="15" fill="rgb(245,128,24)" fg:x="35" fg:w="1"/><text x="3.0059%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.7559%" y="485" width="0.0787%" height="15" fill="rgb(219,177,34)" fg:x="35" fg:w="1"/><text x="3.0059%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7559%" y="469" width="0.0787%" height="15" fill="rgb(218,60,48)" fg:x="35" fg:w="1"/><text x="3.0059%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.7559%" y="453" width="0.0787%" height="15" fill="rgb(221,11,5)" fg:x="35" fg:w="1"/><text x="3.0059%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.8346%" y="565" width="0.0787%" height="15" fill="rgb(220,148,13)" fg:x="36" fg:w="1"/><text x="3.0846%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.8346%" y="549" width="0.0787%" height="15" fill="rgb(210,16,3)" fg:x="36" fg:w="1"/><text x="3.0846%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.8346%" y="533" width="0.0787%" height="15" fill="rgb(236,80,2)" fg:x="36" fg:w="1"/><text x="3.0846%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8346%" y="517" width="0.0787%" height="15" fill="rgb(239,129,19)" fg:x="36" fg:w="1"/><text x="3.0846%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8346%" y="501" width="0.0787%" height="15" fill="rgb(220,106,35)" fg:x="36" fg:w="1"/><text x="3.0846%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8346%" y="485" width="0.0787%" height="15" fill="rgb(252,139,45)" fg:x="36" fg:w="1"/><text x="3.0846%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8346%" y="469" width="0.0787%" height="15" fill="rgb(229,8,36)" fg:x="36" fg:w="1"/><text x="3.0846%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="2.8346%" y="453" width="0.0787%" height="15" fill="rgb(230,126,33)" fg:x="36" fg:w="1"/><text x="3.0846%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8346%" y="437" width="0.0787%" height="15" fill="rgb(239,140,21)" fg:x="36" fg:w="1"/><text x="3.0846%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8346%" y="421" width="0.0787%" height="15" fill="rgb(254,104,9)" fg:x="36" fg:w="1"/><text x="3.0846%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8346%" y="405" width="0.0787%" height="15" fill="rgb(239,52,14)" fg:x="36" fg:w="1"/><text x="3.0846%" y="415.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="2.8346%" y="597" width="0.1575%" height="15" fill="rgb(208,227,44)" fg:x="36" fg:w="2"/><text x="3.0846%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="2.8346%" y="581" width="0.1575%" height="15" fill="rgb(246,18,19)" fg:x="36" fg:w="2"/><text x="3.0846%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="2.9134%" y="565" width="0.0787%" height="15" fill="rgb(235,228,25)" fg:x="37" fg:w="1"/><text x="3.1634%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="2.9134%" y="549" width="0.0787%" height="15" fill="rgb(240,156,20)" fg:x="37" fg:w="1"/><text x="3.1634%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="2.9134%" y="533" width="0.0787%" height="15" fill="rgb(224,8,20)" fg:x="37" fg:w="1"/><text x="3.1634%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.9134%" y="517" width="0.0787%" height="15" fill="rgb(214,12,52)" fg:x="37" fg:w="1"/><text x="3.1634%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="2.8346%" y="629" width="0.2362%" height="15" fill="rgb(211,220,47)" fg:x="36" fg:w="3"/><text x="3.0846%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="2.8346%" y="613" width="0.2362%" height="15" fill="rgb(250,173,5)" fg:x="36" fg:w="3"/><text x="3.0846%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="2.9921%" y="597" width="0.0787%" height="15" fill="rgb(250,125,52)" fg:x="38" fg:w="1"/><text x="3.2421%" y="607.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.0709%" y="629" width="0.0787%" height="15" fill="rgb(209,133,18)" fg:x="39" fg:w="1"/><text x="3.3209%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.0709%" y="613" width="0.0787%" height="15" fill="rgb(216,173,22)" fg:x="39" fg:w="1"/><text x="3.3209%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.0709%" y="597" width="0.0787%" height="15" fill="rgb(205,3,22)" fg:x="39" fg:w="1"/><text x="3.3209%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.0709%" y="581" width="0.0787%" height="15" fill="rgb(248,22,20)" fg:x="39" fg:w="1"/><text x="3.3209%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0709%" y="565" width="0.0787%" height="15" fill="rgb(233,6,29)" fg:x="39" fg:w="1"/><text x="3.3209%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0709%" y="549" width="0.0787%" height="15" fill="rgb(240,22,54)" fg:x="39" fg:w="1"/><text x="3.3209%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0709%" y="533" width="0.0787%" height="15" fill="rgb(231,133,32)" fg:x="39" fg:w="1"/><text x="3.3209%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0709%" y="517" width="0.0787%" height="15" fill="rgb(248,193,4)" fg:x="39" fg:w="1"/><text x="3.3209%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.0709%" y="501" width="0.0787%" height="15" fill="rgb(211,178,46)" fg:x="39" fg:w="1"/><text x="3.3209%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0709%" y="485" width="0.0787%" height="15" fill="rgb(224,5,42)" fg:x="39" fg:w="1"/><text x="3.3209%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0709%" y="469" width="0.0787%" height="15" fill="rgb(239,176,25)" fg:x="39" fg:w="1"/><text x="3.3209%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0709%" y="453" width="0.0787%" height="15" fill="rgb(245,187,50)" fg:x="39" fg:w="1"/><text x="3.3209%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0709%" y="437" width="0.0787%" height="15" fill="rgb(248,24,15)" fg:x="39" fg:w="1"/><text x="3.3209%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0709%" y="421" width="0.0787%" height="15" fill="rgb(205,166,13)" fg:x="39" fg:w="1"/><text x="3.3209%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2283%" y="405" width="0.0787%" height="15" fill="rgb(208,114,23)" fg:x="41" fg:w="1"/><text x="3.4783%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2283%" y="389" width="0.0787%" height="15" fill="rgb(239,127,18)" fg:x="41" fg:w="1"/><text x="3.4783%" y="399.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="3.1496%" y="565" width="0.2362%" height="15" fill="rgb(219,154,28)" fg:x="40" fg:w="3"/><text x="3.3996%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="3.1496%" y="549" width="0.2362%" height="15" fill="rgb(225,157,23)" fg:x="40" fg:w="3"/><text x="3.3996%" y="559.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="3.1496%" y="533" width="0.2362%" height="15" fill="rgb(219,8,6)" fg:x="40" fg:w="3"/><text x="3.3996%" y="543.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="3.1496%" y="517" width="0.2362%" height="15" fill="rgb(212,47,6)" fg:x="40" fg:w="3"/><text x="3.3996%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="3.1496%" y="501" width="0.2362%" height="15" fill="rgb(224,190,4)" fg:x="40" fg:w="3"/><text x="3.3996%" y="511.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="3.1496%" y="485" width="0.2362%" height="15" fill="rgb(239,183,29)" fg:x="40" fg:w="3"/><text x="3.3996%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="3.1496%" y="469" width="0.2362%" height="15" fill="rgb(213,57,7)" fg:x="40" fg:w="3"/><text x="3.3996%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="3.1496%" y="453" width="0.2362%" height="15" fill="rgb(216,148,1)" fg:x="40" fg:w="3"/><text x="3.3996%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.2283%" y="437" width="0.1575%" height="15" fill="rgb(236,182,29)" fg:x="41" fg:w="2"/><text x="3.4783%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.2283%" y="421" width="0.1575%" height="15" fill="rgb(244,120,48)" fg:x="41" fg:w="2"/><text x="3.4783%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3071%" y="405" width="0.0787%" height="15" fill="rgb(206,71,34)" fg:x="42" fg:w="1"/><text x="3.5571%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3071%" y="389" width="0.0787%" height="15" fill="rgb(242,32,6)" fg:x="42" fg:w="1"/><text x="3.5571%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.3071%" y="373" width="0.0787%" height="15" fill="rgb(241,35,3)" fg:x="42" fg:w="1"/><text x="3.5571%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.3071%" y="357" width="0.0787%" height="15" fill="rgb(222,62,19)" fg:x="42" fg:w="1"/><text x="3.5571%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.3071%" y="341" width="0.0787%" height="15" fill="rgb(223,110,41)" fg:x="42" fg:w="1"/><text x="3.5571%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.3071%" y="325" width="0.0787%" height="15" fill="rgb(208,224,4)" fg:x="42" fg:w="1"/><text x="3.5571%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.3071%" y="309" width="0.0787%" height="15" fill="rgb(241,137,19)" fg:x="42" fg:w="1"/><text x="3.5571%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.3071%" y="293" width="0.0787%" height="15" fill="rgb(244,24,17)" fg:x="42" fg:w="1"/><text x="3.5571%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.3071%" y="277" width="0.0787%" height="15" fill="rgb(245,178,49)" fg:x="42" fg:w="1"/><text x="3.5571%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.3071%" y="261" width="0.0787%" height="15" fill="rgb(219,160,38)" fg:x="42" fg:w="1"/><text x="3.5571%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.3071%" y="245" width="0.0787%" height="15" fill="rgb(228,137,14)" fg:x="42" fg:w="1"/><text x="3.5571%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3071%" y="229" width="0.0787%" height="15" fill="rgb(237,134,11)" fg:x="42" fg:w="1"/><text x="3.5571%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.3858%" y="549" width="0.1575%" height="15" fill="rgb(211,126,44)" fg:x="43" fg:w="2"/><text x="3.6358%" y="559.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.3858%" y="533" width="0.1575%" height="15" fill="rgb(226,171,33)" fg:x="43" fg:w="2"/><text x="3.6358%" y="543.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.3858%" y="517" width="0.1575%" height="15" fill="rgb(253,99,13)" fg:x="43" fg:w="2"/><text x="3.6358%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.3858%" y="501" width="0.1575%" height="15" fill="rgb(244,48,7)" fg:x="43" fg:w="2"/><text x="3.6358%" y="511.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.3858%" y="485" width="0.1575%" height="15" fill="rgb(244,217,54)" fg:x="43" fg:w="2"/><text x="3.6358%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.3858%" y="469" width="0.1575%" height="15" fill="rgb(224,15,18)" fg:x="43" fg:w="2"/><text x="3.6358%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4646%" y="453" width="0.0787%" height="15" fill="rgb(244,99,12)" fg:x="44" fg:w="1"/><text x="3.7146%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4646%" y="437" width="0.0787%" height="15" fill="rgb(233,226,8)" fg:x="44" fg:w="1"/><text x="3.7146%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4646%" y="421" width="0.0787%" height="15" fill="rgb(229,211,3)" fg:x="44" fg:w="1"/><text x="3.7146%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4646%" y="405" width="0.0787%" height="15" fill="rgb(216,140,21)" fg:x="44" fg:w="1"/><text x="3.7146%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.4646%" y="389" width="0.0787%" height="15" fill="rgb(234,122,30)" fg:x="44" fg:w="1"/><text x="3.7146%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.4646%" y="373" width="0.0787%" height="15" fill="rgb(236,25,46)" fg:x="44" fg:w="1"/><text x="3.7146%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.4646%" y="357" width="0.0787%" height="15" fill="rgb(217,52,54)" fg:x="44" fg:w="1"/><text x="3.7146%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4646%" y="341" width="0.0787%" height="15" fill="rgb(222,29,26)" fg:x="44" fg:w="1"/><text x="3.7146%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4646%" y="325" width="0.0787%" height="15" fill="rgb(216,177,29)" fg:x="44" fg:w="1"/><text x="3.7146%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.4646%" y="309" width="0.0787%" height="15" fill="rgb(247,136,51)" fg:x="44" fg:w="1"/><text x="3.7146%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.4646%" y="293" width="0.0787%" height="15" fill="rgb(231,47,47)" fg:x="44" fg:w="1"/><text x="3.7146%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.4646%" y="277" width="0.0787%" height="15" fill="rgb(211,192,36)" fg:x="44" fg:w="1"/><text x="3.7146%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.4646%" y="261" width="0.0787%" height="15" fill="rgb(229,156,32)" fg:x="44" fg:w="1"/><text x="3.7146%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4646%" y="245" width="0.0787%" height="15" fill="rgb(248,213,20)" fg:x="44" fg:w="1"/><text x="3.7146%" y="255.50"></text></g><g><title>plugins_core::build::Build::leads_to (3 samples, 0.24%)</title><rect x="3.3858%" y="565" width="0.2362%" height="15" fill="rgb(217,64,7)" fg:x="43" fg:w="3"/><text x="3.6358%" y="575.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="3.5433%" y="549" width="0.0787%" height="15" fill="rgb(232,142,8)" fg:x="45" fg:w="1"/><text x="3.7933%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.5433%" y="533" width="0.0787%" height="15" fill="rgb(224,92,44)" fg:x="45" fg:w="1"/><text x="3.7933%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.5433%" y="517" width="0.0787%" height="15" fill="rgb(214,169,17)" fg:x="45" fg:w="1"/><text x="3.7933%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.5433%" y="501" width="0.0787%" height="15" fill="rgb(210,59,37)" fg:x="45" fg:w="1"/><text x="3.7933%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.5433%" y="485" width="0.0787%" height="15" fill="rgb(214,116,48)" fg:x="45" fg:w="1"/><text x="3.7933%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.5433%" y="469" width="0.0787%" height="15" fill="rgb(244,191,6)" fg:x="45" fg:w="1"/><text x="3.7933%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5433%" y="453" width="0.0787%" height="15" fill="rgb(241,50,52)" fg:x="45" fg:w="1"/><text x="3.7933%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5433%" y="437" width="0.0787%" height="15" fill="rgb(236,75,39)" fg:x="45" fg:w="1"/><text x="3.7933%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5433%" y="421" width="0.0787%" height="15" fill="rgb(236,99,0)" fg:x="45" fg:w="1"/><text x="3.7933%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5433%" y="405" width="0.0787%" height="15" fill="rgb(207,202,15)" fg:x="45" fg:w="1"/><text x="3.7933%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5433%" y="389" width="0.0787%" height="15" fill="rgb(233,207,14)" fg:x="45" fg:w="1"/><text x="3.7933%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.55%)</title><rect x="3.1496%" y="613" width="0.5512%" height="15" fill="rgb(226,27,51)" fg:x="40" fg:w="7"/><text x="3.3996%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="3.1496%" y="597" width="0.5512%" height="15" fill="rgb(206,104,42)" fg:x="40" fg:w="7"/><text x="3.3996%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.55%)</title><rect x="3.1496%" y="581" width="0.5512%" height="15" fill="rgb(212,225,4)" fg:x="40" fg:w="7"/><text x="3.3996%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.6220%" y="565" width="0.0787%" height="15" fill="rgb(233,96,42)" fg:x="46" fg:w="1"/><text x="3.8720%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.6220%" y="549" width="0.0787%" height="15" fill="rgb(229,21,32)" fg:x="46" fg:w="1"/><text x="3.8720%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.6220%" y="533" width="0.0787%" height="15" fill="rgb(226,216,24)" fg:x="46" fg:w="1"/><text x="3.8720%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.6220%" y="517" width="0.0787%" height="15" fill="rgb(221,163,17)" fg:x="46" fg:w="1"/><text x="3.8720%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6220%" y="501" width="0.0787%" height="15" fill="rgb(216,216,42)" fg:x="46" fg:w="1"/><text x="3.8720%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6220%" y="485" width="0.0787%" height="15" fill="rgb(240,118,7)" fg:x="46" fg:w="1"/><text x="3.8720%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6220%" y="469" width="0.0787%" height="15" fill="rgb(221,67,37)" fg:x="46" fg:w="1"/><text x="3.8720%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6220%" y="453" width="0.0787%" height="15" fill="rgb(241,32,44)" fg:x="46" fg:w="1"/><text x="3.8720%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.6220%" y="437" width="0.0787%" height="15" fill="rgb(235,204,43)" fg:x="46" fg:w="1"/><text x="3.8720%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6220%" y="421" width="0.0787%" height="15" fill="rgb(213,116,10)" fg:x="46" fg:w="1"/><text x="3.8720%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6220%" y="405" width="0.0787%" height="15" fill="rgb(239,15,48)" fg:x="46" fg:w="1"/><text x="3.8720%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6220%" y="389" width="0.0787%" height="15" fill="rgb(207,123,36)" fg:x="46" fg:w="1"/><text x="3.8720%" y="399.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.7008%" y="581" width="0.0787%" height="15" fill="rgb(209,103,30)" fg:x="47" fg:w="1"/><text x="3.9508%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.7008%" y="565" width="0.0787%" height="15" fill="rgb(238,100,19)" fg:x="47" fg:w="1"/><text x="3.9508%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="3.7795%" y="533" width="0.1575%" height="15" fill="rgb(244,30,14)" fg:x="48" fg:w="2"/><text x="4.0295%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.7795%" y="517" width="0.1575%" height="15" fill="rgb(249,174,6)" fg:x="48" fg:w="2"/><text x="4.0295%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.7795%" y="501" width="0.1575%" height="15" fill="rgb(235,213,41)" fg:x="48" fg:w="2"/><text x="4.0295%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.8583%" y="485" width="0.0787%" height="15" fill="rgb(213,118,6)" fg:x="49" fg:w="1"/><text x="4.1083%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.8583%" y="469" width="0.0787%" height="15" fill="rgb(235,44,51)" fg:x="49" fg:w="1"/><text x="4.1083%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.8583%" y="453" width="0.0787%" height="15" fill="rgb(217,9,53)" fg:x="49" fg:w="1"/><text x="4.1083%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.8583%" y="437" width="0.0787%" height="15" fill="rgb(237,172,34)" fg:x="49" fg:w="1"/><text x="4.1083%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.8583%" y="421" width="0.0787%" height="15" fill="rgb(206,206,11)" fg:x="49" fg:w="1"/><text x="4.1083%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="3.9370%" y="517" width="0.2362%" height="15" fill="rgb(214,149,29)" fg:x="50" fg:w="3"/><text x="4.1870%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0945%" y="501" width="0.0787%" height="15" fill="rgb(208,123,3)" fg:x="52" fg:w="1"/><text x="4.3445%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0945%" y="485" width="0.0787%" height="15" fill="rgb(229,126,4)" fg:x="52" fg:w="1"/><text x="4.3445%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0945%" y="469" width="0.0787%" height="15" fill="rgb(222,92,36)" fg:x="52" fg:w="1"/><text x="4.3445%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.1732%" y="501" width="0.0787%" height="15" fill="rgb(216,39,41)" fg:x="53" fg:w="1"/><text x="4.4232%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.1732%" y="485" width="0.0787%" height="15" fill="rgb(253,127,28)" fg:x="53" fg:w="1"/><text x="4.4232%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.2520%" y="501" width="0.1575%" height="15" fill="rgb(249,152,51)" fg:x="54" fg:w="2"/><text x="4.5020%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3307%" y="485" width="0.0787%" height="15" fill="rgb(209,123,42)" fg:x="55" fg:w="1"/><text x="4.5807%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4094%" y="501" width="0.0787%" height="15" fill="rgb(241,118,22)" fg:x="56" fg:w="1"/><text x="4.6594%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4094%" y="485" width="0.0787%" height="15" fill="rgb(208,25,7)" fg:x="56" fg:w="1"/><text x="4.6594%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4094%" y="469" width="0.0787%" height="15" fill="rgb(243,144,39)" fg:x="56" fg:w="1"/><text x="4.6594%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="4.1732%" y="517" width="0.3937%" height="15" fill="rgb(250,50,5)" fg:x="53" fg:w="5"/><text x="4.4232%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4882%" y="501" width="0.0787%" height="15" fill="rgb(207,67,11)" fg:x="57" fg:w="1"/><text x="4.7382%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4882%" y="485" width="0.0787%" height="15" fill="rgb(245,204,40)" fg:x="57" fg:w="1"/><text x="4.7382%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4882%" y="469" width="0.0787%" height="15" fill="rgb(238,228,24)" fg:x="57" fg:w="1"/><text x="4.7382%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.02%)</title><rect x="3.7795%" y="549" width="1.0236%" height="15" fill="rgb(217,116,22)" fg:x="48" fg:w="13"/><text x="4.0295%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.87%)</title><rect x="3.9370%" y="533" width="0.8661%" height="15" fill="rgb(234,98,12)" fg:x="50" fg:w="11"/><text x="4.1870%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="4.5669%" y="517" width="0.2362%" height="15" fill="rgb(242,170,50)" fg:x="58" fg:w="3"/><text x="4.8169%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.6457%" y="501" width="0.1575%" height="15" fill="rgb(235,7,5)" fg:x="59" fg:w="2"/><text x="4.8957%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7244%" y="485" width="0.0787%" height="15" fill="rgb(241,114,28)" fg:x="60" fg:w="1"/><text x="4.9744%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8031%" y="469" width="0.0787%" height="15" fill="rgb(246,112,42)" fg:x="61" fg:w="1"/><text x="5.0531%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.8819%" y="437" width="0.0787%" height="15" fill="rgb(248,228,14)" fg:x="62" fg:w="1"/><text x="5.1319%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="4.8819%" y="469" width="0.1575%" height="15" fill="rgb(208,133,18)" fg:x="62" fg:w="2"/><text x="5.1319%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="4.8819%" y="453" width="0.1575%" height="15" fill="rgb(207,35,49)" fg:x="62" fg:w="2"/><text x="5.1319%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.9606%" y="437" width="0.0787%" height="15" fill="rgb(205,68,36)" fg:x="63" fg:w="1"/><text x="5.2106%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="4.8031%" y="549" width="0.3150%" height="15" fill="rgb(245,62,40)" fg:x="61" fg:w="4"/><text x="5.0531%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="4.8031%" y="533" width="0.3150%" height="15" fill="rgb(228,27,24)" fg:x="61" fg:w="4"/><text x="5.0531%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="4.8031%" y="517" width="0.3150%" height="15" fill="rgb(253,19,12)" fg:x="61" fg:w="4"/><text x="5.0531%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="4.8031%" y="501" width="0.3150%" height="15" fill="rgb(232,28,20)" fg:x="61" fg:w="4"/><text x="5.0531%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="4.8031%" y="485" width="0.3150%" height="15" fill="rgb(218,35,51)" fg:x="61" fg:w="4"/><text x="5.0531%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.0394%" y="469" width="0.0787%" height="15" fill="rgb(212,90,40)" fg:x="64" fg:w="1"/><text x="5.2894%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1181%" y="501" width="0.0787%" height="15" fill="rgb(220,172,12)" fg:x="65" fg:w="1"/><text x="5.3681%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.1181%" y="485" width="0.0787%" height="15" fill="rgb(226,159,20)" fg:x="65" fg:w="1"/><text x="5.3681%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1181%" y="469" width="0.0787%" height="15" fill="rgb(234,205,16)" fg:x="65" fg:w="1"/><text x="5.3681%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1181%" y="453" width="0.0787%" height="15" fill="rgb(207,9,39)" fg:x="65" fg:w="1"/><text x="5.3681%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.1969%" y="453" width="0.0787%" height="15" fill="rgb(249,143,15)" fg:x="66" fg:w="1"/><text x="5.4469%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1969%" y="437" width="0.0787%" height="15" fill="rgb(253,133,29)" fg:x="66" fg:w="1"/><text x="5.4469%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.1969%" y="421" width="0.0787%" height="15" fill="rgb(221,187,0)" fg:x="66" fg:w="1"/><text x="5.4469%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1969%" y="405" width="0.0787%" height="15" fill="rgb(205,204,26)" fg:x="66" fg:w="1"/><text x="5.4469%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.2756%" y="437" width="0.0787%" height="15" fill="rgb(224,68,54)" fg:x="67" fg:w="1"/><text x="5.5256%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="5.1969%" y="469" width="0.3150%" height="15" fill="rgb(209,67,4)" fg:x="66" fg:w="4"/><text x="5.4469%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.2756%" y="453" width="0.2362%" height="15" fill="rgb(228,229,18)" fg:x="67" fg:w="3"/><text x="5.5256%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.3543%" y="437" width="0.1575%" height="15" fill="rgb(231,89,13)" fg:x="68" fg:w="2"/><text x="5.6043%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.3543%" y="421" width="0.1575%" height="15" fill="rgb(210,182,18)" fg:x="68" fg:w="2"/><text x="5.6043%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.3543%" y="405" width="0.1575%" height="15" fill="rgb(240,105,2)" fg:x="68" fg:w="2"/><text x="5.6043%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.3543%" y="389" width="0.1575%" height="15" fill="rgb(207,170,50)" fg:x="68" fg:w="2"/><text x="5.6043%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.4331%" y="373" width="0.0787%" height="15" fill="rgb(232,133,24)" fg:x="69" fg:w="1"/><text x="5.6831%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4331%" y="357" width="0.0787%" height="15" fill="rgb(235,166,27)" fg:x="69" fg:w="1"/><text x="5.6831%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4331%" y="341" width="0.0787%" height="15" fill="rgb(209,19,13)" fg:x="69" fg:w="1"/><text x="5.6831%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4331%" y="325" width="0.0787%" height="15" fill="rgb(226,79,39)" fg:x="69" fg:w="1"/><text x="5.6831%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.39%)</title><rect x="5.1969%" y="485" width="0.3937%" height="15" fill="rgb(222,163,10)" fg:x="66" fg:w="5"/><text x="5.4469%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.5118%" y="469" width="0.0787%" height="15" fill="rgb(214,44,19)" fg:x="70" fg:w="1"/><text x="5.7618%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5118%" y="453" width="0.0787%" height="15" fill="rgb(210,217,13)" fg:x="70" fg:w="1"/><text x="5.7618%" y="463.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.05%)</title><rect x="3.7008%" y="613" width="2.0472%" height="15" fill="rgb(237,61,54)" fg:x="47" fg:w="26"/><text x="3.9508%" y="623.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (26 samples, 2.05%)</title><rect x="3.7008%" y="597" width="2.0472%" height="15" fill="rgb(226,184,24)" fg:x="47" fg:w="26"/><text x="3.9508%" y="607.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (25 samples, 1.97%)</title><rect x="3.7795%" y="581" width="1.9685%" height="15" fill="rgb(223,226,4)" fg:x="48" fg:w="25"/><text x="4.0295%" y="591.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (25 samples, 1.97%)</title><rect x="3.7795%" y="565" width="1.9685%" height="15" fill="rgb(210,26,41)" fg:x="48" fg:w="25"/><text x="4.0295%" y="575.50">e..</text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.63%)</title><rect x="5.1181%" y="549" width="0.6299%" height="15" fill="rgb(220,221,6)" fg:x="65" fg:w="8"/><text x="5.3681%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="5.1181%" y="533" width="0.6299%" height="15" fill="rgb(225,89,49)" fg:x="65" fg:w="8"/><text x="5.3681%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="5.1181%" y="517" width="0.6299%" height="15" fill="rgb(218,70,45)" fg:x="65" fg:w="8"/><text x="5.3681%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="5.1969%" y="501" width="0.5512%" height="15" fill="rgb(238,166,21)" fg:x="66" fg:w="7"/><text x="5.4469%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.5906%" y="485" width="0.1575%" height="15" fill="rgb(224,141,44)" fg:x="71" fg:w="2"/><text x="5.8406%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.5906%" y="469" width="0.1575%" height="15" fill="rgb(230,12,49)" fg:x="71" fg:w="2"/><text x="5.8406%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.6693%" y="453" width="0.0787%" height="15" fill="rgb(212,174,12)" fg:x="72" fg:w="1"/><text x="5.9193%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7480%" y="501" width="0.0787%" height="15" fill="rgb(246,67,9)" fg:x="73" fg:w="1"/><text x="5.9980%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7480%" y="485" width="0.0787%" height="15" fill="rgb(239,35,23)" fg:x="73" fg:w="1"/><text x="5.9980%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.7480%" y="469" width="0.0787%" height="15" fill="rgb(211,167,0)" fg:x="73" fg:w="1"/><text x="5.9980%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7480%" y="453" width="0.0787%" height="15" fill="rgb(225,119,45)" fg:x="73" fg:w="1"/><text x="5.9980%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.7480%" y="549" width="0.1575%" height="15" fill="rgb(210,162,6)" fg:x="73" fg:w="2"/><text x="5.9980%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.7480%" y="533" width="0.1575%" height="15" fill="rgb(208,118,35)" fg:x="73" fg:w="2"/><text x="5.9980%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.7480%" y="517" width="0.1575%" height="15" fill="rgb(239,4,53)" fg:x="73" fg:w="2"/><text x="5.9980%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.8268%" y="501" width="0.0787%" height="15" fill="rgb(213,130,21)" fg:x="74" fg:w="1"/><text x="6.0768%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8268%" y="485" width="0.0787%" height="15" fill="rgb(235,148,0)" fg:x="74" fg:w="1"/><text x="6.0768%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.8268%" y="469" width="0.0787%" height="15" fill="rgb(244,224,18)" fg:x="74" fg:w="1"/><text x="6.0768%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8268%" y="453" width="0.0787%" height="15" fill="rgb(211,214,4)" fg:x="74" fg:w="1"/><text x="6.0768%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.8268%" y="437" width="0.0787%" height="15" fill="rgb(206,119,25)" fg:x="74" fg:w="1"/><text x="6.0768%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8268%" y="421" width="0.0787%" height="15" fill="rgb(243,93,47)" fg:x="74" fg:w="1"/><text x="6.0768%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.8268%" y="405" width="0.0787%" height="15" fill="rgb(224,194,6)" fg:x="74" fg:w="1"/><text x="6.0768%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8268%" y="389" width="0.0787%" height="15" fill="rgb(243,229,6)" fg:x="74" fg:w="1"/><text x="6.0768%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.8268%" y="373" width="0.0787%" height="15" fill="rgb(207,23,50)" fg:x="74" fg:w="1"/><text x="6.0768%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8268%" y="357" width="0.0787%" height="15" fill="rgb(253,192,32)" fg:x="74" fg:w="1"/><text x="6.0768%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8268%" y="341" width="0.0787%" height="15" fill="rgb(213,21,6)" fg:x="74" fg:w="1"/><text x="6.0768%" y="351.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="5.7480%" y="565" width="0.2362%" height="15" fill="rgb(243,151,13)" fg:x="73" fg:w="3"/><text x="5.9980%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.9055%" y="549" width="0.0787%" height="15" fill="rgb(233,165,41)" fg:x="75" fg:w="1"/><text x="6.1555%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.9055%" y="533" width="0.0787%" height="15" fill="rgb(246,176,45)" fg:x="75" fg:w="1"/><text x="6.1555%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.9055%" y="517" width="0.0787%" height="15" fill="rgb(217,170,52)" fg:x="75" fg:w="1"/><text x="6.1555%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9055%" y="501" width="0.0787%" height="15" fill="rgb(214,203,54)" fg:x="75" fg:w="1"/><text x="6.1555%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.9055%" y="485" width="0.0787%" height="15" fill="rgb(248,215,49)" fg:x="75" fg:w="1"/><text x="6.1555%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9055%" y="469" width="0.0787%" height="15" fill="rgb(208,46,10)" fg:x="75" fg:w="1"/><text x="6.1555%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9055%" y="453" width="0.0787%" height="15" fill="rgb(254,5,31)" fg:x="75" fg:w="1"/><text x="6.1555%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9055%" y="437" width="0.0787%" height="15" fill="rgb(222,104,33)" fg:x="75" fg:w="1"/><text x="6.1555%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.31%)</title><rect x="5.7480%" y="597" width="0.3150%" height="15" fill="rgb(248,49,16)" fg:x="73" fg:w="4"/><text x="5.9980%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (4 samples, 0.31%)</title><rect x="5.7480%" y="581" width="0.3150%" height="15" fill="rgb(232,198,41)" fg:x="73" fg:w="4"/><text x="5.9980%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.9843%" y="565" width="0.0787%" height="15" fill="rgb(214,125,3)" fg:x="76" fg:w="1"/><text x="6.2343%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9843%" y="549" width="0.0787%" height="15" fill="rgb(229,220,28)" fg:x="76" fg:w="1"/><text x="6.2343%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.9843%" y="533" width="0.0787%" height="15" fill="rgb(222,64,37)" fg:x="76" fg:w="1"/><text x="6.2343%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.9843%" y="517" width="0.0787%" height="15" fill="rgb(249,184,13)" fg:x="76" fg:w="1"/><text x="6.2343%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9843%" y="501" width="0.0787%" height="15" fill="rgb(252,176,6)" fg:x="76" fg:w="1"/><text x="6.2343%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0630%" y="501" width="0.0787%" height="15" fill="rgb(228,153,7)" fg:x="77" fg:w="1"/><text x="6.3130%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0630%" y="485" width="0.0787%" height="15" fill="rgb(242,193,5)" fg:x="77" fg:w="1"/><text x="6.3130%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0630%" y="469" width="0.0787%" height="15" fill="rgb(232,140,9)" fg:x="77" fg:w="1"/><text x="6.3130%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0630%" y="453" width="0.0787%" height="15" fill="rgb(213,222,16)" fg:x="77" fg:w="1"/><text x="6.3130%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0630%" y="437" width="0.0787%" height="15" fill="rgb(222,75,50)" fg:x="77" fg:w="1"/><text x="6.3130%" y="447.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.0630%" y="581" width="0.1575%" height="15" fill="rgb(205,180,2)" fg:x="77" fg:w="2"/><text x="6.3130%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.0630%" y="565" width="0.1575%" height="15" fill="rgb(216,34,7)" fg:x="77" fg:w="2"/><text x="6.3130%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="6.0630%" y="549" width="0.1575%" height="15" fill="rgb(253,16,32)" fg:x="77" fg:w="2"/><text x="6.3130%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.0630%" y="533" width="0.1575%" height="15" fill="rgb(208,97,28)" fg:x="77" fg:w="2"/><text x="6.3130%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.0630%" y="517" width="0.1575%" height="15" fill="rgb(225,92,11)" fg:x="77" fg:w="2"/><text x="6.3130%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1417%" y="501" width="0.0787%" height="15" fill="rgb(243,38,12)" fg:x="78" fg:w="1"/><text x="6.3917%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1417%" y="485" width="0.0787%" height="15" fill="rgb(208,139,16)" fg:x="78" fg:w="1"/><text x="6.3917%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1417%" y="469" width="0.0787%" height="15" fill="rgb(227,24,9)" fg:x="78" fg:w="1"/><text x="6.3917%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1417%" y="453" width="0.0787%" height="15" fill="rgb(206,62,11)" fg:x="78" fg:w="1"/><text x="6.3917%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.1417%" y="437" width="0.0787%" height="15" fill="rgb(228,134,27)" fg:x="78" fg:w="1"/><text x="6.3917%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.1417%" y="421" width="0.0787%" height="15" fill="rgb(205,55,33)" fg:x="78" fg:w="1"/><text x="6.3917%" y="431.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.55%)</title><rect x="5.7480%" y="613" width="0.5512%" height="15" fill="rgb(243,75,43)" fg:x="73" fg:w="7"/><text x="5.9980%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="6.0630%" y="597" width="0.2362%" height="15" fill="rgb(223,27,42)" fg:x="77" fg:w="3"/><text x="6.3130%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="6.2205%" y="581" width="0.0787%" height="15" fill="rgb(232,189,33)" fg:x="79" fg:w="1"/><text x="6.4705%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.2205%" y="565" width="0.0787%" height="15" fill="rgb(210,9,39)" fg:x="79" fg:w="1"/><text x="6.4705%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2992%" y="501" width="0.0787%" height="15" fill="rgb(242,85,26)" fg:x="80" fg:w="1"/><text x="6.5492%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2992%" y="485" width="0.0787%" height="15" fill="rgb(248,44,4)" fg:x="80" fg:w="1"/><text x="6.5492%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2992%" y="469" width="0.0787%" height="15" fill="rgb(250,96,46)" fg:x="80" fg:w="1"/><text x="6.5492%" y="479.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="6.2992%" y="613" width="0.1575%" height="15" fill="rgb(229,116,26)" fg:x="80" fg:w="2"/><text x="6.5492%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.2992%" y="597" width="0.1575%" height="15" fill="rgb(246,94,34)" fg:x="80" fg:w="2"/><text x="6.5492%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.2992%" y="581" width="0.1575%" height="15" fill="rgb(251,73,21)" fg:x="80" fg:w="2"/><text x="6.5492%" y="591.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.2992%" y="565" width="0.1575%" height="15" fill="rgb(254,121,25)" fg:x="80" fg:w="2"/><text x="6.5492%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.2992%" y="549" width="0.1575%" height="15" fill="rgb(215,161,49)" fg:x="80" fg:w="2"/><text x="6.5492%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.2992%" y="533" width="0.1575%" height="15" fill="rgb(221,43,13)" fg:x="80" fg:w="2"/><text x="6.5492%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.2992%" y="517" width="0.1575%" height="15" fill="rgb(249,5,37)" fg:x="80" fg:w="2"/><text x="6.5492%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3780%" y="501" width="0.0787%" height="15" fill="rgb(226,25,44)" fg:x="81" fg:w="1"/><text x="6.6280%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3780%" y="485" width="0.0787%" height="15" fill="rgb(238,189,16)" fg:x="81" fg:w="1"/><text x="6.6280%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3780%" y="469" width="0.0787%" height="15" fill="rgb(251,186,8)" fg:x="81" fg:w="1"/><text x="6.6280%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3780%" y="453" width="0.0787%" height="15" fill="rgb(254,34,31)" fg:x="81" fg:w="1"/><text x="6.6280%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.3780%" y="437" width="0.0787%" height="15" fill="rgb(225,215,27)" fg:x="81" fg:w="1"/><text x="6.6280%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3780%" y="421" width="0.0787%" height="15" fill="rgb(221,192,48)" fg:x="81" fg:w="1"/><text x="6.6280%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3780%" y="405" width="0.0787%" height="15" fill="rgb(219,137,20)" fg:x="81" fg:w="1"/><text x="6.6280%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3780%" y="389" width="0.0787%" height="15" fill="rgb(219,84,11)" fg:x="81" fg:w="1"/><text x="6.6280%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3780%" y="373" width="0.0787%" height="15" fill="rgb(224,10,23)" fg:x="81" fg:w="1"/><text x="6.6280%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3780%" y="357" width="0.0787%" height="15" fill="rgb(248,22,39)" fg:x="81" fg:w="1"/><text x="6.6280%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.3780%" y="341" width="0.0787%" height="15" fill="rgb(212,154,20)" fg:x="81" fg:w="1"/><text x="6.6280%" y="351.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.4567%" y="613" width="0.0787%" height="15" fill="rgb(236,199,50)" fg:x="82" fg:w="1"/><text x="6.7067%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.4567%" y="597" width="0.0787%" height="15" fill="rgb(211,9,17)" fg:x="82" fg:w="1"/><text x="6.7067%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.4567%" y="581" width="0.0787%" height="15" fill="rgb(243,216,36)" fg:x="82" fg:w="1"/><text x="6.7067%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.4567%" y="565" width="0.0787%" height="15" fill="rgb(250,2,10)" fg:x="82" fg:w="1"/><text x="6.7067%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4567%" y="549" width="0.0787%" height="15" fill="rgb(226,50,48)" fg:x="82" fg:w="1"/><text x="6.7067%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4567%" y="533" width="0.0787%" height="15" fill="rgb(243,81,16)" fg:x="82" fg:w="1"/><text x="6.7067%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="6.4567%" y="517" width="0.0787%" height="15" fill="rgb(250,14,2)" fg:x="82" fg:w="1"/><text x="6.7067%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4567%" y="501" width="0.0787%" height="15" fill="rgb(233,135,29)" fg:x="82" fg:w="1"/><text x="6.7067%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.5354%" y="597" width="0.0787%" height="15" fill="rgb(224,64,43)" fg:x="83" fg:w="1"/><text x="6.7854%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.5354%" y="581" width="0.0787%" height="15" fill="rgb(238,84,13)" fg:x="83" fg:w="1"/><text x="6.7854%" y="591.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.5354%" y="565" width="0.0787%" height="15" fill="rgb(253,48,26)" fg:x="83" fg:w="1"/><text x="6.7854%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.5354%" y="549" width="0.0787%" height="15" fill="rgb(205,223,31)" fg:x="83" fg:w="1"/><text x="6.7854%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.5354%" y="533" width="0.0787%" height="15" fill="rgb(221,41,32)" fg:x="83" fg:w="1"/><text x="6.7854%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.5354%" y="517" width="0.0787%" height="15" fill="rgb(213,158,31)" fg:x="83" fg:w="1"/><text x="6.7854%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.5354%" y="501" width="0.0787%" height="15" fill="rgb(245,126,43)" fg:x="83" fg:w="1"/><text x="6.7854%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5354%" y="485" width="0.0787%" height="15" fill="rgb(227,7,22)" fg:x="83" fg:w="1"/><text x="6.7854%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.5354%" y="469" width="0.0787%" height="15" fill="rgb(252,90,44)" fg:x="83" fg:w="1"/><text x="6.7854%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5354%" y="453" width="0.0787%" height="15" fill="rgb(253,91,0)" fg:x="83" fg:w="1"/><text x="6.7854%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.5354%" y="437" width="0.0787%" height="15" fill="rgb(252,175,49)" fg:x="83" fg:w="1"/><text x="6.7854%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5354%" y="421" width="0.0787%" height="15" fill="rgb(246,150,1)" fg:x="83" fg:w="1"/><text x="6.7854%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.5354%" y="405" width="0.0787%" height="15" fill="rgb(241,192,25)" fg:x="83" fg:w="1"/><text x="6.7854%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5354%" y="389" width="0.0787%" height="15" fill="rgb(239,187,11)" fg:x="83" fg:w="1"/><text x="6.7854%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.5354%" y="373" width="0.0787%" height="15" fill="rgb(218,202,51)" fg:x="83" fg:w="1"/><text x="6.7854%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.5354%" y="357" width="0.0787%" height="15" fill="rgb(225,176,8)" fg:x="83" fg:w="1"/><text x="6.7854%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6142%" y="533" width="0.0787%" height="15" fill="rgb(219,122,41)" fg:x="84" fg:w="1"/><text x="6.8642%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.6142%" y="549" width="0.1575%" height="15" fill="rgb(248,140,20)" fg:x="84" fg:w="2"/><text x="6.8642%" y="559.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="6.6929%" y="533" width="0.0787%" height="15" fill="rgb(245,41,37)" fg:x="85" fg:w="1"/><text x="6.9429%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.6929%" y="517" width="0.0787%" height="15" fill="rgb(235,82,39)" fg:x="85" fg:w="1"/><text x="6.9429%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.6929%" y="501" width="0.0787%" height="15" fill="rgb(230,108,42)" fg:x="85" fg:w="1"/><text x="6.9429%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7717%" y="501" width="0.0787%" height="15" fill="rgb(215,150,50)" fg:x="86" fg:w="1"/><text x="7.0217%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7717%" y="485" width="0.0787%" height="15" fill="rgb(233,212,5)" fg:x="86" fg:w="1"/><text x="7.0217%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7717%" y="469" width="0.0787%" height="15" fill="rgb(245,80,22)" fg:x="86" fg:w="1"/><text x="7.0217%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7717%" y="453" width="0.0787%" height="15" fill="rgb(238,129,16)" fg:x="86" fg:w="1"/><text x="7.0217%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7717%" y="437" width="0.0787%" height="15" fill="rgb(240,19,0)" fg:x="86" fg:w="1"/><text x="7.0217%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.7717%" y="421" width="0.0787%" height="15" fill="rgb(232,42,35)" fg:x="86" fg:w="1"/><text x="7.0217%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.7717%" y="405" width="0.0787%" height="15" fill="rgb(223,130,24)" fg:x="86" fg:w="1"/><text x="7.0217%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.7717%" y="389" width="0.0787%" height="15" fill="rgb(237,16,22)" fg:x="86" fg:w="1"/><text x="7.0217%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.7717%" y="373" width="0.0787%" height="15" fill="rgb(248,192,20)" fg:x="86" fg:w="1"/><text x="7.0217%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.7717%" y="357" width="0.0787%" height="15" fill="rgb(233,167,2)" fg:x="86" fg:w="1"/><text x="7.0217%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.7717%" y="341" width="0.0787%" height="15" fill="rgb(252,71,44)" fg:x="86" fg:w="1"/><text x="7.0217%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.7717%" y="325" width="0.0787%" height="15" fill="rgb(238,37,47)" fg:x="86" fg:w="1"/><text x="7.0217%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.7717%" y="309" width="0.0787%" height="15" fill="rgb(214,202,54)" fg:x="86" fg:w="1"/><text x="7.0217%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.7717%" y="293" width="0.0787%" height="15" fill="rgb(254,165,40)" fg:x="86" fg:w="1"/><text x="7.0217%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7717%" y="277" width="0.0787%" height="15" fill="rgb(246,173,38)" fg:x="86" fg:w="1"/><text x="7.0217%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="6.8504%" y="501" width="0.0787%" height="15" fill="rgb(215,3,27)" fg:x="87" fg:w="1"/><text x="7.1004%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.8504%" y="485" width="0.0787%" height="15" fill="rgb(239,169,51)" fg:x="87" fg:w="1"/><text x="7.1004%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8504%" y="469" width="0.0787%" height="15" fill="rgb(212,5,25)" fg:x="87" fg:w="1"/><text x="7.1004%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8504%" y="453" width="0.0787%" height="15" fill="rgb(243,45,17)" fg:x="87" fg:w="1"/><text x="7.1004%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8504%" y="437" width="0.0787%" height="15" fill="rgb(242,97,9)" fg:x="87" fg:w="1"/><text x="7.1004%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8504%" y="421" width="0.0787%" height="15" fill="rgb(228,71,31)" fg:x="87" fg:w="1"/><text x="7.1004%" y="431.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (5 samples, 0.39%)</title><rect x="6.6142%" y="581" width="0.3937%" height="15" fill="rgb(252,184,16)" fg:x="84" fg:w="5"/><text x="6.8642%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.39%)</title><rect x="6.6142%" y="565" width="0.3937%" height="15" fill="rgb(236,169,46)" fg:x="84" fg:w="5"/><text x="6.8642%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="6.7717%" y="549" width="0.2362%" height="15" fill="rgb(207,17,47)" fg:x="86" fg:w="3"/><text x="7.0217%" y="559.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="6.7717%" y="533" width="0.2362%" height="15" fill="rgb(206,201,28)" fg:x="86" fg:w="3"/><text x="7.0217%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="6.7717%" y="517" width="0.2362%" height="15" fill="rgb(224,184,23)" fg:x="86" fg:w="3"/><text x="7.0217%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9291%" y="501" width="0.0787%" height="15" fill="rgb(208,139,48)" fg:x="88" fg:w="1"/><text x="7.1791%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9291%" y="485" width="0.0787%" height="15" fill="rgb(208,130,10)" fg:x="88" fg:w="1"/><text x="7.1791%" y="495.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0079%" y="565" width="0.0787%" height="15" fill="rgb(211,213,45)" fg:x="89" fg:w="1"/><text x="7.2579%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0079%" y="549" width="0.0787%" height="15" fill="rgb(235,100,30)" fg:x="89" fg:w="1"/><text x="7.2579%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.0079%" y="533" width="0.0787%" height="15" fill="rgb(206,144,31)" fg:x="89" fg:w="1"/><text x="7.2579%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0079%" y="517" width="0.0787%" height="15" fill="rgb(224,200,26)" fg:x="89" fg:w="1"/><text x="7.2579%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0079%" y="501" width="0.0787%" height="15" fill="rgb(247,104,53)" fg:x="89" fg:w="1"/><text x="7.2579%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0079%" y="485" width="0.0787%" height="15" fill="rgb(220,14,17)" fg:x="89" fg:w="1"/><text x="7.2579%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (51 samples, 4.02%)</title><rect x="3.1496%" y="629" width="4.0157%" height="15" fill="rgb(230,140,40)" fg:x="40" fg:w="51"/><text x="3.3996%" y="639.50">plug..</text></g><g><title>plugins_core::build::Build::occupying (8 samples, 0.63%)</title><rect x="6.5354%" y="613" width="0.6299%" height="15" fill="rgb(229,2,41)" fg:x="83" fg:w="8"/><text x="6.7854%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (7 samples, 0.55%)</title><rect x="6.6142%" y="597" width="0.5512%" height="15" fill="rgb(232,89,16)" fg:x="84" fg:w="7"/><text x="6.8642%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="7.0079%" y="581" width="0.1575%" height="15" fill="rgb(247,59,52)" fg:x="89" fg:w="2"/><text x="7.2579%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0866%" y="565" width="0.0787%" height="15" fill="rgb(226,110,21)" fg:x="90" fg:w="1"/><text x="7.3366%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0866%" y="549" width="0.0787%" height="15" fill="rgb(224,176,43)" fg:x="90" fg:w="1"/><text x="7.3366%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.1654%" y="533" width="0.0787%" height="15" fill="rgb(221,73,6)" fg:x="91" fg:w="1"/><text x="7.4154%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.1654%" y="517" width="0.0787%" height="15" fill="rgb(232,78,19)" fg:x="91" fg:w="1"/><text x="7.4154%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1654%" y="501" width="0.0787%" height="15" fill="rgb(233,112,48)" fg:x="91" fg:w="1"/><text x="7.4154%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1654%" y="485" width="0.0787%" height="15" fill="rgb(243,131,47)" fg:x="91" fg:w="1"/><text x="7.4154%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1654%" y="469" width="0.0787%" height="15" fill="rgb(226,51,1)" fg:x="91" fg:w="1"/><text x="7.4154%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1654%" y="453" width="0.0787%" height="15" fill="rgb(247,58,7)" fg:x="91" fg:w="1"/><text x="7.4154%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.1654%" y="437" width="0.0787%" height="15" fill="rgb(209,7,32)" fg:x="91" fg:w="1"/><text x="7.4154%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1654%" y="421" width="0.0787%" height="15" fill="rgb(209,39,41)" fg:x="91" fg:w="1"/><text x="7.4154%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.1654%" y="405" width="0.0787%" height="15" fill="rgb(226,182,46)" fg:x="91" fg:w="1"/><text x="7.4154%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1654%" y="389" width="0.0787%" height="15" fill="rgb(230,219,10)" fg:x="91" fg:w="1"/><text x="7.4154%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="7.2441%" y="501" width="0.0787%" height="15" fill="rgb(227,175,30)" fg:x="92" fg:w="1"/><text x="7.4941%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.2441%" y="485" width="0.0787%" height="15" fill="rgb(217,2,50)" fg:x="92" fg:w="1"/><text x="7.4941%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2441%" y="469" width="0.0787%" height="15" fill="rgb(229,160,0)" fg:x="92" fg:w="1"/><text x="7.4941%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2441%" y="453" width="0.0787%" height="15" fill="rgb(207,78,37)" fg:x="92" fg:w="1"/><text x="7.4941%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2441%" y="437" width="0.0787%" height="15" fill="rgb(225,57,0)" fg:x="92" fg:w="1"/><text x="7.4941%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2441%" y="421" width="0.0787%" height="15" fill="rgb(232,154,2)" fg:x="92" fg:w="1"/><text x="7.4941%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.1654%" y="597" width="0.2362%" height="15" fill="rgb(241,212,25)" fg:x="91" fg:w="3"/><text x="7.4154%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="7.1654%" y="581" width="0.2362%" height="15" fill="rgb(226,69,20)" fg:x="91" fg:w="3"/><text x="7.4154%" y="591.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="7.1654%" y="565" width="0.2362%" height="15" fill="rgb(247,184,54)" fg:x="91" fg:w="3"/><text x="7.4154%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="7.1654%" y="549" width="0.2362%" height="15" fill="rgb(210,145,0)" fg:x="91" fg:w="3"/><text x="7.4154%" y="559.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="7.2441%" y="533" width="0.1575%" height="15" fill="rgb(253,82,12)" fg:x="92" fg:w="2"/><text x="7.4941%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="7.2441%" y="517" width="0.1575%" height="15" fill="rgb(245,42,11)" fg:x="92" fg:w="2"/><text x="7.4941%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3228%" y="501" width="0.0787%" height="15" fill="rgb(219,147,32)" fg:x="93" fg:w="1"/><text x="7.5728%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3228%" y="485" width="0.0787%" height="15" fill="rgb(246,12,7)" fg:x="93" fg:w="1"/><text x="7.5728%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3228%" y="469" width="0.0787%" height="15" fill="rgb(243,50,9)" fg:x="93" fg:w="1"/><text x="7.5728%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3228%" y="453" width="0.0787%" height="15" fill="rgb(219,149,6)" fg:x="93" fg:w="1"/><text x="7.5728%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.3228%" y="437" width="0.0787%" height="15" fill="rgb(241,51,42)" fg:x="93" fg:w="1"/><text x="7.5728%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (83 samples, 6.54%)</title><rect x="0.9449%" y="645" width="6.5354%" height="15" fill="rgb(226,128,27)" fg:x="12" fg:w="83"/><text x="1.1949%" y="655.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.31%)</title><rect x="7.1654%" y="629" width="0.3150%" height="15" fill="rgb(244,144,4)" fg:x="91" fg:w="4"/><text x="7.4154%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.31%)</title><rect x="7.1654%" y="613" width="0.3150%" height="15" fill="rgb(221,4,13)" fg:x="91" fg:w="4"/><text x="7.4154%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.4016%" y="597" width="0.0787%" height="15" fill="rgb(208,170,28)" fg:x="94" fg:w="1"/><text x="7.6516%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="7.4016%" y="581" width="0.0787%" height="15" fill="rgb(226,131,13)" fg:x="94" fg:w="1"/><text x="7.6516%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::new_with_key (1 samples, 0.08%)</title><rect x="7.4016%" y="565" width="0.0787%" height="15" fill="rgb(215,72,41)" fg:x="94" fg:w="1"/><text x="7.6516%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.4803%" y="629" width="0.0787%" height="15" fill="rgb(243,108,20)" fg:x="95" fg:w="1"/><text x="7.7303%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.4803%" y="613" width="0.0787%" height="15" fill="rgb(230,189,17)" fg:x="95" fg:w="1"/><text x="7.7303%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.4803%" y="597" width="0.0787%" height="15" fill="rgb(220,50,17)" fg:x="95" fg:w="1"/><text x="7.7303%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.4803%" y="581" width="0.0787%" height="15" fill="rgb(248,152,48)" fg:x="95" fg:w="1"/><text x="7.7303%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.4803%" y="565" width="0.0787%" height="15" fill="rgb(244,91,11)" fg:x="95" fg:w="1"/><text x="7.7303%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="7.4803%" y="549" width="0.0787%" height="15" fill="rgb(220,157,5)" fg:x="95" fg:w="1"/><text x="7.7303%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="7.4803%" y="533" width="0.0787%" height="15" fill="rgb(253,137,8)" fg:x="95" fg:w="1"/><text x="7.7303%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.4803%" y="517" width="0.0787%" height="15" fill="rgb(217,137,51)" fg:x="95" fg:w="1"/><text x="7.7303%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.4803%" y="501" width="0.0787%" height="15" fill="rgb(218,209,53)" fg:x="95" fg:w="1"/><text x="7.7303%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.4803%" y="485" width="0.0787%" height="15" fill="rgb(249,137,25)" fg:x="95" fg:w="1"/><text x="7.7303%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4803%" y="469" width="0.0787%" height="15" fill="rgb(239,155,26)" fg:x="95" fg:w="1"/><text x="7.7303%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4803%" y="453" width="0.0787%" height="15" fill="rgb(227,85,46)" fg:x="95" fg:w="1"/><text x="7.7303%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.4803%" y="437" width="0.0787%" height="15" fill="rgb(251,107,43)" fg:x="95" fg:w="1"/><text x="7.7303%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.4803%" y="421" width="0.0787%" height="15" fill="rgb(234,170,33)" fg:x="95" fg:w="1"/><text x="7.7303%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.4803%" y="405" width="0.0787%" height="15" fill="rgb(206,29,35)" fg:x="95" fg:w="1"/><text x="7.7303%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.4803%" y="389" width="0.0787%" height="15" fill="rgb(227,138,25)" fg:x="95" fg:w="1"/><text x="7.7303%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.4803%" y="373" width="0.0787%" height="15" fill="rgb(249,131,35)" fg:x="95" fg:w="1"/><text x="7.7303%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.4803%" y="357" width="0.0787%" height="15" fill="rgb(239,6,40)" fg:x="95" fg:w="1"/><text x="7.7303%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.4803%" y="341" width="0.0787%" height="15" fill="rgb(246,136,47)" fg:x="95" fg:w="1"/><text x="7.7303%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="7.4803%" y="325" width="0.0787%" height="15" fill="rgb(253,58,26)" fg:x="95" fg:w="1"/><text x="7.7303%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.4803%" y="309" width="0.0787%" height="15" fill="rgb(237,141,10)" fg:x="95" fg:w="1"/><text x="7.7303%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="7.4803%" y="293" width="0.0787%" height="15" fill="rgb(234,156,12)" fg:x="95" fg:w="1"/><text x="7.7303%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="7.4803%" y="277" width="0.0787%" height="15" fill="rgb(243,224,36)" fg:x="95" fg:w="1"/><text x="7.7303%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="7.4803%" y="261" width="0.0787%" height="15" fill="rgb(205,229,51)" fg:x="95" fg:w="1"/><text x="7.7303%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="7.5591%" y="613" width="0.1575%" height="15" fill="rgb(223,189,4)" fg:x="96" fg:w="2"/><text x="7.8091%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="7.5591%" y="597" width="0.1575%" height="15" fill="rgb(249,167,54)" fg:x="96" fg:w="2"/><text x="7.8091%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="7.5591%" y="581" width="0.1575%" height="15" fill="rgb(218,34,28)" fg:x="96" fg:w="2"/><text x="7.8091%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="7.5591%" y="565" width="0.1575%" height="15" fill="rgb(232,109,42)" fg:x="96" fg:w="2"/><text x="7.8091%" y="575.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="7.5591%" y="549" width="0.1575%" height="15" fill="rgb(248,214,46)" fg:x="96" fg:w="2"/><text x="7.8091%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="7.5591%" y="533" width="0.1575%" height="15" fill="rgb(244,216,40)" fg:x="96" fg:w="2"/><text x="7.8091%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="7.5591%" y="517" width="0.1575%" height="15" fill="rgb(231,226,31)" fg:x="96" fg:w="2"/><text x="7.8091%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="7.5591%" y="501" width="0.1575%" height="15" fill="rgb(238,38,43)" fg:x="96" fg:w="2"/><text x="7.8091%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="7.5591%" y="485" width="0.1575%" height="15" fill="rgb(208,88,43)" fg:x="96" fg:w="2"/><text x="7.8091%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="7.5591%" y="469" width="0.1575%" height="15" fill="rgb(205,136,37)" fg:x="96" fg:w="2"/><text x="7.8091%" y="479.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="7.5591%" y="453" width="0.1575%" height="15" fill="rgb(237,34,14)" fg:x="96" fg:w="2"/><text x="7.8091%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.6378%" y="437" width="0.0787%" height="15" fill="rgb(236,193,44)" fg:x="97" fg:w="1"/><text x="7.8878%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.6378%" y="421" width="0.0787%" height="15" fill="rgb(231,48,10)" fg:x="97" fg:w="1"/><text x="7.8878%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.6378%" y="405" width="0.0787%" height="15" fill="rgb(213,141,34)" fg:x="97" fg:w="1"/><text x="7.8878%" y="415.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="7.6378%" y="389" width="0.0787%" height="15" fill="rgb(249,130,34)" fg:x="97" fg:w="1"/><text x="7.8878%" y="399.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="7.6378%" y="373" width="0.0787%" height="15" fill="rgb(219,42,41)" fg:x="97" fg:w="1"/><text x="7.8878%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="7.6378%" y="357" width="0.0787%" height="15" fill="rgb(224,100,54)" fg:x="97" fg:w="1"/><text x="7.8878%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.08%)</title><rect x="7.6378%" y="341" width="0.0787%" height="15" fill="rgb(229,200,27)" fg:x="97" fg:w="1"/><text x="7.8878%" y="351.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.7165%" y="613" width="0.0787%" height="15" fill="rgb(217,118,10)" fg:x="98" fg:w="1"/><text x="7.9665%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7165%" y="597" width="0.0787%" height="15" fill="rgb(206,22,3)" fg:x="98" fg:w="1"/><text x="7.9665%" y="607.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="7.7953%" y="613" width="0.0787%" height="15" fill="rgb(232,163,46)" fg:x="99" fg:w="1"/><text x="8.0453%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="7.7953%" y="597" width="0.0787%" height="15" fill="rgb(206,95,13)" fg:x="99" fg:w="1"/><text x="8.0453%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.7953%" y="581" width="0.0787%" height="15" fill="rgb(253,154,18)" fg:x="99" fg:w="1"/><text x="8.0453%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="7.8740%" y="597" width="0.1575%" height="15" fill="rgb(219,32,23)" fg:x="100" fg:w="2"/><text x="8.1240%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="7.8740%" y="581" width="0.1575%" height="15" fill="rgb(230,191,45)" fg:x="100" fg:w="2"/><text x="8.1240%" y="591.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="7.8740%" y="565" width="0.1575%" height="15" fill="rgb(229,64,36)" fg:x="100" fg:w="2"/><text x="8.1240%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="8.0315%" y="581" width="0.0787%" height="15" fill="rgb(205,129,25)" fg:x="102" fg:w="1"/><text x="8.2815%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.0315%" y="565" width="0.0787%" height="15" fill="rgb(254,112,7)" fg:x="102" fg:w="1"/><text x="8.2815%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.0315%" y="549" width="0.0787%" height="15" fill="rgb(226,53,48)" fg:x="102" fg:w="1"/><text x="8.2815%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.0315%" y="533" width="0.0787%" height="15" fill="rgb(214,153,38)" fg:x="102" fg:w="1"/><text x="8.2815%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0315%" y="517" width="0.0787%" height="15" fill="rgb(243,101,7)" fg:x="102" fg:w="1"/><text x="8.2815%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="8.1102%" y="565" width="0.1575%" height="15" fill="rgb(240,140,22)" fg:x="103" fg:w="2"/><text x="8.3602%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.1102%" y="549" width="0.1575%" height="15" fill="rgb(235,114,2)" fg:x="103" fg:w="2"/><text x="8.3602%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.1102%" y="533" width="0.1575%" height="15" fill="rgb(242,59,12)" fg:x="103" fg:w="2"/><text x="8.3602%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.2677%" y="549" width="0.0787%" height="15" fill="rgb(252,134,9)" fg:x="105" fg:w="1"/><text x="8.5177%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2677%" y="533" width="0.0787%" height="15" fill="rgb(236,4,44)" fg:x="105" fg:w="1"/><text x="8.5177%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2677%" y="517" width="0.0787%" height="15" fill="rgb(254,172,41)" fg:x="105" fg:w="1"/><text x="8.5177%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2677%" y="501" width="0.0787%" height="15" fill="rgb(244,63,20)" fg:x="105" fg:w="1"/><text x="8.5177%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.2677%" y="485" width="0.0787%" height="15" fill="rgb(250,73,31)" fg:x="105" fg:w="1"/><text x="8.5177%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.2677%" y="469" width="0.0787%" height="15" fill="rgb(241,38,36)" fg:x="105" fg:w="1"/><text x="8.5177%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2677%" y="453" width="0.0787%" height="15" fill="rgb(245,211,2)" fg:x="105" fg:w="1"/><text x="8.5177%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.3465%" y="533" width="0.0787%" height="15" fill="rgb(206,120,28)" fg:x="106" fg:w="1"/><text x="8.5965%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.4252%" y="533" width="0.0787%" height="15" fill="rgb(211,59,34)" fg:x="107" fg:w="1"/><text x="8.6752%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4252%" y="517" width="0.0787%" height="15" fill="rgb(233,168,5)" fg:x="107" fg:w="1"/><text x="8.6752%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4252%" y="501" width="0.0787%" height="15" fill="rgb(234,33,13)" fg:x="107" fg:w="1"/><text x="8.6752%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.4252%" y="485" width="0.0787%" height="15" fill="rgb(231,150,26)" fg:x="107" fg:w="1"/><text x="8.6752%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.4252%" y="469" width="0.0787%" height="15" fill="rgb(217,191,4)" fg:x="107" fg:w="1"/><text x="8.6752%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.5039%" y="517" width="0.0787%" height="15" fill="rgb(246,198,38)" fg:x="108" fg:w="1"/><text x="8.7539%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.6614%" y="501" width="0.0787%" height="15" fill="rgb(245,64,37)" fg:x="110" fg:w="1"/><text x="8.9114%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6614%" y="485" width="0.0787%" height="15" fill="rgb(250,30,36)" fg:x="110" fg:w="1"/><text x="8.9114%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.7402%" y="485" width="0.0787%" height="15" fill="rgb(217,86,53)" fg:x="111" fg:w="1"/><text x="8.9902%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7402%" y="469" width="0.0787%" height="15" fill="rgb(228,157,16)" fg:x="111" fg:w="1"/><text x="8.9902%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="8.3465%" y="549" width="0.5512%" height="15" fill="rgb(217,59,31)" fg:x="106" fg:w="7"/><text x="8.5965%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="8.5039%" y="533" width="0.3937%" height="15" fill="rgb(237,138,41)" fg:x="108" fg:w="5"/><text x="8.7539%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="8.5827%" y="517" width="0.3150%" height="15" fill="rgb(227,91,49)" fg:x="109" fg:w="4"/><text x="8.8327%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.7402%" y="501" width="0.1575%" height="15" fill="rgb(247,21,44)" fg:x="111" fg:w="2"/><text x="8.9902%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8189%" y="485" width="0.0787%" height="15" fill="rgb(219,210,51)" fg:x="112" fg:w="1"/><text x="9.0689%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8189%" y="469" width="0.0787%" height="15" fill="rgb(209,140,6)" fg:x="112" fg:w="1"/><text x="9.0689%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.87%)</title><rect x="8.1102%" y="581" width="0.8661%" height="15" fill="rgb(221,188,24)" fg:x="103" fg:w="11"/><text x="8.3602%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="8.2677%" y="565" width="0.7087%" height="15" fill="rgb(232,154,20)" fg:x="105" fg:w="9"/><text x="8.5177%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.8976%" y="549" width="0.0787%" height="15" fill="rgb(244,137,50)" fg:x="113" fg:w="1"/><text x="9.1476%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.8976%" y="533" width="0.0787%" height="15" fill="rgb(225,185,43)" fg:x="113" fg:w="1"/><text x="9.1476%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0551%" y="517" width="0.0787%" height="15" fill="rgb(213,205,38)" fg:x="115" fg:w="1"/><text x="9.3051%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1339%" y="485" width="0.0787%" height="15" fill="rgb(236,73,12)" fg:x="116" fg:w="1"/><text x="9.3839%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1339%" y="469" width="0.0787%" height="15" fill="rgb(235,219,13)" fg:x="116" fg:w="1"/><text x="9.3839%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="8.9764%" y="581" width="0.3150%" height="15" fill="rgb(218,59,36)" fg:x="114" fg:w="4"/><text x="9.2264%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="8.9764%" y="565" width="0.3150%" height="15" fill="rgb(205,110,39)" fg:x="114" fg:w="4"/><text x="9.2264%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="8.9764%" y="549" width="0.3150%" height="15" fill="rgb(218,206,42)" fg:x="114" fg:w="4"/><text x="9.2264%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.0551%" y="533" width="0.2362%" height="15" fill="rgb(248,125,24)" fg:x="115" fg:w="3"/><text x="9.3051%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.1339%" y="517" width="0.1575%" height="15" fill="rgb(242,28,27)" fg:x="116" fg:w="2"/><text x="9.3839%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.1339%" y="501" width="0.1575%" height="15" fill="rgb(216,228,15)" fg:x="116" fg:w="2"/><text x="9.3839%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.2126%" y="485" width="0.0787%" height="15" fill="rgb(235,116,46)" fg:x="117" fg:w="1"/><text x="9.4626%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2126%" y="469" width="0.0787%" height="15" fill="rgb(224,18,32)" fg:x="117" fg:w="1"/><text x="9.4626%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5276%" y="517" width="0.0787%" height="15" fill="rgb(252,5,12)" fg:x="121" fg:w="1"/><text x="9.7776%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.6063%" y="469" width="0.0787%" height="15" fill="rgb(251,36,5)" fg:x="122" fg:w="1"/><text x="9.8563%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.6850%" y="469" width="0.0787%" height="15" fill="rgb(217,53,14)" fg:x="123" fg:w="1"/><text x="9.9350%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.6850%" y="453" width="0.0787%" height="15" fill="rgb(215,86,45)" fg:x="123" fg:w="1"/><text x="9.9350%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6850%" y="437" width="0.0787%" height="15" fill="rgb(242,169,11)" fg:x="123" fg:w="1"/><text x="9.9350%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7638%" y="437" width="0.0787%" height="15" fill="rgb(211,213,45)" fg:x="124" fg:w="1"/><text x="10.0138%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.8425%" y="437" width="0.0787%" height="15" fill="rgb(205,88,11)" fg:x="125" fg:w="1"/><text x="10.0925%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="9.3701%" y="549" width="0.6299%" height="15" fill="rgb(252,69,26)" fg:x="119" fg:w="8"/><text x="9.6201%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.63%)</title><rect x="9.3701%" y="533" width="0.6299%" height="15" fill="rgb(246,123,37)" fg:x="119" fg:w="8"/><text x="9.6201%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="9.6063%" y="517" width="0.3937%" height="15" fill="rgb(212,205,5)" fg:x="122" fg:w="5"/><text x="9.8563%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="9.6063%" y="501" width="0.3937%" height="15" fill="rgb(253,148,0)" fg:x="122" fg:w="5"/><text x="9.8563%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="9.6063%" y="485" width="0.3937%" height="15" fill="rgb(239,22,4)" fg:x="122" fg:w="5"/><text x="9.8563%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.7638%" y="469" width="0.2362%" height="15" fill="rgb(226,26,53)" fg:x="124" fg:w="3"/><text x="10.0138%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.7638%" y="453" width="0.2362%" height="15" fill="rgb(225,229,45)" fg:x="124" fg:w="3"/><text x="10.0138%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.9213%" y="437" width="0.0787%" height="15" fill="rgb(220,60,37)" fg:x="126" fg:w="1"/><text x="10.1713%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.71%)</title><rect x="9.3701%" y="565" width="0.7087%" height="15" fill="rgb(217,180,35)" fg:x="119" fg:w="9"/><text x="9.6201%" y="575.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="10.0000%" y="549" width="0.0787%" height="15" fill="rgb(229,7,53)" fg:x="127" fg:w="1"/><text x="10.2500%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.0000%" y="533" width="0.0787%" height="15" fill="rgb(254,137,3)" fg:x="127" fg:w="1"/><text x="10.2500%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.0000%" y="517" width="0.0787%" height="15" fill="rgb(215,140,41)" fg:x="127" fg:w="1"/><text x="10.2500%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.0000%" y="501" width="0.0787%" height="15" fill="rgb(250,80,15)" fg:x="127" fg:w="1"/><text x="10.2500%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.0000%" y="485" width="0.0787%" height="15" fill="rgb(252,191,6)" fg:x="127" fg:w="1"/><text x="10.2500%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.0000%" y="469" width="0.0787%" height="15" fill="rgb(246,217,18)" fg:x="127" fg:w="1"/><text x="10.2500%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="10.0000%" y="453" width="0.0787%" height="15" fill="rgb(223,93,7)" fg:x="127" fg:w="1"/><text x="10.2500%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.0000%" y="437" width="0.0787%" height="15" fill="rgb(225,55,52)" fg:x="127" fg:w="1"/><text x="10.2500%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1575%" y="533" width="0.0787%" height="15" fill="rgb(240,31,24)" fg:x="129" fg:w="1"/><text x="10.4075%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2362%" y="533" width="0.0787%" height="15" fill="rgb(205,56,52)" fg:x="130" fg:w="1"/><text x="10.4862%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2362%" y="517" width="0.0787%" height="15" fill="rgb(246,146,12)" fg:x="130" fg:w="1"/><text x="10.4862%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.2362%" y="501" width="0.0787%" height="15" fill="rgb(239,84,36)" fg:x="130" fg:w="1"/><text x="10.4862%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="10.2362%" y="485" width="0.0787%" height="15" fill="rgb(207,41,40)" fg:x="130" fg:w="1"/><text x="10.4862%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.5512%" y="453" width="0.1575%" height="15" fill="rgb(241,179,25)" fg:x="134" fg:w="2"/><text x="10.8012%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6299%" y="437" width="0.0787%" height="15" fill="rgb(210,0,34)" fg:x="135" fg:w="1"/><text x="10.8799%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6299%" y="421" width="0.0787%" height="15" fill="rgb(225,217,29)" fg:x="135" fg:w="1"/><text x="10.8799%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.79%)</title><rect x="10.3150%" y="501" width="0.7874%" height="15" fill="rgb(216,191,38)" fg:x="131" fg:w="10"/><text x="10.5650%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.79%)</title><rect x="10.3150%" y="485" width="0.7874%" height="15" fill="rgb(232,140,52)" fg:x="131" fg:w="10"/><text x="10.5650%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.63%)</title><rect x="10.4724%" y="469" width="0.6299%" height="15" fill="rgb(223,158,51)" fg:x="133" fg:w="8"/><text x="10.7224%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.39%)</title><rect x="10.7087%" y="453" width="0.3937%" height="15" fill="rgb(235,29,51)" fg:x="136" fg:w="5"/><text x="10.9587%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="10.7087%" y="437" width="0.3937%" height="15" fill="rgb(215,181,18)" fg:x="136" fg:w="5"/><text x="10.9587%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.31%)</title><rect x="10.7874%" y="421" width="0.3150%" height="15" fill="rgb(227,125,34)" fg:x="137" fg:w="4"/><text x="11.0374%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.9449%" y="405" width="0.1575%" height="15" fill="rgb(230,197,49)" fg:x="139" fg:w="2"/><text x="11.1949%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0236%" y="389" width="0.0787%" height="15" fill="rgb(239,141,16)" fg:x="140" fg:w="1"/><text x="11.2736%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.0236%" y="373" width="0.0787%" height="15" fill="rgb(225,105,43)" fg:x="140" fg:w="1"/><text x="11.2736%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0236%" y="357" width="0.0787%" height="15" fill="rgb(214,131,14)" fg:x="140" fg:w="1"/><text x="11.2736%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0236%" y="341" width="0.0787%" height="15" fill="rgb(229,177,11)" fg:x="140" fg:w="1"/><text x="11.2736%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0236%" y="325" width="0.0787%" height="15" fill="rgb(231,180,14)" fg:x="140" fg:w="1"/><text x="11.2736%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.87%)</title><rect x="10.3150%" y="517" width="0.8661%" height="15" fill="rgb(232,88,2)" fg:x="131" fg:w="11"/><text x="10.5650%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.1024%" y="501" width="0.0787%" height="15" fill="rgb(205,220,8)" fg:x="141" fg:w="1"/><text x="11.3524%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1024%" y="485" width="0.0787%" height="15" fill="rgb(225,23,53)" fg:x="141" fg:w="1"/><text x="11.3524%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.34%)</title><rect x="10.0787%" y="565" width="1.3386%" height="15" fill="rgb(213,62,29)" fg:x="128" fg:w="17"/><text x="10.3287%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.34%)</title><rect x="10.0787%" y="549" width="1.3386%" height="15" fill="rgb(227,75,7)" fg:x="128" fg:w="17"/><text x="10.3287%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.10%)</title><rect x="10.3150%" y="533" width="1.1024%" height="15" fill="rgb(207,105,14)" fg:x="131" fg:w="14"/><text x="10.5650%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="11.1811%" y="517" width="0.2362%" height="15" fill="rgb(245,62,29)" fg:x="142" fg:w="3"/><text x="11.4311%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="11.1811%" y="501" width="0.2362%" height="15" fill="rgb(236,202,4)" fg:x="142" fg:w="3"/><text x="11.4311%" y="511.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="11.1811%" y="485" width="0.2362%" height="15" fill="rgb(250,67,1)" fg:x="142" fg:w="3"/><text x="11.4311%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.5748%" y="389" width="0.0787%" height="15" fill="rgb(253,115,44)" fg:x="147" fg:w="1"/><text x="11.8248%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.5748%" y="373" width="0.0787%" height="15" fill="rgb(251,139,18)" fg:x="147" fg:w="1"/><text x="11.8248%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="11.5748%" y="421" width="0.2362%" height="15" fill="rgb(218,22,32)" fg:x="147" fg:w="3"/><text x="11.8248%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="11.5748%" y="405" width="0.2362%" height="15" fill="rgb(243,53,5)" fg:x="147" fg:w="3"/><text x="11.8248%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="11.6535%" y="389" width="0.1575%" height="15" fill="rgb(227,56,16)" fg:x="148" fg:w="2"/><text x="11.9035%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.7323%" y="373" width="0.0787%" height="15" fill="rgb(245,53,0)" fg:x="149" fg:w="1"/><text x="11.9823%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.8110%" y="389" width="0.0787%" height="15" fill="rgb(216,170,35)" fg:x="150" fg:w="1"/><text x="12.0610%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="11.4961%" y="469" width="0.5512%" height="15" fill="rgb(211,200,8)" fg:x="146" fg:w="7"/><text x="11.7461%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="11.4961%" y="453" width="0.5512%" height="15" fill="rgb(228,204,44)" fg:x="146" fg:w="7"/><text x="11.7461%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="11.5748%" y="437" width="0.4724%" height="15" fill="rgb(214,121,17)" fg:x="147" fg:w="6"/><text x="11.8248%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="11.8110%" y="421" width="0.2362%" height="15" fill="rgb(233,64,38)" fg:x="150" fg:w="3"/><text x="12.0610%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="11.8110%" y="405" width="0.2362%" height="15" fill="rgb(253,54,19)" fg:x="150" fg:w="3"/><text x="12.0610%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.8898%" y="389" width="0.1575%" height="15" fill="rgb(253,94,18)" fg:x="151" fg:w="2"/><text x="12.1398%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="11.8898%" y="373" width="0.1575%" height="15" fill="rgb(227,57,52)" fg:x="151" fg:w="2"/><text x="12.1398%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="11.8898%" y="357" width="0.1575%" height="15" fill="rgb(230,228,50)" fg:x="151" fg:w="2"/><text x="12.1398%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.9685%" y="341" width="0.0787%" height="15" fill="rgb(217,205,27)" fg:x="152" fg:w="1"/><text x="12.2185%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.79%)</title><rect x="11.4173%" y="501" width="0.7874%" height="15" fill="rgb(252,71,50)" fg:x="145" fg:w="10"/><text x="11.6673%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.79%)</title><rect x="11.4173%" y="485" width="0.7874%" height="15" fill="rgb(209,86,4)" fg:x="145" fg:w="10"/><text x="11.6673%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="12.0472%" y="469" width="0.1575%" height="15" fill="rgb(229,94,0)" fg:x="153" fg:w="2"/><text x="12.2972%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.1260%" y="453" width="0.0787%" height="15" fill="rgb(252,223,21)" fg:x="154" fg:w="1"/><text x="12.3760%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="12.1260%" y="437" width="0.0787%" height="15" fill="rgb(230,210,4)" fg:x="154" fg:w="1"/><text x="12.3760%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.2047%" y="501" width="0.0787%" height="15" fill="rgb(240,149,38)" fg:x="155" fg:w="1"/><text x="12.4547%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (57 samples, 4.49%)</title><rect x="7.8740%" y="613" width="4.4882%" height="15" fill="rgb(254,105,20)" fg:x="100" fg:w="57"/><text x="8.1240%" y="623.50">engin..</text></g><g><title>engine::session::SavesEntities::check_for_changes (55 samples, 4.33%)</title><rect x="8.0315%" y="597" width="4.3307%" height="15" fill="rgb(253,87,46)" fg:x="102" fg:w="55"/><text x="8.2815%" y="607.50">engin..</text></g><g><title>kernel::model::any_entity_changes (39 samples, 3.07%)</title><rect x="9.2913%" y="581" width="3.0709%" height="15" fill="rgb(253,116,33)" fg:x="118" fg:w="39"/><text x="9.5413%" y="591.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.94%)</title><rect x="11.4173%" y="565" width="0.9449%" height="15" fill="rgb(229,198,5)" fg:x="145" fg:w="12"/><text x="11.6673%" y="575.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.94%)</title><rect x="11.4173%" y="549" width="0.9449%" height="15" fill="rgb(242,38,37)" fg:x="145" fg:w="12"/><text x="11.6673%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.94%)</title><rect x="11.4173%" y="533" width="0.9449%" height="15" fill="rgb(242,69,53)" fg:x="145" fg:w="12"/><text x="11.6673%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.94%)</title><rect x="11.4173%" y="517" width="0.9449%" height="15" fill="rgb(249,80,16)" fg:x="145" fg:w="12"/><text x="11.6673%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2835%" y="501" width="0.0787%" height="15" fill="rgb(206,128,11)" fg:x="156" fg:w="1"/><text x="12.5335%" y="511.50"></text></g><g><title>engine::session::Session::close (63 samples, 4.96%)</title><rect x="7.4803%" y="645" width="4.9606%" height="15" fill="rgb(212,35,20)" fg:x="95" fg:w="63"/><text x="7.7303%" y="655.50">engine..</text></g><g><title>engine::session::Session::save_entity_changes (62 samples, 4.88%)</title><rect x="7.5591%" y="629" width="4.8819%" height="15" fill="rgb(236,79,13)" fg:x="96" fg:w="62"/><text x="7.8091%" y="639.50">engine..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="12.3622%" y="613" width="0.0787%" height="15" fill="rgb(233,123,3)" fg:x="157" fg:w="1"/><text x="12.6122%" y="623.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="12.3622%" y="597" width="0.0787%" height="15" fill="rgb(214,93,52)" fg:x="157" fg:w="1"/><text x="12.6122%" y="607.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="12.3622%" y="581" width="0.0787%" height="15" fill="rgb(251,37,40)" fg:x="157" fg:w="1"/><text x="12.6122%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="12.3622%" y="565" width="0.0787%" height="15" fill="rgb(227,80,54)" fg:x="157" fg:w="1"/><text x="12.6122%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="12.3622%" y="549" width="0.0787%" height="15" fill="rgb(254,48,11)" fg:x="157" fg:w="1"/><text x="12.6122%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="12.3622%" y="533" width="0.0787%" height="15" fill="rgb(235,193,26)" fg:x="157" fg:w="1"/><text x="12.6122%" y="543.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="12.3622%" y="517" width="0.0787%" height="15" fill="rgb(229,99,21)" fg:x="157" fg:w="1"/><text x="12.6122%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5984%" y="357" width="0.0787%" height="15" fill="rgb(211,140,41)" fg:x="160" fg:w="1"/><text x="12.8484%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5984%" y="341" width="0.0787%" height="15" fill="rgb(240,227,30)" fg:x="160" fg:w="1"/><text x="12.8484%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5984%" y="325" width="0.0787%" height="15" fill="rgb(215,224,45)" fg:x="160" fg:w="1"/><text x="12.8484%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="12.5197%" y="533" width="0.2362%" height="15" fill="rgb(206,123,31)" fg:x="159" fg:w="3"/><text x="12.7697%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="12.5984%" y="517" width="0.1575%" height="15" fill="rgb(210,138,16)" fg:x="160" fg:w="2"/><text x="12.8484%" y="527.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="12.5984%" y="501" width="0.1575%" height="15" fill="rgb(228,57,28)" fg:x="160" fg:w="2"/><text x="12.8484%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="12.5984%" y="485" width="0.1575%" height="15" fill="rgb(242,170,10)" fg:x="160" fg:w="2"/><text x="12.8484%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="12.5984%" y="469" width="0.1575%" height="15" fill="rgb(228,214,39)" fg:x="160" fg:w="2"/><text x="12.8484%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.5984%" y="453" width="0.1575%" height="15" fill="rgb(218,179,33)" fg:x="160" fg:w="2"/><text x="12.8484%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.5984%" y="437" width="0.1575%" height="15" fill="rgb(235,193,39)" fg:x="160" fg:w="2"/><text x="12.8484%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.5984%" y="421" width="0.1575%" height="15" fill="rgb(219,221,36)" fg:x="160" fg:w="2"/><text x="12.8484%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.5984%" y="405" width="0.1575%" height="15" fill="rgb(248,218,19)" fg:x="160" fg:w="2"/><text x="12.8484%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.5984%" y="389" width="0.1575%" height="15" fill="rgb(205,50,9)" fg:x="160" fg:w="2"/><text x="12.8484%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.5984%" y="373" width="0.1575%" height="15" fill="rgb(238,81,28)" fg:x="160" fg:w="2"/><text x="12.8484%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.6772%" y="357" width="0.0787%" height="15" fill="rgb(235,110,19)" fg:x="161" fg:w="1"/><text x="12.9272%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.6772%" y="341" width="0.0787%" height="15" fill="rgb(214,7,14)" fg:x="161" fg:w="1"/><text x="12.9272%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.6772%" y="325" width="0.0787%" height="15" fill="rgb(211,77,3)" fg:x="161" fg:w="1"/><text x="12.9272%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6772%" y="309" width="0.0787%" height="15" fill="rgb(229,5,9)" fg:x="161" fg:w="1"/><text x="12.9272%" y="319.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7559%" y="533" width="0.0787%" height="15" fill="rgb(225,90,11)" fg:x="162" fg:w="1"/><text x="13.0059%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.7559%" y="517" width="0.0787%" height="15" fill="rgb(242,56,8)" fg:x="162" fg:w="1"/><text x="13.0059%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.7559%" y="501" width="0.0787%" height="15" fill="rgb(249,212,39)" fg:x="162" fg:w="1"/><text x="13.0059%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7559%" y="485" width="0.0787%" height="15" fill="rgb(236,90,9)" fg:x="162" fg:w="1"/><text x="13.0059%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7559%" y="469" width="0.0787%" height="15" fill="rgb(206,88,35)" fg:x="162" fg:w="1"/><text x="13.0059%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.7559%" y="453" width="0.0787%" height="15" fill="rgb(205,126,30)" fg:x="162" fg:w="1"/><text x="13.0059%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.7559%" y="437" width="0.0787%" height="15" fill="rgb(230,176,12)" fg:x="162" fg:w="1"/><text x="13.0059%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.7559%" y="421" width="0.0787%" height="15" fill="rgb(243,19,9)" fg:x="162" fg:w="1"/><text x="13.0059%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7559%" y="405" width="0.0787%" height="15" fill="rgb(245,171,17)" fg:x="162" fg:w="1"/><text x="13.0059%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7559%" y="389" width="0.0787%" height="15" fill="rgb(227,52,21)" fg:x="162" fg:w="1"/><text x="13.0059%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.7559%" y="373" width="0.0787%" height="15" fill="rgb(238,69,14)" fg:x="162" fg:w="1"/><text x="13.0059%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.7559%" y="357" width="0.0787%" height="15" fill="rgb(241,156,39)" fg:x="162" fg:w="1"/><text x="13.0059%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.7559%" y="341" width="0.0787%" height="15" fill="rgb(212,227,28)" fg:x="162" fg:w="1"/><text x="13.0059%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.7559%" y="325" width="0.0787%" height="15" fill="rgb(209,118,27)" fg:x="162" fg:w="1"/><text x="13.0059%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7559%" y="309" width="0.0787%" height="15" fill="rgb(226,102,5)" fg:x="162" fg:w="1"/><text x="13.0059%" y="319.50"></text></g><g><title>&lt;engine::perform::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.47%)</title><rect x="12.4409%" y="597" width="0.4724%" height="15" fill="rgb(223,34,3)" fg:x="158" fg:w="6"/><text x="12.6909%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.47%)</title><rect x="12.4409%" y="581" width="0.4724%" height="15" fill="rgb(221,81,38)" fg:x="158" fg:w="6"/><text x="12.6909%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.47%)</title><rect x="12.4409%" y="565" width="0.4724%" height="15" fill="rgb(236,219,28)" fg:x="158" fg:w="6"/><text x="12.6909%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.39%)</title><rect x="12.5197%" y="549" width="0.3937%" height="15" fill="rgb(213,200,14)" fg:x="159" fg:w="5"/><text x="12.7697%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.8346%" y="533" width="0.0787%" height="15" fill="rgb(240,33,19)" fg:x="163" fg:w="1"/><text x="13.0846%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.8346%" y="517" width="0.0787%" height="15" fill="rgb(233,113,27)" fg:x="163" fg:w="1"/><text x="13.0846%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.8346%" y="501" width="0.0787%" height="15" fill="rgb(220,221,18)" fg:x="163" fg:w="1"/><text x="13.0846%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.9921%" y="533" width="0.1575%" height="15" fill="rgb(238,92,8)" fg:x="165" fg:w="2"/><text x="13.2421%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.0709%" y="517" width="0.0787%" height="15" fill="rgb(222,164,16)" fg:x="166" fg:w="1"/><text x="13.3209%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="12.9921%" y="549" width="0.2362%" height="15" fill="rgb(241,119,3)" fg:x="165" fg:w="3"/><text x="13.2421%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1496%" y="533" width="0.0787%" height="15" fill="rgb(241,44,8)" fg:x="167" fg:w="1"/><text x="13.3996%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (4 samples, 0.31%)</title><rect x="12.9921%" y="565" width="0.3150%" height="15" fill="rgb(230,36,40)" fg:x="165" fg:w="4"/><text x="13.2421%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="13.2283%" y="549" width="0.0787%" height="15" fill="rgb(243,16,36)" fg:x="168" fg:w="1"/><text x="13.4783%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="13.3858%" y="533" width="0.1575%" height="15" fill="rgb(231,4,26)" fg:x="170" fg:w="2"/><text x="13.6358%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="13.3858%" y="517" width="0.1575%" height="15" fill="rgb(240,9,31)" fg:x="170" fg:w="2"/><text x="13.6358%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="13.3858%" y="501" width="0.1575%" height="15" fill="rgb(207,173,15)" fg:x="170" fg:w="2"/><text x="13.6358%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.4646%" y="485" width="0.0787%" height="15" fill="rgb(224,192,53)" fg:x="171" fg:w="1"/><text x="13.7146%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.5433%" y="485" width="0.0787%" height="15" fill="rgb(223,67,28)" fg:x="172" fg:w="1"/><text x="13.7933%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="13.7008%" y="405" width="0.0787%" height="15" fill="rgb(211,20,47)" fg:x="174" fg:w="1"/><text x="13.9508%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7008%" y="389" width="0.0787%" height="15" fill="rgb(240,228,2)" fg:x="174" fg:w="1"/><text x="13.9508%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.7008%" y="373" width="0.0787%" height="15" fill="rgb(248,151,12)" fg:x="174" fg:w="1"/><text x="13.9508%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.7008%" y="357" width="0.0787%" height="15" fill="rgb(244,8,39)" fg:x="174" fg:w="1"/><text x="13.9508%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.7008%" y="341" width="0.0787%" height="15" fill="rgb(222,26,8)" fg:x="174" fg:w="1"/><text x="13.9508%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.7008%" y="325" width="0.0787%" height="15" fill="rgb(213,106,44)" fg:x="174" fg:w="1"/><text x="13.9508%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7008%" y="309" width="0.0787%" height="15" fill="rgb(214,129,20)" fg:x="174" fg:w="1"/><text x="13.9508%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.7008%" y="293" width="0.0787%" height="15" fill="rgb(212,32,13)" fg:x="174" fg:w="1"/><text x="13.9508%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.7008%" y="277" width="0.0787%" height="15" fill="rgb(208,168,33)" fg:x="174" fg:w="1"/><text x="13.9508%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.7008%" y="261" width="0.0787%" height="15" fill="rgb(231,207,8)" fg:x="174" fg:w="1"/><text x="13.9508%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.7008%" y="245" width="0.0787%" height="15" fill="rgb(235,219,23)" fg:x="174" fg:w="1"/><text x="13.9508%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.7008%" y="229" width="0.0787%" height="15" fill="rgb(226,216,26)" fg:x="174" fg:w="1"/><text x="13.9508%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7008%" y="213" width="0.0787%" height="15" fill="rgb(239,137,16)" fg:x="174" fg:w="1"/><text x="13.9508%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="13.6220%" y="453" width="0.2362%" height="15" fill="rgb(207,12,36)" fg:x="173" fg:w="3"/><text x="13.8720%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (3 samples, 0.24%)</title><rect x="13.6220%" y="437" width="0.2362%" height="15" fill="rgb(210,214,24)" fg:x="173" fg:w="3"/><text x="13.8720%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="13.6220%" y="421" width="0.2362%" height="15" fill="rgb(206,56,30)" fg:x="173" fg:w="3"/><text x="13.8720%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="13.7795%" y="405" width="0.0787%" height="15" fill="rgb(228,143,26)" fg:x="175" fg:w="1"/><text x="14.0295%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.7795%" y="389" width="0.0787%" height="15" fill="rgb(216,218,46)" fg:x="175" fg:w="1"/><text x="14.0295%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.7795%" y="373" width="0.0787%" height="15" fill="rgb(206,6,19)" fg:x="175" fg:w="1"/><text x="14.0295%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.7795%" y="357" width="0.0787%" height="15" fill="rgb(239,177,51)" fg:x="175" fg:w="1"/><text x="14.0295%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.7795%" y="341" width="0.0787%" height="15" fill="rgb(216,55,25)" fg:x="175" fg:w="1"/><text x="14.0295%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="13.7795%" y="325" width="0.0787%" height="15" fill="rgb(231,163,29)" fg:x="175" fg:w="1"/><text x="14.0295%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="13.7795%" y="309" width="0.0787%" height="15" fill="rgb(232,149,50)" fg:x="175" fg:w="1"/><text x="14.0295%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.7795%" y="293" width="0.0787%" height="15" fill="rgb(223,142,48)" fg:x="175" fg:w="1"/><text x="14.0295%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.7795%" y="277" width="0.0787%" height="15" fill="rgb(245,83,23)" fg:x="175" fg:w="1"/><text x="14.0295%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="13.8583%" y="389" width="0.0787%" height="15" fill="rgb(224,63,2)" fg:x="176" fg:w="1"/><text x="14.1083%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="13.8583%" y="373" width="0.0787%" height="15" fill="rgb(218,65,53)" fg:x="176" fg:w="1"/><text x="14.1083%" y="383.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="13.8583%" y="357" width="0.0787%" height="15" fill="rgb(221,84,29)" fg:x="176" fg:w="1"/><text x="14.1083%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="13.8583%" y="341" width="0.0787%" height="15" fill="rgb(234,0,32)" fg:x="176" fg:w="1"/><text x="14.1083%" y="351.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="13.8583%" y="325" width="0.0787%" height="15" fill="rgb(206,20,16)" fg:x="176" fg:w="1"/><text x="14.1083%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8583%" y="309" width="0.0787%" height="15" fill="rgb(244,172,18)" fg:x="176" fg:w="1"/><text x="14.1083%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8583%" y="293" width="0.0787%" height="15" fill="rgb(254,133,1)" fg:x="176" fg:w="1"/><text x="14.1083%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8583%" y="277" width="0.0787%" height="15" fill="rgb(222,206,41)" fg:x="176" fg:w="1"/><text x="14.1083%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8583%" y="261" width="0.0787%" height="15" fill="rgb(212,3,42)" fg:x="176" fg:w="1"/><text x="14.1083%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8583%" y="245" width="0.0787%" height="15" fill="rgb(241,11,4)" fg:x="176" fg:w="1"/><text x="14.1083%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8583%" y="229" width="0.0787%" height="15" fill="rgb(205,19,26)" fg:x="176" fg:w="1"/><text x="14.1083%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8583%" y="213" width="0.0787%" height="15" fill="rgb(210,179,32)" fg:x="176" fg:w="1"/><text x="14.1083%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8583%" y="197" width="0.0787%" height="15" fill="rgb(227,116,49)" fg:x="176" fg:w="1"/><text x="14.1083%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8583%" y="181" width="0.0787%" height="15" fill="rgb(211,146,6)" fg:x="176" fg:w="1"/><text x="14.1083%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8583%" y="165" width="0.0787%" height="15" fill="rgb(219,44,39)" fg:x="176" fg:w="1"/><text x="14.1083%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8583%" y="149" width="0.0787%" height="15" fill="rgb(234,128,11)" fg:x="176" fg:w="1"/><text x="14.1083%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8583%" y="133" width="0.0787%" height="15" fill="rgb(220,183,53)" fg:x="176" fg:w="1"/><text x="14.1083%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.8583%" y="117" width="0.0787%" height="15" fill="rgb(213,219,32)" fg:x="176" fg:w="1"/><text x="14.1083%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.8583%" y="101" width="0.0787%" height="15" fill="rgb(232,156,16)" fg:x="176" fg:w="1"/><text x="14.1083%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.8583%" y="85" width="0.0787%" height="15" fill="rgb(246,135,34)" fg:x="176" fg:w="1"/><text x="14.1083%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8583%" y="69" width="0.0787%" height="15" fill="rgb(241,99,0)" fg:x="176" fg:w="1"/><text x="14.1083%" y="79.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.39%)</title><rect x="13.6220%" y="469" width="0.3937%" height="15" fill="rgb(222,103,45)" fg:x="173" fg:w="5"/><text x="13.8720%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="13.8583%" y="453" width="0.1575%" height="15" fill="rgb(212,57,4)" fg:x="176" fg:w="2"/><text x="14.1083%" y="463.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="13.8583%" y="437" width="0.1575%" height="15" fill="rgb(215,68,47)" fg:x="176" fg:w="2"/><text x="14.1083%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="13.8583%" y="421" width="0.1575%" height="15" fill="rgb(230,84,2)" fg:x="176" fg:w="2"/><text x="14.1083%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="13.8583%" y="405" width="0.1575%" height="15" fill="rgb(220,102,14)" fg:x="176" fg:w="2"/><text x="14.1083%" y="415.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9370%" y="389" width="0.0787%" height="15" fill="rgb(240,10,32)" fg:x="177" fg:w="1"/><text x="14.1870%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9370%" y="373" width="0.0787%" height="15" fill="rgb(215,47,27)" fg:x="177" fg:w="1"/><text x="14.1870%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9370%" y="357" width="0.0787%" height="15" fill="rgb(233,188,43)" fg:x="177" fg:w="1"/><text x="14.1870%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9370%" y="341" width="0.0787%" height="15" fill="rgb(253,190,1)" fg:x="177" fg:w="1"/><text x="14.1870%" y="351.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.55%)</title><rect x="13.6220%" y="485" width="0.5512%" height="15" fill="rgb(206,114,52)" fg:x="173" fg:w="7"/><text x="13.8720%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="14.0157%" y="469" width="0.1575%" height="15" fill="rgb(233,120,37)" fg:x="178" fg:w="2"/><text x="14.2657%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="14.0157%" y="453" width="0.1575%" height="15" fill="rgb(214,52,39)" fg:x="178" fg:w="2"/><text x="14.2657%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.0945%" y="437" width="0.0787%" height="15" fill="rgb(223,80,29)" fg:x="179" fg:w="1"/><text x="14.3445%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0945%" y="421" width="0.0787%" height="15" fill="rgb(230,101,40)" fg:x="179" fg:w="1"/><text x="14.3445%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.0945%" y="405" width="0.0787%" height="15" fill="rgb(219,211,8)" fg:x="179" fg:w="1"/><text x="14.3445%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.0945%" y="389" width="0.0787%" height="15" fill="rgb(252,126,28)" fg:x="179" fg:w="1"/><text x="14.3445%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="14.0945%" y="373" width="0.0787%" height="15" fill="rgb(215,56,38)" fg:x="179" fg:w="1"/><text x="14.3445%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.0945%" y="357" width="0.0787%" height="15" fill="rgb(249,55,44)" fg:x="179" fg:w="1"/><text x="14.3445%" y="367.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2520%" y="437" width="0.0787%" height="15" fill="rgb(220,221,32)" fg:x="181" fg:w="1"/><text x="14.5020%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2520%" y="421" width="0.0787%" height="15" fill="rgb(212,216,41)" fg:x="181" fg:w="1"/><text x="14.5020%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2520%" y="405" width="0.0787%" height="15" fill="rgb(228,213,43)" fg:x="181" fg:w="1"/><text x="14.5020%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.2520%" y="389" width="0.0787%" height="15" fill="rgb(211,31,26)" fg:x="181" fg:w="1"/><text x="14.5020%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2520%" y="373" width="0.0787%" height="15" fill="rgb(229,202,19)" fg:x="181" fg:w="1"/><text x="14.5020%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.2520%" y="357" width="0.0787%" height="15" fill="rgb(229,105,46)" fg:x="181" fg:w="1"/><text x="14.5020%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.2520%" y="341" width="0.0787%" height="15" fill="rgb(235,108,1)" fg:x="181" fg:w="1"/><text x="14.5020%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.2520%" y="325" width="0.0787%" height="15" fill="rgb(245,111,35)" fg:x="181" fg:w="1"/><text x="14.5020%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.2520%" y="309" width="0.0787%" height="15" fill="rgb(219,185,31)" fg:x="181" fg:w="1"/><text x="14.5020%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2520%" y="293" width="0.0787%" height="15" fill="rgb(214,4,43)" fg:x="181" fg:w="1"/><text x="14.5020%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.2520%" y="277" width="0.0787%" height="15" fill="rgb(235,227,40)" fg:x="181" fg:w="1"/><text x="14.5020%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.2520%" y="261" width="0.0787%" height="15" fill="rgb(230,88,30)" fg:x="181" fg:w="1"/><text x="14.5020%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.2520%" y="245" width="0.0787%" height="15" fill="rgb(216,217,1)" fg:x="181" fg:w="1"/><text x="14.5020%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.2520%" y="229" width="0.0787%" height="15" fill="rgb(248,139,50)" fg:x="181" fg:w="1"/><text x="14.5020%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.2520%" y="213" width="0.0787%" height="15" fill="rgb(233,1,21)" fg:x="181" fg:w="1"/><text x="14.5020%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2520%" y="197" width="0.0787%" height="15" fill="rgb(215,183,12)" fg:x="181" fg:w="1"/><text x="14.5020%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.3307%" y="309" width="0.0787%" height="15" fill="rgb(229,104,42)" fg:x="182" fg:w="1"/><text x="14.5807%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.3307%" y="293" width="0.0787%" height="15" fill="rgb(243,34,48)" fg:x="182" fg:w="1"/><text x="14.5807%" y="303.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.3307%" y="277" width="0.0787%" height="15" fill="rgb(239,11,44)" fg:x="182" fg:w="1"/><text x="14.5807%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3307%" y="261" width="0.0787%" height="15" fill="rgb(231,98,35)" fg:x="182" fg:w="1"/><text x="14.5807%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3307%" y="245" width="0.0787%" height="15" fill="rgb(233,28,25)" fg:x="182" fg:w="1"/><text x="14.5807%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3307%" y="229" width="0.0787%" height="15" fill="rgb(234,123,11)" fg:x="182" fg:w="1"/><text x="14.5807%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3307%" y="213" width="0.0787%" height="15" fill="rgb(220,69,3)" fg:x="182" fg:w="1"/><text x="14.5807%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3307%" y="197" width="0.0787%" height="15" fill="rgb(214,64,36)" fg:x="182" fg:w="1"/><text x="14.5807%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3307%" y="181" width="0.0787%" height="15" fill="rgb(211,138,32)" fg:x="182" fg:w="1"/><text x="14.5807%" y="191.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="14.3307%" y="341" width="0.1575%" height="15" fill="rgb(213,118,47)" fg:x="182" fg:w="2"/><text x="14.5807%" y="351.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="14.3307%" y="325" width="0.1575%" height="15" fill="rgb(243,124,49)" fg:x="182" fg:w="2"/><text x="14.5807%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.4094%" y="309" width="0.0787%" height="15" fill="rgb(221,30,28)" fg:x="183" fg:w="1"/><text x="14.6594%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.4094%" y="293" width="0.0787%" height="15" fill="rgb(246,37,13)" fg:x="183" fg:w="1"/><text x="14.6594%" y="303.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.4094%" y="277" width="0.0787%" height="15" fill="rgb(249,66,14)" fg:x="183" fg:w="1"/><text x="14.6594%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.4094%" y="261" width="0.0787%" height="15" fill="rgb(213,166,5)" fg:x="183" fg:w="1"/><text x="14.6594%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.4094%" y="245" width="0.0787%" height="15" fill="rgb(221,66,24)" fg:x="183" fg:w="1"/><text x="14.6594%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4882%" y="293" width="0.0787%" height="15" fill="rgb(210,132,17)" fg:x="184" fg:w="1"/><text x="14.7382%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4882%" y="277" width="0.0787%" height="15" fill="rgb(243,202,5)" fg:x="184" fg:w="1"/><text x="14.7382%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4882%" y="261" width="0.0787%" height="15" fill="rgb(233,70,48)" fg:x="184" fg:w="1"/><text x="14.7382%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4882%" y="245" width="0.0787%" height="15" fill="rgb(238,41,26)" fg:x="184" fg:w="1"/><text x="14.7382%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4882%" y="229" width="0.0787%" height="15" fill="rgb(241,19,31)" fg:x="184" fg:w="1"/><text x="14.7382%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.4882%" y="213" width="0.0787%" height="15" fill="rgb(214,76,10)" fg:x="184" fg:w="1"/><text x="14.7382%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.4882%" y="197" width="0.0787%" height="15" fill="rgb(254,202,22)" fg:x="184" fg:w="1"/><text x="14.7382%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.4882%" y="181" width="0.0787%" height="15" fill="rgb(214,72,24)" fg:x="184" fg:w="1"/><text x="14.7382%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.4882%" y="165" width="0.0787%" height="15" fill="rgb(221,92,46)" fg:x="184" fg:w="1"/><text x="14.7382%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.4882%" y="149" width="0.0787%" height="15" fill="rgb(246,13,50)" fg:x="184" fg:w="1"/><text x="14.7382%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.4882%" y="133" width="0.0787%" height="15" fill="rgb(240,165,38)" fg:x="184" fg:w="1"/><text x="14.7382%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.4882%" y="117" width="0.0787%" height="15" fill="rgb(241,24,51)" fg:x="184" fg:w="1"/><text x="14.7382%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.4882%" y="101" width="0.0787%" height="15" fill="rgb(227,51,44)" fg:x="184" fg:w="1"/><text x="14.7382%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.4882%" y="85" width="0.0787%" height="15" fill="rgb(231,121,3)" fg:x="184" fg:w="1"/><text x="14.7382%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.4882%" y="69" width="0.0787%" height="15" fill="rgb(245,3,41)" fg:x="184" fg:w="1"/><text x="14.7382%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.4882%" y="53" width="0.0787%" height="15" fill="rgb(214,13,26)" fg:x="184" fg:w="1"/><text x="14.7382%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4882%" y="37" width="0.0787%" height="15" fill="rgb(252,75,11)" fg:x="184" fg:w="1"/><text x="14.7382%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="14.4882%" y="341" width="0.1575%" height="15" fill="rgb(218,226,17)" fg:x="184" fg:w="2"/><text x="14.7382%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="14.4882%" y="325" width="0.1575%" height="15" fill="rgb(248,89,38)" fg:x="184" fg:w="2"/><text x="14.7382%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="14.4882%" y="309" width="0.1575%" height="15" fill="rgb(237,73,46)" fg:x="184" fg:w="2"/><text x="14.7382%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5669%" y="293" width="0.0787%" height="15" fill="rgb(242,78,33)" fg:x="185" fg:w="1"/><text x="14.8169%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5669%" y="277" width="0.0787%" height="15" fill="rgb(235,60,3)" fg:x="185" fg:w="1"/><text x="14.8169%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.5669%" y="261" width="0.0787%" height="15" fill="rgb(216,172,19)" fg:x="185" fg:w="1"/><text x="14.8169%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.5669%" y="245" width="0.0787%" height="15" fill="rgb(227,6,42)" fg:x="185" fg:w="1"/><text x="14.8169%" y="255.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="14.6457%" y="325" width="0.0787%" height="15" fill="rgb(223,207,42)" fg:x="186" fg:w="1"/><text x="14.8957%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.6457%" y="309" width="0.0787%" height="15" fill="rgb(246,138,30)" fg:x="186" fg:w="1"/><text x="14.8957%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.6457%" y="293" width="0.0787%" height="15" fill="rgb(251,199,47)" fg:x="186" fg:w="1"/><text x="14.8957%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6457%" y="277" width="0.0787%" height="15" fill="rgb(228,218,44)" fg:x="186" fg:w="1"/><text x="14.8957%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="14.8031%" y="213" width="0.1575%" height="15" fill="rgb(220,68,6)" fg:x="188" fg:w="2"/><text x="15.0531%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.8031%" y="197" width="0.1575%" height="15" fill="rgb(240,60,26)" fg:x="188" fg:w="2"/><text x="15.0531%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.8819%" y="181" width="0.0787%" height="15" fill="rgb(211,200,19)" fg:x="189" fg:w="1"/><text x="15.1319%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.8819%" y="165" width="0.0787%" height="15" fill="rgb(242,145,30)" fg:x="189" fg:w="1"/><text x="15.1319%" y="175.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="14.8819%" y="149" width="0.0787%" height="15" fill="rgb(225,64,13)" fg:x="189" fg:w="1"/><text x="15.1319%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="14.8819%" y="133" width="0.0787%" height="15" fill="rgb(218,103,35)" fg:x="189" fg:w="1"/><text x="15.1319%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8819%" y="117" width="0.0787%" height="15" fill="rgb(216,93,46)" fg:x="189" fg:w="1"/><text x="15.1319%" y="127.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.71%)</title><rect x="14.3307%" y="437" width="0.7087%" height="15" fill="rgb(225,159,27)" fg:x="182" fg:w="9"/><text x="14.5807%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.71%)</title><rect x="14.3307%" y="421" width="0.7087%" height="15" fill="rgb(225,204,11)" fg:x="182" fg:w="9"/><text x="14.5807%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="14.3307%" y="405" width="0.7087%" height="15" fill="rgb(205,56,4)" fg:x="182" fg:w="9"/><text x="14.5807%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.71%)</title><rect x="14.3307%" y="389" width="0.7087%" height="15" fill="rgb(206,6,35)" fg:x="182" fg:w="9"/><text x="14.5807%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.71%)</title><rect x="14.3307%" y="373" width="0.7087%" height="15" fill="rgb(247,73,52)" fg:x="182" fg:w="9"/><text x="14.5807%" y="383.50"></text></g><g><title>engine::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="14.3307%" y="357" width="0.7087%" height="15" fill="rgb(246,97,4)" fg:x="182" fg:w="9"/><text x="14.5807%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_str (5 samples, 0.39%)</title><rect x="14.6457%" y="341" width="0.3937%" height="15" fill="rgb(212,37,15)" fg:x="186" fg:w="5"/><text x="14.8957%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="14.7244%" y="325" width="0.3150%" height="15" fill="rgb(208,130,40)" fg:x="187" fg:w="4"/><text x="14.9744%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="14.7244%" y="309" width="0.3150%" height="15" fill="rgb(236,55,29)" fg:x="187" fg:w="4"/><text x="14.9744%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.31%)</title><rect x="14.7244%" y="293" width="0.3150%" height="15" fill="rgb(209,156,45)" fg:x="187" fg:w="4"/><text x="14.9744%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="14.7244%" y="277" width="0.3150%" height="15" fill="rgb(249,107,4)" fg:x="187" fg:w="4"/><text x="14.9744%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.31%)</title><rect x="14.7244%" y="261" width="0.3150%" height="15" fill="rgb(227,7,13)" fg:x="187" fg:w="4"/><text x="14.9744%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="14.7244%" y="245" width="0.3150%" height="15" fill="rgb(250,129,14)" fg:x="187" fg:w="4"/><text x="14.9744%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="14.7244%" y="229" width="0.3150%" height="15" fill="rgb(229,92,13)" fg:x="187" fg:w="4"/><text x="14.9744%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="14.9606%" y="213" width="0.0787%" height="15" fill="rgb(245,98,39)" fg:x="190" fg:w="1"/><text x="15.2106%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9606%" y="197" width="0.0787%" height="15" fill="rgb(234,135,48)" fg:x="190" fg:w="1"/><text x="15.2106%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0394%" y="405" width="0.0787%" height="15" fill="rgb(230,98,28)" fg:x="191" fg:w="1"/><text x="15.2894%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.1181%" y="405" width="0.0787%" height="15" fill="rgb(223,121,0)" fg:x="192" fg:w="1"/><text x="15.3681%" y="415.50"></text></g><g><title>plugins_core::tools::get_contained_keys (14 samples, 1.10%)</title><rect x="14.1732%" y="485" width="1.1024%" height="15" fill="rgb(234,173,33)" fg:x="180" fg:w="14"/><text x="14.4232%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (14 samples, 1.10%)</title><rect x="14.1732%" y="469" width="1.1024%" height="15" fill="rgb(245,47,8)" fg:x="180" fg:w="14"/><text x="14.4232%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (13 samples, 1.02%)</title><rect x="14.2520%" y="453" width="1.0236%" height="15" fill="rgb(205,17,20)" fg:x="181" fg:w="13"/><text x="14.5020%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="15.0394%" y="437" width="0.2362%" height="15" fill="rgb(232,151,16)" fg:x="191" fg:w="3"/><text x="15.2894%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.0394%" y="421" width="0.2362%" height="15" fill="rgb(208,30,32)" fg:x="191" fg:w="3"/><text x="15.2894%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.1969%" y="405" width="0.0787%" height="15" fill="rgb(254,26,3)" fg:x="193" fg:w="1"/><text x="15.4469%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.89%)</title><rect x="13.5433%" y="517" width="1.8898%" height="15" fill="rgb(240,177,30)" fg:x="172" fg:w="24"/><text x="13.7933%" y="527.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (24 samples, 1.89%)</title><rect x="13.5433%" y="501" width="1.8898%" height="15" fill="rgb(248,76,44)" fg:x="172" fg:w="24"/><text x="13.7933%" y="511.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="15.2756%" y="485" width="0.1575%" height="15" fill="rgb(241,186,54)" fg:x="194" fg:w="2"/><text x="15.5256%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="15.2756%" y="469" width="0.1575%" height="15" fill="rgb(249,171,29)" fg:x="194" fg:w="2"/><text x="15.5256%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="15.2756%" y="453" width="0.1575%" height="15" fill="rgb(237,151,44)" fg:x="194" fg:w="2"/><text x="15.5256%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.2756%" y="437" width="0.1575%" height="15" fill="rgb(228,174,30)" fg:x="194" fg:w="2"/><text x="15.5256%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3543%" y="421" width="0.0787%" height="15" fill="rgb(252,14,37)" fg:x="195" fg:w="1"/><text x="15.6043%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.3543%" y="405" width="0.0787%" height="15" fill="rgb(207,111,40)" fg:x="195" fg:w="1"/><text x="15.6043%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="15.7480%" y="453" width="0.0787%" height="15" fill="rgb(248,171,54)" fg:x="200" fg:w="1"/><text x="15.9980%" y="463.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="15.7480%" y="437" width="0.0787%" height="15" fill="rgb(211,127,2)" fg:x="200" fg:w="1"/><text x="15.9980%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="15.7480%" y="469" width="0.1575%" height="15" fill="rgb(236,87,47)" fg:x="200" fg:w="2"/><text x="15.9980%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="15.8268%" y="453" width="0.0787%" height="15" fill="rgb(223,190,45)" fg:x="201" fg:w="1"/><text x="16.0768%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.8268%" y="437" width="0.0787%" height="15" fill="rgb(215,5,16)" fg:x="201" fg:w="1"/><text x="16.0768%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.8268%" y="421" width="0.0787%" height="15" fill="rgb(252,82,33)" fg:x="201" fg:w="1"/><text x="16.0768%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.8268%" y="405" width="0.0787%" height="15" fill="rgb(247,213,44)" fg:x="201" fg:w="1"/><text x="16.0768%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.8268%" y="389" width="0.0787%" height="15" fill="rgb(205,196,44)" fg:x="201" fg:w="1"/><text x="16.0768%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="15.8268%" y="373" width="0.0787%" height="15" fill="rgb(237,96,54)" fg:x="201" fg:w="1"/><text x="16.0768%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8268%" y="357" width="0.0787%" height="15" fill="rgb(230,113,34)" fg:x="201" fg:w="1"/><text x="16.0768%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="16.6929%" y="165" width="0.1575%" height="15" fill="rgb(221,224,12)" fg:x="212" fg:w="2"/><text x="16.9429%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="16.6929%" y="149" width="0.1575%" height="15" fill="rgb(219,112,44)" fg:x="212" fg:w="2"/><text x="16.9429%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.7717%" y="133" width="0.0787%" height="15" fill="rgb(210,31,13)" fg:x="213" fg:w="1"/><text x="17.0217%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7717%" y="117" width="0.0787%" height="15" fill="rgb(230,25,16)" fg:x="213" fg:w="1"/><text x="17.0217%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.7717%" y="101" width="0.0787%" height="15" fill="rgb(246,108,53)" fg:x="213" fg:w="1"/><text x="17.0217%" y="111.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="16.7717%" y="85" width="0.0787%" height="15" fill="rgb(241,172,50)" fg:x="213" fg:w="1"/><text x="17.0217%" y="95.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.47%)</title><rect x="16.4567%" y="213" width="0.4724%" height="15" fill="rgb(235,141,10)" fg:x="209" fg:w="6"/><text x="16.7067%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="16.5354%" y="197" width="0.3937%" height="15" fill="rgb(220,174,43)" fg:x="210" fg:w="5"/><text x="16.7854%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.39%)</title><rect x="16.5354%" y="181" width="0.3937%" height="15" fill="rgb(215,181,40)" fg:x="210" fg:w="5"/><text x="16.7854%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.8504%" y="165" width="0.0787%" height="15" fill="rgb(230,97,2)" fg:x="214" fg:w="1"/><text x="17.1004%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8504%" y="149" width="0.0787%" height="15" fill="rgb(211,25,27)" fg:x="214" fg:w="1"/><text x="17.1004%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.79%)</title><rect x="16.2205%" y="261" width="0.7874%" height="15" fill="rgb(230,87,26)" fg:x="206" fg:w="10"/><text x="16.4705%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="16.2992%" y="245" width="0.7087%" height="15" fill="rgb(227,160,17)" fg:x="207" fg:w="9"/><text x="16.5492%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.71%)</title><rect x="16.2992%" y="229" width="0.7087%" height="15" fill="rgb(244,85,34)" fg:x="207" fg:w="9"/><text x="16.5492%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9291%" y="213" width="0.0787%" height="15" fill="rgb(207,70,0)" fg:x="215" fg:w="1"/><text x="17.1791%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9291%" y="197" width="0.0787%" height="15" fill="rgb(223,129,7)" fg:x="215" fg:w="1"/><text x="17.1791%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.87%)</title><rect x="16.2205%" y="277" width="0.8661%" height="15" fill="rgb(246,105,7)" fg:x="206" fg:w="11"/><text x="16.4705%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.0079%" y="261" width="0.0787%" height="15" fill="rgb(215,154,42)" fg:x="216" fg:w="1"/><text x="17.2579%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0079%" y="245" width="0.0787%" height="15" fill="rgb(220,215,30)" fg:x="216" fg:w="1"/><text x="17.2579%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.94%)</title><rect x="16.2205%" y="293" width="0.9449%" height="15" fill="rgb(228,81,51)" fg:x="206" fg:w="12"/><text x="16.4705%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.0866%" y="277" width="0.0787%" height="15" fill="rgb(247,71,54)" fg:x="217" fg:w="1"/><text x="17.3366%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0866%" y="261" width="0.0787%" height="15" fill="rgb(234,176,34)" fg:x="217" fg:w="1"/><text x="17.3366%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.02%)</title><rect x="16.2205%" y="309" width="1.0236%" height="15" fill="rgb(241,103,54)" fg:x="206" fg:w="13"/><text x="16.4705%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.1654%" y="293" width="0.0787%" height="15" fill="rgb(228,22,34)" fg:x="218" fg:w="1"/><text x="17.4154%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="17.1654%" y="277" width="0.0787%" height="15" fill="rgb(241,179,48)" fg:x="218" fg:w="1"/><text x="17.4154%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="17.1654%" y="261" width="0.0787%" height="15" fill="rgb(235,167,37)" fg:x="218" fg:w="1"/><text x="17.4154%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.1654%" y="245" width="0.0787%" height="15" fill="rgb(213,109,30)" fg:x="218" fg:w="1"/><text x="17.4154%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="17.1654%" y="229" width="0.0787%" height="15" fill="rgb(222,172,16)" fg:x="218" fg:w="1"/><text x="17.4154%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (16 samples, 1.26%)</title><rect x="16.0630%" y="357" width="1.2598%" height="15" fill="rgb(233,192,5)" fg:x="204" fg:w="16"/><text x="16.3130%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.18%)</title><rect x="16.1417%" y="341" width="1.1811%" height="15" fill="rgb(247,189,41)" fg:x="205" fg:w="15"/><text x="16.3917%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.18%)</title><rect x="16.1417%" y="325" width="1.1811%" height="15" fill="rgb(218,134,47)" fg:x="205" fg:w="15"/><text x="16.3917%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2441%" y="309" width="0.0787%" height="15" fill="rgb(216,29,3)" fg:x="219" fg:w="1"/><text x="17.4941%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (19 samples, 1.50%)</title><rect x="15.9843%" y="405" width="1.4961%" height="15" fill="rgb(246,140,12)" fg:x="203" fg:w="19"/><text x="16.2343%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (19 samples, 1.50%)</title><rect x="15.9843%" y="389" width="1.4961%" height="15" fill="rgb(230,136,11)" fg:x="203" fg:w="19"/><text x="16.2343%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 1.50%)</title><rect x="15.9843%" y="373" width="1.4961%" height="15" fill="rgb(247,22,47)" fg:x="203" fg:w="19"/><text x="16.2343%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="17.3228%" y="357" width="0.1575%" height="15" fill="rgb(218,84,22)" fg:x="220" fg:w="2"/><text x="17.5728%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.4016%" y="341" width="0.0787%" height="15" fill="rgb(216,87,39)" fg:x="221" fg:w="1"/><text x="17.6516%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (22 samples, 1.73%)</title><rect x="15.9055%" y="453" width="1.7323%" height="15" fill="rgb(221,178,8)" fg:x="202" fg:w="22"/><text x="16.1555%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (22 samples, 1.73%)</title><rect x="15.9055%" y="437" width="1.7323%" height="15" fill="rgb(230,42,11)" fg:x="202" fg:w="22"/><text x="16.1555%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 1.73%)</title><rect x="15.9055%" y="421" width="1.7323%" height="15" fill="rgb(237,229,4)" fg:x="202" fg:w="22"/><text x="16.1555%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="17.4803%" y="405" width="0.1575%" height="15" fill="rgb(222,31,33)" fg:x="222" fg:w="2"/><text x="17.7303%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="17.4803%" y="389" width="0.1575%" height="15" fill="rgb(210,17,39)" fg:x="222" fg:w="2"/><text x="17.7303%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.5591%" y="373" width="0.0787%" height="15" fill="rgb(244,93,20)" fg:x="223" fg:w="1"/><text x="17.8091%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6378%" y="405" width="0.0787%" height="15" fill="rgb(210,40,47)" fg:x="224" fg:w="1"/><text x="17.8878%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7165%" y="405" width="0.0787%" height="15" fill="rgb(239,211,47)" fg:x="225" fg:w="1"/><text x="17.9665%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.7165%" y="389" width="0.0787%" height="15" fill="rgb(251,223,49)" fg:x="225" fg:w="1"/><text x="17.9665%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.7953%" y="373" width="0.0787%" height="15" fill="rgb(221,149,5)" fg:x="226" fg:w="1"/><text x="18.0453%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="17.8740%" y="373" width="0.0787%" height="15" fill="rgb(219,224,51)" fg:x="227" fg:w="1"/><text x="18.1240%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.9528%" y="325" width="0.0787%" height="15" fill="rgb(223,7,8)" fg:x="228" fg:w="1"/><text x="18.2028%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1890%" y="309" width="0.0787%" height="15" fill="rgb(241,217,22)" fg:x="231" fg:w="1"/><text x="18.4390%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.39%)</title><rect x="17.9528%" y="357" width="0.3937%" height="15" fill="rgb(248,209,0)" fg:x="228" fg:w="5"/><text x="18.2028%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.39%)</title><rect x="17.9528%" y="341" width="0.3937%" height="15" fill="rgb(217,205,4)" fg:x="228" fg:w="5"/><text x="18.2028%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="18.0315%" y="325" width="0.3150%" height="15" fill="rgb(228,124,39)" fg:x="229" fg:w="4"/><text x="18.2815%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2677%" y="309" width="0.0787%" height="15" fill="rgb(250,116,42)" fg:x="232" fg:w="1"/><text x="18.5177%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2677%" y="293" width="0.0787%" height="15" fill="rgb(223,202,9)" fg:x="232" fg:w="1"/><text x="18.5177%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.4252%" y="341" width="0.0787%" height="15" fill="rgb(242,222,40)" fg:x="234" fg:w="1"/><text x="18.6752%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="18.5039%" y="277" width="0.0787%" height="15" fill="rgb(229,99,46)" fg:x="235" fg:w="1"/><text x="18.7539%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.5039%" y="341" width="0.1575%" height="15" fill="rgb(225,56,46)" fg:x="235" fg:w="2"/><text x="18.7539%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.5039%" y="325" width="0.1575%" height="15" fill="rgb(227,94,5)" fg:x="235" fg:w="2"/><text x="18.7539%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="18.5039%" y="309" width="0.1575%" height="15" fill="rgb(205,112,38)" fg:x="235" fg:w="2"/><text x="18.7539%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="18.5039%" y="293" width="0.1575%" height="15" fill="rgb(231,133,46)" fg:x="235" fg:w="2"/><text x="18.7539%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.5827%" y="277" width="0.0787%" height="15" fill="rgb(217,16,9)" fg:x="236" fg:w="1"/><text x="18.8327%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="18.5827%" y="261" width="0.0787%" height="15" fill="rgb(249,173,9)" fg:x="236" fg:w="1"/><text x="18.8327%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.5827%" y="245" width="0.0787%" height="15" fill="rgb(205,163,53)" fg:x="236" fg:w="1"/><text x="18.8327%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5827%" y="229" width="0.0787%" height="15" fill="rgb(217,54,41)" fg:x="236" fg:w="1"/><text x="18.8327%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5827%" y="213" width="0.0787%" height="15" fill="rgb(228,216,12)" fg:x="236" fg:w="1"/><text x="18.8327%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.5827%" y="197" width="0.0787%" height="15" fill="rgb(244,228,15)" fg:x="236" fg:w="1"/><text x="18.8327%" y="207.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.02%)</title><rect x="17.7953%" y="389" width="1.0236%" height="15" fill="rgb(221,176,53)" fg:x="226" fg:w="13"/><text x="18.0453%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.87%)</title><rect x="17.9528%" y="373" width="0.8661%" height="15" fill="rgb(205,94,34)" fg:x="228" fg:w="11"/><text x="18.2028%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.47%)</title><rect x="18.3465%" y="357" width="0.4724%" height="15" fill="rgb(213,110,48)" fg:x="233" fg:w="6"/><text x="18.5965%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.6614%" y="341" width="0.1575%" height="15" fill="rgb(236,142,28)" fg:x="237" fg:w="2"/><text x="18.9114%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8189%" y="357" width="0.0787%" height="15" fill="rgb(225,135,29)" fg:x="239" fg:w="1"/><text x="19.0689%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (69 samples, 5.43%)</title><rect x="13.5433%" y="533" width="5.4331%" height="15" fill="rgb(252,45,31)" fg:x="172" fg:w="69"/><text x="13.7933%" y="543.50">core::i..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (45 samples, 3.54%)</title><rect x="15.4331%" y="517" width="3.5433%" height="15" fill="rgb(211,187,50)" fg:x="196" fg:w="45"/><text x="15.6831%" y="527.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (43 samples, 3.39%)</title><rect x="15.5906%" y="501" width="3.3858%" height="15" fill="rgb(229,109,7)" fg:x="198" fg:w="43"/><text x="15.8406%" y="511.50">&lt;co..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (42 samples, 3.31%)</title><rect x="15.6693%" y="485" width="3.3071%" height="15" fill="rgb(251,131,51)" fg:x="199" fg:w="42"/><text x="15.9193%" y="495.50">plu..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (39 samples, 3.07%)</title><rect x="15.9055%" y="469" width="3.0709%" height="15" fill="rgb(251,180,35)" fg:x="202" fg:w="39"/><text x="16.1555%" y="479.50">&lt;rp..</text></g><g><title>kernel::model::EntityPtr::to_json_value (17 samples, 1.34%)</title><rect x="17.6378%" y="453" width="1.3386%" height="15" fill="rgb(211,46,32)" fg:x="224" fg:w="17"/><text x="17.8878%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.34%)</title><rect x="17.6378%" y="437" width="1.3386%" height="15" fill="rgb(248,123,17)" fg:x="224" fg:w="17"/><text x="17.8878%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.34%)</title><rect x="17.6378%" y="421" width="1.3386%" height="15" fill="rgb(227,141,18)" fg:x="224" fg:w="17"/><text x="17.8878%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.18%)</title><rect x="17.7953%" y="405" width="1.1811%" height="15" fill="rgb(216,102,9)" fg:x="226" fg:w="15"/><text x="18.0453%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="18.8189%" y="389" width="0.1575%" height="15" fill="rgb(253,47,13)" fg:x="239" fg:w="2"/><text x="19.0689%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="18.8189%" y="373" width="0.1575%" height="15" fill="rgb(226,93,23)" fg:x="239" fg:w="2"/><text x="19.0689%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.8976%" y="357" width="0.0787%" height="15" fill="rgb(247,104,17)" fg:x="240" fg:w="1"/><text x="19.1476%" y="367.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (78 samples, 6.14%)</title><rect x="12.9134%" y="597" width="6.1417%" height="15" fill="rgb(233,203,26)" fg:x="164" fg:w="78"/><text x="13.1634%" y="607.50">kernel::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (77 samples, 6.06%)</title><rect x="12.9921%" y="581" width="6.0630%" height="15" fill="rgb(244,98,49)" fg:x="165" fg:w="77"/><text x="13.2421%" y="591.50">&lt;plugins..</text></g><g><title>plugins_rpc::querying::have_surroundings (73 samples, 5.75%)</title><rect x="13.3071%" y="565" width="5.7480%" height="15" fill="rgb(235,134,22)" fg:x="169" fg:w="73"/><text x="13.5571%" y="575.50">plugins..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (73 samples, 5.75%)</title><rect x="13.3071%" y="549" width="5.7480%" height="15" fill="rgb(221,70,32)" fg:x="169" fg:w="73"/><text x="13.5571%" y="559.50">&lt;plugin..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9764%" y="533" width="0.0787%" height="15" fill="rgb(238,15,50)" fg:x="241" fg:w="1"/><text x="19.2264%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9764%" y="517" width="0.0787%" height="15" fill="rgb(215,221,48)" fg:x="241" fg:w="1"/><text x="19.2264%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="18.9764%" y="501" width="0.0787%" height="15" fill="rgb(236,73,3)" fg:x="241" fg:w="1"/><text x="19.2264%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="19.2126%" y="421" width="0.0787%" height="15" fill="rgb(250,107,11)" fg:x="244" fg:w="1"/><text x="19.4626%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="19.2126%" y="405" width="0.0787%" height="15" fill="rgb(242,39,14)" fg:x="244" fg:w="1"/><text x="19.4626%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="19.2126%" y="389" width="0.0787%" height="15" fill="rgb(248,164,37)" fg:x="244" fg:w="1"/><text x="19.4626%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="19.2126%" y="373" width="0.0787%" height="15" fill="rgb(217,60,12)" fg:x="244" fg:w="1"/><text x="19.4626%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="19.2913%" y="405" width="0.0787%" height="15" fill="rgb(240,125,29)" fg:x="245" fg:w="1"/><text x="19.5413%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2913%" y="389" width="0.0787%" height="15" fill="rgb(208,207,28)" fg:x="245" fg:w="1"/><text x="19.5413%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3701%" y="357" width="0.0787%" height="15" fill="rgb(209,159,27)" fg:x="246" fg:w="1"/><text x="19.6201%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3701%" y="341" width="0.0787%" height="15" fill="rgb(251,176,53)" fg:x="246" fg:w="1"/><text x="19.6201%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3701%" y="325" width="0.0787%" height="15" fill="rgb(211,85,7)" fg:x="246" fg:w="1"/><text x="19.6201%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3701%" y="309" width="0.0787%" height="15" fill="rgb(216,64,54)" fg:x="246" fg:w="1"/><text x="19.6201%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4488%" y="357" width="0.0787%" height="15" fill="rgb(217,54,24)" fg:x="247" fg:w="1"/><text x="19.6988%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.31%)</title><rect x="19.3701%" y="373" width="0.3150%" height="15" fill="rgb(208,206,53)" fg:x="246" fg:w="4"/><text x="19.6201%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.5276%" y="357" width="0.1575%" height="15" fill="rgb(251,74,39)" fg:x="248" fg:w="2"/><text x="19.7776%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (9 samples, 0.71%)</title><rect x="19.2913%" y="421" width="0.7087%" height="15" fill="rgb(226,47,5)" fg:x="245" fg:w="9"/><text x="19.5413%" y="431.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.63%)</title><rect x="19.3701%" y="405" width="0.6299%" height="15" fill="rgb(234,111,33)" fg:x="246" fg:w="8"/><text x="19.6201%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.63%)</title><rect x="19.3701%" y="389" width="0.6299%" height="15" fill="rgb(251,14,10)" fg:x="246" fg:w="8"/><text x="19.6201%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="19.6850%" y="373" width="0.3150%" height="15" fill="rgb(232,43,0)" fg:x="250" fg:w="4"/><text x="19.9350%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="19.6850%" y="357" width="0.3150%" height="15" fill="rgb(222,68,43)" fg:x="250" fg:w="4"/><text x="19.9350%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="19.7638%" y="341" width="0.2362%" height="15" fill="rgb(217,24,23)" fg:x="251" fg:w="3"/><text x="20.0138%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.7638%" y="325" width="0.2362%" height="15" fill="rgb(229,209,14)" fg:x="251" fg:w="3"/><text x="20.0138%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="19.7638%" y="309" width="0.2362%" height="15" fill="rgb(250,149,48)" fg:x="251" fg:w="3"/><text x="20.0138%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="19.7638%" y="293" width="0.2362%" height="15" fill="rgb(210,120,37)" fg:x="251" fg:w="3"/><text x="20.0138%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="19.7638%" y="277" width="0.2362%" height="15" fill="rgb(210,21,8)" fg:x="251" fg:w="3"/><text x="20.0138%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="19.8425%" y="261" width="0.1575%" height="15" fill="rgb(243,145,7)" fg:x="252" fg:w="2"/><text x="20.0925%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.9213%" y="245" width="0.0787%" height="15" fill="rgb(238,178,32)" fg:x="253" fg:w="1"/><text x="20.1713%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.9213%" y="229" width="0.0787%" height="15" fill="rgb(222,4,10)" fg:x="253" fg:w="1"/><text x="20.1713%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.9213%" y="213" width="0.0787%" height="15" fill="rgb(239,7,37)" fg:x="253" fg:w="1"/><text x="20.1713%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.1575%" y="309" width="0.1575%" height="15" fill="rgb(215,31,37)" fg:x="256" fg:w="2"/><text x="20.4075%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.2362%" y="293" width="0.0787%" height="15" fill="rgb(224,83,33)" fg:x="257" fg:w="1"/><text x="20.4862%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="20.1575%" y="325" width="0.2362%" height="15" fill="rgb(239,55,3)" fg:x="256" fg:w="3"/><text x="20.4075%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.3150%" y="309" width="0.0787%" height="15" fill="rgb(247,92,11)" fg:x="258" fg:w="1"/><text x="20.5650%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.3150%" y="293" width="0.0787%" height="15" fill="rgb(239,200,7)" fg:x="258" fg:w="1"/><text x="20.5650%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.3150%" y="277" width="0.0787%" height="15" fill="rgb(227,115,8)" fg:x="258" fg:w="1"/><text x="20.5650%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.3150%" y="261" width="0.0787%" height="15" fill="rgb(215,189,27)" fg:x="258" fg:w="1"/><text x="20.5650%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.3150%" y="245" width="0.0787%" height="15" fill="rgb(251,216,39)" fg:x="258" fg:w="1"/><text x="20.5650%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.3150%" y="229" width="0.0787%" height="15" fill="rgb(207,29,47)" fg:x="258" fg:w="1"/><text x="20.5650%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.3150%" y="213" width="0.0787%" height="15" fill="rgb(210,71,34)" fg:x="258" fg:w="1"/><text x="20.5650%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.3150%" y="197" width="0.0787%" height="15" fill="rgb(253,217,51)" fg:x="258" fg:w="1"/><text x="20.5650%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.3150%" y="181" width="0.0787%" height="15" fill="rgb(222,117,46)" fg:x="258" fg:w="1"/><text x="20.5650%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.3150%" y="165" width="0.0787%" height="15" fill="rgb(226,132,6)" fg:x="258" fg:w="1"/><text x="20.5650%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.3150%" y="149" width="0.0787%" height="15" fill="rgb(254,145,51)" fg:x="258" fg:w="1"/><text x="20.5650%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3150%" y="133" width="0.0787%" height="15" fill="rgb(231,199,27)" fg:x="258" fg:w="1"/><text x="20.5650%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.39%)</title><rect x="20.0787%" y="357" width="0.3937%" height="15" fill="rgb(245,158,14)" fg:x="255" fg:w="5"/><text x="20.3287%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.39%)</title><rect x="20.0787%" y="341" width="0.3937%" height="15" fill="rgb(240,113,14)" fg:x="255" fg:w="5"/><text x="20.3287%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3937%" y="325" width="0.0787%" height="15" fill="rgb(210,20,13)" fg:x="259" fg:w="1"/><text x="20.6437%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.47%)</title><rect x="20.0787%" y="373" width="0.4724%" height="15" fill="rgb(241,144,13)" fg:x="255" fg:w="6"/><text x="20.3287%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.4724%" y="357" width="0.0787%" height="15" fill="rgb(235,43,34)" fg:x="260" fg:w="1"/><text x="20.7224%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.4724%" y="341" width="0.0787%" height="15" fill="rgb(208,36,20)" fg:x="260" fg:w="1"/><text x="20.7224%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.4724%" y="325" width="0.0787%" height="15" fill="rgb(239,204,10)" fg:x="260" fg:w="1"/><text x="20.7224%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.4724%" y="309" width="0.0787%" height="15" fill="rgb(217,84,43)" fg:x="260" fg:w="1"/><text x="20.7224%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.4724%" y="293" width="0.0787%" height="15" fill="rgb(241,170,50)" fg:x="260" fg:w="1"/><text x="20.7224%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="20.4724%" y="277" width="0.0787%" height="15" fill="rgb(226,205,29)" fg:x="260" fg:w="1"/><text x="20.7224%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="20.4724%" y="261" width="0.0787%" height="15" fill="rgb(233,113,1)" fg:x="260" fg:w="1"/><text x="20.7224%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="20.6299%" y="341" width="0.2362%" height="15" fill="rgb(253,98,13)" fg:x="262" fg:w="3"/><text x="20.8799%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="20.6299%" y="325" width="0.2362%" height="15" fill="rgb(211,115,12)" fg:x="262" fg:w="3"/><text x="20.8799%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="20.7087%" y="309" width="0.1575%" height="15" fill="rgb(208,12,16)" fg:x="263" fg:w="2"/><text x="20.9587%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.7087%" y="293" width="0.1575%" height="15" fill="rgb(237,193,54)" fg:x="263" fg:w="2"/><text x="20.9587%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.7874%" y="277" width="0.0787%" height="15" fill="rgb(243,22,42)" fg:x="264" fg:w="1"/><text x="21.0374%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.7874%" y="261" width="0.0787%" height="15" fill="rgb(233,151,36)" fg:x="264" fg:w="1"/><text x="21.0374%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.7874%" y="245" width="0.0787%" height="15" fill="rgb(237,57,45)" fg:x="264" fg:w="1"/><text x="21.0374%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.7874%" y="229" width="0.0787%" height="15" fill="rgb(221,88,17)" fg:x="264" fg:w="1"/><text x="21.0374%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (12 samples, 0.94%)</title><rect x="20.0000%" y="421" width="0.9449%" height="15" fill="rgb(230,79,15)" fg:x="254" fg:w="12"/><text x="20.2500%" y="431.50"></text></g><g><title>kernel::model::props::load_props (11 samples, 0.87%)</title><rect x="20.0787%" y="405" width="0.8661%" height="15" fill="rgb(213,57,13)" fg:x="255" fg:w="11"/><text x="20.3287%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (11 samples, 0.87%)</title><rect x="20.0787%" y="389" width="0.8661%" height="15" fill="rgb(222,116,39)" fg:x="255" fg:w="11"/><text x="20.3287%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="20.5512%" y="373" width="0.3937%" height="15" fill="rgb(245,107,2)" fg:x="261" fg:w="5"/><text x="20.8012%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="20.5512%" y="357" width="0.3937%" height="15" fill="rgb(238,1,10)" fg:x="261" fg:w="5"/><text x="20.8012%" y="367.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="20.8661%" y="341" width="0.0787%" height="15" fill="rgb(249,4,48)" fg:x="265" fg:w="1"/><text x="21.1161%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="20.9449%" y="421" width="0.1575%" height="15" fill="rgb(223,151,18)" fg:x="266" fg:w="2"/><text x="21.1949%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="21.0236%" y="405" width="0.0787%" height="15" fill="rgb(227,65,43)" fg:x="267" fg:w="1"/><text x="21.2736%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="21.0236%" y="389" width="0.0787%" height="15" fill="rgb(218,40,45)" fg:x="267" fg:w="1"/><text x="21.2736%" y="399.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="21.0236%" y="373" width="0.0787%" height="15" fill="rgb(252,121,31)" fg:x="267" fg:w="1"/><text x="21.2736%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="21.0236%" y="357" width="0.0787%" height="15" fill="rgb(219,158,43)" fg:x="267" fg:w="1"/><text x="21.2736%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="21.0236%" y="341" width="0.0787%" height="15" fill="rgb(231,162,42)" fg:x="267" fg:w="1"/><text x="21.2736%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="21.0236%" y="325" width="0.0787%" height="15" fill="rgb(217,179,25)" fg:x="267" fg:w="1"/><text x="21.2736%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.0236%" y="309" width="0.0787%" height="15" fill="rgb(206,212,31)" fg:x="267" fg:w="1"/><text x="21.2736%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.0236%" y="293" width="0.0787%" height="15" fill="rgb(235,144,12)" fg:x="267" fg:w="1"/><text x="21.2736%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="21.0236%" y="277" width="0.0787%" height="15" fill="rgb(213,51,10)" fg:x="267" fg:w="1"/><text x="21.2736%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="21.0236%" y="261" width="0.0787%" height="15" fill="rgb(231,145,14)" fg:x="267" fg:w="1"/><text x="21.2736%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="21.0236%" y="245" width="0.0787%" height="15" fill="rgb(235,15,28)" fg:x="267" fg:w="1"/><text x="21.2736%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="21.0236%" y="229" width="0.0787%" height="15" fill="rgb(237,206,10)" fg:x="267" fg:w="1"/><text x="21.2736%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="21.0236%" y="213" width="0.0787%" height="15" fill="rgb(236,227,27)" fg:x="267" fg:w="1"/><text x="21.2736%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="21.1811%" y="357" width="0.0787%" height="15" fill="rgb(246,83,35)" fg:x="269" fg:w="1"/><text x="21.4311%" y="367.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.1811%" y="341" width="0.0787%" height="15" fill="rgb(220,136,24)" fg:x="269" fg:w="1"/><text x="21.4311%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="21.1811%" y="325" width="0.0787%" height="15" fill="rgb(217,3,25)" fg:x="269" fg:w="1"/><text x="21.4311%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="21.3386%" y="245" width="0.0787%" height="15" fill="rgb(239,24,14)" fg:x="271" fg:w="1"/><text x="21.5886%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.4173%" y="245" width="0.0787%" height="15" fill="rgb(244,16,53)" fg:x="272" fg:w="1"/><text x="21.6673%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.31%)</title><rect x="21.3386%" y="261" width="0.3150%" height="15" fill="rgb(208,175,44)" fg:x="271" fg:w="4"/><text x="21.5886%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="21.4961%" y="245" width="0.1575%" height="15" fill="rgb(252,18,48)" fg:x="273" fg:w="2"/><text x="21.7461%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="21.5748%" y="229" width="0.0787%" height="15" fill="rgb(234,199,32)" fg:x="274" fg:w="1"/><text x="21.8248%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.5748%" y="213" width="0.0787%" height="15" fill="rgb(225,77,54)" fg:x="274" fg:w="1"/><text x="21.8248%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.47%)</title><rect x="21.2598%" y="277" width="0.4724%" height="15" fill="rgb(225,42,25)" fg:x="270" fg:w="6"/><text x="21.5098%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="21.6535%" y="261" width="0.0787%" height="15" fill="rgb(242,227,46)" fg:x="275" fg:w="1"/><text x="21.9035%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="21.6535%" y="245" width="0.0787%" height="15" fill="rgb(246,197,35)" fg:x="275" fg:w="1"/><text x="21.9035%" y="255.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="21.7323%" y="245" width="0.0787%" height="15" fill="rgb(215,159,26)" fg:x="276" fg:w="1"/><text x="21.9823%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="21.2598%" y="341" width="0.6299%" height="15" fill="rgb(212,194,50)" fg:x="270" fg:w="8"/><text x="21.5098%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.63%)</title><rect x="21.2598%" y="325" width="0.6299%" height="15" fill="rgb(246,132,1)" fg:x="270" fg:w="8"/><text x="21.5098%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (8 samples, 0.63%)</title><rect x="21.2598%" y="309" width="0.6299%" height="15" fill="rgb(217,71,7)" fg:x="270" fg:w="8"/><text x="21.5098%" y="319.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (8 samples, 0.63%)</title><rect x="21.2598%" y="293" width="0.6299%" height="15" fill="rgb(252,59,32)" fg:x="270" fg:w="8"/><text x="21.5098%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="21.7323%" y="277" width="0.1575%" height="15" fill="rgb(253,204,25)" fg:x="276" fg:w="2"/><text x="21.9823%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="21.7323%" y="261" width="0.1575%" height="15" fill="rgb(232,21,16)" fg:x="276" fg:w="2"/><text x="21.9823%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="21.8110%" y="245" width="0.0787%" height="15" fill="rgb(248,90,29)" fg:x="277" fg:w="1"/><text x="22.0610%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8898%" y="325" width="0.0787%" height="15" fill="rgb(249,223,7)" fg:x="278" fg:w="1"/><text x="22.1398%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (19 samples, 1.50%)</title><rect x="22.2047%" y="261" width="1.4961%" height="15" fill="rgb(231,119,42)" fg:x="282" fg:w="19"/><text x="22.4547%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="23.5433%" y="245" width="0.1575%" height="15" fill="rgb(215,41,35)" fg:x="299" fg:w="2"/><text x="23.7933%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.57%)</title><rect x="22.2047%" y="277" width="1.5748%" height="15" fill="rgb(220,44,45)" fg:x="282" fg:w="20"/><text x="22.4547%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="23.7008%" y="261" width="0.0787%" height="15" fill="rgb(253,197,36)" fg:x="301" fg:w="1"/><text x="23.9508%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="23.9370%" y="261" width="0.0787%" height="15" fill="rgb(245,225,54)" fg:x="304" fg:w="1"/><text x="24.1870%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="23.9370%" y="245" width="0.0787%" height="15" fill="rgb(239,94,37)" fg:x="304" fg:w="1"/><text x="24.1870%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.9370%" y="229" width="0.0787%" height="15" fill="rgb(242,217,10)" fg:x="304" fg:w="1"/><text x="24.1870%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="24.0157%" y="261" width="0.3150%" height="15" fill="rgb(250,193,7)" fg:x="305" fg:w="4"/><text x="24.2657%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.63%)</title><rect x="23.7795%" y="277" width="0.6299%" height="15" fill="rgb(230,104,19)" fg:x="302" fg:w="8"/><text x="24.0295%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="24.3307%" y="261" width="0.0787%" height="15" fill="rgb(230,181,4)" fg:x="309" fg:w="1"/><text x="24.5807%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="24.3307%" y="245" width="0.0787%" height="15" fill="rgb(216,219,49)" fg:x="309" fg:w="1"/><text x="24.5807%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="24.3307%" y="229" width="0.0787%" height="15" fill="rgb(254,144,0)" fg:x="309" fg:w="1"/><text x="24.5807%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.3307%" y="213" width="0.0787%" height="15" fill="rgb(205,209,38)" fg:x="309" fg:w="1"/><text x="24.5807%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.5669%" y="213" width="0.0787%" height="15" fill="rgb(240,21,42)" fg:x="312" fg:w="1"/><text x="24.8169%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="24.6457%" y="213" width="0.0787%" height="15" fill="rgb(241,132,3)" fg:x="313" fg:w="1"/><text x="24.8957%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.6457%" y="197" width="0.0787%" height="15" fill="rgb(225,14,2)" fg:x="313" fg:w="1"/><text x="24.8957%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.6457%" y="181" width="0.0787%" height="15" fill="rgb(210,141,35)" fg:x="313" fg:w="1"/><text x="24.8957%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.6457%" y="165" width="0.0787%" height="15" fill="rgb(251,14,44)" fg:x="313" fg:w="1"/><text x="24.8957%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="24.7244%" y="213" width="0.0787%" height="15" fill="rgb(247,48,18)" fg:x="314" fg:w="1"/><text x="24.9744%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="24.7244%" y="197" width="0.0787%" height="15" fill="rgb(225,0,40)" fg:x="314" fg:w="1"/><text x="24.9744%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="24.8031%" y="197" width="0.0787%" height="15" fill="rgb(221,31,33)" fg:x="315" fg:w="1"/><text x="25.0531%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.8031%" y="181" width="0.0787%" height="15" fill="rgb(237,42,40)" fg:x="315" fg:w="1"/><text x="25.0531%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.8031%" y="165" width="0.0787%" height="15" fill="rgb(233,51,29)" fg:x="315" fg:w="1"/><text x="25.0531%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.8031%" y="149" width="0.0787%" height="15" fill="rgb(226,58,20)" fg:x="315" fg:w="1"/><text x="25.0531%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8819%" y="181" width="0.0787%" height="15" fill="rgb(208,98,7)" fg:x="316" fg:w="1"/><text x="25.1319%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (85 samples, 6.69%)</title><rect x="24.8031%" y="213" width="6.6929%" height="15" fill="rgb(228,143,44)" fg:x="315" fg:w="85"/><text x="25.0531%" y="223.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (84 samples, 6.61%)</title><rect x="24.8819%" y="197" width="6.6142%" height="15" fill="rgb(246,55,38)" fg:x="316" fg:w="84"/><text x="25.1319%" y="207.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (83 samples, 6.54%)</title><rect x="24.9606%" y="181" width="6.5354%" height="15" fill="rgb(247,87,16)" fg:x="317" fg:w="83"/><text x="25.2106%" y="191.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (11 samples, 0.87%)</title><rect x="31.4961%" y="213" width="0.8661%" height="15" fill="rgb(234,129,42)" fg:x="400" fg:w="11"/><text x="31.7461%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="32.1260%" y="197" width="0.2362%" height="15" fill="rgb(220,82,16)" fg:x="408" fg:w="3"/><text x="32.3760%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="32.3622%" y="213" width="0.0787%" height="15" fill="rgb(211,88,4)" fg:x="411" fg:w="1"/><text x="32.6122%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 8.03%)</title><rect x="24.4882%" y="261" width="8.0315%" height="15" fill="rgb(248,151,21)" fg:x="311" fg:w="102"/><text x="24.7382%" y="271.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (102 samples, 8.03%)</title><rect x="24.4882%" y="245" width="8.0315%" height="15" fill="rgb(238,163,6)" fg:x="311" fg:w="102"/><text x="24.7382%" y="255.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (102 samples, 8.03%)</title><rect x="24.4882%" y="229" width="8.0315%" height="15" fill="rgb(209,183,11)" fg:x="311" fg:w="102"/><text x="24.7382%" y="239.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="32.4409%" y="213" width="0.0787%" height="15" fill="rgb(219,37,20)" fg:x="412" fg:w="1"/><text x="32.6909%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.4409%" y="197" width="0.0787%" height="15" fill="rgb(210,158,4)" fg:x="412" fg:w="1"/><text x="32.6909%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5197%" y="261" width="0.0787%" height="15" fill="rgb(221,167,53)" fg:x="413" fg:w="1"/><text x="32.7697%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.6772%" y="245" width="0.0787%" height="15" fill="rgb(237,151,45)" fg:x="415" fg:w="1"/><text x="32.9272%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.7559%" y="245" width="0.0787%" height="15" fill="rgb(231,39,3)" fg:x="416" fg:w="1"/><text x="33.0059%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="32.8346%" y="245" width="0.3150%" height="15" fill="rgb(212,167,28)" fg:x="417" fg:w="4"/><text x="33.0846%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="32.9134%" y="229" width="0.2362%" height="15" fill="rgb(232,178,8)" fg:x="418" fg:w="3"/><text x="33.1634%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="32.9134%" y="213" width="0.2362%" height="15" fill="rgb(225,151,20)" fg:x="418" fg:w="3"/><text x="33.1634%" y="223.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="32.9134%" y="197" width="0.2362%" height="15" fill="rgb(238,3,37)" fg:x="418" fg:w="3"/><text x="33.1634%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.39%)</title><rect x="33.1496%" y="245" width="0.3937%" height="15" fill="rgb(251,147,42)" fg:x="421" fg:w="5"/><text x="33.3996%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (117 samples, 9.21%)</title><rect x="24.4094%" y="277" width="9.2126%" height="15" fill="rgb(208,173,10)" fg:x="310" fg:w="117"/><text x="24.6594%" y="287.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.02%)</title><rect x="32.5984%" y="261" width="1.0236%" height="15" fill="rgb(246,225,4)" fg:x="414" fg:w="13"/><text x="32.8484%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="33.5433%" y="245" width="0.0787%" height="15" fill="rgb(248,102,6)" fg:x="426" fg:w="1"/><text x="33.7933%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (149 samples, 11.73%)</title><rect x="21.9685%" y="293" width="11.7323%" height="15" fill="rgb(232,6,21)" fg:x="279" fg:w="149"/><text x="22.2185%" y="303.50">regex_automata::m..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="33.6220%" y="277" width="0.0787%" height="15" fill="rgb(221,179,22)" fg:x="427" fg:w="1"/><text x="33.8720%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="33.9370%" y="245" width="0.0787%" height="15" fill="rgb(252,50,20)" fg:x="431" fg:w="1"/><text x="34.1870%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="34.0157%" y="229" width="0.3150%" height="15" fill="rgb(222,56,38)" fg:x="432" fg:w="4"/><text x="34.2657%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="34.0157%" y="213" width="0.3150%" height="15" fill="rgb(206,193,29)" fg:x="432" fg:w="4"/><text x="34.2657%" y="223.50"></text></g><g><title>__libc_malloc (4 samples, 0.31%)</title><rect x="34.0157%" y="197" width="0.3150%" height="15" fill="rgb(239,192,45)" fg:x="432" fg:w="4"/><text x="34.2657%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.63%)</title><rect x="33.7795%" y="261" width="0.6299%" height="15" fill="rgb(254,18,36)" fg:x="429" fg:w="8"/><text x="34.0295%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.39%)</title><rect x="34.0157%" y="245" width="0.3937%" height="15" fill="rgb(221,127,11)" fg:x="432" fg:w="5"/><text x="34.2657%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="34.3307%" y="229" width="0.0787%" height="15" fill="rgb(234,146,35)" fg:x="436" fg:w="1"/><text x="34.5807%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="34.3307%" y="213" width="0.0787%" height="15" fill="rgb(254,201,37)" fg:x="436" fg:w="1"/><text x="34.5807%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="34.4094%" y="261" width="0.0787%" height="15" fill="rgb(211,202,23)" fg:x="437" fg:w="1"/><text x="34.6594%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.4094%" y="245" width="0.0787%" height="15" fill="rgb(237,91,2)" fg:x="437" fg:w="1"/><text x="34.6594%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.87%)</title><rect x="33.7008%" y="293" width="0.8661%" height="15" fill="rgb(226,228,36)" fg:x="428" fg:w="11"/><text x="33.9508%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.87%)</title><rect x="33.7008%" y="277" width="0.8661%" height="15" fill="rgb(213,63,50)" fg:x="428" fg:w="11"/><text x="33.9508%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="34.4882%" y="261" width="0.0787%" height="15" fill="rgb(235,194,19)" fg:x="438" fg:w="1"/><text x="34.7382%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (1 samples, 0.08%)</title><rect x="34.4882%" y="245" width="0.0787%" height="15" fill="rgb(207,204,18)" fg:x="438" fg:w="1"/><text x="34.7382%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (163 samples, 12.83%)</title><rect x="21.8898%" y="341" width="12.8346%" height="15" fill="rgb(248,8,7)" fg:x="278" fg:w="163"/><text x="22.1398%" y="351.50">&lt;regex::regex::stri..</text></g><g><title>regex::builders::Builder::build_one_string (162 samples, 12.76%)</title><rect x="21.9685%" y="325" width="12.7559%" height="15" fill="rgb(223,145,47)" fg:x="279" fg:w="162"/><text x="22.2185%" y="335.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (162 samples, 12.76%)</title><rect x="21.9685%" y="309" width="12.7559%" height="15" fill="rgb(228,84,11)" fg:x="279" fg:w="162"/><text x="22.2185%" y="319.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="34.5669%" y="293" width="0.1575%" height="15" fill="rgb(218,76,45)" fg:x="439" fg:w="2"/><text x="34.8169%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="34.5669%" y="277" width="0.1575%" height="15" fill="rgb(223,80,15)" fg:x="439" fg:w="2"/><text x="34.8169%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="34.5669%" y="261" width="0.1575%" height="15" fill="rgb(219,218,33)" fg:x="439" fg:w="2"/><text x="34.8169%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="34.6457%" y="245" width="0.0787%" height="15" fill="rgb(208,51,11)" fg:x="440" fg:w="1"/><text x="34.8957%" y="255.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="34.6457%" y="229" width="0.0787%" height="15" fill="rgb(229,165,39)" fg:x="440" fg:w="1"/><text x="34.8957%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.7244%" y="309" width="0.0787%" height="15" fill="rgb(241,100,24)" fg:x="441" fg:w="1"/><text x="34.9744%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.7244%" y="293" width="0.0787%" height="15" fill="rgb(228,14,23)" fg:x="441" fg:w="1"/><text x="34.9744%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.7244%" y="277" width="0.0787%" height="15" fill="rgb(247,116,52)" fg:x="441" fg:w="1"/><text x="34.9744%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.8031%" y="293" width="0.0787%" height="15" fill="rgb(216,149,33)" fg:x="442" fg:w="1"/><text x="35.0531%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8031%" y="277" width="0.0787%" height="15" fill="rgb(238,142,29)" fg:x="442" fg:w="1"/><text x="35.0531%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.31%)</title><rect x="34.7244%" y="341" width="0.3150%" height="15" fill="rgb(224,83,40)" fg:x="441" fg:w="4"/><text x="34.9744%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.31%)</title><rect x="34.7244%" y="325" width="0.3150%" height="15" fill="rgb(234,165,11)" fg:x="441" fg:w="4"/><text x="34.9744%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="34.8031%" y="309" width="0.2362%" height="15" fill="rgb(215,96,23)" fg:x="442" fg:w="3"/><text x="35.0531%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="34.8819%" y="293" width="0.1575%" height="15" fill="rgb(233,179,26)" fg:x="443" fg:w="2"/><text x="35.1319%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.8819%" y="277" width="0.1575%" height="15" fill="rgb(225,129,33)" fg:x="443" fg:w="2"/><text x="35.1319%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="35.5906%" y="261" width="0.2362%" height="15" fill="rgb(237,49,13)" fg:x="452" fg:w="3"/><text x="35.8406%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="35.5906%" y="245" width="0.2362%" height="15" fill="rgb(211,3,31)" fg:x="452" fg:w="3"/><text x="35.8406%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="35.6693%" y="229" width="0.1575%" height="15" fill="rgb(216,152,19)" fg:x="453" fg:w="2"/><text x="35.9193%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="35.8268%" y="261" width="0.2362%" height="15" fill="rgb(251,121,35)" fg:x="455" fg:w="3"/><text x="36.0768%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.9843%" y="245" width="0.0787%" height="15" fill="rgb(210,217,47)" fg:x="457" fg:w="1"/><text x="36.2343%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="36.0630%" y="261" width="0.0787%" height="15" fill="rgb(244,116,22)" fg:x="458" fg:w="1"/><text x="36.3130%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.10%)</title><rect x="35.1181%" y="277" width="1.1024%" height="15" fill="rgb(228,17,21)" fg:x="446" fg:w="14"/><text x="35.3681%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="36.1417%" y="261" width="0.0787%" height="15" fill="rgb(240,149,34)" fg:x="459" fg:w="1"/><text x="36.3917%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.1417%" y="245" width="0.0787%" height="15" fill="rgb(208,125,47)" fg:x="459" fg:w="1"/><text x="36.3917%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.1417%" y="229" width="0.0787%" height="15" fill="rgb(249,186,39)" fg:x="459" fg:w="1"/><text x="36.3917%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.1417%" y="213" width="0.0787%" height="15" fill="rgb(240,220,33)" fg:x="459" fg:w="1"/><text x="36.3917%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.26%)</title><rect x="35.1181%" y="293" width="1.2598%" height="15" fill="rgb(243,110,23)" fg:x="446" fg:w="16"/><text x="35.3681%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="36.2205%" y="277" width="0.1575%" height="15" fill="rgb(219,163,46)" fg:x="460" fg:w="2"/><text x="36.4705%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="36.2205%" y="261" width="0.1575%" height="15" fill="rgb(216,126,30)" fg:x="460" fg:w="2"/><text x="36.4705%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.2205%" y="245" width="0.1575%" height="15" fill="rgb(208,139,11)" fg:x="460" fg:w="2"/><text x="36.4705%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2992%" y="229" width="0.0787%" height="15" fill="rgb(213,118,36)" fg:x="461" fg:w="1"/><text x="36.5492%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (196 samples, 15.43%)</title><rect x="21.2598%" y="357" width="15.4331%" height="15" fill="rgb(226,43,17)" fg:x="270" fg:w="196"/><text x="21.5098%" y="367.50">indefinite::helper::Help..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.65%)</title><rect x="35.0394%" y="341" width="1.6535%" height="15" fill="rgb(254,217,4)" fg:x="445" fg:w="21"/><text x="35.2894%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.65%)</title><rect x="35.0394%" y="325" width="1.6535%" height="15" fill="rgb(210,134,47)" fg:x="445" fg:w="21"/><text x="35.2894%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.65%)</title><rect x="35.0394%" y="309" width="1.6535%" height="15" fill="rgb(237,24,49)" fg:x="445" fg:w="21"/><text x="35.2894%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (4 samples, 0.31%)</title><rect x="36.3780%" y="293" width="0.3150%" height="15" fill="rgb(251,39,46)" fg:x="462" fg:w="4"/><text x="36.6280%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (4 samples, 0.31%)</title><rect x="36.3780%" y="277" width="0.3150%" height="15" fill="rgb(251,220,3)" fg:x="462" fg:w="4"/><text x="36.6280%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="36.4567%" y="261" width="0.2362%" height="15" fill="rgb(228,105,12)" fg:x="463" fg:w="3"/><text x="36.7067%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.5354%" y="245" width="0.1575%" height="15" fill="rgb(215,196,1)" fg:x="464" fg:w="2"/><text x="36.7854%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="36.5354%" y="229" width="0.1575%" height="15" fill="rgb(214,33,39)" fg:x="464" fg:w="2"/><text x="36.7854%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="36.7717%" y="325" width="0.0787%" height="15" fill="rgb(220,19,52)" fg:x="467" fg:w="1"/><text x="37.0217%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.7717%" y="309" width="0.0787%" height="15" fill="rgb(221,78,38)" fg:x="467" fg:w="1"/><text x="37.0217%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.7717%" y="293" width="0.0787%" height="15" fill="rgb(253,30,16)" fg:x="467" fg:w="1"/><text x="37.0217%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="37.0079%" y="293" width="0.1575%" height="15" fill="rgb(242,65,0)" fg:x="470" fg:w="2"/><text x="37.2579%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="37.0079%" y="277" width="0.1575%" height="15" fill="rgb(235,201,12)" fg:x="470" fg:w="2"/><text x="37.2579%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.0866%" y="261" width="0.0787%" height="15" fill="rgb(233,161,9)" fg:x="471" fg:w="1"/><text x="37.3366%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.31%)</title><rect x="37.1654%" y="293" width="0.3150%" height="15" fill="rgb(241,207,41)" fg:x="472" fg:w="4"/><text x="37.4154%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="37.1654%" y="277" width="0.3150%" height="15" fill="rgb(212,69,46)" fg:x="472" fg:w="4"/><text x="37.4154%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="37.2441%" y="261" width="0.2362%" height="15" fill="rgb(239,69,45)" fg:x="473" fg:w="3"/><text x="37.4941%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="37.2441%" y="245" width="0.2362%" height="15" fill="rgb(242,117,48)" fg:x="473" fg:w="3"/><text x="37.4941%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="37.3228%" y="229" width="0.1575%" height="15" fill="rgb(228,41,36)" fg:x="474" fg:w="2"/><text x="37.5728%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.4016%" y="213" width="0.0787%" height="15" fill="rgb(212,3,32)" fg:x="475" fg:w="1"/><text x="37.6516%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (2 samples, 0.16%)</title><rect x="37.4803%" y="293" width="0.1575%" height="15" fill="rgb(233,41,49)" fg:x="476" fg:w="2"/><text x="37.7303%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.5591%" y="277" width="0.0787%" height="15" fill="rgb(252,170,49)" fg:x="477" fg:w="1"/><text x="37.8091%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (35 samples, 2.76%)</title><rect x="37.7165%" y="277" width="2.7559%" height="15" fill="rgb(229,53,26)" fg:x="479" fg:w="35"/><text x="37.9665%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (34 samples, 2.68%)</title><rect x="37.7953%" y="261" width="2.6772%" height="15" fill="rgb(217,157,12)" fg:x="480" fg:w="34"/><text x="38.0453%" y="271.50">co..</text></g><g><title>__libc_free (5 samples, 0.39%)</title><rect x="40.0787%" y="245" width="0.3937%" height="15" fill="rgb(227,17,9)" fg:x="509" fg:w="5"/><text x="40.3287%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.39%)</title><rect x="40.4724%" y="261" width="0.3937%" height="15" fill="rgb(218,84,12)" fg:x="514" fg:w="5"/><text x="40.7224%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.47%)</title><rect x="40.4724%" y="277" width="0.4724%" height="15" fill="rgb(212,79,24)" fg:x="514" fg:w="6"/><text x="40.7224%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.8661%" y="261" width="0.0787%" height="15" fill="rgb(217,222,37)" fg:x="519" fg:w="1"/><text x="41.1161%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.8661%" y="245" width="0.0787%" height="15" fill="rgb(246,208,8)" fg:x="519" fg:w="1"/><text x="41.1161%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="40.8661%" y="229" width="0.0787%" height="15" fill="rgb(244,133,10)" fg:x="519" fg:w="1"/><text x="41.1161%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="41.1811%" y="245" width="0.1575%" height="15" fill="rgb(209,219,41)" fg:x="523" fg:w="2"/><text x="41.4311%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="41.1811%" y="229" width="0.1575%" height="15" fill="rgb(253,175,45)" fg:x="523" fg:w="2"/><text x="41.4311%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.1811%" y="213" width="0.1575%" height="15" fill="rgb(235,100,37)" fg:x="523" fg:w="2"/><text x="41.4311%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.1811%" y="197" width="0.1575%" height="15" fill="rgb(225,87,19)" fg:x="523" fg:w="2"/><text x="41.4311%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.47%)</title><rect x="41.8898%" y="213" width="0.4724%" height="15" fill="rgb(217,152,17)" fg:x="532" fg:w="6"/><text x="42.1398%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="41.8898%" y="197" width="0.4724%" height="15" fill="rgb(235,72,13)" fg:x="532" fg:w="6"/><text x="42.1398%" y="207.50"></text></g><g><title>realloc (6 samples, 0.47%)</title><rect x="41.8898%" y="181" width="0.4724%" height="15" fill="rgb(233,140,18)" fg:x="532" fg:w="6"/><text x="42.1398%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (16 samples, 1.26%)</title><rect x="41.3386%" y="245" width="1.2598%" height="15" fill="rgb(207,212,28)" fg:x="525" fg:w="16"/><text x="41.5886%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (12 samples, 0.94%)</title><rect x="41.6535%" y="229" width="0.9449%" height="15" fill="rgb(220,130,25)" fg:x="529" fg:w="12"/><text x="41.9035%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="42.3622%" y="213" width="0.2362%" height="15" fill="rgb(205,55,34)" fg:x="538" fg:w="3"/><text x="42.6122%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.5197%" y="197" width="0.0787%" height="15" fill="rgb(237,54,35)" fg:x="540" fg:w="1"/><text x="42.7697%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.5197%" y="181" width="0.0787%" height="15" fill="rgb(208,67,23)" fg:x="540" fg:w="1"/><text x="42.7697%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.79%)</title><rect x="42.5984%" y="245" width="0.7874%" height="15" fill="rgb(206,207,50)" fg:x="541" fg:w="10"/><text x="42.8484%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (10 samples, 0.79%)</title><rect x="42.5984%" y="229" width="0.7874%" height="15" fill="rgb(213,211,42)" fg:x="541" fg:w="10"/><text x="42.8484%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (9 samples, 0.71%)</title><rect x="42.6772%" y="213" width="0.7087%" height="15" fill="rgb(252,197,50)" fg:x="542" fg:w="9"/><text x="42.9272%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (32 samples, 2.52%)</title><rect x="40.9449%" y="277" width="2.5197%" height="15" fill="rgb(251,211,41)" fg:x="520" fg:w="32"/><text x="41.1949%" y="287.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (32 samples, 2.52%)</title><rect x="40.9449%" y="261" width="2.5197%" height="15" fill="rgb(229,211,5)" fg:x="520" fg:w="32"/><text x="41.1949%" y="271.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="43.3858%" y="245" width="0.0787%" height="15" fill="rgb(239,36,31)" fg:x="551" fg:w="1"/><text x="43.6358%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="43.4646%" y="229" width="0.0787%" height="15" fill="rgb(248,67,31)" fg:x="552" fg:w="1"/><text x="43.7146%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.4646%" y="213" width="0.0787%" height="15" fill="rgb(249,55,44)" fg:x="552" fg:w="1"/><text x="43.7146%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.4646%" y="197" width="0.0787%" height="15" fill="rgb(216,82,12)" fg:x="552" fg:w="1"/><text x="43.7146%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.4646%" y="181" width="0.0787%" height="15" fill="rgb(242,174,1)" fg:x="552" fg:w="1"/><text x="43.7146%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.47%)</title><rect x="44.7244%" y="165" width="0.4724%" height="15" fill="rgb(208,120,29)" fg:x="568" fg:w="6"/><text x="44.9744%" y="175.50"></text></g><g><title>__libc_free (4 samples, 0.31%)</title><rect x="45.1969%" y="165" width="0.3150%" height="15" fill="rgb(221,105,43)" fg:x="574" fg:w="4"/><text x="45.4469%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.47%)</title><rect x="45.5118%" y="165" width="0.4724%" height="15" fill="rgb(234,124,22)" fg:x="578" fg:w="6"/><text x="45.7618%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="45.7480%" y="149" width="0.2362%" height="15" fill="rgb(212,23,30)" fg:x="581" fg:w="3"/><text x="45.9980%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="45.7480%" y="133" width="0.2362%" height="15" fill="rgb(219,122,53)" fg:x="581" fg:w="3"/><text x="45.9980%" y="143.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="45.7480%" y="117" width="0.2362%" height="15" fill="rgb(248,84,24)" fg:x="581" fg:w="3"/><text x="45.9980%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="45.9843%" y="165" width="0.0787%" height="15" fill="rgb(245,115,18)" fg:x="584" fg:w="1"/><text x="46.2343%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="46.0630%" y="165" width="0.2362%" height="15" fill="rgb(227,176,51)" fg:x="585" fg:w="3"/><text x="46.3130%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.2205%" y="149" width="0.0787%" height="15" fill="rgb(229,63,42)" fg:x="587" fg:w="1"/><text x="46.4705%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.2205%" y="133" width="0.0787%" height="15" fill="rgb(247,202,24)" fg:x="587" fg:w="1"/><text x="46.4705%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="46.9291%" y="133" width="0.4724%" height="15" fill="rgb(244,173,20)" fg:x="596" fg:w="6"/><text x="47.1791%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.1654%" y="117" width="0.2362%" height="15" fill="rgb(242,81,47)" fg:x="599" fg:w="3"/><text x="47.4154%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="47.2441%" y="101" width="0.1575%" height="15" fill="rgb(231,185,54)" fg:x="600" fg:w="2"/><text x="47.4941%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (21 samples, 1.65%)</title><rect x="46.2992%" y="165" width="1.6535%" height="15" fill="rgb(243,55,32)" fg:x="588" fg:w="21"/><text x="46.5492%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (18 samples, 1.42%)</title><rect x="46.5354%" y="149" width="1.4173%" height="15" fill="rgb(208,167,19)" fg:x="591" fg:w="18"/><text x="46.7854%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.55%)</title><rect x="47.4016%" y="133" width="0.5512%" height="15" fill="rgb(231,72,35)" fg:x="602" fg:w="7"/><text x="47.6516%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="47.8740%" y="117" width="0.0787%" height="15" fill="rgb(250,173,51)" fg:x="608" fg:w="1"/><text x="48.1240%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.8740%" y="101" width="0.0787%" height="15" fill="rgb(209,5,22)" fg:x="608" fg:w="1"/><text x="48.1240%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.8740%" y="85" width="0.0787%" height="15" fill="rgb(250,174,19)" fg:x="608" fg:w="1"/><text x="48.1240%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.8740%" y="69" width="0.0787%" height="15" fill="rgb(217,3,49)" fg:x="608" fg:w="1"/><text x="48.1240%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.0315%" y="149" width="0.0787%" height="15" fill="rgb(218,225,5)" fg:x="610" fg:w="1"/><text x="48.2815%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.0315%" y="133" width="0.0787%" height="15" fill="rgb(236,89,11)" fg:x="610" fg:w="1"/><text x="48.2815%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.0315%" y="117" width="0.0787%" height="15" fill="rgb(206,33,28)" fg:x="610" fg:w="1"/><text x="48.2815%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.0315%" y="101" width="0.0787%" height="15" fill="rgb(241,56,42)" fg:x="610" fg:w="1"/><text x="48.2815%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (83 samples, 6.54%)</title><rect x="47.9528%" y="165" width="6.5354%" height="15" fill="rgb(222,44,11)" fg:x="609" fg:w="83"/><text x="48.2028%" y="175.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (81 samples, 6.38%)</title><rect x="48.1102%" y="149" width="6.3780%" height="15" fill="rgb(234,111,20)" fg:x="611" fg:w="81"/><text x="48.3602%" y="159.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (81 samples, 6.38%)</title><rect x="48.1102%" y="133" width="6.3780%" height="15" fill="rgb(237,77,6)" fg:x="611" fg:w="81"/><text x="48.3602%" y="143.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.47%)</title><rect x="54.4882%" y="165" width="0.4724%" height="15" fill="rgb(235,111,23)" fg:x="692" fg:w="6"/><text x="54.7382%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.8819%" y="149" width="0.0787%" height="15" fill="rgb(251,135,29)" fg:x="697" fg:w="1"/><text x="55.1319%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="54.9606%" y="165" width="0.1575%" height="15" fill="rgb(217,57,1)" fg:x="698" fg:w="2"/><text x="55.2106%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (152 samples, 11.97%)</title><rect x="43.4646%" y="261" width="11.9685%" height="15" fill="rgb(249,119,31)" fg:x="552" fg:w="152"/><text x="43.7146%" y="271.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (152 samples, 11.97%)</title><rect x="43.4646%" y="245" width="11.9685%" height="15" fill="rgb(233,164,33)" fg:x="552" fg:w="152"/><text x="43.7146%" y="255.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (151 samples, 11.89%)</title><rect x="43.5433%" y="229" width="11.8898%" height="15" fill="rgb(250,217,43)" fg:x="553" fg:w="151"/><text x="43.7933%" y="239.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (150 samples, 11.81%)</title><rect x="43.6220%" y="213" width="11.8110%" height="15" fill="rgb(232,154,50)" fg:x="554" fg:w="150"/><text x="43.8720%" y="223.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (150 samples, 11.81%)</title><rect x="43.6220%" y="197" width="11.8110%" height="15" fill="rgb(227,190,8)" fg:x="554" fg:w="150"/><text x="43.8720%" y="207.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (150 samples, 11.81%)</title><rect x="43.6220%" y="181" width="11.8110%" height="15" fill="rgb(209,217,32)" fg:x="554" fg:w="150"/><text x="43.8720%" y="191.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.31%)</title><rect x="55.1181%" y="165" width="0.3150%" height="15" fill="rgb(243,203,50)" fg:x="700" fg:w="4"/><text x="55.3681%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="55.1181%" y="149" width="0.3150%" height="15" fill="rgb(232,152,27)" fg:x="700" fg:w="4"/><text x="55.3681%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="55.1969%" y="133" width="0.2362%" height="15" fill="rgb(240,34,29)" fg:x="701" fg:w="3"/><text x="55.4469%" y="143.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="55.1969%" y="117" width="0.2362%" height="15" fill="rgb(215,185,52)" fg:x="701" fg:w="3"/><text x="55.4469%" y="127.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="55.6693%" y="245" width="0.0787%" height="15" fill="rgb(240,89,49)" fg:x="707" fg:w="1"/><text x="55.9193%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.7480%" y="245" width="0.0787%" height="15" fill="rgb(225,12,52)" fg:x="708" fg:w="1"/><text x="55.9980%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (11 samples, 0.87%)</title><rect x="55.8268%" y="245" width="0.8661%" height="15" fill="rgb(239,128,45)" fg:x="709" fg:w="11"/><text x="56.0768%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="56.3780%" y="229" width="0.3150%" height="15" fill="rgb(211,78,47)" fg:x="716" fg:w="4"/><text x="56.6280%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="56.3780%" y="213" width="0.3150%" height="15" fill="rgb(232,31,21)" fg:x="716" fg:w="4"/><text x="56.6280%" y="223.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="56.4567%" y="197" width="0.2362%" height="15" fill="rgb(222,168,14)" fg:x="717" fg:w="3"/><text x="56.7067%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="56.6929%" y="245" width="0.3150%" height="15" fill="rgb(209,128,24)" fg:x="720" fg:w="4"/><text x="56.9429%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (247 samples, 19.45%)</title><rect x="37.6378%" y="293" width="19.4488%" height="15" fill="rgb(249,35,13)" fg:x="478" fg:w="247"/><text x="37.8878%" y="303.50">regex_automata::meta::strategy..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (173 samples, 13.62%)</title><rect x="43.4646%" y="277" width="13.6220%" height="15" fill="rgb(218,7,2)" fg:x="552" fg:w="173"/><text x="43.7146%" y="287.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21 samples, 1.65%)</title><rect x="55.4331%" y="261" width="1.6535%" height="15" fill="rgb(238,107,27)" fg:x="704" fg:w="21"/><text x="55.6831%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="57.0079%" y="245" width="0.0787%" height="15" fill="rgb(217,88,38)" fg:x="724" fg:w="1"/><text x="57.2579%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="57.2441%" y="245" width="0.0787%" height="15" fill="rgb(230,207,0)" fg:x="727" fg:w="1"/><text x="57.4941%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="57.2441%" y="261" width="0.1575%" height="15" fill="rgb(249,64,54)" fg:x="727" fg:w="2"/><text x="57.4941%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="57.3228%" y="245" width="0.0787%" height="15" fill="rgb(231,7,11)" fg:x="728" fg:w="1"/><text x="57.5728%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="57.4016%" y="261" width="0.0787%" height="15" fill="rgb(205,149,21)" fg:x="729" fg:w="1"/><text x="57.6516%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="57.4803%" y="261" width="0.0787%" height="15" fill="rgb(215,126,34)" fg:x="730" fg:w="1"/><text x="57.7303%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="57.4803%" y="245" width="0.0787%" height="15" fill="rgb(241,132,45)" fg:x="730" fg:w="1"/><text x="57.7303%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="57.6378%" y="245" width="0.0787%" height="15" fill="rgb(252,69,32)" fg:x="732" fg:w="1"/><text x="57.8878%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.71%)</title><rect x="57.0866%" y="293" width="0.7087%" height="15" fill="rgb(232,204,19)" fg:x="725" fg:w="9"/><text x="57.3366%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.71%)</title><rect x="57.0866%" y="277" width="0.7087%" height="15" fill="rgb(249,15,47)" fg:x="725" fg:w="9"/><text x="57.3366%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="57.5591%" y="261" width="0.2362%" height="15" fill="rgb(209,227,23)" fg:x="731" fg:w="3"/><text x="57.8091%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.7165%" y="245" width="0.0787%" height="15" fill="rgb(248,92,24)" fg:x="733" fg:w="1"/><text x="57.9665%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7165%" y="229" width="0.0787%" height="15" fill="rgb(247,59,2)" fg:x="733" fg:w="1"/><text x="57.9665%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.7165%" y="213" width="0.0787%" height="15" fill="rgb(221,30,5)" fg:x="733" fg:w="1"/><text x="57.9665%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.39%)</title><rect x="57.9528%" y="245" width="0.3937%" height="15" fill="rgb(208,108,53)" fg:x="736" fg:w="5"/><text x="58.2028%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="58.1890%" y="229" width="0.1575%" height="15" fill="rgb(211,183,26)" fg:x="739" fg:w="2"/><text x="58.4390%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.55%)</title><rect x="57.8740%" y="261" width="0.5512%" height="15" fill="rgb(232,132,4)" fg:x="735" fg:w="7"/><text x="58.1240%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="58.3465%" y="245" width="0.0787%" height="15" fill="rgb(253,128,37)" fg:x="741" fg:w="1"/><text x="58.5965%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="58.3465%" y="229" width="0.0787%" height="15" fill="rgb(221,58,24)" fg:x="741" fg:w="1"/><text x="58.5965%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="58.5039%" y="245" width="0.0787%" height="15" fill="rgb(230,54,45)" fg:x="743" fg:w="1"/><text x="58.7539%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (277 samples, 21.81%)</title><rect x="36.8504%" y="309" width="21.8110%" height="15" fill="rgb(254,21,18)" fg:x="468" fg:w="277"/><text x="37.1004%" y="319.50">regex_automata::meta::regex::Build..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.87%)</title><rect x="57.7953%" y="293" width="0.8661%" height="15" fill="rgb(221,108,0)" fg:x="734" fg:w="11"/><text x="58.0453%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.87%)</title><rect x="57.7953%" y="277" width="0.8661%" height="15" fill="rgb(206,95,1)" fg:x="734" fg:w="11"/><text x="58.0453%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="58.4252%" y="261" width="0.2362%" height="15" fill="rgb(237,52,5)" fg:x="742" fg:w="3"/><text x="58.6752%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="58.5827%" y="245" width="0.0787%" height="15" fill="rgb(218,150,34)" fg:x="744" fg:w="1"/><text x="58.8327%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.5827%" y="229" width="0.0787%" height="15" fill="rgb(235,194,28)" fg:x="744" fg:w="1"/><text x="58.8327%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (280 samples, 22.05%)</title><rect x="36.6929%" y="341" width="22.0472%" height="15" fill="rgb(245,92,18)" fg:x="466" fg:w="280"/><text x="36.9429%" y="351.50">&lt;regex::regex::string::Regex as cor..</text></g><g><title>regex::builders::Builder::build_one_string (278 samples, 21.89%)</title><rect x="36.8504%" y="325" width="21.8898%" height="15" fill="rgb(253,203,53)" fg:x="468" fg:w="278"/><text x="37.1004%" y="335.50">regex::builders::Builder::build_one..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="58.6614%" y="309" width="0.0787%" height="15" fill="rgb(249,185,47)" fg:x="745" fg:w="1"/><text x="58.9114%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::nest_limit (1 samples, 0.08%)</title><rect x="58.6614%" y="293" width="0.0787%" height="15" fill="rgb(252,194,52)" fg:x="745" fg:w="1"/><text x="58.9114%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.7402%" y="309" width="0.0787%" height="15" fill="rgb(210,53,36)" fg:x="746" fg:w="1"/><text x="58.9902%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="58.8189%" y="293" width="0.1575%" height="15" fill="rgb(237,37,25)" fg:x="747" fg:w="2"/><text x="59.0689%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="58.8189%" y="277" width="0.1575%" height="15" fill="rgb(242,116,27)" fg:x="747" fg:w="2"/><text x="59.0689%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.8976%" y="261" width="0.0787%" height="15" fill="rgb(213,185,26)" fg:x="748" fg:w="1"/><text x="59.1476%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="58.8189%" y="309" width="0.2362%" height="15" fill="rgb(225,204,8)" fg:x="747" fg:w="3"/><text x="59.0689%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="58.9764%" y="293" width="0.0787%" height="15" fill="rgb(254,111,37)" fg:x="749" fg:w="1"/><text x="59.2264%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.9764%" y="277" width="0.0787%" height="15" fill="rgb(242,35,9)" fg:x="749" fg:w="1"/><text x="59.2264%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="59.0551%" y="293" width="0.1575%" height="15" fill="rgb(232,138,49)" fg:x="750" fg:w="2"/><text x="59.3051%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.1339%" y="277" width="0.0787%" height="15" fill="rgb(247,56,4)" fg:x="751" fg:w="1"/><text x="59.3839%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.63%)</title><rect x="58.7402%" y="341" width="0.6299%" height="15" fill="rgb(226,179,17)" fg:x="746" fg:w="8"/><text x="58.9902%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.63%)</title><rect x="58.7402%" y="325" width="0.6299%" height="15" fill="rgb(216,163,45)" fg:x="746" fg:w="8"/><text x="58.9902%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.31%)</title><rect x="59.0551%" y="309" width="0.3150%" height="15" fill="rgb(211,157,3)" fg:x="750" fg:w="4"/><text x="59.3051%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="59.2126%" y="293" width="0.1575%" height="15" fill="rgb(234,44,20)" fg:x="752" fg:w="2"/><text x="59.4626%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.2913%" y="277" width="0.0787%" height="15" fill="rgb(254,138,23)" fg:x="753" fg:w="1"/><text x="59.5413%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="60.0787%" y="245" width="0.1575%" height="15" fill="rgb(206,119,39)" fg:x="763" fg:w="2"/><text x="60.3287%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1575%" y="229" width="0.0787%" height="15" fill="rgb(231,105,52)" fg:x="764" fg:w="1"/><text x="60.4075%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.1575%" y="213" width="0.0787%" height="15" fill="rgb(250,20,5)" fg:x="764" fg:w="1"/><text x="60.4075%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="60.2362%" y="245" width="0.1575%" height="15" fill="rgb(215,198,30)" fg:x="765" fg:w="2"/><text x="60.4862%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.3150%" y="229" width="0.0787%" height="15" fill="rgb(246,142,8)" fg:x="766" fg:w="1"/><text x="60.5650%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.3150%" y="213" width="0.0787%" height="15" fill="rgb(243,26,38)" fg:x="766" fg:w="1"/><text x="60.5650%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.18%)</title><rect x="59.4488%" y="261" width="1.1811%" height="15" fill="rgb(205,133,28)" fg:x="755" fg:w="15"/><text x="59.6988%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="60.3937%" y="245" width="0.2362%" height="15" fill="rgb(212,34,0)" fg:x="767" fg:w="3"/><text x="60.6437%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (305 samples, 24.02%)</title><rect x="36.6929%" y="357" width="24.0157%" height="15" fill="rgb(251,226,22)" fg:x="466" fg:w="305"/><text x="36.9429%" y="367.50">indefinite::rules::number::Number::che..</text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.34%)</title><rect x="59.3701%" y="341" width="1.3386%" height="15" fill="rgb(252,119,9)" fg:x="754" fg:w="17"/><text x="59.6201%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.26%)</title><rect x="59.4488%" y="325" width="1.2598%" height="15" fill="rgb(213,150,50)" fg:x="755" fg:w="16"/><text x="59.6988%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.26%)</title><rect x="59.4488%" y="309" width="1.2598%" height="15" fill="rgb(212,24,39)" fg:x="755" fg:w="16"/><text x="59.6988%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.26%)</title><rect x="59.4488%" y="293" width="1.2598%" height="15" fill="rgb(213,46,39)" fg:x="755" fg:w="16"/><text x="59.6988%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.26%)</title><rect x="59.4488%" y="277" width="1.2598%" height="15" fill="rgb(239,106,12)" fg:x="755" fg:w="16"/><text x="59.6988%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="60.6299%" y="261" width="0.0787%" height="15" fill="rgb(249,229,21)" fg:x="770" fg:w="1"/><text x="60.8799%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.6299%" y="245" width="0.0787%" height="15" fill="rgb(212,158,3)" fg:x="770" fg:w="1"/><text x="60.8799%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.6299%" y="229" width="0.0787%" height="15" fill="rgb(253,26,48)" fg:x="770" fg:w="1"/><text x="60.8799%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.6299%" y="213" width="0.0787%" height="15" fill="rgb(238,178,20)" fg:x="770" fg:w="1"/><text x="60.8799%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.8661%" y="277" width="0.1575%" height="15" fill="rgb(208,86,15)" fg:x="773" fg:w="2"/><text x="61.1161%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.8661%" y="261" width="0.1575%" height="15" fill="rgb(239,42,53)" fg:x="773" fg:w="2"/><text x="61.1161%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="60.8661%" y="245" width="0.1575%" height="15" fill="rgb(245,226,8)" fg:x="773" fg:w="2"/><text x="61.1161%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="60.8661%" y="229" width="0.1575%" height="15" fill="rgb(216,176,32)" fg:x="773" fg:w="2"/><text x="61.1161%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.8661%" y="213" width="0.1575%" height="15" fill="rgb(231,186,21)" fg:x="773" fg:w="2"/><text x="61.1161%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.8661%" y="197" width="0.1575%" height="15" fill="rgb(205,95,49)" fg:x="773" fg:w="2"/><text x="61.1161%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1024%" y="245" width="0.0787%" height="15" fill="rgb(217,145,8)" fg:x="776" fg:w="1"/><text x="61.3524%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1811%" y="213" width="0.0787%" height="15" fill="rgb(239,144,48)" fg:x="777" fg:w="1"/><text x="61.4311%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.31%)</title><rect x="61.0236%" y="277" width="0.3150%" height="15" fill="rgb(214,189,23)" fg:x="775" fg:w="4"/><text x="61.2736%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="61.0236%" y="261" width="0.3150%" height="15" fill="rgb(229,157,17)" fg:x="775" fg:w="4"/><text x="61.2736%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="61.1811%" y="245" width="0.1575%" height="15" fill="rgb(230,5,48)" fg:x="777" fg:w="2"/><text x="61.4311%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.1811%" y="229" width="0.1575%" height="15" fill="rgb(224,156,48)" fg:x="777" fg:w="2"/><text x="61.4311%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2598%" y="213" width="0.0787%" height="15" fill="rgb(223,14,29)" fg:x="778" fg:w="1"/><text x="61.5098%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="61.4173%" y="261" width="0.1575%" height="15" fill="rgb(229,96,36)" fg:x="780" fg:w="2"/><text x="61.6673%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4961%" y="245" width="0.0787%" height="15" fill="rgb(231,102,53)" fg:x="781" fg:w="1"/><text x="61.7461%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.39%)</title><rect x="61.5748%" y="261" width="0.3937%" height="15" fill="rgb(210,77,38)" fg:x="782" fg:w="5"/><text x="61.8248%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.39%)</title><rect x="61.5748%" y="245" width="0.3937%" height="15" fill="rgb(235,131,6)" fg:x="782" fg:w="5"/><text x="61.8248%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="62.2835%" y="229" width="0.0787%" height="15" fill="rgb(252,55,38)" fg:x="791" fg:w="1"/><text x="62.5335%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.2835%" y="213" width="0.0787%" height="15" fill="rgb(246,38,14)" fg:x="791" fg:w="1"/><text x="62.5335%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.2835%" y="197" width="0.0787%" height="15" fill="rgb(242,27,5)" fg:x="791" fg:w="1"/><text x="62.5335%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="62.3622%" y="213" width="0.1575%" height="15" fill="rgb(228,65,35)" fg:x="792" fg:w="2"/><text x="62.6122%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.4409%" y="197" width="0.0787%" height="15" fill="rgb(245,93,11)" fg:x="793" fg:w="1"/><text x="62.6909%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.4409%" y="181" width="0.0787%" height="15" fill="rgb(213,1,31)" fg:x="793" fg:w="1"/><text x="62.6909%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4409%" y="165" width="0.0787%" height="15" fill="rgb(237,205,14)" fg:x="793" fg:w="1"/><text x="62.6909%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.55%)</title><rect x="62.2835%" y="245" width="0.5512%" height="15" fill="rgb(232,118,45)" fg:x="791" fg:w="7"/><text x="62.5335%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (6 samples, 0.47%)</title><rect x="62.3622%" y="229" width="0.4724%" height="15" fill="rgb(218,5,6)" fg:x="792" fg:w="6"/><text x="62.6122%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.31%)</title><rect x="62.5197%" y="213" width="0.3150%" height="15" fill="rgb(251,87,51)" fg:x="794" fg:w="4"/><text x="62.7697%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.31%)</title><rect x="62.5197%" y="197" width="0.3150%" height="15" fill="rgb(207,225,20)" fg:x="794" fg:w="4"/><text x="62.7697%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="62.7559%" y="181" width="0.0787%" height="15" fill="rgb(222,78,54)" fg:x="797" fg:w="1"/><text x="63.0059%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.7559%" y="165" width="0.0787%" height="15" fill="rgb(232,85,16)" fg:x="797" fg:w="1"/><text x="63.0059%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7559%" y="149" width="0.0787%" height="15" fill="rgb(244,25,33)" fg:x="797" fg:w="1"/><text x="63.0059%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.7559%" y="133" width="0.0787%" height="15" fill="rgb(233,24,36)" fg:x="797" fg:w="1"/><text x="63.0059%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="62.8346%" y="229" width="0.0787%" height="15" fill="rgb(253,49,54)" fg:x="798" fg:w="1"/><text x="63.0846%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="62.9134%" y="229" width="0.1575%" height="15" fill="rgb(245,12,22)" fg:x="799" fg:w="2"/><text x="63.1634%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="63.0709%" y="229" width="0.0787%" height="15" fill="rgb(253,141,28)" fg:x="801" fg:w="1"/><text x="63.3209%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (24 samples, 1.89%)</title><rect x="61.3386%" y="277" width="1.8898%" height="15" fill="rgb(225,207,27)" fg:x="779" fg:w="24"/><text x="61.5886%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (16 samples, 1.26%)</title><rect x="61.9685%" y="261" width="1.2598%" height="15" fill="rgb(220,84,2)" fg:x="787" fg:w="16"/><text x="62.2185%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.39%)</title><rect x="62.8346%" y="245" width="0.3937%" height="15" fill="rgb(224,37,37)" fg:x="798" fg:w="5"/><text x="63.0846%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="63.1496%" y="229" width="0.0787%" height="15" fill="rgb(220,143,18)" fg:x="802" fg:w="1"/><text x="63.3996%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="63.1496%" y="213" width="0.0787%" height="15" fill="rgb(210,88,33)" fg:x="802" fg:w="1"/><text x="63.3996%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (4 samples, 0.31%)</title><rect x="63.5433%" y="229" width="0.3150%" height="15" fill="rgb(219,87,51)" fg:x="807" fg:w="4"/><text x="63.7933%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="63.6220%" y="213" width="0.2362%" height="15" fill="rgb(211,7,35)" fg:x="808" fg:w="3"/><text x="63.8720%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="63.6220%" y="197" width="0.2362%" height="15" fill="rgb(232,77,2)" fg:x="808" fg:w="3"/><text x="63.8720%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="63.6220%" y="181" width="0.2362%" height="15" fill="rgb(249,94,25)" fg:x="808" fg:w="3"/><text x="63.8720%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="63.8583%" y="229" width="0.0787%" height="15" fill="rgb(215,112,2)" fg:x="811" fg:w="1"/><text x="64.1083%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="63.8583%" y="213" width="0.0787%" height="15" fill="rgb(226,115,48)" fg:x="811" fg:w="1"/><text x="64.1083%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="63.8583%" y="197" width="0.0787%" height="15" fill="rgb(249,196,10)" fg:x="811" fg:w="1"/><text x="64.1083%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.02%)</title><rect x="63.2283%" y="277" width="1.0236%" height="15" fill="rgb(237,109,14)" fg:x="803" fg:w="13"/><text x="63.4783%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.02%)</title><rect x="63.2283%" y="261" width="1.0236%" height="15" fill="rgb(217,103,53)" fg:x="803" fg:w="13"/><text x="63.4783%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (12 samples, 0.94%)</title><rect x="63.3071%" y="245" width="0.9449%" height="15" fill="rgb(244,137,9)" fg:x="804" fg:w="12"/><text x="63.5571%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.31%)</title><rect x="63.9370%" y="229" width="0.3150%" height="15" fill="rgb(227,201,3)" fg:x="812" fg:w="4"/><text x="64.1870%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="64.0157%" y="213" width="0.2362%" height="15" fill="rgb(243,94,6)" fg:x="813" fg:w="3"/><text x="64.2657%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="64.0157%" y="197" width="0.2362%" height="15" fill="rgb(235,118,5)" fg:x="813" fg:w="3"/><text x="64.2657%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="64.0157%" y="181" width="0.2362%" height="15" fill="rgb(247,10,30)" fg:x="813" fg:w="3"/><text x="64.2657%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.3307%" y="229" width="0.0787%" height="15" fill="rgb(205,26,28)" fg:x="817" fg:w="1"/><text x="64.5807%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.3307%" y="213" width="0.0787%" height="15" fill="rgb(206,99,35)" fg:x="817" fg:w="1"/><text x="64.5807%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="64.3307%" y="245" width="0.1575%" height="15" fill="rgb(238,130,40)" fg:x="817" fg:w="2"/><text x="64.5807%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="64.4094%" y="229" width="0.0787%" height="15" fill="rgb(224,126,31)" fg:x="818" fg:w="1"/><text x="64.6594%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4882%" y="229" width="0.0787%" height="15" fill="rgb(254,105,17)" fg:x="819" fg:w="1"/><text x="64.7382%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4882%" y="213" width="0.0787%" height="15" fill="rgb(216,87,36)" fg:x="819" fg:w="1"/><text x="64.7382%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4882%" y="197" width="0.0787%" height="15" fill="rgb(240,21,12)" fg:x="819" fg:w="1"/><text x="64.7382%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="64.4882%" y="245" width="0.1575%" height="15" fill="rgb(245,192,34)" fg:x="819" fg:w="2"/><text x="64.7382%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="64.5669%" y="229" width="0.0787%" height="15" fill="rgb(226,100,49)" fg:x="820" fg:w="1"/><text x="64.8169%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.5669%" y="213" width="0.0787%" height="15" fill="rgb(245,188,27)" fg:x="820" fg:w="1"/><text x="64.8169%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.5669%" y="197" width="0.0787%" height="15" fill="rgb(212,170,8)" fg:x="820" fg:w="1"/><text x="64.8169%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5669%" y="181" width="0.0787%" height="15" fill="rgb(217,113,29)" fg:x="820" fg:w="1"/><text x="64.8169%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (50 samples, 3.94%)</title><rect x="60.7874%" y="293" width="3.9370%" height="15" fill="rgb(237,30,3)" fg:x="772" fg:w="50"/><text x="61.0374%" y="303.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.47%)</title><rect x="64.2520%" y="277" width="0.4724%" height="15" fill="rgb(227,19,28)" fg:x="816" fg:w="6"/><text x="64.5020%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.47%)</title><rect x="64.2520%" y="261" width="0.4724%" height="15" fill="rgb(239,172,45)" fg:x="816" fg:w="6"/><text x="64.5020%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.6457%" y="245" width="0.0787%" height="15" fill="rgb(254,55,39)" fg:x="821" fg:w="1"/><text x="64.8957%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.6457%" y="229" width="0.0787%" height="15" fill="rgb(249,208,12)" fg:x="821" fg:w="1"/><text x="64.8957%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6457%" y="213" width="0.0787%" height="15" fill="rgb(240,52,13)" fg:x="821" fg:w="1"/><text x="64.8957%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (52 samples, 4.09%)</title><rect x="60.7087%" y="325" width="4.0945%" height="15" fill="rgb(252,149,13)" fg:x="771" fg:w="52"/><text x="60.9587%" y="335.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (51 samples, 4.02%)</title><rect x="60.7874%" y="309" width="4.0157%" height="15" fill="rgb(232,81,48)" fg:x="772" fg:w="51"/><text x="61.0374%" y="319.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="64.7244%" y="293" width="0.0787%" height="15" fill="rgb(222,144,2)" fg:x="822" fg:w="1"/><text x="64.9744%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="64.8031%" y="293" width="0.0787%" height="15" fill="rgb(216,81,32)" fg:x="823" fg:w="1"/><text x="65.0531%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="64.8031%" y="277" width="0.0787%" height="15" fill="rgb(244,78,51)" fg:x="823" fg:w="1"/><text x="65.0531%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.8031%" y="261" width="0.0787%" height="15" fill="rgb(217,66,21)" fg:x="823" fg:w="1"/><text x="65.0531%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="64.8031%" y="325" width="0.1575%" height="15" fill="rgb(247,101,42)" fg:x="823" fg:w="2"/><text x="65.0531%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="64.8031%" y="309" width="0.1575%" height="15" fill="rgb(227,81,39)" fg:x="823" fg:w="2"/><text x="65.0531%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="64.8819%" y="293" width="0.0787%" height="15" fill="rgb(220,223,44)" fg:x="824" fg:w="1"/><text x="65.1319%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8819%" y="277" width="0.0787%" height="15" fill="rgb(205,218,2)" fg:x="824" fg:w="1"/><text x="65.1319%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.8819%" y="261" width="0.0787%" height="15" fill="rgb(212,207,28)" fg:x="824" fg:w="1"/><text x="65.1319%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="64.9606%" y="277" width="0.0787%" height="15" fill="rgb(224,12,41)" fg:x="825" fg:w="1"/><text x="65.2106%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="64.9606%" y="293" width="0.1575%" height="15" fill="rgb(216,118,12)" fg:x="825" fg:w="2"/><text x="65.2106%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="65.0394%" y="277" width="0.0787%" height="15" fill="rgb(252,97,46)" fg:x="826" fg:w="1"/><text x="65.2894%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.0394%" y="261" width="0.0787%" height="15" fill="rgb(244,206,19)" fg:x="826" fg:w="1"/><text x="65.2894%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.31%)</title><rect x="65.1181%" y="277" width="0.3150%" height="15" fill="rgb(231,84,31)" fg:x="827" fg:w="4"/><text x="65.3681%" y="287.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="65.1969%" y="261" width="0.2362%" height="15" fill="rgb(244,133,0)" fg:x="828" fg:w="3"/><text x="65.4469%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.55%)</title><rect x="64.9606%" y="325" width="0.5512%" height="15" fill="rgb(223,15,50)" fg:x="825" fg:w="7"/><text x="65.2106%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.55%)</title><rect x="64.9606%" y="309" width="0.5512%" height="15" fill="rgb(250,118,49)" fg:x="825" fg:w="7"/><text x="65.2106%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.39%)</title><rect x="65.1181%" y="293" width="0.3937%" height="15" fill="rgb(248,25,38)" fg:x="827" fg:w="5"/><text x="65.3681%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="65.4331%" y="277" width="0.0787%" height="15" fill="rgb(215,70,14)" fg:x="831" fg:w="1"/><text x="65.6831%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4331%" y="261" width="0.0787%" height="15" fill="rgb(215,28,15)" fg:x="831" fg:w="1"/><text x="65.6831%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.1417%" y="245" width="0.0787%" height="15" fill="rgb(243,6,28)" fg:x="840" fg:w="1"/><text x="66.3917%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.2205%" y="245" width="0.0787%" height="15" fill="rgb(222,130,1)" fg:x="841" fg:w="1"/><text x="66.4705%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (74 samples, 5.83%)</title><rect x="60.7087%" y="341" width="5.8268%" height="15" fill="rgb(236,166,44)" fg:x="771" fg:w="74"/><text x="60.9587%" y="351.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.02%)</title><rect x="65.5118%" y="325" width="1.0236%" height="15" fill="rgb(221,108,14)" fg:x="832" fg:w="13"/><text x="65.7618%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.02%)</title><rect x="65.5118%" y="309" width="1.0236%" height="15" fill="rgb(252,3,45)" fg:x="832" fg:w="13"/><text x="65.7618%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.02%)</title><rect x="65.5118%" y="293" width="1.0236%" height="15" fill="rgb(237,68,30)" fg:x="832" fg:w="13"/><text x="65.7618%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.02%)</title><rect x="65.5118%" y="277" width="1.0236%" height="15" fill="rgb(211,79,22)" fg:x="832" fg:w="13"/><text x="65.7618%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.94%)</title><rect x="65.5906%" y="261" width="0.9449%" height="15" fill="rgb(252,185,21)" fg:x="833" fg:w="12"/><text x="65.8406%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="66.2992%" y="245" width="0.2362%" height="15" fill="rgb(225,189,26)" fg:x="842" fg:w="3"/><text x="66.5492%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (602 samples, 47.40%)</title><rect x="19.2126%" y="437" width="47.4016%" height="15" fill="rgb(241,30,40)" fg:x="244" fg:w="602"/><text x="19.4626%" y="447.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies..</text></g><g><title>plugins_core::looking::model::qualify_name (578 samples, 45.51%)</title><rect x="21.1024%" y="421" width="45.5118%" height="15" fill="rgb(235,215,44)" fg:x="268" fg:w="578"/><text x="21.3524%" y="431.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (578 samples, 45.51%)</title><rect x="21.1024%" y="405" width="45.5118%" height="15" fill="rgb(205,8,29)" fg:x="268" fg:w="578"/><text x="21.3524%" y="415.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (578 samples, 45.51%)</title><rect x="21.1024%" y="389" width="45.5118%" height="15" fill="rgb(241,137,42)" fg:x="268" fg:w="578"/><text x="21.3524%" y="399.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (578 samples, 45.51%)</title><rect x="21.1024%" y="373" width="45.5118%" height="15" fill="rgb(237,155,2)" fg:x="268" fg:w="578"/><text x="21.3524%" y="383.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (75 samples, 5.91%)</title><rect x="60.7087%" y="357" width="5.9055%" height="15" fill="rgb(245,29,42)" fg:x="771" fg:w="75"/><text x="60.9587%" y="367.50">indefini..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="66.5354%" y="341" width="0.0787%" height="15" fill="rgb(234,101,35)" fg:x="845" fg:w="1"/><text x="66.7854%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="66.6142%" y="437" width="0.0787%" height="15" fill="rgb(228,64,37)" fg:x="846" fg:w="1"/><text x="66.8642%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="66.6142%" y="421" width="0.0787%" height="15" fill="rgb(217,214,36)" fg:x="846" fg:w="1"/><text x="66.8642%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="66.6142%" y="405" width="0.0787%" height="15" fill="rgb(243,70,3)" fg:x="846" fg:w="1"/><text x="66.8642%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="66.6142%" y="389" width="0.0787%" height="15" fill="rgb(253,158,52)" fg:x="846" fg:w="1"/><text x="66.8642%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="373" width="0.0787%" height="15" fill="rgb(234,111,54)" fg:x="846" fg:w="1"/><text x="66.8642%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.6142%" y="357" width="0.0787%" height="15" fill="rgb(217,70,32)" fg:x="846" fg:w="1"/><text x="66.8642%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="341" width="0.0787%" height="15" fill="rgb(234,18,33)" fg:x="846" fg:w="1"/><text x="66.8642%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="325" width="0.0787%" height="15" fill="rgb(234,12,49)" fg:x="846" fg:w="1"/><text x="66.8642%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="309" width="0.0787%" height="15" fill="rgb(236,10,21)" fg:x="846" fg:w="1"/><text x="66.8642%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.6142%" y="293" width="0.0787%" height="15" fill="rgb(248,182,45)" fg:x="846" fg:w="1"/><text x="66.8642%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="277" width="0.0787%" height="15" fill="rgb(217,95,36)" fg:x="846" fg:w="1"/><text x="66.8642%" y="287.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="261" width="0.0787%" height="15" fill="rgb(212,110,31)" fg:x="846" fg:w="1"/><text x="66.8642%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="245" width="0.0787%" height="15" fill="rgb(206,32,53)" fg:x="846" fg:w="1"/><text x="66.8642%" y="255.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="66.6142%" y="229" width="0.0787%" height="15" fill="rgb(246,141,37)" fg:x="846" fg:w="1"/><text x="66.8642%" y="239.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="213" width="0.0787%" height="15" fill="rgb(219,16,7)" fg:x="846" fg:w="1"/><text x="66.8642%" y="223.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="66.6142%" y="197" width="0.0787%" height="15" fill="rgb(230,205,45)" fg:x="846" fg:w="1"/><text x="66.8642%" y="207.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="66.6142%" y="181" width="0.0787%" height="15" fill="rgb(231,43,49)" fg:x="846" fg:w="1"/><text x="66.8642%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::Item&gt; (1 samples, 0.08%)</title><rect x="66.6929%" y="437" width="0.0787%" height="15" fill="rgb(212,106,34)" fg:x="847" fg:w="1"/><text x="66.9429%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="66.7717%" y="405" width="0.0787%" height="15" fill="rgb(206,83,17)" fg:x="848" fg:w="1"/><text x="67.0217%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="66.7717%" y="389" width="0.0787%" height="15" fill="rgb(244,154,49)" fg:x="848" fg:w="1"/><text x="67.0217%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.7717%" y="373" width="0.0787%" height="15" fill="rgb(244,149,49)" fg:x="848" fg:w="1"/><text x="67.0217%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="66.7717%" y="357" width="0.0787%" height="15" fill="rgb(227,134,18)" fg:x="848" fg:w="1"/><text x="67.0217%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.7717%" y="341" width="0.0787%" height="15" fill="rgb(237,116,36)" fg:x="848" fg:w="1"/><text x="67.0217%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (693 samples, 54.57%)</title><rect x="12.4409%" y="629" width="54.5669%" height="15" fill="rgb(205,129,40)" fg:x="158" fg:w="693"/><text x="12.6909%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (693 samples, 54.57%)</title><rect x="12.4409%" y="613" width="54.5669%" height="15" fill="rgb(236,178,4)" fg:x="158" fg:w="693"/><text x="12.6909%" y="623.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (609 samples, 47.95%)</title><rect x="19.0551%" y="597" width="47.9528%" height="15" fill="rgb(251,76,53)" fg:x="242" fg:w="609"/><text x="19.3051%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (609 samples, 47.95%)</title><rect x="19.0551%" y="581" width="47.9528%" height="15" fill="rgb(242,92,40)" fg:x="242" fg:w="609"/><text x="19.3051%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (609 samples, 47.95%)</title><rect x="19.0551%" y="565" width="47.9528%" height="15" fill="rgb(209,45,30)" fg:x="242" fg:w="609"/><text x="19.3051%" y="575.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (609 samples, 47.95%)</title><rect x="19.0551%" y="549" width="47.9528%" height="15" fill="rgb(218,157,36)" fg:x="242" fg:w="609"/><text x="19.3051%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (609 samples, 47.95%)</title><rect x="19.0551%" y="533" width="47.9528%" height="15" fill="rgb(222,186,16)" fg:x="242" fg:w="609"/><text x="19.3051%" y="543.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (609 samples, 47.95%)</title><rect x="19.0551%" y="517" width="47.9528%" height="15" fill="rgb(254,72,35)" fg:x="242" fg:w="609"/><text x="19.3051%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (607 samples, 47.80%)</title><rect x="19.2126%" y="501" width="47.7953%" height="15" fill="rgb(224,25,35)" fg:x="244" fg:w="607"/><text x="19.4626%" y="511.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (607 samples, 47.80%)</title><rect x="19.2126%" y="485" width="47.7953%" height="15" fill="rgb(206,135,52)" fg:x="244" fg:w="607"/><text x="19.4626%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (607 samples, 47.80%)</title><rect x="19.2126%" y="469" width="47.7953%" height="15" fill="rgb(229,174,47)" fg:x="244" fg:w="607"/><text x="19.4626%" y="479.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (607 samples, 47.80%)</title><rect x="19.2126%" y="453" width="47.7953%" height="15" fill="rgb(242,184,21)" fg:x="244" fg:w="607"/><text x="19.4626%" y="463.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="66.7717%" y="437" width="0.2362%" height="15" fill="rgb(213,22,45)" fg:x="848" fg:w="3"/><text x="67.0217%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="66.7717%" y="421" width="0.2362%" height="15" fill="rgb(237,81,54)" fg:x="848" fg:w="3"/><text x="67.0217%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.8504%" y="405" width="0.1575%" height="15" fill="rgb(248,177,18)" fg:x="849" fg:w="2"/><text x="67.1004%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.8504%" y="389" width="0.1575%" height="15" fill="rgb(254,31,16)" fg:x="849" fg:w="2"/><text x="67.1004%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="66.9291%" y="373" width="0.0787%" height="15" fill="rgb(235,20,31)" fg:x="850" fg:w="1"/><text x="67.1791%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="66.9291%" y="357" width="0.0787%" height="15" fill="rgb(240,56,43)" fg:x="850" fg:w="1"/><text x="67.1791%" y="367.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="66.9291%" y="341" width="0.0787%" height="15" fill="rgb(237,197,51)" fg:x="850" fg:w="1"/><text x="67.1791%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.9291%" y="325" width="0.0787%" height="15" fill="rgb(241,162,44)" fg:x="850" fg:w="1"/><text x="67.1791%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.9291%" y="309" width="0.0787%" height="15" fill="rgb(224,23,20)" fg:x="850" fg:w="1"/><text x="67.1791%" y="319.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="67.0079%" y="597" width="0.0787%" height="15" fill="rgb(250,109,34)" fg:x="851" fg:w="1"/><text x="67.2579%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.0866%" y="485" width="0.0787%" height="15" fill="rgb(214,175,50)" fg:x="852" fg:w="1"/><text x="67.3366%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="67.0866%" y="581" width="0.1575%" height="15" fill="rgb(213,182,5)" fg:x="852" fg:w="2"/><text x="67.3366%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="67.0866%" y="565" width="0.1575%" height="15" fill="rgb(209,199,19)" fg:x="852" fg:w="2"/><text x="67.3366%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="67.0866%" y="549" width="0.1575%" height="15" fill="rgb(236,224,42)" fg:x="852" fg:w="2"/><text x="67.3366%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.0866%" y="533" width="0.1575%" height="15" fill="rgb(246,226,29)" fg:x="852" fg:w="2"/><text x="67.3366%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.0866%" y="517" width="0.1575%" height="15" fill="rgb(227,223,11)" fg:x="852" fg:w="2"/><text x="67.3366%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.0866%" y="501" width="0.1575%" height="15" fill="rgb(219,7,51)" fg:x="852" fg:w="2"/><text x="67.3366%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1654%" y="485" width="0.0787%" height="15" fill="rgb(245,167,10)" fg:x="853" fg:w="1"/><text x="67.4154%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.2441%" y="485" width="0.0787%" height="15" fill="rgb(237,224,16)" fg:x="854" fg:w="1"/><text x="67.4941%" y="495.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="67.2441%" y="565" width="0.2362%" height="15" fill="rgb(226,132,13)" fg:x="854" fg:w="3"/><text x="67.4941%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.2441%" y="549" width="0.2362%" height="15" fill="rgb(214,140,3)" fg:x="854" fg:w="3"/><text x="67.4941%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.2441%" y="533" width="0.2362%" height="15" fill="rgb(221,177,4)" fg:x="854" fg:w="3"/><text x="67.4941%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.2441%" y="517" width="0.2362%" height="15" fill="rgb(238,139,3)" fg:x="854" fg:w="3"/><text x="67.4941%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.2441%" y="501" width="0.2362%" height="15" fill="rgb(216,17,39)" fg:x="854" fg:w="3"/><text x="67.4941%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.3228%" y="485" width="0.1575%" height="15" fill="rgb(238,120,9)" fg:x="855" fg:w="2"/><text x="67.5728%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.3228%" y="469" width="0.1575%" height="15" fill="rgb(244,92,53)" fg:x="855" fg:w="2"/><text x="67.5728%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4016%" y="453" width="0.0787%" height="15" fill="rgb(224,148,33)" fg:x="856" fg:w="1"/><text x="67.6516%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4016%" y="437" width="0.0787%" height="15" fill="rgb(243,6,36)" fg:x="856" fg:w="1"/><text x="67.6516%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4016%" y="421" width="0.0787%" height="15" fill="rgb(230,102,11)" fg:x="856" fg:w="1"/><text x="67.6516%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4016%" y="405" width="0.0787%" height="15" fill="rgb(234,148,36)" fg:x="856" fg:w="1"/><text x="67.6516%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4016%" y="389" width="0.0787%" height="15" fill="rgb(251,153,25)" fg:x="856" fg:w="1"/><text x="67.6516%" y="399.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.47%)</title><rect x="67.0866%" y="597" width="0.4724%" height="15" fill="rgb(215,129,8)" fg:x="852" fg:w="6"/><text x="67.3366%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_str (4 samples, 0.31%)</title><rect x="67.2441%" y="581" width="0.3150%" height="15" fill="rgb(224,128,35)" fg:x="854" fg:w="4"/><text x="67.4941%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.4803%" y="565" width="0.0787%" height="15" fill="rgb(237,56,52)" fg:x="857" fg:w="1"/><text x="67.7303%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4803%" y="549" width="0.0787%" height="15" fill="rgb(234,213,19)" fg:x="857" fg:w="1"/><text x="67.7303%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.4803%" y="533" width="0.0787%" height="15" fill="rgb(252,82,23)" fg:x="857" fg:w="1"/><text x="67.7303%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4803%" y="517" width="0.0787%" height="15" fill="rgb(254,201,21)" fg:x="857" fg:w="1"/><text x="67.7303%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.4803%" y="501" width="0.0787%" height="15" fill="rgb(250,186,11)" fg:x="857" fg:w="1"/><text x="67.7303%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4803%" y="485" width="0.0787%" height="15" fill="rgb(211,174,5)" fg:x="857" fg:w="1"/><text x="67.7303%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4803%" y="469" width="0.0787%" height="15" fill="rgb(214,121,10)" fg:x="857" fg:w="1"/><text x="67.7303%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.4803%" y="453" width="0.0787%" height="15" fill="rgb(241,66,2)" fg:x="857" fg:w="1"/><text x="67.7303%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.4803%" y="437" width="0.0787%" height="15" fill="rgb(220,167,19)" fg:x="857" fg:w="1"/><text x="67.7303%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4803%" y="421" width="0.0787%" height="15" fill="rgb(231,54,50)" fg:x="857" fg:w="1"/><text x="67.7303%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.4803%" y="405" width="0.0787%" height="15" fill="rgb(239,217,53)" fg:x="857" fg:w="1"/><text x="67.7303%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (8 samples, 0.63%)</title><rect x="67.0079%" y="629" width="0.6299%" height="15" fill="rgb(248,8,0)" fg:x="851" fg:w="8"/><text x="67.2579%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.63%)</title><rect x="67.0079%" y="613" width="0.6299%" height="15" fill="rgb(229,118,37)" fg:x="851" fg:w="8"/><text x="67.2579%" y="623.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="67.5591%" y="597" width="0.0787%" height="15" fill="rgb(253,223,43)" fg:x="858" fg:w="1"/><text x="67.8091%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.5591%" y="581" width="0.0787%" height="15" fill="rgb(211,77,36)" fg:x="858" fg:w="1"/><text x="67.8091%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (860 samples, 67.72%)</title><rect x="0.0000%" y="693" width="67.7165%" height="15" fill="rgb(219,3,53)" fg:x="0" fg:w="860"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (860 samples, 67.72%)</title><rect x="0.0000%" y="677" width="67.7165%" height="15" fill="rgb(244,45,42)" fg:x="0" fg:w="860"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (860 samples, 67.72%)</title><rect x="0.0000%" y="661" width="67.7165%" height="15" fill="rgb(225,95,27)" fg:x="0" fg:w="860"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (702 samples, 55.28%)</title><rect x="12.4409%" y="645" width="55.2756%" height="15" fill="rgb(207,74,8)" fg:x="158" fg:w="702"/><text x="12.6909%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="67.6378%" y="629" width="0.0787%" height="15" fill="rgb(243,63,36)" fg:x="859" fg:w="1"/><text x="67.8878%" y="639.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="67.6378%" y="613" width="0.0787%" height="15" fill="rgb(211,180,12)" fg:x="859" fg:w="1"/><text x="67.8878%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="67.6378%" y="597" width="0.0787%" height="15" fill="rgb(254,166,49)" fg:x="859" fg:w="1"/><text x="67.8878%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.6378%" y="581" width="0.0787%" height="15" fill="rgb(205,19,0)" fg:x="859" fg:w="1"/><text x="67.8878%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.6378%" y="565" width="0.0787%" height="15" fill="rgb(224,172,32)" fg:x="859" fg:w="1"/><text x="67.8878%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6378%" y="549" width="0.0787%" height="15" fill="rgb(254,136,30)" fg:x="859" fg:w="1"/><text x="67.8878%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.6378%" y="533" width="0.0787%" height="15" fill="rgb(246,19,35)" fg:x="859" fg:w="1"/><text x="67.8878%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6378%" y="517" width="0.0787%" height="15" fill="rgb(219,24,36)" fg:x="859" fg:w="1"/><text x="67.8878%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.6378%" y="501" width="0.0787%" height="15" fill="rgb(251,55,1)" fg:x="859" fg:w="1"/><text x="67.8878%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.6378%" y="485" width="0.0787%" height="15" fill="rgb(218,117,39)" fg:x="859" fg:w="1"/><text x="67.8878%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.6378%" y="469" width="0.0787%" height="15" fill="rgb(248,169,11)" fg:x="859" fg:w="1"/><text x="67.8878%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="67.7165%" y="533" width="0.1575%" height="15" fill="rgb(244,40,44)" fg:x="860" fg:w="2"/><text x="67.9665%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7953%" y="517" width="0.0787%" height="15" fill="rgb(234,62,37)" fg:x="861" fg:w="1"/><text x="68.0453%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.7165%" y="645" width="0.2362%" height="15" fill="rgb(207,117,42)" fg:x="860" fg:w="3"/><text x="67.9665%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="67.7165%" y="629" width="0.2362%" height="15" fill="rgb(213,43,2)" fg:x="860" fg:w="3"/><text x="67.9665%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.7165%" y="613" width="0.2362%" height="15" fill="rgb(244,202,51)" fg:x="860" fg:w="3"/><text x="67.9665%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="67.7165%" y="597" width="0.2362%" height="15" fill="rgb(253,174,46)" fg:x="860" fg:w="3"/><text x="67.9665%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.7165%" y="581" width="0.2362%" height="15" fill="rgb(251,23,1)" fg:x="860" fg:w="3"/><text x="67.9665%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.7165%" y="565" width="0.2362%" height="15" fill="rgb(253,26,1)" fg:x="860" fg:w="3"/><text x="67.9665%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="67.7165%" y="549" width="0.2362%" height="15" fill="rgb(216,89,31)" fg:x="860" fg:w="3"/><text x="67.9665%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8740%" y="533" width="0.0787%" height="15" fill="rgb(209,109,5)" fg:x="862" fg:w="1"/><text x="68.1240%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8740%" y="517" width="0.0787%" height="15" fill="rgb(229,63,13)" fg:x="862" fg:w="1"/><text x="68.1240%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8740%" y="501" width="0.0787%" height="15" fill="rgb(238,137,54)" fg:x="862" fg:w="1"/><text x="68.1240%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.8740%" y="485" width="0.0787%" height="15" fill="rgb(228,1,9)" fg:x="862" fg:w="1"/><text x="68.1240%" y="495.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="67.9528%" y="549" width="0.0787%" height="15" fill="rgb(249,120,48)" fg:x="863" fg:w="1"/><text x="68.2028%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="67.9528%" y="613" width="0.2362%" height="15" fill="rgb(209,72,36)" fg:x="863" fg:w="3"/><text x="68.2028%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="67.9528%" y="597" width="0.2362%" height="15" fill="rgb(247,98,49)" fg:x="863" fg:w="3"/><text x="68.2028%" y="607.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="67.9528%" y="581" width="0.2362%" height="15" fill="rgb(233,75,36)" fg:x="863" fg:w="3"/><text x="68.2028%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="67.9528%" y="565" width="0.2362%" height="15" fill="rgb(225,14,24)" fg:x="863" fg:w="3"/><text x="68.2028%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="68.0315%" y="549" width="0.1575%" height="15" fill="rgb(237,193,20)" fg:x="864" fg:w="2"/><text x="68.2815%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="68.0315%" y="533" width="0.1575%" height="15" fill="rgb(239,122,19)" fg:x="864" fg:w="2"/><text x="68.2815%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.1102%" y="517" width="0.0787%" height="15" fill="rgb(231,220,10)" fg:x="865" fg:w="1"/><text x="68.3602%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1102%" y="501" width="0.0787%" height="15" fill="rgb(220,66,15)" fg:x="865" fg:w="1"/><text x="68.3602%" y="511.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="68.1890%" y="613" width="0.0787%" height="15" fill="rgb(215,171,52)" fg:x="866" fg:w="1"/><text x="68.4390%" y="623.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="68.3465%" y="565" width="0.0787%" height="15" fill="rgb(241,169,50)" fg:x="868" fg:w="1"/><text x="68.5965%" y="575.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="68.3465%" y="549" width="0.0787%" height="15" fill="rgb(236,189,0)" fg:x="868" fg:w="1"/><text x="68.5965%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="68.2677%" y="597" width="0.2362%" height="15" fill="rgb(217,147,20)" fg:x="867" fg:w="3"/><text x="68.5177%" y="607.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="68.2677%" y="581" width="0.2362%" height="15" fill="rgb(206,188,39)" fg:x="867" fg:w="3"/><text x="68.5177%" y="591.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="68.4252%" y="565" width="0.0787%" height="15" fill="rgb(227,118,25)" fg:x="869" fg:w="1"/><text x="68.6752%" y="575.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="68.4252%" y="549" width="0.0787%" height="15" fill="rgb(248,171,40)" fg:x="869" fg:w="1"/><text x="68.6752%" y="559.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="68.4252%" y="533" width="0.0787%" height="15" fill="rgb(251,90,54)" fg:x="869" fg:w="1"/><text x="68.6752%" y="543.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="68.4252%" y="517" width="0.0787%" height="15" fill="rgb(234,11,46)" fg:x="869" fg:w="1"/><text x="68.6752%" y="527.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="68.4252%" y="501" width="0.0787%" height="15" fill="rgb(229,134,13)" fg:x="869" fg:w="1"/><text x="68.6752%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (8 samples, 0.63%)</title><rect x="67.9528%" y="645" width="0.6299%" height="15" fill="rgb(223,129,3)" fg:x="863" fg:w="8"/><text x="68.2028%" y="655.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.63%)</title><rect x="67.9528%" y="629" width="0.6299%" height="15" fill="rgb(221,124,13)" fg:x="863" fg:w="8"/><text x="68.2028%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.31%)</title><rect x="68.2677%" y="613" width="0.3150%" height="15" fill="rgb(234,3,18)" fg:x="867" fg:w="4"/><text x="68.5177%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="68.5039%" y="597" width="0.0787%" height="15" fill="rgb(249,199,20)" fg:x="870" fg:w="1"/><text x="68.7539%" y="607.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="68.5039%" y="581" width="0.0787%" height="15" fill="rgb(224,134,6)" fg:x="870" fg:w="1"/><text x="68.7539%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="68.5827%" y="565" width="0.0787%" height="15" fill="rgb(254,83,26)" fg:x="871" fg:w="1"/><text x="68.8327%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.5827%" y="549" width="0.0787%" height="15" fill="rgb(217,88,9)" fg:x="871" fg:w="1"/><text x="68.8327%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.5827%" y="533" width="0.0787%" height="15" fill="rgb(225,73,2)" fg:x="871" fg:w="1"/><text x="68.8327%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.5827%" y="517" width="0.0787%" height="15" fill="rgb(226,44,39)" fg:x="871" fg:w="1"/><text x="68.8327%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.5827%" y="501" width="0.0787%" height="15" fill="rgb(228,53,17)" fg:x="871" fg:w="1"/><text x="68.8327%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.5827%" y="485" width="0.0787%" height="15" fill="rgb(212,27,27)" fg:x="871" fg:w="1"/><text x="68.8327%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="68.5827%" y="469" width="0.0787%" height="15" fill="rgb(241,50,6)" fg:x="871" fg:w="1"/><text x="68.8327%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.6614%" y="565" width="0.0787%" height="15" fill="rgb(225,28,51)" fg:x="872" fg:w="1"/><text x="68.9114%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.6614%" y="549" width="0.0787%" height="15" fill="rgb(215,33,16)" fg:x="872" fg:w="1"/><text x="68.9114%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7402%" y="373" width="0.0787%" height="15" fill="rgb(243,40,39)" fg:x="873" fg:w="1"/><text x="68.9902%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7402%" y="357" width="0.0787%" height="15" fill="rgb(225,11,42)" fg:x="873" fg:w="1"/><text x="68.9902%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7402%" y="341" width="0.0787%" height="15" fill="rgb(241,220,38)" fg:x="873" fg:w="1"/><text x="68.9902%" y="351.50"></text></g><g><title>engine::session::Session::flush (4 samples, 0.31%)</title><rect x="68.5827%" y="629" width="0.3150%" height="15" fill="rgb(244,52,35)" fg:x="871" fg:w="4"/><text x="68.8327%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (4 samples, 0.31%)</title><rect x="68.5827%" y="613" width="0.3150%" height="15" fill="rgb(246,42,46)" fg:x="871" fg:w="4"/><text x="68.8327%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (4 samples, 0.31%)</title><rect x="68.5827%" y="597" width="0.3150%" height="15" fill="rgb(205,184,13)" fg:x="871" fg:w="4"/><text x="68.8327%" y="607.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (4 samples, 0.31%)</title><rect x="68.5827%" y="581" width="0.3150%" height="15" fill="rgb(209,48,36)" fg:x="871" fg:w="4"/><text x="68.8327%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="68.7402%" y="565" width="0.1575%" height="15" fill="rgb(244,34,51)" fg:x="873" fg:w="2"/><text x="68.9902%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="68.7402%" y="549" width="0.1575%" height="15" fill="rgb(221,107,33)" fg:x="873" fg:w="2"/><text x="68.9902%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="68.7402%" y="533" width="0.1575%" height="15" fill="rgb(224,203,12)" fg:x="873" fg:w="2"/><text x="68.9902%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="68.7402%" y="517" width="0.1575%" height="15" fill="rgb(230,215,18)" fg:x="873" fg:w="2"/><text x="68.9902%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="68.7402%" y="501" width="0.1575%" height="15" fill="rgb(206,185,35)" fg:x="873" fg:w="2"/><text x="68.9902%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.7402%" y="485" width="0.1575%" height="15" fill="rgb(228,140,34)" fg:x="873" fg:w="2"/><text x="68.9902%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.7402%" y="469" width="0.1575%" height="15" fill="rgb(208,93,13)" fg:x="873" fg:w="2"/><text x="68.9902%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.7402%" y="453" width="0.1575%" height="15" fill="rgb(221,193,39)" fg:x="873" fg:w="2"/><text x="68.9902%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.7402%" y="437" width="0.1575%" height="15" fill="rgb(241,132,34)" fg:x="873" fg:w="2"/><text x="68.9902%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.7402%" y="421" width="0.1575%" height="15" fill="rgb(221,141,10)" fg:x="873" fg:w="2"/><text x="68.9902%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.7402%" y="405" width="0.1575%" height="15" fill="rgb(226,90,31)" fg:x="873" fg:w="2"/><text x="68.9902%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.7402%" y="389" width="0.1575%" height="15" fill="rgb(243,75,5)" fg:x="873" fg:w="2"/><text x="68.9902%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.8189%" y="373" width="0.0787%" height="15" fill="rgb(227,156,21)" fg:x="874" fg:w="1"/><text x="69.0689%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.8189%" y="357" width="0.0787%" height="15" fill="rgb(250,195,8)" fg:x="874" fg:w="1"/><text x="69.0689%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8189%" y="341" width="0.0787%" height="15" fill="rgb(220,134,5)" fg:x="874" fg:w="1"/><text x="69.0689%" y="351.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="68.8976%" y="597" width="0.0787%" height="15" fill="rgb(246,106,34)" fg:x="875" fg:w="1"/><text x="69.1476%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.8976%" y="581" width="0.0787%" height="15" fill="rgb(205,1,4)" fg:x="875" fg:w="1"/><text x="69.1476%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.8976%" y="565" width="0.0787%" height="15" fill="rgb(224,151,29)" fg:x="875" fg:w="1"/><text x="69.1476%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.8976%" y="549" width="0.0787%" height="15" fill="rgb(251,196,0)" fg:x="875" fg:w="1"/><text x="69.1476%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.8976%" y="533" width="0.0787%" height="15" fill="rgb(212,127,0)" fg:x="875" fg:w="1"/><text x="69.1476%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8976%" y="517" width="0.0787%" height="15" fill="rgb(236,71,53)" fg:x="875" fg:w="1"/><text x="69.1476%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8976%" y="501" width="0.0787%" height="15" fill="rgb(227,99,0)" fg:x="875" fg:w="1"/><text x="69.1476%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8976%" y="485" width="0.0787%" height="15" fill="rgb(239,89,21)" fg:x="875" fg:w="1"/><text x="69.1476%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.8976%" y="469" width="0.0787%" height="15" fill="rgb(243,122,19)" fg:x="875" fg:w="1"/><text x="69.1476%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="68.9764%" y="597" width="0.0787%" height="15" fill="rgb(229,192,45)" fg:x="876" fg:w="1"/><text x="69.2264%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="68.8976%" y="629" width="0.2362%" height="15" fill="rgb(235,165,35)" fg:x="875" fg:w="3"/><text x="69.1476%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="68.8976%" y="613" width="0.2362%" height="15" fill="rgb(253,202,0)" fg:x="875" fg:w="3"/><text x="69.1476%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="69.0551%" y="597" width="0.0787%" height="15" fill="rgb(235,51,20)" fg:x="877" fg:w="1"/><text x="69.3051%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="69.0551%" y="581" width="0.0787%" height="15" fill="rgb(218,95,46)" fg:x="877" fg:w="1"/><text x="69.3051%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.0551%" y="565" width="0.0787%" height="15" fill="rgb(212,81,10)" fg:x="877" fg:w="1"/><text x="69.3051%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.0551%" y="549" width="0.0787%" height="15" fill="rgb(240,59,0)" fg:x="877" fg:w="1"/><text x="69.3051%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.0551%" y="533" width="0.0787%" height="15" fill="rgb(212,191,42)" fg:x="877" fg:w="1"/><text x="69.3051%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.0551%" y="517" width="0.0787%" height="15" fill="rgb(233,140,3)" fg:x="877" fg:w="1"/><text x="69.3051%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0551%" y="501" width="0.0787%" height="15" fill="rgb(215,69,23)" fg:x="877" fg:w="1"/><text x="69.3051%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0551%" y="485" width="0.0787%" height="15" fill="rgb(240,202,20)" fg:x="877" fg:w="1"/><text x="69.3051%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0551%" y="469" width="0.0787%" height="15" fill="rgb(209,146,50)" fg:x="877" fg:w="1"/><text x="69.3051%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0551%" y="453" width="0.0787%" height="15" fill="rgb(253,102,54)" fg:x="877" fg:w="1"/><text x="69.3051%" y="463.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="69.1339%" y="629" width="0.0787%" height="15" fill="rgb(250,173,47)" fg:x="878" fg:w="1"/><text x="69.3839%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="69.1339%" y="613" width="0.0787%" height="15" fill="rgb(232,142,7)" fg:x="878" fg:w="1"/><text x="69.3839%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="69.1339%" y="597" width="0.0787%" height="15" fill="rgb(230,157,47)" fg:x="878" fg:w="1"/><text x="69.3839%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="69.1339%" y="581" width="0.0787%" height="15" fill="rgb(214,177,35)" fg:x="878" fg:w="1"/><text x="69.3839%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="69.1339%" y="565" width="0.0787%" height="15" fill="rgb(234,119,46)" fg:x="878" fg:w="1"/><text x="69.3839%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.1339%" y="549" width="0.0787%" height="15" fill="rgb(241,180,50)" fg:x="878" fg:w="1"/><text x="69.3839%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="69.1339%" y="533" width="0.0787%" height="15" fill="rgb(221,54,25)" fg:x="878" fg:w="1"/><text x="69.3839%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.1339%" y="517" width="0.0787%" height="15" fill="rgb(209,157,44)" fg:x="878" fg:w="1"/><text x="69.3839%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="69.1339%" y="501" width="0.0787%" height="15" fill="rgb(246,115,41)" fg:x="878" fg:w="1"/><text x="69.3839%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="69.1339%" y="485" width="0.0787%" height="15" fill="rgb(229,86,1)" fg:x="878" fg:w="1"/><text x="69.3839%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.1339%" y="469" width="0.0787%" height="15" fill="rgb(240,108,53)" fg:x="878" fg:w="1"/><text x="69.3839%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="69.2126%" y="549" width="0.0787%" height="15" fill="rgb(227,134,2)" fg:x="879" fg:w="1"/><text x="69.4626%" y="559.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="69.2126%" y="533" width="0.0787%" height="15" fill="rgb(213,129,25)" fg:x="879" fg:w="1"/><text x="69.4626%" y="543.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="69.2126%" y="517" width="0.0787%" height="15" fill="rgb(226,35,21)" fg:x="879" fg:w="1"/><text x="69.4626%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="69.2126%" y="501" width="0.0787%" height="15" fill="rgb(208,129,26)" fg:x="879" fg:w="1"/><text x="69.4626%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.2126%" y="485" width="0.0787%" height="15" fill="rgb(224,83,6)" fg:x="879" fg:w="1"/><text x="69.4626%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.2126%" y="469" width="0.0787%" height="15" fill="rgb(227,52,39)" fg:x="879" fg:w="1"/><text x="69.4626%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2126%" y="453" width="0.0787%" height="15" fill="rgb(241,30,17)" fg:x="879" fg:w="1"/><text x="69.4626%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2126%" y="437" width="0.0787%" height="15" fill="rgb(246,186,42)" fg:x="879" fg:w="1"/><text x="69.4626%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2126%" y="421" width="0.0787%" height="15" fill="rgb(221,169,15)" fg:x="879" fg:w="1"/><text x="69.4626%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2126%" y="405" width="0.0787%" height="15" fill="rgb(235,108,21)" fg:x="879" fg:w="1"/><text x="69.4626%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.2126%" y="389" width="0.0787%" height="15" fill="rgb(219,148,30)" fg:x="879" fg:w="1"/><text x="69.4626%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2126%" y="373" width="0.0787%" height="15" fill="rgb(220,109,5)" fg:x="879" fg:w="1"/><text x="69.4626%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2126%" y="357" width="0.0787%" height="15" fill="rgb(213,203,48)" fg:x="879" fg:w="1"/><text x="69.4626%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2126%" y="341" width="0.0787%" height="15" fill="rgb(244,71,33)" fg:x="879" fg:w="1"/><text x="69.4626%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2126%" y="325" width="0.0787%" height="15" fill="rgb(209,23,2)" fg:x="879" fg:w="1"/><text x="69.4626%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2126%" y="309" width="0.0787%" height="15" fill="rgb(219,97,7)" fg:x="879" fg:w="1"/><text x="69.4626%" y="319.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="69.2126%" y="565" width="0.1575%" height="15" fill="rgb(216,161,23)" fg:x="879" fg:w="2"/><text x="69.4626%" y="575.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="69.2913%" y="549" width="0.0787%" height="15" fill="rgb(207,45,42)" fg:x="880" fg:w="1"/><text x="69.5413%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="69.2913%" y="533" width="0.0787%" height="15" fill="rgb(241,61,4)" fg:x="880" fg:w="1"/><text x="69.5413%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.2913%" y="517" width="0.0787%" height="15" fill="rgb(236,170,1)" fg:x="880" fg:w="1"/><text x="69.5413%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.2913%" y="501" width="0.0787%" height="15" fill="rgb(239,72,5)" fg:x="880" fg:w="1"/><text x="69.5413%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.2913%" y="485" width="0.0787%" height="15" fill="rgb(214,13,50)" fg:x="880" fg:w="1"/><text x="69.5413%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.2913%" y="469" width="0.0787%" height="15" fill="rgb(224,88,9)" fg:x="880" fg:w="1"/><text x="69.5413%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2913%" y="453" width="0.0787%" height="15" fill="rgb(238,192,34)" fg:x="880" fg:w="1"/><text x="69.5413%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2913%" y="437" width="0.0787%" height="15" fill="rgb(217,203,50)" fg:x="880" fg:w="1"/><text x="69.5413%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2913%" y="421" width="0.0787%" height="15" fill="rgb(241,123,32)" fg:x="880" fg:w="1"/><text x="69.5413%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2913%" y="405" width="0.0787%" height="15" fill="rgb(248,151,39)" fg:x="880" fg:w="1"/><text x="69.5413%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2913%" y="389" width="0.0787%" height="15" fill="rgb(208,89,6)" fg:x="880" fg:w="1"/><text x="69.5413%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="69.2126%" y="613" width="0.2362%" height="15" fill="rgb(254,43,26)" fg:x="879" fg:w="3"/><text x="69.4626%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="69.2126%" y="597" width="0.2362%" height="15" fill="rgb(216,158,13)" fg:x="879" fg:w="3"/><text x="69.4626%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="69.2126%" y="581" width="0.2362%" height="15" fill="rgb(212,47,37)" fg:x="879" fg:w="3"/><text x="69.4626%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="69.3701%" y="565" width="0.0787%" height="15" fill="rgb(254,16,10)" fg:x="881" fg:w="1"/><text x="69.6201%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="69.3701%" y="549" width="0.0787%" height="15" fill="rgb(223,228,16)" fg:x="881" fg:w="1"/><text x="69.6201%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="69.3701%" y="533" width="0.0787%" height="15" fill="rgb(249,108,50)" fg:x="881" fg:w="1"/><text x="69.6201%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="69.3701%" y="517" width="0.0787%" height="15" fill="rgb(208,220,5)" fg:x="881" fg:w="1"/><text x="69.6201%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="69.3701%" y="501" width="0.0787%" height="15" fill="rgb(217,89,48)" fg:x="881" fg:w="1"/><text x="69.6201%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.3701%" y="485" width="0.0787%" height="15" fill="rgb(212,113,41)" fg:x="881" fg:w="1"/><text x="69.6201%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="69.3701%" y="469" width="0.0787%" height="15" fill="rgb(231,127,5)" fg:x="881" fg:w="1"/><text x="69.6201%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.3701%" y="453" width="0.0787%" height="15" fill="rgb(217,141,17)" fg:x="881" fg:w="1"/><text x="69.6201%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="69.3701%" y="437" width="0.0787%" height="15" fill="rgb(245,125,54)" fg:x="881" fg:w="1"/><text x="69.6201%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="69.3701%" y="421" width="0.0787%" height="15" fill="rgb(248,125,3)" fg:x="881" fg:w="1"/><text x="69.6201%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.3701%" y="405" width="0.0787%" height="15" fill="rgb(236,119,51)" fg:x="881" fg:w="1"/><text x="69.6201%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="69.3701%" y="389" width="0.0787%" height="15" fill="rgb(239,99,8)" fg:x="881" fg:w="1"/><text x="69.6201%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.3701%" y="373" width="0.0787%" height="15" fill="rgb(224,228,4)" fg:x="881" fg:w="1"/><text x="69.6201%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.4488%" y="517" width="0.1575%" height="15" fill="rgb(220,131,45)" fg:x="882" fg:w="2"/><text x="69.6988%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.5276%" y="501" width="0.0787%" height="15" fill="rgb(215,62,5)" fg:x="883" fg:w="1"/><text x="69.7776%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.5276%" y="485" width="0.0787%" height="15" fill="rgb(253,12,24)" fg:x="883" fg:w="1"/><text x="69.7776%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="69.4488%" y="533" width="0.2362%" height="15" fill="rgb(248,120,50)" fg:x="882" fg:w="3"/><text x="69.6988%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6063%" y="517" width="0.0787%" height="15" fill="rgb(245,194,10)" fg:x="884" fg:w="1"/><text x="69.8563%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.6063%" y="501" width="0.0787%" height="15" fill="rgb(241,149,38)" fg:x="884" fg:w="1"/><text x="69.8563%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.6063%" y="485" width="0.0787%" height="15" fill="rgb(219,215,7)" fg:x="884" fg:w="1"/><text x="69.8563%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.31%)</title><rect x="69.4488%" y="549" width="0.3150%" height="15" fill="rgb(208,120,31)" fg:x="882" fg:w="4"/><text x="69.6988%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6850%" y="533" width="0.0787%" height="15" fill="rgb(244,30,8)" fg:x="885" fg:w="1"/><text x="69.9350%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.6850%" y="517" width="0.0787%" height="15" fill="rgb(238,35,44)" fg:x="885" fg:w="1"/><text x="69.9350%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.7638%" y="517" width="0.0787%" height="15" fill="rgb(243,218,37)" fg:x="886" fg:w="1"/><text x="70.0138%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.7638%" y="549" width="0.1575%" height="15" fill="rgb(218,169,10)" fg:x="886" fg:w="2"/><text x="70.0138%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="69.7638%" y="533" width="0.1575%" height="15" fill="rgb(221,144,10)" fg:x="886" fg:w="2"/><text x="70.0138%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8425%" y="517" width="0.0787%" height="15" fill="rgb(226,41,38)" fg:x="887" fg:w="1"/><text x="70.0925%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8425%" y="501" width="0.0787%" height="15" fill="rgb(228,3,1)" fg:x="887" fg:w="1"/><text x="70.0925%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8425%" y="485" width="0.0787%" height="15" fill="rgb(209,129,12)" fg:x="887" fg:w="1"/><text x="70.0925%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8425%" y="469" width="0.0787%" height="15" fill="rgb(213,136,33)" fg:x="887" fg:w="1"/><text x="70.0925%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8425%" y="453" width="0.0787%" height="15" fill="rgb(209,181,29)" fg:x="887" fg:w="1"/><text x="70.0925%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9213%" y="501" width="0.0787%" height="15" fill="rgb(234,173,18)" fg:x="888" fg:w="1"/><text x="70.1713%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9213%" y="485" width="0.0787%" height="15" fill="rgb(227,73,47)" fg:x="888" fg:w="1"/><text x="70.1713%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9213%" y="469" width="0.0787%" height="15" fill="rgb(234,9,34)" fg:x="888" fg:w="1"/><text x="70.1713%" y="479.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.63%)</title><rect x="69.4488%" y="613" width="0.6299%" height="15" fill="rgb(235,172,15)" fg:x="882" fg:w="8"/><text x="69.6988%" y="623.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.63%)</title><rect x="69.4488%" y="597" width="0.6299%" height="15" fill="rgb(245,61,2)" fg:x="882" fg:w="8"/><text x="69.6988%" y="607.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.63%)</title><rect x="69.4488%" y="581" width="0.6299%" height="15" fill="rgb(238,39,47)" fg:x="882" fg:w="8"/><text x="69.6988%" y="591.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (8 samples, 0.63%)</title><rect x="69.4488%" y="565" width="0.6299%" height="15" fill="rgb(234,37,24)" fg:x="882" fg:w="8"/><text x="69.6988%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="69.9213%" y="549" width="0.1575%" height="15" fill="rgb(248,223,24)" fg:x="888" fg:w="2"/><text x="70.1713%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="69.9213%" y="533" width="0.1575%" height="15" fill="rgb(223,12,15)" fg:x="888" fg:w="2"/><text x="70.1713%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="69.9213%" y="517" width="0.1575%" height="15" fill="rgb(249,6,3)" fg:x="888" fg:w="2"/><text x="70.1713%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.0000%" y="501" width="0.0787%" height="15" fill="rgb(237,105,33)" fg:x="889" fg:w="1"/><text x="70.2500%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="70.0000%" y="485" width="0.0787%" height="15" fill="rgb(252,208,35)" fg:x="889" fg:w="1"/><text x="70.2500%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.0000%" y="469" width="0.0787%" height="15" fill="rgb(215,181,35)" fg:x="889" fg:w="1"/><text x="70.2500%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.0000%" y="453" width="0.0787%" height="15" fill="rgb(246,212,3)" fg:x="889" fg:w="1"/><text x="70.2500%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="70.0787%" y="549" width="0.0787%" height="15" fill="rgb(247,156,24)" fg:x="890" fg:w="1"/><text x="70.3287%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="70.0787%" y="533" width="0.0787%" height="15" fill="rgb(248,9,31)" fg:x="890" fg:w="1"/><text x="70.3287%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0787%" y="517" width="0.0787%" height="15" fill="rgb(234,26,45)" fg:x="890" fg:w="1"/><text x="70.3287%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="70.0787%" y="597" width="0.1575%" height="15" fill="rgb(249,11,32)" fg:x="890" fg:w="2"/><text x="70.3287%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="70.0787%" y="581" width="0.1575%" height="15" fill="rgb(249,162,33)" fg:x="890" fg:w="2"/><text x="70.3287%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="70.0787%" y="565" width="0.1575%" height="15" fill="rgb(232,4,32)" fg:x="890" fg:w="2"/><text x="70.3287%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1575%" y="549" width="0.0787%" height="15" fill="rgb(212,5,45)" fg:x="891" fg:w="1"/><text x="70.4075%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1575%" y="533" width="0.0787%" height="15" fill="rgb(227,95,13)" fg:x="891" fg:w="1"/><text x="70.4075%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.1575%" y="517" width="0.0787%" height="15" fill="rgb(223,205,10)" fg:x="891" fg:w="1"/><text x="70.4075%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1575%" y="501" width="0.0787%" height="15" fill="rgb(222,178,8)" fg:x="891" fg:w="1"/><text x="70.4075%" y="511.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="70.0787%" y="613" width="0.2362%" height="15" fill="rgb(216,13,22)" fg:x="890" fg:w="3"/><text x="70.3287%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="70.2362%" y="597" width="0.0787%" height="15" fill="rgb(240,167,12)" fg:x="892" fg:w="1"/><text x="70.4862%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.2362%" y="581" width="0.0787%" height="15" fill="rgb(235,68,35)" fg:x="892" fg:w="1"/><text x="70.4862%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2362%" y="565" width="0.0787%" height="15" fill="rgb(253,40,27)" fg:x="892" fg:w="1"/><text x="70.4862%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.2362%" y="549" width="0.0787%" height="15" fill="rgb(214,19,28)" fg:x="892" fg:w="1"/><text x="70.4862%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="70.2362%" y="533" width="0.0787%" height="15" fill="rgb(210,167,45)" fg:x="892" fg:w="1"/><text x="70.4862%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.2362%" y="517" width="0.0787%" height="15" fill="rgb(232,97,40)" fg:x="892" fg:w="1"/><text x="70.4862%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2362%" y="501" width="0.0787%" height="15" fill="rgb(250,35,23)" fg:x="892" fg:w="1"/><text x="70.4862%" y="511.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="70.3150%" y="613" width="0.0787%" height="15" fill="rgb(248,47,53)" fg:x="893" fg:w="1"/><text x="70.5650%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.3150%" y="597" width="0.0787%" height="15" fill="rgb(226,58,50)" fg:x="893" fg:w="1"/><text x="70.5650%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.3150%" y="581" width="0.0787%" height="15" fill="rgb(217,105,26)" fg:x="893" fg:w="1"/><text x="70.5650%" y="591.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.3150%" y="565" width="0.0787%" height="15" fill="rgb(208,64,1)" fg:x="893" fg:w="1"/><text x="70.5650%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.3150%" y="549" width="0.0787%" height="15" fill="rgb(214,80,1)" fg:x="893" fg:w="1"/><text x="70.5650%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.3150%" y="533" width="0.0787%" height="15" fill="rgb(206,175,26)" fg:x="893" fg:w="1"/><text x="70.5650%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.3150%" y="517" width="0.0787%" height="15" fill="rgb(235,156,37)" fg:x="893" fg:w="1"/><text x="70.5650%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3150%" y="501" width="0.0787%" height="15" fill="rgb(213,100,9)" fg:x="893" fg:w="1"/><text x="70.5650%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3150%" y="485" width="0.0787%" height="15" fill="rgb(241,15,13)" fg:x="893" fg:w="1"/><text x="70.5650%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3150%" y="469" width="0.0787%" height="15" fill="rgb(205,97,43)" fg:x="893" fg:w="1"/><text x="70.5650%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3150%" y="453" width="0.0787%" height="15" fill="rgb(216,106,32)" fg:x="893" fg:w="1"/><text x="70.5650%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.3150%" y="437" width="0.0787%" height="15" fill="rgb(226,200,8)" fg:x="893" fg:w="1"/><text x="70.5650%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3150%" y="421" width="0.0787%" height="15" fill="rgb(244,54,29)" fg:x="893" fg:w="1"/><text x="70.5650%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3150%" y="405" width="0.0787%" height="15" fill="rgb(252,169,12)" fg:x="893" fg:w="1"/><text x="70.5650%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3150%" y="389" width="0.0787%" height="15" fill="rgb(231,199,11)" fg:x="893" fg:w="1"/><text x="70.5650%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (16 samples, 1.26%)</title><rect x="69.2126%" y="629" width="1.2598%" height="15" fill="rgb(233,191,18)" fg:x="879" fg:w="16"/><text x="69.4626%" y="639.50"></text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="70.3937%" y="613" width="0.0787%" height="15" fill="rgb(215,83,47)" fg:x="894" fg:w="1"/><text x="70.6437%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.3937%" y="597" width="0.0787%" height="15" fill="rgb(251,67,19)" fg:x="894" fg:w="1"/><text x="70.6437%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.3937%" y="581" width="0.0787%" height="15" fill="rgb(240,7,20)" fg:x="894" fg:w="1"/><text x="70.6437%" y="591.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.3937%" y="565" width="0.0787%" height="15" fill="rgb(210,150,26)" fg:x="894" fg:w="1"/><text x="70.6437%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.3937%" y="549" width="0.0787%" height="15" fill="rgb(228,75,42)" fg:x="894" fg:w="1"/><text x="70.6437%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="70.3937%" y="533" width="0.0787%" height="15" fill="rgb(237,134,48)" fg:x="894" fg:w="1"/><text x="70.6437%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.3937%" y="517" width="0.0787%" height="15" fill="rgb(205,80,50)" fg:x="894" fg:w="1"/><text x="70.6437%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3937%" y="501" width="0.0787%" height="15" fill="rgb(217,74,48)" fg:x="894" fg:w="1"/><text x="70.6437%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3937%" y="485" width="0.0787%" height="15" fill="rgb(205,82,50)" fg:x="894" fg:w="1"/><text x="70.6437%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3937%" y="469" width="0.0787%" height="15" fill="rgb(228,1,33)" fg:x="894" fg:w="1"/><text x="70.6437%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3937%" y="453" width="0.0787%" height="15" fill="rgb(214,50,23)" fg:x="894" fg:w="1"/><text x="70.6437%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3937%" y="437" width="0.0787%" height="15" fill="rgb(210,62,9)" fg:x="894" fg:w="1"/><text x="70.6437%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.3937%" y="421" width="0.0787%" height="15" fill="rgb(210,104,37)" fg:x="894" fg:w="1"/><text x="70.6437%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.3937%" y="405" width="0.0787%" height="15" fill="rgb(232,104,43)" fg:x="894" fg:w="1"/><text x="70.6437%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.3937%" y="389" width="0.0787%" height="15" fill="rgb(244,52,6)" fg:x="894" fg:w="1"/><text x="70.6437%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.3937%" y="373" width="0.0787%" height="15" fill="rgb(211,174,52)" fg:x="894" fg:w="1"/><text x="70.6437%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3937%" y="357" width="0.0787%" height="15" fill="rgb(229,48,4)" fg:x="894" fg:w="1"/><text x="70.6437%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.3937%" y="341" width="0.0787%" height="15" fill="rgb(205,155,16)" fg:x="894" fg:w="1"/><text x="70.6437%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.3937%" y="325" width="0.0787%" height="15" fill="rgb(211,141,53)" fg:x="894" fg:w="1"/><text x="70.6437%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.3937%" y="309" width="0.0787%" height="15" fill="rgb(240,148,11)" fg:x="894" fg:w="1"/><text x="70.6437%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.3937%" y="293" width="0.0787%" height="15" fill="rgb(214,45,23)" fg:x="894" fg:w="1"/><text x="70.6437%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.3937%" y="277" width="0.0787%" height="15" fill="rgb(248,74,26)" fg:x="894" fg:w="1"/><text x="70.6437%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3937%" y="261" width="0.0787%" height="15" fill="rgb(218,121,16)" fg:x="894" fg:w="1"/><text x="70.6437%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.4724%" y="549" width="0.0787%" height="15" fill="rgb(218,10,47)" fg:x="895" fg:w="1"/><text x="70.7224%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.4724%" y="533" width="0.0787%" height="15" fill="rgb(227,99,14)" fg:x="895" fg:w="1"/><text x="70.7224%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.4724%" y="517" width="0.0787%" height="15" fill="rgb(229,83,46)" fg:x="895" fg:w="1"/><text x="70.7224%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4724%" y="501" width="0.0787%" height="15" fill="rgb(228,25,1)" fg:x="895" fg:w="1"/><text x="70.7224%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4724%" y="485" width="0.0787%" height="15" fill="rgb(252,190,15)" fg:x="895" fg:w="1"/><text x="70.7224%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4724%" y="469" width="0.0787%" height="15" fill="rgb(213,103,51)" fg:x="895" fg:w="1"/><text x="70.7224%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4724%" y="453" width="0.0787%" height="15" fill="rgb(220,38,44)" fg:x="895" fg:w="1"/><text x="70.7224%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.4724%" y="437" width="0.0787%" height="15" fill="rgb(210,45,26)" fg:x="895" fg:w="1"/><text x="70.7224%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4724%" y="421" width="0.0787%" height="15" fill="rgb(205,95,48)" fg:x="895" fg:w="1"/><text x="70.7224%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4724%" y="405" width="0.0787%" height="15" fill="rgb(225,179,37)" fg:x="895" fg:w="1"/><text x="70.7224%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4724%" y="389" width="0.0787%" height="15" fill="rgb(230,209,3)" fg:x="895" fg:w="1"/><text x="70.7224%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4724%" y="373" width="0.0787%" height="15" fill="rgb(248,12,46)" fg:x="895" fg:w="1"/><text x="70.7224%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4724%" y="357" width="0.0787%" height="15" fill="rgb(234,18,0)" fg:x="895" fg:w="1"/><text x="70.7224%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.4724%" y="341" width="0.0787%" height="15" fill="rgb(238,197,14)" fg:x="895" fg:w="1"/><text x="70.7224%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.4724%" y="325" width="0.0787%" height="15" fill="rgb(251,162,48)" fg:x="895" fg:w="1"/><text x="70.7224%" y="335.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="70.4724%" y="565" width="0.1575%" height="15" fill="rgb(237,73,42)" fg:x="895" fg:w="2"/><text x="70.7224%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.5512%" y="549" width="0.0787%" height="15" fill="rgb(211,108,8)" fg:x="896" fg:w="1"/><text x="70.8012%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="70.5512%" y="533" width="0.0787%" height="15" fill="rgb(213,45,22)" fg:x="896" fg:w="1"/><text x="70.8012%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.5512%" y="517" width="0.0787%" height="15" fill="rgb(252,154,5)" fg:x="896" fg:w="1"/><text x="70.8012%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="70.5512%" y="501" width="0.0787%" height="15" fill="rgb(221,79,52)" fg:x="896" fg:w="1"/><text x="70.8012%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.5512%" y="485" width="0.0787%" height="15" fill="rgb(229,220,36)" fg:x="896" fg:w="1"/><text x="70.8012%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="70.5512%" y="469" width="0.0787%" height="15" fill="rgb(211,17,16)" fg:x="896" fg:w="1"/><text x="70.8012%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.31%)</title><rect x="70.4724%" y="597" width="0.3150%" height="15" fill="rgb(222,55,31)" fg:x="895" fg:w="4"/><text x="70.7224%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (4 samples, 0.31%)</title><rect x="70.4724%" y="581" width="0.3150%" height="15" fill="rgb(221,221,31)" fg:x="895" fg:w="4"/><text x="70.7224%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="70.6299%" y="565" width="0.1575%" height="15" fill="rgb(227,168,26)" fg:x="897" fg:w="2"/><text x="70.8799%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.6299%" y="549" width="0.1575%" height="15" fill="rgb(224,139,9)" fg:x="897" fg:w="2"/><text x="70.8799%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.6299%" y="533" width="0.1575%" height="15" fill="rgb(254,172,0)" fg:x="897" fg:w="2"/><text x="70.8799%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="70.6299%" y="517" width="0.1575%" height="15" fill="rgb(235,203,1)" fg:x="897" fg:w="2"/><text x="70.8799%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (29 samples, 2.28%)</title><rect x="68.5827%" y="645" width="2.2835%" height="15" fill="rgb(216,205,24)" fg:x="871" fg:w="29"/><text x="68.8327%" y="655.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.39%)</title><rect x="70.4724%" y="629" width="0.3937%" height="15" fill="rgb(233,24,6)" fg:x="895" fg:w="5"/><text x="70.7224%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.39%)</title><rect x="70.4724%" y="613" width="0.3937%" height="15" fill="rgb(244,110,9)" fg:x="895" fg:w="5"/><text x="70.7224%" y="623.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="70.7874%" y="597" width="0.0787%" height="15" fill="rgb(239,222,42)" fg:x="899" fg:w="1"/><text x="71.0374%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="70.7874%" y="581" width="0.0787%" height="15" fill="rgb(218,145,13)" fg:x="899" fg:w="1"/><text x="71.0374%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="70.7874%" y="565" width="0.0787%" height="15" fill="rgb(207,69,11)" fg:x="899" fg:w="1"/><text x="71.0374%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.7874%" y="549" width="0.0787%" height="15" fill="rgb(220,223,22)" fg:x="899" fg:w="1"/><text x="71.0374%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7874%" y="533" width="0.0787%" height="15" fill="rgb(245,102,5)" fg:x="899" fg:w="1"/><text x="71.0374%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.7874%" y="517" width="0.0787%" height="15" fill="rgb(211,148,2)" fg:x="899" fg:w="1"/><text x="71.0374%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.7874%" y="501" width="0.0787%" height="15" fill="rgb(241,13,44)" fg:x="899" fg:w="1"/><text x="71.0374%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7874%" y="485" width="0.0787%" height="15" fill="rgb(219,137,21)" fg:x="899" fg:w="1"/><text x="71.0374%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="70.8661%" y="629" width="0.0787%" height="15" fill="rgb(242,206,5)" fg:x="900" fg:w="1"/><text x="71.1161%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="70.8661%" y="613" width="0.0787%" height="15" fill="rgb(217,114,22)" fg:x="900" fg:w="1"/><text x="71.1161%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="70.8661%" y="597" width="0.0787%" height="15" fill="rgb(253,206,42)" fg:x="900" fg:w="1"/><text x="71.1161%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="70.8661%" y="581" width="0.0787%" height="15" fill="rgb(236,102,18)" fg:x="900" fg:w="1"/><text x="71.1161%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="70.8661%" y="565" width="0.0787%" height="15" fill="rgb(208,59,49)" fg:x="900" fg:w="1"/><text x="71.1161%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="70.8661%" y="549" width="0.0787%" height="15" fill="rgb(215,194,28)" fg:x="900" fg:w="1"/><text x="71.1161%" y="559.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="70.9449%" y="613" width="0.0787%" height="15" fill="rgb(243,207,11)" fg:x="901" fg:w="1"/><text x="71.1949%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="70.9449%" y="597" width="0.0787%" height="15" fill="rgb(254,179,35)" fg:x="901" fg:w="1"/><text x="71.1949%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.9449%" y="581" width="0.0787%" height="15" fill="rgb(235,97,3)" fg:x="901" fg:w="1"/><text x="71.1949%" y="591.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9449%" y="565" width="0.0787%" height="15" fill="rgb(215,155,33)" fg:x="901" fg:w="1"/><text x="71.1949%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.0236%" y="549" width="0.0787%" height="15" fill="rgb(223,128,12)" fg:x="902" fg:w="1"/><text x="71.2736%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1024%" y="485" width="0.0787%" height="15" fill="rgb(208,157,18)" fg:x="903" fg:w="1"/><text x="71.3524%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.1024%" y="469" width="0.0787%" height="15" fill="rgb(249,70,54)" fg:x="903" fg:w="1"/><text x="71.3524%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.1024%" y="533" width="0.1575%" height="15" fill="rgb(244,118,24)" fg:x="903" fg:w="2"/><text x="71.3524%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.1024%" y="517" width="0.1575%" height="15" fill="rgb(211,54,0)" fg:x="903" fg:w="2"/><text x="71.3524%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.1024%" y="501" width="0.1575%" height="15" fill="rgb(245,137,45)" fg:x="903" fg:w="2"/><text x="71.3524%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.1811%" y="485" width="0.0787%" height="15" fill="rgb(232,154,31)" fg:x="904" fg:w="1"/><text x="71.4311%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.1811%" y="469" width="0.0787%" height="15" fill="rgb(253,6,39)" fg:x="904" fg:w="1"/><text x="71.4311%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="71.1811%" y="453" width="0.0787%" height="15" fill="rgb(234,183,24)" fg:x="904" fg:w="1"/><text x="71.4311%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.31%)</title><rect x="71.0236%" y="581" width="0.3150%" height="15" fill="rgb(252,84,40)" fg:x="902" fg:w="4"/><text x="71.2736%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="71.0236%" y="565" width="0.3150%" height="15" fill="rgb(224,65,2)" fg:x="902" fg:w="4"/><text x="71.2736%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="71.1024%" y="549" width="0.2362%" height="15" fill="rgb(229,38,24)" fg:x="903" fg:w="3"/><text x="71.3524%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2598%" y="533" width="0.0787%" height="15" fill="rgb(218,131,50)" fg:x="905" fg:w="1"/><text x="71.5098%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.2598%" y="517" width="0.0787%" height="15" fill="rgb(233,106,18)" fg:x="905" fg:w="1"/><text x="71.5098%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.2598%" y="501" width="0.0787%" height="15" fill="rgb(220,216,11)" fg:x="905" fg:w="1"/><text x="71.5098%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3386%" y="581" width="0.1575%" height="15" fill="rgb(251,100,45)" fg:x="906" fg:w="2"/><text x="71.5886%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.3386%" y="565" width="0.1575%" height="15" fill="rgb(235,143,32)" fg:x="906" fg:w="2"/><text x="71.5886%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3386%" y="549" width="0.1575%" height="15" fill="rgb(248,124,34)" fg:x="906" fg:w="2"/><text x="71.5886%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3386%" y="533" width="0.1575%" height="15" fill="rgb(225,221,4)" fg:x="906" fg:w="2"/><text x="71.5886%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3386%" y="517" width="0.1575%" height="15" fill="rgb(242,27,43)" fg:x="906" fg:w="2"/><text x="71.5886%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4173%" y="501" width="0.0787%" height="15" fill="rgb(227,54,8)" fg:x="907" fg:w="1"/><text x="71.6673%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4173%" y="485" width="0.0787%" height="15" fill="rgb(253,139,49)" fg:x="907" fg:w="1"/><text x="71.6673%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4961%" y="501" width="0.0787%" height="15" fill="rgb(231,26,43)" fg:x="908" fg:w="1"/><text x="71.7461%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.5748%" y="485" width="0.0787%" height="15" fill="rgb(207,121,39)" fg:x="909" fg:w="1"/><text x="71.8248%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5748%" y="469" width="0.0787%" height="15" fill="rgb(223,101,35)" fg:x="909" fg:w="1"/><text x="71.8248%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.4961%" y="549" width="0.2362%" height="15" fill="rgb(232,87,23)" fg:x="908" fg:w="3"/><text x="71.7461%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="71.4961%" y="533" width="0.2362%" height="15" fill="rgb(225,180,29)" fg:x="908" fg:w="3"/><text x="71.7461%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.4961%" y="517" width="0.2362%" height="15" fill="rgb(225,25,17)" fg:x="908" fg:w="3"/><text x="71.7461%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.5748%" y="501" width="0.1575%" height="15" fill="rgb(223,8,52)" fg:x="909" fg:w="2"/><text x="71.8248%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6535%" y="485" width="0.0787%" height="15" fill="rgb(246,42,21)" fg:x="910" fg:w="1"/><text x="71.9035%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6535%" y="469" width="0.0787%" height="15" fill="rgb(205,64,43)" fg:x="910" fg:w="1"/><text x="71.9035%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6535%" y="453" width="0.0787%" height="15" fill="rgb(221,160,13)" fg:x="910" fg:w="1"/><text x="71.9035%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.6535%" y="437" width="0.0787%" height="15" fill="rgb(239,58,35)" fg:x="910" fg:w="1"/><text x="71.9035%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.31%)</title><rect x="71.4961%" y="565" width="0.3150%" height="15" fill="rgb(251,26,40)" fg:x="908" fg:w="4"/><text x="71.7461%" y="575.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="71.7323%" y="549" width="0.0787%" height="15" fill="rgb(247,0,4)" fg:x="911" fg:w="1"/><text x="71.9823%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="71.7323%" y="533" width="0.0787%" height="15" fill="rgb(218,130,10)" fg:x="911" fg:w="1"/><text x="71.9823%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="71.7323%" y="517" width="0.0787%" height="15" fill="rgb(239,32,7)" fg:x="911" fg:w="1"/><text x="71.9823%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="71.7323%" y="501" width="0.0787%" height="15" fill="rgb(210,192,24)" fg:x="911" fg:w="1"/><text x="71.9823%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.7323%" y="485" width="0.0787%" height="15" fill="rgb(226,212,17)" fg:x="911" fg:w="1"/><text x="71.9823%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8110%" y="533" width="0.0787%" height="15" fill="rgb(219,201,28)" fg:x="912" fg:w="1"/><text x="72.0610%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8898%" y="533" width="0.0787%" height="15" fill="rgb(235,207,41)" fg:x="913" fg:w="1"/><text x="72.1398%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8898%" y="517" width="0.0787%" height="15" fill="rgb(241,95,54)" fg:x="913" fg:w="1"/><text x="72.1398%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.8898%" y="501" width="0.0787%" height="15" fill="rgb(248,12,23)" fg:x="913" fg:w="1"/><text x="72.1398%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="71.9685%" y="533" width="0.1575%" height="15" fill="rgb(228,173,4)" fg:x="914" fg:w="2"/><text x="72.2185%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.9685%" y="517" width="0.1575%" height="15" fill="rgb(254,99,5)" fg:x="914" fg:w="2"/><text x="72.2185%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0472%" y="501" width="0.0787%" height="15" fill="rgb(212,184,17)" fg:x="915" fg:w="1"/><text x="72.2972%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="72.2047%" y="485" width="0.2362%" height="15" fill="rgb(252,174,1)" fg:x="917" fg:w="3"/><text x="72.4547%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.2835%" y="469" width="0.1575%" height="15" fill="rgb(241,118,51)" fg:x="918" fg:w="2"/><text x="72.5335%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.2835%" y="453" width="0.1575%" height="15" fill="rgb(227,94,47)" fg:x="918" fg:w="2"/><text x="72.5335%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.5197%" y="389" width="0.1575%" height="15" fill="rgb(229,104,2)" fg:x="921" fg:w="2"/><text x="72.7697%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.5197%" y="373" width="0.1575%" height="15" fill="rgb(219,28,31)" fg:x="921" fg:w="2"/><text x="72.7697%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5984%" y="357" width="0.0787%" height="15" fill="rgb(233,109,36)" fg:x="922" fg:w="1"/><text x="72.8484%" y="367.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.94%)</title><rect x="71.8110%" y="565" width="0.9449%" height="15" fill="rgb(246,88,11)" fg:x="912" fg:w="12"/><text x="72.0610%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.94%)</title><rect x="71.8110%" y="549" width="0.9449%" height="15" fill="rgb(209,212,17)" fg:x="912" fg:w="12"/><text x="72.0610%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.63%)</title><rect x="72.1260%" y="533" width="0.6299%" height="15" fill="rgb(243,59,29)" fg:x="916" fg:w="8"/><text x="72.3760%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.55%)</title><rect x="72.2047%" y="517" width="0.5512%" height="15" fill="rgb(244,205,48)" fg:x="917" fg:w="7"/><text x="72.4547%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="72.2047%" y="501" width="0.5512%" height="15" fill="rgb(227,30,6)" fg:x="917" fg:w="7"/><text x="72.4547%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.31%)</title><rect x="72.4409%" y="485" width="0.3150%" height="15" fill="rgb(220,205,48)" fg:x="920" fg:w="4"/><text x="72.6909%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="72.4409%" y="469" width="0.3150%" height="15" fill="rgb(250,94,14)" fg:x="920" fg:w="4"/><text x="72.6909%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.5197%" y="453" width="0.2362%" height="15" fill="rgb(216,119,42)" fg:x="921" fg:w="3"/><text x="72.7697%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.5197%" y="437" width="0.2362%" height="15" fill="rgb(232,155,0)" fg:x="921" fg:w="3"/><text x="72.7697%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.5197%" y="421" width="0.2362%" height="15" fill="rgb(212,24,32)" fg:x="921" fg:w="3"/><text x="72.7697%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.5197%" y="405" width="0.2362%" height="15" fill="rgb(216,69,20)" fg:x="921" fg:w="3"/><text x="72.7697%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.6772%" y="389" width="0.0787%" height="15" fill="rgb(229,73,31)" fg:x="923" fg:w="1"/><text x="72.9272%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.8346%" y="469" width="0.0787%" height="15" fill="rgb(224,219,20)" fg:x="925" fg:w="1"/><text x="73.0846%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8346%" y="453" width="0.0787%" height="15" fill="rgb(215,146,41)" fg:x="925" fg:w="1"/><text x="73.0846%" y="463.50"></text></g><g><title>engine::session::Session::close (27 samples, 2.13%)</title><rect x="70.8661%" y="645" width="2.1260%" height="15" fill="rgb(244,71,31)" fg:x="900" fg:w="27"/><text x="71.1161%" y="655.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (26 samples, 2.05%)</title><rect x="70.9449%" y="629" width="2.0472%" height="15" fill="rgb(224,24,11)" fg:x="901" fg:w="26"/><text x="71.1949%" y="639.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (25 samples, 1.97%)</title><rect x="71.0236%" y="613" width="1.9685%" height="15" fill="rgb(229,76,15)" fg:x="902" fg:w="25"/><text x="71.2736%" y="623.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (25 samples, 1.97%)</title><rect x="71.0236%" y="597" width="1.9685%" height="15" fill="rgb(209,93,2)" fg:x="902" fg:w="25"/><text x="71.2736%" y="607.50">e..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.50%)</title><rect x="71.4961%" y="581" width="1.4961%" height="15" fill="rgb(216,200,50)" fg:x="908" fg:w="19"/><text x="71.7461%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="72.7559%" y="565" width="0.2362%" height="15" fill="rgb(211,67,34)" fg:x="924" fg:w="3"/><text x="73.0059%" y="575.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="72.7559%" y="549" width="0.2362%" height="15" fill="rgb(225,87,47)" fg:x="924" fg:w="3"/><text x="73.0059%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.7559%" y="533" width="0.2362%" height="15" fill="rgb(217,185,16)" fg:x="924" fg:w="3"/><text x="73.0059%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.7559%" y="517" width="0.2362%" height="15" fill="rgb(205,0,0)" fg:x="924" fg:w="3"/><text x="73.0059%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.7559%" y="501" width="0.2362%" height="15" fill="rgb(207,116,45)" fg:x="924" fg:w="3"/><text x="73.0059%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.7559%" y="485" width="0.2362%" height="15" fill="rgb(221,156,26)" fg:x="924" fg:w="3"/><text x="73.0059%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9134%" y="469" width="0.0787%" height="15" fill="rgb(213,140,4)" fg:x="926" fg:w="1"/><text x="73.1634%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9134%" y="453" width="0.0787%" height="15" fill="rgb(231,224,15)" fg:x="926" fg:w="1"/><text x="73.1634%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9134%" y="437" width="0.0787%" height="15" fill="rgb(244,76,20)" fg:x="926" fg:w="1"/><text x="73.1634%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="72.9921%" y="485" width="0.0787%" height="15" fill="rgb(238,117,7)" fg:x="927" fg:w="1"/><text x="73.2421%" y="495.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.9921%" y="469" width="0.0787%" height="15" fill="rgb(235,1,10)" fg:x="927" fg:w="1"/><text x="73.2421%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.9921%" y="453" width="0.0787%" height="15" fill="rgb(216,165,6)" fg:x="927" fg:w="1"/><text x="73.2421%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.9921%" y="437" width="0.0787%" height="15" fill="rgb(246,91,35)" fg:x="927" fg:w="1"/><text x="73.2421%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.9921%" y="421" width="0.0787%" height="15" fill="rgb(228,96,24)" fg:x="927" fg:w="1"/><text x="73.2421%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9921%" y="405" width="0.0787%" height="15" fill="rgb(254,217,53)" fg:x="927" fg:w="1"/><text x="73.2421%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9921%" y="389" width="0.0787%" height="15" fill="rgb(209,60,0)" fg:x="927" fg:w="1"/><text x="73.2421%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9921%" y="373" width="0.0787%" height="15" fill="rgb(250,93,26)" fg:x="927" fg:w="1"/><text x="73.2421%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9921%" y="357" width="0.0787%" height="15" fill="rgb(211,9,40)" fg:x="927" fg:w="1"/><text x="73.2421%" y="367.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="72.9921%" y="501" width="0.1575%" height="15" fill="rgb(242,57,20)" fg:x="927" fg:w="2"/><text x="73.2421%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="73.0709%" y="485" width="0.0787%" height="15" fill="rgb(248,85,48)" fg:x="928" fg:w="1"/><text x="73.3209%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="73.0709%" y="469" width="0.0787%" height="15" fill="rgb(212,117,2)" fg:x="928" fg:w="1"/><text x="73.3209%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0709%" y="453" width="0.0787%" height="15" fill="rgb(243,19,3)" fg:x="928" fg:w="1"/><text x="73.3209%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0709%" y="437" width="0.0787%" height="15" fill="rgb(232,217,24)" fg:x="928" fg:w="1"/><text x="73.3209%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0709%" y="421" width="0.0787%" height="15" fill="rgb(224,175,40)" fg:x="928" fg:w="1"/><text x="73.3209%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0709%" y="405" width="0.0787%" height="15" fill="rgb(212,162,32)" fg:x="928" fg:w="1"/><text x="73.3209%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0709%" y="389" width="0.0787%" height="15" fill="rgb(215,9,4)" fg:x="928" fg:w="1"/><text x="73.3209%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0709%" y="373" width="0.0787%" height="15" fill="rgb(242,42,7)" fg:x="928" fg:w="1"/><text x="73.3209%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0709%" y="357" width="0.0787%" height="15" fill="rgb(242,184,45)" fg:x="928" fg:w="1"/><text x="73.3209%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0709%" y="341" width="0.0787%" height="15" fill="rgb(228,111,51)" fg:x="928" fg:w="1"/><text x="73.3209%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0709%" y="325" width="0.0787%" height="15" fill="rgb(236,147,17)" fg:x="928" fg:w="1"/><text x="73.3209%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0709%" y="309" width="0.0787%" height="15" fill="rgb(210,75,22)" fg:x="928" fg:w="1"/><text x="73.3209%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0709%" y="293" width="0.0787%" height="15" fill="rgb(217,159,45)" fg:x="928" fg:w="1"/><text x="73.3209%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0709%" y="277" width="0.0787%" height="15" fill="rgb(245,165,53)" fg:x="928" fg:w="1"/><text x="73.3209%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0709%" y="261" width="0.0787%" height="15" fill="rgb(251,190,50)" fg:x="928" fg:w="1"/><text x="73.3209%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.0709%" y="245" width="0.0787%" height="15" fill="rgb(208,203,29)" fg:x="928" fg:w="1"/><text x="73.3209%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.0709%" y="229" width="0.0787%" height="15" fill="rgb(207,209,35)" fg:x="928" fg:w="1"/><text x="73.3209%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.0709%" y="213" width="0.0787%" height="15" fill="rgb(230,144,49)" fg:x="928" fg:w="1"/><text x="73.3209%" y="223.50"></text></g><g><title>&lt;engine::perform::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="72.9921%" y="597" width="0.2362%" height="15" fill="rgb(229,31,6)" fg:x="927" fg:w="3"/><text x="73.2421%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="72.9921%" y="581" width="0.2362%" height="15" fill="rgb(251,129,24)" fg:x="927" fg:w="3"/><text x="73.2421%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="72.9921%" y="565" width="0.2362%" height="15" fill="rgb(235,105,15)" fg:x="927" fg:w="3"/><text x="73.2421%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="72.9921%" y="549" width="0.2362%" height="15" fill="rgb(216,52,43)" fg:x="927" fg:w="3"/><text x="73.2421%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="72.9921%" y="533" width="0.2362%" height="15" fill="rgb(238,144,41)" fg:x="927" fg:w="3"/><text x="73.2421%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="72.9921%" y="517" width="0.2362%" height="15" fill="rgb(243,63,9)" fg:x="927" fg:w="3"/><text x="73.2421%" y="527.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="73.1496%" y="501" width="0.0787%" height="15" fill="rgb(246,208,1)" fg:x="929" fg:w="1"/><text x="73.3996%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.1496%" y="485" width="0.0787%" height="15" fill="rgb(233,182,18)" fg:x="929" fg:w="1"/><text x="73.3996%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.2283%" y="565" width="0.0787%" height="15" fill="rgb(242,224,8)" fg:x="930" fg:w="1"/><text x="73.4783%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (2 samples, 0.16%)</title><rect x="73.3071%" y="565" width="0.1575%" height="15" fill="rgb(243,54,37)" fg:x="931" fg:w="2"/><text x="73.5571%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3858%" y="549" width="0.0787%" height="15" fill="rgb(233,192,12)" fg:x="932" fg:w="1"/><text x="73.6358%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3858%" y="533" width="0.0787%" height="15" fill="rgb(251,192,53)" fg:x="932" fg:w="1"/><text x="73.6358%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3858%" y="517" width="0.0787%" height="15" fill="rgb(246,141,26)" fg:x="932" fg:w="1"/><text x="73.6358%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3858%" y="501" width="0.0787%" height="15" fill="rgb(239,195,19)" fg:x="932" fg:w="1"/><text x="73.6358%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3858%" y="485" width="0.0787%" height="15" fill="rgb(241,16,39)" fg:x="932" fg:w="1"/><text x="73.6358%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.4646%" y="533" width="0.1575%" height="15" fill="rgb(223,13,53)" fg:x="933" fg:w="2"/><text x="73.7146%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.4646%" y="517" width="0.1575%" height="15" fill="rgb(214,227,0)" fg:x="933" fg:w="2"/><text x="73.7146%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6220%" y="437" width="0.0787%" height="15" fill="rgb(228,103,26)" fg:x="935" fg:w="1"/><text x="73.8720%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.7008%" y="341" width="0.0787%" height="15" fill="rgb(254,177,53)" fg:x="936" fg:w="1"/><text x="73.9508%" y="351.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.7008%" y="325" width="0.0787%" height="15" fill="rgb(208,201,34)" fg:x="936" fg:w="1"/><text x="73.9508%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.7008%" y="309" width="0.0787%" height="15" fill="rgb(212,39,5)" fg:x="936" fg:w="1"/><text x="73.9508%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.7008%" y="293" width="0.0787%" height="15" fill="rgb(246,117,3)" fg:x="936" fg:w="1"/><text x="73.9508%" y="303.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.7008%" y="277" width="0.0787%" height="15" fill="rgb(244,118,39)" fg:x="936" fg:w="1"/><text x="73.9508%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.7008%" y="261" width="0.0787%" height="15" fill="rgb(241,64,10)" fg:x="936" fg:w="1"/><text x="73.9508%" y="271.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="73.7795%" y="325" width="0.0787%" height="15" fill="rgb(229,39,44)" fg:x="937" fg:w="1"/><text x="74.0295%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.7795%" y="309" width="0.0787%" height="15" fill="rgb(230,226,3)" fg:x="937" fg:w="1"/><text x="74.0295%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7795%" y="293" width="0.0787%" height="15" fill="rgb(222,13,42)" fg:x="937" fg:w="1"/><text x="74.0295%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.7795%" y="277" width="0.0787%" height="15" fill="rgb(247,180,54)" fg:x="937" fg:w="1"/><text x="74.0295%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7795%" y="261" width="0.0787%" height="15" fill="rgb(205,96,16)" fg:x="937" fg:w="1"/><text x="74.0295%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.7795%" y="245" width="0.0787%" height="15" fill="rgb(205,100,21)" fg:x="937" fg:w="1"/><text x="74.0295%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7795%" y="229" width="0.0787%" height="15" fill="rgb(248,51,4)" fg:x="937" fg:w="1"/><text x="74.0295%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.7795%" y="213" width="0.0787%" height="15" fill="rgb(217,197,30)" fg:x="937" fg:w="1"/><text x="74.0295%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7795%" y="197" width="0.0787%" height="15" fill="rgb(240,179,40)" fg:x="937" fg:w="1"/><text x="74.0295%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.7795%" y="181" width="0.0787%" height="15" fill="rgb(212,185,35)" fg:x="937" fg:w="1"/><text x="74.0295%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7795%" y="165" width="0.0787%" height="15" fill="rgb(251,222,31)" fg:x="937" fg:w="1"/><text x="74.0295%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.7795%" y="149" width="0.0787%" height="15" fill="rgb(208,140,36)" fg:x="937" fg:w="1"/><text x="74.0295%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7795%" y="133" width="0.0787%" height="15" fill="rgb(220,148,1)" fg:x="937" fg:w="1"/><text x="74.0295%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.7795%" y="117" width="0.0787%" height="15" fill="rgb(254,4,28)" fg:x="937" fg:w="1"/><text x="74.0295%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7795%" y="101" width="0.0787%" height="15" fill="rgb(222,185,44)" fg:x="937" fg:w="1"/><text x="74.0295%" y="111.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.7795%" y="85" width="0.0787%" height="15" fill="rgb(215,74,39)" fg:x="937" fg:w="1"/><text x="74.0295%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7795%" y="69" width="0.0787%" height="15" fill="rgb(247,86,4)" fg:x="937" fg:w="1"/><text x="74.0295%" y="79.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.31%)</title><rect x="73.6220%" y="469" width="0.3150%" height="15" fill="rgb(231,105,32)" fg:x="935" fg:w="4"/><text x="73.8720%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="73.6220%" y="453" width="0.3150%" height="15" fill="rgb(222,65,35)" fg:x="935" fg:w="4"/><text x="73.8720%" y="463.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="73.7008%" y="437" width="0.2362%" height="15" fill="rgb(218,145,35)" fg:x="936" fg:w="3"/><text x="73.9508%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.24%)</title><rect x="73.7008%" y="421" width="0.2362%" height="15" fill="rgb(208,7,15)" fg:x="936" fg:w="3"/><text x="73.9508%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="73.7008%" y="405" width="0.2362%" height="15" fill="rgb(209,83,13)" fg:x="936" fg:w="3"/><text x="73.9508%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="73.7008%" y="389" width="0.2362%" height="15" fill="rgb(218,3,10)" fg:x="936" fg:w="3"/><text x="73.9508%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="73.7008%" y="373" width="0.2362%" height="15" fill="rgb(211,219,4)" fg:x="936" fg:w="3"/><text x="73.9508%" y="383.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="73.7008%" y="357" width="0.2362%" height="15" fill="rgb(228,194,12)" fg:x="936" fg:w="3"/><text x="73.9508%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="73.7795%" y="341" width="0.1575%" height="15" fill="rgb(210,175,7)" fg:x="937" fg:w="2"/><text x="74.0295%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8583%" y="325" width="0.0787%" height="15" fill="rgb(243,132,6)" fg:x="938" fg:w="1"/><text x="74.1083%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8583%" y="309" width="0.0787%" height="15" fill="rgb(207,72,18)" fg:x="938" fg:w="1"/><text x="74.1083%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.8583%" y="293" width="0.0787%" height="15" fill="rgb(236,1,18)" fg:x="938" fg:w="1"/><text x="74.1083%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8583%" y="277" width="0.0787%" height="15" fill="rgb(227,0,18)" fg:x="938" fg:w="1"/><text x="74.1083%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8583%" y="261" width="0.0787%" height="15" fill="rgb(247,37,5)" fg:x="938" fg:w="1"/><text x="74.1083%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8583%" y="245" width="0.0787%" height="15" fill="rgb(237,179,24)" fg:x="938" fg:w="1"/><text x="74.1083%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8583%" y="229" width="0.0787%" height="15" fill="rgb(226,53,20)" fg:x="938" fg:w="1"/><text x="74.1083%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.8583%" y="213" width="0.0787%" height="15" fill="rgb(247,75,7)" fg:x="938" fg:w="1"/><text x="74.1083%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8583%" y="197" width="0.0787%" height="15" fill="rgb(233,96,12)" fg:x="938" fg:w="1"/><text x="74.1083%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8583%" y="181" width="0.0787%" height="15" fill="rgb(224,125,0)" fg:x="938" fg:w="1"/><text x="74.1083%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.8583%" y="165" width="0.0787%" height="15" fill="rgb(224,92,25)" fg:x="938" fg:w="1"/><text x="74.1083%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8583%" y="149" width="0.0787%" height="15" fill="rgb(224,42,24)" fg:x="938" fg:w="1"/><text x="74.1083%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8583%" y="133" width="0.0787%" height="15" fill="rgb(234,132,49)" fg:x="938" fg:w="1"/><text x="74.1083%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.8583%" y="117" width="0.0787%" height="15" fill="rgb(248,100,35)" fg:x="938" fg:w="1"/><text x="74.1083%" y="127.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9370%" y="437" width="0.0787%" height="15" fill="rgb(239,94,40)" fg:x="939" fg:w="1"/><text x="74.1870%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9370%" y="421" width="0.0787%" height="15" fill="rgb(235,139,28)" fg:x="939" fg:w="1"/><text x="74.1870%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9370%" y="405" width="0.0787%" height="15" fill="rgb(217,144,7)" fg:x="939" fg:w="1"/><text x="74.1870%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9370%" y="389" width="0.0787%" height="15" fill="rgb(227,55,4)" fg:x="939" fg:w="1"/><text x="74.1870%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9370%" y="373" width="0.0787%" height="15" fill="rgb(252,82,54)" fg:x="939" fg:w="1"/><text x="74.1870%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9370%" y="357" width="0.0787%" height="15" fill="rgb(245,172,4)" fg:x="939" fg:w="1"/><text x="74.1870%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9370%" y="341" width="0.0787%" height="15" fill="rgb(207,26,27)" fg:x="939" fg:w="1"/><text x="74.1870%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9370%" y="325" width="0.0787%" height="15" fill="rgb(252,98,18)" fg:x="939" fg:w="1"/><text x="74.1870%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9370%" y="309" width="0.0787%" height="15" fill="rgb(244,8,26)" fg:x="939" fg:w="1"/><text x="74.1870%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9370%" y="293" width="0.0787%" height="15" fill="rgb(237,173,45)" fg:x="939" fg:w="1"/><text x="74.1870%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9370%" y="277" width="0.0787%" height="15" fill="rgb(208,213,49)" fg:x="939" fg:w="1"/><text x="74.1870%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9370%" y="261" width="0.0787%" height="15" fill="rgb(212,122,37)" fg:x="939" fg:w="1"/><text x="74.1870%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9370%" y="245" width="0.0787%" height="15" fill="rgb(213,80,17)" fg:x="939" fg:w="1"/><text x="74.1870%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9370%" y="229" width="0.0787%" height="15" fill="rgb(206,210,43)" fg:x="939" fg:w="1"/><text x="74.1870%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9370%" y="213" width="0.0787%" height="15" fill="rgb(229,214,3)" fg:x="939" fg:w="1"/><text x="74.1870%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9370%" y="197" width="0.0787%" height="15" fill="rgb(235,213,29)" fg:x="939" fg:w="1"/><text x="74.1870%" y="207.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="74.0157%" y="437" width="0.0787%" height="15" fill="rgb(248,135,26)" fg:x="940" fg:w="1"/><text x="74.2657%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="74.0157%" y="421" width="0.0787%" height="15" fill="rgb(242,188,12)" fg:x="940" fg:w="1"/><text x="74.2657%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.0157%" y="405" width="0.0787%" height="15" fill="rgb(245,38,12)" fg:x="940" fg:w="1"/><text x="74.2657%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="74.0157%" y="389" width="0.0787%" height="15" fill="rgb(218,42,13)" fg:x="940" fg:w="1"/><text x="74.2657%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.55%)</title><rect x="73.6220%" y="485" width="0.5512%" height="15" fill="rgb(238,132,49)" fg:x="935" fg:w="7"/><text x="73.8720%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="73.9370%" y="469" width="0.2362%" height="15" fill="rgb(209,196,19)" fg:x="939" fg:w="3"/><text x="74.1870%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="73.9370%" y="453" width="0.2362%" height="15" fill="rgb(244,131,22)" fg:x="939" fg:w="3"/><text x="74.1870%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0945%" y="437" width="0.0787%" height="15" fill="rgb(223,18,34)" fg:x="941" fg:w="1"/><text x="74.3445%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0945%" y="421" width="0.0787%" height="15" fill="rgb(252,124,54)" fg:x="941" fg:w="1"/><text x="74.3445%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0945%" y="405" width="0.0787%" height="15" fill="rgb(229,106,42)" fg:x="941" fg:w="1"/><text x="74.3445%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.0945%" y="389" width="0.0787%" height="15" fill="rgb(221,129,1)" fg:x="941" fg:w="1"/><text x="74.3445%" y="399.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2520%" y="437" width="0.0787%" height="15" fill="rgb(229,74,15)" fg:x="943" fg:w="1"/><text x="74.5020%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.2520%" y="421" width="0.0787%" height="15" fill="rgb(210,206,50)" fg:x="943" fg:w="1"/><text x="74.5020%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2520%" y="405" width="0.0787%" height="15" fill="rgb(251,114,31)" fg:x="943" fg:w="1"/><text x="74.5020%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.4094%" y="165" width="0.0787%" height="15" fill="rgb(215,225,28)" fg:x="945" fg:w="1"/><text x="74.6594%" y="175.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="74.3307%" y="341" width="0.2362%" height="15" fill="rgb(237,109,14)" fg:x="944" fg:w="3"/><text x="74.5807%" y="351.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="74.3307%" y="325" width="0.2362%" height="15" fill="rgb(230,13,37)" fg:x="944" fg:w="3"/><text x="74.5807%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="74.3307%" y="309" width="0.2362%" height="15" fill="rgb(231,40,28)" fg:x="944" fg:w="3"/><text x="74.5807%" y="319.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="74.3307%" y="293" width="0.2362%" height="15" fill="rgb(231,202,18)" fg:x="944" fg:w="3"/><text x="74.5807%" y="303.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="74.3307%" y="277" width="0.2362%" height="15" fill="rgb(225,33,18)" fg:x="944" fg:w="3"/><text x="74.5807%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="74.3307%" y="261" width="0.2362%" height="15" fill="rgb(223,64,47)" fg:x="944" fg:w="3"/><text x="74.5807%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.3307%" y="245" width="0.2362%" height="15" fill="rgb(234,114,13)" fg:x="944" fg:w="3"/><text x="74.5807%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.4094%" y="229" width="0.1575%" height="15" fill="rgb(248,56,40)" fg:x="945" fg:w="2"/><text x="74.6594%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.4094%" y="213" width="0.1575%" height="15" fill="rgb(221,194,21)" fg:x="945" fg:w="2"/><text x="74.6594%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.4094%" y="197" width="0.1575%" height="15" fill="rgb(242,108,46)" fg:x="945" fg:w="2"/><text x="74.6594%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.4094%" y="181" width="0.1575%" height="15" fill="rgb(220,106,10)" fg:x="945" fg:w="2"/><text x="74.6594%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4882%" y="165" width="0.0787%" height="15" fill="rgb(211,88,4)" fg:x="946" fg:w="1"/><text x="74.7382%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4882%" y="149" width="0.0787%" height="15" fill="rgb(214,95,34)" fg:x="946" fg:w="1"/><text x="74.7382%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.4882%" y="133" width="0.0787%" height="15" fill="rgb(250,160,33)" fg:x="946" fg:w="1"/><text x="74.7382%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5669%" y="245" width="0.0787%" height="15" fill="rgb(225,29,10)" fg:x="947" fg:w="1"/><text x="74.8169%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5669%" y="229" width="0.0787%" height="15" fill="rgb(224,28,30)" fg:x="947" fg:w="1"/><text x="74.8169%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.5669%" y="213" width="0.0787%" height="15" fill="rgb(231,77,4)" fg:x="947" fg:w="1"/><text x="74.8169%" y="223.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="74.5669%" y="325" width="0.1575%" height="15" fill="rgb(209,63,21)" fg:x="947" fg:w="2"/><text x="74.8169%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.5669%" y="309" width="0.1575%" height="15" fill="rgb(226,22,11)" fg:x="947" fg:w="2"/><text x="74.8169%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.5669%" y="293" width="0.1575%" height="15" fill="rgb(216,82,30)" fg:x="947" fg:w="2"/><text x="74.8169%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.5669%" y="277" width="0.1575%" height="15" fill="rgb(246,227,38)" fg:x="947" fg:w="2"/><text x="74.8169%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.5669%" y="261" width="0.1575%" height="15" fill="rgb(251,203,53)" fg:x="947" fg:w="2"/><text x="74.8169%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6457%" y="245" width="0.0787%" height="15" fill="rgb(254,101,1)" fg:x="948" fg:w="1"/><text x="74.8957%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6457%" y="229" width="0.0787%" height="15" fill="rgb(241,180,5)" fg:x="948" fg:w="1"/><text x="74.8957%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6457%" y="213" width="0.0787%" height="15" fill="rgb(218,168,4)" fg:x="948" fg:w="1"/><text x="74.8957%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6457%" y="197" width="0.0787%" height="15" fill="rgb(224,223,32)" fg:x="948" fg:w="1"/><text x="74.8957%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.6457%" y="181" width="0.0787%" height="15" fill="rgb(236,106,22)" fg:x="948" fg:w="1"/><text x="74.8957%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6457%" y="165" width="0.0787%" height="15" fill="rgb(206,121,5)" fg:x="948" fg:w="1"/><text x="74.8957%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.7244%" y="245" width="0.0787%" height="15" fill="rgb(233,87,28)" fg:x="949" fg:w="1"/><text x="74.9744%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.7244%" y="229" width="0.0787%" height="15" fill="rgb(236,137,17)" fg:x="949" fg:w="1"/><text x="74.9744%" y="239.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.8031%" y="197" width="0.0787%" height="15" fill="rgb(209,183,38)" fg:x="950" fg:w="1"/><text x="75.0531%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.8031%" y="181" width="0.0787%" height="15" fill="rgb(206,162,44)" fg:x="950" fg:w="1"/><text x="75.0531%" y="191.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (8 samples, 0.63%)</title><rect x="74.3307%" y="437" width="0.6299%" height="15" fill="rgb(237,70,39)" fg:x="944" fg:w="8"/><text x="74.5807%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.63%)</title><rect x="74.3307%" y="421" width="0.6299%" height="15" fill="rgb(212,176,5)" fg:x="944" fg:w="8"/><text x="74.5807%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="74.3307%" y="405" width="0.6299%" height="15" fill="rgb(232,95,16)" fg:x="944" fg:w="8"/><text x="74.5807%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.63%)</title><rect x="74.3307%" y="389" width="0.6299%" height="15" fill="rgb(219,115,35)" fg:x="944" fg:w="8"/><text x="74.5807%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.63%)</title><rect x="74.3307%" y="373" width="0.6299%" height="15" fill="rgb(251,67,27)" fg:x="944" fg:w="8"/><text x="74.5807%" y="383.50"></text></g><g><title>engine::internal::Entities::add_persisted (8 samples, 0.63%)</title><rect x="74.3307%" y="357" width="0.6299%" height="15" fill="rgb(222,95,40)" fg:x="944" fg:w="8"/><text x="74.5807%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_str (5 samples, 0.39%)</title><rect x="74.5669%" y="341" width="0.3937%" height="15" fill="rgb(250,35,16)" fg:x="947" fg:w="5"/><text x="74.8169%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="74.7244%" y="325" width="0.2362%" height="15" fill="rgb(224,86,44)" fg:x="949" fg:w="3"/><text x="74.9744%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.7244%" y="309" width="0.2362%" height="15" fill="rgb(237,53,53)" fg:x="949" fg:w="3"/><text x="74.9744%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="74.7244%" y="293" width="0.2362%" height="15" fill="rgb(208,171,33)" fg:x="949" fg:w="3"/><text x="74.9744%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.7244%" y="277" width="0.2362%" height="15" fill="rgb(222,64,27)" fg:x="949" fg:w="3"/><text x="74.9744%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="74.7244%" y="261" width="0.2362%" height="15" fill="rgb(221,121,35)" fg:x="949" fg:w="3"/><text x="74.9744%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.8031%" y="245" width="0.1575%" height="15" fill="rgb(228,137,42)" fg:x="950" fg:w="2"/><text x="75.0531%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.8031%" y="229" width="0.1575%" height="15" fill="rgb(227,54,21)" fg:x="950" fg:w="2"/><text x="75.0531%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="74.8031%" y="213" width="0.1575%" height="15" fill="rgb(240,168,33)" fg:x="950" fg:w="2"/><text x="75.0531%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8819%" y="197" width="0.0787%" height="15" fill="rgb(243,159,6)" fg:x="951" fg:w="1"/><text x="75.1319%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.8819%" y="181" width="0.0787%" height="15" fill="rgb(205,211,41)" fg:x="951" fg:w="1"/><text x="75.1319%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9606%" y="405" width="0.0787%" height="15" fill="rgb(253,30,1)" fg:x="952" fg:w="1"/><text x="75.2106%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.0394%" y="405" width="0.0787%" height="15" fill="rgb(226,80,18)" fg:x="953" fg:w="1"/><text x="75.2894%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.0394%" y="389" width="0.0787%" height="15" fill="rgb(253,156,46)" fg:x="953" fg:w="1"/><text x="75.2894%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0394%" y="373" width="0.0787%" height="15" fill="rgb(248,87,27)" fg:x="953" fg:w="1"/><text x="75.2894%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 1.57%)</title><rect x="73.6220%" y="517" width="1.5748%" height="15" fill="rgb(227,122,2)" fg:x="935" fg:w="20"/><text x="73.8720%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 1.57%)</title><rect x="73.6220%" y="501" width="1.5748%" height="15" fill="rgb(229,94,39)" fg:x="935" fg:w="20"/><text x="73.8720%" y="511.50"></text></g><g><title>plugins_core::tools::get_contained_keys (13 samples, 1.02%)</title><rect x="74.1732%" y="485" width="1.0236%" height="15" fill="rgb(225,173,31)" fg:x="942" fg:w="13"/><text x="74.4232%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (13 samples, 1.02%)</title><rect x="74.1732%" y="469" width="1.0236%" height="15" fill="rgb(239,176,30)" fg:x="942" fg:w="13"/><text x="74.4232%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (12 samples, 0.94%)</title><rect x="74.2520%" y="453" width="0.9449%" height="15" fill="rgb(212,104,21)" fg:x="943" fg:w="12"/><text x="74.5020%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="74.9606%" y="437" width="0.2362%" height="15" fill="rgb(240,209,40)" fg:x="952" fg:w="3"/><text x="75.2106%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.9606%" y="421" width="0.2362%" height="15" fill="rgb(234,195,5)" fg:x="952" fg:w="3"/><text x="75.2106%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="75.1181%" y="405" width="0.0787%" height="15" fill="rgb(238,213,1)" fg:x="954" fg:w="1"/><text x="75.3681%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="75.1181%" y="389" width="0.0787%" height="15" fill="rgb(235,182,54)" fg:x="954" fg:w="1"/><text x="75.3681%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="75.1181%" y="373" width="0.0787%" height="15" fill="rgb(229,50,46)" fg:x="954" fg:w="1"/><text x="75.3681%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.1181%" y="357" width="0.0787%" height="15" fill="rgb(219,145,13)" fg:x="954" fg:w="1"/><text x="75.3681%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.1181%" y="341" width="0.0787%" height="15" fill="rgb(220,226,10)" fg:x="954" fg:w="1"/><text x="75.3681%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="75.2756%" y="469" width="0.0787%" height="15" fill="rgb(248,47,30)" fg:x="956" fg:w="1"/><text x="75.5256%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="75.2756%" y="453" width="0.0787%" height="15" fill="rgb(231,209,44)" fg:x="956" fg:w="1"/><text x="75.5256%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.2756%" y="437" width="0.0787%" height="15" fill="rgb(209,80,30)" fg:x="956" fg:w="1"/><text x="75.5256%" y="447.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="75.2756%" y="421" width="0.0787%" height="15" fill="rgb(232,9,14)" fg:x="956" fg:w="1"/><text x="75.5256%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="75.2756%" y="405" width="0.0787%" height="15" fill="rgb(243,91,43)" fg:x="956" fg:w="1"/><text x="75.5256%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="75.2756%" y="389" width="0.0787%" height="15" fill="rgb(231,90,52)" fg:x="956" fg:w="1"/><text x="75.5256%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="75.2756%" y="373" width="0.0787%" height="15" fill="rgb(253,192,44)" fg:x="956" fg:w="1"/><text x="75.5256%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="75.2756%" y="357" width="0.0787%" height="15" fill="rgb(241,66,31)" fg:x="956" fg:w="1"/><text x="75.5256%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.2756%" y="341" width="0.0787%" height="15" fill="rgb(235,81,37)" fg:x="956" fg:w="1"/><text x="75.5256%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="75.4331%" y="213" width="0.1575%" height="15" fill="rgb(223,221,9)" fg:x="958" fg:w="2"/><text x="75.6831%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="75.4331%" y="197" width="0.1575%" height="15" fill="rgb(242,180,7)" fg:x="958" fg:w="2"/><text x="75.6831%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="75.4331%" y="181" width="0.1575%" height="15" fill="rgb(243,78,19)" fg:x="958" fg:w="2"/><text x="75.6831%" y="191.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="75.5118%" y="165" width="0.0787%" height="15" fill="rgb(233,23,17)" fg:x="959" fg:w="1"/><text x="75.7618%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.5118%" y="149" width="0.0787%" height="15" fill="rgb(252,122,45)" fg:x="959" fg:w="1"/><text x="75.7618%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="75.5118%" y="133" width="0.0787%" height="15" fill="rgb(247,108,20)" fg:x="959" fg:w="1"/><text x="75.7618%" y="143.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="75.5118%" y="117" width="0.0787%" height="15" fill="rgb(235,84,21)" fg:x="959" fg:w="1"/><text x="75.7618%" y="127.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.5118%" y="101" width="0.0787%" height="15" fill="rgb(247,129,10)" fg:x="959" fg:w="1"/><text x="75.7618%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="75.5118%" y="85" width="0.0787%" height="15" fill="rgb(208,173,14)" fg:x="959" fg:w="1"/><text x="75.7618%" y="95.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="75.4331%" y="261" width="0.2362%" height="15" fill="rgb(236,31,38)" fg:x="958" fg:w="3"/><text x="75.6831%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="75.4331%" y="245" width="0.2362%" height="15" fill="rgb(232,65,17)" fg:x="958" fg:w="3"/><text x="75.6831%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="75.4331%" y="229" width="0.2362%" height="15" fill="rgb(224,45,49)" fg:x="958" fg:w="3"/><text x="75.6831%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.5906%" y="213" width="0.0787%" height="15" fill="rgb(225,2,53)" fg:x="960" fg:w="1"/><text x="75.8406%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="75.4331%" y="293" width="0.3937%" height="15" fill="rgb(248,210,53)" fg:x="958" fg:w="5"/><text x="75.6831%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.39%)</title><rect x="75.4331%" y="277" width="0.3937%" height="15" fill="rgb(211,1,30)" fg:x="958" fg:w="5"/><text x="75.6831%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.6693%" y="261" width="0.1575%" height="15" fill="rgb(224,96,15)" fg:x="961" fg:w="2"/><text x="75.9193%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="75.6693%" y="245" width="0.1575%" height="15" fill="rgb(252,45,11)" fg:x="961" fg:w="2"/><text x="75.9193%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.7480%" y="229" width="0.0787%" height="15" fill="rgb(220,125,38)" fg:x="962" fg:w="1"/><text x="75.9980%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.47%)</title><rect x="75.4331%" y="357" width="0.4724%" height="15" fill="rgb(243,161,33)" fg:x="958" fg:w="6"/><text x="75.6831%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="75.4331%" y="341" width="0.4724%" height="15" fill="rgb(248,197,34)" fg:x="958" fg:w="6"/><text x="75.6831%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.47%)</title><rect x="75.4331%" y="325" width="0.4724%" height="15" fill="rgb(228,165,23)" fg:x="958" fg:w="6"/><text x="75.6831%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.47%)</title><rect x="75.4331%" y="309" width="0.4724%" height="15" fill="rgb(236,94,38)" fg:x="958" fg:w="6"/><text x="75.6831%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.8268%" y="293" width="0.0787%" height="15" fill="rgb(220,13,23)" fg:x="963" fg:w="1"/><text x="76.0768%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="75.8268%" y="277" width="0.0787%" height="15" fill="rgb(234,26,39)" fg:x="963" fg:w="1"/><text x="76.0768%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="75.8268%" y="261" width="0.0787%" height="15" fill="rgb(205,117,44)" fg:x="963" fg:w="1"/><text x="76.0768%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.63%)</title><rect x="75.3543%" y="373" width="0.6299%" height="15" fill="rgb(250,42,2)" fg:x="957" fg:w="8"/><text x="75.6043%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.9055%" y="357" width="0.0787%" height="15" fill="rgb(223,83,14)" fg:x="964" fg:w="1"/><text x="76.1555%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.71%)</title><rect x="75.3543%" y="453" width="0.7087%" height="15" fill="rgb(241,147,50)" fg:x="957" fg:w="9"/><text x="75.6043%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="75.3543%" y="437" width="0.7087%" height="15" fill="rgb(218,90,6)" fg:x="957" fg:w="9"/><text x="75.6043%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.71%)</title><rect x="75.3543%" y="421" width="0.7087%" height="15" fill="rgb(210,191,5)" fg:x="957" fg:w="9"/><text x="75.6043%" y="431.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.71%)</title><rect x="75.3543%" y="405" width="0.7087%" height="15" fill="rgb(225,139,19)" fg:x="957" fg:w="9"/><text x="75.6043%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="75.3543%" y="389" width="0.7087%" height="15" fill="rgb(210,1,33)" fg:x="957" fg:w="9"/><text x="75.6043%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.9843%" y="373" width="0.0787%" height="15" fill="rgb(213,50,3)" fg:x="965" fg:w="1"/><text x="76.2343%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9843%" y="357" width="0.0787%" height="15" fill="rgb(234,227,4)" fg:x="965" fg:w="1"/><text x="76.2343%" y="367.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1417%" y="405" width="0.0787%" height="15" fill="rgb(246,63,5)" fg:x="967" fg:w="1"/><text x="76.3917%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1417%" y="389" width="0.0787%" height="15" fill="rgb(245,136,27)" fg:x="967" fg:w="1"/><text x="76.3917%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1417%" y="373" width="0.0787%" height="15" fill="rgb(247,199,27)" fg:x="967" fg:w="1"/><text x="76.3917%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1417%" y="357" width="0.0787%" height="15" fill="rgb(252,158,49)" fg:x="967" fg:w="1"/><text x="76.3917%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1417%" y="341" width="0.0787%" height="15" fill="rgb(254,73,1)" fg:x="967" fg:w="1"/><text x="76.3917%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (34 samples, 2.68%)</title><rect x="73.6220%" y="533" width="2.6772%" height="15" fill="rgb(248,93,19)" fg:x="935" fg:w="34"/><text x="73.8720%" y="543.50">co..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (14 samples, 1.10%)</title><rect x="75.1969%" y="517" width="1.1024%" height="15" fill="rgb(206,67,5)" fg:x="955" fg:w="14"/><text x="75.4469%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.02%)</title><rect x="75.2756%" y="501" width="1.0236%" height="15" fill="rgb(209,210,4)" fg:x="956" fg:w="13"/><text x="75.5256%" y="511.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (13 samples, 1.02%)</title><rect x="75.2756%" y="485" width="1.0236%" height="15" fill="rgb(214,185,36)" fg:x="956" fg:w="13"/><text x="75.5256%" y="495.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (12 samples, 0.94%)</title><rect x="75.3543%" y="469" width="0.9449%" height="15" fill="rgb(233,191,26)" fg:x="957" fg:w="12"/><text x="75.6043%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (3 samples, 0.24%)</title><rect x="76.0630%" y="453" width="0.2362%" height="15" fill="rgb(248,94,17)" fg:x="966" fg:w="3"/><text x="76.3130%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="76.0630%" y="437" width="0.2362%" height="15" fill="rgb(250,64,4)" fg:x="966" fg:w="3"/><text x="76.3130%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="76.0630%" y="421" width="0.2362%" height="15" fill="rgb(218,41,53)" fg:x="966" fg:w="3"/><text x="76.3130%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.2205%" y="405" width="0.0787%" height="15" fill="rgb(251,176,28)" fg:x="968" fg:w="1"/><text x="76.4705%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="76.2205%" y="389" width="0.0787%" height="15" fill="rgb(247,22,9)" fg:x="968" fg:w="1"/><text x="76.4705%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.2205%" y="373" width="0.0787%" height="15" fill="rgb(218,201,14)" fg:x="968" fg:w="1"/><text x="76.4705%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2205%" y="357" width="0.0787%" height="15" fill="rgb(218,94,10)" fg:x="968" fg:w="1"/><text x="76.4705%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.2205%" y="341" width="0.0787%" height="15" fill="rgb(222,183,52)" fg:x="968" fg:w="1"/><text x="76.4705%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2205%" y="325" width="0.0787%" height="15" fill="rgb(242,140,25)" fg:x="968" fg:w="1"/><text x="76.4705%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.2205%" y="309" width="0.0787%" height="15" fill="rgb(235,197,38)" fg:x="968" fg:w="1"/><text x="76.4705%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2205%" y="293" width="0.0787%" height="15" fill="rgb(237,136,15)" fg:x="968" fg:w="1"/><text x="76.4705%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.2205%" y="277" width="0.0787%" height="15" fill="rgb(223,44,49)" fg:x="968" fg:w="1"/><text x="76.4705%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2205%" y="261" width="0.0787%" height="15" fill="rgb(227,71,15)" fg:x="968" fg:w="1"/><text x="76.4705%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2205%" y="245" width="0.0787%" height="15" fill="rgb(225,153,20)" fg:x="968" fg:w="1"/><text x="76.4705%" y="255.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (40 samples, 3.15%)</title><rect x="73.2283%" y="597" width="3.1496%" height="15" fill="rgb(210,190,26)" fg:x="930" fg:w="40"/><text x="73.4783%" y="607.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (40 samples, 3.15%)</title><rect x="73.2283%" y="581" width="3.1496%" height="15" fill="rgb(223,147,5)" fg:x="930" fg:w="40"/><text x="73.4783%" y="591.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (37 samples, 2.91%)</title><rect x="73.4646%" y="565" width="2.9134%" height="15" fill="rgb(207,14,23)" fg:x="933" fg:w="37"/><text x="73.7146%" y="575.50">pl..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (37 samples, 2.91%)</title><rect x="73.4646%" y="549" width="2.9134%" height="15" fill="rgb(211,195,53)" fg:x="933" fg:w="37"/><text x="73.7146%" y="559.50">&lt;p..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2992%" y="533" width="0.0787%" height="15" fill="rgb(237,75,46)" fg:x="969" fg:w="1"/><text x="76.5492%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2992%" y="517" width="0.0787%" height="15" fill="rgb(254,55,14)" fg:x="969" fg:w="1"/><text x="76.5492%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="76.3780%" y="453" width="0.0787%" height="15" fill="rgb(230,185,30)" fg:x="970" fg:w="1"/><text x="76.6280%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="76.3780%" y="437" width="0.0787%" height="15" fill="rgb(220,14,11)" fg:x="970" fg:w="1"/><text x="76.6280%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3780%" y="421" width="0.0787%" height="15" fill="rgb(215,169,44)" fg:x="970" fg:w="1"/><text x="76.6280%" y="431.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="76.4567%" y="453" width="0.0787%" height="15" fill="rgb(253,203,20)" fg:x="971" fg:w="1"/><text x="76.7067%" y="463.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4567%" y="437" width="0.0787%" height="15" fill="rgb(229,225,17)" fg:x="971" fg:w="1"/><text x="76.7067%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="76.5354%" y="421" width="0.0787%" height="15" fill="rgb(236,76,26)" fg:x="972" fg:w="1"/><text x="76.7854%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="76.5354%" y="405" width="0.0787%" height="15" fill="rgb(234,15,30)" fg:x="972" fg:w="1"/><text x="76.7854%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.6929%" y="309" width="0.1575%" height="15" fill="rgb(211,113,48)" fg:x="974" fg:w="2"/><text x="76.9429%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7717%" y="293" width="0.0787%" height="15" fill="rgb(221,31,36)" fg:x="975" fg:w="1"/><text x="77.0217%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7717%" y="277" width="0.0787%" height="15" fill="rgb(215,118,52)" fg:x="975" fg:w="1"/><text x="77.0217%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7717%" y="261" width="0.0787%" height="15" fill="rgb(241,151,27)" fg:x="975" fg:w="1"/><text x="77.0217%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7717%" y="245" width="0.0787%" height="15" fill="rgb(253,51,3)" fg:x="975" fg:w="1"/><text x="77.0217%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7717%" y="229" width="0.0787%" height="15" fill="rgb(216,201,24)" fg:x="975" fg:w="1"/><text x="77.0217%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7717%" y="213" width="0.0787%" height="15" fill="rgb(231,107,4)" fg:x="975" fg:w="1"/><text x="77.0217%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7717%" y="197" width="0.0787%" height="15" fill="rgb(243,97,54)" fg:x="975" fg:w="1"/><text x="77.0217%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.7717%" y="181" width="0.0787%" height="15" fill="rgb(221,32,51)" fg:x="975" fg:w="1"/><text x="77.0217%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.7717%" y="165" width="0.0787%" height="15" fill="rgb(218,171,35)" fg:x="975" fg:w="1"/><text x="77.0217%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.7717%" y="149" width="0.0787%" height="15" fill="rgb(214,20,53)" fg:x="975" fg:w="1"/><text x="77.0217%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.7717%" y="133" width="0.0787%" height="15" fill="rgb(239,9,52)" fg:x="975" fg:w="1"/><text x="77.0217%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7717%" y="117" width="0.0787%" height="15" fill="rgb(215,114,45)" fg:x="975" fg:w="1"/><text x="77.0217%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.31%)</title><rect x="76.6142%" y="357" width="0.3150%" height="15" fill="rgb(208,118,9)" fg:x="973" fg:w="4"/><text x="76.8642%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.31%)</title><rect x="76.6142%" y="341" width="0.3150%" height="15" fill="rgb(235,7,39)" fg:x="973" fg:w="4"/><text x="76.8642%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="76.6929%" y="325" width="0.2362%" height="15" fill="rgb(243,225,15)" fg:x="974" fg:w="3"/><text x="76.9429%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8504%" y="309" width="0.0787%" height="15" fill="rgb(225,216,18)" fg:x="976" fg:w="1"/><text x="77.1004%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.8504%" y="293" width="0.0787%" height="15" fill="rgb(233,36,38)" fg:x="976" fg:w="1"/><text x="77.1004%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.8504%" y="277" width="0.0787%" height="15" fill="rgb(239,88,23)" fg:x="976" fg:w="1"/><text x="77.1004%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.8504%" y="261" width="0.0787%" height="15" fill="rgb(219,181,35)" fg:x="976" fg:w="1"/><text x="77.1004%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.8504%" y="245" width="0.0787%" height="15" fill="rgb(215,18,46)" fg:x="976" fg:w="1"/><text x="77.1004%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8504%" y="229" width="0.0787%" height="15" fill="rgb(241,38,11)" fg:x="976" fg:w="1"/><text x="77.1004%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.8504%" y="213" width="0.0787%" height="15" fill="rgb(248,169,45)" fg:x="976" fg:w="1"/><text x="77.1004%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.8504%" y="197" width="0.0787%" height="15" fill="rgb(239,50,49)" fg:x="976" fg:w="1"/><text x="77.1004%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.8504%" y="181" width="0.0787%" height="15" fill="rgb(231,96,31)" fg:x="976" fg:w="1"/><text x="77.1004%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.8504%" y="165" width="0.0787%" height="15" fill="rgb(224,193,37)" fg:x="976" fg:w="1"/><text x="77.1004%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.8504%" y="149" width="0.0787%" height="15" fill="rgb(227,153,50)" fg:x="976" fg:w="1"/><text x="77.1004%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8504%" y="133" width="0.0787%" height="15" fill="rgb(249,228,3)" fg:x="976" fg:w="1"/><text x="77.1004%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.39%)</title><rect x="76.6142%" y="373" width="0.3937%" height="15" fill="rgb(219,164,43)" fg:x="973" fg:w="5"/><text x="76.8642%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9291%" y="357" width="0.0787%" height="15" fill="rgb(216,45,41)" fg:x="977" fg:w="1"/><text x="77.1791%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (6 samples, 0.47%)</title><rect x="76.6142%" y="421" width="0.4724%" height="15" fill="rgb(210,226,51)" fg:x="973" fg:w="6"/><text x="76.8642%" y="431.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.47%)</title><rect x="76.6142%" y="405" width="0.4724%" height="15" fill="rgb(209,117,49)" fg:x="973" fg:w="6"/><text x="76.8642%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.47%)</title><rect x="76.6142%" y="389" width="0.4724%" height="15" fill="rgb(206,196,24)" fg:x="973" fg:w="6"/><text x="76.8642%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.0079%" y="373" width="0.0787%" height="15" fill="rgb(253,218,3)" fg:x="978" fg:w="1"/><text x="77.2579%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0079%" y="357" width="0.0787%" height="15" fill="rgb(252,166,2)" fg:x="978" fg:w="1"/><text x="77.2579%" y="367.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="77.0079%" y="341" width="0.0787%" height="15" fill="rgb(236,218,26)" fg:x="978" fg:w="1"/><text x="77.2579%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1654%" y="373" width="0.0787%" height="15" fill="rgb(254,84,19)" fg:x="980" fg:w="1"/><text x="77.4154%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1654%" y="357" width="0.0787%" height="15" fill="rgb(219,137,29)" fg:x="980" fg:w="1"/><text x="77.4154%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1654%" y="341" width="0.0787%" height="15" fill="rgb(227,47,52)" fg:x="980" fg:w="1"/><text x="77.4154%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.1654%" y="325" width="0.0787%" height="15" fill="rgb(229,167,24)" fg:x="980" fg:w="1"/><text x="77.4154%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.1654%" y="309" width="0.0787%" height="15" fill="rgb(233,164,1)" fg:x="980" fg:w="1"/><text x="77.4154%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.1654%" y="293" width="0.0787%" height="15" fill="rgb(218,88,48)" fg:x="980" fg:w="1"/><text x="77.4154%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.1654%" y="277" width="0.0787%" height="15" fill="rgb(226,214,24)" fg:x="980" fg:w="1"/><text x="77.4154%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.1654%" y="261" width="0.0787%" height="15" fill="rgb(233,29,12)" fg:x="980" fg:w="1"/><text x="77.4154%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.1654%" y="245" width="0.0787%" height="15" fill="rgb(219,120,34)" fg:x="980" fg:w="1"/><text x="77.4154%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.1654%" y="229" width="0.0787%" height="15" fill="rgb(226,78,44)" fg:x="980" fg:w="1"/><text x="77.4154%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.1654%" y="213" width="0.0787%" height="15" fill="rgb(240,15,48)" fg:x="980" fg:w="1"/><text x="77.4154%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.1654%" y="197" width="0.0787%" height="15" fill="rgb(253,176,7)" fg:x="980" fg:w="1"/><text x="77.4154%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1654%" y="181" width="0.0787%" height="15" fill="rgb(206,166,28)" fg:x="980" fg:w="1"/><text x="77.4154%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="77.0866%" y="421" width="0.2362%" height="15" fill="rgb(241,53,51)" fg:x="979" fg:w="3"/><text x="77.3366%" y="431.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="77.0866%" y="405" width="0.2362%" height="15" fill="rgb(249,112,30)" fg:x="979" fg:w="3"/><text x="77.3366%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="77.0866%" y="389" width="0.2362%" height="15" fill="rgb(217,85,30)" fg:x="979" fg:w="3"/><text x="77.3366%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.2441%" y="373" width="0.0787%" height="15" fill="rgb(233,49,7)" fg:x="981" fg:w="1"/><text x="77.4941%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.2441%" y="357" width="0.0787%" height="15" fill="rgb(234,109,9)" fg:x="981" fg:w="1"/><text x="77.4941%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.2441%" y="341" width="0.0787%" height="15" fill="rgb(253,95,22)" fg:x="981" fg:w="1"/><text x="77.4941%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.2441%" y="325" width="0.0787%" height="15" fill="rgb(233,176,25)" fg:x="981" fg:w="1"/><text x="77.4941%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="77.3228%" y="421" width="0.0787%" height="15" fill="rgb(236,33,39)" fg:x="982" fg:w="1"/><text x="77.5728%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.3228%" y="405" width="0.0787%" height="15" fill="rgb(223,226,42)" fg:x="982" fg:w="1"/><text x="77.5728%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="77.3228%" y="389" width="0.0787%" height="15" fill="rgb(216,99,33)" fg:x="982" fg:w="1"/><text x="77.5728%" y="399.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="77.3228%" y="373" width="0.0787%" height="15" fill="rgb(235,84,23)" fg:x="982" fg:w="1"/><text x="77.5728%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.3228%" y="357" width="0.0787%" height="15" fill="rgb(232,2,27)" fg:x="982" fg:w="1"/><text x="77.5728%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="77.3228%" y="341" width="0.0787%" height="15" fill="rgb(241,23,22)" fg:x="982" fg:w="1"/><text x="77.5728%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="77.3228%" y="325" width="0.0787%" height="15" fill="rgb(211,73,27)" fg:x="982" fg:w="1"/><text x="77.5728%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.3228%" y="309" width="0.0787%" height="15" fill="rgb(235,109,49)" fg:x="982" fg:w="1"/><text x="77.5728%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.3228%" y="293" width="0.0787%" height="15" fill="rgb(230,99,29)" fg:x="982" fg:w="1"/><text x="77.5728%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="77.3228%" y="277" width="0.0787%" height="15" fill="rgb(245,199,7)" fg:x="982" fg:w="1"/><text x="77.5728%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="77.3228%" y="261" width="0.0787%" height="15" fill="rgb(217,179,10)" fg:x="982" fg:w="1"/><text x="77.5728%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.3228%" y="245" width="0.0787%" height="15" fill="rgb(254,99,47)" fg:x="982" fg:w="1"/><text x="77.5728%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="77.3228%" y="229" width="0.0787%" height="15" fill="rgb(251,121,7)" fg:x="982" fg:w="1"/><text x="77.5728%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.3228%" y="213" width="0.0787%" height="15" fill="rgb(250,177,26)" fg:x="982" fg:w="1"/><text x="77.5728%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.4016%" y="213" width="0.0787%" height="15" fill="rgb(232,88,15)" fg:x="983" fg:w="1"/><text x="77.6516%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.4016%" y="197" width="0.0787%" height="15" fill="rgb(251,54,54)" fg:x="983" fg:w="1"/><text x="77.6516%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="77.4016%" y="373" width="0.1575%" height="15" fill="rgb(208,177,15)" fg:x="983" fg:w="2"/><text x="77.6516%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="77.4016%" y="357" width="0.1575%" height="15" fill="rgb(205,97,32)" fg:x="983" fg:w="2"/><text x="77.6516%" y="367.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="77.4016%" y="341" width="0.1575%" height="15" fill="rgb(217,192,13)" fg:x="983" fg:w="2"/><text x="77.6516%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="77.4016%" y="325" width="0.1575%" height="15" fill="rgb(215,163,41)" fg:x="983" fg:w="2"/><text x="77.6516%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="77.4016%" y="309" width="0.1575%" height="15" fill="rgb(246,83,29)" fg:x="983" fg:w="2"/><text x="77.6516%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="77.4016%" y="293" width="0.1575%" height="15" fill="rgb(219,2,45)" fg:x="983" fg:w="2"/><text x="77.6516%" y="303.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="77.4016%" y="277" width="0.1575%" height="15" fill="rgb(242,215,33)" fg:x="983" fg:w="2"/><text x="77.6516%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="77.4016%" y="261" width="0.1575%" height="15" fill="rgb(217,1,6)" fg:x="983" fg:w="2"/><text x="77.6516%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="77.4016%" y="245" width="0.1575%" height="15" fill="rgb(207,85,52)" fg:x="983" fg:w="2"/><text x="77.6516%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="77.4016%" y="229" width="0.1575%" height="15" fill="rgb(231,171,19)" fg:x="983" fg:w="2"/><text x="77.6516%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="77.4803%" y="213" width="0.0787%" height="15" fill="rgb(207,128,4)" fg:x="984" fg:w="1"/><text x="77.7303%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.5591%" y="341" width="0.0787%" height="15" fill="rgb(219,208,4)" fg:x="985" fg:w="1"/><text x="77.8091%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="77.6378%" y="277" width="0.0787%" height="15" fill="rgb(235,161,42)" fg:x="986" fg:w="1"/><text x="77.8878%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="77.6378%" y="261" width="0.0787%" height="15" fill="rgb(247,218,18)" fg:x="986" fg:w="1"/><text x="77.8878%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.6378%" y="245" width="0.0787%" height="15" fill="rgb(232,114,51)" fg:x="986" fg:w="1"/><text x="77.8878%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.6378%" y="229" width="0.0787%" height="15" fill="rgb(222,95,3)" fg:x="986" fg:w="1"/><text x="77.8878%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.6378%" y="213" width="0.0787%" height="15" fill="rgb(240,65,29)" fg:x="986" fg:w="1"/><text x="77.8878%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.7165%" y="245" width="0.0787%" height="15" fill="rgb(249,209,20)" fg:x="987" fg:w="1"/><text x="77.9665%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.7165%" y="229" width="0.0787%" height="15" fill="rgb(241,48,37)" fg:x="987" fg:w="1"/><text x="77.9665%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7165%" y="213" width="0.0787%" height="15" fill="rgb(230,140,42)" fg:x="987" fg:w="1"/><text x="77.9665%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="77.6378%" y="341" width="0.2362%" height="15" fill="rgb(230,176,45)" fg:x="986" fg:w="3"/><text x="77.8878%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="77.6378%" y="325" width="0.2362%" height="15" fill="rgb(245,112,21)" fg:x="986" fg:w="3"/><text x="77.8878%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="77.6378%" y="309" width="0.2362%" height="15" fill="rgb(207,183,35)" fg:x="986" fg:w="3"/><text x="77.8878%" y="319.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="77.6378%" y="293" width="0.2362%" height="15" fill="rgb(227,44,33)" fg:x="986" fg:w="3"/><text x="77.8878%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="77.7165%" y="277" width="0.1575%" height="15" fill="rgb(246,120,21)" fg:x="987" fg:w="2"/><text x="77.9665%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="77.7165%" y="261" width="0.1575%" height="15" fill="rgb(235,57,52)" fg:x="987" fg:w="2"/><text x="77.9665%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="77.7953%" y="245" width="0.0787%" height="15" fill="rgb(238,84,10)" fg:x="988" fg:w="1"/><text x="78.0453%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="77.8740%" y="293" width="0.0787%" height="15" fill="rgb(251,200,32)" fg:x="989" fg:w="1"/><text x="78.1240%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.8740%" y="277" width="0.0787%" height="15" fill="rgb(247,159,13)" fg:x="989" fg:w="1"/><text x="78.1240%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.1102%" y="277" width="0.1575%" height="15" fill="rgb(238,64,4)" fg:x="992" fg:w="2"/><text x="78.3602%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.18%)</title><rect x="78.2677%" y="277" width="1.1811%" height="15" fill="rgb(221,131,51)" fg:x="994" fg:w="15"/><text x="78.5177%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.18%)</title><rect x="78.2677%" y="261" width="1.1811%" height="15" fill="rgb(242,5,29)" fg:x="994" fg:w="15"/><text x="78.5177%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="79.2913%" y="245" width="0.1575%" height="15" fill="rgb(214,130,32)" fg:x="1007" fg:w="2"/><text x="79.5413%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="79.4488%" y="277" width="0.0787%" height="15" fill="rgb(244,210,16)" fg:x="1009" fg:w="1"/><text x="79.6988%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="79.6063%" y="261" width="0.2362%" height="15" fill="rgb(234,48,26)" fg:x="1011" fg:w="3"/><text x="79.8563%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.39%)</title><rect x="79.5276%" y="277" width="0.3937%" height="15" fill="rgb(231,82,38)" fg:x="1010" fg:w="5"/><text x="79.7776%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="79.8425%" y="261" width="0.0787%" height="15" fill="rgb(254,128,41)" fg:x="1014" fg:w="1"/><text x="80.0925%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="79.8425%" y="245" width="0.0787%" height="15" fill="rgb(212,73,49)" fg:x="1014" fg:w="1"/><text x="80.0925%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="80.2362%" y="213" width="0.1575%" height="15" fill="rgb(205,62,54)" fg:x="1019" fg:w="2"/><text x="80.4862%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.3937%" y="213" width="0.0787%" height="15" fill="rgb(228,0,8)" fg:x="1021" fg:w="1"/><text x="80.6437%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.3937%" y="197" width="0.0787%" height="15" fill="rgb(251,28,17)" fg:x="1021" fg:w="1"/><text x="80.6437%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.3937%" y="181" width="0.0787%" height="15" fill="rgb(238,105,27)" fg:x="1021" fg:w="1"/><text x="80.6437%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.3937%" y="165" width="0.0787%" height="15" fill="rgb(237,216,33)" fg:x="1021" fg:w="1"/><text x="80.6437%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="80.4724%" y="213" width="0.0787%" height="15" fill="rgb(229,228,25)" fg:x="1022" fg:w="1"/><text x="80.7224%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="80.4724%" y="197" width="0.0787%" height="15" fill="rgb(233,75,23)" fg:x="1022" fg:w="1"/><text x="80.7224%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="80.4724%" y="181" width="0.0787%" height="15" fill="rgb(231,207,16)" fg:x="1022" fg:w="1"/><text x="80.7224%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="80.5512%" y="213" width="0.1575%" height="15" fill="rgb(231,191,45)" fg:x="1023" fg:w="2"/><text x="80.8012%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="80.6299%" y="197" width="0.0787%" height="15" fill="rgb(224,133,17)" fg:x="1024" fg:w="1"/><text x="80.8799%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="80.6299%" y="181" width="0.0787%" height="15" fill="rgb(209,178,27)" fg:x="1024" fg:w="1"/><text x="80.8799%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 2.99%)</title><rect x="80.7087%" y="213" width="2.9921%" height="15" fill="rgb(218,37,11)" fg:x="1025" fg:w="38"/><text x="80.9587%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 2.99%)</title><rect x="80.7087%" y="197" width="2.9921%" height="15" fill="rgb(251,226,25)" fg:x="1025" fg:w="38"/><text x="80.9587%" y="207.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 2.99%)</title><rect x="80.7087%" y="181" width="2.9921%" height="15" fill="rgb(209,222,27)" fg:x="1025" fg:w="38"/><text x="80.9587%" y="191.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="83.7008%" y="213" width="0.2362%" height="15" fill="rgb(238,22,21)" fg:x="1063" fg:w="3"/><text x="83.9508%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8583%" y="197" width="0.0787%" height="15" fill="rgb(233,161,25)" fg:x="1065" fg:w="1"/><text x="84.1083%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 4.09%)</title><rect x="80.0000%" y="261" width="4.0945%" height="15" fill="rgb(226,122,53)" fg:x="1016" fg:w="52"/><text x="80.2500%" y="271.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (52 samples, 4.09%)</title><rect x="80.0000%" y="245" width="4.0945%" height="15" fill="rgb(220,123,17)" fg:x="1016" fg:w="52"/><text x="80.2500%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (52 samples, 4.09%)</title><rect x="80.0000%" y="229" width="4.0945%" height="15" fill="rgb(230,224,35)" fg:x="1016" fg:w="52"/><text x="80.2500%" y="239.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="83.9370%" y="213" width="0.1575%" height="15" fill="rgb(246,83,8)" fg:x="1066" fg:w="2"/><text x="84.1870%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="83.9370%" y="197" width="0.1575%" height="15" fill="rgb(230,214,17)" fg:x="1066" fg:w="2"/><text x="84.1870%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.9370%" y="181" width="0.1575%" height="15" fill="rgb(222,97,18)" fg:x="1066" fg:w="2"/><text x="84.1870%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="83.9370%" y="165" width="0.1575%" height="15" fill="rgb(206,79,1)" fg:x="1066" fg:w="2"/><text x="84.1870%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1732%" y="245" width="0.0787%" height="15" fill="rgb(214,121,34)" fg:x="1069" fg:w="1"/><text x="84.4232%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="84.2520%" y="245" width="0.3150%" height="15" fill="rgb(249,199,46)" fg:x="1070" fg:w="4"/><text x="84.5020%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.55%)</title><rect x="84.0945%" y="261" width="0.5512%" height="15" fill="rgb(214,222,46)" fg:x="1068" fg:w="7"/><text x="84.3445%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="84.5669%" y="245" width="0.0787%" height="15" fill="rgb(248,168,30)" fg:x="1074" fg:w="1"/><text x="84.8169%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (61 samples, 4.80%)</title><rect x="79.9213%" y="277" width="4.8031%" height="15" fill="rgb(226,14,28)" fg:x="1015" fg:w="61"/><text x="80.1713%" y="287.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="84.6457%" y="261" width="0.0787%" height="15" fill="rgb(253,123,1)" fg:x="1075" fg:w="1"/><text x="84.8957%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (87 samples, 6.85%)</title><rect x="77.9528%" y="293" width="6.8504%" height="15" fill="rgb(225,24,42)" fg:x="990" fg:w="87"/><text x="78.2028%" y="303.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="84.7244%" y="277" width="0.0787%" height="15" fill="rgb(216,161,37)" fg:x="1076" fg:w="1"/><text x="84.9744%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="84.7244%" y="261" width="0.0787%" height="15" fill="rgb(251,164,26)" fg:x="1076" fg:w="1"/><text x="84.9744%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="84.8031%" y="293" width="0.4724%" height="15" fill="rgb(219,177,3)" fg:x="1077" fg:w="6"/><text x="85.0531%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.47%)</title><rect x="84.8031%" y="277" width="0.4724%" height="15" fill="rgb(222,65,0)" fg:x="1077" fg:w="6"/><text x="85.0531%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="84.8031%" y="261" width="0.4724%" height="15" fill="rgb(223,69,54)" fg:x="1077" fg:w="6"/><text x="85.0531%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.39%)</title><rect x="84.8819%" y="245" width="0.3937%" height="15" fill="rgb(235,30,27)" fg:x="1078" fg:w="5"/><text x="85.1319%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="84.9606%" y="229" width="0.3150%" height="15" fill="rgb(220,183,50)" fg:x="1079" fg:w="4"/><text x="85.2106%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="84.9606%" y="213" width="0.3150%" height="15" fill="rgb(248,198,15)" fg:x="1079" fg:w="4"/><text x="85.2106%" y="223.50"></text></g><g><title>__libc_malloc (4 samples, 0.31%)</title><rect x="84.9606%" y="197" width="0.3150%" height="15" fill="rgb(222,211,4)" fg:x="1079" fg:w="4"/><text x="85.2106%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.3543%" y="245" width="0.0787%" height="15" fill="rgb(214,102,34)" fg:x="1084" fg:w="1"/><text x="85.6043%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3543%" y="229" width="0.0787%" height="15" fill="rgb(245,92,5)" fg:x="1084" fg:w="1"/><text x="85.6043%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (97 samples, 7.64%)</title><rect x="77.8740%" y="341" width="7.6378%" height="15" fill="rgb(252,72,51)" fg:x="989" fg:w="97"/><text x="78.1240%" y="351.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (97 samples, 7.64%)</title><rect x="77.8740%" y="325" width="7.6378%" height="15" fill="rgb(252,208,19)" fg:x="989" fg:w="97"/><text x="78.1240%" y="335.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (97 samples, 7.64%)</title><rect x="77.8740%" y="309" width="7.6378%" height="15" fill="rgb(211,69,7)" fg:x="989" fg:w="97"/><text x="78.1240%" y="319.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="85.2756%" y="293" width="0.2362%" height="15" fill="rgb(211,27,16)" fg:x="1083" fg:w="3"/><text x="85.5256%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="85.2756%" y="277" width="0.2362%" height="15" fill="rgb(219,216,14)" fg:x="1083" fg:w="3"/><text x="85.5256%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="85.3543%" y="261" width="0.1575%" height="15" fill="rgb(219,71,8)" fg:x="1084" fg:w="2"/><text x="85.6043%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="85.4331%" y="245" width="0.0787%" height="15" fill="rgb(223,170,53)" fg:x="1085" fg:w="1"/><text x="85.6831%" y="255.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="85.4331%" y="229" width="0.0787%" height="15" fill="rgb(246,21,26)" fg:x="1085" fg:w="1"/><text x="85.6831%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4331%" y="213" width="0.0787%" height="15" fill="rgb(248,20,46)" fg:x="1085" fg:w="1"/><text x="85.6831%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="85.5118%" y="341" width="0.1575%" height="15" fill="rgb(252,94,11)" fg:x="1086" fg:w="2"/><text x="85.7618%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="85.5118%" y="325" width="0.1575%" height="15" fill="rgb(236,163,8)" fg:x="1086" fg:w="2"/><text x="85.7618%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="85.5906%" y="309" width="0.0787%" height="15" fill="rgb(217,221,45)" fg:x="1087" fg:w="1"/><text x="85.8406%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.31%)</title><rect x="85.7480%" y="293" width="0.3150%" height="15" fill="rgb(238,38,17)" fg:x="1089" fg:w="4"/><text x="85.9980%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.31%)</title><rect x="85.7480%" y="277" width="0.3150%" height="15" fill="rgb(242,210,23)" fg:x="1089" fg:w="4"/><text x="85.9980%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.9843%" y="261" width="0.0787%" height="15" fill="rgb(250,86,53)" fg:x="1092" fg:w="1"/><text x="86.2343%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (109 samples, 8.58%)</title><rect x="77.5591%" y="357" width="8.5827%" height="15" fill="rgb(223,168,25)" fg:x="985" fg:w="109"/><text x="77.8091%" y="367.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.47%)</title><rect x="85.6693%" y="341" width="0.4724%" height="15" fill="rgb(251,189,4)" fg:x="1088" fg:w="6"/><text x="85.9193%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.47%)</title><rect x="85.6693%" y="325" width="0.4724%" height="15" fill="rgb(245,19,28)" fg:x="1088" fg:w="6"/><text x="85.9193%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.47%)</title><rect x="85.6693%" y="309" width="0.4724%" height="15" fill="rgb(207,10,34)" fg:x="1088" fg:w="6"/><text x="85.9193%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="86.0630%" y="293" width="0.0787%" height="15" fill="rgb(235,153,31)" fg:x="1093" fg:w="1"/><text x="86.3130%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.2205%" y="293" width="0.0787%" height="15" fill="rgb(228,72,37)" fg:x="1095" fg:w="1"/><text x="86.4705%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.2205%" y="277" width="0.0787%" height="15" fill="rgb(215,15,16)" fg:x="1095" fg:w="1"/><text x="86.4705%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.2205%" y="261" width="0.0787%" height="15" fill="rgb(250,119,29)" fg:x="1095" fg:w="1"/><text x="86.4705%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.2992%" y="293" width="0.0787%" height="15" fill="rgb(214,59,1)" fg:x="1096" fg:w="1"/><text x="86.5492%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.2992%" y="277" width="0.0787%" height="15" fill="rgb(223,109,25)" fg:x="1096" fg:w="1"/><text x="86.5492%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.2992%" y="261" width="0.0787%" height="15" fill="rgb(230,198,22)" fg:x="1096" fg:w="1"/><text x="86.5492%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.2992%" y="245" width="0.0787%" height="15" fill="rgb(245,184,46)" fg:x="1096" fg:w="1"/><text x="86.5492%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.2992%" y="229" width="0.0787%" height="15" fill="rgb(253,73,16)" fg:x="1096" fg:w="1"/><text x="86.5492%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="86.3780%" y="293" width="0.0787%" height="15" fill="rgb(206,94,45)" fg:x="1097" fg:w="1"/><text x="86.6280%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3780%" y="277" width="0.0787%" height="15" fill="rgb(236,83,27)" fg:x="1097" fg:w="1"/><text x="86.6280%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4567%" y="261" width="0.0787%" height="15" fill="rgb(220,196,8)" fg:x="1098" fg:w="1"/><text x="86.7067%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.79%)</title><rect x="86.4567%" y="277" width="0.7874%" height="15" fill="rgb(254,185,14)" fg:x="1098" fg:w="10"/><text x="86.7067%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="86.5354%" y="261" width="0.7087%" height="15" fill="rgb(226,50,22)" fg:x="1099" fg:w="9"/><text x="86.7854%" y="271.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="87.0079%" y="245" width="0.2362%" height="15" fill="rgb(253,147,0)" fg:x="1105" fg:w="3"/><text x="87.2579%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.2441%" y="277" width="0.0787%" height="15" fill="rgb(252,46,33)" fg:x="1108" fg:w="1"/><text x="87.4941%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="87.4016%" y="245" width="0.0787%" height="15" fill="rgb(242,22,54)" fg:x="1110" fg:w="1"/><text x="87.6516%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.4016%" y="229" width="0.0787%" height="15" fill="rgb(223,178,32)" fg:x="1110" fg:w="1"/><text x="87.6516%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4016%" y="213" width="0.0787%" height="15" fill="rgb(214,106,53)" fg:x="1110" fg:w="1"/><text x="87.6516%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.4016%" y="197" width="0.0787%" height="15" fill="rgb(232,65,50)" fg:x="1110" fg:w="1"/><text x="87.6516%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.47%)</title><rect x="87.4803%" y="245" width="0.4724%" height="15" fill="rgb(231,110,28)" fg:x="1111" fg:w="6"/><text x="87.7303%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.31%)</title><rect x="87.6378%" y="229" width="0.3150%" height="15" fill="rgb(216,71,40)" fg:x="1113" fg:w="4"/><text x="87.8878%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.31%)</title><rect x="87.6378%" y="213" width="0.3150%" height="15" fill="rgb(229,89,53)" fg:x="1113" fg:w="4"/><text x="87.8878%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="87.6378%" y="197" width="0.3150%" height="15" fill="rgb(210,124,14)" fg:x="1113" fg:w="4"/><text x="87.8878%" y="207.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="87.6378%" y="181" width="0.3150%" height="15" fill="rgb(236,213,6)" fg:x="1113" fg:w="4"/><text x="87.8878%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.39%)</title><rect x="87.9528%" y="229" width="0.3937%" height="15" fill="rgb(228,41,5)" fg:x="1117" fg:w="5"/><text x="88.2028%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.31%)</title><rect x="88.0315%" y="213" width="0.3150%" height="15" fill="rgb(221,167,25)" fg:x="1118" fg:w="4"/><text x="88.2815%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (14 samples, 1.10%)</title><rect x="87.3228%" y="277" width="1.1024%" height="15" fill="rgb(228,144,37)" fg:x="1109" fg:w="14"/><text x="87.5728%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (14 samples, 1.10%)</title><rect x="87.3228%" y="261" width="1.1024%" height="15" fill="rgb(227,189,38)" fg:x="1109" fg:w="14"/><text x="87.5728%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.47%)</title><rect x="87.9528%" y="245" width="0.4724%" height="15" fill="rgb(218,8,2)" fg:x="1117" fg:w="6"/><text x="88.2028%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="88.3465%" y="229" width="0.0787%" height="15" fill="rgb(209,61,28)" fg:x="1122" fg:w="1"/><text x="88.5965%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="88.4252%" y="213" width="0.0787%" height="15" fill="rgb(233,140,39)" fg:x="1123" fg:w="1"/><text x="88.6752%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="89.0551%" y="165" width="0.3150%" height="15" fill="rgb(251,66,48)" fg:x="1131" fg:w="4"/><text x="89.3051%" y="175.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.3701%" y="165" width="0.1575%" height="15" fill="rgb(210,44,45)" fg:x="1135" fg:w="2"/><text x="89.6201%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="89.5276%" y="165" width="0.2362%" height="15" fill="rgb(214,136,46)" fg:x="1137" fg:w="3"/><text x="89.7776%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.6850%" y="149" width="0.0787%" height="15" fill="rgb(207,130,50)" fg:x="1139" fg:w="1"/><text x="89.9350%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.6850%" y="133" width="0.0787%" height="15" fill="rgb(228,102,49)" fg:x="1139" fg:w="1"/><text x="89.9350%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.6850%" y="117" width="0.0787%" height="15" fill="rgb(253,55,1)" fg:x="1139" fg:w="1"/><text x="89.9350%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="89.7638%" y="165" width="0.1575%" height="15" fill="rgb(238,222,9)" fg:x="1140" fg:w="2"/><text x="90.0138%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8425%" y="149" width="0.0787%" height="15" fill="rgb(246,99,6)" fg:x="1141" fg:w="1"/><text x="90.0925%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8425%" y="133" width="0.0787%" height="15" fill="rgb(219,110,26)" fg:x="1141" fg:w="1"/><text x="90.0925%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.8425%" y="117" width="0.0787%" height="15" fill="rgb(239,160,33)" fg:x="1141" fg:w="1"/><text x="90.0925%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.2362%" y="133" width="0.1575%" height="15" fill="rgb(220,202,23)" fg:x="1146" fg:w="2"/><text x="90.4862%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3150%" y="117" width="0.0787%" height="15" fill="rgb(208,80,26)" fg:x="1147" fg:w="1"/><text x="90.5650%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.3150%" y="101" width="0.0787%" height="15" fill="rgb(243,85,7)" fg:x="1147" fg:w="1"/><text x="90.5650%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.63%)</title><rect x="89.9213%" y="165" width="0.6299%" height="15" fill="rgb(228,77,47)" fg:x="1142" fg:w="8"/><text x="90.1713%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.39%)</title><rect x="90.1575%" y="149" width="0.3937%" height="15" fill="rgb(212,226,8)" fg:x="1145" fg:w="5"/><text x="90.4075%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="90.3937%" y="133" width="0.1575%" height="15" fill="rgb(241,120,54)" fg:x="1148" fg:w="2"/><text x="90.6437%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.4724%" y="117" width="0.0787%" height="15" fill="rgb(226,80,16)" fg:x="1149" fg:w="1"/><text x="90.7224%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.4724%" y="101" width="0.0787%" height="15" fill="rgb(240,76,13)" fg:x="1149" fg:w="1"/><text x="90.7224%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.4724%" y="85" width="0.0787%" height="15" fill="rgb(252,74,8)" fg:x="1149" fg:w="1"/><text x="90.7224%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.4724%" y="69" width="0.0787%" height="15" fill="rgb(244,155,2)" fg:x="1149" fg:w="1"/><text x="90.7224%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="90.5512%" y="165" width="0.0787%" height="15" fill="rgb(215,81,35)" fg:x="1150" fg:w="1"/><text x="90.8012%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="90.5512%" y="149" width="0.0787%" height="15" fill="rgb(206,55,2)" fg:x="1150" fg:w="1"/><text x="90.8012%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="90.5512%" y="133" width="0.0787%" height="15" fill="rgb(231,2,34)" fg:x="1150" fg:w="1"/><text x="90.8012%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.6299%" y="149" width="0.0787%" height="15" fill="rgb(242,176,48)" fg:x="1151" fg:w="1"/><text x="90.8799%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.6299%" y="133" width="0.0787%" height="15" fill="rgb(249,31,36)" fg:x="1151" fg:w="1"/><text x="90.8799%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.6299%" y="117" width="0.0787%" height="15" fill="rgb(205,18,17)" fg:x="1151" fg:w="1"/><text x="90.8799%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.6299%" y="101" width="0.0787%" height="15" fill="rgb(254,130,5)" fg:x="1151" fg:w="1"/><text x="90.8799%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (40 samples, 3.15%)</title><rect x="90.6299%" y="165" width="3.1496%" height="15" fill="rgb(229,42,45)" fg:x="1151" fg:w="40"/><text x="90.8799%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.07%)</title><rect x="90.7087%" y="149" width="3.0709%" height="15" fill="rgb(245,95,25)" fg:x="1152" fg:w="39"/><text x="90.9587%" y="159.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.07%)</title><rect x="90.7087%" y="133" width="3.0709%" height="15" fill="rgb(249,193,38)" fg:x="1152" fg:w="39"/><text x="90.9587%" y="143.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="93.7795%" y="165" width="0.1575%" height="15" fill="rgb(241,140,43)" fg:x="1191" fg:w="2"/><text x="94.0295%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="93.9370%" y="165" width="0.1575%" height="15" fill="rgb(245,78,48)" fg:x="1193" fg:w="2"/><text x="94.1870%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 5.91%)</title><rect x="88.4252%" y="261" width="5.9055%" height="15" fill="rgb(214,92,39)" fg:x="1123" fg:w="75"/><text x="88.6752%" y="271.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (75 samples, 5.91%)</title><rect x="88.4252%" y="245" width="5.9055%" height="15" fill="rgb(211,189,14)" fg:x="1123" fg:w="75"/><text x="88.6752%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 5.91%)</title><rect x="88.4252%" y="229" width="5.9055%" height="15" fill="rgb(218,7,24)" fg:x="1123" fg:w="75"/><text x="88.6752%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (74 samples, 5.83%)</title><rect x="88.5039%" y="213" width="5.8268%" height="15" fill="rgb(224,200,49)" fg:x="1124" fg:w="74"/><text x="88.7539%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (74 samples, 5.83%)</title><rect x="88.5039%" y="197" width="5.8268%" height="15" fill="rgb(218,210,14)" fg:x="1124" fg:w="74"/><text x="88.7539%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (74 samples, 5.83%)</title><rect x="88.5039%" y="181" width="5.8268%" height="15" fill="rgb(234,142,31)" fg:x="1124" fg:w="74"/><text x="88.7539%" y="191.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="94.0945%" y="165" width="0.2362%" height="15" fill="rgb(227,165,2)" fg:x="1195" fg:w="3"/><text x="94.3445%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.1732%" y="149" width="0.1575%" height="15" fill="rgb(232,44,46)" fg:x="1196" fg:w="2"/><text x="94.4232%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.1732%" y="133" width="0.1575%" height="15" fill="rgb(236,149,47)" fg:x="1196" fg:w="2"/><text x="94.4232%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.1732%" y="117" width="0.1575%" height="15" fill="rgb(227,45,31)" fg:x="1196" fg:w="2"/><text x="94.4232%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5669%" y="245" width="0.0787%" height="15" fill="rgb(240,176,51)" fg:x="1201" fg:w="1"/><text x="94.8169%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.63%)</title><rect x="94.6457%" y="245" width="0.6299%" height="15" fill="rgb(249,146,41)" fg:x="1202" fg:w="8"/><text x="94.8957%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="94.8819%" y="229" width="0.3937%" height="15" fill="rgb(213,208,4)" fg:x="1205" fg:w="5"/><text x="95.1319%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="94.9606%" y="213" width="0.3150%" height="15" fill="rgb(245,84,36)" fg:x="1206" fg:w="4"/><text x="95.2106%" y="223.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="94.9606%" y="197" width="0.3150%" height="15" fill="rgb(254,84,18)" fg:x="1206" fg:w="4"/><text x="95.2106%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="95.2756%" y="245" width="0.3150%" height="15" fill="rgb(225,38,54)" fg:x="1210" fg:w="4"/><text x="95.5256%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="95.5906%" y="245" width="0.1575%" height="15" fill="rgb(246,50,30)" fg:x="1214" fg:w="2"/><text x="95.8406%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (119 samples, 9.37%)</title><rect x="86.4567%" y="293" width="9.3701%" height="15" fill="rgb(246,148,9)" fg:x="1098" fg:w="119"/><text x="86.7067%" y="303.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (94 samples, 7.40%)</title><rect x="88.4252%" y="277" width="7.4016%" height="15" fill="rgb(223,75,4)" fg:x="1123" fg:w="94"/><text x="88.6752%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.50%)</title><rect x="94.3307%" y="261" width="1.4961%" height="15" fill="rgb(239,148,41)" fg:x="1198" fg:w="19"/><text x="94.5807%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="95.7480%" y="245" width="0.0787%" height="15" fill="rgb(205,195,3)" fg:x="1216" fg:w="1"/><text x="95.9980%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="95.7480%" y="229" width="0.0787%" height="15" fill="rgb(254,161,1)" fg:x="1216" fg:w="1"/><text x="95.9980%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7480%" y="213" width="0.0787%" height="15" fill="rgb(211,229,8)" fg:x="1216" fg:w="1"/><text x="95.9980%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.8268%" y="293" width="0.2362%" height="15" fill="rgb(220,97,9)" fg:x="1217" fg:w="3"/><text x="96.0768%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.8268%" y="277" width="0.2362%" height="15" fill="rgb(240,218,8)" fg:x="1217" fg:w="3"/><text x="96.0768%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.9055%" y="261" width="0.1575%" height="15" fill="rgb(250,44,0)" fg:x="1218" fg:w="2"/><text x="96.1555%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.9843%" y="245" width="0.0787%" height="15" fill="rgb(236,41,53)" fg:x="1219" fg:w="1"/><text x="96.2343%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9843%" y="229" width="0.0787%" height="15" fill="rgb(218,227,13)" fg:x="1219" fg:w="1"/><text x="96.2343%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9843%" y="213" width="0.0787%" height="15" fill="rgb(217,94,32)" fg:x="1219" fg:w="1"/><text x="96.2343%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9843%" y="197" width="0.0787%" height="15" fill="rgb(213,217,12)" fg:x="1219" fg:w="1"/><text x="96.2343%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.0630%" y="245" width="0.0787%" height="15" fill="rgb(229,13,46)" fg:x="1220" fg:w="1"/><text x="96.3130%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.0630%" y="229" width="0.0787%" height="15" fill="rgb(243,139,5)" fg:x="1220" fg:w="1"/><text x="96.3130%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.0630%" y="213" width="0.0787%" height="15" fill="rgb(249,38,45)" fg:x="1220" fg:w="1"/><text x="96.3130%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="96.1417%" y="245" width="0.0787%" height="15" fill="rgb(216,70,11)" fg:x="1221" fg:w="1"/><text x="96.3917%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (130 samples, 10.24%)</title><rect x="86.1417%" y="341" width="10.2362%" height="15" fill="rgb(253,101,25)" fg:x="1094" fg:w="130"/><text x="86.3917%" y="351.50">&lt;regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (130 samples, 10.24%)</title><rect x="86.1417%" y="325" width="10.2362%" height="15" fill="rgb(207,197,30)" fg:x="1094" fg:w="130"/><text x="86.3917%" y="335.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (129 samples, 10.16%)</title><rect x="86.2205%" y="309" width="10.1575%" height="15" fill="rgb(238,87,13)" fg:x="1095" fg:w="129"/><text x="86.4705%" y="319.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.31%)</title><rect x="96.0630%" y="293" width="0.3150%" height="15" fill="rgb(215,155,8)" fg:x="1220" fg:w="4"/><text x="96.3130%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.31%)</title><rect x="96.0630%" y="277" width="0.3150%" height="15" fill="rgb(239,166,38)" fg:x="1220" fg:w="4"/><text x="96.3130%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="96.0630%" y="261" width="0.3150%" height="15" fill="rgb(240,194,35)" fg:x="1220" fg:w="4"/><text x="96.3130%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="96.2205%" y="245" width="0.1575%" height="15" fill="rgb(219,10,44)" fg:x="1222" fg:w="2"/><text x="96.4705%" y="255.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="96.2205%" y="229" width="0.1575%" height="15" fill="rgb(251,220,35)" fg:x="1222" fg:w="2"/><text x="96.4705%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2992%" y="213" width="0.0787%" height="15" fill="rgb(218,117,13)" fg:x="1223" fg:w="1"/><text x="96.5492%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.3780%" y="309" width="0.0787%" height="15" fill="rgb(221,213,40)" fg:x="1224" fg:w="1"/><text x="96.6280%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="96.3780%" y="293" width="0.0787%" height="15" fill="rgb(251,224,35)" fg:x="1224" fg:w="1"/><text x="96.6280%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3780%" y="277" width="0.0787%" height="15" fill="rgb(241,33,39)" fg:x="1224" fg:w="1"/><text x="96.6280%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="96.3780%" y="341" width="0.1575%" height="15" fill="rgb(222,74,17)" fg:x="1224" fg:w="2"/><text x="96.6280%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="96.3780%" y="325" width="0.1575%" height="15" fill="rgb(225,103,0)" fg:x="1224" fg:w="2"/><text x="96.6280%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="96.4567%" y="309" width="0.0787%" height="15" fill="rgb(240,0,12)" fg:x="1225" fg:w="1"/><text x="96.7067%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="96.4567%" y="293" width="0.0787%" height="15" fill="rgb(233,213,37)" fg:x="1225" fg:w="1"/><text x="96.7067%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4567%" y="277" width="0.0787%" height="15" fill="rgb(225,84,52)" fg:x="1225" fg:w="1"/><text x="96.7067%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.5354%" y="325" width="0.0787%" height="15" fill="rgb(247,160,51)" fg:x="1226" fg:w="1"/><text x="96.7854%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.5354%" y="309" width="0.0787%" height="15" fill="rgb(244,60,51)" fg:x="1226" fg:w="1"/><text x="96.7854%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="96.5354%" y="293" width="0.0787%" height="15" fill="rgb(233,114,7)" fg:x="1226" fg:w="1"/><text x="96.7854%" y="303.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="96.5354%" y="277" width="0.0787%" height="15" fill="rgb(246,136,16)" fg:x="1226" fg:w="1"/><text x="96.7854%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.7717%" y="245" width="0.0787%" height="15" fill="rgb(243,114,45)" fg:x="1229" fg:w="1"/><text x="97.0217%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7717%" y="229" width="0.0787%" height="15" fill="rgb(247,183,43)" fg:x="1229" fg:w="1"/><text x="97.0217%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.7717%" y="213" width="0.0787%" height="15" fill="rgb(251,210,42)" fg:x="1229" fg:w="1"/><text x="97.0217%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.8504%" y="245" width="0.0787%" height="15" fill="rgb(221,88,35)" fg:x="1230" fg:w="1"/><text x="97.1004%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="96.8504%" y="229" width="0.0787%" height="15" fill="rgb(242,21,20)" fg:x="1230" fg:w="1"/><text x="97.1004%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="96.8504%" y="213" width="0.0787%" height="15" fill="rgb(233,226,36)" fg:x="1230" fg:w="1"/><text x="97.1004%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8504%" y="197" width="0.0787%" height="15" fill="rgb(243,189,34)" fg:x="1230" fg:w="1"/><text x="97.1004%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.39%)</title><rect x="96.6142%" y="261" width="0.3937%" height="15" fill="rgb(207,145,50)" fg:x="1227" fg:w="5"/><text x="96.8642%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.9291%" y="245" width="0.0787%" height="15" fill="rgb(242,1,50)" fg:x="1231" fg:w="1"/><text x="97.1791%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (141 samples, 11.10%)</title><rect x="86.1417%" y="357" width="11.1024%" height="15" fill="rgb(231,65,32)" fg:x="1094" fg:w="141"/><text x="86.3917%" y="367.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.71%)</title><rect x="96.5354%" y="341" width="0.7087%" height="15" fill="rgb(208,68,49)" fg:x="1226" fg:w="9"/><text x="96.7854%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.63%)</title><rect x="96.6142%" y="325" width="0.6299%" height="15" fill="rgb(253,54,49)" fg:x="1227" fg:w="8"/><text x="96.8642%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="96.6142%" y="309" width="0.6299%" height="15" fill="rgb(245,186,24)" fg:x="1227" fg:w="8"/><text x="96.8642%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="96.6142%" y="293" width="0.6299%" height="15" fill="rgb(209,2,41)" fg:x="1227" fg:w="8"/><text x="96.8642%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="96.6142%" y="277" width="0.6299%" height="15" fill="rgb(242,208,54)" fg:x="1227" fg:w="8"/><text x="96.8642%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="97.0079%" y="261" width="0.2362%" height="15" fill="rgb(225,9,51)" fg:x="1232" fg:w="3"/><text x="97.2579%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="97.0866%" y="245" width="0.1575%" height="15" fill="rgb(207,207,25)" fg:x="1233" fg:w="2"/><text x="97.3366%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="97.0866%" y="229" width="0.1575%" height="15" fill="rgb(253,96,18)" fg:x="1233" fg:w="2"/><text x="97.3366%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1654%" y="213" width="0.0787%" height="15" fill="rgb(252,215,20)" fg:x="1234" fg:w="1"/><text x="97.4154%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2441%" y="341" width="0.0787%" height="15" fill="rgb(245,227,26)" fg:x="1235" fg:w="1"/><text x="97.4941%" y="351.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="97.3228%" y="341" width="0.0787%" height="15" fill="rgb(241,208,0)" fg:x="1236" fg:w="1"/><text x="97.5728%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.4016%" y="277" width="0.0787%" height="15" fill="rgb(224,130,10)" fg:x="1237" fg:w="1"/><text x="97.6516%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4016%" y="261" width="0.0787%" height="15" fill="rgb(237,29,0)" fg:x="1237" fg:w="1"/><text x="97.6516%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="97.4016%" y="245" width="0.0787%" height="15" fill="rgb(219,27,41)" fg:x="1237" fg:w="1"/><text x="97.6516%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4016%" y="229" width="0.0787%" height="15" fill="rgb(245,101,19)" fg:x="1237" fg:w="1"/><text x="97.6516%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.4016%" y="213" width="0.0787%" height="15" fill="rgb(243,44,37)" fg:x="1237" fg:w="1"/><text x="97.6516%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="97.4803%" y="261" width="0.0787%" height="15" fill="rgb(228,213,43)" fg:x="1238" fg:w="1"/><text x="97.7303%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.4803%" y="245" width="0.0787%" height="15" fill="rgb(219,163,21)" fg:x="1238" fg:w="1"/><text x="97.7303%" y="255.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="97.5591%" y="229" width="0.1575%" height="15" fill="rgb(234,86,24)" fg:x="1239" fg:w="2"/><text x="97.8091%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7165%" y="229" width="0.0787%" height="15" fill="rgb(225,10,24)" fg:x="1241" fg:w="1"/><text x="97.9665%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="97.7953%" y="229" width="0.2362%" height="15" fill="rgb(218,109,7)" fg:x="1242" fg:w="3"/><text x="98.0453%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.63%)</title><rect x="97.4803%" y="277" width="0.6299%" height="15" fill="rgb(210,20,26)" fg:x="1238" fg:w="8"/><text x="97.7303%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.55%)</title><rect x="97.5591%" y="261" width="0.5512%" height="15" fill="rgb(216,18,1)" fg:x="1239" fg:w="7"/><text x="97.8091%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.55%)</title><rect x="97.5591%" y="245" width="0.5512%" height="15" fill="rgb(206,163,23)" fg:x="1239" fg:w="7"/><text x="97.8091%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="98.0315%" y="229" width="0.0787%" height="15" fill="rgb(229,150,31)" fg:x="1245" fg:w="1"/><text x="98.2815%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0315%" y="213" width="0.0787%" height="15" fill="rgb(231,10,5)" fg:x="1245" fg:w="1"/><text x="98.2815%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="98.2677%" y="229" width="0.0787%" height="15" fill="rgb(250,40,50)" fg:x="1248" fg:w="1"/><text x="98.5177%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="98.2677%" y="213" width="0.0787%" height="15" fill="rgb(217,119,7)" fg:x="1248" fg:w="1"/><text x="98.5177%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="98.2677%" y="197" width="0.0787%" height="15" fill="rgb(245,214,40)" fg:x="1248" fg:w="1"/><text x="98.5177%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.3465%" y="213" width="0.0787%" height="15" fill="rgb(216,187,1)" fg:x="1249" fg:w="1"/><text x="98.5965%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.3465%" y="197" width="0.0787%" height="15" fill="rgb(237,146,21)" fg:x="1249" fg:w="1"/><text x="98.5965%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3465%" y="181" width="0.0787%" height="15" fill="rgb(210,174,47)" fg:x="1249" fg:w="1"/><text x="98.5965%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="98.1102%" y="277" width="0.3937%" height="15" fill="rgb(218,111,39)" fg:x="1246" fg:w="5"/><text x="98.3602%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="98.1102%" y="261" width="0.3937%" height="15" fill="rgb(224,95,19)" fg:x="1246" fg:w="5"/><text x="98.3602%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.39%)</title><rect x="98.1102%" y="245" width="0.3937%" height="15" fill="rgb(234,15,38)" fg:x="1246" fg:w="5"/><text x="98.3602%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="98.3465%" y="229" width="0.1575%" height="15" fill="rgb(246,56,12)" fg:x="1249" fg:w="2"/><text x="98.5965%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="98.4252%" y="213" width="0.0787%" height="15" fill="rgb(247,16,17)" fg:x="1250" fg:w="1"/><text x="98.6752%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.5827%" y="229" width="0.0787%" height="15" fill="rgb(215,151,11)" fg:x="1252" fg:w="1"/><text x="98.8327%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.5827%" y="213" width="0.0787%" height="15" fill="rgb(225,16,24)" fg:x="1252" fg:w="1"/><text x="98.8327%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.5827%" y="197" width="0.0787%" height="15" fill="rgb(217,117,5)" fg:x="1252" fg:w="1"/><text x="98.8327%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.6614%" y="213" width="0.0787%" height="15" fill="rgb(246,187,53)" fg:x="1253" fg:w="1"/><text x="98.9114%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.6614%" y="197" width="0.0787%" height="15" fill="rgb(241,71,40)" fg:x="1253" fg:w="1"/><text x="98.9114%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.6614%" y="181" width="0.0787%" height="15" fill="rgb(231,67,39)" fg:x="1253" fg:w="1"/><text x="98.9114%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="98.5039%" y="245" width="0.3150%" height="15" fill="rgb(222,120,24)" fg:x="1251" fg:w="4"/><text x="98.7539%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="98.6614%" y="229" width="0.1575%" height="15" fill="rgb(248,3,3)" fg:x="1253" fg:w="2"/><text x="98.9114%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="98.7402%" y="213" width="0.0787%" height="15" fill="rgb(228,218,5)" fg:x="1254" fg:w="1"/><text x="98.9902%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (19 samples, 1.50%)</title><rect x="97.4016%" y="325" width="1.4961%" height="15" fill="rgb(212,202,43)" fg:x="1237" fg:w="19"/><text x="97.6516%" y="335.50"></text></g><g><title>regex::builders::Builder::build_one_string (19 samples, 1.50%)</title><rect x="97.4016%" y="309" width="1.4961%" height="15" fill="rgb(235,183,2)" fg:x="1237" fg:w="19"/><text x="97.6516%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (19 samples, 1.50%)</title><rect x="97.4016%" y="293" width="1.4961%" height="15" fill="rgb(230,165,10)" fg:x="1237" fg:w="19"/><text x="97.6516%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.39%)</title><rect x="98.5039%" y="277" width="0.3937%" height="15" fill="rgb(219,54,40)" fg:x="1251" fg:w="5"/><text x="98.7539%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.39%)</title><rect x="98.5039%" y="261" width="0.3937%" height="15" fill="rgb(244,73,9)" fg:x="1251" fg:w="5"/><text x="98.7539%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="98.8189%" y="245" width="0.0787%" height="15" fill="rgb(212,32,45)" fg:x="1255" fg:w="1"/><text x="99.0689%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8976%" y="277" width="0.0787%" height="15" fill="rgb(205,58,31)" fg:x="1256" fg:w="1"/><text x="99.1476%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8976%" y="261" width="0.0787%" height="15" fill="rgb(250,120,43)" fg:x="1256" fg:w="1"/><text x="99.1476%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.8976%" y="245" width="0.0787%" height="15" fill="rgb(235,13,10)" fg:x="1256" fg:w="1"/><text x="99.1476%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8976%" y="229" width="0.0787%" height="15" fill="rgb(232,219,31)" fg:x="1256" fg:w="1"/><text x="99.1476%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="98.8976%" y="293" width="0.1575%" height="15" fill="rgb(218,157,51)" fg:x="1256" fg:w="2"/><text x="99.1476%" y="303.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="98.9764%" y="277" width="0.0787%" height="15" fill="rgb(211,91,52)" fg:x="1257" fg:w="1"/><text x="99.2264%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="98.8976%" y="325" width="0.2362%" height="15" fill="rgb(240,173,1)" fg:x="1256" fg:w="3"/><text x="99.1476%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="98.8976%" y="309" width="0.2362%" height="15" fill="rgb(248,20,47)" fg:x="1256" fg:w="3"/><text x="99.1476%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="99.0551%" y="293" width="0.0787%" height="15" fill="rgb(217,221,40)" fg:x="1258" fg:w="1"/><text x="99.3051%" y="303.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="99.0551%" y="277" width="0.0787%" height="15" fill="rgb(226,149,51)" fg:x="1258" fg:w="1"/><text x="99.3051%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4488%" y="245" width="0.0787%" height="15" fill="rgb(252,193,7)" fg:x="1263" fg:w="1"/><text x="99.6988%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.4488%" y="229" width="0.0787%" height="15" fill="rgb(205,123,0)" fg:x="1263" fg:w="1"/><text x="99.6988%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.39%)</title><rect x="99.2126%" y="261" width="0.3937%" height="15" fill="rgb(233,173,25)" fg:x="1260" fg:w="5"/><text x="99.4626%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="99.5276%" y="245" width="0.0787%" height="15" fill="rgb(216,63,32)" fg:x="1264" fg:w="1"/><text x="99.7776%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (294 samples, 23.15%)</title><rect x="76.5354%" y="437" width="23.1496%" height="15" fill="rgb(209,56,45)" fg:x="972" fg:w="294"/><text x="76.7854%" y="447.50">&lt;&amp;kernel::model::entry::Entry as plug..</text></g><g><title>plugins_core::looking::model::qualify_name (283 samples, 22.28%)</title><rect x="77.4016%" y="421" width="22.2835%" height="15" fill="rgb(226,111,49)" fg:x="983" fg:w="283"/><text x="77.6516%" y="431.50">plugins_core::looking::model::quali..</text></g><g><title>indefinite::indefinite (283 samples, 22.28%)</title><rect x="77.4016%" y="405" width="22.2835%" height="15" fill="rgb(244,181,21)" fg:x="983" fg:w="283"/><text x="77.6516%" y="415.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (283 samples, 22.28%)</title><rect x="77.4016%" y="389" width="22.2835%" height="15" fill="rgb(222,126,15)" fg:x="983" fg:w="283"/><text x="77.6516%" y="399.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (281 samples, 22.13%)</title><rect x="77.5591%" y="373" width="22.1260%" height="15" fill="rgb(222,95,17)" fg:x="985" fg:w="281"/><text x="77.8091%" y="383.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (31 samples, 2.44%)</title><rect x="97.2441%" y="357" width="2.4409%" height="15" fill="rgb(254,46,5)" fg:x="1235" fg:w="31"/><text x="97.4941%" y="367.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (29 samples, 2.28%)</title><rect x="97.4016%" y="341" width="2.2835%" height="15" fill="rgb(236,216,35)" fg:x="1237" fg:w="29"/><text x="97.6516%" y="351.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.55%)</title><rect x="99.1339%" y="325" width="0.5512%" height="15" fill="rgb(217,187,26)" fg:x="1259" fg:w="7"/><text x="99.3839%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.55%)</title><rect x="99.1339%" y="309" width="0.5512%" height="15" fill="rgb(207,192,25)" fg:x="1259" fg:w="7"/><text x="99.3839%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.55%)</title><rect x="99.1339%" y="293" width="0.5512%" height="15" fill="rgb(253,135,27)" fg:x="1259" fg:w="7"/><text x="99.3839%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.55%)</title><rect x="99.1339%" y="277" width="0.5512%" height="15" fill="rgb(211,122,29)" fg:x="1259" fg:w="7"/><text x="99.3839%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="99.6063%" y="261" width="0.0787%" height="15" fill="rgb(233,162,40)" fg:x="1265" fg:w="1"/><text x="99.8563%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.6063%" y="245" width="0.0787%" height="15" fill="rgb(222,184,47)" fg:x="1265" fg:w="1"/><text x="99.8563%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.6063%" y="229" width="0.0787%" height="15" fill="rgb(249,99,23)" fg:x="1265" fg:w="1"/><text x="99.8563%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6063%" y="213" width="0.0787%" height="15" fill="rgb(214,60,12)" fg:x="1265" fg:w="1"/><text x="99.8563%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (340 samples, 26.77%)</title><rect x="72.9921%" y="629" width="26.7717%" height="15" fill="rgb(250,229,36)" fg:x="927" fg:w="340"/><text x="73.2421%" y="639.50">&lt;engine::session::Session as kernel::action..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (340 samples, 26.77%)</title><rect x="72.9921%" y="613" width="26.7717%" height="15" fill="rgb(232,195,10)" fg:x="927" fg:w="340"/><text x="73.2421%" y="623.50">&lt;engine::perform::StandardPerformer as kern..</text></g><g><title>kernel::plugins::mw::apply_middleware (297 samples, 23.39%)</title><rect x="76.3780%" y="597" width="23.3858%" height="15" fill="rgb(205,213,31)" fg:x="970" fg:w="297"/><text x="76.6280%" y="607.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (297 samples, 23.39%)</title><rect x="76.3780%" y="581" width="23.3858%" height="15" fill="rgb(237,43,8)" fg:x="970" fg:w="297"/><text x="76.6280%" y="591.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (297 samples, 23.39%)</title><rect x="76.3780%" y="565" width="23.3858%" height="15" fill="rgb(216,208,3)" fg:x="970" fg:w="297"/><text x="76.6280%" y="575.50">&lt;plugins_dynlib::DynamicMiddleware as..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (297 samples, 23.39%)</title><rect x="76.3780%" y="549" width="23.3858%" height="15" fill="rgb(228,179,44)" fg:x="970" fg:w="297"/><text x="76.6280%" y="559.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (297 samples, 23.39%)</title><rect x="76.3780%" y="533" width="23.3858%" height="15" fill="rgb(230,192,27)" fg:x="970" fg:w="297"/><text x="76.6280%" y="543.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (297 samples, 23.39%)</title><rect x="76.3780%" y="517" width="23.3858%" height="15" fill="rgb(251,30,38)" fg:x="970" fg:w="297"/><text x="76.6280%" y="527.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (297 samples, 23.39%)</title><rect x="76.3780%" y="501" width="23.3858%" height="15" fill="rgb(246,55,52)" fg:x="970" fg:w="297"/><text x="76.6280%" y="511.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (297 samples, 23.39%)</title><rect x="76.3780%" y="485" width="23.3858%" height="15" fill="rgb(249,79,26)" fg:x="970" fg:w="297"/><text x="76.6280%" y="495.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops:..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (297 samples, 23.39%)</title><rect x="76.3780%" y="469" width="23.3858%" height="15" fill="rgb(220,202,16)" fg:x="970" fg:w="297"/><text x="76.6280%" y="479.50">&lt;plugins_core::looking::actions::Look..</text></g><g><title>plugins_core::looking::model::new_area_observation (295 samples, 23.23%)</title><rect x="76.5354%" y="453" width="23.2283%" height="15" fill="rgb(250,170,23)" fg:x="972" fg:w="295"/><text x="76.7854%" y="463.50">plugins_core::looking::model::new_are..</text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="99.6850%" y="437" width="0.0787%" height="15" fill="rgb(230,7,37)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="99.6850%" y="421" width="0.0787%" height="15" fill="rgb(213,71,1)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.6850%" y="405" width="0.0787%" height="15" fill="rgb(227,87,39)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.6850%" y="389" width="0.0787%" height="15" fill="rgb(210,41,29)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.6850%" y="373" width="0.0787%" height="15" fill="rgb(206,191,31)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.6850%" y="357" width="0.0787%" height="15" fill="rgb(247,75,54)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.6850%" y="341" width="0.0787%" height="15" fill="rgb(208,54,50)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.6850%" y="325" width="0.0787%" height="15" fill="rgb(214,90,37)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.6850%" y="309" width="0.0787%" height="15" fill="rgb(220,132,6)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.6850%" y="293" width="0.0787%" height="15" fill="rgb(213,167,7)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.6850%" y="277" width="0.0787%" height="15" fill="rgb(243,36,27)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.6850%" y="261" width="0.0787%" height="15" fill="rgb(235,147,12)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.6850%" y="245" width="0.0787%" height="15" fill="rgb(212,198,44)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.6850%" y="229" width="0.0787%" height="15" fill="rgb(218,68,50)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.6850%" y="213" width="0.0787%" height="15" fill="rgb(224,79,48)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.6850%" y="197" width="0.0787%" height="15" fill="rgb(213,191,50)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.6850%" y="181" width="0.0787%" height="15" fill="rgb(254,146,10)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.6850%" y="165" width="0.0787%" height="15" fill="rgb(215,175,11)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.6850%" y="149" width="0.0787%" height="15" fill="rgb(207,49,7)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="99.6850%" y="133" width="0.0787%" height="15" fill="rgb(234,144,29)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.6850%" y="117" width="0.0787%" height="15" fill="rgb(213,222,48)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6850%" y="101" width="0.0787%" height="15" fill="rgb(222,8,6)" fg:x="1266" fg:w="1"/><text x="99.9350%" y="111.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.7638%" y="581" width="0.0787%" height="15" fill="rgb(221,114,49)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.7638%" y="565" width="0.0787%" height="15" fill="rgb(250,140,42)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.7638%" y="549" width="0.0787%" height="15" fill="rgb(250,150,27)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.7638%" y="533" width="0.0787%" height="15" fill="rgb(252,159,3)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.7638%" y="517" width="0.0787%" height="15" fill="rgb(241,182,3)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7638%" y="501" width="0.0787%" height="15" fill="rgb(236,3,9)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7638%" y="485" width="0.0787%" height="15" fill="rgb(223,227,51)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7638%" y="469" width="0.0787%" height="15" fill="rgb(232,133,30)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7638%" y="453" width="0.0787%" height="15" fill="rgb(209,93,27)" fg:x="1267" fg:w="1"/><text x="100.0138%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.7638%" y="613" width="0.1575%" height="15" fill="rgb(208,108,34)" fg:x="1267" fg:w="2"/><text x="100.0138%" y="623.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.7638%" y="597" width="0.1575%" height="15" fill="rgb(215,189,13)" fg:x="1267" fg:w="2"/><text x="100.0138%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="99.8425%" y="581" width="0.0787%" height="15" fill="rgb(206,88,23)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8425%" y="565" width="0.0787%" height="15" fill="rgb(240,173,0)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8425%" y="549" width="0.0787%" height="15" fill="rgb(223,106,52)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.8425%" y="533" width="0.0787%" height="15" fill="rgb(206,130,16)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8425%" y="517" width="0.0787%" height="15" fill="rgb(220,54,25)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8425%" y="501" width="0.0787%" height="15" fill="rgb(210,4,38)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8425%" y="485" width="0.0787%" height="15" fill="rgb(238,94,39)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8425%" y="469" width="0.0787%" height="15" fill="rgb(234,124,34)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="479.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.8425%" y="453" width="0.0787%" height="15" fill="rgb(221,91,40)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8425%" y="437" width="0.0787%" height="15" fill="rgb(246,53,28)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8425%" y="421" width="0.0787%" height="15" fill="rgb(229,109,7)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8425%" y="405" width="0.0787%" height="15" fill="rgb(249,117,8)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8425%" y="389" width="0.0787%" height="15" fill="rgb(210,181,1)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8425%" y="373" width="0.0787%" height="15" fill="rgb(211,66,1)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.8425%" y="357" width="0.0787%" height="15" fill="rgb(221,90,14)" fg:x="1268" fg:w="1"/><text x="100.0925%" y="367.50"></text></g><g><title>all (1,270 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(219,222,44)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-484c7248 (1,270 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(246,34,33)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="991.50">simple-484c7248</text></g><g><title>_start (1,270 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(227,135,41)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,270 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(226,15,14)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,270 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(236,148,47)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,270 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(233,162,52)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,270 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(244,35,28)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,270 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(205,121,10)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,270 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(250,58,18)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,270 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(216,37,13)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,270 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(221,215,42)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,270 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(217,214,19)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,270 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(233,139,13)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,270 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(247,168,23)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,270 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(207,202,1)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,270 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(220,155,48)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,270 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(250,43,26)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,270 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(212,190,23)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,270 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(216,39,24)" fg:x="0" fg:w="1270"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (410 samples, 32.28%)</title><rect x="67.7165%" y="693" width="32.2835%" height="15" fill="rgb(252,113,16)" fg:x="860" fg:w="410"/><text x="67.9665%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::r..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (410 samples, 32.28%)</title><rect x="67.7165%" y="677" width="32.2835%" height="15" fill="rgb(208,113,19)" fg:x="860" fg:w="410"/><text x="67.9665%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (410 samples, 32.28%)</title><rect x="67.7165%" y="661" width="32.2835%" height="15" fill="rgb(234,107,25)" fg:x="860" fg:w="410"/><text x="67.9665%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (343 samples, 27.01%)</title><rect x="72.9921%" y="645" width="27.0079%" height="15" fill="rgb(234,217,51)" fg:x="927" fg:w="343"/><text x="73.2421%" y="655.50">engine::session::Session::evaluate_and_perf..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="99.7638%" y="629" width="0.2362%" height="15" fill="rgb(251,29,42)" fg:x="1267" fg:w="3"/><text x="100.0138%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.9213%" y="613" width="0.0787%" height="15" fill="rgb(221,62,51)" fg:x="1269" fg:w="1"/><text x="100.1713%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.9213%" y="597" width="0.0787%" height="15" fill="rgb(240,192,43)" fg:x="1269" fg:w="1"/><text x="100.1713%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.9213%" y="581" width="0.0787%" height="15" fill="rgb(224,157,47)" fg:x="1269" fg:w="1"/><text x="100.1713%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9213%" y="565" width="0.0787%" height="15" fill="rgb(226,84,45)" fg:x="1269" fg:w="1"/><text x="100.1713%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.9213%" y="549" width="0.0787%" height="15" fill="rgb(208,207,23)" fg:x="1269" fg:w="1"/><text x="100.1713%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.9213%" y="533" width="0.0787%" height="15" fill="rgb(253,34,51)" fg:x="1269" fg:w="1"/><text x="100.1713%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.9213%" y="517" width="0.0787%" height="15" fill="rgb(227,26,34)" fg:x="1269" fg:w="1"/><text x="100.1713%" y="527.50"></text></g></svg></svg>