<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1206" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1189.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1189.00"> </text><svg id="frames" x="10" width="1180" total_samples="1242"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0805%" y="677" width="0.0805%" height="15" fill="rgb(242,117,42)" fg:x="1" fg:w="1"/><text x="0.3305%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.1610%" y="661" width="0.0805%" height="15" fill="rgb(210,11,23)" fg:x="2" fg:w="1"/><text x="0.4110%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.2415%" y="661" width="0.1610%" height="15" fill="rgb(217,110,2)" fg:x="3" fg:w="2"/><text x="0.4915%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3221%" y="645" width="0.0805%" height="15" fill="rgb(229,77,54)" fg:x="4" fg:w="1"/><text x="0.5721%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="725" width="0.4831%" height="15" fill="rgb(218,53,16)" fg:x="0" fg:w="6"/><text x="0.2500%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (6 samples, 0.48%)</title><rect x="0.0000%" y="709" width="0.4831%" height="15" fill="rgb(215,38,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="0.0000%" y="693" width="0.4831%" height="15" fill="rgb(235,42,18)" fg:x="0" fg:w="6"/><text x="0.2500%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.1610%" y="677" width="0.3221%" height="15" fill="rgb(219,66,54)" fg:x="2" fg:w="4"/><text x="0.4110%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4026%" y="661" width="0.0805%" height="15" fill="rgb(222,205,4)" fg:x="5" fg:w="1"/><text x="0.6526%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4026%" y="645" width="0.0805%" height="15" fill="rgb(227,213,46)" fg:x="5" fg:w="1"/><text x="0.6526%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4026%" y="629" width="0.0805%" height="15" fill="rgb(250,145,42)" fg:x="5" fg:w="1"/><text x="0.6526%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0000%" y="741" width="0.5636%" height="15" fill="rgb(219,15,2)" fg:x="0" fg:w="7"/><text x="0.2500%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4831%" y="725" width="0.0805%" height="15" fill="rgb(231,181,52)" fg:x="6" fg:w="1"/><text x="0.7331%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.0000%" y="773" width="0.6441%" height="15" fill="rgb(235,1,42)" fg:x="0" fg:w="8"/><text x="0.2500%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (8 samples, 0.64%)</title><rect x="0.0000%" y="757" width="0.6441%" height="15" fill="rgb(249,88,27)" fg:x="0" fg:w="8"/><text x="0.2500%" y="767.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5636%" y="741" width="0.0805%" height="15" fill="rgb(235,145,16)" fg:x="7" fg:w="1"/><text x="0.8136%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="0.0000%" y="805" width="0.7246%" height="15" fill="rgb(237,114,19)" fg:x="0" fg:w="9"/><text x="0.2500%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (9 samples, 0.72%)</title><rect x="0.0000%" y="789" width="0.7246%" height="15" fill="rgb(238,51,50)" fg:x="0" fg:w="9"/><text x="0.2500%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6441%" y="773" width="0.0805%" height="15" fill="rgb(205,194,25)" fg:x="8" fg:w="1"/><text x="0.8941%" y="783.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.8052%" y="725" width="0.0805%" height="15" fill="rgb(215,203,17)" fg:x="10" fg:w="1"/><text x="1.0552%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="0.8052%" y="709" width="0.0805%" height="15" fill="rgb(233,112,49)" fg:x="10" fg:w="1"/><text x="1.0552%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.8052%" y="693" width="0.0805%" height="15" fill="rgb(241,130,26)" fg:x="10" fg:w="1"/><text x="1.0552%" y="703.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="0.8052%" y="677" width="0.0805%" height="15" fill="rgb(252,223,19)" fg:x="10" fg:w="1"/><text x="1.0552%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="0.8052%" y="661" width="0.0805%" height="15" fill="rgb(211,95,25)" fg:x="10" fg:w="1"/><text x="1.0552%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.8857%" y="725" width="0.0805%" height="15" fill="rgb(251,182,27)" fg:x="11" fg:w="1"/><text x="1.1357%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="0.8857%" y="709" width="0.0805%" height="15" fill="rgb(238,24,4)" fg:x="11" fg:w="1"/><text x="1.1357%" y="719.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="0.9662%" y="725" width="0.0805%" height="15" fill="rgb(224,220,25)" fg:x="12" fg:w="1"/><text x="1.2162%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.9662%" y="709" width="0.0805%" height="15" fill="rgb(239,133,26)" fg:x="12" fg:w="1"/><text x="1.2162%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.9662%" y="693" width="0.0805%" height="15" fill="rgb(211,94,48)" fg:x="12" fg:w="1"/><text x="1.2162%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="1.0467%" y="645" width="0.0805%" height="15" fill="rgb(239,87,6)" fg:x="13" fg:w="1"/><text x="1.2967%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.0467%" y="629" width="0.0805%" height="15" fill="rgb(227,62,0)" fg:x="13" fg:w="1"/><text x="1.2967%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.0467%" y="613" width="0.0805%" height="15" fill="rgb(211,226,4)" fg:x="13" fg:w="1"/><text x="1.2967%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="1.0467%" y="597" width="0.0805%" height="15" fill="rgb(253,38,52)" fg:x="13" fg:w="1"/><text x="1.2967%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.0467%" y="581" width="0.0805%" height="15" fill="rgb(229,126,40)" fg:x="13" fg:w="1"/><text x="1.2967%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="1.0467%" y="565" width="0.0805%" height="15" fill="rgb(229,165,44)" fg:x="13" fg:w="1"/><text x="1.2967%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0467%" y="549" width="0.0805%" height="15" fill="rgb(247,95,47)" fg:x="13" fg:w="1"/><text x="1.2967%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="1.0467%" y="709" width="0.1610%" height="15" fill="rgb(216,140,30)" fg:x="13" fg:w="2"/><text x="1.2967%" y="719.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="1.0467%" y="693" width="0.1610%" height="15" fill="rgb(246,214,8)" fg:x="13" fg:w="2"/><text x="1.2967%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="1.0467%" y="677" width="0.1610%" height="15" fill="rgb(227,224,15)" fg:x="13" fg:w="2"/><text x="1.2967%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="1.0467%" y="661" width="0.1610%" height="15" fill="rgb(233,175,4)" fg:x="13" fg:w="2"/><text x="1.2967%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.1272%" y="645" width="0.0805%" height="15" fill="rgb(221,66,45)" fg:x="14" fg:w="1"/><text x="1.3772%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.1272%" y="629" width="0.0805%" height="15" fill="rgb(221,178,18)" fg:x="14" fg:w="1"/><text x="1.3772%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="1.2077%" y="661" width="0.0805%" height="15" fill="rgb(213,81,29)" fg:x="15" fg:w="1"/><text x="1.4577%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.2077%" y="645" width="0.0805%" height="15" fill="rgb(220,89,49)" fg:x="15" fg:w="1"/><text x="1.4577%" y="655.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="1.3688%" y="613" width="0.0805%" height="15" fill="rgb(227,60,33)" fg:x="17" fg:w="1"/><text x="1.6188%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (10 samples, 0.81%)</title><rect x="0.7246%" y="773" width="0.8052%" height="15" fill="rgb(205,113,12)" fg:x="9" fg:w="10"/><text x="0.9746%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.72%)</title><rect x="0.8052%" y="757" width="0.7246%" height="15" fill="rgb(211,32,1)" fg:x="10" fg:w="9"/><text x="1.0552%" y="767.50"></text></g><g><title>engine::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="0.8052%" y="741" width="0.7246%" height="15" fill="rgb(246,2,12)" fg:x="10" fg:w="9"/><text x="1.0552%" y="751.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.48%)</title><rect x="1.0467%" y="725" width="0.4831%" height="15" fill="rgb(243,37,27)" fg:x="13" fg:w="6"/><text x="1.2967%" y="735.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="1.2077%" y="709" width="0.3221%" height="15" fill="rgb(248,211,31)" fg:x="15" fg:w="4"/><text x="1.4577%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="1.2077%" y="693" width="0.3221%" height="15" fill="rgb(242,146,47)" fg:x="15" fg:w="4"/><text x="1.4577%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="1.2077%" y="677" width="0.3221%" height="15" fill="rgb(206,70,20)" fg:x="15" fg:w="4"/><text x="1.4577%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="1.2882%" y="661" width="0.2415%" height="15" fill="rgb(215,10,51)" fg:x="16" fg:w="3"/><text x="1.5382%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="1.3688%" y="645" width="0.1610%" height="15" fill="rgb(243,178,53)" fg:x="17" fg:w="2"/><text x="1.6188%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="1.3688%" y="629" width="0.1610%" height="15" fill="rgb(233,221,20)" fg:x="17" fg:w="2"/><text x="1.6188%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4493%" y="613" width="0.0805%" height="15" fill="rgb(218,95,35)" fg:x="18" fg:w="1"/><text x="1.6993%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4493%" y="597" width="0.0805%" height="15" fill="rgb(229,13,5)" fg:x="18" fg:w="1"/><text x="1.6993%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4493%" y="581" width="0.0805%" height="15" fill="rgb(252,164,30)" fg:x="18" fg:w="1"/><text x="1.6993%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4493%" y="565" width="0.0805%" height="15" fill="rgb(232,68,36)" fg:x="18" fg:w="1"/><text x="1.6993%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4493%" y="549" width="0.0805%" height="15" fill="rgb(219,59,54)" fg:x="18" fg:w="1"/><text x="1.6993%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4493%" y="533" width="0.0805%" height="15" fill="rgb(250,92,33)" fg:x="18" fg:w="1"/><text x="1.6993%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4493%" y="517" width="0.0805%" height="15" fill="rgb(229,162,54)" fg:x="18" fg:w="1"/><text x="1.6993%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.4493%" y="501" width="0.0805%" height="15" fill="rgb(244,114,52)" fg:x="18" fg:w="1"/><text x="1.6993%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.4493%" y="485" width="0.0805%" height="15" fill="rgb(212,211,43)" fg:x="18" fg:w="1"/><text x="1.6993%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.4493%" y="469" width="0.0805%" height="15" fill="rgb(226,147,8)" fg:x="18" fg:w="1"/><text x="1.6993%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.4493%" y="453" width="0.0805%" height="15" fill="rgb(226,23,13)" fg:x="18" fg:w="1"/><text x="1.6993%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.4493%" y="437" width="0.0805%" height="15" fill="rgb(240,63,4)" fg:x="18" fg:w="1"/><text x="1.6993%" y="447.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="1.5298%" y="773" width="0.0805%" height="15" fill="rgb(221,1,32)" fg:x="19" fg:w="1"/><text x="1.7798%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Perform&gt; (2 samples, 0.16%)</title><rect x="1.6103%" y="741" width="0.1610%" height="15" fill="rgb(242,117,10)" fg:x="20" fg:w="2"/><text x="1.8603%" y="751.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.8519%" y="725" width="0.0805%" height="15" fill="rgb(249,172,44)" fg:x="23" fg:w="1"/><text x="2.1019%" y="735.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.08%)</title><rect x="1.8519%" y="709" width="0.0805%" height="15" fill="rgb(244,46,45)" fg:x="23" fg:w="1"/><text x="2.1019%" y="719.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (19 samples, 1.53%)</title><rect x="0.7246%" y="805" width="1.5298%" height="15" fill="rgb(206,43,17)" fg:x="9" fg:w="19"/><text x="0.9746%" y="815.50"></text></g><g><title>engine::session::Session::new (19 samples, 1.53%)</title><rect x="0.7246%" y="789" width="1.5298%" height="15" fill="rgb(239,218,39)" fg:x="9" fg:w="19"/><text x="0.9746%" y="799.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.64%)</title><rect x="1.6103%" y="773" width="0.6441%" height="15" fill="rgb(208,169,54)" fg:x="20" fg:w="8"/><text x="1.8603%" y="783.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="1.6103%" y="757" width="0.6441%" height="15" fill="rgb(247,25,42)" fg:x="20" fg:w="8"/><text x="1.8603%" y="767.50"></text></g><g><title>libloading::os::unix::Library::open (6 samples, 0.48%)</title><rect x="1.7713%" y="741" width="0.4831%" height="15" fill="rgb(226,23,31)" fg:x="22" fg:w="6"/><text x="2.0213%" y="751.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.9324%" y="725" width="0.3221%" height="15" fill="rgb(247,16,28)" fg:x="24" fg:w="4"/><text x="2.1824%" y="735.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="1.9324%" y="709" width="0.3221%" height="15" fill="rgb(231,147,38)" fg:x="24" fg:w="4"/><text x="2.1824%" y="719.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.9324%" y="693" width="0.3221%" height="15" fill="rgb(253,81,48)" fg:x="24" fg:w="4"/><text x="2.1824%" y="703.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.9324%" y="677" width="0.3221%" height="15" fill="rgb(249,222,43)" fg:x="24" fg:w="4"/><text x="2.1824%" y="687.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.9324%" y="661" width="0.3221%" height="15" fill="rgb(221,3,27)" fg:x="24" fg:w="4"/><text x="2.1824%" y="671.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="2.2544%" y="757" width="0.0805%" height="15" fill="rgb(228,180,5)" fg:x="28" fg:w="1"/><text x="2.5044%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="2.2544%" y="741" width="0.0805%" height="15" fill="rgb(227,131,42)" fg:x="28" fg:w="1"/><text x="2.5044%" y="751.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.2544%" y="725" width="0.0805%" height="15" fill="rgb(212,3,39)" fg:x="28" fg:w="1"/><text x="2.5044%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.2544%" y="709" width="0.0805%" height="15" fill="rgb(226,45,5)" fg:x="28" fg:w="1"/><text x="2.5044%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="2.2544%" y="693" width="0.0805%" height="15" fill="rgb(215,167,45)" fg:x="28" fg:w="1"/><text x="2.5044%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="2.3349%" y="709" width="0.1610%" height="15" fill="rgb(250,218,53)" fg:x="29" fg:w="2"/><text x="2.5849%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.3349%" y="693" width="0.1610%" height="15" fill="rgb(207,140,0)" fg:x="29" fg:w="2"/><text x="2.5849%" y="703.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.3349%" y="677" width="0.1610%" height="15" fill="rgb(238,133,51)" fg:x="29" fg:w="2"/><text x="2.5849%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.3349%" y="661" width="0.1610%" height="15" fill="rgb(218,203,53)" fg:x="29" fg:w="2"/><text x="2.5849%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.3349%" y="645" width="0.1610%" height="15" fill="rgb(226,184,25)" fg:x="29" fg:w="2"/><text x="2.5849%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.3349%" y="629" width="0.1610%" height="15" fill="rgb(231,121,21)" fg:x="29" fg:w="2"/><text x="2.5849%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.3349%" y="613" width="0.1610%" height="15" fill="rgb(251,14,34)" fg:x="29" fg:w="2"/><text x="2.5849%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.4155%" y="597" width="0.0805%" height="15" fill="rgb(249,193,11)" fg:x="30" fg:w="1"/><text x="2.6655%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.4960%" y="693" width="0.0805%" height="15" fill="rgb(220,172,37)" fg:x="31" fg:w="1"/><text x="2.7460%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.6570%" y="677" width="0.1610%" height="15" fill="rgb(231,229,43)" fg:x="33" fg:w="2"/><text x="2.9070%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.7375%" y="661" width="0.0805%" height="15" fill="rgb(250,161,5)" fg:x="34" fg:w="1"/><text x="2.9875%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.8180%" y="661" width="0.0805%" height="15" fill="rgb(218,225,18)" fg:x="35" fg:w="1"/><text x="3.0680%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8180%" y="645" width="0.0805%" height="15" fill="rgb(245,45,42)" fg:x="35" fg:w="1"/><text x="3.0680%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.8986%" y="629" width="0.0805%" height="15" fill="rgb(211,115,1)" fg:x="36" fg:w="1"/><text x="3.1486%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8986%" y="613" width="0.0805%" height="15" fill="rgb(248,133,52)" fg:x="36" fg:w="1"/><text x="3.1486%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8986%" y="597" width="0.0805%" height="15" fill="rgb(238,100,21)" fg:x="36" fg:w="1"/><text x="3.1486%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.8986%" y="581" width="0.0805%" height="15" fill="rgb(247,144,11)" fg:x="36" fg:w="1"/><text x="3.1486%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.8986%" y="565" width="0.0805%" height="15" fill="rgb(206,164,16)" fg:x="36" fg:w="1"/><text x="3.1486%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.8986%" y="549" width="0.0805%" height="15" fill="rgb(222,34,3)" fg:x="36" fg:w="1"/><text x="3.1486%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.8986%" y="533" width="0.0805%" height="15" fill="rgb(248,82,4)" fg:x="36" fg:w="1"/><text x="3.1486%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="2.5765%" y="693" width="0.4831%" height="15" fill="rgb(228,81,46)" fg:x="32" fg:w="6"/><text x="2.8265%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.8180%" y="677" width="0.2415%" height="15" fill="rgb(227,67,47)" fg:x="35" fg:w="3"/><text x="3.0680%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8986%" y="661" width="0.1610%" height="15" fill="rgb(215,93,53)" fg:x="36" fg:w="2"/><text x="3.1486%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8986%" y="645" width="0.1610%" height="15" fill="rgb(248,194,39)" fg:x="36" fg:w="2"/><text x="3.1486%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9791%" y="629" width="0.0805%" height="15" fill="rgb(215,5,19)" fg:x="37" fg:w="1"/><text x="3.2291%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.9791%" y="613" width="0.0805%" height="15" fill="rgb(226,215,51)" fg:x="37" fg:w="1"/><text x="3.2291%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.9791%" y="597" width="0.0805%" height="15" fill="rgb(225,56,26)" fg:x="37" fg:w="1"/><text x="3.2291%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="2.3349%" y="725" width="0.8052%" height="15" fill="rgb(222,75,29)" fg:x="29" fg:w="10"/><text x="2.5849%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="2.4960%" y="709" width="0.6441%" height="15" fill="rgb(236,139,6)" fg:x="31" fg:w="8"/><text x="2.7460%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.0596%" y="693" width="0.0805%" height="15" fill="rgb(223,137,36)" fg:x="38" fg:w="1"/><text x="3.3096%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.0596%" y="677" width="0.0805%" height="15" fill="rgb(226,99,2)" fg:x="38" fg:w="1"/><text x="3.3096%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.1401%" y="725" width="0.1610%" height="15" fill="rgb(206,133,23)" fg:x="39" fg:w="2"/><text x="3.3901%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="3.1401%" y="709" width="0.1610%" height="15" fill="rgb(243,173,15)" fg:x="39" fg:w="2"/><text x="3.3901%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2206%" y="693" width="0.0805%" height="15" fill="rgb(228,69,28)" fg:x="40" fg:w="1"/><text x="3.4706%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.2206%" y="677" width="0.0805%" height="15" fill="rgb(212,51,22)" fg:x="40" fg:w="1"/><text x="3.4706%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.2206%" y="661" width="0.0805%" height="15" fill="rgb(227,113,0)" fg:x="40" fg:w="1"/><text x="3.4706%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2206%" y="645" width="0.0805%" height="15" fill="rgb(252,84,27)" fg:x="40" fg:w="1"/><text x="3.4706%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="3.3011%" y="709" width="0.0805%" height="15" fill="rgb(223,145,39)" fg:x="41" fg:w="1"/><text x="3.5511%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3011%" y="693" width="0.0805%" height="15" fill="rgb(239,219,30)" fg:x="41" fg:w="1"/><text x="3.5511%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="3.3816%" y="677" width="0.1610%" height="15" fill="rgb(224,196,39)" fg:x="42" fg:w="2"/><text x="3.6316%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4622%" y="661" width="0.0805%" height="15" fill="rgb(205,35,43)" fg:x="43" fg:w="1"/><text x="3.7122%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.4622%" y="645" width="0.0805%" height="15" fill="rgb(228,201,21)" fg:x="43" fg:w="1"/><text x="3.7122%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5427%" y="677" width="0.0805%" height="15" fill="rgb(237,118,16)" fg:x="44" fg:w="1"/><text x="3.7927%" y="687.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.45%)</title><rect x="2.2544%" y="789" width="1.4493%" height="15" fill="rgb(241,17,19)" fg:x="28" fg:w="18"/><text x="2.5044%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (18 samples, 1.45%)</title><rect x="2.2544%" y="773" width="1.4493%" height="15" fill="rgb(214,10,25)" fg:x="28" fg:w="18"/><text x="2.5044%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (17 samples, 1.37%)</title><rect x="2.3349%" y="757" width="1.3688%" height="15" fill="rgb(238,37,29)" fg:x="29" fg:w="17"/><text x="2.5849%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (17 samples, 1.37%)</title><rect x="2.3349%" y="741" width="1.3688%" height="15" fill="rgb(253,83,25)" fg:x="29" fg:w="17"/><text x="2.5849%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="3.3011%" y="725" width="0.4026%" height="15" fill="rgb(234,192,12)" fg:x="41" fg:w="5"/><text x="3.5511%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="3.3816%" y="709" width="0.3221%" height="15" fill="rgb(241,216,45)" fg:x="42" fg:w="4"/><text x="3.6316%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="3.3816%" y="693" width="0.3221%" height="15" fill="rgb(242,22,33)" fg:x="42" fg:w="4"/><text x="3.6316%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.6232%" y="677" width="0.0805%" height="15" fill="rgb(231,105,49)" fg:x="45" fg:w="1"/><text x="3.8732%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="3.6232%" y="661" width="0.0805%" height="15" fill="rgb(218,204,15)" fg:x="45" fg:w="1"/><text x="3.8732%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.6232%" y="645" width="0.0805%" height="15" fill="rgb(235,138,41)" fg:x="45" fg:w="1"/><text x="3.8732%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6232%" y="629" width="0.0805%" height="15" fill="rgb(246,0,9)" fg:x="45" fg:w="1"/><text x="3.8732%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.7842%" y="725" width="0.0805%" height="15" fill="rgb(210,74,4)" fg:x="47" fg:w="1"/><text x="4.0342%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7842%" y="709" width="0.0805%" height="15" fill="rgb(250,60,41)" fg:x="47" fg:w="1"/><text x="4.0342%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7842%" y="693" width="0.0805%" height="15" fill="rgb(220,115,12)" fg:x="47" fg:w="1"/><text x="4.0342%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7842%" y="677" width="0.0805%" height="15" fill="rgb(237,100,13)" fg:x="47" fg:w="1"/><text x="4.0342%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7842%" y="661" width="0.0805%" height="15" fill="rgb(213,55,26)" fg:x="47" fg:w="1"/><text x="4.0342%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7842%" y="645" width="0.0805%" height="15" fill="rgb(216,17,4)" fg:x="47" fg:w="1"/><text x="4.0342%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7842%" y="629" width="0.0805%" height="15" fill="rgb(220,153,47)" fg:x="47" fg:w="1"/><text x="4.0342%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9452%" y="677" width="0.0805%" height="15" fill="rgb(215,131,9)" fg:x="49" fg:w="1"/><text x="4.1952%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9452%" y="661" width="0.0805%" height="15" fill="rgb(233,46,42)" fg:x="49" fg:w="1"/><text x="4.1952%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="3.9452%" y="645" width="0.0805%" height="15" fill="rgb(226,86,7)" fg:x="49" fg:w="1"/><text x="4.1952%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9452%" y="629" width="0.0805%" height="15" fill="rgb(239,226,21)" fg:x="49" fg:w="1"/><text x="4.1952%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.9452%" y="613" width="0.0805%" height="15" fill="rgb(244,137,22)" fg:x="49" fg:w="1"/><text x="4.1952%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9452%" y="597" width="0.0805%" height="15" fill="rgb(211,139,35)" fg:x="49" fg:w="1"/><text x="4.1952%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9452%" y="581" width="0.0805%" height="15" fill="rgb(214,62,50)" fg:x="49" fg:w="1"/><text x="4.1952%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="3.7842%" y="773" width="0.3221%" height="15" fill="rgb(212,113,44)" fg:x="47" fg:w="4"/><text x="4.0342%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="3.7842%" y="757" width="0.3221%" height="15" fill="rgb(226,150,43)" fg:x="47" fg:w="4"/><text x="4.0342%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="3.7842%" y="741" width="0.3221%" height="15" fill="rgb(250,71,37)" fg:x="47" fg:w="4"/><text x="4.0342%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="3.8647%" y="725" width="0.2415%" height="15" fill="rgb(219,76,19)" fg:x="48" fg:w="3"/><text x="4.1147%" y="735.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.9452%" y="709" width="0.1610%" height="15" fill="rgb(250,39,11)" fg:x="49" fg:w="2"/><text x="4.1952%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.9452%" y="693" width="0.1610%" height="15" fill="rgb(230,64,31)" fg:x="49" fg:w="2"/><text x="4.1952%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="4.0258%" y="677" width="0.0805%" height="15" fill="rgb(208,222,23)" fg:x="50" fg:w="1"/><text x="4.2758%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.0258%" y="661" width="0.0805%" height="15" fill="rgb(227,125,18)" fg:x="50" fg:w="1"/><text x="4.2758%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0258%" y="645" width="0.0805%" height="15" fill="rgb(234,210,9)" fg:x="50" fg:w="1"/><text x="4.2758%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0258%" y="629" width="0.0805%" height="15" fill="rgb(217,127,24)" fg:x="50" fg:w="1"/><text x="4.2758%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.0258%" y="613" width="0.0805%" height="15" fill="rgb(239,141,48)" fg:x="50" fg:w="1"/><text x="4.2758%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0258%" y="597" width="0.0805%" height="15" fill="rgb(227,109,8)" fg:x="50" fg:w="1"/><text x="4.2758%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="4.1063%" y="757" width="0.0805%" height="15" fill="rgb(235,184,23)" fg:x="51" fg:w="1"/><text x="4.3563%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="4.1063%" y="741" width="0.0805%" height="15" fill="rgb(227,226,48)" fg:x="51" fg:w="1"/><text x="4.3563%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.1063%" y="725" width="0.0805%" height="15" fill="rgb(206,150,11)" fg:x="51" fg:w="1"/><text x="4.3563%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="4.1063%" y="709" width="0.0805%" height="15" fill="rgb(254,2,33)" fg:x="51" fg:w="1"/><text x="4.3563%" y="719.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="4.1868%" y="741" width="0.0805%" height="15" fill="rgb(243,160,20)" fg:x="52" fg:w="1"/><text x="4.4368%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="4.1868%" y="725" width="0.0805%" height="15" fill="rgb(218,208,30)" fg:x="52" fg:w="1"/><text x="4.4368%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.1868%" y="709" width="0.0805%" height="15" fill="rgb(224,120,49)" fg:x="52" fg:w="1"/><text x="4.4368%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="4.1868%" y="693" width="0.0805%" height="15" fill="rgb(246,12,2)" fg:x="52" fg:w="1"/><text x="4.4368%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1868%" y="677" width="0.0805%" height="15" fill="rgb(236,117,3)" fg:x="52" fg:w="1"/><text x="4.4368%" y="687.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.64%)</title><rect x="3.7037%" y="789" width="0.6441%" height="15" fill="rgb(216,128,52)" fg:x="46" fg:w="8"/><text x="3.9537%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="4.1063%" y="773" width="0.2415%" height="15" fill="rgb(246,145,19)" fg:x="51" fg:w="3"/><text x="4.3563%" y="783.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="4.1868%" y="757" width="0.1610%" height="15" fill="rgb(222,11,46)" fg:x="52" fg:w="2"/><text x="4.4368%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="4.2673%" y="741" width="0.0805%" height="15" fill="rgb(245,82,36)" fg:x="53" fg:w="1"/><text x="4.5173%" y="751.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3478%" y="773" width="0.0805%" height="15" fill="rgb(250,73,51)" fg:x="54" fg:w="1"/><text x="4.5978%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3478%" y="757" width="0.0805%" height="15" fill="rgb(221,189,23)" fg:x="54" fg:w="1"/><text x="4.5978%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.3478%" y="741" width="0.0805%" height="15" fill="rgb(210,33,7)" fg:x="54" fg:w="1"/><text x="4.5978%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.3478%" y="725" width="0.0805%" height="15" fill="rgb(210,107,22)" fg:x="54" fg:w="1"/><text x="4.5978%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.3478%" y="709" width="0.0805%" height="15" fill="rgb(222,116,37)" fg:x="54" fg:w="1"/><text x="4.5978%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.3478%" y="693" width="0.0805%" height="15" fill="rgb(254,17,48)" fg:x="54" fg:w="1"/><text x="4.5978%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3478%" y="677" width="0.0805%" height="15" fill="rgb(224,36,32)" fg:x="54" fg:w="1"/><text x="4.5978%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.3478%" y="661" width="0.0805%" height="15" fill="rgb(232,90,46)" fg:x="54" fg:w="1"/><text x="4.5978%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.3478%" y="645" width="0.0805%" height="15" fill="rgb(241,66,40)" fg:x="54" fg:w="1"/><text x="4.5978%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.3478%" y="629" width="0.0805%" height="15" fill="rgb(249,184,29)" fg:x="54" fg:w="1"/><text x="4.5978%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.3478%" y="613" width="0.0805%" height="15" fill="rgb(231,181,1)" fg:x="54" fg:w="1"/><text x="4.5978%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.3478%" y="597" width="0.0805%" height="15" fill="rgb(224,94,2)" fg:x="54" fg:w="1"/><text x="4.5978%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3478%" y="581" width="0.0805%" height="15" fill="rgb(229,170,15)" fg:x="54" fg:w="1"/><text x="4.5978%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="4.4283%" y="725" width="0.0805%" height="15" fill="rgb(240,127,35)" fg:x="55" fg:w="1"/><text x="4.6783%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.4283%" y="709" width="0.0805%" height="15" fill="rgb(248,196,34)" fg:x="55" fg:w="1"/><text x="4.6783%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.4283%" y="693" width="0.0805%" height="15" fill="rgb(236,137,7)" fg:x="55" fg:w="1"/><text x="4.6783%" y="703.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="4.4283%" y="677" width="0.0805%" height="15" fill="rgb(235,127,16)" fg:x="55" fg:w="1"/><text x="4.6783%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4283%" y="661" width="0.0805%" height="15" fill="rgb(250,192,54)" fg:x="55" fg:w="1"/><text x="4.6783%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4283%" y="645" width="0.0805%" height="15" fill="rgb(218,98,20)" fg:x="55" fg:w="1"/><text x="4.6783%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.4283%" y="629" width="0.0805%" height="15" fill="rgb(230,176,47)" fg:x="55" fg:w="1"/><text x="4.6783%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.4283%" y="613" width="0.0805%" height="15" fill="rgb(244,2,33)" fg:x="55" fg:w="1"/><text x="4.6783%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.4283%" y="597" width="0.0805%" height="15" fill="rgb(231,100,17)" fg:x="55" fg:w="1"/><text x="4.6783%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4283%" y="581" width="0.0805%" height="15" fill="rgb(245,23,12)" fg:x="55" fg:w="1"/><text x="4.6783%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4283%" y="565" width="0.0805%" height="15" fill="rgb(249,55,22)" fg:x="55" fg:w="1"/><text x="4.6783%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.4283%" y="549" width="0.0805%" height="15" fill="rgb(207,134,9)" fg:x="55" fg:w="1"/><text x="4.6783%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.4283%" y="533" width="0.0805%" height="15" fill="rgb(218,134,0)" fg:x="55" fg:w="1"/><text x="4.6783%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.4283%" y="517" width="0.0805%" height="15" fill="rgb(213,212,33)" fg:x="55" fg:w="1"/><text x="4.6783%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.4283%" y="501" width="0.0805%" height="15" fill="rgb(252,106,18)" fg:x="55" fg:w="1"/><text x="4.6783%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="4.4283%" y="485" width="0.0805%" height="15" fill="rgb(208,126,42)" fg:x="55" fg:w="1"/><text x="4.6783%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="4.4283%" y="469" width="0.0805%" height="15" fill="rgb(246,175,29)" fg:x="55" fg:w="1"/><text x="4.6783%" y="479.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.5089%" y="645" width="0.0805%" height="15" fill="rgb(215,13,50)" fg:x="56" fg:w="1"/><text x="4.7589%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5089%" y="629" width="0.0805%" height="15" fill="rgb(216,172,15)" fg:x="56" fg:w="1"/><text x="4.7589%" y="639.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="4.5089%" y="725" width="0.1610%" height="15" fill="rgb(212,103,13)" fg:x="56" fg:w="2"/><text x="4.7589%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.5089%" y="709" width="0.1610%" height="15" fill="rgb(231,171,36)" fg:x="56" fg:w="2"/><text x="4.7589%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.5089%" y="693" width="0.1610%" height="15" fill="rgb(250,123,20)" fg:x="56" fg:w="2"/><text x="4.7589%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.5089%" y="677" width="0.1610%" height="15" fill="rgb(212,53,50)" fg:x="56" fg:w="2"/><text x="4.7589%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="4.5089%" y="661" width="0.1610%" height="15" fill="rgb(243,54,12)" fg:x="56" fg:w="2"/><text x="4.7589%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.5894%" y="645" width="0.0805%" height="15" fill="rgb(234,101,34)" fg:x="57" fg:w="1"/><text x="4.8394%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.5894%" y="629" width="0.0805%" height="15" fill="rgb(254,67,22)" fg:x="57" fg:w="1"/><text x="4.8394%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5894%" y="613" width="0.0805%" height="15" fill="rgb(250,35,47)" fg:x="57" fg:w="1"/><text x="4.8394%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5894%" y="597" width="0.0805%" height="15" fill="rgb(226,126,38)" fg:x="57" fg:w="1"/><text x="4.8394%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5894%" y="581" width="0.0805%" height="15" fill="rgb(216,138,53)" fg:x="57" fg:w="1"/><text x="4.8394%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5894%" y="565" width="0.0805%" height="15" fill="rgb(246,199,43)" fg:x="57" fg:w="1"/><text x="4.8394%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.5894%" y="549" width="0.0805%" height="15" fill="rgb(232,125,11)" fg:x="57" fg:w="1"/><text x="4.8394%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.5894%" y="533" width="0.0805%" height="15" fill="rgb(218,219,45)" fg:x="57" fg:w="1"/><text x="4.8394%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.5894%" y="517" width="0.0805%" height="15" fill="rgb(216,102,54)" fg:x="57" fg:w="1"/><text x="4.8394%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.5894%" y="501" width="0.0805%" height="15" fill="rgb(250,228,7)" fg:x="57" fg:w="1"/><text x="4.8394%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.5894%" y="485" width="0.0805%" height="15" fill="rgb(226,125,25)" fg:x="57" fg:w="1"/><text x="4.8394%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.5894%" y="469" width="0.0805%" height="15" fill="rgb(224,165,27)" fg:x="57" fg:w="1"/><text x="4.8394%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.5894%" y="453" width="0.0805%" height="15" fill="rgb(233,86,3)" fg:x="57" fg:w="1"/><text x="4.8394%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.5894%" y="437" width="0.0805%" height="15" fill="rgb(228,116,20)" fg:x="57" fg:w="1"/><text x="4.8394%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.5894%" y="421" width="0.0805%" height="15" fill="rgb(209,192,17)" fg:x="57" fg:w="1"/><text x="4.8394%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.5894%" y="405" width="0.0805%" height="15" fill="rgb(224,88,34)" fg:x="57" fg:w="1"/><text x="4.8394%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.5894%" y="389" width="0.0805%" height="15" fill="rgb(233,38,6)" fg:x="57" fg:w="1"/><text x="4.8394%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5894%" y="373" width="0.0805%" height="15" fill="rgb(212,59,30)" fg:x="57" fg:w="1"/><text x="4.8394%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="4.6699%" y="613" width="0.0805%" height="15" fill="rgb(213,80,3)" fg:x="58" fg:w="1"/><text x="4.9199%" y="623.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="4.6699%" y="725" width="0.1610%" height="15" fill="rgb(251,178,7)" fg:x="58" fg:w="2"/><text x="4.9199%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="4.6699%" y="709" width="0.1610%" height="15" fill="rgb(213,154,26)" fg:x="58" fg:w="2"/><text x="4.9199%" y="719.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="4.6699%" y="693" width="0.1610%" height="15" fill="rgb(238,165,49)" fg:x="58" fg:w="2"/><text x="4.9199%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="4.6699%" y="677" width="0.1610%" height="15" fill="rgb(248,91,46)" fg:x="58" fg:w="2"/><text x="4.9199%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (2 samples, 0.16%)</title><rect x="4.6699%" y="661" width="0.1610%" height="15" fill="rgb(244,21,52)" fg:x="58" fg:w="2"/><text x="4.9199%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="4.6699%" y="645" width="0.1610%" height="15" fill="rgb(247,122,20)" fg:x="58" fg:w="2"/><text x="4.9199%" y="655.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="4.6699%" y="629" width="0.1610%" height="15" fill="rgb(218,27,9)" fg:x="58" fg:w="2"/><text x="4.9199%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.7504%" y="613" width="0.0805%" height="15" fill="rgb(246,7,6)" fg:x="59" fg:w="1"/><text x="5.0004%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="4.7504%" y="597" width="0.0805%" height="15" fill="rgb(227,135,54)" fg:x="59" fg:w="1"/><text x="5.0004%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="4.7504%" y="581" width="0.0805%" height="15" fill="rgb(247,14,11)" fg:x="59" fg:w="1"/><text x="5.0004%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.48%)</title><rect x="4.4283%" y="773" width="0.4831%" height="15" fill="rgb(206,149,34)" fg:x="55" fg:w="6"/><text x="4.6783%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="4.4283%" y="757" width="0.4831%" height="15" fill="rgb(227,228,4)" fg:x="55" fg:w="6"/><text x="4.6783%" y="767.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="4.4283%" y="741" width="0.4831%" height="15" fill="rgb(238,218,28)" fg:x="55" fg:w="6"/><text x="4.6783%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="4.8309%" y="725" width="0.0805%" height="15" fill="rgb(252,86,40)" fg:x="60" fg:w="1"/><text x="5.0809%" y="735.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8309%" y="709" width="0.0805%" height="15" fill="rgb(251,225,11)" fg:x="60" fg:w="1"/><text x="5.0809%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="4.9114%" y="773" width="0.0805%" height="15" fill="rgb(206,46,49)" fg:x="61" fg:w="1"/><text x="5.1614%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9114%" y="757" width="0.0805%" height="15" fill="rgb(245,128,24)" fg:x="61" fg:w="1"/><text x="5.1614%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.9919%" y="741" width="0.0805%" height="15" fill="rgb(219,177,34)" fg:x="62" fg:w="1"/><text x="5.2419%" y="751.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0725%" y="741" width="0.0805%" height="15" fill="rgb(218,60,48)" fg:x="63" fg:w="1"/><text x="5.3225%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.0725%" y="725" width="0.0805%" height="15" fill="rgb(221,11,5)" fg:x="63" fg:w="1"/><text x="5.3225%" y="735.50"></text></g><g><title>engine::session::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="5.0725%" y="709" width="0.0805%" height="15" fill="rgb(220,148,13)" fg:x="63" fg:w="1"/><text x="5.3225%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="5.0725%" y="693" width="0.0805%" height="15" fill="rgb(210,16,3)" fg:x="63" fg:w="1"/><text x="5.3225%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.1530%" y="629" width="0.0805%" height="15" fill="rgb(236,80,2)" fg:x="64" fg:w="1"/><text x="5.4030%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.1530%" y="693" width="0.1610%" height="15" fill="rgb(239,129,19)" fg:x="64" fg:w="2"/><text x="5.4030%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.1530%" y="677" width="0.1610%" height="15" fill="rgb(220,106,35)" fg:x="64" fg:w="2"/><text x="5.4030%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.1530%" y="661" width="0.1610%" height="15" fill="rgb(252,139,45)" fg:x="64" fg:w="2"/><text x="5.4030%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.1530%" y="645" width="0.1610%" height="15" fill="rgb(229,8,36)" fg:x="64" fg:w="2"/><text x="5.4030%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.2335%" y="629" width="0.0805%" height="15" fill="rgb(230,126,33)" fg:x="65" fg:w="1"/><text x="5.4835%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.3140%" y="677" width="0.0805%" height="15" fill="rgb(239,140,21)" fg:x="66" fg:w="1"/><text x="5.5640%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3140%" y="661" width="0.0805%" height="15" fill="rgb(254,104,9)" fg:x="66" fg:w="1"/><text x="5.5640%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.4750%" y="661" width="0.0805%" height="15" fill="rgb(239,52,14)" fg:x="68" fg:w="1"/><text x="5.7250%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.5556%" y="661" width="0.0805%" height="15" fill="rgb(208,227,44)" fg:x="69" fg:w="1"/><text x="5.8056%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5556%" y="645" width="0.0805%" height="15" fill="rgb(246,18,19)" fg:x="69" fg:w="1"/><text x="5.8056%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.5556%" y="629" width="0.0805%" height="15" fill="rgb(235,228,25)" fg:x="69" fg:w="1"/><text x="5.8056%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5556%" y="613" width="0.0805%" height="15" fill="rgb(240,156,20)" fg:x="69" fg:w="1"/><text x="5.8056%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5556%" y="597" width="0.0805%" height="15" fill="rgb(224,8,20)" fg:x="69" fg:w="1"/><text x="5.8056%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.5556%" y="581" width="0.0805%" height="15" fill="rgb(214,12,52)" fg:x="69" fg:w="1"/><text x="5.8056%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.6361%" y="661" width="0.0805%" height="15" fill="rgb(211,220,47)" fg:x="70" fg:w="1"/><text x="5.8861%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.7166%" y="645" width="0.0805%" height="15" fill="rgb(250,173,5)" fg:x="71" fg:w="1"/><text x="5.9666%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7166%" y="629" width="0.0805%" height="15" fill="rgb(250,125,52)" fg:x="71" fg:w="1"/><text x="5.9666%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7166%" y="613" width="0.0805%" height="15" fill="rgb(209,133,18)" fg:x="71" fg:w="1"/><text x="5.9666%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7166%" y="597" width="0.0805%" height="15" fill="rgb(216,173,22)" fg:x="71" fg:w="1"/><text x="5.9666%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.7971%" y="629" width="0.0805%" height="15" fill="rgb(205,3,22)" fg:x="72" fg:w="1"/><text x="6.0471%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8776%" y="613" width="0.0805%" height="15" fill="rgb(248,22,20)" fg:x="73" fg:w="1"/><text x="6.1276%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="5.3945%" y="677" width="0.7246%" height="15" fill="rgb(233,6,29)" fg:x="67" fg:w="9"/><text x="5.6445%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="5.7166%" y="661" width="0.4026%" height="15" fill="rgb(240,22,54)" fg:x="71" fg:w="5"/><text x="5.9666%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.7971%" y="645" width="0.3221%" height="15" fill="rgb(231,133,32)" fg:x="72" fg:w="4"/><text x="6.0471%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.8776%" y="629" width="0.2415%" height="15" fill="rgb(248,193,4)" fg:x="73" fg:w="3"/><text x="6.1276%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.9581%" y="613" width="0.1610%" height="15" fill="rgb(211,178,46)" fg:x="74" fg:w="2"/><text x="6.2081%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.0386%" y="597" width="0.0805%" height="15" fill="rgb(224,5,42)" fg:x="75" fg:w="1"/><text x="6.2886%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.0386%" y="581" width="0.0805%" height="15" fill="rgb(239,176,25)" fg:x="75" fg:w="1"/><text x="6.2886%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.13%)</title><rect x="5.1530%" y="709" width="1.1272%" height="15" fill="rgb(245,187,50)" fg:x="64" fg:w="14"/><text x="5.4030%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="5.3140%" y="693" width="0.9662%" height="15" fill="rgb(248,24,15)" fg:x="66" fg:w="12"/><text x="5.5640%" y="703.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.1192%" y="677" width="0.1610%" height="15" fill="rgb(205,166,13)" fg:x="76" fg:w="2"/><text x="6.3692%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.1192%" y="661" width="0.1610%" height="15" fill="rgb(208,114,23)" fg:x="76" fg:w="2"/><text x="6.3692%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.1192%" y="645" width="0.1610%" height="15" fill="rgb(239,127,18)" fg:x="76" fg:w="2"/><text x="6.3692%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.1192%" y="629" width="0.1610%" height="15" fill="rgb(219,154,28)" fg:x="76" fg:w="2"/><text x="6.3692%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.1192%" y="613" width="0.1610%" height="15" fill="rgb(225,157,23)" fg:x="76" fg:w="2"/><text x="6.3692%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.1997%" y="597" width="0.0805%" height="15" fill="rgb(219,8,6)" fg:x="77" fg:w="1"/><text x="6.4497%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.2802%" y="597" width="0.0805%" height="15" fill="rgb(212,47,6)" fg:x="78" fg:w="1"/><text x="6.5302%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.2802%" y="709" width="0.1610%" height="15" fill="rgb(224,190,4)" fg:x="78" fg:w="2"/><text x="6.5302%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="6.2802%" y="693" width="0.1610%" height="15" fill="rgb(239,183,29)" fg:x="78" fg:w="2"/><text x="6.5302%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.2802%" y="677" width="0.1610%" height="15" fill="rgb(213,57,7)" fg:x="78" fg:w="2"/><text x="6.5302%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.2802%" y="661" width="0.1610%" height="15" fill="rgb(216,148,1)" fg:x="78" fg:w="2"/><text x="6.5302%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.2802%" y="645" width="0.1610%" height="15" fill="rgb(236,182,29)" fg:x="78" fg:w="2"/><text x="6.5302%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.2802%" y="629" width="0.1610%" height="15" fill="rgb(244,120,48)" fg:x="78" fg:w="2"/><text x="6.5302%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.2802%" y="613" width="0.1610%" height="15" fill="rgb(206,71,34)" fg:x="78" fg:w="2"/><text x="6.5302%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.3607%" y="597" width="0.0805%" height="15" fill="rgb(242,32,6)" fg:x="79" fg:w="1"/><text x="6.6107%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="6.5217%" y="661" width="0.1610%" height="15" fill="rgb(241,35,3)" fg:x="81" fg:w="2"/><text x="6.7717%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.5217%" y="645" width="0.1610%" height="15" fill="rgb(222,62,19)" fg:x="81" fg:w="2"/><text x="6.7717%" y="655.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.5217%" y="629" width="0.1610%" height="15" fill="rgb(223,110,41)" fg:x="81" fg:w="2"/><text x="6.7717%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.6828%" y="581" width="0.1610%" height="15" fill="rgb(208,224,4)" fg:x="83" fg:w="2"/><text x="6.9328%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7633%" y="565" width="0.0805%" height="15" fill="rgb(241,137,19)" fg:x="84" fg:w="1"/><text x="7.0133%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.7633%" y="549" width="0.0805%" height="15" fill="rgb(244,24,17)" fg:x="84" fg:w="1"/><text x="7.0133%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="6.6828%" y="597" width="0.2415%" height="15" fill="rgb(245,178,49)" fg:x="83" fg:w="3"/><text x="6.9328%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8438%" y="581" width="0.0805%" height="15" fill="rgb(219,160,38)" fg:x="85" fg:w="1"/><text x="7.0938%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.8438%" y="565" width="0.0805%" height="15" fill="rgb(228,137,14)" fg:x="85" fg:w="1"/><text x="7.0938%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8438%" y="549" width="0.0805%" height="15" fill="rgb(237,134,11)" fg:x="85" fg:w="1"/><text x="7.0938%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="6.8438%" y="533" width="0.0805%" height="15" fill="rgb(211,126,44)" fg:x="85" fg:w="1"/><text x="7.0938%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="6.6828%" y="645" width="0.3221%" height="15" fill="rgb(226,171,33)" fg:x="83" fg:w="4"/><text x="6.9328%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="6.6828%" y="629" width="0.3221%" height="15" fill="rgb(253,99,13)" fg:x="83" fg:w="4"/><text x="6.9328%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="6.6828%" y="613" width="0.3221%" height="15" fill="rgb(244,48,7)" fg:x="83" fg:w="4"/><text x="6.9328%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9243%" y="597" width="0.0805%" height="15" fill="rgb(244,217,54)" fg:x="86" fg:w="1"/><text x="7.1743%" y="607.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.09%)</title><rect x="4.9919%" y="773" width="2.0934%" height="15" fill="rgb(224,15,18)" fg:x="62" fg:w="26"/><text x="5.2419%" y="783.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (26 samples, 2.09%)</title><rect x="4.9919%" y="757" width="2.0934%" height="15" fill="rgb(244,99,12)" fg:x="62" fg:w="26"/><text x="5.2419%" y="767.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (24 samples, 1.93%)</title><rect x="5.1530%" y="741" width="1.9324%" height="15" fill="rgb(233,226,8)" fg:x="64" fg:w="24"/><text x="5.4030%" y="751.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (24 samples, 1.93%)</title><rect x="5.1530%" y="725" width="1.9324%" height="15" fill="rgb(229,211,3)" fg:x="64" fg:w="24"/><text x="5.4030%" y="735.50">e..</text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="6.4412%" y="709" width="0.6441%" height="15" fill="rgb(216,140,21)" fg:x="80" fg:w="8"/><text x="6.6912%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="6.5217%" y="693" width="0.5636%" height="15" fill="rgb(234,122,30)" fg:x="81" fg:w="7"/><text x="6.7717%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="6.5217%" y="677" width="0.5636%" height="15" fill="rgb(236,25,46)" fg:x="81" fg:w="7"/><text x="6.7717%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="6.6828%" y="661" width="0.4026%" height="15" fill="rgb(217,52,54)" fg:x="83" fg:w="5"/><text x="6.9328%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0048%" y="645" width="0.0805%" height="15" fill="rgb(222,29,26)" fg:x="87" fg:w="1"/><text x="7.2548%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0048%" y="629" width="0.0805%" height="15" fill="rgb(216,177,29)" fg:x="87" fg:w="1"/><text x="7.2548%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0048%" y="613" width="0.0805%" height="15" fill="rgb(247,136,51)" fg:x="87" fg:w="1"/><text x="7.2548%" y="623.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.0853%" y="725" width="0.0805%" height="15" fill="rgb(231,47,47)" fg:x="88" fg:w="1"/><text x="7.3353%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.0853%" y="709" width="0.0805%" height="15" fill="rgb(211,192,36)" fg:x="88" fg:w="1"/><text x="7.3353%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.0853%" y="693" width="0.0805%" height="15" fill="rgb(229,156,32)" fg:x="88" fg:w="1"/><text x="7.3353%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.0853%" y="677" width="0.0805%" height="15" fill="rgb(248,213,20)" fg:x="88" fg:w="1"/><text x="7.3353%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0853%" y="661" width="0.0805%" height="15" fill="rgb(217,64,7)" fg:x="88" fg:w="1"/><text x="7.3353%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0853%" y="645" width="0.0805%" height="15" fill="rgb(232,142,8)" fg:x="88" fg:w="1"/><text x="7.3353%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="7.0853%" y="629" width="0.0805%" height="15" fill="rgb(224,92,44)" fg:x="88" fg:w="1"/><text x="7.3353%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.0853%" y="613" width="0.0805%" height="15" fill="rgb(214,169,17)" fg:x="88" fg:w="1"/><text x="7.3353%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.0853%" y="597" width="0.0805%" height="15" fill="rgb(210,59,37)" fg:x="88" fg:w="1"/><text x="7.3353%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0853%" y="581" width="0.0805%" height="15" fill="rgb(214,116,48)" fg:x="88" fg:w="1"/><text x="7.3353%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0853%" y="565" width="0.0805%" height="15" fill="rgb(244,191,6)" fg:x="88" fg:w="1"/><text x="7.3353%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.0853%" y="757" width="0.2415%" height="15" fill="rgb(241,50,52)" fg:x="88" fg:w="3"/><text x="7.3353%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="7.0853%" y="741" width="0.2415%" height="15" fill="rgb(236,75,39)" fg:x="88" fg:w="3"/><text x="7.3353%" y="751.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="7.1659%" y="725" width="0.1610%" height="15" fill="rgb(236,99,0)" fg:x="89" fg:w="2"/><text x="7.4159%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.1659%" y="709" width="0.1610%" height="15" fill="rgb(207,202,15)" fg:x="89" fg:w="2"/><text x="7.4159%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.1659%" y="693" width="0.1610%" height="15" fill="rgb(233,207,14)" fg:x="89" fg:w="2"/><text x="7.4159%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="7.1659%" y="677" width="0.1610%" height="15" fill="rgb(226,27,51)" fg:x="89" fg:w="2"/><text x="7.4159%" y="687.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="7.1659%" y="661" width="0.1610%" height="15" fill="rgb(206,104,42)" fg:x="89" fg:w="2"/><text x="7.4159%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="7.3269%" y="741" width="0.1610%" height="15" fill="rgb(212,225,4)" fg:x="91" fg:w="2"/><text x="7.5769%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="7.3269%" y="725" width="0.1610%" height="15" fill="rgb(233,96,42)" fg:x="91" fg:w="2"/><text x="7.5769%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.3269%" y="709" width="0.1610%" height="15" fill="rgb(229,21,32)" fg:x="91" fg:w="2"/><text x="7.5769%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.3269%" y="693" width="0.1610%" height="15" fill="rgb(226,216,24)" fg:x="91" fg:w="2"/><text x="7.5769%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.3269%" y="677" width="0.1610%" height="15" fill="rgb(221,163,17)" fg:x="91" fg:w="2"/><text x="7.5769%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4074%" y="661" width="0.0805%" height="15" fill="rgb(216,216,42)" fg:x="92" fg:w="1"/><text x="7.6574%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4074%" y="645" width="0.0805%" height="15" fill="rgb(240,118,7)" fg:x="92" fg:w="1"/><text x="7.6574%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4074%" y="629" width="0.0805%" height="15" fill="rgb(221,67,37)" fg:x="92" fg:w="1"/><text x="7.6574%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4074%" y="613" width="0.0805%" height="15" fill="rgb(241,32,44)" fg:x="92" fg:w="1"/><text x="7.6574%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.4074%" y="597" width="0.0805%" height="15" fill="rgb(235,204,43)" fg:x="92" fg:w="1"/><text x="7.6574%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4879%" y="725" width="0.0805%" height="15" fill="rgb(213,116,10)" fg:x="93" fg:w="1"/><text x="7.7379%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.4879%" y="709" width="0.0805%" height="15" fill="rgb(239,15,48)" fg:x="93" fg:w="1"/><text x="7.7379%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="7.4879%" y="741" width="0.1610%" height="15" fill="rgb(207,123,36)" fg:x="93" fg:w="2"/><text x="7.7379%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5684%" y="725" width="0.0805%" height="15" fill="rgb(209,103,30)" fg:x="94" fg:w="1"/><text x="7.8184%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.5684%" y="709" width="0.0805%" height="15" fill="rgb(238,100,19)" fg:x="94" fg:w="1"/><text x="7.8184%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.5684%" y="693" width="0.0805%" height="15" fill="rgb(244,30,14)" fg:x="94" fg:w="1"/><text x="7.8184%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5684%" y="677" width="0.0805%" height="15" fill="rgb(249,174,6)" fg:x="94" fg:w="1"/><text x="7.8184%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6490%" y="645" width="0.0805%" height="15" fill="rgb(235,213,41)" fg:x="95" fg:w="1"/><text x="7.8990%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6490%" y="629" width="0.0805%" height="15" fill="rgb(213,118,6)" fg:x="95" fg:w="1"/><text x="7.8990%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6490%" y="613" width="0.0805%" height="15" fill="rgb(235,44,51)" fg:x="95" fg:w="1"/><text x="7.8990%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6490%" y="597" width="0.0805%" height="15" fill="rgb(217,9,53)" fg:x="95" fg:w="1"/><text x="7.8990%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6490%" y="581" width="0.0805%" height="15" fill="rgb(237,172,34)" fg:x="95" fg:w="1"/><text x="7.8990%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6490%" y="565" width="0.0805%" height="15" fill="rgb(206,206,11)" fg:x="95" fg:w="1"/><text x="7.8990%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.6490%" y="693" width="0.1610%" height="15" fill="rgb(214,149,29)" fg:x="95" fg:w="2"/><text x="7.8990%" y="703.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.6490%" y="677" width="0.1610%" height="15" fill="rgb(208,123,3)" fg:x="95" fg:w="2"/><text x="7.8990%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.6490%" y="661" width="0.1610%" height="15" fill="rgb(229,126,4)" fg:x="95" fg:w="2"/><text x="7.8990%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.7295%" y="645" width="0.0805%" height="15" fill="rgb(222,92,36)" fg:x="96" fg:w="1"/><text x="7.9795%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7295%" y="629" width="0.0805%" height="15" fill="rgb(216,39,41)" fg:x="96" fg:w="1"/><text x="7.9795%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.8905%" y="549" width="0.0805%" height="15" fill="rgb(253,127,28)" fg:x="98" fg:w="1"/><text x="8.1405%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.8905%" y="533" width="0.0805%" height="15" fill="rgb(249,152,51)" fg:x="98" fg:w="1"/><text x="8.1405%" y="543.50"></text></g><g><title>plugins_core::build::Build::holding (12 samples, 0.97%)</title><rect x="7.0853%" y="773" width="0.9662%" height="15" fill="rgb(209,123,42)" fg:x="88" fg:w="12"/><text x="7.3353%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.72%)</title><rect x="7.3269%" y="757" width="0.7246%" height="15" fill="rgb(241,118,22)" fg:x="91" fg:w="9"/><text x="7.5769%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="7.6490%" y="741" width="0.4026%" height="15" fill="rgb(208,25,7)" fg:x="95" fg:w="5"/><text x="7.8990%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (5 samples, 0.40%)</title><rect x="7.6490%" y="725" width="0.4026%" height="15" fill="rgb(243,144,39)" fg:x="95" fg:w="5"/><text x="7.8990%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.40%)</title><rect x="7.6490%" y="709" width="0.4026%" height="15" fill="rgb(250,50,5)" fg:x="95" fg:w="5"/><text x="7.8990%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="7.8100%" y="693" width="0.2415%" height="15" fill="rgb(207,67,11)" fg:x="97" fg:w="3"/><text x="8.0600%" y="703.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="7.8100%" y="677" width="0.2415%" height="15" fill="rgb(245,204,40)" fg:x="97" fg:w="3"/><text x="8.0600%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="7.8100%" y="661" width="0.2415%" height="15" fill="rgb(238,228,24)" fg:x="97" fg:w="3"/><text x="8.0600%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="7.8100%" y="645" width="0.2415%" height="15" fill="rgb(217,116,22)" fg:x="97" fg:w="3"/><text x="8.0600%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="7.8100%" y="629" width="0.2415%" height="15" fill="rgb(234,98,12)" fg:x="97" fg:w="3"/><text x="8.0600%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="7.8100%" y="613" width="0.2415%" height="15" fill="rgb(242,170,50)" fg:x="97" fg:w="3"/><text x="8.0600%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="7.8100%" y="597" width="0.2415%" height="15" fill="rgb(235,7,5)" fg:x="97" fg:w="3"/><text x="8.0600%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="7.8100%" y="581" width="0.2415%" height="15" fill="rgb(241,114,28)" fg:x="97" fg:w="3"/><text x="8.0600%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="7.8100%" y="565" width="0.2415%" height="15" fill="rgb(246,112,42)" fg:x="97" fg:w="3"/><text x="8.0600%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.9710%" y="549" width="0.0805%" height="15" fill="rgb(248,228,14)" fg:x="99" fg:w="1"/><text x="8.2210%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9710%" y="533" width="0.0805%" height="15" fill="rgb(208,133,18)" fg:x="99" fg:w="1"/><text x="8.2210%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.9710%" y="517" width="0.0805%" height="15" fill="rgb(207,35,49)" fg:x="99" fg:w="1"/><text x="8.2210%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="8.0515%" y="773" width="0.0805%" height="15" fill="rgb(205,68,36)" fg:x="100" fg:w="1"/><text x="8.3015%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="8.0515%" y="757" width="0.0805%" height="15" fill="rgb(245,62,40)" fg:x="100" fg:w="1"/><text x="8.3015%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.0515%" y="741" width="0.0805%" height="15" fill="rgb(228,27,24)" fg:x="100" fg:w="1"/><text x="8.3015%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.0515%" y="725" width="0.0805%" height="15" fill="rgb(253,19,12)" fg:x="100" fg:w="1"/><text x="8.3015%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.0515%" y="709" width="0.0805%" height="15" fill="rgb(232,28,20)" fg:x="100" fg:w="1"/><text x="8.3015%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0515%" y="693" width="0.0805%" height="15" fill="rgb(218,35,51)" fg:x="100" fg:w="1"/><text x="8.3015%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.1320%" y="709" width="0.0805%" height="15" fill="rgb(212,90,40)" fg:x="101" fg:w="1"/><text x="8.3820%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.1320%" y="693" width="0.0805%" height="15" fill="rgb(220,172,12)" fg:x="101" fg:w="1"/><text x="8.3820%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.1320%" y="677" width="0.0805%" height="15" fill="rgb(226,159,20)" fg:x="101" fg:w="1"/><text x="8.3820%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.1320%" y="661" width="0.0805%" height="15" fill="rgb(234,205,16)" fg:x="101" fg:w="1"/><text x="8.3820%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1320%" y="645" width="0.0805%" height="15" fill="rgb(207,9,39)" fg:x="101" fg:w="1"/><text x="8.3820%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.1320%" y="629" width="0.0805%" height="15" fill="rgb(249,143,15)" fg:x="101" fg:w="1"/><text x="8.3820%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1320%" y="613" width="0.0805%" height="15" fill="rgb(253,133,29)" fg:x="101" fg:w="1"/><text x="8.3820%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.1320%" y="597" width="0.0805%" height="15" fill="rgb(221,187,0)" fg:x="101" fg:w="1"/><text x="8.3820%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1320%" y="581" width="0.0805%" height="15" fill="rgb(205,204,26)" fg:x="101" fg:w="1"/><text x="8.3820%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.1320%" y="565" width="0.0805%" height="15" fill="rgb(224,68,54)" fg:x="101" fg:w="1"/><text x="8.3820%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1320%" y="549" width="0.0805%" height="15" fill="rgb(209,67,4)" fg:x="101" fg:w="1"/><text x="8.3820%" y="559.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="8.1320%" y="533" width="0.0805%" height="15" fill="rgb(228,229,18)" fg:x="101" fg:w="1"/><text x="8.3820%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.1320%" y="757" width="0.1610%" height="15" fill="rgb(231,89,13)" fg:x="101" fg:w="2"/><text x="8.3820%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="8.1320%" y="741" width="0.1610%" height="15" fill="rgb(210,182,18)" fg:x="101" fg:w="2"/><text x="8.3820%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.1320%" y="725" width="0.1610%" height="15" fill="rgb(240,105,2)" fg:x="101" fg:w="2"/><text x="8.3820%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.2126%" y="709" width="0.0805%" height="15" fill="rgb(207,170,50)" fg:x="102" fg:w="1"/><text x="8.4626%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.2126%" y="693" width="0.0805%" height="15" fill="rgb(232,133,24)" fg:x="102" fg:w="1"/><text x="8.4626%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.2126%" y="677" width="0.0805%" height="15" fill="rgb(235,166,27)" fg:x="102" fg:w="1"/><text x="8.4626%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2126%" y="661" width="0.0805%" height="15" fill="rgb(209,19,13)" fg:x="102" fg:w="1"/><text x="8.4626%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2126%" y="645" width="0.0805%" height="15" fill="rgb(226,79,39)" fg:x="102" fg:w="1"/><text x="8.4626%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="8.2126%" y="629" width="0.0805%" height="15" fill="rgb(222,163,10)" fg:x="102" fg:w="1"/><text x="8.4626%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.2126%" y="613" width="0.0805%" height="15" fill="rgb(214,44,19)" fg:x="102" fg:w="1"/><text x="8.4626%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.2126%" y="597" width="0.0805%" height="15" fill="rgb(210,217,13)" fg:x="102" fg:w="1"/><text x="8.4626%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2126%" y="581" width="0.0805%" height="15" fill="rgb(237,61,54)" fg:x="102" fg:w="1"/><text x="8.4626%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.2126%" y="565" width="0.0805%" height="15" fill="rgb(226,184,24)" fg:x="102" fg:w="1"/><text x="8.4626%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2931%" y="645" width="0.0805%" height="15" fill="rgb(223,226,4)" fg:x="103" fg:w="1"/><text x="8.5431%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2931%" y="629" width="0.0805%" height="15" fill="rgb(210,26,41)" fg:x="103" fg:w="1"/><text x="8.5431%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2931%" y="613" width="0.0805%" height="15" fill="rgb(220,221,6)" fg:x="103" fg:w="1"/><text x="8.5431%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2931%" y="597" width="0.0805%" height="15" fill="rgb(225,89,49)" fg:x="103" fg:w="1"/><text x="8.5431%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2931%" y="581" width="0.0805%" height="15" fill="rgb(218,70,45)" fg:x="103" fg:w="1"/><text x="8.5431%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.2931%" y="565" width="0.0805%" height="15" fill="rgb(238,166,21)" fg:x="103" fg:w="1"/><text x="8.5431%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.2931%" y="549" width="0.0805%" height="15" fill="rgb(224,141,44)" fg:x="103" fg:w="1"/><text x="8.5431%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.2931%" y="533" width="0.0805%" height="15" fill="rgb(230,12,49)" fg:x="103" fg:w="1"/><text x="8.5431%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.2931%" y="517" width="0.0805%" height="15" fill="rgb(212,174,12)" fg:x="103" fg:w="1"/><text x="8.5431%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.2931%" y="501" width="0.0805%" height="15" fill="rgb(246,67,9)" fg:x="103" fg:w="1"/><text x="8.5431%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.2931%" y="485" width="0.0805%" height="15" fill="rgb(239,35,23)" fg:x="103" fg:w="1"/><text x="8.5431%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.2931%" y="469" width="0.0805%" height="15" fill="rgb(211,167,0)" fg:x="103" fg:w="1"/><text x="8.5431%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.2931%" y="453" width="0.0805%" height="15" fill="rgb(225,119,45)" fg:x="103" fg:w="1"/><text x="8.5431%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.2931%" y="437" width="0.0805%" height="15" fill="rgb(210,162,6)" fg:x="103" fg:w="1"/><text x="8.5431%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2931%" y="421" width="0.0805%" height="15" fill="rgb(208,118,35)" fg:x="103" fg:w="1"/><text x="8.5431%" y="431.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="8.2931%" y="741" width="0.1610%" height="15" fill="rgb(239,4,53)" fg:x="103" fg:w="2"/><text x="8.5431%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="8.2931%" y="725" width="0.1610%" height="15" fill="rgb(213,130,21)" fg:x="103" fg:w="2"/><text x="8.5431%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.2931%" y="709" width="0.1610%" height="15" fill="rgb(235,148,0)" fg:x="103" fg:w="2"/><text x="8.5431%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.2931%" y="693" width="0.1610%" height="15" fill="rgb(244,224,18)" fg:x="103" fg:w="2"/><text x="8.5431%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.2931%" y="677" width="0.1610%" height="15" fill="rgb(211,214,4)" fg:x="103" fg:w="2"/><text x="8.5431%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.2931%" y="661" width="0.1610%" height="15" fill="rgb(206,119,25)" fg:x="103" fg:w="2"/><text x="8.5431%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3736%" y="645" width="0.0805%" height="15" fill="rgb(243,93,47)" fg:x="104" fg:w="1"/><text x="8.6236%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.4541%" y="693" width="0.0805%" height="15" fill="rgb(224,194,6)" fg:x="105" fg:w="1"/><text x="8.7041%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.4541%" y="677" width="0.0805%" height="15" fill="rgb(243,229,6)" fg:x="105" fg:w="1"/><text x="8.7041%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.4541%" y="661" width="0.0805%" height="15" fill="rgb(207,23,50)" fg:x="105" fg:w="1"/><text x="8.7041%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.4541%" y="645" width="0.0805%" height="15" fill="rgb(253,192,32)" fg:x="105" fg:w="1"/><text x="8.7041%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4541%" y="629" width="0.0805%" height="15" fill="rgb(213,21,6)" fg:x="105" fg:w="1"/><text x="8.7041%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.4541%" y="613" width="0.0805%" height="15" fill="rgb(243,151,13)" fg:x="105" fg:w="1"/><text x="8.7041%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4541%" y="597" width="0.0805%" height="15" fill="rgb(233,165,41)" fg:x="105" fg:w="1"/><text x="8.7041%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.4541%" y="581" width="0.0805%" height="15" fill="rgb(246,176,45)" fg:x="105" fg:w="1"/><text x="8.7041%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4541%" y="565" width="0.0805%" height="15" fill="rgb(217,170,52)" fg:x="105" fg:w="1"/><text x="8.7041%" y="575.50"></text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.48%)</title><rect x="8.1320%" y="773" width="0.4831%" height="15" fill="rgb(214,203,54)" fg:x="101" fg:w="6"/><text x="8.3820%" y="783.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="8.2931%" y="757" width="0.3221%" height="15" fill="rgb(248,215,49)" fg:x="103" fg:w="4"/><text x="8.5431%" y="767.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="8.4541%" y="741" width="0.1610%" height="15" fill="rgb(208,46,10)" fg:x="105" fg:w="2"/><text x="8.7041%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="8.4541%" y="725" width="0.1610%" height="15" fill="rgb(254,5,31)" fg:x="105" fg:w="2"/><text x="8.7041%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="8.4541%" y="709" width="0.1610%" height="15" fill="rgb(222,104,33)" fg:x="105" fg:w="2"/><text x="8.7041%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.5346%" y="693" width="0.0805%" height="15" fill="rgb(248,49,16)" fg:x="106" fg:w="1"/><text x="8.7846%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.5346%" y="677" width="0.0805%" height="15" fill="rgb(232,198,41)" fg:x="106" fg:w="1"/><text x="8.7846%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.5346%" y="661" width="0.0805%" height="15" fill="rgb(214,125,3)" fg:x="106" fg:w="1"/><text x="8.7846%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.5346%" y="645" width="0.0805%" height="15" fill="rgb(229,220,28)" fg:x="106" fg:w="1"/><text x="8.7846%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5346%" y="629" width="0.0805%" height="15" fill="rgb(222,64,37)" fg:x="106" fg:w="1"/><text x="8.7846%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.5346%" y="613" width="0.0805%" height="15" fill="rgb(249,184,13)" fg:x="106" fg:w="1"/><text x="8.7846%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5346%" y="597" width="0.0805%" height="15" fill="rgb(252,176,6)" fg:x="106" fg:w="1"/><text x="8.7846%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5346%" y="581" width="0.0805%" height="15" fill="rgb(228,153,7)" fg:x="106" fg:w="1"/><text x="8.7846%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="8.6151%" y="741" width="0.0805%" height="15" fill="rgb(242,193,5)" fg:x="107" fg:w="1"/><text x="8.8651%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="8.6151%" y="725" width="0.0805%" height="15" fill="rgb(232,140,9)" fg:x="107" fg:w="1"/><text x="8.8651%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.6151%" y="709" width="0.0805%" height="15" fill="rgb(213,222,16)" fg:x="107" fg:w="1"/><text x="8.8651%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.6151%" y="693" width="0.0805%" height="15" fill="rgb(222,75,50)" fg:x="107" fg:w="1"/><text x="8.8651%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.6151%" y="677" width="0.0805%" height="15" fill="rgb(205,180,2)" fg:x="107" fg:w="1"/><text x="8.8651%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.6151%" y="661" width="0.0805%" height="15" fill="rgb(216,34,7)" fg:x="107" fg:w="1"/><text x="8.8651%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="8.6151%" y="645" width="0.0805%" height="15" fill="rgb(253,16,32)" fg:x="107" fg:w="1"/><text x="8.8651%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.6151%" y="757" width="0.1610%" height="15" fill="rgb(208,97,28)" fg:x="107" fg:w="2"/><text x="8.8651%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.6957%" y="741" width="0.0805%" height="15" fill="rgb(225,92,11)" fg:x="108" fg:w="1"/><text x="8.9457%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.6957%" y="725" width="0.0805%" height="15" fill="rgb(243,38,12)" fg:x="108" fg:w="1"/><text x="8.9457%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.6957%" y="709" width="0.0805%" height="15" fill="rgb(208,139,16)" fg:x="108" fg:w="1"/><text x="8.9457%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.6957%" y="693" width="0.0805%" height="15" fill="rgb(227,24,9)" fg:x="108" fg:w="1"/><text x="8.9457%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.6957%" y="677" width="0.0805%" height="15" fill="rgb(206,62,11)" fg:x="108" fg:w="1"/><text x="8.9457%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.6957%" y="661" width="0.0805%" height="15" fill="rgb(228,134,27)" fg:x="108" fg:w="1"/><text x="8.9457%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6957%" y="645" width="0.0805%" height="15" fill="rgb(205,55,33)" fg:x="108" fg:w="1"/><text x="8.9457%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.6957%" y="629" width="0.0805%" height="15" fill="rgb(243,75,43)" fg:x="108" fg:w="1"/><text x="8.9457%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6957%" y="613" width="0.0805%" height="15" fill="rgb(223,27,42)" fg:x="108" fg:w="1"/><text x="8.9457%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.6957%" y="597" width="0.0805%" height="15" fill="rgb(232,189,33)" fg:x="108" fg:w="1"/><text x="8.9457%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6957%" y="581" width="0.0805%" height="15" fill="rgb(210,9,39)" fg:x="108" fg:w="1"/><text x="8.9457%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6957%" y="565" width="0.0805%" height="15" fill="rgb(242,85,26)" fg:x="108" fg:w="1"/><text x="8.9457%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.6957%" y="549" width="0.0805%" height="15" fill="rgb(248,44,4)" fg:x="108" fg:w="1"/><text x="8.9457%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (56 samples, 4.51%)</title><rect x="4.3478%" y="789" width="4.5089%" height="15" fill="rgb(250,96,46)" fg:x="54" fg:w="56"/><text x="4.5978%" y="799.50">plugi..</text></g><g><title>plugins_core::build::Build::with_username (3 samples, 0.24%)</title><rect x="8.6151%" y="773" width="0.2415%" height="15" fill="rgb(229,116,26)" fg:x="107" fg:w="3"/><text x="8.8651%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7762%" y="757" width="0.0805%" height="15" fill="rgb(246,94,34)" fg:x="109" fg:w="1"/><text x="9.0262%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.8567%" y="725" width="0.0805%" height="15" fill="rgb(251,73,21)" fg:x="110" fg:w="1"/><text x="9.1067%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.8567%" y="709" width="0.0805%" height="15" fill="rgb(254,121,25)" fg:x="110" fg:w="1"/><text x="9.1067%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.8567%" y="693" width="0.0805%" height="15" fill="rgb(215,161,49)" fg:x="110" fg:w="1"/><text x="9.1067%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.8567%" y="677" width="0.0805%" height="15" fill="rgb(221,43,13)" fg:x="110" fg:w="1"/><text x="9.1067%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8567%" y="661" width="0.0805%" height="15" fill="rgb(249,5,37)" fg:x="110" fg:w="1"/><text x="9.1067%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8567%" y="645" width="0.0805%" height="15" fill="rgb(226,25,44)" fg:x="110" fg:w="1"/><text x="9.1067%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="8.8567%" y="629" width="0.0805%" height="15" fill="rgb(238,189,16)" fg:x="110" fg:w="1"/><text x="9.1067%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8567%" y="613" width="0.0805%" height="15" fill="rgb(251,186,8)" fg:x="110" fg:w="1"/><text x="9.1067%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.8567%" y="597" width="0.0805%" height="15" fill="rgb(254,34,31)" fg:x="110" fg:w="1"/><text x="9.1067%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="8.8567%" y="581" width="0.0805%" height="15" fill="rgb(225,215,27)" fg:x="110" fg:w="1"/><text x="9.1067%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="8.8567%" y="565" width="0.0805%" height="15" fill="rgb(221,192,48)" fg:x="110" fg:w="1"/><text x="9.1067%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (84 samples, 6.76%)</title><rect x="2.2544%" y="805" width="6.7633%" height="15" fill="rgb(219,137,20)" fg:x="28" fg:w="84"/><text x="2.5044%" y="815.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="8.8567%" y="789" width="0.1610%" height="15" fill="rgb(219,84,11)" fg:x="110" fg:w="2"/><text x="9.1067%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="8.8567%" y="773" width="0.1610%" height="15" fill="rgb(224,10,23)" fg:x="110" fg:w="2"/><text x="9.1067%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.8567%" y="757" width="0.1610%" height="15" fill="rgb(248,22,39)" fg:x="110" fg:w="2"/><text x="9.1067%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="8.8567%" y="741" width="0.1610%" height="15" fill="rgb(212,154,20)" fg:x="110" fg:w="2"/><text x="9.1067%" y="751.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="8.9372%" y="725" width="0.0805%" height="15" fill="rgb(236,199,50)" fg:x="111" fg:w="1"/><text x="9.1872%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9372%" y="709" width="0.0805%" height="15" fill="rgb(211,9,17)" fg:x="111" fg:w="1"/><text x="9.1872%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9372%" y="693" width="0.0805%" height="15" fill="rgb(243,216,36)" fg:x="111" fg:w="1"/><text x="9.1872%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.9372%" y="677" width="0.0805%" height="15" fill="rgb(250,2,10)" fg:x="111" fg:w="1"/><text x="9.1872%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9372%" y="661" width="0.0805%" height="15" fill="rgb(226,50,48)" fg:x="111" fg:w="1"/><text x="9.1872%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.0982%" y="789" width="0.0805%" height="15" fill="rgb(243,81,16)" fg:x="113" fg:w="1"/><text x="9.3482%" y="799.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.0982%" y="773" width="0.0805%" height="15" fill="rgb(250,14,2)" fg:x="113" fg:w="1"/><text x="9.3482%" y="783.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.0982%" y="757" width="0.0805%" height="15" fill="rgb(233,135,29)" fg:x="113" fg:w="1"/><text x="9.3482%" y="767.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.0982%" y="741" width="0.0805%" height="15" fill="rgb(224,64,43)" fg:x="113" fg:w="1"/><text x="9.3482%" y="751.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="9.0982%" y="725" width="0.0805%" height="15" fill="rgb(238,84,13)" fg:x="113" fg:w="1"/><text x="9.3482%" y="735.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="9.0982%" y="709" width="0.0805%" height="15" fill="rgb(253,48,26)" fg:x="113" fg:w="1"/><text x="9.3482%" y="719.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="9.0982%" y="693" width="0.0805%" height="15" fill="rgb(205,223,31)" fg:x="113" fg:w="1"/><text x="9.3482%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.0982%" y="677" width="0.0805%" height="15" fill="rgb(221,41,32)" fg:x="113" fg:w="1"/><text x="9.3482%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.0982%" y="661" width="0.0805%" height="15" fill="rgb(213,158,31)" fg:x="113" fg:w="1"/><text x="9.3482%" y="671.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0982%" y="645" width="0.0805%" height="15" fill="rgb(245,126,43)" fg:x="113" fg:w="1"/><text x="9.3482%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0982%" y="629" width="0.0805%" height="15" fill="rgb(227,7,22)" fg:x="113" fg:w="1"/><text x="9.3482%" y="639.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.0982%" y="613" width="0.0805%" height="15" fill="rgb(252,90,44)" fg:x="113" fg:w="1"/><text x="9.3482%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.0982%" y="597" width="0.0805%" height="15" fill="rgb(253,91,0)" fg:x="113" fg:w="1"/><text x="9.3482%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.0982%" y="581" width="0.0805%" height="15" fill="rgb(252,175,49)" fg:x="113" fg:w="1"/><text x="9.3482%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.0982%" y="565" width="0.0805%" height="15" fill="rgb(246,150,1)" fg:x="113" fg:w="1"/><text x="9.3482%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.1787%" y="773" width="0.0805%" height="15" fill="rgb(241,192,25)" fg:x="114" fg:w="1"/><text x="9.4287%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.1787%" y="757" width="0.0805%" height="15" fill="rgb(239,187,11)" fg:x="114" fg:w="1"/><text x="9.4287%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="9.1787%" y="741" width="0.0805%" height="15" fill="rgb(218,202,51)" fg:x="114" fg:w="1"/><text x="9.4287%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3398%" y="741" width="0.0805%" height="15" fill="rgb(225,176,8)" fg:x="116" fg:w="1"/><text x="9.5898%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3398%" y="725" width="0.0805%" height="15" fill="rgb(219,122,41)" fg:x="116" fg:w="1"/><text x="9.5898%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.3398%" y="709" width="0.0805%" height="15" fill="rgb(248,140,20)" fg:x="116" fg:w="1"/><text x="9.5898%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.3398%" y="693" width="0.0805%" height="15" fill="rgb(245,41,37)" fg:x="116" fg:w="1"/><text x="9.5898%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.3398%" y="677" width="0.0805%" height="15" fill="rgb(235,82,39)" fg:x="116" fg:w="1"/><text x="9.5898%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="9.3398%" y="661" width="0.0805%" height="15" fill="rgb(230,108,42)" fg:x="116" fg:w="1"/><text x="9.5898%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.3398%" y="645" width="0.0805%" height="15" fill="rgb(215,150,50)" fg:x="116" fg:w="1"/><text x="9.5898%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.4203%" y="725" width="0.0805%" height="15" fill="rgb(233,212,5)" fg:x="117" fg:w="1"/><text x="9.6703%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.4203%" y="709" width="0.0805%" height="15" fill="rgb(245,80,22)" fg:x="117" fg:w="1"/><text x="9.6703%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.4203%" y="693" width="0.0805%" height="15" fill="rgb(238,129,16)" fg:x="117" fg:w="1"/><text x="9.6703%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.4203%" y="677" width="0.0805%" height="15" fill="rgb(240,19,0)" fg:x="117" fg:w="1"/><text x="9.6703%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.4203%" y="661" width="0.0805%" height="15" fill="rgb(232,42,35)" fg:x="117" fg:w="1"/><text x="9.6703%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.4203%" y="645" width="0.0805%" height="15" fill="rgb(223,130,24)" fg:x="117" fg:w="1"/><text x="9.6703%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.4203%" y="629" width="0.0805%" height="15" fill="rgb(237,16,22)" fg:x="117" fg:w="1"/><text x="9.6703%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.4203%" y="613" width="0.0805%" height="15" fill="rgb(248,192,20)" fg:x="117" fg:w="1"/><text x="9.6703%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="9.5008%" y="709" width="0.2415%" height="15" fill="rgb(233,167,2)" fg:x="118" fg:w="3"/><text x="9.7508%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.5813%" y="693" width="0.1610%" height="15" fill="rgb(252,71,44)" fg:x="119" fg:w="2"/><text x="9.8313%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="9.5813%" y="677" width="0.1610%" height="15" fill="rgb(238,37,47)" fg:x="119" fg:w="2"/><text x="9.8313%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="9.5813%" y="661" width="0.1610%" height="15" fill="rgb(214,202,54)" fg:x="119" fg:w="2"/><text x="9.8313%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.8229%" y="661" width="0.1610%" height="15" fill="rgb(254,165,40)" fg:x="122" fg:w="2"/><text x="10.0729%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.9034%" y="645" width="0.0805%" height="15" fill="rgb(246,173,38)" fg:x="123" fg:w="1"/><text x="10.1534%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="9.8229%" y="693" width="0.2415%" height="15" fill="rgb(215,3,27)" fg:x="122" fg:w="3"/><text x="10.0729%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="9.8229%" y="677" width="0.2415%" height="15" fill="rgb(239,169,51)" fg:x="122" fg:w="3"/><text x="10.0729%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9839%" y="661" width="0.0805%" height="15" fill="rgb(212,5,25)" fg:x="124" fg:w="1"/><text x="10.2339%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9839%" y="645" width="0.0805%" height="15" fill="rgb(243,45,17)" fg:x="124" fg:w="1"/><text x="10.2339%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.0644%" y="629" width="0.0805%" height="15" fill="rgb(242,97,9)" fg:x="125" fg:w="1"/><text x="10.3144%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.0644%" y="613" width="0.0805%" height="15" fill="rgb(228,71,31)" fg:x="125" fg:w="1"/><text x="10.3144%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.0644%" y="597" width="0.0805%" height="15" fill="rgb(252,184,16)" fg:x="125" fg:w="1"/><text x="10.3144%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.0644%" y="581" width="0.0805%" height="15" fill="rgb(236,169,46)" fg:x="125" fg:w="1"/><text x="10.3144%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0644%" y="645" width="0.1610%" height="15" fill="rgb(207,17,47)" fg:x="125" fg:w="2"/><text x="10.3144%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.1449%" y="629" width="0.0805%" height="15" fill="rgb(206,201,28)" fg:x="126" fg:w="1"/><text x="10.3949%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.1449%" y="613" width="0.0805%" height="15" fill="rgb(224,184,23)" fg:x="126" fg:w="1"/><text x="10.3949%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.0644%" y="661" width="0.2415%" height="15" fill="rgb(208,139,48)" fg:x="125" fg:w="3"/><text x="10.3144%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.2254%" y="645" width="0.0805%" height="15" fill="rgb(208,130,10)" fg:x="127" fg:w="1"/><text x="10.4754%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.0644%" y="693" width="0.3221%" height="15" fill="rgb(211,213,45)" fg:x="125" fg:w="4"/><text x="10.3144%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.0644%" y="677" width="0.3221%" height="15" fill="rgb(235,100,30)" fg:x="125" fg:w="4"/><text x="10.3144%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3060%" y="661" width="0.0805%" height="15" fill="rgb(206,144,31)" fg:x="128" fg:w="1"/><text x="10.5560%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3060%" y="645" width="0.0805%" height="15" fill="rgb(224,200,26)" fg:x="128" fg:w="1"/><text x="10.5560%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.3060%" y="629" width="0.0805%" height="15" fill="rgb(247,104,53)" fg:x="128" fg:w="1"/><text x="10.5560%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="9.7424%" y="709" width="0.7246%" height="15" fill="rgb(220,14,17)" fg:x="121" fg:w="9"/><text x="9.9924%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3865%" y="693" width="0.0805%" height="15" fill="rgb(230,140,40)" fg:x="129" fg:w="1"/><text x="10.6365%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="9.5008%" y="725" width="1.1272%" height="15" fill="rgb(229,2,41)" fg:x="118" fg:w="14"/><text x="9.7508%" y="735.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.4670%" y="709" width="0.1610%" height="15" fill="rgb(232,89,16)" fg:x="130" fg:w="2"/><text x="10.7170%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.4670%" y="693" width="0.1610%" height="15" fill="rgb(247,59,52)" fg:x="130" fg:w="2"/><text x="10.7170%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.4670%" y="677" width="0.1610%" height="15" fill="rgb(226,110,21)" fg:x="130" fg:w="2"/><text x="10.7170%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.5475%" y="661" width="0.0805%" height="15" fill="rgb(224,176,43)" fg:x="131" fg:w="1"/><text x="10.7975%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.5475%" y="645" width="0.0805%" height="15" fill="rgb(221,73,6)" fg:x="131" fg:w="1"/><text x="10.7975%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.5475%" y="629" width="0.0805%" height="15" fill="rgb(232,78,19)" fg:x="131" fg:w="1"/><text x="10.7975%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.29%)</title><rect x="9.4203%" y="741" width="1.2882%" height="15" fill="rgb(233,112,48)" fg:x="117" fg:w="16"/><text x="9.6703%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.6280%" y="725" width="0.0805%" height="15" fill="rgb(243,131,47)" fg:x="132" fg:w="1"/><text x="10.8780%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.6280%" y="709" width="0.0805%" height="15" fill="rgb(226,51,1)" fg:x="132" fg:w="1"/><text x="10.8780%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.6280%" y="693" width="0.0805%" height="15" fill="rgb(247,58,7)" fg:x="132" fg:w="1"/><text x="10.8780%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.7085%" y="741" width="0.2415%" height="15" fill="rgb(209,7,32)" fg:x="133" fg:w="3"/><text x="10.9585%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="10.7085%" y="725" width="0.2415%" height="15" fill="rgb(209,39,41)" fg:x="133" fg:w="3"/><text x="10.9585%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.7890%" y="709" width="0.1610%" height="15" fill="rgb(226,182,46)" fg:x="134" fg:w="2"/><text x="11.0390%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.8696%" y="693" width="0.0805%" height="15" fill="rgb(230,219,10)" fg:x="135" fg:w="1"/><text x="11.1196%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.8696%" y="677" width="0.0805%" height="15" fill="rgb(227,175,30)" fg:x="135" fg:w="1"/><text x="11.1196%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.8696%" y="661" width="0.0805%" height="15" fill="rgb(217,2,50)" fg:x="135" fg:w="1"/><text x="11.1196%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.8696%" y="645" width="0.0805%" height="15" fill="rgb(229,160,0)" fg:x="135" fg:w="1"/><text x="11.1196%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.0306%" y="661" width="0.1610%" height="15" fill="rgb(207,78,37)" fg:x="137" fg:w="2"/><text x="11.2806%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="11.0306%" y="709" width="0.3221%" height="15" fill="rgb(225,57,0)" fg:x="137" fg:w="4"/><text x="11.2806%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="11.0306%" y="693" width="0.3221%" height="15" fill="rgb(232,154,2)" fg:x="137" fg:w="4"/><text x="11.2806%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="11.0306%" y="677" width="0.3221%" height="15" fill="rgb(241,212,25)" fg:x="137" fg:w="4"/><text x="11.2806%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.1916%" y="661" width="0.1610%" height="15" fill="rgb(226,69,20)" fg:x="139" fg:w="2"/><text x="11.4416%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.2721%" y="645" width="0.0805%" height="15" fill="rgb(247,184,54)" fg:x="140" fg:w="1"/><text x="11.5221%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.2721%" y="629" width="0.0805%" height="15" fill="rgb(210,145,0)" fg:x="140" fg:w="1"/><text x="11.5221%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.2721%" y="613" width="0.0805%" height="15" fill="rgb(253,82,12)" fg:x="140" fg:w="1"/><text x="11.5221%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2721%" y="597" width="0.0805%" height="15" fill="rgb(245,42,11)" fg:x="140" fg:w="1"/><text x="11.5221%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="10.9501%" y="725" width="0.5636%" height="15" fill="rgb(219,147,32)" fg:x="136" fg:w="7"/><text x="11.2001%" y="735.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="11.3527%" y="709" width="0.1610%" height="15" fill="rgb(246,12,7)" fg:x="141" fg:w="2"/><text x="11.6027%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="11.3527%" y="693" width="0.1610%" height="15" fill="rgb(243,50,9)" fg:x="141" fg:w="2"/><text x="11.6027%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="11.3527%" y="677" width="0.1610%" height="15" fill="rgb(219,149,6)" fg:x="141" fg:w="2"/><text x="11.6027%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.4332%" y="661" width="0.0805%" height="15" fill="rgb(241,51,42)" fg:x="142" fg:w="1"/><text x="11.6832%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.4332%" y="645" width="0.0805%" height="15" fill="rgb(226,128,27)" fg:x="142" fg:w="1"/><text x="11.6832%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.4332%" y="629" width="0.0805%" height="15" fill="rgb(244,144,4)" fg:x="142" fg:w="1"/><text x="11.6832%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.4332%" y="613" width="0.0805%" height="15" fill="rgb(221,4,13)" fg:x="142" fg:w="1"/><text x="11.6832%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.4332%" y="597" width="0.0805%" height="15" fill="rgb(208,170,28)" fg:x="142" fg:w="1"/><text x="11.6832%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5942%" y="693" width="0.0805%" height="15" fill="rgb(226,131,13)" fg:x="144" fg:w="1"/><text x="11.8442%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5942%" y="677" width="0.0805%" height="15" fill="rgb(215,72,41)" fg:x="144" fg:w="1"/><text x="11.8442%" y="687.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6747%" y="693" width="0.0805%" height="15" fill="rgb(243,108,20)" fg:x="145" fg:w="1"/><text x="11.9247%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6747%" y="677" width="0.0805%" height="15" fill="rgb(230,189,17)" fg:x="145" fg:w="1"/><text x="11.9247%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6747%" y="661" width="0.0805%" height="15" fill="rgb(220,50,17)" fg:x="145" fg:w="1"/><text x="11.9247%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.7552%" y="693" width="0.0805%" height="15" fill="rgb(248,152,48)" fg:x="146" fg:w="1"/><text x="12.0052%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.7552%" y="677" width="0.0805%" height="15" fill="rgb(244,91,11)" fg:x="146" fg:w="1"/><text x="12.0052%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7552%" y="661" width="0.0805%" height="15" fill="rgb(220,157,5)" fg:x="146" fg:w="1"/><text x="12.0052%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.9163%" y="645" width="0.0805%" height="15" fill="rgb(253,137,8)" fg:x="148" fg:w="1"/><text x="12.1663%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.9163%" y="629" width="0.0805%" height="15" fill="rgb(217,137,51)" fg:x="148" fg:w="1"/><text x="12.1663%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0773%" y="581" width="0.0805%" height="15" fill="rgb(218,209,53)" fg:x="150" fg:w="1"/><text x="12.3273%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.0773%" y="613" width="0.1610%" height="15" fill="rgb(249,137,25)" fg:x="150" fg:w="2"/><text x="12.3273%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.0773%" y="597" width="0.1610%" height="15" fill="rgb(239,155,26)" fg:x="150" fg:w="2"/><text x="12.3273%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.1578%" y="581" width="0.0805%" height="15" fill="rgb(227,85,46)" fg:x="151" fg:w="1"/><text x="12.4078%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3188%" y="581" width="0.0805%" height="15" fill="rgb(251,107,43)" fg:x="153" fg:w="1"/><text x="12.5688%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3188%" y="565" width="0.0805%" height="15" fill="rgb(234,170,33)" fg:x="153" fg:w="1"/><text x="12.5688%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3188%" y="549" width="0.0805%" height="15" fill="rgb(206,29,35)" fg:x="153" fg:w="1"/><text x="12.5688%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4799%" y="549" width="0.0805%" height="15" fill="rgb(227,138,25)" fg:x="155" fg:w="1"/><text x="12.7299%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4799%" y="533" width="0.0805%" height="15" fill="rgb(249,131,35)" fg:x="155" fg:w="1"/><text x="12.7299%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4799%" y="517" width="0.0805%" height="15" fill="rgb(239,6,40)" fg:x="155" fg:w="1"/><text x="12.7299%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.6409%" y="533" width="0.0805%" height="15" fill="rgb(246,136,47)" fg:x="157" fg:w="1"/><text x="12.8909%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6409%" y="517" width="0.0805%" height="15" fill="rgb(253,58,26)" fg:x="157" fg:w="1"/><text x="12.8909%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6409%" y="501" width="0.0805%" height="15" fill="rgb(237,141,10)" fg:x="157" fg:w="1"/><text x="12.8909%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6409%" y="485" width="0.0805%" height="15" fill="rgb(234,156,12)" fg:x="157" fg:w="1"/><text x="12.8909%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.97%)</title><rect x="11.8357%" y="677" width="0.9662%" height="15" fill="rgb(243,224,36)" fg:x="147" fg:w="12"/><text x="12.0857%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.89%)</title><rect x="11.9163%" y="661" width="0.8857%" height="15" fill="rgb(205,229,51)" fg:x="148" fg:w="11"/><text x="12.1663%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.81%)</title><rect x="11.9968%" y="645" width="0.8052%" height="15" fill="rgb(223,189,4)" fg:x="149" fg:w="10"/><text x="12.2468%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="12.0773%" y="629" width="0.7246%" height="15" fill="rgb(249,167,54)" fg:x="150" fg:w="9"/><text x="12.3273%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="12.2383%" y="613" width="0.5636%" height="15" fill="rgb(218,34,28)" fg:x="152" fg:w="7"/><text x="12.4883%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="12.3188%" y="597" width="0.4831%" height="15" fill="rgb(232,109,42)" fg:x="153" fg:w="6"/><text x="12.5688%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="12.3994%" y="581" width="0.4026%" height="15" fill="rgb(248,214,46)" fg:x="154" fg:w="5"/><text x="12.6494%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="12.3994%" y="565" width="0.4026%" height="15" fill="rgb(244,216,40)" fg:x="154" fg:w="5"/><text x="12.6494%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="12.5604%" y="549" width="0.2415%" height="15" fill="rgb(231,226,31)" fg:x="156" fg:w="3"/><text x="12.8104%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7214%" y="533" width="0.0805%" height="15" fill="rgb(238,38,43)" fg:x="158" fg:w="1"/><text x="12.9714%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.05%)</title><rect x="11.8357%" y="693" width="1.0467%" height="15" fill="rgb(208,88,43)" fg:x="147" fg:w="13"/><text x="12.0857%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8019%" y="677" width="0.0805%" height="15" fill="rgb(205,136,37)" fg:x="159" fg:w="1"/><text x="13.0519%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.45%)</title><rect x="11.5137%" y="725" width="1.4493%" height="15" fill="rgb(237,34,14)" fg:x="143" fg:w="18"/><text x="11.7637%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.45%)</title><rect x="11.5137%" y="709" width="1.4493%" height="15" fill="rgb(236,193,44)" fg:x="143" fg:w="18"/><text x="11.7637%" y="719.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="12.8824%" y="693" width="0.0805%" height="15" fill="rgb(231,48,10)" fg:x="160" fg:w="1"/><text x="13.1324%" y="703.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.8824%" y="677" width="0.0805%" height="15" fill="rgb(213,141,34)" fg:x="160" fg:w="1"/><text x="13.1324%" y="687.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.9630%" y="709" width="0.0805%" height="15" fill="rgb(249,130,34)" fg:x="161" fg:w="1"/><text x="13.2130%" y="719.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="13.3655%" y="549" width="0.0805%" height="15" fill="rgb(219,42,41)" fg:x="166" fg:w="1"/><text x="13.6155%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.4461%" y="533" width="0.0805%" height="15" fill="rgb(224,100,54)" fg:x="167" fg:w="1"/><text x="13.6961%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.4461%" y="517" width="0.0805%" height="15" fill="rgb(229,200,27)" fg:x="167" fg:w="1"/><text x="13.6961%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.4461%" y="501" width="0.0805%" height="15" fill="rgb(217,118,10)" fg:x="167" fg:w="1"/><text x="13.6961%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.4461%" y="485" width="0.0805%" height="15" fill="rgb(206,22,3)" fg:x="167" fg:w="1"/><text x="13.6961%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="13.2850%" y="629" width="0.3221%" height="15" fill="rgb(232,163,46)" fg:x="165" fg:w="4"/><text x="13.5350%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="13.2850%" y="613" width="0.3221%" height="15" fill="rgb(206,95,13)" fg:x="165" fg:w="4"/><text x="13.5350%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="13.2850%" y="597" width="0.3221%" height="15" fill="rgb(253,154,18)" fg:x="165" fg:w="4"/><text x="13.5350%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="13.3655%" y="581" width="0.2415%" height="15" fill="rgb(219,32,23)" fg:x="166" fg:w="3"/><text x="13.6155%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="13.3655%" y="565" width="0.2415%" height="15" fill="rgb(230,191,45)" fg:x="166" fg:w="3"/><text x="13.6155%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.4461%" y="549" width="0.1610%" height="15" fill="rgb(229,64,36)" fg:x="167" fg:w="2"/><text x="13.6961%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5266%" y="533" width="0.0805%" height="15" fill="rgb(205,129,25)" fg:x="168" fg:w="1"/><text x="13.7766%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5266%" y="517" width="0.0805%" height="15" fill="rgb(254,112,7)" fg:x="168" fg:w="1"/><text x="13.7766%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.5266%" y="501" width="0.0805%" height="15" fill="rgb(226,53,48)" fg:x="168" fg:w="1"/><text x="13.7766%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="13.2850%" y="661" width="0.4026%" height="15" fill="rgb(214,153,38)" fg:x="165" fg:w="5"/><text x="13.5350%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="13.2850%" y="645" width="0.4026%" height="15" fill="rgb(243,101,7)" fg:x="165" fg:w="5"/><text x="13.5350%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6071%" y="629" width="0.0805%" height="15" fill="rgb(240,140,22)" fg:x="169" fg:w="1"/><text x="13.8571%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6071%" y="613" width="0.0805%" height="15" fill="rgb(235,114,2)" fg:x="169" fg:w="1"/><text x="13.8571%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.6071%" y="597" width="0.0805%" height="15" fill="rgb(242,59,12)" fg:x="169" fg:w="1"/><text x="13.8571%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="13.6876%" y="661" width="0.1610%" height="15" fill="rgb(252,134,9)" fg:x="170" fg:w="2"/><text x="13.9376%" y="671.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.6876%" y="645" width="0.1610%" height="15" fill="rgb(236,4,44)" fg:x="170" fg:w="2"/><text x="13.9376%" y="655.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (60 samples, 4.83%)</title><rect x="9.2593%" y="773" width="4.8309%" height="15" fill="rgb(254,172,41)" fg:x="115" fg:w="60"/><text x="9.5093%" y="783.50">engine..</text></g><g><title>engine::session::SavesEntities::check_for_changes (59 samples, 4.75%)</title><rect x="9.3398%" y="757" width="4.7504%" height="15" fill="rgb(244,63,20)" fg:x="116" fg:w="59"/><text x="9.5898%" y="767.50">engine..</text></g><g><title>kernel::model::any_entity_changes (39 samples, 3.14%)</title><rect x="10.9501%" y="741" width="3.1401%" height="15" fill="rgb(250,73,31)" fg:x="136" fg:w="39"/><text x="11.2001%" y="751.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (14 samples, 1.13%)</title><rect x="12.9630%" y="725" width="1.1272%" height="15" fill="rgb(241,38,36)" fg:x="161" fg:w="14"/><text x="13.2130%" y="735.50"></text></g><g><title>serde_json::de::from_trait (13 samples, 1.05%)</title><rect x="13.0435%" y="709" width="1.0467%" height="15" fill="rgb(245,211,2)" fg:x="162" fg:w="13"/><text x="13.2935%" y="719.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.05%)</title><rect x="13.0435%" y="693" width="1.0467%" height="15" fill="rgb(206,120,28)" fg:x="162" fg:w="13"/><text x="13.2935%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="13.2850%" y="677" width="0.8052%" height="15" fill="rgb(211,59,34)" fg:x="165" fg:w="10"/><text x="13.5350%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="13.8486%" y="661" width="0.2415%" height="15" fill="rgb(233,168,5)" fg:x="172" fg:w="3"/><text x="14.0986%" y="671.50"></text></g><g><title>engine::session::Session::close (65 samples, 5.23%)</title><rect x="9.0177%" y="805" width="5.2335%" height="15" fill="rgb(234,33,13)" fg:x="112" fg:w="65"/><text x="9.2677%" y="815.50">engine..</text></g><g><title>engine::session::Session::save_entity_changes (63 samples, 5.07%)</title><rect x="9.1787%" y="789" width="5.0725%" height="15" fill="rgb(231,150,26)" fg:x="114" fg:w="63"/><text x="9.4287%" y="799.50">engine..</text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="14.0902%" y="773" width="0.1610%" height="15" fill="rgb(217,191,4)" fg:x="175" fg:w="2"/><text x="14.3402%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="14.0902%" y="757" width="0.1610%" height="15" fill="rgb(246,198,38)" fg:x="175" fg:w="2"/><text x="14.3402%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="14.0902%" y="741" width="0.1610%" height="15" fill="rgb(245,64,37)" fg:x="175" fg:w="2"/><text x="14.3402%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="14.0902%" y="725" width="0.1610%" height="15" fill="rgb(250,30,36)" fg:x="175" fg:w="2"/><text x="14.3402%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="14.0902%" y="709" width="0.1610%" height="15" fill="rgb(217,86,53)" fg:x="175" fg:w="2"/><text x="14.3402%" y="719.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="14.0902%" y="693" width="0.1610%" height="15" fill="rgb(228,157,16)" fg:x="175" fg:w="2"/><text x="14.3402%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="14.0902%" y="677" width="0.1610%" height="15" fill="rgb(217,59,31)" fg:x="175" fg:w="2"/><text x="14.3402%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="14.0902%" y="661" width="0.1610%" height="15" fill="rgb(237,138,41)" fg:x="175" fg:w="2"/><text x="14.3402%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.1707%" y="645" width="0.0805%" height="15" fill="rgb(227,91,49)" fg:x="176" fg:w="1"/><text x="14.4207%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.1707%" y="629" width="0.0805%" height="15" fill="rgb(247,21,44)" fg:x="176" fg:w="1"/><text x="14.4207%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.1707%" y="613" width="0.0805%" height="15" fill="rgb(219,210,51)" fg:x="176" fg:w="1"/><text x="14.4207%" y="623.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="14.1707%" y="597" width="0.0805%" height="15" fill="rgb(209,140,6)" fg:x="176" fg:w="1"/><text x="14.4207%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="14.3317%" y="709" width="0.0805%" height="15" fill="rgb(221,188,24)" fg:x="178" fg:w="1"/><text x="14.5817%" y="719.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="14.3317%" y="693" width="0.0805%" height="15" fill="rgb(232,154,20)" fg:x="178" fg:w="1"/><text x="14.5817%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::actions::Action&gt;::perform (1 samples, 0.08%)</title><rect x="14.3317%" y="677" width="0.0805%" height="15" fill="rgb(244,137,50)" fg:x="178" fg:w="1"/><text x="14.5817%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.4122%" y="661" width="0.0805%" height="15" fill="rgb(225,185,43)" fg:x="179" fg:w="1"/><text x="14.6622%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4122%" y="645" width="0.0805%" height="15" fill="rgb(213,205,38)" fg:x="179" fg:w="1"/><text x="14.6622%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="14.4928%" y="661" width="0.0805%" height="15" fill="rgb(236,73,12)" fg:x="180" fg:w="1"/><text x="14.7428%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.4928%" y="645" width="0.0805%" height="15" fill="rgb(235,219,13)" fg:x="180" fg:w="1"/><text x="14.7428%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7343%" y="565" width="0.1610%" height="15" fill="rgb(218,59,36)" fg:x="183" fg:w="2"/><text x="14.9843%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8148%" y="549" width="0.0805%" height="15" fill="rgb(205,110,39)" fg:x="184" fg:w="1"/><text x="15.0648%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.7343%" y="613" width="0.2415%" height="15" fill="rgb(218,206,42)" fg:x="183" fg:w="3"/><text x="14.9843%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.7343%" y="597" width="0.2415%" height="15" fill="rgb(248,125,24)" fg:x="183" fg:w="3"/><text x="14.9843%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.7343%" y="581" width="0.2415%" height="15" fill="rgb(242,28,27)" fg:x="183" fg:w="3"/><text x="14.9843%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8953%" y="565" width="0.0805%" height="15" fill="rgb(216,228,15)" fg:x="185" fg:w="1"/><text x="15.1453%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="14.7343%" y="629" width="0.4026%" height="15" fill="rgb(235,116,46)" fg:x="183" fg:w="5"/><text x="14.9843%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="14.9758%" y="613" width="0.1610%" height="15" fill="rgb(224,18,32)" fg:x="186" fg:w="2"/><text x="15.2258%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.0564%" y="597" width="0.0805%" height="15" fill="rgb(252,5,12)" fg:x="187" fg:w="1"/><text x="15.3064%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.0564%" y="581" width="0.0805%" height="15" fill="rgb(251,36,5)" fg:x="187" fg:w="1"/><text x="15.3064%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.0564%" y="565" width="0.0805%" height="15" fill="rgb(217,53,14)" fg:x="187" fg:w="1"/><text x="15.3064%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.0564%" y="549" width="0.0805%" height="15" fill="rgb(215,86,45)" fg:x="187" fg:w="1"/><text x="15.3064%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.0564%" y="533" width="0.0805%" height="15" fill="rgb(242,169,11)" fg:x="187" fg:w="1"/><text x="15.3064%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.0564%" y="517" width="0.0805%" height="15" fill="rgb(211,213,45)" fg:x="187" fg:w="1"/><text x="15.3064%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.0564%" y="501" width="0.0805%" height="15" fill="rgb(205,88,11)" fg:x="187" fg:w="1"/><text x="15.3064%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.0564%" y="485" width="0.0805%" height="15" fill="rgb(252,69,26)" fg:x="187" fg:w="1"/><text x="15.3064%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.0564%" y="469" width="0.0805%" height="15" fill="rgb(246,123,37)" fg:x="187" fg:w="1"/><text x="15.3064%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.0564%" y="453" width="0.0805%" height="15" fill="rgb(212,205,5)" fg:x="187" fg:w="1"/><text x="15.3064%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0564%" y="437" width="0.0805%" height="15" fill="rgb(253,148,0)" fg:x="187" fg:w="1"/><text x="15.3064%" y="447.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.64%)</title><rect x="14.5733%" y="661" width="0.6441%" height="15" fill="rgb(239,22,4)" fg:x="181" fg:w="8"/><text x="14.8233%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (8 samples, 0.64%)</title><rect x="14.5733%" y="645" width="0.6441%" height="15" fill="rgb(226,26,53)" fg:x="181" fg:w="8"/><text x="14.8233%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.1369%" y="629" width="0.0805%" height="15" fill="rgb(225,229,45)" fg:x="188" fg:w="1"/><text x="15.3869%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.1369%" y="613" width="0.0805%" height="15" fill="rgb(220,60,37)" fg:x="188" fg:w="1"/><text x="15.3869%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.1369%" y="597" width="0.0805%" height="15" fill="rgb(217,180,35)" fg:x="188" fg:w="1"/><text x="15.3869%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.1369%" y="581" width="0.0805%" height="15" fill="rgb(229,7,53)" fg:x="188" fg:w="1"/><text x="15.3869%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.1369%" y="565" width="0.0805%" height="15" fill="rgb(254,137,3)" fg:x="188" fg:w="1"/><text x="15.3869%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.1369%" y="549" width="0.0805%" height="15" fill="rgb(215,140,41)" fg:x="188" fg:w="1"/><text x="15.3869%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.1369%" y="533" width="0.0805%" height="15" fill="rgb(250,80,15)" fg:x="188" fg:w="1"/><text x="15.3869%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2174%" y="645" width="0.0805%" height="15" fill="rgb(252,191,6)" fg:x="189" fg:w="1"/><text x="15.4674%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2174%" y="629" width="0.0805%" height="15" fill="rgb(246,217,18)" fg:x="189" fg:w="1"/><text x="15.4674%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.2174%" y="613" width="0.0805%" height="15" fill="rgb(223,93,7)" fg:x="189" fg:w="1"/><text x="15.4674%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.2174%" y="597" width="0.0805%" height="15" fill="rgb(225,55,52)" fg:x="189" fg:w="1"/><text x="15.4674%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.2174%" y="581" width="0.0805%" height="15" fill="rgb(240,31,24)" fg:x="189" fg:w="1"/><text x="15.4674%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.2174%" y="565" width="0.0805%" height="15" fill="rgb(205,56,52)" fg:x="189" fg:w="1"/><text x="15.4674%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.2174%" y="549" width="0.0805%" height="15" fill="rgb(246,146,12)" fg:x="189" fg:w="1"/><text x="15.4674%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.2174%" y="533" width="0.0805%" height="15" fill="rgb(239,84,36)" fg:x="189" fg:w="1"/><text x="15.4674%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.2174%" y="517" width="0.0805%" height="15" fill="rgb(207,41,40)" fg:x="189" fg:w="1"/><text x="15.4674%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.2174%" y="501" width="0.0805%" height="15" fill="rgb(241,179,25)" fg:x="189" fg:w="1"/><text x="15.4674%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.2174%" y="485" width="0.0805%" height="15" fill="rgb(210,0,34)" fg:x="189" fg:w="1"/><text x="15.4674%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2174%" y="469" width="0.0805%" height="15" fill="rgb(225,217,29)" fg:x="189" fg:w="1"/><text x="15.4674%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="15.2979%" y="613" width="0.0805%" height="15" fill="rgb(216,191,38)" fg:x="190" fg:w="1"/><text x="15.5479%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="15.4589%" y="389" width="0.0805%" height="15" fill="rgb(232,140,52)" fg:x="192" fg:w="1"/><text x="15.7089%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="15.4589%" y="421" width="0.1610%" height="15" fill="rgb(223,158,51)" fg:x="192" fg:w="2"/><text x="15.7089%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="15.4589%" y="405" width="0.1610%" height="15" fill="rgb(235,29,51)" fg:x="192" fg:w="2"/><text x="15.7089%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="15.5395%" y="389" width="0.0805%" height="15" fill="rgb(215,181,18)" fg:x="193" fg:w="1"/><text x="15.7895%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.5395%" y="373" width="0.0805%" height="15" fill="rgb(227,125,34)" fg:x="193" fg:w="1"/><text x="15.7895%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.5395%" y="357" width="0.0805%" height="15" fill="rgb(230,197,49)" fg:x="193" fg:w="1"/><text x="15.7895%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.5395%" y="341" width="0.0805%" height="15" fill="rgb(239,141,16)" fg:x="193" fg:w="1"/><text x="15.7895%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="15.5395%" y="325" width="0.0805%" height="15" fill="rgb(225,105,43)" fg:x="193" fg:w="1"/><text x="15.7895%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5395%" y="309" width="0.0805%" height="15" fill="rgb(214,131,14)" fg:x="193" fg:w="1"/><text x="15.7895%" y="319.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (6 samples, 0.48%)</title><rect x="15.2174%" y="661" width="0.4831%" height="15" fill="rgb(229,177,11)" fg:x="189" fg:w="6"/><text x="15.4674%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (5 samples, 0.40%)</title><rect x="15.2979%" y="645" width="0.4026%" height="15" fill="rgb(231,180,14)" fg:x="190" fg:w="5"/><text x="15.5479%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="15.2979%" y="629" width="0.4026%" height="15" fill="rgb(232,88,2)" fg:x="190" fg:w="5"/><text x="15.5479%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="15.3784%" y="613" width="0.3221%" height="15" fill="rgb(205,220,8)" fg:x="191" fg:w="4"/><text x="15.6284%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="15.4589%" y="597" width="0.2415%" height="15" fill="rgb(225,23,53)" fg:x="192" fg:w="3"/><text x="15.7089%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="15.4589%" y="581" width="0.2415%" height="15" fill="rgb(213,62,29)" fg:x="192" fg:w="3"/><text x="15.7089%" y="591.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="15.4589%" y="565" width="0.2415%" height="15" fill="rgb(227,75,7)" fg:x="192" fg:w="3"/><text x="15.7089%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="15.4589%" y="549" width="0.2415%" height="15" fill="rgb(207,105,14)" fg:x="192" fg:w="3"/><text x="15.7089%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="15.4589%" y="533" width="0.2415%" height="15" fill="rgb(245,62,29)" fg:x="192" fg:w="3"/><text x="15.7089%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="15.4589%" y="517" width="0.2415%" height="15" fill="rgb(236,202,4)" fg:x="192" fg:w="3"/><text x="15.7089%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="15.4589%" y="501" width="0.2415%" height="15" fill="rgb(250,67,1)" fg:x="192" fg:w="3"/><text x="15.7089%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.4589%" y="485" width="0.2415%" height="15" fill="rgb(253,115,44)" fg:x="192" fg:w="3"/><text x="15.7089%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="15.4589%" y="469" width="0.2415%" height="15" fill="rgb(251,139,18)" fg:x="192" fg:w="3"/><text x="15.7089%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.4589%" y="453" width="0.2415%" height="15" fill="rgb(218,22,32)" fg:x="192" fg:w="3"/><text x="15.7089%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="15.4589%" y="437" width="0.2415%" height="15" fill="rgb(243,53,5)" fg:x="192" fg:w="3"/><text x="15.7089%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.6200%" y="421" width="0.0805%" height="15" fill="rgb(227,56,16)" fg:x="194" fg:w="1"/><text x="15.8700%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.6200%" y="405" width="0.0805%" height="15" fill="rgb(245,53,0)" fg:x="194" fg:w="1"/><text x="15.8700%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.6200%" y="389" width="0.0805%" height="15" fill="rgb(216,170,35)" fg:x="194" fg:w="1"/><text x="15.8700%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.6200%" y="373" width="0.0805%" height="15" fill="rgb(211,200,8)" fg:x="194" fg:w="1"/><text x="15.8700%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="15.6200%" y="357" width="0.0805%" height="15" fill="rgb(228,204,44)" fg:x="194" fg:w="1"/><text x="15.8700%" y="367.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="15.7810%" y="501" width="0.1610%" height="15" fill="rgb(214,121,17)" fg:x="196" fg:w="2"/><text x="16.0310%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="15.7810%" y="485" width="0.1610%" height="15" fill="rgb(233,64,38)" fg:x="196" fg:w="2"/><text x="16.0310%" y="495.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="15.7810%" y="469" width="0.1610%" height="15" fill="rgb(253,54,19)" fg:x="196" fg:w="2"/><text x="16.0310%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="15.7810%" y="453" width="0.1610%" height="15" fill="rgb(253,94,18)" fg:x="196" fg:w="2"/><text x="16.0310%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.8615%" y="437" width="0.0805%" height="15" fill="rgb(227,57,52)" fg:x="197" fg:w="1"/><text x="16.1115%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.8615%" y="421" width="0.0805%" height="15" fill="rgb(230,228,50)" fg:x="197" fg:w="1"/><text x="16.1115%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.9420%" y="485" width="0.0805%" height="15" fill="rgb(217,205,27)" fg:x="198" fg:w="1"/><text x="16.1920%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.0225%" y="485" width="0.0805%" height="15" fill="rgb(252,71,50)" fg:x="199" fg:w="1"/><text x="16.2725%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.1031%" y="373" width="0.0805%" height="15" fill="rgb(209,86,4)" fg:x="200" fg:w="1"/><text x="16.3531%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1031%" y="453" width="0.1610%" height="15" fill="rgb(229,94,0)" fg:x="200" fg:w="2"/><text x="16.3531%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1031%" y="437" width="0.1610%" height="15" fill="rgb(252,223,21)" fg:x="200" fg:w="2"/><text x="16.3531%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1031%" y="421" width="0.1610%" height="15" fill="rgb(230,210,4)" fg:x="200" fg:w="2"/><text x="16.3531%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1031%" y="405" width="0.1610%" height="15" fill="rgb(240,149,38)" fg:x="200" fg:w="2"/><text x="16.3531%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.1031%" y="389" width="0.1610%" height="15" fill="rgb(254,105,20)" fg:x="200" fg:w="2"/><text x="16.3531%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1836%" y="373" width="0.0805%" height="15" fill="rgb(253,87,46)" fg:x="201" fg:w="1"/><text x="16.4336%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="16.2641%" y="453" width="0.0805%" height="15" fill="rgb(253,116,33)" fg:x="202" fg:w="1"/><text x="16.5141%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="16.2641%" y="437" width="0.0805%" height="15" fill="rgb(229,198,5)" fg:x="202" fg:w="1"/><text x="16.5141%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.2641%" y="421" width="0.0805%" height="15" fill="rgb(242,38,37)" fg:x="202" fg:w="1"/><text x="16.5141%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.2641%" y="405" width="0.0805%" height="15" fill="rgb(242,69,53)" fg:x="202" fg:w="1"/><text x="16.5141%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.2641%" y="389" width="0.0805%" height="15" fill="rgb(249,80,16)" fg:x="202" fg:w="1"/><text x="16.5141%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2641%" y="373" width="0.0805%" height="15" fill="rgb(206,128,11)" fg:x="202" fg:w="1"/><text x="16.5141%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.3446%" y="389" width="0.0805%" height="15" fill="rgb(212,35,20)" fg:x="203" fg:w="1"/><text x="16.5946%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.3446%" y="373" width="0.0805%" height="15" fill="rgb(236,79,13)" fg:x="203" fg:w="1"/><text x="16.5946%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (7 samples, 0.56%)</title><rect x="15.9420%" y="501" width="0.5636%" height="15" fill="rgb(233,123,3)" fg:x="198" fg:w="7"/><text x="16.1920%" y="511.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="16.1031%" y="485" width="0.4026%" height="15" fill="rgb(214,93,52)" fg:x="200" fg:w="5"/><text x="16.3531%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="16.1031%" y="469" width="0.4026%" height="15" fill="rgb(251,37,40)" fg:x="200" fg:w="5"/><text x="16.3531%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="16.3446%" y="453" width="0.1610%" height="15" fill="rgb(227,80,54)" fg:x="203" fg:w="2"/><text x="16.5946%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.3446%" y="437" width="0.1610%" height="15" fill="rgb(254,48,11)" fg:x="203" fg:w="2"/><text x="16.5946%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="16.3446%" y="421" width="0.1610%" height="15" fill="rgb(235,193,26)" fg:x="203" fg:w="2"/><text x="16.5946%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.3446%" y="405" width="0.1610%" height="15" fill="rgb(229,99,21)" fg:x="203" fg:w="2"/><text x="16.5946%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.4251%" y="389" width="0.0805%" height="15" fill="rgb(211,140,41)" fg:x="204" fg:w="1"/><text x="16.6751%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4251%" y="373" width="0.0805%" height="15" fill="rgb(240,227,30)" fg:x="204" fg:w="1"/><text x="16.6751%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.4251%" y="357" width="0.0805%" height="15" fill="rgb(215,224,45)" fg:x="204" fg:w="1"/><text x="16.6751%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.4251%" y="341" width="0.0805%" height="15" fill="rgb(206,123,31)" fg:x="204" fg:w="1"/><text x="16.6751%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.4251%" y="325" width="0.0805%" height="15" fill="rgb(210,138,16)" fg:x="204" fg:w="1"/><text x="16.6751%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5056%" y="453" width="0.0805%" height="15" fill="rgb(228,57,28)" fg:x="205" fg:w="1"/><text x="16.7556%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5056%" y="437" width="0.0805%" height="15" fill="rgb(242,170,10)" fg:x="205" fg:w="1"/><text x="16.7556%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5056%" y="421" width="0.0805%" height="15" fill="rgb(228,214,39)" fg:x="205" fg:w="1"/><text x="16.7556%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5056%" y="405" width="0.0805%" height="15" fill="rgb(218,179,33)" fg:x="205" fg:w="1"/><text x="16.7556%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.5056%" y="389" width="0.0805%" height="15" fill="rgb(235,193,39)" fg:x="205" fg:w="1"/><text x="16.7556%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.5056%" y="373" width="0.0805%" height="15" fill="rgb(219,221,36)" fg:x="205" fg:w="1"/><text x="16.7556%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.5056%" y="357" width="0.0805%" height="15" fill="rgb(248,218,19)" fg:x="205" fg:w="1"/><text x="16.7556%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.5056%" y="341" width="0.0805%" height="15" fill="rgb(205,50,9)" fg:x="205" fg:w="1"/><text x="16.7556%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.5056%" y="325" width="0.0805%" height="15" fill="rgb(238,81,28)" fg:x="205" fg:w="1"/><text x="16.7556%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.6667%" y="389" width="0.0805%" height="15" fill="rgb(235,110,19)" fg:x="207" fg:w="1"/><text x="16.9167%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6667%" y="373" width="0.0805%" height="15" fill="rgb(214,7,14)" fg:x="207" fg:w="1"/><text x="16.9167%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (3 samples, 0.24%)</title><rect x="16.5862%" y="453" width="0.2415%" height="15" fill="rgb(211,77,3)" fg:x="206" fg:w="3"/><text x="16.8362%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="16.5862%" y="437" width="0.2415%" height="15" fill="rgb(229,5,9)" fg:x="206" fg:w="3"/><text x="16.8362%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.6667%" y="421" width="0.1610%" height="15" fill="rgb(225,90,11)" fg:x="207" fg:w="2"/><text x="16.9167%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.6667%" y="405" width="0.1610%" height="15" fill="rgb(242,56,8)" fg:x="207" fg:w="2"/><text x="16.9167%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.7472%" y="389" width="0.0805%" height="15" fill="rgb(249,212,39)" fg:x="208" fg:w="1"/><text x="16.9972%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7472%" y="373" width="0.0805%" height="15" fill="rgb(236,90,9)" fg:x="208" fg:w="1"/><text x="16.9972%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9887%" y="325" width="0.0805%" height="15" fill="rgb(206,88,35)" fg:x="211" fg:w="1"/><text x="17.2387%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="16.5056%" y="501" width="0.6441%" height="15" fill="rgb(205,126,30)" fg:x="205" fg:w="8"/><text x="16.7556%" y="511.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.64%)</title><rect x="16.5056%" y="485" width="0.6441%" height="15" fill="rgb(230,176,12)" fg:x="205" fg:w="8"/><text x="16.7556%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.64%)</title><rect x="16.5056%" y="469" width="0.6441%" height="15" fill="rgb(243,19,9)" fg:x="205" fg:w="8"/><text x="16.7556%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="16.8277%" y="453" width="0.3221%" height="15" fill="rgb(245,171,17)" fg:x="209" fg:w="4"/><text x="17.0777%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="16.8277%" y="437" width="0.3221%" height="15" fill="rgb(227,52,21)" fg:x="209" fg:w="4"/><text x="17.0777%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="16.8277%" y="421" width="0.3221%" height="15" fill="rgb(238,69,14)" fg:x="209" fg:w="4"/><text x="17.0777%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="16.8277%" y="405" width="0.3221%" height="15" fill="rgb(241,156,39)" fg:x="209" fg:w="4"/><text x="17.0777%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="16.8277%" y="389" width="0.3221%" height="15" fill="rgb(212,227,28)" fg:x="209" fg:w="4"/><text x="17.0777%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.9082%" y="373" width="0.2415%" height="15" fill="rgb(209,118,27)" fg:x="210" fg:w="3"/><text x="17.1582%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (3 samples, 0.24%)</title><rect x="16.9082%" y="357" width="0.2415%" height="15" fill="rgb(226,102,5)" fg:x="210" fg:w="3"/><text x="17.1582%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="16.9082%" y="341" width="0.2415%" height="15" fill="rgb(223,34,3)" fg:x="210" fg:w="3"/><text x="17.1582%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.0692%" y="325" width="0.0805%" height="15" fill="rgb(221,81,38)" fg:x="212" fg:w="1"/><text x="17.3192%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0692%" y="309" width="0.0805%" height="15" fill="rgb(236,219,28)" fg:x="212" fg:w="1"/><text x="17.3192%" y="319.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="17.0692%" y="293" width="0.0805%" height="15" fill="rgb(213,200,14)" fg:x="212" fg:w="1"/><text x="17.3192%" y="303.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="17.3913%" y="405" width="0.0805%" height="15" fill="rgb(240,33,19)" fg:x="216" fg:w="1"/><text x="17.6413%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="17.3913%" y="389" width="0.0805%" height="15" fill="rgb(233,113,27)" fg:x="216" fg:w="1"/><text x="17.6413%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.3913%" y="373" width="0.0805%" height="15" fill="rgb(220,221,18)" fg:x="216" fg:w="1"/><text x="17.6413%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.3913%" y="357" width="0.0805%" height="15" fill="rgb(238,92,8)" fg:x="216" fg:w="1"/><text x="17.6413%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.3913%" y="341" width="0.0805%" height="15" fill="rgb(222,164,16)" fg:x="216" fg:w="1"/><text x="17.6413%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.3913%" y="325" width="0.0805%" height="15" fill="rgb(241,119,3)" fg:x="216" fg:w="1"/><text x="17.6413%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.3913%" y="309" width="0.0805%" height="15" fill="rgb(241,44,8)" fg:x="216" fg:w="1"/><text x="17.6413%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.3913%" y="293" width="0.0805%" height="15" fill="rgb(230,36,40)" fg:x="216" fg:w="1"/><text x="17.6413%" y="303.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="17.3913%" y="277" width="0.0805%" height="15" fill="rgb(243,16,36)" fg:x="216" fg:w="1"/><text x="17.6413%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.3913%" y="261" width="0.0805%" height="15" fill="rgb(231,4,26)" fg:x="216" fg:w="1"/><text x="17.6413%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="17.3913%" y="421" width="0.1610%" height="15" fill="rgb(240,9,31)" fg:x="216" fg:w="2"/><text x="17.6413%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.4718%" y="405" width="0.0805%" height="15" fill="rgb(207,173,15)" fg:x="217" fg:w="1"/><text x="17.7218%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.4718%" y="389" width="0.0805%" height="15" fill="rgb(224,192,53)" fg:x="217" fg:w="1"/><text x="17.7218%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.4718%" y="373" width="0.0805%" height="15" fill="rgb(223,67,28)" fg:x="217" fg:w="1"/><text x="17.7218%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.4718%" y="357" width="0.0805%" height="15" fill="rgb(211,20,47)" fg:x="217" fg:w="1"/><text x="17.7218%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.4718%" y="341" width="0.0805%" height="15" fill="rgb(240,228,2)" fg:x="217" fg:w="1"/><text x="17.7218%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.4718%" y="325" width="0.0805%" height="15" fill="rgb(248,151,12)" fg:x="217" fg:w="1"/><text x="17.7218%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.4718%" y="309" width="0.0805%" height="15" fill="rgb(244,8,39)" fg:x="217" fg:w="1"/><text x="17.7218%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.4718%" y="293" width="0.0805%" height="15" fill="rgb(222,26,8)" fg:x="217" fg:w="1"/><text x="17.7218%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.4718%" y="277" width="0.0805%" height="15" fill="rgb(213,106,44)" fg:x="217" fg:w="1"/><text x="17.7218%" y="287.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="17.1498%" y="501" width="0.4831%" height="15" fill="rgb(214,129,20)" fg:x="213" fg:w="6"/><text x="17.3998%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="17.1498%" y="485" width="0.4831%" height="15" fill="rgb(212,32,13)" fg:x="213" fg:w="6"/><text x="17.3998%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (5 samples, 0.40%)</title><rect x="17.2303%" y="469" width="0.4026%" height="15" fill="rgb(208,168,33)" fg:x="214" fg:w="5"/><text x="17.4803%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (4 samples, 0.32%)</title><rect x="17.3108%" y="453" width="0.3221%" height="15" fill="rgb(231,207,8)" fg:x="215" fg:w="4"/><text x="17.5608%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (3 samples, 0.24%)</title><rect x="17.3913%" y="437" width="0.2415%" height="15" fill="rgb(235,219,23)" fg:x="216" fg:w="3"/><text x="17.6413%" y="447.50"></text></g><g><title>kernel::model::base::When::to_utc_time (1 samples, 0.08%)</title><rect x="17.5523%" y="421" width="0.0805%" height="15" fill="rgb(226,216,26)" fg:x="218" fg:w="1"/><text x="17.8023%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.7134%" y="453" width="0.0805%" height="15" fill="rgb(239,137,16)" fg:x="220" fg:w="1"/><text x="17.9634%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.7134%" y="437" width="0.0805%" height="15" fill="rgb(207,12,36)" fg:x="220" fg:w="1"/><text x="17.9634%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.7134%" y="421" width="0.0805%" height="15" fill="rgb(210,214,24)" fg:x="220" fg:w="1"/><text x="17.9634%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.7134%" y="405" width="0.0805%" height="15" fill="rgb(206,56,30)" fg:x="220" fg:w="1"/><text x="17.9634%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.7134%" y="389" width="0.0805%" height="15" fill="rgb(228,143,26)" fg:x="220" fg:w="1"/><text x="17.9634%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.8744%" y="421" width="0.0805%" height="15" fill="rgb(216,218,46)" fg:x="222" fg:w="1"/><text x="18.1244%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.8744%" y="405" width="0.0805%" height="15" fill="rgb(206,6,19)" fg:x="222" fg:w="1"/><text x="18.1244%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.8744%" y="389" width="0.0805%" height="15" fill="rgb(239,177,51)" fg:x="222" fg:w="1"/><text x="18.1244%" y="399.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="17.8744%" y="373" width="0.0805%" height="15" fill="rgb(216,55,25)" fg:x="222" fg:w="1"/><text x="18.1244%" y="383.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.8744%" y="357" width="0.0805%" height="15" fill="rgb(231,163,29)" fg:x="222" fg:w="1"/><text x="18.1244%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="18.1159%" y="341" width="0.0805%" height="15" fill="rgb(232,149,50)" fg:x="225" fg:w="1"/><text x="18.3659%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="18.1159%" y="325" width="0.0805%" height="15" fill="rgb(223,142,48)" fg:x="225" fg:w="1"/><text x="18.3659%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="18.0354%" y="357" width="0.3221%" height="15" fill="rgb(245,83,23)" fg:x="224" fg:w="4"/><text x="18.2854%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="18.1965%" y="341" width="0.1610%" height="15" fill="rgb(224,63,2)" fg:x="226" fg:w="2"/><text x="18.4465%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2770%" y="325" width="0.0805%" height="15" fill="rgb(218,65,53)" fg:x="227" fg:w="1"/><text x="18.5270%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.2770%" y="309" width="0.0805%" height="15" fill="rgb(221,84,29)" fg:x="227" fg:w="1"/><text x="18.5270%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.3575%" y="325" width="0.0805%" height="15" fill="rgb(234,0,32)" fg:x="228" fg:w="1"/><text x="18.6075%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.3575%" y="309" width="0.0805%" height="15" fill="rgb(206,20,16)" fg:x="228" fg:w="1"/><text x="18.6075%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.3575%" y="293" width="0.0805%" height="15" fill="rgb(244,172,18)" fg:x="228" fg:w="1"/><text x="18.6075%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="17.9549%" y="405" width="0.5636%" height="15" fill="rgb(254,133,1)" fg:x="223" fg:w="7"/><text x="18.2049%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.48%)</title><rect x="18.0354%" y="389" width="0.4831%" height="15" fill="rgb(222,206,41)" fg:x="224" fg:w="6"/><text x="18.2854%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.48%)</title><rect x="18.0354%" y="373" width="0.4831%" height="15" fill="rgb(212,3,42)" fg:x="224" fg:w="6"/><text x="18.2854%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="18.3575%" y="357" width="0.1610%" height="15" fill="rgb(241,11,4)" fg:x="228" fg:w="2"/><text x="18.6075%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="18.3575%" y="341" width="0.1610%" height="15" fill="rgb(205,19,26)" fg:x="228" fg:w="2"/><text x="18.6075%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4380%" y="325" width="0.0805%" height="15" fill="rgb(210,179,32)" fg:x="229" fg:w="1"/><text x="18.6880%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.4380%" y="309" width="0.0805%" height="15" fill="rgb(227,116,49)" fg:x="229" fg:w="1"/><text x="18.6880%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="18.4380%" y="293" width="0.0805%" height="15" fill="rgb(211,146,6)" fg:x="229" fg:w="1"/><text x="18.6880%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="17.9549%" y="421" width="0.6441%" height="15" fill="rgb(219,44,39)" fg:x="223" fg:w="8"/><text x="18.2049%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="18.5185%" y="405" width="0.0805%" height="15" fill="rgb(234,128,11)" fg:x="230" fg:w="1"/><text x="18.7685%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.5990%" y="405" width="0.0805%" height="15" fill="rgb(220,183,53)" fg:x="231" fg:w="1"/><text x="18.8490%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.6795%" y="373" width="0.0805%" height="15" fill="rgb(213,219,32)" fg:x="232" fg:w="1"/><text x="18.9295%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.6795%" y="357" width="0.0805%" height="15" fill="rgb(232,156,16)" fg:x="232" fg:w="1"/><text x="18.9295%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.8406%" y="357" width="0.0805%" height="15" fill="rgb(246,135,34)" fg:x="234" fg:w="1"/><text x="19.0906%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="18.6795%" y="389" width="0.3221%" height="15" fill="rgb(241,99,0)" fg:x="232" fg:w="4"/><text x="18.9295%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (3 samples, 0.24%)</title><rect x="18.7601%" y="373" width="0.2415%" height="15" fill="rgb(222,103,45)" fg:x="233" fg:w="3"/><text x="19.0101%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.9211%" y="357" width="0.0805%" height="15" fill="rgb(212,57,4)" fg:x="235" fg:w="1"/><text x="19.1711%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.9211%" y="341" width="0.0805%" height="15" fill="rgb(215,68,47)" fg:x="235" fg:w="1"/><text x="19.1711%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.9211%" y="325" width="0.0805%" height="15" fill="rgb(230,84,2)" fg:x="235" fg:w="1"/><text x="19.1711%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="19.0016%" y="373" width="0.0805%" height="15" fill="rgb(220,102,14)" fg:x="236" fg:w="1"/><text x="19.2516%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="19.0821%" y="373" width="0.1610%" height="15" fill="rgb(240,10,32)" fg:x="237" fg:w="2"/><text x="19.3321%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.1626%" y="357" width="0.0805%" height="15" fill="rgb(215,47,27)" fg:x="238" fg:w="1"/><text x="19.4126%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.72%)</title><rect x="18.5990%" y="421" width="0.7246%" height="15" fill="rgb(233,188,43)" fg:x="231" fg:w="9"/><text x="18.8490%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="18.6795%" y="405" width="0.6441%" height="15" fill="rgb(253,190,1)" fg:x="232" fg:w="8"/><text x="18.9295%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="19.0016%" y="389" width="0.3221%" height="15" fill="rgb(206,114,52)" fg:x="236" fg:w="4"/><text x="19.2516%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="19.2432%" y="373" width="0.0805%" height="15" fill="rgb(233,120,37)" fg:x="239" fg:w="1"/><text x="19.4932%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2432%" y="357" width="0.0805%" height="15" fill="rgb(214,52,39)" fg:x="239" fg:w="1"/><text x="19.4932%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.4042%" y="405" width="0.0805%" height="15" fill="rgb(223,80,29)" fg:x="241" fg:w="1"/><text x="19.6542%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.5652%" y="373" width="0.0805%" height="15" fill="rgb(230,101,40)" fg:x="243" fg:w="1"/><text x="19.8152%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="19.6457%" y="373" width="0.0805%" height="15" fill="rgb(219,211,8)" fg:x="244" fg:w="1"/><text x="19.8957%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="19.7262%" y="373" width="0.0805%" height="15" fill="rgb(252,126,28)" fg:x="245" fg:w="1"/><text x="19.9762%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.7262%" y="357" width="0.0805%" height="15" fill="rgb(215,56,38)" fg:x="245" fg:w="1"/><text x="19.9762%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="19.7262%" y="341" width="0.0805%" height="15" fill="rgb(249,55,44)" fg:x="245" fg:w="1"/><text x="19.9762%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8068%" y="357" width="0.0805%" height="15" fill="rgb(220,221,32)" fg:x="246" fg:w="1"/><text x="20.0568%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.1288%" y="341" width="0.0805%" height="15" fill="rgb(212,216,41)" fg:x="250" fg:w="1"/><text x="20.3788%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.21%)</title><rect x="20.2093%" y="341" width="1.2077%" height="15" fill="rgb(228,213,43)" fg:x="251" fg:w="15"/><text x="20.4593%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="21.1755%" y="325" width="0.2415%" height="15" fill="rgb(211,31,26)" fg:x="263" fg:w="3"/><text x="21.4255%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.61%)</title><rect x="19.8873%" y="357" width="1.6103%" height="15" fill="rgb(229,202,19)" fg:x="247" fg:w="20"/><text x="20.1373%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="21.4171%" y="341" width="0.0805%" height="15" fill="rgb(229,105,46)" fg:x="266" fg:w="1"/><text x="21.6671%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10 samples, 0.81%)</title><rect x="21.4976%" y="357" width="0.8052%" height="15" fill="rgb(235,108,1)" fg:x="267" fg:w="10"/><text x="21.7476%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="21.5781%" y="341" width="0.7246%" height="15" fill="rgb(245,111,35)" fg:x="268" fg:w="9"/><text x="21.8281%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="22.3027%" y="357" width="0.0805%" height="15" fill="rgb(219,185,31)" fg:x="277" fg:w="1"/><text x="22.5527%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="22.3027%" y="341" width="0.0805%" height="15" fill="rgb(214,4,43)" fg:x="277" fg:w="1"/><text x="22.5527%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="22.3833%" y="325" width="0.0805%" height="15" fill="rgb(235,227,40)" fg:x="278" fg:w="1"/><text x="22.6333%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="22.5443%" y="293" width="0.1610%" height="15" fill="rgb(230,88,30)" fg:x="280" fg:w="2"/><text x="22.7943%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.7053%" y="293" width="0.0805%" height="15" fill="rgb(216,217,1)" fg:x="282" fg:w="1"/><text x="22.9553%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="22.7858%" y="293" width="0.3221%" height="15" fill="rgb(248,139,50)" fg:x="283" fg:w="4"/><text x="23.0358%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="22.7858%" y="277" width="0.3221%" height="15" fill="rgb(233,1,21)" fg:x="283" fg:w="4"/><text x="23.0358%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="22.7858%" y="261" width="0.3221%" height="15" fill="rgb(215,183,12)" fg:x="283" fg:w="4"/><text x="23.0358%" y="271.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="22.8663%" y="245" width="0.2415%" height="15" fill="rgb(229,104,42)" fg:x="284" fg:w="3"/><text x="23.1163%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="23.1079%" y="293" width="0.1610%" height="15" fill="rgb(243,34,48)" fg:x="287" fg:w="2"/><text x="23.3579%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="23.2689%" y="293" width="0.2415%" height="15" fill="rgb(239,11,44)" fg:x="289" fg:w="3"/><text x="23.5189%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="23.2689%" y="277" width="0.2415%" height="15" fill="rgb(231,98,35)" fg:x="289" fg:w="3"/><text x="23.5189%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="23.4300%" y="261" width="0.0805%" height="15" fill="rgb(233,28,25)" fg:x="291" fg:w="1"/><text x="23.6800%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4300%" y="245" width="0.0805%" height="15" fill="rgb(234,123,11)" fg:x="291" fg:w="1"/><text x="23.6800%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.5105%" y="261" width="0.0805%" height="15" fill="rgb(220,69,3)" fg:x="292" fg:w="1"/><text x="23.7605%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="23.5105%" y="293" width="0.1610%" height="15" fill="rgb(214,64,36)" fg:x="292" fg:w="2"/><text x="23.7605%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="23.5105%" y="277" width="0.1610%" height="15" fill="rgb(211,138,32)" fg:x="292" fg:w="2"/><text x="23.7605%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.5910%" y="261" width="0.0805%" height="15" fill="rgb(213,118,47)" fg:x="293" fg:w="1"/><text x="23.8410%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (96 samples, 7.73%)</title><rect x="23.6715%" y="293" width="7.7295%" height="15" fill="rgb(243,124,49)" fg:x="294" fg:w="96"/><text x="23.9215%" y="303.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (95 samples, 7.65%)</title><rect x="23.7520%" y="277" width="7.6490%" height="15" fill="rgb(221,30,28)" fg:x="295" fg:w="95"/><text x="24.0020%" y="287.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (95 samples, 7.65%)</title><rect x="23.7520%" y="261" width="7.6490%" height="15" fill="rgb(246,37,13)" fg:x="295" fg:w="95"/><text x="24.0020%" y="271.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="31.4010%" y="293" width="0.4026%" height="15" fill="rgb(249,66,14)" fg:x="390" fg:w="5"/><text x="31.6510%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7230%" y="277" width="0.0805%" height="15" fill="rgb(213,166,5)" fg:x="394" fg:w="1"/><text x="31.9730%" y="287.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="31.8035%" y="293" width="0.0805%" height="15" fill="rgb(221,66,24)" fg:x="395" fg:w="1"/><text x="32.0535%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.9646%" y="245" width="0.1610%" height="15" fill="rgb(210,132,17)" fg:x="397" fg:w="2"/><text x="32.2146%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (122 samples, 9.82%)</title><rect x="22.3833%" y="341" width="9.8229%" height="15" fill="rgb(243,202,5)" fg:x="278" fg:w="122"/><text x="22.6333%" y="351.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (121 samples, 9.74%)</title><rect x="22.4638%" y="325" width="9.7424%" height="15" fill="rgb(233,70,48)" fg:x="279" fg:w="121"/><text x="22.7138%" y="335.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (121 samples, 9.74%)</title><rect x="22.4638%" y="309" width="9.7424%" height="15" fill="rgb(238,41,26)" fg:x="279" fg:w="121"/><text x="22.7138%" y="319.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="31.8841%" y="293" width="0.3221%" height="15" fill="rgb(241,19,31)" fg:x="396" fg:w="4"/><text x="32.1341%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="31.8841%" y="277" width="0.3221%" height="15" fill="rgb(214,76,10)" fg:x="396" fg:w="4"/><text x="32.1341%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="31.8841%" y="261" width="0.3221%" height="15" fill="rgb(254,202,22)" fg:x="396" fg:w="4"/><text x="32.1341%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="32.1256%" y="245" width="0.0805%" height="15" fill="rgb(214,72,24)" fg:x="399" fg:w="1"/><text x="32.3756%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="32.1256%" y="229" width="0.0805%" height="15" fill="rgb(221,92,46)" fg:x="399" fg:w="1"/><text x="32.3756%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.4477%" y="325" width="0.0805%" height="15" fill="rgb(246,13,50)" fg:x="403" fg:w="1"/><text x="32.6977%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.5282%" y="325" width="0.0805%" height="15" fill="rgb(240,165,38)" fg:x="404" fg:w="1"/><text x="32.7782%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.6087%" y="325" width="0.0805%" height="15" fill="rgb(241,24,51)" fg:x="405" fg:w="1"/><text x="32.8587%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="32.6892%" y="325" width="0.2415%" height="15" fill="rgb(227,51,44)" fg:x="406" fg:w="3"/><text x="32.9392%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.8502%" y="309" width="0.0805%" height="15" fill="rgb(231,121,3)" fg:x="408" fg:w="1"/><text x="33.1002%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.8502%" y="293" width="0.0805%" height="15" fill="rgb(245,3,41)" fg:x="408" fg:w="1"/><text x="33.1002%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.8502%" y="277" width="0.0805%" height="15" fill="rgb(214,13,26)" fg:x="408" fg:w="1"/><text x="33.1002%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (141 samples, 11.35%)</title><rect x="22.3833%" y="357" width="11.3527%" height="15" fill="rgb(252,75,11)" fg:x="278" fg:w="141"/><text x="22.6333%" y="367.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (19 samples, 1.53%)</title><rect x="32.2061%" y="341" width="1.5298%" height="15" fill="rgb(218,226,17)" fg:x="400" fg:w="19"/><text x="32.4561%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (10 samples, 0.81%)</title><rect x="32.9308%" y="325" width="0.8052%" height="15" fill="rgb(248,89,38)" fg:x="409" fg:w="10"/><text x="33.1808%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.6554%" y="309" width="0.0805%" height="15" fill="rgb(237,73,46)" fg:x="418" fg:w="1"/><text x="33.9054%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.6554%" y="293" width="0.0805%" height="15" fill="rgb(242,78,33)" fg:x="418" fg:w="1"/><text x="33.9054%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.6554%" y="277" width="0.0805%" height="15" fill="rgb(235,60,3)" fg:x="418" fg:w="1"/><text x="33.9054%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::configure (1 samples, 0.08%)</title><rect x="33.7359%" y="357" width="0.0805%" height="15" fill="rgb(216,172,19)" fg:x="419" fg:w="1"/><text x="33.9859%" y="367.50"></text></g><g><title>regex_automata::meta::strategy::new (175 samples, 14.09%)</title><rect x="19.8068%" y="373" width="14.0902%" height="15" fill="rgb(227,6,42)" fg:x="246" fg:w="175"/><text x="20.0568%" y="383.50">regex_automata::meta:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="33.8164%" y="357" width="0.0805%" height="15" fill="rgb(223,207,42)" fg:x="420" fg:w="1"/><text x="34.0664%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="33.8164%" y="341" width="0.0805%" height="15" fill="rgb(246,138,30)" fg:x="420" fg:w="1"/><text x="34.0664%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="33.8164%" y="325" width="0.0805%" height="15" fill="rgb(251,199,47)" fg:x="420" fg:w="1"/><text x="34.0664%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="34.0580%" y="325" width="0.0805%" height="15" fill="rgb(228,218,44)" fg:x="423" fg:w="1"/><text x="34.3080%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="34.0580%" y="309" width="0.0805%" height="15" fill="rgb(220,68,6)" fg:x="423" fg:w="1"/><text x="34.3080%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="34.1385%" y="325" width="0.0805%" height="15" fill="rgb(240,60,26)" fg:x="424" fg:w="1"/><text x="34.3885%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="34.2190%" y="309" width="0.4831%" height="15" fill="rgb(211,200,19)" fg:x="425" fg:w="6"/><text x="34.4690%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="34.2190%" y="293" width="0.4831%" height="15" fill="rgb(242,145,30)" fg:x="425" fg:w="6"/><text x="34.4690%" y="303.50"></text></g><g><title>__libc_malloc (6 samples, 0.48%)</title><rect x="34.2190%" y="277" width="0.4831%" height="15" fill="rgb(225,64,13)" fg:x="425" fg:w="6"/><text x="34.4690%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.72%)</title><rect x="34.0580%" y="341" width="0.7246%" height="15" fill="rgb(218,103,35)" fg:x="423" fg:w="9"/><text x="34.3080%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="34.2190%" y="325" width="0.5636%" height="15" fill="rgb(216,93,46)" fg:x="425" fg:w="7"/><text x="34.4690%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="34.7021%" y="309" width="0.0805%" height="15" fill="rgb(225,159,27)" fg:x="431" fg:w="1"/><text x="34.9521%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="34.7021%" y="293" width="0.0805%" height="15" fill="rgb(225,204,11)" fg:x="431" fg:w="1"/><text x="34.9521%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.97%)</title><rect x="33.8969%" y="373" width="0.9662%" height="15" fill="rgb(205,56,4)" fg:x="421" fg:w="12"/><text x="34.1469%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.97%)</title><rect x="33.8969%" y="357" width="0.9662%" height="15" fill="rgb(206,6,35)" fg:x="421" fg:w="12"/><text x="34.1469%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="34.7826%" y="341" width="0.0805%" height="15" fill="rgb(247,73,52)" fg:x="432" fg:w="1"/><text x="35.0326%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="34.8631%" y="325" width="0.2415%" height="15" fill="rgb(246,97,4)" fg:x="433" fg:w="3"/><text x="35.1131%" y="335.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="35.0242%" y="309" width="0.0805%" height="15" fill="rgb(212,37,15)" fg:x="435" fg:w="1"/><text x="35.2742%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="35.1047%" y="325" width="0.0805%" height="15" fill="rgb(208,130,40)" fg:x="436" fg:w="1"/><text x="35.3547%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="34.8631%" y="341" width="0.4026%" height="15" fill="rgb(236,55,29)" fg:x="433" fg:w="5"/><text x="35.1131%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_unicode_class (1 samples, 0.08%)</title><rect x="35.1852%" y="325" width="0.0805%" height="15" fill="rgb(209,156,45)" fg:x="437" fg:w="1"/><text x="35.4352%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="35.2657%" y="341" width="0.0805%" height="15" fill="rgb(249,107,4)" fg:x="438" fg:w="1"/><text x="35.5157%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="35.2657%" y="325" width="0.0805%" height="15" fill="rgb(227,7,13)" fg:x="438" fg:w="1"/><text x="35.5157%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (198 samples, 15.94%)</title><rect x="19.4847%" y="389" width="15.9420%" height="15" fill="rgb(250,129,14)" fg:x="242" fg:w="198"/><text x="19.7347%" y="399.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="34.8631%" y="373" width="0.5636%" height="15" fill="rgb(229,92,13)" fg:x="433" fg:w="7"/><text x="35.1131%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="34.8631%" y="357" width="0.5636%" height="15" fill="rgb(245,98,39)" fg:x="433" fg:w="7"/><text x="35.1131%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.3462%" y="341" width="0.0805%" height="15" fill="rgb(234,135,48)" fg:x="439" fg:w="1"/><text x="35.5962%" y="351.50"></text></g><g><title>regex::regex::string::Regex::new (201 samples, 16.18%)</title><rect x="19.3237%" y="421" width="16.1836%" height="15" fill="rgb(230,98,28)" fg:x="240" fg:w="201"/><text x="19.5737%" y="431.50">regex::regex::string::Reg..</text></g><g><title>regex::builders::Builder::build_one_string (199 samples, 16.02%)</title><rect x="19.4847%" y="405" width="16.0225%" height="15" fill="rgb(223,121,0)" fg:x="242" fg:w="199"/><text x="19.7347%" y="415.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Config::match_kind (1 samples, 0.08%)</title><rect x="35.4267%" y="389" width="0.0805%" height="15" fill="rgb(234,173,33)" fg:x="440" fg:w="1"/><text x="35.6767%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5072%" y="357" width="0.0805%" height="15" fill="rgb(245,47,8)" fg:x="441" fg:w="1"/><text x="35.7572%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.5072%" y="341" width="0.0805%" height="15" fill="rgb(205,17,20)" fg:x="441" fg:w="1"/><text x="35.7572%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="36.3124%" y="341" width="0.2415%" height="15" fill="rgb(232,151,16)" fg:x="451" fg:w="3"/><text x="36.5624%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="36.3124%" y="325" width="0.2415%" height="15" fill="rgb(208,30,32)" fg:x="451" fg:w="3"/><text x="36.5624%" y="335.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="36.3124%" y="309" width="0.2415%" height="15" fill="rgb(254,26,3)" fg:x="451" fg:w="3"/><text x="36.5624%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.21%)</title><rect x="35.5878%" y="357" width="1.2077%" height="15" fill="rgb(240,177,30)" fg:x="442" fg:w="15"/><text x="35.8378%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="36.5539%" y="341" width="0.2415%" height="15" fill="rgb(248,76,44)" fg:x="454" fg:w="3"/><text x="36.8039%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.37%)</title><rect x="35.5072%" y="373" width="1.3688%" height="15" fill="rgb(241,186,54)" fg:x="441" fg:w="17"/><text x="35.7572%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="36.7955%" y="357" width="0.0805%" height="15" fill="rgb(249,171,29)" fg:x="457" fg:w="1"/><text x="37.0455%" y="367.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (241 samples, 19.40%)</title><rect x="17.7939%" y="437" width="19.4042%" height="15" fill="rgb(237,151,44)" fg:x="221" fg:w="241"/><text x="18.0439%" y="447.50">indefinite::helper::Helper::ge..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.69%)</title><rect x="35.5072%" y="421" width="1.6908%" height="15" fill="rgb(228,174,30)" fg:x="441" fg:w="21"/><text x="35.7572%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.69%)</title><rect x="35.5072%" y="405" width="1.6908%" height="15" fill="rgb(252,14,37)" fg:x="441" fg:w="21"/><text x="35.7572%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.69%)</title><rect x="35.5072%" y="389" width="1.6908%" height="15" fill="rgb(207,111,40)" fg:x="441" fg:w="21"/><text x="35.7572%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (4 samples, 0.32%)</title><rect x="36.8760%" y="373" width="0.3221%" height="15" fill="rgb(248,171,54)" fg:x="458" fg:w="4"/><text x="37.1260%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (3 samples, 0.24%)</title><rect x="36.9565%" y="357" width="0.2415%" height="15" fill="rgb(211,127,2)" fg:x="459" fg:w="3"/><text x="37.2065%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="37.0370%" y="341" width="0.1610%" height="15" fill="rgb(236,87,47)" fg:x="460" fg:w="2"/><text x="37.2870%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.0370%" y="325" width="0.1610%" height="15" fill="rgb(223,190,45)" fg:x="460" fg:w="2"/><text x="37.2870%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.1176%" y="309" width="0.0805%" height="15" fill="rgb(215,5,16)" fg:x="461" fg:w="1"/><text x="37.3676%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="37.1981%" y="389" width="0.1610%" height="15" fill="rgb(252,82,33)" fg:x="462" fg:w="2"/><text x="37.4481%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="37.1981%" y="373" width="0.1610%" height="15" fill="rgb(247,213,44)" fg:x="462" fg:w="2"/><text x="37.4481%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="37.1981%" y="357" width="0.1610%" height="15" fill="rgb(205,196,44)" fg:x="462" fg:w="2"/><text x="37.4481%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.2786%" y="341" width="0.0805%" height="15" fill="rgb(237,96,54)" fg:x="463" fg:w="1"/><text x="37.5286%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.2786%" y="325" width="0.0805%" height="15" fill="rgb(230,113,34)" fg:x="463" fg:w="1"/><text x="37.5286%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="37.1981%" y="421" width="0.3221%" height="15" fill="rgb(221,224,12)" fg:x="462" fg:w="4"/><text x="37.4481%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="37.1981%" y="405" width="0.3221%" height="15" fill="rgb(219,112,44)" fg:x="462" fg:w="4"/><text x="37.4481%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="37.3591%" y="389" width="0.1610%" height="15" fill="rgb(210,31,13)" fg:x="464" fg:w="2"/><text x="37.6091%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="37.3591%" y="373" width="0.1610%" height="15" fill="rgb(230,25,16)" fg:x="464" fg:w="2"/><text x="37.6091%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4396%" y="357" width="0.0805%" height="15" fill="rgb(246,108,53)" fg:x="465" fg:w="1"/><text x="37.6896%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="37.5201%" y="405" width="0.0805%" height="15" fill="rgb(241,172,50)" fg:x="466" fg:w="1"/><text x="37.7701%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="37.5201%" y="389" width="0.0805%" height="15" fill="rgb(235,141,10)" fg:x="466" fg:w="1"/><text x="37.7701%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="37.5201%" y="373" width="0.0805%" height="15" fill="rgb(220,174,43)" fg:x="466" fg:w="1"/><text x="37.7701%" y="383.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="37.5201%" y="357" width="0.0805%" height="15" fill="rgb(215,181,40)" fg:x="466" fg:w="1"/><text x="37.7701%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="38.7279%" y="325" width="0.1610%" height="15" fill="rgb(230,97,2)" fg:x="481" fg:w="2"/><text x="38.9779%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.7279%" y="309" width="0.1610%" height="15" fill="rgb(211,25,27)" fg:x="481" fg:w="2"/><text x="38.9779%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.7279%" y="293" width="0.1610%" height="15" fill="rgb(230,87,26)" fg:x="481" fg:w="2"/><text x="38.9779%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (24 samples, 1.93%)</title><rect x="37.5201%" y="421" width="1.9324%" height="15" fill="rgb(227,160,17)" fg:x="466" fg:w="24"/><text x="37.7701%" y="431.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (23 samples, 1.85%)</title><rect x="37.6006%" y="405" width="1.8519%" height="15" fill="rgb(244,85,34)" fg:x="467" fg:w="23"/><text x="37.8506%" y="415.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (23 samples, 1.85%)</title><rect x="37.6006%" y="389" width="1.8519%" height="15" fill="rgb(207,70,0)" fg:x="467" fg:w="23"/><text x="37.8506%" y="399.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (23 samples, 1.85%)</title><rect x="37.6006%" y="373" width="1.8519%" height="15" fill="rgb(223,129,7)" fg:x="467" fg:w="23"/><text x="37.8506%" y="383.50">&lt;..</text></g><g><title>regex_automata::hybrid::dfa::Cache::new (23 samples, 1.85%)</title><rect x="37.6006%" y="357" width="1.8519%" height="15" fill="rgb(246,105,7)" fg:x="467" fg:w="23"/><text x="37.8506%" y="367.50">r..</text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (23 samples, 1.85%)</title><rect x="37.6006%" y="341" width="1.8519%" height="15" fill="rgb(215,154,42)" fg:x="467" fg:w="23"/><text x="37.8506%" y="351.50">r..</text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (7 samples, 0.56%)</title><rect x="38.8889%" y="325" width="0.5636%" height="15" fill="rgb(220,215,30)" fg:x="483" fg:w="7"/><text x="39.1389%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="39.4525%" y="389" width="0.0805%" height="15" fill="rgb(228,81,51)" fg:x="490" fg:w="1"/><text x="39.7025%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="39.4525%" y="405" width="0.1610%" height="15" fill="rgb(247,71,54)" fg:x="490" fg:w="2"/><text x="39.7025%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.5330%" y="389" width="0.0805%" height="15" fill="rgb(234,176,34)" fg:x="491" fg:w="1"/><text x="39.7830%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.5330%" y="373" width="0.0805%" height="15" fill="rgb(241,103,54)" fg:x="491" fg:w="1"/><text x="39.7830%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="39.6135%" y="373" width="0.1610%" height="15" fill="rgb(228,22,34)" fg:x="492" fg:w="2"/><text x="39.8635%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="39.6135%" y="357" width="0.1610%" height="15" fill="rgb(241,179,48)" fg:x="492" fg:w="2"/><text x="39.8635%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.6940%" y="341" width="0.0805%" height="15" fill="rgb(235,167,37)" fg:x="493" fg:w="1"/><text x="39.9440%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.7746%" y="373" width="0.0805%" height="15" fill="rgb(213,109,30)" fg:x="494" fg:w="1"/><text x="40.0246%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.24%)</title><rect x="39.8551%" y="341" width="0.2415%" height="15" fill="rgb(222,172,16)" fg:x="495" fg:w="3"/><text x="40.1051%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="39.9356%" y="325" width="0.1610%" height="15" fill="rgb(233,192,5)" fg:x="496" fg:w="2"/><text x="40.1856%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.9356%" y="309" width="0.1610%" height="15" fill="rgb(247,189,41)" fg:x="496" fg:w="2"/><text x="40.1856%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="39.9356%" y="293" width="0.1610%" height="15" fill="rgb(218,134,47)" fg:x="496" fg:w="2"/><text x="40.1856%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="39.8551%" y="373" width="0.3221%" height="15" fill="rgb(216,29,3)" fg:x="495" fg:w="4"/><text x="40.1051%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="39.8551%" y="357" width="0.3221%" height="15" fill="rgb(246,140,12)" fg:x="495" fg:w="4"/><text x="40.1051%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.0966%" y="341" width="0.0805%" height="15" fill="rgb(230,136,11)" fg:x="498" fg:w="1"/><text x="40.3466%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.21%)</title><rect x="40.1771%" y="357" width="1.2077%" height="15" fill="rgb(247,22,47)" fg:x="499" fg:w="15"/><text x="40.4271%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.05%)</title><rect x="40.3382%" y="341" width="1.0467%" height="15" fill="rgb(218,84,22)" fg:x="501" fg:w="13"/><text x="40.5882%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="41.1433%" y="325" width="0.2415%" height="15" fill="rgb(216,87,39)" fg:x="511" fg:w="3"/><text x="41.3933%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="41.5459%" y="341" width="0.0805%" height="15" fill="rgb(221,178,8)" fg:x="516" fg:w="1"/><text x="41.7959%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="41.5459%" y="325" width="0.0805%" height="15" fill="rgb(230,42,11)" fg:x="516" fg:w="1"/><text x="41.7959%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.5459%" y="309" width="0.0805%" height="15" fill="rgb(237,229,4)" fg:x="516" fg:w="1"/><text x="41.7959%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="41.3849%" y="357" width="0.4026%" height="15" fill="rgb(222,31,33)" fg:x="514" fg:w="5"/><text x="41.6349%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="41.6264%" y="341" width="0.1610%" height="15" fill="rgb(210,17,39)" fg:x="517" fg:w="2"/><text x="41.8764%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="42.1095%" y="309" width="0.1610%" height="15" fill="rgb(244,93,20)" fg:x="523" fg:w="2"/><text x="42.3595%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.1095%" y="293" width="0.1610%" height="15" fill="rgb(210,40,47)" fg:x="523" fg:w="2"/><text x="42.3595%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="42.1095%" y="277" width="0.1610%" height="15" fill="rgb(239,211,47)" fg:x="523" fg:w="2"/><text x="42.3595%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="42.1095%" y="325" width="0.2415%" height="15" fill="rgb(251,223,49)" fg:x="523" fg:w="3"/><text x="42.3595%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.2705%" y="309" width="0.0805%" height="15" fill="rgb(221,149,5)" fg:x="525" fg:w="1"/><text x="42.5205%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="42.9952%" y="293" width="0.3221%" height="15" fill="rgb(219,224,51)" fg:x="534" fg:w="4"/><text x="43.2452%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="43.0757%" y="277" width="0.2415%" height="15" fill="rgb(223,7,8)" fg:x="535" fg:w="3"/><text x="43.3257%" y="287.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="43.0757%" y="261" width="0.2415%" height="15" fill="rgb(241,217,22)" fg:x="535" fg:w="3"/><text x="43.3257%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (13 samples, 1.05%)</title><rect x="42.3510%" y="325" width="1.0467%" height="15" fill="rgb(248,209,0)" fg:x="526" fg:w="13"/><text x="42.6010%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (9 samples, 0.72%)</title><rect x="42.6731%" y="309" width="0.7246%" height="15" fill="rgb(217,205,4)" fg:x="530" fg:w="9"/><text x="42.9231%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.3172%" y="293" width="0.0805%" height="15" fill="rgb(228,124,39)" fg:x="538" fg:w="1"/><text x="43.5672%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.3172%" y="277" width="0.0805%" height="15" fill="rgb(250,116,42)" fg:x="538" fg:w="1"/><text x="43.5672%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.3172%" y="261" width="0.0805%" height="15" fill="rgb(223,202,9)" fg:x="538" fg:w="1"/><text x="43.5672%" y="271.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.08%)</title><rect x="43.3977%" y="309" width="0.0805%" height="15" fill="rgb(242,222,40)" fg:x="539" fg:w="1"/><text x="43.6477%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="43.4783%" y="309" width="0.4026%" height="15" fill="rgb(229,99,46)" fg:x="540" fg:w="5"/><text x="43.7283%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="43.4783%" y="293" width="0.4026%" height="15" fill="rgb(225,56,46)" fg:x="540" fg:w="5"/><text x="43.7283%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.56%)</title><rect x="43.3977%" y="325" width="0.5636%" height="15" fill="rgb(227,94,5)" fg:x="539" fg:w="7"/><text x="43.6477%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="43.8808%" y="309" width="0.0805%" height="15" fill="rgb(205,112,38)" fg:x="545" fg:w="1"/><text x="44.1308%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.25%)</title><rect x="41.7874%" y="357" width="2.2544%" height="15" fill="rgb(231,133,46)" fg:x="519" fg:w="28"/><text x="42.0374%" y="367.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (27 samples, 2.17%)</title><rect x="41.8680%" y="341" width="2.1739%" height="15" fill="rgb(217,16,9)" fg:x="520" fg:w="27"/><text x="42.1180%" y="351.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="43.9614%" y="325" width="0.0805%" height="15" fill="rgb(249,173,9)" fg:x="546" fg:w="1"/><text x="44.2114%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="44.2029%" y="309" width="0.1610%" height="15" fill="rgb(205,163,53)" fg:x="549" fg:w="2"/><text x="44.4529%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="44.2029%" y="293" width="0.1610%" height="15" fill="rgb(217,54,41)" fg:x="549" fg:w="2"/><text x="44.4529%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.2029%" y="277" width="0.1610%" height="15" fill="rgb(228,216,12)" fg:x="549" fg:w="2"/><text x="44.4529%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.2029%" y="261" width="0.1610%" height="15" fill="rgb(244,228,15)" fg:x="549" fg:w="2"/><text x="44.4529%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="44.3639%" y="261" width="0.0805%" height="15" fill="rgb(221,176,53)" fg:x="551" fg:w="1"/><text x="44.6139%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="45.9742%" y="245" width="0.4026%" height="15" fill="rgb(205,94,34)" fg:x="571" fg:w="5"/><text x="46.2242%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="46.3768%" y="245" width="0.2415%" height="15" fill="rgb(213,110,48)" fg:x="576" fg:w="3"/><text x="46.6268%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="46.6184%" y="245" width="0.4026%" height="15" fill="rgb(236,142,28)" fg:x="579" fg:w="5"/><text x="46.8684%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="46.8599%" y="229" width="0.1610%" height="15" fill="rgb(225,135,29)" fg:x="582" fg:w="2"/><text x="47.1099%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.8599%" y="213" width="0.1610%" height="15" fill="rgb(252,45,31)" fg:x="582" fg:w="2"/><text x="47.1099%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.8599%" y="197" width="0.1610%" height="15" fill="rgb(211,187,50)" fg:x="582" fg:w="2"/><text x="47.1099%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="47.0209%" y="245" width="0.2415%" height="15" fill="rgb(229,109,7)" fg:x="584" fg:w="3"/><text x="47.2709%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="47.1014%" y="229" width="0.1610%" height="15" fill="rgb(251,131,51)" fg:x="585" fg:w="2"/><text x="47.3514%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="47.1014%" y="213" width="0.1610%" height="15" fill="rgb(251,180,35)" fg:x="585" fg:w="2"/><text x="47.3514%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.1820%" y="197" width="0.0805%" height="15" fill="rgb(211,46,32)" fg:x="586" fg:w="1"/><text x="47.4320%" y="207.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="47.5845%" y="213" width="0.2415%" height="15" fill="rgb(248,123,17)" fg:x="591" fg:w="3"/><text x="47.8345%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="47.8261%" y="213" width="0.3221%" height="15" fill="rgb(227,141,18)" fg:x="594" fg:w="4"/><text x="48.0761%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.9066%" y="197" width="0.2415%" height="15" fill="rgb(216,102,9)" fg:x="595" fg:w="3"/><text x="48.1566%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="47.9871%" y="181" width="0.1610%" height="15" fill="rgb(253,47,13)" fg:x="596" fg:w="2"/><text x="48.2371%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="48.4702%" y="197" width="0.1610%" height="15" fill="rgb(226,93,23)" fg:x="602" fg:w="2"/><text x="48.7202%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (18 samples, 1.45%)</title><rect x="47.2625%" y="245" width="1.4493%" height="15" fill="rgb(247,104,17)" fg:x="587" fg:w="18"/><text x="47.5125%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (15 samples, 1.21%)</title><rect x="47.5040%" y="229" width="1.2077%" height="15" fill="rgb(233,203,26)" fg:x="590" fg:w="15"/><text x="47.7540%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.56%)</title><rect x="48.1481%" y="213" width="0.5636%" height="15" fill="rgb(244,98,49)" fg:x="598" fg:w="7"/><text x="48.3981%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.6312%" y="197" width="0.0805%" height="15" fill="rgb(235,134,22)" fg:x="604" fg:w="1"/><text x="48.8812%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.6312%" y="181" width="0.0805%" height="15" fill="rgb(221,70,32)" fg:x="604" fg:w="1"/><text x="48.8812%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.6312%" y="165" width="0.0805%" height="15" fill="rgb(238,15,50)" fg:x="604" fg:w="1"/><text x="48.8812%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.6312%" y="149" width="0.0805%" height="15" fill="rgb(215,221,48)" fg:x="604" fg:w="1"/><text x="48.8812%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.7118%" y="213" width="0.0805%" height="15" fill="rgb(236,73,3)" fg:x="605" fg:w="1"/><text x="48.9618%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (75 samples, 6.04%)</title><rect x="48.7118%" y="245" width="6.0386%" height="15" fill="rgb(250,107,11)" fg:x="605" fg:w="75"/><text x="48.9618%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (75 samples, 6.04%)</title><rect x="48.7118%" y="229" width="6.0386%" height="15" fill="rgb(242,39,14)" fg:x="605" fg:w="75"/><text x="48.9618%" y="239.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (74 samples, 5.96%)</title><rect x="48.7923%" y="213" width="5.9581%" height="15" fill="rgb(248,164,37)" fg:x="606" fg:w="74"/><text x="49.0423%" y="223.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.56%)</title><rect x="54.7504%" y="245" width="0.5636%" height="15" fill="rgb(217,60,12)" fg:x="680" fg:w="7"/><text x="55.0004%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.1530%" y="229" width="0.1610%" height="15" fill="rgb(240,125,29)" fg:x="685" fg:w="2"/><text x="55.4030%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (3 samples, 0.24%)</title><rect x="55.3140%" y="245" width="0.2415%" height="15" fill="rgb(208,207,28)" fg:x="687" fg:w="3"/><text x="55.5640%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.0386%" y="197" width="0.1610%" height="15" fill="rgb(209,159,27)" fg:x="696" fg:w="2"/><text x="56.2886%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (152 samples, 12.24%)</title><rect x="44.0419%" y="341" width="12.2383%" height="15" fill="rgb(251,176,53)" fg:x="547" fg:w="152"/><text x="44.2919%" y="351.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (152 samples, 12.24%)</title><rect x="44.0419%" y="325" width="12.2383%" height="15" fill="rgb(211,85,7)" fg:x="547" fg:w="152"/><text x="44.2919%" y="335.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (148 samples, 11.92%)</title><rect x="44.3639%" y="309" width="11.9163%" height="15" fill="rgb(216,64,54)" fg:x="551" fg:w="148"/><text x="44.6139%" y="319.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (148 samples, 11.92%)</title><rect x="44.3639%" y="293" width="11.9163%" height="15" fill="rgb(217,54,24)" fg:x="551" fg:w="148"/><text x="44.6139%" y="303.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (148 samples, 11.92%)</title><rect x="44.3639%" y="277" width="11.9163%" height="15" fill="rgb(208,206,53)" fg:x="551" fg:w="148"/><text x="44.6139%" y="287.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (147 samples, 11.84%)</title><rect x="44.4444%" y="261" width="11.8357%" height="15" fill="rgb(251,74,39)" fg:x="552" fg:w="147"/><text x="44.6944%" y="271.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (9 samples, 0.72%)</title><rect x="55.5556%" y="245" width="0.7246%" height="15" fill="rgb(226,47,5)" fg:x="690" fg:w="9"/><text x="55.8056%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="55.7166%" y="229" width="0.5636%" height="15" fill="rgb(234,111,33)" fg:x="692" fg:w="7"/><text x="55.9666%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="55.7971%" y="213" width="0.4831%" height="15" fill="rgb(251,14,10)" fg:x="693" fg:w="6"/><text x="56.0471%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="56.1997%" y="197" width="0.0805%" height="15" fill="rgb(232,43,0)" fg:x="698" fg:w="1"/><text x="56.4497%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="56.1997%" y="181" width="0.0805%" height="15" fill="rgb(222,68,43)" fg:x="698" fg:w="1"/><text x="56.4497%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.6828%" y="325" width="0.0805%" height="15" fill="rgb(217,24,23)" fg:x="704" fg:w="1"/><text x="56.9328%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (13 samples, 1.05%)</title><rect x="56.7633%" y="325" width="1.0467%" height="15" fill="rgb(229,209,14)" fg:x="705" fg:w="13"/><text x="57.0133%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="57.3269%" y="309" width="0.4831%" height="15" fill="rgb(250,149,48)" fg:x="712" fg:w="6"/><text x="57.5769%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="57.4074%" y="293" width="0.4026%" height="15" fill="rgb(210,120,37)" fg:x="713" fg:w="5"/><text x="57.6574%" y="303.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="57.4074%" y="277" width="0.4026%" height="15" fill="rgb(210,21,8)" fg:x="713" fg:w="5"/><text x="57.6574%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="57.8100%" y="325" width="0.4026%" height="15" fill="rgb(243,145,7)" fg:x="718" fg:w="5"/><text x="58.0600%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="58.2126%" y="325" width="0.2415%" height="15" fill="rgb(238,178,32)" fg:x="723" fg:w="3"/><text x="58.4626%" y="335.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="58.4541%" y="277" width="0.0805%" height="15" fill="rgb(222,4,10)" fg:x="726" fg:w="1"/><text x="58.7041%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (29 samples, 2.33%)</title><rect x="56.2802%" y="341" width="2.3349%" height="15" fill="rgb(239,7,37)" fg:x="699" fg:w="29"/><text x="56.5302%" y="351.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="58.4541%" y="325" width="0.1610%" height="15" fill="rgb(215,31,37)" fg:x="726" fg:w="2"/><text x="58.7041%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.4541%" y="309" width="0.1610%" height="15" fill="rgb(224,83,33)" fg:x="726" fg:w="2"/><text x="58.7041%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.4541%" y="293" width="0.1610%" height="15" fill="rgb(239,55,3)" fg:x="726" fg:w="2"/><text x="58.7041%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.5346%" y="277" width="0.0805%" height="15" fill="rgb(247,92,11)" fg:x="727" fg:w="1"/><text x="58.7846%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (230 samples, 18.52%)</title><rect x="40.1771%" y="373" width="18.5185%" height="15" fill="rgb(239,200,7)" fg:x="499" fg:w="230"/><text x="40.4271%" y="383.50">regex_automata::meta::strateg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (182 samples, 14.65%)</title><rect x="44.0419%" y="357" width="14.6538%" height="15" fill="rgb(227,115,8)" fg:x="547" fg:w="182"/><text x="44.2919%" y="367.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="58.6151%" y="341" width="0.0805%" height="15" fill="rgb(215,189,27)" fg:x="728" fg:w="1"/><text x="58.8651%" y="351.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="58.9372%" y="325" width="0.0805%" height="15" fill="rgb(251,216,39)" fg:x="732" fg:w="1"/><text x="59.1872%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="59.0177%" y="325" width="0.0805%" height="15" fill="rgb(207,29,47)" fg:x="733" fg:w="1"/><text x="59.2677%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="59.0177%" y="309" width="0.0805%" height="15" fill="rgb(210,71,34)" fg:x="733" fg:w="1"/><text x="59.2677%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="59.0982%" y="325" width="0.1610%" height="15" fill="rgb(253,217,51)" fg:x="734" fg:w="2"/><text x="59.3482%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.72%)</title><rect x="58.6957%" y="341" width="0.7246%" height="15" fill="rgb(222,117,46)" fg:x="729" fg:w="9"/><text x="58.9457%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="59.2593%" y="325" width="0.1610%" height="15" fill="rgb(226,132,6)" fg:x="736" fg:w="2"/><text x="59.5093%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.2593%" y="309" width="0.1610%" height="15" fill="rgb(254,145,51)" fg:x="736" fg:w="2"/><text x="59.5093%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.2593%" y="293" width="0.1610%" height="15" fill="rgb(231,199,27)" fg:x="736" fg:w="2"/><text x="59.5093%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.2593%" y="277" width="0.1610%" height="15" fill="rgb(245,158,14)" fg:x="736" fg:w="2"/><text x="59.5093%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (3 samples, 0.24%)</title><rect x="59.4203%" y="341" width="0.2415%" height="15" fill="rgb(240,113,14)" fg:x="738" fg:w="3"/><text x="59.6703%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="59.5813%" y="325" width="0.0805%" height="15" fill="rgb(210,20,13)" fg:x="740" fg:w="1"/><text x="59.8313%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="59.6618%" y="341" width="0.0805%" height="15" fill="rgb(241,144,13)" fg:x="741" fg:w="1"/><text x="59.9118%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (14 samples, 1.13%)</title><rect x="58.6957%" y="373" width="1.1272%" height="15" fill="rgb(235,43,34)" fg:x="729" fg:w="14"/><text x="58.9457%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (14 samples, 1.13%)</title><rect x="58.6957%" y="357" width="1.1272%" height="15" fill="rgb(208,36,20)" fg:x="729" fg:w="14"/><text x="58.9457%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="59.7424%" y="341" width="0.0805%" height="15" fill="rgb(239,204,10)" fg:x="742" fg:w="1"/><text x="59.9924%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.7424%" y="325" width="0.0805%" height="15" fill="rgb(217,84,43)" fg:x="742" fg:w="1"/><text x="59.9924%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7424%" y="309" width="0.0805%" height="15" fill="rgb(241,170,50)" fg:x="742" fg:w="1"/><text x="59.9924%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7424%" y="293" width="0.0805%" height="15" fill="rgb(226,205,29)" fg:x="742" fg:w="1"/><text x="59.9924%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="59.9034%" y="325" width="0.2415%" height="15" fill="rgb(233,113,1)" fg:x="744" fg:w="3"/><text x="60.1534%" y="335.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="59.9839%" y="309" width="0.1610%" height="15" fill="rgb(253,98,13)" fg:x="745" fg:w="2"/><text x="60.2339%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="59.9034%" y="341" width="0.3221%" height="15" fill="rgb(211,115,12)" fg:x="744" fg:w="4"/><text x="60.1534%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="60.1449%" y="325" width="0.0805%" height="15" fill="rgb(208,12,16)" fg:x="747" fg:w="1"/><text x="60.3949%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="60.2254%" y="325" width="0.0805%" height="15" fill="rgb(237,193,54)" fg:x="748" fg:w="1"/><text x="60.4754%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="60.2254%" y="341" width="0.1610%" height="15" fill="rgb(243,22,42)" fg:x="748" fg:w="2"/><text x="60.4754%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="60.3060%" y="325" width="0.0805%" height="15" fill="rgb(233,151,36)" fg:x="749" fg:w="1"/><text x="60.5560%" y="335.50"></text></g><g><title>indefinite::rules::number::Number::check (289 samples, 23.27%)</title><rect x="37.1981%" y="437" width="23.2689%" height="15" fill="rgb(237,57,45)" fg:x="462" fg:w="289"/><text x="37.4481%" y="447.50">indefinite::rules::number::Number::ch..</text></g><g><title>regex::regex::string::Regex::new (261 samples, 21.01%)</title><rect x="39.4525%" y="421" width="21.0145%" height="15" fill="rgb(221,88,17)" fg:x="490" fg:w="261"/><text x="39.7025%" y="431.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (259 samples, 20.85%)</title><rect x="39.6135%" y="405" width="20.8535%" height="15" fill="rgb(230,79,15)" fg:x="492" fg:w="259"/><text x="39.8635%" y="415.50">regex::builders::Builder::build_o..</text></g><g><title>regex_automata::meta::regex::Builder::build (259 samples, 20.85%)</title><rect x="39.6135%" y="389" width="20.8535%" height="15" fill="rgb(213,57,13)" fg:x="492" fg:w="259"/><text x="39.8635%" y="399.50">regex_automata::meta::regex::Buil..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="59.8229%" y="373" width="0.6441%" height="15" fill="rgb(222,116,39)" fg:x="743" fg:w="8"/><text x="60.0729%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="59.8229%" y="357" width="0.6441%" height="15" fill="rgb(245,107,2)" fg:x="743" fg:w="8"/><text x="60.0729%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="60.3865%" y="341" width="0.0805%" height="15" fill="rgb(238,1,10)" fg:x="750" fg:w="1"/><text x="60.6365%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="60.4670%" y="373" width="0.0805%" height="15" fill="rgb(249,4,48)" fg:x="751" fg:w="1"/><text x="60.7170%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.4670%" y="357" width="0.0805%" height="15" fill="rgb(223,151,18)" fg:x="751" fg:w="1"/><text x="60.7170%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.4670%" y="341" width="0.0805%" height="15" fill="rgb(227,65,43)" fg:x="751" fg:w="1"/><text x="60.7170%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.4670%" y="325" width="0.0805%" height="15" fill="rgb(218,40,45)" fg:x="751" fg:w="1"/><text x="60.7170%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.6280%" y="357" width="0.0805%" height="15" fill="rgb(252,121,31)" fg:x="753" fg:w="1"/><text x="60.8780%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.7085%" y="357" width="0.0805%" height="15" fill="rgb(219,158,43)" fg:x="754" fg:w="1"/><text x="60.9585%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.40%)</title><rect x="60.4670%" y="405" width="0.4026%" height="15" fill="rgb(231,162,42)" fg:x="751" fg:w="5"/><text x="60.7170%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="60.4670%" y="389" width="0.4026%" height="15" fill="rgb(217,179,25)" fg:x="751" fg:w="5"/><text x="60.7170%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.32%)</title><rect x="60.5475%" y="373" width="0.3221%" height="15" fill="rgb(206,212,31)" fg:x="752" fg:w="4"/><text x="60.7975%" y="383.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="60.7890%" y="357" width="0.0805%" height="15" fill="rgb(235,144,12)" fg:x="755" fg:w="1"/><text x="61.0390%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.7890%" y="341" width="0.0805%" height="15" fill="rgb(213,51,10)" fg:x="755" fg:w="1"/><text x="61.0390%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.7890%" y="325" width="0.0805%" height="15" fill="rgb(231,145,14)" fg:x="755" fg:w="1"/><text x="61.0390%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7890%" y="309" width="0.0805%" height="15" fill="rgb(235,15,28)" fg:x="755" fg:w="1"/><text x="61.0390%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.8696%" y="373" width="0.0805%" height="15" fill="rgb(237,206,10)" fg:x="756" fg:w="1"/><text x="61.1196%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.9501%" y="373" width="0.0805%" height="15" fill="rgb(236,227,27)" fg:x="757" fg:w="1"/><text x="61.2001%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.9501%" y="357" width="0.0805%" height="15" fill="rgb(246,83,35)" fg:x="757" fg:w="1"/><text x="61.2001%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.9501%" y="341" width="0.0805%" height="15" fill="rgb(220,136,24)" fg:x="757" fg:w="1"/><text x="61.2001%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="61.0306%" y="357" width="0.3221%" height="15" fill="rgb(217,3,25)" fg:x="758" fg:w="4"/><text x="61.2806%" y="367.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="61.0306%" y="341" width="0.3221%" height="15" fill="rgb(239,24,14)" fg:x="758" fg:w="4"/><text x="61.2806%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.64%)</title><rect x="60.8696%" y="405" width="0.6441%" height="15" fill="rgb(244,16,53)" fg:x="756" fg:w="8"/><text x="61.1196%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="60.8696%" y="389" width="0.6441%" height="15" fill="rgb(208,175,44)" fg:x="756" fg:w="8"/><text x="61.1196%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (6 samples, 0.48%)</title><rect x="61.0306%" y="373" width="0.4831%" height="15" fill="rgb(252,18,48)" fg:x="758" fg:w="6"/><text x="61.2806%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="61.3527%" y="357" width="0.1610%" height="15" fill="rgb(234,199,32)" fg:x="762" fg:w="2"/><text x="61.6027%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.5137%" y="389" width="0.0805%" height="15" fill="rgb(225,77,54)" fg:x="764" fg:w="1"/><text x="61.7637%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="61.5137%" y="373" width="0.0805%" height="15" fill="rgb(225,42,25)" fg:x="764" fg:w="1"/><text x="61.7637%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5137%" y="357" width="0.0805%" height="15" fill="rgb(242,227,46)" fg:x="764" fg:w="1"/><text x="61.7637%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.5942%" y="389" width="0.0805%" height="15" fill="rgb(246,197,35)" fg:x="765" fg:w="1"/><text x="61.8442%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.6747%" y="357" width="0.1610%" height="15" fill="rgb(215,159,26)" fg:x="766" fg:w="2"/><text x="61.9247%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.6747%" y="341" width="0.1610%" height="15" fill="rgb(212,194,50)" fg:x="766" fg:w="2"/><text x="61.9247%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7552%" y="325" width="0.0805%" height="15" fill="rgb(246,132,1)" fg:x="767" fg:w="1"/><text x="62.0052%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.8357%" y="357" width="0.0805%" height="15" fill="rgb(217,71,7)" fg:x="768" fg:w="1"/><text x="62.0857%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.9968%" y="293" width="0.0805%" height="15" fill="rgb(252,59,32)" fg:x="770" fg:w="1"/><text x="62.2468%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="61.9163%" y="357" width="0.2415%" height="15" fill="rgb(253,204,25)" fg:x="769" fg:w="3"/><text x="62.1663%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.9163%" y="341" width="0.2415%" height="15" fill="rgb(232,21,16)" fg:x="769" fg:w="3"/><text x="62.1663%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="61.9968%" y="325" width="0.1610%" height="15" fill="rgb(248,90,29)" fg:x="770" fg:w="2"/><text x="62.2468%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.9968%" y="309" width="0.1610%" height="15" fill="rgb(249,223,7)" fg:x="770" fg:w="2"/><text x="62.2468%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0773%" y="293" width="0.0805%" height="15" fill="rgb(231,119,42)" fg:x="771" fg:w="1"/><text x="62.3273%" y="303.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="62.1578%" y="357" width="0.0805%" height="15" fill="rgb(215,41,35)" fg:x="772" fg:w="1"/><text x="62.4078%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3188%" y="341" width="0.0805%" height="15" fill="rgb(220,44,45)" fg:x="774" fg:w="1"/><text x="62.5688%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="62.3994%" y="341" width="0.0805%" height="15" fill="rgb(253,197,36)" fg:x="775" fg:w="1"/><text x="62.6494%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="62.4799%" y="341" width="0.0805%" height="15" fill="rgb(245,225,54)" fg:x="776" fg:w="1"/><text x="62.7299%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="62.8824%" y="325" width="0.4831%" height="15" fill="rgb(239,94,37)" fg:x="781" fg:w="6"/><text x="63.1324%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (12 samples, 0.97%)</title><rect x="62.5604%" y="341" width="0.9662%" height="15" fill="rgb(242,217,10)" fg:x="777" fg:w="12"/><text x="62.8104%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="63.3655%" y="325" width="0.1610%" height="15" fill="rgb(250,193,7)" fg:x="787" fg:w="2"/><text x="63.6155%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="63.3655%" y="309" width="0.1610%" height="15" fill="rgb(230,104,19)" fg:x="787" fg:w="2"/><text x="63.6155%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2 samples, 0.16%)</title><rect x="63.3655%" y="293" width="0.1610%" height="15" fill="rgb(230,181,4)" fg:x="787" fg:w="2"/><text x="63.6155%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="63.5266%" y="309" width="0.0805%" height="15" fill="rgb(216,219,49)" fg:x="789" fg:w="1"/><text x="63.7766%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.5266%" y="293" width="0.0805%" height="15" fill="rgb(254,144,0)" fg:x="789" fg:w="1"/><text x="63.7766%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.5266%" y="277" width="0.0805%" height="15" fill="rgb(205,209,38)" fg:x="789" fg:w="1"/><text x="63.7766%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.5266%" y="261" width="0.0805%" height="15" fill="rgb(240,21,42)" fg:x="789" fg:w="1"/><text x="63.7766%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="63.5266%" y="325" width="0.2415%" height="15" fill="rgb(241,132,3)" fg:x="789" fg:w="3"/><text x="63.7766%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="63.6071%" y="309" width="0.1610%" height="15" fill="rgb(225,14,2)" fg:x="790" fg:w="2"/><text x="63.8571%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="63.6071%" y="293" width="0.1610%" height="15" fill="rgb(210,141,35)" fg:x="790" fg:w="2"/><text x="63.8571%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="63.6071%" y="277" width="0.1610%" height="15" fill="rgb(251,14,44)" fg:x="790" fg:w="2"/><text x="63.8571%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="63.6876%" y="261" width="0.0805%" height="15" fill="rgb(247,48,18)" fg:x="791" fg:w="1"/><text x="63.9376%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="63.8486%" y="309" width="0.0805%" height="15" fill="rgb(225,0,40)" fg:x="793" fg:w="1"/><text x="64.0986%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="63.9291%" y="309" width="0.4026%" height="15" fill="rgb(221,31,33)" fg:x="794" fg:w="5"/><text x="64.1791%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (27 samples, 2.17%)</title><rect x="62.2383%" y="357" width="2.1739%" height="15" fill="rgb(237,42,40)" fg:x="773" fg:w="27"/><text x="62.4883%" y="367.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (11 samples, 0.89%)</title><rect x="63.5266%" y="341" width="0.8857%" height="15" fill="rgb(233,51,29)" fg:x="789" fg:w="11"/><text x="63.7766%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="63.7681%" y="325" width="0.6441%" height="15" fill="rgb(226,58,20)" fg:x="792" fg:w="8"/><text x="64.0181%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="64.3317%" y="309" width="0.0805%" height="15" fill="rgb(208,98,7)" fg:x="799" fg:w="1"/><text x="64.5817%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.5733%" y="325" width="0.0805%" height="15" fill="rgb(228,143,44)" fg:x="802" fg:w="1"/><text x="64.8233%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.5733%" y="309" width="0.0805%" height="15" fill="rgb(246,55,38)" fg:x="802" fg:w="1"/><text x="64.8233%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5733%" y="293" width="0.0805%" height="15" fill="rgb(247,87,16)" fg:x="802" fg:w="1"/><text x="64.8233%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.7343%" y="309" width="0.0805%" height="15" fill="rgb(234,129,42)" fg:x="804" fg:w="1"/><text x="64.9843%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.7343%" y="293" width="0.0805%" height="15" fill="rgb(220,82,16)" fg:x="804" fg:w="1"/><text x="64.9843%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7343%" y="277" width="0.0805%" height="15" fill="rgb(211,88,4)" fg:x="804" fg:w="1"/><text x="64.9843%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.7343%" y="261" width="0.0805%" height="15" fill="rgb(248,151,21)" fg:x="804" fg:w="1"/><text x="64.9843%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="64.6538%" y="325" width="0.3221%" height="15" fill="rgb(238,163,6)" fg:x="803" fg:w="4"/><text x="64.9038%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="64.8148%" y="309" width="0.1610%" height="15" fill="rgb(209,183,11)" fg:x="805" fg:w="2"/><text x="65.0648%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.8148%" y="293" width="0.1610%" height="15" fill="rgb(219,37,20)" fg:x="805" fg:w="2"/><text x="65.0648%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.8148%" y="277" width="0.1610%" height="15" fill="rgb(210,158,4)" fg:x="805" fg:w="2"/><text x="65.0648%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.8148%" y="261" width="0.1610%" height="15" fill="rgb(221,167,53)" fg:x="805" fg:w="2"/><text x="65.0648%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="64.4122%" y="357" width="0.6441%" height="15" fill="rgb(237,151,45)" fg:x="800" fg:w="8"/><text x="64.6622%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="64.4928%" y="341" width="0.5636%" height="15" fill="rgb(231,39,3)" fg:x="801" fg:w="7"/><text x="64.7428%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.9758%" y="325" width="0.0805%" height="15" fill="rgb(212,167,28)" fg:x="807" fg:w="1"/><text x="65.2258%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.2174%" y="309" width="0.0805%" height="15" fill="rgb(232,178,8)" fg:x="810" fg:w="1"/><text x="65.4674%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.2174%" y="293" width="0.0805%" height="15" fill="rgb(225,151,20)" fg:x="810" fg:w="1"/><text x="65.4674%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.2174%" y="277" width="0.0805%" height="15" fill="rgb(238,3,37)" fg:x="810" fg:w="1"/><text x="65.4674%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="65.1369%" y="325" width="0.3221%" height="15" fill="rgb(251,147,42)" fg:x="809" fg:w="4"/><text x="65.3869%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="65.2979%" y="309" width="0.1610%" height="15" fill="rgb(208,173,10)" fg:x="811" fg:w="2"/><text x="65.5479%" y="319.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="65.3784%" y="293" width="0.0805%" height="15" fill="rgb(246,225,4)" fg:x="812" fg:w="1"/><text x="65.6284%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.4589%" y="309" width="0.0805%" height="15" fill="rgb(248,102,6)" fg:x="813" fg:w="1"/><text x="65.7089%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4589%" y="293" width="0.0805%" height="15" fill="rgb(232,6,21)" fg:x="813" fg:w="1"/><text x="65.7089%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4589%" y="277" width="0.0805%" height="15" fill="rgb(221,179,22)" fg:x="813" fg:w="1"/><text x="65.7089%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="65.4589%" y="325" width="0.1610%" height="15" fill="rgb(252,50,20)" fg:x="813" fg:w="2"/><text x="65.7089%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="65.5395%" y="309" width="0.0805%" height="15" fill="rgb(222,56,38)" fg:x="814" fg:w="1"/><text x="65.7895%" y="319.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="65.5395%" y="293" width="0.0805%" height="15" fill="rgb(206,193,29)" fg:x="814" fg:w="1"/><text x="65.7895%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (51 samples, 4.11%)</title><rect x="61.6747%" y="373" width="4.1063%" height="15" fill="rgb(239,192,45)" fg:x="766" fg:w="51"/><text x="61.9247%" y="383.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="65.0564%" y="357" width="0.7246%" height="15" fill="rgb(254,18,36)" fg:x="808" fg:w="9"/><text x="65.3064%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="65.0564%" y="341" width="0.7246%" height="15" fill="rgb(221,127,11)" fg:x="808" fg:w="9"/><text x="65.3064%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.6200%" y="325" width="0.1610%" height="15" fill="rgb(234,146,35)" fg:x="815" fg:w="2"/><text x="65.8700%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7005%" y="309" width="0.0805%" height="15" fill="rgb(254,201,37)" fg:x="816" fg:w="1"/><text x="65.9505%" y="319.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="65.7005%" y="293" width="0.0805%" height="15" fill="rgb(211,202,23)" fg:x="816" fg:w="1"/><text x="65.9505%" y="303.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.7005%" y="277" width="0.0805%" height="15" fill="rgb(237,91,2)" fg:x="816" fg:w="1"/><text x="65.9505%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="65.7810%" y="373" width="0.0805%" height="15" fill="rgb(226,228,36)" fg:x="817" fg:w="1"/><text x="66.0310%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="65.8615%" y="373" width="0.0805%" height="15" fill="rgb(213,63,50)" fg:x="818" fg:w="1"/><text x="66.1115%" y="383.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="65.8615%" y="357" width="0.0805%" height="15" fill="rgb(235,194,19)" fg:x="818" fg:w="1"/><text x="66.1115%" y="367.50"></text></g><g><title>regex::regex::string::Regex::new (56 samples, 4.51%)</title><rect x="61.5137%" y="405" width="4.5089%" height="15" fill="rgb(207,204,18)" fg:x="764" fg:w="56"/><text x="61.7637%" y="415.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (54 samples, 4.35%)</title><rect x="61.6747%" y="389" width="4.3478%" height="15" fill="rgb(248,8,7)" fg:x="766" fg:w="54"/><text x="61.9247%" y="399.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="65.9420%" y="373" width="0.0805%" height="15" fill="rgb(223,145,47)" fg:x="819" fg:w="1"/><text x="66.1920%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.0225%" y="341" width="0.0805%" height="15" fill="rgb(228,84,11)" fg:x="820" fg:w="1"/><text x="66.2725%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="66.6667%" y="325" width="0.1610%" height="15" fill="rgb(218,76,45)" fg:x="828" fg:w="2"/><text x="66.9167%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.6667%" y="309" width="0.1610%" height="15" fill="rgb(223,80,15)" fg:x="828" fg:w="2"/><text x="66.9167%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="66.6667%" y="293" width="0.1610%" height="15" fill="rgb(219,218,33)" fg:x="828" fg:w="2"/><text x="66.9167%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.97%)</title><rect x="66.1031%" y="341" width="0.9662%" height="15" fill="rgb(208,51,11)" fg:x="821" fg:w="12"/><text x="66.3531%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="66.8277%" y="325" width="0.2415%" height="15" fill="rgb(229,165,39)" fg:x="830" fg:w="3"/><text x="67.0777%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.21%)</title><rect x="66.0225%" y="357" width="1.2077%" height="15" fill="rgb(241,100,24)" fg:x="820" fg:w="15"/><text x="66.2725%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="67.0692%" y="341" width="0.1610%" height="15" fill="rgb(228,14,23)" fg:x="833" fg:w="2"/><text x="67.3192%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.1498%" y="325" width="0.0805%" height="15" fill="rgb(247,116,52)" fg:x="834" fg:w="1"/><text x="67.3998%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.1498%" y="309" width="0.0805%" height="15" fill="rgb(216,149,33)" fg:x="834" fg:w="1"/><text x="67.3998%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1498%" y="293" width="0.0805%" height="15" fill="rgb(238,142,29)" fg:x="834" fg:w="1"/><text x="67.3998%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (85 samples, 6.84%)</title><rect x="60.4670%" y="421" width="6.8438%" height="15" fill="rgb(224,83,40)" fg:x="751" fg:w="85"/><text x="60.7170%" y="431.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.29%)</title><rect x="66.0225%" y="405" width="1.2882%" height="15" fill="rgb(234,165,11)" fg:x="820" fg:w="16"/><text x="66.2725%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.29%)</title><rect x="66.0225%" y="389" width="1.2882%" height="15" fill="rgb(215,96,23)" fg:x="820" fg:w="16"/><text x="66.2725%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.29%)</title><rect x="66.0225%" y="373" width="1.2882%" height="15" fill="rgb(233,179,26)" fg:x="820" fg:w="16"/><text x="66.2725%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="67.2303%" y="357" width="0.0805%" height="15" fill="rgb(225,129,33)" fg:x="835" fg:w="1"/><text x="67.4803%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="67.2303%" y="341" width="0.0805%" height="15" fill="rgb(237,49,13)" fg:x="835" fg:w="1"/><text x="67.4803%" y="351.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (644 samples, 51.85%)</title><rect x="15.7005%" y="517" width="51.8519%" height="15" fill="rgb(211,3,31)" fg:x="195" fg:w="644"/><text x="15.9505%" y="527.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Obser..</text></g><g><title>plugins_core::looking::model::qualify_name (620 samples, 49.92%)</title><rect x="17.6329%" y="501" width="49.9195%" height="15" fill="rgb(216,152,19)" fg:x="219" fg:w="620"/><text x="17.8829%" y="511.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (620 samples, 49.92%)</title><rect x="17.6329%" y="485" width="49.9195%" height="15" fill="rgb(251,121,35)" fg:x="219" fg:w="620"/><text x="17.8829%" y="495.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (620 samples, 49.92%)</title><rect x="17.6329%" y="469" width="49.9195%" height="15" fill="rgb(210,217,47)" fg:x="219" fg:w="620"/><text x="17.8829%" y="479.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (618 samples, 49.76%)</title><rect x="17.7939%" y="453" width="49.7585%" height="15" fill="rgb(244,116,22)" fg:x="221" fg:w="618"/><text x="18.0439%" y="463.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (88 samples, 7.09%)</title><rect x="60.4670%" y="437" width="7.0853%" height="15" fill="rgb(228,17,21)" fg:x="751" fg:w="88"/><text x="60.7170%" y="447.50">indefinite..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="67.3108%" y="421" width="0.2415%" height="15" fill="rgb(240,149,34)" fg:x="836" fg:w="3"/><text x="67.5608%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4718%" y="405" width="0.0805%" height="15" fill="rgb(208,125,47)" fg:x="838" fg:w="1"/><text x="67.7218%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="67.5523%" y="485" width="0.0805%" height="15" fill="rgb(249,186,39)" fg:x="839" fg:w="1"/><text x="67.8023%" y="495.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="67.5523%" y="469" width="0.0805%" height="15" fill="rgb(240,220,33)" fg:x="839" fg:w="1"/><text x="67.8023%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.5523%" y="453" width="0.0805%" height="15" fill="rgb(243,110,23)" fg:x="839" fg:w="1"/><text x="67.8023%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (2 samples, 0.16%)</title><rect x="67.5523%" y="517" width="0.1610%" height="15" fill="rgb(219,163,46)" fg:x="839" fg:w="2"/><text x="67.8023%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="67.5523%" y="501" width="0.1610%" height="15" fill="rgb(216,126,30)" fg:x="839" fg:w="2"/><text x="67.8023%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="67.6329%" y="485" width="0.0805%" height="15" fill="rgb(208,139,11)" fg:x="840" fg:w="1"/><text x="67.8829%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6329%" y="469" width="0.0805%" height="15" fill="rgb(213,118,36)" fg:x="840" fg:w="1"/><text x="67.8829%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6329%" y="453" width="0.0805%" height="15" fill="rgb(226,43,17)" fg:x="840" fg:w="1"/><text x="67.8829%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.6329%" y="437" width="0.0805%" height="15" fill="rgb(254,217,4)" fg:x="840" fg:w="1"/><text x="67.8829%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.6329%" y="421" width="0.0805%" height="15" fill="rgb(210,134,47)" fg:x="840" fg:w="1"/><text x="67.8829%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.6329%" y="405" width="0.0805%" height="15" fill="rgb(237,24,49)" fg:x="840" fg:w="1"/><text x="67.8829%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.6329%" y="389" width="0.0805%" height="15" fill="rgb(251,39,46)" fg:x="840" fg:w="1"/><text x="67.8829%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.6329%" y="373" width="0.0805%" height="15" fill="rgb(251,220,3)" fg:x="840" fg:w="1"/><text x="67.8829%" y="383.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1159%" y="485" width="0.0805%" height="15" fill="rgb(228,105,12)" fg:x="846" fg:w="1"/><text x="68.3659%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1159%" y="469" width="0.0805%" height="15" fill="rgb(215,196,1)" fg:x="846" fg:w="1"/><text x="68.3659%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1159%" y="453" width="0.0805%" height="15" fill="rgb(214,33,39)" fg:x="846" fg:w="1"/><text x="68.3659%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1159%" y="437" width="0.0805%" height="15" fill="rgb(220,19,52)" fg:x="846" fg:w="1"/><text x="68.3659%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1159%" y="421" width="0.0805%" height="15" fill="rgb(221,78,38)" fg:x="846" fg:w="1"/><text x="68.3659%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1159%" y="405" width="0.0805%" height="15" fill="rgb(253,30,16)" fg:x="846" fg:w="1"/><text x="68.3659%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1159%" y="389" width="0.0805%" height="15" fill="rgb(242,65,0)" fg:x="846" fg:w="1"/><text x="68.3659%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1159%" y="373" width="0.0805%" height="15" fill="rgb(235,201,12)" fg:x="846" fg:w="1"/><text x="68.3659%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1159%" y="357" width="0.0805%" height="15" fill="rgb(233,161,9)" fg:x="846" fg:w="1"/><text x="68.3659%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1159%" y="341" width="0.0805%" height="15" fill="rgb(241,207,41)" fg:x="846" fg:w="1"/><text x="68.3659%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1159%" y="325" width="0.0805%" height="15" fill="rgb(212,69,46)" fg:x="846" fg:w="1"/><text x="68.3659%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1159%" y="309" width="0.0805%" height="15" fill="rgb(239,69,45)" fg:x="846" fg:w="1"/><text x="68.3659%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1159%" y="293" width="0.0805%" height="15" fill="rgb(242,117,48)" fg:x="846" fg:w="1"/><text x="68.3659%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1159%" y="277" width="0.0805%" height="15" fill="rgb(228,41,36)" fg:x="846" fg:w="1"/><text x="68.3659%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1159%" y="261" width="0.0805%" height="15" fill="rgb(212,3,32)" fg:x="846" fg:w="1"/><text x="68.3659%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1159%" y="245" width="0.0805%" height="15" fill="rgb(233,41,49)" fg:x="846" fg:w="1"/><text x="68.3659%" y="255.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="68.1965%" y="389" width="0.0805%" height="15" fill="rgb(252,170,49)" fg:x="847" fg:w="1"/><text x="68.4465%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1965%" y="373" width="0.0805%" height="15" fill="rgb(229,53,26)" fg:x="847" fg:w="1"/><text x="68.4465%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1965%" y="357" width="0.0805%" height="15" fill="rgb(217,157,12)" fg:x="847" fg:w="1"/><text x="68.4465%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1965%" y="341" width="0.0805%" height="15" fill="rgb(227,17,9)" fg:x="847" fg:w="1"/><text x="68.4465%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1965%" y="325" width="0.0805%" height="15" fill="rgb(218,84,12)" fg:x="847" fg:w="1"/><text x="68.4465%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1965%" y="309" width="0.0805%" height="15" fill="rgb(212,79,24)" fg:x="847" fg:w="1"/><text x="68.4465%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.1965%" y="293" width="0.0805%" height="15" fill="rgb(217,222,37)" fg:x="847" fg:w="1"/><text x="68.4465%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.1965%" y="277" width="0.0805%" height="15" fill="rgb(246,208,8)" fg:x="847" fg:w="1"/><text x="68.4465%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2770%" y="293" width="0.0805%" height="15" fill="rgb(244,133,10)" fg:x="848" fg:w="1"/><text x="68.5270%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2770%" y="277" width="0.0805%" height="15" fill="rgb(209,219,41)" fg:x="848" fg:w="1"/><text x="68.5270%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2770%" y="261" width="0.0805%" height="15" fill="rgb(253,175,45)" fg:x="848" fg:w="1"/><text x="68.5270%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2770%" y="245" width="0.0805%" height="15" fill="rgb(235,100,37)" fg:x="848" fg:w="1"/><text x="68.5270%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2770%" y="229" width="0.0805%" height="15" fill="rgb(225,87,19)" fg:x="848" fg:w="1"/><text x="68.5270%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2770%" y="213" width="0.0805%" height="15" fill="rgb(217,152,17)" fg:x="848" fg:w="1"/><text x="68.5270%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.2770%" y="197" width="0.0805%" height="15" fill="rgb(235,72,13)" fg:x="848" fg:w="1"/><text x="68.5270%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.2770%" y="181" width="0.0805%" height="15" fill="rgb(233,140,18)" fg:x="848" fg:w="1"/><text x="68.5270%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.2770%" y="165" width="0.0805%" height="15" fill="rgb(207,212,28)" fg:x="848" fg:w="1"/><text x="68.5270%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.2770%" y="149" width="0.0805%" height="15" fill="rgb(220,130,25)" fg:x="848" fg:w="1"/><text x="68.5270%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.2770%" y="133" width="0.0805%" height="15" fill="rgb(205,55,34)" fg:x="848" fg:w="1"/><text x="68.5270%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.2770%" y="117" width="0.0805%" height="15" fill="rgb(237,54,35)" fg:x="848" fg:w="1"/><text x="68.5270%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.2770%" y="101" width="0.0805%" height="15" fill="rgb(208,67,23)" fg:x="848" fg:w="1"/><text x="68.5270%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.2770%" y="85" width="0.0805%" height="15" fill="rgb(206,207,50)" fg:x="848" fg:w="1"/><text x="68.5270%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.2770%" y="69" width="0.0805%" height="15" fill="rgb(213,211,42)" fg:x="848" fg:w="1"/><text x="68.5270%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="68.2770%" y="53" width="0.0805%" height="15" fill="rgb(252,197,50)" fg:x="848" fg:w="1"/><text x="68.5270%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="68.2770%" y="37" width="0.0805%" height="15" fill="rgb(251,211,41)" fg:x="848" fg:w="1"/><text x="68.5270%" y="47.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="68.2770%" y="373" width="0.1610%" height="15" fill="rgb(229,211,5)" fg:x="848" fg:w="2"/><text x="68.5270%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="68.2770%" y="357" width="0.1610%" height="15" fill="rgb(239,36,31)" fg:x="848" fg:w="2"/><text x="68.5270%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="68.2770%" y="341" width="0.1610%" height="15" fill="rgb(248,67,31)" fg:x="848" fg:w="2"/><text x="68.5270%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="68.2770%" y="325" width="0.1610%" height="15" fill="rgb(249,55,44)" fg:x="848" fg:w="2"/><text x="68.5270%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="68.2770%" y="309" width="0.1610%" height="15" fill="rgb(216,82,12)" fg:x="848" fg:w="2"/><text x="68.5270%" y="319.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="68.3575%" y="293" width="0.0805%" height="15" fill="rgb(242,174,1)" fg:x="849" fg:w="1"/><text x="68.6075%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.5990%" y="229" width="0.0805%" height="15" fill="rgb(208,120,29)" fg:x="852" fg:w="1"/><text x="68.8490%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="68.4380%" y="373" width="0.3221%" height="15" fill="rgb(221,105,43)" fg:x="850" fg:w="4"/><text x="68.6880%" y="383.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="68.4380%" y="357" width="0.3221%" height="15" fill="rgb(234,124,22)" fg:x="850" fg:w="4"/><text x="68.6880%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="68.4380%" y="341" width="0.3221%" height="15" fill="rgb(212,23,30)" fg:x="850" fg:w="4"/><text x="68.6880%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.5185%" y="325" width="0.2415%" height="15" fill="rgb(219,122,53)" fg:x="851" fg:w="3"/><text x="68.7685%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.5185%" y="309" width="0.2415%" height="15" fill="rgb(248,84,24)" fg:x="851" fg:w="3"/><text x="68.7685%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.5990%" y="293" width="0.1610%" height="15" fill="rgb(245,115,18)" fg:x="852" fg:w="2"/><text x="68.8490%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.5990%" y="277" width="0.1610%" height="15" fill="rgb(227,176,51)" fg:x="852" fg:w="2"/><text x="68.8490%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.5990%" y="261" width="0.1610%" height="15" fill="rgb(229,63,42)" fg:x="852" fg:w="2"/><text x="68.8490%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.5990%" y="245" width="0.1610%" height="15" fill="rgb(247,202,24)" fg:x="852" fg:w="2"/><text x="68.8490%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6795%" y="229" width="0.0805%" height="15" fill="rgb(244,173,20)" fg:x="853" fg:w="1"/><text x="68.9295%" y="239.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.7601%" y="373" width="0.0805%" height="15" fill="rgb(242,81,47)" fg:x="854" fg:w="1"/><text x="69.0101%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7601%" y="357" width="0.0805%" height="15" fill="rgb(231,185,54)" fg:x="854" fg:w="1"/><text x="69.0101%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7601%" y="341" width="0.0805%" height="15" fill="rgb(243,55,32)" fg:x="854" fg:w="1"/><text x="69.0101%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.7601%" y="325" width="0.0805%" height="15" fill="rgb(208,167,19)" fg:x="854" fg:w="1"/><text x="69.0101%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7601%" y="309" width="0.0805%" height="15" fill="rgb(231,72,35)" fg:x="854" fg:w="1"/><text x="69.0101%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8406%" y="261" width="0.0805%" height="15" fill="rgb(250,173,51)" fg:x="855" fg:w="1"/><text x="69.0906%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.8406%" y="245" width="0.0805%" height="15" fill="rgb(209,5,22)" fg:x="855" fg:w="1"/><text x="69.0906%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.9211%" y="245" width="0.0805%" height="15" fill="rgb(250,174,19)" fg:x="856" fg:w="1"/><text x="69.1711%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9211%" y="229" width="0.0805%" height="15" fill="rgb(217,3,49)" fg:x="856" fg:w="1"/><text x="69.1711%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.9211%" y="213" width="0.0805%" height="15" fill="rgb(218,225,5)" fg:x="856" fg:w="1"/><text x="69.1711%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.9211%" y="197" width="0.0805%" height="15" fill="rgb(236,89,11)" fg:x="856" fg:w="1"/><text x="69.1711%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.9211%" y="181" width="0.0805%" height="15" fill="rgb(206,33,28)" fg:x="856" fg:w="1"/><text x="69.1711%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.9211%" y="165" width="0.0805%" height="15" fill="rgb(241,56,42)" fg:x="856" fg:w="1"/><text x="69.1711%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="68.8406%" y="293" width="0.4026%" height="15" fill="rgb(222,44,11)" fg:x="855" fg:w="5"/><text x="69.0906%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="68.8406%" y="277" width="0.4026%" height="15" fill="rgb(234,111,20)" fg:x="855" fg:w="5"/><text x="69.0906%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="68.9211%" y="261" width="0.3221%" height="15" fill="rgb(237,77,6)" fg:x="856" fg:w="4"/><text x="69.1711%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="69.0016%" y="245" width="0.2415%" height="15" fill="rgb(235,111,23)" fg:x="857" fg:w="3"/><text x="69.2516%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.0016%" y="229" width="0.2415%" height="15" fill="rgb(251,135,29)" fg:x="857" fg:w="3"/><text x="69.2516%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="69.0016%" y="213" width="0.2415%" height="15" fill="rgb(217,57,1)" fg:x="857" fg:w="3"/><text x="69.2516%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1626%" y="197" width="0.0805%" height="15" fill="rgb(249,119,31)" fg:x="859" fg:w="1"/><text x="69.4126%" y="207.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (6 samples, 0.48%)</title><rect x="68.8406%" y="357" width="0.4831%" height="15" fill="rgb(233,164,33)" fg:x="855" fg:w="6"/><text x="69.0906%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (6 samples, 0.48%)</title><rect x="68.8406%" y="341" width="0.4831%" height="15" fill="rgb(250,217,43)" fg:x="855" fg:w="6"/><text x="69.0906%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="68.8406%" y="325" width="0.4831%" height="15" fill="rgb(232,154,50)" fg:x="855" fg:w="6"/><text x="69.0906%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="68.8406%" y="309" width="0.4831%" height="15" fill="rgb(227,190,8)" fg:x="855" fg:w="6"/><text x="69.0906%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2432%" y="293" width="0.0805%" height="15" fill="rgb(209,217,32)" fg:x="860" fg:w="1"/><text x="69.4932%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2432%" y="277" width="0.0805%" height="15" fill="rgb(243,203,50)" fg:x="860" fg:w="1"/><text x="69.4932%" y="287.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (15 samples, 1.21%)</title><rect x="68.1965%" y="485" width="1.2077%" height="15" fill="rgb(232,152,27)" fg:x="847" fg:w="15"/><text x="68.4465%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.21%)</title><rect x="68.1965%" y="469" width="1.2077%" height="15" fill="rgb(240,34,29)" fg:x="847" fg:w="15"/><text x="68.4465%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.21%)</title><rect x="68.1965%" y="453" width="1.2077%" height="15" fill="rgb(215,185,52)" fg:x="847" fg:w="15"/><text x="68.4465%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 1.21%)</title><rect x="68.1965%" y="437" width="1.2077%" height="15" fill="rgb(240,89,49)" fg:x="847" fg:w="15"/><text x="68.4465%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (15 samples, 1.21%)</title><rect x="68.1965%" y="421" width="1.2077%" height="15" fill="rgb(225,12,52)" fg:x="847" fg:w="15"/><text x="68.4465%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (15 samples, 1.21%)</title><rect x="68.1965%" y="405" width="1.2077%" height="15" fill="rgb(239,128,45)" fg:x="847" fg:w="15"/><text x="68.4465%" y="415.50"></text></g><g><title>engine::internal::Entities::add_persisted (14 samples, 1.13%)</title><rect x="68.2770%" y="389" width="1.1272%" height="15" fill="rgb(211,78,47)" fg:x="848" fg:w="14"/><text x="68.5270%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.56%)</title><rect x="68.8406%" y="373" width="0.5636%" height="15" fill="rgb(232,31,21)" fg:x="855" fg:w="7"/><text x="69.0906%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.3237%" y="357" width="0.0805%" height="15" fill="rgb(222,168,14)" fg:x="861" fg:w="1"/><text x="69.5737%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3237%" y="341" width="0.0805%" height="15" fill="rgb(209,128,24)" fg:x="861" fg:w="1"/><text x="69.5737%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3237%" y="325" width="0.0805%" height="15" fill="rgb(249,35,13)" fg:x="861" fg:w="1"/><text x="69.5737%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3237%" y="309" width="0.0805%" height="15" fill="rgb(218,7,2)" fg:x="861" fg:w="1"/><text x="69.5737%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3237%" y="293" width="0.0805%" height="15" fill="rgb(238,107,27)" fg:x="861" fg:w="1"/><text x="69.5737%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3237%" y="277" width="0.0805%" height="15" fill="rgb(217,88,38)" fg:x="861" fg:w="1"/><text x="69.5737%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3237%" y="261" width="0.0805%" height="15" fill="rgb(230,207,0)" fg:x="861" fg:w="1"/><text x="69.5737%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3237%" y="245" width="0.0805%" height="15" fill="rgb(249,64,54)" fg:x="861" fg:w="1"/><text x="69.5737%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3237%" y="229" width="0.0805%" height="15" fill="rgb(231,7,11)" fg:x="861" fg:w="1"/><text x="69.5737%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.3237%" y="213" width="0.0805%" height="15" fill="rgb(205,149,21)" fg:x="861" fg:w="1"/><text x="69.5737%" y="223.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="69.4042%" y="485" width="0.0805%" height="15" fill="rgb(215,126,34)" fg:x="862" fg:w="1"/><text x="69.6542%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="69.4042%" y="469" width="0.0805%" height="15" fill="rgb(241,132,45)" fg:x="862" fg:w="1"/><text x="69.6542%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4042%" y="453" width="0.0805%" height="15" fill="rgb(252,69,32)" fg:x="862" fg:w="1"/><text x="69.6542%" y="463.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (685 samples, 55.15%)</title><rect x="14.4122%" y="677" width="55.1530%" height="15" fill="rgb(232,204,19)" fg:x="179" fg:w="685"/><text x="14.6622%" y="687.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (669 samples, 53.86%)</title><rect x="15.7005%" y="661" width="53.8647%" height="15" fill="rgb(249,15,47)" fg:x="195" fg:w="669"/><text x="15.9505%" y="671.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (669 samples, 53.86%)</title><rect x="15.7005%" y="645" width="53.8647%" height="15" fill="rgb(209,227,23)" fg:x="195" fg:w="669"/><text x="15.9505%" y="655.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (669 samples, 53.86%)</title><rect x="15.7005%" y="629" width="53.8647%" height="15" fill="rgb(248,92,24)" fg:x="195" fg:w="669"/><text x="15.9505%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (669 samples, 53.86%)</title><rect x="15.7005%" y="613" width="53.8647%" height="15" fill="rgb(247,59,2)" fg:x="195" fg:w="669"/><text x="15.9505%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (669 samples, 53.86%)</title><rect x="15.7005%" y="597" width="53.8647%" height="15" fill="rgb(221,30,5)" fg:x="195" fg:w="669"/><text x="15.9505%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (669 samples, 53.86%)</title><rect x="15.7005%" y="581" width="53.8647%" height="15" fill="rgb(208,108,53)" fg:x="195" fg:w="669"/><text x="15.9505%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (669 samples, 53.86%)</title><rect x="15.7005%" y="565" width="53.8647%" height="15" fill="rgb(211,183,26)" fg:x="195" fg:w="669"/><text x="15.9505%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (669 samples, 53.86%)</title><rect x="15.7005%" y="549" width="53.8647%" height="15" fill="rgb(232,132,4)" fg:x="195" fg:w="669"/><text x="15.9505%" y="559.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (669 samples, 53.86%)</title><rect x="15.7005%" y="533" width="53.8647%" height="15" fill="rgb(253,128,37)" fg:x="195" fg:w="669"/><text x="15.9505%" y="543.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (23 samples, 1.85%)</title><rect x="67.7134%" y="517" width="1.8519%" height="15" fill="rgb(221,58,24)" fg:x="841" fg:w="23"/><text x="67.9634%" y="527.50">k..</text></g><g><title>kernel::model::scopes::Scopes::load_scope (22 samples, 1.77%)</title><rect x="67.7939%" y="501" width="1.7713%" height="15" fill="rgb(230,54,45)" fg:x="842" fg:w="22"/><text x="68.0439%" y="511.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4847%" y="485" width="0.0805%" height="15" fill="rgb(254,21,18)" fg:x="863" fg:w="1"/><text x="69.7347%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4847%" y="469" width="0.0805%" height="15" fill="rgb(221,108,0)" fg:x="863" fg:w="1"/><text x="69.7347%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4847%" y="453" width="0.0805%" height="15" fill="rgb(206,95,1)" fg:x="863" fg:w="1"/><text x="69.7347%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4847%" y="437" width="0.0805%" height="15" fill="rgb(237,52,5)" fg:x="863" fg:w="1"/><text x="69.7347%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.4847%" y="421" width="0.0805%" height="15" fill="rgb(218,150,34)" fg:x="863" fg:w="1"/><text x="69.7347%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.4847%" y="405" width="0.0805%" height="15" fill="rgb(235,194,28)" fg:x="863" fg:w="1"/><text x="69.7347%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.4847%" y="389" width="0.0805%" height="15" fill="rgb(245,92,18)" fg:x="863" fg:w="1"/><text x="69.7347%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="69.5652%" y="613" width="0.1610%" height="15" fill="rgb(253,203,53)" fg:x="864" fg:w="2"/><text x="69.8152%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.6457%" y="597" width="0.0805%" height="15" fill="rgb(249,185,47)" fg:x="865" fg:w="1"/><text x="69.8957%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.6457%" y="581" width="0.0805%" height="15" fill="rgb(252,194,52)" fg:x="865" fg:w="1"/><text x="69.8957%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6457%" y="565" width="0.0805%" height="15" fill="rgb(210,53,36)" fg:x="865" fg:w="1"/><text x="69.8957%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6457%" y="549" width="0.0805%" height="15" fill="rgb(237,37,25)" fg:x="865" fg:w="1"/><text x="69.8957%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6457%" y="533" width="0.0805%" height="15" fill="rgb(242,116,27)" fg:x="865" fg:w="1"/><text x="69.8957%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6457%" y="517" width="0.0805%" height="15" fill="rgb(213,185,26)" fg:x="865" fg:w="1"/><text x="69.8957%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.6457%" y="501" width="0.0805%" height="15" fill="rgb(225,204,8)" fg:x="865" fg:w="1"/><text x="69.8957%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6457%" y="485" width="0.0805%" height="15" fill="rgb(254,111,37)" fg:x="865" fg:w="1"/><text x="69.8957%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6457%" y="469" width="0.0805%" height="15" fill="rgb(242,35,9)" fg:x="865" fg:w="1"/><text x="69.8957%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="69.7262%" y="597" width="0.0805%" height="15" fill="rgb(232,138,49)" fg:x="866" fg:w="1"/><text x="69.9762%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="69.7262%" y="581" width="0.0805%" height="15" fill="rgb(247,56,4)" fg:x="866" fg:w="1"/><text x="69.9762%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.7262%" y="565" width="0.0805%" height="15" fill="rgb(226,179,17)" fg:x="866" fg:w="1"/><text x="69.9762%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7262%" y="549" width="0.0805%" height="15" fill="rgb(216,163,45)" fg:x="866" fg:w="1"/><text x="69.9762%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.7262%" y="533" width="0.0805%" height="15" fill="rgb(211,157,3)" fg:x="866" fg:w="1"/><text x="69.9762%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7262%" y="517" width="0.0805%" height="15" fill="rgb(234,44,20)" fg:x="866" fg:w="1"/><text x="69.9762%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.7262%" y="501" width="0.0805%" height="15" fill="rgb(254,138,23)" fg:x="866" fg:w="1"/><text x="69.9762%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.7262%" y="485" width="0.0805%" height="15" fill="rgb(206,119,39)" fg:x="866" fg:w="1"/><text x="69.9762%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.7262%" y="469" width="0.0805%" height="15" fill="rgb(231,105,52)" fg:x="866" fg:w="1"/><text x="69.9762%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.7262%" y="453" width="0.0805%" height="15" fill="rgb(250,20,5)" fg:x="866" fg:w="1"/><text x="69.9762%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.7262%" y="437" width="0.0805%" height="15" fill="rgb(215,198,30)" fg:x="866" fg:w="1"/><text x="69.9762%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.7262%" y="421" width="0.0805%" height="15" fill="rgb(246,142,8)" fg:x="866" fg:w="1"/><text x="69.9762%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8068%" y="469" width="0.0805%" height="15" fill="rgb(243,26,38)" fg:x="867" fg:w="1"/><text x="70.0568%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8068%" y="453" width="0.0805%" height="15" fill="rgb(205,133,28)" fg:x="867" fg:w="1"/><text x="70.0568%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8068%" y="437" width="0.0805%" height="15" fill="rgb(212,34,0)" fg:x="867" fg:w="1"/><text x="70.0568%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8068%" y="421" width="0.0805%" height="15" fill="rgb(251,226,22)" fg:x="867" fg:w="1"/><text x="70.0568%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8068%" y="405" width="0.0805%" height="15" fill="rgb(252,119,9)" fg:x="867" fg:w="1"/><text x="70.0568%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8068%" y="389" width="0.0805%" height="15" fill="rgb(213,150,50)" fg:x="867" fg:w="1"/><text x="70.0568%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (691 samples, 55.64%)</title><rect x="14.3317%" y="725" width="55.6361%" height="15" fill="rgb(212,24,39)" fg:x="178" fg:w="691"/><text x="14.5817%" y="735.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (690 samples, 55.56%)</title><rect x="14.4122%" y="709" width="55.5556%" height="15" fill="rgb(213,46,39)" fg:x="179" fg:w="690"/><text x="14.6622%" y="719.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (690 samples, 55.56%)</title><rect x="14.4122%" y="693" width="55.5556%" height="15" fill="rgb(239,106,12)" fg:x="179" fg:w="690"/><text x="14.6622%" y="703.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (5 samples, 0.40%)</title><rect x="69.5652%" y="677" width="0.4026%" height="15" fill="rgb(249,229,21)" fg:x="864" fg:w="5"/><text x="69.8152%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.40%)</title><rect x="69.5652%" y="661" width="0.4026%" height="15" fill="rgb(212,158,3)" fg:x="864" fg:w="5"/><text x="69.8152%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="69.5652%" y="645" width="0.4026%" height="15" fill="rgb(253,26,48)" fg:x="864" fg:w="5"/><text x="69.8152%" y="655.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="69.5652%" y="629" width="0.4026%" height="15" fill="rgb(238,178,20)" fg:x="864" fg:w="5"/><text x="69.8152%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="69.7262%" y="613" width="0.2415%" height="15" fill="rgb(208,86,15)" fg:x="866" fg:w="3"/><text x="69.9762%" y="623.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="69.8068%" y="597" width="0.1610%" height="15" fill="rgb(239,42,53)" fg:x="867" fg:w="2"/><text x="70.0568%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.8068%" y="581" width="0.1610%" height="15" fill="rgb(245,226,8)" fg:x="867" fg:w="2"/><text x="70.0568%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8068%" y="565" width="0.1610%" height="15" fill="rgb(216,176,32)" fg:x="867" fg:w="2"/><text x="70.0568%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.8068%" y="549" width="0.1610%" height="15" fill="rgb(231,186,21)" fg:x="867" fg:w="2"/><text x="70.0568%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8068%" y="533" width="0.1610%" height="15" fill="rgb(205,95,49)" fg:x="867" fg:w="2"/><text x="70.0568%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.8068%" y="517" width="0.1610%" height="15" fill="rgb(217,145,8)" fg:x="867" fg:w="2"/><text x="70.0568%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8068%" y="501" width="0.1610%" height="15" fill="rgb(239,144,48)" fg:x="867" fg:w="2"/><text x="70.0568%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.8068%" y="485" width="0.1610%" height="15" fill="rgb(214,189,23)" fg:x="867" fg:w="2"/><text x="70.0568%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8873%" y="469" width="0.0805%" height="15" fill="rgb(229,157,17)" fg:x="868" fg:w="1"/><text x="70.1373%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8873%" y="453" width="0.0805%" height="15" fill="rgb(230,5,48)" fg:x="868" fg:w="1"/><text x="70.1373%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (870 samples, 70.05%)</title><rect x="0.0000%" y="853" width="70.0483%" height="15" fill="rgb(224,156,48)" fg:x="0" fg:w="870"/><text x="0.2500%" y="863.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (870 samples, 70.05%)</title><rect x="0.0000%" y="837" width="70.0483%" height="15" fill="rgb(223,14,29)" fg:x="0" fg:w="870"/><text x="0.2500%" y="847.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (870 samples, 70.05%)</title><rect x="0.0000%" y="821" width="70.0483%" height="15" fill="rgb(229,96,36)" fg:x="0" fg:w="870"/><text x="0.2500%" y="831.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (693 samples, 55.80%)</title><rect x="14.2512%" y="805" width="55.7971%" height="15" fill="rgb(231,102,53)" fg:x="177" fg:w="693"/><text x="14.5012%" y="815.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (693 samples, 55.80%)</title><rect x="14.2512%" y="789" width="55.7971%" height="15" fill="rgb(210,77,38)" fg:x="177" fg:w="693"/><text x="14.5012%" y="799.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (693 samples, 55.80%)</title><rect x="14.2512%" y="773" width="55.7971%" height="15" fill="rgb(235,131,6)" fg:x="177" fg:w="693"/><text x="14.5012%" y="783.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (692 samples, 55.72%)</title><rect x="14.3317%" y="757" width="55.7166%" height="15" fill="rgb(252,55,38)" fg:x="178" fg:w="692"/><text x="14.5817%" y="767.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (692 samples, 55.72%)</title><rect x="14.3317%" y="741" width="55.7166%" height="15" fill="rgb(246,38,14)" fg:x="178" fg:w="692"/><text x="14.5817%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.9678%" y="725" width="0.0805%" height="15" fill="rgb(242,27,5)" fg:x="869" fg:w="1"/><text x="70.2178%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.9678%" y="709" width="0.0805%" height="15" fill="rgb(228,65,35)" fg:x="869" fg:w="1"/><text x="70.2178%" y="719.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="69.9678%" y="693" width="0.0805%" height="15" fill="rgb(245,93,11)" fg:x="869" fg:w="1"/><text x="70.2178%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0483%" y="805" width="0.0805%" height="15" fill="rgb(213,1,31)" fg:x="870" fg:w="1"/><text x="70.2983%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (1 samples, 0.08%)</title><rect x="70.0483%" y="789" width="0.0805%" height="15" fill="rgb(237,205,14)" fg:x="870" fg:w="1"/><text x="70.2983%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0483%" y="773" width="0.0805%" height="15" fill="rgb(232,118,45)" fg:x="870" fg:w="1"/><text x="70.2983%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="70.0483%" y="757" width="0.0805%" height="15" fill="rgb(218,5,6)" fg:x="870" fg:w="1"/><text x="70.2983%" y="767.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0483%" y="741" width="0.0805%" height="15" fill="rgb(251,87,51)" fg:x="870" fg:w="1"/><text x="70.2983%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0483%" y="725" width="0.0805%" height="15" fill="rgb(207,225,20)" fg:x="870" fg:w="1"/><text x="70.2983%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="70.0483%" y="709" width="0.0805%" height="15" fill="rgb(222,78,54)" fg:x="870" fg:w="1"/><text x="70.2983%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.0483%" y="693" width="0.0805%" height="15" fill="rgb(232,85,16)" fg:x="870" fg:w="1"/><text x="70.2983%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0483%" y="677" width="0.0805%" height="15" fill="rgb(244,25,33)" fg:x="870" fg:w="1"/><text x="70.2983%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0483%" y="661" width="0.0805%" height="15" fill="rgb(233,24,36)" fg:x="870" fg:w="1"/><text x="70.2983%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.0483%" y="645" width="0.0805%" height="15" fill="rgb(253,49,54)" fg:x="870" fg:w="1"/><text x="70.2983%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0483%" y="629" width="0.0805%" height="15" fill="rgb(245,12,22)" fg:x="870" fg:w="1"/><text x="70.2983%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="70.1288%" y="709" width="0.0805%" height="15" fill="rgb(253,141,28)" fg:x="871" fg:w="1"/><text x="70.3788%" y="719.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="70.1288%" y="693" width="0.0805%" height="15" fill="rgb(225,207,27)" fg:x="871" fg:w="1"/><text x="70.3788%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1288%" y="677" width="0.0805%" height="15" fill="rgb(220,84,2)" fg:x="871" fg:w="1"/><text x="70.3788%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1288%" y="661" width="0.0805%" height="15" fill="rgb(224,37,37)" fg:x="871" fg:w="1"/><text x="70.3788%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.1288%" y="645" width="0.0805%" height="15" fill="rgb(220,143,18)" fg:x="871" fg:w="1"/><text x="70.3788%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1288%" y="629" width="0.0805%" height="15" fill="rgb(210,88,33)" fg:x="871" fg:w="1"/><text x="70.3788%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1288%" y="613" width="0.0805%" height="15" fill="rgb(219,87,51)" fg:x="871" fg:w="1"/><text x="70.3788%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1288%" y="597" width="0.0805%" height="15" fill="rgb(211,7,35)" fg:x="871" fg:w="1"/><text x="70.3788%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1288%" y="581" width="0.0805%" height="15" fill="rgb(232,77,2)" fg:x="871" fg:w="1"/><text x="70.3788%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1288%" y="565" width="0.0805%" height="15" fill="rgb(249,94,25)" fg:x="871" fg:w="1"/><text x="70.3788%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1288%" y="549" width="0.0805%" height="15" fill="rgb(215,112,2)" fg:x="871" fg:w="1"/><text x="70.3788%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1288%" y="533" width="0.0805%" height="15" fill="rgb(226,115,48)" fg:x="871" fg:w="1"/><text x="70.3788%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1288%" y="517" width="0.0805%" height="15" fill="rgb(249,196,10)" fg:x="871" fg:w="1"/><text x="70.3788%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.1288%" y="501" width="0.0805%" height="15" fill="rgb(237,109,14)" fg:x="871" fg:w="1"/><text x="70.3788%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1288%" y="485" width="0.0805%" height="15" fill="rgb(217,103,53)" fg:x="871" fg:w="1"/><text x="70.3788%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1288%" y="469" width="0.0805%" height="15" fill="rgb(244,137,9)" fg:x="871" fg:w="1"/><text x="70.3788%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="70.1288%" y="453" width="0.0805%" height="15" fill="rgb(227,201,3)" fg:x="871" fg:w="1"/><text x="70.3788%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1288%" y="437" width="0.0805%" height="15" fill="rgb(243,94,6)" fg:x="871" fg:w="1"/><text x="70.3788%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="70.1288%" y="773" width="0.1610%" height="15" fill="rgb(235,118,5)" fg:x="871" fg:w="2"/><text x="70.3788%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="70.1288%" y="757" width="0.1610%" height="15" fill="rgb(247,10,30)" fg:x="871" fg:w="2"/><text x="70.3788%" y="767.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="70.1288%" y="741" width="0.1610%" height="15" fill="rgb(205,26,28)" fg:x="871" fg:w="2"/><text x="70.3788%" y="751.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="70.1288%" y="725" width="0.1610%" height="15" fill="rgb(206,99,35)" fg:x="871" fg:w="2"/><text x="70.3788%" y="735.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.2093%" y="709" width="0.0805%" height="15" fill="rgb(238,130,40)" fg:x="872" fg:w="1"/><text x="70.4593%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.2093%" y="693" width="0.0805%" height="15" fill="rgb(224,126,31)" fg:x="872" fg:w="1"/><text x="70.4593%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.2093%" y="677" width="0.0805%" height="15" fill="rgb(254,105,17)" fg:x="872" fg:w="1"/><text x="70.4593%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.2093%" y="661" width="0.0805%" height="15" fill="rgb(216,87,36)" fg:x="872" fg:w="1"/><text x="70.4593%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.2093%" y="645" width="0.0805%" height="15" fill="rgb(240,21,12)" fg:x="872" fg:w="1"/><text x="70.4593%" y="655.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.2093%" y="629" width="0.0805%" height="15" fill="rgb(245,192,34)" fg:x="872" fg:w="1"/><text x="70.4593%" y="639.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.2093%" y="613" width="0.0805%" height="15" fill="rgb(226,100,49)" fg:x="872" fg:w="1"/><text x="70.4593%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::hooks (1 samples, 0.08%)</title><rect x="70.2899%" y="773" width="0.0805%" height="15" fill="rgb(245,188,27)" fg:x="873" fg:w="1"/><text x="70.5399%" y="783.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="70.3704%" y="725" width="0.0805%" height="15" fill="rgb(212,170,8)" fg:x="874" fg:w="1"/><text x="70.6204%" y="735.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="70.3704%" y="709" width="0.0805%" height="15" fill="rgb(217,113,29)" fg:x="874" fg:w="1"/><text x="70.6204%" y="719.50"></text></g><g><title>dcgettext (1 samples, 0.08%)</title><rect x="70.3704%" y="693" width="0.0805%" height="15" fill="rgb(237,30,3)" fg:x="874" fg:w="1"/><text x="70.6204%" y="703.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.48%)</title><rect x="70.1288%" y="805" width="0.4831%" height="15" fill="rgb(227,19,28)" fg:x="871" fg:w="6"/><text x="70.3788%" y="815.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.48%)</title><rect x="70.1288%" y="789" width="0.4831%" height="15" fill="rgb(239,172,45)" fg:x="871" fg:w="6"/><text x="70.3788%" y="799.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="70.3704%" y="773" width="0.2415%" height="15" fill="rgb(254,55,39)" fg:x="874" fg:w="3"/><text x="70.6204%" y="783.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="70.3704%" y="757" width="0.2415%" height="15" fill="rgb(249,208,12)" fg:x="874" fg:w="3"/><text x="70.6204%" y="767.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="70.3704%" y="741" width="0.2415%" height="15" fill="rgb(240,52,13)" fg:x="874" fg:w="3"/><text x="70.6204%" y="751.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="70.4509%" y="725" width="0.1610%" height="15" fill="rgb(252,149,13)" fg:x="875" fg:w="2"/><text x="70.7009%" y="735.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="70.4509%" y="709" width="0.1610%" height="15" fill="rgb(232,81,48)" fg:x="875" fg:w="2"/><text x="70.7009%" y="719.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="70.4509%" y="693" width="0.1610%" height="15" fill="rgb(222,144,2)" fg:x="875" fg:w="2"/><text x="70.7009%" y="703.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="70.4509%" y="677" width="0.1610%" height="15" fill="rgb(216,81,32)" fg:x="875" fg:w="2"/><text x="70.7009%" y="687.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="70.4509%" y="661" width="0.1610%" height="15" fill="rgb(244,78,51)" fg:x="875" fg:w="2"/><text x="70.7009%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6119%" y="725" width="0.0805%" height="15" fill="rgb(217,66,21)" fg:x="877" fg:w="1"/><text x="70.8619%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.6119%" y="709" width="0.0805%" height="15" fill="rgb(247,101,42)" fg:x="877" fg:w="1"/><text x="70.8619%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.6119%" y="693" width="0.0805%" height="15" fill="rgb(227,81,39)" fg:x="877" fg:w="1"/><text x="70.8619%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.6119%" y="677" width="0.0805%" height="15" fill="rgb(220,223,44)" fg:x="877" fg:w="1"/><text x="70.8619%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.6119%" y="661" width="0.0805%" height="15" fill="rgb(205,218,2)" fg:x="877" fg:w="1"/><text x="70.8619%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.6119%" y="645" width="0.0805%" height="15" fill="rgb(212,207,28)" fg:x="877" fg:w="1"/><text x="70.8619%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.6119%" y="629" width="0.0805%" height="15" fill="rgb(224,12,41)" fg:x="877" fg:w="1"/><text x="70.8619%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.6924%" y="661" width="0.0805%" height="15" fill="rgb(216,118,12)" fg:x="878" fg:w="1"/><text x="70.9424%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7729%" y="661" width="0.0805%" height="15" fill="rgb(252,97,46)" fg:x="879" fg:w="1"/><text x="71.0229%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.7729%" y="645" width="0.0805%" height="15" fill="rgb(244,206,19)" fg:x="879" fg:w="1"/><text x="71.0229%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.7729%" y="629" width="0.0805%" height="15" fill="rgb(231,84,31)" fg:x="879" fg:w="1"/><text x="71.0229%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="70.6924%" y="725" width="0.2415%" height="15" fill="rgb(244,133,0)" fg:x="878" fg:w="3"/><text x="70.9424%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="70.6924%" y="709" width="0.2415%" height="15" fill="rgb(223,15,50)" fg:x="878" fg:w="3"/><text x="70.9424%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="70.6924%" y="693" width="0.2415%" height="15" fill="rgb(250,118,49)" fg:x="878" fg:w="3"/><text x="70.9424%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="70.6924%" y="677" width="0.2415%" height="15" fill="rgb(248,25,38)" fg:x="878" fg:w="3"/><text x="70.9424%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.8535%" y="661" width="0.0805%" height="15" fill="rgb(215,70,14)" fg:x="880" fg:w="1"/><text x="71.1035%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9340%" y="725" width="0.0805%" height="15" fill="rgb(215,28,15)" fg:x="881" fg:w="1"/><text x="71.1840%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.9340%" y="709" width="0.0805%" height="15" fill="rgb(243,6,28)" fg:x="881" fg:w="1"/><text x="71.1840%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9340%" y="693" width="0.0805%" height="15" fill="rgb(222,130,1)" fg:x="881" fg:w="1"/><text x="71.1840%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9340%" y="677" width="0.0805%" height="15" fill="rgb(236,166,44)" fg:x="881" fg:w="1"/><text x="71.1840%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.9340%" y="661" width="0.0805%" height="15" fill="rgb(221,108,14)" fg:x="881" fg:w="1"/><text x="71.1840%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9340%" y="645" width="0.0805%" height="15" fill="rgb(252,3,45)" fg:x="881" fg:w="1"/><text x="71.1840%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="71.0145%" y="629" width="0.1610%" height="15" fill="rgb(237,68,30)" fg:x="882" fg:w="2"/><text x="71.2645%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0950%" y="613" width="0.0805%" height="15" fill="rgb(211,79,22)" fg:x="883" fg:w="1"/><text x="71.3450%" y="623.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="70.6119%" y="789" width="0.6441%" height="15" fill="rgb(252,185,21)" fg:x="877" fg:w="8"/><text x="70.8619%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.64%)</title><rect x="70.6119%" y="773" width="0.6441%" height="15" fill="rgb(225,189,26)" fg:x="877" fg:w="8"/><text x="70.8619%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.64%)</title><rect x="70.6119%" y="757" width="0.6441%" height="15" fill="rgb(241,30,40)" fg:x="877" fg:w="8"/><text x="70.8619%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (8 samples, 0.64%)</title><rect x="70.6119%" y="741" width="0.6441%" height="15" fill="rgb(235,215,44)" fg:x="877" fg:w="8"/><text x="70.8619%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="71.0145%" y="725" width="0.2415%" height="15" fill="rgb(205,8,29)" fg:x="882" fg:w="3"/><text x="71.2645%" y="735.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="71.0145%" y="709" width="0.2415%" height="15" fill="rgb(241,137,42)" fg:x="882" fg:w="3"/><text x="71.2645%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="71.0145%" y="693" width="0.2415%" height="15" fill="rgb(237,155,2)" fg:x="882" fg:w="3"/><text x="71.2645%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="71.0145%" y="677" width="0.2415%" height="15" fill="rgb(245,29,42)" fg:x="882" fg:w="3"/><text x="71.2645%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="71.0145%" y="661" width="0.2415%" height="15" fill="rgb(234,101,35)" fg:x="882" fg:w="3"/><text x="71.2645%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="71.0145%" y="645" width="0.2415%" height="15" fill="rgb(228,64,37)" fg:x="882" fg:w="3"/><text x="71.2645%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1755%" y="629" width="0.0805%" height="15" fill="rgb(217,214,36)" fg:x="884" fg:w="1"/><text x="71.4255%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.1755%" y="613" width="0.0805%" height="15" fill="rgb(243,70,3)" fg:x="884" fg:w="1"/><text x="71.4255%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1755%" y="597" width="0.0805%" height="15" fill="rgb(253,158,52)" fg:x="884" fg:w="1"/><text x="71.4255%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.1755%" y="581" width="0.0805%" height="15" fill="rgb(234,111,54)" fg:x="884" fg:w="1"/><text x="71.4255%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1755%" y="565" width="0.0805%" height="15" fill="rgb(217,70,32)" fg:x="884" fg:w="1"/><text x="71.4255%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.1755%" y="549" width="0.0805%" height="15" fill="rgb(234,18,33)" fg:x="884" fg:w="1"/><text x="71.4255%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="71.2560%" y="773" width="0.0805%" height="15" fill="rgb(234,12,49)" fg:x="885" fg:w="1"/><text x="71.5060%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="71.2560%" y="757" width="0.0805%" height="15" fill="rgb(236,10,21)" fg:x="885" fg:w="1"/><text x="71.5060%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="71.2560%" y="741" width="0.0805%" height="15" fill="rgb(248,182,45)" fg:x="885" fg:w="1"/><text x="71.5060%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="71.2560%" y="725" width="0.0805%" height="15" fill="rgb(217,95,36)" fg:x="885" fg:w="1"/><text x="71.5060%" y="735.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="71.2560%" y="709" width="0.0805%" height="15" fill="rgb(212,110,31)" fg:x="885" fg:w="1"/><text x="71.5060%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="71.2560%" y="693" width="0.0805%" height="15" fill="rgb(206,32,53)" fg:x="885" fg:w="1"/><text x="71.5060%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2560%" y="677" width="0.0805%" height="15" fill="rgb(246,141,37)" fg:x="885" fg:w="1"/><text x="71.5060%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2560%" y="661" width="0.0805%" height="15" fill="rgb(219,16,7)" fg:x="885" fg:w="1"/><text x="71.5060%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2560%" y="645" width="0.0805%" height="15" fill="rgb(230,205,45)" fg:x="885" fg:w="1"/><text x="71.5060%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2560%" y="629" width="0.0805%" height="15" fill="rgb(231,43,49)" fg:x="885" fg:w="1"/><text x="71.5060%" y="639.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="71.2560%" y="789" width="0.1610%" height="15" fill="rgb(212,106,34)" fg:x="885" fg:w="2"/><text x="71.5060%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="71.3366%" y="773" width="0.0805%" height="15" fill="rgb(206,83,17)" fg:x="886" fg:w="1"/><text x="71.5866%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="71.3366%" y="757" width="0.0805%" height="15" fill="rgb(244,154,49)" fg:x="886" fg:w="1"/><text x="71.5866%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="71.3366%" y="741" width="0.0805%" height="15" fill="rgb(244,149,49)" fg:x="886" fg:w="1"/><text x="71.5866%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.3366%" y="725" width="0.0805%" height="15" fill="rgb(227,134,18)" fg:x="886" fg:w="1"/><text x="71.5866%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.3366%" y="709" width="0.0805%" height="15" fill="rgb(237,116,36)" fg:x="886" fg:w="1"/><text x="71.5866%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.3366%" y="693" width="0.0805%" height="15" fill="rgb(205,129,40)" fg:x="886" fg:w="1"/><text x="71.5866%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="71.3366%" y="677" width="0.0805%" height="15" fill="rgb(236,178,4)" fg:x="886" fg:w="1"/><text x="71.5866%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.3366%" y="661" width="0.0805%" height="15" fill="rgb(251,76,53)" fg:x="886" fg:w="1"/><text x="71.5866%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3366%" y="645" width="0.0805%" height="15" fill="rgb(242,92,40)" fg:x="886" fg:w="1"/><text x="71.5866%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3366%" y="629" width="0.0805%" height="15" fill="rgb(209,45,30)" fg:x="886" fg:w="1"/><text x="71.5866%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3366%" y="613" width="0.0805%" height="15" fill="rgb(218,157,36)" fg:x="886" fg:w="1"/><text x="71.5866%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.4171%" y="725" width="0.0805%" height="15" fill="rgb(222,186,16)" fg:x="887" fg:w="1"/><text x="71.6671%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.4171%" y="709" width="0.0805%" height="15" fill="rgb(254,72,35)" fg:x="887" fg:w="1"/><text x="71.6671%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.4171%" y="693" width="0.0805%" height="15" fill="rgb(224,25,35)" fg:x="887" fg:w="1"/><text x="71.6671%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.4171%" y="677" width="0.0805%" height="15" fill="rgb(206,135,52)" fg:x="887" fg:w="1"/><text x="71.6671%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4171%" y="661" width="0.0805%" height="15" fill="rgb(229,174,47)" fg:x="887" fg:w="1"/><text x="71.6671%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.4171%" y="645" width="0.0805%" height="15" fill="rgb(242,184,21)" fg:x="887" fg:w="1"/><text x="71.6671%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4171%" y="629" width="0.0805%" height="15" fill="rgb(213,22,45)" fg:x="887" fg:w="1"/><text x="71.6671%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.4171%" y="613" width="0.0805%" height="15" fill="rgb(237,81,54)" fg:x="887" fg:w="1"/><text x="71.6671%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4171%" y="597" width="0.0805%" height="15" fill="rgb(248,177,18)" fg:x="887" fg:w="1"/><text x="71.6671%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.4171%" y="581" width="0.0805%" height="15" fill="rgb(254,31,16)" fg:x="887" fg:w="1"/><text x="71.6671%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4976%" y="677" width="0.0805%" height="15" fill="rgb(235,20,31)" fg:x="888" fg:w="1"/><text x="71.7476%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4976%" y="661" width="0.0805%" height="15" fill="rgb(240,56,43)" fg:x="888" fg:w="1"/><text x="71.7476%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4976%" y="645" width="0.0805%" height="15" fill="rgb(237,197,51)" fg:x="888" fg:w="1"/><text x="71.7476%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4976%" y="629" width="0.0805%" height="15" fill="rgb(241,162,44)" fg:x="888" fg:w="1"/><text x="71.7476%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4976%" y="613" width="0.0805%" height="15" fill="rgb(224,23,20)" fg:x="888" fg:w="1"/><text x="71.7476%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4976%" y="597" width="0.0805%" height="15" fill="rgb(250,109,34)" fg:x="888" fg:w="1"/><text x="71.7476%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="71.4171%" y="789" width="0.2415%" height="15" fill="rgb(214,175,50)" fg:x="887" fg:w="3"/><text x="71.6671%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="71.4171%" y="773" width="0.2415%" height="15" fill="rgb(213,182,5)" fg:x="887" fg:w="3"/><text x="71.6671%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="71.4171%" y="757" width="0.2415%" height="15" fill="rgb(209,199,19)" fg:x="887" fg:w="3"/><text x="71.6671%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="71.4171%" y="741" width="0.2415%" height="15" fill="rgb(236,224,42)" fg:x="887" fg:w="3"/><text x="71.6671%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="71.4976%" y="725" width="0.1610%" height="15" fill="rgb(246,226,29)" fg:x="888" fg:w="2"/><text x="71.7476%" y="735.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="71.4976%" y="709" width="0.1610%" height="15" fill="rgb(227,223,11)" fg:x="888" fg:w="2"/><text x="71.7476%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="71.4976%" y="693" width="0.1610%" height="15" fill="rgb(219,7,51)" fg:x="888" fg:w="2"/><text x="71.7476%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5781%" y="677" width="0.0805%" height="15" fill="rgb(245,167,10)" fg:x="889" fg:w="1"/><text x="71.8281%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.5781%" y="661" width="0.0805%" height="15" fill="rgb(237,224,16)" fg:x="889" fg:w="1"/><text x="71.8281%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="71.5781%" y="645" width="0.0805%" height="15" fill="rgb(226,132,13)" fg:x="889" fg:w="1"/><text x="71.8281%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.5781%" y="629" width="0.0805%" height="15" fill="rgb(214,140,3)" fg:x="889" fg:w="1"/><text x="71.8281%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.5781%" y="613" width="0.0805%" height="15" fill="rgb(221,177,4)" fg:x="889" fg:w="1"/><text x="71.8281%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="71.5781%" y="597" width="0.0805%" height="15" fill="rgb(238,139,3)" fg:x="889" fg:w="1"/><text x="71.8281%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.5781%" y="581" width="0.0805%" height="15" fill="rgb(216,17,39)" fg:x="889" fg:w="1"/><text x="71.8281%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="71.6586%" y="773" width="0.0805%" height="15" fill="rgb(238,120,9)" fg:x="890" fg:w="1"/><text x="71.9086%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="71.6586%" y="757" width="0.0805%" height="15" fill="rgb(244,92,53)" fg:x="890" fg:w="1"/><text x="71.9086%" y="767.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="71.6586%" y="741" width="0.0805%" height="15" fill="rgb(224,148,33)" fg:x="890" fg:w="1"/><text x="71.9086%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.6586%" y="725" width="0.0805%" height="15" fill="rgb(243,6,36)" fg:x="890" fg:w="1"/><text x="71.9086%" y="735.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.6586%" y="709" width="0.0805%" height="15" fill="rgb(230,102,11)" fg:x="890" fg:w="1"/><text x="71.9086%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.6586%" y="693" width="0.0805%" height="15" fill="rgb(234,148,36)" fg:x="890" fg:w="1"/><text x="71.9086%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6586%" y="677" width="0.0805%" height="15" fill="rgb(251,153,25)" fg:x="890" fg:w="1"/><text x="71.9086%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6586%" y="661" width="0.0805%" height="15" fill="rgb(215,129,8)" fg:x="890" fg:w="1"/><text x="71.9086%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6586%" y="645" width="0.0805%" height="15" fill="rgb(224,128,35)" fg:x="890" fg:w="1"/><text x="71.9086%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6586%" y="629" width="0.0805%" height="15" fill="rgb(237,56,52)" fg:x="890" fg:w="1"/><text x="71.9086%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6586%" y="613" width="0.0805%" height="15" fill="rgb(234,213,19)" fg:x="890" fg:w="1"/><text x="71.9086%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6586%" y="597" width="0.0805%" height="15" fill="rgb(252,82,23)" fg:x="890" fg:w="1"/><text x="71.9086%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6586%" y="581" width="0.0805%" height="15" fill="rgb(254,201,21)" fg:x="890" fg:w="1"/><text x="71.9086%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6586%" y="565" width="0.0805%" height="15" fill="rgb(250,186,11)" fg:x="890" fg:w="1"/><text x="71.9086%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.6586%" y="549" width="0.0805%" height="15" fill="rgb(211,174,5)" fg:x="890" fg:w="1"/><text x="71.9086%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.6586%" y="533" width="0.0805%" height="15" fill="rgb(214,121,10)" fg:x="890" fg:w="1"/><text x="71.9086%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="71.7391%" y="773" width="0.0805%" height="15" fill="rgb(241,66,2)" fg:x="891" fg:w="1"/><text x="71.9891%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.7391%" y="757" width="0.0805%" height="15" fill="rgb(220,167,19)" fg:x="891" fg:w="1"/><text x="71.9891%" y="767.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="71.7391%" y="741" width="0.0805%" height="15" fill="rgb(231,54,50)" fg:x="891" fg:w="1"/><text x="71.9891%" y="751.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="71.7391%" y="725" width="0.0805%" height="15" fill="rgb(239,217,53)" fg:x="891" fg:w="1"/><text x="71.9891%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="71.7391%" y="709" width="0.0805%" height="15" fill="rgb(248,8,0)" fg:x="891" fg:w="1"/><text x="71.9891%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.9002%" y="661" width="0.0805%" height="15" fill="rgb(229,118,37)" fg:x="893" fg:w="1"/><text x="72.1502%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9002%" y="645" width="0.0805%" height="15" fill="rgb(253,223,43)" fg:x="893" fg:w="1"/><text x="72.1502%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.9002%" y="629" width="0.0805%" height="15" fill="rgb(211,77,36)" fg:x="893" fg:w="1"/><text x="72.1502%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="71.9002%" y="709" width="0.1610%" height="15" fill="rgb(219,3,53)" fg:x="893" fg:w="2"/><text x="72.1502%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.9002%" y="693" width="0.1610%" height="15" fill="rgb(244,45,42)" fg:x="893" fg:w="2"/><text x="72.1502%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.9002%" y="677" width="0.1610%" height="15" fill="rgb(225,95,27)" fg:x="893" fg:w="2"/><text x="72.1502%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.9807%" y="661" width="0.0805%" height="15" fill="rgb(207,74,8)" fg:x="894" fg:w="1"/><text x="72.2307%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.9807%" y="645" width="0.0805%" height="15" fill="rgb(243,63,36)" fg:x="894" fg:w="1"/><text x="72.2307%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.9807%" y="629" width="0.0805%" height="15" fill="rgb(211,180,12)" fg:x="894" fg:w="1"/><text x="72.2307%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9807%" y="613" width="0.0805%" height="15" fill="rgb(254,166,49)" fg:x="894" fg:w="1"/><text x="72.2307%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.9807%" y="597" width="0.0805%" height="15" fill="rgb(205,19,0)" fg:x="894" fg:w="1"/><text x="72.2307%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.9807%" y="581" width="0.0805%" height="15" fill="rgb(224,172,32)" fg:x="894" fg:w="1"/><text x="72.2307%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.9807%" y="565" width="0.0805%" height="15" fill="rgb(254,136,30)" fg:x="894" fg:w="1"/><text x="72.2307%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.9807%" y="549" width="0.0805%" height="15" fill="rgb(246,19,35)" fg:x="894" fg:w="1"/><text x="72.2307%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.9807%" y="533" width="0.0805%" height="15" fill="rgb(219,24,36)" fg:x="894" fg:w="1"/><text x="72.2307%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.0612%" y="709" width="0.1610%" height="15" fill="rgb(251,55,1)" fg:x="895" fg:w="2"/><text x="72.3112%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="72.0612%" y="693" width="0.1610%" height="15" fill="rgb(218,117,39)" fg:x="895" fg:w="2"/><text x="72.3112%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.0612%" y="677" width="0.1610%" height="15" fill="rgb(248,169,11)" fg:x="895" fg:w="2"/><text x="72.3112%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.0612%" y="661" width="0.1610%" height="15" fill="rgb(244,40,44)" fg:x="895" fg:w="2"/><text x="72.3112%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1417%" y="645" width="0.0805%" height="15" fill="rgb(234,62,37)" fg:x="896" fg:w="1"/><text x="72.3917%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.1417%" y="629" width="0.0805%" height="15" fill="rgb(207,117,42)" fg:x="896" fg:w="1"/><text x="72.3917%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.1417%" y="613" width="0.0805%" height="15" fill="rgb(213,43,2)" fg:x="896" fg:w="1"/><text x="72.3917%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1417%" y="597" width="0.0805%" height="15" fill="rgb(244,202,51)" fg:x="896" fg:w="1"/><text x="72.3917%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3027%" y="613" width="0.0805%" height="15" fill="rgb(253,174,46)" fg:x="898" fg:w="1"/><text x="72.5527%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3027%" y="597" width="0.0805%" height="15" fill="rgb(251,23,1)" fg:x="898" fg:w="1"/><text x="72.5527%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3027%" y="581" width="0.0805%" height="15" fill="rgb(253,26,1)" fg:x="898" fg:w="1"/><text x="72.5527%" y="591.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="71.8196%" y="773" width="0.6441%" height="15" fill="rgb(216,89,31)" fg:x="892" fg:w="8"/><text x="72.0696%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.64%)</title><rect x="71.8196%" y="757" width="0.6441%" height="15" fill="rgb(209,109,5)" fg:x="892" fg:w="8"/><text x="72.0696%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.64%)</title><rect x="71.8196%" y="741" width="0.6441%" height="15" fill="rgb(229,63,13)" fg:x="892" fg:w="8"/><text x="72.0696%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (8 samples, 0.64%)</title><rect x="71.8196%" y="725" width="0.6441%" height="15" fill="rgb(238,137,54)" fg:x="892" fg:w="8"/><text x="72.0696%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="72.2222%" y="709" width="0.2415%" height="15" fill="rgb(228,1,9)" fg:x="897" fg:w="3"/><text x="72.4722%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="72.2222%" y="693" width="0.2415%" height="15" fill="rgb(249,120,48)" fg:x="897" fg:w="3"/><text x="72.4722%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="72.2222%" y="677" width="0.2415%" height="15" fill="rgb(209,72,36)" fg:x="897" fg:w="3"/><text x="72.4722%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="72.2222%" y="661" width="0.2415%" height="15" fill="rgb(247,98,49)" fg:x="897" fg:w="3"/><text x="72.4722%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="72.2222%" y="645" width="0.2415%" height="15" fill="rgb(233,75,36)" fg:x="897" fg:w="3"/><text x="72.4722%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.2222%" y="629" width="0.2415%" height="15" fill="rgb(225,14,24)" fg:x="897" fg:w="3"/><text x="72.4722%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.3833%" y="613" width="0.0805%" height="15" fill="rgb(237,193,20)" fg:x="899" fg:w="1"/><text x="72.6333%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.3833%" y="597" width="0.0805%" height="15" fill="rgb(239,122,19)" fg:x="899" fg:w="1"/><text x="72.6333%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.3833%" y="581" width="0.0805%" height="15" fill="rgb(231,220,10)" fg:x="899" fg:w="1"/><text x="72.6333%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.3833%" y="565" width="0.0805%" height="15" fill="rgb(220,66,15)" fg:x="899" fg:w="1"/><text x="72.6333%" y="575.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.4638%" y="725" width="0.0805%" height="15" fill="rgb(215,171,52)" fg:x="900" fg:w="1"/><text x="72.7138%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.4638%" y="709" width="0.0805%" height="15" fill="rgb(241,169,50)" fg:x="900" fg:w="1"/><text x="72.7138%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="72.4638%" y="693" width="0.0805%" height="15" fill="rgb(236,189,0)" fg:x="900" fg:w="1"/><text x="72.7138%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.4638%" y="677" width="0.0805%" height="15" fill="rgb(217,147,20)" fg:x="900" fg:w="1"/><text x="72.7138%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="72.4638%" y="661" width="0.0805%" height="15" fill="rgb(206,188,39)" fg:x="900" fg:w="1"/><text x="72.7138%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.4638%" y="645" width="0.0805%" height="15" fill="rgb(227,118,25)" fg:x="900" fg:w="1"/><text x="72.7138%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4638%" y="629" width="0.0805%" height="15" fill="rgb(248,171,40)" fg:x="900" fg:w="1"/><text x="72.7138%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4638%" y="613" width="0.0805%" height="15" fill="rgb(251,90,54)" fg:x="900" fg:w="1"/><text x="72.7138%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4638%" y="597" width="0.0805%" height="15" fill="rgb(234,11,46)" fg:x="900" fg:w="1"/><text x="72.7138%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4638%" y="581" width="0.0805%" height="15" fill="rgb(229,134,13)" fg:x="900" fg:w="1"/><text x="72.7138%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.4638%" y="565" width="0.0805%" height="15" fill="rgb(223,129,3)" fg:x="900" fg:w="1"/><text x="72.7138%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.4638%" y="757" width="0.1610%" height="15" fill="rgb(221,124,13)" fg:x="900" fg:w="2"/><text x="72.7138%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="72.4638%" y="741" width="0.1610%" height="15" fill="rgb(234,3,18)" fg:x="900" fg:w="2"/><text x="72.7138%" y="751.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.5443%" y="725" width="0.0805%" height="15" fill="rgb(249,199,20)" fg:x="901" fg:w="1"/><text x="72.7943%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5443%" y="709" width="0.0805%" height="15" fill="rgb(224,134,6)" fg:x="901" fg:w="1"/><text x="72.7943%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5443%" y="693" width="0.0805%" height="15" fill="rgb(254,83,26)" fg:x="901" fg:w="1"/><text x="72.7943%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.5443%" y="677" width="0.0805%" height="15" fill="rgb(217,88,9)" fg:x="901" fg:w="1"/><text x="72.7943%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.6248%" y="741" width="0.0805%" height="15" fill="rgb(225,73,2)" fg:x="902" fg:w="1"/><text x="72.8748%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.6248%" y="725" width="0.0805%" height="15" fill="rgb(226,44,39)" fg:x="902" fg:w="1"/><text x="72.8748%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.6248%" y="709" width="0.0805%" height="15" fill="rgb(228,53,17)" fg:x="902" fg:w="1"/><text x="72.8748%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.6248%" y="693" width="0.0805%" height="15" fill="rgb(212,27,27)" fg:x="902" fg:w="1"/><text x="72.8748%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.6248%" y="677" width="0.0805%" height="15" fill="rgb(241,50,6)" fg:x="902" fg:w="1"/><text x="72.8748%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6248%" y="661" width="0.0805%" height="15" fill="rgb(225,28,51)" fg:x="902" fg:w="1"/><text x="72.8748%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6248%" y="645" width="0.0805%" height="15" fill="rgb(215,33,16)" fg:x="902" fg:w="1"/><text x="72.8748%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6248%" y="629" width="0.0805%" height="15" fill="rgb(243,40,39)" fg:x="902" fg:w="1"/><text x="72.8748%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6248%" y="613" width="0.0805%" height="15" fill="rgb(225,11,42)" fg:x="902" fg:w="1"/><text x="72.8748%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6248%" y="597" width="0.0805%" height="15" fill="rgb(241,220,38)" fg:x="902" fg:w="1"/><text x="72.8748%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="72.7053%" y="741" width="0.0805%" height="15" fill="rgb(244,52,35)" fg:x="903" fg:w="1"/><text x="72.9553%" y="751.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7053%" y="725" width="0.0805%" height="15" fill="rgb(246,42,46)" fg:x="903" fg:w="1"/><text x="72.9553%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7053%" y="709" width="0.0805%" height="15" fill="rgb(205,184,13)" fg:x="903" fg:w="1"/><text x="72.9553%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7053%" y="693" width="0.0805%" height="15" fill="rgb(209,48,36)" fg:x="903" fg:w="1"/><text x="72.9553%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.7053%" y="677" width="0.0805%" height="15" fill="rgb(244,34,51)" fg:x="903" fg:w="1"/><text x="72.9553%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.7053%" y="661" width="0.0805%" height="15" fill="rgb(221,107,33)" fg:x="903" fg:w="1"/><text x="72.9553%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.7053%" y="645" width="0.0805%" height="15" fill="rgb(224,203,12)" fg:x="903" fg:w="1"/><text x="72.9553%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7053%" y="629" width="0.0805%" height="15" fill="rgb(230,215,18)" fg:x="903" fg:w="1"/><text x="72.9553%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.7053%" y="613" width="0.0805%" height="15" fill="rgb(206,185,35)" fg:x="903" fg:w="1"/><text x="72.9553%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.7053%" y="597" width="0.0805%" height="15" fill="rgb(228,140,34)" fg:x="903" fg:w="1"/><text x="72.9553%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.7053%" y="581" width="0.0805%" height="15" fill="rgb(208,93,13)" fg:x="903" fg:w="1"/><text x="72.9553%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.7053%" y="565" width="0.0805%" height="15" fill="rgb(221,193,39)" fg:x="903" fg:w="1"/><text x="72.9553%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.7053%" y="549" width="0.0805%" height="15" fill="rgb(241,132,34)" fg:x="903" fg:w="1"/><text x="72.9553%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7053%" y="533" width="0.0805%" height="15" fill="rgb(221,141,10)" fg:x="903" fg:w="1"/><text x="72.9553%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.7858%" y="741" width="0.0805%" height="15" fill="rgb(226,90,31)" fg:x="904" fg:w="1"/><text x="73.0358%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7858%" y="725" width="0.0805%" height="15" fill="rgb(243,75,5)" fg:x="904" fg:w="1"/><text x="73.0358%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.7858%" y="709" width="0.0805%" height="15" fill="rgb(227,156,21)" fg:x="904" fg:w="1"/><text x="73.0358%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7858%" y="693" width="0.0805%" height="15" fill="rgb(250,195,8)" fg:x="904" fg:w="1"/><text x="73.0358%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7858%" y="677" width="0.0805%" height="15" fill="rgb(220,134,5)" fg:x="904" fg:w="1"/><text x="73.0358%" y="687.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="72.4638%" y="773" width="0.5636%" height="15" fill="rgb(246,106,34)" fg:x="900" fg:w="7"/><text x="72.7138%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="72.6248%" y="757" width="0.4026%" height="15" fill="rgb(205,1,4)" fg:x="902" fg:w="5"/><text x="72.8748%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="72.8663%" y="741" width="0.1610%" height="15" fill="rgb(224,151,29)" fg:x="905" fg:w="2"/><text x="73.1163%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="72.8663%" y="725" width="0.1610%" height="15" fill="rgb(251,196,0)" fg:x="905" fg:w="2"/><text x="73.1163%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="72.8663%" y="709" width="0.1610%" height="15" fill="rgb(212,127,0)" fg:x="905" fg:w="2"/><text x="73.1163%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="72.8663%" y="693" width="0.1610%" height="15" fill="rgb(236,71,53)" fg:x="905" fg:w="2"/><text x="73.1163%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="72.9469%" y="677" width="0.0805%" height="15" fill="rgb(227,99,0)" fg:x="906" fg:w="1"/><text x="73.1969%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.9469%" y="661" width="0.0805%" height="15" fill="rgb(239,89,21)" fg:x="906" fg:w="1"/><text x="73.1969%" y="671.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="73.0274%" y="773" width="0.0805%" height="15" fill="rgb(243,122,19)" fg:x="907" fg:w="1"/><text x="73.2774%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.0274%" y="757" width="0.0805%" height="15" fill="rgb(229,192,45)" fg:x="907" fg:w="1"/><text x="73.2774%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.0274%" y="741" width="0.0805%" height="15" fill="rgb(235,165,35)" fg:x="907" fg:w="1"/><text x="73.2774%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.0274%" y="725" width="0.0805%" height="15" fill="rgb(253,202,0)" fg:x="907" fg:w="1"/><text x="73.2774%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.0274%" y="709" width="0.0805%" height="15" fill="rgb(235,51,20)" fg:x="907" fg:w="1"/><text x="73.2774%" y="719.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="73.0274%" y="693" width="0.0805%" height="15" fill="rgb(218,95,46)" fg:x="907" fg:w="1"/><text x="73.2774%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.1079%" y="757" width="0.0805%" height="15" fill="rgb(212,81,10)" fg:x="908" fg:w="1"/><text x="73.3579%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.1079%" y="741" width="0.0805%" height="15" fill="rgb(240,59,0)" fg:x="908" fg:w="1"/><text x="73.3579%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.1079%" y="725" width="0.0805%" height="15" fill="rgb(212,191,42)" fg:x="908" fg:w="1"/><text x="73.3579%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.1079%" y="709" width="0.0805%" height="15" fill="rgb(233,140,3)" fg:x="908" fg:w="1"/><text x="73.3579%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="73.1079%" y="693" width="0.0805%" height="15" fill="rgb(215,69,23)" fg:x="908" fg:w="1"/><text x="73.3579%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.1079%" y="677" width="0.0805%" height="15" fill="rgb(240,202,20)" fg:x="908" fg:w="1"/><text x="73.3579%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="73.1079%" y="661" width="0.0805%" height="15" fill="rgb(209,146,50)" fg:x="908" fg:w="1"/><text x="73.3579%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.1079%" y="645" width="0.0805%" height="15" fill="rgb(253,102,54)" fg:x="908" fg:w="1"/><text x="73.3579%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1079%" y="629" width="0.0805%" height="15" fill="rgb(250,173,47)" fg:x="908" fg:w="1"/><text x="73.3579%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1079%" y="613" width="0.0805%" height="15" fill="rgb(232,142,7)" fg:x="908" fg:w="1"/><text x="73.3579%" y="623.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="73.1079%" y="773" width="0.1610%" height="15" fill="rgb(230,157,47)" fg:x="908" fg:w="2"/><text x="73.3579%" y="783.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="73.1884%" y="757" width="0.0805%" height="15" fill="rgb(214,177,35)" fg:x="909" fg:w="1"/><text x="73.4384%" y="767.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.1884%" y="741" width="0.0805%" height="15" fill="rgb(234,119,46)" fg:x="909" fg:w="1"/><text x="73.4384%" y="751.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="73.1884%" y="725" width="0.0805%" height="15" fill="rgb(241,180,50)" fg:x="909" fg:w="1"/><text x="73.4384%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.1884%" y="709" width="0.0805%" height="15" fill="rgb(221,54,25)" fg:x="909" fg:w="1"/><text x="73.4384%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.2689%" y="757" width="0.0805%" height="15" fill="rgb(209,157,44)" fg:x="910" fg:w="1"/><text x="73.5189%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.2689%" y="741" width="0.0805%" height="15" fill="rgb(246,115,41)" fg:x="910" fg:w="1"/><text x="73.5189%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.2689%" y="725" width="0.0805%" height="15" fill="rgb(229,86,1)" fg:x="910" fg:w="1"/><text x="73.5189%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.2689%" y="709" width="0.0805%" height="15" fill="rgb(240,108,53)" fg:x="910" fg:w="1"/><text x="73.5189%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.2689%" y="693" width="0.0805%" height="15" fill="rgb(227,134,2)" fg:x="910" fg:w="1"/><text x="73.5189%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.2689%" y="677" width="0.0805%" height="15" fill="rgb(213,129,25)" fg:x="910" fg:w="1"/><text x="73.5189%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2689%" y="661" width="0.0805%" height="15" fill="rgb(226,35,21)" fg:x="910" fg:w="1"/><text x="73.5189%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2689%" y="645" width="0.0805%" height="15" fill="rgb(208,129,26)" fg:x="910" fg:w="1"/><text x="73.5189%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2689%" y="629" width="0.0805%" height="15" fill="rgb(224,83,6)" fg:x="910" fg:w="1"/><text x="73.5189%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2689%" y="613" width="0.0805%" height="15" fill="rgb(227,52,39)" fg:x="910" fg:w="1"/><text x="73.5189%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.2689%" y="597" width="0.0805%" height="15" fill="rgb(241,30,17)" fg:x="910" fg:w="1"/><text x="73.5189%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2689%" y="581" width="0.0805%" height="15" fill="rgb(246,186,42)" fg:x="910" fg:w="1"/><text x="73.5189%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.2689%" y="565" width="0.0805%" height="15" fill="rgb(221,169,15)" fg:x="910" fg:w="1"/><text x="73.5189%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2689%" y="549" width="0.0805%" height="15" fill="rgb(235,108,21)" fg:x="910" fg:w="1"/><text x="73.5189%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2689%" y="533" width="0.0805%" height="15" fill="rgb(219,148,30)" fg:x="910" fg:w="1"/><text x="73.5189%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (22 samples, 1.77%)</title><rect x="71.6586%" y="789" width="1.7713%" height="15" fill="rgb(220,109,5)" fg:x="890" fg:w="22"/><text x="71.9086%" y="799.50">p..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="73.2689%" y="773" width="0.1610%" height="15" fill="rgb(213,203,48)" fg:x="910" fg:w="2"/><text x="73.5189%" y="783.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="73.3494%" y="757" width="0.0805%" height="15" fill="rgb(244,71,33)" fg:x="911" fg:w="1"/><text x="73.5994%" y="767.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="73.3494%" y="741" width="0.0805%" height="15" fill="rgb(209,23,2)" fg:x="911" fg:w="1"/><text x="73.5994%" y="751.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.3494%" y="725" width="0.0805%" height="15" fill="rgb(219,97,7)" fg:x="911" fg:w="1"/><text x="73.5994%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3494%" y="709" width="0.0805%" height="15" fill="rgb(216,161,23)" fg:x="911" fg:w="1"/><text x="73.5994%" y="719.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (36 samples, 2.90%)</title><rect x="70.6119%" y="805" width="2.8986%" height="15" fill="rgb(207,45,42)" fg:x="877" fg:w="36"/><text x="70.8619%" y="815.50">&lt;t..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="73.4300%" y="789" width="0.0805%" height="15" fill="rgb(241,61,4)" fg:x="912" fg:w="1"/><text x="73.6800%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="73.4300%" y="773" width="0.0805%" height="15" fill="rgb(236,170,1)" fg:x="912" fg:w="1"/><text x="73.6800%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.4300%" y="757" width="0.0805%" height="15" fill="rgb(239,72,5)" fg:x="912" fg:w="1"/><text x="73.6800%" y="767.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.4300%" y="741" width="0.0805%" height="15" fill="rgb(214,13,50)" fg:x="912" fg:w="1"/><text x="73.6800%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="73.5105%" y="805" width="0.0805%" height="15" fill="rgb(224,88,9)" fg:x="913" fg:w="1"/><text x="73.7605%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="73.5105%" y="789" width="0.0805%" height="15" fill="rgb(238,192,34)" fg:x="913" fg:w="1"/><text x="73.7605%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5105%" y="773" width="0.0805%" height="15" fill="rgb(217,203,50)" fg:x="913" fg:w="1"/><text x="73.7605%" y="783.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="73.5910%" y="773" width="0.0805%" height="15" fill="rgb(241,123,32)" fg:x="914" fg:w="1"/><text x="73.8410%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="73.5910%" y="757" width="0.0805%" height="15" fill="rgb(248,151,39)" fg:x="914" fg:w="1"/><text x="73.8410%" y="767.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.5910%" y="741" width="0.0805%" height="15" fill="rgb(208,89,6)" fg:x="914" fg:w="1"/><text x="73.8410%" y="751.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="73.5910%" y="725" width="0.0805%" height="15" fill="rgb(254,43,26)" fg:x="914" fg:w="1"/><text x="73.8410%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="73.6715%" y="725" width="0.0805%" height="15" fill="rgb(216,158,13)" fg:x="915" fg:w="1"/><text x="73.9215%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.6715%" y="709" width="0.0805%" height="15" fill="rgb(212,47,37)" fg:x="915" fg:w="1"/><text x="73.9215%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6715%" y="693" width="0.0805%" height="15" fill="rgb(254,16,10)" fg:x="915" fg:w="1"/><text x="73.9215%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.7520%" y="709" width="0.1610%" height="15" fill="rgb(223,228,16)" fg:x="916" fg:w="2"/><text x="74.0020%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.8325%" y="693" width="0.0805%" height="15" fill="rgb(249,108,50)" fg:x="917" fg:w="1"/><text x="74.0825%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.8325%" y="677" width="0.0805%" height="15" fill="rgb(208,220,5)" fg:x="917" fg:w="1"/><text x="74.0825%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.8325%" y="661" width="0.0805%" height="15" fill="rgb(217,89,48)" fg:x="917" fg:w="1"/><text x="74.0825%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.9130%" y="693" width="0.0805%" height="15" fill="rgb(212,113,41)" fg:x="918" fg:w="1"/><text x="74.1630%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.9936%" y="661" width="0.1610%" height="15" fill="rgb(231,127,5)" fg:x="919" fg:w="2"/><text x="74.2436%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.9936%" y="645" width="0.1610%" height="15" fill="rgb(217,141,17)" fg:x="919" fg:w="2"/><text x="74.2436%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="73.9936%" y="629" width="0.1610%" height="15" fill="rgb(245,125,54)" fg:x="919" fg:w="2"/><text x="74.2436%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="73.9936%" y="613" width="0.1610%" height="15" fill="rgb(248,125,3)" fg:x="919" fg:w="2"/><text x="74.2436%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.0741%" y="597" width="0.0805%" height="15" fill="rgb(236,119,51)" fg:x="920" fg:w="1"/><text x="74.3241%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.0741%" y="581" width="0.0805%" height="15" fill="rgb(239,99,8)" fg:x="920" fg:w="1"/><text x="74.3241%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.0741%" y="565" width="0.0805%" height="15" fill="rgb(224,228,4)" fg:x="920" fg:w="1"/><text x="74.3241%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.1546%" y="645" width="0.0805%" height="15" fill="rgb(220,131,45)" fg:x="921" fg:w="1"/><text x="74.4046%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="73.9130%" y="709" width="0.4026%" height="15" fill="rgb(215,62,5)" fg:x="918" fg:w="5"/><text x="74.1630%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="73.9936%" y="693" width="0.3221%" height="15" fill="rgb(253,12,24)" fg:x="919" fg:w="4"/><text x="74.2436%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="73.9936%" y="677" width="0.3221%" height="15" fill="rgb(248,120,50)" fg:x="919" fg:w="4"/><text x="74.2436%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.1546%" y="661" width="0.1610%" height="15" fill="rgb(245,194,10)" fg:x="921" fg:w="2"/><text x="74.4046%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2351%" y="645" width="0.0805%" height="15" fill="rgb(241,149,38)" fg:x="922" fg:w="1"/><text x="74.4851%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.2351%" y="629" width="0.0805%" height="15" fill="rgb(219,215,7)" fg:x="922" fg:w="1"/><text x="74.4851%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.2351%" y="613" width="0.0805%" height="15" fill="rgb(208,120,31)" fg:x="922" fg:w="1"/><text x="74.4851%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.2351%" y="597" width="0.0805%" height="15" fill="rgb(244,30,8)" fg:x="922" fg:w="1"/><text x="74.4851%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="73.6715%" y="741" width="0.7246%" height="15" fill="rgb(238,35,44)" fg:x="915" fg:w="9"/><text x="73.9215%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="73.7520%" y="725" width="0.6441%" height="15" fill="rgb(243,218,37)" fg:x="916" fg:w="8"/><text x="74.0020%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.3156%" y="709" width="0.0805%" height="15" fill="rgb(218,169,10)" fg:x="923" fg:w="1"/><text x="74.5656%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.3156%" y="693" width="0.0805%" height="15" fill="rgb(221,144,10)" fg:x="923" fg:w="1"/><text x="74.5656%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.3156%" y="677" width="0.0805%" height="15" fill="rgb(226,41,38)" fg:x="923" fg:w="1"/><text x="74.5656%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.3156%" y="661" width="0.0805%" height="15" fill="rgb(228,3,1)" fg:x="923" fg:w="1"/><text x="74.5656%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3961%" y="741" width="0.0805%" height="15" fill="rgb(209,129,12)" fg:x="924" fg:w="1"/><text x="74.6461%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.3961%" y="725" width="0.0805%" height="15" fill="rgb(213,136,33)" fg:x="924" fg:w="1"/><text x="74.6461%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3961%" y="709" width="0.0805%" height="15" fill="rgb(209,181,29)" fg:x="924" fg:w="1"/><text x="74.6461%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.3961%" y="693" width="0.0805%" height="15" fill="rgb(234,173,18)" fg:x="924" fg:w="1"/><text x="74.6461%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.4767%" y="661" width="0.0805%" height="15" fill="rgb(227,73,47)" fg:x="925" fg:w="1"/><text x="74.7267%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.4767%" y="709" width="0.1610%" height="15" fill="rgb(234,9,34)" fg:x="925" fg:w="2"/><text x="74.7267%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="74.4767%" y="693" width="0.1610%" height="15" fill="rgb(235,172,15)" fg:x="925" fg:w="2"/><text x="74.7267%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.4767%" y="677" width="0.1610%" height="15" fill="rgb(245,61,2)" fg:x="925" fg:w="2"/><text x="74.7267%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5572%" y="661" width="0.0805%" height="15" fill="rgb(238,39,47)" fg:x="926" fg:w="1"/><text x="74.8072%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5572%" y="645" width="0.0805%" height="15" fill="rgb(234,37,24)" fg:x="926" fg:w="1"/><text x="74.8072%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5572%" y="629" width="0.0805%" height="15" fill="rgb(248,223,24)" fg:x="926" fg:w="1"/><text x="74.8072%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5572%" y="613" width="0.0805%" height="15" fill="rgb(223,12,15)" fg:x="926" fg:w="1"/><text x="74.8072%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.5572%" y="597" width="0.0805%" height="15" fill="rgb(249,6,3)" fg:x="926" fg:w="1"/><text x="74.8072%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="74.4767%" y="725" width="0.4026%" height="15" fill="rgb(237,105,33)" fg:x="925" fg:w="5"/><text x="74.7267%" y="735.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="74.6377%" y="709" width="0.2415%" height="15" fill="rgb(252,208,35)" fg:x="927" fg:w="3"/><text x="74.8877%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="74.7182%" y="693" width="0.1610%" height="15" fill="rgb(215,181,35)" fg:x="928" fg:w="2"/><text x="74.9682%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.7987%" y="677" width="0.0805%" height="15" fill="rgb(246,212,3)" fg:x="929" fg:w="1"/><text x="75.0487%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.7987%" y="661" width="0.0805%" height="15" fill="rgb(247,156,24)" fg:x="929" fg:w="1"/><text x="75.0487%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.7987%" y="645" width="0.0805%" height="15" fill="rgb(248,9,31)" fg:x="929" fg:w="1"/><text x="75.0487%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.8792%" y="693" width="0.0805%" height="15" fill="rgb(234,26,45)" fg:x="930" fg:w="1"/><text x="75.1292%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.8792%" y="677" width="0.0805%" height="15" fill="rgb(249,11,32)" fg:x="930" fg:w="1"/><text x="75.1292%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.8792%" y="661" width="0.0805%" height="15" fill="rgb(249,162,33)" fg:x="930" fg:w="1"/><text x="75.1292%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.0403%" y="613" width="0.1610%" height="15" fill="rgb(232,4,32)" fg:x="932" fg:w="2"/><text x="75.2903%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.0403%" y="597" width="0.1610%" height="15" fill="rgb(212,5,45)" fg:x="932" fg:w="2"/><text x="75.2903%" y="607.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.0403%" y="581" width="0.1610%" height="15" fill="rgb(227,95,13)" fg:x="932" fg:w="2"/><text x="75.2903%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2013%" y="581" width="0.0805%" height="15" fill="rgb(223,205,10)" fg:x="934" fg:w="1"/><text x="75.4513%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="75.2818%" y="565" width="0.0805%" height="15" fill="rgb(222,178,8)" fg:x="935" fg:w="1"/><text x="75.5318%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4428%" y="517" width="0.0805%" height="15" fill="rgb(216,13,22)" fg:x="937" fg:w="1"/><text x="75.6928%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4428%" y="501" width="0.0805%" height="15" fill="rgb(240,167,12)" fg:x="937" fg:w="1"/><text x="75.6928%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4428%" y="485" width="0.0805%" height="15" fill="rgb(235,68,35)" fg:x="937" fg:w="1"/><text x="75.6928%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="74.8792%" y="725" width="0.7246%" height="15" fill="rgb(253,40,27)" fg:x="930" fg:w="9"/><text x="75.1292%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="74.8792%" y="709" width="0.7246%" height="15" fill="rgb(214,19,28)" fg:x="930" fg:w="9"/><text x="75.1292%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="74.9597%" y="693" width="0.6441%" height="15" fill="rgb(210,167,45)" fg:x="931" fg:w="8"/><text x="75.2097%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="74.9597%" y="677" width="0.6441%" height="15" fill="rgb(232,97,40)" fg:x="931" fg:w="8"/><text x="75.2097%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="74.9597%" y="661" width="0.6441%" height="15" fill="rgb(250,35,23)" fg:x="931" fg:w="8"/><text x="75.2097%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="75.0403%" y="645" width="0.5636%" height="15" fill="rgb(248,47,53)" fg:x="932" fg:w="7"/><text x="75.2903%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="75.0403%" y="629" width="0.5636%" height="15" fill="rgb(226,58,50)" fg:x="932" fg:w="7"/><text x="75.2903%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="75.2013%" y="613" width="0.4026%" height="15" fill="rgb(217,105,26)" fg:x="934" fg:w="5"/><text x="75.4513%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="75.2013%" y="597" width="0.4026%" height="15" fill="rgb(208,64,1)" fg:x="934" fg:w="5"/><text x="75.4513%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="75.2818%" y="581" width="0.3221%" height="15" fill="rgb(214,80,1)" fg:x="935" fg:w="4"/><text x="75.5318%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="75.3623%" y="565" width="0.2415%" height="15" fill="rgb(206,175,26)" fg:x="936" fg:w="3"/><text x="75.6123%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="75.3623%" y="549" width="0.2415%" height="15" fill="rgb(235,156,37)" fg:x="936" fg:w="3"/><text x="75.6123%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="75.3623%" y="533" width="0.2415%" height="15" fill="rgb(213,100,9)" fg:x="936" fg:w="3"/><text x="75.6123%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.5233%" y="517" width="0.0805%" height="15" fill="rgb(241,15,13)" fg:x="938" fg:w="1"/><text x="75.7733%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="75.5233%" y="501" width="0.0805%" height="15" fill="rgb(205,97,43)" fg:x="938" fg:w="1"/><text x="75.7733%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6039%" y="629" width="0.0805%" height="15" fill="rgb(216,106,32)" fg:x="939" fg:w="1"/><text x="75.8539%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.6039%" y="613" width="0.0805%" height="15" fill="rgb(226,200,8)" fg:x="939" fg:w="1"/><text x="75.8539%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.6039%" y="597" width="0.0805%" height="15" fill="rgb(244,54,29)" fg:x="939" fg:w="1"/><text x="75.8539%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.6039%" y="661" width="0.1610%" height="15" fill="rgb(252,169,12)" fg:x="939" fg:w="2"/><text x="75.8539%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.6039%" y="645" width="0.1610%" height="15" fill="rgb(231,199,11)" fg:x="939" fg:w="2"/><text x="75.8539%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6844%" y="629" width="0.0805%" height="15" fill="rgb(233,191,18)" fg:x="940" fg:w="1"/><text x="75.9344%" y="639.50"></text></g><g><title>engine::session::Session::close (28 samples, 2.25%)</title><rect x="73.5910%" y="805" width="2.2544%" height="15" fill="rgb(215,83,47)" fg:x="914" fg:w="28"/><text x="73.8410%" y="815.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (28 samples, 2.25%)</title><rect x="73.5910%" y="789" width="2.2544%" height="15" fill="rgb(251,67,19)" fg:x="914" fg:w="28"/><text x="73.8410%" y="799.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (27 samples, 2.17%)</title><rect x="73.6715%" y="773" width="2.1739%" height="15" fill="rgb(240,7,20)" fg:x="915" fg:w="27"/><text x="73.9215%" y="783.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (27 samples, 2.17%)</title><rect x="73.6715%" y="757" width="2.1739%" height="15" fill="rgb(210,150,26)" fg:x="915" fg:w="27"/><text x="73.9215%" y="767.50">e..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.37%)</title><rect x="74.4767%" y="741" width="1.3688%" height="15" fill="rgb(228,75,42)" fg:x="925" fg:w="17"/><text x="74.7267%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="75.6039%" y="725" width="0.2415%" height="15" fill="rgb(237,134,48)" fg:x="939" fg:w="3"/><text x="75.8539%" y="735.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="75.6039%" y="709" width="0.2415%" height="15" fill="rgb(205,80,50)" fg:x="939" fg:w="3"/><text x="75.8539%" y="719.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.6039%" y="693" width="0.2415%" height="15" fill="rgb(217,74,48)" fg:x="939" fg:w="3"/><text x="75.8539%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.6039%" y="677" width="0.2415%" height="15" fill="rgb(205,82,50)" fg:x="939" fg:w="3"/><text x="75.8539%" y="687.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.7649%" y="661" width="0.0805%" height="15" fill="rgb(228,1,33)" fg:x="941" fg:w="1"/><text x="76.0149%" y="671.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.7649%" y="645" width="0.0805%" height="15" fill="rgb(214,50,23)" fg:x="941" fg:w="1"/><text x="76.0149%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.9259%" y="645" width="0.0805%" height="15" fill="rgb(210,62,9)" fg:x="943" fg:w="1"/><text x="76.1759%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.9259%" y="629" width="0.0805%" height="15" fill="rgb(210,104,37)" fg:x="943" fg:w="1"/><text x="76.1759%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9259%" y="613" width="0.0805%" height="15" fill="rgb(232,104,43)" fg:x="943" fg:w="1"/><text x="76.1759%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (2 samples, 0.16%)</title><rect x="75.9259%" y="661" width="0.1610%" height="15" fill="rgb(244,52,6)" fg:x="943" fg:w="2"/><text x="76.1759%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (1 samples, 0.08%)</title><rect x="76.0064%" y="645" width="0.0805%" height="15" fill="rgb(211,174,52)" fg:x="944" fg:w="1"/><text x="76.2564%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0064%" y="629" width="0.0805%" height="15" fill="rgb(229,48,4)" fg:x="944" fg:w="1"/><text x="76.2564%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0064%" y="613" width="0.0805%" height="15" fill="rgb(205,155,16)" fg:x="944" fg:w="1"/><text x="76.2564%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0064%" y="597" width="0.0805%" height="15" fill="rgb(211,141,53)" fg:x="944" fg:w="1"/><text x="76.2564%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.0064%" y="581" width="0.0805%" height="15" fill="rgb(240,148,11)" fg:x="944" fg:w="1"/><text x="76.2564%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.0064%" y="565" width="0.0805%" height="15" fill="rgb(214,45,23)" fg:x="944" fg:w="1"/><text x="76.2564%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.0064%" y="549" width="0.0805%" height="15" fill="rgb(248,74,26)" fg:x="944" fg:w="1"/><text x="76.2564%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.0064%" y="533" width="0.0805%" height="15" fill="rgb(218,121,16)" fg:x="944" fg:w="1"/><text x="76.2564%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0064%" y="517" width="0.0805%" height="15" fill="rgb(218,10,47)" fg:x="944" fg:w="1"/><text x="76.2564%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.0064%" y="501" width="0.0805%" height="15" fill="rgb(227,99,14)" fg:x="944" fg:w="1"/><text x="76.2564%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.0064%" y="485" width="0.0805%" height="15" fill="rgb(229,83,46)" fg:x="944" fg:w="1"/><text x="76.2564%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.0064%" y="469" width="0.0805%" height="15" fill="rgb(228,25,1)" fg:x="944" fg:w="1"/><text x="76.2564%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.0064%" y="453" width="0.0805%" height="15" fill="rgb(252,190,15)" fg:x="944" fg:w="1"/><text x="76.2564%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.0064%" y="437" width="0.0805%" height="15" fill="rgb(213,103,51)" fg:x="944" fg:w="1"/><text x="76.2564%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0064%" y="421" width="0.0805%" height="15" fill="rgb(220,38,44)" fg:x="944" fg:w="1"/><text x="76.2564%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="76.0870%" y="533" width="0.1610%" height="15" fill="rgb(210,45,26)" fg:x="945" fg:w="2"/><text x="76.3370%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="76.0870%" y="517" width="0.1610%" height="15" fill="rgb(205,95,48)" fg:x="945" fg:w="2"/><text x="76.3370%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.0870%" y="501" width="0.1610%" height="15" fill="rgb(225,179,37)" fg:x="945" fg:w="2"/><text x="76.3370%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.0870%" y="485" width="0.1610%" height="15" fill="rgb(230,209,3)" fg:x="945" fg:w="2"/><text x="76.3370%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.1675%" y="469" width="0.0805%" height="15" fill="rgb(248,12,46)" fg:x="946" fg:w="1"/><text x="76.4175%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1675%" y="453" width="0.0805%" height="15" fill="rgb(234,18,0)" fg:x="946" fg:w="1"/><text x="76.4175%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.1675%" y="437" width="0.0805%" height="15" fill="rgb(238,197,14)" fg:x="946" fg:w="1"/><text x="76.4175%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1675%" y="421" width="0.0805%" height="15" fill="rgb(251,162,48)" fg:x="946" fg:w="1"/><text x="76.4175%" y="431.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (3 samples, 0.24%)</title><rect x="76.0870%" y="661" width="0.2415%" height="15" fill="rgb(237,73,42)" fg:x="945" fg:w="3"/><text x="76.3370%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="76.0870%" y="645" width="0.2415%" height="15" fill="rgb(211,108,8)" fg:x="945" fg:w="3"/><text x="76.3370%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="76.0870%" y="629" width="0.2415%" height="15" fill="rgb(213,45,22)" fg:x="945" fg:w="3"/><text x="76.3370%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="76.0870%" y="613" width="0.2415%" height="15" fill="rgb(252,154,5)" fg:x="945" fg:w="3"/><text x="76.3370%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="76.0870%" y="597" width="0.2415%" height="15" fill="rgb(221,79,52)" fg:x="945" fg:w="3"/><text x="76.3370%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="76.0870%" y="581" width="0.2415%" height="15" fill="rgb(229,220,36)" fg:x="945" fg:w="3"/><text x="76.3370%" y="591.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="76.0870%" y="565" width="0.2415%" height="15" fill="rgb(211,17,16)" fg:x="945" fg:w="3"/><text x="76.3370%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="76.0870%" y="549" width="0.2415%" height="15" fill="rgb(222,55,31)" fg:x="945" fg:w="3"/><text x="76.3370%" y="559.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="76.2480%" y="533" width="0.0805%" height="15" fill="rgb(221,221,31)" fg:x="947" fg:w="1"/><text x="76.4980%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.2480%" y="517" width="0.0805%" height="15" fill="rgb(227,168,26)" fg:x="947" fg:w="1"/><text x="76.4980%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.2480%" y="501" width="0.0805%" height="15" fill="rgb(224,139,9)" fg:x="947" fg:w="1"/><text x="76.4980%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.2480%" y="485" width="0.0805%" height="15" fill="rgb(254,172,0)" fg:x="947" fg:w="1"/><text x="76.4980%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.2480%" y="469" width="0.0805%" height="15" fill="rgb(235,203,1)" fg:x="947" fg:w="1"/><text x="76.4980%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.2480%" y="453" width="0.0805%" height="15" fill="rgb(216,205,24)" fg:x="947" fg:w="1"/><text x="76.4980%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.2480%" y="437" width="0.0805%" height="15" fill="rgb(233,24,6)" fg:x="947" fg:w="1"/><text x="76.4980%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="76.3285%" y="533" width="0.0805%" height="15" fill="rgb(244,110,9)" fg:x="948" fg:w="1"/><text x="76.5785%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3285%" y="517" width="0.0805%" height="15" fill="rgb(239,222,42)" fg:x="948" fg:w="1"/><text x="76.5785%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7311%" y="485" width="0.0805%" height="15" fill="rgb(218,145,13)" fg:x="953" fg:w="1"/><text x="76.9811%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7311%" y="469" width="0.0805%" height="15" fill="rgb(207,69,11)" fg:x="953" fg:w="1"/><text x="76.9811%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7311%" y="453" width="0.0805%" height="15" fill="rgb(220,223,22)" fg:x="953" fg:w="1"/><text x="76.9811%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7311%" y="437" width="0.0805%" height="15" fill="rgb(245,102,5)" fg:x="953" fg:w="1"/><text x="76.9811%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7311%" y="421" width="0.0805%" height="15" fill="rgb(211,148,2)" fg:x="953" fg:w="1"/><text x="76.9811%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7311%" y="405" width="0.0805%" height="15" fill="rgb(241,13,44)" fg:x="953" fg:w="1"/><text x="76.9811%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7311%" y="389" width="0.0805%" height="15" fill="rgb(219,137,21)" fg:x="953" fg:w="1"/><text x="76.9811%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.7311%" y="373" width="0.0805%" height="15" fill="rgb(242,206,5)" fg:x="953" fg:w="1"/><text x="76.9811%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.7311%" y="357" width="0.0805%" height="15" fill="rgb(217,114,22)" fg:x="953" fg:w="1"/><text x="76.9811%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.7311%" y="341" width="0.0805%" height="15" fill="rgb(253,206,42)" fg:x="953" fg:w="1"/><text x="76.9811%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.7311%" y="325" width="0.0805%" height="15" fill="rgb(236,102,18)" fg:x="953" fg:w="1"/><text x="76.9811%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="76.7311%" y="309" width="0.0805%" height="15" fill="rgb(208,59,49)" fg:x="953" fg:w="1"/><text x="76.9811%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="76.7311%" y="293" width="0.0805%" height="15" fill="rgb(215,194,28)" fg:x="953" fg:w="1"/><text x="76.9811%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="76.8116%" y="453" width="0.1610%" height="15" fill="rgb(243,207,11)" fg:x="954" fg:w="2"/><text x="77.0616%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="76.8116%" y="437" width="0.1610%" height="15" fill="rgb(254,179,35)" fg:x="954" fg:w="2"/><text x="77.0616%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="76.9726%" y="453" width="0.0805%" height="15" fill="rgb(235,97,3)" fg:x="956" fg:w="1"/><text x="77.2226%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.9726%" y="437" width="0.0805%" height="15" fill="rgb(215,155,33)" fg:x="956" fg:w="1"/><text x="77.2226%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9726%" y="421" width="0.0805%" height="15" fill="rgb(223,128,12)" fg:x="956" fg:w="1"/><text x="77.2226%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9726%" y="405" width="0.0805%" height="15" fill="rgb(208,157,18)" fg:x="956" fg:w="1"/><text x="77.2226%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.9726%" y="389" width="0.0805%" height="15" fill="rgb(249,70,54)" fg:x="956" fg:w="1"/><text x="77.2226%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9726%" y="373" width="0.0805%" height="15" fill="rgb(244,118,24)" fg:x="956" fg:w="1"/><text x="77.2226%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="76.6506%" y="501" width="0.4831%" height="15" fill="rgb(211,54,0)" fg:x="952" fg:w="6"/><text x="76.9006%" y="511.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="76.8116%" y="485" width="0.3221%" height="15" fill="rgb(245,137,45)" fg:x="954" fg:w="4"/><text x="77.0616%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="76.8116%" y="469" width="0.3221%" height="15" fill="rgb(232,154,31)" fg:x="954" fg:w="4"/><text x="77.0616%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0531%" y="453" width="0.0805%" height="15" fill="rgb(253,6,39)" fg:x="957" fg:w="1"/><text x="77.3031%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0531%" y="437" width="0.0805%" height="15" fill="rgb(234,183,24)" fg:x="957" fg:w="1"/><text x="77.3031%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0531%" y="421" width="0.0805%" height="15" fill="rgb(252,84,40)" fg:x="957" fg:w="1"/><text x="77.3031%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0531%" y="405" width="0.0805%" height="15" fill="rgb(224,65,2)" fg:x="957" fg:w="1"/><text x="77.3031%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.0531%" y="389" width="0.0805%" height="15" fill="rgb(229,38,24)" fg:x="957" fg:w="1"/><text x="77.3031%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0531%" y="373" width="0.0805%" height="15" fill="rgb(218,131,50)" fg:x="957" fg:w="1"/><text x="77.3031%" y="383.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0531%" y="357" width="0.0805%" height="15" fill="rgb(233,106,18)" fg:x="957" fg:w="1"/><text x="77.3031%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0531%" y="341" width="0.0805%" height="15" fill="rgb(220,216,11)" fg:x="957" fg:w="1"/><text x="77.3031%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="77.2142%" y="341" width="0.1610%" height="15" fill="rgb(251,100,45)" fg:x="959" fg:w="2"/><text x="77.4642%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="77.2142%" y="357" width="0.2415%" height="15" fill="rgb(235,143,32)" fg:x="959" fg:w="3"/><text x="77.4642%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="77.3752%" y="341" width="0.0805%" height="15" fill="rgb(248,124,34)" fg:x="961" fg:w="1"/><text x="77.6252%" y="351.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="77.3752%" y="325" width="0.0805%" height="15" fill="rgb(225,221,4)" fg:x="961" fg:w="1"/><text x="77.6252%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="77.2142%" y="421" width="0.3221%" height="15" fill="rgb(242,27,43)" fg:x="959" fg:w="4"/><text x="77.4642%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="77.2142%" y="405" width="0.3221%" height="15" fill="rgb(227,54,8)" fg:x="959" fg:w="4"/><text x="77.4642%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="77.2142%" y="389" width="0.3221%" height="15" fill="rgb(253,139,49)" fg:x="959" fg:w="4"/><text x="77.4642%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="77.2142%" y="373" width="0.3221%" height="15" fill="rgb(231,26,43)" fg:x="959" fg:w="4"/><text x="77.4642%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="77.4557%" y="357" width="0.0805%" height="15" fill="rgb(207,121,39)" fg:x="962" fg:w="1"/><text x="77.7057%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="77.4557%" y="341" width="0.0805%" height="15" fill="rgb(223,101,35)" fg:x="962" fg:w="1"/><text x="77.7057%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="77.4557%" y="325" width="0.0805%" height="15" fill="rgb(232,87,23)" fg:x="962" fg:w="1"/><text x="77.7057%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="77.6167%" y="389" width="0.1610%" height="15" fill="rgb(225,180,29)" fg:x="964" fg:w="2"/><text x="77.8667%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="77.6167%" y="373" width="0.1610%" height="15" fill="rgb(225,25,17)" fg:x="964" fg:w="2"/><text x="77.8667%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="77.6167%" y="357" width="0.1610%" height="15" fill="rgb(223,8,52)" fg:x="964" fg:w="2"/><text x="77.8667%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.6167%" y="341" width="0.1610%" height="15" fill="rgb(246,42,21)" fg:x="964" fg:w="2"/><text x="77.8667%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6973%" y="325" width="0.0805%" height="15" fill="rgb(205,64,43)" fg:x="965" fg:w="1"/><text x="77.9473%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="77.5362%" y="421" width="0.3221%" height="15" fill="rgb(221,160,13)" fg:x="963" fg:w="4"/><text x="77.7862%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="77.6167%" y="405" width="0.2415%" height="15" fill="rgb(239,58,35)" fg:x="964" fg:w="3"/><text x="77.8667%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="77.7778%" y="389" width="0.0805%" height="15" fill="rgb(251,26,40)" fg:x="966" fg:w="1"/><text x="78.0278%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="77.7778%" y="373" width="0.0805%" height="15" fill="rgb(247,0,4)" fg:x="966" fg:w="1"/><text x="78.0278%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.8583%" y="405" width="0.0805%" height="15" fill="rgb(218,130,10)" fg:x="967" fg:w="1"/><text x="78.1083%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.9388%" y="373" width="0.0805%" height="15" fill="rgb(239,32,7)" fg:x="968" fg:w="1"/><text x="78.1888%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9388%" y="357" width="0.0805%" height="15" fill="rgb(210,192,24)" fg:x="968" fg:w="1"/><text x="78.1888%" y="367.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="78.1804%" y="341" width="0.2415%" height="15" fill="rgb(226,212,17)" fg:x="971" fg:w="3"/><text x="78.4304%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="78.4219%" y="341" width="0.4026%" height="15" fill="rgb(219,201,28)" fg:x="974" fg:w="5"/><text x="78.6719%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="78.6634%" y="325" width="0.1610%" height="15" fill="rgb(235,207,41)" fg:x="977" fg:w="2"/><text x="78.9134%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="78.1804%" y="357" width="0.7246%" height="15" fill="rgb(241,95,54)" fg:x="971" fg:w="9"/><text x="78.4304%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="78.8245%" y="341" width="0.0805%" height="15" fill="rgb(248,12,23)" fg:x="979" fg:w="1"/><text x="79.0745%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="78.9050%" y="341" width="0.1610%" height="15" fill="rgb(228,173,4)" fg:x="980" fg:w="2"/><text x="79.1550%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="78.9050%" y="357" width="0.2415%" height="15" fill="rgb(254,99,5)" fg:x="980" fg:w="3"/><text x="79.1550%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="79.0660%" y="341" width="0.0805%" height="15" fill="rgb(212,184,17)" fg:x="982" fg:w="1"/><text x="79.3160%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="79.0660%" y="325" width="0.0805%" height="15" fill="rgb(252,174,1)" fg:x="982" fg:w="1"/><text x="79.3160%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.3076%" y="293" width="0.0805%" height="15" fill="rgb(241,118,51)" fg:x="985" fg:w="1"/><text x="79.5576%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.3881%" y="293" width="0.0805%" height="15" fill="rgb(227,94,47)" fg:x="986" fg:w="1"/><text x="79.6381%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="79.4686%" y="293" width="0.0805%" height="15" fill="rgb(229,104,2)" fg:x="987" fg:w="1"/><text x="79.7186%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.4686%" y="277" width="0.0805%" height="15" fill="rgb(219,28,31)" fg:x="987" fg:w="1"/><text x="79.7186%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.4686%" y="261" width="0.0805%" height="15" fill="rgb(233,109,36)" fg:x="987" fg:w="1"/><text x="79.7186%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.4686%" y="245" width="0.0805%" height="15" fill="rgb(246,88,11)" fg:x="987" fg:w="1"/><text x="79.7186%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="79.5491%" y="261" width="0.1610%" height="15" fill="rgb(209,212,17)" fg:x="988" fg:w="2"/><text x="79.7991%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="79.5491%" y="245" width="0.1610%" height="15" fill="rgb(243,59,29)" fg:x="988" fg:w="2"/><text x="79.7991%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.5491%" y="229" width="0.1610%" height="15" fill="rgb(244,205,48)" fg:x="988" fg:w="2"/><text x="79.7991%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="79.5491%" y="293" width="0.2415%" height="15" fill="rgb(227,30,6)" fg:x="988" fg:w="3"/><text x="79.7991%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="79.5491%" y="277" width="0.2415%" height="15" fill="rgb(220,205,48)" fg:x="988" fg:w="3"/><text x="79.7991%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="79.7101%" y="261" width="0.0805%" height="15" fill="rgb(250,94,14)" fg:x="990" fg:w="1"/><text x="79.9601%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="79.7101%" y="245" width="0.0805%" height="15" fill="rgb(216,119,42)" fg:x="990" fg:w="1"/><text x="79.9601%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.7101%" y="229" width="0.0805%" height="15" fill="rgb(232,155,0)" fg:x="990" fg:w="1"/><text x="79.9601%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.7101%" y="213" width="0.0805%" height="15" fill="rgb(212,24,32)" fg:x="990" fg:w="1"/><text x="79.9601%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.7101%" y="197" width="0.0805%" height="15" fill="rgb(216,69,20)" fg:x="990" fg:w="1"/><text x="79.9601%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7907%" y="261" width="0.0805%" height="15" fill="rgb(229,73,31)" fg:x="991" fg:w="1"/><text x="80.0407%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (37 samples, 2.98%)</title><rect x="79.7907%" y="293" width="2.9791%" height="15" fill="rgb(224,219,20)" fg:x="991" fg:w="37"/><text x="80.0407%" y="303.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 2.98%)</title><rect x="79.7907%" y="277" width="2.9791%" height="15" fill="rgb(215,146,41)" fg:x="991" fg:w="37"/><text x="80.0407%" y="287.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.90%)</title><rect x="79.8712%" y="261" width="2.8986%" height="15" fill="rgb(244,71,31)" fg:x="992" fg:w="36"/><text x="80.1212%" y="271.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="82.7697%" y="293" width="0.0805%" height="15" fill="rgb(224,24,11)" fg:x="1028" fg:w="1"/><text x="83.0197%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7697%" y="277" width="0.0805%" height="15" fill="rgb(229,76,15)" fg:x="1028" fg:w="1"/><text x="83.0197%" y="287.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="82.8502%" y="293" width="0.0805%" height="15" fill="rgb(209,93,2)" fg:x="1029" fg:w="1"/><text x="83.1002%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 3.86%)</title><rect x="79.1465%" y="341" width="3.8647%" height="15" fill="rgb(216,200,50)" fg:x="983" fg:w="48"/><text x="79.3965%" y="351.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (48 samples, 3.86%)</title><rect x="79.1465%" y="325" width="3.8647%" height="15" fill="rgb(211,67,34)" fg:x="983" fg:w="48"/><text x="79.3965%" y="335.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (48 samples, 3.86%)</title><rect x="79.1465%" y="309" width="3.8647%" height="15" fill="rgb(225,87,47)" fg:x="983" fg:w="48"/><text x="79.3965%" y="319.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="82.9308%" y="293" width="0.0805%" height="15" fill="rgb(217,185,16)" fg:x="1030" fg:w="1"/><text x="83.1808%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.9308%" y="277" width="0.0805%" height="15" fill="rgb(205,0,0)" fg:x="1030" fg:w="1"/><text x="83.1808%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.9308%" y="261" width="0.0805%" height="15" fill="rgb(207,116,45)" fg:x="1030" fg:w="1"/><text x="83.1808%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9308%" y="245" width="0.0805%" height="15" fill="rgb(221,156,26)" fg:x="1030" fg:w="1"/><text x="83.1808%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1723%" y="325" width="0.0805%" height="15" fill="rgb(213,140,4)" fg:x="1033" fg:w="1"/><text x="83.4223%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.4944%" y="309" width="0.0805%" height="15" fill="rgb(231,224,15)" fg:x="1037" fg:w="1"/><text x="83.7444%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (56 samples, 4.51%)</title><rect x="79.1465%" y="357" width="4.5089%" height="15" fill="rgb(244,76,20)" fg:x="983" fg:w="56"/><text x="79.3965%" y="367.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="83.0113%" y="341" width="0.6441%" height="15" fill="rgb(238,117,7)" fg:x="1031" fg:w="8"/><text x="83.2613%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="83.2528%" y="325" width="0.4026%" height="15" fill="rgb(235,1,10)" fg:x="1034" fg:w="5"/><text x="83.5028%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5749%" y="309" width="0.0805%" height="15" fill="rgb(216,165,6)" fg:x="1038" fg:w="1"/><text x="83.8249%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (71 samples, 5.72%)</title><rect x="78.0193%" y="373" width="5.7166%" height="15" fill="rgb(246,91,35)" fg:x="969" fg:w="71"/><text x="78.2693%" y="383.50">regex_a..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="83.6554%" y="357" width="0.0805%" height="15" fill="rgb(228,96,24)" fg:x="1039" fg:w="1"/><text x="83.9054%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="83.8164%" y="341" width="0.0805%" height="15" fill="rgb(254,217,53)" fg:x="1041" fg:w="1"/><text x="84.0664%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="83.8164%" y="325" width="0.0805%" height="15" fill="rgb(209,60,0)" fg:x="1041" fg:w="1"/><text x="84.0664%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.8164%" y="309" width="0.0805%" height="15" fill="rgb(250,93,26)" fg:x="1041" fg:w="1"/><text x="84.0664%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.8164%" y="293" width="0.0805%" height="15" fill="rgb(211,9,40)" fg:x="1041" fg:w="1"/><text x="84.0664%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8164%" y="277" width="0.0805%" height="15" fill="rgb(242,57,20)" fg:x="1041" fg:w="1"/><text x="84.0664%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="83.7359%" y="373" width="0.2415%" height="15" fill="rgb(248,85,48)" fg:x="1040" fg:w="3"/><text x="83.9859%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="83.7359%" y="357" width="0.2415%" height="15" fill="rgb(212,117,2)" fg:x="1040" fg:w="3"/><text x="83.9859%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="83.8969%" y="341" width="0.0805%" height="15" fill="rgb(243,19,3)" fg:x="1042" fg:w="1"/><text x="84.1469%" y="351.50"></text></g><g><title>regex::regex::string::Regex::new (77 samples, 6.20%)</title><rect x="77.8583%" y="421" width="6.1997%" height="15" fill="rgb(232,217,24)" fg:x="967" fg:w="77"/><text x="78.1083%" y="431.50">regex::r..</text></g><g><title>regex::builders::Builder::build_one_string (76 samples, 6.12%)</title><rect x="77.9388%" y="405" width="6.1192%" height="15" fill="rgb(224,175,40)" fg:x="968" fg:w="76"/><text x="78.1888%" y="415.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (76 samples, 6.12%)</title><rect x="77.9388%" y="389" width="6.1192%" height="15" fill="rgb(212,162,32)" fg:x="968" fg:w="76"/><text x="78.1888%" y="399.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="83.9775%" y="373" width="0.0805%" height="15" fill="rgb(215,9,4)" fg:x="1043" fg:w="1"/><text x="84.2275%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="83.9775%" y="357" width="0.0805%" height="15" fill="rgb(242,42,7)" fg:x="1043" fg:w="1"/><text x="84.2275%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="83.9775%" y="341" width="0.0805%" height="15" fill="rgb(242,184,45)" fg:x="1043" fg:w="1"/><text x="84.2275%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_unicode_class (1 samples, 0.08%)</title><rect x="83.9775%" y="325" width="0.0805%" height="15" fill="rgb(228,111,51)" fg:x="1043" fg:w="1"/><text x="84.2275%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="84.2190%" y="373" width="0.4831%" height="15" fill="rgb(236,147,17)" fg:x="1046" fg:w="6"/><text x="84.4690%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="84.2190%" y="357" width="0.4831%" height="15" fill="rgb(210,75,22)" fg:x="1046" fg:w="6"/><text x="84.4690%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.6216%" y="341" width="0.0805%" height="15" fill="rgb(217,159,45)" fg:x="1051" fg:w="1"/><text x="84.8716%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (95 samples, 7.65%)</title><rect x="77.2142%" y="437" width="7.6490%" height="15" fill="rgb(245,165,53)" fg:x="959" fg:w="95"/><text x="77.4642%" y="447.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.81%)</title><rect x="84.0580%" y="421" width="0.8052%" height="15" fill="rgb(251,190,50)" fg:x="1044" fg:w="10"/><text x="84.3080%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="84.0580%" y="405" width="0.8052%" height="15" fill="rgb(208,203,29)" fg:x="1044" fg:w="10"/><text x="84.3080%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="84.0580%" y="389" width="0.8052%" height="15" fill="rgb(207,209,35)" fg:x="1044" fg:w="10"/><text x="84.3080%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="84.7021%" y="373" width="0.1610%" height="15" fill="rgb(230,144,49)" fg:x="1052" fg:w="2"/><text x="84.9521%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="84.7826%" y="357" width="0.0805%" height="15" fill="rgb(229,31,6)" fg:x="1053" fg:w="1"/><text x="85.0326%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.7826%" y="341" width="0.0805%" height="15" fill="rgb(251,129,24)" fg:x="1053" fg:w="1"/><text x="85.0326%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.7826%" y="325" width="0.0805%" height="15" fill="rgb(235,105,15)" fg:x="1053" fg:w="1"/><text x="85.0326%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7826%" y="309" width="0.0805%" height="15" fill="rgb(216,52,43)" fg:x="1053" fg:w="1"/><text x="85.0326%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="84.8631%" y="421" width="0.1610%" height="15" fill="rgb(238,144,41)" fg:x="1054" fg:w="2"/><text x="85.1131%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="84.9436%" y="405" width="0.0805%" height="15" fill="rgb(243,63,9)" fg:x="1055" fg:w="1"/><text x="85.1936%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="84.9436%" y="389" width="0.0805%" height="15" fill="rgb(246,208,1)" fg:x="1055" fg:w="1"/><text x="85.1936%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.9436%" y="373" width="0.0805%" height="15" fill="rgb(233,182,18)" fg:x="1055" fg:w="1"/><text x="85.1936%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.9436%" y="357" width="0.0805%" height="15" fill="rgb(242,224,8)" fg:x="1055" fg:w="1"/><text x="85.1936%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="85.0242%" y="405" width="0.0805%" height="15" fill="rgb(243,54,37)" fg:x="1056" fg:w="1"/><text x="85.2742%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="85.0242%" y="389" width="0.0805%" height="15" fill="rgb(233,192,12)" fg:x="1056" fg:w="1"/><text x="85.2742%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="85.0242%" y="373" width="0.0805%" height="15" fill="rgb(251,192,53)" fg:x="1056" fg:w="1"/><text x="85.2742%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="85.0242%" y="357" width="0.0805%" height="15" fill="rgb(246,141,26)" fg:x="1056" fg:w="1"/><text x="85.2742%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.1047%" y="341" width="0.0805%" height="15" fill="rgb(239,195,19)" fg:x="1057" fg:w="1"/><text x="85.3547%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.4267%" y="325" width="0.0805%" height="15" fill="rgb(241,16,39)" fg:x="1061" fg:w="1"/><text x="85.6767%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4267%" y="309" width="0.0805%" height="15" fill="rgb(223,13,53)" fg:x="1061" fg:w="1"/><text x="85.6767%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.4267%" y="293" width="0.0805%" height="15" fill="rgb(214,227,0)" fg:x="1061" fg:w="1"/><text x="85.6767%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.5072%" y="325" width="0.0805%" height="15" fill="rgb(228,103,26)" fg:x="1062" fg:w="1"/><text x="85.7572%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.5072%" y="309" width="0.0805%" height="15" fill="rgb(254,177,53)" fg:x="1062" fg:w="1"/><text x="85.7572%" y="319.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (11 samples, 0.89%)</title><rect x="85.0242%" y="421" width="0.8857%" height="15" fill="rgb(208,201,34)" fg:x="1056" fg:w="11"/><text x="85.2742%" y="431.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.81%)</title><rect x="85.1047%" y="405" width="0.8052%" height="15" fill="rgb(212,39,5)" fg:x="1057" fg:w="10"/><text x="85.3547%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="85.1047%" y="389" width="0.8052%" height="15" fill="rgb(246,117,3)" fg:x="1057" fg:w="10"/><text x="85.3547%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="85.1047%" y="373" width="0.8052%" height="15" fill="rgb(244,118,39)" fg:x="1057" fg:w="10"/><text x="85.3547%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="85.1047%" y="357" width="0.8052%" height="15" fill="rgb(241,64,10)" fg:x="1057" fg:w="10"/><text x="85.3547%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.72%)</title><rect x="85.1852%" y="341" width="0.7246%" height="15" fill="rgb(229,39,44)" fg:x="1058" fg:w="9"/><text x="85.4352%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="85.5878%" y="325" width="0.3221%" height="15" fill="rgb(230,226,3)" fg:x="1063" fg:w="4"/><text x="85.8378%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.9903%" y="341" width="0.0805%" height="15" fill="rgb(222,13,42)" fg:x="1068" fg:w="1"/><text x="86.2403%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.9903%" y="373" width="0.1610%" height="15" fill="rgb(247,180,54)" fg:x="1068" fg:w="2"/><text x="86.2403%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.9903%" y="357" width="0.1610%" height="15" fill="rgb(205,96,16)" fg:x="1068" fg:w="2"/><text x="86.2403%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="86.0709%" y="341" width="0.0805%" height="15" fill="rgb(205,100,21)" fg:x="1069" fg:w="1"/><text x="86.3209%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="86.0709%" y="325" width="0.0805%" height="15" fill="rgb(248,51,4)" fg:x="1069" fg:w="1"/><text x="86.3209%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.1514%" y="341" width="0.0805%" height="15" fill="rgb(217,197,30)" fg:x="1070" fg:w="1"/><text x="86.4014%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="86.1514%" y="373" width="0.1610%" height="15" fill="rgb(240,179,40)" fg:x="1070" fg:w="2"/><text x="86.4014%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="86.1514%" y="357" width="0.1610%" height="15" fill="rgb(212,185,35)" fg:x="1070" fg:w="2"/><text x="86.4014%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.2319%" y="341" width="0.0805%" height="15" fill="rgb(251,222,31)" fg:x="1071" fg:w="1"/><text x="86.4819%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.2319%" y="325" width="0.0805%" height="15" fill="rgb(208,140,36)" fg:x="1071" fg:w="1"/><text x="86.4819%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.2319%" y="309" width="0.0805%" height="15" fill="rgb(220,148,1)" fg:x="1071" fg:w="1"/><text x="86.4819%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.2319%" y="293" width="0.0805%" height="15" fill="rgb(254,4,28)" fg:x="1071" fg:w="1"/><text x="86.4819%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2319%" y="277" width="0.0805%" height="15" fill="rgb(222,185,44)" fg:x="1071" fg:w="1"/><text x="86.4819%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.2319%" y="261" width="0.0805%" height="15" fill="rgb(215,74,39)" fg:x="1071" fg:w="1"/><text x="86.4819%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3124%" y="357" width="0.0805%" height="15" fill="rgb(247,86,4)" fg:x="1072" fg:w="1"/><text x="86.5624%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.4734%" y="341" width="0.0805%" height="15" fill="rgb(231,105,32)" fg:x="1074" fg:w="1"/><text x="86.7234%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.89%)</title><rect x="86.3929%" y="357" width="0.8857%" height="15" fill="rgb(222,65,35)" fg:x="1073" fg:w="11"/><text x="86.6429%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="86.5539%" y="341" width="0.7246%" height="15" fill="rgb(218,145,35)" fg:x="1075" fg:w="9"/><text x="86.8039%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="87.1176%" y="325" width="0.1610%" height="15" fill="rgb(208,7,15)" fg:x="1082" fg:w="2"/><text x="87.3676%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="87.2786%" y="341" width="0.0805%" height="15" fill="rgb(209,83,13)" fg:x="1084" fg:w="1"/><text x="87.5286%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="87.2786%" y="325" width="0.0805%" height="15" fill="rgb(218,3,10)" fg:x="1084" fg:w="1"/><text x="87.5286%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="87.2786%" y="357" width="0.1610%" height="15" fill="rgb(211,219,4)" fg:x="1084" fg:w="2"/><text x="87.5286%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.3591%" y="341" width="0.0805%" height="15" fill="rgb(228,194,12)" fg:x="1085" fg:w="1"/><text x="87.6091%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="87.3591%" y="325" width="0.0805%" height="15" fill="rgb(210,175,7)" fg:x="1085" fg:w="1"/><text x="87.6091%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.3591%" y="309" width="0.0805%" height="15" fill="rgb(243,132,6)" fg:x="1085" fg:w="1"/><text x="87.6091%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.4396%" y="357" width="0.0805%" height="15" fill="rgb(207,72,18)" fg:x="1086" fg:w="1"/><text x="87.6896%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="87.4396%" y="341" width="0.0805%" height="15" fill="rgb(236,1,18)" fg:x="1086" fg:w="1"/><text x="87.6896%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.72%)</title><rect x="87.6812%" y="325" width="0.7246%" height="15" fill="rgb(227,0,18)" fg:x="1089" fg:w="9"/><text x="87.9312%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="87.8422%" y="309" width="0.5636%" height="15" fill="rgb(247,37,5)" fg:x="1091" fg:w="7"/><text x="88.0922%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.48%)</title><rect x="87.9227%" y="293" width="0.4831%" height="15" fill="rgb(237,179,24)" fg:x="1092" fg:w="6"/><text x="88.1727%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="87.9227%" y="277" width="0.4831%" height="15" fill="rgb(226,53,20)" fg:x="1092" fg:w="6"/><text x="88.1727%" y="287.50"></text></g><g><title>realloc (6 samples, 0.48%)</title><rect x="87.9227%" y="261" width="0.4831%" height="15" fill="rgb(247,75,7)" fg:x="1092" fg:w="6"/><text x="88.1727%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.4058%" y="309" width="0.0805%" height="15" fill="rgb(233,96,12)" fg:x="1098" fg:w="1"/><text x="88.6558%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="88.4058%" y="325" width="0.3221%" height="15" fill="rgb(224,125,0)" fg:x="1098" fg:w="4"/><text x="88.6558%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="88.4863%" y="309" width="0.2415%" height="15" fill="rgb(224,92,25)" fg:x="1099" fg:w="3"/><text x="88.7363%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="88.4863%" y="293" width="0.2415%" height="15" fill="rgb(224,42,24)" fg:x="1099" fg:w="3"/><text x="88.7363%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.29%)</title><rect x="87.5201%" y="357" width="1.2882%" height="15" fill="rgb(234,132,49)" fg:x="1087" fg:w="16"/><text x="87.7701%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (16 samples, 1.29%)</title><rect x="87.5201%" y="341" width="1.2882%" height="15" fill="rgb(248,100,35)" fg:x="1087" fg:w="16"/><text x="87.7701%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="88.7279%" y="325" width="0.0805%" height="15" fill="rgb(239,94,40)" fg:x="1102" fg:w="1"/><text x="88.9779%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="88.8084%" y="357" width="0.0805%" height="15" fill="rgb(235,139,28)" fg:x="1103" fg:w="1"/><text x="89.0584%" y="367.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="89.8551%" y="245" width="0.4026%" height="15" fill="rgb(217,144,7)" fg:x="1116" fg:w="5"/><text x="90.1051%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="90.2576%" y="245" width="0.3221%" height="15" fill="rgb(227,55,4)" fg:x="1121" fg:w="4"/><text x="90.5076%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.4992%" y="229" width="0.0805%" height="15" fill="rgb(252,82,54)" fg:x="1124" fg:w="1"/><text x="90.7492%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.4992%" y="213" width="0.0805%" height="15" fill="rgb(245,172,4)" fg:x="1124" fg:w="1"/><text x="90.7492%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.4992%" y="197" width="0.0805%" height="15" fill="rgb(207,26,27)" fg:x="1124" fg:w="1"/><text x="90.7492%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.5797%" y="245" width="0.0805%" height="15" fill="rgb(252,98,18)" fg:x="1125" fg:w="1"/><text x="90.8297%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.0628%" y="181" width="0.0805%" height="15" fill="rgb(244,8,26)" fg:x="1131" fg:w="1"/><text x="91.3128%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="90.9018%" y="213" width="0.3221%" height="15" fill="rgb(237,173,45)" fg:x="1129" fg:w="4"/><text x="91.1518%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="90.9018%" y="197" width="0.3221%" height="15" fill="rgb(208,213,49)" fg:x="1129" fg:w="4"/><text x="91.1518%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.1433%" y="181" width="0.0805%" height="15" fill="rgb(212,122,37)" fg:x="1132" fg:w="1"/><text x="91.3933%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.81%)</title><rect x="90.6602%" y="245" width="0.8052%" height="15" fill="rgb(213,80,17)" fg:x="1126" fg:w="10"/><text x="90.9102%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.81%)</title><rect x="90.6602%" y="229" width="0.8052%" height="15" fill="rgb(206,210,43)" fg:x="1126" fg:w="10"/><text x="90.9102%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="91.2238%" y="213" width="0.2415%" height="15" fill="rgb(229,214,3)" fg:x="1133" fg:w="3"/><text x="91.4738%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.3849%" y="197" width="0.0805%" height="15" fill="rgb(235,213,29)" fg:x="1135" fg:w="1"/><text x="91.6349%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.3849%" y="181" width="0.0805%" height="15" fill="rgb(248,135,26)" fg:x="1135" fg:w="1"/><text x="91.6349%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.3849%" y="165" width="0.0805%" height="15" fill="rgb(242,188,12)" fg:x="1135" fg:w="1"/><text x="91.6349%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.3849%" y="149" width="0.0805%" height="15" fill="rgb(245,38,12)" fg:x="1135" fg:w="1"/><text x="91.6349%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4654%" y="213" width="0.0805%" height="15" fill="rgb(218,42,13)" fg:x="1136" fg:w="1"/><text x="91.7154%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.50%)</title><rect x="91.4654%" y="245" width="2.4960%" height="15" fill="rgb(238,132,49)" fg:x="1136" fg:w="31"/><text x="91.7154%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.50%)</title><rect x="91.4654%" y="229" width="2.4960%" height="15" fill="rgb(209,196,19)" fg:x="1136" fg:w="31"/><text x="91.7154%" y="239.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (30 samples, 2.42%)</title><rect x="91.5459%" y="213" width="2.4155%" height="15" fill="rgb(244,131,22)" fg:x="1137" fg:w="30"/><text x="91.7959%" y="223.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="93.9614%" y="245" width="0.1610%" height="15" fill="rgb(223,18,34)" fg:x="1167" fg:w="2"/><text x="94.2114%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 5.31%)</title><rect x="88.8889%" y="341" width="5.3140%" height="15" fill="rgb(252,124,54)" fg:x="1104" fg:w="66"/><text x="89.1389%" y="351.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.31%)</title><rect x="88.8889%" y="325" width="5.3140%" height="15" fill="rgb(229,106,42)" fg:x="1104" fg:w="66"/><text x="89.1389%" y="335.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.31%)</title><rect x="88.8889%" y="309" width="5.3140%" height="15" fill="rgb(221,129,1)" fg:x="1104" fg:w="66"/><text x="89.1389%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.31%)</title><rect x="88.8889%" y="293" width="5.3140%" height="15" fill="rgb(229,74,15)" fg:x="1104" fg:w="66"/><text x="89.1389%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (66 samples, 5.31%)</title><rect x="88.8889%" y="277" width="5.3140%" height="15" fill="rgb(210,206,50)" fg:x="1104" fg:w="66"/><text x="89.1389%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.31%)</title><rect x="88.8889%" y="261" width="5.3140%" height="15" fill="rgb(251,114,31)" fg:x="1104" fg:w="66"/><text x="89.1389%" y="271.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="94.1224%" y="245" width="0.0805%" height="15" fill="rgb(215,225,28)" fg:x="1169" fg:w="1"/><text x="94.3724%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.2834%" y="325" width="0.0805%" height="15" fill="rgb(237,109,14)" fg:x="1171" fg:w="1"/><text x="94.5334%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.3639%" y="325" width="0.0805%" height="15" fill="rgb(230,13,37)" fg:x="1172" fg:w="1"/><text x="94.6139%" y="335.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="94.9275%" y="277" width="0.0805%" height="15" fill="rgb(231,40,28)" fg:x="1179" fg:w="1"/><text x="95.1775%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="94.4444%" y="325" width="0.6441%" height="15" fill="rgb(231,202,18)" fg:x="1173" fg:w="8"/><text x="94.6944%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.9275%" y="309" width="0.1610%" height="15" fill="rgb(225,33,18)" fg:x="1179" fg:w="2"/><text x="95.1775%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.9275%" y="293" width="0.1610%" height="15" fill="rgb(223,64,47)" fg:x="1179" fg:w="2"/><text x="95.1775%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.0081%" y="277" width="0.0805%" height="15" fill="rgb(234,114,13)" fg:x="1180" fg:w="1"/><text x="95.2581%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="95.0886%" y="325" width="0.3221%" height="15" fill="rgb(248,56,40)" fg:x="1181" fg:w="4"/><text x="95.3386%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (114 samples, 9.18%)</title><rect x="86.3124%" y="373" width="9.1787%" height="15" fill="rgb(221,194,21)" fg:x="1072" fg:w="114"/><text x="86.5624%" y="383.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (82 samples, 6.60%)</title><rect x="88.8889%" y="357" width="6.6023%" height="15" fill="rgb(242,108,46)" fg:x="1104" fg:w="82"/><text x="89.1389%" y="367.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.29%)</title><rect x="94.2029%" y="341" width="1.2882%" height="15" fill="rgb(220,106,10)" fg:x="1170" fg:w="16"/><text x="94.4529%" y="351.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="95.4106%" y="325" width="0.0805%" height="15" fill="rgb(211,88,4)" fg:x="1185" fg:w="1"/><text x="95.6606%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4106%" y="309" width="0.0805%" height="15" fill="rgb(214,95,34)" fg:x="1185" fg:w="1"/><text x="95.6606%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.4911%" y="325" width="0.0805%" height="15" fill="rgb(250,160,33)" fg:x="1186" fg:w="1"/><text x="95.7411%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.4911%" y="341" width="0.1610%" height="15" fill="rgb(225,29,10)" fg:x="1186" fg:w="2"/><text x="95.7411%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.5717%" y="325" width="0.0805%" height="15" fill="rgb(224,28,30)" fg:x="1187" fg:w="1"/><text x="95.8217%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5717%" y="309" width="0.0805%" height="15" fill="rgb(231,77,4)" fg:x="1187" fg:w="1"/><text x="95.8217%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5717%" y="293" width="0.0805%" height="15" fill="rgb(209,63,21)" fg:x="1187" fg:w="1"/><text x="95.8217%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.5717%" y="277" width="0.0805%" height="15" fill="rgb(226,22,11)" fg:x="1187" fg:w="1"/><text x="95.8217%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.4911%" y="373" width="0.2415%" height="15" fill="rgb(216,82,30)" fg:x="1186" fg:w="3"/><text x="95.7411%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.4911%" y="357" width="0.2415%" height="15" fill="rgb(246,227,38)" fg:x="1186" fg:w="3"/><text x="95.7411%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="95.6522%" y="341" width="0.0805%" height="15" fill="rgb(251,203,53)" fg:x="1188" fg:w="1"/><text x="95.9022%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.8937%" y="309" width="0.0805%" height="15" fill="rgb(254,101,1)" fg:x="1191" fg:w="1"/><text x="96.1437%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.8937%" y="293" width="0.0805%" height="15" fill="rgb(241,180,5)" fg:x="1191" fg:w="1"/><text x="96.1437%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.8937%" y="277" width="0.0805%" height="15" fill="rgb(218,168,4)" fg:x="1191" fg:w="1"/><text x="96.1437%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="95.8132%" y="341" width="0.2415%" height="15" fill="rgb(224,223,32)" fg:x="1190" fg:w="3"/><text x="96.0632%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="95.8132%" y="325" width="0.2415%" height="15" fill="rgb(236,106,22)" fg:x="1190" fg:w="3"/><text x="96.0632%" y="335.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.9742%" y="309" width="0.0805%" height="15" fill="rgb(206,121,5)" fg:x="1192" fg:w="1"/><text x="96.2242%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (140 samples, 11.27%)</title><rect x="84.8631%" y="437" width="11.2721%" height="15" fill="rgb(233,87,28)" fg:x="1054" fg:w="140"/><text x="85.1131%" y="447.50">indefinite::rules..</text></g><g><title>regex::regex::string::Regex::new (127 samples, 10.23%)</title><rect x="85.9098%" y="421" width="10.2254%" height="15" fill="rgb(236,137,17)" fg:x="1067" fg:w="127"/><text x="86.1598%" y="431.50">regex::regex::s..</text></g><g><title>regex::builders::Builder::build_one_string (127 samples, 10.23%)</title><rect x="85.9098%" y="405" width="10.2254%" height="15" fill="rgb(209,183,38)" fg:x="1067" fg:w="127"/><text x="86.1598%" y="415.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (127 samples, 10.23%)</title><rect x="85.9098%" y="389" width="10.2254%" height="15" fill="rgb(206,162,44)" fg:x="1067" fg:w="127"/><text x="86.1598%" y="399.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="95.7327%" y="373" width="0.4026%" height="15" fill="rgb(237,70,39)" fg:x="1189" fg:w="5"/><text x="95.9827%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="95.7327%" y="357" width="0.4026%" height="15" fill="rgb(212,176,5)" fg:x="1189" fg:w="5"/><text x="95.9827%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.0548%" y="341" width="0.0805%" height="15" fill="rgb(232,95,16)" fg:x="1193" fg:w="1"/><text x="96.3048%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.0548%" y="325" width="0.0805%" height="15" fill="rgb(219,115,35)" fg:x="1193" fg:w="1"/><text x="96.3048%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="96.1353%" y="421" width="0.0805%" height="15" fill="rgb(251,67,27)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="431.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="96.1353%" y="405" width="0.0805%" height="15" fill="rgb(222,95,40)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="96.1353%" y="389" width="0.0805%" height="15" fill="rgb(250,35,16)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.1353%" y="373" width="0.0805%" height="15" fill="rgb(224,86,44)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.1353%" y="357" width="0.0805%" height="15" fill="rgb(237,53,53)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.1353%" y="341" width="0.0805%" height="15" fill="rgb(208,171,33)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.1353%" y="325" width="0.0805%" height="15" fill="rgb(222,64,27)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.1353%" y="309" width="0.0805%" height="15" fill="rgb(221,121,35)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.1353%" y="293" width="0.0805%" height="15" fill="rgb(228,137,42)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1353%" y="277" width="0.0805%" height="15" fill="rgb(227,54,21)" fg:x="1194" fg:w="1"/><text x="96.3853%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.2158%" y="405" width="0.0805%" height="15" fill="rgb(240,168,33)" fg:x="1195" fg:w="1"/><text x="96.4658%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.2158%" y="389" width="0.0805%" height="15" fill="rgb(243,159,6)" fg:x="1195" fg:w="1"/><text x="96.4658%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.2158%" y="373" width="0.0805%" height="15" fill="rgb(205,211,41)" fg:x="1195" fg:w="1"/><text x="96.4658%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="96.2158%" y="357" width="0.0805%" height="15" fill="rgb(253,30,1)" fg:x="1195" fg:w="1"/><text x="96.4658%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.2158%" y="341" width="0.0805%" height="15" fill="rgb(226,80,18)" fg:x="1195" fg:w="1"/><text x="96.4658%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3768%" y="357" width="0.0805%" height="15" fill="rgb(253,156,46)" fg:x="1197" fg:w="1"/><text x="96.6268%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3768%" y="341" width="0.0805%" height="15" fill="rgb(248,87,27)" fg:x="1197" fg:w="1"/><text x="96.6268%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.4573%" y="357" width="0.0805%" height="15" fill="rgb(227,122,2)" fg:x="1198" fg:w="1"/><text x="96.7073%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.4573%" y="341" width="0.0805%" height="15" fill="rgb(229,94,39)" fg:x="1198" fg:w="1"/><text x="96.7073%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.4573%" y="325" width="0.0805%" height="15" fill="rgb(225,173,31)" fg:x="1198" fg:w="1"/><text x="96.7073%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.4573%" y="309" width="0.0805%" height="15" fill="rgb(239,176,30)" fg:x="1198" fg:w="1"/><text x="96.7073%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.5378%" y="341" width="0.0805%" height="15" fill="rgb(212,104,21)" fg:x="1199" fg:w="1"/><text x="96.7878%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.6184%" y="325" width="0.0805%" height="15" fill="rgb(240,209,40)" fg:x="1200" fg:w="1"/><text x="96.8684%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="96.6184%" y="341" width="0.1610%" height="15" fill="rgb(234,195,5)" fg:x="1200" fg:w="2"/><text x="96.8684%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.6989%" y="325" width="0.0805%" height="15" fill="rgb(238,213,1)" fg:x="1201" fg:w="1"/><text x="96.9489%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.6989%" y="309" width="0.0805%" height="15" fill="rgb(235,182,54)" fg:x="1201" fg:w="1"/><text x="96.9489%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="96.6989%" y="293" width="0.0805%" height="15" fill="rgb(229,50,46)" fg:x="1201" fg:w="1"/><text x="96.9489%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6989%" y="277" width="0.0805%" height="15" fill="rgb(219,145,13)" fg:x="1201" fg:w="1"/><text x="96.9489%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6989%" y="261" width="0.0805%" height="15" fill="rgb(220,226,10)" fg:x="1201" fg:w="1"/><text x="96.9489%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6989%" y="245" width="0.0805%" height="15" fill="rgb(248,47,30)" fg:x="1201" fg:w="1"/><text x="96.9489%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.7794%" y="309" width="0.0805%" height="15" fill="rgb(231,209,44)" fg:x="1202" fg:w="1"/><text x="97.0294%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.7794%" y="293" width="0.0805%" height="15" fill="rgb(209,80,30)" fg:x="1202" fg:w="1"/><text x="97.0294%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7794%" y="277" width="0.0805%" height="15" fill="rgb(232,9,14)" fg:x="1202" fg:w="1"/><text x="97.0294%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.7794%" y="261" width="0.0805%" height="15" fill="rgb(243,91,43)" fg:x="1202" fg:w="1"/><text x="97.0294%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.9404%" y="261" width="0.0805%" height="15" fill="rgb(231,90,52)" fg:x="1204" fg:w="1"/><text x="97.1904%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9404%" y="245" width="0.0805%" height="15" fill="rgb(253,192,44)" fg:x="1204" fg:w="1"/><text x="97.1904%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="96.7794%" y="325" width="0.4026%" height="15" fill="rgb(241,66,31)" fg:x="1202" fg:w="5"/><text x="97.0294%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="96.8599%" y="309" width="0.3221%" height="15" fill="rgb(235,81,37)" fg:x="1203" fg:w="4"/><text x="97.1099%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="96.8599%" y="293" width="0.3221%" height="15" fill="rgb(223,221,9)" fg:x="1203" fg:w="4"/><text x="97.1099%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="96.9404%" y="277" width="0.2415%" height="15" fill="rgb(242,180,7)" fg:x="1204" fg:w="3"/><text x="97.1904%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="97.0209%" y="261" width="0.1610%" height="15" fill="rgb(243,78,19)" fg:x="1205" fg:w="2"/><text x="97.2709%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1014%" y="245" width="0.0805%" height="15" fill="rgb(233,23,17)" fg:x="1206" fg:w="1"/><text x="97.3514%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1014%" y="229" width="0.0805%" height="15" fill="rgb(252,122,45)" fg:x="1206" fg:w="1"/><text x="97.3514%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1014%" y="213" width="0.0805%" height="15" fill="rgb(247,108,20)" fg:x="1206" fg:w="1"/><text x="97.3514%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="97.3430%" y="309" width="0.4831%" height="15" fill="rgb(235,84,21)" fg:x="1209" fg:w="6"/><text x="97.5930%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.13%)</title><rect x="96.7794%" y="341" width="1.1272%" height="15" fill="rgb(247,129,10)" fg:x="1202" fg:w="14"/><text x="97.0294%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="97.1820%" y="325" width="0.7246%" height="15" fill="rgb(208,173,14)" fg:x="1207" fg:w="9"/><text x="97.4320%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="97.8261%" y="309" width="0.0805%" height="15" fill="rgb(236,31,38)" fg:x="1215" fg:w="1"/><text x="98.0761%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (18 samples, 1.45%)</title><rect x="96.5378%" y="357" width="1.4493%" height="15" fill="rgb(232,65,17)" fg:x="1199" fg:w="18"/><text x="96.7878%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="97.9066%" y="341" width="0.0805%" height="15" fill="rgb(224,45,49)" fg:x="1216" fg:w="1"/><text x="98.1566%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="97.9066%" y="325" width="0.0805%" height="15" fill="rgb(225,2,53)" fg:x="1216" fg:w="1"/><text x="98.1566%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.9066%" y="309" width="0.0805%" height="15" fill="rgb(248,210,53)" fg:x="1216" fg:w="1"/><text x="98.1566%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.9871%" y="309" width="0.0805%" height="15" fill="rgb(211,1,30)" fg:x="1217" fg:w="1"/><text x="98.2371%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="97.9871%" y="325" width="0.1610%" height="15" fill="rgb(224,96,15)" fg:x="1217" fg:w="2"/><text x="98.2371%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="98.0676%" y="309" width="0.0805%" height="15" fill="rgb(252,45,11)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.0676%" y="293" width="0.0805%" height="15" fill="rgb(220,125,38)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.0676%" y="277" width="0.0805%" height="15" fill="rgb(243,161,33)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0676%" y="261" width="0.0805%" height="15" fill="rgb(248,197,34)" fg:x="1218" fg:w="1"/><text x="98.3176%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="97.9871%" y="357" width="0.2415%" height="15" fill="rgb(228,165,23)" fg:x="1217" fg:w="3"/><text x="98.2371%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="97.9871%" y="341" width="0.2415%" height="15" fill="rgb(236,94,38)" fg:x="1217" fg:w="3"/><text x="98.2371%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="98.1481%" y="325" width="0.0805%" height="15" fill="rgb(220,13,23)" fg:x="1219" fg:w="1"/><text x="98.3981%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="98.1481%" y="309" width="0.0805%" height="15" fill="rgb(234,26,39)" fg:x="1219" fg:w="1"/><text x="98.3981%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (25 samples, 2.01%)</title><rect x="96.2963%" y="405" width="2.0129%" height="15" fill="rgb(205,117,44)" fg:x="1196" fg:w="25"/><text x="96.5463%" y="415.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (25 samples, 2.01%)</title><rect x="96.2963%" y="389" width="2.0129%" height="15" fill="rgb(250,42,2)" fg:x="1196" fg:w="25"/><text x="96.5463%" y="399.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.93%)</title><rect x="96.3768%" y="373" width="1.9324%" height="15" fill="rgb(223,83,14)" fg:x="1197" fg:w="24"/><text x="96.6268%" y="383.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="98.2287%" y="357" width="0.0805%" height="15" fill="rgb(241,147,50)" fg:x="1220" fg:w="1"/><text x="98.4787%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="98.2287%" y="341" width="0.0805%" height="15" fill="rgb(218,90,6)" fg:x="1220" fg:w="1"/><text x="98.4787%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="98.2287%" y="325" width="0.0805%" height="15" fill="rgb(210,191,5)" fg:x="1220" fg:w="1"/><text x="98.4787%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3092%" y="341" width="0.0805%" height="15" fill="rgb(225,139,19)" fg:x="1221" fg:w="1"/><text x="98.5592%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.3092%" y="325" width="0.0805%" height="15" fill="rgb(210,1,33)" fg:x="1221" fg:w="1"/><text x="98.5592%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.3092%" y="309" width="0.0805%" height="15" fill="rgb(213,50,3)" fg:x="1221" fg:w="1"/><text x="98.5592%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="98.3897%" y="325" width="0.1610%" height="15" fill="rgb(234,227,4)" fg:x="1222" fg:w="2"/><text x="98.6397%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="98.3897%" y="309" width="0.1610%" height="15" fill="rgb(246,63,5)" fg:x="1222" fg:w="2"/><text x="98.6397%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="98.3897%" y="293" width="0.1610%" height="15" fill="rgb(245,136,27)" fg:x="1222" fg:w="2"/><text x="98.6397%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="98.3897%" y="341" width="0.2415%" height="15" fill="rgb(247,199,27)" fg:x="1222" fg:w="3"/><text x="98.6397%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.5507%" y="325" width="0.0805%" height="15" fill="rgb(252,158,49)" fg:x="1224" fg:w="1"/><text x="98.8007%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (31 samples, 2.50%)</title><rect x="96.2158%" y="421" width="2.4960%" height="15" fill="rgb(254,73,1)" fg:x="1195" fg:w="31"/><text x="96.4658%" y="431.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="98.3092%" y="405" width="0.4026%" height="15" fill="rgb(248,93,19)" fg:x="1221" fg:w="5"/><text x="98.5592%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="98.3092%" y="389" width="0.4026%" height="15" fill="rgb(206,67,5)" fg:x="1221" fg:w="5"/><text x="98.5592%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="98.3092%" y="373" width="0.4026%" height="15" fill="rgb(209,210,4)" fg:x="1221" fg:w="5"/><text x="98.5592%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="98.3092%" y="357" width="0.4026%" height="15" fill="rgb(214,185,36)" fg:x="1221" fg:w="5"/><text x="98.5592%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.6312%" y="341" width="0.0805%" height="15" fill="rgb(233,191,26)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.6312%" y="325" width="0.0805%" height="15" fill="rgb(248,94,17)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.6312%" y="309" width="0.0805%" height="15" fill="rgb(250,64,4)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6312%" y="293" width="0.0805%" height="15" fill="rgb(218,41,53)" fg:x="1225" fg:w="1"/><text x="98.8812%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (279 samples, 22.46%)</title><rect x="76.4090%" y="517" width="22.4638%" height="15" fill="rgb(251,176,28)" fg:x="949" fg:w="279"/><text x="76.6590%" y="527.50">&lt;&amp;kernel::model::entry::Entry as plu..</text></g><g><title>plugins_core::looking::model::qualify_name (270 samples, 21.74%)</title><rect x="77.1337%" y="501" width="21.7391%" height="15" fill="rgb(247,22,9)" fg:x="958" fg:w="270"/><text x="77.3837%" y="511.50">plugins_core::looking::model::qual..</text></g><g><title>indefinite::indefinite (270 samples, 21.74%)</title><rect x="77.1337%" y="485" width="21.7391%" height="15" fill="rgb(218,201,14)" fg:x="958" fg:w="270"/><text x="77.3837%" y="495.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (270 samples, 21.74%)</title><rect x="77.1337%" y="469" width="21.7391%" height="15" fill="rgb(218,94,10)" fg:x="958" fg:w="270"/><text x="77.3837%" y="479.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (270 samples, 21.74%)</title><rect x="77.1337%" y="453" width="21.7391%" height="15" fill="rgb(222,183,52)" fg:x="958" fg:w="270"/><text x="77.3837%" y="463.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (34 samples, 2.74%)</title><rect x="96.1353%" y="437" width="2.7375%" height="15" fill="rgb(242,140,25)" fg:x="1194" fg:w="34"/><text x="96.3853%" y="447.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="98.7118%" y="421" width="0.1610%" height="15" fill="rgb(235,197,38)" fg:x="1226" fg:w="2"/><text x="98.9618%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="98.8728%" y="517" width="0.1610%" height="15" fill="rgb(237,136,15)" fg:x="1228" fg:w="2"/><text x="99.1228%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (2 samples, 0.16%)</title><rect x="98.8728%" y="501" width="0.1610%" height="15" fill="rgb(223,44,49)" fg:x="1228" fg:w="2"/><text x="99.1228%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9533%" y="485" width="0.0805%" height="15" fill="rgb(227,71,15)" fg:x="1229" fg:w="1"/><text x="99.2033%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.0338%" y="373" width="0.0805%" height="15" fill="rgb(225,153,20)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.0338%" y="357" width="0.0805%" height="15" fill="rgb(210,190,26)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.0338%" y="341" width="0.0805%" height="15" fill="rgb(223,147,5)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.0338%" y="325" width="0.0805%" height="15" fill="rgb(207,14,23)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="335.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.0338%" y="309" width="0.0805%" height="15" fill="rgb(211,195,53)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.0338%" y="293" width="0.0805%" height="15" fill="rgb(237,75,46)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0338%" y="277" width="0.0805%" height="15" fill="rgb(254,55,14)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.0338%" y="261" width="0.0805%" height="15" fill="rgb(230,185,30)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0338%" y="245" width="0.0805%" height="15" fill="rgb(220,14,11)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.0338%" y="229" width="0.0805%" height="15" fill="rgb(215,169,44)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0338%" y="213" width="0.0805%" height="15" fill="rgb(253,203,20)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.0338%" y="197" width="0.0805%" height="15" fill="rgb(229,225,17)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.0338%" y="181" width="0.0805%" height="15" fill="rgb(236,76,26)" fg:x="1230" fg:w="1"/><text x="99.2838%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1948%" y="181" width="0.0805%" height="15" fill="rgb(234,15,30)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1948%" y="165" width="0.0805%" height="15" fill="rgb(211,113,48)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="175.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.1948%" y="149" width="0.0805%" height="15" fill="rgb(221,31,36)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1948%" y="133" width="0.0805%" height="15" fill="rgb(215,118,52)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1948%" y="117" width="0.0805%" height="15" fill="rgb(241,151,27)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="127.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.1948%" y="101" width="0.0805%" height="15" fill="rgb(253,51,3)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1948%" y="85" width="0.0805%" height="15" fill="rgb(216,201,24)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1948%" y="69" width="0.0805%" height="15" fill="rgb(231,107,4)" fg:x="1232" fg:w="1"/><text x="99.4448%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1948%" y="245" width="0.1610%" height="15" fill="rgb(243,97,54)" fg:x="1232" fg:w="2"/><text x="99.4448%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1948%" y="229" width="0.1610%" height="15" fill="rgb(221,32,51)" fg:x="1232" fg:w="2"/><text x="99.4448%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1948%" y="213" width="0.1610%" height="15" fill="rgb(218,171,35)" fg:x="1232" fg:w="2"/><text x="99.4448%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1948%" y="197" width="0.1610%" height="15" fill="rgb(214,20,53)" fg:x="1232" fg:w="2"/><text x="99.4448%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2754%" y="181" width="0.0805%" height="15" fill="rgb(239,9,52)" fg:x="1233" fg:w="1"/><text x="99.5254%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2754%" y="165" width="0.0805%" height="15" fill="rgb(215,114,45)" fg:x="1233" fg:w="1"/><text x="99.5254%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="99.1143%" y="293" width="0.3221%" height="15" fill="rgb(208,118,9)" fg:x="1231" fg:w="4"/><text x="99.3643%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.1143%" y="277" width="0.3221%" height="15" fill="rgb(235,7,39)" fg:x="1231" fg:w="4"/><text x="99.3643%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.1948%" y="261" width="0.2415%" height="15" fill="rgb(243,225,15)" fg:x="1232" fg:w="3"/><text x="99.4448%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.3559%" y="245" width="0.0805%" height="15" fill="rgb(225,216,18)" fg:x="1234" fg:w="1"/><text x="99.6059%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.3559%" y="229" width="0.0805%" height="15" fill="rgb(233,36,38)" fg:x="1234" fg:w="1"/><text x="99.6059%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.3559%" y="213" width="0.0805%" height="15" fill="rgb(239,88,23)" fg:x="1234" fg:w="1"/><text x="99.6059%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3559%" y="197" width="0.0805%" height="15" fill="rgb(219,181,35)" fg:x="1234" fg:w="1"/><text x="99.6059%" y="207.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (6 samples, 0.48%)</title><rect x="99.0338%" y="485" width="0.4831%" height="15" fill="rgb(215,18,46)" fg:x="1230" fg:w="6"/><text x="99.2838%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.48%)</title><rect x="99.0338%" y="469" width="0.4831%" height="15" fill="rgb(241,38,11)" fg:x="1230" fg:w="6"/><text x="99.2838%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="99.0338%" y="453" width="0.4831%" height="15" fill="rgb(248,169,45)" fg:x="1230" fg:w="6"/><text x="99.2838%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.48%)</title><rect x="99.0338%" y="437" width="0.4831%" height="15" fill="rgb(239,50,49)" fg:x="1230" fg:w="6"/><text x="99.2838%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.48%)</title><rect x="99.0338%" y="421" width="0.4831%" height="15" fill="rgb(231,96,31)" fg:x="1230" fg:w="6"/><text x="99.2838%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="99.0338%" y="405" width="0.4831%" height="15" fill="rgb(224,193,37)" fg:x="1230" fg:w="6"/><text x="99.2838%" y="415.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.0338%" y="389" width="0.4831%" height="15" fill="rgb(227,153,50)" fg:x="1230" fg:w="6"/><text x="99.2838%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="99.1143%" y="373" width="0.4026%" height="15" fill="rgb(249,228,3)" fg:x="1231" fg:w="5"/><text x="99.3643%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (5 samples, 0.40%)</title><rect x="99.1143%" y="357" width="0.4026%" height="15" fill="rgb(219,164,43)" fg:x="1231" fg:w="5"/><text x="99.3643%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (5 samples, 0.40%)</title><rect x="99.1143%" y="341" width="0.4026%" height="15" fill="rgb(216,45,41)" fg:x="1231" fg:w="5"/><text x="99.3643%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="99.1143%" y="325" width="0.4026%" height="15" fill="rgb(210,226,51)" fg:x="1231" fg:w="5"/><text x="99.3643%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="99.1143%" y="309" width="0.4026%" height="15" fill="rgb(209,117,49)" fg:x="1231" fg:w="5"/><text x="99.3643%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4364%" y="293" width="0.0805%" height="15" fill="rgb(206,196,24)" fg:x="1235" fg:w="1"/><text x="99.6864%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4364%" y="277" width="0.0805%" height="15" fill="rgb(253,218,3)" fg:x="1235" fg:w="1"/><text x="99.6864%" y="287.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (295 samples, 23.75%)</title><rect x="75.9259%" y="677" width="23.7520%" height="15" fill="rgb(252,166,2)" fg:x="943" fg:w="295"/><text x="76.1759%" y="687.50">&lt;engine::perform::StandardPerformer as..</text></g><g><title>kernel::plugins::mw::apply_middleware (290 samples, 23.35%)</title><rect x="76.3285%" y="661" width="23.3494%" height="15" fill="rgb(236,218,26)" fg:x="948" fg:w="290"/><text x="76.5785%" y="671.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (290 samples, 23.35%)</title><rect x="76.3285%" y="645" width="23.3494%" height="15" fill="rgb(254,84,19)" fg:x="948" fg:w="290"/><text x="76.5785%" y="655.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (290 samples, 23.35%)</title><rect x="76.3285%" y="629" width="23.3494%" height="15" fill="rgb(219,137,29)" fg:x="948" fg:w="290"/><text x="76.5785%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware as..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (290 samples, 23.35%)</title><rect x="76.3285%" y="613" width="23.3494%" height="15" fill="rgb(227,47,52)" fg:x="948" fg:w="290"/><text x="76.5785%" y="623.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (290 samples, 23.35%)</title><rect x="76.3285%" y="597" width="23.3494%" height="15" fill="rgb(229,167,24)" fg:x="948" fg:w="290"/><text x="76.5785%" y="607.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (290 samples, 23.35%)</title><rect x="76.3285%" y="581" width="23.3494%" height="15" fill="rgb(233,164,1)" fg:x="948" fg:w="290"/><text x="76.5785%" y="591.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (290 samples, 23.35%)</title><rect x="76.3285%" y="565" width="23.3494%" height="15" fill="rgb(218,88,48)" fg:x="948" fg:w="290"/><text x="76.5785%" y="575.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (290 samples, 23.35%)</title><rect x="76.3285%" y="549" width="23.3494%" height="15" fill="rgb(226,214,24)" fg:x="948" fg:w="290"/><text x="76.5785%" y="559.50">&lt;plugins_core::looking::actions::Look..</text></g><g><title>plugins_core::looking::model::new_area_observation (289 samples, 23.27%)</title><rect x="76.4090%" y="533" width="23.2689%" height="15" fill="rgb(233,29,12)" fg:x="949" fg:w="289"/><text x="76.6590%" y="543.50">plugins_core::looking::model::new_are..</text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.64%)</title><rect x="99.0338%" y="517" width="0.6441%" height="15" fill="rgb(219,120,34)" fg:x="1230" fg:w="8"/><text x="99.2838%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.64%)</title><rect x="99.0338%" y="501" width="0.6441%" height="15" fill="rgb(226,78,44)" fg:x="1230" fg:w="8"/><text x="99.2838%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5169%" y="485" width="0.1610%" height="15" fill="rgb(240,15,48)" fg:x="1236" fg:w="2"/><text x="99.7669%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5974%" y="469" width="0.0805%" height="15" fill="rgb(253,176,7)" fg:x="1237" fg:w="1"/><text x="99.8474%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5974%" y="453" width="0.0805%" height="15" fill="rgb(206,166,28)" fg:x="1237" fg:w="1"/><text x="99.8474%" y="463.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (297 samples, 23.91%)</title><rect x="75.9259%" y="709" width="23.9130%" height="15" fill="rgb(241,53,51)" fg:x="943" fg:w="297"/><text x="76.1759%" y="719.50">&lt;plugins_core::looking::LookingPlugin ..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (297 samples, 23.91%)</title><rect x="75.9259%" y="693" width="23.9130%" height="15" fill="rgb(249,112,30)" fg:x="943" fg:w="297"/><text x="76.1759%" y="703.50">&lt;engine::perform::StandardPerformer as..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (2 samples, 0.16%)</title><rect x="99.6779%" y="677" width="0.1610%" height="15" fill="rgb(217,85,30)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="99.6779%" y="661" width="0.1610%" height="15" fill="rgb(233,49,7)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.6779%" y="645" width="0.1610%" height="15" fill="rgb(234,109,9)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="655.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.6779%" y="629" width="0.1610%" height="15" fill="rgb(253,95,22)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="99.6779%" y="613" width="0.1610%" height="15" fill="rgb(233,176,25)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="99.6779%" y="597" width="0.1610%" height="15" fill="rgb(236,33,39)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="99.6779%" y="581" width="0.1610%" height="15" fill="rgb(223,226,42)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6779%" y="565" width="0.1610%" height="15" fill="rgb(216,99,33)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6779%" y="549" width="0.1610%" height="15" fill="rgb(235,84,23)" fg:x="1238" fg:w="2"/><text x="99.9279%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7585%" y="533" width="0.0805%" height="15" fill="rgb(232,2,27)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7585%" y="517" width="0.0805%" height="15" fill="rgb(241,23,22)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7585%" y="501" width="0.0805%" height="15" fill="rgb(211,73,27)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7585%" y="485" width="0.0805%" height="15" fill="rgb(235,109,49)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7585%" y="469" width="0.0805%" height="15" fill="rgb(230,99,29)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7585%" y="453" width="0.0805%" height="15" fill="rgb(245,199,7)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.7585%" y="437" width="0.0805%" height="15" fill="rgb(217,179,10)" fg:x="1239" fg:w="1"/><text x="100.0085%" y="447.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (299 samples, 24.07%)</title><rect x="75.8454%" y="773" width="24.0741%" height="15" fill="rgb(254,99,47)" fg:x="942" fg:w="299"/><text x="76.0954%" y="783.50">&lt;kernel::plugins::SessionPlugins as ke..</text></g><g><title>core::iter::adapters::try_process (299 samples, 24.07%)</title><rect x="75.8454%" y="757" width="24.0741%" height="15" fill="rgb(251,121,7)" fg:x="942" fg:w="299"/><text x="76.0954%" y="767.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (298 samples, 23.99%)</title><rect x="75.9259%" y="741" width="23.9936%" height="15" fill="rgb(250,177,26)" fg:x="943" fg:w="298"/><text x="76.1759%" y="751.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spe..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (298 samples, 23.99%)</title><rect x="75.9259%" y="725" width="23.9936%" height="15" fill="rgb(232,88,15)" fg:x="943" fg:w="298"/><text x="76.1759%" y="735.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; a..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="99.8390%" y="709" width="0.0805%" height="15" fill="rgb(251,54,54)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="719.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::take_produced (1 samples, 0.08%)</title><rect x="99.8390%" y="693" width="0.0805%" height="15" fill="rgb(208,177,15)" fg:x="1240" fg:w="1"/><text x="100.0890%" y="703.50"></text></g><g><title>all (1,242 samples, 100%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(205,97,32)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1167.50"></text></g><g><title>simple-2f0f8a36 (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(217,192,13)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1151.50">simple-2f0f8a36</text></g><g><title>_start (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(215,163,41)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1135.50">_start</text></g><g><title>__libc_start_main (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(246,83,29)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1119.50">__libc_start_main</text></g><g><title>main (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(219,2,45)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1103.50">main</text></g><g><title>std::rt::lang_start_internal (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(242,215,33)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1087.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(217,1,6)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(207,85,52)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(231,171,19)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1039.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,242 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(207,128,4)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,242 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(219,208,4)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,242 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(235,161,42)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,242 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(247,218,18)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,242 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(232,114,51)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="959.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,242 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(222,95,3)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="943.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,242 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(240,65,29)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="927.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,242 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(249,209,20)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="911.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,242 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(241,48,37)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="895.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,242 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(230,140,42)" fg:x="0" fg:w="1242"/><text x="0.2500%" y="879.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (372 samples, 29.95%)</title><rect x="70.0483%" y="853" width="29.9517%" height="15" fill="rgb(230,176,45)" fg:x="870" fg:w="372"/><text x="70.2983%" y="863.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (372 samples, 29.95%)</title><rect x="70.0483%" y="837" width="29.9517%" height="15" fill="rgb(245,112,21)" fg:x="870" fg:w="372"/><text x="70.2983%" y="847.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (372 samples, 29.95%)</title><rect x="70.0483%" y="821" width="29.9517%" height="15" fill="rgb(207,183,35)" fg:x="870" fg:w="372"/><text x="70.2983%" y="831.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (300 samples, 24.15%)</title><rect x="75.8454%" y="805" width="24.1546%" height="15" fill="rgb(227,44,33)" fg:x="942" fg:w="300"/><text x="76.0954%" y="815.50">engine::session::Session::evaluate_and..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (300 samples, 24.15%)</title><rect x="75.8454%" y="789" width="24.1546%" height="15" fill="rgb(246,120,21)" fg:x="942" fg:w="300"/><text x="76.0954%" y="799.50">engine::perform::StandardPerformer::ev..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="99.9195%" y="773" width="0.0805%" height="15" fill="rgb(235,57,52)" fg:x="1241" fg:w="1"/><text x="100.1695%" y="783.50"></text></g></svg></svg>