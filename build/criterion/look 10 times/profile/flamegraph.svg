<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1231"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0812%" height="15" fill="rgb(214,149,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0812%" height="15" fill="rgb(208,123,3)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="597" width="0.0812%" height="15" fill="rgb(229,126,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="581" width="0.0812%" height="15" fill="rgb(222,92,36)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="565" width="0.0812%" height="15" fill="rgb(216,39,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.0812%" y="613" width="0.1625%" height="15" fill="rgb(253,127,28)" fg:x="1" fg:w="2"/><text x="0.3312%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.2437%" y="613" width="0.0812%" height="15" fill="rgb(249,152,51)" fg:x="3" fg:w="1"/><text x="0.4937%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2437%" y="597" width="0.0812%" height="15" fill="rgb(209,123,42)" fg:x="3" fg:w="1"/><text x="0.4937%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4062%" y="533" width="0.0812%" height="15" fill="rgb(241,118,22)" fg:x="5" fg:w="1"/><text x="0.6562%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4874%" y="533" width="0.0812%" height="15" fill="rgb(208,25,7)" fg:x="6" fg:w="1"/><text x="0.7374%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6499%" y="517" width="0.0812%" height="15" fill="rgb(243,144,39)" fg:x="8" fg:w="1"/><text x="0.8999%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7311%" y="517" width="0.0812%" height="15" fill="rgb(250,50,5)" fg:x="9" fg:w="1"/><text x="0.9811%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7311%" y="501" width="0.0812%" height="15" fill="rgb(207,67,11)" fg:x="9" fg:w="1"/><text x="0.9811%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8936%" y="501" width="0.0812%" height="15" fill="rgb(245,204,40)" fg:x="11" fg:w="1"/><text x="1.1436%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="0.3249%" y="549" width="0.7311%" height="15" fill="rgb(238,228,24)" fg:x="4" fg:w="9"/><text x="0.5749%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="0.5686%" y="533" width="0.4874%" height="15" fill="rgb(217,116,22)" fg:x="7" fg:w="6"/><text x="0.8186%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.8123%" y="517" width="0.2437%" height="15" fill="rgb(234,98,12)" fg:x="10" fg:w="3"/><text x="1.0623%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.9748%" y="501" width="0.0812%" height="15" fill="rgb(242,170,50)" fg:x="12" fg:w="1"/><text x="1.2248%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.9748%" y="485" width="0.0812%" height="15" fill="rgb(235,7,5)" fg:x="12" fg:w="1"/><text x="1.2248%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.9748%" y="469" width="0.0812%" height="15" fill="rgb(241,114,28)" fg:x="12" fg:w="1"/><text x="1.2248%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.9748%" y="453" width="0.0812%" height="15" fill="rgb(246,112,42)" fg:x="12" fg:w="1"/><text x="1.2248%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.9748%" y="437" width="0.0812%" height="15" fill="rgb(248,228,14)" fg:x="12" fg:w="1"/><text x="1.2248%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9748%" y="421" width="0.0812%" height="15" fill="rgb(208,133,18)" fg:x="12" fg:w="1"/><text x="1.2248%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.1373%" y="517" width="0.1625%" height="15" fill="rgb(207,35,49)" fg:x="14" fg:w="2"/><text x="1.3873%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2998%" y="517" width="0.0812%" height="15" fill="rgb(205,68,36)" fg:x="16" fg:w="1"/><text x="1.5498%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2998%" y="501" width="0.0812%" height="15" fill="rgb(245,62,40)" fg:x="16" fg:w="1"/><text x="1.5498%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.5435%" y="501" width="0.1625%" height="15" fill="rgb(228,27,24)" fg:x="19" fg:w="2"/><text x="1.7935%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6247%" y="485" width="0.0812%" height="15" fill="rgb(253,19,12)" fg:x="20" fg:w="1"/><text x="1.8747%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="1.0561%" y="533" width="0.7311%" height="15" fill="rgb(232,28,20)" fg:x="13" fg:w="9"/><text x="1.3061%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="1.3810%" y="517" width="0.4062%" height="15" fill="rgb(218,35,51)" fg:x="17" fg:w="5"/><text x="1.6310%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.7059%" y="501" width="0.0812%" height="15" fill="rgb(212,90,40)" fg:x="21" fg:w="1"/><text x="1.9559%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7059%" y="485" width="0.0812%" height="15" fill="rgb(220,172,12)" fg:x="21" fg:w="1"/><text x="1.9559%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7059%" y="469" width="0.0812%" height="15" fill="rgb(226,159,20)" fg:x="21" fg:w="1"/><text x="1.9559%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="1.0561%" y="549" width="0.8123%" height="15" fill="rgb(234,205,16)" fg:x="13" fg:w="10"/><text x="1.3061%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7872%" y="533" width="0.0812%" height="15" fill="rgb(207,9,39)" fg:x="22" fg:w="1"/><text x="2.0372%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.62%)</title><rect x="0.3249%" y="597" width="1.6247%" height="15" fill="rgb(249,143,15)" fg:x="4" fg:w="20"/><text x="0.5749%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (20 samples, 1.62%)</title><rect x="0.3249%" y="581" width="1.6247%" height="15" fill="rgb(253,133,29)" fg:x="4" fg:w="20"/><text x="0.5749%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.62%)</title><rect x="0.3249%" y="565" width="1.6247%" height="15" fill="rgb(221,187,0)" fg:x="4" fg:w="20"/><text x="0.5749%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8684%" y="549" width="0.0812%" height="15" fill="rgb(205,204,26)" fg:x="23" fg:w="1"/><text x="2.1184%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 1.95%)</title><rect x="0.0812%" y="629" width="1.9496%" height="15" fill="rgb(224,68,54)" fg:x="1" fg:w="24"/><text x="0.3312%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (21 samples, 1.71%)</title><rect x="0.3249%" y="613" width="1.7059%" height="15" fill="rgb(209,67,4)" fg:x="4" fg:w="21"/><text x="0.5749%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9496%" y="597" width="0.0812%" height="15" fill="rgb(228,229,18)" fg:x="24" fg:w="1"/><text x="2.1996%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="2.0309%" y="565" width="0.0812%" height="15" fill="rgb(231,89,13)" fg:x="25" fg:w="1"/><text x="2.2809%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="2.0309%" y="581" width="0.1625%" height="15" fill="rgb(210,182,18)" fg:x="25" fg:w="2"/><text x="2.2809%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;kernel::model::base::AclRule&gt;&gt; (1 samples, 0.08%)</title><rect x="2.1121%" y="565" width="0.0812%" height="15" fill="rgb(240,105,2)" fg:x="26" fg:w="1"/><text x="2.3621%" y="575.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.1933%" y="581" width="0.0812%" height="15" fill="rgb(207,170,50)" fg:x="27" fg:w="1"/><text x="2.4433%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.3558%" y="565" width="0.1625%" height="15" fill="rgb(232,133,24)" fg:x="29" fg:w="2"/><text x="2.6058%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.3558%" y="549" width="0.1625%" height="15" fill="rgb(235,166,27)" fg:x="29" fg:w="2"/><text x="2.6058%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.4370%" y="533" width="0.0812%" height="15" fill="rgb(209,19,13)" fg:x="30" fg:w="1"/><text x="2.6870%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.5183%" y="533" width="0.0812%" height="15" fill="rgb(226,79,39)" fg:x="31" fg:w="1"/><text x="2.7683%" y="543.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="2.5183%" y="517" width="0.0812%" height="15" fill="rgb(222,163,10)" fg:x="31" fg:w="1"/><text x="2.7683%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="2.5183%" y="501" width="0.0812%" height="15" fill="rgb(214,44,19)" fg:x="31" fg:w="1"/><text x="2.7683%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5183%" y="485" width="0.0812%" height="15" fill="rgb(210,217,13)" fg:x="31" fg:w="1"/><text x="2.7683%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5183%" y="469" width="0.0812%" height="15" fill="rgb(237,61,54)" fg:x="31" fg:w="1"/><text x="2.7683%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.5183%" y="453" width="0.0812%" height="15" fill="rgb(226,184,24)" fg:x="31" fg:w="1"/><text x="2.7683%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.5183%" y="437" width="0.0812%" height="15" fill="rgb(223,226,4)" fg:x="31" fg:w="1"/><text x="2.7683%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.5183%" y="421" width="0.0812%" height="15" fill="rgb(210,26,41)" fg:x="31" fg:w="1"/><text x="2.7683%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.5183%" y="405" width="0.0812%" height="15" fill="rgb(220,221,6)" fg:x="31" fg:w="1"/><text x="2.7683%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5183%" y="389" width="0.0812%" height="15" fill="rgb(225,89,49)" fg:x="31" fg:w="1"/><text x="2.7683%" y="399.50"></text></g><g><title>anyhow::error::&lt;impl anyhow::Error&gt;::construct (1 samples, 0.08%)</title><rect x="2.5995%" y="533" width="0.0812%" height="15" fill="rgb(218,70,45)" fg:x="32" fg:w="1"/><text x="2.8495%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5995%" y="517" width="0.0812%" height="15" fill="rgb(238,166,21)" fg:x="32" fg:w="1"/><text x="2.8495%" y="527.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="2.8432%" y="517" width="0.1625%" height="15" fill="rgb(224,141,44)" fg:x="35" fg:w="2"/><text x="3.0932%" y="527.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="2.8432%" y="501" width="0.1625%" height="15" fill="rgb(230,12,49)" fg:x="35" fg:w="2"/><text x="3.0932%" y="511.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.08%)</title><rect x="2.9245%" y="485" width="0.0812%" height="15" fill="rgb(212,174,12)" fg:x="36" fg:w="1"/><text x="3.1745%" y="495.50"></text></g><g><title>libloading::safe::Library::new (11 samples, 0.89%)</title><rect x="2.6807%" y="533" width="0.8936%" height="15" fill="rgb(246,67,9)" fg:x="33" fg:w="11"/><text x="2.9307%" y="543.50"></text></g><g><title>dlopen (7 samples, 0.57%)</title><rect x="3.0057%" y="517" width="0.5686%" height="15" fill="rgb(239,35,23)" fg:x="37" fg:w="7"/><text x="3.2557%" y="527.50"></text></g><g><title>_dl_catch_error (7 samples, 0.57%)</title><rect x="3.0057%" y="501" width="0.5686%" height="15" fill="rgb(211,167,0)" fg:x="37" fg:w="7"/><text x="3.2557%" y="511.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.57%)</title><rect x="3.0057%" y="485" width="0.5686%" height="15" fill="rgb(225,119,45)" fg:x="37" fg:w="7"/><text x="3.2557%" y="495.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.57%)</title><rect x="3.0057%" y="469" width="0.5686%" height="15" fill="rgb(210,162,6)" fg:x="37" fg:w="7"/><text x="3.2557%" y="479.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.49%)</title><rect x="3.0869%" y="453" width="0.4874%" height="15" fill="rgb(208,118,35)" fg:x="38" fg:w="6"/><text x="3.3369%" y="463.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (14 samples, 1.14%)</title><rect x="2.5183%" y="549" width="1.1373%" height="15" fill="rgb(239,4,53)" fg:x="31" fg:w="14"/><text x="2.7683%" y="559.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="3.5743%" y="533" width="0.0812%" height="15" fill="rgb(213,130,21)" fg:x="44" fg:w="1"/><text x="3.8243%" y="543.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="3.5743%" y="517" width="0.0812%" height="15" fill="rgb(235,148,0)" fg:x="44" fg:w="1"/><text x="3.8243%" y="527.50"></text></g><g><title>core::str::lossy::Utf8Chunk::valid (1 samples, 0.08%)</title><rect x="3.5743%" y="501" width="0.0812%" height="15" fill="rgb(244,224,18)" fg:x="44" fg:w="1"/><text x="3.8243%" y="511.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="3.6556%" y="549" width="0.0812%" height="15" fill="rgb(211,214,4)" fg:x="45" fg:w="1"/><text x="3.9056%" y="559.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="3.6556%" y="533" width="0.0812%" height="15" fill="rgb(206,119,25)" fg:x="45" fg:w="1"/><text x="3.9056%" y="543.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="3.6556%" y="517" width="0.0812%" height="15" fill="rgb(243,93,47)" fg:x="45" fg:w="1"/><text x="3.9056%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="3.6556%" y="501" width="0.0812%" height="15" fill="rgb(224,194,6)" fg:x="45" fg:w="1"/><text x="3.9056%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="3.6556%" y="485" width="0.0812%" height="15" fill="rgb(243,229,6)" fg:x="45" fg:w="1"/><text x="3.9056%" y="495.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.08%)</title><rect x="3.6556%" y="469" width="0.0812%" height="15" fill="rgb(207,23,50)" fg:x="45" fg:w="1"/><text x="3.9056%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.38%)</title><rect x="2.5183%" y="565" width="1.3810%" height="15" fill="rgb(253,192,32)" fg:x="31" fg:w="17"/><text x="2.7683%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="3.7368%" y="549" width="0.1625%" height="15" fill="rgb(213,21,6)" fg:x="46" fg:w="2"/><text x="3.9868%" y="559.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="3.7368%" y="533" width="0.1625%" height="15" fill="rgb(243,151,13)" fg:x="46" fg:w="2"/><text x="3.9868%" y="543.50"></text></g><g><title>engine::session::Session::initialize (24 samples, 1.95%)</title><rect x="2.2746%" y="581" width="1.9496%" height="15" fill="rgb(233,165,41)" fg:x="28" fg:w="24"/><text x="2.5246%" y="591.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (4 samples, 0.32%)</title><rect x="3.8993%" y="565" width="0.3249%" height="15" fill="rgb(246,176,45)" fg:x="48" fg:w="4"/><text x="4.1493%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="3.9805%" y="549" width="0.2437%" height="15" fill="rgb(217,170,52)" fg:x="49" fg:w="3"/><text x="4.2305%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="3.9805%" y="533" width="0.2437%" height="15" fill="rgb(214,203,54)" fg:x="49" fg:w="3"/><text x="4.2305%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="3.9805%" y="517" width="0.2437%" height="15" fill="rgb(248,215,49)" fg:x="49" fg:w="3"/><text x="4.2305%" y="527.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="3.9805%" y="501" width="0.2437%" height="15" fill="rgb(208,46,10)" fg:x="49" fg:w="3"/><text x="4.2305%" y="511.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="4.2242%" y="549" width="0.0812%" height="15" fill="rgb(254,5,31)" fg:x="52" fg:w="1"/><text x="4.4742%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="4.2242%" y="533" width="0.0812%" height="15" fill="rgb(222,104,33)" fg:x="52" fg:w="1"/><text x="4.4742%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="4.2242%" y="517" width="0.0812%" height="15" fill="rgb(248,49,16)" fg:x="52" fg:w="1"/><text x="4.4742%" y="527.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="4.2242%" y="581" width="0.1625%" height="15" fill="rgb(232,198,41)" fg:x="52" fg:w="2"/><text x="4.4742%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.2242%" y="565" width="0.1625%" height="15" fill="rgb(214,125,3)" fg:x="52" fg:w="2"/><text x="4.4742%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.3054%" y="549" width="0.0812%" height="15" fill="rgb(229,220,28)" fg:x="53" fg:w="1"/><text x="4.5554%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.3054%" y="533" width="0.0812%" height="15" fill="rgb(222,64,37)" fg:x="53" fg:w="1"/><text x="4.5554%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.3054%" y="517" width="0.0812%" height="15" fill="rgb(249,184,13)" fg:x="53" fg:w="1"/><text x="4.5554%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (30 samples, 2.44%)</title><rect x="2.0309%" y="629" width="2.4370%" height="15" fill="rgb(252,176,6)" fg:x="25" fg:w="30"/><text x="2.2809%" y="639.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (30 samples, 2.44%)</title><rect x="2.0309%" y="613" width="2.4370%" height="15" fill="rgb(228,153,7)" fg:x="25" fg:w="30"/><text x="2.2809%" y="623.50">en..</text></g><g><title>engine::session::Session::new (30 samples, 2.44%)</title><rect x="2.0309%" y="597" width="2.4370%" height="15" fill="rgb(242,193,5)" fg:x="25" fg:w="30"/><text x="2.2809%" y="607.50">en..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.3867%" y="581" width="0.0812%" height="15" fill="rgb(232,140,9)" fg:x="54" fg:w="1"/><text x="4.6367%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.3867%" y="565" width="0.0812%" height="15" fill="rgb(213,222,16)" fg:x="54" fg:w="1"/><text x="4.6367%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.6304%" y="613" width="0.0812%" height="15" fill="rgb(222,75,50)" fg:x="57" fg:w="1"/><text x="4.8804%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.6304%" y="597" width="0.0812%" height="15" fill="rgb(205,180,2)" fg:x="57" fg:w="1"/><text x="4.8804%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6304%" y="581" width="0.0812%" height="15" fill="rgb(216,34,7)" fg:x="57" fg:w="1"/><text x="4.8804%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6304%" y="565" width="0.0812%" height="15" fill="rgb(253,16,32)" fg:x="57" fg:w="1"/><text x="4.8804%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6304%" y="549" width="0.0812%" height="15" fill="rgb(208,97,28)" fg:x="57" fg:w="1"/><text x="4.8804%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="4.7929%" y="597" width="0.1625%" height="15" fill="rgb(225,92,11)" fg:x="59" fg:w="2"/><text x="5.0429%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8741%" y="581" width="0.0812%" height="15" fill="rgb(243,38,12)" fg:x="60" fg:w="1"/><text x="5.1241%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.8741%" y="565" width="0.0812%" height="15" fill="rgb(208,139,16)" fg:x="60" fg:w="1"/><text x="5.1241%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="4.8741%" y="549" width="0.0812%" height="15" fill="rgb(227,24,9)" fg:x="60" fg:w="1"/><text x="5.1241%" y="559.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.9553%" y="597" width="0.0812%" height="15" fill="rgb(206,62,11)" fg:x="61" fg:w="1"/><text x="5.2053%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0366%" y="565" width="0.0812%" height="15" fill="rgb(228,134,27)" fg:x="62" fg:w="1"/><text x="5.2866%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="5.1178%" y="533" width="0.0812%" height="15" fill="rgb(205,55,33)" fg:x="63" fg:w="1"/><text x="5.3678%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.1178%" y="565" width="0.1625%" height="15" fill="rgb(243,75,43)" fg:x="63" fg:w="2"/><text x="5.3678%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="5.1178%" y="549" width="0.1625%" height="15" fill="rgb(223,27,42)" fg:x="63" fg:w="2"/><text x="5.3678%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1990%" y="533" width="0.0812%" height="15" fill="rgb(232,189,33)" fg:x="64" fg:w="1"/><text x="5.4490%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.2803%" y="485" width="0.1625%" height="15" fill="rgb(210,9,39)" fg:x="65" fg:w="2"/><text x="5.5303%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3615%" y="469" width="0.0812%" height="15" fill="rgb(242,85,26)" fg:x="66" fg:w="1"/><text x="5.6115%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3615%" y="453" width="0.0812%" height="15" fill="rgb(248,44,4)" fg:x="66" fg:w="1"/><text x="5.6115%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3615%" y="437" width="0.0812%" height="15" fill="rgb(250,96,46)" fg:x="66" fg:w="1"/><text x="5.6115%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.3615%" y="421" width="0.0812%" height="15" fill="rgb(229,116,26)" fg:x="66" fg:w="1"/><text x="5.6115%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.3615%" y="405" width="0.0812%" height="15" fill="rgb(246,94,34)" fg:x="66" fg:w="1"/><text x="5.6115%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.3615%" y="389" width="0.0812%" height="15" fill="rgb(251,73,21)" fg:x="66" fg:w="1"/><text x="5.6115%" y="399.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="5.2803%" y="501" width="0.2437%" height="15" fill="rgb(254,121,25)" fg:x="65" fg:w="3"/><text x="5.5303%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.4427%" y="485" width="0.0812%" height="15" fill="rgb(215,161,49)" fg:x="67" fg:w="1"/><text x="5.6927%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.6052%" y="485" width="0.1625%" height="15" fill="rgb(221,43,13)" fg:x="69" fg:w="2"/><text x="5.8552%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.6052%" y="469" width="0.1625%" height="15" fill="rgb(249,5,37)" fg:x="69" fg:w="2"/><text x="5.8552%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6864%" y="453" width="0.0812%" height="15" fill="rgb(226,25,44)" fg:x="70" fg:w="1"/><text x="5.9364%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6864%" y="437" width="0.0812%" height="15" fill="rgb(238,189,16)" fg:x="70" fg:w="1"/><text x="5.9364%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.7677%" y="453" width="0.0812%" height="15" fill="rgb(251,186,8)" fg:x="71" fg:w="1"/><text x="6.0177%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.8489%" y="453" width="0.1625%" height="15" fill="rgb(254,34,31)" fg:x="72" fg:w="2"/><text x="6.0989%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.8489%" y="437" width="0.1625%" height="15" fill="rgb(225,215,27)" fg:x="72" fg:w="2"/><text x="6.0989%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.9301%" y="421" width="0.0812%" height="15" fill="rgb(221,192,48)" fg:x="73" fg:w="1"/><text x="6.1801%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.9301%" y="405" width="0.0812%" height="15" fill="rgb(219,137,20)" fg:x="73" fg:w="1"/><text x="6.1801%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0114%" y="453" width="0.0812%" height="15" fill="rgb(219,84,11)" fg:x="74" fg:w="1"/><text x="6.2614%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.0114%" y="437" width="0.0812%" height="15" fill="rgb(224,10,23)" fg:x="74" fg:w="1"/><text x="6.2614%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="5.7677%" y="469" width="0.4874%" height="15" fill="rgb(248,22,39)" fg:x="71" fg:w="6"/><text x="6.0177%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.0926%" y="453" width="0.1625%" height="15" fill="rgb(212,154,20)" fg:x="75" fg:w="2"/><text x="6.3426%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.1738%" y="437" width="0.0812%" height="15" fill="rgb(236,199,50)" fg:x="76" fg:w="1"/><text x="6.4238%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.14%)</title><rect x="5.2803%" y="517" width="1.1373%" height="15" fill="rgb(211,9,17)" fg:x="65" fg:w="14"/><text x="5.5303%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="5.5240%" y="501" width="0.8936%" height="15" fill="rgb(243,216,36)" fg:x="68" fg:w="11"/><text x="5.7740%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="5.7677%" y="485" width="0.6499%" height="15" fill="rgb(250,2,10)" fg:x="71" fg:w="8"/><text x="6.0177%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.2551%" y="469" width="0.1625%" height="15" fill="rgb(226,50,48)" fg:x="77" fg:w="2"/><text x="6.5051%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.2551%" y="453" width="0.1625%" height="15" fill="rgb(243,81,16)" fg:x="77" fg:w="2"/><text x="6.5051%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.2551%" y="437" width="0.1625%" height="15" fill="rgb(250,14,2)" fg:x="77" fg:w="2"/><text x="6.5051%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.5800%" y="469" width="0.0812%" height="15" fill="rgb(233,135,29)" fg:x="81" fg:w="1"/><text x="6.8300%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.6613%" y="469" width="0.0812%" height="15" fill="rgb(224,64,43)" fg:x="82" fg:w="1"/><text x="6.9113%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7425%" y="453" width="0.0812%" height="15" fill="rgb(238,84,13)" fg:x="83" fg:w="1"/><text x="6.9925%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8237%" y="437" width="0.0812%" height="15" fill="rgb(253,48,26)" fg:x="84" fg:w="1"/><text x="7.0737%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="6.4175%" y="517" width="0.5686%" height="15" fill="rgb(205,223,31)" fg:x="79" fg:w="7"/><text x="6.6675%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="6.4175%" y="501" width="0.5686%" height="15" fill="rgb(221,41,32)" fg:x="79" fg:w="7"/><text x="6.6675%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="6.4988%" y="485" width="0.4874%" height="15" fill="rgb(213,158,31)" fg:x="80" fg:w="6"/><text x="6.7488%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.7425%" y="469" width="0.2437%" height="15" fill="rgb(245,126,43)" fg:x="83" fg:w="3"/><text x="6.9925%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.8237%" y="453" width="0.1625%" height="15" fill="rgb(227,7,22)" fg:x="84" fg:w="2"/><text x="7.0737%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9050%" y="437" width="0.0812%" height="15" fill="rgb(252,90,44)" fg:x="85" fg:w="1"/><text x="7.1550%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9050%" y="421" width="0.0812%" height="15" fill="rgb(253,91,0)" fg:x="85" fg:w="1"/><text x="7.1550%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0674%" y="469" width="0.0812%" height="15" fill="rgb(252,175,49)" fg:x="87" fg:w="1"/><text x="7.3174%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1487%" y="469" width="0.0812%" height="15" fill="rgb(246,150,1)" fg:x="88" fg:w="1"/><text x="7.3987%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1487%" y="453" width="0.0812%" height="15" fill="rgb(241,192,25)" fg:x="88" fg:w="1"/><text x="7.3987%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.2299%" y="469" width="0.0812%" height="15" fill="rgb(239,187,11)" fg:x="89" fg:w="1"/><text x="7.4799%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.2299%" y="453" width="0.0812%" height="15" fill="rgb(218,202,51)" fg:x="89" fg:w="1"/><text x="7.4799%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2299%" y="437" width="0.0812%" height="15" fill="rgb(225,176,8)" fg:x="89" fg:w="1"/><text x="7.4799%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="7.3924%" y="453" width="0.0812%" height="15" fill="rgb(219,122,41)" fg:x="91" fg:w="1"/><text x="7.6424%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="7.5548%" y="421" width="0.2437%" height="15" fill="rgb(248,140,20)" fg:x="93" fg:w="3"/><text x="7.8048%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="7.5548%" y="405" width="0.2437%" height="15" fill="rgb(245,41,37)" fg:x="93" fg:w="3"/><text x="7.8048%" y="415.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="7.5548%" y="389" width="0.2437%" height="15" fill="rgb(235,82,39)" fg:x="93" fg:w="3"/><text x="7.8048%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.7985%" y="389" width="0.0812%" height="15" fill="rgb(230,108,42)" fg:x="96" fg:w="1"/><text x="8.0485%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7985%" y="373" width="0.0812%" height="15" fill="rgb(215,150,50)" fg:x="96" fg:w="1"/><text x="8.0485%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.7985%" y="357" width="0.0812%" height="15" fill="rgb(233,212,5)" fg:x="96" fg:w="1"/><text x="8.0485%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7985%" y="341" width="0.0812%" height="15" fill="rgb(245,80,22)" fg:x="96" fg:w="1"/><text x="8.0485%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.7985%" y="325" width="0.0812%" height="15" fill="rgb(238,129,16)" fg:x="96" fg:w="1"/><text x="8.0485%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7985%" y="309" width="0.0812%" height="15" fill="rgb(240,19,0)" fg:x="96" fg:w="1"/><text x="8.0485%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7985%" y="293" width="0.0812%" height="15" fill="rgb(232,42,35)" fg:x="96" fg:w="1"/><text x="8.0485%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7985%" y="277" width="0.0812%" height="15" fill="rgb(223,130,24)" fg:x="96" fg:w="1"/><text x="8.0485%" y="287.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.7985%" y="421" width="0.1625%" height="15" fill="rgb(237,16,22)" fg:x="96" fg:w="2"/><text x="8.0485%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.7985%" y="405" width="0.1625%" height="15" fill="rgb(248,192,20)" fg:x="96" fg:w="2"/><text x="8.0485%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8798%" y="389" width="0.0812%" height="15" fill="rgb(233,167,2)" fg:x="97" fg:w="1"/><text x="8.1298%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.0422%" y="405" width="0.0812%" height="15" fill="rgb(252,71,44)" fg:x="99" fg:w="1"/><text x="8.2922%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.1235%" y="389" width="0.1625%" height="15" fill="rgb(238,37,47)" fg:x="100" fg:w="2"/><text x="8.3735%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.1235%" y="373" width="0.1625%" height="15" fill="rgb(214,202,54)" fg:x="100" fg:w="2"/><text x="8.3735%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2047%" y="357" width="0.0812%" height="15" fill="rgb(254,165,40)" fg:x="101" fg:w="1"/><text x="8.4547%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="8.2859%" y="373" width="0.2437%" height="15" fill="rgb(246,173,38)" fg:x="102" fg:w="3"/><text x="8.5359%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.2859%" y="357" width="0.2437%" height="15" fill="rgb(215,3,27)" fg:x="102" fg:w="3"/><text x="8.5359%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.3672%" y="341" width="0.1625%" height="15" fill="rgb(239,169,51)" fg:x="103" fg:w="2"/><text x="8.6172%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (14 samples, 1.14%)</title><rect x="7.4736%" y="437" width="1.1373%" height="15" fill="rgb(212,5,25)" fg:x="92" fg:w="14"/><text x="7.7236%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="7.9610%" y="421" width="0.6499%" height="15" fill="rgb(243,45,17)" fg:x="98" fg:w="8"/><text x="8.2110%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="8.1235%" y="405" width="0.4874%" height="15" fill="rgb(242,97,9)" fg:x="100" fg:w="6"/><text x="8.3735%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="8.2859%" y="389" width="0.3249%" height="15" fill="rgb(228,71,31)" fg:x="102" fg:w="4"/><text x="8.5359%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5297%" y="373" width="0.0812%" height="15" fill="rgb(252,184,16)" fg:x="105" fg:w="1"/><text x="8.7797%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (15 samples, 1.22%)</title><rect x="7.4736%" y="453" width="1.2185%" height="15" fill="rgb(236,169,46)" fg:x="92" fg:w="15"/><text x="7.7236%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.6109%" y="437" width="0.0812%" height="15" fill="rgb(207,17,47)" fg:x="106" fg:w="1"/><text x="8.8609%" y="447.50"></text></g><g><title>engine::session::Session::flush (50 samples, 4.06%)</title><rect x="4.7116%" y="613" width="4.0617%" height="15" fill="rgb(206,201,28)" fg:x="58" fg:w="50"/><text x="4.9616%" y="623.50">engi..</text></g><g><title>engine::session::state::State::close (46 samples, 3.74%)</title><rect x="5.0366%" y="597" width="3.7368%" height="15" fill="rgb(224,184,23)" fg:x="62" fg:w="46"/><text x="5.2866%" y="607.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (46 samples, 3.74%)</title><rect x="5.0366%" y="581" width="3.7368%" height="15" fill="rgb(208,139,48)" fg:x="62" fg:w="46"/><text x="5.2866%" y="591.50">engi..</text></g><g><title>core::iter::adapters::try_process (43 samples, 3.49%)</title><rect x="5.2803%" y="565" width="3.4931%" height="15" fill="rgb(208,130,10)" fg:x="65" fg:w="43"/><text x="5.5303%" y="575.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 3.49%)</title><rect x="5.2803%" y="549" width="3.4931%" height="15" fill="rgb(211,213,45)" fg:x="65" fg:w="43"/><text x="5.5303%" y="559.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (43 samples, 3.49%)</title><rect x="5.2803%" y="533" width="3.4931%" height="15" fill="rgb(235,100,30)" fg:x="65" fg:w="43"/><text x="5.5303%" y="543.50">eng..</text></g><g><title>kernel::model::any_entity_changes (22 samples, 1.79%)</title><rect x="6.9862%" y="517" width="1.7872%" height="15" fill="rgb(206,144,31)" fg:x="86" fg:w="22"/><text x="7.2362%" y="527.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (22 samples, 1.79%)</title><rect x="6.9862%" y="501" width="1.7872%" height="15" fill="rgb(224,200,26)" fg:x="86" fg:w="22"/><text x="7.2362%" y="511.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (22 samples, 1.79%)</title><rect x="6.9862%" y="485" width="1.7872%" height="15" fill="rgb(247,104,53)" fg:x="86" fg:w="22"/><text x="7.2362%" y="495.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (18 samples, 1.46%)</title><rect x="7.3111%" y="469" width="1.4622%" height="15" fill="rgb(220,14,17)" fg:x="90" fg:w="18"/><text x="7.5611%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6921%" y="453" width="0.0812%" height="15" fill="rgb(230,140,40)" fg:x="107" fg:w="1"/><text x="8.9421%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6921%" y="437" width="0.0812%" height="15" fill="rgb(229,2,41)" fg:x="107" fg:w="1"/><text x="8.9421%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.6921%" y="421" width="0.0812%" height="15" fill="rgb(232,89,16)" fg:x="107" fg:w="1"/><text x="8.9421%" y="431.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="8.7734%" y="581" width="0.0812%" height="15" fill="rgb(247,59,52)" fg:x="108" fg:w="1"/><text x="9.0234%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7734%" y="565" width="0.0812%" height="15" fill="rgb(226,110,21)" fg:x="108" fg:w="1"/><text x="9.0234%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7734%" y="549" width="0.0812%" height="15" fill="rgb(224,176,43)" fg:x="108" fg:w="1"/><text x="9.0234%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.7734%" y="533" width="0.0812%" height="15" fill="rgb(221,73,6)" fg:x="108" fg:w="1"/><text x="9.0234%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="8.7734%" y="613" width="0.1625%" height="15" fill="rgb(232,78,19)" fg:x="108" fg:w="2"/><text x="9.0234%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="8.7734%" y="597" width="0.1625%" height="15" fill="rgb(233,112,48)" fg:x="108" fg:w="2"/><text x="9.0234%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.8546%" y="581" width="0.0812%" height="15" fill="rgb(243,131,47)" fg:x="109" fg:w="1"/><text x="9.1046%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.8546%" y="565" width="0.0812%" height="15" fill="rgb(226,51,1)" fg:x="109" fg:w="1"/><text x="9.1046%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.8546%" y="549" width="0.0812%" height="15" fill="rgb(247,58,7)" fg:x="109" fg:w="1"/><text x="9.1046%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.8546%" y="533" width="0.0812%" height="15" fill="rgb(209,7,32)" fg:x="109" fg:w="1"/><text x="9.1046%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.8546%" y="517" width="0.0812%" height="15" fill="rgb(209,39,41)" fg:x="109" fg:w="1"/><text x="9.1046%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.9358%" y="581" width="0.0812%" height="15" fill="rgb(226,182,46)" fg:x="110" fg:w="1"/><text x="9.1858%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9358%" y="565" width="0.0812%" height="15" fill="rgb(230,219,10)" fg:x="110" fg:w="1"/><text x="9.1858%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9358%" y="549" width="0.0812%" height="15" fill="rgb(227,175,30)" fg:x="110" fg:w="1"/><text x="9.1858%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="9.0171%" y="581" width="0.0812%" height="15" fill="rgb(217,2,50)" fg:x="111" fg:w="1"/><text x="9.2671%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.0171%" y="565" width="0.0812%" height="15" fill="rgb(229,160,0)" fg:x="111" fg:w="1"/><text x="9.2671%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0171%" y="549" width="0.0812%" height="15" fill="rgb(207,78,37)" fg:x="111" fg:w="1"/><text x="9.2671%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0171%" y="533" width="0.0812%" height="15" fill="rgb(225,57,0)" fg:x="111" fg:w="1"/><text x="9.2671%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0171%" y="517" width="0.0812%" height="15" fill="rgb(232,154,2)" fg:x="111" fg:w="1"/><text x="9.2671%" y="527.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="9.0983%" y="533" width="0.3249%" height="15" fill="rgb(241,212,25)" fg:x="112" fg:w="4"/><text x="9.3483%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="9.0983%" y="517" width="0.3249%" height="15" fill="rgb(226,69,20)" fg:x="112" fg:w="4"/><text x="9.3483%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="9.0983%" y="501" width="0.3249%" height="15" fill="rgb(247,184,54)" fg:x="112" fg:w="4"/><text x="9.3483%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="9.0983%" y="485" width="0.3249%" height="15" fill="rgb(210,145,0)" fg:x="112" fg:w="4"/><text x="9.3483%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="9.1795%" y="469" width="0.2437%" height="15" fill="rgb(253,82,12)" fg:x="113" fg:w="3"/><text x="9.4295%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="9.1795%" y="453" width="0.2437%" height="15" fill="rgb(245,42,11)" fg:x="113" fg:w="3"/><text x="9.4295%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (3 samples, 0.24%)</title><rect x="9.1795%" y="437" width="0.2437%" height="15" fill="rgb(219,147,32)" fg:x="113" fg:w="3"/><text x="9.4295%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="9.1795%" y="421" width="0.2437%" height="15" fill="rgb(246,12,7)" fg:x="113" fg:w="3"/><text x="9.4295%" y="431.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.41%)</title><rect x="9.0983%" y="565" width="0.4062%" height="15" fill="rgb(243,50,9)" fg:x="112" fg:w="5"/><text x="9.3483%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (5 samples, 0.41%)</title><rect x="9.0983%" y="549" width="0.4062%" height="15" fill="rgb(219,149,6)" fg:x="112" fg:w="5"/><text x="9.3483%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.4232%" y="533" width="0.0812%" height="15" fill="rgb(241,51,42)" fg:x="116" fg:w="1"/><text x="9.6732%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4232%" y="517" width="0.0812%" height="15" fill="rgb(226,128,27)" fg:x="116" fg:w="1"/><text x="9.6732%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4232%" y="501" width="0.0812%" height="15" fill="rgb(244,144,4)" fg:x="116" fg:w="1"/><text x="9.6732%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.4232%" y="485" width="0.0812%" height="15" fill="rgb(221,4,13)" fg:x="116" fg:w="1"/><text x="9.6732%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4232%" y="469" width="0.0812%" height="15" fill="rgb(208,170,28)" fg:x="116" fg:w="1"/><text x="9.6732%" y="479.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="9.5045%" y="565" width="0.0812%" height="15" fill="rgb(226,131,13)" fg:x="117" fg:w="1"/><text x="9.7545%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5045%" y="549" width="0.0812%" height="15" fill="rgb(215,72,41)" fg:x="117" fg:w="1"/><text x="9.7545%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5045%" y="533" width="0.0812%" height="15" fill="rgb(243,108,20)" fg:x="117" fg:w="1"/><text x="9.7545%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="9.5045%" y="517" width="0.0812%" height="15" fill="rgb(230,189,17)" fg:x="117" fg:w="1"/><text x="9.7545%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5857%" y="533" width="0.0812%" height="15" fill="rgb(220,50,17)" fg:x="118" fg:w="1"/><text x="9.8357%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5857%" y="517" width="0.0812%" height="15" fill="rgb(248,152,48)" fg:x="118" fg:w="1"/><text x="9.8357%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.5857%" y="501" width="0.0812%" height="15" fill="rgb(244,91,11)" fg:x="118" fg:w="1"/><text x="9.8357%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6669%" y="485" width="0.0812%" height="15" fill="rgb(220,157,5)" fg:x="119" fg:w="1"/><text x="9.9169%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6669%" y="469" width="0.0812%" height="15" fill="rgb(253,137,8)" fg:x="119" fg:w="1"/><text x="9.9169%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6669%" y="453" width="0.0812%" height="15" fill="rgb(217,137,51)" fg:x="119" fg:w="1"/><text x="9.9169%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="9.6669%" y="517" width="0.1625%" height="15" fill="rgb(218,209,53)" fg:x="119" fg:w="2"/><text x="9.9169%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="9.6669%" y="501" width="0.1625%" height="15" fill="rgb(249,137,25)" fg:x="119" fg:w="2"/><text x="9.9169%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7482%" y="485" width="0.0812%" height="15" fill="rgb(239,155,26)" fg:x="120" fg:w="1"/><text x="9.9982%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.7482%" y="469" width="0.0812%" height="15" fill="rgb(227,85,46)" fg:x="120" fg:w="1"/><text x="9.9982%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7482%" y="453" width="0.0812%" height="15" fill="rgb(251,107,43)" fg:x="120" fg:w="1"/><text x="9.9982%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.7482%" y="437" width="0.0812%" height="15" fill="rgb(234,170,33)" fg:x="120" fg:w="1"/><text x="9.9982%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7482%" y="421" width="0.0812%" height="15" fill="rgb(206,29,35)" fg:x="120" fg:w="1"/><text x="9.9982%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.97%)</title><rect x="8.9358%" y="597" width="0.9748%" height="15" fill="rgb(227,138,25)" fg:x="110" fg:w="12"/><text x="9.1858%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (10 samples, 0.81%)</title><rect x="9.0983%" y="581" width="0.8123%" height="15" fill="rgb(249,131,35)" fg:x="112" fg:w="10"/><text x="9.3483%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="9.5857%" y="565" width="0.3249%" height="15" fill="rgb(239,6,40)" fg:x="118" fg:w="4"/><text x="9.8357%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="9.5857%" y="549" width="0.3249%" height="15" fill="rgb(246,136,47)" fg:x="118" fg:w="4"/><text x="9.8357%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="9.6669%" y="533" width="0.2437%" height="15" fill="rgb(253,58,26)" fg:x="119" fg:w="3"/><text x="9.9169%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8294%" y="517" width="0.0812%" height="15" fill="rgb(237,141,10)" fg:x="121" fg:w="1"/><text x="10.0794%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9106%" y="565" width="0.0812%" height="15" fill="rgb(234,156,12)" fg:x="122" fg:w="1"/><text x="10.1606%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9106%" y="549" width="0.0812%" height="15" fill="rgb(243,224,36)" fg:x="122" fg:w="1"/><text x="10.1606%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9106%" y="533" width="0.0812%" height="15" fill="rgb(205,229,51)" fg:x="122" fg:w="1"/><text x="10.1606%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="9.9106%" y="581" width="0.1625%" height="15" fill="rgb(223,189,4)" fg:x="122" fg:w="2"/><text x="10.1606%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9919%" y="565" width="0.0812%" height="15" fill="rgb(249,167,54)" fg:x="123" fg:w="1"/><text x="10.2419%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="9.9106%" y="597" width="0.2437%" height="15" fill="rgb(218,34,28)" fg:x="122" fg:w="3"/><text x="10.1606%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0731%" y="581" width="0.0812%" height="15" fill="rgb(232,109,42)" fg:x="124" fg:w="1"/><text x="10.3231%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.0731%" y="565" width="0.0812%" height="15" fill="rgb(248,214,46)" fg:x="124" fg:w="1"/><text x="10.3231%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.0731%" y="549" width="0.0812%" height="15" fill="rgb(244,216,40)" fg:x="124" fg:w="1"/><text x="10.3231%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.0731%" y="533" width="0.0812%" height="15" fill="rgb(231,226,31)" fg:x="124" fg:w="1"/><text x="10.3231%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.0731%" y="517" width="0.0812%" height="15" fill="rgb(238,38,43)" fg:x="124" fg:w="1"/><text x="10.3231%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.0731%" y="501" width="0.0812%" height="15" fill="rgb(208,88,43)" fg:x="124" fg:w="1"/><text x="10.3231%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.0731%" y="485" width="0.0812%" height="15" fill="rgb(205,136,37)" fg:x="124" fg:w="1"/><text x="10.3231%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.0731%" y="469" width="0.0812%" height="15" fill="rgb(237,34,14)" fg:x="124" fg:w="1"/><text x="10.3231%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.0731%" y="453" width="0.0812%" height="15" fill="rgb(236,193,44)" fg:x="124" fg:w="1"/><text x="10.3231%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.0731%" y="437" width="0.0812%" height="15" fill="rgb(231,48,10)" fg:x="124" fg:w="1"/><text x="10.3231%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.0731%" y="421" width="0.0812%" height="15" fill="rgb(213,141,34)" fg:x="124" fg:w="1"/><text x="10.3231%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.0731%" y="405" width="0.0812%" height="15" fill="rgb(249,130,34)" fg:x="124" fg:w="1"/><text x="10.3231%" y="415.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.30%)</title><rect x="8.9358%" y="613" width="1.2998%" height="15" fill="rgb(219,42,41)" fg:x="110" fg:w="16"/><text x="9.1858%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.1543%" y="597" width="0.0812%" height="15" fill="rgb(224,100,54)" fg:x="125" fg:w="1"/><text x="10.4043%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.1543%" y="581" width="0.0812%" height="15" fill="rgb(229,200,27)" fg:x="125" fg:w="1"/><text x="10.4043%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.1543%" y="565" width="0.0812%" height="15" fill="rgb(217,118,10)" fg:x="125" fg:w="1"/><text x="10.4043%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.1543%" y="549" width="0.0812%" height="15" fill="rgb(206,22,3)" fg:x="125" fg:w="1"/><text x="10.4043%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1543%" y="533" width="0.0812%" height="15" fill="rgb(232,163,46)" fg:x="125" fg:w="1"/><text x="10.4043%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.1543%" y="517" width="0.0812%" height="15" fill="rgb(206,95,13)" fg:x="125" fg:w="1"/><text x="10.4043%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1543%" y="501" width="0.0812%" height="15" fill="rgb(253,154,18)" fg:x="125" fg:w="1"/><text x="10.4043%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.1543%" y="485" width="0.0812%" height="15" fill="rgb(219,32,23)" fg:x="125" fg:w="1"/><text x="10.4043%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1543%" y="469" width="0.0812%" height="15" fill="rgb(230,191,45)" fg:x="125" fg:w="1"/><text x="10.4043%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="10.2356%" y="613" width="0.0812%" height="15" fill="rgb(229,64,36)" fg:x="126" fg:w="1"/><text x="10.4856%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="10.2356%" y="597" width="0.0812%" height="15" fill="rgb(205,129,25)" fg:x="126" fg:w="1"/><text x="10.4856%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.2356%" y="581" width="0.0812%" height="15" fill="rgb(254,112,7)" fg:x="126" fg:w="1"/><text x="10.4856%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2356%" y="565" width="0.0812%" height="15" fill="rgb(226,53,48)" fg:x="126" fg:w="1"/><text x="10.4856%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2356%" y="549" width="0.0812%" height="15" fill="rgb(214,153,38)" fg:x="126" fg:w="1"/><text x="10.4856%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2356%" y="533" width="0.0812%" height="15" fill="rgb(243,101,7)" fg:x="126" fg:w="1"/><text x="10.4856%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.3168%" y="549" width="0.1625%" height="15" fill="rgb(240,140,22)" fg:x="127" fg:w="2"/><text x="10.5668%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.3168%" y="533" width="0.1625%" height="15" fill="rgb(235,114,2)" fg:x="127" fg:w="2"/><text x="10.5668%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.3168%" y="517" width="0.1625%" height="15" fill="rgb(242,59,12)" fg:x="127" fg:w="2"/><text x="10.5668%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="10.3168%" y="501" width="0.1625%" height="15" fill="rgb(252,134,9)" fg:x="127" fg:w="2"/><text x="10.5668%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.3168%" y="485" width="0.1625%" height="15" fill="rgb(236,4,44)" fg:x="127" fg:w="2"/><text x="10.5668%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.3981%" y="469" width="0.0812%" height="15" fill="rgb(254,172,41)" fg:x="128" fg:w="1"/><text x="10.6481%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.3981%" y="453" width="0.0812%" height="15" fill="rgb(244,63,20)" fg:x="128" fg:w="1"/><text x="10.6481%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.3981%" y="437" width="0.0812%" height="15" fill="rgb(250,73,31)" fg:x="128" fg:w="1"/><text x="10.6481%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="10.3168%" y="581" width="0.3249%" height="15" fill="rgb(241,38,36)" fg:x="127" fg:w="4"/><text x="10.5668%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="10.3168%" y="565" width="0.3249%" height="15" fill="rgb(245,211,2)" fg:x="127" fg:w="4"/><text x="10.5668%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="10.4793%" y="549" width="0.1625%" height="15" fill="rgb(206,120,28)" fg:x="129" fg:w="2"/><text x="10.7293%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.4793%" y="533" width="0.1625%" height="15" fill="rgb(211,59,34)" fg:x="129" fg:w="2"/><text x="10.7293%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.4793%" y="517" width="0.1625%" height="15" fill="rgb(233,168,5)" fg:x="129" fg:w="2"/><text x="10.7293%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="10.4793%" y="501" width="0.1625%" height="15" fill="rgb(234,33,13)" fg:x="129" fg:w="2"/><text x="10.7293%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.4793%" y="485" width="0.1625%" height="15" fill="rgb(231,150,26)" fg:x="129" fg:w="2"/><text x="10.7293%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5605%" y="469" width="0.0812%" height="15" fill="rgb(217,191,4)" fg:x="130" fg:w="1"/><text x="10.8105%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5605%" y="453" width="0.0812%" height="15" fill="rgb(246,198,38)" fg:x="130" fg:w="1"/><text x="10.8105%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5605%" y="437" width="0.0812%" height="15" fill="rgb(245,64,37)" fg:x="130" fg:w="1"/><text x="10.8105%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5605%" y="421" width="0.0812%" height="15" fill="rgb(250,30,36)" fg:x="130" fg:w="1"/><text x="10.8105%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.5605%" y="405" width="0.0812%" height="15" fill="rgb(217,86,53)" fg:x="130" fg:w="1"/><text x="10.8105%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6418%" y="533" width="0.0812%" height="15" fill="rgb(228,157,16)" fg:x="131" fg:w="1"/><text x="10.8918%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6418%" y="517" width="0.0812%" height="15" fill="rgb(217,59,31)" fg:x="131" fg:w="1"/><text x="10.8918%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6418%" y="501" width="0.0812%" height="15" fill="rgb(237,138,41)" fg:x="131" fg:w="1"/><text x="10.8918%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6418%" y="485" width="0.0812%" height="15" fill="rgb(227,91,49)" fg:x="131" fg:w="1"/><text x="10.8918%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.6418%" y="469" width="0.0812%" height="15" fill="rgb(247,21,44)" fg:x="131" fg:w="1"/><text x="10.8918%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.6418%" y="453" width="0.0812%" height="15" fill="rgb(219,210,51)" fg:x="131" fg:w="1"/><text x="10.8918%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.6418%" y="437" width="0.0812%" height="15" fill="rgb(209,140,6)" fg:x="131" fg:w="1"/><text x="10.8918%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="10.6418%" y="421" width="0.0812%" height="15" fill="rgb(221,188,24)" fg:x="131" fg:w="1"/><text x="10.8918%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.6418%" y="405" width="0.0812%" height="15" fill="rgb(232,154,20)" fg:x="131" fg:w="1"/><text x="10.8918%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.6418%" y="565" width="0.1625%" height="15" fill="rgb(244,137,50)" fg:x="131" fg:w="2"/><text x="10.8918%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.6418%" y="549" width="0.1625%" height="15" fill="rgb(225,185,43)" fg:x="131" fg:w="2"/><text x="10.8918%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7230%" y="533" width="0.0812%" height="15" fill="rgb(213,205,38)" fg:x="132" fg:w="1"/><text x="10.9730%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.8042%" y="565" width="0.0812%" height="15" fill="rgb(236,73,12)" fg:x="133" fg:w="1"/><text x="11.0542%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="10.6418%" y="581" width="0.3249%" height="15" fill="rgb(235,219,13)" fg:x="131" fg:w="4"/><text x="10.8918%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="10.8855%" y="565" width="0.0812%" height="15" fill="rgb(218,59,36)" fg:x="134" fg:w="1"/><text x="11.1355%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.8855%" y="549" width="0.0812%" height="15" fill="rgb(205,110,39)" fg:x="134" fg:w="1"/><text x="11.1355%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.8855%" y="533" width="0.0812%" height="15" fill="rgb(218,206,42)" fg:x="134" fg:w="1"/><text x="11.1355%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.8855%" y="517" width="0.0812%" height="15" fill="rgb(248,125,24)" fg:x="134" fg:w="1"/><text x="11.1355%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.8855%" y="501" width="0.0812%" height="15" fill="rgb(242,28,27)" fg:x="134" fg:w="1"/><text x="11.1355%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8855%" y="485" width="0.0812%" height="15" fill="rgb(216,228,15)" fg:x="134" fg:w="1"/><text x="11.1355%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8855%" y="469" width="0.0812%" height="15" fill="rgb(235,116,46)" fg:x="134" fg:w="1"/><text x="11.1355%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8855%" y="453" width="0.0812%" height="15" fill="rgb(224,18,32)" fg:x="134" fg:w="1"/><text x="11.1355%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8855%" y="437" width="0.0812%" height="15" fill="rgb(252,5,12)" fg:x="134" fg:w="1"/><text x="11.1355%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8855%" y="421" width="0.0812%" height="15" fill="rgb(251,36,5)" fg:x="134" fg:w="1"/><text x="11.1355%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8855%" y="405" width="0.0812%" height="15" fill="rgb(217,53,14)" fg:x="134" fg:w="1"/><text x="11.1355%" y="415.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (9 samples, 0.73%)</title><rect x="10.3168%" y="613" width="0.7311%" height="15" fill="rgb(215,86,45)" fg:x="127" fg:w="9"/><text x="10.5668%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.73%)</title><rect x="10.3168%" y="597" width="0.7311%" height="15" fill="rgb(242,169,11)" fg:x="127" fg:w="9"/><text x="10.5668%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="10.9667%" y="581" width="0.0812%" height="15" fill="rgb(211,213,45)" fg:x="135" fg:w="1"/><text x="11.2167%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.9667%" y="565" width="0.0812%" height="15" fill="rgb(205,88,11)" fg:x="135" fg:w="1"/><text x="11.2167%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="10.9667%" y="549" width="0.0812%" height="15" fill="rgb(252,69,26)" fg:x="135" fg:w="1"/><text x="11.2167%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="11.0479%" y="597" width="0.0812%" height="15" fill="rgb(246,123,37)" fg:x="136" fg:w="1"/><text x="11.2979%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.0479%" y="581" width="0.0812%" height="15" fill="rgb(212,205,5)" fg:x="136" fg:w="1"/><text x="11.2979%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.0479%" y="565" width="0.0812%" height="15" fill="rgb(253,148,0)" fg:x="136" fg:w="1"/><text x="11.2979%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="11.0479%" y="549" width="0.0812%" height="15" fill="rgb(239,22,4)" fg:x="136" fg:w="1"/><text x="11.2979%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="11.0479%" y="533" width="0.0812%" height="15" fill="rgb(226,26,53)" fg:x="136" fg:w="1"/><text x="11.2979%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.0479%" y="517" width="0.0812%" height="15" fill="rgb(225,229,45)" fg:x="136" fg:w="1"/><text x="11.2979%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.0479%" y="501" width="0.0812%" height="15" fill="rgb(220,60,37)" fg:x="136" fg:w="1"/><text x="11.2979%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.0479%" y="485" width="0.0812%" height="15" fill="rgb(217,180,35)" fg:x="136" fg:w="1"/><text x="11.2979%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0479%" y="469" width="0.0812%" height="15" fill="rgb(229,7,53)" fg:x="136" fg:w="1"/><text x="11.2979%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0479%" y="453" width="0.0812%" height="15" fill="rgb(254,137,3)" fg:x="136" fg:w="1"/><text x="11.2979%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0479%" y="437" width="0.0812%" height="15" fill="rgb(215,140,41)" fg:x="136" fg:w="1"/><text x="11.2979%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0479%" y="421" width="0.0812%" height="15" fill="rgb(250,80,15)" fg:x="136" fg:w="1"/><text x="11.2979%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0479%" y="405" width="0.0812%" height="15" fill="rgb(252,191,6)" fg:x="136" fg:w="1"/><text x="11.2979%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.0479%" y="389" width="0.0812%" height="15" fill="rgb(246,217,18)" fg:x="136" fg:w="1"/><text x="11.2979%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.0479%" y="373" width="0.0812%" height="15" fill="rgb(223,93,7)" fg:x="136" fg:w="1"/><text x="11.2979%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.0479%" y="357" width="0.0812%" height="15" fill="rgb(225,55,52)" fg:x="136" fg:w="1"/><text x="11.2979%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.0479%" y="341" width="0.0812%" height="15" fill="rgb(240,31,24)" fg:x="136" fg:w="1"/><text x="11.2979%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.0479%" y="325" width="0.0812%" height="15" fill="rgb(205,56,52)" fg:x="136" fg:w="1"/><text x="11.2979%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.0479%" y="309" width="0.0812%" height="15" fill="rgb(246,146,12)" fg:x="136" fg:w="1"/><text x="11.2979%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.0479%" y="293" width="0.0812%" height="15" fill="rgb(239,84,36)" fg:x="136" fg:w="1"/><text x="11.2979%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.0479%" y="277" width="0.0812%" height="15" fill="rgb(207,41,40)" fg:x="136" fg:w="1"/><text x="11.2979%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.0479%" y="261" width="0.0812%" height="15" fill="rgb(241,179,25)" fg:x="136" fg:w="1"/><text x="11.2979%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0479%" y="245" width="0.0812%" height="15" fill="rgb(210,0,34)" fg:x="136" fg:w="1"/><text x="11.2979%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.1292%" y="565" width="0.0812%" height="15" fill="rgb(225,217,29)" fg:x="137" fg:w="1"/><text x="11.3792%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="11.1292%" y="581" width="0.2437%" height="15" fill="rgb(216,191,38)" fg:x="137" fg:w="3"/><text x="11.3792%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.2104%" y="565" width="0.1625%" height="15" fill="rgb(232,140,52)" fg:x="138" fg:w="2"/><text x="11.4604%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.2104%" y="549" width="0.1625%" height="15" fill="rgb(223,158,51)" fg:x="138" fg:w="2"/><text x="11.4604%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="11.2104%" y="533" width="0.1625%" height="15" fill="rgb(235,29,51)" fg:x="138" fg:w="2"/><text x="11.4604%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2916%" y="517" width="0.0812%" height="15" fill="rgb(215,181,18)" fg:x="139" fg:w="1"/><text x="11.5416%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3729%" y="485" width="0.0812%" height="15" fill="rgb(227,125,34)" fg:x="140" fg:w="1"/><text x="11.6229%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3729%" y="469" width="0.0812%" height="15" fill="rgb(230,197,49)" fg:x="140" fg:w="1"/><text x="11.6229%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.3729%" y="453" width="0.0812%" height="15" fill="rgb(239,141,16)" fg:x="140" fg:w="1"/><text x="11.6229%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.3729%" y="437" width="0.0812%" height="15" fill="rgb(225,105,43)" fg:x="140" fg:w="1"/><text x="11.6229%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.3729%" y="421" width="0.0812%" height="15" fill="rgb(214,131,14)" fg:x="140" fg:w="1"/><text x="11.6229%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.3729%" y="405" width="0.0812%" height="15" fill="rgb(229,177,11)" fg:x="140" fg:w="1"/><text x="11.6229%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.3729%" y="389" width="0.0812%" height="15" fill="rgb(231,180,14)" fg:x="140" fg:w="1"/><text x="11.6229%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="11.3729%" y="533" width="0.1625%" height="15" fill="rgb(232,88,2)" fg:x="140" fg:w="2"/><text x="11.6229%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="11.3729%" y="517" width="0.1625%" height="15" fill="rgb(205,220,8)" fg:x="140" fg:w="2"/><text x="11.6229%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="11.3729%" y="501" width="0.1625%" height="15" fill="rgb(225,23,53)" fg:x="140" fg:w="2"/><text x="11.6229%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="11.4541%" y="485" width="0.0812%" height="15" fill="rgb(213,62,29)" fg:x="141" fg:w="1"/><text x="11.7041%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.4541%" y="469" width="0.0812%" height="15" fill="rgb(227,75,7)" fg:x="141" fg:w="1"/><text x="11.7041%" y="479.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="11.4541%" y="453" width="0.0812%" height="15" fill="rgb(207,105,14)" fg:x="141" fg:w="1"/><text x="11.7041%" y="463.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.4541%" y="437" width="0.0812%" height="15" fill="rgb(245,62,29)" fg:x="141" fg:w="1"/><text x="11.7041%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.5353%" y="453" width="0.1625%" height="15" fill="rgb(236,202,4)" fg:x="142" fg:w="2"/><text x="11.7853%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="11.5353%" y="469" width="0.2437%" height="15" fill="rgb(250,67,1)" fg:x="142" fg:w="3"/><text x="11.7853%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6978%" y="453" width="0.0812%" height="15" fill="rgb(253,115,44)" fg:x="144" fg:w="1"/><text x="11.9478%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.7790%" y="453" width="0.0812%" height="15" fill="rgb(251,139,18)" fg:x="145" fg:w="1"/><text x="12.0290%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="11.8603%" y="453" width="0.2437%" height="15" fill="rgb(218,22,32)" fg:x="146" fg:w="3"/><text x="12.1103%" y="463.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="11.8603%" y="437" width="0.2437%" height="15" fill="rgb(243,53,5)" fg:x="146" fg:w="3"/><text x="12.1103%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="11.8603%" y="421" width="0.2437%" height="15" fill="rgb(227,56,16)" fg:x="146" fg:w="3"/><text x="12.1103%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.9415%" y="405" width="0.1625%" height="15" fill="rgb(245,53,0)" fg:x="147" fg:w="2"/><text x="12.1915%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.9415%" y="389" width="0.1625%" height="15" fill="rgb(216,170,35)" fg:x="147" fg:w="2"/><text x="12.1915%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.9415%" y="373" width="0.1625%" height="15" fill="rgb(211,200,8)" fg:x="147" fg:w="2"/><text x="12.1915%" y="383.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.9415%" y="357" width="0.1625%" height="15" fill="rgb(228,204,44)" fg:x="147" fg:w="2"/><text x="12.1915%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.1852%" y="405" width="0.1625%" height="15" fill="rgb(214,121,17)" fg:x="150" fg:w="2"/><text x="12.4352%" y="415.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.1852%" y="389" width="0.1625%" height="15" fill="rgb(233,64,38)" fg:x="150" fg:w="2"/><text x="12.4352%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.2665%" y="373" width="0.0812%" height="15" fill="rgb(253,54,19)" fg:x="151" fg:w="1"/><text x="12.5165%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.2665%" y="357" width="0.0812%" height="15" fill="rgb(253,94,18)" fg:x="151" fg:w="1"/><text x="12.5165%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="12.1852%" y="437" width="0.2437%" height="15" fill="rgb(227,57,52)" fg:x="150" fg:w="3"/><text x="12.4352%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="12.1852%" y="421" width="0.2437%" height="15" fill="rgb(230,228,50)" fg:x="150" fg:w="3"/><text x="12.4352%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3477%" y="405" width="0.0812%" height="15" fill="rgb(217,205,27)" fg:x="152" fg:w="1"/><text x="12.5977%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.3477%" y="389" width="0.0812%" height="15" fill="rgb(252,71,50)" fg:x="152" fg:w="1"/><text x="12.5977%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="12.4289%" y="437" width="0.2437%" height="15" fill="rgb(209,86,4)" fg:x="153" fg:w="3"/><text x="12.6789%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.5102%" y="421" width="0.1625%" height="15" fill="rgb(229,94,0)" fg:x="154" fg:w="2"/><text x="12.7602%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.5914%" y="405" width="0.0812%" height="15" fill="rgb(252,223,21)" fg:x="155" fg:w="1"/><text x="12.8414%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.5914%" y="389" width="0.0812%" height="15" fill="rgb(230,210,4)" fg:x="155" fg:w="1"/><text x="12.8414%" y="399.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="12.6726%" y="421" width="0.0812%" height="15" fill="rgb(240,149,38)" fg:x="156" fg:w="1"/><text x="12.9226%" y="431.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="12.6726%" y="405" width="0.0812%" height="15" fill="rgb(254,105,20)" fg:x="156" fg:w="1"/><text x="12.9226%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="12.7539%" y="421" width="0.3249%" height="15" fill="rgb(253,87,46)" fg:x="157" fg:w="4"/><text x="13.0039%" y="431.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="12.7539%" y="405" width="0.3249%" height="15" fill="rgb(253,116,33)" fg:x="157" fg:w="4"/><text x="13.0039%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="12.8351%" y="389" width="0.2437%" height="15" fill="rgb(229,198,5)" fg:x="158" fg:w="3"/><text x="13.0851%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.9976%" y="373" width="0.0812%" height="15" fill="rgb(242,38,37)" fg:x="160" fg:w="1"/><text x="13.2476%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="13.1600%" y="405" width="0.2437%" height="15" fill="rgb(242,69,53)" fg:x="162" fg:w="3"/><text x="13.4100%" y="415.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.2413%" y="389" width="0.1625%" height="15" fill="rgb(249,80,16)" fg:x="163" fg:w="2"/><text x="13.4913%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.3225%" y="373" width="0.0812%" height="15" fill="rgb(206,128,11)" fg:x="164" fg:w="1"/><text x="13.5725%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.3225%" y="357" width="0.0812%" height="15" fill="rgb(212,35,20)" fg:x="164" fg:w="1"/><text x="13.5725%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4037%" y="405" width="0.0812%" height="15" fill="rgb(236,79,13)" fg:x="165" fg:w="1"/><text x="13.6537%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.4037%" y="389" width="0.0812%" height="15" fill="rgb(233,123,3)" fg:x="165" fg:w="1"/><text x="13.6537%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="12.6726%" y="437" width="0.9748%" height="15" fill="rgb(214,93,52)" fg:x="156" fg:w="12"/><text x="12.9226%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="13.0788%" y="421" width="0.5686%" height="15" fill="rgb(251,37,40)" fg:x="161" fg:w="7"/><text x="13.3288%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.4850%" y="405" width="0.1625%" height="15" fill="rgb(227,80,54)" fg:x="166" fg:w="2"/><text x="13.7350%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.5662%" y="389" width="0.0812%" height="15" fill="rgb(254,48,11)" fg:x="167" fg:w="1"/><text x="13.8162%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.71%)</title><rect x="12.1040%" y="453" width="1.7059%" height="15" fill="rgb(235,193,26)" fg:x="149" fg:w="21"/><text x="12.3540%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.6474%" y="437" width="0.1625%" height="15" fill="rgb(229,99,21)" fg:x="168" fg:w="2"/><text x="13.8974%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.7287%" y="421" width="0.0812%" height="15" fill="rgb(211,140,41)" fg:x="169" fg:w="1"/><text x="13.9787%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.7287%" y="405" width="0.0812%" height="15" fill="rgb(240,227,30)" fg:x="169" fg:w="1"/><text x="13.9787%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (27 samples, 2.19%)</title><rect x="11.7790%" y="469" width="2.1933%" height="15" fill="rgb(215,224,45)" fg:x="145" fg:w="27"/><text x="12.0290%" y="479.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.8099%" y="453" width="0.1625%" height="15" fill="rgb(206,123,31)" fg:x="170" fg:w="2"/><text x="14.0599%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.8099%" y="437" width="0.1625%" height="15" fill="rgb(210,138,16)" fg:x="170" fg:w="2"/><text x="14.0599%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.8099%" y="421" width="0.1625%" height="15" fill="rgb(228,57,28)" fg:x="170" fg:w="2"/><text x="14.0599%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.8911%" y="405" width="0.0812%" height="15" fill="rgb(242,170,10)" fg:x="171" fg:w="1"/><text x="14.1411%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.8911%" y="389" width="0.0812%" height="15" fill="rgb(228,214,39)" fg:x="171" fg:w="1"/><text x="14.1411%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.8911%" y="373" width="0.0812%" height="15" fill="rgb(218,179,33)" fg:x="171" fg:w="1"/><text x="14.1411%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (31 samples, 2.52%)</title><rect x="11.5353%" y="485" width="2.5183%" height="15" fill="rgb(235,193,39)" fg:x="142" fg:w="31"/><text x="11.7853%" y="495.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.9724%" y="469" width="0.0812%" height="15" fill="rgb(219,221,36)" fg:x="172" fg:w="1"/><text x="14.2224%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.9724%" y="453" width="0.0812%" height="15" fill="rgb(248,218,19)" fg:x="172" fg:w="1"/><text x="14.2224%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.9724%" y="437" width="0.0812%" height="15" fill="rgb(205,50,9)" fg:x="172" fg:w="1"/><text x="14.2224%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1348%" y="453" width="0.0812%" height="15" fill="rgb(238,81,28)" fg:x="174" fg:w="1"/><text x="14.3848%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2973%" y="437" width="0.0812%" height="15" fill="rgb(235,110,19)" fg:x="176" fg:w="1"/><text x="14.5473%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="14.0536%" y="485" width="0.6499%" height="15" fill="rgb(214,7,14)" fg:x="173" fg:w="8"/><text x="14.3036%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.65%)</title><rect x="14.0536%" y="469" width="0.6499%" height="15" fill="rgb(211,77,3)" fg:x="173" fg:w="8"/><text x="14.3036%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="14.2161%" y="453" width="0.4874%" height="15" fill="rgb(229,5,9)" fg:x="175" fg:w="6"/><text x="14.4661%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="14.3786%" y="437" width="0.3249%" height="15" fill="rgb(225,90,11)" fg:x="177" fg:w="4"/><text x="14.6286%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="14.3786%" y="421" width="0.3249%" height="15" fill="rgb(242,56,8)" fg:x="177" fg:w="4"/><text x="14.6286%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="14.6223%" y="405" width="0.0812%" height="15" fill="rgb(249,212,39)" fg:x="180" fg:w="1"/><text x="14.8723%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.6223%" y="389" width="0.0812%" height="15" fill="rgb(236,90,9)" fg:x="180" fg:w="1"/><text x="14.8723%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.6223%" y="373" width="0.0812%" height="15" fill="rgb(206,88,35)" fg:x="180" fg:w="1"/><text x="14.8723%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.6223%" y="357" width="0.0812%" height="15" fill="rgb(205,126,30)" fg:x="180" fg:w="1"/><text x="14.8723%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8660%" y="437" width="0.0812%" height="15" fill="rgb(230,176,12)" fg:x="183" fg:w="1"/><text x="15.1160%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8660%" y="421" width="0.0812%" height="15" fill="rgb(243,19,9)" fg:x="183" fg:w="1"/><text x="15.1160%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="14.9472%" y="437" width="0.0812%" height="15" fill="rgb(245,171,17)" fg:x="184" fg:w="1"/><text x="15.1972%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.9472%" y="421" width="0.0812%" height="15" fill="rgb(227,52,21)" fg:x="184" fg:w="1"/><text x="15.1972%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="15.0284%" y="389" width="0.2437%" height="15" fill="rgb(238,69,14)" fg:x="185" fg:w="3"/><text x="15.2784%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.1097%" y="373" width="0.1625%" height="15" fill="rgb(241,156,39)" fg:x="186" fg:w="2"/><text x="15.3597%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.1097%" y="357" width="0.1625%" height="15" fill="rgb(212,227,28)" fg:x="186" fg:w="2"/><text x="15.3597%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.4346%" y="357" width="0.0812%" height="15" fill="rgb(209,118,27)" fg:x="190" fg:w="1"/><text x="15.6846%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.4346%" y="341" width="0.0812%" height="15" fill="rgb(226,102,5)" fg:x="190" fg:w="1"/><text x="15.6846%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.4346%" y="325" width="0.0812%" height="15" fill="rgb(223,34,3)" fg:x="190" fg:w="1"/><text x="15.6846%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.4346%" y="309" width="0.0812%" height="15" fill="rgb(221,81,38)" fg:x="190" fg:w="1"/><text x="15.6846%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4346%" y="293" width="0.0812%" height="15" fill="rgb(236,219,28)" fg:x="190" fg:w="1"/><text x="15.6846%" y="303.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="15.2721%" y="389" width="0.3249%" height="15" fill="rgb(213,200,14)" fg:x="188" fg:w="4"/><text x="15.5221%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="15.2721%" y="373" width="0.3249%" height="15" fill="rgb(240,33,19)" fg:x="188" fg:w="4"/><text x="15.5221%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5158%" y="357" width="0.0812%" height="15" fill="rgb(233,113,27)" fg:x="191" fg:w="1"/><text x="15.7658%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.89%)</title><rect x="15.0284%" y="405" width="0.8936%" height="15" fill="rgb(220,221,18)" fg:x="185" fg:w="11"/><text x="15.2784%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="15.5971%" y="389" width="0.3249%" height="15" fill="rgb(238,92,8)" fg:x="192" fg:w="4"/><text x="15.8471%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="15.6783%" y="373" width="0.2437%" height="15" fill="rgb(222,164,16)" fg:x="193" fg:w="3"/><text x="15.9283%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="15.6783%" y="357" width="0.2437%" height="15" fill="rgb(241,119,3)" fg:x="193" fg:w="3"/><text x="15.9283%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="15.6783%" y="341" width="0.2437%" height="15" fill="rgb(241,44,8)" fg:x="193" fg:w="3"/><text x="15.9283%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="15.6783%" y="325" width="0.2437%" height="15" fill="rgb(230,36,40)" fg:x="193" fg:w="3"/><text x="15.9283%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.7595%" y="309" width="0.1625%" height="15" fill="rgb(243,16,36)" fg:x="194" fg:w="2"/><text x="16.0095%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8408%" y="293" width="0.0812%" height="15" fill="rgb(231,4,26)" fg:x="195" fg:w="1"/><text x="16.0908%" y="303.50"></text></g><g><title>engine::session::Session::flush (61 samples, 4.96%)</title><rect x="11.1292%" y="597" width="4.9553%" height="15" fill="rgb(240,9,31)" fg:x="137" fg:w="61"/><text x="11.3792%" y="607.50">engine..</text></g><g><title>engine::session::Session::save_changes (58 samples, 4.71%)</title><rect x="11.3729%" y="581" width="4.7116%" height="15" fill="rgb(207,173,15)" fg:x="140" fg:w="58"/><text x="11.6229%" y="591.50">engin..</text></g><g><title>engine::session::state::State::close (58 samples, 4.71%)</title><rect x="11.3729%" y="565" width="4.7116%" height="15" fill="rgb(224,192,53)" fg:x="140" fg:w="58"/><text x="11.6229%" y="575.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (58 samples, 4.71%)</title><rect x="11.3729%" y="549" width="4.7116%" height="15" fill="rgb(223,67,28)" fg:x="140" fg:w="58"/><text x="11.6229%" y="559.50">engin..</text></g><g><title>core::iter::adapters::try_process (56 samples, 4.55%)</title><rect x="11.5353%" y="533" width="4.5491%" height="15" fill="rgb(211,20,47)" fg:x="142" fg:w="56"/><text x="11.7853%" y="543.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (56 samples, 4.55%)</title><rect x="11.5353%" y="517" width="4.5491%" height="15" fill="rgb(240,228,2)" fg:x="142" fg:w="56"/><text x="11.7853%" y="527.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (56 samples, 4.55%)</title><rect x="11.5353%" y="501" width="4.5491%" height="15" fill="rgb(248,151,12)" fg:x="142" fg:w="56"/><text x="11.7853%" y="511.50">engin..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.38%)</title><rect x="14.7035%" y="485" width="1.3810%" height="15" fill="rgb(244,8,39)" fg:x="181" fg:w="17"/><text x="14.9535%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.38%)</title><rect x="14.7035%" y="469" width="1.3810%" height="15" fill="rgb(222,26,8)" fg:x="181" fg:w="17"/><text x="14.9535%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.38%)</title><rect x="14.7035%" y="453" width="1.3810%" height="15" fill="rgb(213,106,44)" fg:x="181" fg:w="17"/><text x="14.9535%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.06%)</title><rect x="15.0284%" y="437" width="1.0561%" height="15" fill="rgb(214,129,20)" fg:x="185" fg:w="13"/><text x="15.2784%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.06%)</title><rect x="15.0284%" y="421" width="1.0561%" height="15" fill="rgb(212,32,13)" fg:x="185" fg:w="13"/><text x="15.2784%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.9220%" y="405" width="0.1625%" height="15" fill="rgb(208,168,33)" fg:x="196" fg:w="2"/><text x="16.1720%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="16.0032%" y="389" width="0.0812%" height="15" fill="rgb(231,207,8)" fg:x="197" fg:w="1"/><text x="16.2532%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="16.0032%" y="373" width="0.0812%" height="15" fill="rgb(235,219,23)" fg:x="197" fg:w="1"/><text x="16.2532%" y="383.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="16.0845%" y="597" width="0.1625%" height="15" fill="rgb(226,216,26)" fg:x="198" fg:w="2"/><text x="16.3345%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="16.0845%" y="581" width="0.1625%" height="15" fill="rgb(239,137,16)" fg:x="198" fg:w="2"/><text x="16.3345%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.1657%" y="565" width="0.0812%" height="15" fill="rgb(207,12,36)" fg:x="199" fg:w="1"/><text x="16.4157%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.1657%" y="549" width="0.0812%" height="15" fill="rgb(210,214,24)" fg:x="199" fg:w="1"/><text x="16.4157%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.1657%" y="533" width="0.0812%" height="15" fill="rgb(206,56,30)" fg:x="199" fg:w="1"/><text x="16.4157%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.1657%" y="517" width="0.0812%" height="15" fill="rgb(228,143,26)" fg:x="199" fg:w="1"/><text x="16.4157%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.1657%" y="501" width="0.0812%" height="15" fill="rgb(216,218,46)" fg:x="199" fg:w="1"/><text x="16.4157%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.3282%" y="485" width="0.0812%" height="15" fill="rgb(206,6,19)" fg:x="201" fg:w="1"/><text x="16.5782%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3282%" y="469" width="0.0812%" height="15" fill="rgb(239,177,51)" fg:x="201" fg:w="1"/><text x="16.5782%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="16.2470%" y="565" width="0.2437%" height="15" fill="rgb(216,55,25)" fg:x="200" fg:w="3"/><text x="16.4970%" y="575.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="16.2470%" y="549" width="0.2437%" height="15" fill="rgb(231,163,29)" fg:x="200" fg:w="3"/><text x="16.4970%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="16.2470%" y="533" width="0.2437%" height="15" fill="rgb(232,149,50)" fg:x="200" fg:w="3"/><text x="16.4970%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.2470%" y="517" width="0.2437%" height="15" fill="rgb(223,142,48)" fg:x="200" fg:w="3"/><text x="16.4970%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.3282%" y="501" width="0.1625%" height="15" fill="rgb(245,83,23)" fg:x="201" fg:w="2"/><text x="16.5782%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.4094%" y="485" width="0.0812%" height="15" fill="rgb(224,63,2)" fg:x="202" fg:w="1"/><text x="16.6594%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.4094%" y="469" width="0.0812%" height="15" fill="rgb(218,65,53)" fg:x="202" fg:w="1"/><text x="16.6594%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.4094%" y="453" width="0.0812%" height="15" fill="rgb(221,84,29)" fg:x="202" fg:w="1"/><text x="16.6594%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.4094%" y="437" width="0.0812%" height="15" fill="rgb(234,0,32)" fg:x="202" fg:w="1"/><text x="16.6594%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.4094%" y="421" width="0.0812%" height="15" fill="rgb(206,20,16)" fg:x="202" fg:w="1"/><text x="16.6594%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.4094%" y="405" width="0.0812%" height="15" fill="rgb(244,172,18)" fg:x="202" fg:w="1"/><text x="16.6594%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.4094%" y="389" width="0.0812%" height="15" fill="rgb(254,133,1)" fg:x="202" fg:w="1"/><text x="16.6594%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.4094%" y="373" width="0.0812%" height="15" fill="rgb(222,206,41)" fg:x="202" fg:w="1"/><text x="16.6594%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.4094%" y="357" width="0.0812%" height="15" fill="rgb(212,3,42)" fg:x="202" fg:w="1"/><text x="16.6594%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.4094%" y="341" width="0.0812%" height="15" fill="rgb(241,11,4)" fg:x="202" fg:w="1"/><text x="16.6594%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.4094%" y="325" width="0.0812%" height="15" fill="rgb(205,19,26)" fg:x="202" fg:w="1"/><text x="16.6594%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4094%" y="309" width="0.0812%" height="15" fill="rgb(210,179,32)" fg:x="202" fg:w="1"/><text x="16.6594%" y="319.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="16.4907%" y="565" width="0.0812%" height="15" fill="rgb(227,116,49)" fg:x="203" fg:w="1"/><text x="16.7407%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.4907%" y="549" width="0.0812%" height="15" fill="rgb(211,146,6)" fg:x="203" fg:w="1"/><text x="16.7407%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="16.4907%" y="533" width="0.0812%" height="15" fill="rgb(219,44,39)" fg:x="203" fg:w="1"/><text x="16.7407%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="16.5719%" y="565" width="0.0812%" height="15" fill="rgb(234,128,11)" fg:x="204" fg:w="1"/><text x="16.8219%" y="575.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="16.5719%" y="549" width="0.0812%" height="15" fill="rgb(220,183,53)" fg:x="204" fg:w="1"/><text x="16.8219%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.6531%" y="549" width="0.0812%" height="15" fill="rgb(213,219,32)" fg:x="205" fg:w="1"/><text x="16.9031%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.6531%" y="533" width="0.0812%" height="15" fill="rgb(232,156,16)" fg:x="205" fg:w="1"/><text x="16.9031%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="16.6531%" y="517" width="0.0812%" height="15" fill="rgb(246,135,34)" fg:x="205" fg:w="1"/><text x="16.9031%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.6531%" y="501" width="0.0812%" height="15" fill="rgb(241,99,0)" fg:x="205" fg:w="1"/><text x="16.9031%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.6531%" y="485" width="0.0812%" height="15" fill="rgb(222,103,45)" fg:x="205" fg:w="1"/><text x="16.9031%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.6531%" y="469" width="0.0812%" height="15" fill="rgb(212,57,4)" fg:x="205" fg:w="1"/><text x="16.9031%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6531%" y="453" width="0.0812%" height="15" fill="rgb(215,68,47)" fg:x="205" fg:w="1"/><text x="16.9031%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6531%" y="437" width="0.0812%" height="15" fill="rgb(230,84,2)" fg:x="205" fg:w="1"/><text x="16.9031%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6531%" y="421" width="0.0812%" height="15" fill="rgb(220,102,14)" fg:x="205" fg:w="1"/><text x="16.9031%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7344%" y="517" width="0.0812%" height="15" fill="rgb(240,10,32)" fg:x="206" fg:w="1"/><text x="16.9844%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7344%" y="501" width="0.0812%" height="15" fill="rgb(215,47,27)" fg:x="206" fg:w="1"/><text x="16.9844%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8156%" y="517" width="0.0812%" height="15" fill="rgb(233,188,43)" fg:x="207" fg:w="1"/><text x="17.0656%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.8156%" y="501" width="0.0812%" height="15" fill="rgb(253,190,1)" fg:x="207" fg:w="1"/><text x="17.0656%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="16.8968%" y="501" width="0.0812%" height="15" fill="rgb(206,114,52)" fg:x="208" fg:w="1"/><text x="17.1468%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="16.8968%" y="485" width="0.0812%" height="15" fill="rgb(233,120,37)" fg:x="208" fg:w="1"/><text x="17.1468%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8968%" y="469" width="0.0812%" height="15" fill="rgb(214,52,39)" fg:x="208" fg:w="1"/><text x="17.1468%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="16.8968%" y="453" width="0.0812%" height="15" fill="rgb(223,80,29)" fg:x="208" fg:w="1"/><text x="17.1468%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8968%" y="437" width="0.0812%" height="15" fill="rgb(230,101,40)" fg:x="208" fg:w="1"/><text x="17.1468%" y="447.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="16.6531%" y="565" width="0.4062%" height="15" fill="rgb(219,211,8)" fg:x="205" fg:w="5"/><text x="16.9031%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="16.7344%" y="549" width="0.3249%" height="15" fill="rgb(252,126,28)" fg:x="206" fg:w="4"/><text x="16.9844%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="16.7344%" y="533" width="0.3249%" height="15" fill="rgb(215,56,38)" fg:x="206" fg:w="4"/><text x="16.9844%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="16.8968%" y="517" width="0.1625%" height="15" fill="rgb(249,55,44)" fg:x="208" fg:w="2"/><text x="17.1468%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9781%" y="501" width="0.0812%" height="15" fill="rgb(220,221,32)" fg:x="209" fg:w="1"/><text x="17.2281%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.89%)</title><rect x="16.2470%" y="581" width="0.8936%" height="15" fill="rgb(212,216,41)" fg:x="200" fg:w="11"/><text x="16.4970%" y="591.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="17.0593%" y="565" width="0.0812%" height="15" fill="rgb(228,213,43)" fg:x="210" fg:w="1"/><text x="17.3093%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="17.0593%" y="549" width="0.0812%" height="15" fill="rgb(211,31,26)" fg:x="210" fg:w="1"/><text x="17.3093%" y="559.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="17.0593%" y="533" width="0.0812%" height="15" fill="rgb(229,202,19)" fg:x="210" fg:w="1"/><text x="17.3093%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.0593%" y="517" width="0.0812%" height="15" fill="rgb(229,105,46)" fg:x="210" fg:w="1"/><text x="17.3093%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.0593%" y="501" width="0.0812%" height="15" fill="rgb(235,108,1)" fg:x="210" fg:w="1"/><text x="17.3093%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.1405%" y="517" width="0.0812%" height="15" fill="rgb(245,111,35)" fg:x="211" fg:w="1"/><text x="17.3905%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.1405%" y="501" width="0.0812%" height="15" fill="rgb(219,185,31)" fg:x="211" fg:w="1"/><text x="17.3905%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.1405%" y="485" width="0.0812%" height="15" fill="rgb(214,4,43)" fg:x="211" fg:w="1"/><text x="17.3905%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.1405%" y="469" width="0.0812%" height="15" fill="rgb(235,227,40)" fg:x="211" fg:w="1"/><text x="17.3905%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.1405%" y="453" width="0.0812%" height="15" fill="rgb(230,88,30)" fg:x="211" fg:w="1"/><text x="17.3905%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.1405%" y="437" width="0.0812%" height="15" fill="rgb(216,217,1)" fg:x="211" fg:w="1"/><text x="17.3905%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.1405%" y="421" width="0.0812%" height="15" fill="rgb(248,139,50)" fg:x="211" fg:w="1"/><text x="17.3905%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.1405%" y="405" width="0.0812%" height="15" fill="rgb(233,1,21)" fg:x="211" fg:w="1"/><text x="17.3905%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.1405%" y="389" width="0.0812%" height="15" fill="rgb(215,183,12)" fg:x="211" fg:w="1"/><text x="17.3905%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.1405%" y="373" width="0.0812%" height="15" fill="rgb(229,104,42)" fg:x="211" fg:w="1"/><text x="17.3905%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.1405%" y="357" width="0.0812%" height="15" fill="rgb(243,34,48)" fg:x="211" fg:w="1"/><text x="17.3905%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1405%" y="341" width="0.0812%" height="15" fill="rgb(239,11,44)" fg:x="211" fg:w="1"/><text x="17.3905%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.1405%" y="565" width="0.1625%" height="15" fill="rgb(231,98,35)" fg:x="211" fg:w="2"/><text x="17.3905%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.1405%" y="549" width="0.1625%" height="15" fill="rgb(233,28,25)" fg:x="211" fg:w="2"/><text x="17.3905%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.1405%" y="533" width="0.1625%" height="15" fill="rgb(234,123,11)" fg:x="211" fg:w="2"/><text x="17.3905%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2218%" y="517" width="0.0812%" height="15" fill="rgb(220,69,3)" fg:x="212" fg:w="1"/><text x="17.4718%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="17.1405%" y="581" width="0.2437%" height="15" fill="rgb(214,64,36)" fg:x="211" fg:w="3"/><text x="17.3905%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3030%" y="565" width="0.0812%" height="15" fill="rgb(211,138,32)" fg:x="213" fg:w="1"/><text x="17.5530%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.3842%" y="485" width="0.0812%" height="15" fill="rgb(213,118,47)" fg:x="214" fg:w="1"/><text x="17.6342%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.3842%" y="469" width="0.0812%" height="15" fill="rgb(243,124,49)" fg:x="214" fg:w="1"/><text x="17.6342%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.3842%" y="453" width="0.0812%" height="15" fill="rgb(221,30,28)" fg:x="214" fg:w="1"/><text x="17.6342%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.3842%" y="437" width="0.0812%" height="15" fill="rgb(246,37,13)" fg:x="214" fg:w="1"/><text x="17.6342%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.3842%" y="421" width="0.0812%" height="15" fill="rgb(249,66,14)" fg:x="214" fg:w="1"/><text x="17.6342%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.3842%" y="405" width="0.0812%" height="15" fill="rgb(213,166,5)" fg:x="214" fg:w="1"/><text x="17.6342%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.3842%" y="389" width="0.0812%" height="15" fill="rgb(221,66,24)" fg:x="214" fg:w="1"/><text x="17.6342%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.3842%" y="373" width="0.0812%" height="15" fill="rgb(210,132,17)" fg:x="214" fg:w="1"/><text x="17.6342%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.3842%" y="357" width="0.0812%" height="15" fill="rgb(243,202,5)" fg:x="214" fg:w="1"/><text x="17.6342%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.3842%" y="341" width="0.0812%" height="15" fill="rgb(233,70,48)" fg:x="214" fg:w="1"/><text x="17.6342%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.3842%" y="325" width="0.0812%" height="15" fill="rgb(238,41,26)" fg:x="214" fg:w="1"/><text x="17.6342%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3842%" y="309" width="0.0812%" height="15" fill="rgb(241,19,31)" fg:x="214" fg:w="1"/><text x="17.6342%" y="319.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.30%)</title><rect x="16.2470%" y="597" width="1.2998%" height="15" fill="rgb(214,76,10)" fg:x="200" fg:w="16"/><text x="16.4970%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.3842%" y="581" width="0.1625%" height="15" fill="rgb(254,202,22)" fg:x="214" fg:w="2"/><text x="17.6342%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.3842%" y="565" width="0.1625%" height="15" fill="rgb(214,72,24)" fg:x="214" fg:w="2"/><text x="17.6342%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.3842%" y="549" width="0.1625%" height="15" fill="rgb(221,92,46)" fg:x="214" fg:w="2"/><text x="17.6342%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.3842%" y="533" width="0.1625%" height="15" fill="rgb(246,13,50)" fg:x="214" fg:w="2"/><text x="17.6342%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.3842%" y="517" width="0.1625%" height="15" fill="rgb(240,165,38)" fg:x="214" fg:w="2"/><text x="17.6342%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.3842%" y="501" width="0.1625%" height="15" fill="rgb(241,24,51)" fg:x="214" fg:w="2"/><text x="17.6342%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.4655%" y="485" width="0.0812%" height="15" fill="rgb(227,51,44)" fg:x="215" fg:w="1"/><text x="17.7155%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="17.5467%" y="517" width="0.0812%" height="15" fill="rgb(231,121,3)" fg:x="216" fg:w="1"/><text x="17.7967%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.5467%" y="501" width="0.0812%" height="15" fill="rgb(245,3,41)" fg:x="216" fg:w="1"/><text x="17.7967%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.5467%" y="533" width="0.1625%" height="15" fill="rgb(214,13,26)" fg:x="216" fg:w="2"/><text x="17.7967%" y="543.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="17.6279%" y="517" width="0.0812%" height="15" fill="rgb(252,75,11)" fg:x="217" fg:w="1"/><text x="17.8779%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.6279%" y="501" width="0.0812%" height="15" fill="rgb(218,226,17)" fg:x="217" fg:w="1"/><text x="17.8779%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7092%" y="485" width="0.0812%" height="15" fill="rgb(248,89,38)" fg:x="218" fg:w="1"/><text x="17.9592%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7092%" y="469" width="0.0812%" height="15" fill="rgb(237,73,46)" fg:x="218" fg:w="1"/><text x="17.9592%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7092%" y="453" width="0.0812%" height="15" fill="rgb(242,78,33)" fg:x="218" fg:w="1"/><text x="17.9592%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7092%" y="437" width="0.0812%" height="15" fill="rgb(235,60,3)" fg:x="218" fg:w="1"/><text x="17.9592%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7092%" y="421" width="0.0812%" height="15" fill="rgb(216,172,19)" fg:x="218" fg:w="1"/><text x="17.9592%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.7092%" y="405" width="0.0812%" height="15" fill="rgb(227,6,42)" fg:x="218" fg:w="1"/><text x="17.9592%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.7092%" y="389" width="0.0812%" height="15" fill="rgb(223,207,42)" fg:x="218" fg:w="1"/><text x="17.9592%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.7092%" y="373" width="0.0812%" height="15" fill="rgb(246,138,30)" fg:x="218" fg:w="1"/><text x="17.9592%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7092%" y="357" width="0.0812%" height="15" fill="rgb(251,199,47)" fg:x="218" fg:w="1"/><text x="17.9592%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7092%" y="341" width="0.0812%" height="15" fill="rgb(228,218,44)" fg:x="218" fg:w="1"/><text x="17.9592%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.7092%" y="325" width="0.0812%" height="15" fill="rgb(220,68,6)" fg:x="218" fg:w="1"/><text x="17.9592%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.7092%" y="309" width="0.0812%" height="15" fill="rgb(240,60,26)" fg:x="218" fg:w="1"/><text x="17.9592%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.7092%" y="293" width="0.0812%" height="15" fill="rgb(211,200,19)" fg:x="218" fg:w="1"/><text x="17.9592%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.7092%" y="277" width="0.0812%" height="15" fill="rgb(242,145,30)" fg:x="218" fg:w="1"/><text x="17.9592%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7092%" y="261" width="0.0812%" height="15" fill="rgb(225,64,13)" fg:x="218" fg:w="1"/><text x="17.9592%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="17.5467%" y="565" width="0.3249%" height="15" fill="rgb(218,103,35)" fg:x="216" fg:w="4"/><text x="17.7967%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="17.5467%" y="549" width="0.3249%" height="15" fill="rgb(216,93,46)" fg:x="216" fg:w="4"/><text x="17.7967%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="17.7092%" y="533" width="0.1625%" height="15" fill="rgb(225,159,27)" fg:x="218" fg:w="2"/><text x="17.9592%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.7092%" y="517" width="0.1625%" height="15" fill="rgb(225,204,11)" fg:x="218" fg:w="2"/><text x="17.9592%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.7092%" y="501" width="0.1625%" height="15" fill="rgb(205,56,4)" fg:x="218" fg:w="2"/><text x="17.9592%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.7904%" y="485" width="0.0812%" height="15" fill="rgb(206,6,35)" fg:x="219" fg:w="1"/><text x="18.0404%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7904%" y="469" width="0.0812%" height="15" fill="rgb(247,73,52)" fg:x="219" fg:w="1"/><text x="18.0404%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.7904%" y="453" width="0.0812%" height="15" fill="rgb(246,97,4)" fg:x="219" fg:w="1"/><text x="18.0404%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7904%" y="437" width="0.0812%" height="15" fill="rgb(212,37,15)" fg:x="219" fg:w="1"/><text x="18.0404%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.7904%" y="421" width="0.0812%" height="15" fill="rgb(208,130,40)" fg:x="219" fg:w="1"/><text x="18.0404%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.7904%" y="405" width="0.0812%" height="15" fill="rgb(236,55,29)" fg:x="219" fg:w="1"/><text x="18.0404%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.0341%" y="549" width="0.0812%" height="15" fill="rgb(209,156,45)" fg:x="222" fg:w="1"/><text x="18.2841%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0341%" y="533" width="0.0812%" height="15" fill="rgb(249,107,4)" fg:x="222" fg:w="1"/><text x="18.2841%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1154%" y="517" width="0.0812%" height="15" fill="rgb(227,7,13)" fg:x="223" fg:w="1"/><text x="18.3654%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1966%" y="517" width="0.0812%" height="15" fill="rgb(250,129,14)" fg:x="224" fg:w="1"/><text x="18.4466%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="18.1154%" y="549" width="0.2437%" height="15" fill="rgb(229,92,13)" fg:x="223" fg:w="3"/><text x="18.3654%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="18.1154%" y="533" width="0.2437%" height="15" fill="rgb(245,98,39)" fg:x="223" fg:w="3"/><text x="18.3654%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="18.2778%" y="517" width="0.0812%" height="15" fill="rgb(234,135,48)" fg:x="225" fg:w="1"/><text x="18.5278%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.2778%" y="501" width="0.0812%" height="15" fill="rgb(230,98,28)" fg:x="225" fg:w="1"/><text x="18.5278%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2778%" y="485" width="0.0812%" height="15" fill="rgb(223,121,0)" fg:x="225" fg:w="1"/><text x="18.5278%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.2778%" y="469" width="0.0812%" height="15" fill="rgb(234,173,33)" fg:x="225" fg:w="1"/><text x="18.5278%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.2778%" y="453" width="0.0812%" height="15" fill="rgb(245,47,8)" fg:x="225" fg:w="1"/><text x="18.5278%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (11 samples, 0.89%)</title><rect x="17.5467%" y="597" width="0.8936%" height="15" fill="rgb(205,17,20)" fg:x="216" fg:w="11"/><text x="17.7967%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (11 samples, 0.89%)</title><rect x="17.5467%" y="581" width="0.8936%" height="15" fill="rgb(232,151,16)" fg:x="216" fg:w="11"/><text x="17.7967%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (7 samples, 0.57%)</title><rect x="17.8716%" y="565" width="0.5686%" height="15" fill="rgb(208,30,32)" fg:x="220" fg:w="7"/><text x="18.1216%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="18.3591%" y="549" width="0.0812%" height="15" fill="rgb(254,26,3)" fg:x="226" fg:w="1"/><text x="18.6091%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="18.5215%" y="533" width="0.0812%" height="15" fill="rgb(240,177,30)" fg:x="228" fg:w="1"/><text x="18.7715%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="18.6028%" y="533" width="0.0812%" height="15" fill="rgb(248,76,44)" fg:x="229" fg:w="1"/><text x="18.8528%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="18.6028%" y="517" width="0.0812%" height="15" fill="rgb(241,186,54)" fg:x="229" fg:w="1"/><text x="18.8528%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="18.6028%" y="501" width="0.0812%" height="15" fill="rgb(249,171,29)" fg:x="229" fg:w="1"/><text x="18.8528%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.6028%" y="485" width="0.0812%" height="15" fill="rgb(237,151,44)" fg:x="229" fg:w="1"/><text x="18.8528%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.6028%" y="469" width="0.0812%" height="15" fill="rgb(228,174,30)" fg:x="229" fg:w="1"/><text x="18.8528%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6028%" y="453" width="0.0812%" height="15" fill="rgb(252,14,37)" fg:x="229" fg:w="1"/><text x="18.8528%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.6840%" y="501" width="0.0812%" height="15" fill="rgb(207,111,40)" fg:x="230" fg:w="1"/><text x="18.9340%" y="511.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (5 samples, 0.41%)</title><rect x="18.4403%" y="581" width="0.4062%" height="15" fill="rgb(248,171,54)" fg:x="227" fg:w="5"/><text x="18.6903%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="18.4403%" y="565" width="0.4062%" height="15" fill="rgb(211,127,2)" fg:x="227" fg:w="5"/><text x="18.6903%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="18.4403%" y="549" width="0.4062%" height="15" fill="rgb(236,87,47)" fg:x="227" fg:w="5"/><text x="18.6903%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.6840%" y="533" width="0.1625%" height="15" fill="rgb(223,190,45)" fg:x="230" fg:w="2"/><text x="18.9340%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.6840%" y="517" width="0.1625%" height="15" fill="rgb(215,5,16)" fg:x="230" fg:w="2"/><text x="18.9340%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="18.7652%" y="501" width="0.0812%" height="15" fill="rgb(252,82,33)" fg:x="231" fg:w="1"/><text x="19.0152%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (97 samples, 7.88%)</title><rect x="11.0479%" y="613" width="7.8798%" height="15" fill="rgb(247,213,44)" fg:x="136" fg:w="97"/><text x="11.2979%" y="623.50">plugins_cor..</text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.49%)</title><rect x="18.4403%" y="597" width="0.4874%" height="15" fill="rgb(205,196,44)" fg:x="227" fg:w="6"/><text x="18.6903%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.8465%" y="581" width="0.0812%" height="15" fill="rgb(237,96,54)" fg:x="232" fg:w="1"/><text x="19.0965%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="18.8465%" y="565" width="0.0812%" height="15" fill="rgb(230,113,34)" fg:x="232" fg:w="1"/><text x="19.0965%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.8465%" y="549" width="0.0812%" height="15" fill="rgb(221,224,12)" fg:x="232" fg:w="1"/><text x="19.0965%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.8465%" y="533" width="0.0812%" height="15" fill="rgb(219,112,44)" fg:x="232" fg:w="1"/><text x="19.0965%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="18.8465%" y="517" width="0.0812%" height="15" fill="rgb(210,31,13)" fg:x="232" fg:w="1"/><text x="19.0965%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="18.9277%" y="581" width="0.1625%" height="15" fill="rgb(230,25,16)" fg:x="233" fg:w="2"/><text x="19.1777%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="18.9277%" y="565" width="0.1625%" height="15" fill="rgb(246,108,53)" fg:x="233" fg:w="2"/><text x="19.1777%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="18.9277%" y="549" width="0.1625%" height="15" fill="rgb(241,172,50)" fg:x="233" fg:w="2"/><text x="19.1777%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0089%" y="533" width="0.0812%" height="15" fill="rgb(235,141,10)" fg:x="234" fg:w="1"/><text x="19.2589%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="19.0902%" y="581" width="0.0812%" height="15" fill="rgb(220,174,43)" fg:x="235" fg:w="1"/><text x="19.3402%" y="591.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="19.0902%" y="565" width="0.0812%" height="15" fill="rgb(215,181,40)" fg:x="235" fg:w="1"/><text x="19.3402%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="19.0902%" y="549" width="0.0812%" height="15" fill="rgb(230,97,2)" fg:x="235" fg:w="1"/><text x="19.3402%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.0902%" y="533" width="0.0812%" height="15" fill="rgb(211,25,27)" fg:x="235" fg:w="1"/><text x="19.3402%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.0902%" y="517" width="0.0812%" height="15" fill="rgb(230,87,26)" fg:x="235" fg:w="1"/><text x="19.3402%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.0902%" y="501" width="0.0812%" height="15" fill="rgb(227,160,17)" fg:x="235" fg:w="1"/><text x="19.3402%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="19.1714%" y="565" width="0.0812%" height="15" fill="rgb(244,85,34)" fg:x="236" fg:w="1"/><text x="19.4214%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="19.1714%" y="549" width="0.0812%" height="15" fill="rgb(207,70,0)" fg:x="236" fg:w="1"/><text x="19.4214%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="19.1714%" y="533" width="0.0812%" height="15" fill="rgb(223,129,7)" fg:x="236" fg:w="1"/><text x="19.4214%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="19.1714%" y="517" width="0.0812%" height="15" fill="rgb(246,105,7)" fg:x="236" fg:w="1"/><text x="19.4214%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.1714%" y="501" width="0.0812%" height="15" fill="rgb(215,154,42)" fg:x="236" fg:w="1"/><text x="19.4214%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.1714%" y="485" width="0.0812%" height="15" fill="rgb(220,215,30)" fg:x="236" fg:w="1"/><text x="19.4214%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1714%" y="469" width="0.0812%" height="15" fill="rgb(228,81,51)" fg:x="236" fg:w="1"/><text x="19.4214%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1714%" y="453" width="0.0812%" height="15" fill="rgb(247,71,54)" fg:x="236" fg:w="1"/><text x="19.4214%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.1714%" y="437" width="0.0812%" height="15" fill="rgb(234,176,34)" fg:x="236" fg:w="1"/><text x="19.4214%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.41%)</title><rect x="18.9277%" y="613" width="0.4062%" height="15" fill="rgb(241,103,54)" fg:x="233" fg:w="5"/><text x="19.1777%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.41%)</title><rect x="18.9277%" y="597" width="0.4062%" height="15" fill="rgb(228,22,34)" fg:x="233" fg:w="5"/><text x="19.1777%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="19.1714%" y="581" width="0.1625%" height="15" fill="rgb(241,179,48)" fg:x="236" fg:w="2"/><text x="19.4214%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.2526%" y="565" width="0.0812%" height="15" fill="rgb(235,167,37)" fg:x="237" fg:w="1"/><text x="19.5026%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.2526%" y="549" width="0.0812%" height="15" fill="rgb(213,109,30)" fg:x="237" fg:w="1"/><text x="19.5026%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.2526%" y="533" width="0.0812%" height="15" fill="rgb(222,172,16)" fg:x="237" fg:w="1"/><text x="19.5026%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2526%" y="517" width="0.0812%" height="15" fill="rgb(233,192,5)" fg:x="237" fg:w="1"/><text x="19.5026%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2526%" y="501" width="0.0812%" height="15" fill="rgb(247,189,41)" fg:x="237" fg:w="1"/><text x="19.5026%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2526%" y="485" width="0.0812%" height="15" fill="rgb(218,134,47)" fg:x="237" fg:w="1"/><text x="19.5026%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2526%" y="469" width="0.0812%" height="15" fill="rgb(216,29,3)" fg:x="237" fg:w="1"/><text x="19.5026%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2526%" y="453" width="0.0812%" height="15" fill="rgb(246,140,12)" fg:x="237" fg:w="1"/><text x="19.5026%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.2526%" y="437" width="0.0812%" height="15" fill="rgb(230,136,11)" fg:x="237" fg:w="1"/><text x="19.5026%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.2526%" y="421" width="0.0812%" height="15" fill="rgb(247,22,47)" fg:x="237" fg:w="1"/><text x="19.5026%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.2526%" y="405" width="0.0812%" height="15" fill="rgb(218,84,22)" fg:x="237" fg:w="1"/><text x="19.5026%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.2526%" y="389" width="0.0812%" height="15" fill="rgb(216,87,39)" fg:x="237" fg:w="1"/><text x="19.5026%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.2526%" y="373" width="0.0812%" height="15" fill="rgb(221,178,8)" fg:x="237" fg:w="1"/><text x="19.5026%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.2526%" y="357" width="0.0812%" height="15" fill="rgb(230,42,11)" fg:x="237" fg:w="1"/><text x="19.5026%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.2526%" y="341" width="0.0812%" height="15" fill="rgb(237,229,4)" fg:x="237" fg:w="1"/><text x="19.5026%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.2526%" y="325" width="0.0812%" height="15" fill="rgb(222,31,33)" fg:x="237" fg:w="1"/><text x="19.5026%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.2526%" y="309" width="0.0812%" height="15" fill="rgb(210,17,39)" fg:x="237" fg:w="1"/><text x="19.5026%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2526%" y="293" width="0.0812%" height="15" fill="rgb(244,93,20)" fg:x="237" fg:w="1"/><text x="19.5026%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.3339%" y="581" width="0.0812%" height="15" fill="rgb(210,40,47)" fg:x="238" fg:w="1"/><text x="19.5839%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.3339%" y="565" width="0.0812%" height="15" fill="rgb(239,211,47)" fg:x="238" fg:w="1"/><text x="19.5839%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.3339%" y="549" width="0.0812%" height="15" fill="rgb(251,223,49)" fg:x="238" fg:w="1"/><text x="19.5839%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3339%" y="533" width="0.0812%" height="15" fill="rgb(221,149,5)" fg:x="238" fg:w="1"/><text x="19.5839%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="19.4151%" y="565" width="0.0812%" height="15" fill="rgb(219,224,51)" fg:x="239" fg:w="1"/><text x="19.6651%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="19.4151%" y="549" width="0.0812%" height="15" fill="rgb(223,7,8)" fg:x="239" fg:w="1"/><text x="19.6651%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.4963%" y="565" width="0.0812%" height="15" fill="rgb(241,217,22)" fg:x="240" fg:w="1"/><text x="19.7463%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.6588%" y="533" width="0.0812%" height="15" fill="rgb(248,209,0)" fg:x="242" fg:w="1"/><text x="19.9088%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.6588%" y="517" width="0.0812%" height="15" fill="rgb(217,205,4)" fg:x="242" fg:w="1"/><text x="19.9088%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (6 samples, 0.49%)</title><rect x="19.3339%" y="597" width="0.4874%" height="15" fill="rgb(228,124,39)" fg:x="238" fg:w="6"/><text x="19.5839%" y="607.50"></text></g><g><title>kernel::model::props::save_props (5 samples, 0.41%)</title><rect x="19.4151%" y="581" width="0.4062%" height="15" fill="rgb(250,116,42)" fg:x="239" fg:w="5"/><text x="19.6651%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="19.5776%" y="565" width="0.2437%" height="15" fill="rgb(223,202,9)" fg:x="241" fg:w="3"/><text x="19.8276%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.6588%" y="549" width="0.1625%" height="15" fill="rgb(242,222,40)" fg:x="242" fg:w="2"/><text x="19.9088%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.7400%" y="533" width="0.0812%" height="15" fill="rgb(229,99,46)" fg:x="243" fg:w="1"/><text x="19.9900%" y="543.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="19.7400%" y="517" width="0.0812%" height="15" fill="rgb(225,56,46)" fg:x="243" fg:w="1"/><text x="19.9900%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.7400%" y="501" width="0.0812%" height="15" fill="rgb(227,94,5)" fg:x="243" fg:w="1"/><text x="19.9900%" y="511.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="19.8213%" y="597" width="0.1625%" height="15" fill="rgb(205,112,38)" fg:x="244" fg:w="2"/><text x="20.0713%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="19.9025%" y="581" width="0.0812%" height="15" fill="rgb(231,133,46)" fg:x="245" fg:w="1"/><text x="20.1525%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="19.9025%" y="565" width="0.0812%" height="15" fill="rgb(217,16,9)" fg:x="245" fg:w="1"/><text x="20.1525%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="20.0650%" y="565" width="0.0812%" height="15" fill="rgb(249,173,9)" fg:x="247" fg:w="1"/><text x="20.3150%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.0650%" y="549" width="0.0812%" height="15" fill="rgb(205,163,53)" fg:x="247" fg:w="1"/><text x="20.3150%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.0650%" y="533" width="0.0812%" height="15" fill="rgb(217,54,41)" fg:x="247" fg:w="1"/><text x="20.3150%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.0650%" y="517" width="0.0812%" height="15" fill="rgb(228,216,12)" fg:x="247" fg:w="1"/><text x="20.3150%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.0650%" y="501" width="0.0812%" height="15" fill="rgb(244,228,15)" fg:x="247" fg:w="1"/><text x="20.3150%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.2275%" y="453" width="0.0812%" height="15" fill="rgb(221,176,53)" fg:x="249" fg:w="1"/><text x="20.4775%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="20.1462%" y="549" width="0.2437%" height="15" fill="rgb(205,94,34)" fg:x="248" fg:w="3"/><text x="20.3962%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="20.1462%" y="533" width="0.2437%" height="15" fill="rgb(213,110,48)" fg:x="248" fg:w="3"/><text x="20.3962%" y="543.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="20.1462%" y="517" width="0.2437%" height="15" fill="rgb(236,142,28)" fg:x="248" fg:w="3"/><text x="20.3962%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="20.1462%" y="501" width="0.2437%" height="15" fill="rgb(225,135,29)" fg:x="248" fg:w="3"/><text x="20.3962%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.2275%" y="485" width="0.1625%" height="15" fill="rgb(252,45,31)" fg:x="249" fg:w="2"/><text x="20.4775%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="20.2275%" y="469" width="0.1625%" height="15" fill="rgb(211,187,50)" fg:x="249" fg:w="2"/><text x="20.4775%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.3087%" y="453" width="0.0812%" height="15" fill="rgb(229,109,7)" fg:x="250" fg:w="1"/><text x="20.5587%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3899%" y="517" width="0.0812%" height="15" fill="rgb(251,131,51)" fg:x="251" fg:w="1"/><text x="20.6399%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.57%)</title><rect x="19.9838%" y="581" width="0.5686%" height="15" fill="rgb(251,180,35)" fg:x="246" fg:w="7"/><text x="20.2338%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="20.1462%" y="565" width="0.4062%" height="15" fill="rgb(211,46,32)" fg:x="248" fg:w="5"/><text x="20.3962%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="20.3899%" y="549" width="0.1625%" height="15" fill="rgb(248,123,17)" fg:x="251" fg:w="2"/><text x="20.6399%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="20.3899%" y="533" width="0.1625%" height="15" fill="rgb(227,141,18)" fg:x="251" fg:w="2"/><text x="20.6399%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.4712%" y="517" width="0.0812%" height="15" fill="rgb(216,102,9)" fg:x="252" fg:w="1"/><text x="20.7212%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="20.4712%" y="501" width="0.0812%" height="15" fill="rgb(253,47,13)" fg:x="252" fg:w="1"/><text x="20.7212%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="20.4712%" y="485" width="0.0812%" height="15" fill="rgb(226,93,23)" fg:x="252" fg:w="1"/><text x="20.7212%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4712%" y="469" width="0.0812%" height="15" fill="rgb(247,104,17)" fg:x="252" fg:w="1"/><text x="20.7212%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="20.4712%" y="453" width="0.0812%" height="15" fill="rgb(233,203,26)" fg:x="252" fg:w="1"/><text x="20.7212%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="20.4712%" y="437" width="0.0812%" height="15" fill="rgb(244,98,49)" fg:x="252" fg:w="1"/><text x="20.7212%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="20.4712%" y="421" width="0.0812%" height="15" fill="rgb(235,134,22)" fg:x="252" fg:w="1"/><text x="20.7212%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4712%" y="405" width="0.0812%" height="15" fill="rgb(221,70,32)" fg:x="252" fg:w="1"/><text x="20.7212%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.4712%" y="389" width="0.0812%" height="15" fill="rgb(238,15,50)" fg:x="252" fg:w="1"/><text x="20.7212%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.4712%" y="373" width="0.0812%" height="15" fill="rgb(215,221,48)" fg:x="252" fg:w="1"/><text x="20.7212%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.5524%" y="581" width="0.0812%" height="15" fill="rgb(236,73,3)" fg:x="253" fg:w="1"/><text x="20.8024%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (200 samples, 16.25%)</title><rect x="4.4679%" y="629" width="16.2470%" height="15" fill="rgb(250,107,11)" fg:x="55" fg:w="200"/><text x="4.7179%" y="639.50">&lt;tests::HoldingKeyInVesse..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (17 samples, 1.38%)</title><rect x="19.3339%" y="613" width="1.3810%" height="15" fill="rgb(242,39,14)" fg:x="238" fg:w="17"/><text x="19.5839%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.73%)</title><rect x="19.9838%" y="597" width="0.7311%" height="15" fill="rgb(248,164,37)" fg:x="246" fg:w="9"/><text x="20.2338%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="20.6336%" y="581" width="0.0812%" height="15" fill="rgb(217,60,12)" fg:x="254" fg:w="1"/><text x="20.8836%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.6336%" y="565" width="0.0812%" height="15" fill="rgb(240,125,29)" fg:x="254" fg:w="1"/><text x="20.8836%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.6336%" y="549" width="0.0812%" height="15" fill="rgb(208,207,28)" fg:x="254" fg:w="1"/><text x="20.8836%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.6336%" y="533" width="0.0812%" height="15" fill="rgb(209,159,27)" fg:x="254" fg:w="1"/><text x="20.8836%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6336%" y="517" width="0.0812%" height="15" fill="rgb(251,176,53)" fg:x="254" fg:w="1"/><text x="20.8836%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="20.6336%" y="501" width="0.0812%" height="15" fill="rgb(211,85,7)" fg:x="254" fg:w="1"/><text x="20.8836%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.6336%" y="485" width="0.0812%" height="15" fill="rgb(216,64,54)" fg:x="254" fg:w="1"/><text x="20.8836%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="20.6336%" y="469" width="0.0812%" height="15" fill="rgb(217,54,24)" fg:x="254" fg:w="1"/><text x="20.8836%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.7149%" y="629" width="0.0812%" height="15" fill="rgb(208,206,53)" fg:x="255" fg:w="1"/><text x="20.9649%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="20.7961%" y="613" width="0.0812%" height="15" fill="rgb(251,74,39)" fg:x="256" fg:w="1"/><text x="21.0461%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="20.8773%" y="501" width="0.0812%" height="15" fill="rgb(226,47,5)" fg:x="257" fg:w="1"/><text x="21.1273%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="20.8773%" y="485" width="0.0812%" height="15" fill="rgb(234,111,33)" fg:x="257" fg:w="1"/><text x="21.1273%" y="495.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="20.8773%" y="469" width="0.0812%" height="15" fill="rgb(251,14,10)" fg:x="257" fg:w="1"/><text x="21.1273%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="20.8773%" y="453" width="0.0812%" height="15" fill="rgb(232,43,0)" fg:x="257" fg:w="1"/><text x="21.1273%" y="463.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="20.8773%" y="437" width="0.0812%" height="15" fill="rgb(222,68,43)" fg:x="257" fg:w="1"/><text x="21.1273%" y="447.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="20.8773%" y="421" width="0.0812%" height="15" fill="rgb(217,24,23)" fg:x="257" fg:w="1"/><text x="21.1273%" y="431.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="20.8773%" y="405" width="0.0812%" height="15" fill="rgb(229,209,14)" fg:x="257" fg:w="1"/><text x="21.1273%" y="415.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="20.8773%" y="389" width="0.0812%" height="15" fill="rgb(250,149,48)" fg:x="257" fg:w="1"/><text x="21.1273%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="20.8773%" y="373" width="0.0812%" height="15" fill="rgb(210,120,37)" fg:x="257" fg:w="1"/><text x="21.1273%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="20.8773%" y="357" width="0.0812%" height="15" fill="rgb(210,21,8)" fg:x="257" fg:w="1"/><text x="21.1273%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="20.8773%" y="341" width="0.0812%" height="15" fill="rgb(243,145,7)" fg:x="257" fg:w="1"/><text x="21.1273%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="20.8773%" y="325" width="0.0812%" height="15" fill="rgb(238,178,32)" fg:x="257" fg:w="1"/><text x="21.1273%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="20.8773%" y="309" width="0.0812%" height="15" fill="rgb(222,4,10)" fg:x="257" fg:w="1"/><text x="21.1273%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="20.8773%" y="293" width="0.0812%" height="15" fill="rgb(239,7,37)" fg:x="257" fg:w="1"/><text x="21.1273%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (1 samples, 0.08%)</title><rect x="20.8773%" y="277" width="0.0812%" height="15" fill="rgb(215,31,37)" fg:x="257" fg:w="1"/><text x="21.1273%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="20.8773%" y="613" width="0.1625%" height="15" fill="rgb(224,83,33)" fg:x="257" fg:w="2"/><text x="21.1273%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="20.8773%" y="597" width="0.1625%" height="15" fill="rgb(239,55,3)" fg:x="257" fg:w="2"/><text x="21.1273%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="20.8773%" y="581" width="0.1625%" height="15" fill="rgb(247,92,11)" fg:x="257" fg:w="2"/><text x="21.1273%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="20.8773%" y="565" width="0.1625%" height="15" fill="rgb(239,200,7)" fg:x="257" fg:w="2"/><text x="21.1273%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="20.8773%" y="549" width="0.1625%" height="15" fill="rgb(227,115,8)" fg:x="257" fg:w="2"/><text x="21.1273%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="20.8773%" y="533" width="0.1625%" height="15" fill="rgb(215,189,27)" fg:x="257" fg:w="2"/><text x="21.1273%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="20.8773%" y="517" width="0.1625%" height="15" fill="rgb(251,216,39)" fg:x="257" fg:w="2"/><text x="21.1273%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="20.9586%" y="501" width="0.0812%" height="15" fill="rgb(207,29,47)" fg:x="258" fg:w="1"/><text x="21.2086%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="20.9586%" y="485" width="0.0812%" height="15" fill="rgb(210,71,34)" fg:x="258" fg:w="1"/><text x="21.2086%" y="495.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="20.9586%" y="469" width="0.0812%" height="15" fill="rgb(253,217,51)" fg:x="258" fg:w="1"/><text x="21.2086%" y="479.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="20.9586%" y="453" width="0.0812%" height="15" fill="rgb(222,117,46)" fg:x="258" fg:w="1"/><text x="21.2086%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="21.1210%" y="581" width="0.1625%" height="15" fill="rgb(226,132,6)" fg:x="260" fg:w="2"/><text x="21.3710%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="21.1210%" y="565" width="0.1625%" height="15" fill="rgb(254,145,51)" fg:x="260" fg:w="2"/><text x="21.3710%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="21.1210%" y="549" width="0.1625%" height="15" fill="rgb(231,199,27)" fg:x="260" fg:w="2"/><text x="21.3710%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.2023%" y="533" width="0.0812%" height="15" fill="rgb(245,158,14)" fg:x="261" fg:w="1"/><text x="21.4523%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.2023%" y="517" width="0.0812%" height="15" fill="rgb(240,113,14)" fg:x="261" fg:w="1"/><text x="21.4523%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.2023%" y="501" width="0.0812%" height="15" fill="rgb(210,20,13)" fg:x="261" fg:w="1"/><text x="21.4523%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.2023%" y="485" width="0.0812%" height="15" fill="rgb(241,144,13)" fg:x="261" fg:w="1"/><text x="21.4523%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.2023%" y="469" width="0.0812%" height="15" fill="rgb(235,43,34)" fg:x="261" fg:w="1"/><text x="21.4523%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.2023%" y="453" width="0.0812%" height="15" fill="rgb(208,36,20)" fg:x="261" fg:w="1"/><text x="21.4523%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.2023%" y="437" width="0.0812%" height="15" fill="rgb(239,204,10)" fg:x="261" fg:w="1"/><text x="21.4523%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.2023%" y="421" width="0.0812%" height="15" fill="rgb(217,84,43)" fg:x="261" fg:w="1"/><text x="21.4523%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.2023%" y="405" width="0.0812%" height="15" fill="rgb(241,170,50)" fg:x="261" fg:w="1"/><text x="21.4523%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.2023%" y="389" width="0.0812%" height="15" fill="rgb(226,205,29)" fg:x="261" fg:w="1"/><text x="21.4523%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.2023%" y="373" width="0.0812%" height="15" fill="rgb(233,113,1)" fg:x="261" fg:w="1"/><text x="21.4523%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.2023%" y="357" width="0.0812%" height="15" fill="rgb(253,98,13)" fg:x="261" fg:w="1"/><text x="21.4523%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="21.2835%" y="549" width="0.0812%" height="15" fill="rgb(211,115,12)" fg:x="262" fg:w="1"/><text x="21.5335%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="21.5272%" y="501" width="0.0812%" height="15" fill="rgb(208,12,16)" fg:x="265" fg:w="1"/><text x="21.7772%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="21.5272%" y="517" width="0.2437%" height="15" fill="rgb(237,193,54)" fg:x="265" fg:w="3"/><text x="21.7772%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="21.6084%" y="501" width="0.1625%" height="15" fill="rgb(243,22,42)" fg:x="266" fg:w="2"/><text x="21.8584%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="21.6084%" y="485" width="0.1625%" height="15" fill="rgb(233,151,36)" fg:x="266" fg:w="2"/><text x="21.8584%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.6897%" y="469" width="0.0812%" height="15" fill="rgb(237,57,45)" fg:x="267" fg:w="1"/><text x="21.9397%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.41%)</title><rect x="21.7709%" y="501" width="0.4062%" height="15" fill="rgb(221,88,17)" fg:x="268" fg:w="5"/><text x="22.0209%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="21.9334%" y="485" width="0.2437%" height="15" fill="rgb(230,79,15)" fg:x="270" fg:w="3"/><text x="22.1834%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="22.0146%" y="469" width="0.1625%" height="15" fill="rgb(213,57,13)" fg:x="271" fg:w="2"/><text x="22.2646%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="22.0146%" y="453" width="0.1625%" height="15" fill="rgb(222,116,39)" fg:x="271" fg:w="2"/><text x="22.2646%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.0959%" y="437" width="0.0812%" height="15" fill="rgb(245,107,2)" fg:x="272" fg:w="1"/><text x="22.3459%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.0959%" y="421" width="0.0812%" height="15" fill="rgb(238,1,10)" fg:x="272" fg:w="1"/><text x="22.3459%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.0959%" y="405" width="0.0812%" height="15" fill="rgb(249,4,48)" fg:x="272" fg:w="1"/><text x="22.3459%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.3396%" y="453" width="0.0812%" height="15" fill="rgb(223,151,18)" fg:x="275" fg:w="1"/><text x="22.5896%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.3396%" y="437" width="0.0812%" height="15" fill="rgb(227,65,43)" fg:x="275" fg:w="1"/><text x="22.5896%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="22.4208%" y="453" width="0.2437%" height="15" fill="rgb(218,40,45)" fg:x="276" fg:w="3"/><text x="22.6708%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="22.4208%" y="437" width="0.2437%" height="15" fill="rgb(252,121,31)" fg:x="276" fg:w="3"/><text x="22.6708%" y="447.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="22.4208%" y="421" width="0.2437%" height="15" fill="rgb(219,158,43)" fg:x="276" fg:w="3"/><text x="22.6708%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.41%)</title><rect x="22.3396%" y="485" width="0.4062%" height="15" fill="rgb(231,162,42)" fg:x="275" fg:w="5"/><text x="22.5896%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="22.3396%" y="469" width="0.4062%" height="15" fill="rgb(217,179,25)" fg:x="275" fg:w="5"/><text x="22.5896%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.6645%" y="453" width="0.0812%" height="15" fill="rgb(206,212,31)" fg:x="279" fg:w="1"/><text x="22.9145%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.49%)</title><rect x="22.7457%" y="485" width="0.4874%" height="15" fill="rgb(235,144,12)" fg:x="280" fg:w="6"/><text x="22.9957%" y="495.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.41%)</title><rect x="22.8270%" y="469" width="0.4062%" height="15" fill="rgb(213,51,10)" fg:x="281" fg:w="5"/><text x="23.0770%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.41%)</title><rect x="22.8270%" y="453" width="0.4062%" height="15" fill="rgb(231,145,14)" fg:x="281" fg:w="5"/><text x="23.0770%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.1519%" y="437" width="0.0812%" height="15" fill="rgb(235,15,28)" fg:x="285" fg:w="1"/><text x="23.4019%" y="447.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="23.2331%" y="469" width="0.0812%" height="15" fill="rgb(237,206,10)" fg:x="286" fg:w="1"/><text x="23.4831%" y="479.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="23.2331%" y="453" width="0.0812%" height="15" fill="rgb(236,227,27)" fg:x="286" fg:w="1"/><text x="23.4831%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="23.3144%" y="469" width="0.1625%" height="15" fill="rgb(246,83,35)" fg:x="287" fg:w="2"/><text x="23.5644%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.3144%" y="453" width="0.1625%" height="15" fill="rgb(220,136,24)" fg:x="287" fg:w="2"/><text x="23.5644%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.3956%" y="437" width="0.0812%" height="15" fill="rgb(217,3,25)" fg:x="288" fg:w="1"/><text x="23.6456%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.3956%" y="421" width="0.0812%" height="15" fill="rgb(239,24,14)" fg:x="288" fg:w="1"/><text x="23.6456%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.3956%" y="405" width="0.0812%" height="15" fill="rgb(244,16,53)" fg:x="288" fg:w="1"/><text x="23.6456%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.3956%" y="389" width="0.0812%" height="15" fill="rgb(208,175,44)" fg:x="288" fg:w="1"/><text x="23.6456%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.3956%" y="373" width="0.0812%" height="15" fill="rgb(252,18,48)" fg:x="288" fg:w="1"/><text x="23.6456%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="23.4768%" y="453" width="0.2437%" height="15" fill="rgb(234,199,32)" fg:x="289" fg:w="3"/><text x="23.7268%" y="463.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="23.4768%" y="437" width="0.2437%" height="15" fill="rgb(225,77,54)" fg:x="289" fg:w="3"/><text x="23.7268%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.5581%" y="421" width="0.1625%" height="15" fill="rgb(225,42,25)" fg:x="290" fg:w="2"/><text x="23.8081%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.5581%" y="405" width="0.1625%" height="15" fill="rgb(242,227,46)" fg:x="290" fg:w="2"/><text x="23.8081%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="23.4768%" y="469" width="0.3249%" height="15" fill="rgb(246,197,35)" fg:x="289" fg:w="4"/><text x="23.7268%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.7206%" y="453" width="0.0812%" height="15" fill="rgb(215,159,26)" fg:x="292" fg:w="1"/><text x="23.9706%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.7206%" y="437" width="0.0812%" height="15" fill="rgb(212,194,50)" fg:x="292" fg:w="1"/><text x="23.9706%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.7206%" y="421" width="0.0812%" height="15" fill="rgb(246,132,1)" fg:x="292" fg:w="1"/><text x="23.9706%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.7206%" y="405" width="0.0812%" height="15" fill="rgb(217,71,7)" fg:x="292" fg:w="1"/><text x="23.9706%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="23.2331%" y="485" width="0.6499%" height="15" fill="rgb(252,59,32)" fg:x="286" fg:w="8"/><text x="23.4831%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.8018%" y="469" width="0.0812%" height="15" fill="rgb(253,204,25)" fg:x="293" fg:w="1"/><text x="24.0518%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.8018%" y="453" width="0.0812%" height="15" fill="rgb(232,21,16)" fg:x="293" fg:w="1"/><text x="24.0518%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="23.8018%" y="437" width="0.0812%" height="15" fill="rgb(248,90,29)" fg:x="293" fg:w="1"/><text x="24.0518%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.87%)</title><rect x="22.1771%" y="501" width="1.8684%" height="15" fill="rgb(249,223,7)" fg:x="273" fg:w="23"/><text x="22.4271%" y="511.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.8830%" y="485" width="0.1625%" height="15" fill="rgb(231,119,42)" fg:x="294" fg:w="2"/><text x="24.1330%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="23.9643%" y="469" width="0.0812%" height="15" fill="rgb(215,41,35)" fg:x="295" fg:w="1"/><text x="24.2143%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (29 samples, 2.36%)</title><rect x="21.7709%" y="517" width="2.3558%" height="15" fill="rgb(220,44,45)" fg:x="268" fg:w="29"/><text x="22.0209%" y="527.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.0455%" y="501" width="0.0812%" height="15" fill="rgb(253,197,36)" fg:x="296" fg:w="1"/><text x="24.2955%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.0455%" y="485" width="0.0812%" height="15" fill="rgb(245,225,54)" fg:x="296" fg:w="1"/><text x="24.2955%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.0455%" y="469" width="0.0812%" height="15" fill="rgb(239,94,37)" fg:x="296" fg:w="1"/><text x="24.2955%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.0455%" y="453" width="0.0812%" height="15" fill="rgb(242,217,10)" fg:x="296" fg:w="1"/><text x="24.2955%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.0455%" y="437" width="0.0812%" height="15" fill="rgb(250,193,7)" fg:x="296" fg:w="1"/><text x="24.2955%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.0455%" y="421" width="0.0812%" height="15" fill="rgb(230,104,19)" fg:x="296" fg:w="1"/><text x="24.2955%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (33 samples, 2.68%)</title><rect x="21.5272%" y="533" width="2.6807%" height="15" fill="rgb(230,181,4)" fg:x="265" fg:w="33"/><text x="21.7772%" y="543.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.1267%" y="517" width="0.0812%" height="15" fill="rgb(216,219,49)" fg:x="297" fg:w="1"/><text x="24.3767%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.1267%" y="501" width="0.0812%" height="15" fill="rgb(254,144,0)" fg:x="297" fg:w="1"/><text x="24.3767%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.1267%" y="485" width="0.0812%" height="15" fill="rgb(205,209,38)" fg:x="297" fg:w="1"/><text x="24.3767%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="24.2080%" y="501" width="0.1625%" height="15" fill="rgb(240,21,42)" fg:x="298" fg:w="2"/><text x="24.4580%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.5329%" y="485" width="0.0812%" height="15" fill="rgb(241,132,3)" fg:x="302" fg:w="1"/><text x="24.7829%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.6141%" y="469" width="0.0812%" height="15" fill="rgb(225,14,2)" fg:x="303" fg:w="1"/><text x="24.8641%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.6141%" y="453" width="0.0812%" height="15" fill="rgb(210,141,35)" fg:x="303" fg:w="1"/><text x="24.8641%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="24.2080%" y="533" width="0.5686%" height="15" fill="rgb(251,14,44)" fg:x="298" fg:w="7"/><text x="24.4580%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="24.2080%" y="517" width="0.5686%" height="15" fill="rgb(247,48,18)" fg:x="298" fg:w="7"/><text x="24.4580%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="24.3704%" y="501" width="0.4062%" height="15" fill="rgb(225,0,40)" fg:x="300" fg:w="5"/><text x="24.6204%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="24.6141%" y="485" width="0.1625%" height="15" fill="rgb(221,31,33)" fg:x="303" fg:w="2"/><text x="24.8641%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.6954%" y="469" width="0.0812%" height="15" fill="rgb(237,42,40)" fg:x="304" fg:w="1"/><text x="24.9454%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="24.6954%" y="453" width="0.0812%" height="15" fill="rgb(233,51,29)" fg:x="304" fg:w="1"/><text x="24.9454%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="24.6954%" y="437" width="0.0812%" height="15" fill="rgb(226,58,20)" fg:x="304" fg:w="1"/><text x="24.9454%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.6954%" y="421" width="0.0812%" height="15" fill="rgb(208,98,7)" fg:x="304" fg:w="1"/><text x="24.9454%" y="431.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::SimpleReply&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="24.7766%" y="517" width="0.0812%" height="15" fill="rgb(228,143,44)" fg:x="305" fg:w="1"/><text x="25.0266%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.0203%" y="469" width="0.0812%" height="15" fill="rgb(246,55,38)" fg:x="308" fg:w="1"/><text x="25.2703%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.1015%" y="469" width="0.0812%" height="15" fill="rgb(247,87,16)" fg:x="309" fg:w="1"/><text x="25.3515%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="25.2640%" y="453" width="0.1625%" height="15" fill="rgb(234,129,42)" fg:x="311" fg:w="2"/><text x="25.5140%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.3452%" y="437" width="0.0812%" height="15" fill="rgb(220,82,16)" fg:x="312" fg:w="1"/><text x="25.5952%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.5077%" y="389" width="0.0812%" height="15" fill="rgb(211,88,4)" fg:x="314" fg:w="1"/><text x="25.7577%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="25.4265%" y="421" width="0.2437%" height="15" fill="rgb(248,151,21)" fg:x="313" fg:w="3"/><text x="25.6765%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="25.4265%" y="405" width="0.2437%" height="15" fill="rgb(238,163,6)" fg:x="313" fg:w="3"/><text x="25.6765%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.5890%" y="389" width="0.0812%" height="15" fill="rgb(209,183,11)" fg:x="315" fg:w="1"/><text x="25.8390%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.5890%" y="373" width="0.0812%" height="15" fill="rgb(219,37,20)" fg:x="315" fg:w="1"/><text x="25.8390%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.81%)</title><rect x="24.9391%" y="501" width="0.8123%" height="15" fill="rgb(210,158,4)" fg:x="307" fg:w="10"/><text x="25.1891%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.73%)</title><rect x="25.0203%" y="485" width="0.7311%" height="15" fill="rgb(221,167,53)" fg:x="308" fg:w="9"/><text x="25.2703%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="25.1828%" y="469" width="0.5686%" height="15" fill="rgb(237,151,45)" fg:x="310" fg:w="7"/><text x="25.4328%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="25.4265%" y="453" width="0.3249%" height="15" fill="rgb(231,39,3)" fg:x="313" fg:w="4"/><text x="25.6765%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="25.4265%" y="437" width="0.3249%" height="15" fill="rgb(212,167,28)" fg:x="313" fg:w="4"/><text x="25.6765%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="25.6702%" y="421" width="0.0812%" height="15" fill="rgb(232,178,8)" fg:x="316" fg:w="1"/><text x="25.9202%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.6702%" y="405" width="0.0812%" height="15" fill="rgb(225,151,20)" fg:x="316" fg:w="1"/><text x="25.9202%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="25.8327%" y="453" width="0.1625%" height="15" fill="rgb(238,3,37)" fg:x="318" fg:w="2"/><text x="26.0827%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="25.9139%" y="437" width="0.0812%" height="15" fill="rgb(251,147,42)" fg:x="319" fg:w="1"/><text x="26.1639%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="25.9139%" y="421" width="0.0812%" height="15" fill="rgb(208,173,10)" fg:x="319" fg:w="1"/><text x="26.1639%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="25.9139%" y="405" width="0.0812%" height="15" fill="rgb(246,225,4)" fg:x="319" fg:w="1"/><text x="26.1639%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.9139%" y="389" width="0.0812%" height="15" fill="rgb(248,102,6)" fg:x="319" fg:w="1"/><text x="26.1639%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="25.7514%" y="485" width="0.3249%" height="15" fill="rgb(232,6,21)" fg:x="317" fg:w="4"/><text x="26.0014%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="25.7514%" y="469" width="0.3249%" height="15" fill="rgb(221,179,22)" fg:x="317" fg:w="4"/><text x="26.0014%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.9951%" y="453" width="0.0812%" height="15" fill="rgb(252,50,20)" fg:x="320" fg:w="1"/><text x="26.2451%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (16 samples, 1.30%)</title><rect x="24.8578%" y="517" width="1.2998%" height="15" fill="rgb(222,56,38)" fg:x="306" fg:w="16"/><text x="25.1078%" y="527.50"></text></g><g><title>treediff::diff::diff (5 samples, 0.41%)</title><rect x="25.7514%" y="501" width="0.4062%" height="15" fill="rgb(206,193,29)" fg:x="317" fg:w="5"/><text x="26.0014%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.0764%" y="485" width="0.0812%" height="15" fill="rgb(239,192,45)" fg:x="321" fg:w="1"/><text x="26.3264%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.0764%" y="469" width="0.0812%" height="15" fill="rgb(254,18,36)" fg:x="321" fg:w="1"/><text x="26.3264%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.0764%" y="453" width="0.0812%" height="15" fill="rgb(221,127,11)" fg:x="321" fg:w="1"/><text x="26.3264%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5638%" y="453" width="0.0812%" height="15" fill="rgb(234,146,35)" fg:x="327" fg:w="1"/><text x="26.8138%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="26.4013%" y="485" width="0.3249%" height="15" fill="rgb(254,201,37)" fg:x="325" fg:w="4"/><text x="26.6513%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="26.4825%" y="469" width="0.2437%" height="15" fill="rgb(211,202,23)" fg:x="326" fg:w="3"/><text x="26.7325%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.6450%" y="453" width="0.0812%" height="15" fill="rgb(237,91,2)" fg:x="328" fg:w="1"/><text x="26.8950%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (3 samples, 0.24%)</title><rect x="26.7262%" y="485" width="0.2437%" height="15" fill="rgb(226,228,36)" fg:x="329" fg:w="3"/><text x="26.9762%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.8887%" y="469" width="0.0812%" height="15" fill="rgb(213,63,50)" fg:x="331" fg:w="1"/><text x="27.1387%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8887%" y="453" width="0.0812%" height="15" fill="rgb(235,194,19)" fg:x="331" fg:w="1"/><text x="27.1387%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="26.9699%" y="485" width="0.0812%" height="15" fill="rgb(207,204,18)" fg:x="332" fg:w="1"/><text x="27.2199%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.9699%" y="469" width="0.0812%" height="15" fill="rgb(248,8,7)" fg:x="332" fg:w="1"/><text x="27.2199%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9699%" y="453" width="0.0812%" height="15" fill="rgb(223,145,47)" fg:x="332" fg:w="1"/><text x="27.2199%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9699%" y="437" width="0.0812%" height="15" fill="rgb(228,84,11)" fg:x="332" fg:w="1"/><text x="27.2199%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9699%" y="421" width="0.0812%" height="15" fill="rgb(218,76,45)" fg:x="332" fg:w="1"/><text x="27.2199%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1324%" y="453" width="0.0812%" height="15" fill="rgb(223,80,15)" fg:x="334" fg:w="1"/><text x="27.3824%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="27.0512%" y="485" width="0.2437%" height="15" fill="rgb(219,218,33)" fg:x="333" fg:w="3"/><text x="27.3012%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="27.1324%" y="469" width="0.1625%" height="15" fill="rgb(208,51,11)" fg:x="334" fg:w="2"/><text x="27.3824%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (1 samples, 0.08%)</title><rect x="27.2136%" y="453" width="0.0812%" height="15" fill="rgb(229,165,39)" fg:x="335" fg:w="1"/><text x="27.4636%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (2 samples, 0.16%)</title><rect x="27.4574%" y="453" width="0.1625%" height="15" fill="rgb(241,100,24)" fg:x="338" fg:w="2"/><text x="27.7074%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.7011%" y="405" width="0.1625%" height="15" fill="rgb(228,14,23)" fg:x="341" fg:w="2"/><text x="27.9511%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="27.7011%" y="437" width="0.2437%" height="15" fill="rgb(247,116,52)" fg:x="341" fg:w="3"/><text x="27.9511%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="27.7011%" y="421" width="0.2437%" height="15" fill="rgb(216,149,33)" fg:x="341" fg:w="3"/><text x="27.9511%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="27.8635%" y="405" width="0.0812%" height="15" fill="rgb(238,142,29)" fg:x="343" fg:w="1"/><text x="28.1135%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.0260%" y="389" width="0.0812%" height="15" fill="rgb(224,83,40)" fg:x="345" fg:w="1"/><text x="28.2760%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="28.0260%" y="405" width="0.3249%" height="15" fill="rgb(234,165,11)" fg:x="345" fg:w="4"/><text x="28.2760%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="28.1072%" y="389" width="0.2437%" height="15" fill="rgb(215,96,23)" fg:x="346" fg:w="3"/><text x="28.3572%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="28.1885%" y="373" width="0.1625%" height="15" fill="rgb(233,179,26)" fg:x="347" fg:w="2"/><text x="28.4385%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.1885%" y="357" width="0.1625%" height="15" fill="rgb(225,129,33)" fg:x="347" fg:w="2"/><text x="28.4385%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.1885%" y="341" width="0.1625%" height="15" fill="rgb(237,49,13)" fg:x="347" fg:w="2"/><text x="28.4385%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2697%" y="325" width="0.0812%" height="15" fill="rgb(211,3,31)" fg:x="348" fg:w="1"/><text x="28.5197%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.49%)</title><rect x="27.9448%" y="437" width="0.4874%" height="15" fill="rgb(216,152,19)" fg:x="344" fg:w="6"/><text x="28.1948%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="27.9448%" y="421" width="0.4874%" height="15" fill="rgb(251,121,35)" fg:x="344" fg:w="6"/><text x="28.1948%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3509%" y="405" width="0.0812%" height="15" fill="rgb(210,217,47)" fg:x="349" fg:w="1"/><text x="28.6009%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="28.5946%" y="421" width="0.1625%" height="15" fill="rgb(244,116,22)" fg:x="352" fg:w="2"/><text x="28.8446%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.7571%" y="405" width="0.0812%" height="15" fill="rgb(228,17,21)" fg:x="354" fg:w="1"/><text x="29.0071%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.7571%" y="389" width="0.0812%" height="15" fill="rgb(240,149,34)" fg:x="354" fg:w="1"/><text x="29.0071%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7571%" y="373" width="0.0812%" height="15" fill="rgb(208,125,47)" fg:x="354" fg:w="1"/><text x="29.0071%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="28.8383%" y="389" width="0.1625%" height="15" fill="rgb(249,186,39)" fg:x="355" fg:w="2"/><text x="29.0883%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (20 samples, 1.62%)</title><rect x="27.6198%" y="453" width="1.6247%" height="15" fill="rgb(240,220,33)" fg:x="340" fg:w="20"/><text x="27.8698%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.81%)</title><rect x="28.4322%" y="437" width="0.8123%" height="15" fill="rgb(243,110,23)" fg:x="350" fg:w="10"/><text x="28.6822%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="28.7571%" y="421" width="0.4874%" height="15" fill="rgb(219,163,46)" fg:x="354" fg:w="6"/><text x="29.0071%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="28.8383%" y="405" width="0.4062%" height="15" fill="rgb(216,126,30)" fg:x="355" fg:w="5"/><text x="29.0883%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="29.0008%" y="389" width="0.2437%" height="15" fill="rgb(208,139,11)" fg:x="357" fg:w="3"/><text x="29.2508%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="29.0820%" y="373" width="0.1625%" height="15" fill="rgb(213,118,36)" fg:x="358" fg:w="2"/><text x="29.3320%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1633%" y="357" width="0.0812%" height="15" fill="rgb(226,43,17)" fg:x="359" fg:w="1"/><text x="29.4133%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (24 samples, 1.95%)</title><rect x="27.4574%" y="469" width="1.9496%" height="15" fill="rgb(254,217,4)" fg:x="338" fg:w="24"/><text x="27.7074%" y="479.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="29.2445%" y="453" width="0.1625%" height="15" fill="rgb(210,134,47)" fg:x="360" fg:w="2"/><text x="29.4945%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.2445%" y="437" width="0.1625%" height="15" fill="rgb(237,24,49)" fg:x="360" fg:w="2"/><text x="29.4945%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (41 samples, 3.33%)</title><rect x="26.1576%" y="517" width="3.3306%" height="15" fill="rgb(251,39,46)" fg:x="322" fg:w="41"/><text x="26.4076%" y="527.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (41 samples, 3.33%)</title><rect x="26.1576%" y="501" width="3.3306%" height="15" fill="rgb(251,220,3)" fg:x="322" fg:w="41"/><text x="26.4076%" y="511.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (27 samples, 2.19%)</title><rect x="27.2949%" y="485" width="2.1933%" height="15" fill="rgb(228,105,12)" fg:x="336" fg:w="27"/><text x="27.5449%" y="495.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.4070%" y="469" width="0.0812%" height="15" fill="rgb(215,196,1)" fg:x="362" fg:w="1"/><text x="29.6570%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.4070%" y="453" width="0.0812%" height="15" fill="rgb(214,33,39)" fg:x="362" fg:w="1"/><text x="29.6570%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="29.9756%" y="325" width="0.2437%" height="15" fill="rgb(220,19,52)" fg:x="369" fg:w="3"/><text x="30.2256%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.0569%" y="309" width="0.1625%" height="15" fill="rgb(221,78,38)" fg:x="370" fg:w="2"/><text x="30.3069%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.0569%" y="293" width="0.1625%" height="15" fill="rgb(253,30,16)" fg:x="370" fg:w="2"/><text x="30.3069%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.1381%" y="277" width="0.0812%" height="15" fill="rgb(242,65,0)" fg:x="371" fg:w="1"/><text x="30.3881%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.1381%" y="261" width="0.0812%" height="15" fill="rgb(235,201,12)" fg:x="371" fg:w="1"/><text x="30.3881%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="29.9756%" y="341" width="0.3249%" height="15" fill="rgb(233,161,9)" fg:x="369" fg:w="4"/><text x="30.2256%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.2193%" y="325" width="0.0812%" height="15" fill="rgb(241,207,41)" fg:x="372" fg:w="1"/><text x="30.4693%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="29.8132%" y="373" width="0.5686%" height="15" fill="rgb(212,69,46)" fg:x="367" fg:w="7"/><text x="30.0632%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="29.8132%" y="357" width="0.5686%" height="15" fill="rgb(239,69,45)" fg:x="367" fg:w="7"/><text x="30.0632%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.3006%" y="341" width="0.0812%" height="15" fill="rgb(242,117,48)" fg:x="373" fg:w="1"/><text x="30.5506%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.3006%" y="325" width="0.0812%" height="15" fill="rgb(228,41,36)" fg:x="373" fg:w="1"/><text x="30.5506%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="30.3818%" y="325" width="0.0812%" height="15" fill="rgb(212,3,32)" fg:x="374" fg:w="1"/><text x="30.6318%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3818%" y="309" width="0.0812%" height="15" fill="rgb(233,41,49)" fg:x="374" fg:w="1"/><text x="30.6318%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.3818%" y="341" width="0.1625%" height="15" fill="rgb(252,170,49)" fg:x="374" fg:w="2"/><text x="30.6318%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4630%" y="325" width="0.0812%" height="15" fill="rgb(229,53,26)" fg:x="375" fg:w="1"/><text x="30.7130%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4630%" y="309" width="0.0812%" height="15" fill="rgb(217,157,12)" fg:x="375" fg:w="1"/><text x="30.7130%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4630%" y="293" width="0.0812%" height="15" fill="rgb(227,17,9)" fg:x="375" fg:w="1"/><text x="30.7130%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="30.3818%" y="357" width="0.2437%" height="15" fill="rgb(218,84,12)" fg:x="374" fg:w="3"/><text x="30.6318%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5443%" y="341" width="0.0812%" height="15" fill="rgb(212,79,24)" fg:x="376" fg:w="1"/><text x="30.7943%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.97%)</title><rect x="29.8132%" y="389" width="0.9748%" height="15" fill="rgb(217,222,37)" fg:x="367" fg:w="12"/><text x="30.0632%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="30.3818%" y="373" width="0.4062%" height="15" fill="rgb(246,208,8)" fg:x="374" fg:w="5"/><text x="30.6318%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.6255%" y="357" width="0.1625%" height="15" fill="rgb(244,133,10)" fg:x="377" fg:w="2"/><text x="30.8755%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.6255%" y="341" width="0.1625%" height="15" fill="rgb(209,219,41)" fg:x="377" fg:w="2"/><text x="30.8755%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.6255%" y="325" width="0.1625%" height="15" fill="rgb(253,175,45)" fg:x="377" fg:w="2"/><text x="30.8755%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="30.7880%" y="373" width="0.0812%" height="15" fill="rgb(235,100,37)" fg:x="379" fg:w="1"/><text x="31.0380%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.30%)</title><rect x="29.6507%" y="421" width="1.2998%" height="15" fill="rgb(225,87,19)" fg:x="365" fg:w="16"/><text x="29.9007%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.22%)</title><rect x="29.7319%" y="405" width="1.2185%" height="15" fill="rgb(217,152,17)" fg:x="366" fg:w="15"/><text x="29.9819%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="30.7880%" y="389" width="0.1625%" height="15" fill="rgb(235,72,13)" fg:x="379" fg:w="2"/><text x="31.0380%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8692%" y="373" width="0.0812%" height="15" fill="rgb(233,140,18)" fg:x="380" fg:w="1"/><text x="31.1192%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21 samples, 1.71%)</title><rect x="29.5695%" y="453" width="1.7059%" height="15" fill="rgb(207,212,28)" fg:x="364" fg:w="21"/><text x="29.8195%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (20 samples, 1.62%)</title><rect x="29.6507%" y="437" width="1.6247%" height="15" fill="rgb(220,130,25)" fg:x="365" fg:w="20"/><text x="29.9007%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="30.9504%" y="421" width="0.3249%" height="15" fill="rgb(205,55,34)" fg:x="381" fg:w="4"/><text x="31.2004%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.1129%" y="405" width="0.1625%" height="15" fill="rgb(237,54,35)" fg:x="383" fg:w="2"/><text x="31.3629%" y="415.50"></text></g><g><title>kernel::model::any_entity_changes (81 samples, 6.58%)</title><rect x="24.7766%" y="533" width="6.5800%" height="15" fill="rgb(208,67,23)" fg:x="305" fg:w="81"/><text x="25.0266%" y="543.50">kernel::m..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (23 samples, 1.87%)</title><rect x="29.4882%" y="517" width="1.8684%" height="15" fill="rgb(206,207,50)" fg:x="363" fg:w="23"/><text x="29.7382%" y="527.50">s..</text></g><g><title>serde_json::de::from_trait (23 samples, 1.87%)</title><rect x="29.4882%" y="501" width="1.8684%" height="15" fill="rgb(213,211,42)" fg:x="363" fg:w="23"/><text x="29.7382%" y="511.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (23 samples, 1.87%)</title><rect x="29.4882%" y="485" width="1.8684%" height="15" fill="rgb(252,197,50)" fg:x="363" fg:w="23"/><text x="29.7382%" y="495.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (23 samples, 1.87%)</title><rect x="29.4882%" y="469" width="1.8684%" height="15" fill="rgb(251,211,41)" fg:x="363" fg:w="23"/><text x="29.7382%" y="479.50">&lt;..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.2754%" y="453" width="0.0812%" height="15" fill="rgb(229,211,5)" fg:x="385" fg:w="1"/><text x="31.5254%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="31.2754%" y="437" width="0.0812%" height="15" fill="rgb(239,36,31)" fg:x="385" fg:w="1"/><text x="31.5254%" y="447.50"></text></g><g><title>engine::session::Session::close (131 samples, 10.64%)</title><rect x="20.7961%" y="629" width="10.6418%" height="15" fill="rgb(248,67,31)" fg:x="256" fg:w="131"/><text x="21.0461%" y="639.50">engine::session:..</text></g><g><title>engine::session::state::State::close (128 samples, 10.40%)</title><rect x="21.0398%" y="613" width="10.3981%" height="15" fill="rgb(249,55,44)" fg:x="259" fg:w="128"/><text x="21.2898%" y="623.50">engine::session..</text></g><g><title>engine::session::state::State::flush_entities (127 samples, 10.32%)</title><rect x="21.1210%" y="597" width="10.3168%" height="15" fill="rgb(216,82,12)" fg:x="260" fg:w="127"/><text x="21.3710%" y="607.50">engine::session..</text></g><g><title>core::iter::adapters::try_process (125 samples, 10.15%)</title><rect x="21.2835%" y="581" width="10.1543%" height="15" fill="rgb(242,174,1)" fg:x="262" fg:w="125"/><text x="21.5335%" y="591.50">core::iter::ada..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (125 samples, 10.15%)</title><rect x="21.2835%" y="565" width="10.1543%" height="15" fill="rgb(208,120,29)" fg:x="262" fg:w="125"/><text x="21.5335%" y="575.50">&lt;alloc::vec::Ve..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (124 samples, 10.07%)</title><rect x="21.3647%" y="549" width="10.0731%" height="15" fill="rgb(221,105,43)" fg:x="263" fg:w="124"/><text x="21.6147%" y="559.50">engine::session..</text></g><g><title>kernel::perms::find_acls (1 samples, 0.08%)</title><rect x="31.3566%" y="533" width="0.0812%" height="15" fill="rgb(234,124,22)" fg:x="386" fg:w="1"/><text x="31.6066%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="31.4379%" y="581" width="0.0812%" height="15" fill="rgb(212,23,30)" fg:x="387" fg:w="1"/><text x="31.6879%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="31.5191%" y="549" width="0.0812%" height="15" fill="rgb(219,122,53)" fg:x="388" fg:w="1"/><text x="31.7691%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="31.7628%" y="501" width="0.0812%" height="15" fill="rgb(248,84,24)" fg:x="391" fg:w="1"/><text x="32.0128%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.7628%" y="485" width="0.0812%" height="15" fill="rgb(245,115,18)" fg:x="391" fg:w="1"/><text x="32.0128%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.7628%" y="469" width="0.0812%" height="15" fill="rgb(227,176,51)" fg:x="391" fg:w="1"/><text x="32.0128%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.7628%" y="453" width="0.0812%" height="15" fill="rgb(229,63,42)" fg:x="391" fg:w="1"/><text x="32.0128%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.7628%" y="437" width="0.0812%" height="15" fill="rgb(247,202,24)" fg:x="391" fg:w="1"/><text x="32.0128%" y="447.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="31.8440%" y="453" width="0.0812%" height="15" fill="rgb(244,173,20)" fg:x="392" fg:w="1"/><text x="32.0940%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.8440%" y="437" width="0.0812%" height="15" fill="rgb(242,81,47)" fg:x="392" fg:w="1"/><text x="32.0940%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.8440%" y="421" width="0.0812%" height="15" fill="rgb(231,185,54)" fg:x="392" fg:w="1"/><text x="32.0940%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.8440%" y="405" width="0.0812%" height="15" fill="rgb(243,55,32)" fg:x="392" fg:w="1"/><text x="32.0940%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.8440%" y="389" width="0.0812%" height="15" fill="rgb(208,167,19)" fg:x="392" fg:w="1"/><text x="32.0940%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.8440%" y="373" width="0.0812%" height="15" fill="rgb(231,72,35)" fg:x="392" fg:w="1"/><text x="32.0940%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.8440%" y="357" width="0.0812%" height="15" fill="rgb(250,173,51)" fg:x="392" fg:w="1"/><text x="32.0940%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.8440%" y="341" width="0.0812%" height="15" fill="rgb(209,5,22)" fg:x="392" fg:w="1"/><text x="32.0940%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.8440%" y="325" width="0.0812%" height="15" fill="rgb(250,174,19)" fg:x="392" fg:w="1"/><text x="32.0940%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.9253%" y="437" width="0.0812%" height="15" fill="rgb(217,3,49)" fg:x="393" fg:w="1"/><text x="32.1753%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.9253%" y="421" width="0.0812%" height="15" fill="rgb(218,225,5)" fg:x="393" fg:w="1"/><text x="32.1753%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.9253%" y="405" width="0.0812%" height="15" fill="rgb(236,89,11)" fg:x="393" fg:w="1"/><text x="32.1753%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.9253%" y="389" width="0.0812%" height="15" fill="rgb(206,33,28)" fg:x="393" fg:w="1"/><text x="32.1753%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.9253%" y="373" width="0.0812%" height="15" fill="rgb(241,56,42)" fg:x="393" fg:w="1"/><text x="32.1753%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.9253%" y="357" width="0.0812%" height="15" fill="rgb(222,44,11)" fg:x="393" fg:w="1"/><text x="32.1753%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.9253%" y="341" width="0.0812%" height="15" fill="rgb(234,111,20)" fg:x="393" fg:w="1"/><text x="32.1753%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.9253%" y="325" width="0.0812%" height="15" fill="rgb(237,77,6)" fg:x="393" fg:w="1"/><text x="32.1753%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.9253%" y="309" width="0.0812%" height="15" fill="rgb(235,111,23)" fg:x="393" fg:w="1"/><text x="32.1753%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.9253%" y="293" width="0.0812%" height="15" fill="rgb(251,135,29)" fg:x="393" fg:w="1"/><text x="32.1753%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.9253%" y="277" width="0.0812%" height="15" fill="rgb(217,57,1)" fg:x="393" fg:w="1"/><text x="32.1753%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.9253%" y="261" width="0.0812%" height="15" fill="rgb(249,119,31)" fg:x="393" fg:w="1"/><text x="32.1753%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.9253%" y="245" width="0.0812%" height="15" fill="rgb(233,164,33)" fg:x="393" fg:w="1"/><text x="32.1753%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.9253%" y="229" width="0.0812%" height="15" fill="rgb(250,217,43)" fg:x="393" fg:w="1"/><text x="32.1753%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9253%" y="213" width="0.0812%" height="15" fill="rgb(232,154,50)" fg:x="393" fg:w="1"/><text x="32.1753%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="32.0065%" y="357" width="0.1625%" height="15" fill="rgb(227,190,8)" fg:x="394" fg:w="2"/><text x="32.2565%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="32.0065%" y="341" width="0.1625%" height="15" fill="rgb(209,217,32)" fg:x="394" fg:w="2"/><text x="32.2565%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.0877%" y="325" width="0.0812%" height="15" fill="rgb(243,203,50)" fg:x="395" fg:w="1"/><text x="32.3377%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.1690%" y="357" width="0.1625%" height="15" fill="rgb(232,152,27)" fg:x="396" fg:w="2"/><text x="32.4190%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.3314%" y="341" width="0.0812%" height="15" fill="rgb(240,34,29)" fg:x="398" fg:w="1"/><text x="32.5814%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.3314%" y="325" width="0.0812%" height="15" fill="rgb(215,185,52)" fg:x="398" fg:w="1"/><text x="32.5814%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.3314%" y="309" width="0.0812%" height="15" fill="rgb(240,89,49)" fg:x="398" fg:w="1"/><text x="32.5814%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.3314%" y="293" width="0.0812%" height="15" fill="rgb(225,12,52)" fg:x="398" fg:w="1"/><text x="32.5814%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.3314%" y="277" width="0.0812%" height="15" fill="rgb(239,128,45)" fg:x="398" fg:w="1"/><text x="32.5814%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="32.4939%" y="293" width="0.0812%" height="15" fill="rgb(211,78,47)" fg:x="400" fg:w="1"/><text x="32.7439%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="32.4939%" y="277" width="0.0812%" height="15" fill="rgb(232,31,21)" fg:x="400" fg:w="1"/><text x="32.7439%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.4939%" y="261" width="0.0812%" height="15" fill="rgb(222,168,14)" fg:x="400" fg:w="1"/><text x="32.7439%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="32.0065%" y="437" width="0.6499%" height="15" fill="rgb(209,128,24)" fg:x="394" fg:w="8"/><text x="32.2565%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="32.0065%" y="421" width="0.6499%" height="15" fill="rgb(249,35,13)" fg:x="394" fg:w="8"/><text x="32.2565%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="32.0065%" y="405" width="0.6499%" height="15" fill="rgb(218,7,2)" fg:x="394" fg:w="8"/><text x="32.2565%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.65%)</title><rect x="32.0065%" y="389" width="0.6499%" height="15" fill="rgb(238,107,27)" fg:x="394" fg:w="8"/><text x="32.2565%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="32.0065%" y="373" width="0.6499%" height="15" fill="rgb(217,88,38)" fg:x="394" fg:w="8"/><text x="32.2565%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="32.3314%" y="357" width="0.3249%" height="15" fill="rgb(230,207,0)" fg:x="398" fg:w="4"/><text x="32.5814%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="32.4127%" y="341" width="0.2437%" height="15" fill="rgb(249,64,54)" fg:x="399" fg:w="3"/><text x="32.6627%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="32.4127%" y="325" width="0.2437%" height="15" fill="rgb(231,7,11)" fg:x="399" fg:w="3"/><text x="32.6627%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="32.4939%" y="309" width="0.1625%" height="15" fill="rgb(205,149,21)" fg:x="400" fg:w="2"/><text x="32.7439%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.5751%" y="293" width="0.0812%" height="15" fill="rgb(215,126,34)" fg:x="401" fg:w="1"/><text x="32.8251%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.5751%" y="277" width="0.0812%" height="15" fill="rgb(241,132,45)" fg:x="401" fg:w="1"/><text x="32.8251%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="32.5751%" y="261" width="0.0812%" height="15" fill="rgb(252,69,32)" fg:x="401" fg:w="1"/><text x="32.8251%" y="271.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="32.5751%" y="245" width="0.0812%" height="15" fill="rgb(232,204,19)" fg:x="401" fg:w="1"/><text x="32.8251%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.6564%" y="325" width="0.0812%" height="15" fill="rgb(249,15,47)" fg:x="402" fg:w="1"/><text x="32.9064%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.7376%" y="309" width="0.0812%" height="15" fill="rgb(209,227,23)" fg:x="403" fg:w="1"/><text x="32.9876%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.7376%" y="293" width="0.0812%" height="15" fill="rgb(248,92,24)" fg:x="403" fg:w="1"/><text x="32.9876%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.7376%" y="277" width="0.0812%" height="15" fill="rgb(247,59,2)" fg:x="403" fg:w="1"/><text x="32.9876%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.7376%" y="261" width="0.0812%" height="15" fill="rgb(221,30,5)" fg:x="403" fg:w="1"/><text x="32.9876%" y="271.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (14 samples, 1.14%)</title><rect x="31.7628%" y="517" width="1.1373%" height="15" fill="rgb(208,108,53)" fg:x="391" fg:w="14"/><text x="32.0128%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.06%)</title><rect x="31.8440%" y="501" width="1.0561%" height="15" fill="rgb(211,183,26)" fg:x="392" fg:w="13"/><text x="32.0940%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.06%)</title><rect x="31.8440%" y="485" width="1.0561%" height="15" fill="rgb(232,132,4)" fg:x="392" fg:w="13"/><text x="32.0940%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.06%)</title><rect x="31.8440%" y="469" width="1.0561%" height="15" fill="rgb(253,128,37)" fg:x="392" fg:w="13"/><text x="32.0940%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="31.9253%" y="453" width="0.9748%" height="15" fill="rgb(221,58,24)" fg:x="393" fg:w="12"/><text x="32.1753%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="32.6564%" y="437" width="0.2437%" height="15" fill="rgb(230,54,45)" fg:x="402" fg:w="3"/><text x="32.9064%" y="447.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="32.6564%" y="421" width="0.2437%" height="15" fill="rgb(254,21,18)" fg:x="402" fg:w="3"/><text x="32.9064%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="32.6564%" y="405" width="0.2437%" height="15" fill="rgb(221,108,0)" fg:x="402" fg:w="3"/><text x="32.9064%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="32.6564%" y="389" width="0.2437%" height="15" fill="rgb(206,95,1)" fg:x="402" fg:w="3"/><text x="32.9064%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="32.6564%" y="373" width="0.2437%" height="15" fill="rgb(237,52,5)" fg:x="402" fg:w="3"/><text x="32.9064%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="32.6564%" y="357" width="0.2437%" height="15" fill="rgb(218,150,34)" fg:x="402" fg:w="3"/><text x="32.9064%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="32.6564%" y="341" width="0.2437%" height="15" fill="rgb(235,194,28)" fg:x="402" fg:w="3"/><text x="32.9064%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="32.7376%" y="325" width="0.1625%" height="15" fill="rgb(245,92,18)" fg:x="403" fg:w="2"/><text x="32.9876%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.8188%" y="309" width="0.0812%" height="15" fill="rgb(253,203,53)" fg:x="404" fg:w="1"/><text x="33.0688%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.8188%" y="293" width="0.0812%" height="15" fill="rgb(249,185,47)" fg:x="404" fg:w="1"/><text x="33.0688%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (17 samples, 1.38%)</title><rect x="31.6003%" y="533" width="1.3810%" height="15" fill="rgb(252,194,52)" fg:x="389" fg:w="17"/><text x="31.8503%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="32.9001%" y="517" width="0.0812%" height="15" fill="rgb(210,53,36)" fg:x="405" fg:w="1"/><text x="33.1501%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="32.9001%" y="501" width="0.0812%" height="15" fill="rgb(237,37,25)" fg:x="405" fg:w="1"/><text x="33.1501%" y="511.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="32.9001%" y="485" width="0.0812%" height="15" fill="rgb(242,116,27)" fg:x="405" fg:w="1"/><text x="33.1501%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.9001%" y="469" width="0.0812%" height="15" fill="rgb(213,185,26)" fg:x="405" fg:w="1"/><text x="33.1501%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="33.1438%" y="357" width="0.0812%" height="15" fill="rgb(225,204,8)" fg:x="408" fg:w="1"/><text x="33.3938%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.1438%" y="341" width="0.0812%" height="15" fill="rgb(254,111,37)" fg:x="408" fg:w="1"/><text x="33.3938%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.3063%" y="325" width="0.1625%" height="15" fill="rgb(242,35,9)" fg:x="410" fg:w="2"/><text x="33.5563%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="33.4687%" y="325" width="0.1625%" height="15" fill="rgb(232,138,49)" fg:x="412" fg:w="2"/><text x="33.7187%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="33.4687%" y="309" width="0.1625%" height="15" fill="rgb(247,56,4)" fg:x="412" fg:w="2"/><text x="33.7187%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.5500%" y="293" width="0.0812%" height="15" fill="rgb(226,179,17)" fg:x="413" fg:w="1"/><text x="33.8000%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.6312%" y="277" width="0.0812%" height="15" fill="rgb(216,163,45)" fg:x="414" fg:w="1"/><text x="33.8812%" y="287.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (8 samples, 0.65%)</title><rect x="33.1438%" y="373" width="0.6499%" height="15" fill="rgb(211,157,3)" fg:x="408" fg:w="8"/><text x="33.3938%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (7 samples, 0.57%)</title><rect x="33.2250%" y="357" width="0.5686%" height="15" fill="rgb(234,44,20)" fg:x="409" fg:w="7"/><text x="33.4750%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="33.2250%" y="341" width="0.5686%" height="15" fill="rgb(254,138,23)" fg:x="409" fg:w="7"/><text x="33.4750%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="33.6312%" y="325" width="0.1625%" height="15" fill="rgb(206,119,39)" fg:x="414" fg:w="2"/><text x="33.8812%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="33.6312%" y="309" width="0.1625%" height="15" fill="rgb(231,105,52)" fg:x="414" fg:w="2"/><text x="33.8812%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="33.6312%" y="293" width="0.1625%" height="15" fill="rgb(250,20,5)" fg:x="414" fg:w="2"/><text x="33.8812%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.7124%" y="277" width="0.0812%" height="15" fill="rgb(215,198,30)" fg:x="415" fg:w="1"/><text x="33.9624%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (9 samples, 0.73%)</title><rect x="33.1438%" y="389" width="0.7311%" height="15" fill="rgb(246,142,8)" fg:x="408" fg:w="9"/><text x="33.3938%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="33.7937%" y="373" width="0.0812%" height="15" fill="rgb(243,26,38)" fg:x="416" fg:w="1"/><text x="34.0437%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="33.7937%" y="357" width="0.0812%" height="15" fill="rgb(205,133,28)" fg:x="416" fg:w="1"/><text x="34.0437%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7937%" y="341" width="0.0812%" height="15" fill="rgb(212,34,0)" fg:x="416" fg:w="1"/><text x="34.0437%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="34.0374%" y="357" width="0.0812%" height="15" fill="rgb(251,226,22)" fg:x="419" fg:w="1"/><text x="34.2874%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.0374%" y="341" width="0.0812%" height="15" fill="rgb(252,119,9)" fg:x="419" fg:w="1"/><text x="34.2874%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.0374%" y="325" width="0.0812%" height="15" fill="rgb(213,150,50)" fg:x="419" fg:w="1"/><text x="34.2874%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="34.0374%" y="309" width="0.0812%" height="15" fill="rgb(212,24,39)" fg:x="419" fg:w="1"/><text x="34.2874%" y="319.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="34.1186%" y="341" width="0.0812%" height="15" fill="rgb(213,46,39)" fg:x="420" fg:w="1"/><text x="34.3686%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="34.1998%" y="309" width="0.1625%" height="15" fill="rgb(239,106,12)" fg:x="421" fg:w="2"/><text x="34.4498%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.2811%" y="293" width="0.0812%" height="15" fill="rgb(249,229,21)" fg:x="422" fg:w="1"/><text x="34.5311%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="34.4435%" y="277" width="0.1625%" height="15" fill="rgb(212,158,3)" fg:x="424" fg:w="2"/><text x="34.6935%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.6060%" y="245" width="0.0812%" height="15" fill="rgb(253,26,48)" fg:x="426" fg:w="1"/><text x="34.8560%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.6060%" y="229" width="0.0812%" height="15" fill="rgb(238,178,20)" fg:x="426" fg:w="1"/><text x="34.8560%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (8 samples, 0.65%)</title><rect x="34.1186%" y="357" width="0.6499%" height="15" fill="rgb(208,86,15)" fg:x="420" fg:w="8"/><text x="34.3686%" y="367.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.57%)</title><rect x="34.1998%" y="341" width="0.5686%" height="15" fill="rgb(239,42,53)" fg:x="421" fg:w="7"/><text x="34.4498%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="34.1998%" y="325" width="0.5686%" height="15" fill="rgb(245,226,8)" fg:x="421" fg:w="7"/><text x="34.4498%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (5 samples, 0.41%)</title><rect x="34.3623%" y="309" width="0.4062%" height="15" fill="rgb(216,176,32)" fg:x="423" fg:w="5"/><text x="34.6123%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="34.3623%" y="293" width="0.4062%" height="15" fill="rgb(231,186,21)" fg:x="423" fg:w="5"/><text x="34.6123%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="34.6060%" y="277" width="0.1625%" height="15" fill="rgb(205,95,49)" fg:x="426" fg:w="2"/><text x="34.8560%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="34.6060%" y="261" width="0.1625%" height="15" fill="rgb(217,145,8)" fg:x="426" fg:w="2"/><text x="34.8560%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="34.6872%" y="245" width="0.0812%" height="15" fill="rgb(239,144,48)" fg:x="427" fg:w="1"/><text x="34.9372%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="34.6872%" y="229" width="0.0812%" height="15" fill="rgb(214,189,23)" fg:x="427" fg:w="1"/><text x="34.9372%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="34.7685%" y="341" width="0.0812%" height="15" fill="rgb(229,157,17)" fg:x="428" fg:w="1"/><text x="35.0185%" y="351.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="34.8497%" y="341" width="0.0812%" height="15" fill="rgb(230,5,48)" fg:x="429" fg:w="1"/><text x="35.0997%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.8497%" y="325" width="0.0812%" height="15" fill="rgb(224,156,48)" fg:x="429" fg:w="1"/><text x="35.0997%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.8497%" y="309" width="0.0812%" height="15" fill="rgb(223,14,29)" fg:x="429" fg:w="1"/><text x="35.0997%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="35.1747%" y="309" width="0.1625%" height="15" fill="rgb(229,96,36)" fg:x="433" fg:w="2"/><text x="35.4247%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="35.1747%" y="293" width="0.1625%" height="15" fill="rgb(231,102,53)" fg:x="433" fg:w="2"/><text x="35.4247%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2559%" y="277" width="0.0812%" height="15" fill="rgb(210,77,38)" fg:x="434" fg:w="1"/><text x="35.5059%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2559%" y="261" width="0.0812%" height="15" fill="rgb(235,131,6)" fg:x="434" fg:w="1"/><text x="35.5059%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.2559%" y="245" width="0.0812%" height="15" fill="rgb(252,55,38)" fg:x="434" fg:w="1"/><text x="35.5059%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.2559%" y="229" width="0.0812%" height="15" fill="rgb(246,38,14)" fg:x="434" fg:w="1"/><text x="35.5059%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.2559%" y="213" width="0.0812%" height="15" fill="rgb(242,27,5)" fg:x="434" fg:w="1"/><text x="35.5059%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.2559%" y="197" width="0.0812%" height="15" fill="rgb(228,65,35)" fg:x="434" fg:w="1"/><text x="35.5059%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.2559%" y="181" width="0.0812%" height="15" fill="rgb(245,93,11)" fg:x="434" fg:w="1"/><text x="35.5059%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.2559%" y="165" width="0.0812%" height="15" fill="rgb(213,1,31)" fg:x="434" fg:w="1"/><text x="35.5059%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.2559%" y="149" width="0.0812%" height="15" fill="rgb(237,205,14)" fg:x="434" fg:w="1"/><text x="35.5059%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.2559%" y="133" width="0.0812%" height="15" fill="rgb(232,118,45)" fg:x="434" fg:w="1"/><text x="35.5059%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.2559%" y="117" width="0.0812%" height="15" fill="rgb(218,5,6)" fg:x="434" fg:w="1"/><text x="35.5059%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.2559%" y="101" width="0.0812%" height="15" fill="rgb(251,87,51)" fg:x="434" fg:w="1"/><text x="35.5059%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.65%)</title><rect x="34.7685%" y="357" width="0.6499%" height="15" fill="rgb(207,225,20)" fg:x="428" fg:w="8"/><text x="35.0185%" y="367.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.49%)</title><rect x="34.9310%" y="341" width="0.4874%" height="15" fill="rgb(222,78,54)" fg:x="430" fg:w="6"/><text x="35.1810%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="34.9310%" y="325" width="0.4874%" height="15" fill="rgb(232,85,16)" fg:x="430" fg:w="6"/><text x="35.1810%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="35.3371%" y="309" width="0.0812%" height="15" fill="rgb(244,25,33)" fg:x="435" fg:w="1"/><text x="35.5871%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.3371%" y="293" width="0.0812%" height="15" fill="rgb(233,24,36)" fg:x="435" fg:w="1"/><text x="35.5871%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="35.3371%" y="277" width="0.0812%" height="15" fill="rgb(253,49,54)" fg:x="435" fg:w="1"/><text x="35.5871%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.3371%" y="261" width="0.0812%" height="15" fill="rgb(245,12,22)" fg:x="435" fg:w="1"/><text x="35.5871%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.3371%" y="245" width="0.0812%" height="15" fill="rgb(253,141,28)" fg:x="435" fg:w="1"/><text x="35.5871%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.3371%" y="229" width="0.0812%" height="15" fill="rgb(225,207,27)" fg:x="435" fg:w="1"/><text x="35.5871%" y="239.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="35.4996%" y="325" width="0.0812%" height="15" fill="rgb(220,84,2)" fg:x="437" fg:w="1"/><text x="35.7496%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="35.5808%" y="165" width="0.1625%" height="15" fill="rgb(224,37,37)" fg:x="438" fg:w="2"/><text x="35.8308%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="35.5808%" y="149" width="0.1625%" height="15" fill="rgb(220,143,18)" fg:x="438" fg:w="2"/><text x="35.8308%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="35.5808%" y="133" width="0.1625%" height="15" fill="rgb(210,88,33)" fg:x="438" fg:w="2"/><text x="35.8308%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="35.5808%" y="117" width="0.1625%" height="15" fill="rgb(219,87,51)" fg:x="438" fg:w="2"/><text x="35.8308%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="35.5808%" y="101" width="0.1625%" height="15" fill="rgb(211,7,35)" fg:x="438" fg:w="2"/><text x="35.8308%" y="111.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="35.5808%" y="85" width="0.1625%" height="15" fill="rgb(232,77,2)" fg:x="438" fg:w="2"/><text x="35.8308%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.5808%" y="69" width="0.1625%" height="15" fill="rgb(249,94,25)" fg:x="438" fg:w="2"/><text x="35.8308%" y="79.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="35.5808%" y="261" width="0.2437%" height="15" fill="rgb(215,112,2)" fg:x="438" fg:w="3"/><text x="35.8308%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="35.5808%" y="245" width="0.2437%" height="15" fill="rgb(226,115,48)" fg:x="438" fg:w="3"/><text x="35.8308%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="35.5808%" y="229" width="0.2437%" height="15" fill="rgb(249,196,10)" fg:x="438" fg:w="3"/><text x="35.8308%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="35.5808%" y="213" width="0.2437%" height="15" fill="rgb(237,109,14)" fg:x="438" fg:w="3"/><text x="35.8308%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="35.5808%" y="197" width="0.2437%" height="15" fill="rgb(217,103,53)" fg:x="438" fg:w="3"/><text x="35.8308%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="35.5808%" y="181" width="0.2437%" height="15" fill="rgb(244,137,9)" fg:x="438" fg:w="3"/><text x="35.8308%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="35.7433%" y="165" width="0.0812%" height="15" fill="rgb(227,201,3)" fg:x="440" fg:w="1"/><text x="35.9933%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="35.7433%" y="149" width="0.0812%" height="15" fill="rgb(243,94,6)" fg:x="440" fg:w="1"/><text x="35.9933%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="35.5808%" y="293" width="0.3249%" height="15" fill="rgb(235,118,5)" fg:x="438" fg:w="4"/><text x="35.8308%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="35.5808%" y="277" width="0.3249%" height="15" fill="rgb(247,10,30)" fg:x="438" fg:w="4"/><text x="35.8308%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.8245%" y="261" width="0.0812%" height="15" fill="rgb(205,26,28)" fg:x="441" fg:w="1"/><text x="36.0745%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.8245%" y="245" width="0.0812%" height="15" fill="rgb(206,99,35)" fg:x="441" fg:w="1"/><text x="36.0745%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.8245%" y="229" width="0.0812%" height="15" fill="rgb(238,130,40)" fg:x="441" fg:w="1"/><text x="36.0745%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.8245%" y="213" width="0.0812%" height="15" fill="rgb(224,126,31)" fg:x="441" fg:w="1"/><text x="36.0745%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.8245%" y="197" width="0.0812%" height="15" fill="rgb(254,105,17)" fg:x="441" fg:w="1"/><text x="36.0745%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="35.8245%" y="181" width="0.0812%" height="15" fill="rgb(216,87,36)" fg:x="441" fg:w="1"/><text x="36.0745%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="35.8245%" y="165" width="0.0812%" height="15" fill="rgb(240,21,12)" fg:x="441" fg:w="1"/><text x="36.0745%" y="175.50"></text></g><g><title>kernel::model::EntityPtr::gid (10 samples, 0.81%)</title><rect x="35.4184%" y="357" width="0.8123%" height="15" fill="rgb(245,192,34)" fg:x="436" fg:w="10"/><text x="35.6684%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (10 samples, 0.81%)</title><rect x="35.4184%" y="341" width="0.8123%" height="15" fill="rgb(226,100,49)" fg:x="436" fg:w="10"/><text x="35.6684%" y="351.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.65%)</title><rect x="35.5808%" y="325" width="0.6499%" height="15" fill="rgb(245,188,27)" fg:x="438" fg:w="8"/><text x="35.8308%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.65%)</title><rect x="35.5808%" y="309" width="0.6499%" height="15" fill="rgb(212,170,8)" fg:x="438" fg:w="8"/><text x="35.8308%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="35.9058%" y="293" width="0.3249%" height="15" fill="rgb(217,113,29)" fg:x="442" fg:w="4"/><text x="36.1558%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.9058%" y="277" width="0.3249%" height="15" fill="rgb(237,30,3)" fg:x="442" fg:w="4"/><text x="36.1558%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="35.9058%" y="261" width="0.3249%" height="15" fill="rgb(227,19,28)" fg:x="442" fg:w="4"/><text x="36.1558%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.9058%" y="245" width="0.3249%" height="15" fill="rgb(239,172,45)" fg:x="442" fg:w="4"/><text x="36.1558%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (4 samples, 0.32%)</title><rect x="35.9058%" y="229" width="0.3249%" height="15" fill="rgb(254,55,39)" fg:x="442" fg:w="4"/><text x="36.1558%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.9870%" y="213" width="0.2437%" height="15" fill="rgb(249,208,12)" fg:x="443" fg:w="3"/><text x="36.2370%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="36.2307%" y="309" width="0.0812%" height="15" fill="rgb(240,52,13)" fg:x="446" fg:w="1"/><text x="36.4807%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="36.2307%" y="293" width="0.0812%" height="15" fill="rgb(252,149,13)" fg:x="446" fg:w="1"/><text x="36.4807%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="36.2307%" y="277" width="0.0812%" height="15" fill="rgb(232,81,48)" fg:x="446" fg:w="1"/><text x="36.4807%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="36.2307%" y="261" width="0.0812%" height="15" fill="rgb(222,144,2)" fg:x="446" fg:w="1"/><text x="36.4807%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="36.2307%" y="245" width="0.0812%" height="15" fill="rgb(216,81,32)" fg:x="446" fg:w="1"/><text x="36.4807%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="36.2307%" y="229" width="0.0812%" height="15" fill="rgb(244,78,51)" fg:x="446" fg:w="1"/><text x="36.4807%" y="239.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="36.2307%" y="213" width="0.0812%" height="15" fill="rgb(217,66,21)" fg:x="446" fg:w="1"/><text x="36.4807%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="36.2307%" y="197" width="0.0812%" height="15" fill="rgb(247,101,42)" fg:x="446" fg:w="1"/><text x="36.4807%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="36.2307%" y="181" width="0.0812%" height="15" fill="rgb(227,81,39)" fg:x="446" fg:w="1"/><text x="36.4807%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="36.2307%" y="165" width="0.0812%" height="15" fill="rgb(220,223,44)" fg:x="446" fg:w="1"/><text x="36.4807%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="36.2307%" y="149" width="0.0812%" height="15" fill="rgb(205,218,2)" fg:x="446" fg:w="1"/><text x="36.4807%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="36.4744%" y="277" width="0.0812%" height="15" fill="rgb(212,207,28)" fg:x="449" fg:w="1"/><text x="36.7244%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="36.4744%" y="261" width="0.0812%" height="15" fill="rgb(224,12,41)" fg:x="449" fg:w="1"/><text x="36.7244%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="36.4744%" y="245" width="0.0812%" height="15" fill="rgb(216,118,12)" fg:x="449" fg:w="1"/><text x="36.7244%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="36.4744%" y="229" width="0.0812%" height="15" fill="rgb(252,97,46)" fg:x="449" fg:w="1"/><text x="36.7244%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="36.4744%" y="213" width="0.0812%" height="15" fill="rgb(244,206,19)" fg:x="449" fg:w="1"/><text x="36.7244%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="36.4744%" y="197" width="0.0812%" height="15" fill="rgb(231,84,31)" fg:x="449" fg:w="1"/><text x="36.7244%" y="207.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="36.4744%" y="181" width="0.0812%" height="15" fill="rgb(244,133,0)" fg:x="449" fg:w="1"/><text x="36.7244%" y="191.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="36.4744%" y="165" width="0.0812%" height="15" fill="rgb(223,15,50)" fg:x="449" fg:w="1"/><text x="36.7244%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="36.7181%" y="245" width="0.0812%" height="15" fill="rgb(250,118,49)" fg:x="452" fg:w="1"/><text x="36.9681%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="36.7181%" y="229" width="0.0812%" height="15" fill="rgb(248,25,38)" fg:x="452" fg:w="1"/><text x="36.9681%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="36.7181%" y="213" width="0.0812%" height="15" fill="rgb(215,70,14)" fg:x="452" fg:w="1"/><text x="36.9681%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.7994%" y="229" width="0.0812%" height="15" fill="rgb(215,28,15)" fg:x="453" fg:w="1"/><text x="37.0494%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="36.5556%" y="277" width="0.4062%" height="15" fill="rgb(243,6,28)" fg:x="450" fg:w="5"/><text x="36.8056%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="36.5556%" y="261" width="0.4062%" height="15" fill="rgb(222,130,1)" fg:x="450" fg:w="5"/><text x="36.8056%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="36.7994%" y="245" width="0.1625%" height="15" fill="rgb(236,166,44)" fg:x="453" fg:w="2"/><text x="37.0494%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="36.8806%" y="229" width="0.0812%" height="15" fill="rgb(221,108,14)" fg:x="454" fg:w="1"/><text x="37.1306%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.8806%" y="213" width="0.0812%" height="15" fill="rgb(252,3,45)" fg:x="454" fg:w="1"/><text x="37.1306%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.8806%" y="197" width="0.0812%" height="15" fill="rgb(237,68,30)" fg:x="454" fg:w="1"/><text x="37.1306%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="37.0431%" y="229" width="0.2437%" height="15" fill="rgb(211,79,22)" fg:x="456" fg:w="3"/><text x="37.2931%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="37.0431%" y="213" width="0.2437%" height="15" fill="rgb(252,185,21)" fg:x="456" fg:w="3"/><text x="37.2931%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.2868%" y="229" width="0.0812%" height="15" fill="rgb(225,189,26)" fg:x="459" fg:w="1"/><text x="37.5368%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="37.3680%" y="229" width="0.0812%" height="15" fill="rgb(241,30,40)" fg:x="460" fg:w="1"/><text x="37.6180%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="37.4492%" y="229" width="0.0812%" height="15" fill="rgb(235,215,44)" fg:x="461" fg:w="1"/><text x="37.6992%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.4492%" y="213" width="0.0812%" height="15" fill="rgb(205,8,29)" fg:x="461" fg:w="1"/><text x="37.6992%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="37.5305%" y="229" width="0.0812%" height="15" fill="rgb(241,137,42)" fg:x="462" fg:w="1"/><text x="37.7805%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="37.7742%" y="213" width="0.2437%" height="15" fill="rgb(237,155,2)" fg:x="465" fg:w="3"/><text x="38.0242%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.1803%" y="197" width="0.0812%" height="15" fill="rgb(245,29,42)" fg:x="470" fg:w="1"/><text x="38.4303%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="38.2616%" y="197" width="0.0812%" height="15" fill="rgb(234,101,35)" fg:x="471" fg:w="1"/><text x="38.5116%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.81%)</title><rect x="38.3428%" y="197" width="0.8123%" height="15" fill="rgb(228,64,37)" fg:x="472" fg:w="10"/><text x="38.5928%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.22%)</title><rect x="38.0179%" y="213" width="1.2185%" height="15" fill="rgb(217,214,36)" fg:x="468" fg:w="15"/><text x="38.2679%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="39.1552%" y="197" width="0.0812%" height="15" fill="rgb(243,70,3)" fg:x="482" fg:w="1"/><text x="39.4052%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="39.2364%" y="213" width="0.0812%" height="15" fill="rgb(253,158,52)" fg:x="483" fg:w="1"/><text x="39.4864%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.65%)</title><rect x="39.3176%" y="213" width="0.6499%" height="15" fill="rgb(234,111,54)" fg:x="484" fg:w="8"/><text x="39.5676%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="39.3176%" y="197" width="0.6499%" height="15" fill="rgb(217,70,32)" fg:x="484" fg:w="8"/><text x="39.5676%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="39.8863%" y="181" width="0.0812%" height="15" fill="rgb(234,18,33)" fg:x="491" fg:w="1"/><text x="40.1363%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.8863%" y="165" width="0.0812%" height="15" fill="rgb(234,12,49)" fg:x="491" fg:w="1"/><text x="40.1363%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="39.9675%" y="213" width="0.0812%" height="15" fill="rgb(236,10,21)" fg:x="492" fg:w="1"/><text x="40.2175%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="40.0487%" y="213" width="0.0812%" height="15" fill="rgb(248,182,45)" fg:x="493" fg:w="1"/><text x="40.2987%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="40.3737%" y="149" width="0.0812%" height="15" fill="rgb(217,95,36)" fg:x="497" fg:w="1"/><text x="40.6237%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.4549%" y="149" width="0.0812%" height="15" fill="rgb(212,110,31)" fg:x="498" fg:w="1"/><text x="40.7049%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.4549%" y="133" width="0.0812%" height="15" fill="rgb(206,32,53)" fg:x="498" fg:w="1"/><text x="40.7049%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.4549%" y="117" width="0.0812%" height="15" fill="rgb(246,141,37)" fg:x="498" fg:w="1"/><text x="40.7049%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.4549%" y="101" width="0.0812%" height="15" fill="rgb(219,16,7)" fg:x="498" fg:w="1"/><text x="40.7049%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.5361%" y="117" width="0.0812%" height="15" fill="rgb(230,205,45)" fg:x="499" fg:w="1"/><text x="40.7861%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.5361%" y="101" width="0.0812%" height="15" fill="rgb(231,43,49)" fg:x="499" fg:w="1"/><text x="40.7861%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.5361%" y="85" width="0.0812%" height="15" fill="rgb(212,106,34)" fg:x="499" fg:w="1"/><text x="40.7861%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="40.5361%" y="149" width="0.1625%" height="15" fill="rgb(206,83,17)" fg:x="499" fg:w="2"/><text x="40.7861%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="40.5361%" y="133" width="0.1625%" height="15" fill="rgb(244,154,49)" fg:x="499" fg:w="2"/><text x="40.7861%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="40.6174%" y="117" width="0.0812%" height="15" fill="rgb(244,149,49)" fg:x="500" fg:w="1"/><text x="40.8674%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.6174%" y="101" width="0.0812%" height="15" fill="rgb(227,134,18)" fg:x="500" fg:w="1"/><text x="40.8674%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.6174%" y="85" width="0.0812%" height="15" fill="rgb(237,116,36)" fg:x="500" fg:w="1"/><text x="40.8674%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.6174%" y="69" width="0.0812%" height="15" fill="rgb(205,129,40)" fg:x="500" fg:w="1"/><text x="40.8674%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.6174%" y="53" width="0.0812%" height="15" fill="rgb(236,178,4)" fg:x="500" fg:w="1"/><text x="40.8674%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (53 samples, 4.31%)</title><rect x="40.6986%" y="149" width="4.3054%" height="15" fill="rgb(251,76,53)" fg:x="501" fg:w="53"/><text x="40.9486%" y="159.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (53 samples, 4.31%)</title><rect x="40.6986%" y="133" width="4.3054%" height="15" fill="rgb(242,92,40)" fg:x="501" fg:w="53"/><text x="40.9486%" y="143.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (53 samples, 4.31%)</title><rect x="40.6986%" y="117" width="4.3054%" height="15" fill="rgb(209,45,30)" fg:x="501" fg:w="53"/><text x="40.9486%" y="127.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="45.0041%" y="149" width="0.4062%" height="15" fill="rgb(218,157,36)" fg:x="554" fg:w="5"/><text x="45.2541%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3290%" y="133" width="0.0812%" height="15" fill="rgb(222,186,16)" fg:x="558" fg:w="1"/><text x="45.5790%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 5.36%)</title><rect x="40.1300%" y="197" width="5.3615%" height="15" fill="rgb(254,72,35)" fg:x="494" fg:w="66"/><text x="40.3800%" y="207.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.36%)</title><rect x="40.1300%" y="181" width="5.3615%" height="15" fill="rgb(224,25,35)" fg:x="494" fg:w="66"/><text x="40.3800%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (65 samples, 5.28%)</title><rect x="40.2112%" y="165" width="5.2803%" height="15" fill="rgb(206,135,52)" fg:x="495" fg:w="65"/><text x="40.4612%" y="175.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="45.4102%" y="149" width="0.0812%" height="15" fill="rgb(229,174,47)" fg:x="559" fg:w="1"/><text x="45.6602%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.5727%" y="181" width="0.0812%" height="15" fill="rgb(242,184,21)" fg:x="561" fg:w="1"/><text x="45.8227%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.6539%" y="181" width="0.0812%" height="15" fill="rgb(213,22,45)" fg:x="562" fg:w="1"/><text x="45.9039%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="45.7352%" y="181" width="0.4062%" height="15" fill="rgb(237,81,54)" fg:x="563" fg:w="5"/><text x="45.9852%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.0601%" y="165" width="0.0812%" height="15" fill="rgb(248,177,18)" fg:x="567" fg:w="1"/><text x="46.3101%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.0601%" y="149" width="0.0812%" height="15" fill="rgb(254,31,16)" fg:x="567" fg:w="1"/><text x="46.3101%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.0601%" y="133" width="0.0812%" height="15" fill="rgb(235,20,31)" fg:x="567" fg:w="1"/><text x="46.3101%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="46.1413%" y="181" width="0.1625%" height="15" fill="rgb(240,56,43)" fg:x="568" fg:w="2"/><text x="46.3913%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (109 samples, 8.85%)</title><rect x="37.6117%" y="229" width="8.8546%" height="15" fill="rgb(237,197,51)" fg:x="463" fg:w="109"/><text x="37.8617%" y="239.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (78 samples, 6.34%)</title><rect x="40.1300%" y="213" width="6.3363%" height="15" fill="rgb(241,162,44)" fg:x="494" fg:w="78"/><text x="40.3800%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.97%)</title><rect x="45.4915%" y="197" width="0.9748%" height="15" fill="rgb(224,23,20)" fg:x="560" fg:w="12"/><text x="45.7415%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="46.3038%" y="181" width="0.1625%" height="15" fill="rgb(250,109,34)" fg:x="570" fg:w="2"/><text x="46.5538%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="46.3851%" y="165" width="0.0812%" height="15" fill="rgb(214,175,50)" fg:x="571" fg:w="1"/><text x="46.6351%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="46.4663%" y="181" width="0.0812%" height="15" fill="rgb(213,182,5)" fg:x="572" fg:w="1"/><text x="46.7163%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="46.5475%" y="181" width="0.0812%" height="15" fill="rgb(209,199,19)" fg:x="573" fg:w="1"/><text x="46.7975%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="46.5475%" y="165" width="0.0812%" height="15" fill="rgb(236,224,42)" fg:x="573" fg:w="1"/><text x="46.7975%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="46.5475%" y="149" width="0.0812%" height="15" fill="rgb(246,226,29)" fg:x="573" fg:w="1"/><text x="46.7975%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="46.5475%" y="133" width="0.0812%" height="15" fill="rgb(227,223,11)" fg:x="573" fg:w="1"/><text x="46.7975%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="46.6288%" y="181" width="0.0812%" height="15" fill="rgb(219,7,51)" fg:x="574" fg:w="1"/><text x="46.8788%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::into_item (1 samples, 0.08%)</title><rect x="46.6288%" y="165" width="0.0812%" height="15" fill="rgb(245,167,10)" fg:x="574" fg:w="1"/><text x="46.8788%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.57%)</title><rect x="46.4663%" y="197" width="0.5686%" height="15" fill="rgb(237,224,16)" fg:x="572" fg:w="7"/><text x="46.7163%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="46.7100%" y="181" width="0.3249%" height="15" fill="rgb(226,132,13)" fg:x="575" fg:w="4"/><text x="46.9600%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="46.7912%" y="165" width="0.2437%" height="15" fill="rgb(214,140,3)" fg:x="576" fg:w="3"/><text x="47.0412%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.7912%" y="149" width="0.2437%" height="15" fill="rgb(221,177,4)" fg:x="576" fg:w="3"/><text x="47.0412%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="46.7912%" y="133" width="0.2437%" height="15" fill="rgb(238,139,3)" fg:x="576" fg:w="3"/><text x="47.0412%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.65%)</title><rect x="46.4663%" y="229" width="0.6499%" height="15" fill="rgb(216,17,39)" fg:x="572" fg:w="8"/><text x="46.7163%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="46.4663%" y="213" width="0.6499%" height="15" fill="rgb(238,120,9)" fg:x="572" fg:w="8"/><text x="46.7163%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="47.0349%" y="197" width="0.0812%" height="15" fill="rgb(244,92,53)" fg:x="579" fg:w="1"/><text x="47.2849%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.0349%" y="181" width="0.0812%" height="15" fill="rgb(224,148,33)" fg:x="579" fg:w="1"/><text x="47.2849%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="47.1974%" y="181" width="0.0812%" height="15" fill="rgb(243,6,36)" fg:x="581" fg:w="1"/><text x="47.4474%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="47.1974%" y="197" width="0.1625%" height="15" fill="rgb(230,102,11)" fg:x="581" fg:w="2"/><text x="47.4474%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="47.2786%" y="181" width="0.0812%" height="15" fill="rgb(234,148,36)" fg:x="582" fg:w="1"/><text x="47.5286%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="47.3599%" y="181" width="0.0812%" height="15" fill="rgb(251,153,25)" fg:x="583" fg:w="1"/><text x="47.6099%" y="191.50"></text></g><g><title>regex::regex::string::Regex::new (130 samples, 10.56%)</title><rect x="36.9618%" y="277" width="10.5605%" height="15" fill="rgb(215,129,8)" fg:x="455" fg:w="130"/><text x="37.2118%" y="287.50">regex::regex::s..</text></g><g><title>regex::builders::Builder::build_one_string (130 samples, 10.56%)</title><rect x="36.9618%" y="261" width="10.5605%" height="15" fill="rgb(224,128,35)" fg:x="455" fg:w="130"/><text x="37.2118%" y="271.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (130 samples, 10.56%)</title><rect x="36.9618%" y="245" width="10.5605%" height="15" fill="rgb(237,56,52)" fg:x="455" fg:w="130"/><text x="37.2118%" y="255.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="47.1162%" y="229" width="0.4062%" height="15" fill="rgb(234,213,19)" fg:x="580" fg:w="5"/><text x="47.3662%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="47.1162%" y="213" width="0.4062%" height="15" fill="rgb(252,82,23)" fg:x="580" fg:w="5"/><text x="47.3662%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="47.3599%" y="197" width="0.1625%" height="15" fill="rgb(254,201,21)" fg:x="583" fg:w="2"/><text x="47.6099%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="47.4411%" y="181" width="0.0812%" height="15" fill="rgb(250,186,11)" fg:x="584" fg:w="1"/><text x="47.6911%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.0910%" y="197" width="0.0812%" height="15" fill="rgb(211,174,5)" fg:x="592" fg:w="1"/><text x="48.3410%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.0910%" y="181" width="0.0812%" height="15" fill="rgb(214,121,10)" fg:x="592" fg:w="1"/><text x="48.3410%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.0910%" y="165" width="0.0812%" height="15" fill="rgb(241,66,2)" fg:x="592" fg:w="1"/><text x="48.3410%" y="175.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (147 samples, 11.94%)</title><rect x="36.3119%" y="293" width="11.9415%" height="15" fill="rgb(220,167,19)" fg:x="447" fg:w="147"/><text x="36.5619%" y="303.50">indefinite::helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="47.5223%" y="277" width="0.7311%" height="15" fill="rgb(231,54,50)" fg:x="585" fg:w="9"/><text x="47.7723%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="47.5223%" y="261" width="0.7311%" height="15" fill="rgb(239,217,53)" fg:x="585" fg:w="9"/><text x="47.7723%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="47.5223%" y="245" width="0.7311%" height="15" fill="rgb(248,8,0)" fg:x="585" fg:w="9"/><text x="47.7723%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="47.5223%" y="229" width="0.7311%" height="15" fill="rgb(229,118,37)" fg:x="585" fg:w="9"/><text x="47.7723%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="47.5223%" y="213" width="0.7311%" height="15" fill="rgb(253,223,43)" fg:x="585" fg:w="9"/><text x="47.7723%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="48.1722%" y="197" width="0.0812%" height="15" fill="rgb(211,77,36)" fg:x="593" fg:w="1"/><text x="48.4222%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="48.1722%" y="181" width="0.0812%" height="15" fill="rgb(219,3,53)" fg:x="593" fg:w="1"/><text x="48.4222%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.3347%" y="261" width="0.0812%" height="15" fill="rgb(244,45,42)" fg:x="595" fg:w="1"/><text x="48.5847%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.4972%" y="245" width="0.0812%" height="15" fill="rgb(225,95,27)" fg:x="597" fg:w="1"/><text x="48.7472%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="48.4972%" y="229" width="0.0812%" height="15" fill="rgb(207,74,8)" fg:x="597" fg:w="1"/><text x="48.7472%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.4972%" y="213" width="0.0812%" height="15" fill="rgb(243,63,36)" fg:x="597" fg:w="1"/><text x="48.7472%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.7409%" y="213" width="0.0812%" height="15" fill="rgb(211,180,12)" fg:x="600" fg:w="1"/><text x="48.9909%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.57%)</title><rect x="48.3347%" y="277" width="0.5686%" height="15" fill="rgb(254,166,49)" fg:x="595" fg:w="7"/><text x="48.5847%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (6 samples, 0.49%)</title><rect x="48.4159%" y="261" width="0.4874%" height="15" fill="rgb(205,19,0)" fg:x="596" fg:w="6"/><text x="48.6659%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="48.5784%" y="245" width="0.3249%" height="15" fill="rgb(224,172,32)" fg:x="598" fg:w="4"/><text x="48.8284%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="48.5784%" y="229" width="0.3249%" height="15" fill="rgb(254,136,30)" fg:x="598" fg:w="4"/><text x="48.8284%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.8221%" y="213" width="0.0812%" height="15" fill="rgb(246,19,35)" fg:x="601" fg:w="1"/><text x="49.0721%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="48.9033%" y="229" width="0.0812%" height="15" fill="rgb(219,24,36)" fg:x="602" fg:w="1"/><text x="49.1533%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="48.9033%" y="213" width="0.0812%" height="15" fill="rgb(251,55,1)" fg:x="602" fg:w="1"/><text x="49.1533%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="48.9033%" y="261" width="0.1625%" height="15" fill="rgb(218,117,39)" fg:x="602" fg:w="2"/><text x="49.1533%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="48.9033%" y="245" width="0.1625%" height="15" fill="rgb(248,169,11)" fg:x="602" fg:w="2"/><text x="49.1533%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="48.9846%" y="229" width="0.0812%" height="15" fill="rgb(244,40,44)" fg:x="603" fg:w="1"/><text x="49.2346%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="48.9846%" y="213" width="0.0812%" height="15" fill="rgb(234,62,37)" fg:x="603" fg:w="1"/><text x="49.2346%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="49.5532%" y="181" width="0.3249%" height="15" fill="rgb(207,117,42)" fg:x="610" fg:w="4"/><text x="49.8032%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="49.5532%" y="165" width="0.3249%" height="15" fill="rgb(213,43,2)" fg:x="610" fg:w="4"/><text x="49.8032%" y="175.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="49.5532%" y="149" width="0.3249%" height="15" fill="rgb(244,202,51)" fg:x="610" fg:w="4"/><text x="49.8032%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="49.8781%" y="181" width="0.0812%" height="15" fill="rgb(253,174,46)" fg:x="614" fg:w="1"/><text x="50.1281%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="49.8781%" y="165" width="0.0812%" height="15" fill="rgb(251,23,1)" fg:x="614" fg:w="1"/><text x="50.1281%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="49.8781%" y="149" width="0.0812%" height="15" fill="rgb(253,26,1)" fg:x="614" fg:w="1"/><text x="50.1281%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.06%)</title><rect x="49.0658%" y="213" width="1.0561%" height="15" fill="rgb(216,89,31)" fg:x="604" fg:w="13"/><text x="49.3158%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.06%)</title><rect x="49.0658%" y="197" width="1.0561%" height="15" fill="rgb(209,109,5)" fg:x="604" fg:w="13"/><text x="49.3158%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="49.9594%" y="181" width="0.1625%" height="15" fill="rgb(229,63,13)" fg:x="615" fg:w="2"/><text x="50.2094%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.38%)</title><rect x="48.9033%" y="277" width="1.3810%" height="15" fill="rgb(238,137,54)" fg:x="602" fg:w="17"/><text x="49.1533%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.22%)</title><rect x="49.0658%" y="261" width="1.2185%" height="15" fill="rgb(228,1,9)" fg:x="604" fg:w="15"/><text x="49.3158%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.22%)</title><rect x="49.0658%" y="245" width="1.2185%" height="15" fill="rgb(249,120,48)" fg:x="604" fg:w="15"/><text x="49.3158%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.22%)</title><rect x="49.0658%" y="229" width="1.2185%" height="15" fill="rgb(209,72,36)" fg:x="604" fg:w="15"/><text x="49.3158%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="50.1219%" y="213" width="0.1625%" height="15" fill="rgb(247,98,49)" fg:x="617" fg:w="2"/><text x="50.3719%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="50.1219%" y="197" width="0.1625%" height="15" fill="rgb(233,75,36)" fg:x="617" fg:w="2"/><text x="50.3719%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.2031%" y="181" width="0.0812%" height="15" fill="rgb(225,14,24)" fg:x="618" fg:w="1"/><text x="50.4531%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.2843%" y="229" width="0.0812%" height="15" fill="rgb(237,193,20)" fg:x="619" fg:w="1"/><text x="50.5343%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.2843%" y="213" width="0.0812%" height="15" fill="rgb(239,122,19)" fg:x="619" fg:w="1"/><text x="50.5343%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="50.2843%" y="197" width="0.0812%" height="15" fill="rgb(231,220,10)" fg:x="619" fg:w="1"/><text x="50.5343%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="50.3656%" y="229" width="0.1625%" height="15" fill="rgb(220,66,15)" fg:x="620" fg:w="2"/><text x="50.6156%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.4468%" y="213" width="0.0812%" height="15" fill="rgb(215,171,52)" fg:x="621" fg:w="1"/><text x="50.6968%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18 samples, 1.46%)</title><rect x="50.6905%" y="197" width="1.4622%" height="15" fill="rgb(241,169,50)" fg:x="624" fg:w="18"/><text x="50.9405%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="51.9903%" y="181" width="0.1625%" height="15" fill="rgb(236,189,0)" fg:x="640" fg:w="2"/><text x="52.2403%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.62%)</title><rect x="50.6093%" y="213" width="1.6247%" height="15" fill="rgb(217,147,20)" fg:x="623" fg:w="20"/><text x="50.8593%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="52.1527%" y="197" width="0.0812%" height="15" fill="rgb(206,188,39)" fg:x="642" fg:w="1"/><text x="52.4027%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="52.2340%" y="213" width="0.0812%" height="15" fill="rgb(227,118,25)" fg:x="643" fg:w="1"/><text x="52.4840%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="52.3152%" y="213" width="0.1625%" height="15" fill="rgb(248,171,40)" fg:x="644" fg:w="2"/><text x="52.5652%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="52.3964%" y="197" width="0.0812%" height="15" fill="rgb(251,90,54)" fg:x="645" fg:w="1"/><text x="52.6464%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.5589%" y="181" width="0.0812%" height="15" fill="rgb(234,11,46)" fg:x="647" fg:w="1"/><text x="52.8089%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.5589%" y="165" width="0.0812%" height="15" fill="rgb(229,134,13)" fg:x="647" fg:w="1"/><text x="52.8089%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.5589%" y="149" width="0.0812%" height="15" fill="rgb(223,129,3)" fg:x="647" fg:w="1"/><text x="52.8089%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.65%)</title><rect x="52.6401%" y="181" width="0.6499%" height="15" fill="rgb(221,124,13)" fg:x="648" fg:w="8"/><text x="52.8901%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.41%)</title><rect x="52.8838%" y="165" width="0.4062%" height="15" fill="rgb(234,3,18)" fg:x="651" fg:w="5"/><text x="53.1338%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.41%)</title><rect x="52.8838%" y="149" width="0.4062%" height="15" fill="rgb(249,199,20)" fg:x="651" fg:w="5"/><text x="53.1338%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="52.9651%" y="133" width="0.3249%" height="15" fill="rgb(224,134,6)" fg:x="652" fg:w="4"/><text x="53.2151%" y="143.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="52.9651%" y="117" width="0.3249%" height="15" fill="rgb(254,83,26)" fg:x="652" fg:w="4"/><text x="53.2151%" y="127.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="53.2900%" y="165" width="0.3249%" height="15" fill="rgb(217,88,9)" fg:x="656" fg:w="4"/><text x="53.5400%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="53.2900%" y="149" width="0.3249%" height="15" fill="rgb(225,73,2)" fg:x="656" fg:w="4"/><text x="53.5400%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.22%)</title><rect x="52.4777%" y="197" width="1.2185%" height="15" fill="rgb(226,44,39)" fg:x="646" fg:w="15"/><text x="52.7277%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.41%)</title><rect x="53.2900%" y="181" width="0.4062%" height="15" fill="rgb(228,53,17)" fg:x="656" fg:w="5"/><text x="53.5400%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="53.6149%" y="165" width="0.0812%" height="15" fill="rgb(212,27,27)" fg:x="660" fg:w="1"/><text x="53.8649%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.30%)</title><rect x="52.4777%" y="213" width="1.2998%" height="15" fill="rgb(241,50,6)" fg:x="646" fg:w="16"/><text x="52.7277%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.6962%" y="197" width="0.0812%" height="15" fill="rgb(225,28,51)" fg:x="661" fg:w="1"/><text x="53.9462%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="53.7774%" y="213" width="0.1625%" height="15" fill="rgb(215,33,16)" fg:x="662" fg:w="2"/><text x="54.0274%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.8587%" y="197" width="0.0812%" height="15" fill="rgb(243,40,39)" fg:x="663" fg:w="1"/><text x="54.1087%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="53.8587%" y="181" width="0.0812%" height="15" fill="rgb(225,11,42)" fg:x="663" fg:w="1"/><text x="54.1087%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="53.9399%" y="165" width="0.0812%" height="15" fill="rgb(241,220,38)" fg:x="664" fg:w="1"/><text x="54.1899%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.9399%" y="149" width="0.0812%" height="15" fill="rgb(244,52,35)" fg:x="664" fg:w="1"/><text x="54.1899%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.9399%" y="133" width="0.0812%" height="15" fill="rgb(246,42,46)" fg:x="664" fg:w="1"/><text x="54.1899%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.9399%" y="117" width="0.0812%" height="15" fill="rgb(205,184,13)" fg:x="664" fg:w="1"/><text x="54.1899%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="54.0211%" y="149" width="0.0812%" height="15" fill="rgb(209,48,36)" fg:x="665" fg:w="1"/><text x="54.2711%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="54.5085%" y="101" width="0.1625%" height="15" fill="rgb(244,34,51)" fg:x="671" fg:w="2"/><text x="54.7585%" y="111.50"></text></g><g><title>__libc_free (5 samples, 0.41%)</title><rect x="54.6710%" y="101" width="0.4062%" height="15" fill="rgb(221,107,33)" fg:x="673" fg:w="5"/><text x="54.9210%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.65%)</title><rect x="55.0772%" y="101" width="0.6499%" height="15" fill="rgb(224,203,12)" fg:x="678" fg:w="8"/><text x="55.3272%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="55.4021%" y="85" width="0.3249%" height="15" fill="rgb(230,215,18)" fg:x="682" fg:w="4"/><text x="55.6521%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="55.4833%" y="69" width="0.2437%" height="15" fill="rgb(206,185,35)" fg:x="683" fg:w="3"/><text x="55.7333%" y="79.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="55.4833%" y="53" width="0.2437%" height="15" fill="rgb(228,140,34)" fg:x="683" fg:w="3"/><text x="55.7333%" y="63.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="55.7271%" y="53" width="0.0812%" height="15" fill="rgb(208,93,13)" fg:x="686" fg:w="1"/><text x="55.9771%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="55.7271%" y="37" width="0.0812%" height="15" fill="rgb(221,193,39)" fg:x="686" fg:w="1"/><text x="55.9771%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="55.7271%" y="101" width="0.3249%" height="15" fill="rgb(241,132,34)" fg:x="686" fg:w="4"/><text x="55.9771%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="55.7271%" y="85" width="0.3249%" height="15" fill="rgb(221,141,10)" fg:x="686" fg:w="4"/><text x="55.9771%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="55.7271%" y="69" width="0.3249%" height="15" fill="rgb(226,90,31)" fg:x="686" fg:w="4"/><text x="55.9771%" y="79.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="55.8083%" y="53" width="0.2437%" height="15" fill="rgb(243,75,5)" fg:x="687" fg:w="3"/><text x="56.0583%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4582%" y="37" width="0.0812%" height="15" fill="rgb(227,156,21)" fg:x="695" fg:w="1"/><text x="56.7082%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="56.2957%" y="69" width="0.3249%" height="15" fill="rgb(250,195,8)" fg:x="693" fg:w="4"/><text x="56.5457%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="56.3769%" y="53" width="0.2437%" height="15" fill="rgb(220,134,5)" fg:x="694" fg:w="3"/><text x="56.6269%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.5394%" y="37" width="0.0812%" height="15" fill="rgb(246,106,34)" fg:x="696" fg:w="1"/><text x="56.7894%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.97%)</title><rect x="56.0520%" y="101" width="0.9748%" height="15" fill="rgb(205,1,4)" fg:x="690" fg:w="12"/><text x="56.3020%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.89%)</title><rect x="56.1332%" y="85" width="0.8936%" height="15" fill="rgb(224,151,29)" fg:x="691" fg:w="11"/><text x="56.3832%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="56.6206%" y="69" width="0.4062%" height="15" fill="rgb(251,196,0)" fg:x="697" fg:w="5"/><text x="56.8706%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="57.0268%" y="85" width="0.0812%" height="15" fill="rgb(212,127,0)" fg:x="702" fg:w="1"/><text x="57.2768%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.0268%" y="69" width="0.0812%" height="15" fill="rgb(236,71,53)" fg:x="702" fg:w="1"/><text x="57.2768%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="57.0268%" y="101" width="0.1625%" height="15" fill="rgb(227,99,0)" fg:x="702" fg:w="2"/><text x="57.2768%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="57.1080%" y="85" width="0.0812%" height="15" fill="rgb(239,89,21)" fg:x="703" fg:w="1"/><text x="57.3580%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="57.1080%" y="69" width="0.0812%" height="15" fill="rgb(243,122,19)" fg:x="703" fg:w="1"/><text x="57.3580%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="57.1893%" y="69" width="0.1625%" height="15" fill="rgb(229,192,45)" fg:x="704" fg:w="2"/><text x="57.4393%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (51 samples, 4.14%)</title><rect x="57.1893%" y="101" width="4.1430%" height="15" fill="rgb(235,165,35)" fg:x="704" fg:w="51"/><text x="57.4393%" y="111.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (51 samples, 4.14%)</title><rect x="57.1893%" y="85" width="4.1430%" height="15" fill="rgb(253,202,0)" fg:x="704" fg:w="51"/><text x="57.4393%" y="95.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 3.98%)</title><rect x="57.3517%" y="69" width="3.9805%" height="15" fill="rgb(235,51,20)" fg:x="706" fg:w="49"/><text x="57.6017%" y="79.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.49%)</title><rect x="61.3323%" y="101" width="0.4874%" height="15" fill="rgb(218,95,46)" fg:x="755" fg:w="6"/><text x="61.5823%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.7384%" y="85" width="0.0812%" height="15" fill="rgb(212,81,10)" fg:x="760" fg:w="1"/><text x="61.9884%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 8.29%)</title><rect x="53.9399%" y="197" width="8.2859%" height="15" fill="rgb(240,59,0)" fg:x="664" fg:w="102"/><text x="54.1899%" y="207.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (102 samples, 8.29%)</title><rect x="53.9399%" y="181" width="8.2859%" height="15" fill="rgb(212,191,42)" fg:x="664" fg:w="102"/><text x="54.1899%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (101 samples, 8.20%)</title><rect x="54.0211%" y="165" width="8.2047%" height="15" fill="rgb(233,140,3)" fg:x="665" fg:w="101"/><text x="54.2711%" y="175.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (100 samples, 8.12%)</title><rect x="54.1024%" y="149" width="8.1235%" height="15" fill="rgb(215,69,23)" fg:x="666" fg:w="100"/><text x="54.3524%" y="159.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (100 samples, 8.12%)</title><rect x="54.1024%" y="133" width="8.1235%" height="15" fill="rgb(240,202,20)" fg:x="666" fg:w="100"/><text x="54.3524%" y="143.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (100 samples, 8.12%)</title><rect x="54.1024%" y="117" width="8.1235%" height="15" fill="rgb(209,146,50)" fg:x="666" fg:w="100"/><text x="54.3524%" y="127.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.41%)</title><rect x="61.8197%" y="101" width="0.4062%" height="15" fill="rgb(253,102,54)" fg:x="761" fg:w="5"/><text x="62.0697%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.0634%" y="85" width="0.1625%" height="15" fill="rgb(250,173,47)" fg:x="764" fg:w="2"/><text x="62.3134%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.0634%" y="69" width="0.1625%" height="15" fill="rgb(232,142,7)" fg:x="764" fg:w="2"/><text x="62.3134%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.0634%" y="53" width="0.1625%" height="15" fill="rgb(230,157,47)" fg:x="764" fg:w="2"/><text x="62.3134%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="62.2258%" y="197" width="0.0812%" height="15" fill="rgb(214,177,35)" fg:x="766" fg:w="1"/><text x="62.4758%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.2258%" y="181" width="0.0812%" height="15" fill="rgb(234,119,46)" fg:x="766" fg:w="1"/><text x="62.4758%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.2258%" y="165" width="0.0812%" height="15" fill="rgb(241,180,50)" fg:x="766" fg:w="1"/><text x="62.4758%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2258%" y="149" width="0.0812%" height="15" fill="rgb(221,54,25)" fg:x="766" fg:w="1"/><text x="62.4758%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5508%" y="181" width="0.0812%" height="15" fill="rgb(209,157,44)" fg:x="770" fg:w="1"/><text x="62.8008%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (13 samples, 1.06%)</title><rect x="62.6320%" y="181" width="1.0561%" height="15" fill="rgb(246,115,41)" fg:x="771" fg:w="13"/><text x="62.8820%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="63.3631%" y="165" width="0.3249%" height="15" fill="rgb(229,86,1)" fg:x="780" fg:w="4"/><text x="63.6131%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="63.4444%" y="149" width="0.2437%" height="15" fill="rgb(240,108,53)" fg:x="781" fg:w="3"/><text x="63.6944%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="63.4444%" y="133" width="0.2437%" height="15" fill="rgb(227,134,2)" fg:x="781" fg:w="3"/><text x="63.6944%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (166 samples, 13.48%)</title><rect x="50.5280%" y="229" width="13.4850%" height="15" fill="rgb(213,129,25)" fg:x="622" fg:w="166"/><text x="50.7780%" y="239.50">regex_automata::meta..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (124 samples, 10.07%)</title><rect x="53.9399%" y="213" width="10.0731%" height="15" fill="rgb(226,35,21)" fg:x="664" fg:w="124"/><text x="54.1899%" y="223.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21 samples, 1.71%)</title><rect x="62.3071%" y="197" width="1.7059%" height="15" fill="rgb(208,129,26)" fg:x="767" fg:w="21"/><text x="62.5571%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="63.6881%" y="181" width="0.3249%" height="15" fill="rgb(224,83,6)" fg:x="784" fg:w="4"/><text x="63.9381%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.9318%" y="165" width="0.0812%" height="15" fill="rgb(227,52,39)" fg:x="787" fg:w="1"/><text x="64.1818%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.9318%" y="149" width="0.0812%" height="15" fill="rgb(241,30,17)" fg:x="787" fg:w="1"/><text x="64.1818%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="63.9318%" y="133" width="0.0812%" height="15" fill="rgb(246,186,42)" fg:x="787" fg:w="1"/><text x="64.1818%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="63.9318%" y="117" width="0.0812%" height="15" fill="rgb(221,169,15)" fg:x="787" fg:w="1"/><text x="64.1818%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="64.1755%" y="181" width="0.0812%" height="15" fill="rgb(235,108,21)" fg:x="790" fg:w="1"/><text x="64.4255%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="64.1755%" y="197" width="0.3249%" height="15" fill="rgb(219,148,30)" fg:x="790" fg:w="4"/><text x="64.4255%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="64.2567%" y="181" width="0.2437%" height="15" fill="rgb(220,109,5)" fg:x="791" fg:w="3"/><text x="64.5067%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="64.3379%" y="165" width="0.1625%" height="15" fill="rgb(213,203,48)" fg:x="792" fg:w="2"/><text x="64.5879%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.3379%" y="149" width="0.1625%" height="15" fill="rgb(244,71,33)" fg:x="792" fg:w="2"/><text x="64.5879%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.3379%" y="133" width="0.1625%" height="15" fill="rgb(209,23,2)" fg:x="792" fg:w="2"/><text x="64.5879%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="64.5004%" y="197" width="0.1625%" height="15" fill="rgb(219,97,7)" fg:x="794" fg:w="2"/><text x="64.7504%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (2 samples, 0.16%)</title><rect x="64.5004%" y="181" width="0.1625%" height="15" fill="rgb(216,161,23)" fg:x="794" fg:w="2"/><text x="64.7504%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="64.0130%" y="229" width="0.7311%" height="15" fill="rgb(207,45,42)" fg:x="788" fg:w="9"/><text x="64.2630%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="64.0942%" y="213" width="0.6499%" height="15" fill="rgb(241,61,4)" fg:x="789" fg:w="8"/><text x="64.3442%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.6629%" y="197" width="0.0812%" height="15" fill="rgb(236,170,1)" fg:x="796" fg:w="1"/><text x="64.9129%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.6629%" y="181" width="0.0812%" height="15" fill="rgb(239,72,5)" fg:x="796" fg:w="1"/><text x="64.9129%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.6629%" y="165" width="0.0812%" height="15" fill="rgb(214,13,50)" fg:x="796" fg:w="1"/><text x="64.9129%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="64.7441%" y="181" width="0.1625%" height="15" fill="rgb(224,88,9)" fg:x="797" fg:w="2"/><text x="64.9941%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="64.8253%" y="165" width="0.0812%" height="15" fill="rgb(238,192,34)" fg:x="798" fg:w="1"/><text x="65.0753%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="64.7441%" y="197" width="0.2437%" height="15" fill="rgb(217,203,50)" fg:x="797" fg:w="3"/><text x="64.9941%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="64.9066%" y="181" width="0.0812%" height="15" fill="rgb(241,123,32)" fg:x="799" fg:w="1"/><text x="65.1566%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="64.9066%" y="165" width="0.0812%" height="15" fill="rgb(248,151,39)" fg:x="799" fg:w="1"/><text x="65.1566%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="65.2315%" y="181" width="0.0812%" height="15" fill="rgb(208,89,6)" fg:x="803" fg:w="1"/><text x="65.4815%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="65.2315%" y="165" width="0.0812%" height="15" fill="rgb(254,43,26)" fg:x="803" fg:w="1"/><text x="65.4815%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2315%" y="149" width="0.0812%" height="15" fill="rgb(216,158,13)" fg:x="803" fg:w="1"/><text x="65.4815%" y="159.50"></text></g><g><title>indefinite::rules::number::Number::check (211 samples, 17.14%)</title><rect x="48.2535%" y="293" width="17.1405%" height="15" fill="rgb(212,47,37)" fg:x="594" fg:w="211"/><text x="48.5035%" y="303.50">indefinite::rules::number::..</text></g><g><title>regex::regex::string::Regex::new (186 samples, 15.11%)</title><rect x="50.2843%" y="277" width="15.1097%" height="15" fill="rgb(254,16,10)" fg:x="619" fg:w="186"/><text x="50.5343%" y="287.50">regex::regex::string::R..</text></g><g><title>regex::builders::Builder::build_one_string (186 samples, 15.11%)</title><rect x="50.2843%" y="261" width="15.1097%" height="15" fill="rgb(223,228,16)" fg:x="619" fg:w="186"/><text x="50.5343%" y="271.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (186 samples, 15.11%)</title><rect x="50.2843%" y="245" width="15.1097%" height="15" fill="rgb(249,108,50)" fg:x="619" fg:w="186"/><text x="50.5343%" y="255.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.65%)</title><rect x="64.7441%" y="229" width="0.6499%" height="15" fill="rgb(208,220,5)" fg:x="797" fg:w="8"/><text x="64.9941%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.65%)</title><rect x="64.7441%" y="213" width="0.6499%" height="15" fill="rgb(217,89,48)" fg:x="797" fg:w="8"/><text x="64.9941%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.41%)</title><rect x="64.9878%" y="197" width="0.4062%" height="15" fill="rgb(212,113,41)" fg:x="800" fg:w="5"/><text x="65.2378%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.3128%" y="181" width="0.0812%" height="15" fill="rgb(231,127,5)" fg:x="804" fg:w="1"/><text x="65.5628%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="65.3128%" y="165" width="0.0812%" height="15" fill="rgb(217,141,17)" fg:x="804" fg:w="1"/><text x="65.5628%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.3128%" y="149" width="0.0812%" height="15" fill="rgb(245,125,54)" fg:x="804" fg:w="1"/><text x="65.5628%" y="159.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="65.4752%" y="261" width="0.0812%" height="15" fill="rgb(248,125,3)" fg:x="806" fg:w="1"/><text x="65.7252%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="65.4752%" y="245" width="0.0812%" height="15" fill="rgb(236,119,51)" fg:x="806" fg:w="1"/><text x="65.7252%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="65.4752%" y="229" width="0.0812%" height="15" fill="rgb(239,99,8)" fg:x="806" fg:w="1"/><text x="65.7252%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5565%" y="245" width="0.0812%" height="15" fill="rgb(224,228,4)" fg:x="807" fg:w="1"/><text x="65.8065%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.6377%" y="229" width="0.0812%" height="15" fill="rgb(220,131,45)" fg:x="808" fg:w="1"/><text x="65.8877%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="65.5565%" y="261" width="0.2437%" height="15" fill="rgb(215,62,5)" fg:x="807" fg:w="3"/><text x="65.8065%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="65.6377%" y="245" width="0.1625%" height="15" fill="rgb(253,12,24)" fg:x="808" fg:w="2"/><text x="65.8877%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="65.7189%" y="229" width="0.0812%" height="15" fill="rgb(248,120,50)" fg:x="809" fg:w="1"/><text x="65.9689%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.7189%" y="213" width="0.0812%" height="15" fill="rgb(245,194,10)" fg:x="809" fg:w="1"/><text x="65.9689%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7189%" y="197" width="0.0812%" height="15" fill="rgb(241,149,38)" fg:x="809" fg:w="1"/><text x="65.9689%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8002%" y="245" width="0.0812%" height="15" fill="rgb(219,215,7)" fg:x="810" fg:w="1"/><text x="66.0502%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.8814%" y="213" width="0.0812%" height="15" fill="rgb(208,120,31)" fg:x="811" fg:w="1"/><text x="66.1314%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.8814%" y="197" width="0.0812%" height="15" fill="rgb(244,30,8)" fg:x="811" fg:w="1"/><text x="66.1314%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.9626%" y="149" width="0.0812%" height="15" fill="rgb(238,35,44)" fg:x="812" fg:w="1"/><text x="66.2126%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.9626%" y="133" width="0.0812%" height="15" fill="rgb(243,218,37)" fg:x="812" fg:w="1"/><text x="66.2126%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.9626%" y="117" width="0.0812%" height="15" fill="rgb(218,169,10)" fg:x="812" fg:w="1"/><text x="66.2126%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.9626%" y="101" width="0.0812%" height="15" fill="rgb(221,144,10)" fg:x="812" fg:w="1"/><text x="66.2126%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="65.9626%" y="213" width="0.1625%" height="15" fill="rgb(226,41,38)" fg:x="812" fg:w="2"/><text x="66.2126%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.9626%" y="197" width="0.1625%" height="15" fill="rgb(228,3,1)" fg:x="812" fg:w="2"/><text x="66.2126%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="65.9626%" y="181" width="0.1625%" height="15" fill="rgb(209,129,12)" fg:x="812" fg:w="2"/><text x="66.2126%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.9626%" y="165" width="0.1625%" height="15" fill="rgb(213,136,33)" fg:x="812" fg:w="2"/><text x="66.2126%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="66.0439%" y="149" width="0.0812%" height="15" fill="rgb(209,181,29)" fg:x="813" fg:w="1"/><text x="66.2939%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.0439%" y="133" width="0.0812%" height="15" fill="rgb(234,173,18)" fg:x="813" fg:w="1"/><text x="66.2939%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="66.2063%" y="197" width="0.4062%" height="15" fill="rgb(227,73,47)" fg:x="815" fg:w="5"/><text x="66.4563%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="66.2876%" y="181" width="0.3249%" height="15" fill="rgb(234,9,34)" fg:x="816" fg:w="4"/><text x="66.5376%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="66.5313%" y="165" width="0.0812%" height="15" fill="rgb(235,172,15)" fg:x="819" fg:w="1"/><text x="66.7813%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="66.6125%" y="165" width="0.0812%" height="15" fill="rgb(245,61,2)" fg:x="820" fg:w="1"/><text x="66.8625%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.6125%" y="149" width="0.0812%" height="15" fill="rgb(238,39,47)" fg:x="820" fg:w="1"/><text x="66.8625%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.6125%" y="133" width="0.0812%" height="15" fill="rgb(234,37,24)" fg:x="820" fg:w="1"/><text x="66.8625%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.6125%" y="117" width="0.0812%" height="15" fill="rgb(248,223,24)" fg:x="820" fg:w="1"/><text x="66.8625%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="66.6937%" y="165" width="0.0812%" height="15" fill="rgb(223,12,15)" fg:x="821" fg:w="1"/><text x="66.9437%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="66.7750%" y="149" width="0.0812%" height="15" fill="rgb(249,6,3)" fg:x="822" fg:w="1"/><text x="67.0250%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="66.6125%" y="181" width="0.3249%" height="15" fill="rgb(237,105,33)" fg:x="820" fg:w="4"/><text x="66.8625%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="66.7750%" y="165" width="0.1625%" height="15" fill="rgb(252,208,35)" fg:x="822" fg:w="2"/><text x="67.0250%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="66.8562%" y="149" width="0.0812%" height="15" fill="rgb(215,181,35)" fg:x="823" fg:w="1"/><text x="67.1062%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.8562%" y="133" width="0.0812%" height="15" fill="rgb(246,212,3)" fg:x="823" fg:w="1"/><text x="67.1062%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8562%" y="117" width="0.0812%" height="15" fill="rgb(247,156,24)" fg:x="823" fg:w="1"/><text x="67.1062%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="67.0999%" y="165" width="0.0812%" height="15" fill="rgb(248,9,31)" fg:x="826" fg:w="1"/><text x="67.3499%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="67.1812%" y="165" width="0.0812%" height="15" fill="rgb(234,26,45)" fg:x="827" fg:w="1"/><text x="67.4312%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (16 samples, 1.30%)</title><rect x="66.1251%" y="213" width="1.2998%" height="15" fill="rgb(249,11,32)" fg:x="814" fg:w="16"/><text x="66.3751%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.81%)</title><rect x="66.6125%" y="197" width="0.8123%" height="15" fill="rgb(249,162,33)" fg:x="820" fg:w="10"/><text x="66.8625%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="66.9374%" y="181" width="0.4874%" height="15" fill="rgb(232,4,32)" fg:x="824" fg:w="6"/><text x="67.1874%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="67.2624%" y="165" width="0.1625%" height="15" fill="rgb(212,5,45)" fg:x="828" fg:w="2"/><text x="67.5124%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.2624%" y="149" width="0.1625%" height="15" fill="rgb(227,95,13)" fg:x="828" fg:w="2"/><text x="67.5124%" y="159.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="67.4249%" y="165" width="0.0812%" height="15" fill="rgb(223,205,10)" fg:x="830" fg:w="1"/><text x="67.6749%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.4249%" y="149" width="0.0812%" height="15" fill="rgb(222,178,8)" fg:x="830" fg:w="1"/><text x="67.6749%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.4249%" y="133" width="0.0812%" height="15" fill="rgb(216,13,22)" fg:x="830" fg:w="1"/><text x="67.6749%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.4249%" y="117" width="0.0812%" height="15" fill="rgb(240,167,12)" fg:x="830" fg:w="1"/><text x="67.6749%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="67.4249%" y="181" width="0.1625%" height="15" fill="rgb(235,68,35)" fg:x="830" fg:w="2"/><text x="67.6749%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="67.5061%" y="165" width="0.0812%" height="15" fill="rgb(253,40,27)" fg:x="831" fg:w="1"/><text x="67.7561%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.5061%" y="149" width="0.0812%" height="15" fill="rgb(214,19,28)" fg:x="831" fg:w="1"/><text x="67.7561%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.5061%" y="133" width="0.0812%" height="15" fill="rgb(210,167,45)" fg:x="831" fg:w="1"/><text x="67.7561%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5061%" y="117" width="0.0812%" height="15" fill="rgb(232,97,40)" fg:x="831" fg:w="1"/><text x="67.7561%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="67.4249%" y="213" width="0.3249%" height="15" fill="rgb(250,35,23)" fg:x="830" fg:w="4"/><text x="67.6749%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="67.4249%" y="197" width="0.3249%" height="15" fill="rgb(248,47,53)" fg:x="830" fg:w="4"/><text x="67.6749%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="67.5873%" y="181" width="0.1625%" height="15" fill="rgb(226,58,50)" fg:x="832" fg:w="2"/><text x="67.8373%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.6686%" y="165" width="0.0812%" height="15" fill="rgb(217,105,26)" fg:x="833" fg:w="1"/><text x="67.9186%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (26 samples, 2.11%)</title><rect x="65.8002%" y="261" width="2.1121%" height="15" fill="rgb(208,64,1)" fg:x="810" fg:w="26"/><text x="66.0502%" y="271.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (25 samples, 2.03%)</title><rect x="65.8814%" y="245" width="2.0309%" height="15" fill="rgb(214,80,1)" fg:x="811" fg:w="25"/><text x="66.1314%" y="255.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (25 samples, 2.03%)</title><rect x="65.8814%" y="229" width="2.0309%" height="15" fill="rgb(206,175,26)" fg:x="811" fg:w="25"/><text x="66.1314%" y="239.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="67.7498%" y="213" width="0.1625%" height="15" fill="rgb(235,156,37)" fg:x="834" fg:w="2"/><text x="67.9998%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="67.7498%" y="197" width="0.1625%" height="15" fill="rgb(213,100,9)" fg:x="834" fg:w="2"/><text x="67.9998%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="67.8310%" y="181" width="0.0812%" height="15" fill="rgb(241,15,13)" fg:x="835" fg:w="1"/><text x="68.0810%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="67.8310%" y="165" width="0.0812%" height="15" fill="rgb(205,97,43)" fg:x="835" fg:w="1"/><text x="68.0810%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="67.9123%" y="197" width="0.1625%" height="15" fill="rgb(216,106,32)" fg:x="836" fg:w="2"/><text x="68.1623%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9935%" y="181" width="0.0812%" height="15" fill="rgb(226,200,8)" fg:x="837" fg:w="1"/><text x="68.2435%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.9935%" y="165" width="0.0812%" height="15" fill="rgb(244,54,29)" fg:x="837" fg:w="1"/><text x="68.2435%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (422 samples, 34.28%)</title><rect x="33.9561%" y="373" width="34.2811%" height="15" fill="rgb(252,169,12)" fg:x="418" fg:w="422"/><text x="34.2061%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::mod..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (394 samples, 32.01%)</title><rect x="36.2307%" y="357" width="32.0065%" height="15" fill="rgb(231,199,11)" fg:x="446" fg:w="394"/><text x="36.4807%" y="367.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (394 samples, 32.01%)</title><rect x="36.2307%" y="341" width="32.0065%" height="15" fill="rgb(233,191,18)" fg:x="446" fg:w="394"/><text x="36.4807%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (394 samples, 32.01%)</title><rect x="36.2307%" y="325" width="32.0065%" height="15" fill="rgb(215,83,47)" fg:x="446" fg:w="394"/><text x="36.4807%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (393 samples, 31.93%)</title><rect x="36.3119%" y="309" width="31.9253%" height="15" fill="rgb(251,67,19)" fg:x="447" fg:w="393"/><text x="36.5619%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (35 samples, 2.84%)</title><rect x="65.3940%" y="293" width="2.8432%" height="15" fill="rgb(240,7,20)" fg:x="805" fg:w="35"/><text x="65.6440%" y="303.50">in..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (34 samples, 2.76%)</title><rect x="65.4752%" y="277" width="2.7620%" height="15" fill="rgb(210,150,26)" fg:x="806" fg:w="34"/><text x="65.7252%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="67.9123%" y="261" width="0.3249%" height="15" fill="rgb(228,75,42)" fg:x="836" fg:w="4"/><text x="68.1623%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="67.9123%" y="245" width="0.3249%" height="15" fill="rgb(237,134,48)" fg:x="836" fg:w="4"/><text x="68.1623%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="67.9123%" y="229" width="0.3249%" height="15" fill="rgb(205,80,50)" fg:x="836" fg:w="4"/><text x="68.1623%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="67.9123%" y="213" width="0.3249%" height="15" fill="rgb(217,74,48)" fg:x="836" fg:w="4"/><text x="68.1623%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="68.0747%" y="197" width="0.1625%" height="15" fill="rgb(205,82,50)" fg:x="838" fg:w="2"/><text x="68.3247%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.0747%" y="181" width="0.1625%" height="15" fill="rgb(228,1,33)" fg:x="838" fg:w="2"/><text x="68.3247%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.1560%" y="165" width="0.0812%" height="15" fill="rgb(214,50,23)" fg:x="839" fg:w="1"/><text x="68.4060%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1560%" y="149" width="0.0812%" height="15" fill="rgb(210,62,9)" fg:x="839" fg:w="1"/><text x="68.4060%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.3184%" y="357" width="0.0812%" height="15" fill="rgb(210,104,37)" fg:x="841" fg:w="1"/><text x="68.5684%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.3184%" y="341" width="0.0812%" height="15" fill="rgb(232,104,43)" fg:x="841" fg:w="1"/><text x="68.5684%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.3184%" y="325" width="0.0812%" height="15" fill="rgb(244,52,6)" fg:x="841" fg:w="1"/><text x="68.5684%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="68.3997%" y="357" width="0.0812%" height="15" fill="rgb(211,174,52)" fg:x="842" fg:w="1"/><text x="68.6497%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.7246%" y="261" width="0.0812%" height="15" fill="rgb(229,48,4)" fg:x="846" fg:w="1"/><text x="68.9746%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.7246%" y="245" width="0.0812%" height="15" fill="rgb(205,155,16)" fg:x="846" fg:w="1"/><text x="68.9746%" y="255.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (5 samples, 0.41%)</title><rect x="68.4809%" y="277" width="0.4062%" height="15" fill="rgb(211,141,53)" fg:x="843" fg:w="5"/><text x="68.7309%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8058%" y="261" width="0.0812%" height="15" fill="rgb(240,148,11)" fg:x="847" fg:w="1"/><text x="69.0558%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8058%" y="245" width="0.0812%" height="15" fill="rgb(214,45,23)" fg:x="847" fg:w="1"/><text x="69.0558%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8058%" y="229" width="0.0812%" height="15" fill="rgb(248,74,26)" fg:x="847" fg:w="1"/><text x="69.0558%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8058%" y="213" width="0.0812%" height="15" fill="rgb(218,121,16)" fg:x="847" fg:w="1"/><text x="69.0558%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.8058%" y="197" width="0.0812%" height="15" fill="rgb(218,10,47)" fg:x="847" fg:w="1"/><text x="69.0558%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (7 samples, 0.57%)</title><rect x="68.4809%" y="325" width="0.5686%" height="15" fill="rgb(227,99,14)" fg:x="843" fg:w="7"/><text x="68.7309%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (7 samples, 0.57%)</title><rect x="68.4809%" y="309" width="0.5686%" height="15" fill="rgb(229,83,46)" fg:x="843" fg:w="7"/><text x="68.7309%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (7 samples, 0.57%)</title><rect x="68.4809%" y="293" width="0.5686%" height="15" fill="rgb(228,25,1)" fg:x="843" fg:w="7"/><text x="68.7309%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.8871%" y="277" width="0.1625%" height="15" fill="rgb(252,190,15)" fg:x="848" fg:w="2"/><text x="69.1371%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.8871%" y="261" width="0.1625%" height="15" fill="rgb(213,103,51)" fg:x="848" fg:w="2"/><text x="69.1371%" y="271.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (11 samples, 0.89%)</title><rect x="68.2372%" y="373" width="0.8936%" height="15" fill="rgb(220,38,44)" fg:x="840" fg:w="11"/><text x="68.4872%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="68.4809%" y="357" width="0.6499%" height="15" fill="rgb(210,45,26)" fg:x="843" fg:w="8"/><text x="68.7309%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="68.4809%" y="341" width="0.6499%" height="15" fill="rgb(205,95,48)" fg:x="843" fg:w="8"/><text x="68.7309%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.0496%" y="325" width="0.0812%" height="15" fill="rgb(225,179,37)" fg:x="850" fg:w="1"/><text x="69.2996%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0496%" y="309" width="0.0812%" height="15" fill="rgb(230,209,3)" fg:x="850" fg:w="1"/><text x="69.2996%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.0496%" y="293" width="0.0812%" height="15" fill="rgb(248,12,46)" fg:x="850" fg:w="1"/><text x="69.2996%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.1308%" y="373" width="0.0812%" height="15" fill="rgb(234,18,0)" fg:x="851" fg:w="1"/><text x="69.3808%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="69.2120%" y="309" width="0.1625%" height="15" fill="rgb(238,197,14)" fg:x="852" fg:w="2"/><text x="69.4620%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="69.2933%" y="293" width="0.0812%" height="15" fill="rgb(251,162,48)" fg:x="853" fg:w="1"/><text x="69.5433%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2933%" y="277" width="0.0812%" height="15" fill="rgb(237,73,42)" fg:x="853" fg:w="1"/><text x="69.5433%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3745%" y="229" width="0.0812%" height="15" fill="rgb(211,108,8)" fg:x="854" fg:w="1"/><text x="69.6245%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3745%" y="213" width="0.0812%" height="15" fill="rgb(213,45,22)" fg:x="854" fg:w="1"/><text x="69.6245%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.4557%" y="229" width="0.0812%" height="15" fill="rgb(252,154,5)" fg:x="855" fg:w="1"/><text x="69.7057%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4557%" y="213" width="0.0812%" height="15" fill="rgb(221,79,52)" fg:x="855" fg:w="1"/><text x="69.7057%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="69.5370%" y="213" width="0.1625%" height="15" fill="rgb(229,220,36)" fg:x="856" fg:w="2"/><text x="69.7870%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.5370%" y="197" width="0.1625%" height="15" fill="rgb(211,17,16)" fg:x="856" fg:w="2"/><text x="69.7870%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6182%" y="181" width="0.0812%" height="15" fill="rgb(222,55,31)" fg:x="857" fg:w="1"/><text x="69.8682%" y="191.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="69.3745%" y="309" width="0.4874%" height="15" fill="rgb(221,221,31)" fg:x="854" fg:w="6"/><text x="69.6245%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="69.3745%" y="293" width="0.4874%" height="15" fill="rgb(227,168,26)" fg:x="854" fg:w="6"/><text x="69.6245%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="69.3745%" y="277" width="0.4874%" height="15" fill="rgb(224,139,9)" fg:x="854" fg:w="6"/><text x="69.6245%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="69.3745%" y="261" width="0.4874%" height="15" fill="rgb(254,172,0)" fg:x="854" fg:w="6"/><text x="69.6245%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="69.3745%" y="245" width="0.4874%" height="15" fill="rgb(235,203,1)" fg:x="854" fg:w="6"/><text x="69.6245%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="69.5370%" y="229" width="0.3249%" height="15" fill="rgb(216,205,24)" fg:x="856" fg:w="4"/><text x="69.7870%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6994%" y="213" width="0.1625%" height="15" fill="rgb(233,24,6)" fg:x="858" fg:w="2"/><text x="69.9494%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.6994%" y="197" width="0.1625%" height="15" fill="rgb(244,110,9)" fg:x="858" fg:w="2"/><text x="69.9494%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.7807%" y="181" width="0.0812%" height="15" fill="rgb(239,222,42)" fg:x="859" fg:w="1"/><text x="70.0307%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7807%" y="165" width="0.0812%" height="15" fill="rgb(218,145,13)" fg:x="859" fg:w="1"/><text x="70.0307%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7807%" y="149" width="0.0812%" height="15" fill="rgb(207,69,11)" fg:x="859" fg:w="1"/><text x="70.0307%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="69.7807%" y="133" width="0.0812%" height="15" fill="rgb(220,223,22)" fg:x="859" fg:w="1"/><text x="70.0307%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7807%" y="117" width="0.0812%" height="15" fill="rgb(245,102,5)" fg:x="859" fg:w="1"/><text x="70.0307%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7807%" y="101" width="0.0812%" height="15" fill="rgb(211,148,2)" fg:x="859" fg:w="1"/><text x="70.0307%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.7807%" y="85" width="0.0812%" height="15" fill="rgb(241,13,44)" fg:x="859" fg:w="1"/><text x="70.0307%" y="95.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.7807%" y="69" width="0.0812%" height="15" fill="rgb(219,137,21)" fg:x="859" fg:w="1"/><text x="70.0307%" y="79.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.8619%" y="213" width="0.1625%" height="15" fill="rgb(242,206,5)" fg:x="860" fg:w="2"/><text x="70.1119%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8619%" y="197" width="0.1625%" height="15" fill="rgb(217,114,22)" fg:x="860" fg:w="2"/><text x="70.1119%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="69.8619%" y="181" width="0.1625%" height="15" fill="rgb(253,206,42)" fg:x="860" fg:w="2"/><text x="70.1119%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.8619%" y="165" width="0.1625%" height="15" fill="rgb(236,102,18)" fg:x="860" fg:w="2"/><text x="70.1119%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.0244%" y="213" width="0.0812%" height="15" fill="rgb(208,59,49)" fg:x="862" fg:w="1"/><text x="70.2744%" y="223.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.0244%" y="197" width="0.0812%" height="15" fill="rgb(215,194,28)" fg:x="862" fg:w="1"/><text x="70.2744%" y="207.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.97%)</title><rect x="69.2120%" y="373" width="0.9748%" height="15" fill="rgb(243,207,11)" fg:x="852" fg:w="12"/><text x="69.4620%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.97%)</title><rect x="69.2120%" y="357" width="0.9748%" height="15" fill="rgb(254,179,35)" fg:x="852" fg:w="12"/><text x="69.4620%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.97%)</title><rect x="69.2120%" y="341" width="0.9748%" height="15" fill="rgb(235,97,3)" fg:x="852" fg:w="12"/><text x="69.4620%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="69.2120%" y="325" width="0.9748%" height="15" fill="rgb(215,155,33)" fg:x="852" fg:w="12"/><text x="69.4620%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="69.8619%" y="309" width="0.3249%" height="15" fill="rgb(223,128,12)" fg:x="860" fg:w="4"/><text x="70.1119%" y="319.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="69.8619%" y="293" width="0.3249%" height="15" fill="rgb(208,157,18)" fg:x="860" fg:w="4"/><text x="70.1119%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.8619%" y="277" width="0.3249%" height="15" fill="rgb(249,70,54)" fg:x="860" fg:w="4"/><text x="70.1119%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.8619%" y="261" width="0.3249%" height="15" fill="rgb(244,118,24)" fg:x="860" fg:w="4"/><text x="70.1119%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.8619%" y="245" width="0.3249%" height="15" fill="rgb(211,54,0)" fg:x="860" fg:w="4"/><text x="70.1119%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.8619%" y="229" width="0.3249%" height="15" fill="rgb(245,137,45)" fg:x="860" fg:w="4"/><text x="70.1119%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1056%" y="213" width="0.0812%" height="15" fill="rgb(232,154,31)" fg:x="863" fg:w="1"/><text x="70.3556%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1056%" y="197" width="0.0812%" height="15" fill="rgb(253,6,39)" fg:x="863" fg:w="1"/><text x="70.3556%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1056%" y="181" width="0.0812%" height="15" fill="rgb(234,183,24)" fg:x="863" fg:w="1"/><text x="70.3556%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (478 samples, 38.83%)</title><rect x="31.4379%" y="597" width="38.8302%" height="15" fill="rgb(252,84,40)" fg:x="387" fg:w="478"/><text x="31.6879%" y="607.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perfo..</text></g><g><title>kernel::plugins::mw::apply_middleware (477 samples, 38.75%)</title><rect x="31.5191%" y="581" width="38.7490%" height="15" fill="rgb(224,65,2)" fg:x="388" fg:w="477"/><text x="31.7691%" y="591.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (477 samples, 38.75%)</title><rect x="31.5191%" y="565" width="38.7490%" height="15" fill="rgb(229,38,24)" fg:x="388" fg:w="477"/><text x="31.7691%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (476 samples, 38.67%)</title><rect x="31.6003%" y="549" width="38.6677%" height="15" fill="rgb(218,131,50)" fg:x="389" fg:w="476"/><text x="31.8503%" y="559.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (459 samples, 37.29%)</title><rect x="32.9813%" y="533" width="37.2868%" height="15" fill="rgb(233,106,18)" fg:x="406" fg:w="459"/><text x="33.2313%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (459 samples, 37.29%)</title><rect x="32.9813%" y="517" width="37.2868%" height="15" fill="rgb(220,216,11)" fg:x="406" fg:w="459"/><text x="33.2313%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (458 samples, 37.21%)</title><rect x="33.0626%" y="501" width="37.2055%" height="15" fill="rgb(251,100,45)" fg:x="407" fg:w="458"/><text x="33.3126%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (458 samples, 37.21%)</title><rect x="33.0626%" y="485" width="37.2055%" height="15" fill="rgb(235,143,32)" fg:x="407" fg:w="458"/><text x="33.3126%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (458 samples, 37.21%)</title><rect x="33.0626%" y="469" width="37.2055%" height="15" fill="rgb(248,124,34)" fg:x="407" fg:w="458"/><text x="33.3126%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (458 samples, 37.21%)</title><rect x="33.0626%" y="453" width="37.2055%" height="15" fill="rgb(225,221,4)" fg:x="407" fg:w="458"/><text x="33.3126%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (458 samples, 37.21%)</title><rect x="33.0626%" y="437" width="37.2055%" height="15" fill="rgb(242,27,43)" fg:x="407" fg:w="458"/><text x="33.3126%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (458 samples, 37.21%)</title><rect x="33.0626%" y="421" width="37.2055%" height="15" fill="rgb(227,54,8)" fg:x="407" fg:w="458"/><text x="33.3126%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (458 samples, 37.21%)</title><rect x="33.0626%" y="405" width="37.2055%" height="15" fill="rgb(253,139,49)" fg:x="407" fg:w="458"/><text x="33.3126%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::action..</text></g><g><title>plugins_core::looking::model::new_area_observation (448 samples, 36.39%)</title><rect x="33.8749%" y="389" width="36.3932%" height="15" fill="rgb(231,26,43)" fg:x="417" fg:w="448"/><text x="34.1249%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="70.1868%" y="373" width="0.0812%" height="15" fill="rgb(207,121,39)" fg:x="864" fg:w="1"/><text x="70.4368%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2681%" y="581" width="0.0812%" height="15" fill="rgb(223,101,35)" fg:x="865" fg:w="1"/><text x="70.5181%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2681%" y="565" width="0.0812%" height="15" fill="rgb(232,87,23)" fg:x="865" fg:w="1"/><text x="70.5181%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2681%" y="549" width="0.0812%" height="15" fill="rgb(225,180,29)" fg:x="865" fg:w="1"/><text x="70.5181%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2681%" y="533" width="0.0812%" height="15" fill="rgb(225,25,17)" fg:x="865" fg:w="1"/><text x="70.5181%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2681%" y="517" width="0.0812%" height="15" fill="rgb(223,8,52)" fg:x="865" fg:w="1"/><text x="70.5181%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2681%" y="501" width="0.0812%" height="15" fill="rgb(246,42,21)" fg:x="865" fg:w="1"/><text x="70.5181%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2681%" y="485" width="0.0812%" height="15" fill="rgb(205,64,43)" fg:x="865" fg:w="1"/><text x="70.5181%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.2681%" y="469" width="0.0812%" height="15" fill="rgb(221,160,13)" fg:x="865" fg:w="1"/><text x="70.5181%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.2681%" y="453" width="0.0812%" height="15" fill="rgb(239,58,35)" fg:x="865" fg:w="1"/><text x="70.5181%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.2681%" y="437" width="0.0812%" height="15" fill="rgb(251,26,40)" fg:x="865" fg:w="1"/><text x="70.5181%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.2681%" y="421" width="0.0812%" height="15" fill="rgb(247,0,4)" fg:x="865" fg:w="1"/><text x="70.5181%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2681%" y="405" width="0.0812%" height="15" fill="rgb(218,130,10)" fg:x="865" fg:w="1"/><text x="70.5181%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.5118%" y="533" width="0.0812%" height="15" fill="rgb(239,32,7)" fg:x="868" fg:w="1"/><text x="70.7618%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (5 samples, 0.41%)</title><rect x="70.2681%" y="597" width="0.4062%" height="15" fill="rgb(210,192,24)" fg:x="865" fg:w="5"/><text x="70.5181%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="70.3493%" y="581" width="0.3249%" height="15" fill="rgb(226,212,17)" fg:x="866" fg:w="4"/><text x="70.5993%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="70.3493%" y="565" width="0.3249%" height="15" fill="rgb(219,201,28)" fg:x="866" fg:w="4"/><text x="70.5993%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.3493%" y="549" width="0.3249%" height="15" fill="rgb(235,207,41)" fg:x="866" fg:w="4"/><text x="70.5993%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.5930%" y="533" width="0.0812%" height="15" fill="rgb(241,95,54)" fg:x="869" fg:w="1"/><text x="70.8430%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.5930%" y="517" width="0.0812%" height="15" fill="rgb(248,12,23)" fg:x="869" fg:w="1"/><text x="70.8430%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.5930%" y="501" width="0.0812%" height="15" fill="rgb(228,173,4)" fg:x="869" fg:w="1"/><text x="70.8430%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.5930%" y="485" width="0.0812%" height="15" fill="rgb(254,99,5)" fg:x="869" fg:w="1"/><text x="70.8430%" y="495.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="70.6742%" y="597" width="0.0812%" height="15" fill="rgb(212,184,17)" fg:x="870" fg:w="1"/><text x="70.9242%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.6742%" y="581" width="0.0812%" height="15" fill="rgb(252,174,1)" fg:x="870" fg:w="1"/><text x="70.9242%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9180%" y="485" width="0.0812%" height="15" fill="rgb(241,118,51)" fg:x="873" fg:w="1"/><text x="71.1680%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.8367%" y="549" width="0.2437%" height="15" fill="rgb(227,94,47)" fg:x="872" fg:w="3"/><text x="71.0867%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="70.8367%" y="533" width="0.2437%" height="15" fill="rgb(229,104,2)" fg:x="872" fg:w="3"/><text x="71.0867%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.9180%" y="517" width="0.1625%" height="15" fill="rgb(219,28,31)" fg:x="873" fg:w="2"/><text x="71.1680%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="70.9180%" y="501" width="0.1625%" height="15" fill="rgb(233,109,36)" fg:x="873" fg:w="2"/><text x="71.1680%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9992%" y="485" width="0.0812%" height="15" fill="rgb(246,88,11)" fg:x="874" fg:w="1"/><text x="71.2492%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.0804%" y="517" width="0.0812%" height="15" fill="rgb(209,212,17)" fg:x="875" fg:w="1"/><text x="71.3304%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2429%" y="405" width="0.0812%" height="15" fill="rgb(243,59,29)" fg:x="877" fg:w="1"/><text x="71.4929%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2429%" y="389" width="0.0812%" height="15" fill="rgb(244,205,48)" fg:x="877" fg:w="1"/><text x="71.4929%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="71.2429%" y="453" width="0.1625%" height="15" fill="rgb(227,30,6)" fg:x="877" fg:w="2"/><text x="71.4929%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="71.2429%" y="437" width="0.1625%" height="15" fill="rgb(220,205,48)" fg:x="877" fg:w="2"/><text x="71.4929%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="71.2429%" y="421" width="0.1625%" height="15" fill="rgb(250,94,14)" fg:x="877" fg:w="2"/><text x="71.4929%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.3241%" y="405" width="0.0812%" height="15" fill="rgb(216,119,42)" fg:x="878" fg:w="1"/><text x="71.5741%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.3241%" y="389" width="0.0812%" height="15" fill="rgb(232,155,0)" fg:x="878" fg:w="1"/><text x="71.5741%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.3241%" y="373" width="0.0812%" height="15" fill="rgb(212,24,32)" fg:x="878" fg:w="1"/><text x="71.5741%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3241%" y="357" width="0.0812%" height="15" fill="rgb(216,69,20)" fg:x="878" fg:w="1"/><text x="71.5741%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="71.2429%" y="501" width="0.2437%" height="15" fill="rgb(229,73,31)" fg:x="877" fg:w="3"/><text x="71.4929%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="71.2429%" y="485" width="0.2437%" height="15" fill="rgb(224,219,20)" fg:x="877" fg:w="3"/><text x="71.4929%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="71.2429%" y="469" width="0.2437%" height="15" fill="rgb(215,146,41)" fg:x="877" fg:w="3"/><text x="71.4929%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4054%" y="453" width="0.0812%" height="15" fill="rgb(244,71,31)" fg:x="879" fg:w="1"/><text x="71.6554%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4054%" y="437" width="0.0812%" height="15" fill="rgb(224,24,11)" fg:x="879" fg:w="1"/><text x="71.6554%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="71.0804%" y="549" width="0.4874%" height="15" fill="rgb(229,76,15)" fg:x="875" fg:w="6"/><text x="71.3304%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="71.0804%" y="533" width="0.4874%" height="15" fill="rgb(209,93,2)" fg:x="875" fg:w="6"/><text x="71.3304%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="71.1617%" y="517" width="0.4062%" height="15" fill="rgb(216,200,50)" fg:x="876" fg:w="5"/><text x="71.4117%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4866%" y="501" width="0.0812%" height="15" fill="rgb(211,67,34)" fg:x="880" fg:w="1"/><text x="71.7366%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4866%" y="485" width="0.0812%" height="15" fill="rgb(225,87,47)" fg:x="880" fg:w="1"/><text x="71.7366%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.4866%" y="469" width="0.0812%" height="15" fill="rgb(217,185,16)" fg:x="880" fg:w="1"/><text x="71.7366%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.5678%" y="485" width="0.0812%" height="15" fill="rgb(205,0,0)" fg:x="881" fg:w="1"/><text x="71.8178%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (12 samples, 0.97%)</title><rect x="70.7555%" y="581" width="0.9748%" height="15" fill="rgb(207,116,45)" fg:x="871" fg:w="12"/><text x="71.0055%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.97%)</title><rect x="70.7555%" y="565" width="0.9748%" height="15" fill="rgb(221,156,26)" fg:x="871" fg:w="12"/><text x="71.0055%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.5678%" y="549" width="0.1625%" height="15" fill="rgb(213,140,4)" fg:x="881" fg:w="2"/><text x="71.8178%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.5678%" y="533" width="0.1625%" height="15" fill="rgb(231,224,15)" fg:x="881" fg:w="2"/><text x="71.8178%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.5678%" y="517" width="0.1625%" height="15" fill="rgb(244,76,20)" fg:x="881" fg:w="2"/><text x="71.8178%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.5678%" y="501" width="0.1625%" height="15" fill="rgb(238,117,7)" fg:x="881" fg:w="2"/><text x="71.8178%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6491%" y="485" width="0.0812%" height="15" fill="rgb(235,1,10)" fg:x="882" fg:w="1"/><text x="71.8991%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6491%" y="469" width="0.0812%" height="15" fill="rgb(216,165,6)" fg:x="882" fg:w="1"/><text x="71.8991%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.6491%" y="453" width="0.0812%" height="15" fill="rgb(246,91,35)" fg:x="882" fg:w="1"/><text x="71.8991%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.6491%" y="437" width="0.0812%" height="15" fill="rgb(228,96,24)" fg:x="882" fg:w="1"/><text x="71.8991%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7303%" y="517" width="0.0812%" height="15" fill="rgb(254,217,53)" fg:x="883" fg:w="1"/><text x="71.9803%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7303%" y="501" width="0.0812%" height="15" fill="rgb(209,60,0)" fg:x="883" fg:w="1"/><text x="71.9803%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7303%" y="485" width="0.0812%" height="15" fill="rgb(250,93,26)" fg:x="883" fg:w="1"/><text x="71.9803%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7303%" y="469" width="0.0812%" height="15" fill="rgb(211,9,40)" fg:x="883" fg:w="1"/><text x="71.9803%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7303%" y="453" width="0.0812%" height="15" fill="rgb(242,57,20)" fg:x="883" fg:w="1"/><text x="71.9803%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7303%" y="437" width="0.0812%" height="15" fill="rgb(248,85,48)" fg:x="883" fg:w="1"/><text x="71.9803%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7303%" y="421" width="0.0812%" height="15" fill="rgb(212,117,2)" fg:x="883" fg:w="1"/><text x="71.9803%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7303%" y="405" width="0.0812%" height="15" fill="rgb(243,19,3)" fg:x="883" fg:w="1"/><text x="71.9803%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.7303%" y="389" width="0.0812%" height="15" fill="rgb(232,217,24)" fg:x="883" fg:w="1"/><text x="71.9803%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.7303%" y="373" width="0.0812%" height="15" fill="rgb(224,175,40)" fg:x="883" fg:w="1"/><text x="71.9803%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.7303%" y="357" width="0.0812%" height="15" fill="rgb(212,162,32)" fg:x="883" fg:w="1"/><text x="71.9803%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.7303%" y="341" width="0.0812%" height="15" fill="rgb(215,9,4)" fg:x="883" fg:w="1"/><text x="71.9803%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7303%" y="325" width="0.0812%" height="15" fill="rgb(242,42,7)" fg:x="883" fg:w="1"/><text x="71.9803%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7303%" y="565" width="0.1625%" height="15" fill="rgb(242,184,45)" fg:x="883" fg:w="2"/><text x="71.9803%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7303%" y="549" width="0.1625%" height="15" fill="rgb(228,111,51)" fg:x="883" fg:w="2"/><text x="71.9803%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7303%" y="533" width="0.1625%" height="15" fill="rgb(236,147,17)" fg:x="883" fg:w="2"/><text x="71.9803%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8115%" y="517" width="0.0812%" height="15" fill="rgb(210,75,22)" fg:x="884" fg:w="1"/><text x="72.0615%" y="527.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="71.8928%" y="565" width="0.0812%" height="15" fill="rgb(217,159,45)" fg:x="885" fg:w="1"/><text x="72.1428%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8928%" y="549" width="0.0812%" height="15" fill="rgb(245,165,53)" fg:x="885" fg:w="1"/><text x="72.1428%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.9740%" y="469" width="0.0812%" height="15" fill="rgb(251,190,50)" fg:x="886" fg:w="1"/><text x="72.2240%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.9740%" y="453" width="0.0812%" height="15" fill="rgb(208,203,29)" fg:x="886" fg:w="1"/><text x="72.2240%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.9740%" y="437" width="0.0812%" height="15" fill="rgb(207,209,35)" fg:x="886" fg:w="1"/><text x="72.2240%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.9740%" y="421" width="0.0812%" height="15" fill="rgb(230,144,49)" fg:x="886" fg:w="1"/><text x="72.2240%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9740%" y="405" width="0.0812%" height="15" fill="rgb(229,31,6)" fg:x="886" fg:w="1"/><text x="72.2240%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0552%" y="437" width="0.0812%" height="15" fill="rgb(251,129,24)" fg:x="887" fg:w="1"/><text x="72.3052%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="72.0552%" y="469" width="0.1625%" height="15" fill="rgb(235,105,15)" fg:x="887" fg:w="2"/><text x="72.3052%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.0552%" y="453" width="0.1625%" height="15" fill="rgb(216,52,43)" fg:x="887" fg:w="2"/><text x="72.3052%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.1365%" y="437" width="0.0812%" height="15" fill="rgb(238,144,41)" fg:x="888" fg:w="1"/><text x="72.3865%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="71.9740%" y="565" width="0.3249%" height="15" fill="rgb(243,63,9)" fg:x="886" fg:w="4"/><text x="72.2240%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="71.9740%" y="549" width="0.3249%" height="15" fill="rgb(246,208,1)" fg:x="886" fg:w="4"/><text x="72.2240%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.9740%" y="533" width="0.3249%" height="15" fill="rgb(233,182,18)" fg:x="886" fg:w="4"/><text x="72.2240%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="71.9740%" y="517" width="0.3249%" height="15" fill="rgb(242,224,8)" fg:x="886" fg:w="4"/><text x="72.2240%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.9740%" y="501" width="0.3249%" height="15" fill="rgb(243,54,37)" fg:x="886" fg:w="4"/><text x="72.2240%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="71.9740%" y="485" width="0.3249%" height="15" fill="rgb(233,192,12)" fg:x="886" fg:w="4"/><text x="72.2240%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2177%" y="469" width="0.0812%" height="15" fill="rgb(251,192,53)" fg:x="889" fg:w="1"/><text x="72.4677%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.2177%" y="453" width="0.0812%" height="15" fill="rgb(246,141,26)" fg:x="889" fg:w="1"/><text x="72.4677%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.2177%" y="437" width="0.0812%" height="15" fill="rgb(239,195,19)" fg:x="889" fg:w="1"/><text x="72.4677%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.2177%" y="421" width="0.0812%" height="15" fill="rgb(241,16,39)" fg:x="889" fg:w="1"/><text x="72.4677%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.2177%" y="405" width="0.0812%" height="15" fill="rgb(223,13,53)" fg:x="889" fg:w="1"/><text x="72.4677%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2177%" y="389" width="0.0812%" height="15" fill="rgb(214,227,0)" fg:x="889" fg:w="1"/><text x="72.4677%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.2177%" y="373" width="0.0812%" height="15" fill="rgb(228,103,26)" fg:x="889" fg:w="1"/><text x="72.4677%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.2989%" y="421" width="0.1625%" height="15" fill="rgb(254,177,53)" fg:x="890" fg:w="2"/><text x="72.5489%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.2989%" y="405" width="0.1625%" height="15" fill="rgb(208,201,34)" fg:x="890" fg:w="2"/><text x="72.5489%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.2989%" y="389" width="0.1625%" height="15" fill="rgb(212,39,5)" fg:x="890" fg:w="2"/><text x="72.5489%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="72.2989%" y="373" width="0.1625%" height="15" fill="rgb(246,117,3)" fg:x="890" fg:w="2"/><text x="72.5489%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3802%" y="357" width="0.0812%" height="15" fill="rgb(244,118,39)" fg:x="891" fg:w="1"/><text x="72.6302%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.5426%" y="405" width="0.0812%" height="15" fill="rgb(241,64,10)" fg:x="893" fg:w="1"/><text x="72.7926%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5426%" y="389" width="0.0812%" height="15" fill="rgb(229,39,44)" fg:x="893" fg:w="1"/><text x="72.7926%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.5426%" y="373" width="0.0812%" height="15" fill="rgb(230,226,3)" fg:x="893" fg:w="1"/><text x="72.7926%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.5426%" y="357" width="0.0812%" height="15" fill="rgb(222,13,42)" fg:x="893" fg:w="1"/><text x="72.7926%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="72.2989%" y="453" width="0.4062%" height="15" fill="rgb(247,180,54)" fg:x="890" fg:w="5"/><text x="72.5489%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="72.2989%" y="437" width="0.4062%" height="15" fill="rgb(205,96,16)" fg:x="890" fg:w="5"/><text x="72.5489%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.4614%" y="421" width="0.2437%" height="15" fill="rgb(205,100,21)" fg:x="892" fg:w="3"/><text x="72.7114%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6239%" y="405" width="0.0812%" height="15" fill="rgb(248,51,4)" fg:x="894" fg:w="1"/><text x="72.8739%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.06%)</title><rect x="71.7303%" y="581" width="1.0561%" height="15" fill="rgb(217,197,30)" fg:x="883" fg:w="13"/><text x="71.9803%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.49%)</title><rect x="72.2989%" y="565" width="0.4874%" height="15" fill="rgb(240,179,40)" fg:x="890" fg:w="6"/><text x="72.5489%" y="575.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.49%)</title><rect x="72.2989%" y="549" width="0.4874%" height="15" fill="rgb(212,185,35)" fg:x="890" fg:w="6"/><text x="72.5489%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="72.2989%" y="533" width="0.4874%" height="15" fill="rgb(251,222,31)" fg:x="890" fg:w="6"/><text x="72.5489%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="72.2989%" y="517" width="0.4874%" height="15" fill="rgb(208,140,36)" fg:x="890" fg:w="6"/><text x="72.5489%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="72.2989%" y="501" width="0.4874%" height="15" fill="rgb(220,148,1)" fg:x="890" fg:w="6"/><text x="72.5489%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="72.2989%" y="485" width="0.4874%" height="15" fill="rgb(254,4,28)" fg:x="890" fg:w="6"/><text x="72.5489%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="72.2989%" y="469" width="0.4874%" height="15" fill="rgb(222,185,44)" fg:x="890" fg:w="6"/><text x="72.5489%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7051%" y="453" width="0.0812%" height="15" fill="rgb(215,74,39)" fg:x="895" fg:w="1"/><text x="72.9551%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (26 samples, 2.11%)</title><rect x="70.7555%" y="597" width="2.1121%" height="15" fill="rgb(247,86,4)" fg:x="871" fg:w="26"/><text x="71.0055%" y="607.50">e..</text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="72.7864%" y="581" width="0.0812%" height="15" fill="rgb(231,105,32)" fg:x="896" fg:w="1"/><text x="73.0364%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.7864%" y="565" width="0.0812%" height="15" fill="rgb(222,65,35)" fg:x="896" fg:w="1"/><text x="73.0364%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9488%" y="517" width="0.0812%" height="15" fill="rgb(218,145,35)" fg:x="898" fg:w="1"/><text x="73.1988%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9488%" y="501" width="0.0812%" height="15" fill="rgb(208,7,15)" fg:x="898" fg:w="1"/><text x="73.1988%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9488%" y="485" width="0.0812%" height="15" fill="rgb(209,83,13)" fg:x="898" fg:w="1"/><text x="73.1988%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9488%" y="469" width="0.0812%" height="15" fill="rgb(218,3,10)" fg:x="898" fg:w="1"/><text x="73.1988%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.8676%" y="549" width="0.2437%" height="15" fill="rgb(211,219,4)" fg:x="897" fg:w="3"/><text x="73.1176%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.8676%" y="533" width="0.2437%" height="15" fill="rgb(228,194,12)" fg:x="897" fg:w="3"/><text x="73.1176%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0301%" y="517" width="0.0812%" height="15" fill="rgb(210,175,7)" fg:x="899" fg:w="1"/><text x="73.2801%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0301%" y="501" width="0.0812%" height="15" fill="rgb(243,132,6)" fg:x="899" fg:w="1"/><text x="73.2801%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0301%" y="485" width="0.0812%" height="15" fill="rgb(207,72,18)" fg:x="899" fg:w="1"/><text x="73.2801%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0301%" y="469" width="0.0812%" height="15" fill="rgb(236,1,18)" fg:x="899" fg:w="1"/><text x="73.2801%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0301%" y="453" width="0.0812%" height="15" fill="rgb(227,0,18)" fg:x="899" fg:w="1"/><text x="73.2801%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0301%" y="437" width="0.0812%" height="15" fill="rgb(247,37,5)" fg:x="899" fg:w="1"/><text x="73.2801%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0301%" y="421" width="0.0812%" height="15" fill="rgb(237,179,24)" fg:x="899" fg:w="1"/><text x="73.2801%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0301%" y="405" width="0.0812%" height="15" fill="rgb(226,53,20)" fg:x="899" fg:w="1"/><text x="73.2801%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0301%" y="389" width="0.0812%" height="15" fill="rgb(247,75,7)" fg:x="899" fg:w="1"/><text x="73.2801%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0301%" y="373" width="0.0812%" height="15" fill="rgb(233,96,12)" fg:x="899" fg:w="1"/><text x="73.2801%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0301%" y="357" width="0.0812%" height="15" fill="rgb(224,125,0)" fg:x="899" fg:w="1"/><text x="73.2801%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0301%" y="341" width="0.0812%" height="15" fill="rgb(224,92,25)" fg:x="899" fg:w="1"/><text x="73.2801%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1113%" y="469" width="0.0812%" height="15" fill="rgb(224,42,24)" fg:x="900" fg:w="1"/><text x="73.3613%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1113%" y="453" width="0.0812%" height="15" fill="rgb(234,132,49)" fg:x="900" fg:w="1"/><text x="73.3613%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.1925%" y="389" width="0.1625%" height="15" fill="rgb(248,100,35)" fg:x="901" fg:w="2"/><text x="73.4425%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1925%" y="373" width="0.1625%" height="15" fill="rgb(239,94,40)" fg:x="901" fg:w="2"/><text x="73.4425%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.2738%" y="357" width="0.0812%" height="15" fill="rgb(235,139,28)" fg:x="902" fg:w="1"/><text x="73.5238%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.2738%" y="341" width="0.0812%" height="15" fill="rgb(217,144,7)" fg:x="902" fg:w="1"/><text x="73.5238%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2738%" y="325" width="0.0812%" height="15" fill="rgb(227,55,4)" fg:x="902" fg:w="1"/><text x="73.5238%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.1925%" y="453" width="0.2437%" height="15" fill="rgb(252,82,54)" fg:x="901" fg:w="3"/><text x="73.4425%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.1925%" y="437" width="0.2437%" height="15" fill="rgb(245,172,4)" fg:x="901" fg:w="3"/><text x="73.4425%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.1925%" y="421" width="0.2437%" height="15" fill="rgb(207,26,27)" fg:x="901" fg:w="3"/><text x="73.4425%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.1925%" y="405" width="0.2437%" height="15" fill="rgb(252,98,18)" fg:x="901" fg:w="3"/><text x="73.4425%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.3550%" y="389" width="0.0812%" height="15" fill="rgb(244,8,26)" fg:x="903" fg:w="1"/><text x="73.6050%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3550%" y="373" width="0.0812%" height="15" fill="rgb(237,173,45)" fg:x="903" fg:w="1"/><text x="73.6050%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.3550%" y="357" width="0.0812%" height="15" fill="rgb(208,213,49)" fg:x="903" fg:w="1"/><text x="73.6050%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.3550%" y="341" width="0.0812%" height="15" fill="rgb(212,122,37)" fg:x="903" fg:w="1"/><text x="73.6050%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3550%" y="325" width="0.0812%" height="15" fill="rgb(213,80,17)" fg:x="903" fg:w="1"/><text x="73.6050%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3550%" y="309" width="0.0812%" height="15" fill="rgb(206,210,43)" fg:x="903" fg:w="1"/><text x="73.6050%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.4362%" y="453" width="0.0812%" height="15" fill="rgb(229,214,3)" fg:x="904" fg:w="1"/><text x="73.6862%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.4362%" y="437" width="0.0812%" height="15" fill="rgb(235,213,29)" fg:x="904" fg:w="1"/><text x="73.6862%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4362%" y="421" width="0.0812%" height="15" fill="rgb(248,135,26)" fg:x="904" fg:w="1"/><text x="73.6862%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="73.1113%" y="549" width="0.6499%" height="15" fill="rgb(242,188,12)" fg:x="900" fg:w="8"/><text x="73.3613%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="73.1113%" y="533" width="0.6499%" height="15" fill="rgb(245,38,12)" fg:x="900" fg:w="8"/><text x="73.3613%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="73.1113%" y="517" width="0.6499%" height="15" fill="rgb(218,42,13)" fg:x="900" fg:w="8"/><text x="73.3613%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.65%)</title><rect x="73.1113%" y="501" width="0.6499%" height="15" fill="rgb(238,132,49)" fg:x="900" fg:w="8"/><text x="73.3613%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="73.1113%" y="485" width="0.6499%" height="15" fill="rgb(209,196,19)" fg:x="900" fg:w="8"/><text x="73.3613%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.57%)</title><rect x="73.1925%" y="469" width="0.5686%" height="15" fill="rgb(244,131,22)" fg:x="901" fg:w="7"/><text x="73.4425%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.5175%" y="453" width="0.2437%" height="15" fill="rgb(223,18,34)" fg:x="905" fg:w="3"/><text x="73.7675%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.5175%" y="437" width="0.2437%" height="15" fill="rgb(252,124,54)" fg:x="905" fg:w="3"/><text x="73.7675%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="73.5987%" y="421" width="0.1625%" height="15" fill="rgb(229,106,42)" fg:x="906" fg:w="2"/><text x="73.8487%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.5987%" y="405" width="0.1625%" height="15" fill="rgb(221,129,1)" fg:x="906" fg:w="2"/><text x="73.8487%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.5987%" y="389" width="0.1625%" height="15" fill="rgb(229,74,15)" fg:x="906" fg:w="2"/><text x="73.8487%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="73.5987%" y="373" width="0.1625%" height="15" fill="rgb(210,206,50)" fg:x="906" fg:w="2"/><text x="73.8487%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.5987%" y="357" width="0.1625%" height="15" fill="rgb(251,114,31)" fg:x="906" fg:w="2"/><text x="73.8487%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.6799%" y="341" width="0.0812%" height="15" fill="rgb(215,225,28)" fg:x="907" fg:w="1"/><text x="73.9299%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.6799%" y="325" width="0.0812%" height="15" fill="rgb(237,109,14)" fg:x="907" fg:w="1"/><text x="73.9299%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.6799%" y="309" width="0.0812%" height="15" fill="rgb(230,13,37)" fg:x="907" fg:w="1"/><text x="73.9299%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6799%" y="293" width="0.0812%" height="15" fill="rgb(231,40,28)" fg:x="907" fg:w="1"/><text x="73.9299%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (909 samples, 73.84%)</title><rect x="0.0000%" y="677" width="73.8424%" height="15" fill="rgb(231,202,18)" fg:x="0" fg:w="909"/><text x="0.2500%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (909 samples, 73.84%)</title><rect x="0.0000%" y="661" width="73.8424%" height="15" fill="rgb(225,33,18)" fg:x="0" fg:w="909"/><text x="0.2500%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (909 samples, 73.84%)</title><rect x="0.0000%" y="645" width="73.8424%" height="15" fill="rgb(223,64,47)" fg:x="0" fg:w="909"/><text x="0.2500%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (522 samples, 42.40%)</title><rect x="31.4379%" y="629" width="42.4045%" height="15" fill="rgb(234,114,13)" fg:x="387" fg:w="522"/><text x="31.6879%" y="639.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (522 samples, 42.40%)</title><rect x="31.4379%" y="613" width="42.4045%" height="15" fill="rgb(248,56,40)" fg:x="387" fg:w="522"/><text x="31.6879%" y="623.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (12 samples, 0.97%)</title><rect x="72.8676%" y="597" width="0.9748%" height="15" fill="rgb(221,194,21)" fg:x="897" fg:w="12"/><text x="73.1176%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.97%)</title><rect x="72.8676%" y="581" width="0.9748%" height="15" fill="rgb(242,108,46)" fg:x="897" fg:w="12"/><text x="73.1176%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.97%)</title><rect x="72.8676%" y="565" width="0.9748%" height="15" fill="rgb(220,106,10)" fg:x="897" fg:w="12"/><text x="73.1176%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="73.7612%" y="549" width="0.0812%" height="15" fill="rgb(211,88,4)" fg:x="908" fg:w="1"/><text x="74.0112%" y="559.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="73.7612%" y="533" width="0.0812%" height="15" fill="rgb(214,95,34)" fg:x="908" fg:w="1"/><text x="74.0112%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7612%" y="517" width="0.0812%" height="15" fill="rgb(250,160,33)" fg:x="908" fg:w="1"/><text x="74.0112%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7612%" y="501" width="0.0812%" height="15" fill="rgb(225,29,10)" fg:x="908" fg:w="1"/><text x="74.0112%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7612%" y="485" width="0.0812%" height="15" fill="rgb(224,28,30)" fg:x="908" fg:w="1"/><text x="74.0112%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7612%" y="469" width="0.0812%" height="15" fill="rgb(231,77,4)" fg:x="908" fg:w="1"/><text x="74.0112%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7612%" y="453" width="0.0812%" height="15" fill="rgb(209,63,21)" fg:x="908" fg:w="1"/><text x="74.0112%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7612%" y="437" width="0.0812%" height="15" fill="rgb(226,22,11)" fg:x="908" fg:w="1"/><text x="74.0112%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7612%" y="421" width="0.0812%" height="15" fill="rgb(216,82,30)" fg:x="908" fg:w="1"/><text x="74.0112%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7612%" y="405" width="0.0812%" height="15" fill="rgb(246,227,38)" fg:x="908" fg:w="1"/><text x="74.0112%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7612%" y="389" width="0.0812%" height="15" fill="rgb(251,203,53)" fg:x="908" fg:w="1"/><text x="74.0112%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7612%" y="373" width="0.0812%" height="15" fill="rgb(254,101,1)" fg:x="908" fg:w="1"/><text x="74.0112%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7612%" y="357" width="0.0812%" height="15" fill="rgb(241,180,5)" fg:x="908" fg:w="1"/><text x="74.0112%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="73.7612%" y="341" width="0.0812%" height="15" fill="rgb(218,168,4)" fg:x="908" fg:w="1"/><text x="74.0112%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9236%" y="517" width="0.0812%" height="15" fill="rgb(224,223,32)" fg:x="910" fg:w="1"/><text x="74.1736%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0049%" y="501" width="0.0812%" height="15" fill="rgb(236,106,22)" fg:x="911" fg:w="1"/><text x="74.2549%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.9236%" y="565" width="0.2437%" height="15" fill="rgb(206,121,5)" fg:x="910" fg:w="3"/><text x="74.1736%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.9236%" y="549" width="0.2437%" height="15" fill="rgb(233,87,28)" fg:x="910" fg:w="3"/><text x="74.1736%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="73.9236%" y="533" width="0.2437%" height="15" fill="rgb(236,137,17)" fg:x="910" fg:w="3"/><text x="74.1736%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.0049%" y="517" width="0.1625%" height="15" fill="rgb(209,183,38)" fg:x="911" fg:w="2"/><text x="74.2549%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0861%" y="501" width="0.0812%" height="15" fill="rgb(206,162,44)" fg:x="912" fg:w="1"/><text x="74.3361%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="73.9236%" y="597" width="0.3249%" height="15" fill="rgb(237,70,39)" fg:x="910" fg:w="4"/><text x="74.1736%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="73.9236%" y="581" width="0.3249%" height="15" fill="rgb(212,176,5)" fg:x="910" fg:w="4"/><text x="74.1736%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1673%" y="565" width="0.0812%" height="15" fill="rgb(232,95,16)" fg:x="913" fg:w="1"/><text x="74.4173%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="73.9236%" y="629" width="0.4062%" height="15" fill="rgb(219,115,35)" fg:x="910" fg:w="5"/><text x="74.1736%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.41%)</title><rect x="73.9236%" y="613" width="0.4062%" height="15" fill="rgb(251,67,27)" fg:x="910" fg:w="5"/><text x="74.1736%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2486%" y="597" width="0.0812%" height="15" fill="rgb(222,95,40)" fg:x="914" fg:w="1"/><text x="74.4986%" y="607.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3298%" y="565" width="0.0812%" height="15" fill="rgb(250,35,16)" fg:x="915" fg:w="1"/><text x="74.5798%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.4110%" y="533" width="0.0812%" height="15" fill="rgb(224,86,44)" fg:x="916" fg:w="1"/><text x="74.6610%" y="543.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="74.4110%" y="517" width="0.0812%" height="15" fill="rgb(237,53,53)" fg:x="916" fg:w="1"/><text x="74.6610%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="74.4110%" y="501" width="0.0812%" height="15" fill="rgb(208,171,33)" fg:x="916" fg:w="1"/><text x="74.6610%" y="511.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="74.4110%" y="485" width="0.0812%" height="15" fill="rgb(222,64,27)" fg:x="916" fg:w="1"/><text x="74.6610%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="74.4110%" y="469" width="0.0812%" height="15" fill="rgb(221,121,35)" fg:x="916" fg:w="1"/><text x="74.6610%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="74.4110%" y="453" width="0.0812%" height="15" fill="rgb(228,137,42)" fg:x="916" fg:w="1"/><text x="74.6610%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="74.4110%" y="437" width="0.0812%" height="15" fill="rgb(227,54,21)" fg:x="916" fg:w="1"/><text x="74.6610%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="74.4110%" y="421" width="0.0812%" height="15" fill="rgb(240,168,33)" fg:x="916" fg:w="1"/><text x="74.6610%" y="431.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="74.7360%" y="437" width="0.0812%" height="15" fill="rgb(243,159,6)" fg:x="920" fg:w="1"/><text x="74.9860%" y="447.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="74.4110%" y="549" width="0.4874%" height="15" fill="rgb(205,211,41)" fg:x="916" fg:w="6"/><text x="74.6610%" y="559.50"></text></g><g><title>libloading::safe::Library::new (5 samples, 0.41%)</title><rect x="74.4923%" y="533" width="0.4062%" height="15" fill="rgb(253,30,1)" fg:x="917" fg:w="5"/><text x="74.7423%" y="543.50"></text></g><g><title>dlopen (5 samples, 0.41%)</title><rect x="74.4923%" y="517" width="0.4062%" height="15" fill="rgb(226,80,18)" fg:x="917" fg:w="5"/><text x="74.7423%" y="527.50"></text></g><g><title>_dl_catch_error (5 samples, 0.41%)</title><rect x="74.4923%" y="501" width="0.4062%" height="15" fill="rgb(253,156,46)" fg:x="917" fg:w="5"/><text x="74.7423%" y="511.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.41%)</title><rect x="74.4923%" y="485" width="0.4062%" height="15" fill="rgb(248,87,27)" fg:x="917" fg:w="5"/><text x="74.7423%" y="495.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.41%)</title><rect x="74.4923%" y="469" width="0.4062%" height="15" fill="rgb(227,122,2)" fg:x="917" fg:w="5"/><text x="74.7423%" y="479.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.41%)</title><rect x="74.4923%" y="453" width="0.4062%" height="15" fill="rgb(229,94,39)" fg:x="917" fg:w="5"/><text x="74.7423%" y="463.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="74.8172%" y="437" width="0.0812%" height="15" fill="rgb(225,173,31)" fg:x="921" fg:w="1"/><text x="75.0672%" y="447.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="74.8172%" y="421" width="0.0812%" height="15" fill="rgb(239,176,30)" fg:x="921" fg:w="1"/><text x="75.0672%" y="431.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.57%)</title><rect x="74.4110%" y="565" width="0.5686%" height="15" fill="rgb(212,104,21)" fg:x="916" fg:w="7"/><text x="74.6610%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="74.8985%" y="549" width="0.0812%" height="15" fill="rgb(240,209,40)" fg:x="922" fg:w="1"/><text x="75.1485%" y="559.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="74.8985%" y="533" width="0.0812%" height="15" fill="rgb(234,195,5)" fg:x="922" fg:w="1"/><text x="75.1485%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.73%)</title><rect x="74.3298%" y="629" width="0.7311%" height="15" fill="rgb(238,213,1)" fg:x="915" fg:w="9"/><text x="74.5798%" y="639.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (9 samples, 0.73%)</title><rect x="74.3298%" y="613" width="0.7311%" height="15" fill="rgb(235,182,54)" fg:x="915" fg:w="9"/><text x="74.5798%" y="623.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.73%)</title><rect x="74.3298%" y="597" width="0.7311%" height="15" fill="rgb(229,50,46)" fg:x="915" fg:w="9"/><text x="74.5798%" y="607.50"></text></g><g><title>engine::session::Session::initialize (9 samples, 0.73%)</title><rect x="74.3298%" y="581" width="0.7311%" height="15" fill="rgb(219,145,13)" fg:x="915" fg:w="9"/><text x="74.5798%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="74.9797%" y="565" width="0.0812%" height="15" fill="rgb(220,226,10)" fg:x="923" fg:w="1"/><text x="75.2297%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.9797%" y="549" width="0.0812%" height="15" fill="rgb(248,47,30)" fg:x="923" fg:w="1"/><text x="75.2297%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.9797%" y="533" width="0.0812%" height="15" fill="rgb(231,209,44)" fg:x="923" fg:w="1"/><text x="75.2297%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.9797%" y="517" width="0.0812%" height="15" fill="rgb(209,80,30)" fg:x="923" fg:w="1"/><text x="75.2297%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.9797%" y="501" width="0.0812%" height="15" fill="rgb(232,9,14)" fg:x="923" fg:w="1"/><text x="75.2297%" y="511.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="75.0609%" y="597" width="0.0812%" height="15" fill="rgb(243,91,43)" fg:x="924" fg:w="1"/><text x="75.3109%" y="607.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="75.0609%" y="581" width="0.0812%" height="15" fill="rgb(231,90,52)" fg:x="924" fg:w="1"/><text x="75.3109%" y="591.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="75.0609%" y="565" width="0.0812%" height="15" fill="rgb(253,192,44)" fg:x="924" fg:w="1"/><text x="75.3109%" y="575.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="75.0609%" y="549" width="0.0812%" height="15" fill="rgb(241,66,31)" fg:x="924" fg:w="1"/><text x="75.3109%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="75.0609%" y="533" width="0.0812%" height="15" fill="rgb(235,81,37)" fg:x="924" fg:w="1"/><text x="75.3109%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="75.0609%" y="517" width="0.0812%" height="15" fill="rgb(223,221,9)" fg:x="924" fg:w="1"/><text x="75.3109%" y="527.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="75.0609%" y="501" width="0.0812%" height="15" fill="rgb(242,180,7)" fg:x="924" fg:w="1"/><text x="75.3109%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1422%" y="533" width="0.0812%" height="15" fill="rgb(243,78,19)" fg:x="925" fg:w="1"/><text x="75.3922%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.2234%" y="517" width="0.0812%" height="15" fill="rgb(233,23,17)" fg:x="926" fg:w="1"/><text x="75.4734%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.2234%" y="501" width="0.0812%" height="15" fill="rgb(252,122,45)" fg:x="926" fg:w="1"/><text x="75.4734%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.2234%" y="485" width="0.0812%" height="15" fill="rgb(247,108,20)" fg:x="926" fg:w="1"/><text x="75.4734%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.2234%" y="469" width="0.0812%" height="15" fill="rgb(235,84,21)" fg:x="926" fg:w="1"/><text x="75.4734%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.2234%" y="453" width="0.0812%" height="15" fill="rgb(247,129,10)" fg:x="926" fg:w="1"/><text x="75.4734%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.2234%" y="437" width="0.0812%" height="15" fill="rgb(208,173,14)" fg:x="926" fg:w="1"/><text x="75.4734%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.3046%" y="485" width="0.0812%" height="15" fill="rgb(236,31,38)" fg:x="927" fg:w="1"/><text x="75.5546%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.3859%" y="469" width="0.0812%" height="15" fill="rgb(232,65,17)" fg:x="928" fg:w="1"/><text x="75.6359%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3859%" y="453" width="0.0812%" height="15" fill="rgb(224,45,49)" fg:x="928" fg:w="1"/><text x="75.6359%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3859%" y="437" width="0.0812%" height="15" fill="rgb(225,2,53)" fg:x="928" fg:w="1"/><text x="75.6359%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.3859%" y="421" width="0.0812%" height="15" fill="rgb(248,210,53)" fg:x="928" fg:w="1"/><text x="75.6359%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="75.3046%" y="517" width="0.2437%" height="15" fill="rgb(211,1,30)" fg:x="927" fg:w="3"/><text x="75.5546%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.3046%" y="501" width="0.2437%" height="15" fill="rgb(224,96,15)" fg:x="927" fg:w="3"/><text x="75.5546%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.3859%" y="485" width="0.1625%" height="15" fill="rgb(252,45,11)" fg:x="928" fg:w="2"/><text x="75.6359%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.4671%" y="469" width="0.0812%" height="15" fill="rgb(220,125,38)" fg:x="929" fg:w="1"/><text x="75.7171%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5483%" y="469" width="0.0812%" height="15" fill="rgb(243,161,33)" fg:x="930" fg:w="1"/><text x="75.7983%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6296%" y="469" width="0.0812%" height="15" fill="rgb(248,197,34)" fg:x="931" fg:w="1"/><text x="75.8796%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.5483%" y="517" width="0.3249%" height="15" fill="rgb(228,165,23)" fg:x="930" fg:w="4"/><text x="75.7983%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="75.5483%" y="501" width="0.3249%" height="15" fill="rgb(236,94,38)" fg:x="930" fg:w="4"/><text x="75.7983%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.5483%" y="485" width="0.3249%" height="15" fill="rgb(220,13,23)" fg:x="930" fg:w="4"/><text x="75.7983%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.7108%" y="469" width="0.1625%" height="15" fill="rgb(234,26,39)" fg:x="932" fg:w="2"/><text x="75.9608%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.8733%" y="469" width="0.1625%" height="15" fill="rgb(205,117,44)" fg:x="934" fg:w="2"/><text x="76.1233%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0357%" y="469" width="0.0812%" height="15" fill="rgb(250,42,2)" fg:x="936" fg:w="1"/><text x="76.2857%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.0357%" y="453" width="0.0812%" height="15" fill="rgb(223,83,14)" fg:x="936" fg:w="1"/><text x="76.2857%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0357%" y="437" width="0.0812%" height="15" fill="rgb(241,147,50)" fg:x="936" fg:w="1"/><text x="76.2857%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1982%" y="421" width="0.0812%" height="15" fill="rgb(218,90,6)" fg:x="938" fg:w="1"/><text x="76.4482%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1982%" y="405" width="0.0812%" height="15" fill="rgb(210,191,5)" fg:x="938" fg:w="1"/><text x="76.4482%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1982%" y="389" width="0.0812%" height="15" fill="rgb(225,139,19)" fg:x="938" fg:w="1"/><text x="76.4482%" y="399.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.38%)</title><rect x="75.0609%" y="613" width="1.3810%" height="15" fill="rgb(210,1,33)" fg:x="924" fg:w="17"/><text x="75.3109%" y="623.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.30%)</title><rect x="75.1422%" y="597" width="1.2998%" height="15" fill="rgb(213,50,3)" fg:x="925" fg:w="16"/><text x="75.3922%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.30%)</title><rect x="75.1422%" y="581" width="1.2998%" height="15" fill="rgb(234,227,4)" fg:x="925" fg:w="16"/><text x="75.3922%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.30%)</title><rect x="75.1422%" y="565" width="1.2998%" height="15" fill="rgb(246,63,5)" fg:x="925" fg:w="16"/><text x="75.3922%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.30%)</title><rect x="75.1422%" y="549" width="1.2998%" height="15" fill="rgb(245,136,27)" fg:x="925" fg:w="16"/><text x="75.3922%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.22%)</title><rect x="75.2234%" y="533" width="1.2185%" height="15" fill="rgb(247,199,27)" fg:x="926" fg:w="15"/><text x="75.4734%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="75.8733%" y="517" width="0.5686%" height="15" fill="rgb(252,158,49)" fg:x="934" fg:w="7"/><text x="76.1233%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="75.8733%" y="501" width="0.5686%" height="15" fill="rgb(254,73,1)" fg:x="934" fg:w="7"/><text x="76.1233%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="75.8733%" y="485" width="0.5686%" height="15" fill="rgb(248,93,19)" fg:x="934" fg:w="7"/><text x="76.1233%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="76.1170%" y="469" width="0.3249%" height="15" fill="rgb(206,67,5)" fg:x="937" fg:w="4"/><text x="76.3670%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="76.1170%" y="453" width="0.3249%" height="15" fill="rgb(209,210,4)" fg:x="937" fg:w="4"/><text x="76.3670%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="76.1170%" y="437" width="0.3249%" height="15" fill="rgb(214,185,36)" fg:x="937" fg:w="4"/><text x="76.3670%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.2794%" y="421" width="0.1625%" height="15" fill="rgb(233,191,26)" fg:x="939" fg:w="2"/><text x="76.5294%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="76.3607%" y="405" width="0.0812%" height="15" fill="rgb(248,94,17)" fg:x="940" fg:w="1"/><text x="76.6107%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.4419%" y="581" width="0.0812%" height="15" fill="rgb(250,64,4)" fg:x="941" fg:w="1"/><text x="76.6919%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.4419%" y="565" width="0.0812%" height="15" fill="rgb(218,41,53)" fg:x="941" fg:w="1"/><text x="76.6919%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="76.4419%" y="549" width="0.0812%" height="15" fill="rgb(251,176,28)" fg:x="941" fg:w="1"/><text x="76.6919%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4419%" y="533" width="0.0812%" height="15" fill="rgb(247,22,9)" fg:x="941" fg:w="1"/><text x="76.6919%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4419%" y="517" width="0.0812%" height="15" fill="rgb(218,201,14)" fg:x="941" fg:w="1"/><text x="76.6919%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4419%" y="501" width="0.0812%" height="15" fill="rgb(218,94,10)" fg:x="941" fg:w="1"/><text x="76.6919%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4419%" y="485" width="0.0812%" height="15" fill="rgb(222,183,52)" fg:x="941" fg:w="1"/><text x="76.6919%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.4419%" y="469" width="0.0812%" height="15" fill="rgb(242,140,25)" fg:x="941" fg:w="1"/><text x="76.6919%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.4419%" y="453" width="0.0812%" height="15" fill="rgb(235,197,38)" fg:x="941" fg:w="1"/><text x="76.6919%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.4419%" y="437" width="0.0812%" height="15" fill="rgb(237,136,15)" fg:x="941" fg:w="1"/><text x="76.6919%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.4419%" y="421" width="0.0812%" height="15" fill="rgb(223,44,49)" fg:x="941" fg:w="1"/><text x="76.6919%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.4419%" y="405" width="0.0812%" height="15" fill="rgb(227,71,15)" fg:x="941" fg:w="1"/><text x="76.6919%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.4419%" y="389" width="0.0812%" height="15" fill="rgb(225,153,20)" fg:x="941" fg:w="1"/><text x="76.6919%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.4419%" y="373" width="0.0812%" height="15" fill="rgb(210,190,26)" fg:x="941" fg:w="1"/><text x="76.6919%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.4419%" y="357" width="0.0812%" height="15" fill="rgb(223,147,5)" fg:x="941" fg:w="1"/><text x="76.6919%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.4419%" y="341" width="0.0812%" height="15" fill="rgb(207,14,23)" fg:x="941" fg:w="1"/><text x="76.6919%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4419%" y="325" width="0.0812%" height="15" fill="rgb(211,195,53)" fg:x="941" fg:w="1"/><text x="76.6919%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.4419%" y="597" width="0.1625%" height="15" fill="rgb(237,75,46)" fg:x="941" fg:w="2"/><text x="76.6919%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.5232%" y="581" width="0.0812%" height="15" fill="rgb(254,55,14)" fg:x="942" fg:w="1"/><text x="76.7732%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5232%" y="565" width="0.0812%" height="15" fill="rgb(230,185,30)" fg:x="942" fg:w="1"/><text x="76.7732%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.5232%" y="549" width="0.0812%" height="15" fill="rgb(220,14,11)" fg:x="942" fg:w="1"/><text x="76.7732%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.5232%" y="533" width="0.0812%" height="15" fill="rgb(215,169,44)" fg:x="942" fg:w="1"/><text x="76.7732%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="76.5232%" y="517" width="0.0812%" height="15" fill="rgb(253,203,20)" fg:x="942" fg:w="1"/><text x="76.7732%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.5232%" y="501" width="0.0812%" height="15" fill="rgb(229,225,17)" fg:x="942" fg:w="1"/><text x="76.7732%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5232%" y="485" width="0.0812%" height="15" fill="rgb(236,76,26)" fg:x="942" fg:w="1"/><text x="76.7732%" y="495.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="76.4419%" y="613" width="0.2437%" height="15" fill="rgb(234,15,30)" fg:x="941" fg:w="3"/><text x="76.6919%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.6044%" y="597" width="0.0812%" height="15" fill="rgb(211,113,48)" fg:x="943" fg:w="1"/><text x="76.8544%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.6044%" y="581" width="0.0812%" height="15" fill="rgb(221,31,36)" fg:x="943" fg:w="1"/><text x="76.8544%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6044%" y="565" width="0.0812%" height="15" fill="rgb(215,118,52)" fg:x="943" fg:w="1"/><text x="76.8544%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6856%" y="533" width="0.0812%" height="15" fill="rgb(241,151,27)" fg:x="944" fg:w="1"/><text x="76.9356%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6856%" y="517" width="0.0812%" height="15" fill="rgb(253,51,3)" fg:x="944" fg:w="1"/><text x="76.9356%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6856%" y="501" width="0.0812%" height="15" fill="rgb(216,201,24)" fg:x="944" fg:w="1"/><text x="76.9356%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="76.6856%" y="613" width="0.1625%" height="15" fill="rgb(231,107,4)" fg:x="944" fg:w="2"/><text x="76.9356%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="76.6856%" y="597" width="0.1625%" height="15" fill="rgb(243,97,54)" fg:x="944" fg:w="2"/><text x="76.9356%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="76.6856%" y="581" width="0.1625%" height="15" fill="rgb(221,32,51)" fg:x="944" fg:w="2"/><text x="76.9356%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="76.6856%" y="565" width="0.1625%" height="15" fill="rgb(218,171,35)" fg:x="944" fg:w="2"/><text x="76.9356%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.6856%" y="549" width="0.1625%" height="15" fill="rgb(214,20,53)" fg:x="944" fg:w="2"/><text x="76.9356%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7669%" y="533" width="0.0812%" height="15" fill="rgb(239,9,52)" fg:x="945" fg:w="1"/><text x="77.0169%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.7669%" y="517" width="0.0812%" height="15" fill="rgb(215,114,45)" fg:x="945" fg:w="1"/><text x="77.0169%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7669%" y="501" width="0.0812%" height="15" fill="rgb(208,118,9)" fg:x="945" fg:w="1"/><text x="77.0169%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.7669%" y="485" width="0.0812%" height="15" fill="rgb(235,7,39)" fg:x="945" fg:w="1"/><text x="77.0169%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7669%" y="469" width="0.0812%" height="15" fill="rgb(243,225,15)" fg:x="945" fg:w="1"/><text x="77.0169%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.8481%" y="517" width="0.0812%" height="15" fill="rgb(225,216,18)" fg:x="946" fg:w="1"/><text x="77.0981%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.8481%" y="501" width="0.0812%" height="15" fill="rgb(233,36,38)" fg:x="946" fg:w="1"/><text x="77.0981%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="76.8481%" y="485" width="0.0812%" height="15" fill="rgb(239,88,23)" fg:x="946" fg:w="1"/><text x="77.0981%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.8481%" y="469" width="0.0812%" height="15" fill="rgb(219,181,35)" fg:x="946" fg:w="1"/><text x="77.0981%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8481%" y="453" width="0.0812%" height="15" fill="rgb(215,18,46)" fg:x="946" fg:w="1"/><text x="77.0981%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.8481%" y="437" width="0.0812%" height="15" fill="rgb(241,38,11)" fg:x="946" fg:w="1"/><text x="77.0981%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8481%" y="421" width="0.0812%" height="15" fill="rgb(248,169,45)" fg:x="946" fg:w="1"/><text x="77.0981%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.8481%" y="405" width="0.0812%" height="15" fill="rgb(239,50,49)" fg:x="946" fg:w="1"/><text x="77.0981%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.8481%" y="389" width="0.0812%" height="15" fill="rgb(231,96,31)" fg:x="946" fg:w="1"/><text x="77.0981%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.8481%" y="373" width="0.0812%" height="15" fill="rgb(224,193,37)" fg:x="946" fg:w="1"/><text x="77.0981%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.8481%" y="357" width="0.0812%" height="15" fill="rgb(227,153,50)" fg:x="946" fg:w="1"/><text x="77.0981%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="76.9293%" y="501" width="0.0812%" height="15" fill="rgb(249,228,3)" fg:x="947" fg:w="1"/><text x="77.1793%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="76.8481%" y="597" width="0.2437%" height="15" fill="rgb(219,164,43)" fg:x="946" fg:w="3"/><text x="77.0981%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="76.8481%" y="581" width="0.2437%" height="15" fill="rgb(216,45,41)" fg:x="946" fg:w="3"/><text x="77.0981%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="76.8481%" y="565" width="0.2437%" height="15" fill="rgb(210,226,51)" fg:x="946" fg:w="3"/><text x="77.0981%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="76.8481%" y="549" width="0.2437%" height="15" fill="rgb(209,117,49)" fg:x="946" fg:w="3"/><text x="77.0981%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="76.8481%" y="533" width="0.2437%" height="15" fill="rgb(206,196,24)" fg:x="946" fg:w="3"/><text x="77.0981%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="76.9293%" y="517" width="0.1625%" height="15" fill="rgb(253,218,3)" fg:x="947" fg:w="2"/><text x="77.1793%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.0106%" y="501" width="0.0812%" height="15" fill="rgb(252,166,2)" fg:x="948" fg:w="1"/><text x="77.2606%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.0106%" y="485" width="0.0812%" height="15" fill="rgb(236,218,26)" fg:x="948" fg:w="1"/><text x="77.2606%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0106%" y="469" width="0.0812%" height="15" fill="rgb(254,84,19)" fg:x="948" fg:w="1"/><text x="77.2606%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0106%" y="453" width="0.0812%" height="15" fill="rgb(219,137,29)" fg:x="948" fg:w="1"/><text x="77.2606%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0106%" y="437" width="0.0812%" height="15" fill="rgb(227,47,52)" fg:x="948" fg:w="1"/><text x="77.2606%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0106%" y="421" width="0.0812%" height="15" fill="rgb(229,167,24)" fg:x="948" fg:w="1"/><text x="77.2606%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.0106%" y="405" width="0.0812%" height="15" fill="rgb(233,164,1)" fg:x="948" fg:w="1"/><text x="77.2606%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.0106%" y="389" width="0.0812%" height="15" fill="rgb(218,88,48)" fg:x="948" fg:w="1"/><text x="77.2606%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.0106%" y="373" width="0.0812%" height="15" fill="rgb(226,214,24)" fg:x="948" fg:w="1"/><text x="77.2606%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.1730%" y="533" width="0.0812%" height="15" fill="rgb(233,29,12)" fg:x="950" fg:w="1"/><text x="77.4230%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="77.1730%" y="517" width="0.0812%" height="15" fill="rgb(219,120,34)" fg:x="950" fg:w="1"/><text x="77.4230%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.2543%" y="533" width="0.0812%" height="15" fill="rgb(226,78,44)" fg:x="951" fg:w="1"/><text x="77.5043%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.2543%" y="517" width="0.0812%" height="15" fill="rgb(240,15,48)" fg:x="951" fg:w="1"/><text x="77.5043%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="77.2543%" y="501" width="0.0812%" height="15" fill="rgb(253,176,7)" fg:x="951" fg:w="1"/><text x="77.5043%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.2543%" y="485" width="0.0812%" height="15" fill="rgb(206,166,28)" fg:x="951" fg:w="1"/><text x="77.5043%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.2543%" y="469" width="0.0812%" height="15" fill="rgb(241,53,51)" fg:x="951" fg:w="1"/><text x="77.5043%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.2543%" y="453" width="0.0812%" height="15" fill="rgb(249,112,30)" fg:x="951" fg:w="1"/><text x="77.5043%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.4980%" y="437" width="0.0812%" height="15" fill="rgb(217,85,30)" fg:x="954" fg:w="1"/><text x="77.7480%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4980%" y="421" width="0.0812%" height="15" fill="rgb(233,49,7)" fg:x="954" fg:w="1"/><text x="77.7480%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="77.6604%" y="421" width="0.2437%" height="15" fill="rgb(234,109,9)" fg:x="956" fg:w="3"/><text x="77.9104%" y="431.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="77.6604%" y="405" width="0.2437%" height="15" fill="rgb(253,95,22)" fg:x="956" fg:w="3"/><text x="77.9104%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="77.6604%" y="389" width="0.2437%" height="15" fill="rgb(233,176,25)" fg:x="956" fg:w="3"/><text x="77.9104%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="77.7417%" y="373" width="0.1625%" height="15" fill="rgb(236,33,39)" fg:x="957" fg:w="2"/><text x="77.9917%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="77.7417%" y="357" width="0.1625%" height="15" fill="rgb(223,226,42)" fg:x="957" fg:w="2"/><text x="77.9917%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="77.7417%" y="341" width="0.1625%" height="15" fill="rgb(216,99,33)" fg:x="957" fg:w="2"/><text x="77.9917%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="77.7417%" y="325" width="0.1625%" height="15" fill="rgb(235,84,23)" fg:x="957" fg:w="2"/><text x="77.9917%" y="335.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="77.4980%" y="453" width="0.4874%" height="15" fill="rgb(232,2,27)" fg:x="954" fg:w="6"/><text x="77.7480%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="77.5792%" y="437" width="0.4062%" height="15" fill="rgb(241,23,22)" fg:x="955" fg:w="5"/><text x="77.8292%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9041%" y="421" width="0.0812%" height="15" fill="rgb(211,73,27)" fg:x="959" fg:w="1"/><text x="78.1541%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.9041%" y="405" width="0.0812%" height="15" fill="rgb(235,109,49)" fg:x="959" fg:w="1"/><text x="78.1541%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.9041%" y="389" width="0.0812%" height="15" fill="rgb(230,99,29)" fg:x="959" fg:w="1"/><text x="78.1541%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.9041%" y="373" width="0.0812%" height="15" fill="rgb(245,199,7)" fg:x="959" fg:w="1"/><text x="78.1541%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="77.4980%" y="485" width="0.5686%" height="15" fill="rgb(217,179,10)" fg:x="954" fg:w="7"/><text x="77.7480%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="77.4980%" y="469" width="0.5686%" height="15" fill="rgb(254,99,47)" fg:x="954" fg:w="7"/><text x="77.7480%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.9854%" y="453" width="0.0812%" height="15" fill="rgb(251,121,7)" fg:x="960" fg:w="1"/><text x="78.2354%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.9854%" y="437" width="0.0812%" height="15" fill="rgb(250,177,26)" fg:x="960" fg:w="1"/><text x="78.2354%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.9854%" y="421" width="0.0812%" height="15" fill="rgb(232,88,15)" fg:x="960" fg:w="1"/><text x="78.2354%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.0666%" y="485" width="0.0812%" height="15" fill="rgb(251,54,54)" fg:x="961" fg:w="1"/><text x="78.3166%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.0666%" y="469" width="0.0812%" height="15" fill="rgb(208,177,15)" fg:x="961" fg:w="1"/><text x="78.3166%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.0666%" y="453" width="0.0812%" height="15" fill="rgb(205,97,32)" fg:x="961" fg:w="1"/><text x="78.3166%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.0666%" y="437" width="0.0812%" height="15" fill="rgb(217,192,13)" fg:x="961" fg:w="1"/><text x="78.3166%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.0666%" y="421" width="0.0812%" height="15" fill="rgb(215,163,41)" fg:x="961" fg:w="1"/><text x="78.3166%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.0666%" y="405" width="0.0812%" height="15" fill="rgb(246,83,29)" fg:x="961" fg:w="1"/><text x="78.3166%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0666%" y="389" width="0.0812%" height="15" fill="rgb(219,2,45)" fg:x="961" fg:w="1"/><text x="78.3166%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="78.2291%" y="389" width="0.1625%" height="15" fill="rgb(242,215,33)" fg:x="963" fg:w="2"/><text x="78.4791%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.2291%" y="373" width="0.1625%" height="15" fill="rgb(217,1,6)" fg:x="963" fg:w="2"/><text x="78.4791%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.2291%" y="357" width="0.1625%" height="15" fill="rgb(207,85,52)" fg:x="963" fg:w="2"/><text x="78.4791%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.2291%" y="341" width="0.1625%" height="15" fill="rgb(231,171,19)" fg:x="963" fg:w="2"/><text x="78.4791%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3103%" y="325" width="0.0812%" height="15" fill="rgb(207,128,4)" fg:x="964" fg:w="1"/><text x="78.5603%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3103%" y="309" width="0.0812%" height="15" fill="rgb(219,208,4)" fg:x="964" fg:w="1"/><text x="78.5603%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3916%" y="357" width="0.0812%" height="15" fill="rgb(235,161,42)" fg:x="965" fg:w="1"/><text x="78.6416%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3916%" y="341" width="0.0812%" height="15" fill="rgb(247,218,18)" fg:x="965" fg:w="1"/><text x="78.6416%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3916%" y="325" width="0.0812%" height="15" fill="rgb(232,114,51)" fg:x="965" fg:w="1"/><text x="78.6416%" y="335.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.46%)</title><rect x="77.0918%" y="597" width="1.4622%" height="15" fill="rgb(222,95,3)" fg:x="949" fg:w="18"/><text x="77.3418%" y="607.50"></text></g><g><title>engine::session::Session::save_changes (18 samples, 1.46%)</title><rect x="77.0918%" y="581" width="1.4622%" height="15" fill="rgb(240,65,29)" fg:x="949" fg:w="18"/><text x="77.3418%" y="591.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.46%)</title><rect x="77.0918%" y="565" width="1.4622%" height="15" fill="rgb(249,209,20)" fg:x="949" fg:w="18"/><text x="77.3418%" y="575.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.38%)</title><rect x="77.1730%" y="549" width="1.3810%" height="15" fill="rgb(241,48,37)" fg:x="950" fg:w="17"/><text x="77.4230%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.22%)</title><rect x="77.3355%" y="533" width="1.2185%" height="15" fill="rgb(230,140,42)" fg:x="952" fg:w="15"/><text x="77.5855%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.22%)</title><rect x="77.3355%" y="517" width="1.2185%" height="15" fill="rgb(230,176,45)" fg:x="952" fg:w="15"/><text x="77.5855%" y="527.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.22%)</title><rect x="77.3355%" y="501" width="1.2185%" height="15" fill="rgb(245,112,21)" fg:x="952" fg:w="15"/><text x="77.5855%" y="511.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.41%)</title><rect x="78.1478%" y="485" width="0.4062%" height="15" fill="rgb(207,183,35)" fg:x="962" fg:w="5"/><text x="78.3978%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="78.1478%" y="469" width="0.4062%" height="15" fill="rgb(227,44,33)" fg:x="962" fg:w="5"/><text x="78.3978%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="78.1478%" y="453" width="0.4062%" height="15" fill="rgb(246,120,21)" fg:x="962" fg:w="5"/><text x="78.3978%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="78.2291%" y="437" width="0.3249%" height="15" fill="rgb(235,57,52)" fg:x="963" fg:w="4"/><text x="78.4791%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="78.2291%" y="421" width="0.3249%" height="15" fill="rgb(238,84,10)" fg:x="963" fg:w="4"/><text x="78.4791%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="78.2291%" y="405" width="0.3249%" height="15" fill="rgb(251,200,32)" fg:x="963" fg:w="4"/><text x="78.4791%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.3916%" y="389" width="0.1625%" height="15" fill="rgb(247,159,13)" fg:x="965" fg:w="2"/><text x="78.6416%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.3916%" y="373" width="0.1625%" height="15" fill="rgb(238,64,4)" fg:x="965" fg:w="2"/><text x="78.6416%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4728%" y="357" width="0.0812%" height="15" fill="rgb(221,131,51)" fg:x="966" fg:w="1"/><text x="78.7228%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.4728%" y="341" width="0.0812%" height="15" fill="rgb(242,5,29)" fg:x="966" fg:w="1"/><text x="78.7228%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4728%" y="325" width="0.0812%" height="15" fill="rgb(214,130,32)" fg:x="966" fg:w="1"/><text x="78.7228%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4728%" y="309" width="0.0812%" height="15" fill="rgb(244,210,16)" fg:x="966" fg:w="1"/><text x="78.7228%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4728%" y="293" width="0.0812%" height="15" fill="rgb(234,48,26)" fg:x="966" fg:w="1"/><text x="78.7228%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="78.5540%" y="581" width="0.0812%" height="15" fill="rgb(231,82,38)" fg:x="967" fg:w="1"/><text x="78.8040%" y="591.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="78.5540%" y="565" width="0.0812%" height="15" fill="rgb(254,128,41)" fg:x="967" fg:w="1"/><text x="78.8040%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="78.5540%" y="597" width="0.1625%" height="15" fill="rgb(212,73,49)" fg:x="967" fg:w="2"/><text x="78.8040%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="78.6353%" y="581" width="0.0812%" height="15" fill="rgb(205,62,54)" fg:x="968" fg:w="1"/><text x="78.8853%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.6353%" y="565" width="0.0812%" height="15" fill="rgb(228,0,8)" fg:x="968" fg:w="1"/><text x="78.8853%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.6353%" y="549" width="0.0812%" height="15" fill="rgb(251,28,17)" fg:x="968" fg:w="1"/><text x="78.8853%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.6353%" y="533" width="0.0812%" height="15" fill="rgb(238,105,27)" fg:x="968" fg:w="1"/><text x="78.8853%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.6353%" y="517" width="0.0812%" height="15" fill="rgb(237,216,33)" fg:x="968" fg:w="1"/><text x="78.8853%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.6353%" y="501" width="0.0812%" height="15" fill="rgb(229,228,25)" fg:x="968" fg:w="1"/><text x="78.8853%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.6353%" y="485" width="0.0812%" height="15" fill="rgb(233,75,23)" fg:x="968" fg:w="1"/><text x="78.8853%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7165%" y="533" width="0.0812%" height="15" fill="rgb(231,207,16)" fg:x="969" fg:w="1"/><text x="78.9665%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.7165%" y="517" width="0.0812%" height="15" fill="rgb(231,191,45)" fg:x="969" fg:w="1"/><text x="78.9665%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.7165%" y="501" width="0.0812%" height="15" fill="rgb(224,133,17)" fg:x="969" fg:w="1"/><text x="78.9665%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.7165%" y="485" width="0.0812%" height="15" fill="rgb(209,178,27)" fg:x="969" fg:w="1"/><text x="78.9665%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.7165%" y="469" width="0.0812%" height="15" fill="rgb(218,37,11)" fg:x="969" fg:w="1"/><text x="78.9665%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="78.7165%" y="453" width="0.0812%" height="15" fill="rgb(251,226,25)" fg:x="969" fg:w="1"/><text x="78.9665%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.7165%" y="437" width="0.0812%" height="15" fill="rgb(209,222,27)" fg:x="969" fg:w="1"/><text x="78.9665%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.7977%" y="517" width="0.0812%" height="15" fill="rgb(238,22,21)" fg:x="970" fg:w="1"/><text x="79.0477%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="78.7977%" y="533" width="0.1625%" height="15" fill="rgb(233,161,25)" fg:x="970" fg:w="2"/><text x="79.0477%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.8790%" y="517" width="0.0812%" height="15" fill="rgb(226,122,53)" fg:x="971" fg:w="1"/><text x="79.1290%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.8790%" y="501" width="0.0812%" height="15" fill="rgb(220,123,17)" fg:x="971" fg:w="1"/><text x="79.1290%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.8790%" y="485" width="0.0812%" height="15" fill="rgb(230,224,35)" fg:x="971" fg:w="1"/><text x="79.1290%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8790%" y="469" width="0.0812%" height="15" fill="rgb(246,83,8)" fg:x="971" fg:w="1"/><text x="79.1290%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.8790%" y="453" width="0.0812%" height="15" fill="rgb(230,214,17)" fg:x="971" fg:w="1"/><text x="79.1290%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8790%" y="437" width="0.0812%" height="15" fill="rgb(222,97,18)" fg:x="971" fg:w="1"/><text x="79.1290%" y="447.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="78.8790%" y="421" width="0.0812%" height="15" fill="rgb(206,79,1)" fg:x="971" fg:w="1"/><text x="79.1290%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.9602%" y="485" width="0.0812%" height="15" fill="rgb(214,121,34)" fg:x="972" fg:w="1"/><text x="79.2102%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.9602%" y="469" width="0.0812%" height="15" fill="rgb(249,199,46)" fg:x="972" fg:w="1"/><text x="79.2102%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.9602%" y="453" width="0.0812%" height="15" fill="rgb(214,222,46)" fg:x="972" fg:w="1"/><text x="79.2102%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.9602%" y="437" width="0.0812%" height="15" fill="rgb(248,168,30)" fg:x="972" fg:w="1"/><text x="79.2102%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.9602%" y="421" width="0.0812%" height="15" fill="rgb(226,14,28)" fg:x="972" fg:w="1"/><text x="79.2102%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.9602%" y="405" width="0.0812%" height="15" fill="rgb(253,123,1)" fg:x="972" fg:w="1"/><text x="79.2102%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.9602%" y="389" width="0.0812%" height="15" fill="rgb(225,24,42)" fg:x="972" fg:w="1"/><text x="79.2102%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="78.9602%" y="373" width="0.0812%" height="15" fill="rgb(216,161,37)" fg:x="972" fg:w="1"/><text x="79.2102%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.9602%" y="357" width="0.0812%" height="15" fill="rgb(251,164,26)" fg:x="972" fg:w="1"/><text x="79.2102%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.41%)</title><rect x="78.7165%" y="565" width="0.4062%" height="15" fill="rgb(219,177,3)" fg:x="969" fg:w="5"/><text x="78.9665%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (5 samples, 0.41%)</title><rect x="78.7165%" y="549" width="0.4062%" height="15" fill="rgb(222,65,0)" fg:x="969" fg:w="5"/><text x="78.9665%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="78.9602%" y="533" width="0.1625%" height="15" fill="rgb(223,69,54)" fg:x="972" fg:w="2"/><text x="79.2102%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="78.9602%" y="517" width="0.1625%" height="15" fill="rgb(235,30,27)" fg:x="972" fg:w="2"/><text x="79.2102%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="78.9602%" y="501" width="0.1625%" height="15" fill="rgb(220,183,50)" fg:x="972" fg:w="2"/><text x="79.2102%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0414%" y="485" width="0.0812%" height="15" fill="rgb(248,198,15)" fg:x="973" fg:w="1"/><text x="79.2914%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0414%" y="469" width="0.0812%" height="15" fill="rgb(222,211,4)" fg:x="973" fg:w="1"/><text x="79.2914%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="79.1227%" y="549" width="0.0812%" height="15" fill="rgb(214,102,34)" fg:x="974" fg:w="1"/><text x="79.3727%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.1227%" y="533" width="0.0812%" height="15" fill="rgb(245,92,5)" fg:x="974" fg:w="1"/><text x="79.3727%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.1227%" y="517" width="0.0812%" height="15" fill="rgb(252,72,51)" fg:x="974" fg:w="1"/><text x="79.3727%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (7 samples, 0.57%)</title><rect x="78.7165%" y="597" width="0.5686%" height="15" fill="rgb(252,208,19)" fg:x="969" fg:w="7"/><text x="78.9665%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (7 samples, 0.57%)</title><rect x="78.7165%" y="581" width="0.5686%" height="15" fill="rgb(211,69,7)" fg:x="969" fg:w="7"/><text x="78.9665%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="79.1227%" y="565" width="0.1625%" height="15" fill="rgb(211,27,16)" fg:x="974" fg:w="2"/><text x="79.3727%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2039%" y="549" width="0.0812%" height="15" fill="rgb(219,216,14)" fg:x="975" fg:w="1"/><text x="79.4539%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.2039%" y="533" width="0.0812%" height="15" fill="rgb(219,71,8)" fg:x="975" fg:w="1"/><text x="79.4539%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.2039%" y="517" width="0.0812%" height="15" fill="rgb(223,170,53)" fg:x="975" fg:w="1"/><text x="79.4539%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="79.2039%" y="501" width="0.0812%" height="15" fill="rgb(246,21,26)" fg:x="975" fg:w="1"/><text x="79.4539%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.2039%" y="485" width="0.0812%" height="15" fill="rgb(248,20,46)" fg:x="975" fg:w="1"/><text x="79.4539%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2039%" y="469" width="0.0812%" height="15" fill="rgb(252,94,11)" fg:x="975" fg:w="1"/><text x="79.4539%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="79.2851%" y="597" width="0.0812%" height="15" fill="rgb(236,163,8)" fg:x="976" fg:w="1"/><text x="79.5351%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.2851%" y="581" width="0.0812%" height="15" fill="rgb(217,221,45)" fg:x="976" fg:w="1"/><text x="79.5351%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2851%" y="565" width="0.0812%" height="15" fill="rgb(238,38,17)" fg:x="976" fg:w="1"/><text x="79.5351%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2851%" y="549" width="0.0812%" height="15" fill="rgb(242,210,23)" fg:x="976" fg:w="1"/><text x="79.5351%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2851%" y="533" width="0.0812%" height="15" fill="rgb(250,86,53)" fg:x="976" fg:w="1"/><text x="79.5351%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2851%" y="517" width="0.0812%" height="15" fill="rgb(223,168,25)" fg:x="976" fg:w="1"/><text x="79.5351%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="79.2851%" y="501" width="0.0812%" height="15" fill="rgb(251,189,4)" fg:x="976" fg:w="1"/><text x="79.5351%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="79.2851%" y="485" width="0.0812%" height="15" fill="rgb(245,19,28)" fg:x="976" fg:w="1"/><text x="79.5351%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="79.2851%" y="469" width="0.0812%" height="15" fill="rgb(207,10,34)" fg:x="976" fg:w="1"/><text x="79.5351%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="79.3664%" y="581" width="0.0812%" height="15" fill="rgb(235,153,31)" fg:x="977" fg:w="1"/><text x="79.6164%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="79.3664%" y="565" width="0.0812%" height="15" fill="rgb(228,72,37)" fg:x="977" fg:w="1"/><text x="79.6164%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.3664%" y="549" width="0.0812%" height="15" fill="rgb(215,15,16)" fg:x="977" fg:w="1"/><text x="79.6164%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.3664%" y="533" width="0.0812%" height="15" fill="rgb(250,119,29)" fg:x="977" fg:w="1"/><text x="79.6164%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.3664%" y="517" width="0.0812%" height="15" fill="rgb(214,59,1)" fg:x="977" fg:w="1"/><text x="79.6164%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.3664%" y="501" width="0.0812%" height="15" fill="rgb(223,109,25)" fg:x="977" fg:w="1"/><text x="79.6164%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.3664%" y="485" width="0.0812%" height="15" fill="rgb(230,198,22)" fg:x="977" fg:w="1"/><text x="79.6164%" y="495.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="79.3664%" y="469" width="0.0812%" height="15" fill="rgb(245,184,46)" fg:x="977" fg:w="1"/><text x="79.6164%" y="479.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="79.4476%" y="581" width="0.1625%" height="15" fill="rgb(253,73,16)" fg:x="978" fg:w="2"/><text x="79.6976%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="79.4476%" y="565" width="0.1625%" height="15" fill="rgb(206,94,45)" fg:x="978" fg:w="2"/><text x="79.6976%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.4476%" y="549" width="0.1625%" height="15" fill="rgb(236,83,27)" fg:x="978" fg:w="2"/><text x="79.6976%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="79.4476%" y="533" width="0.1625%" height="15" fill="rgb(220,196,8)" fg:x="978" fg:w="2"/><text x="79.6976%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="79.4476%" y="517" width="0.1625%" height="15" fill="rgb(254,185,14)" fg:x="978" fg:w="2"/><text x="79.6976%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.4476%" y="501" width="0.1625%" height="15" fill="rgb(226,50,22)" fg:x="978" fg:w="2"/><text x="79.6976%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5288%" y="485" width="0.0812%" height="15" fill="rgb(253,147,0)" fg:x="979" fg:w="1"/><text x="79.7788%" y="495.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="79.6101%" y="581" width="0.0812%" height="15" fill="rgb(252,46,33)" fg:x="980" fg:w="1"/><text x="79.8601%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.6101%" y="565" width="0.0812%" height="15" fill="rgb(242,22,54)" fg:x="980" fg:w="1"/><text x="79.8601%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.6101%" y="549" width="0.0812%" height="15" fill="rgb(223,178,32)" fg:x="980" fg:w="1"/><text x="79.8601%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.6101%" y="533" width="0.0812%" height="15" fill="rgb(214,106,53)" fg:x="980" fg:w="1"/><text x="79.8601%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.6101%" y="517" width="0.0812%" height="15" fill="rgb(232,65,50)" fg:x="980" fg:w="1"/><text x="79.8601%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6101%" y="501" width="0.0812%" height="15" fill="rgb(231,110,28)" fg:x="980" fg:w="1"/><text x="79.8601%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.6101%" y="485" width="0.0812%" height="15" fill="rgb(216,71,40)" fg:x="980" fg:w="1"/><text x="79.8601%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.6101%" y="469" width="0.0812%" height="15" fill="rgb(229,89,53)" fg:x="980" fg:w="1"/><text x="79.8601%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.6101%" y="453" width="0.0812%" height="15" fill="rgb(210,124,14)" fg:x="980" fg:w="1"/><text x="79.8601%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.6101%" y="437" width="0.0812%" height="15" fill="rgb(236,213,6)" fg:x="980" fg:w="1"/><text x="79.8601%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.6101%" y="421" width="0.0812%" height="15" fill="rgb(228,41,5)" fg:x="980" fg:w="1"/><text x="79.8601%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.6101%" y="405" width="0.0812%" height="15" fill="rgb(221,167,25)" fg:x="980" fg:w="1"/><text x="79.8601%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.6101%" y="389" width="0.0812%" height="15" fill="rgb(228,144,37)" fg:x="980" fg:w="1"/><text x="79.8601%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.6101%" y="373" width="0.0812%" height="15" fill="rgb(227,189,38)" fg:x="980" fg:w="1"/><text x="79.8601%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.6101%" y="357" width="0.0812%" height="15" fill="rgb(218,8,2)" fg:x="980" fg:w="1"/><text x="79.8601%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.6101%" y="341" width="0.0812%" height="15" fill="rgb(209,61,28)" fg:x="980" fg:w="1"/><text x="79.8601%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6101%" y="325" width="0.0812%" height="15" fill="rgb(233,140,39)" fg:x="980" fg:w="1"/><text x="79.8601%" y="335.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (36 samples, 2.92%)</title><rect x="76.8481%" y="613" width="2.9245%" height="15" fill="rgb(251,66,48)" fg:x="946" fg:w="36"/><text x="77.0981%" y="623.50">pl..</text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="79.3664%" y="597" width="0.4062%" height="15" fill="rgb(210,44,45)" fg:x="977" fg:w="5"/><text x="79.6164%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="79.6913%" y="581" width="0.0812%" height="15" fill="rgb(214,136,46)" fg:x="981" fg:w="1"/><text x="79.9413%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.6913%" y="565" width="0.0812%" height="15" fill="rgb(207,130,50)" fg:x="981" fg:w="1"/><text x="79.9413%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="79.7725%" y="581" width="0.0812%" height="15" fill="rgb(228,102,49)" fg:x="982" fg:w="1"/><text x="80.0225%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.7725%" y="565" width="0.0812%" height="15" fill="rgb(253,55,1)" fg:x="982" fg:w="1"/><text x="80.0225%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.7725%" y="549" width="0.0812%" height="15" fill="rgb(238,222,9)" fg:x="982" fg:w="1"/><text x="80.0225%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.7725%" y="533" width="0.0812%" height="15" fill="rgb(246,99,6)" fg:x="982" fg:w="1"/><text x="80.0225%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="79.8538%" y="581" width="0.0812%" height="15" fill="rgb(219,110,26)" fg:x="983" fg:w="1"/><text x="80.1038%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="79.8538%" y="565" width="0.0812%" height="15" fill="rgb(239,160,33)" fg:x="983" fg:w="1"/><text x="80.1038%" y="575.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="79.8538%" y="549" width="0.0812%" height="15" fill="rgb(220,202,23)" fg:x="983" fg:w="1"/><text x="80.1038%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="79.8538%" y="533" width="0.0812%" height="15" fill="rgb(208,80,26)" fg:x="983" fg:w="1"/><text x="80.1038%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.8538%" y="517" width="0.0812%" height="15" fill="rgb(243,85,7)" fg:x="983" fg:w="1"/><text x="80.1038%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.8538%" y="501" width="0.0812%" height="15" fill="rgb(228,77,47)" fg:x="983" fg:w="1"/><text x="80.1038%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.8538%" y="485" width="0.0812%" height="15" fill="rgb(212,226,8)" fg:x="983" fg:w="1"/><text x="80.1038%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.8538%" y="469" width="0.0812%" height="15" fill="rgb(241,120,54)" fg:x="983" fg:w="1"/><text x="80.1038%" y="479.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="79.8538%" y="453" width="0.0812%" height="15" fill="rgb(226,80,16)" fg:x="983" fg:w="1"/><text x="80.1038%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="79.8538%" y="437" width="0.0812%" height="15" fill="rgb(240,76,13)" fg:x="983" fg:w="1"/><text x="80.1038%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="79.8538%" y="421" width="0.0812%" height="15" fill="rgb(252,74,8)" fg:x="983" fg:w="1"/><text x="80.1038%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="79.8538%" y="405" width="0.0812%" height="15" fill="rgb(244,155,2)" fg:x="983" fg:w="1"/><text x="80.1038%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.8538%" y="389" width="0.0812%" height="15" fill="rgb(215,81,35)" fg:x="983" fg:w="1"/><text x="80.1038%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9350%" y="501" width="0.0812%" height="15" fill="rgb(206,55,2)" fg:x="984" fg:w="1"/><text x="80.1850%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="79.7725%" y="613" width="0.3249%" height="15" fill="rgb(231,2,34)" fg:x="982" fg:w="4"/><text x="80.0225%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="79.7725%" y="597" width="0.3249%" height="15" fill="rgb(242,176,48)" fg:x="982" fg:w="4"/><text x="80.0225%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="79.9350%" y="581" width="0.1625%" height="15" fill="rgb(249,31,36)" fg:x="984" fg:w="2"/><text x="80.1850%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="79.9350%" y="565" width="0.1625%" height="15" fill="rgb(205,18,17)" fg:x="984" fg:w="2"/><text x="80.1850%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="79.9350%" y="549" width="0.1625%" height="15" fill="rgb(254,130,5)" fg:x="984" fg:w="2"/><text x="80.1850%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="79.9350%" y="533" width="0.1625%" height="15" fill="rgb(229,42,45)" fg:x="984" fg:w="2"/><text x="80.1850%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="79.9350%" y="517" width="0.1625%" height="15" fill="rgb(245,95,25)" fg:x="984" fg:w="2"/><text x="80.1850%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0162%" y="501" width="0.0812%" height="15" fill="rgb(249,193,38)" fg:x="985" fg:w="1"/><text x="80.2662%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.0162%" y="485" width="0.0812%" height="15" fill="rgb(241,140,43)" fg:x="985" fg:w="1"/><text x="80.2662%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0162%" y="469" width="0.0812%" height="15" fill="rgb(245,78,48)" fg:x="985" fg:w="1"/><text x="80.2662%" y="479.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="80.0975%" y="597" width="0.0812%" height="15" fill="rgb(214,92,39)" fg:x="986" fg:w="1"/><text x="80.3475%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="80.0975%" y="581" width="0.0812%" height="15" fill="rgb(211,189,14)" fg:x="986" fg:w="1"/><text x="80.3475%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="80.0975%" y="565" width="0.0812%" height="15" fill="rgb(218,7,24)" fg:x="986" fg:w="1"/><text x="80.3475%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="80.0975%" y="549" width="0.0812%" height="15" fill="rgb(224,200,49)" fg:x="986" fg:w="1"/><text x="80.3475%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.1787%" y="565" width="0.0812%" height="15" fill="rgb(218,210,14)" fg:x="987" fg:w="1"/><text x="80.4287%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.1787%" y="549" width="0.0812%" height="15" fill="rgb(234,142,31)" fg:x="987" fg:w="1"/><text x="80.4287%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.1787%" y="533" width="0.0812%" height="15" fill="rgb(227,165,2)" fg:x="987" fg:w="1"/><text x="80.4287%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1787%" y="517" width="0.0812%" height="15" fill="rgb(232,44,46)" fg:x="987" fg:w="1"/><text x="80.4287%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.1787%" y="501" width="0.0812%" height="15" fill="rgb(236,149,47)" fg:x="987" fg:w="1"/><text x="80.4287%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1787%" y="485" width="0.0812%" height="15" fill="rgb(227,45,31)" fg:x="987" fg:w="1"/><text x="80.4287%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.1787%" y="469" width="0.0812%" height="15" fill="rgb(240,176,51)" fg:x="987" fg:w="1"/><text x="80.4287%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.1787%" y="453" width="0.0812%" height="15" fill="rgb(249,146,41)" fg:x="987" fg:w="1"/><text x="80.4287%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.1787%" y="437" width="0.0812%" height="15" fill="rgb(213,208,4)" fg:x="987" fg:w="1"/><text x="80.4287%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.1787%" y="421" width="0.0812%" height="15" fill="rgb(245,84,36)" fg:x="987" fg:w="1"/><text x="80.4287%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1787%" y="405" width="0.0812%" height="15" fill="rgb(254,84,18)" fg:x="987" fg:w="1"/><text x="80.4287%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.1787%" y="389" width="0.0812%" height="15" fill="rgb(225,38,54)" fg:x="987" fg:w="1"/><text x="80.4287%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.1787%" y="373" width="0.0812%" height="15" fill="rgb(246,50,30)" fg:x="987" fg:w="1"/><text x="80.4287%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.1787%" y="357" width="0.0812%" height="15" fill="rgb(246,148,9)" fg:x="987" fg:w="1"/><text x="80.4287%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.1787%" y="341" width="0.0812%" height="15" fill="rgb(223,75,4)" fg:x="987" fg:w="1"/><text x="80.4287%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.1787%" y="325" width="0.0812%" height="15" fill="rgb(239,148,41)" fg:x="987" fg:w="1"/><text x="80.4287%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1787%" y="309" width="0.0812%" height="15" fill="rgb(205,195,3)" fg:x="987" fg:w="1"/><text x="80.4287%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.2600%" y="517" width="0.0812%" height="15" fill="rgb(254,161,1)" fg:x="988" fg:w="1"/><text x="80.5100%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.2600%" y="501" width="0.0812%" height="15" fill="rgb(211,229,8)" fg:x="988" fg:w="1"/><text x="80.5100%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.2600%" y="485" width="0.0812%" height="15" fill="rgb(220,97,9)" fg:x="988" fg:w="1"/><text x="80.5100%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2600%" y="469" width="0.0812%" height="15" fill="rgb(240,218,8)" fg:x="988" fg:w="1"/><text x="80.5100%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.2600%" y="453" width="0.0812%" height="15" fill="rgb(250,44,0)" fg:x="988" fg:w="1"/><text x="80.5100%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2600%" y="437" width="0.0812%" height="15" fill="rgb(236,41,53)" fg:x="988" fg:w="1"/><text x="80.5100%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.2600%" y="421" width="0.0812%" height="15" fill="rgb(218,227,13)" fg:x="988" fg:w="1"/><text x="80.5100%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2600%" y="405" width="0.0812%" height="15" fill="rgb(217,94,32)" fg:x="988" fg:w="1"/><text x="80.5100%" y="415.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="80.2600%" y="549" width="0.1625%" height="15" fill="rgb(213,217,12)" fg:x="988" fg:w="2"/><text x="80.5100%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="80.2600%" y="533" width="0.1625%" height="15" fill="rgb(229,13,46)" fg:x="988" fg:w="2"/><text x="80.5100%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="80.3412%" y="517" width="0.0812%" height="15" fill="rgb(243,139,5)" fg:x="989" fg:w="1"/><text x="80.5912%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3412%" y="501" width="0.0812%" height="15" fill="rgb(249,38,45)" fg:x="989" fg:w="1"/><text x="80.5912%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.3412%" y="485" width="0.0812%" height="15" fill="rgb(216,70,11)" fg:x="989" fg:w="1"/><text x="80.5912%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.3412%" y="469" width="0.0812%" height="15" fill="rgb(253,101,25)" fg:x="989" fg:w="1"/><text x="80.5912%" y="479.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.3412%" y="453" width="0.0812%" height="15" fill="rgb(207,197,30)" fg:x="989" fg:w="1"/><text x="80.5912%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.3412%" y="437" width="0.0812%" height="15" fill="rgb(238,87,13)" fg:x="989" fg:w="1"/><text x="80.5912%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3412%" y="421" width="0.0812%" height="15" fill="rgb(215,155,8)" fg:x="989" fg:w="1"/><text x="80.5912%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5037%" y="517" width="0.0812%" height="15" fill="rgb(239,166,38)" fg:x="991" fg:w="1"/><text x="80.7537%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="80.1787%" y="581" width="0.4874%" height="15" fill="rgb(240,194,35)" fg:x="987" fg:w="6"/><text x="80.4287%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="80.2600%" y="565" width="0.4062%" height="15" fill="rgb(219,10,44)" fg:x="988" fg:w="5"/><text x="80.5100%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="80.4224%" y="549" width="0.2437%" height="15" fill="rgb(251,220,35)" fg:x="990" fg:w="3"/><text x="80.6724%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="80.4224%" y="533" width="0.2437%" height="15" fill="rgb(218,117,13)" fg:x="990" fg:w="3"/><text x="80.6724%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="80.5849%" y="517" width="0.0812%" height="15" fill="rgb(221,213,40)" fg:x="992" fg:w="1"/><text x="80.8349%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="80.5849%" y="501" width="0.0812%" height="15" fill="rgb(251,224,35)" fg:x="992" fg:w="1"/><text x="80.8349%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.5849%" y="485" width="0.0812%" height="15" fill="rgb(241,33,39)" fg:x="992" fg:w="1"/><text x="80.8349%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5849%" y="469" width="0.0812%" height="15" fill="rgb(222,74,17)" fg:x="992" fg:w="1"/><text x="80.8349%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (71 samples, 5.77%)</title><rect x="75.0609%" y="629" width="5.7677%" height="15" fill="rgb(225,103,0)" fg:x="924" fg:w="71"/><text x="75.3109%" y="639.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.73%)</title><rect x="80.0975%" y="613" width="0.7311%" height="15" fill="rgb(240,0,12)" fg:x="986" fg:w="9"/><text x="80.3475%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.65%)</title><rect x="80.1787%" y="597" width="0.6499%" height="15" fill="rgb(233,213,37)" fg:x="987" fg:w="8"/><text x="80.4287%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="80.6661%" y="581" width="0.1625%" height="15" fill="rgb(225,84,52)" fg:x="993" fg:w="2"/><text x="80.9161%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.6661%" y="565" width="0.1625%" height="15" fill="rgb(247,160,51)" fg:x="993" fg:w="2"/><text x="80.9161%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.6661%" y="549" width="0.1625%" height="15" fill="rgb(244,60,51)" fg:x="993" fg:w="2"/><text x="80.9161%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="80.6661%" y="533" width="0.1625%" height="15" fill="rgb(233,114,7)" fg:x="993" fg:w="2"/><text x="80.9161%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7474%" y="517" width="0.0812%" height="15" fill="rgb(246,136,16)" fg:x="994" fg:w="1"/><text x="80.9974%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="80.8286%" y="629" width="0.0812%" height="15" fill="rgb(243,114,45)" fg:x="995" fg:w="1"/><text x="81.0786%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.8286%" y="613" width="0.0812%" height="15" fill="rgb(247,183,43)" fg:x="995" fg:w="1"/><text x="81.0786%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="80.8286%" y="597" width="0.0812%" height="15" fill="rgb(251,210,42)" fg:x="995" fg:w="1"/><text x="81.0786%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.8286%" y="581" width="0.0812%" height="15" fill="rgb(221,88,35)" fg:x="995" fg:w="1"/><text x="81.0786%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.8286%" y="565" width="0.0812%" height="15" fill="rgb(242,21,20)" fg:x="995" fg:w="1"/><text x="81.0786%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="80.9098%" y="613" width="0.0812%" height="15" fill="rgb(233,226,36)" fg:x="996" fg:w="1"/><text x="81.1598%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="81.0723%" y="485" width="0.3249%" height="15" fill="rgb(243,189,34)" fg:x="998" fg:w="4"/><text x="81.3223%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="81.1535%" y="469" width="0.2437%" height="15" fill="rgb(207,145,50)" fg:x="999" fg:w="3"/><text x="81.4035%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.3160%" y="453" width="0.0812%" height="15" fill="rgb(242,1,50)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.3160%" y="437" width="0.0812%" height="15" fill="rgb(231,65,32)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="447.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="81.3972%" y="469" width="0.0812%" height="15" fill="rgb(208,68,49)" fg:x="1002" fg:w="1"/><text x="81.6472%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="81.4785%" y="469" width="0.2437%" height="15" fill="rgb(253,54,49)" fg:x="1003" fg:w="3"/><text x="81.7285%" y="479.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="81.4785%" y="453" width="0.2437%" height="15" fill="rgb(245,186,24)" fg:x="1003" fg:w="3"/><text x="81.7285%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7222%" y="469" width="0.0812%" height="15" fill="rgb(209,2,41)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7222%" y="453" width="0.0812%" height="15" fill="rgb(242,208,54)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="81.7222%" y="437" width="0.0812%" height="15" fill="rgb(225,9,51)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.7222%" y="421" width="0.0812%" height="15" fill="rgb(207,207,25)" fg:x="1006" fg:w="1"/><text x="81.9722%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="80.9911%" y="517" width="0.8936%" height="15" fill="rgb(253,96,18)" fg:x="997" fg:w="11"/><text x="81.2411%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="80.9911%" y="501" width="0.8936%" height="15" fill="rgb(252,215,20)" fg:x="997" fg:w="11"/><text x="81.2411%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="81.3972%" y="485" width="0.4874%" height="15" fill="rgb(245,227,26)" fg:x="1002" fg:w="6"/><text x="81.6472%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.8034%" y="469" width="0.0812%" height="15" fill="rgb(241,208,0)" fg:x="1007" fg:w="1"/><text x="82.0534%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.97%)</title><rect x="80.9911%" y="533" width="0.9748%" height="15" fill="rgb(224,130,10)" fg:x="997" fg:w="12"/><text x="81.2411%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="81.8846%" y="517" width="0.0812%" height="15" fill="rgb(237,29,0)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.8846%" y="501" width="0.0812%" height="15" fill="rgb(219,27,41)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.8846%" y="485" width="0.0812%" height="15" fill="rgb(245,101,19)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.8846%" y="469" width="0.0812%" height="15" fill="rgb(243,44,37)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.8846%" y="453" width="0.0812%" height="15" fill="rgb(228,213,43)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8846%" y="437" width="0.0812%" height="15" fill="rgb(219,163,21)" fg:x="1008" fg:w="1"/><text x="82.1346%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.9659%" y="485" width="0.0812%" height="15" fill="rgb(234,86,24)" fg:x="1009" fg:w="1"/><text x="82.2159%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0471%" y="453" width="0.0812%" height="15" fill="rgb(225,10,24)" fg:x="1010" fg:w="1"/><text x="82.2971%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="82.1284%" y="453" width="0.0812%" height="15" fill="rgb(218,109,7)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.1284%" y="437" width="0.0812%" height="15" fill="rgb(210,20,26)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.1284%" y="421" width="0.0812%" height="15" fill="rgb(216,18,1)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.1284%" y="405" width="0.0812%" height="15" fill="rgb(206,163,23)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="81.9659%" y="533" width="0.3249%" height="15" fill="rgb(229,150,31)" fg:x="1009" fg:w="4"/><text x="82.2159%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="81.9659%" y="517" width="0.3249%" height="15" fill="rgb(231,10,5)" fg:x="1009" fg:w="4"/><text x="82.2159%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="81.9659%" y="501" width="0.3249%" height="15" fill="rgb(250,40,50)" fg:x="1009" fg:w="4"/><text x="82.2159%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.0471%" y="485" width="0.2437%" height="15" fill="rgb(217,119,7)" fg:x="1010" fg:w="3"/><text x="82.2971%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.0471%" y="469" width="0.2437%" height="15" fill="rgb(245,214,40)" fg:x="1010" fg:w="3"/><text x="82.2971%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.2096%" y="453" width="0.0812%" height="15" fill="rgb(216,187,1)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2908%" y="453" width="0.0812%" height="15" fill="rgb(237,146,21)" fg:x="1013" fg:w="1"/><text x="82.5408%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.3721%" y="453" width="0.0812%" height="15" fill="rgb(210,174,47)" fg:x="1014" fg:w="1"/><text x="82.6221%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5345%" y="421" width="0.0812%" height="15" fill="rgb(218,111,39)" fg:x="1016" fg:w="1"/><text x="82.7845%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="82.6158%" y="421" width="0.0812%" height="15" fill="rgb(224,95,19)" fg:x="1017" fg:w="1"/><text x="82.8658%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.6158%" y="405" width="0.0812%" height="15" fill="rgb(234,15,38)" fg:x="1017" fg:w="1"/><text x="82.8658%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.6158%" y="389" width="0.0812%" height="15" fill="rgb(246,56,12)" fg:x="1017" fg:w="1"/><text x="82.8658%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="82.2908%" y="501" width="0.4874%" height="15" fill="rgb(247,16,17)" fg:x="1013" fg:w="6"/><text x="82.5408%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="82.2908%" y="485" width="0.4874%" height="15" fill="rgb(215,151,11)" fg:x="1013" fg:w="6"/><text x="82.5408%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="82.2908%" y="469" width="0.4874%" height="15" fill="rgb(225,16,24)" fg:x="1013" fg:w="6"/><text x="82.5408%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="82.4533%" y="453" width="0.3249%" height="15" fill="rgb(217,117,5)" fg:x="1015" fg:w="4"/><text x="82.7033%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="82.4533%" y="437" width="0.3249%" height="15" fill="rgb(246,187,53)" fg:x="1015" fg:w="4"/><text x="82.7033%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.6970%" y="421" width="0.0812%" height="15" fill="rgb(241,71,40)" fg:x="1018" fg:w="1"/><text x="82.9470%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.6970%" y="405" width="0.0812%" height="15" fill="rgb(231,67,39)" fg:x="1018" fg:w="1"/><text x="82.9470%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.6970%" y="389" width="0.0812%" height="15" fill="rgb(222,120,24)" fg:x="1018" fg:w="1"/><text x="82.9470%" y="399.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.57%)</title><rect x="82.2908%" y="517" width="0.5686%" height="15" fill="rgb(248,3,3)" fg:x="1013" fg:w="7"/><text x="82.5408%" y="527.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="82.7782%" y="501" width="0.0812%" height="15" fill="rgb(228,218,5)" fg:x="1019" fg:w="1"/><text x="83.0282%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9407%" y="485" width="0.0812%" height="15" fill="rgb(212,202,43)" fg:x="1021" fg:w="1"/><text x="83.1907%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0219%" y="485" width="0.0812%" height="15" fill="rgb(235,183,2)" fg:x="1022" fg:w="1"/><text x="83.2719%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2656%" y="437" width="0.0812%" height="15" fill="rgb(230,165,10)" fg:x="1025" fg:w="1"/><text x="83.5156%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2656%" y="421" width="0.0812%" height="15" fill="rgb(219,54,40)" fg:x="1025" fg:w="1"/><text x="83.5156%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.2656%" y="405" width="0.0812%" height="15" fill="rgb(244,73,9)" fg:x="1025" fg:w="1"/><text x="83.5156%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="83.4281%" y="421" width="0.2437%" height="15" fill="rgb(212,32,45)" fg:x="1027" fg:w="3"/><text x="83.6781%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="83.4281%" y="405" width="0.2437%" height="15" fill="rgb(205,58,31)" fg:x="1027" fg:w="3"/><text x="83.6781%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.5093%" y="389" width="0.1625%" height="15" fill="rgb(250,120,43)" fg:x="1028" fg:w="2"/><text x="83.7593%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="83.5093%" y="373" width="0.1625%" height="15" fill="rgb(235,13,10)" fg:x="1028" fg:w="2"/><text x="83.7593%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5906%" y="357" width="0.0812%" height="15" fill="rgb(232,219,31)" fg:x="1029" fg:w="1"/><text x="83.8406%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.57%)</title><rect x="83.1844%" y="469" width="0.5686%" height="15" fill="rgb(218,157,51)" fg:x="1024" fg:w="7"/><text x="83.4344%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="83.1844%" y="453" width="0.5686%" height="15" fill="rgb(211,91,52)" fg:x="1024" fg:w="7"/><text x="83.4344%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="83.3469%" y="437" width="0.4062%" height="15" fill="rgb(240,173,1)" fg:x="1026" fg:w="5"/><text x="83.5969%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6718%" y="421" width="0.0812%" height="15" fill="rgb(248,20,47)" fg:x="1030" fg:w="1"/><text x="83.9218%" y="431.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.97%)</title><rect x="82.8595%" y="517" width="0.9748%" height="15" fill="rgb(217,221,40)" fg:x="1020" fg:w="12"/><text x="83.1095%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.97%)</title><rect x="82.8595%" y="501" width="0.9748%" height="15" fill="rgb(226,149,51)" fg:x="1020" fg:w="12"/><text x="83.1095%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.73%)</title><rect x="83.1032%" y="485" width="0.7311%" height="15" fill="rgb(252,193,7)" fg:x="1023" fg:w="9"/><text x="83.3532%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.7530%" y="469" width="0.0812%" height="15" fill="rgb(205,123,0)" fg:x="1031" fg:w="1"/><text x="84.0030%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.7530%" y="453" width="0.0812%" height="15" fill="rgb(233,173,25)" fg:x="1031" fg:w="1"/><text x="84.0030%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.8343%" y="373" width="0.0812%" height="15" fill="rgb(216,63,32)" fg:x="1032" fg:w="1"/><text x="84.0843%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.8343%" y="357" width="0.0812%" height="15" fill="rgb(209,56,45)" fg:x="1032" fg:w="1"/><text x="84.0843%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.8343%" y="341" width="0.0812%" height="15" fill="rgb(226,111,49)" fg:x="1032" fg:w="1"/><text x="84.0843%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.8343%" y="325" width="0.0812%" height="15" fill="rgb(244,181,21)" fg:x="1032" fg:w="1"/><text x="84.0843%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.8343%" y="309" width="0.0812%" height="15" fill="rgb(222,126,15)" fg:x="1032" fg:w="1"/><text x="84.0843%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.8343%" y="421" width="0.1625%" height="15" fill="rgb(222,95,17)" fg:x="1032" fg:w="2"/><text x="84.0843%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.8343%" y="405" width="0.1625%" height="15" fill="rgb(254,46,5)" fg:x="1032" fg:w="2"/><text x="84.0843%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.8343%" y="389" width="0.1625%" height="15" fill="rgb(236,216,35)" fg:x="1032" fg:w="2"/><text x="84.0843%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.9155%" y="373" width="0.0812%" height="15" fill="rgb(217,187,26)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.9155%" y="357" width="0.0812%" height="15" fill="rgb(207,192,25)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.9155%" y="341" width="0.0812%" height="15" fill="rgb(253,135,27)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9155%" y="325" width="0.0812%" height="15" fill="rgb(211,122,29)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="335.50"></text></g><g><title>engine::session::Session::close (40 samples, 3.25%)</title><rect x="80.9098%" y="629" width="3.2494%" height="15" fill="rgb(233,162,40)" fg:x="996" fg:w="40"/><text x="81.1598%" y="639.50">eng..</text></g><g><title>engine::session::state::State::close (39 samples, 3.17%)</title><rect x="80.9911%" y="613" width="3.1682%" height="15" fill="rgb(222,184,47)" fg:x="997" fg:w="39"/><text x="81.2411%" y="623.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (39 samples, 3.17%)</title><rect x="80.9911%" y="597" width="3.1682%" height="15" fill="rgb(249,99,23)" fg:x="997" fg:w="39"/><text x="81.2411%" y="607.50">eng..</text></g><g><title>core::iter::adapters::try_process (39 samples, 3.17%)</title><rect x="80.9911%" y="581" width="3.1682%" height="15" fill="rgb(214,60,12)" fg:x="997" fg:w="39"/><text x="81.2411%" y="591.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 3.17%)</title><rect x="80.9911%" y="565" width="3.1682%" height="15" fill="rgb(250,229,36)" fg:x="997" fg:w="39"/><text x="81.2411%" y="575.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (39 samples, 3.17%)</title><rect x="80.9911%" y="549" width="3.1682%" height="15" fill="rgb(232,195,10)" fg:x="997" fg:w="39"/><text x="81.2411%" y="559.50">eng..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.87%)</title><rect x="82.2908%" y="533" width="1.8684%" height="15" fill="rgb(205,213,31)" fg:x="1013" fg:w="23"/><text x="82.5408%" y="543.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="83.8343%" y="517" width="0.3249%" height="15" fill="rgb(237,43,8)" fg:x="1032" fg:w="4"/><text x="84.0843%" y="527.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="83.8343%" y="501" width="0.3249%" height="15" fill="rgb(216,208,3)" fg:x="1032" fg:w="4"/><text x="84.0843%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="83.8343%" y="485" width="0.3249%" height="15" fill="rgb(228,179,44)" fg:x="1032" fg:w="4"/><text x="84.0843%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="83.8343%" y="469" width="0.3249%" height="15" fill="rgb(230,192,27)" fg:x="1032" fg:w="4"/><text x="84.0843%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="83.8343%" y="453" width="0.3249%" height="15" fill="rgb(251,30,38)" fg:x="1032" fg:w="4"/><text x="84.0843%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="83.8343%" y="437" width="0.3249%" height="15" fill="rgb(246,55,52)" fg:x="1032" fg:w="4"/><text x="84.0843%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="83.9968%" y="421" width="0.1625%" height="15" fill="rgb(249,79,26)" fg:x="1034" fg:w="2"/><text x="84.2468%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.0780%" y="405" width="0.0812%" height="15" fill="rgb(220,202,16)" fg:x="1035" fg:w="1"/><text x="84.3280%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.0780%" y="389" width="0.0812%" height="15" fill="rgb(250,170,23)" fg:x="1035" fg:w="1"/><text x="84.3280%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.1592%" y="501" width="0.0812%" height="15" fill="rgb(230,7,37)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1592%" y="485" width="0.0812%" height="15" fill="rgb(213,71,1)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.1592%" y="469" width="0.0812%" height="15" fill="rgb(227,87,39)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1592%" y="453" width="0.0812%" height="15" fill="rgb(210,41,29)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.1592%" y="437" width="0.0812%" height="15" fill="rgb(206,191,31)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.1592%" y="421" width="0.0812%" height="15" fill="rgb(247,75,54)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.1592%" y="405" width="0.0812%" height="15" fill="rgb(208,54,50)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.1592%" y="389" width="0.0812%" height="15" fill="rgb(214,90,37)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.1592%" y="373" width="0.0812%" height="15" fill="rgb(220,132,6)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.1592%" y="357" width="0.0812%" height="15" fill="rgb(213,167,7)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.1592%" y="341" width="0.0812%" height="15" fill="rgb(243,36,27)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.1592%" y="325" width="0.0812%" height="15" fill="rgb(235,147,12)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.1592%" y="309" width="0.0812%" height="15" fill="rgb(212,198,44)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.1592%" y="293" width="0.0812%" height="15" fill="rgb(218,68,50)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1592%" y="277" width="0.0812%" height="15" fill="rgb(224,79,48)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2405%" y="437" width="0.0812%" height="15" fill="rgb(213,191,50)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2405%" y="421" width="0.0812%" height="15" fill="rgb(254,146,10)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2405%" y="405" width="0.0812%" height="15" fill="rgb(215,175,11)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2405%" y="389" width="0.0812%" height="15" fill="rgb(207,49,7)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2405%" y="373" width="0.0812%" height="15" fill="rgb(234,144,29)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="383.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="84.3217%" y="437" width="0.0812%" height="15" fill="rgb(213,222,48)" fg:x="1038" fg:w="1"/><text x="84.5717%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3217%" y="421" width="0.0812%" height="15" fill="rgb(222,8,6)" fg:x="1038" fg:w="1"/><text x="84.5717%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="84.4029%" y="309" width="0.0812%" height="15" fill="rgb(221,114,49)" fg:x="1039" fg:w="1"/><text x="84.6529%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.4029%" y="341" width="0.1625%" height="15" fill="rgb(250,140,42)" fg:x="1039" fg:w="2"/><text x="84.6529%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.4029%" y="325" width="0.1625%" height="15" fill="rgb(250,150,27)" fg:x="1039" fg:w="2"/><text x="84.6529%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="84.4842%" y="309" width="0.0812%" height="15" fill="rgb(252,159,3)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4842%" y="293" width="0.0812%" height="15" fill="rgb(241,182,3)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.4842%" y="277" width="0.0812%" height="15" fill="rgb(236,3,9)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.4842%" y="261" width="0.0812%" height="15" fill="rgb(223,227,51)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4842%" y="245" width="0.0812%" height="15" fill="rgb(232,133,30)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4842%" y="229" width="0.0812%" height="15" fill="rgb(209,93,27)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="84.4842%" y="213" width="0.0812%" height="15" fill="rgb(208,108,34)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="84.4029%" y="437" width="0.2437%" height="15" fill="rgb(215,189,13)" fg:x="1039" fg:w="3"/><text x="84.6529%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="84.4029%" y="421" width="0.2437%" height="15" fill="rgb(206,88,23)" fg:x="1039" fg:w="3"/><text x="84.6529%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="84.4029%" y="405" width="0.2437%" height="15" fill="rgb(240,173,0)" fg:x="1039" fg:w="3"/><text x="84.6529%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="84.4029%" y="389" width="0.2437%" height="15" fill="rgb(223,106,52)" fg:x="1039" fg:w="3"/><text x="84.6529%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="84.4029%" y="373" width="0.2437%" height="15" fill="rgb(206,130,16)" fg:x="1039" fg:w="3"/><text x="84.6529%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="84.4029%" y="357" width="0.2437%" height="15" fill="rgb(220,54,25)" fg:x="1039" fg:w="3"/><text x="84.6529%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.5654%" y="341" width="0.0812%" height="15" fill="rgb(210,4,38)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5654%" y="325" width="0.0812%" height="15" fill="rgb(238,94,39)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6466%" y="373" width="0.0812%" height="15" fill="rgb(234,124,34)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6466%" y="357" width="0.0812%" height="15" fill="rgb(221,91,40)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.6466%" y="341" width="0.0812%" height="15" fill="rgb(246,53,28)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.6466%" y="325" width="0.0812%" height="15" fill="rgb(229,109,7)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (8 samples, 0.65%)</title><rect x="84.1592%" y="533" width="0.6499%" height="15" fill="rgb(249,117,8)" fg:x="1036" fg:w="8"/><text x="84.4092%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (8 samples, 0.65%)</title><rect x="84.1592%" y="517" width="0.6499%" height="15" fill="rgb(210,181,1)" fg:x="1036" fg:w="8"/><text x="84.4092%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.57%)</title><rect x="84.2405%" y="501" width="0.5686%" height="15" fill="rgb(211,66,1)" fg:x="1037" fg:w="7"/><text x="84.4905%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.57%)</title><rect x="84.2405%" y="485" width="0.5686%" height="15" fill="rgb(221,90,14)" fg:x="1037" fg:w="7"/><text x="84.4905%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="84.2405%" y="469" width="0.5686%" height="15" fill="rgb(219,222,44)" fg:x="1037" fg:w="7"/><text x="84.4905%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="84.2405%" y="453" width="0.5686%" height="15" fill="rgb(246,34,33)" fg:x="1037" fg:w="7"/><text x="84.4905%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="84.6466%" y="437" width="0.1625%" height="15" fill="rgb(227,135,41)" fg:x="1042" fg:w="2"/><text x="84.8966%" y="447.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="84.6466%" y="421" width="0.1625%" height="15" fill="rgb(226,15,14)" fg:x="1042" fg:w="2"/><text x="84.8966%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.6466%" y="405" width="0.1625%" height="15" fill="rgb(236,148,47)" fg:x="1042" fg:w="2"/><text x="84.8966%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.6466%" y="389" width="0.1625%" height="15" fill="rgb(233,162,52)" fg:x="1042" fg:w="2"/><text x="84.8966%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.7279%" y="373" width="0.0812%" height="15" fill="rgb(244,35,28)" fg:x="1043" fg:w="1"/><text x="84.9779%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.7279%" y="357" width="0.0812%" height="15" fill="rgb(205,121,10)" fg:x="1043" fg:w="1"/><text x="84.9779%" y="367.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (3 samples, 0.24%)</title><rect x="84.8091%" y="389" width="0.2437%" height="15" fill="rgb(250,58,18)" fg:x="1044" fg:w="3"/><text x="85.0591%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="84.8091%" y="373" width="0.2437%" height="15" fill="rgb(216,37,13)" fg:x="1044" fg:w="3"/><text x="85.0591%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (3 samples, 0.24%)</title><rect x="84.8091%" y="357" width="0.2437%" height="15" fill="rgb(221,215,42)" fg:x="1044" fg:w="3"/><text x="85.0591%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="84.8091%" y="341" width="0.2437%" height="15" fill="rgb(217,214,19)" fg:x="1044" fg:w="3"/><text x="85.0591%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.9716%" y="325" width="0.0812%" height="15" fill="rgb(233,139,13)" fg:x="1046" fg:w="1"/><text x="85.2216%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.9716%" y="309" width="0.0812%" height="15" fill="rgb(247,168,23)" fg:x="1046" fg:w="1"/><text x="85.2216%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.1340%" y="309" width="0.0812%" height="15" fill="rgb(207,202,1)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.1340%" y="293" width="0.0812%" height="15" fill="rgb(220,155,48)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.1340%" y="277" width="0.0812%" height="15" fill="rgb(250,43,26)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.1340%" y="261" width="0.0812%" height="15" fill="rgb(212,190,23)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.1340%" y="245" width="0.0812%" height="15" fill="rgb(216,39,24)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.1340%" y="229" width="0.0812%" height="15" fill="rgb(252,113,16)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.1340%" y="213" width="0.0812%" height="15" fill="rgb(208,113,19)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.1340%" y="197" width="0.0812%" height="15" fill="rgb(234,107,25)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.1340%" y="181" width="0.0812%" height="15" fill="rgb(234,217,51)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.1340%" y="165" width="0.0812%" height="15" fill="rgb(251,29,42)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.1340%" y="149" width="0.0812%" height="15" fill="rgb(221,62,51)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.1340%" y="133" width="0.0812%" height="15" fill="rgb(240,192,43)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.1340%" y="117" width="0.0812%" height="15" fill="rgb(224,157,47)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.1340%" y="101" width="0.0812%" height="15" fill="rgb(226,84,45)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1340%" y="85" width="0.0812%" height="15" fill="rgb(208,207,23)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="85.1340%" y="357" width="0.1625%" height="15" fill="rgb(253,34,51)" fg:x="1048" fg:w="2"/><text x="85.3840%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="85.1340%" y="341" width="0.1625%" height="15" fill="rgb(227,26,34)" fg:x="1048" fg:w="2"/><text x="85.3840%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="85.1340%" y="325" width="0.1625%" height="15" fill="rgb(245,75,19)" fg:x="1048" fg:w="2"/><text x="85.3840%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.2153%" y="309" width="0.0812%" height="15" fill="rgb(250,191,31)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2153%" y="293" width="0.0812%" height="15" fill="rgb(224,11,50)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.2153%" y="277" width="0.0812%" height="15" fill="rgb(231,171,7)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2153%" y="261" width="0.0812%" height="15" fill="rgb(252,214,10)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.2153%" y="245" width="0.0812%" height="15" fill="rgb(249,45,46)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.2153%" y="229" width="0.0812%" height="15" fill="rgb(240,173,7)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.3777%" y="309" width="0.0812%" height="15" fill="rgb(235,214,13)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.3777%" y="293" width="0.0812%" height="15" fill="rgb(245,156,8)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.3777%" y="277" width="0.0812%" height="15" fill="rgb(235,46,12)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.3777%" y="261" width="0.0812%" height="15" fill="rgb(221,81,14)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.3777%" y="245" width="0.0812%" height="15" fill="rgb(238,207,9)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.3777%" y="229" width="0.0812%" height="15" fill="rgb(224,129,35)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.3777%" y="213" width="0.0812%" height="15" fill="rgb(243,218,34)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.3777%" y="197" width="0.0812%" height="15" fill="rgb(220,166,13)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.3777%" y="181" width="0.0812%" height="15" fill="rgb(227,167,49)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.3777%" y="165" width="0.0812%" height="15" fill="rgb(234,142,12)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.3777%" y="149" width="0.0812%" height="15" fill="rgb(207,100,48)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.3777%" y="133" width="0.0812%" height="15" fill="rgb(210,25,14)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.3777%" y="117" width="0.0812%" height="15" fill="rgb(246,116,27)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.3777%" y="101" width="0.0812%" height="15" fill="rgb(214,193,42)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3777%" y="85" width="0.0812%" height="15" fill="rgb(214,122,8)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="85.2965%" y="357" width="0.3249%" height="15" fill="rgb(244,173,18)" fg:x="1050" fg:w="4"/><text x="85.5465%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="85.2965%" y="341" width="0.3249%" height="15" fill="rgb(232,68,19)" fg:x="1050" fg:w="4"/><text x="85.5465%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="85.2965%" y="325" width="0.3249%" height="15" fill="rgb(236,224,1)" fg:x="1050" fg:w="4"/><text x="85.5465%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="85.4590%" y="309" width="0.1625%" height="15" fill="rgb(240,11,8)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.4590%" y="293" width="0.1625%" height="15" fill="rgb(244,159,20)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="85.4590%" y="277" width="0.1625%" height="15" fill="rgb(240,223,54)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.4590%" y="261" width="0.1625%" height="15" fill="rgb(237,146,5)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="85.4590%" y="245" width="0.1625%" height="15" fill="rgb(218,221,32)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.4590%" y="229" width="0.1625%" height="15" fill="rgb(244,96,26)" fg:x="1052" fg:w="2"/><text x="85.7090%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.6214%" y="293" width="0.0812%" height="15" fill="rgb(245,184,37)" fg:x="1054" fg:w="1"/><text x="85.8714%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.6214%" y="277" width="0.0812%" height="15" fill="rgb(248,91,47)" fg:x="1054" fg:w="1"/><text x="85.8714%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.6214%" y="261" width="0.0812%" height="15" fill="rgb(243,199,8)" fg:x="1054" fg:w="1"/><text x="85.8714%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="85.6214%" y="357" width="0.1625%" height="15" fill="rgb(249,12,15)" fg:x="1054" fg:w="2"/><text x="85.8714%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="85.6214%" y="341" width="0.1625%" height="15" fill="rgb(245,97,12)" fg:x="1054" fg:w="2"/><text x="85.8714%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="85.6214%" y="325" width="0.1625%" height="15" fill="rgb(244,61,1)" fg:x="1054" fg:w="2"/><text x="85.8714%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="85.6214%" y="309" width="0.1625%" height="15" fill="rgb(222,194,10)" fg:x="1054" fg:w="2"/><text x="85.8714%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.7027%" y="293" width="0.0812%" height="15" fill="rgb(226,178,8)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7027%" y="277" width="0.0812%" height="15" fill="rgb(241,32,34)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.7027%" y="261" width="0.0812%" height="15" fill="rgb(254,26,6)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.7027%" y="245" width="0.0812%" height="15" fill="rgb(249,71,11)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="85.8652%" y="277" width="0.1625%" height="15" fill="rgb(232,170,27)" fg:x="1057" fg:w="2"/><text x="86.1152%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.9464%" y="261" width="0.0812%" height="15" fill="rgb(214,223,17)" fg:x="1058" fg:w="1"/><text x="86.1964%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="85.9464%" y="245" width="0.0812%" height="15" fill="rgb(250,18,15)" fg:x="1058" fg:w="1"/><text x="86.1964%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="85.9464%" y="229" width="0.0812%" height="15" fill="rgb(212,153,51)" fg:x="1058" fg:w="1"/><text x="86.1964%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="85.9464%" y="213" width="0.0812%" height="15" fill="rgb(219,194,12)" fg:x="1058" fg:w="1"/><text x="86.1964%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="85.9464%" y="197" width="0.0812%" height="15" fill="rgb(212,58,17)" fg:x="1058" fg:w="1"/><text x="86.1964%" y="207.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="85.9464%" y="181" width="0.0812%" height="15" fill="rgb(254,5,10)" fg:x="1058" fg:w="1"/><text x="86.1964%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.0276%" y="245" width="0.0812%" height="15" fill="rgb(246,91,7)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.0276%" y="229" width="0.0812%" height="15" fill="rgb(218,108,49)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.0276%" y="213" width="0.0812%" height="15" fill="rgb(238,123,20)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.1089%" y="229" width="0.0812%" height="15" fill="rgb(231,69,23)" fg:x="1060" fg:w="1"/><text x="86.3589%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="86.0276%" y="277" width="0.2437%" height="15" fill="rgb(230,209,3)" fg:x="1059" fg:w="3"/><text x="86.2776%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="86.0276%" y="261" width="0.2437%" height="15" fill="rgb(231,19,0)" fg:x="1059" fg:w="3"/><text x="86.2776%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="86.1089%" y="245" width="0.1625%" height="15" fill="rgb(226,192,25)" fg:x="1060" fg:w="2"/><text x="86.3589%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="86.1901%" y="229" width="0.0812%" height="15" fill="rgb(223,175,53)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.1901%" y="213" width="0.0812%" height="15" fill="rgb(248,35,51)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.49%)</title><rect x="86.3526%" y="213" width="0.4874%" height="15" fill="rgb(230,37,26)" fg:x="1063" fg:w="6"/><text x="86.6026%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.49%)</title><rect x="86.3526%" y="197" width="0.4874%" height="15" fill="rgb(206,120,22)" fg:x="1063" fg:w="6"/><text x="86.6026%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="86.8400%" y="213" width="0.0812%" height="15" fill="rgb(207,165,28)" fg:x="1069" fg:w="1"/><text x="87.0900%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="86.8400%" y="197" width="0.0812%" height="15" fill="rgb(226,23,46)" fg:x="1069" fg:w="1"/><text x="87.0900%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.0837%" y="149" width="0.0812%" height="15" fill="rgb(208,130,44)" fg:x="1072" fg:w="1"/><text x="87.3337%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.0837%" y="133" width="0.0812%" height="15" fill="rgb(231,67,8)" fg:x="1072" fg:w="1"/><text x="87.3337%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.0837%" y="117" width="0.0812%" height="15" fill="rgb(205,183,22)" fg:x="1072" fg:w="1"/><text x="87.3337%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.0837%" y="101" width="0.0812%" height="15" fill="rgb(224,47,9)" fg:x="1072" fg:w="1"/><text x="87.3337%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="87.1649%" y="149" width="0.2437%" height="15" fill="rgb(250,183,49)" fg:x="1073" fg:w="3"/><text x="87.4149%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="87.2461%" y="133" width="0.1625%" height="15" fill="rgb(220,151,39)" fg:x="1074" fg:w="2"/><text x="87.4961%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="87.2461%" y="117" width="0.1625%" height="15" fill="rgb(220,118,20)" fg:x="1074" fg:w="2"/><text x="87.4961%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="87.2461%" y="101" width="0.1625%" height="15" fill="rgb(231,65,51)" fg:x="1074" fg:w="2"/><text x="87.4961%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.3274%" y="85" width="0.0812%" height="15" fill="rgb(253,125,37)" fg:x="1075" fg:w="1"/><text x="87.5774%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3274%" y="69" width="0.0812%" height="15" fill="rgb(232,102,6)" fg:x="1075" fg:w="1"/><text x="87.5774%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20 samples, 1.62%)</title><rect x="87.4086%" y="149" width="1.6247%" height="15" fill="rgb(251,105,13)" fg:x="1076" fg:w="20"/><text x="87.6586%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20 samples, 1.62%)</title><rect x="87.4086%" y="133" width="1.6247%" height="15" fill="rgb(222,179,29)" fg:x="1076" fg:w="20"/><text x="87.6586%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20 samples, 1.62%)</title><rect x="87.4086%" y="117" width="1.6247%" height="15" fill="rgb(229,180,53)" fg:x="1076" fg:w="20"/><text x="87.6586%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 2.11%)</title><rect x="87.0024%" y="197" width="2.1121%" height="15" fill="rgb(238,104,13)" fg:x="1071" fg:w="26"/><text x="87.2524%" y="207.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (26 samples, 2.11%)</title><rect x="87.0024%" y="181" width="2.1121%" height="15" fill="rgb(210,130,5)" fg:x="1071" fg:w="26"/><text x="87.2524%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (26 samples, 2.11%)</title><rect x="87.0024%" y="165" width="2.1121%" height="15" fill="rgb(233,87,49)" fg:x="1071" fg:w="26"/><text x="87.2524%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="89.0333%" y="149" width="0.0812%" height="15" fill="rgb(243,34,9)" fg:x="1096" fg:w="1"/><text x="89.2833%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0333%" y="133" width="0.0812%" height="15" fill="rgb(235,225,10)" fg:x="1096" fg:w="1"/><text x="89.2833%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="89.1958%" y="181" width="0.0812%" height="15" fill="rgb(212,0,30)" fg:x="1098" fg:w="1"/><text x="89.4458%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="89.1145%" y="197" width="0.3249%" height="15" fill="rgb(211,177,0)" fg:x="1097" fg:w="4"/><text x="89.3645%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="89.2770%" y="181" width="0.1625%" height="15" fill="rgb(225,220,11)" fg:x="1099" fg:w="2"/><text x="89.5270%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="89.4395%" y="197" width="0.0812%" height="15" fill="rgb(215,10,13)" fg:x="1101" fg:w="1"/><text x="89.6895%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="89.4395%" y="181" width="0.0812%" height="15" fill="rgb(240,177,14)" fg:x="1101" fg:w="1"/><text x="89.6895%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (33 samples, 2.68%)</title><rect x="86.9212%" y="213" width="2.6807%" height="15" fill="rgb(243,7,39)" fg:x="1070" fg:w="33"/><text x="87.1712%" y="223.50">re..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="89.5207%" y="197" width="0.0812%" height="15" fill="rgb(212,99,0)" fg:x="1102" fg:w="1"/><text x="89.7707%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (41 samples, 3.33%)</title><rect x="86.3526%" y="229" width="3.3306%" height="15" fill="rgb(225,162,48)" fg:x="1063" fg:w="41"/><text x="86.6026%" y="239.50">reg..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="89.6019%" y="213" width="0.0812%" height="15" fill="rgb(246,16,25)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="223.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="89.6019%" y="197" width="0.0812%" height="15" fill="rgb(220,150,2)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="89.6832%" y="229" width="0.0812%" height="15" fill="rgb(237,113,11)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="89.6832%" y="213" width="0.0812%" height="15" fill="rgb(236,70,20)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="89.6832%" y="197" width="0.0812%" height="15" fill="rgb(234,94,7)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="89.6832%" y="181" width="0.0812%" height="15" fill="rgb(250,221,0)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.6832%" y="165" width="0.0812%" height="15" fill="rgb(245,149,46)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.6832%" y="149" width="0.0812%" height="15" fill="rgb(215,37,27)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.6832%" y="133" width="0.0812%" height="15" fill="rgb(232,65,3)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (45 samples, 3.66%)</title><rect x="86.2713%" y="277" width="3.6556%" height="15" fill="rgb(214,2,16)" fg:x="1062" fg:w="45"/><text x="86.5213%" y="287.50">rege..</text></g><g><title>regex::builders::Builder::build_one_string (45 samples, 3.66%)</title><rect x="86.2713%" y="261" width="3.6556%" height="15" fill="rgb(227,131,50)" fg:x="1062" fg:w="45"/><text x="86.5213%" y="271.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (45 samples, 3.66%)</title><rect x="86.2713%" y="245" width="3.6556%" height="15" fill="rgb(247,131,45)" fg:x="1062" fg:w="45"/><text x="86.5213%" y="255.50">rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="89.7644%" y="229" width="0.1625%" height="15" fill="rgb(215,97,47)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="89.7644%" y="213" width="0.1625%" height="15" fill="rgb(233,143,12)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="89.7644%" y="197" width="0.1625%" height="15" fill="rgb(222,57,17)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="89.7644%" y="181" width="0.1625%" height="15" fill="rgb(214,119,38)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.7644%" y="165" width="0.1625%" height="15" fill="rgb(217,28,47)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.7644%" y="149" width="0.1625%" height="15" fill="rgb(231,14,52)" fg:x="1105" fg:w="2"/><text x="90.0144%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.8457%" y="133" width="0.0812%" height="15" fill="rgb(220,158,18)" fg:x="1106" fg:w="1"/><text x="90.0957%" y="143.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (54 samples, 4.39%)</title><rect x="85.8652%" y="293" width="4.3867%" height="15" fill="rgb(222,143,46)" fg:x="1057" fg:w="54"/><text x="86.1152%" y="303.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="89.9269%" y="277" width="0.3249%" height="15" fill="rgb(227,165,5)" fg:x="1107" fg:w="4"/><text x="90.1769%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="89.9269%" y="261" width="0.3249%" height="15" fill="rgb(216,222,49)" fg:x="1107" fg:w="4"/><text x="90.1769%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="89.9269%" y="245" width="0.3249%" height="15" fill="rgb(238,73,39)" fg:x="1107" fg:w="4"/><text x="90.1769%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="89.9269%" y="229" width="0.3249%" height="15" fill="rgb(252,115,9)" fg:x="1107" fg:w="4"/><text x="90.1769%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="89.9269%" y="213" width="0.3249%" height="15" fill="rgb(238,202,4)" fg:x="1107" fg:w="4"/><text x="90.1769%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="90.1706%" y="197" width="0.0812%" height="15" fill="rgb(252,153,44)" fg:x="1110" fg:w="1"/><text x="90.4206%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.2518%" y="229" width="0.0812%" height="15" fill="rgb(235,128,27)" fg:x="1111" fg:w="1"/><text x="90.5018%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.2518%" y="213" width="0.0812%" height="15" fill="rgb(221,121,47)" fg:x="1111" fg:w="1"/><text x="90.5018%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="90.2518%" y="277" width="0.1625%" height="15" fill="rgb(247,211,47)" fg:x="1111" fg:w="2"/><text x="90.5018%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="90.2518%" y="261" width="0.1625%" height="15" fill="rgb(252,47,49)" fg:x="1111" fg:w="2"/><text x="90.5018%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="90.2518%" y="245" width="0.1625%" height="15" fill="rgb(219,119,53)" fg:x="1111" fg:w="2"/><text x="90.5018%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="90.3331%" y="229" width="0.0812%" height="15" fill="rgb(243,165,53)" fg:x="1112" fg:w="1"/><text x="90.5831%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.3331%" y="213" width="0.0812%" height="15" fill="rgb(230,12,35)" fg:x="1112" fg:w="1"/><text x="90.5831%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.3331%" y="197" width="0.0812%" height="15" fill="rgb(239,57,49)" fg:x="1112" fg:w="1"/><text x="90.5831%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3331%" y="181" width="0.0812%" height="15" fill="rgb(231,154,7)" fg:x="1112" fg:w="1"/><text x="90.5831%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="90.4143%" y="277" width="0.1625%" height="15" fill="rgb(248,81,34)" fg:x="1113" fg:w="2"/><text x="90.6643%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="90.4143%" y="261" width="0.1625%" height="15" fill="rgb(247,9,5)" fg:x="1113" fg:w="2"/><text x="90.6643%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="90.4143%" y="245" width="0.1625%" height="15" fill="rgb(228,172,27)" fg:x="1113" fg:w="2"/><text x="90.6643%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="90.4143%" y="229" width="0.1625%" height="15" fill="rgb(230,57,44)" fg:x="1113" fg:w="2"/><text x="90.6643%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="90.4143%" y="213" width="0.1625%" height="15" fill="rgb(249,35,22)" fg:x="1113" fg:w="2"/><text x="90.6643%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="90.4143%" y="197" width="0.1625%" height="15" fill="rgb(250,137,27)" fg:x="1113" fg:w="2"/><text x="90.6643%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.4955%" y="181" width="0.0812%" height="15" fill="rgb(251,57,31)" fg:x="1114" fg:w="1"/><text x="90.7455%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.4955%" y="165" width="0.0812%" height="15" fill="rgb(238,60,0)" fg:x="1114" fg:w="1"/><text x="90.7455%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.4955%" y="149" width="0.0812%" height="15" fill="rgb(242,185,39)" fg:x="1114" fg:w="1"/><text x="90.7455%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="90.5768%" y="261" width="0.0812%" height="15" fill="rgb(240,63,43)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.5768%" y="245" width="0.0812%" height="15" fill="rgb(236,155,6)" fg:x="1115" fg:w="1"/><text x="90.8268%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="90.6580%" y="229" width="0.0812%" height="15" fill="rgb(215,11,29)" fg:x="1116" fg:w="1"/><text x="90.9080%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.6580%" y="213" width="0.0812%" height="15" fill="rgb(228,180,48)" fg:x="1116" fg:w="1"/><text x="90.9080%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="90.7392%" y="213" width="0.3249%" height="15" fill="rgb(241,102,12)" fg:x="1117" fg:w="4"/><text x="90.9892%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="90.7392%" y="197" width="0.3249%" height="15" fill="rgb(246,213,4)" fg:x="1117" fg:w="4"/><text x="90.9892%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="91.0642%" y="213" width="0.2437%" height="15" fill="rgb(218,134,35)" fg:x="1121" fg:w="3"/><text x="91.3142%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="91.1454%" y="197" width="0.1625%" height="15" fill="rgb(251,117,35)" fg:x="1122" fg:w="2"/><text x="91.3954%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="91.2266%" y="181" width="0.0812%" height="15" fill="rgb(206,156,45)" fg:x="1123" fg:w="1"/><text x="91.4766%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.2266%" y="165" width="0.0812%" height="15" fill="rgb(218,52,27)" fg:x="1123" fg:w="1"/><text x="91.4766%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.2266%" y="149" width="0.0812%" height="15" fill="rgb(238,83,36)" fg:x="1123" fg:w="1"/><text x="91.4766%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.2266%" y="133" width="0.0812%" height="15" fill="rgb(218,53,43)" fg:x="1123" fg:w="1"/><text x="91.4766%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="91.5516%" y="181" width="0.0812%" height="15" fill="rgb(239,54,39)" fg:x="1127" fg:w="1"/><text x="91.8016%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.5516%" y="165" width="0.0812%" height="15" fill="rgb(212,198,13)" fg:x="1127" fg:w="1"/><text x="91.8016%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="91.6328%" y="181" width="0.2437%" height="15" fill="rgb(234,54,46)" fg:x="1128" fg:w="3"/><text x="91.8828%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="91.6328%" y="165" width="0.2437%" height="15" fill="rgb(217,120,7)" fg:x="1128" fg:w="3"/><text x="91.8828%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="91.7141%" y="149" width="0.1625%" height="15" fill="rgb(246,39,15)" fg:x="1129" fg:w="2"/><text x="91.9641%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.7953%" y="133" width="0.0812%" height="15" fill="rgb(242,143,31)" fg:x="1130" fg:w="1"/><text x="92.0453%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.7953%" y="117" width="0.0812%" height="15" fill="rgb(252,60,24)" fg:x="1130" fg:w="1"/><text x="92.0453%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.81%)</title><rect x="91.3079%" y="213" width="0.8123%" height="15" fill="rgb(249,220,7)" fg:x="1124" fg:w="10"/><text x="91.5579%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.73%)</title><rect x="91.3891%" y="197" width="0.7311%" height="15" fill="rgb(236,67,13)" fg:x="1125" fg:w="9"/><text x="91.6391%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="91.8765%" y="181" width="0.2437%" height="15" fill="rgb(210,62,39)" fg:x="1131" fg:w="3"/><text x="92.1265%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="91.8765%" y="165" width="0.2437%" height="15" fill="rgb(219,122,53)" fg:x="1131" fg:w="3"/><text x="92.1265%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="91.8765%" y="149" width="0.2437%" height="15" fill="rgb(218,87,25)" fg:x="1131" fg:w="3"/><text x="92.1265%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="92.7701%" y="101" width="0.1625%" height="15" fill="rgb(234,179,48)" fg:x="1142" fg:w="2"/><text x="93.0201%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="92.9326%" y="101" width="0.1625%" height="15" fill="rgb(248,90,0)" fg:x="1144" fg:w="2"/><text x="93.1826%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.2575%" y="69" width="0.0812%" height="15" fill="rgb(207,228,37)" fg:x="1148" fg:w="1"/><text x="93.5075%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.2575%" y="53" width="0.0812%" height="15" fill="rgb(235,214,15)" fg:x="1148" fg:w="1"/><text x="93.5075%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.2575%" y="37" width="0.0812%" height="15" fill="rgb(210,144,39)" fg:x="1148" fg:w="1"/><text x="93.5075%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (7 samples, 0.57%)</title><rect x="93.0950%" y="101" width="0.5686%" height="15" fill="rgb(222,67,41)" fg:x="1146" fg:w="7"/><text x="93.3450%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="93.1763%" y="85" width="0.4874%" height="15" fill="rgb(205,35,37)" fg:x="1147" fg:w="6"/><text x="93.4263%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="93.3387%" y="69" width="0.3249%" height="15" fill="rgb(216,125,40)" fg:x="1149" fg:w="4"/><text x="93.5887%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (17 samples, 1.38%)</title><rect x="93.6637%" y="101" width="1.3810%" height="15" fill="rgb(228,227,20)" fg:x="1153" fg:w="17"/><text x="93.9137%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (17 samples, 1.38%)</title><rect x="93.6637%" y="85" width="1.3810%" height="15" fill="rgb(242,173,45)" fg:x="1153" fg:w="17"/><text x="93.9137%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.38%)</title><rect x="93.6637%" y="69" width="1.3810%" height="15" fill="rgb(215,79,24)" fg:x="1153" fg:w="17"/><text x="93.9137%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="95.0447%" y="101" width="0.0812%" height="15" fill="rgb(238,164,38)" fg:x="1170" fg:w="1"/><text x="95.2947%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.09%)</title><rect x="92.1202%" y="197" width="3.0869%" height="15" fill="rgb(245,196,38)" fg:x="1134" fg:w="38"/><text x="92.3702%" y="207.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.09%)</title><rect x="92.1202%" y="181" width="3.0869%" height="15" fill="rgb(231,217,29)" fg:x="1134" fg:w="38"/><text x="92.3702%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (38 samples, 3.09%)</title><rect x="92.1202%" y="165" width="3.0869%" height="15" fill="rgb(245,6,4)" fg:x="1134" fg:w="38"/><text x="92.3702%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 3.01%)</title><rect x="92.2015%" y="149" width="3.0057%" height="15" fill="rgb(214,76,49)" fg:x="1135" fg:w="37"/><text x="92.4515%" y="159.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (37 samples, 3.01%)</title><rect x="92.2015%" y="133" width="3.0057%" height="15" fill="rgb(205,96,12)" fg:x="1135" fg:w="37"/><text x="92.4515%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 3.01%)</title><rect x="92.2015%" y="117" width="3.0057%" height="15" fill="rgb(243,131,4)" fg:x="1135" fg:w="37"/><text x="92.4515%" y="127.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="95.1259%" y="101" width="0.0812%" height="15" fill="rgb(214,114,4)" fg:x="1171" fg:w="1"/><text x="95.3759%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1259%" y="85" width="0.0812%" height="15" fill="rgb(234,215,15)" fg:x="1171" fg:w="1"/><text x="95.3759%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1259%" y="69" width="0.0812%" height="15" fill="rgb(250,216,45)" fg:x="1171" fg:w="1"/><text x="95.3759%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1259%" y="53" width="0.0812%" height="15" fill="rgb(236,128,4)" fg:x="1171" fg:w="1"/><text x="95.3759%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="95.3696%" y="181" width="0.3249%" height="15" fill="rgb(234,50,33)" fg:x="1174" fg:w="4"/><text x="95.6196%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.5321%" y="165" width="0.1625%" height="15" fill="rgb(253,131,37)" fg:x="1176" fg:w="2"/><text x="95.7821%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.5321%" y="149" width="0.1625%" height="15" fill="rgb(218,55,27)" fg:x="1176" fg:w="2"/><text x="95.7821%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="95.5321%" y="133" width="0.1625%" height="15" fill="rgb(241,220,28)" fg:x="1176" fg:w="2"/><text x="95.7821%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="95.6946%" y="181" width="0.2437%" height="15" fill="rgb(241,90,48)" fg:x="1178" fg:w="3"/><text x="95.9446%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (66 samples, 5.36%)</title><rect x="90.7392%" y="229" width="5.3615%" height="15" fill="rgb(216,43,37)" fg:x="1117" fg:w="66"/><text x="90.9892%" y="239.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (49 samples, 3.98%)</title><rect x="92.1202%" y="213" width="3.9805%" height="15" fill="rgb(207,173,9)" fg:x="1134" fg:w="49"/><text x="92.3702%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.89%)</title><rect x="95.2071%" y="197" width="0.8936%" height="15" fill="rgb(240,126,30)" fg:x="1172" fg:w="11"/><text x="95.4571%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="95.9383%" y="181" width="0.1625%" height="15" fill="rgb(228,178,53)" fg:x="1181" fg:w="2"/><text x="96.1883%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.1820%" y="197" width="0.1625%" height="15" fill="rgb(217,33,4)" fg:x="1184" fg:w="2"/><text x="96.4320%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="96.1820%" y="181" width="0.1625%" height="15" fill="rgb(206,124,34)" fg:x="1184" fg:w="2"/><text x="96.4320%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.1820%" y="165" width="0.1625%" height="15" fill="rgb(208,122,53)" fg:x="1184" fg:w="2"/><text x="96.4320%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.1820%" y="149" width="0.1625%" height="15" fill="rgb(215,202,26)" fg:x="1184" fg:w="2"/><text x="96.4320%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.1820%" y="133" width="0.1625%" height="15" fill="rgb(232,198,31)" fg:x="1184" fg:w="2"/><text x="96.4320%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="96.1007%" y="229" width="0.3249%" height="15" fill="rgb(222,23,35)" fg:x="1183" fg:w="4"/><text x="96.3507%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="96.1007%" y="213" width="0.3249%" height="15" fill="rgb(242,27,53)" fg:x="1183" fg:w="4"/><text x="96.3507%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.3444%" y="197" width="0.0812%" height="15" fill="rgb(210,216,42)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="96.3444%" y="181" width="0.0812%" height="15" fill="rgb(234,39,38)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (77 samples, 6.26%)</title><rect x="90.2518%" y="293" width="6.2551%" height="15" fill="rgb(235,126,54)" fg:x="1111" fg:w="77"/><text x="90.5018%" y="303.50">indefini..</text></g><g><title>regex::regex::string::Regex::new (73 samples, 5.93%)</title><rect x="90.5768%" y="277" width="5.9301%" height="15" fill="rgb(235,150,33)" fg:x="1115" fg:w="73"/><text x="90.8268%" y="287.50">regex::r..</text></g><g><title>regex::builders::Builder::build_one_string (72 samples, 5.85%)</title><rect x="90.6580%" y="261" width="5.8489%" height="15" fill="rgb(249,49,53)" fg:x="1116" fg:w="72"/><text x="90.9080%" y="271.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (72 samples, 5.85%)</title><rect x="90.6580%" y="245" width="5.8489%" height="15" fill="rgb(238,60,50)" fg:x="1116" fg:w="72"/><text x="90.9080%" y="255.50">regex_a..</text></g><g><title>regex_syntax::ast::parse::ParserBuilder::build (1 samples, 0.08%)</title><rect x="96.4257%" y="229" width="0.0812%" height="15" fill="rgb(210,5,2)" fg:x="1187" fg:w="1"/><text x="96.6757%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.5069%" y="213" width="0.0812%" height="15" fill="rgb(214,207,24)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5069%" y="197" width="0.0812%" height="15" fill="rgb(228,173,2)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="96.5069%" y="261" width="0.1625%" height="15" fill="rgb(244,26,8)" fg:x="1188" fg:w="2"/><text x="96.7569%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="96.5069%" y="245" width="0.1625%" height="15" fill="rgb(249,153,35)" fg:x="1188" fg:w="2"/><text x="96.7569%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="96.5069%" y="229" width="0.1625%" height="15" fill="rgb(221,215,40)" fg:x="1188" fg:w="2"/><text x="96.7569%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="96.5881%" y="213" width="0.0812%" height="15" fill="rgb(238,106,35)" fg:x="1189" fg:w="1"/><text x="96.8381%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.6694%" y="245" width="0.0812%" height="15" fill="rgb(207,195,21)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.6694%" y="229" width="0.0812%" height="15" fill="rgb(205,43,29)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6694%" y="213" width="0.0812%" height="15" fill="rgb(236,35,21)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6694%" y="197" width="0.0812%" height="15" fill="rgb(244,74,8)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.7506%" y="213" width="0.0812%" height="15" fill="rgb(241,229,7)" fg:x="1191" fg:w="1"/><text x="97.0006%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.7506%" y="197" width="0.0812%" height="15" fill="rgb(212,223,25)" fg:x="1191" fg:w="1"/><text x="97.0006%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.7506%" y="181" width="0.0812%" height="15" fill="rgb(234,58,53)" fg:x="1191" fg:w="1"/><text x="97.0006%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.7506%" y="165" width="0.0812%" height="15" fill="rgb(244,36,1)" fg:x="1191" fg:w="1"/><text x="97.0006%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.9943%" y="197" width="0.0812%" height="15" fill="rgb(222,40,54)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.9943%" y="181" width="0.0812%" height="15" fill="rgb(210,207,39)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="97.1568%" y="149" width="0.0812%" height="15" fill="rgb(234,52,14)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1568%" y="133" width="0.0812%" height="15" fill="rgb(239,108,46)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1568%" y="117" width="0.0812%" height="15" fill="rgb(252,223,5)" fg:x="1196" fg:w="1"/><text x="97.4068%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="97.0755%" y="181" width="0.2437%" height="15" fill="rgb(227,181,11)" fg:x="1195" fg:w="3"/><text x="97.3255%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="97.1568%" y="165" width="0.1625%" height="15" fill="rgb(248,126,40)" fg:x="1196" fg:w="2"/><text x="97.4068%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.2380%" y="149" width="0.0812%" height="15" fill="rgb(243,1,18)" fg:x="1197" fg:w="1"/><text x="97.4880%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="97.2380%" y="133" width="0.0812%" height="15" fill="rgb(214,145,23)" fg:x="1197" fg:w="1"/><text x="97.4880%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3193%" y="165" width="0.0812%" height="15" fill="rgb(241,218,11)" fg:x="1198" fg:w="1"/><text x="97.5693%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4005%" y="149" width="0.0812%" height="15" fill="rgb(214,219,24)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4005%" y="133" width="0.0812%" height="15" fill="rgb(235,32,7)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.4005%" y="117" width="0.0812%" height="15" fill="rgb(227,121,28)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="97.4005%" y="165" width="0.1625%" height="15" fill="rgb(216,129,49)" fg:x="1199" fg:w="2"/><text x="97.6505%" y="175.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="97.4817%" y="149" width="0.0812%" height="15" fill="rgb(207,194,50)" fg:x="1200" fg:w="1"/><text x="97.7317%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.81%)</title><rect x="96.8318%" y="213" width="0.8123%" height="15" fill="rgb(207,4,18)" fg:x="1192" fg:w="10"/><text x="97.0818%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.57%)</title><rect x="97.0755%" y="197" width="0.5686%" height="15" fill="rgb(213,50,30)" fg:x="1195" fg:w="7"/><text x="97.3255%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="97.3193%" y="181" width="0.3249%" height="15" fill="rgb(208,77,22)" fg:x="1198" fg:w="4"/><text x="97.5693%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.5630%" y="165" width="0.0812%" height="15" fill="rgb(244,204,34)" fg:x="1201" fg:w="1"/><text x="97.8130%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5630%" y="149" width="0.0812%" height="15" fill="rgb(230,20,17)" fg:x="1201" fg:w="1"/><text x="97.8130%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5630%" y="133" width="0.0812%" height="15" fill="rgb(237,83,15)" fg:x="1201" fg:w="1"/><text x="97.8130%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5630%" y="117" width="0.0812%" height="15" fill="rgb(221,109,25)" fg:x="1201" fg:w="1"/><text x="97.8130%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="97.6442%" y="213" width="0.0812%" height="15" fill="rgb(205,194,52)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="97.6442%" y="197" width="0.0812%" height="15" fill="rgb(244,173,54)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.6442%" y="181" width="0.0812%" height="15" fill="rgb(227,181,18)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.6442%" y="165" width="0.0812%" height="15" fill="rgb(238,36,30)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (14 samples, 1.14%)</title><rect x="96.6694%" y="261" width="1.1373%" height="15" fill="rgb(254,85,0)" fg:x="1190" fg:w="14"/><text x="96.9194%" y="271.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.06%)</title><rect x="96.7506%" y="245" width="1.0561%" height="15" fill="rgb(247,63,33)" fg:x="1191" fg:w="13"/><text x="97.0006%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.06%)</title><rect x="96.7506%" y="229" width="1.0561%" height="15" fill="rgb(220,7,54)" fg:x="1191" fg:w="13"/><text x="97.0006%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.7254%" y="213" width="0.0812%" height="15" fill="rgb(238,227,21)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.7254%" y="197" width="0.0812%" height="15" fill="rgb(237,29,31)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.7254%" y="181" width="0.0812%" height="15" fill="rgb(211,21,50)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.7254%" y="165" width="0.0812%" height="15" fill="rgb(239,119,2)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.7254%" y="149" width="0.0812%" height="15" fill="rgb(250,2,39)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.7254%" y="133" width="0.0812%" height="15" fill="rgb(244,46,53)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.7254%" y="117" width="0.0812%" height="15" fill="rgb(209,21,19)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="127.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (161 samples, 13.08%)</title><rect x="85.0528%" y="373" width="13.0788%" height="15" fill="rgb(236,145,4)" fg:x="1047" fg:w="161"/><text x="85.3028%" y="383.50">&lt;&amp;kernel::model::Ent..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (152 samples, 12.35%)</title><rect x="85.7839%" y="357" width="12.3477%" height="15" fill="rgb(220,133,36)" fg:x="1056" fg:w="152"/><text x="86.0339%" y="367.50">plugins_core::look..</text></g><g><title>indefinite::indefinite (152 samples, 12.35%)</title><rect x="85.7839%" y="341" width="12.3477%" height="15" fill="rgb(244,18,3)" fg:x="1056" fg:w="152"/><text x="86.0339%" y="351.50">indefinite::indefi..</text></g><g><title>indefinite::methods::indefinite (151 samples, 12.27%)</title><rect x="85.8652%" y="325" width="12.2665%" height="15" fill="rgb(232,171,48)" fg:x="1057" fg:w="151"/><text x="86.1152%" y="335.50">indefinite::method..</text></g><g><title>indefinite::methods::apply_rules (151 samples, 12.27%)</title><rect x="85.8652%" y="309" width="12.2665%" height="15" fill="rgb(223,223,53)" fg:x="1057" fg:w="151"/><text x="86.1152%" y="319.50">indefinite::method..</text></g><g><title>indefinite::rules::other::Other::run (20 samples, 1.62%)</title><rect x="96.5069%" y="293" width="1.6247%" height="15" fill="rgb(246,92,13)" fg:x="1188" fg:w="20"/><text x="96.7569%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.62%)</title><rect x="96.5069%" y="277" width="1.6247%" height="15" fill="rgb(229,171,10)" fg:x="1188" fg:w="20"/><text x="96.7569%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="97.8067%" y="261" width="0.3249%" height="15" fill="rgb(213,131,26)" fg:x="1204" fg:w="4"/><text x="98.0567%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="97.8879%" y="245" width="0.2437%" height="15" fill="rgb(242,87,54)" fg:x="1205" fg:w="3"/><text x="98.1379%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="97.8879%" y="229" width="0.2437%" height="15" fill="rgb(237,21,35)" fg:x="1205" fg:w="3"/><text x="98.1379%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="97.8879%" y="213" width="0.2437%" height="15" fill="rgb(253,13,47)" fg:x="1205" fg:w="3"/><text x="98.1379%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="97.8879%" y="197" width="0.2437%" height="15" fill="rgb(215,122,49)" fg:x="1205" fg:w="3"/><text x="98.1379%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="97.9691%" y="181" width="0.1625%" height="15" fill="rgb(209,179,30)" fg:x="1206" fg:w="2"/><text x="98.2191%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1316%" y="357" width="0.0812%" height="15" fill="rgb(235,100,24)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1316%" y="341" width="0.0812%" height="15" fill="rgb(209,67,24)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1316%" y="325" width="0.0812%" height="15" fill="rgb(206,74,32)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1316%" y="309" width="0.0812%" height="15" fill="rgb(212,45,25)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1316%" y="293" width="0.0812%" height="15" fill="rgb(239,26,3)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1316%" y="277" width="0.0812%" height="15" fill="rgb(218,36,15)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.1316%" y="261" width="0.0812%" height="15" fill="rgb(206,108,24)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.1316%" y="245" width="0.0812%" height="15" fill="rgb(234,204,42)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.1316%" y="229" width="0.0812%" height="15" fill="rgb(229,2,11)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1316%" y="213" width="0.0812%" height="15" fill="rgb(221,20,48)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1316%" y="197" width="0.0812%" height="15" fill="rgb(244,164,10)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.1316%" y="181" width="0.0812%" height="15" fill="rgb(243,229,2)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.1316%" y="165" width="0.0812%" height="15" fill="rgb(232,131,37)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.1316%" y="149" width="0.0812%" height="15" fill="rgb(217,156,11)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.1316%" y="133" width="0.0812%" height="15" fill="rgb(239,99,48)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1316%" y="117" width="0.0812%" height="15" fill="rgb(231,209,9)" fg:x="1208" fg:w="1"/><text x="98.3816%" y="127.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.1316%" y="373" width="0.1625%" height="15" fill="rgb(254,97,27)" fg:x="1208" fg:w="2"/><text x="98.3816%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2128%" y="357" width="0.0812%" height="15" fill="rgb(223,151,38)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2128%" y="341" width="0.0812%" height="15" fill="rgb(219,206,35)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.2128%" y="325" width="0.0812%" height="15" fill="rgb(216,130,31)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.2128%" y="309" width="0.0812%" height="15" fill="rgb(251,97,34)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.2128%" y="293" width="0.0812%" height="15" fill="rgb(246,159,47)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3753%" y="213" width="0.0812%" height="15" fill="rgb(232,87,10)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3753%" y="197" width="0.0812%" height="15" fill="rgb(249,1,37)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.3753%" y="181" width="0.0812%" height="15" fill="rgb(239,135,14)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3753%" y="165" width="0.0812%" height="15" fill="rgb(253,116,46)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3753%" y="149" width="0.0812%" height="15" fill="rgb(222,217,37)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3753%" y="133" width="0.0812%" height="15" fill="rgb(252,96,8)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="143.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.3753%" y="117" width="0.0812%" height="15" fill="rgb(254,103,41)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="127.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.3753%" y="309" width="0.1625%" height="15" fill="rgb(218,213,19)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3753%" y="293" width="0.1625%" height="15" fill="rgb(253,95,21)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3753%" y="277" width="0.1625%" height="15" fill="rgb(229,26,28)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.3753%" y="261" width="0.1625%" height="15" fill="rgb(230,129,16)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3753%" y="245" width="0.1625%" height="15" fill="rgb(236,126,17)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.3753%" y="229" width="0.1625%" height="15" fill="rgb(209,33,33)" fg:x="1211" fg:w="2"/><text x="98.6253%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4565%" y="213" width="0.0812%" height="15" fill="rgb(227,85,29)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4565%" y="197" width="0.0812%" height="15" fill="rgb(241,53,46)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.4565%" y="181" width="0.0812%" height="15" fill="rgb(228,167,53)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4565%" y="165" width="0.0812%" height="15" fill="rgb(238,195,45)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="175.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (179 samples, 14.54%)</title><rect x="84.1592%" y="597" width="14.5410%" height="15" fill="rgb(252,124,45)" fg:x="1036" fg:w="179"/><text x="84.4092%" y="607.50">&lt;engine::session::Sess..</text></g><g><title>kernel::plugins::mw::apply_middleware (179 samples, 14.54%)</title><rect x="84.1592%" y="581" width="14.5410%" height="15" fill="rgb(251,38,35)" fg:x="1036" fg:w="179"/><text x="84.4092%" y="591.50">kernel::plugins::mw::a..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (179 samples, 14.54%)</title><rect x="84.1592%" y="565" width="14.5410%" height="15" fill="rgb(227,33,2)" fg:x="1036" fg:w="179"/><text x="84.4092%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (179 samples, 14.54%)</title><rect x="84.1592%" y="549" width="14.5410%" height="15" fill="rgb(223,157,46)" fg:x="1036" fg:w="179"/><text x="84.4092%" y="559.50">&lt;engine::session::Expa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (171 samples, 13.89%)</title><rect x="84.8091%" y="533" width="13.8911%" height="15" fill="rgb(222,78,41)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="543.50">kernel::plugins::mw::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (171 samples, 13.89%)</title><rect x="84.8091%" y="517" width="13.8911%" height="15" fill="rgb(248,176,11)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="527.50">&lt;plugins_dynlib::Dyna..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (171 samples, 13.89%)</title><rect x="84.8091%" y="501" width="13.8911%" height="15" fill="rgb(241,221,18)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="511.50">kernel::plugins::mw::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (171 samples, 13.89%)</title><rect x="84.8091%" y="485" width="13.8911%" height="15" fill="rgb(218,85,22)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="495.50">core::ops::function::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (171 samples, 13.89%)</title><rect x="84.8091%" y="469" width="13.8911%" height="15" fill="rgb(222,223,7)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="479.50">kernel::plugins::mw::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (171 samples, 13.89%)</title><rect x="84.8091%" y="453" width="13.8911%" height="15" fill="rgb(254,59,39)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="463.50">core::ops::function::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (171 samples, 13.89%)</title><rect x="84.8091%" y="437" width="13.8911%" height="15" fill="rgb(247,100,27)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="447.50">&lt;alloc::boxed::Box&lt;F,..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (171 samples, 13.89%)</title><rect x="84.8091%" y="421" width="13.8911%" height="15" fill="rgb(237,207,10)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="431.50">&lt;engine::session::sta..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (171 samples, 13.89%)</title><rect x="84.8091%" y="405" width="13.8911%" height="15" fill="rgb(220,121,28)" fg:x="1044" fg:w="171"/><text x="85.0591%" y="415.50">&lt;plugins_core::lookin..</text></g><g><title>plugins_core::looking::model::new_area_observation (168 samples, 13.65%)</title><rect x="85.0528%" y="389" width="13.6474%" height="15" fill="rgb(213,223,20)" fg:x="1047" fg:w="168"/><text x="85.3028%" y="399.50">plugins_core::looking..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.41%)</title><rect x="98.2941%" y="373" width="0.4062%" height="15" fill="rgb(205,121,27)" fg:x="1210" fg:w="5"/><text x="98.5441%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.41%)</title><rect x="98.2941%" y="357" width="0.4062%" height="15" fill="rgb(253,24,53)" fg:x="1210" fg:w="5"/><text x="98.5441%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.41%)</title><rect x="98.2941%" y="341" width="0.4062%" height="15" fill="rgb(224,224,47)" fg:x="1210" fg:w="5"/><text x="98.5441%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="98.3753%" y="325" width="0.3249%" height="15" fill="rgb(250,125,36)" fg:x="1211" fg:w="4"/><text x="98.6253%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.5378%" y="309" width="0.1625%" height="15" fill="rgb(240,144,38)" fg:x="1213" fg:w="2"/><text x="98.7878%" y="319.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.5378%" y="293" width="0.1625%" height="15" fill="rgb(250,15,50)" fg:x="1213" fg:w="2"/><text x="98.7878%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.5378%" y="277" width="0.1625%" height="15" fill="rgb(210,24,26)" fg:x="1213" fg:w="2"/><text x="98.7878%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.5378%" y="261" width="0.1625%" height="15" fill="rgb(234,53,53)" fg:x="1213" fg:w="2"/><text x="98.7878%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.5378%" y="245" width="0.1625%" height="15" fill="rgb(208,108,28)" fg:x="1213" fg:w="2"/><text x="98.7878%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.5378%" y="229" width="0.1625%" height="15" fill="rgb(227,143,7)" fg:x="1213" fg:w="2"/><text x="98.7878%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6190%" y="213" width="0.0812%" height="15" fill="rgb(238,189,38)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6190%" y="197" width="0.0812%" height="15" fill="rgb(222,69,15)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6190%" y="181" width="0.0812%" height="15" fill="rgb(213,169,7)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6190%" y="165" width="0.0812%" height="15" fill="rgb(251,219,4)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6190%" y="149" width="0.0812%" height="15" fill="rgb(241,55,40)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6190%" y="133" width="0.0812%" height="15" fill="rgb(243,57,30)" fg:x="1214" fg:w="1"/><text x="98.8690%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7002%" y="549" width="0.0812%" height="15" fill="rgb(234,50,30)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7002%" y="533" width="0.0812%" height="15" fill="rgb(239,23,42)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7002%" y="517" width="0.0812%" height="15" fill="rgb(217,38,19)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7002%" y="501" width="0.0812%" height="15" fill="rgb(215,179,16)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7002%" y="485" width="0.0812%" height="15" fill="rgb(254,21,37)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7002%" y="469" width="0.0812%" height="15" fill="rgb(219,207,48)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7002%" y="453" width="0.0812%" height="15" fill="rgb(227,225,41)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7002%" y="437" width="0.0812%" height="15" fill="rgb(223,130,1)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7002%" y="421" width="0.0812%" height="15" fill="rgb(249,54,42)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7002%" y="405" width="0.0812%" height="15" fill="rgb(248,69,25)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7002%" y="389" width="0.0812%" height="15" fill="rgb(234,21,32)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.7002%" y="373" width="0.0812%" height="15" fill="rgb(252,136,6)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.7002%" y="357" width="0.0812%" height="15" fill="rgb(245,87,12)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.7002%" y="341" width="0.0812%" height="15" fill="rgb(208,12,15)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.7002%" y="325" width="0.0812%" height="15" fill="rgb(250,98,2)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7002%" y="309" width="0.0812%" height="15" fill="rgb(205,213,15)" fg:x="1215" fg:w="1"/><text x="98.9502%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7815%" y="549" width="0.0812%" height="15" fill="rgb(248,192,44)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.7815%" y="533" width="0.0812%" height="15" fill="rgb(221,89,17)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.7815%" y="517" width="0.0812%" height="15" fill="rgb(209,55,3)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7815%" y="501" width="0.0812%" height="15" fill="rgb(247,23,45)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.7815%" y="485" width="0.0812%" height="15" fill="rgb(235,152,23)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.7815%" y="469" width="0.0812%" height="15" fill="rgb(244,63,13)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7815%" y="453" width="0.0812%" height="15" fill="rgb(227,30,37)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.7815%" y="437" width="0.0812%" height="15" fill="rgb(224,49,42)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.7815%" y="421" width="0.0812%" height="15" fill="rgb(218,129,5)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7815%" y="405" width="0.0812%" height="15" fill="rgb(240,199,54)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7815%" y="389" width="0.0812%" height="15" fill="rgb(234,31,13)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.7815%" y="373" width="0.0812%" height="15" fill="rgb(219,73,54)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.7815%" y="357" width="0.0812%" height="15" fill="rgb(251,162,10)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.7815%" y="341" width="0.0812%" height="15" fill="rgb(240,138,47)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="351.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.7815%" y="325" width="0.0812%" height="15" fill="rgb(216,138,26)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.7815%" y="309" width="0.0812%" height="15" fill="rgb(243,17,35)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="319.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="98.7815%" y="293" width="0.0812%" height="15" fill="rgb(241,60,18)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="98.7815%" y="277" width="0.0812%" height="15" fill="rgb(234,2,44)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="98.7815%" y="261" width="0.0812%" height="15" fill="rgb(225,225,33)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7815%" y="245" width="0.0812%" height="15" fill="rgb(234,50,31)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="98.7815%" y="229" width="0.0812%" height="15" fill="rgb(249,6,25)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="98.7815%" y="213" width="0.0812%" height="15" fill="rgb(241,5,17)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="223.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="98.7815%" y="197" width="0.0812%" height="15" fill="rgb(207,116,10)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="207.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.41%)</title><rect x="98.7002%" y="581" width="0.4062%" height="15" fill="rgb(222,128,18)" fg:x="1215" fg:w="5"/><text x="98.9502%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="98.7002%" y="565" width="0.4062%" height="15" fill="rgb(229,109,25)" fg:x="1215" fg:w="5"/><text x="98.9502%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.8627%" y="549" width="0.2437%" height="15" fill="rgb(222,102,25)" fg:x="1217" fg:w="3"/><text x="99.1127%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.8627%" y="533" width="0.2437%" height="15" fill="rgb(239,211,5)" fg:x="1217" fg:w="3"/><text x="99.1127%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.9439%" y="517" width="0.1625%" height="15" fill="rgb(223,136,26)" fg:x="1218" fg:w="2"/><text x="99.1939%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="98.9439%" y="501" width="0.1625%" height="15" fill="rgb(227,30,15)" fg:x="1218" fg:w="2"/><text x="99.1939%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="98.9439%" y="485" width="0.1625%" height="15" fill="rgb(247,76,4)" fg:x="1218" fg:w="2"/><text x="99.1939%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0252%" y="469" width="0.0812%" height="15" fill="rgb(245,38,48)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1064%" y="565" width="0.0812%" height="15" fill="rgb(210,220,14)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1064%" y="549" width="0.0812%" height="15" fill="rgb(224,60,51)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1064%" y="533" width="0.0812%" height="15" fill="rgb(212,133,49)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1064%" y="517" width="0.0812%" height="15" fill="rgb(231,39,22)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1064%" y="501" width="0.0812%" height="15" fill="rgb(236,173,22)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1064%" y="485" width="0.0812%" height="15" fill="rgb(210,70,0)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1064%" y="469" width="0.0812%" height="15" fill="rgb(215,170,11)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1064%" y="453" width="0.0812%" height="15" fill="rgb(220,154,28)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1064%" y="437" width="0.0812%" height="15" fill="rgb(240,160,41)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1064%" y="421" width="0.0812%" height="15" fill="rgb(243,215,41)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1064%" y="405" width="0.0812%" height="15" fill="rgb(214,208,31)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1064%" y="389" width="0.0812%" height="15" fill="rgb(247,57,22)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1064%" y="373" width="0.0812%" height="15" fill="rgb(228,73,52)" fg:x="1220" fg:w="1"/><text x="99.3564%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.1877%" y="469" width="0.2437%" height="15" fill="rgb(252,60,9)" fg:x="1221" fg:w="3"/><text x="99.4377%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2689%" y="453" width="0.1625%" height="15" fill="rgb(233,9,51)" fg:x="1222" fg:w="2"/><text x="99.5189%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2689%" y="437" width="0.1625%" height="15" fill="rgb(223,67,14)" fg:x="1222" fg:w="2"/><text x="99.5189%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3501%" y="421" width="0.0812%" height="15" fill="rgb(222,86,2)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3501%" y="405" width="0.0812%" height="15" fill="rgb(243,58,54)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3501%" y="389" width="0.0812%" height="15" fill="rgb(210,200,39)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.81%)</title><rect x="98.7002%" y="597" width="0.8123%" height="15" fill="rgb(238,135,9)" fg:x="1215" fg:w="10"/><text x="98.9502%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="99.1064%" y="581" width="0.4062%" height="15" fill="rgb(232,179,7)" fg:x="1220" fg:w="5"/><text x="99.3564%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="99.1877%" y="565" width="0.3249%" height="15" fill="rgb(245,65,41)" fg:x="1221" fg:w="4"/><text x="99.4377%" y="575.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="99.1877%" y="549" width="0.3249%" height="15" fill="rgb(227,43,8)" fg:x="1221" fg:w="4"/><text x="99.4377%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.1877%" y="533" width="0.3249%" height="15" fill="rgb(235,91,14)" fg:x="1221" fg:w="4"/><text x="99.4377%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.1877%" y="517" width="0.3249%" height="15" fill="rgb(235,219,31)" fg:x="1221" fg:w="4"/><text x="99.4377%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.1877%" y="501" width="0.3249%" height="15" fill="rgb(227,121,25)" fg:x="1221" fg:w="4"/><text x="99.4377%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.1877%" y="485" width="0.3249%" height="15" fill="rgb(254,129,24)" fg:x="1221" fg:w="4"/><text x="99.4377%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.4314%" y="469" width="0.0812%" height="15" fill="rgb(226,144,49)" fg:x="1224" fg:w="1"/><text x="99.6814%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4314%" y="453" width="0.0812%" height="15" fill="rgb(214,187,32)" fg:x="1224" fg:w="1"/><text x="99.6814%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.5126%" y="549" width="0.0812%" height="15" fill="rgb(243,129,46)" fg:x="1225" fg:w="1"/><text x="99.7626%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5126%" y="533" width="0.0812%" height="15" fill="rgb(221,185,35)" fg:x="1225" fg:w="1"/><text x="99.7626%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.5126%" y="517" width="0.0812%" height="15" fill="rgb(205,0,32)" fg:x="1225" fg:w="1"/><text x="99.7626%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.5126%" y="501" width="0.0812%" height="15" fill="rgb(229,179,12)" fg:x="1225" fg:w="1"/><text x="99.7626%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.5126%" y="485" width="0.0812%" height="15" fill="rgb(252,107,19)" fg:x="1225" fg:w="1"/><text x="99.7626%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5938%" y="549" width="0.0812%" height="15" fill="rgb(220,95,27)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6751%" y="453" width="0.0812%" height="15" fill="rgb(240,113,40)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6751%" y="437" width="0.0812%" height="15" fill="rgb(208,4,43)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6751%" y="421" width="0.0812%" height="15" fill="rgb(247,189,30)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6751%" y="405" width="0.0812%" height="15" fill="rgb(231,157,17)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.6751%" y="389" width="0.0812%" height="15" fill="rgb(224,139,6)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6751%" y="373" width="0.0812%" height="15" fill="rgb(223,83,16)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.6751%" y="549" width="0.1625%" height="15" fill="rgb(232,211,20)" fg:x="1227" fg:w="2"/><text x="99.9251%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6751%" y="533" width="0.1625%" height="15" fill="rgb(225,203,35)" fg:x="1227" fg:w="2"/><text x="99.9251%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6751%" y="517" width="0.1625%" height="15" fill="rgb(215,211,44)" fg:x="1227" fg:w="2"/><text x="99.9251%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6751%" y="501" width="0.1625%" height="15" fill="rgb(248,213,26)" fg:x="1227" fg:w="2"/><text x="99.9251%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6751%" y="485" width="0.1625%" height="15" fill="rgb(214,23,52)" fg:x="1227" fg:w="2"/><text x="99.9251%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6751%" y="469" width="0.1625%" height="15" fill="rgb(225,173,50)" fg:x="1227" fg:w="2"/><text x="99.9251%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7563%" y="453" width="0.0812%" height="15" fill="rgb(206,150,22)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7563%" y="437" width="0.0812%" height="15" fill="rgb(239,64,23)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7563%" y="421" width="0.0812%" height="15" fill="rgb(242,50,38)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.7563%" y="405" width="0.0812%" height="15" fill="rgb(217,91,15)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7563%" y="389" width="0.0812%" height="15" fill="rgb(230,172,6)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="399.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (194 samples, 15.76%)</title><rect x="84.1592%" y="629" width="15.7595%" height="15" fill="rgb(221,98,26)" fg:x="1036" fg:w="194"/><text x="84.4092%" y="639.50">engine::session::Session..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (194 samples, 15.76%)</title><rect x="84.1592%" y="613" width="15.7595%" height="15" fill="rgb(227,210,45)" fg:x="1036" fg:w="194"/><text x="84.4092%" y="623.50">engine::session::Session..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.41%)</title><rect x="99.5126%" y="597" width="0.4062%" height="15" fill="rgb(206,8,30)" fg:x="1225" fg:w="5"/><text x="99.7626%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.41%)</title><rect x="99.5126%" y="581" width="0.4062%" height="15" fill="rgb(241,219,17)" fg:x="1225" fg:w="5"/><text x="99.7626%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="99.5126%" y="565" width="0.4062%" height="15" fill="rgb(247,121,29)" fg:x="1225" fg:w="5"/><text x="99.7626%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8375%" y="549" width="0.0812%" height="15" fill="rgb(219,169,49)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="559.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8375%" y="533" width="0.0812%" height="15" fill="rgb(253,49,49)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="517" width="0.0812%" height="15" fill="rgb(217,178,3)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="501" width="0.0812%" height="15" fill="rgb(234,73,37)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="485" width="0.0812%" height="15" fill="rgb(250,98,22)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="469" width="0.0812%" height="15" fill="rgb(220,108,37)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="453" width="0.0812%" height="15" fill="rgb(225,168,10)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="437" width="0.0812%" height="15" fill="rgb(247,215,21)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="421" width="0.0812%" height="15" fill="rgb(253,189,31)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="405" width="0.0812%" height="15" fill="rgb(241,54,22)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="389" width="0.0812%" height="15" fill="rgb(211,87,4)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="373" width="0.0812%" height="15" fill="rgb(245,112,24)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="383.50"></text></g><g><title>all (1,231 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(235,190,41)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="991.50"></text></g><g><title>simple-605d0d2e (1,231 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(214,89,8)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="975.50">simple-605d0d2e</text></g><g><title>_start (1,231 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(249,155,35)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="959.50">_start</text></g><g><title>__libc_start_main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(249,88,26)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="943.50">__libc_start_main</text></g><g><title>main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(232,56,8)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (1,231 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(240,95,3)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,231 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(222,44,28)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,231 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(234,16,30)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,231 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(223,26,17)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,231 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(239,187,47)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="847.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,231 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(247,102,50)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,231 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(231,216,22)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,231 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(216,201,26)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,231 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(214,186,23)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,231 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(235,184,4)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="767.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,231 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(244,46,17)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(248,74,46)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="735.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,231 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(243,79,5)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="719.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,231 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(213,148,1)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="703.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (322 samples, 26.16%)</title><rect x="73.8424%" y="677" width="26.1576%" height="15" fill="rgb(221,30,0)" fg:x="909" fg:w="322"/><text x="74.0924%" y="687.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cr..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (322 samples, 26.16%)</title><rect x="73.8424%" y="661" width="26.1576%" height="15" fill="rgb(207,85,29)" fg:x="909" fg:w="322"/><text x="74.0924%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (322 samples, 26.16%)</title><rect x="73.8424%" y="645" width="26.1576%" height="15" fill="rgb(239,31,46)" fg:x="909" fg:w="322"/><text x="74.0924%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9188%" y="629" width="0.0812%" height="15" fill="rgb(219,6,1)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.9188%" y="613" width="0.0812%" height="15" fill="rgb(229,90,29)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.9188%" y="597" width="0.0812%" height="15" fill="rgb(242,201,42)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.9188%" y="581" width="0.0812%" height="15" fill="rgb(243,80,54)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="591.50"></text></g></svg></svg>