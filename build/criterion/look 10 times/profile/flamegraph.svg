<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1252"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2396%" y="693" width="0.0799%" height="15" fill="rgb(253,48,26)" fg:x="3" fg:w="1"/><text x="0.4896%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2396%" y="677" width="0.0799%" height="15" fill="rgb(205,223,31)" fg:x="3" fg:w="1"/><text x="0.4896%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.3195%" y="661" width="0.3195%" height="15" fill="rgb(221,41,32)" fg:x="4" fg:w="4"/><text x="0.5695%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.32%)</title><rect x="0.3195%" y="645" width="0.3195%" height="15" fill="rgb(213,158,31)" fg:x="4" fg:w="4"/><text x="0.5695%" y="655.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.3994%" y="629" width="0.2396%" height="15" fill="rgb(245,126,43)" fg:x="5" fg:w="3"/><text x="0.6494%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="0.3195%" y="693" width="0.3994%" height="15" fill="rgb(227,7,22)" fg:x="4" fg:w="5"/><text x="0.5695%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.3195%" y="677" width="0.3994%" height="15" fill="rgb(252,90,44)" fg:x="4" fg:w="5"/><text x="0.5695%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rune::RunePlugin&gt; (1 samples, 0.08%)</title><rect x="0.6390%" y="661" width="0.0799%" height="15" fill="rgb(253,91,0)" fg:x="8" fg:w="1"/><text x="0.8890%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8786%" y="613" width="0.0799%" height="15" fill="rgb(252,175,49)" fg:x="11" fg:w="1"/><text x="1.1286%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.0383%" y="581" width="0.1597%" height="15" fill="rgb(246,150,1)" fg:x="13" fg:w="2"/><text x="1.2883%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1981%" y="581" width="0.0799%" height="15" fill="rgb(241,192,25)" fg:x="15" fg:w="1"/><text x="1.4481%" y="591.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.2780%" y="549" width="0.2396%" height="15" fill="rgb(239,187,11)" fg:x="16" fg:w="3"/><text x="1.5280%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="0.7987%" y="629" width="0.7987%" height="15" fill="rgb(218,202,51)" fg:x="10" fg:w="10"/><text x="1.0487%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (8 samples, 0.64%)</title><rect x="0.9585%" y="613" width="0.6390%" height="15" fill="rgb(225,176,8)" fg:x="12" fg:w="8"/><text x="1.2085%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="0.9585%" y="597" width="0.6390%" height="15" fill="rgb(219,122,41)" fg:x="12" fg:w="8"/><text x="1.2085%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.2780%" y="581" width="0.3195%" height="15" fill="rgb(248,140,20)" fg:x="16" fg:w="4"/><text x="1.5280%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.2780%" y="565" width="0.3195%" height="15" fill="rgb(245,41,37)" fg:x="16" fg:w="4"/><text x="1.5280%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5176%" y="549" width="0.0799%" height="15" fill="rgb(235,82,39)" fg:x="19" fg:w="1"/><text x="1.7676%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5176%" y="533" width="0.0799%" height="15" fill="rgb(230,108,42)" fg:x="19" fg:w="1"/><text x="1.7676%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5974%" y="629" width="0.0799%" height="15" fill="rgb(215,150,50)" fg:x="20" fg:w="1"/><text x="1.8474%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.8371%" y="613" width="0.1597%" height="15" fill="rgb(233,212,5)" fg:x="23" fg:w="2"/><text x="2.0871%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.9968%" y="597" width="0.0799%" height="15" fill="rgb(245,80,22)" fg:x="25" fg:w="1"/><text x="2.2468%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="2.1565%" y="565" width="0.0799%" height="15" fill="rgb(238,129,16)" fg:x="27" fg:w="1"/><text x="2.4065%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.1565%" y="549" width="0.0799%" height="15" fill="rgb(240,19,0)" fg:x="27" fg:w="1"/><text x="2.4065%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.1565%" y="533" width="0.0799%" height="15" fill="rgb(232,42,35)" fg:x="27" fg:w="1"/><text x="2.4065%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.1565%" y="517" width="0.0799%" height="15" fill="rgb(223,130,24)" fg:x="27" fg:w="1"/><text x="2.4065%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1565%" y="501" width="0.0799%" height="15" fill="rgb(237,16,22)" fg:x="27" fg:w="1"/><text x="2.4065%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.68%)</title><rect x="0.7987%" y="645" width="1.6773%" height="15" fill="rgb(248,192,20)" fg:x="10" fg:w="21"/><text x="1.0487%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.80%)</title><rect x="1.6773%" y="629" width="0.7987%" height="15" fill="rgb(233,167,2)" fg:x="21" fg:w="10"/><text x="1.9273%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.9968%" y="613" width="0.4792%" height="15" fill="rgb(252,71,44)" fg:x="25" fg:w="6"/><text x="2.2468%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="2.0767%" y="597" width="0.3994%" height="15" fill="rgb(238,37,47)" fg:x="26" fg:w="5"/><text x="2.3267%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="2.1565%" y="581" width="0.3195%" height="15" fill="rgb(214,202,54)" fg:x="27" fg:w="4"/><text x="2.4065%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.2364%" y="565" width="0.2396%" height="15" fill="rgb(254,165,40)" fg:x="28" fg:w="3"/><text x="2.4864%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3962%" y="549" width="0.0799%" height="15" fill="rgb(246,173,38)" fg:x="30" fg:w="1"/><text x="2.6462%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 1.92%)</title><rect x="0.7188%" y="677" width="1.9169%" height="15" fill="rgb(215,3,27)" fg:x="9" fg:w="24"/><text x="0.9688%" y="687.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (24 samples, 1.92%)</title><rect x="0.7188%" y="661" width="1.9169%" height="15" fill="rgb(239,169,51)" fg:x="9" fg:w="24"/><text x="0.9688%" y="671.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.4760%" y="645" width="0.1597%" height="15" fill="rgb(212,5,25)" fg:x="31" fg:w="2"/><text x="2.7260%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 2.72%)</title><rect x="0.0000%" y="709" width="2.7157%" height="15" fill="rgb(243,45,17)" fg:x="0" fg:w="34"/><text x="0.2500%" y="719.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (25 samples, 2.00%)</title><rect x="0.7188%" y="693" width="1.9968%" height="15" fill="rgb(242,97,9)" fg:x="9" fg:w="25"/><text x="0.9688%" y="703.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6358%" y="677" width="0.0799%" height="15" fill="rgb(228,71,31)" fg:x="33" fg:w="1"/><text x="2.8858%" y="687.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.7157%" y="661" width="0.0799%" height="15" fill="rgb(252,184,16)" fg:x="34" fg:w="1"/><text x="2.9657%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.7157%" y="645" width="0.0799%" height="15" fill="rgb(236,169,46)" fg:x="34" fg:w="1"/><text x="2.9657%" y="655.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (3 samples, 0.24%)</title><rect x="3.5942%" y="581" width="0.2396%" height="15" fill="rgb(207,17,47)" fg:x="45" fg:w="3"/><text x="3.8442%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (3 samples, 0.24%)</title><rect x="3.5942%" y="565" width="0.2396%" height="15" fill="rgb(206,201,28)" fg:x="45" fg:w="3"/><text x="3.8442%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="3.7540%" y="549" width="0.0799%" height="15" fill="rgb(224,184,23)" fg:x="47" fg:w="1"/><text x="4.0040%" y="559.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="3.8339%" y="581" width="0.1597%" height="15" fill="rgb(208,139,48)" fg:x="48" fg:w="2"/><text x="4.0839%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.9137%" y="565" width="0.0799%" height="15" fill="rgb(208,130,10)" fg:x="49" fg:w="1"/><text x="4.1637%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9137%" y="549" width="0.0799%" height="15" fill="rgb(211,213,45)" fg:x="49" fg:w="1"/><text x="4.1637%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9137%" y="533" width="0.0799%" height="15" fill="rgb(235,100,30)" fg:x="49" fg:w="1"/><text x="4.1637%" y="543.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (7 samples, 0.56%)</title><rect x="3.5144%" y="613" width="0.5591%" height="15" fill="rgb(206,144,31)" fg:x="44" fg:w="7"/><text x="3.7644%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (6 samples, 0.48%)</title><rect x="3.5942%" y="597" width="0.4792%" height="15" fill="rgb(224,200,26)" fg:x="45" fg:w="6"/><text x="3.8442%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.9936%" y="581" width="0.0799%" height="15" fill="rgb(247,104,53)" fg:x="50" fg:w="1"/><text x="4.2436%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.0735%" y="581" width="0.0799%" height="15" fill="rgb(220,14,17)" fg:x="51" fg:w="1"/><text x="4.3235%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.0735%" y="565" width="0.0799%" height="15" fill="rgb(230,140,40)" fg:x="51" fg:w="1"/><text x="4.3235%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.0735%" y="549" width="0.0799%" height="15" fill="rgb(229,2,41)" fg:x="51" fg:w="1"/><text x="4.3235%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0735%" y="533" width="0.0799%" height="15" fill="rgb(232,89,16)" fg:x="51" fg:w="1"/><text x="4.3235%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0735%" y="517" width="0.0799%" height="15" fill="rgb(247,59,52)" fg:x="51" fg:w="1"/><text x="4.3235%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.1534%" y="581" width="0.0799%" height="15" fill="rgb(226,110,21)" fg:x="52" fg:w="1"/><text x="4.4034%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="4.2332%" y="581" width="0.0799%" height="15" fill="rgb(224,176,43)" fg:x="53" fg:w="1"/><text x="4.4832%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2332%" y="565" width="0.0799%" height="15" fill="rgb(221,73,6)" fg:x="53" fg:w="1"/><text x="4.4832%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="4.0735%" y="613" width="0.3195%" height="15" fill="rgb(232,78,19)" fg:x="51" fg:w="4"/><text x="4.3235%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="4.0735%" y="597" width="0.3195%" height="15" fill="rgb(233,112,48)" fg:x="51" fg:w="4"/><text x="4.3235%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.3131%" y="581" width="0.0799%" height="15" fill="rgb(243,131,47)" fg:x="54" fg:w="1"/><text x="4.5631%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="4.3930%" y="613" width="0.1597%" height="15" fill="rgb(226,51,1)" fg:x="55" fg:w="2"/><text x="4.6430%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="4.3930%" y="597" width="0.1597%" height="15" fill="rgb(247,58,7)" fg:x="55" fg:w="2"/><text x="4.6430%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="4.4728%" y="581" width="0.0799%" height="15" fill="rgb(209,7,32)" fg:x="56" fg:w="1"/><text x="4.7228%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="4.7125%" y="581" width="0.1597%" height="15" fill="rgb(209,39,41)" fg:x="59" fg:w="2"/><text x="4.9625%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.7923%" y="565" width="0.0799%" height="15" fill="rgb(226,182,46)" fg:x="60" fg:w="1"/><text x="5.0423%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7923%" y="549" width="0.0799%" height="15" fill="rgb(230,219,10)" fg:x="60" fg:w="1"/><text x="5.0423%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="4.8722%" y="581" width="0.0799%" height="15" fill="rgb(227,175,30)" fg:x="61" fg:w="1"/><text x="5.1222%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="4.8722%" y="565" width="0.0799%" height="15" fill="rgb(217,2,50)" fg:x="61" fg:w="1"/><text x="5.1222%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.8722%" y="549" width="0.0799%" height="15" fill="rgb(229,160,0)" fg:x="61" fg:w="1"/><text x="5.1222%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.9521%" y="581" width="0.0799%" height="15" fill="rgb(207,78,37)" fg:x="62" fg:w="1"/><text x="5.2021%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.9521%" y="565" width="0.0799%" height="15" fill="rgb(225,57,0)" fg:x="62" fg:w="1"/><text x="5.2021%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.9521%" y="549" width="0.0799%" height="15" fill="rgb(232,154,2)" fg:x="62" fg:w="1"/><text x="5.2021%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (8 samples, 0.64%)</title><rect x="4.5527%" y="613" width="0.6390%" height="15" fill="rgb(241,212,25)" fg:x="57" fg:w="8"/><text x="4.8027%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (8 samples, 0.64%)</title><rect x="4.5527%" y="597" width="0.6390%" height="15" fill="rgb(226,69,20)" fg:x="57" fg:w="8"/><text x="4.8027%" y="607.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="5.0319%" y="581" width="0.1597%" height="15" fill="rgb(247,184,54)" fg:x="63" fg:w="2"/><text x="5.2819%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.1118%" y="565" width="0.0799%" height="15" fill="rgb(210,145,0)" fg:x="64" fg:w="1"/><text x="5.3618%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="5.1917%" y="613" width="0.2396%" height="15" fill="rgb(253,82,12)" fg:x="65" fg:w="3"/><text x="5.4417%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="5.1917%" y="597" width="0.2396%" height="15" fill="rgb(245,42,11)" fg:x="65" fg:w="3"/><text x="5.4417%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="5.2716%" y="581" width="0.1597%" height="15" fill="rgb(219,147,32)" fg:x="66" fg:w="2"/><text x="5.5216%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="5.2716%" y="565" width="0.1597%" height="15" fill="rgb(246,12,7)" fg:x="66" fg:w="2"/><text x="5.5216%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4313%" y="613" width="0.0799%" height="15" fill="rgb(243,50,9)" fg:x="68" fg:w="1"/><text x="5.6813%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (33 samples, 2.64%)</title><rect x="2.9553%" y="629" width="2.6358%" height="15" fill="rgb(219,149,6)" fg:x="37" fg:w="33"/><text x="3.2053%" y="639.50">&lt;h..</text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.5112%" y="613" width="0.0799%" height="15" fill="rgb(241,51,42)" fg:x="69" fg:w="1"/><text x="5.7612%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="5.5112%" y="597" width="0.0799%" height="15" fill="rgb(226,128,27)" fg:x="69" fg:w="1"/><text x="5.7612%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.5911%" y="613" width="0.0799%" height="15" fill="rgb(244,144,4)" fg:x="70" fg:w="1"/><text x="5.8411%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.5911%" y="597" width="0.0799%" height="15" fill="rgb(221,4,13)" fg:x="70" fg:w="1"/><text x="5.8411%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5911%" y="581" width="0.0799%" height="15" fill="rgb(208,170,28)" fg:x="70" fg:w="1"/><text x="5.8411%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5911%" y="565" width="0.0799%" height="15" fill="rgb(226,131,13)" fg:x="70" fg:w="1"/><text x="5.8411%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5911%" y="549" width="0.0799%" height="15" fill="rgb(215,72,41)" fg:x="70" fg:w="1"/><text x="5.8411%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="5.5911%" y="533" width="0.0799%" height="15" fill="rgb(243,108,20)" fg:x="70" fg:w="1"/><text x="5.8411%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="5.5911%" y="517" width="0.0799%" height="15" fill="rgb(230,189,17)" fg:x="70" fg:w="1"/><text x="5.8411%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="5.5911%" y="501" width="0.0799%" height="15" fill="rgb(220,50,17)" fg:x="70" fg:w="1"/><text x="5.8411%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="5.5911%" y="485" width="0.0799%" height="15" fill="rgb(248,152,48)" fg:x="70" fg:w="1"/><text x="5.8411%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.5911%" y="469" width="0.0799%" height="15" fill="rgb(244,91,11)" fg:x="70" fg:w="1"/><text x="5.8411%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.5911%" y="453" width="0.0799%" height="15" fill="rgb(220,157,5)" fg:x="70" fg:w="1"/><text x="5.8411%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5911%" y="437" width="0.0799%" height="15" fill="rgb(253,137,8)" fg:x="70" fg:w="1"/><text x="5.8411%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="5.5911%" y="421" width="0.0799%" height="15" fill="rgb(217,137,51)" fg:x="70" fg:w="1"/><text x="5.8411%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5911%" y="405" width="0.0799%" height="15" fill="rgb(218,209,53)" fg:x="70" fg:w="1"/><text x="5.8411%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="5.5911%" y="389" width="0.0799%" height="15" fill="rgb(249,137,25)" fg:x="70" fg:w="1"/><text x="5.8411%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="5.5911%" y="373" width="0.0799%" height="15" fill="rgb(239,155,26)" fg:x="70" fg:w="1"/><text x="5.8411%" y="383.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="5.5911%" y="357" width="0.0799%" height="15" fill="rgb(227,85,46)" fg:x="70" fg:w="1"/><text x="5.8411%" y="367.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="5.5911%" y="341" width="0.0799%" height="15" fill="rgb(251,107,43)" fg:x="70" fg:w="1"/><text x="5.8411%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="5.5911%" y="325" width="0.0799%" height="15" fill="rgb(234,170,33)" fg:x="70" fg:w="1"/><text x="5.8411%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="5.6709%" y="597" width="0.0799%" height="15" fill="rgb(206,29,35)" fg:x="71" fg:w="1"/><text x="5.9209%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="5.6709%" y="581" width="0.0799%" height="15" fill="rgb(227,138,25)" fg:x="71" fg:w="1"/><text x="5.9209%" y="591.50"></text></g><g><title>libloading::library_filename (2 samples, 0.16%)</title><rect x="5.6709%" y="613" width="0.1597%" height="15" fill="rgb(249,131,35)" fg:x="71" fg:w="2"/><text x="5.9209%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="5.7508%" y="597" width="0.0799%" height="15" fill="rgb(239,6,40)" fg:x="72" fg:w="1"/><text x="6.0008%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="5.7508%" y="581" width="0.0799%" height="15" fill="rgb(246,136,47)" fg:x="72" fg:w="1"/><text x="6.0008%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="5.7508%" y="565" width="0.0799%" height="15" fill="rgb(253,58,26)" fg:x="72" fg:w="1"/><text x="6.0008%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="5.7508%" y="549" width="0.0799%" height="15" fill="rgb(237,141,10)" fg:x="72" fg:w="1"/><text x="6.0008%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.7508%" y="533" width="0.0799%" height="15" fill="rgb(234,156,12)" fg:x="72" fg:w="1"/><text x="6.0008%" y="543.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="5.5911%" y="629" width="0.5591%" height="15" fill="rgb(243,224,36)" fg:x="70" fg:w="7"/><text x="5.8411%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="5.8307%" y="613" width="0.3195%" height="15" fill="rgb(205,229,51)" fg:x="73" fg:w="4"/><text x="6.0807%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="5.8307%" y="597" width="0.3195%" height="15" fill="rgb(223,189,4)" fg:x="73" fg:w="4"/><text x="6.0807%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="5.8307%" y="581" width="0.3195%" height="15" fill="rgb(249,167,54)" fg:x="73" fg:w="4"/><text x="6.0807%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="5.8307%" y="565" width="0.3195%" height="15" fill="rgb(218,34,28)" fg:x="73" fg:w="4"/><text x="6.0807%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="5.8307%" y="549" width="0.3195%" height="15" fill="rgb(232,109,42)" fg:x="73" fg:w="4"/><text x="6.0807%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="5.8307%" y="533" width="0.3195%" height="15" fill="rgb(248,214,46)" fg:x="73" fg:w="4"/><text x="6.0807%" y="543.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="5.8307%" y="517" width="0.3195%" height="15" fill="rgb(244,216,40)" fg:x="73" fg:w="4"/><text x="6.0807%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.4696%" y="565" width="0.1597%" height="15" fill="rgb(231,226,31)" fg:x="81" fg:w="2"/><text x="6.7196%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.4696%" y="549" width="0.1597%" height="15" fill="rgb(238,38,43)" fg:x="81" fg:w="2"/><text x="6.7196%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="6.4696%" y="533" width="0.1597%" height="15" fill="rgb(208,88,43)" fg:x="81" fg:w="2"/><text x="6.7196%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="6.4696%" y="517" width="0.1597%" height="15" fill="rgb(205,136,37)" fg:x="81" fg:w="2"/><text x="6.7196%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="6.4696%" y="501" width="0.1597%" height="15" fill="rgb(237,34,14)" fg:x="81" fg:w="2"/><text x="6.7196%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.4696%" y="485" width="0.1597%" height="15" fill="rgb(236,193,44)" fg:x="81" fg:w="2"/><text x="6.7196%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="6.4696%" y="469" width="0.1597%" height="15" fill="rgb(231,48,10)" fg:x="81" fg:w="2"/><text x="6.7196%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="6.4696%" y="453" width="0.1597%" height="15" fill="rgb(213,141,34)" fg:x="81" fg:w="2"/><text x="6.7196%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="6.4696%" y="437" width="0.1597%" height="15" fill="rgb(249,130,34)" fg:x="81" fg:w="2"/><text x="6.7196%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="6.4696%" y="421" width="0.1597%" height="15" fill="rgb(219,42,41)" fg:x="81" fg:w="2"/><text x="6.7196%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="6.4696%" y="405" width="0.1597%" height="15" fill="rgb(224,100,54)" fg:x="81" fg:w="2"/><text x="6.7196%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.4696%" y="389" width="0.1597%" height="15" fill="rgb(229,200,27)" fg:x="81" fg:w="2"/><text x="6.7196%" y="399.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (8 samples, 0.64%)</title><rect x="6.1502%" y="613" width="0.6390%" height="15" fill="rgb(217,118,10)" fg:x="77" fg:w="8"/><text x="6.4002%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.64%)</title><rect x="6.1502%" y="597" width="0.6390%" height="15" fill="rgb(206,22,3)" fg:x="77" fg:w="8"/><text x="6.4002%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.64%)</title><rect x="6.1502%" y="581" width="0.6390%" height="15" fill="rgb(232,163,46)" fg:x="77" fg:w="8"/><text x="6.4002%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.6294%" y="565" width="0.1597%" height="15" fill="rgb(206,95,13)" fg:x="83" fg:w="2"/><text x="6.8794%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.9489%" y="597" width="0.0799%" height="15" fill="rgb(253,154,18)" fg:x="87" fg:w="1"/><text x="7.1989%" y="607.50"></text></g><g><title>libc::unix::linux_like::linux::makedev (1 samples, 0.08%)</title><rect x="7.1086%" y="469" width="0.0799%" height="15" fill="rgb(219,32,23)" fg:x="89" fg:w="1"/><text x="7.3586%" y="479.50"></text></g><g><title>glob::is_dir (7 samples, 0.56%)</title><rect x="7.1086%" y="565" width="0.5591%" height="15" fill="rgb(230,191,45)" fg:x="89" fg:w="7"/><text x="7.3586%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (7 samples, 0.56%)</title><rect x="7.1086%" y="549" width="0.5591%" height="15" fill="rgb(229,64,36)" fg:x="89" fg:w="7"/><text x="7.3586%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (7 samples, 0.56%)</title><rect x="7.1086%" y="533" width="0.5591%" height="15" fill="rgb(205,129,25)" fg:x="89" fg:w="7"/><text x="7.3586%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (7 samples, 0.56%)</title><rect x="7.1086%" y="517" width="0.5591%" height="15" fill="rgb(254,112,7)" fg:x="89" fg:w="7"/><text x="7.3586%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (7 samples, 0.56%)</title><rect x="7.1086%" y="501" width="0.5591%" height="15" fill="rgb(226,53,48)" fg:x="89" fg:w="7"/><text x="7.3586%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (7 samples, 0.56%)</title><rect x="7.1086%" y="485" width="0.5591%" height="15" fill="rgb(214,153,38)" fg:x="89" fg:w="7"/><text x="7.3586%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.48%)</title><rect x="7.1885%" y="469" width="0.4792%" height="15" fill="rgb(243,101,7)" fg:x="90" fg:w="6"/><text x="7.4385%" y="479.50"></text></g><g><title>statx (6 samples, 0.48%)</title><rect x="7.1885%" y="453" width="0.4792%" height="15" fill="rgb(240,140,22)" fg:x="90" fg:w="6"/><text x="7.4385%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="7.0288%" y="597" width="0.7188%" height="15" fill="rgb(235,114,2)" fg:x="88" fg:w="9"/><text x="7.2788%" y="607.50"></text></g><g><title>glob::fill_todo (9 samples, 0.72%)</title><rect x="7.0288%" y="581" width="0.7188%" height="15" fill="rgb(242,59,12)" fg:x="88" fg:w="9"/><text x="7.2788%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="7.6677%" y="565" width="0.0799%" height="15" fill="rgb(252,134,9)" fg:x="96" fg:w="1"/><text x="7.9177%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="7.6677%" y="549" width="0.0799%" height="15" fill="rgb(236,4,44)" fg:x="96" fg:w="1"/><text x="7.9177%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="7.6677%" y="533" width="0.0799%" height="15" fill="rgb(254,172,41)" fg:x="96" fg:w="1"/><text x="7.9177%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="7.6677%" y="517" width="0.0799%" height="15" fill="rgb(244,63,20)" fg:x="96" fg:w="1"/><text x="7.9177%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="7.6677%" y="501" width="0.0799%" height="15" fill="rgb(250,73,31)" fg:x="96" fg:w="1"/><text x="7.9177%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="7.6677%" y="485" width="0.0799%" height="15" fill="rgb(241,38,36)" fg:x="96" fg:w="1"/><text x="7.9177%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="7.6677%" y="469" width="0.0799%" height="15" fill="rgb(245,211,2)" fg:x="96" fg:w="1"/><text x="7.9177%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="7.7476%" y="597" width="0.0799%" height="15" fill="rgb(206,120,28)" fg:x="97" fg:w="1"/><text x="7.9976%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.7476%" y="581" width="0.0799%" height="15" fill="rgb(211,59,34)" fg:x="97" fg:w="1"/><text x="7.9976%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.7476%" y="565" width="0.0799%" height="15" fill="rgb(233,168,5)" fg:x="97" fg:w="1"/><text x="7.9976%" y="575.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.8275%" y="565" width="0.0799%" height="15" fill="rgb(234,33,13)" fg:x="98" fg:w="1"/><text x="8.0775%" y="575.50"></text></g><g><title>std::path::Component::as_os_str (1 samples, 0.08%)</title><rect x="7.8275%" y="549" width="0.0799%" height="15" fill="rgb(231,150,26)" fg:x="98" fg:w="1"/><text x="8.0775%" y="559.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="7.9073%" y="565" width="0.1597%" height="15" fill="rgb(217,191,4)" fg:x="99" fg:w="2"/><text x="8.1573%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.9872%" y="549" width="0.0799%" height="15" fill="rgb(246,198,38)" fg:x="100" fg:w="1"/><text x="8.2372%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.9872%" y="533" width="0.0799%" height="15" fill="rgb(245,64,37)" fg:x="100" fg:w="1"/><text x="8.2372%" y="543.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (25 samples, 2.00%)</title><rect x="6.1502%" y="629" width="1.9968%" height="15" fill="rgb(250,30,36)" fg:x="77" fg:w="25"/><text x="6.4002%" y="639.50">&lt;..</text></g><g><title>plugins_rune::sources::load_directory_sources (17 samples, 1.36%)</title><rect x="6.7891%" y="613" width="1.3578%" height="15" fill="rgb(217,86,53)" fg:x="85" fg:w="17"/><text x="7.0391%" y="623.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="7.8275%" y="597" width="0.3195%" height="15" fill="rgb(228,157,16)" fg:x="98" fg:w="4"/><text x="8.0775%" y="607.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="7.8275%" y="581" width="0.3195%" height="15" fill="rgb(217,59,31)" fg:x="98" fg:w="4"/><text x="8.0775%" y="591.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="8.0671%" y="565" width="0.0799%" height="15" fill="rgb(237,138,41)" fg:x="101" fg:w="1"/><text x="8.3171%" y="575.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (2 samples, 0.16%)</title><rect x="8.1470%" y="629" width="0.1597%" height="15" fill="rgb(227,91,49)" fg:x="102" fg:w="2"/><text x="8.3970%" y="639.50"></text></g><g><title>std::time::Instant::duration_since (2 samples, 0.16%)</title><rect x="8.1470%" y="613" width="0.1597%" height="15" fill="rgb(247,21,44)" fg:x="102" fg:w="2"/><text x="8.3970%" y="623.50"></text></g><g><title>std::time::Instant::checked_duration_since (2 samples, 0.16%)</title><rect x="8.1470%" y="597" width="0.1597%" height="15" fill="rgb(219,210,51)" fg:x="102" fg:w="2"/><text x="8.3970%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (2 samples, 0.16%)</title><rect x="8.1470%" y="581" width="0.1597%" height="15" fill="rgb(209,140,6)" fg:x="102" fg:w="2"/><text x="8.3970%" y="591.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.16%)</title><rect x="8.1470%" y="565" width="0.1597%" height="15" fill="rgb(221,188,24)" fg:x="102" fg:w="2"/><text x="8.3970%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.3067%" y="629" width="0.1597%" height="15" fill="rgb(232,154,20)" fg:x="104" fg:w="2"/><text x="8.5567%" y="639.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="8.4665%" y="613" width="0.2396%" height="15" fill="rgb(244,137,50)" fg:x="106" fg:w="3"/><text x="8.7165%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (5 samples, 0.40%)</title><rect x="8.4665%" y="629" width="0.3994%" height="15" fill="rgb(225,185,43)" fg:x="106" fg:w="5"/><text x="8.7165%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="8.7061%" y="613" width="0.1597%" height="15" fill="rgb(213,205,38)" fg:x="109" fg:w="2"/><text x="8.9561%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7859%" y="597" width="0.0799%" height="15" fill="rgb(236,73,12)" fg:x="110" fg:w="1"/><text x="9.0359%" y="607.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="8.8658%" y="613" width="0.0799%" height="15" fill="rgb(235,219,13)" fg:x="111" fg:w="1"/><text x="9.1158%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (79 samples, 6.31%)</title><rect x="2.7955%" y="645" width="6.3099%" height="15" fill="rgb(218,59,36)" fg:x="35" fg:w="79"/><text x="3.0455%" y="655.50">kernel::..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.24%)</title><rect x="8.8658%" y="629" width="0.2396%" height="15" fill="rgb(205,110,39)" fg:x="111" fg:w="3"/><text x="9.1158%" y="639.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="8.9457%" y="613" width="0.1597%" height="15" fill="rgb(218,206,42)" fg:x="112" fg:w="2"/><text x="9.1957%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.1054%" y="613" width="0.0799%" height="15" fill="rgb(248,125,24)" fg:x="114" fg:w="1"/><text x="9.3554%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1853%" y="613" width="0.0799%" height="15" fill="rgb(242,28,27)" fg:x="115" fg:w="1"/><text x="9.4353%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2652%" y="613" width="0.0799%" height="15" fill="rgb(216,228,15)" fg:x="116" fg:w="1"/><text x="9.5152%" y="623.50"></text></g><g><title>engine::session::Session::initialize (87 samples, 6.95%)</title><rect x="2.7955%" y="661" width="6.9489%" height="15" fill="rgb(235,116,46)" fg:x="35" fg:w="87"/><text x="3.0455%" y="671.50">engine::s..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (8 samples, 0.64%)</title><rect x="9.1054%" y="645" width="0.6390%" height="15" fill="rgb(224,18,32)" fg:x="114" fg:w="8"/><text x="9.3554%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="9.1054%" y="629" width="0.6390%" height="15" fill="rgb(252,5,12)" fg:x="114" fg:w="8"/><text x="9.3554%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="9.3450%" y="613" width="0.3994%" height="15" fill="rgb(251,36,5)" fg:x="117" fg:w="5"/><text x="9.5950%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="9.3450%" y="597" width="0.3994%" height="15" fill="rgb(217,53,14)" fg:x="117" fg:w="5"/><text x="9.5950%" y="607.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="9.3450%" y="581" width="0.3994%" height="15" fill="rgb(215,86,45)" fg:x="117" fg:w="5"/><text x="9.5950%" y="591.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (4 samples, 0.32%)</title><rect x="9.7444%" y="661" width="0.3195%" height="15" fill="rgb(242,169,11)" fg:x="122" fg:w="4"/><text x="9.9944%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="9.7444%" y="645" width="0.3195%" height="15" fill="rgb(211,213,45)" fg:x="122" fg:w="4"/><text x="9.9944%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="9.9042%" y="629" width="0.1597%" height="15" fill="rgb(205,88,11)" fg:x="124" fg:w="2"/><text x="10.1542%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="9.9042%" y="613" width="0.1597%" height="15" fill="rgb(252,69,26)" fg:x="124" fg:w="2"/><text x="10.1542%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (93 samples, 7.43%)</title><rect x="2.7157%" y="709" width="7.4281%" height="15" fill="rgb(246,123,37)" fg:x="34" fg:w="93"/><text x="2.9657%" y="719.50">&lt;engine::d..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (93 samples, 7.43%)</title><rect x="2.7157%" y="693" width="7.4281%" height="15" fill="rgb(212,205,5)" fg:x="34" fg:w="93"/><text x="2.9657%" y="703.50">engine::do..</text></g><g><title>engine::session::Session::new (93 samples, 7.43%)</title><rect x="2.7157%" y="677" width="7.4281%" height="15" fill="rgb(253,148,0)" fg:x="34" fg:w="93"/><text x="2.9657%" y="687.50">engine::se..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="10.0639%" y="661" width="0.0799%" height="15" fill="rgb(239,22,4)" fg:x="126" fg:w="1"/><text x="10.3139%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="10.0639%" y="645" width="0.0799%" height="15" fill="rgb(226,26,53)" fg:x="126" fg:w="1"/><text x="10.3139%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.2236%" y="693" width="0.0799%" height="15" fill="rgb(225,229,45)" fg:x="128" fg:w="1"/><text x="10.4736%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.3035%" y="693" width="0.0799%" height="15" fill="rgb(220,60,37)" fg:x="129" fg:w="1"/><text x="10.5535%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="10.3035%" y="677" width="0.0799%" height="15" fill="rgb(217,180,35)" fg:x="129" fg:w="1"/><text x="10.5535%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.3035%" y="661" width="0.0799%" height="15" fill="rgb(229,7,53)" fg:x="129" fg:w="1"/><text x="10.5535%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.3035%" y="645" width="0.0799%" height="15" fill="rgb(254,137,3)" fg:x="129" fg:w="1"/><text x="10.5535%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="10.3834%" y="693" width="0.0799%" height="15" fill="rgb(215,140,41)" fg:x="130" fg:w="1"/><text x="10.6334%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4633%" y="661" width="0.0799%" height="15" fill="rgb(250,80,15)" fg:x="131" fg:w="1"/><text x="10.7133%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4633%" y="645" width="0.0799%" height="15" fill="rgb(252,191,6)" fg:x="131" fg:w="1"/><text x="10.7133%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.4633%" y="629" width="0.0799%" height="15" fill="rgb(246,217,18)" fg:x="131" fg:w="1"/><text x="10.7133%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.4633%" y="613" width="0.0799%" height="15" fill="rgb(223,93,7)" fg:x="131" fg:w="1"/><text x="10.7133%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.4633%" y="597" width="0.0799%" height="15" fill="rgb(225,55,52)" fg:x="131" fg:w="1"/><text x="10.7133%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4633%" y="581" width="0.0799%" height="15" fill="rgb(240,31,24)" fg:x="131" fg:w="1"/><text x="10.7133%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4633%" y="565" width="0.0799%" height="15" fill="rgb(205,56,52)" fg:x="131" fg:w="1"/><text x="10.7133%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.4633%" y="549" width="0.0799%" height="15" fill="rgb(246,146,12)" fg:x="131" fg:w="1"/><text x="10.7133%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.4633%" y="533" width="0.0799%" height="15" fill="rgb(239,84,36)" fg:x="131" fg:w="1"/><text x="10.7133%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.4633%" y="517" width="0.0799%" height="15" fill="rgb(207,41,40)" fg:x="131" fg:w="1"/><text x="10.7133%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.4633%" y="501" width="0.0799%" height="15" fill="rgb(241,179,25)" fg:x="131" fg:w="1"/><text x="10.7133%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4633%" y="485" width="0.0799%" height="15" fill="rgb(210,0,34)" fg:x="131" fg:w="1"/><text x="10.7133%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.5431%" y="661" width="0.0799%" height="15" fill="rgb(225,217,29)" fg:x="132" fg:w="1"/><text x="10.7931%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (4 samples, 0.32%)</title><rect x="10.4633%" y="677" width="0.3195%" height="15" fill="rgb(216,191,38)" fg:x="131" fg:w="4"/><text x="10.7133%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.6230%" y="661" width="0.1597%" height="15" fill="rgb(232,140,52)" fg:x="133" fg:w="2"/><text x="10.8730%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="10.7827%" y="613" width="0.0799%" height="15" fill="rgb(223,158,51)" fg:x="135" fg:w="1"/><text x="11.0327%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="10.7827%" y="645" width="0.1597%" height="15" fill="rgb(235,29,51)" fg:x="135" fg:w="2"/><text x="11.0327%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="10.7827%" y="629" width="0.1597%" height="15" fill="rgb(215,181,18)" fg:x="135" fg:w="2"/><text x="11.0327%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="10.8626%" y="613" width="0.0799%" height="15" fill="rgb(227,125,34)" fg:x="136" fg:w="1"/><text x="11.1126%" y="623.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="10.8626%" y="597" width="0.0799%" height="15" fill="rgb(230,197,49)" fg:x="136" fg:w="1"/><text x="11.1126%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8626%" y="581" width="0.0799%" height="15" fill="rgb(239,141,16)" fg:x="136" fg:w="1"/><text x="11.1126%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="10.9425%" y="597" width="0.0799%" height="15" fill="rgb(225,105,43)" fg:x="137" fg:w="1"/><text x="11.1925%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.9425%" y="581" width="0.0799%" height="15" fill="rgb(214,131,14)" fg:x="137" fg:w="1"/><text x="11.1925%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.9425%" y="565" width="0.0799%" height="15" fill="rgb(229,177,11)" fg:x="137" fg:w="1"/><text x="11.1925%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.0224%" y="565" width="0.1597%" height="15" fill="rgb(231,180,14)" fg:x="138" fg:w="2"/><text x="11.2724%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.0224%" y="549" width="0.1597%" height="15" fill="rgb(232,88,2)" fg:x="138" fg:w="2"/><text x="11.2724%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.1022%" y="533" width="0.0799%" height="15" fill="rgb(205,220,8)" fg:x="139" fg:w="1"/><text x="11.3522%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="11.1022%" y="517" width="0.0799%" height="15" fill="rgb(225,23,53)" fg:x="139" fg:w="1"/><text x="11.3522%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="11.0224%" y="581" width="0.2396%" height="15" fill="rgb(213,62,29)" fg:x="138" fg:w="3"/><text x="11.2724%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.1821%" y="565" width="0.0799%" height="15" fill="rgb(227,75,7)" fg:x="140" fg:w="1"/><text x="11.4321%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.1821%" y="549" width="0.0799%" height="15" fill="rgb(207,105,14)" fg:x="140" fg:w="1"/><text x="11.4321%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.1821%" y="533" width="0.0799%" height="15" fill="rgb(245,62,29)" fg:x="140" fg:w="1"/><text x="11.4321%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.2620%" y="565" width="0.1597%" height="15" fill="rgb(236,202,4)" fg:x="141" fg:w="2"/><text x="11.5120%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.3419%" y="549" width="0.0799%" height="15" fill="rgb(250,67,1)" fg:x="142" fg:w="1"/><text x="11.5919%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.3419%" y="533" width="0.0799%" height="15" fill="rgb(253,115,44)" fg:x="142" fg:w="1"/><text x="11.5919%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.3419%" y="517" width="0.0799%" height="15" fill="rgb(251,139,18)" fg:x="142" fg:w="1"/><text x="11.5919%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.5016%" y="549" width="0.0799%" height="15" fill="rgb(218,22,32)" fg:x="144" fg:w="1"/><text x="11.7516%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.5815%" y="549" width="0.0799%" height="15" fill="rgb(243,53,5)" fg:x="145" fg:w="1"/><text x="11.8315%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5815%" y="533" width="0.0799%" height="15" fill="rgb(227,56,16)" fg:x="145" fg:w="1"/><text x="11.8315%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.5815%" y="517" width="0.0799%" height="15" fill="rgb(245,53,0)" fg:x="145" fg:w="1"/><text x="11.8315%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.5815%" y="501" width="0.0799%" height="15" fill="rgb(216,170,35)" fg:x="145" fg:w="1"/><text x="11.8315%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.5815%" y="485" width="0.0799%" height="15" fill="rgb(211,200,8)" fg:x="145" fg:w="1"/><text x="11.8315%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.5815%" y="469" width="0.0799%" height="15" fill="rgb(228,204,44)" fg:x="145" fg:w="1"/><text x="11.8315%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.6613%" y="549" width="0.0799%" height="15" fill="rgb(214,121,17)" fg:x="146" fg:w="1"/><text x="11.9113%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6613%" y="533" width="0.0799%" height="15" fill="rgb(233,64,38)" fg:x="146" fg:w="1"/><text x="11.9113%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.6613%" y="517" width="0.0799%" height="15" fill="rgb(253,54,19)" fg:x="146" fg:w="1"/><text x="11.9113%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.6613%" y="501" width="0.0799%" height="15" fill="rgb(253,94,18)" fg:x="146" fg:w="1"/><text x="11.9113%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.7412%" y="533" width="0.0799%" height="15" fill="rgb(227,57,52)" fg:x="147" fg:w="1"/><text x="11.9912%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7412%" y="517" width="0.0799%" height="15" fill="rgb(230,228,50)" fg:x="147" fg:w="1"/><text x="11.9912%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8211%" y="533" width="0.0799%" height="15" fill="rgb(217,205,27)" fg:x="148" fg:w="1"/><text x="12.0711%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.8211%" y="517" width="0.0799%" height="15" fill="rgb(252,71,50)" fg:x="148" fg:w="1"/><text x="12.0711%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.8211%" y="501" width="0.0799%" height="15" fill="rgb(209,86,4)" fg:x="148" fg:w="1"/><text x="12.0711%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.8211%" y="485" width="0.0799%" height="15" fill="rgb(229,94,0)" fg:x="148" fg:w="1"/><text x="12.0711%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="11.7412%" y="549" width="0.3195%" height="15" fill="rgb(252,223,21)" fg:x="147" fg:w="4"/><text x="11.9912%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.9010%" y="533" width="0.1597%" height="15" fill="rgb(230,210,4)" fg:x="149" fg:w="2"/><text x="12.1510%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="11.4217%" y="565" width="0.7188%" height="15" fill="rgb(240,149,38)" fg:x="143" fg:w="9"/><text x="11.6717%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.0607%" y="549" width="0.0799%" height="15" fill="rgb(254,105,20)" fg:x="151" fg:w="1"/><text x="12.3107%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.28%)</title><rect x="11.0224%" y="597" width="1.2780%" height="15" fill="rgb(253,87,46)" fg:x="138" fg:w="16"/><text x="11.2724%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="11.2620%" y="581" width="1.0383%" height="15" fill="rgb(253,116,33)" fg:x="141" fg:w="13"/><text x="11.5120%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.1406%" y="565" width="0.1597%" height="15" fill="rgb(229,198,5)" fg:x="152" fg:w="2"/><text x="12.3906%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.2204%" y="549" width="0.0799%" height="15" fill="rgb(242,38,37)" fg:x="153" fg:w="1"/><text x="12.4704%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.2204%" y="533" width="0.0799%" height="15" fill="rgb(242,69,53)" fg:x="153" fg:w="1"/><text x="12.4704%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.2204%" y="517" width="0.0799%" height="15" fill="rgb(249,80,16)" fg:x="153" fg:w="1"/><text x="12.4704%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.2204%" y="501" width="0.0799%" height="15" fill="rgb(206,128,11)" fg:x="153" fg:w="1"/><text x="12.4704%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="12.3003%" y="533" width="0.1597%" height="15" fill="rgb(212,35,20)" fg:x="154" fg:w="2"/><text x="12.5503%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.3802%" y="517" width="0.0799%" height="15" fill="rgb(236,79,13)" fg:x="155" fg:w="1"/><text x="12.6302%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="12.3003%" y="597" width="0.2396%" height="15" fill="rgb(233,123,3)" fg:x="154" fg:w="3"/><text x="12.5503%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="12.3003%" y="581" width="0.2396%" height="15" fill="rgb(214,93,52)" fg:x="154" fg:w="3"/><text x="12.5503%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="12.3003%" y="565" width="0.2396%" height="15" fill="rgb(251,37,40)" fg:x="154" fg:w="3"/><text x="12.5503%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="12.3003%" y="549" width="0.2396%" height="15" fill="rgb(227,80,54)" fg:x="154" fg:w="3"/><text x="12.5503%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.4601%" y="533" width="0.0799%" height="15" fill="rgb(254,48,11)" fg:x="156" fg:w="1"/><text x="12.7101%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="12.4601%" y="517" width="0.0799%" height="15" fill="rgb(235,193,26)" fg:x="156" fg:w="1"/><text x="12.7101%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="12.4601%" y="501" width="0.0799%" height="15" fill="rgb(229,99,21)" fg:x="156" fg:w="1"/><text x="12.7101%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4601%" y="485" width="0.0799%" height="15" fill="rgb(211,140,41)" fg:x="156" fg:w="1"/><text x="12.7101%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="12.5399%" y="581" width="0.1597%" height="15" fill="rgb(240,227,30)" fg:x="157" fg:w="2"/><text x="12.7899%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="12.6198%" y="565" width="0.0799%" height="15" fill="rgb(215,224,45)" fg:x="158" fg:w="1"/><text x="12.8698%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.6198%" y="549" width="0.0799%" height="15" fill="rgb(206,123,31)" fg:x="158" fg:w="1"/><text x="12.8698%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.6198%" y="533" width="0.0799%" height="15" fill="rgb(210,138,16)" fg:x="158" fg:w="1"/><text x="12.8698%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6997%" y="549" width="0.0799%" height="15" fill="rgb(228,57,28)" fg:x="159" fg:w="1"/><text x="12.9497%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.6997%" y="533" width="0.0799%" height="15" fill="rgb(242,170,10)" fg:x="159" fg:w="1"/><text x="12.9497%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6997%" y="517" width="0.0799%" height="15" fill="rgb(228,214,39)" fg:x="159" fg:w="1"/><text x="12.9497%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.7796%" y="549" width="0.0799%" height="15" fill="rgb(218,179,33)" fg:x="160" fg:w="1"/><text x="13.0296%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.7796%" y="533" width="0.0799%" height="15" fill="rgb(235,193,39)" fg:x="160" fg:w="1"/><text x="13.0296%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7796%" y="517" width="0.0799%" height="15" fill="rgb(219,221,36)" fg:x="160" fg:w="1"/><text x="13.0296%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0192%" y="501" width="0.0799%" height="15" fill="rgb(248,218,19)" fg:x="163" fg:w="1"/><text x="13.2692%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0192%" y="485" width="0.0799%" height="15" fill="rgb(205,50,9)" fg:x="163" fg:w="1"/><text x="13.2692%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.0990%" y="501" width="0.0799%" height="15" fill="rgb(238,81,28)" fg:x="164" fg:w="1"/><text x="13.3490%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0990%" y="485" width="0.0799%" height="15" fill="rgb(235,110,19)" fg:x="164" fg:w="1"/><text x="13.3490%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.0990%" y="469" width="0.0799%" height="15" fill="rgb(214,7,14)" fg:x="164" fg:w="1"/><text x="13.3490%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0990%" y="453" width="0.0799%" height="15" fill="rgb(211,77,3)" fg:x="164" fg:w="1"/><text x="13.3490%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.0990%" y="437" width="0.0799%" height="15" fill="rgb(229,5,9)" fg:x="164" fg:w="1"/><text x="13.3490%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0990%" y="421" width="0.0799%" height="15" fill="rgb(225,90,11)" fg:x="164" fg:w="1"/><text x="13.3490%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="13.1789%" y="485" width="0.0799%" height="15" fill="rgb(242,56,8)" fg:x="165" fg:w="1"/><text x="13.4289%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3387%" y="469" width="0.0799%" height="15" fill="rgb(249,212,39)" fg:x="167" fg:w="1"/><text x="13.5887%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3387%" y="453" width="0.0799%" height="15" fill="rgb(236,90,9)" fg:x="167" fg:w="1"/><text x="13.5887%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="12.8594%" y="533" width="0.6390%" height="15" fill="rgb(206,88,35)" fg:x="161" fg:w="8"/><text x="13.1094%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="13.0192%" y="517" width="0.4792%" height="15" fill="rgb(205,126,30)" fg:x="163" fg:w="6"/><text x="13.2692%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.1789%" y="501" width="0.3195%" height="15" fill="rgb(230,176,12)" fg:x="165" fg:w="4"/><text x="13.4289%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.2588%" y="485" width="0.2396%" height="15" fill="rgb(243,19,9)" fg:x="166" fg:w="3"/><text x="13.5088%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4185%" y="469" width="0.0799%" height="15" fill="rgb(245,171,17)" fg:x="168" fg:w="1"/><text x="13.6685%" y="479.50"></text></g><g><title>engine::session::Session::flush (39 samples, 3.12%)</title><rect x="10.4633%" y="693" width="3.1150%" height="15" fill="rgb(227,52,21)" fg:x="131" fg:w="39"/><text x="10.7133%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (35 samples, 2.80%)</title><rect x="10.7827%" y="677" width="2.7955%" height="15" fill="rgb(238,69,14)" fg:x="135" fg:w="35"/><text x="11.0327%" y="687.50">en..</text></g><g><title>engine::session::state::State::flush_entities (35 samples, 2.80%)</title><rect x="10.7827%" y="661" width="2.7955%" height="15" fill="rgb(241,156,39)" fg:x="135" fg:w="35"/><text x="11.0327%" y="671.50">en..</text></g><g><title>core::iter::adapters::try_process (33 samples, 2.64%)</title><rect x="10.9425%" y="645" width="2.6358%" height="15" fill="rgb(212,227,28)" fg:x="137" fg:w="33"/><text x="11.1925%" y="655.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 2.64%)</title><rect x="10.9425%" y="629" width="2.6358%" height="15" fill="rgb(209,118,27)" fg:x="137" fg:w="33"/><text x="11.1925%" y="639.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (33 samples, 2.64%)</title><rect x="10.9425%" y="613" width="2.6358%" height="15" fill="rgb(226,102,5)" fg:x="137" fg:w="33"/><text x="11.1925%" y="623.50">en..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="12.5399%" y="597" width="1.0383%" height="15" fill="rgb(223,34,3)" fg:x="157" fg:w="13"/><text x="12.7899%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="12.6997%" y="581" width="0.8786%" height="15" fill="rgb(221,81,38)" fg:x="159" fg:w="11"/><text x="12.9497%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="12.6997%" y="565" width="0.8786%" height="15" fill="rgb(236,219,28)" fg:x="159" fg:w="11"/><text x="12.9497%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="12.8594%" y="549" width="0.7188%" height="15" fill="rgb(213,200,14)" fg:x="161" fg:w="9"/><text x="13.1094%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4984%" y="533" width="0.0799%" height="15" fill="rgb(240,33,19)" fg:x="169" fg:w="1"/><text x="13.7484%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.5783%" y="661" width="0.0799%" height="15" fill="rgb(233,113,27)" fg:x="170" fg:w="1"/><text x="13.8283%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.5783%" y="645" width="0.0799%" height="15" fill="rgb(220,221,18)" fg:x="170" fg:w="1"/><text x="13.8283%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5783%" y="629" width="0.0799%" height="15" fill="rgb(238,92,8)" fg:x="170" fg:w="1"/><text x="13.8283%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5783%" y="613" width="0.0799%" height="15" fill="rgb(222,164,16)" fg:x="170" fg:w="1"/><text x="13.8283%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5783%" y="597" width="0.0799%" height="15" fill="rgb(241,119,3)" fg:x="170" fg:w="1"/><text x="13.8283%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5783%" y="581" width="0.0799%" height="15" fill="rgb(241,44,8)" fg:x="170" fg:w="1"/><text x="13.8283%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5783%" y="565" width="0.0799%" height="15" fill="rgb(230,36,40)" fg:x="170" fg:w="1"/><text x="13.8283%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5783%" y="549" width="0.0799%" height="15" fill="rgb(243,16,36)" fg:x="170" fg:w="1"/><text x="13.8283%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5783%" y="533" width="0.0799%" height="15" fill="rgb(231,4,26)" fg:x="170" fg:w="1"/><text x="13.8283%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.5783%" y="517" width="0.0799%" height="15" fill="rgb(240,9,31)" fg:x="170" fg:w="1"/><text x="13.8283%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.5783%" y="501" width="0.0799%" height="15" fill="rgb(207,173,15)" fg:x="170" fg:w="1"/><text x="13.8283%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.5783%" y="485" width="0.0799%" height="15" fill="rgb(224,192,53)" fg:x="170" fg:w="1"/><text x="13.8283%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.5783%" y="469" width="0.0799%" height="15" fill="rgb(223,67,28)" fg:x="170" fg:w="1"/><text x="13.8283%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5783%" y="453" width="0.0799%" height="15" fill="rgb(211,20,47)" fg:x="170" fg:w="1"/><text x="13.8283%" y="463.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="13.5783%" y="693" width="0.1597%" height="15" fill="rgb(240,228,2)" fg:x="170" fg:w="2"/><text x="13.8283%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="13.5783%" y="677" width="0.1597%" height="15" fill="rgb(248,151,12)" fg:x="170" fg:w="2"/><text x="13.8283%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="13.6581%" y="661" width="0.0799%" height="15" fill="rgb(244,8,39)" fg:x="171" fg:w="1"/><text x="13.9081%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6581%" y="645" width="0.0799%" height="15" fill="rgb(222,26,8)" fg:x="171" fg:w="1"/><text x="13.9081%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="13.8179%" y="661" width="0.2396%" height="15" fill="rgb(213,106,44)" fg:x="173" fg:w="3"/><text x="14.0679%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.8179%" y="645" width="0.2396%" height="15" fill="rgb(214,129,20)" fg:x="173" fg:w="3"/><text x="14.0679%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.8179%" y="629" width="0.2396%" height="15" fill="rgb(212,32,13)" fg:x="173" fg:w="3"/><text x="14.0679%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="13.8179%" y="613" width="0.2396%" height="15" fill="rgb(208,168,33)" fg:x="173" fg:w="3"/><text x="14.0679%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.8179%" y="597" width="0.2396%" height="15" fill="rgb(231,207,8)" fg:x="173" fg:w="3"/><text x="14.0679%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.8179%" y="581" width="0.2396%" height="15" fill="rgb(235,219,23)" fg:x="173" fg:w="3"/><text x="14.0679%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.8179%" y="565" width="0.2396%" height="15" fill="rgb(226,216,26)" fg:x="173" fg:w="3"/><text x="14.0679%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.9776%" y="549" width="0.0799%" height="15" fill="rgb(239,137,16)" fg:x="175" fg:w="1"/><text x="14.2276%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="13.8179%" y="677" width="0.3195%" height="15" fill="rgb(207,12,36)" fg:x="173" fg:w="4"/><text x="14.0679%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="14.0575%" y="661" width="0.0799%" height="15" fill="rgb(210,214,24)" fg:x="176" fg:w="1"/><text x="14.3075%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.0575%" y="645" width="0.0799%" height="15" fill="rgb(206,56,30)" fg:x="176" fg:w="1"/><text x="14.3075%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.1374%" y="581" width="0.0799%" height="15" fill="rgb(228,143,26)" fg:x="177" fg:w="1"/><text x="14.3874%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1374%" y="565" width="0.0799%" height="15" fill="rgb(216,218,46)" fg:x="177" fg:w="1"/><text x="14.3874%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="14.1374%" y="661" width="0.1597%" height="15" fill="rgb(206,6,19)" fg:x="177" fg:w="2"/><text x="14.3874%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.1374%" y="645" width="0.1597%" height="15" fill="rgb(239,177,51)" fg:x="177" fg:w="2"/><text x="14.3874%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.1374%" y="629" width="0.1597%" height="15" fill="rgb(216,55,25)" fg:x="177" fg:w="2"/><text x="14.3874%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.1374%" y="613" width="0.1597%" height="15" fill="rgb(231,163,29)" fg:x="177" fg:w="2"/><text x="14.3874%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.1374%" y="597" width="0.1597%" height="15" fill="rgb(232,149,50)" fg:x="177" fg:w="2"/><text x="14.3874%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.2173%" y="581" width="0.0799%" height="15" fill="rgb(223,142,48)" fg:x="178" fg:w="1"/><text x="14.4673%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.2971%" y="629" width="0.1597%" height="15" fill="rgb(245,83,23)" fg:x="179" fg:w="2"/><text x="14.5471%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3770%" y="613" width="0.0799%" height="15" fill="rgb(224,63,2)" fg:x="180" fg:w="1"/><text x="14.6270%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4569%" y="629" width="0.0799%" height="15" fill="rgb(218,65,53)" fg:x="181" fg:w="1"/><text x="14.7069%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="14.2971%" y="661" width="0.3195%" height="15" fill="rgb(221,84,29)" fg:x="179" fg:w="4"/><text x="14.5471%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="14.2971%" y="645" width="0.3195%" height="15" fill="rgb(234,0,32)" fg:x="179" fg:w="4"/><text x="14.5471%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.5367%" y="629" width="0.0799%" height="15" fill="rgb(206,20,16)" fg:x="182" fg:w="1"/><text x="14.7867%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5367%" y="613" width="0.0799%" height="15" fill="rgb(244,172,18)" fg:x="182" fg:w="1"/><text x="14.7867%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.5367%" y="597" width="0.0799%" height="15" fill="rgb(254,133,1)" fg:x="182" fg:w="1"/><text x="14.7867%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5367%" y="581" width="0.0799%" height="15" fill="rgb(222,206,41)" fg:x="182" fg:w="1"/><text x="14.7867%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.6166%" y="597" width="0.0799%" height="15" fill="rgb(212,3,42)" fg:x="183" fg:w="1"/><text x="14.8666%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="14.6166%" y="613" width="0.2396%" height="15" fill="rgb(241,11,4)" fg:x="183" fg:w="3"/><text x="14.8666%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.6965%" y="597" width="0.1597%" height="15" fill="rgb(205,19,26)" fg:x="184" fg:w="2"/><text x="14.9465%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.6965%" y="581" width="0.1597%" height="15" fill="rgb(210,179,32)" fg:x="184" fg:w="2"/><text x="14.9465%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.6965%" y="565" width="0.1597%" height="15" fill="rgb(227,116,49)" fg:x="184" fg:w="2"/><text x="14.9465%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.6965%" y="549" width="0.1597%" height="15" fill="rgb(211,146,6)" fg:x="184" fg:w="2"/><text x="14.9465%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7764%" y="533" width="0.0799%" height="15" fill="rgb(219,44,39)" fg:x="185" fg:w="1"/><text x="15.0264%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.7764%" y="517" width="0.0799%" height="15" fill="rgb(234,128,11)" fg:x="185" fg:w="1"/><text x="15.0264%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="14.6166%" y="645" width="0.3994%" height="15" fill="rgb(220,183,53)" fg:x="183" fg:w="5"/><text x="14.8666%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.40%)</title><rect x="14.6166%" y="629" width="0.3994%" height="15" fill="rgb(213,219,32)" fg:x="183" fg:w="5"/><text x="14.8666%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="14.8562%" y="613" width="0.1597%" height="15" fill="rgb(232,156,16)" fg:x="186" fg:w="2"/><text x="15.1062%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="14.8562%" y="597" width="0.1597%" height="15" fill="rgb(246,135,34)" fg:x="186" fg:w="2"/><text x="15.1062%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="14.8562%" y="581" width="0.1597%" height="15" fill="rgb(241,99,0)" fg:x="186" fg:w="2"/><text x="15.1062%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9361%" y="565" width="0.0799%" height="15" fill="rgb(222,103,45)" fg:x="187" fg:w="1"/><text x="15.1861%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="15.0160%" y="645" width="0.0799%" height="15" fill="rgb(212,57,4)" fg:x="188" fg:w="1"/><text x="15.2660%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.0160%" y="629" width="0.0799%" height="15" fill="rgb(215,68,47)" fg:x="188" fg:w="1"/><text x="15.2660%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="15.0160%" y="613" width="0.0799%" height="15" fill="rgb(230,84,2)" fg:x="188" fg:w="1"/><text x="15.2660%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0958%" y="613" width="0.0799%" height="15" fill="rgb(220,102,14)" fg:x="189" fg:w="1"/><text x="15.3458%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="15.0958%" y="597" width="0.0799%" height="15" fill="rgb(240,10,32)" fg:x="189" fg:w="1"/><text x="15.3458%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="15.1757%" y="581" width="0.0799%" height="15" fill="rgb(215,47,27)" fg:x="190" fg:w="1"/><text x="15.4257%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (20 samples, 1.60%)</title><rect x="13.7380%" y="693" width="1.5974%" height="15" fill="rgb(233,188,43)" fg:x="172" fg:w="20"/><text x="13.9880%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (15 samples, 1.20%)</title><rect x="14.1374%" y="677" width="1.1981%" height="15" fill="rgb(253,190,1)" fg:x="177" fg:w="15"/><text x="14.3874%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.72%)</title><rect x="14.6166%" y="661" width="0.7188%" height="15" fill="rgb(206,114,52)" fg:x="183" fg:w="9"/><text x="14.8666%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="15.0958%" y="645" width="0.2396%" height="15" fill="rgb(233,120,37)" fg:x="189" fg:w="3"/><text x="15.3458%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="15.0958%" y="629" width="0.2396%" height="15" fill="rgb(214,52,39)" fg:x="189" fg:w="3"/><text x="15.3458%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="15.1757%" y="613" width="0.1597%" height="15" fill="rgb(223,80,29)" fg:x="190" fg:w="2"/><text x="15.4257%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="15.1757%" y="597" width="0.1597%" height="15" fill="rgb(230,101,40)" fg:x="190" fg:w="2"/><text x="15.4257%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.2556%" y="581" width="0.0799%" height="15" fill="rgb(219,211,8)" fg:x="191" fg:w="1"/><text x="15.5056%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4153%" y="549" width="0.0799%" height="15" fill="rgb(252,126,28)" fg:x="193" fg:w="1"/><text x="15.6653%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.24%)</title><rect x="15.3355%" y="693" width="0.2396%" height="15" fill="rgb(215,56,38)" fg:x="192" fg:w="3"/><text x="15.5855%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.24%)</title><rect x="15.3355%" y="677" width="0.2396%" height="15" fill="rgb(249,55,44)" fg:x="192" fg:w="3"/><text x="15.5855%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="15.3355%" y="661" width="0.2396%" height="15" fill="rgb(220,221,32)" fg:x="192" fg:w="3"/><text x="15.5855%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (3 samples, 0.24%)</title><rect x="15.3355%" y="645" width="0.2396%" height="15" fill="rgb(212,216,41)" fg:x="192" fg:w="3"/><text x="15.5855%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="15.3355%" y="629" width="0.2396%" height="15" fill="rgb(228,213,43)" fg:x="192" fg:w="3"/><text x="15.5855%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (3 samples, 0.24%)</title><rect x="15.3355%" y="613" width="0.2396%" height="15" fill="rgb(211,31,26)" fg:x="192" fg:w="3"/><text x="15.5855%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="15.3355%" y="597" width="0.2396%" height="15" fill="rgb(229,202,19)" fg:x="192" fg:w="3"/><text x="15.5855%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="15.3355%" y="581" width="0.2396%" height="15" fill="rgb(229,105,46)" fg:x="192" fg:w="3"/><text x="15.5855%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.4153%" y="565" width="0.1597%" height="15" fill="rgb(235,108,1)" fg:x="193" fg:w="2"/><text x="15.6653%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.4952%" y="549" width="0.0799%" height="15" fill="rgb(245,111,35)" fg:x="194" fg:w="1"/><text x="15.7452%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="15.5751%" y="661" width="0.0799%" height="15" fill="rgb(219,185,31)" fg:x="195" fg:w="1"/><text x="15.8251%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="15.5751%" y="645" width="0.0799%" height="15" fill="rgb(214,4,43)" fg:x="195" fg:w="1"/><text x="15.8251%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.5751%" y="629" width="0.0799%" height="15" fill="rgb(235,227,40)" fg:x="195" fg:w="1"/><text x="15.8251%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.5751%" y="613" width="0.0799%" height="15" fill="rgb(230,88,30)" fg:x="195" fg:w="1"/><text x="15.8251%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.5751%" y="597" width="0.0799%" height="15" fill="rgb(216,217,1)" fg:x="195" fg:w="1"/><text x="15.8251%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5751%" y="581" width="0.0799%" height="15" fill="rgb(248,139,50)" fg:x="195" fg:w="1"/><text x="15.8251%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.5751%" y="565" width="0.0799%" height="15" fill="rgb(233,1,21)" fg:x="195" fg:w="1"/><text x="15.8251%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5751%" y="549" width="0.0799%" height="15" fill="rgb(215,183,12)" fg:x="195" fg:w="1"/><text x="15.8251%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.5751%" y="533" width="0.0799%" height="15" fill="rgb(229,104,42)" fg:x="195" fg:w="1"/><text x="15.8251%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.5751%" y="517" width="0.0799%" height="15" fill="rgb(243,34,48)" fg:x="195" fg:w="1"/><text x="15.8251%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.6550%" y="645" width="0.0799%" height="15" fill="rgb(239,11,44)" fg:x="196" fg:w="1"/><text x="15.9050%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6550%" y="629" width="0.0799%" height="15" fill="rgb(231,98,35)" fg:x="196" fg:w="1"/><text x="15.9050%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.7348%" y="613" width="0.0799%" height="15" fill="rgb(233,28,25)" fg:x="197" fg:w="1"/><text x="15.9848%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.7348%" y="597" width="0.0799%" height="15" fill="rgb(234,123,11)" fg:x="197" fg:w="1"/><text x="15.9848%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.7348%" y="581" width="0.0799%" height="15" fill="rgb(220,69,3)" fg:x="197" fg:w="1"/><text x="15.9848%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="15.6550%" y="661" width="0.3195%" height="15" fill="rgb(214,64,36)" fg:x="196" fg:w="4"/><text x="15.9050%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="15.7348%" y="645" width="0.2396%" height="15" fill="rgb(211,138,32)" fg:x="197" fg:w="3"/><text x="15.9848%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="15.7348%" y="629" width="0.2396%" height="15" fill="rgb(213,118,47)" fg:x="197" fg:w="3"/><text x="15.9848%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="15.8147%" y="613" width="0.1597%" height="15" fill="rgb(243,124,49)" fg:x="198" fg:w="2"/><text x="16.0647%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.8147%" y="597" width="0.1597%" height="15" fill="rgb(221,30,28)" fg:x="198" fg:w="2"/><text x="16.0647%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.8946%" y="581" width="0.0799%" height="15" fill="rgb(246,37,13)" fg:x="199" fg:w="1"/><text x="16.1446%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8946%" y="565" width="0.0799%" height="15" fill="rgb(249,66,14)" fg:x="199" fg:w="1"/><text x="16.1446%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.8946%" y="549" width="0.0799%" height="15" fill="rgb(213,166,5)" fg:x="199" fg:w="1"/><text x="16.1446%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8946%" y="533" width="0.0799%" height="15" fill="rgb(221,66,24)" fg:x="199" fg:w="1"/><text x="16.1446%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.8946%" y="517" width="0.0799%" height="15" fill="rgb(210,132,17)" fg:x="199" fg:w="1"/><text x="16.1446%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.8946%" y="501" width="0.0799%" height="15" fill="rgb(243,202,5)" fg:x="199" fg:w="1"/><text x="16.1446%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (7 samples, 0.56%)</title><rect x="15.5751%" y="693" width="0.5591%" height="15" fill="rgb(233,70,48)" fg:x="195" fg:w="7"/><text x="15.8251%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="15.5751%" y="677" width="0.5591%" height="15" fill="rgb(238,41,26)" fg:x="195" fg:w="7"/><text x="15.8251%" y="687.50"></text></g><g><title>plugins_core::location::model::Location::set (2 samples, 0.16%)</title><rect x="15.9744%" y="661" width="0.1597%" height="15" fill="rgb(241,19,31)" fg:x="200" fg:w="2"/><text x="16.2244%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="15.9744%" y="645" width="0.1597%" height="15" fill="rgb(214,76,10)" fg:x="200" fg:w="2"/><text x="16.2244%" y="655.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9744%" y="629" width="0.1597%" height="15" fill="rgb(254,202,22)" fg:x="200" fg:w="2"/><text x="16.2244%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.9744%" y="613" width="0.1597%" height="15" fill="rgb(214,72,24)" fg:x="200" fg:w="2"/><text x="16.2244%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0543%" y="597" width="0.0799%" height="15" fill="rgb(221,92,46)" fg:x="201" fg:w="1"/><text x="16.3043%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.0543%" y="581" width="0.0799%" height="15" fill="rgb(246,13,50)" fg:x="201" fg:w="1"/><text x="16.3043%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0543%" y="565" width="0.0799%" height="15" fill="rgb(240,165,38)" fg:x="201" fg:w="1"/><text x="16.3043%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4537%" y="597" width="0.0799%" height="15" fill="rgb(241,24,51)" fg:x="206" fg:w="1"/><text x="16.7037%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="16.3738%" y="677" width="0.2396%" height="15" fill="rgb(227,51,44)" fg:x="205" fg:w="3"/><text x="16.6238%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.4537%" y="661" width="0.1597%" height="15" fill="rgb(231,121,3)" fg:x="206" fg:w="2"/><text x="16.7037%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="16.4537%" y="645" width="0.1597%" height="15" fill="rgb(245,3,41)" fg:x="206" fg:w="2"/><text x="16.7037%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.4537%" y="629" width="0.1597%" height="15" fill="rgb(214,13,26)" fg:x="206" fg:w="2"/><text x="16.7037%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.4537%" y="613" width="0.1597%" height="15" fill="rgb(252,75,11)" fg:x="206" fg:w="2"/><text x="16.7037%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.5335%" y="597" width="0.0799%" height="15" fill="rgb(218,226,17)" fg:x="207" fg:w="1"/><text x="16.7835%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="16.6134%" y="677" width="0.0799%" height="15" fill="rgb(248,89,38)" fg:x="208" fg:w="1"/><text x="16.8634%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="16.6134%" y="661" width="0.0799%" height="15" fill="rgb(237,73,46)" fg:x="208" fg:w="1"/><text x="16.8634%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.6134%" y="645" width="0.0799%" height="15" fill="rgb(242,78,33)" fg:x="208" fg:w="1"/><text x="16.8634%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.6134%" y="629" width="0.0799%" height="15" fill="rgb(235,60,3)" fg:x="208" fg:w="1"/><text x="16.8634%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6134%" y="613" width="0.0799%" height="15" fill="rgb(216,172,19)" fg:x="208" fg:w="1"/><text x="16.8634%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6933%" y="677" width="0.0799%" height="15" fill="rgb(227,6,42)" fg:x="209" fg:w="1"/><text x="16.9433%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="16.9329%" y="645" width="0.0799%" height="15" fill="rgb(223,207,42)" fg:x="212" fg:w="1"/><text x="17.1829%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="16.9329%" y="629" width="0.0799%" height="15" fill="rgb(246,138,30)" fg:x="212" fg:w="1"/><text x="17.1829%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="16.9329%" y="613" width="0.0799%" height="15" fill="rgb(251,199,47)" fg:x="212" fg:w="1"/><text x="17.1829%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.9329%" y="597" width="0.0799%" height="15" fill="rgb(228,218,44)" fg:x="212" fg:w="1"/><text x="17.1829%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="16.9329%" y="581" width="0.0799%" height="15" fill="rgb(220,68,6)" fg:x="212" fg:w="1"/><text x="17.1829%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9329%" y="565" width="0.0799%" height="15" fill="rgb(240,60,26)" fg:x="212" fg:w="1"/><text x="17.1829%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="16.7732%" y="677" width="0.3195%" height="15" fill="rgb(211,200,19)" fg:x="210" fg:w="4"/><text x="17.0232%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="16.8530%" y="661" width="0.2396%" height="15" fill="rgb(242,145,30)" fg:x="211" fg:w="3"/><text x="17.1030%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="17.0128%" y="645" width="0.0799%" height="15" fill="rgb(225,64,13)" fg:x="213" fg:w="1"/><text x="17.2628%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::EntityPtr&gt;&gt; (1 samples, 0.08%)</title><rect x="17.0927%" y="677" width="0.0799%" height="15" fill="rgb(218,103,35)" fg:x="214" fg:w="1"/><text x="17.3427%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.1725%" y="629" width="0.0799%" height="15" fill="rgb(216,93,46)" fg:x="215" fg:w="1"/><text x="17.4225%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="17.1725%" y="661" width="0.2396%" height="15" fill="rgb(225,159,27)" fg:x="215" fg:w="3"/><text x="17.4225%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="17.1725%" y="645" width="0.2396%" height="15" fill="rgb(225,204,11)" fg:x="215" fg:w="3"/><text x="17.4225%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="17.2524%" y="629" width="0.1597%" height="15" fill="rgb(205,56,4)" fg:x="216" fg:w="2"/><text x="17.5024%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.3323%" y="613" width="0.0799%" height="15" fill="rgb(206,6,35)" fg:x="217" fg:w="1"/><text x="17.5823%" y="623.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="17.4121%" y="645" width="0.0799%" height="15" fill="rgb(247,73,52)" fg:x="218" fg:w="1"/><text x="17.6621%" y="655.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="17.4121%" y="629" width="0.0799%" height="15" fill="rgb(246,97,4)" fg:x="218" fg:w="1"/><text x="17.6621%" y="639.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="17.4121%" y="613" width="0.0799%" height="15" fill="rgb(212,37,15)" fg:x="218" fg:w="1"/><text x="17.6621%" y="623.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="17.4121%" y="597" width="0.0799%" height="15" fill="rgb(208,130,40)" fg:x="218" fg:w="1"/><text x="17.6621%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.4920%" y="613" width="0.0799%" height="15" fill="rgb(236,55,29)" fg:x="219" fg:w="1"/><text x="17.7420%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="17.5719%" y="613" width="0.1597%" height="15" fill="rgb(209,156,45)" fg:x="220" fg:w="2"/><text x="17.8219%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="17.5719%" y="597" width="0.1597%" height="15" fill="rgb(249,107,4)" fg:x="220" fg:w="2"/><text x="17.8219%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="17.5719%" y="581" width="0.1597%" height="15" fill="rgb(227,7,13)" fg:x="220" fg:w="2"/><text x="17.8219%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.6518%" y="565" width="0.0799%" height="15" fill="rgb(250,129,14)" fg:x="221" fg:w="1"/><text x="17.9018%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.9712%" y="549" width="0.0799%" height="15" fill="rgb(229,92,13)" fg:x="225" fg:w="1"/><text x="18.2212%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="18.0511%" y="549" width="0.3195%" height="15" fill="rgb(245,98,39)" fg:x="226" fg:w="4"/><text x="18.3011%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="18.0511%" y="533" width="0.3195%" height="15" fill="rgb(234,135,48)" fg:x="226" fg:w="4"/><text x="18.3011%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="18.0511%" y="517" width="0.3195%" height="15" fill="rgb(230,98,28)" fg:x="226" fg:w="4"/><text x="18.3011%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="18.0511%" y="501" width="0.3195%" height="15" fill="rgb(223,121,0)" fg:x="226" fg:w="4"/><text x="18.3011%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="18.0511%" y="485" width="0.3195%" height="15" fill="rgb(234,173,33)" fg:x="226" fg:w="4"/><text x="18.3011%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="18.0511%" y="469" width="0.3195%" height="15" fill="rgb(245,47,8)" fg:x="226" fg:w="4"/><text x="18.3011%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="18.0511%" y="453" width="0.3195%" height="15" fill="rgb(205,17,20)" fg:x="226" fg:w="4"/><text x="18.3011%" y="463.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="18.0511%" y="437" width="0.3195%" height="15" fill="rgb(232,151,16)" fg:x="226" fg:w="4"/><text x="18.3011%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="18.6102%" y="533" width="0.2396%" height="15" fill="rgb(208,30,32)" fg:x="233" fg:w="3"/><text x="18.8602%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="18.6102%" y="517" width="0.2396%" height="15" fill="rgb(254,26,3)" fg:x="233" fg:w="3"/><text x="18.8602%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.6901%" y="501" width="0.1597%" height="15" fill="rgb(240,177,30)" fg:x="234" fg:w="2"/><text x="18.9401%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="18.6901%" y="485" width="0.1597%" height="15" fill="rgb(248,76,44)" fg:x="234" fg:w="2"/><text x="18.9401%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="18.6901%" y="469" width="0.1597%" height="15" fill="rgb(241,186,54)" fg:x="234" fg:w="2"/><text x="18.9401%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.6901%" y="453" width="0.1597%" height="15" fill="rgb(249,171,29)" fg:x="234" fg:w="2"/><text x="18.9401%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="18.6901%" y="437" width="0.1597%" height="15" fill="rgb(237,151,44)" fg:x="234" fg:w="2"/><text x="18.9401%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.8498%" y="469" width="0.0799%" height="15" fill="rgb(228,174,30)" fg:x="236" fg:w="1"/><text x="19.0998%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.8498%" y="453" width="0.0799%" height="15" fill="rgb(252,14,37)" fg:x="236" fg:w="1"/><text x="19.0998%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="18.8498%" y="501" width="0.1597%" height="15" fill="rgb(207,111,40)" fg:x="236" fg:w="2"/><text x="19.0998%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="18.8498%" y="485" width="0.1597%" height="15" fill="rgb(248,171,54)" fg:x="236" fg:w="2"/><text x="19.0998%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9297%" y="469" width="0.0799%" height="15" fill="rgb(211,127,2)" fg:x="237" fg:w="1"/><text x="19.1797%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9297%" y="453" width="0.0799%" height="15" fill="rgb(236,87,47)" fg:x="237" fg:w="1"/><text x="19.1797%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.9297%" y="437" width="0.0799%" height="15" fill="rgb(223,190,45)" fg:x="237" fg:w="1"/><text x="19.1797%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.9297%" y="421" width="0.0799%" height="15" fill="rgb(215,5,16)" fg:x="237" fg:w="1"/><text x="19.1797%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.9297%" y="405" width="0.0799%" height="15" fill="rgb(252,82,33)" fg:x="237" fg:w="1"/><text x="19.1797%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="18.8498%" y="517" width="0.2396%" height="15" fill="rgb(247,213,44)" fg:x="236" fg:w="3"/><text x="19.0998%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.0096%" y="501" width="0.0799%" height="15" fill="rgb(205,196,44)" fg:x="238" fg:w="1"/><text x="19.2596%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.0096%" y="485" width="0.0799%" height="15" fill="rgb(237,96,54)" fg:x="238" fg:w="1"/><text x="19.2596%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="19.0895%" y="517" width="0.3994%" height="15" fill="rgb(230,113,34)" fg:x="239" fg:w="5"/><text x="19.3395%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.3291%" y="501" width="0.1597%" height="15" fill="rgb(221,224,12)" fg:x="242" fg:w="2"/><text x="19.5791%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.4888%" y="501" width="0.0799%" height="15" fill="rgb(219,112,44)" fg:x="244" fg:w="1"/><text x="19.7388%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="19.6486%" y="453" width="0.1597%" height="15" fill="rgb(210,31,13)" fg:x="246" fg:w="2"/><text x="19.8986%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="19.6486%" y="437" width="0.1597%" height="15" fill="rgb(230,25,16)" fg:x="246" fg:w="2"/><text x="19.8986%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="19.6486%" y="421" width="0.1597%" height="15" fill="rgb(246,108,53)" fg:x="246" fg:w="2"/><text x="19.8986%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="19.6486%" y="405" width="0.1597%" height="15" fill="rgb(241,172,50)" fg:x="246" fg:w="2"/><text x="19.8986%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="19.5687%" y="501" width="0.3195%" height="15" fill="rgb(235,141,10)" fg:x="245" fg:w="4"/><text x="19.8187%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="19.6486%" y="485" width="0.2396%" height="15" fill="rgb(220,174,43)" fg:x="246" fg:w="3"/><text x="19.8986%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="19.6486%" y="469" width="0.2396%" height="15" fill="rgb(215,181,40)" fg:x="246" fg:w="3"/><text x="19.8986%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="19.8083%" y="453" width="0.0799%" height="15" fill="rgb(230,97,2)" fg:x="248" fg:w="1"/><text x="20.0583%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.8882%" y="485" width="0.1597%" height="15" fill="rgb(211,25,27)" fg:x="249" fg:w="2"/><text x="20.1382%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.9681%" y="469" width="0.0799%" height="15" fill="rgb(230,87,26)" fg:x="250" fg:w="1"/><text x="20.2181%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.9681%" y="453" width="0.0799%" height="15" fill="rgb(227,160,17)" fg:x="250" fg:w="1"/><text x="20.2181%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.9681%" y="437" width="0.0799%" height="15" fill="rgb(244,85,34)" fg:x="250" fg:w="1"/><text x="20.2181%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.9681%" y="421" width="0.0799%" height="15" fill="rgb(207,70,0)" fg:x="250" fg:w="1"/><text x="20.2181%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.9681%" y="405" width="0.0799%" height="15" fill="rgb(223,129,7)" fg:x="250" fg:w="1"/><text x="20.2181%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.9681%" y="389" width="0.0799%" height="15" fill="rgb(246,105,7)" fg:x="250" fg:w="1"/><text x="20.2181%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="20.0479%" y="485" width="0.0799%" height="15" fill="rgb(215,154,42)" fg:x="251" fg:w="1"/><text x="20.2979%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="19.8882%" y="501" width="0.3195%" height="15" fill="rgb(220,215,30)" fg:x="249" fg:w="4"/><text x="20.1382%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.1278%" y="485" width="0.0799%" height="15" fill="rgb(228,81,51)" fg:x="252" fg:w="1"/><text x="20.3778%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.1278%" y="469" width="0.0799%" height="15" fill="rgb(247,71,54)" fg:x="252" fg:w="1"/><text x="20.3778%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.1278%" y="453" width="0.0799%" height="15" fill="rgb(234,176,34)" fg:x="252" fg:w="1"/><text x="20.3778%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="19.4888%" y="517" width="0.9585%" height="15" fill="rgb(241,103,54)" fg:x="244" fg:w="12"/><text x="19.7388%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="20.2077%" y="501" width="0.2396%" height="15" fill="rgb(228,22,34)" fg:x="253" fg:w="3"/><text x="20.4577%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.2875%" y="485" width="0.1597%" height="15" fill="rgb(241,179,48)" fg:x="254" fg:w="2"/><text x="20.5375%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="20.2875%" y="469" width="0.1597%" height="15" fill="rgb(235,167,37)" fg:x="254" fg:w="2"/><text x="20.5375%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 1.76%)</title><rect x="18.8498%" y="533" width="1.7572%" height="15" fill="rgb(213,109,30)" fg:x="236" fg:w="22"/><text x="19.0998%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.4473%" y="517" width="0.1597%" height="15" fill="rgb(222,172,16)" fg:x="256" fg:w="2"/><text x="20.6973%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.5272%" y="501" width="0.0799%" height="15" fill="rgb(233,192,5)" fg:x="257" fg:w="1"/><text x="20.7772%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.5272%" y="485" width="0.0799%" height="15" fill="rgb(247,189,41)" fg:x="257" fg:w="1"/><text x="20.7772%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (36 samples, 2.88%)</title><rect x="17.8914%" y="565" width="2.8754%" height="15" fill="rgb(218,134,47)" fg:x="224" fg:w="36"/><text x="18.1414%" y="575.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (30 samples, 2.40%)</title><rect x="18.3706%" y="549" width="2.3962%" height="15" fill="rgb(216,29,3)" fg:x="230" fg:w="30"/><text x="18.6206%" y="559.50">se..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.6070%" y="533" width="0.1597%" height="15" fill="rgb(246,140,12)" fg:x="258" fg:w="2"/><text x="20.8570%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8466%" y="533" width="0.0799%" height="15" fill="rgb(230,136,11)" fg:x="261" fg:w="1"/><text x="21.0966%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.9265%" y="533" width="0.0799%" height="15" fill="rgb(247,22,47)" fg:x="262" fg:w="1"/><text x="21.1765%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.9265%" y="517" width="0.0799%" height="15" fill="rgb(218,84,22)" fg:x="262" fg:w="1"/><text x="21.1765%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0064%" y="517" width="0.0799%" height="15" fill="rgb(216,87,39)" fg:x="263" fg:w="1"/><text x="21.2564%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0863%" y="453" width="0.0799%" height="15" fill="rgb(221,178,8)" fg:x="264" fg:w="1"/><text x="21.3363%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="21.0863%" y="485" width="0.1597%" height="15" fill="rgb(230,42,11)" fg:x="264" fg:w="2"/><text x="21.3363%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="21.0863%" y="469" width="0.1597%" height="15" fill="rgb(237,229,4)" fg:x="264" fg:w="2"/><text x="21.3363%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.1661%" y="453" width="0.0799%" height="15" fill="rgb(222,31,33)" fg:x="265" fg:w="1"/><text x="21.4161%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.1661%" y="437" width="0.0799%" height="15" fill="rgb(210,17,39)" fg:x="265" fg:w="1"/><text x="21.4161%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.1661%" y="421" width="0.0799%" height="15" fill="rgb(244,93,20)" fg:x="265" fg:w="1"/><text x="21.4161%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2460%" y="469" width="0.0799%" height="15" fill="rgb(210,40,47)" fg:x="266" fg:w="1"/><text x="21.4960%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.3259%" y="469" width="0.0799%" height="15" fill="rgb(239,211,47)" fg:x="267" fg:w="1"/><text x="21.5759%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="20.7668%" y="565" width="0.7188%" height="15" fill="rgb(251,223,49)" fg:x="260" fg:w="9"/><text x="21.0168%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="20.7668%" y="549" width="0.7188%" height="15" fill="rgb(221,149,5)" fg:x="260" fg:w="9"/><text x="21.0168%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="21.0064%" y="533" width="0.4792%" height="15" fill="rgb(219,224,51)" fg:x="263" fg:w="6"/><text x="21.2564%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="21.0863%" y="517" width="0.3994%" height="15" fill="rgb(223,7,8)" fg:x="264" fg:w="5"/><text x="21.3363%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="21.0863%" y="501" width="0.3994%" height="15" fill="rgb(241,217,22)" fg:x="264" fg:w="5"/><text x="21.3363%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.2460%" y="485" width="0.2396%" height="15" fill="rgb(248,209,0)" fg:x="266" fg:w="3"/><text x="21.4960%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.4058%" y="469" width="0.0799%" height="15" fill="rgb(217,205,4)" fg:x="268" fg:w="1"/><text x="21.6558%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="21.4856%" y="533" width="0.1597%" height="15" fill="rgb(228,124,39)" fg:x="269" fg:w="2"/><text x="21.7356%" y="543.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.7252%" y="501" width="0.0799%" height="15" fill="rgb(250,116,42)" fg:x="272" fg:w="1"/><text x="21.9752%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="21.7252%" y="485" width="0.0799%" height="15" fill="rgb(223,202,9)" fg:x="272" fg:w="1"/><text x="21.9752%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="21.4856%" y="549" width="0.3994%" height="15" fill="rgb(242,222,40)" fg:x="269" fg:w="5"/><text x="21.7356%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (3 samples, 0.24%)</title><rect x="21.6454%" y="533" width="0.2396%" height="15" fill="rgb(229,99,46)" fg:x="271" fg:w="3"/><text x="21.8954%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="21.6454%" y="517" width="0.2396%" height="15" fill="rgb(225,56,46)" fg:x="271" fg:w="3"/><text x="21.8954%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8051%" y="501" width="0.0799%" height="15" fill="rgb(227,94,5)" fg:x="273" fg:w="1"/><text x="22.0551%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="21.8850%" y="533" width="0.0799%" height="15" fill="rgb(205,112,38)" fg:x="274" fg:w="1"/><text x="22.1350%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.0447%" y="517" width="0.0799%" height="15" fill="rgb(231,133,46)" fg:x="276" fg:w="1"/><text x="22.2947%" y="527.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="22.1246%" y="517" width="0.0799%" height="15" fill="rgb(217,16,9)" fg:x="277" fg:w="1"/><text x="22.3746%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.1246%" y="501" width="0.0799%" height="15" fill="rgb(249,173,9)" fg:x="277" fg:w="1"/><text x="22.3746%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.1246%" y="485" width="0.0799%" height="15" fill="rgb(205,163,53)" fg:x="277" fg:w="1"/><text x="22.3746%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1246%" y="469" width="0.0799%" height="15" fill="rgb(217,54,41)" fg:x="277" fg:w="1"/><text x="22.3746%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="22.2045%" y="517" width="0.0799%" height="15" fill="rgb(228,216,12)" fg:x="278" fg:w="1"/><text x="22.4545%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="22.2843%" y="517" width="0.1597%" height="15" fill="rgb(244,228,15)" fg:x="279" fg:w="2"/><text x="22.5343%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="22.2843%" y="501" width="0.1597%" height="15" fill="rgb(221,176,53)" fg:x="279" fg:w="2"/><text x="22.5343%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.3642%" y="485" width="0.0799%" height="15" fill="rgb(205,94,34)" fg:x="280" fg:w="1"/><text x="22.6142%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.3642%" y="469" width="0.0799%" height="15" fill="rgb(213,110,48)" fg:x="280" fg:w="1"/><text x="22.6142%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.4441%" y="469" width="0.1597%" height="15" fill="rgb(236,142,28)" fg:x="281" fg:w="2"/><text x="22.6941%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5240%" y="453" width="0.0799%" height="15" fill="rgb(225,135,29)" fg:x="282" fg:w="1"/><text x="22.7740%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="22.6038%" y="453" width="0.3195%" height="15" fill="rgb(252,45,31)" fg:x="283" fg:w="4"/><text x="22.8538%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="22.6837%" y="437" width="0.2396%" height="15" fill="rgb(211,187,50)" fg:x="284" fg:w="3"/><text x="22.9337%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="22.7636%" y="421" width="0.1597%" height="15" fill="rgb(229,109,7)" fg:x="285" fg:w="2"/><text x="23.0136%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.8435%" y="405" width="0.0799%" height="15" fill="rgb(251,131,51)" fg:x="286" fg:w="1"/><text x="23.0935%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.8435%" y="389" width="0.0799%" height="15" fill="rgb(251,180,35)" fg:x="286" fg:w="1"/><text x="23.0935%" y="399.50"></text></g><g><title>engine::session::Session::flush (73 samples, 5.83%)</title><rect x="17.1725%" y="677" width="5.8307%" height="15" fill="rgb(211,46,32)" fg:x="215" fg:w="73"/><text x="17.4225%" y="687.50">engine:..</text></g><g><title>engine::session::Session::save_changes (70 samples, 5.59%)</title><rect x="17.4121%" y="661" width="5.5911%" height="15" fill="rgb(248,123,17)" fg:x="218" fg:w="70"/><text x="17.6621%" y="671.50">engine:..</text></g><g><title>engine::session::state::State::close (69 samples, 5.51%)</title><rect x="17.4920%" y="645" width="5.5112%" height="15" fill="rgb(227,141,18)" fg:x="219" fg:w="69"/><text x="17.7420%" y="655.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (69 samples, 5.51%)</title><rect x="17.4920%" y="629" width="5.5112%" height="15" fill="rgb(216,102,9)" fg:x="219" fg:w="69"/><text x="17.7420%" y="639.50">engine:..</text></g><g><title>core::iter::adapters::try_process (66 samples, 5.27%)</title><rect x="17.7316%" y="613" width="5.2716%" height="15" fill="rgb(253,47,13)" fg:x="222" fg:w="66"/><text x="17.9816%" y="623.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (66 samples, 5.27%)</title><rect x="17.7316%" y="597" width="5.2716%" height="15" fill="rgb(226,93,23)" fg:x="222" fg:w="66"/><text x="17.9816%" y="607.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (65 samples, 5.19%)</title><rect x="17.8115%" y="581" width="5.1917%" height="15" fill="rgb(247,104,17)" fg:x="223" fg:w="65"/><text x="18.0615%" y="591.50">engine..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.52%)</title><rect x="21.4856%" y="565" width="1.5176%" height="15" fill="rgb(233,203,26)" fg:x="269" fg:w="19"/><text x="21.7356%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="21.8850%" y="549" width="1.1182%" height="15" fill="rgb(244,98,49)" fg:x="274" fg:w="14"/><text x="22.1350%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="21.9649%" y="533" width="1.0383%" height="15" fill="rgb(235,134,22)" fg:x="275" fg:w="13"/><text x="22.2149%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="22.4441%" y="517" width="0.5591%" height="15" fill="rgb(221,70,32)" fg:x="281" fg:w="7"/><text x="22.6941%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="22.4441%" y="501" width="0.5591%" height="15" fill="rgb(238,15,50)" fg:x="281" fg:w="7"/><text x="22.6941%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="22.4441%" y="485" width="0.5591%" height="15" fill="rgb(215,221,48)" fg:x="281" fg:w="7"/><text x="22.6941%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="22.6038%" y="469" width="0.3994%" height="15" fill="rgb(236,73,3)" fg:x="283" fg:w="5"/><text x="22.8538%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9233%" y="453" width="0.0799%" height="15" fill="rgb(250,107,11)" fg:x="287" fg:w="1"/><text x="23.1733%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="23.0032%" y="629" width="0.0799%" height="15" fill="rgb(242,39,14)" fg:x="288" fg:w="1"/><text x="23.2532%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="23.0032%" y="677" width="0.1597%" height="15" fill="rgb(248,164,37)" fg:x="288" fg:w="2"/><text x="23.2532%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="23.0032%" y="661" width="0.1597%" height="15" fill="rgb(217,60,12)" fg:x="288" fg:w="2"/><text x="23.2532%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="23.0032%" y="645" width="0.1597%" height="15" fill="rgb(240,125,29)" fg:x="288" fg:w="2"/><text x="23.2532%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.0831%" y="629" width="0.0799%" height="15" fill="rgb(208,207,28)" fg:x="289" fg:w="1"/><text x="23.3331%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="23.0831%" y="613" width="0.0799%" height="15" fill="rgb(209,159,27)" fg:x="289" fg:w="1"/><text x="23.3331%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0831%" y="597" width="0.0799%" height="15" fill="rgb(251,176,53)" fg:x="289" fg:w="1"/><text x="23.3331%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.0831%" y="581" width="0.0799%" height="15" fill="rgb(211,85,7)" fg:x="289" fg:w="1"/><text x="23.3331%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.0831%" y="565" width="0.0799%" height="15" fill="rgb(216,64,54)" fg:x="289" fg:w="1"/><text x="23.3331%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="23.2428%" y="661" width="0.2396%" height="15" fill="rgb(217,54,24)" fg:x="291" fg:w="3"/><text x="23.4928%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="23.2428%" y="645" width="0.2396%" height="15" fill="rgb(208,206,53)" fg:x="291" fg:w="3"/><text x="23.4928%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="23.2428%" y="629" width="0.2396%" height="15" fill="rgb(251,74,39)" fg:x="291" fg:w="3"/><text x="23.4928%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="23.2428%" y="613" width="0.2396%" height="15" fill="rgb(226,47,5)" fg:x="291" fg:w="3"/><text x="23.4928%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.3227%" y="597" width="0.1597%" height="15" fill="rgb(234,111,33)" fg:x="292" fg:w="2"/><text x="23.5727%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="23.3227%" y="581" width="0.1597%" height="15" fill="rgb(251,14,10)" fg:x="292" fg:w="2"/><text x="23.5727%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.4824%" y="661" width="0.0799%" height="15" fill="rgb(232,43,0)" fg:x="294" fg:w="1"/><text x="23.7324%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.4824%" y="645" width="0.0799%" height="15" fill="rgb(222,68,43)" fg:x="294" fg:w="1"/><text x="23.7324%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.4824%" y="629" width="0.0799%" height="15" fill="rgb(217,24,23)" fg:x="294" fg:w="1"/><text x="23.7324%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.4824%" y="613" width="0.0799%" height="15" fill="rgb(229,209,14)" fg:x="294" fg:w="1"/><text x="23.7324%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.4824%" y="597" width="0.0799%" height="15" fill="rgb(250,149,48)" fg:x="294" fg:w="1"/><text x="23.7324%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.4824%" y="581" width="0.0799%" height="15" fill="rgb(210,120,37)" fg:x="294" fg:w="1"/><text x="23.7324%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.4824%" y="565" width="0.0799%" height="15" fill="rgb(210,21,8)" fg:x="294" fg:w="1"/><text x="23.7324%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.4824%" y="549" width="0.0799%" height="15" fill="rgb(243,145,7)" fg:x="294" fg:w="1"/><text x="23.7324%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.4824%" y="533" width="0.0799%" height="15" fill="rgb(238,178,32)" fg:x="294" fg:w="1"/><text x="23.7324%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.4824%" y="517" width="0.0799%" height="15" fill="rgb(222,4,10)" fg:x="294" fg:w="1"/><text x="23.7324%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.4824%" y="501" width="0.0799%" height="15" fill="rgb(239,7,37)" fg:x="294" fg:w="1"/><text x="23.7324%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4824%" y="485" width="0.0799%" height="15" fill="rgb(215,31,37)" fg:x="294" fg:w="1"/><text x="23.7324%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.5623%" y="581" width="0.0799%" height="15" fill="rgb(224,83,33)" fg:x="295" fg:w="1"/><text x="23.8123%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.5623%" y="565" width="0.0799%" height="15" fill="rgb(239,55,3)" fg:x="295" fg:w="1"/><text x="23.8123%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.5623%" y="549" width="0.0799%" height="15" fill="rgb(247,92,11)" fg:x="295" fg:w="1"/><text x="23.8123%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.5623%" y="533" width="0.0799%" height="15" fill="rgb(239,200,7)" fg:x="295" fg:w="1"/><text x="23.8123%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.5623%" y="517" width="0.0799%" height="15" fill="rgb(227,115,8)" fg:x="295" fg:w="1"/><text x="23.8123%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.5623%" y="501" width="0.0799%" height="15" fill="rgb(215,189,27)" fg:x="295" fg:w="1"/><text x="23.8123%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.5623%" y="485" width="0.0799%" height="15" fill="rgb(251,216,39)" fg:x="295" fg:w="1"/><text x="23.8123%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.5623%" y="469" width="0.0799%" height="15" fill="rgb(207,29,47)" fg:x="295" fg:w="1"/><text x="23.8123%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.5623%" y="453" width="0.0799%" height="15" fill="rgb(210,71,34)" fg:x="295" fg:w="1"/><text x="23.8123%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.5623%" y="437" width="0.0799%" height="15" fill="rgb(253,217,51)" fg:x="295" fg:w="1"/><text x="23.8123%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.5623%" y="421" width="0.0799%" height="15" fill="rgb(222,117,46)" fg:x="295" fg:w="1"/><text x="23.8123%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5623%" y="405" width="0.0799%" height="15" fill="rgb(226,132,6)" fg:x="295" fg:w="1"/><text x="23.8123%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.5623%" y="629" width="0.1597%" height="15" fill="rgb(254,145,51)" fg:x="295" fg:w="2"/><text x="23.8123%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.5623%" y="613" width="0.1597%" height="15" fill="rgb(231,199,27)" fg:x="295" fg:w="2"/><text x="23.8123%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="23.5623%" y="597" width="0.1597%" height="15" fill="rgb(245,158,14)" fg:x="295" fg:w="2"/><text x="23.8123%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6422%" y="581" width="0.0799%" height="15" fill="rgb(240,113,14)" fg:x="296" fg:w="1"/><text x="23.8922%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="23.5623%" y="645" width="0.2396%" height="15" fill="rgb(210,20,13)" fg:x="295" fg:w="3"/><text x="23.8123%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.7220%" y="629" width="0.0799%" height="15" fill="rgb(241,144,13)" fg:x="297" fg:w="1"/><text x="23.9720%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.7220%" y="613" width="0.0799%" height="15" fill="rgb(235,43,34)" fg:x="297" fg:w="1"/><text x="23.9720%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="23.7220%" y="597" width="0.0799%" height="15" fill="rgb(208,36,20)" fg:x="297" fg:w="1"/><text x="23.9720%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.7220%" y="581" width="0.0799%" height="15" fill="rgb(239,204,10)" fg:x="297" fg:w="1"/><text x="23.9720%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.7220%" y="565" width="0.0799%" height="15" fill="rgb(217,84,43)" fg:x="297" fg:w="1"/><text x="23.9720%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.7220%" y="549" width="0.0799%" height="15" fill="rgb(241,170,50)" fg:x="297" fg:w="1"/><text x="23.9720%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.7220%" y="533" width="0.0799%" height="15" fill="rgb(226,205,29)" fg:x="297" fg:w="1"/><text x="23.9720%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.8019%" y="613" width="0.0799%" height="15" fill="rgb(233,113,1)" fg:x="298" fg:w="1"/><text x="24.0519%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="23.8019%" y="629" width="0.1597%" height="15" fill="rgb(253,98,13)" fg:x="298" fg:w="2"/><text x="24.0519%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="23.8818%" y="613" width="0.0799%" height="15" fill="rgb(211,115,12)" fg:x="299" fg:w="1"/><text x="24.1318%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="24.0415%" y="613" width="0.0799%" height="15" fill="rgb(208,12,16)" fg:x="301" fg:w="1"/><text x="24.2915%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.0415%" y="597" width="0.0799%" height="15" fill="rgb(237,193,54)" fg:x="301" fg:w="1"/><text x="24.2915%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.0415%" y="581" width="0.0799%" height="15" fill="rgb(243,22,42)" fg:x="301" fg:w="1"/><text x="24.2915%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.0415%" y="565" width="0.0799%" height="15" fill="rgb(233,151,36)" fg:x="301" fg:w="1"/><text x="24.2915%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (5 samples, 0.40%)</title><rect x="23.8019%" y="645" width="0.3994%" height="15" fill="rgb(237,57,45)" fg:x="298" fg:w="5"/><text x="24.0519%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="23.9617%" y="629" width="0.2396%" height="15" fill="rgb(221,88,17)" fg:x="300" fg:w="3"/><text x="24.2117%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="24.1214%" y="613" width="0.0799%" height="15" fill="rgb(230,79,15)" fg:x="302" fg:w="1"/><text x="24.3714%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.1214%" y="597" width="0.0799%" height="15" fill="rgb(213,57,13)" fg:x="302" fg:w="1"/><text x="24.3714%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="24.1214%" y="581" width="0.0799%" height="15" fill="rgb(222,116,39)" fg:x="302" fg:w="1"/><text x="24.3714%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.1214%" y="565" width="0.0799%" height="15" fill="rgb(245,107,2)" fg:x="302" fg:w="1"/><text x="24.3714%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="24.1214%" y="549" width="0.0799%" height="15" fill="rgb(238,1,10)" fg:x="302" fg:w="1"/><text x="24.3714%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="24.1214%" y="533" width="0.0799%" height="15" fill="rgb(249,4,48)" fg:x="302" fg:w="1"/><text x="24.3714%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="24.2812%" y="597" width="0.0799%" height="15" fill="rgb(223,151,18)" fg:x="304" fg:w="1"/><text x="24.5312%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.2812%" y="581" width="0.0799%" height="15" fill="rgb(227,65,43)" fg:x="304" fg:w="1"/><text x="24.5312%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.2812%" y="565" width="0.0799%" height="15" fill="rgb(218,40,45)" fg:x="304" fg:w="1"/><text x="24.5312%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="24.2812%" y="549" width="0.0799%" height="15" fill="rgb(252,121,31)" fg:x="304" fg:w="1"/><text x="24.5312%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.2812%" y="533" width="0.0799%" height="15" fill="rgb(219,158,43)" fg:x="304" fg:w="1"/><text x="24.5312%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.2812%" y="517" width="0.0799%" height="15" fill="rgb(231,162,42)" fg:x="304" fg:w="1"/><text x="24.5312%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="24.2812%" y="501" width="0.0799%" height="15" fill="rgb(217,179,25)" fg:x="304" fg:w="1"/><text x="24.5312%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="24.3610%" y="597" width="0.0799%" height="15" fill="rgb(206,212,31)" fg:x="305" fg:w="1"/><text x="24.6110%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.4409%" y="581" width="0.0799%" height="15" fill="rgb(235,144,12)" fg:x="306" fg:w="1"/><text x="24.6909%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="24.2812%" y="629" width="0.3195%" height="15" fill="rgb(213,51,10)" fg:x="304" fg:w="4"/><text x="24.5312%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="24.2812%" y="613" width="0.3195%" height="15" fill="rgb(231,145,14)" fg:x="304" fg:w="4"/><text x="24.5312%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="24.4409%" y="597" width="0.1597%" height="15" fill="rgb(235,15,28)" fg:x="306" fg:w="2"/><text x="24.6909%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.5208%" y="581" width="0.0799%" height="15" fill="rgb(237,206,10)" fg:x="307" fg:w="1"/><text x="24.7708%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.5208%" y="565" width="0.0799%" height="15" fill="rgb(236,227,27)" fg:x="307" fg:w="1"/><text x="24.7708%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.5208%" y="549" width="0.0799%" height="15" fill="rgb(246,83,35)" fg:x="307" fg:w="1"/><text x="24.7708%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6006%" y="597" width="0.0799%" height="15" fill="rgb(220,136,24)" fg:x="308" fg:w="1"/><text x="24.8506%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6006%" y="581" width="0.0799%" height="15" fill="rgb(217,3,25)" fg:x="308" fg:w="1"/><text x="24.8506%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="24.6805%" y="597" width="0.0799%" height="15" fill="rgb(239,24,14)" fg:x="309" fg:w="1"/><text x="24.9305%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.6805%" y="581" width="0.0799%" height="15" fill="rgb(244,16,53)" fg:x="309" fg:w="1"/><text x="24.9305%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6805%" y="565" width="0.0799%" height="15" fill="rgb(208,175,44)" fg:x="309" fg:w="1"/><text x="24.9305%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6805%" y="549" width="0.0799%" height="15" fill="rgb(252,18,48)" fg:x="309" fg:w="1"/><text x="24.9305%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6805%" y="533" width="0.0799%" height="15" fill="rgb(234,199,32)" fg:x="309" fg:w="1"/><text x="24.9305%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="24.2013%" y="645" width="0.6390%" height="15" fill="rgb(225,77,54)" fg:x="303" fg:w="8"/><text x="24.4513%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="24.6006%" y="629" width="0.2396%" height="15" fill="rgb(225,42,25)" fg:x="308" fg:w="3"/><text x="24.8506%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="24.6006%" y="613" width="0.2396%" height="15" fill="rgb(242,227,46)" fg:x="308" fg:w="3"/><text x="24.8506%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="24.7604%" y="597" width="0.0799%" height="15" fill="rgb(246,197,35)" fg:x="310" fg:w="1"/><text x="25.0104%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.7604%" y="581" width="0.0799%" height="15" fill="rgb(215,159,26)" fg:x="310" fg:w="1"/><text x="25.0104%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7604%" y="565" width="0.0799%" height="15" fill="rgb(212,194,50)" fg:x="310" fg:w="1"/><text x="25.0104%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (17 samples, 1.36%)</title><rect x="23.5623%" y="661" width="1.3578%" height="15" fill="rgb(246,132,1)" fg:x="295" fg:w="17"/><text x="23.8123%" y="671.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="24.8403%" y="645" width="0.0799%" height="15" fill="rgb(217,71,7)" fg:x="311" fg:w="1"/><text x="25.0903%" y="655.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="24.8403%" y="629" width="0.0799%" height="15" fill="rgb(252,59,32)" fg:x="311" fg:w="1"/><text x="25.0903%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (23 samples, 1.84%)</title><rect x="23.1629%" y="677" width="1.8371%" height="15" fill="rgb(253,204,25)" fg:x="290" fg:w="23"/><text x="23.4129%" y="687.50">p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.9201%" y="661" width="0.0799%" height="15" fill="rgb(232,21,16)" fg:x="312" fg:w="1"/><text x="25.1701%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.9201%" y="645" width="0.0799%" height="15" fill="rgb(248,90,29)" fg:x="312" fg:w="1"/><text x="25.1701%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.9201%" y="629" width="0.0799%" height="15" fill="rgb(249,223,7)" fg:x="312" fg:w="1"/><text x="25.1701%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.9201%" y="613" width="0.0799%" height="15" fill="rgb(231,119,42)" fg:x="312" fg:w="1"/><text x="25.1701%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.9201%" y="597" width="0.0799%" height="15" fill="rgb(215,41,35)" fg:x="312" fg:w="1"/><text x="25.1701%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.9201%" y="581" width="0.0799%" height="15" fill="rgb(220,44,45)" fg:x="312" fg:w="1"/><text x="25.1701%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="24.9201%" y="565" width="0.0799%" height="15" fill="rgb(253,197,36)" fg:x="312" fg:w="1"/><text x="25.1701%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="24.9201%" y="549" width="0.0799%" height="15" fill="rgb(245,225,54)" fg:x="312" fg:w="1"/><text x="25.1701%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="25.0000%" y="677" width="0.0799%" height="15" fill="rgb(239,94,37)" fg:x="313" fg:w="1"/><text x="25.2500%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="25.0000%" y="661" width="0.0799%" height="15" fill="rgb(242,217,10)" fg:x="313" fg:w="1"/><text x="25.2500%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="25.0000%" y="645" width="0.0799%" height="15" fill="rgb(250,193,7)" fg:x="313" fg:w="1"/><text x="25.2500%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="25.0000%" y="629" width="0.0799%" height="15" fill="rgb(230,104,19)" fg:x="313" fg:w="1"/><text x="25.2500%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.0000%" y="613" width="0.0799%" height="15" fill="rgb(230,181,4)" fg:x="313" fg:w="1"/><text x="25.2500%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="25.0000%" y="597" width="0.0799%" height="15" fill="rgb(216,219,49)" fg:x="313" fg:w="1"/><text x="25.2500%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="25.0000%" y="581" width="0.0799%" height="15" fill="rgb(254,144,0)" fg:x="313" fg:w="1"/><text x="25.2500%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.0799%" y="645" width="0.0799%" height="15" fill="rgb(205,209,38)" fg:x="314" fg:w="1"/><text x="25.3299%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="25.1597%" y="613" width="0.0799%" height="15" fill="rgb(240,21,42)" fg:x="315" fg:w="1"/><text x="25.4097%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="25.1597%" y="597" width="0.0799%" height="15" fill="rgb(241,132,3)" fg:x="315" fg:w="1"/><text x="25.4097%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.1597%" y="581" width="0.0799%" height="15" fill="rgb(225,14,2)" fg:x="315" fg:w="1"/><text x="25.4097%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.1597%" y="565" width="0.0799%" height="15" fill="rgb(210,141,35)" fg:x="315" fg:w="1"/><text x="25.4097%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.1597%" y="549" width="0.0799%" height="15" fill="rgb(251,14,44)" fg:x="315" fg:w="1"/><text x="25.4097%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="25.2396%" y="581" width="0.1597%" height="15" fill="rgb(247,48,18)" fg:x="316" fg:w="2"/><text x="25.4896%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.3195%" y="565" width="0.0799%" height="15" fill="rgb(225,0,40)" fg:x="317" fg:w="1"/><text x="25.5695%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.3195%" y="549" width="0.0799%" height="15" fill="rgb(221,31,33)" fg:x="317" fg:w="1"/><text x="25.5695%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.3195%" y="533" width="0.0799%" height="15" fill="rgb(237,42,40)" fg:x="317" fg:w="1"/><text x="25.5695%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.3195%" y="517" width="0.0799%" height="15" fill="rgb(233,51,29)" fg:x="317" fg:w="1"/><text x="25.5695%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.3195%" y="501" width="0.0799%" height="15" fill="rgb(226,58,20)" fg:x="317" fg:w="1"/><text x="25.5695%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.3195%" y="485" width="0.0799%" height="15" fill="rgb(208,98,7)" fg:x="317" fg:w="1"/><text x="25.5695%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.3195%" y="469" width="0.0799%" height="15" fill="rgb(228,143,44)" fg:x="317" fg:w="1"/><text x="25.5695%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.3195%" y="453" width="0.0799%" height="15" fill="rgb(246,55,38)" fg:x="317" fg:w="1"/><text x="25.5695%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.3195%" y="437" width="0.0799%" height="15" fill="rgb(247,87,16)" fg:x="317" fg:w="1"/><text x="25.5695%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.3195%" y="421" width="0.0799%" height="15" fill="rgb(234,129,42)" fg:x="317" fg:w="1"/><text x="25.5695%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.3195%" y="405" width="0.0799%" height="15" fill="rgb(220,82,16)" fg:x="317" fg:w="1"/><text x="25.5695%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.3195%" y="389" width="0.0799%" height="15" fill="rgb(211,88,4)" fg:x="317" fg:w="1"/><text x="25.5695%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.3195%" y="373" width="0.0799%" height="15" fill="rgb(248,151,21)" fg:x="317" fg:w="1"/><text x="25.5695%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.3195%" y="357" width="0.0799%" height="15" fill="rgb(238,163,6)" fg:x="317" fg:w="1"/><text x="25.5695%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="25.1597%" y="645" width="0.3195%" height="15" fill="rgb(209,183,11)" fg:x="315" fg:w="4"/><text x="25.4097%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="25.1597%" y="629" width="0.3195%" height="15" fill="rgb(219,37,20)" fg:x="315" fg:w="4"/><text x="25.4097%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="25.2396%" y="613" width="0.2396%" height="15" fill="rgb(210,158,4)" fg:x="316" fg:w="3"/><text x="25.4896%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="25.2396%" y="597" width="0.2396%" height="15" fill="rgb(221,167,53)" fg:x="316" fg:w="3"/><text x="25.4896%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.3994%" y="581" width="0.0799%" height="15" fill="rgb(237,151,45)" fg:x="318" fg:w="1"/><text x="25.6494%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="25.4792%" y="629" width="0.0799%" height="15" fill="rgb(231,39,3)" fg:x="319" fg:w="1"/><text x="25.7292%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.4792%" y="613" width="0.0799%" height="15" fill="rgb(212,167,28)" fg:x="319" fg:w="1"/><text x="25.7292%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.4792%" y="597" width="0.0799%" height="15" fill="rgb(232,178,8)" fg:x="319" fg:w="1"/><text x="25.7292%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="25.4792%" y="581" width="0.0799%" height="15" fill="rgb(225,151,20)" fg:x="319" fg:w="1"/><text x="25.7292%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (8 samples, 0.64%)</title><rect x="25.0799%" y="677" width="0.6390%" height="15" fill="rgb(238,3,37)" fg:x="314" fg:w="8"/><text x="25.3299%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (8 samples, 0.64%)</title><rect x="25.0799%" y="661" width="0.6390%" height="15" fill="rgb(251,147,42)" fg:x="314" fg:w="8"/><text x="25.3299%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="25.4792%" y="645" width="0.2396%" height="15" fill="rgb(208,173,10)" fg:x="319" fg:w="3"/><text x="25.7292%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="25.5591%" y="629" width="0.1597%" height="15" fill="rgb(246,225,4)" fg:x="320" fg:w="2"/><text x="25.8091%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="25.5591%" y="613" width="0.1597%" height="15" fill="rgb(248,102,6)" fg:x="320" fg:w="2"/><text x="25.8091%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="25.6390%" y="597" width="0.0799%" height="15" fill="rgb(232,6,21)" fg:x="321" fg:w="1"/><text x="25.8890%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.6390%" y="581" width="0.0799%" height="15" fill="rgb(221,179,22)" fg:x="321" fg:w="1"/><text x="25.8890%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6390%" y="565" width="0.0799%" height="15" fill="rgb(252,50,20)" fg:x="321" fg:w="1"/><text x="25.8890%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6390%" y="549" width="0.0799%" height="15" fill="rgb(222,56,38)" fg:x="321" fg:w="1"/><text x="25.8890%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7188%" y="645" width="0.0799%" height="15" fill="rgb(206,193,29)" fg:x="322" fg:w="1"/><text x="25.9688%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.7188%" y="629" width="0.0799%" height="15" fill="rgb(239,192,45)" fg:x="322" fg:w="1"/><text x="25.9688%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7188%" y="613" width="0.0799%" height="15" fill="rgb(254,18,36)" fg:x="322" fg:w="1"/><text x="25.9688%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.7188%" y="597" width="0.0799%" height="15" fill="rgb(221,127,11)" fg:x="322" fg:w="1"/><text x="25.9688%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.7188%" y="581" width="0.0799%" height="15" fill="rgb(234,146,35)" fg:x="322" fg:w="1"/><text x="25.9688%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.7188%" y="565" width="0.0799%" height="15" fill="rgb(254,201,37)" fg:x="322" fg:w="1"/><text x="25.9688%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.7188%" y="549" width="0.0799%" height="15" fill="rgb(211,202,23)" fg:x="322" fg:w="1"/><text x="25.9688%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.7188%" y="533" width="0.0799%" height="15" fill="rgb(237,91,2)" fg:x="322" fg:w="1"/><text x="25.9688%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.7188%" y="517" width="0.0799%" height="15" fill="rgb(226,228,36)" fg:x="322" fg:w="1"/><text x="25.9688%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.7188%" y="501" width="0.0799%" height="15" fill="rgb(213,63,50)" fg:x="322" fg:w="1"/><text x="25.9688%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.7188%" y="485" width="0.0799%" height="15" fill="rgb(235,194,19)" fg:x="322" fg:w="1"/><text x="25.9688%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.7188%" y="469" width="0.0799%" height="15" fill="rgb(207,204,18)" fg:x="322" fg:w="1"/><text x="25.9688%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.7188%" y="453" width="0.0799%" height="15" fill="rgb(248,8,7)" fg:x="322" fg:w="1"/><text x="25.9688%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.7188%" y="437" width="0.0799%" height="15" fill="rgb(223,145,47)" fg:x="322" fg:w="1"/><text x="25.9688%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7188%" y="421" width="0.0799%" height="15" fill="rgb(228,84,11)" fg:x="322" fg:w="1"/><text x="25.9688%" y="431.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="25.7188%" y="661" width="0.1597%" height="15" fill="rgb(218,76,45)" fg:x="322" fg:w="2"/><text x="25.9688%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.7987%" y="645" width="0.0799%" height="15" fill="rgb(223,80,15)" fg:x="323" fg:w="1"/><text x="26.0487%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.7987%" y="629" width="0.0799%" height="15" fill="rgb(219,218,33)" fg:x="323" fg:w="1"/><text x="26.0487%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.7987%" y="613" width="0.0799%" height="15" fill="rgb(208,51,11)" fg:x="323" fg:w="1"/><text x="26.0487%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.7987%" y="597" width="0.0799%" height="15" fill="rgb(229,165,39)" fg:x="323" fg:w="1"/><text x="26.0487%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8786%" y="565" width="0.0799%" height="15" fill="rgb(241,100,24)" fg:x="324" fg:w="1"/><text x="26.1286%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="25.8786%" y="629" width="0.2396%" height="15" fill="rgb(228,14,23)" fg:x="324" fg:w="3"/><text x="26.1286%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="25.8786%" y="613" width="0.2396%" height="15" fill="rgb(247,116,52)" fg:x="324" fg:w="3"/><text x="26.1286%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (3 samples, 0.24%)</title><rect x="25.8786%" y="597" width="0.2396%" height="15" fill="rgb(216,149,33)" fg:x="324" fg:w="3"/><text x="26.1286%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="25.8786%" y="581" width="0.2396%" height="15" fill="rgb(238,142,29)" fg:x="324" fg:w="3"/><text x="26.1286%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.9585%" y="565" width="0.1597%" height="15" fill="rgb(224,83,40)" fg:x="325" fg:w="2"/><text x="26.2085%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.0383%" y="549" width="0.0799%" height="15" fill="rgb(234,165,11)" fg:x="326" fg:w="1"/><text x="26.2883%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.0383%" y="533" width="0.0799%" height="15" fill="rgb(215,96,23)" fg:x="326" fg:w="1"/><text x="26.2883%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.48%)</title><rect x="25.7188%" y="677" width="0.4792%" height="15" fill="rgb(233,179,26)" fg:x="322" fg:w="6"/><text x="25.9688%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="25.8786%" y="661" width="0.3195%" height="15" fill="rgb(225,129,33)" fg:x="324" fg:w="4"/><text x="26.1286%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (4 samples, 0.32%)</title><rect x="25.8786%" y="645" width="0.3195%" height="15" fill="rgb(237,49,13)" fg:x="324" fg:w="4"/><text x="26.1286%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="26.1182%" y="629" width="0.0799%" height="15" fill="rgb(211,3,31)" fg:x="327" fg:w="1"/><text x="26.3682%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="26.1182%" y="613" width="0.0799%" height="15" fill="rgb(216,152,19)" fg:x="327" fg:w="1"/><text x="26.3682%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="26.1182%" y="597" width="0.0799%" height="15" fill="rgb(251,121,35)" fg:x="327" fg:w="1"/><text x="26.3682%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.1182%" y="581" width="0.0799%" height="15" fill="rgb(210,217,47)" fg:x="327" fg:w="1"/><text x="26.3682%" y="591.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="26.1182%" y="565" width="0.0799%" height="15" fill="rgb(244,116,22)" fg:x="327" fg:w="1"/><text x="26.3682%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.1182%" y="549" width="0.0799%" height="15" fill="rgb(228,17,21)" fg:x="327" fg:w="1"/><text x="26.3682%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.1182%" y="533" width="0.0799%" height="15" fill="rgb(240,149,34)" fg:x="327" fg:w="1"/><text x="26.3682%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.1182%" y="517" width="0.0799%" height="15" fill="rgb(208,125,47)" fg:x="327" fg:w="1"/><text x="26.3682%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.1182%" y="501" width="0.0799%" height="15" fill="rgb(249,186,39)" fg:x="327" fg:w="1"/><text x="26.3682%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="26.1981%" y="613" width="0.0799%" height="15" fill="rgb(240,220,33)" fg:x="328" fg:w="1"/><text x="26.4481%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.1981%" y="597" width="0.0799%" height="15" fill="rgb(243,110,23)" fg:x="328" fg:w="1"/><text x="26.4481%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.1981%" y="581" width="0.0799%" height="15" fill="rgb(219,163,46)" fg:x="328" fg:w="1"/><text x="26.4481%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.1981%" y="565" width="0.0799%" height="15" fill="rgb(216,126,30)" fg:x="328" fg:w="1"/><text x="26.4481%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="26.1981%" y="661" width="0.1597%" height="15" fill="rgb(208,139,11)" fg:x="328" fg:w="2"/><text x="26.4481%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="26.1981%" y="645" width="0.1597%" height="15" fill="rgb(213,118,36)" fg:x="328" fg:w="2"/><text x="26.4481%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="26.1981%" y="629" width="0.1597%" height="15" fill="rgb(226,43,17)" fg:x="328" fg:w="2"/><text x="26.4481%" y="639.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="26.2780%" y="613" width="0.0799%" height="15" fill="rgb(254,217,4)" fg:x="329" fg:w="1"/><text x="26.5280%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="26.3578%" y="661" width="0.0799%" height="15" fill="rgb(210,134,47)" fg:x="330" fg:w="1"/><text x="26.6078%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="26.3578%" y="645" width="0.0799%" height="15" fill="rgb(237,24,49)" fg:x="330" fg:w="1"/><text x="26.6078%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.3578%" y="629" width="0.0799%" height="15" fill="rgb(251,39,46)" fg:x="330" fg:w="1"/><text x="26.6078%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="26.3578%" y="613" width="0.0799%" height="15" fill="rgb(251,220,3)" fg:x="330" fg:w="1"/><text x="26.6078%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="26.3578%" y="597" width="0.0799%" height="15" fill="rgb(228,105,12)" fg:x="330" fg:w="1"/><text x="26.6078%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="26.4377%" y="645" width="0.0799%" height="15" fill="rgb(215,196,1)" fg:x="331" fg:w="1"/><text x="26.6877%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.4377%" y="629" width="0.0799%" height="15" fill="rgb(214,33,39)" fg:x="331" fg:w="1"/><text x="26.6877%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.4377%" y="613" width="0.0799%" height="15" fill="rgb(220,19,52)" fg:x="331" fg:w="1"/><text x="26.6877%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.4377%" y="597" width="0.0799%" height="15" fill="rgb(221,78,38)" fg:x="331" fg:w="1"/><text x="26.6877%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.4377%" y="581" width="0.0799%" height="15" fill="rgb(253,30,16)" fg:x="331" fg:w="1"/><text x="26.6877%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5176%" y="645" width="0.0799%" height="15" fill="rgb(242,65,0)" fg:x="332" fg:w="1"/><text x="26.7676%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5974%" y="581" width="0.0799%" height="15" fill="rgb(235,201,12)" fg:x="333" fg:w="1"/><text x="26.8474%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5974%" y="565" width="0.0799%" height="15" fill="rgb(233,161,9)" fg:x="333" fg:w="1"/><text x="26.8474%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5974%" y="549" width="0.0799%" height="15" fill="rgb(241,207,41)" fg:x="333" fg:w="1"/><text x="26.8474%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="26.5974%" y="613" width="0.1597%" height="15" fill="rgb(212,69,46)" fg:x="333" fg:w="2"/><text x="26.8474%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="26.5974%" y="597" width="0.1597%" height="15" fill="rgb(239,69,45)" fg:x="333" fg:w="2"/><text x="26.8474%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.6773%" y="581" width="0.0799%" height="15" fill="rgb(242,117,48)" fg:x="334" fg:w="1"/><text x="26.9273%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.6773%" y="565" width="0.0799%" height="15" fill="rgb(228,41,36)" fg:x="334" fg:w="1"/><text x="26.9273%" y="575.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="26.1981%" y="677" width="0.6390%" height="15" fill="rgb(212,3,32)" fg:x="328" fg:w="8"/><text x="26.4481%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="26.4377%" y="661" width="0.3994%" height="15" fill="rgb(233,41,49)" fg:x="331" fg:w="5"/><text x="26.6877%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="26.5974%" y="645" width="0.2396%" height="15" fill="rgb(252,170,49)" fg:x="333" fg:w="3"/><text x="26.8474%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="26.5974%" y="629" width="0.2396%" height="15" fill="rgb(229,53,26)" fg:x="333" fg:w="3"/><text x="26.8474%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="26.7572%" y="613" width="0.0799%" height="15" fill="rgb(217,157,12)" fg:x="335" fg:w="1"/><text x="27.0072%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="26.7572%" y="597" width="0.0799%" height="15" fill="rgb(227,17,9)" fg:x="335" fg:w="1"/><text x="27.0072%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.7572%" y="581" width="0.0799%" height="15" fill="rgb(218,84,12)" fg:x="335" fg:w="1"/><text x="27.0072%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.7572%" y="565" width="0.0799%" height="15" fill="rgb(212,79,24)" fg:x="335" fg:w="1"/><text x="27.0072%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (135 samples, 10.78%)</title><rect x="16.1342%" y="693" width="10.7827%" height="15" fill="rgb(217,222,37)" fg:x="202" fg:w="135"/><text x="16.3842%" y="703.50">plugins_core::bu..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="26.8371%" y="677" width="0.0799%" height="15" fill="rgb(246,208,8)" fg:x="336" fg:w="1"/><text x="27.0871%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="26.8371%" y="661" width="0.0799%" height="15" fill="rgb(244,133,10)" fg:x="336" fg:w="1"/><text x="27.0871%" y="671.50"></text></g><g><title>plugins_core::fashion::model::_::&lt;impl serde::ser::Serialize for plugins_core::fashion::model::Wearing&gt;::serialize (1 samples, 0.08%)</title><rect x="26.8371%" y="645" width="0.0799%" height="15" fill="rgb(209,219,41)" fg:x="336" fg:w="1"/><text x="27.0871%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="26.9169%" y="661" width="0.0799%" height="15" fill="rgb(253,175,45)" fg:x="337" fg:w="1"/><text x="27.1669%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="26.9169%" y="645" width="0.0799%" height="15" fill="rgb(235,100,37)" fg:x="337" fg:w="1"/><text x="27.1669%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.9169%" y="629" width="0.0799%" height="15" fill="rgb(225,87,19)" fg:x="337" fg:w="1"/><text x="27.1669%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="26.9169%" y="613" width="0.0799%" height="15" fill="rgb(217,152,17)" fg:x="337" fg:w="1"/><text x="27.1669%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="26.9169%" y="597" width="0.0799%" height="15" fill="rgb(235,72,13)" fg:x="337" fg:w="1"/><text x="27.1669%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.9169%" y="581" width="0.0799%" height="15" fill="rgb(233,140,18)" fg:x="337" fg:w="1"/><text x="27.1669%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9169%" y="565" width="0.0799%" height="15" fill="rgb(207,212,28)" fg:x="337" fg:w="1"/><text x="27.1669%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9169%" y="549" width="0.0799%" height="15" fill="rgb(220,130,25)" fg:x="337" fg:w="1"/><text x="27.1669%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.9968%" y="661" width="0.0799%" height="15" fill="rgb(205,55,34)" fg:x="338" fg:w="1"/><text x="27.2468%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="26.9968%" y="645" width="0.0799%" height="15" fill="rgb(237,54,35)" fg:x="338" fg:w="1"/><text x="27.2468%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="26.9968%" y="629" width="0.0799%" height="15" fill="rgb(208,67,23)" fg:x="338" fg:w="1"/><text x="27.2468%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="26.9968%" y="613" width="0.0799%" height="15" fill="rgb(206,207,50)" fg:x="338" fg:w="1"/><text x="27.2468%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.9968%" y="597" width="0.0799%" height="15" fill="rgb(213,211,42)" fg:x="338" fg:w="1"/><text x="27.2468%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.0767%" y="613" width="0.0799%" height="15" fill="rgb(252,197,50)" fg:x="339" fg:w="1"/><text x="27.3267%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="27.1565%" y="549" width="0.1597%" height="15" fill="rgb(251,211,41)" fg:x="340" fg:w="2"/><text x="27.4065%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="27.0767%" y="645" width="0.3195%" height="15" fill="rgb(229,211,5)" fg:x="339" fg:w="4"/><text x="27.3267%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="27.0767%" y="629" width="0.3195%" height="15" fill="rgb(239,36,31)" fg:x="339" fg:w="4"/><text x="27.3267%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="27.1565%" y="613" width="0.2396%" height="15" fill="rgb(248,67,31)" fg:x="340" fg:w="3"/><text x="27.4065%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="27.1565%" y="597" width="0.2396%" height="15" fill="rgb(249,55,44)" fg:x="340" fg:w="3"/><text x="27.4065%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="27.1565%" y="581" width="0.2396%" height="15" fill="rgb(216,82,12)" fg:x="340" fg:w="3"/><text x="27.4065%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="27.1565%" y="565" width="0.2396%" height="15" fill="rgb(242,174,1)" fg:x="340" fg:w="3"/><text x="27.4065%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.3163%" y="549" width="0.0799%" height="15" fill="rgb(208,120,29)" fg:x="342" fg:w="1"/><text x="27.5663%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.3163%" y="533" width="0.0799%" height="15" fill="rgb(221,105,43)" fg:x="342" fg:w="1"/><text x="27.5663%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.3163%" y="517" width="0.0799%" height="15" fill="rgb(234,124,22)" fg:x="342" fg:w="1"/><text x="27.5663%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="27.3962%" y="629" width="0.0799%" height="15" fill="rgb(212,23,30)" fg:x="343" fg:w="1"/><text x="27.6462%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="27.3962%" y="613" width="0.0799%" height="15" fill="rgb(219,122,53)" fg:x="343" fg:w="1"/><text x="27.6462%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="27.3962%" y="597" width="0.0799%" height="15" fill="rgb(248,84,24)" fg:x="343" fg:w="1"/><text x="27.6462%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="27.4760%" y="565" width="0.0799%" height="15" fill="rgb(245,115,18)" fg:x="344" fg:w="1"/><text x="27.7260%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.4760%" y="549" width="0.0799%" height="15" fill="rgb(227,176,51)" fg:x="344" fg:w="1"/><text x="27.7260%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="27.4760%" y="581" width="0.1597%" height="15" fill="rgb(229,63,42)" fg:x="344" fg:w="2"/><text x="27.7260%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.5559%" y="565" width="0.0799%" height="15" fill="rgb(247,202,24)" fg:x="345" fg:w="1"/><text x="27.8059%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.5559%" y="549" width="0.0799%" height="15" fill="rgb(244,173,20)" fg:x="345" fg:w="1"/><text x="27.8059%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="27.5559%" y="533" width="0.0799%" height="15" fill="rgb(242,81,47)" fg:x="345" fg:w="1"/><text x="27.8059%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.5559%" y="517" width="0.0799%" height="15" fill="rgb(231,185,54)" fg:x="345" fg:w="1"/><text x="27.8059%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="27.4760%" y="613" width="0.2396%" height="15" fill="rgb(243,55,32)" fg:x="344" fg:w="3"/><text x="27.7260%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="27.4760%" y="597" width="0.2396%" height="15" fill="rgb(208,167,19)" fg:x="344" fg:w="3"/><text x="27.7260%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="27.6358%" y="581" width="0.0799%" height="15" fill="rgb(231,72,35)" fg:x="346" fg:w="1"/><text x="27.8858%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.6358%" y="565" width="0.0799%" height="15" fill="rgb(250,173,51)" fg:x="346" fg:w="1"/><text x="27.8858%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.7157%" y="581" width="0.0799%" height="15" fill="rgb(209,5,22)" fg:x="347" fg:w="1"/><text x="27.9657%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="27.7955%" y="581" width="0.1597%" height="15" fill="rgb(250,174,19)" fg:x="348" fg:w="2"/><text x="28.0455%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.8754%" y="565" width="0.0799%" height="15" fill="rgb(217,3,49)" fg:x="349" fg:w="1"/><text x="28.1254%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.8754%" y="549" width="0.0799%" height="15" fill="rgb(218,225,5)" fg:x="349" fg:w="1"/><text x="28.1254%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="27.4760%" y="629" width="0.5591%" height="15" fill="rgb(236,89,11)" fg:x="344" fg:w="7"/><text x="27.7260%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="27.7157%" y="613" width="0.3195%" height="15" fill="rgb(206,33,28)" fg:x="347" fg:w="4"/><text x="27.9657%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="27.7157%" y="597" width="0.3195%" height="15" fill="rgb(241,56,42)" fg:x="347" fg:w="4"/><text x="27.9657%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="27.9553%" y="581" width="0.0799%" height="15" fill="rgb(222,44,11)" fg:x="350" fg:w="1"/><text x="28.2053%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="27.9553%" y="565" width="0.0799%" height="15" fill="rgb(234,111,20)" fg:x="350" fg:w="1"/><text x="28.2053%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.9553%" y="549" width="0.0799%" height="15" fill="rgb(237,77,6)" fg:x="350" fg:w="1"/><text x="28.2053%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.9553%" y="533" width="0.0799%" height="15" fill="rgb(235,111,23)" fg:x="350" fg:w="1"/><text x="28.2053%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.9553%" y="517" width="0.0799%" height="15" fill="rgb(251,135,29)" fg:x="350" fg:w="1"/><text x="28.2053%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.9553%" y="501" width="0.0799%" height="15" fill="rgb(217,57,1)" fg:x="350" fg:w="1"/><text x="28.2053%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.04%)</title><rect x="27.0767%" y="661" width="1.0383%" height="15" fill="rgb(249,119,31)" fg:x="339" fg:w="13"/><text x="27.3267%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="27.3962%" y="645" width="0.7188%" height="15" fill="rgb(233,164,33)" fg:x="343" fg:w="9"/><text x="27.6462%" y="655.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="28.0351%" y="629" width="0.0799%" height="15" fill="rgb(250,217,43)" fg:x="351" fg:w="1"/><text x="28.2851%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="28.0351%" y="613" width="0.0799%" height="15" fill="rgb(232,154,50)" fg:x="351" fg:w="1"/><text x="28.2851%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="28.0351%" y="597" width="0.0799%" height="15" fill="rgb(227,190,8)" fg:x="351" fg:w="1"/><text x="28.2851%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.0351%" y="581" width="0.0799%" height="15" fill="rgb(209,217,32)" fg:x="351" fg:w="1"/><text x="28.2851%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.0351%" y="565" width="0.0799%" height="15" fill="rgb(243,203,50)" fg:x="351" fg:w="1"/><text x="28.2851%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (16 samples, 1.28%)</title><rect x="26.9169%" y="693" width="1.2780%" height="15" fill="rgb(232,152,27)" fg:x="337" fg:w="16"/><text x="27.1669%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (16 samples, 1.28%)</title><rect x="26.9169%" y="677" width="1.2780%" height="15" fill="rgb(240,34,29)" fg:x="337" fg:w="16"/><text x="27.1669%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="28.1150%" y="661" width="0.0799%" height="15" fill="rgb(215,185,52)" fg:x="352" fg:w="1"/><text x="28.3650%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="28.1150%" y="645" width="0.0799%" height="15" fill="rgb(240,89,49)" fg:x="352" fg:w="1"/><text x="28.3650%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="28.1150%" y="629" width="0.0799%" height="15" fill="rgb(225,12,52)" fg:x="352" fg:w="1"/><text x="28.3650%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.1150%" y="613" width="0.0799%" height="15" fill="rgb(239,128,45)" fg:x="352" fg:w="1"/><text x="28.3650%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.1150%" y="597" width="0.0799%" height="15" fill="rgb(211,78,47)" fg:x="352" fg:w="1"/><text x="28.3650%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="28.1150%" y="581" width="0.0799%" height="15" fill="rgb(232,31,21)" fg:x="352" fg:w="1"/><text x="28.3650%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.2748%" y="581" width="0.0799%" height="15" fill="rgb(222,168,14)" fg:x="354" fg:w="1"/><text x="28.5248%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="28.2748%" y="661" width="0.1597%" height="15" fill="rgb(209,128,24)" fg:x="354" fg:w="2"/><text x="28.5248%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.2748%" y="645" width="0.1597%" height="15" fill="rgb(249,35,13)" fg:x="354" fg:w="2"/><text x="28.5248%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.2748%" y="629" width="0.1597%" height="15" fill="rgb(218,7,2)" fg:x="354" fg:w="2"/><text x="28.5248%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="28.2748%" y="613" width="0.1597%" height="15" fill="rgb(238,107,27)" fg:x="354" fg:w="2"/><text x="28.5248%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.2748%" y="597" width="0.1597%" height="15" fill="rgb(217,88,38)" fg:x="354" fg:w="2"/><text x="28.5248%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.3546%" y="581" width="0.0799%" height="15" fill="rgb(230,207,0)" fg:x="355" fg:w="1"/><text x="28.6046%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.3546%" y="565" width="0.0799%" height="15" fill="rgb(249,64,54)" fg:x="355" fg:w="1"/><text x="28.6046%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="28.4345%" y="661" width="0.0799%" height="15" fill="rgb(231,7,11)" fg:x="356" fg:w="1"/><text x="28.6845%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="28.4345%" y="645" width="0.0799%" height="15" fill="rgb(205,149,21)" fg:x="356" fg:w="1"/><text x="28.6845%" y="655.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="28.5144%" y="661" width="0.0799%" height="15" fill="rgb(215,126,34)" fg:x="357" fg:w="1"/><text x="28.7644%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.5144%" y="645" width="0.0799%" height="15" fill="rgb(241,132,45)" fg:x="357" fg:w="1"/><text x="28.7644%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="28.5144%" y="629" width="0.0799%" height="15" fill="rgb(252,69,32)" fg:x="357" fg:w="1"/><text x="28.7644%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.5942%" y="581" width="0.0799%" height="15" fill="rgb(232,204,19)" fg:x="358" fg:w="1"/><text x="28.8442%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (7 samples, 0.56%)</title><rect x="28.1949%" y="677" width="0.5591%" height="15" fill="rgb(249,15,47)" fg:x="353" fg:w="7"/><text x="28.4449%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="28.5942%" y="661" width="0.1597%" height="15" fill="rgb(209,227,23)" fg:x="358" fg:w="2"/><text x="28.8442%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="28.5942%" y="645" width="0.1597%" height="15" fill="rgb(248,92,24)" fg:x="358" fg:w="2"/><text x="28.8442%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="28.5942%" y="629" width="0.1597%" height="15" fill="rgb(247,59,2)" fg:x="358" fg:w="2"/><text x="28.8442%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="28.5942%" y="613" width="0.1597%" height="15" fill="rgb(221,30,5)" fg:x="358" fg:w="2"/><text x="28.8442%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="28.5942%" y="597" width="0.1597%" height="15" fill="rgb(208,108,53)" fg:x="358" fg:w="2"/><text x="28.8442%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.6741%" y="581" width="0.0799%" height="15" fill="rgb(211,183,26)" fg:x="359" fg:w="1"/><text x="28.9241%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.7540%" y="677" width="0.0799%" height="15" fill="rgb(232,132,4)" fg:x="360" fg:w="1"/><text x="29.0040%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.7540%" y="661" width="0.0799%" height="15" fill="rgb(253,128,37)" fg:x="360" fg:w="1"/><text x="29.0040%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="28.7540%" y="645" width="0.0799%" height="15" fill="rgb(221,58,24)" fg:x="360" fg:w="1"/><text x="29.0040%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.7540%" y="629" width="0.0799%" height="15" fill="rgb(230,54,45)" fg:x="360" fg:w="1"/><text x="29.0040%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.7540%" y="613" width="0.0799%" height="15" fill="rgb(254,21,18)" fg:x="360" fg:w="1"/><text x="29.0040%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="28.8339%" y="677" width="0.0799%" height="15" fill="rgb(221,108,0)" fg:x="361" fg:w="1"/><text x="29.0839%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="28.8339%" y="661" width="0.0799%" height="15" fill="rgb(206,95,1)" fg:x="361" fg:w="1"/><text x="29.0839%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="28.8339%" y="645" width="0.0799%" height="15" fill="rgb(237,52,5)" fg:x="361" fg:w="1"/><text x="29.0839%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="28.9137%" y="661" width="0.1597%" height="15" fill="rgb(218,150,34)" fg:x="362" fg:w="2"/><text x="29.1637%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="28.9137%" y="645" width="0.1597%" height="15" fill="rgb(235,194,28)" fg:x="362" fg:w="2"/><text x="29.1637%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.9936%" y="629" width="0.0799%" height="15" fill="rgb(245,92,18)" fg:x="363" fg:w="1"/><text x="29.2436%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9936%" y="613" width="0.0799%" height="15" fill="rgb(253,203,53)" fg:x="363" fg:w="1"/><text x="29.2436%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="28.9936%" y="597" width="0.0799%" height="15" fill="rgb(249,185,47)" fg:x="363" fg:w="1"/><text x="29.2436%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9936%" y="581" width="0.0799%" height="15" fill="rgb(252,194,52)" fg:x="363" fg:w="1"/><text x="29.2436%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.9936%" y="565" width="0.0799%" height="15" fill="rgb(210,53,36)" fg:x="363" fg:w="1"/><text x="29.2436%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9936%" y="549" width="0.0799%" height="15" fill="rgb(237,37,25)" fg:x="363" fg:w="1"/><text x="29.2436%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.9936%" y="533" width="0.0799%" height="15" fill="rgb(242,116,27)" fg:x="363" fg:w="1"/><text x="29.2436%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.9936%" y="517" width="0.0799%" height="15" fill="rgb(213,185,26)" fg:x="363" fg:w="1"/><text x="29.2436%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="29.2332%" y="645" width="0.0799%" height="15" fill="rgb(225,204,8)" fg:x="366" fg:w="1"/><text x="29.4832%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.2332%" y="629" width="0.0799%" height="15" fill="rgb(254,111,37)" fg:x="366" fg:w="1"/><text x="29.4832%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.2332%" y="613" width="0.0799%" height="15" fill="rgb(242,35,9)" fg:x="366" fg:w="1"/><text x="29.4832%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="29.2332%" y="597" width="0.0799%" height="15" fill="rgb(232,138,49)" fg:x="366" fg:w="1"/><text x="29.4832%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.2332%" y="581" width="0.0799%" height="15" fill="rgb(247,56,4)" fg:x="366" fg:w="1"/><text x="29.4832%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.2332%" y="565" width="0.0799%" height="15" fill="rgb(226,179,17)" fg:x="366" fg:w="1"/><text x="29.4832%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="29.3131%" y="645" width="0.0799%" height="15" fill="rgb(216,163,45)" fg:x="367" fg:w="1"/><text x="29.5631%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="29.5527%" y="597" width="0.0799%" height="15" fill="rgb(211,157,3)" fg:x="370" fg:w="1"/><text x="29.8027%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="29.3930%" y="629" width="0.3195%" height="15" fill="rgb(234,44,20)" fg:x="368" fg:w="4"/><text x="29.6430%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="29.4728%" y="613" width="0.2396%" height="15" fill="rgb(254,138,23)" fg:x="369" fg:w="3"/><text x="29.7228%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="29.6326%" y="597" width="0.0799%" height="15" fill="rgb(206,119,39)" fg:x="371" fg:w="1"/><text x="29.8826%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.6326%" y="581" width="0.0799%" height="15" fill="rgb(231,105,52)" fg:x="371" fg:w="1"/><text x="29.8826%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.6326%" y="565" width="0.0799%" height="15" fill="rgb(250,20,5)" fg:x="371" fg:w="1"/><text x="29.8826%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="29.7125%" y="629" width="0.0799%" height="15" fill="rgb(215,198,30)" fg:x="372" fg:w="1"/><text x="29.9625%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.7125%" y="613" width="0.0799%" height="15" fill="rgb(246,142,8)" fg:x="372" fg:w="1"/><text x="29.9625%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="29.7125%" y="597" width="0.0799%" height="15" fill="rgb(243,26,38)" fg:x="372" fg:w="1"/><text x="29.9625%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="29.9521%" y="597" width="0.0799%" height="15" fill="rgb(205,133,28)" fg:x="375" fg:w="1"/><text x="30.2021%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.9521%" y="581" width="0.0799%" height="15" fill="rgb(212,34,0)" fg:x="375" fg:w="1"/><text x="30.2021%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (13 samples, 1.04%)</title><rect x="29.0735%" y="661" width="1.0383%" height="15" fill="rgb(251,226,22)" fg:x="364" fg:w="13"/><text x="29.3235%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.72%)</title><rect x="29.3930%" y="645" width="0.7188%" height="15" fill="rgb(252,119,9)" fg:x="368" fg:w="9"/><text x="29.6430%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="29.7923%" y="629" width="0.3195%" height="15" fill="rgb(213,150,50)" fg:x="373" fg:w="4"/><text x="30.0423%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="29.7923%" y="613" width="0.3195%" height="15" fill="rgb(212,24,39)" fg:x="373" fg:w="4"/><text x="30.0423%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="30.0319%" y="597" width="0.0799%" height="15" fill="rgb(213,46,39)" fg:x="376" fg:w="1"/><text x="30.2819%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.0319%" y="581" width="0.0799%" height="15" fill="rgb(239,106,12)" fg:x="376" fg:w="1"/><text x="30.2819%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (251 samples, 20.05%)</title><rect x="10.1438%" y="709" width="20.0479%" height="15" fill="rgb(249,229,21)" fg:x="127" fg:w="251"/><text x="10.3938%" y="719.50">&lt;tests::HoldingKeyInVessel as t..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (25 samples, 2.00%)</title><rect x="28.1949%" y="693" width="1.9968%" height="15" fill="rgb(212,158,3)" fg:x="353" fg:w="25"/><text x="28.4449%" y="703.50">p..</text></g><g><title>plugins_core::build::Build::save (16 samples, 1.28%)</title><rect x="28.9137%" y="677" width="1.2780%" height="15" fill="rgb(253,26,48)" fg:x="362" fg:w="16"/><text x="29.1637%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.1118%" y="661" width="0.0799%" height="15" fill="rgb(238,178,20)" fg:x="377" fg:w="1"/><text x="30.3618%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="30.1917%" y="709" width="0.0799%" height="15" fill="rgb(208,86,15)" fg:x="378" fg:w="1"/><text x="30.4417%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="30.1917%" y="693" width="0.0799%" height="15" fill="rgb(239,42,53)" fg:x="378" fg:w="1"/><text x="30.4417%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="30.1917%" y="677" width="0.0799%" height="15" fill="rgb(245,226,8)" fg:x="378" fg:w="1"/><text x="30.4417%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="30.2716%" y="693" width="0.1597%" height="15" fill="rgb(216,176,32)" fg:x="379" fg:w="2"/><text x="30.5216%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (2 samples, 0.16%)</title><rect x="30.2716%" y="677" width="0.1597%" height="15" fill="rgb(231,186,21)" fg:x="379" fg:w="2"/><text x="30.5216%" y="687.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.4313%" y="693" width="0.0799%" height="15" fill="rgb(205,95,49)" fg:x="381" fg:w="1"/><text x="30.6813%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="30.5112%" y="693" width="0.0799%" height="15" fill="rgb(217,145,8)" fg:x="382" fg:w="1"/><text x="30.7612%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="30.5112%" y="677" width="0.0799%" height="15" fill="rgb(239,144,48)" fg:x="382" fg:w="1"/><text x="30.7612%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="30.5112%" y="661" width="0.0799%" height="15" fill="rgb(214,189,23)" fg:x="382" fg:w="1"/><text x="30.7612%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="30.5112%" y="645" width="0.0799%" height="15" fill="rgb(229,157,17)" fg:x="382" fg:w="1"/><text x="30.7612%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="30.5112%" y="629" width="0.0799%" height="15" fill="rgb(230,5,48)" fg:x="382" fg:w="1"/><text x="30.7612%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="30.5112%" y="613" width="0.0799%" height="15" fill="rgb(224,156,48)" fg:x="382" fg:w="1"/><text x="30.7612%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="30.5112%" y="597" width="0.0799%" height="15" fill="rgb(223,14,29)" fg:x="382" fg:w="1"/><text x="30.7612%" y="607.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="30.5112%" y="581" width="0.0799%" height="15" fill="rgb(229,96,36)" fg:x="382" fg:w="1"/><text x="30.7612%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="30.6709%" y="661" width="0.1597%" height="15" fill="rgb(231,102,53)" fg:x="384" fg:w="2"/><text x="30.9209%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="30.8307%" y="645" width="0.0799%" height="15" fill="rgb(210,77,38)" fg:x="386" fg:w="1"/><text x="31.0807%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="30.8307%" y="629" width="0.0799%" height="15" fill="rgb(235,131,6)" fg:x="386" fg:w="1"/><text x="31.0807%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="30.8307%" y="661" width="0.1597%" height="15" fill="rgb(252,55,38)" fg:x="386" fg:w="2"/><text x="31.0807%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.9105%" y="645" width="0.0799%" height="15" fill="rgb(246,38,14)" fg:x="387" fg:w="1"/><text x="31.1605%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (6 samples, 0.48%)</title><rect x="30.9904%" y="597" width="0.4792%" height="15" fill="rgb(242,27,5)" fg:x="388" fg:w="6"/><text x="31.2404%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="31.0703%" y="581" width="0.3994%" height="15" fill="rgb(228,65,35)" fg:x="389" fg:w="5"/><text x="31.3203%" y="591.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="31.1502%" y="565" width="0.3195%" height="15" fill="rgb(245,93,11)" fg:x="390" fg:w="4"/><text x="31.4002%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="31.1502%" y="549" width="0.3195%" height="15" fill="rgb(213,1,31)" fg:x="390" fg:w="4"/><text x="31.4002%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="31.2300%" y="533" width="0.2396%" height="15" fill="rgb(237,205,14)" fg:x="391" fg:w="3"/><text x="31.4800%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.3898%" y="517" width="0.0799%" height="15" fill="rgb(232,118,45)" fg:x="393" fg:w="1"/><text x="31.6398%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.3898%" y="501" width="0.0799%" height="15" fill="rgb(218,5,6)" fg:x="393" fg:w="1"/><text x="31.6398%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.3898%" y="485" width="0.0799%" height="15" fill="rgb(251,87,51)" fg:x="393" fg:w="1"/><text x="31.6398%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.5495%" y="581" width="0.0799%" height="15" fill="rgb(207,225,20)" fg:x="395" fg:w="1"/><text x="31.7995%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="31.6294%" y="581" width="0.0799%" height="15" fill="rgb(222,78,54)" fg:x="396" fg:w="1"/><text x="31.8794%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="31.6294%" y="565" width="0.0799%" height="15" fill="rgb(232,85,16)" fg:x="396" fg:w="1"/><text x="31.8794%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="31.6294%" y="549" width="0.0799%" height="15" fill="rgb(244,25,33)" fg:x="396" fg:w="1"/><text x="31.8794%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.6294%" y="533" width="0.0799%" height="15" fill="rgb(233,24,36)" fg:x="396" fg:w="1"/><text x="31.8794%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="31.7093%" y="581" width="0.2396%" height="15" fill="rgb(253,49,54)" fg:x="397" fg:w="3"/><text x="31.9593%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="31.7093%" y="565" width="0.2396%" height="15" fill="rgb(245,12,22)" fg:x="397" fg:w="3"/><text x="31.9593%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="31.8690%" y="549" width="0.0799%" height="15" fill="rgb(253,141,28)" fg:x="399" fg:w="1"/><text x="32.1190%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.8690%" y="533" width="0.0799%" height="15" fill="rgb(225,207,27)" fg:x="399" fg:w="1"/><text x="32.1190%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.9489%" y="565" width="0.0799%" height="15" fill="rgb(220,84,2)" fg:x="400" fg:w="1"/><text x="32.1989%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="32.0288%" y="501" width="0.0799%" height="15" fill="rgb(224,37,37)" fg:x="401" fg:w="1"/><text x="32.2788%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.0288%" y="485" width="0.0799%" height="15" fill="rgb(220,143,18)" fg:x="401" fg:w="1"/><text x="32.2788%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="32.0288%" y="533" width="0.1597%" height="15" fill="rgb(210,88,33)" fg:x="401" fg:w="2"/><text x="32.2788%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="32.0288%" y="517" width="0.1597%" height="15" fill="rgb(219,87,51)" fg:x="401" fg:w="2"/><text x="32.2788%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.1086%" y="501" width="0.0799%" height="15" fill="rgb(211,7,35)" fg:x="402" fg:w="1"/><text x="32.3586%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.1086%" y="485" width="0.0799%" height="15" fill="rgb(232,77,2)" fg:x="402" fg:w="1"/><text x="32.3586%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.1086%" y="469" width="0.0799%" height="15" fill="rgb(249,94,25)" fg:x="402" fg:w="1"/><text x="32.3586%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="32.0288%" y="549" width="0.2396%" height="15" fill="rgb(215,112,2)" fg:x="401" fg:w="3"/><text x="32.2788%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.1885%" y="533" width="0.0799%" height="15" fill="rgb(226,115,48)" fg:x="403" fg:w="1"/><text x="32.4385%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="32.0288%" y="565" width="0.3195%" height="15" fill="rgb(249,196,10)" fg:x="401" fg:w="4"/><text x="32.2788%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.2684%" y="549" width="0.0799%" height="15" fill="rgb(237,109,14)" fg:x="404" fg:w="1"/><text x="32.5184%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.2684%" y="533" width="0.0799%" height="15" fill="rgb(217,103,53)" fg:x="404" fg:w="1"/><text x="32.5184%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.2684%" y="517" width="0.0799%" height="15" fill="rgb(244,137,9)" fg:x="404" fg:w="1"/><text x="32.5184%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="32.4281%" y="549" width="0.3195%" height="15" fill="rgb(227,201,3)" fg:x="406" fg:w="4"/><text x="32.6781%" y="559.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="32.4281%" y="533" width="0.3195%" height="15" fill="rgb(243,94,6)" fg:x="406" fg:w="4"/><text x="32.6781%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="32.5080%" y="517" width="0.2396%" height="15" fill="rgb(235,118,5)" fg:x="407" fg:w="3"/><text x="32.7580%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="32.5080%" y="501" width="0.2396%" height="15" fill="rgb(247,10,30)" fg:x="407" fg:w="3"/><text x="32.7580%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="32.5080%" y="485" width="0.2396%" height="15" fill="rgb(205,26,28)" fg:x="407" fg:w="3"/><text x="32.7580%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="32.5080%" y="469" width="0.2396%" height="15" fill="rgb(206,99,35)" fg:x="407" fg:w="3"/><text x="32.7580%" y="479.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="32.5080%" y="453" width="0.2396%" height="15" fill="rgb(238,130,40)" fg:x="407" fg:w="3"/><text x="32.7580%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="32.7476%" y="533" width="0.1597%" height="15" fill="rgb(224,126,31)" fg:x="410" fg:w="2"/><text x="32.9976%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="32.7476%" y="517" width="0.1597%" height="15" fill="rgb(254,105,17)" fg:x="410" fg:w="2"/><text x="32.9976%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="32.7476%" y="501" width="0.1597%" height="15" fill="rgb(216,87,36)" fg:x="410" fg:w="2"/><text x="32.9976%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="32.7476%" y="485" width="0.1597%" height="15" fill="rgb(240,21,12)" fg:x="410" fg:w="2"/><text x="32.9976%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.8275%" y="469" width="0.0799%" height="15" fill="rgb(245,192,34)" fg:x="411" fg:w="1"/><text x="33.0775%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.8275%" y="453" width="0.0799%" height="15" fill="rgb(226,100,49)" fg:x="411" fg:w="1"/><text x="33.0775%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.8275%" y="437" width="0.0799%" height="15" fill="rgb(245,188,27)" fg:x="411" fg:w="1"/><text x="33.0775%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="32.7476%" y="549" width="0.2396%" height="15" fill="rgb(212,170,8)" fg:x="410" fg:w="3"/><text x="32.9976%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="32.9073%" y="533" width="0.0799%" height="15" fill="rgb(217,113,29)" fg:x="412" fg:w="1"/><text x="33.1573%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.9073%" y="517" width="0.0799%" height="15" fill="rgb(237,30,3)" fg:x="412" fg:w="1"/><text x="33.1573%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.9073%" y="501" width="0.0799%" height="15" fill="rgb(227,19,28)" fg:x="412" fg:w="1"/><text x="33.1573%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.9073%" y="485" width="0.0799%" height="15" fill="rgb(239,172,45)" fg:x="412" fg:w="1"/><text x="33.1573%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="32.3482%" y="565" width="0.7188%" height="15" fill="rgb(254,55,39)" fg:x="405" fg:w="9"/><text x="32.5982%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.9872%" y="549" width="0.0799%" height="15" fill="rgb(249,208,12)" fg:x="413" fg:w="1"/><text x="33.2372%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.9872%" y="533" width="0.0799%" height="15" fill="rgb(240,52,13)" fg:x="413" fg:w="1"/><text x="33.2372%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (17 samples, 1.36%)</title><rect x="31.9489%" y="581" width="1.3578%" height="15" fill="rgb(252,149,13)" fg:x="400" fg:w="17"/><text x="32.1989%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="33.0671%" y="565" width="0.2396%" height="15" fill="rgb(232,81,48)" fg:x="414" fg:w="3"/><text x="33.3171%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="33.0671%" y="549" width="0.2396%" height="15" fill="rgb(222,144,2)" fg:x="414" fg:w="3"/><text x="33.3171%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="33.0671%" y="533" width="0.2396%" height="15" fill="rgb(216,81,32)" fg:x="414" fg:w="3"/><text x="33.3171%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (25 samples, 2.00%)</title><rect x="31.4696%" y="597" width="1.9968%" height="15" fill="rgb(244,78,51)" fg:x="394" fg:w="25"/><text x="31.7196%" y="607.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="33.3067%" y="581" width="0.1597%" height="15" fill="rgb(217,66,21)" fg:x="417" fg:w="2"/><text x="33.5567%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="33.3067%" y="565" width="0.1597%" height="15" fill="rgb(247,101,42)" fg:x="417" fg:w="2"/><text x="33.5567%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="33.3067%" y="549" width="0.1597%" height="15" fill="rgb(227,81,39)" fg:x="417" fg:w="2"/><text x="33.5567%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.3067%" y="533" width="0.1597%" height="15" fill="rgb(220,223,44)" fg:x="417" fg:w="2"/><text x="33.5567%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.3866%" y="517" width="0.0799%" height="15" fill="rgb(205,218,2)" fg:x="418" fg:w="1"/><text x="33.6366%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (32 samples, 2.56%)</title><rect x="30.9904%" y="613" width="2.5559%" height="15" fill="rgb(212,207,28)" fg:x="388" fg:w="32"/><text x="31.2404%" y="623.50">&lt;s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="33.4665%" y="597" width="0.0799%" height="15" fill="rgb(224,12,41)" fg:x="419" fg:w="1"/><text x="33.7165%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="33.4665%" y="581" width="0.0799%" height="15" fill="rgb(216,118,12)" fg:x="419" fg:w="1"/><text x="33.7165%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="33.4665%" y="565" width="0.0799%" height="15" fill="rgb(252,97,46)" fg:x="419" fg:w="1"/><text x="33.7165%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.5463%" y="581" width="0.0799%" height="15" fill="rgb(244,206,19)" fg:x="420" fg:w="1"/><text x="33.7963%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.5463%" y="565" width="0.0799%" height="15" fill="rgb(231,84,31)" fg:x="420" fg:w="1"/><text x="33.7963%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.7061%" y="565" width="0.0799%" height="15" fill="rgb(244,133,0)" fg:x="422" fg:w="1"/><text x="33.9561%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.7859%" y="549" width="0.1597%" height="15" fill="rgb(223,15,50)" fg:x="423" fg:w="2"/><text x="34.0359%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.9457%" y="501" width="0.0799%" height="15" fill="rgb(250,118,49)" fg:x="425" fg:w="1"/><text x="34.1957%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="33.9457%" y="533" width="0.1597%" height="15" fill="rgb(248,25,38)" fg:x="425" fg:w="2"/><text x="34.1957%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="33.9457%" y="517" width="0.1597%" height="15" fill="rgb(215,70,14)" fg:x="425" fg:w="2"/><text x="34.1957%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="34.0256%" y="501" width="0.0799%" height="15" fill="rgb(215,28,15)" fg:x="426" fg:w="1"/><text x="34.2756%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="34.0256%" y="485" width="0.0799%" height="15" fill="rgb(243,6,28)" fg:x="426" fg:w="1"/><text x="34.2756%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.0256%" y="469" width="0.0799%" height="15" fill="rgb(222,130,1)" fg:x="426" fg:w="1"/><text x="34.2756%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1054%" y="517" width="0.0799%" height="15" fill="rgb(236,166,44)" fg:x="427" fg:w="1"/><text x="34.3554%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="33.5463%" y="613" width="0.7188%" height="15" fill="rgb(221,108,14)" fg:x="420" fg:w="9"/><text x="33.7963%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.72%)</title><rect x="33.5463%" y="597" width="0.7188%" height="15" fill="rgb(252,3,45)" fg:x="420" fg:w="9"/><text x="33.7963%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="33.6262%" y="581" width="0.6390%" height="15" fill="rgb(237,68,30)" fg:x="421" fg:w="8"/><text x="33.8762%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="33.7859%" y="565" width="0.4792%" height="15" fill="rgb(211,79,22)" fg:x="423" fg:w="6"/><text x="34.0359%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="33.9457%" y="549" width="0.3195%" height="15" fill="rgb(252,185,21)" fg:x="425" fg:w="4"/><text x="34.1957%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="34.1054%" y="533" width="0.1597%" height="15" fill="rgb(225,189,26)" fg:x="427" fg:w="2"/><text x="34.3554%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.1853%" y="517" width="0.0799%" height="15" fill="rgb(241,30,40)" fg:x="428" fg:w="1"/><text x="34.4353%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1853%" y="501" width="0.0799%" height="15" fill="rgb(235,215,44)" fg:x="428" fg:w="1"/><text x="34.4353%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.2652%" y="565" width="0.0799%" height="15" fill="rgb(205,8,29)" fg:x="429" fg:w="1"/><text x="34.5152%" y="575.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="34.4249%" y="533" width="0.2396%" height="15" fill="rgb(241,137,42)" fg:x="431" fg:w="3"/><text x="34.6749%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.6645%" y="517" width="0.0799%" height="15" fill="rgb(237,155,2)" fg:x="434" fg:w="1"/><text x="34.9145%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.7444%" y="517" width="0.0799%" height="15" fill="rgb(245,29,42)" fg:x="435" fg:w="1"/><text x="34.9944%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="34.8243%" y="517" width="0.1597%" height="15" fill="rgb(234,101,35)" fg:x="436" fg:w="2"/><text x="35.0743%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="34.9042%" y="501" width="0.0799%" height="15" fill="rgb(228,64,37)" fg:x="437" fg:w="1"/><text x="35.1542%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.9042%" y="485" width="0.0799%" height="15" fill="rgb(217,214,36)" fg:x="437" fg:w="1"/><text x="35.1542%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9042%" y="469" width="0.0799%" height="15" fill="rgb(243,70,3)" fg:x="437" fg:w="1"/><text x="35.1542%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="34.9840%" y="501" width="0.0799%" height="15" fill="rgb(253,158,52)" fg:x="438" fg:w="1"/><text x="35.2340%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9840%" y="485" width="0.0799%" height="15" fill="rgb(234,111,54)" fg:x="438" fg:w="1"/><text x="35.2340%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="34.2652%" y="581" width="0.8786%" height="15" fill="rgb(217,70,32)" fg:x="429" fg:w="11"/><text x="34.5152%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.80%)</title><rect x="34.3450%" y="565" width="0.7987%" height="15" fill="rgb(234,18,33)" fg:x="430" fg:w="10"/><text x="34.5950%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="34.4249%" y="549" width="0.7188%" height="15" fill="rgb(234,12,49)" fg:x="431" fg:w="9"/><text x="34.6749%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="34.6645%" y="533" width="0.4792%" height="15" fill="rgb(236,10,21)" fg:x="434" fg:w="6"/><text x="34.9145%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="34.9840%" y="517" width="0.1597%" height="15" fill="rgb(248,182,45)" fg:x="438" fg:w="2"/><text x="35.2340%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="35.0639%" y="501" width="0.0799%" height="15" fill="rgb(217,95,36)" fg:x="439" fg:w="1"/><text x="35.3139%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.1438%" y="581" width="0.0799%" height="15" fill="rgb(212,110,31)" fg:x="440" fg:w="1"/><text x="35.3938%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1438%" y="565" width="0.0799%" height="15" fill="rgb(206,32,53)" fg:x="440" fg:w="1"/><text x="35.3938%" y="575.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="35.2236%" y="581" width="0.0799%" height="15" fill="rgb(246,141,37)" fg:x="441" fg:w="1"/><text x="35.4736%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (16 samples, 1.28%)</title><rect x="34.2652%" y="597" width="1.2780%" height="15" fill="rgb(219,16,7)" fg:x="429" fg:w="16"/><text x="34.5152%" y="607.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="35.3035%" y="581" width="0.2396%" height="15" fill="rgb(230,205,45)" fg:x="442" fg:w="3"/><text x="35.5535%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="35.3834%" y="565" width="0.1597%" height="15" fill="rgb(231,43,49)" fg:x="443" fg:w="2"/><text x="35.6334%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="35.3834%" y="549" width="0.1597%" height="15" fill="rgb(212,106,34)" fg:x="443" fg:w="2"/><text x="35.6334%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="35.4633%" y="533" width="0.0799%" height="15" fill="rgb(206,83,17)" fg:x="444" fg:w="1"/><text x="35.7133%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="35.6230%" y="565" width="0.3195%" height="15" fill="rgb(244,154,49)" fg:x="446" fg:w="4"/><text x="35.8730%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.8626%" y="549" width="0.0799%" height="15" fill="rgb(244,149,49)" fg:x="449" fg:w="1"/><text x="36.1126%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="35.9425%" y="565" width="0.1597%" height="15" fill="rgb(227,134,18)" fg:x="450" fg:w="2"/><text x="36.1925%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="35.9425%" y="549" width="0.1597%" height="15" fill="rgb(237,116,36)" fg:x="450" fg:w="2"/><text x="36.1925%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="36.0224%" y="533" width="0.0799%" height="15" fill="rgb(205,129,40)" fg:x="451" fg:w="1"/><text x="36.2724%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="36.0224%" y="517" width="0.0799%" height="15" fill="rgb(236,178,4)" fg:x="451" fg:w="1"/><text x="36.2724%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (6 samples, 0.48%)</title><rect x="36.1022%" y="565" width="0.4792%" height="15" fill="rgb(251,76,53)" fg:x="452" fg:w="6"/><text x="36.3522%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="36.1821%" y="549" width="0.3994%" height="15" fill="rgb(242,92,40)" fg:x="453" fg:w="5"/><text x="36.4321%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="36.4217%" y="533" width="0.1597%" height="15" fill="rgb(209,45,30)" fg:x="456" fg:w="2"/><text x="36.6717%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.5016%" y="517" width="0.0799%" height="15" fill="rgb(218,157,36)" fg:x="457" fg:w="1"/><text x="36.7516%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="36.8211%" y="517" width="0.2396%" height="15" fill="rgb(222,186,16)" fg:x="461" fg:w="3"/><text x="37.0711%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="36.9010%" y="501" width="0.1597%" height="15" fill="rgb(254,72,35)" fg:x="462" fg:w="2"/><text x="37.1510%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="37.0607%" y="501" width="0.0799%" height="15" fill="rgb(224,25,35)" fg:x="464" fg:w="1"/><text x="37.3107%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="37.1406%" y="501" width="0.0799%" height="15" fill="rgb(206,135,52)" fg:x="465" fg:w="1"/><text x="37.3906%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.3003%" y="437" width="0.0799%" height="15" fill="rgb(229,174,47)" fg:x="467" fg:w="1"/><text x="37.5503%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="37.3003%" y="453" width="0.1597%" height="15" fill="rgb(242,184,21)" fg:x="467" fg:w="2"/><text x="37.5503%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="37.3802%" y="437" width="0.0799%" height="15" fill="rgb(213,22,45)" fg:x="468" fg:w="1"/><text x="37.6302%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.3802%" y="421" width="0.0799%" height="15" fill="rgb(237,81,54)" fg:x="468" fg:w="1"/><text x="37.6302%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 0.56%)</title><rect x="37.0607%" y="517" width="0.5591%" height="15" fill="rgb(248,177,18)" fg:x="464" fg:w="7"/><text x="37.3107%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="37.2204%" y="501" width="0.3994%" height="15" fill="rgb(254,31,16)" fg:x="466" fg:w="5"/><text x="37.4704%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="37.3003%" y="485" width="0.3195%" height="15" fill="rgb(235,20,31)" fg:x="467" fg:w="4"/><text x="37.5503%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="37.3003%" y="469" width="0.3195%" height="15" fill="rgb(240,56,43)" fg:x="467" fg:w="4"/><text x="37.5503%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="37.4601%" y="453" width="0.1597%" height="15" fill="rgb(237,197,51)" fg:x="469" fg:w="2"/><text x="37.7101%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="37.6198%" y="485" width="0.2396%" height="15" fill="rgb(241,162,44)" fg:x="471" fg:w="3"/><text x="37.8698%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="37.6997%" y="469" width="0.1597%" height="15" fill="rgb(224,23,20)" fg:x="472" fg:w="2"/><text x="37.9497%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="38.0192%" y="469" width="0.0799%" height="15" fill="rgb(250,109,34)" fg:x="476" fg:w="1"/><text x="38.2692%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="38.0990%" y="469" width="0.0799%" height="15" fill="rgb(214,175,50)" fg:x="477" fg:w="1"/><text x="38.3490%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.1789%" y="453" width="0.0799%" height="15" fill="rgb(213,182,5)" fg:x="478" fg:w="1"/><text x="38.4289%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="38.1789%" y="437" width="0.0799%" height="15" fill="rgb(209,199,19)" fg:x="478" fg:w="1"/><text x="38.4289%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="38.1789%" y="469" width="0.2396%" height="15" fill="rgb(236,224,42)" fg:x="478" fg:w="3"/><text x="38.4289%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="38.2588%" y="453" width="0.1597%" height="15" fill="rgb(246,226,29)" fg:x="479" fg:w="2"/><text x="38.5088%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.2588%" y="437" width="0.1597%" height="15" fill="rgb(227,223,11)" fg:x="479" fg:w="2"/><text x="38.5088%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (22 samples, 1.76%)</title><rect x="36.7412%" y="533" width="1.7572%" height="15" fill="rgb(219,7,51)" fg:x="460" fg:w="22"/><text x="36.9912%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.88%)</title><rect x="37.6198%" y="517" width="0.8786%" height="15" fill="rgb(245,167,10)" fg:x="471" fg:w="11"/><text x="37.8698%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="37.6198%" y="501" width="0.8786%" height="15" fill="rgb(237,224,16)" fg:x="471" fg:w="11"/><text x="37.8698%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="37.8594%" y="485" width="0.6390%" height="15" fill="rgb(226,132,13)" fg:x="474" fg:w="8"/><text x="38.1094%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.4185%" y="469" width="0.0799%" height="15" fill="rgb(214,140,3)" fg:x="481" fg:w="1"/><text x="38.6685%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (24 samples, 1.92%)</title><rect x="36.6613%" y="549" width="1.9169%" height="15" fill="rgb(221,177,4)" fg:x="459" fg:w="24"/><text x="36.9113%" y="559.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="38.4984%" y="533" width="0.0799%" height="15" fill="rgb(238,139,3)" fg:x="482" fg:w="1"/><text x="38.7484%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.4984%" y="517" width="0.0799%" height="15" fill="rgb(216,17,39)" fg:x="482" fg:w="1"/><text x="38.7484%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (42 samples, 3.35%)</title><rect x="35.5431%" y="597" width="3.3546%" height="15" fill="rgb(238,120,9)" fg:x="445" fg:w="42"/><text x="35.7931%" y="607.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (41 samples, 3.27%)</title><rect x="35.6230%" y="581" width="3.2748%" height="15" fill="rgb(244,92,53)" fg:x="446" fg:w="41"/><text x="35.8730%" y="591.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (29 samples, 2.32%)</title><rect x="36.5815%" y="565" width="2.3163%" height="15" fill="rgb(224,148,33)" fg:x="458" fg:w="29"/><text x="36.8315%" y="575.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="38.5783%" y="549" width="0.3195%" height="15" fill="rgb(243,6,36)" fg:x="483" fg:w="4"/><text x="38.8283%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="38.7380%" y="533" width="0.1597%" height="15" fill="rgb(230,102,11)" fg:x="485" fg:w="2"/><text x="38.9880%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="39.0575%" y="357" width="0.1597%" height="15" fill="rgb(234,148,36)" fg:x="489" fg:w="2"/><text x="39.3075%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.0575%" y="341" width="0.1597%" height="15" fill="rgb(251,153,25)" fg:x="489" fg:w="2"/><text x="39.3075%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="39.0575%" y="405" width="0.2396%" height="15" fill="rgb(215,129,8)" fg:x="489" fg:w="3"/><text x="39.3075%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="39.0575%" y="389" width="0.2396%" height="15" fill="rgb(224,128,35)" fg:x="489" fg:w="3"/><text x="39.3075%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="39.0575%" y="373" width="0.2396%" height="15" fill="rgb(237,56,52)" fg:x="489" fg:w="3"/><text x="39.3075%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="39.2173%" y="357" width="0.0799%" height="15" fill="rgb(234,213,19)" fg:x="491" fg:w="1"/><text x="39.4673%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.2173%" y="341" width="0.0799%" height="15" fill="rgb(252,82,23)" fg:x="491" fg:w="1"/><text x="39.4673%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="39.0575%" y="421" width="0.3195%" height="15" fill="rgb(254,201,21)" fg:x="489" fg:w="4"/><text x="39.3075%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.2971%" y="405" width="0.0799%" height="15" fill="rgb(250,186,11)" fg:x="492" fg:w="1"/><text x="39.5471%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="39.0575%" y="453" width="0.3994%" height="15" fill="rgb(211,174,5)" fg:x="489" fg:w="5"/><text x="39.3075%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="39.0575%" y="437" width="0.3994%" height="15" fill="rgb(214,121,10)" fg:x="489" fg:w="5"/><text x="39.3075%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="39.3770%" y="421" width="0.0799%" height="15" fill="rgb(241,66,2)" fg:x="493" fg:w="1"/><text x="39.6270%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="39.3770%" y="405" width="0.0799%" height="15" fill="rgb(220,167,19)" fg:x="493" fg:w="1"/><text x="39.6270%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="39.5367%" y="405" width="0.0799%" height="15" fill="rgb(231,54,50)" fg:x="495" fg:w="1"/><text x="39.7867%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.5367%" y="389" width="0.0799%" height="15" fill="rgb(239,217,53)" fg:x="495" fg:w="1"/><text x="39.7867%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="39.5367%" y="437" width="0.1597%" height="15" fill="rgb(248,8,0)" fg:x="495" fg:w="2"/><text x="39.7867%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="39.5367%" y="421" width="0.1597%" height="15" fill="rgb(229,118,37)" fg:x="495" fg:w="2"/><text x="39.7867%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="39.6166%" y="405" width="0.0799%" height="15" fill="rgb(253,223,43)" fg:x="496" fg:w="1"/><text x="39.8666%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6166%" y="389" width="0.0799%" height="15" fill="rgb(211,77,36)" fg:x="496" fg:w="1"/><text x="39.8666%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="39.6965%" y="437" width="0.0799%" height="15" fill="rgb(219,3,53)" fg:x="497" fg:w="1"/><text x="39.9465%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6965%" y="421" width="0.0799%" height="15" fill="rgb(244,45,42)" fg:x="497" fg:w="1"/><text x="39.9465%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.80%)</title><rect x="39.0575%" y="469" width="0.7987%" height="15" fill="rgb(225,95,27)" fg:x="489" fg:w="10"/><text x="39.3075%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="39.4569%" y="453" width="0.3994%" height="15" fill="rgb(207,74,8)" fg:x="494" fg:w="5"/><text x="39.7069%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.7764%" y="437" width="0.0799%" height="15" fill="rgb(243,63,36)" fg:x="498" fg:w="1"/><text x="40.0264%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="39.7764%" y="421" width="0.0799%" height="15" fill="rgb(211,180,12)" fg:x="498" fg:w="1"/><text x="40.0264%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.7764%" y="405" width="0.0799%" height="15" fill="rgb(254,166,49)" fg:x="498" fg:w="1"/><text x="40.0264%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.04%)</title><rect x="38.9776%" y="501" width="1.0383%" height="15" fill="rgb(205,19,0)" fg:x="488" fg:w="13"/><text x="39.2276%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.04%)</title><rect x="38.9776%" y="485" width="1.0383%" height="15" fill="rgb(224,172,32)" fg:x="488" fg:w="13"/><text x="39.2276%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="39.8562%" y="469" width="0.1597%" height="15" fill="rgb(254,136,30)" fg:x="499" fg:w="2"/><text x="40.1062%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="39.8562%" y="453" width="0.1597%" height="15" fill="rgb(246,19,35)" fg:x="499" fg:w="2"/><text x="40.1062%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.9361%" y="437" width="0.0799%" height="15" fill="rgb(219,24,36)" fg:x="500" fg:w="1"/><text x="40.1861%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="40.0160%" y="485" width="0.0799%" height="15" fill="rgb(251,55,1)" fg:x="501" fg:w="1"/><text x="40.2660%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.28%)</title><rect x="38.9776%" y="533" width="1.2780%" height="15" fill="rgb(218,117,39)" fg:x="488" fg:w="16"/><text x="39.2276%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16 samples, 1.28%)</title><rect x="38.9776%" y="517" width="1.2780%" height="15" fill="rgb(248,169,11)" fg:x="488" fg:w="16"/><text x="39.2276%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="40.0160%" y="501" width="0.2396%" height="15" fill="rgb(244,40,44)" fg:x="501" fg:w="3"/><text x="40.2660%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.0958%" y="485" width="0.1597%" height="15" fill="rgb(234,62,37)" fg:x="502" fg:w="2"/><text x="40.3458%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="40.4153%" y="517" width="0.1597%" height="15" fill="rgb(207,117,42)" fg:x="506" fg:w="2"/><text x="40.6653%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (5 samples, 0.40%)</title><rect x="40.2556%" y="533" width="0.3994%" height="15" fill="rgb(213,43,2)" fg:x="504" fg:w="5"/><text x="40.5056%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.5751%" y="517" width="0.0799%" height="15" fill="rgb(244,202,51)" fg:x="508" fg:w="1"/><text x="40.8251%" y="527.50"></text></g><g><title>engine::session::state::State::close (127 samples, 10.14%)</title><rect x="30.5911%" y="693" width="10.1438%" height="15" fill="rgb(253,174,46)" fg:x="383" fg:w="127"/><text x="30.8411%" y="703.50">engine::session..</text></g><g><title>engine::session::state::State::flush_entities (127 samples, 10.14%)</title><rect x="30.5911%" y="677" width="10.1438%" height="15" fill="rgb(251,23,1)" fg:x="383" fg:w="127"/><text x="30.8411%" y="687.50">engine::session..</text></g><g><title>core::iter::adapters::try_process (122 samples, 9.74%)</title><rect x="30.9904%" y="661" width="9.7444%" height="15" fill="rgb(253,26,1)" fg:x="388" fg:w="122"/><text x="31.2404%" y="671.50">core::iter::ad..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (122 samples, 9.74%)</title><rect x="30.9904%" y="645" width="9.7444%" height="15" fill="rgb(216,89,31)" fg:x="388" fg:w="122"/><text x="31.2404%" y="655.50">&lt;alloc::vec::V..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (122 samples, 9.74%)</title><rect x="30.9904%" y="629" width="9.7444%" height="15" fill="rgb(209,109,5)" fg:x="388" fg:w="122"/><text x="31.2404%" y="639.50">engine::sessio..</text></g><g><title>kernel::model::any_entity_changes (81 samples, 6.47%)</title><rect x="34.2652%" y="613" width="6.4696%" height="15" fill="rgb(229,63,13)" fg:x="429" fg:w="81"/><text x="34.5152%" y="623.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (23 samples, 1.84%)</title><rect x="38.8978%" y="597" width="1.8371%" height="15" fill="rgb(238,137,54)" fg:x="487" fg:w="23"/><text x="39.1478%" y="607.50">s..</text></g><g><title>serde_json::de::from_trait (23 samples, 1.84%)</title><rect x="38.8978%" y="581" width="1.8371%" height="15" fill="rgb(228,1,9)" fg:x="487" fg:w="23"/><text x="39.1478%" y="591.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (23 samples, 1.84%)</title><rect x="38.8978%" y="565" width="1.8371%" height="15" fill="rgb(249,120,48)" fg:x="487" fg:w="23"/><text x="39.1478%" y="575.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (23 samples, 1.84%)</title><rect x="38.8978%" y="549" width="1.8371%" height="15" fill="rgb(209,72,36)" fg:x="487" fg:w="23"/><text x="39.1478%" y="559.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="40.6550%" y="533" width="0.0799%" height="15" fill="rgb(247,98,49)" fg:x="509" fg:w="1"/><text x="40.9050%" y="543.50"></text></g><g><title>engine::session::Session::close (132 samples, 10.54%)</title><rect x="30.2716%" y="709" width="10.5431%" height="15" fill="rgb(233,75,36)" fg:x="379" fg:w="132"/><text x="30.5216%" y="719.50">engine::session..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="40.7348%" y="693" width="0.0799%" height="15" fill="rgb(225,14,24)" fg:x="510" fg:w="1"/><text x="40.9848%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="40.8147%" y="645" width="0.0799%" height="15" fill="rgb(237,193,20)" fg:x="511" fg:w="1"/><text x="41.0647%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="40.8147%" y="677" width="0.1597%" height="15" fill="rgb(239,122,19)" fg:x="511" fg:w="2"/><text x="41.0647%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="40.8147%" y="661" width="0.1597%" height="15" fill="rgb(231,220,10)" fg:x="511" fg:w="2"/><text x="41.0647%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="40.8946%" y="645" width="0.0799%" height="15" fill="rgb(220,66,15)" fg:x="512" fg:w="1"/><text x="41.1446%" y="655.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="41.0543%" y="645" width="0.0799%" height="15" fill="rgb(215,171,52)" fg:x="514" fg:w="1"/><text x="41.3043%" y="655.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="41.1342%" y="517" width="0.0799%" height="15" fill="rgb(241,169,50)" fg:x="515" fg:w="1"/><text x="41.3842%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="41.0543%" y="661" width="0.3195%" height="15" fill="rgb(236,189,0)" fg:x="514" fg:w="4"/><text x="41.3043%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="41.1342%" y="645" width="0.2396%" height="15" fill="rgb(217,147,20)" fg:x="515" fg:w="3"/><text x="41.3842%" y="655.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="41.1342%" y="629" width="0.2396%" height="15" fill="rgb(206,188,39)" fg:x="515" fg:w="3"/><text x="41.3842%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="41.1342%" y="613" width="0.2396%" height="15" fill="rgb(227,118,25)" fg:x="515" fg:w="3"/><text x="41.3842%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="41.1342%" y="597" width="0.2396%" height="15" fill="rgb(248,171,40)" fg:x="515" fg:w="3"/><text x="41.3842%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (3 samples, 0.24%)</title><rect x="41.1342%" y="581" width="0.2396%" height="15" fill="rgb(251,90,54)" fg:x="515" fg:w="3"/><text x="41.3842%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (3 samples, 0.24%)</title><rect x="41.1342%" y="565" width="0.2396%" height="15" fill="rgb(234,11,46)" fg:x="515" fg:w="3"/><text x="41.3842%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.24%)</title><rect x="41.1342%" y="549" width="0.2396%" height="15" fill="rgb(229,134,13)" fg:x="515" fg:w="3"/><text x="41.3842%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (3 samples, 0.24%)</title><rect x="41.1342%" y="533" width="0.2396%" height="15" fill="rgb(223,129,3)" fg:x="515" fg:w="3"/><text x="41.3842%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="41.2141%" y="517" width="0.1597%" height="15" fill="rgb(221,124,13)" fg:x="516" fg:w="2"/><text x="41.4641%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.2939%" y="501" width="0.0799%" height="15" fill="rgb(234,3,18)" fg:x="517" fg:w="1"/><text x="41.5439%" y="511.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="41.3738%" y="645" width="0.0799%" height="15" fill="rgb(249,199,20)" fg:x="518" fg:w="1"/><text x="41.6238%" y="655.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (1 samples, 0.08%)</title><rect x="41.3738%" y="629" width="0.0799%" height="15" fill="rgb(224,134,6)" fg:x="518" fg:w="1"/><text x="41.6238%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="41.4537%" y="613" width="0.0799%" height="15" fill="rgb(254,83,26)" fg:x="519" fg:w="1"/><text x="41.7037%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="41.4537%" y="597" width="0.0799%" height="15" fill="rgb(217,88,9)" fg:x="519" fg:w="1"/><text x="41.7037%" y="607.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="41.4537%" y="645" width="0.2396%" height="15" fill="rgb(225,73,2)" fg:x="519" fg:w="3"/><text x="41.7037%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="41.4537%" y="629" width="0.2396%" height="15" fill="rgb(226,44,39)" fg:x="519" fg:w="3"/><text x="41.7037%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (2 samples, 0.16%)</title><rect x="41.5335%" y="613" width="0.1597%" height="15" fill="rgb(228,53,17)" fg:x="520" fg:w="2"/><text x="41.7835%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (2 samples, 0.16%)</title><rect x="41.5335%" y="597" width="0.1597%" height="15" fill="rgb(212,27,27)" fg:x="520" fg:w="2"/><text x="41.7835%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="41.5335%" y="581" width="0.1597%" height="15" fill="rgb(241,50,6)" fg:x="520" fg:w="2"/><text x="41.7835%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="41.8530%" y="517" width="0.1597%" height="15" fill="rgb(225,28,51)" fg:x="524" fg:w="2"/><text x="42.1030%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="41.8530%" y="501" width="0.1597%" height="15" fill="rgb(215,33,16)" fg:x="524" fg:w="2"/><text x="42.1030%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="41.8530%" y="485" width="0.1597%" height="15" fill="rgb(243,40,39)" fg:x="524" fg:w="2"/><text x="42.1030%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="41.8530%" y="469" width="0.1597%" height="15" fill="rgb(225,11,42)" fg:x="524" fg:w="2"/><text x="42.1030%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="41.8530%" y="453" width="0.1597%" height="15" fill="rgb(241,220,38)" fg:x="524" fg:w="2"/><text x="42.1030%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="41.8530%" y="437" width="0.1597%" height="15" fill="rgb(244,52,35)" fg:x="524" fg:w="2"/><text x="42.1030%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="41.8530%" y="421" width="0.1597%" height="15" fill="rgb(246,42,46)" fg:x="524" fg:w="2"/><text x="42.1030%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="41.8530%" y="405" width="0.1597%" height="15" fill="rgb(205,184,13)" fg:x="524" fg:w="2"/><text x="42.1030%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="41.8530%" y="389" width="0.1597%" height="15" fill="rgb(209,48,36)" fg:x="524" fg:w="2"/><text x="42.1030%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="41.8530%" y="373" width="0.1597%" height="15" fill="rgb(244,34,51)" fg:x="524" fg:w="2"/><text x="42.1030%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="41.8530%" y="357" width="0.1597%" height="15" fill="rgb(221,107,33)" fg:x="524" fg:w="2"/><text x="42.1030%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="41.8530%" y="341" width="0.1597%" height="15" fill="rgb(224,203,12)" fg:x="524" fg:w="2"/><text x="42.1030%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="41.8530%" y="325" width="0.1597%" height="15" fill="rgb(230,215,18)" fg:x="524" fg:w="2"/><text x="42.1030%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.8530%" y="309" width="0.1597%" height="15" fill="rgb(206,185,35)" fg:x="524" fg:w="2"/><text x="42.1030%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="41.8530%" y="533" width="0.2396%" height="15" fill="rgb(228,140,34)" fg:x="524" fg:w="3"/><text x="42.1030%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.0128%" y="517" width="0.0799%" height="15" fill="rgb(208,93,13)" fg:x="526" fg:w="1"/><text x="42.2628%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.0128%" y="501" width="0.0799%" height="15" fill="rgb(221,193,39)" fg:x="526" fg:w="1"/><text x="42.2628%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.0128%" y="485" width="0.0799%" height="15" fill="rgb(241,132,34)" fg:x="526" fg:w="1"/><text x="42.2628%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.0128%" y="469" width="0.0799%" height="15" fill="rgb(221,141,10)" fg:x="526" fg:w="1"/><text x="42.2628%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.0927%" y="421" width="0.0799%" height="15" fill="rgb(226,90,31)" fg:x="527" fg:w="1"/><text x="42.3427%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.0927%" y="405" width="0.0799%" height="15" fill="rgb(243,75,5)" fg:x="527" fg:w="1"/><text x="42.3427%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="42.0927%" y="389" width="0.0799%" height="15" fill="rgb(227,156,21)" fg:x="527" fg:w="1"/><text x="42.3427%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="42.0927%" y="373" width="0.0799%" height="15" fill="rgb(250,195,8)" fg:x="527" fg:w="1"/><text x="42.3427%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="42.0927%" y="357" width="0.0799%" height="15" fill="rgb(220,134,5)" fg:x="527" fg:w="1"/><text x="42.3427%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.0927%" y="341" width="0.0799%" height="15" fill="rgb(246,106,34)" fg:x="527" fg:w="1"/><text x="42.3427%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.0927%" y="325" width="0.0799%" height="15" fill="rgb(205,1,4)" fg:x="527" fg:w="1"/><text x="42.3427%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="42.0927%" y="309" width="0.0799%" height="15" fill="rgb(224,151,29)" fg:x="527" fg:w="1"/><text x="42.3427%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="42.0927%" y="293" width="0.0799%" height="15" fill="rgb(251,196,0)" fg:x="527" fg:w="1"/><text x="42.3427%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="42.0927%" y="277" width="0.0799%" height="15" fill="rgb(212,127,0)" fg:x="527" fg:w="1"/><text x="42.3427%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="42.0927%" y="261" width="0.0799%" height="15" fill="rgb(236,71,53)" fg:x="527" fg:w="1"/><text x="42.3427%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.0927%" y="245" width="0.0799%" height="15" fill="rgb(227,99,0)" fg:x="527" fg:w="1"/><text x="42.3427%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="42.0927%" y="469" width="0.1597%" height="15" fill="rgb(239,89,21)" fg:x="527" fg:w="2"/><text x="42.3427%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="42.0927%" y="453" width="0.1597%" height="15" fill="rgb(243,122,19)" fg:x="527" fg:w="2"/><text x="42.3427%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="42.0927%" y="437" width="0.1597%" height="15" fill="rgb(229,192,45)" fg:x="527" fg:w="2"/><text x="42.3427%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.1725%" y="421" width="0.0799%" height="15" fill="rgb(235,165,35)" fg:x="528" fg:w="1"/><text x="42.4225%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="42.1725%" y="405" width="0.0799%" height="15" fill="rgb(253,202,0)" fg:x="528" fg:w="1"/><text x="42.4225%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.1725%" y="389" width="0.0799%" height="15" fill="rgb(235,51,20)" fg:x="528" fg:w="1"/><text x="42.4225%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="42.1725%" y="373" width="0.0799%" height="15" fill="rgb(218,95,46)" fg:x="528" fg:w="1"/><text x="42.4225%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="42.1725%" y="357" width="0.0799%" height="15" fill="rgb(212,81,10)" fg:x="528" fg:w="1"/><text x="42.4225%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="42.1725%" y="341" width="0.0799%" height="15" fill="rgb(240,59,0)" fg:x="528" fg:w="1"/><text x="42.4225%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="42.1725%" y="325" width="0.0799%" height="15" fill="rgb(212,191,42)" fg:x="528" fg:w="1"/><text x="42.4225%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.1725%" y="309" width="0.0799%" height="15" fill="rgb(233,140,3)" fg:x="528" fg:w="1"/><text x="42.4225%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="42.1725%" y="293" width="0.0799%" height="15" fill="rgb(215,69,23)" fg:x="528" fg:w="1"/><text x="42.4225%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="42.1725%" y="277" width="0.0799%" height="15" fill="rgb(240,202,20)" fg:x="528" fg:w="1"/><text x="42.4225%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="42.1725%" y="261" width="0.0799%" height="15" fill="rgb(209,146,50)" fg:x="528" fg:w="1"/><text x="42.4225%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="42.1725%" y="245" width="0.0799%" height="15" fill="rgb(253,102,54)" fg:x="528" fg:w="1"/><text x="42.4225%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="42.1725%" y="229" width="0.0799%" height="15" fill="rgb(250,173,47)" fg:x="528" fg:w="1"/><text x="42.4225%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.1725%" y="213" width="0.0799%" height="15" fill="rgb(232,142,7)" fg:x="528" fg:w="1"/><text x="42.4225%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="42.2524%" y="469" width="0.0799%" height="15" fill="rgb(230,157,47)" fg:x="529" fg:w="1"/><text x="42.5024%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.2524%" y="453" width="0.0799%" height="15" fill="rgb(214,177,35)" fg:x="529" fg:w="1"/><text x="42.5024%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.2524%" y="437" width="0.0799%" height="15" fill="rgb(234,119,46)" fg:x="529" fg:w="1"/><text x="42.5024%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="42.2524%" y="421" width="0.0799%" height="15" fill="rgb(241,180,50)" fg:x="529" fg:w="1"/><text x="42.5024%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.2524%" y="405" width="0.0799%" height="15" fill="rgb(221,54,25)" fg:x="529" fg:w="1"/><text x="42.5024%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="42.2524%" y="389" width="0.0799%" height="15" fill="rgb(209,157,44)" fg:x="529" fg:w="1"/><text x="42.5024%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.2524%" y="373" width="0.0799%" height="15" fill="rgb(246,115,41)" fg:x="529" fg:w="1"/><text x="42.5024%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="42.2524%" y="357" width="0.0799%" height="15" fill="rgb(229,86,1)" fg:x="529" fg:w="1"/><text x="42.5024%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.3323%" y="373" width="0.1597%" height="15" fill="rgb(240,108,53)" fg:x="530" fg:w="2"/><text x="42.5823%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.3323%" y="357" width="0.1597%" height="15" fill="rgb(227,134,2)" fg:x="530" fg:w="2"/><text x="42.5823%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.4121%" y="341" width="0.0799%" height="15" fill="rgb(213,129,25)" fg:x="531" fg:w="1"/><text x="42.6621%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.4121%" y="325" width="0.0799%" height="15" fill="rgb(226,35,21)" fg:x="531" fg:w="1"/><text x="42.6621%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="42.4121%" y="309" width="0.0799%" height="15" fill="rgb(208,129,26)" fg:x="531" fg:w="1"/><text x="42.6621%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.4121%" y="293" width="0.0799%" height="15" fill="rgb(224,83,6)" fg:x="531" fg:w="1"/><text x="42.6621%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.4121%" y="277" width="0.0799%" height="15" fill="rgb(227,52,39)" fg:x="531" fg:w="1"/><text x="42.6621%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="42.4121%" y="261" width="0.0799%" height="15" fill="rgb(241,30,17)" fg:x="531" fg:w="1"/><text x="42.6621%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.4121%" y="245" width="0.0799%" height="15" fill="rgb(246,186,42)" fg:x="531" fg:w="1"/><text x="42.6621%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.4121%" y="229" width="0.0799%" height="15" fill="rgb(221,169,15)" fg:x="531" fg:w="1"/><text x="42.6621%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="42.4920%" y="373" width="0.0799%" height="15" fill="rgb(235,108,21)" fg:x="532" fg:w="1"/><text x="42.7420%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="42.4920%" y="357" width="0.0799%" height="15" fill="rgb(219,148,30)" fg:x="532" fg:w="1"/><text x="42.7420%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="42.4920%" y="341" width="0.0799%" height="15" fill="rgb(220,109,5)" fg:x="532" fg:w="1"/><text x="42.7420%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="42.4920%" y="325" width="0.0799%" height="15" fill="rgb(213,203,48)" fg:x="532" fg:w="1"/><text x="42.7420%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.4920%" y="309" width="0.0799%" height="15" fill="rgb(244,71,33)" fg:x="532" fg:w="1"/><text x="42.7420%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="42.3323%" y="421" width="0.3994%" height="15" fill="rgb(209,23,2)" fg:x="530" fg:w="5"/><text x="42.5823%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="42.3323%" y="405" width="0.3994%" height="15" fill="rgb(219,97,7)" fg:x="530" fg:w="5"/><text x="42.5823%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="42.3323%" y="389" width="0.3994%" height="15" fill="rgb(216,161,23)" fg:x="530" fg:w="5"/><text x="42.5823%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.5719%" y="373" width="0.1597%" height="15" fill="rgb(207,45,42)" fg:x="533" fg:w="2"/><text x="42.8219%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.5719%" y="357" width="0.1597%" height="15" fill="rgb(241,61,4)" fg:x="533" fg:w="2"/><text x="42.8219%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="42.5719%" y="341" width="0.1597%" height="15" fill="rgb(236,170,1)" fg:x="533" fg:w="2"/><text x="42.8219%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="42.5719%" y="325" width="0.1597%" height="15" fill="rgb(239,72,5)" fg:x="533" fg:w="2"/><text x="42.8219%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.6518%" y="309" width="0.0799%" height="15" fill="rgb(214,13,50)" fg:x="534" fg:w="1"/><text x="42.9018%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="42.6518%" y="293" width="0.0799%" height="15" fill="rgb(224,88,9)" fg:x="534" fg:w="1"/><text x="42.9018%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="42.6518%" y="277" width="0.0799%" height="15" fill="rgb(238,192,34)" fg:x="534" fg:w="1"/><text x="42.9018%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.6518%" y="261" width="0.0799%" height="15" fill="rgb(217,203,50)" fg:x="534" fg:w="1"/><text x="42.9018%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="42.6518%" y="245" width="0.0799%" height="15" fill="rgb(241,123,32)" fg:x="534" fg:w="1"/><text x="42.9018%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="42.3323%" y="469" width="0.4792%" height="15" fill="rgb(248,151,39)" fg:x="530" fg:w="6"/><text x="42.5823%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="42.3323%" y="453" width="0.4792%" height="15" fill="rgb(208,89,6)" fg:x="530" fg:w="6"/><text x="42.5823%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="42.3323%" y="437" width="0.4792%" height="15" fill="rgb(254,43,26)" fg:x="530" fg:w="6"/><text x="42.5823%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="42.7316%" y="421" width="0.0799%" height="15" fill="rgb(216,158,13)" fg:x="535" fg:w="1"/><text x="42.9816%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.9712%" y="293" width="0.0799%" height="15" fill="rgb(212,47,37)" fg:x="538" fg:w="1"/><text x="43.2212%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.9712%" y="277" width="0.0799%" height="15" fill="rgb(254,16,10)" fg:x="538" fg:w="1"/><text x="43.2212%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.9712%" y="261" width="0.0799%" height="15" fill="rgb(223,228,16)" fg:x="538" fg:w="1"/><text x="43.2212%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.9712%" y="245" width="0.0799%" height="15" fill="rgb(249,108,50)" fg:x="538" fg:w="1"/><text x="43.2212%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="42.9712%" y="229" width="0.0799%" height="15" fill="rgb(208,220,5)" fg:x="538" fg:w="1"/><text x="43.2212%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.9712%" y="213" width="0.0799%" height="15" fill="rgb(217,89,48)" fg:x="538" fg:w="1"/><text x="43.2212%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.9712%" y="325" width="0.1597%" height="15" fill="rgb(212,113,41)" fg:x="538" fg:w="2"/><text x="43.2212%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.9712%" y="309" width="0.1597%" height="15" fill="rgb(231,127,5)" fg:x="538" fg:w="2"/><text x="43.2212%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.0511%" y="293" width="0.0799%" height="15" fill="rgb(217,141,17)" fg:x="539" fg:w="1"/><text x="43.3011%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="42.8115%" y="405" width="0.3994%" height="15" fill="rgb(245,125,54)" fg:x="536" fg:w="5"/><text x="43.0615%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="42.8914%" y="389" width="0.3195%" height="15" fill="rgb(248,125,3)" fg:x="537" fg:w="4"/><text x="43.1414%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="42.8914%" y="373" width="0.3195%" height="15" fill="rgb(236,119,51)" fg:x="537" fg:w="4"/><text x="43.1414%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="42.8914%" y="357" width="0.3195%" height="15" fill="rgb(239,99,8)" fg:x="537" fg:w="4"/><text x="43.1414%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="42.8914%" y="341" width="0.3195%" height="15" fill="rgb(224,228,4)" fg:x="537" fg:w="4"/><text x="43.1414%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="43.1310%" y="325" width="0.0799%" height="15" fill="rgb(220,131,45)" fg:x="540" fg:w="1"/><text x="43.3810%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="43.1310%" y="309" width="0.0799%" height="15" fill="rgb(215,62,5)" fg:x="540" fg:w="1"/><text x="43.3810%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="43.1310%" y="293" width="0.0799%" height="15" fill="rgb(253,12,24)" fg:x="540" fg:w="1"/><text x="43.3810%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (18 samples, 1.44%)</title><rect x="41.8530%" y="565" width="1.4377%" height="15" fill="rgb(248,120,50)" fg:x="524" fg:w="18"/><text x="42.1030%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (18 samples, 1.44%)</title><rect x="41.8530%" y="549" width="1.4377%" height="15" fill="rgb(245,194,10)" fg:x="524" fg:w="18"/><text x="42.1030%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (15 samples, 1.20%)</title><rect x="42.0927%" y="533" width="1.1981%" height="15" fill="rgb(241,149,38)" fg:x="527" fg:w="15"/><text x="42.3427%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (15 samples, 1.20%)</title><rect x="42.0927%" y="517" width="1.1981%" height="15" fill="rgb(219,215,7)" fg:x="527" fg:w="15"/><text x="42.3427%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.20%)</title><rect x="42.0927%" y="501" width="1.1981%" height="15" fill="rgb(208,120,31)" fg:x="527" fg:w="15"/><text x="42.3427%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="42.0927%" y="485" width="1.1981%" height="15" fill="rgb(244,30,8)" fg:x="527" fg:w="15"/><text x="42.3427%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="42.8115%" y="469" width="0.4792%" height="15" fill="rgb(238,35,44)" fg:x="536" fg:w="6"/><text x="43.0615%" y="479.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="42.8115%" y="453" width="0.4792%" height="15" fill="rgb(243,218,37)" fg:x="536" fg:w="6"/><text x="43.0615%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="42.8115%" y="437" width="0.4792%" height="15" fill="rgb(218,169,10)" fg:x="536" fg:w="6"/><text x="43.0615%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="42.8115%" y="421" width="0.4792%" height="15" fill="rgb(221,144,10)" fg:x="536" fg:w="6"/><text x="43.0615%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="43.2109%" y="405" width="0.0799%" height="15" fill="rgb(226,41,38)" fg:x="541" fg:w="1"/><text x="43.4609%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.2109%" y="389" width="0.0799%" height="15" fill="rgb(228,3,1)" fg:x="541" fg:w="1"/><text x="43.4609%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="43.6901%" y="325" width="0.1597%" height="15" fill="rgb(209,129,12)" fg:x="547" fg:w="2"/><text x="43.9401%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.7700%" y="309" width="0.0799%" height="15" fill="rgb(213,136,33)" fg:x="548" fg:w="1"/><text x="44.0200%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.7700%" y="293" width="0.0799%" height="15" fill="rgb(209,181,29)" fg:x="548" fg:w="1"/><text x="44.0200%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="43.8498%" y="325" width="0.0799%" height="15" fill="rgb(234,173,18)" fg:x="549" fg:w="1"/><text x="44.0998%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="43.8498%" y="309" width="0.0799%" height="15" fill="rgb(227,73,47)" fg:x="549" fg:w="1"/><text x="44.0998%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.8498%" y="293" width="0.0799%" height="15" fill="rgb(234,9,34)" fg:x="549" fg:w="1"/><text x="44.0998%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="43.8498%" y="277" width="0.0799%" height="15" fill="rgb(235,172,15)" fg:x="549" fg:w="1"/><text x="44.0998%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.8498%" y="261" width="0.0799%" height="15" fill="rgb(245,61,2)" fg:x="549" fg:w="1"/><text x="44.0998%" y="271.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="44.0096%" y="309" width="0.3195%" height="15" fill="rgb(238,39,47)" fg:x="551" fg:w="4"/><text x="44.2596%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="44.0895%" y="293" width="0.2396%" height="15" fill="rgb(234,37,24)" fg:x="552" fg:w="3"/><text x="44.3395%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="44.1693%" y="277" width="0.1597%" height="15" fill="rgb(248,223,24)" fg:x="553" fg:w="2"/><text x="44.4193%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="44.3291%" y="293" width="0.0799%" height="15" fill="rgb(223,12,15)" fg:x="555" fg:w="1"/><text x="44.5791%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="44.4089%" y="293" width="0.0799%" height="15" fill="rgb(249,6,3)" fg:x="556" fg:w="1"/><text x="44.6589%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.4089%" y="277" width="0.0799%" height="15" fill="rgb(237,105,33)" fg:x="556" fg:w="1"/><text x="44.6589%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (12 samples, 0.96%)</title><rect x="43.6102%" y="389" width="0.9585%" height="15" fill="rgb(252,208,35)" fg:x="546" fg:w="12"/><text x="43.8602%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (11 samples, 0.88%)</title><rect x="43.6901%" y="373" width="0.8786%" height="15" fill="rgb(215,181,35)" fg:x="547" fg:w="11"/><text x="43.9401%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (11 samples, 0.88%)</title><rect x="43.6901%" y="357" width="0.8786%" height="15" fill="rgb(246,212,3)" fg:x="547" fg:w="11"/><text x="43.9401%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="43.6901%" y="341" width="0.8786%" height="15" fill="rgb(247,156,24)" fg:x="547" fg:w="11"/><text x="43.9401%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (8 samples, 0.64%)</title><rect x="43.9297%" y="325" width="0.6390%" height="15" fill="rgb(248,9,31)" fg:x="550" fg:w="8"/><text x="44.1797%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (3 samples, 0.24%)</title><rect x="44.3291%" y="309" width="0.2396%" height="15" fill="rgb(234,26,45)" fg:x="555" fg:w="3"/><text x="44.5791%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct_variant (1 samples, 0.08%)</title><rect x="44.4888%" y="293" width="0.0799%" height="15" fill="rgb(249,11,32)" fg:x="557" fg:w="1"/><text x="44.7388%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.4888%" y="277" width="0.0799%" height="15" fill="rgb(249,162,33)" fg:x="557" fg:w="1"/><text x="44.7388%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="44.7284%" y="357" width="0.1597%" height="15" fill="rgb(232,4,32)" fg:x="560" fg:w="2"/><text x="44.9784%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="44.7284%" y="341" width="0.1597%" height="15" fill="rgb(212,5,45)" fg:x="560" fg:w="2"/><text x="44.9784%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="44.7284%" y="325" width="0.1597%" height="15" fill="rgb(227,95,13)" fg:x="560" fg:w="2"/><text x="44.9784%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="44.8083%" y="309" width="0.0799%" height="15" fill="rgb(223,205,10)" fg:x="561" fg:w="1"/><text x="45.0583%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="44.8083%" y="293" width="0.0799%" height="15" fill="rgb(222,178,8)" fg:x="561" fg:w="1"/><text x="45.0583%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.8083%" y="277" width="0.0799%" height="15" fill="rgb(216,13,22)" fg:x="561" fg:w="1"/><text x="45.0583%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="45.0479%" y="261" width="0.0799%" height="15" fill="rgb(240,167,12)" fg:x="564" fg:w="1"/><text x="45.2979%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="44.9681%" y="341" width="0.4792%" height="15" fill="rgb(235,68,35)" fg:x="563" fg:w="6"/><text x="45.2181%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="44.9681%" y="325" width="0.4792%" height="15" fill="rgb(253,40,27)" fg:x="563" fg:w="6"/><text x="45.2181%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="44.9681%" y="309" width="0.4792%" height="15" fill="rgb(214,19,28)" fg:x="563" fg:w="6"/><text x="45.2181%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="44.9681%" y="293" width="0.4792%" height="15" fill="rgb(210,167,45)" fg:x="563" fg:w="6"/><text x="45.2181%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="45.0479%" y="277" width="0.3994%" height="15" fill="rgb(232,97,40)" fg:x="564" fg:w="5"/><text x="45.2979%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="45.1278%" y="261" width="0.3195%" height="15" fill="rgb(250,35,23)" fg:x="565" fg:w="4"/><text x="45.3778%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="45.1278%" y="245" width="0.3195%" height="15" fill="rgb(248,47,53)" fg:x="565" fg:w="4"/><text x="45.3778%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="45.3674%" y="229" width="0.0799%" height="15" fill="rgb(226,58,50)" fg:x="568" fg:w="1"/><text x="45.6174%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.4473%" y="341" width="0.0799%" height="15" fill="rgb(217,105,26)" fg:x="569" fg:w="1"/><text x="45.6973%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.5272%" y="325" width="0.0799%" height="15" fill="rgb(208,64,1)" fg:x="570" fg:w="1"/><text x="45.7772%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="45.5272%" y="309" width="0.0799%" height="15" fill="rgb(214,80,1)" fg:x="570" fg:w="1"/><text x="45.7772%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="45.5272%" y="293" width="0.0799%" height="15" fill="rgb(206,175,26)" fg:x="570" fg:w="1"/><text x="45.7772%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="45.5272%" y="277" width="0.0799%" height="15" fill="rgb(235,156,37)" fg:x="570" fg:w="1"/><text x="45.7772%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="45.5272%" y="261" width="0.0799%" height="15" fill="rgb(213,100,9)" fg:x="570" fg:w="1"/><text x="45.7772%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.5272%" y="245" width="0.0799%" height="15" fill="rgb(241,15,13)" fg:x="570" fg:w="1"/><text x="45.7772%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.5272%" y="229" width="0.0799%" height="15" fill="rgb(205,97,43)" fg:x="570" fg:w="1"/><text x="45.7772%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="45.5272%" y="213" width="0.0799%" height="15" fill="rgb(216,106,32)" fg:x="570" fg:w="1"/><text x="45.7772%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="45.5272%" y="197" width="0.0799%" height="15" fill="rgb(226,200,8)" fg:x="570" fg:w="1"/><text x="45.7772%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="45.5272%" y="181" width="0.0799%" height="15" fill="rgb(244,54,29)" fg:x="570" fg:w="1"/><text x="45.7772%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="45.5272%" y="165" width="0.0799%" height="15" fill="rgb(252,169,12)" fg:x="570" fg:w="1"/><text x="45.7772%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="45.5272%" y="149" width="0.0799%" height="15" fill="rgb(231,199,11)" fg:x="570" fg:w="1"/><text x="45.7772%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="45.5272%" y="133" width="0.0799%" height="15" fill="rgb(233,191,18)" fg:x="570" fg:w="1"/><text x="45.7772%" y="143.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (10 samples, 0.80%)</title><rect x="44.8882%" y="357" width="0.7987%" height="15" fill="rgb(215,83,47)" fg:x="562" fg:w="10"/><text x="45.1382%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (2 samples, 0.16%)</title><rect x="45.5272%" y="341" width="0.1597%" height="15" fill="rgb(251,67,19)" fg:x="570" fg:w="2"/><text x="45.7772%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="45.6070%" y="325" width="0.0799%" height="15" fill="rgb(240,7,20)" fg:x="571" fg:w="1"/><text x="45.8570%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.6869%" y="357" width="0.0799%" height="15" fill="rgb(210,150,26)" fg:x="572" fg:w="1"/><text x="45.9369%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;plugins_core::fashion::model::Article&gt;&gt; (1 samples, 0.08%)</title><rect x="45.6869%" y="341" width="0.0799%" height="15" fill="rgb(228,75,42)" fg:x="572" fg:w="1"/><text x="45.9369%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="45.7668%" y="357" width="0.0799%" height="15" fill="rgb(237,134,48)" fg:x="573" fg:w="1"/><text x="46.0168%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="45.7668%" y="341" width="0.0799%" height="15" fill="rgb(205,80,50)" fg:x="573" fg:w="1"/><text x="46.0168%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="45.7668%" y="325" width="0.0799%" height="15" fill="rgb(217,74,48)" fg:x="573" fg:w="1"/><text x="46.0168%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="45.7668%" y="309" width="0.0799%" height="15" fill="rgb(205,82,50)" fg:x="573" fg:w="1"/><text x="46.0168%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="45.7668%" y="293" width="0.0799%" height="15" fill="rgb(228,1,33)" fg:x="573" fg:w="1"/><text x="46.0168%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.8466%" y="341" width="0.0799%" height="15" fill="rgb(214,50,23)" fg:x="574" fg:w="1"/><text x="46.0966%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="45.8466%" y="357" width="0.1597%" height="15" fill="rgb(210,62,9)" fg:x="574" fg:w="2"/><text x="46.0966%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="45.9265%" y="341" width="0.0799%" height="15" fill="rgb(210,104,37)" fg:x="575" fg:w="1"/><text x="46.1765%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="46.0064%" y="293" width="0.1597%" height="15" fill="rgb(232,104,43)" fg:x="576" fg:w="2"/><text x="46.2564%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.0863%" y="277" width="0.0799%" height="15" fill="rgb(244,52,6)" fg:x="577" fg:w="1"/><text x="46.3363%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.0863%" y="261" width="0.0799%" height="15" fill="rgb(211,174,52)" fg:x="577" fg:w="1"/><text x="46.3363%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.0863%" y="245" width="0.0799%" height="15" fill="rgb(229,48,4)" fg:x="577" fg:w="1"/><text x="46.3363%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.0863%" y="229" width="0.0799%" height="15" fill="rgb(205,155,16)" fg:x="577" fg:w="1"/><text x="46.3363%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.0863%" y="213" width="0.0799%" height="15" fill="rgb(211,141,53)" fg:x="577" fg:w="1"/><text x="46.3363%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="46.0863%" y="197" width="0.0799%" height="15" fill="rgb(240,148,11)" fg:x="577" fg:w="1"/><text x="46.3363%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="46.0863%" y="181" width="0.0799%" height="15" fill="rgb(214,45,23)" fg:x="577" fg:w="1"/><text x="46.3363%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="46.0064%" y="325" width="0.2396%" height="15" fill="rgb(248,74,26)" fg:x="576" fg:w="3"/><text x="46.2564%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="46.0064%" y="309" width="0.2396%" height="15" fill="rgb(218,121,16)" fg:x="576" fg:w="3"/><text x="46.2564%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.1661%" y="293" width="0.0799%" height="15" fill="rgb(218,10,47)" fg:x="578" fg:w="1"/><text x="46.4161%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.1661%" y="277" width="0.0799%" height="15" fill="rgb(227,99,14)" fg:x="578" fg:w="1"/><text x="46.4161%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.1661%" y="261" width="0.0799%" height="15" fill="rgb(229,83,46)" fg:x="578" fg:w="1"/><text x="46.4161%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.1661%" y="245" width="0.0799%" height="15" fill="rgb(228,25,1)" fg:x="578" fg:w="1"/><text x="46.4161%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.1661%" y="229" width="0.0799%" height="15" fill="rgb(252,190,15)" fg:x="578" fg:w="1"/><text x="46.4161%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.1661%" y="213" width="0.0799%" height="15" fill="rgb(213,103,51)" fg:x="578" fg:w="1"/><text x="46.4161%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="46.1661%" y="197" width="0.0799%" height="15" fill="rgb(220,38,44)" fg:x="578" fg:w="1"/><text x="46.4161%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="46.1661%" y="181" width="0.0799%" height="15" fill="rgb(210,45,26)" fg:x="578" fg:w="1"/><text x="46.4161%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="46.1661%" y="165" width="0.0799%" height="15" fill="rgb(205,95,48)" fg:x="578" fg:w="1"/><text x="46.4161%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="46.1661%" y="149" width="0.0799%" height="15" fill="rgb(225,179,37)" fg:x="578" fg:w="1"/><text x="46.4161%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="46.1661%" y="133" width="0.0799%" height="15" fill="rgb(230,209,3)" fg:x="578" fg:w="1"/><text x="46.4161%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.2460%" y="325" width="0.0799%" height="15" fill="rgb(248,12,46)" fg:x="579" fg:w="1"/><text x="46.4960%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="46.3259%" y="261" width="0.1597%" height="15" fill="rgb(234,18,0)" fg:x="580" fg:w="2"/><text x="46.5759%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="46.4058%" y="245" width="0.0799%" height="15" fill="rgb(238,197,14)" fg:x="581" fg:w="1"/><text x="46.6558%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.4856%" y="229" width="0.0799%" height="15" fill="rgb(251,162,48)" fg:x="582" fg:w="1"/><text x="46.7356%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.64%)</title><rect x="46.0064%" y="341" width="0.6390%" height="15" fill="rgb(237,73,42)" fg:x="576" fg:w="8"/><text x="46.2564%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="46.3259%" y="325" width="0.3195%" height="15" fill="rgb(211,108,8)" fg:x="580" fg:w="4"/><text x="46.5759%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="46.3259%" y="309" width="0.3195%" height="15" fill="rgb(213,45,22)" fg:x="580" fg:w="4"/><text x="46.5759%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="46.3259%" y="293" width="0.3195%" height="15" fill="rgb(252,154,5)" fg:x="580" fg:w="4"/><text x="46.5759%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="46.3259%" y="277" width="0.3195%" height="15" fill="rgb(221,79,52)" fg:x="580" fg:w="4"/><text x="46.5759%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="46.4856%" y="261" width="0.1597%" height="15" fill="rgb(229,220,36)" fg:x="582" fg:w="2"/><text x="46.7356%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="46.4856%" y="245" width="0.1597%" height="15" fill="rgb(211,17,16)" fg:x="582" fg:w="2"/><text x="46.7356%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="46.5655%" y="229" width="0.0799%" height="15" fill="rgb(222,55,31)" fg:x="583" fg:w="1"/><text x="46.8155%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.5655%" y="213" width="0.0799%" height="15" fill="rgb(221,221,31)" fg:x="583" fg:w="1"/><text x="46.8155%" y="223.50"></text></g><g><title>kernel::model::EntityPtr::gid (9 samples, 0.72%)</title><rect x="46.0064%" y="357" width="0.7188%" height="15" fill="rgb(227,168,26)" fg:x="576" fg:w="9"/><text x="46.2564%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.6454%" y="341" width="0.0799%" height="15" fill="rgb(224,139,9)" fg:x="584" fg:w="1"/><text x="46.8954%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="46.7252%" y="357" width="0.0799%" height="15" fill="rgb(254,172,0)" fg:x="585" fg:w="1"/><text x="46.9752%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.7252%" y="341" width="0.0799%" height="15" fill="rgb(235,203,1)" fg:x="585" fg:w="1"/><text x="46.9752%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="46.7252%" y="325" width="0.0799%" height="15" fill="rgb(216,205,24)" fg:x="585" fg:w="1"/><text x="46.9752%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="46.7252%" y="309" width="0.0799%" height="15" fill="rgb(233,24,6)" fg:x="585" fg:w="1"/><text x="46.9752%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="46.7252%" y="293" width="0.0799%" height="15" fill="rgb(244,110,9)" fg:x="585" fg:w="1"/><text x="46.9752%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="46.7252%" y="277" width="0.0799%" height="15" fill="rgb(239,222,42)" fg:x="585" fg:w="1"/><text x="46.9752%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="46.7252%" y="261" width="0.0799%" height="15" fill="rgb(218,145,13)" fg:x="585" fg:w="1"/><text x="46.9752%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="46.7252%" y="245" width="0.0799%" height="15" fill="rgb(207,69,11)" fg:x="585" fg:w="1"/><text x="46.9752%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="46.8051%" y="309" width="0.1597%" height="15" fill="rgb(220,223,22)" fg:x="586" fg:w="2"/><text x="47.0551%" y="319.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (2 samples, 0.16%)</title><rect x="46.8051%" y="293" width="0.1597%" height="15" fill="rgb(245,102,5)" fg:x="586" fg:w="2"/><text x="47.0551%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.16%)</title><rect x="46.8051%" y="277" width="0.1597%" height="15" fill="rgb(211,148,2)" fg:x="586" fg:w="2"/><text x="47.0551%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.16%)</title><rect x="46.8051%" y="261" width="0.1597%" height="15" fill="rgb(241,13,44)" fg:x="586" fg:w="2"/><text x="47.0551%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="46.8051%" y="245" width="0.1597%" height="15" fill="rgb(219,137,21)" fg:x="586" fg:w="2"/><text x="47.0551%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="46.8051%" y="229" width="0.1597%" height="15" fill="rgb(242,206,5)" fg:x="586" fg:w="2"/><text x="47.0551%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.16%)</title><rect x="46.8051%" y="213" width="0.1597%" height="15" fill="rgb(217,114,22)" fg:x="586" fg:w="2"/><text x="47.0551%" y="223.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (2 samples, 0.16%)</title><rect x="46.8051%" y="197" width="0.1597%" height="15" fill="rgb(253,206,42)" fg:x="586" fg:w="2"/><text x="47.0551%" y="207.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="46.9649%" y="293" width="0.0799%" height="15" fill="rgb(236,102,18)" fg:x="588" fg:w="1"/><text x="47.2149%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="47.0447%" y="277" width="0.0799%" height="15" fill="rgb(208,59,49)" fg:x="589" fg:w="1"/><text x="47.2947%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="47.0447%" y="261" width="0.0799%" height="15" fill="rgb(215,194,28)" fg:x="589" fg:w="1"/><text x="47.2947%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="47.0447%" y="245" width="0.0799%" height="15" fill="rgb(243,207,11)" fg:x="589" fg:w="1"/><text x="47.2947%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="47.0447%" y="229" width="0.0799%" height="15" fill="rgb(254,179,35)" fg:x="589" fg:w="1"/><text x="47.2947%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="47.0447%" y="213" width="0.0799%" height="15" fill="rgb(235,97,3)" fg:x="589" fg:w="1"/><text x="47.2947%" y="223.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="47.0447%" y="197" width="0.0799%" height="15" fill="rgb(215,155,33)" fg:x="589" fg:w="1"/><text x="47.2947%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (1 samples, 0.08%)</title><rect x="47.0447%" y="181" width="0.0799%" height="15" fill="rgb(223,128,12)" fg:x="589" fg:w="1"/><text x="47.2947%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (1 samples, 0.08%)</title><rect x="47.0447%" y="165" width="0.0799%" height="15" fill="rgb(208,157,18)" fg:x="589" fg:w="1"/><text x="47.2947%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.2045%" y="229" width="0.0799%" height="15" fill="rgb(249,70,54)" fg:x="591" fg:w="1"/><text x="47.4545%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2045%" y="213" width="0.0799%" height="15" fill="rgb(244,118,24)" fg:x="591" fg:w="1"/><text x="47.4545%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="47.2843%" y="229" width="0.0799%" height="15" fill="rgb(211,54,0)" fg:x="592" fg:w="1"/><text x="47.5343%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.2843%" y="213" width="0.0799%" height="15" fill="rgb(245,137,45)" fg:x="592" fg:w="1"/><text x="47.5343%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.2843%" y="197" width="0.0799%" height="15" fill="rgb(232,154,31)" fg:x="592" fg:w="1"/><text x="47.5343%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="47.3642%" y="213" width="0.6390%" height="15" fill="rgb(253,6,39)" fg:x="593" fg:w="8"/><text x="47.6142%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="47.3642%" y="197" width="0.6390%" height="15" fill="rgb(234,183,24)" fg:x="593" fg:w="8"/><text x="47.6142%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="47.8435%" y="181" width="0.1597%" height="15" fill="rgb(252,84,40)" fg:x="599" fg:w="2"/><text x="48.0935%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="48.0032%" y="213" width="0.3195%" height="15" fill="rgb(224,65,2)" fg:x="601" fg:w="4"/><text x="48.2532%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="48.0032%" y="197" width="0.3195%" height="15" fill="rgb(229,38,24)" fg:x="601" fg:w="4"/><text x="48.2532%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="48.2428%" y="181" width="0.0799%" height="15" fill="rgb(218,131,50)" fg:x="604" fg:w="1"/><text x="48.4928%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.2428%" y="165" width="0.0799%" height="15" fill="rgb(233,106,18)" fg:x="604" fg:w="1"/><text x="48.4928%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.4026%" y="149" width="0.0799%" height="15" fill="rgb(220,216,11)" fg:x="606" fg:w="1"/><text x="48.6526%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.4026%" y="133" width="0.0799%" height="15" fill="rgb(251,100,45)" fg:x="606" fg:w="1"/><text x="48.6526%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.4026%" y="117" width="0.0799%" height="15" fill="rgb(235,143,32)" fg:x="606" fg:w="1"/><text x="48.6526%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.4026%" y="101" width="0.0799%" height="15" fill="rgb(248,124,34)" fg:x="606" fg:w="1"/><text x="48.6526%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="48.4824%" y="149" width="0.3195%" height="15" fill="rgb(225,221,4)" fg:x="607" fg:w="4"/><text x="48.7324%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="48.6422%" y="133" width="0.1597%" height="15" fill="rgb(242,27,43)" fg:x="609" fg:w="2"/><text x="48.8922%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="48.6422%" y="117" width="0.1597%" height="15" fill="rgb(227,54,8)" fg:x="609" fg:w="2"/><text x="48.8922%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="48.8019%" y="149" width="0.1597%" height="15" fill="rgb(253,139,49)" fg:x="611" fg:w="2"/><text x="49.0519%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="48.8019%" y="133" width="0.1597%" height="15" fill="rgb(231,26,43)" fg:x="611" fg:w="2"/><text x="49.0519%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="48.8019%" y="117" width="0.1597%" height="15" fill="rgb(207,121,39)" fg:x="611" fg:w="2"/><text x="49.0519%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.8818%" y="101" width="0.0799%" height="15" fill="rgb(223,101,35)" fg:x="612" fg:w="1"/><text x="49.1318%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.9617%" y="133" width="0.0799%" height="15" fill="rgb(232,87,23)" fg:x="613" fg:w="1"/><text x="49.2117%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.91%)</title><rect x="48.9617%" y="149" width="3.9137%" height="15" fill="rgb(225,180,29)" fg:x="613" fg:w="49"/><text x="49.2117%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (48 samples, 3.83%)</title><rect x="49.0415%" y="133" width="3.8339%" height="15" fill="rgb(225,25,17)" fg:x="614" fg:w="48"/><text x="49.2915%" y="143.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.83%)</title><rect x="49.0415%" y="117" width="3.8339%" height="15" fill="rgb(223,8,52)" fg:x="614" fg:w="48"/><text x="49.2915%" y="127.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="52.8754%" y="149" width="0.2396%" height="15" fill="rgb(246,42,21)" fg:x="662" fg:w="3"/><text x="53.1254%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.0351%" y="133" width="0.0799%" height="15" fill="rgb(205,64,43)" fg:x="664" fg:w="1"/><text x="53.2851%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="53.1150%" y="149" width="0.1597%" height="15" fill="rgb(221,160,13)" fg:x="665" fg:w="2"/><text x="53.3650%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.95%)</title><rect x="48.4026%" y="197" width="4.9521%" height="15" fill="rgb(239,58,35)" fg:x="606" fg:w="62"/><text x="48.6526%" y="207.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 4.95%)</title><rect x="48.4026%" y="181" width="4.9521%" height="15" fill="rgb(251,26,40)" fg:x="606" fg:w="62"/><text x="48.6526%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 4.95%)</title><rect x="48.4026%" y="165" width="4.9521%" height="15" fill="rgb(247,0,4)" fg:x="606" fg:w="62"/><text x="48.6526%" y="175.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="53.2748%" y="149" width="0.0799%" height="15" fill="rgb(218,130,10)" fg:x="667" fg:w="1"/><text x="53.5248%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="53.5144%" y="181" width="0.4792%" height="15" fill="rgb(239,32,7)" fg:x="670" fg:w="6"/><text x="53.7644%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.8339%" y="165" width="0.1597%" height="15" fill="rgb(210,192,24)" fg:x="674" fg:w="2"/><text x="54.0839%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.9137%" y="149" width="0.0799%" height="15" fill="rgb(226,212,17)" fg:x="675" fg:w="1"/><text x="54.1637%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.9137%" y="133" width="0.0799%" height="15" fill="rgb(219,201,28)" fg:x="675" fg:w="1"/><text x="54.1637%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="53.9936%" y="181" width="0.3994%" height="15" fill="rgb(235,207,41)" fg:x="676" fg:w="5"/><text x="54.2436%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="53.3546%" y="197" width="1.1182%" height="15" fill="rgb(241,95,54)" fg:x="668" fg:w="14"/><text x="53.6046%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="54.3930%" y="181" width="0.0799%" height="15" fill="rgb(248,12,23)" fg:x="681" fg:w="1"/><text x="54.6430%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (78 samples, 6.23%)</title><rect x="48.3227%" y="213" width="6.2300%" height="15" fill="rgb(228,173,4)" fg:x="605" fg:w="78"/><text x="48.5727%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="54.4728%" y="197" width="0.0799%" height="15" fill="rgb(254,99,5)" fg:x="682" fg:w="1"/><text x="54.7228%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="54.4728%" y="181" width="0.0799%" height="15" fill="rgb(212,184,17)" fg:x="682" fg:w="1"/><text x="54.7228%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="54.4728%" y="165" width="0.0799%" height="15" fill="rgb(252,174,1)" fg:x="682" fg:w="1"/><text x="54.7228%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (92 samples, 7.35%)</title><rect x="47.3642%" y="229" width="7.3482%" height="15" fill="rgb(241,118,51)" fg:x="593" fg:w="92"/><text x="47.6142%" y="239.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="54.5527%" y="213" width="0.1597%" height="15" fill="rgb(227,94,47)" fg:x="683" fg:w="2"/><text x="54.8027%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="54.8722%" y="181" width="0.0799%" height="15" fill="rgb(229,104,2)" fg:x="687" fg:w="1"/><text x="55.1222%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="54.8722%" y="165" width="0.0799%" height="15" fill="rgb(219,28,31)" fg:x="687" fg:w="1"/><text x="55.1222%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="54.8722%" y="149" width="0.0799%" height="15" fill="rgb(233,109,36)" fg:x="687" fg:w="1"/><text x="55.1222%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="54.7125%" y="229" width="0.3195%" height="15" fill="rgb(246,88,11)" fg:x="685" fg:w="4"/><text x="54.9625%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="54.7125%" y="213" width="0.3195%" height="15" fill="rgb(209,212,17)" fg:x="685" fg:w="4"/><text x="54.9625%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="54.8722%" y="197" width="0.1597%" height="15" fill="rgb(243,59,29)" fg:x="687" fg:w="2"/><text x="55.1222%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="54.9521%" y="181" width="0.0799%" height="15" fill="rgb(244,205,48)" fg:x="688" fg:w="1"/><text x="55.2021%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.9521%" y="165" width="0.0799%" height="15" fill="rgb(227,30,6)" fg:x="688" fg:w="1"/><text x="55.2021%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.9521%" y="149" width="0.0799%" height="15" fill="rgb(220,205,48)" fg:x="688" fg:w="1"/><text x="55.2021%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.9521%" y="133" width="0.0799%" height="15" fill="rgb(250,94,14)" fg:x="688" fg:w="1"/><text x="55.2021%" y="143.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (100 samples, 7.99%)</title><rect x="47.1246%" y="277" width="7.9872%" height="15" fill="rgb(216,119,42)" fg:x="590" fg:w="100"/><text x="47.3746%" y="287.50">&lt;regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (100 samples, 7.99%)</title><rect x="47.1246%" y="261" width="7.9872%" height="15" fill="rgb(232,155,0)" fg:x="590" fg:w="100"/><text x="47.3746%" y="271.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (100 samples, 7.99%)</title><rect x="47.1246%" y="245" width="7.9872%" height="15" fill="rgb(212,24,32)" fg:x="590" fg:w="100"/><text x="47.3746%" y="255.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="55.0319%" y="229" width="0.0799%" height="15" fill="rgb(216,69,20)" fg:x="689" fg:w="1"/><text x="55.2819%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="55.0319%" y="213" width="0.0799%" height="15" fill="rgb(229,73,31)" fg:x="689" fg:w="1"/><text x="55.2819%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="55.0319%" y="197" width="0.0799%" height="15" fill="rgb(224,219,20)" fg:x="689" fg:w="1"/><text x="55.2819%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="55.0319%" y="181" width="0.0799%" height="15" fill="rgb(215,146,41)" fg:x="689" fg:w="1"/><text x="55.2819%" y="191.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="55.0319%" y="165" width="0.0799%" height="15" fill="rgb(244,71,31)" fg:x="689" fg:w="1"/><text x="55.2819%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="55.1118%" y="229" width="0.1597%" height="15" fill="rgb(224,24,11)" fg:x="690" fg:w="2"/><text x="55.3618%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.1917%" y="213" width="0.0799%" height="15" fill="rgb(229,76,15)" fg:x="691" fg:w="1"/><text x="55.4417%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="55.1118%" y="277" width="0.2396%" height="15" fill="rgb(209,93,2)" fg:x="690" fg:w="3"/><text x="55.3618%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="55.1118%" y="261" width="0.2396%" height="15" fill="rgb(216,200,50)" fg:x="690" fg:w="3"/><text x="55.3618%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="55.1118%" y="245" width="0.2396%" height="15" fill="rgb(211,67,34)" fg:x="690" fg:w="3"/><text x="55.3618%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="55.2716%" y="229" width="0.0799%" height="15" fill="rgb(225,87,47)" fg:x="692" fg:w="1"/><text x="55.5216%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.2716%" y="213" width="0.0799%" height="15" fill="rgb(217,185,16)" fg:x="692" fg:w="1"/><text x="55.5216%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (110 samples, 8.79%)</title><rect x="47.0447%" y="293" width="8.7859%" height="15" fill="rgb(205,0,0)" fg:x="589" fg:w="110"/><text x="47.2947%" y="303.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="55.3514%" y="277" width="0.4792%" height="15" fill="rgb(207,116,45)" fg:x="693" fg:w="6"/><text x="55.6014%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="55.3514%" y="261" width="0.4792%" height="15" fill="rgb(221,156,26)" fg:x="693" fg:w="6"/><text x="55.6014%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="55.3514%" y="245" width="0.4792%" height="15" fill="rgb(213,140,4)" fg:x="693" fg:w="6"/><text x="55.6014%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="55.3514%" y="229" width="0.4792%" height="15" fill="rgb(231,224,15)" fg:x="693" fg:w="6"/><text x="55.6014%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="55.3514%" y="213" width="0.4792%" height="15" fill="rgb(244,76,20)" fg:x="693" fg:w="6"/><text x="55.6014%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.7508%" y="197" width="0.0799%" height="15" fill="rgb(238,117,7)" fg:x="698" fg:w="1"/><text x="56.0008%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.8307%" y="229" width="0.0799%" height="15" fill="rgb(235,1,10)" fg:x="699" fg:w="1"/><text x="56.0807%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.8307%" y="213" width="0.0799%" height="15" fill="rgb(216,165,6)" fg:x="699" fg:w="1"/><text x="56.0807%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="55.8307%" y="197" width="0.0799%" height="15" fill="rgb(246,91,35)" fg:x="699" fg:w="1"/><text x="56.0807%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="55.9105%" y="229" width="0.1597%" height="15" fill="rgb(228,96,24)" fg:x="700" fg:w="2"/><text x="56.1605%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="55.9105%" y="213" width="0.1597%" height="15" fill="rgb(254,217,53)" fg:x="700" fg:w="2"/><text x="56.1605%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="55.9904%" y="197" width="0.0799%" height="15" fill="rgb(209,60,0)" fg:x="701" fg:w="1"/><text x="56.2404%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.9904%" y="181" width="0.0799%" height="15" fill="rgb(250,93,26)" fg:x="701" fg:w="1"/><text x="56.2404%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.0703%" y="213" width="0.0799%" height="15" fill="rgb(211,9,40)" fg:x="702" fg:w="1"/><text x="56.3203%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.2300%" y="197" width="0.1597%" height="15" fill="rgb(242,57,20)" fg:x="704" fg:w="2"/><text x="56.4800%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="56.1502%" y="213" width="0.9585%" height="15" fill="rgb(248,85,48)" fg:x="703" fg:w="12"/><text x="56.4002%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="56.3898%" y="197" width="0.7188%" height="15" fill="rgb(212,117,2)" fg:x="706" fg:w="9"/><text x="56.6398%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.9489%" y="181" width="0.1597%" height="15" fill="rgb(243,19,3)" fg:x="713" fg:w="2"/><text x="57.1989%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="57.1086%" y="213" width="0.0799%" height="15" fill="rgb(232,217,24)" fg:x="715" fg:w="1"/><text x="57.3586%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="57.1086%" y="197" width="0.0799%" height="15" fill="rgb(224,175,40)" fg:x="715" fg:w="1"/><text x="57.3586%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.4281%" y="181" width="0.0799%" height="15" fill="rgb(212,162,32)" fg:x="719" fg:w="1"/><text x="57.6781%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="57.5080%" y="181" width="0.3195%" height="15" fill="rgb(215,9,4)" fg:x="720" fg:w="4"/><text x="57.7580%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="57.5080%" y="165" width="0.3195%" height="15" fill="rgb(242,42,7)" fg:x="720" fg:w="4"/><text x="57.7580%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="57.5080%" y="149" width="0.3195%" height="15" fill="rgb(242,184,45)" fg:x="720" fg:w="4"/><text x="57.7580%" y="159.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="57.5080%" y="133" width="0.3195%" height="15" fill="rgb(228,111,51)" fg:x="720" fg:w="4"/><text x="57.7580%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (14 samples, 1.12%)</title><rect x="57.1885%" y="213" width="1.1182%" height="15" fill="rgb(236,147,17)" fg:x="716" fg:w="14"/><text x="57.4385%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (14 samples, 1.12%)</title><rect x="57.1885%" y="197" width="1.1182%" height="15" fill="rgb(210,75,22)" fg:x="716" fg:w="14"/><text x="57.4385%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.48%)</title><rect x="57.8275%" y="181" width="0.4792%" height="15" fill="rgb(217,159,45)" fg:x="724" fg:w="6"/><text x="58.0775%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.48%)</title><rect x="57.8275%" y="165" width="0.4792%" height="15" fill="rgb(245,165,53)" fg:x="724" fg:w="6"/><text x="58.0775%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.48%)</title><rect x="57.8275%" y="149" width="0.4792%" height="15" fill="rgb(251,190,50)" fg:x="724" fg:w="6"/><text x="58.0775%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="58.3067%" y="213" width="0.0799%" height="15" fill="rgb(208,203,29)" fg:x="730" fg:w="1"/><text x="58.5567%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="58.3866%" y="149" width="0.0799%" height="15" fill="rgb(207,209,35)" fg:x="731" fg:w="1"/><text x="58.6366%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="58.3866%" y="133" width="0.0799%" height="15" fill="rgb(230,144,49)" fg:x="731" fg:w="1"/><text x="58.6366%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="59.4249%" y="101" width="0.2396%" height="15" fill="rgb(229,31,6)" fg:x="744" fg:w="3"/><text x="59.6749%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.6645%" y="101" width="0.0799%" height="15" fill="rgb(251,129,24)" fg:x="747" fg:w="1"/><text x="59.9145%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.7444%" y="101" width="0.0799%" height="15" fill="rgb(235,105,15)" fg:x="748" fg:w="1"/><text x="59.9944%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="59.8243%" y="101" width="0.1597%" height="15" fill="rgb(216,52,43)" fg:x="749" fg:w="2"/><text x="60.0743%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.9042%" y="85" width="0.0799%" height="15" fill="rgb(238,144,41)" fg:x="750" fg:w="1"/><text x="60.1542%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9042%" y="69" width="0.0799%" height="15" fill="rgb(243,63,9)" fg:x="750" fg:w="1"/><text x="60.1542%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.9042%" y="53" width="0.0799%" height="15" fill="rgb(246,208,1)" fg:x="750" fg:w="1"/><text x="60.1542%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.3035%" y="37" width="0.1597%" height="15" fill="rgb(233,182,18)" fg:x="755" fg:w="2"/><text x="60.5535%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="60.3035%" y="69" width="0.3994%" height="15" fill="rgb(242,224,8)" fg:x="755" fg:w="5"/><text x="60.5535%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="60.3035%" y="53" width="0.3994%" height="15" fill="rgb(243,54,37)" fg:x="755" fg:w="5"/><text x="60.5535%" y="63.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="60.4633%" y="37" width="0.2396%" height="15" fill="rgb(233,192,12)" fg:x="757" fg:w="3"/><text x="60.7133%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (15 samples, 1.20%)</title><rect x="59.9840%" y="101" width="1.1981%" height="15" fill="rgb(251,192,53)" fg:x="751" fg:w="15"/><text x="60.2340%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.96%)</title><rect x="60.2236%" y="85" width="0.9585%" height="15" fill="rgb(246,141,26)" fg:x="754" fg:w="12"/><text x="60.4736%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="60.7029%" y="69" width="0.4792%" height="15" fill="rgb(239,195,19)" fg:x="760" fg:w="6"/><text x="60.9529%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="61.1821%" y="101" width="0.0799%" height="15" fill="rgb(241,16,39)" fg:x="766" fg:w="1"/><text x="61.4321%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="61.1821%" y="85" width="0.0799%" height="15" fill="rgb(223,13,53)" fg:x="766" fg:w="1"/><text x="61.4321%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (24 samples, 1.92%)</title><rect x="61.2620%" y="101" width="1.9169%" height="15" fill="rgb(214,227,0)" fg:x="767" fg:w="24"/><text x="61.5120%" y="111.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (24 samples, 1.92%)</title><rect x="61.2620%" y="85" width="1.9169%" height="15" fill="rgb(228,103,26)" fg:x="767" fg:w="24"/><text x="61.5120%" y="95.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 1.92%)</title><rect x="61.2620%" y="69" width="1.9169%" height="15" fill="rgb(254,177,53)" fg:x="767" fg:w="24"/><text x="61.5120%" y="79.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="63.1789%" y="101" width="0.1597%" height="15" fill="rgb(208,201,34)" fg:x="791" fg:w="2"/><text x="63.4289%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (64 samples, 5.11%)</title><rect x="58.4665%" y="133" width="5.1118%" height="15" fill="rgb(212,39,5)" fg:x="732" fg:w="64"/><text x="58.7165%" y="143.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (64 samples, 5.11%)</title><rect x="58.4665%" y="117" width="5.1118%" height="15" fill="rgb(246,117,3)" fg:x="732" fg:w="64"/><text x="58.7165%" y="127.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="63.3387%" y="101" width="0.2396%" height="15" fill="rgb(244,118,39)" fg:x="793" fg:w="3"/><text x="63.5887%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.4185%" y="85" width="0.1597%" height="15" fill="rgb(241,64,10)" fg:x="794" fg:w="2"/><text x="63.6685%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.4185%" y="69" width="0.1597%" height="15" fill="rgb(229,39,44)" fg:x="794" fg:w="2"/><text x="63.6685%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4984%" y="53" width="0.0799%" height="15" fill="rgb(230,226,3)" fg:x="795" fg:w="1"/><text x="63.7484%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 5.27%)</title><rect x="58.3866%" y="197" width="5.2716%" height="15" fill="rgb(222,13,42)" fg:x="731" fg:w="66"/><text x="58.6366%" y="207.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (66 samples, 5.27%)</title><rect x="58.3866%" y="181" width="5.2716%" height="15" fill="rgb(247,180,54)" fg:x="731" fg:w="66"/><text x="58.6366%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (66 samples, 5.27%)</title><rect x="58.3866%" y="165" width="5.2716%" height="15" fill="rgb(205,96,16)" fg:x="731" fg:w="66"/><text x="58.6366%" y="175.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (65 samples, 5.19%)</title><rect x="58.4665%" y="149" width="5.1917%" height="15" fill="rgb(205,100,21)" fg:x="732" fg:w="65"/><text x="58.7165%" y="159.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="63.5783%" y="133" width="0.0799%" height="15" fill="rgb(248,51,4)" fg:x="796" fg:w="1"/><text x="63.8283%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7380%" y="181" width="0.0799%" height="15" fill="rgb(217,197,30)" fg:x="798" fg:w="1"/><text x="63.9880%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="63.8179%" y="181" width="0.2396%" height="15" fill="rgb(240,179,40)" fg:x="799" fg:w="3"/><text x="64.0679%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.8978%" y="165" width="0.1597%" height="15" fill="rgb(212,185,35)" fg:x="800" fg:w="2"/><text x="64.1478%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.8978%" y="149" width="0.1597%" height="15" fill="rgb(251,222,31)" fg:x="800" fg:w="2"/><text x="64.1478%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.8978%" y="133" width="0.1597%" height="15" fill="rgb(208,140,36)" fg:x="800" fg:w="2"/><text x="64.1478%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="64.0575%" y="181" width="0.4792%" height="15" fill="rgb(220,148,1)" fg:x="802" fg:w="6"/><text x="64.3075%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4569%" y="165" width="0.0799%" height="15" fill="rgb(254,4,28)" fg:x="807" fg:w="1"/><text x="64.7069%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="64.5367%" y="181" width="0.0799%" height="15" fill="rgb(222,185,44)" fg:x="808" fg:w="1"/><text x="64.7867%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (108 samples, 8.63%)</title><rect x="56.0703%" y="229" width="8.6262%" height="15" fill="rgb(215,74,39)" fg:x="702" fg:w="108"/><text x="56.3203%" y="239.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (79 samples, 6.31%)</title><rect x="58.3866%" y="213" width="6.3099%" height="15" fill="rgb(247,86,4)" fg:x="731" fg:w="79"/><text x="58.6366%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="63.6581%" y="197" width="1.0383%" height="15" fill="rgb(231,105,32)" fg:x="797" fg:w="13"/><text x="63.9081%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="64.6166%" y="181" width="0.0799%" height="15" fill="rgb(222,65,35)" fg:x="809" fg:w="1"/><text x="64.8666%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6166%" y="165" width="0.0799%" height="15" fill="rgb(218,145,35)" fg:x="809" fg:w="1"/><text x="64.8666%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="64.8562%" y="181" width="0.0799%" height="15" fill="rgb(208,7,15)" fg:x="812" fg:w="1"/><text x="65.1062%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="64.8562%" y="165" width="0.0799%" height="15" fill="rgb(209,83,13)" fg:x="812" fg:w="1"/><text x="65.1062%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="64.8562%" y="149" width="0.0799%" height="15" fill="rgb(218,3,10)" fg:x="812" fg:w="1"/><text x="65.1062%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="64.8562%" y="133" width="0.0799%" height="15" fill="rgb(211,219,4)" fg:x="812" fg:w="1"/><text x="65.1062%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="64.6965%" y="197" width="0.3195%" height="15" fill="rgb(228,194,12)" fg:x="810" fg:w="4"/><text x="64.9465%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="64.9361%" y="181" width="0.0799%" height="15" fill="rgb(210,175,7)" fg:x="813" fg:w="1"/><text x="65.1861%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.9361%" y="165" width="0.0799%" height="15" fill="rgb(243,132,6)" fg:x="813" fg:w="1"/><text x="65.1861%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.9361%" y="149" width="0.0799%" height="15" fill="rgb(207,72,18)" fg:x="813" fg:w="1"/><text x="65.1861%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9361%" y="133" width="0.0799%" height="15" fill="rgb(236,1,18)" fg:x="813" fg:w="1"/><text x="65.1861%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="64.6965%" y="229" width="0.3994%" height="15" fill="rgb(227,0,18)" fg:x="810" fg:w="5"/><text x="64.9465%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="64.6965%" y="213" width="0.3994%" height="15" fill="rgb(247,37,5)" fg:x="810" fg:w="5"/><text x="64.9465%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="65.0160%" y="197" width="0.0799%" height="15" fill="rgb(237,179,24)" fg:x="814" fg:w="1"/><text x="65.2660%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.0160%" y="181" width="0.0799%" height="15" fill="rgb(226,53,20)" fg:x="814" fg:w="1"/><text x="65.2660%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="65.0958%" y="197" width="0.0799%" height="15" fill="rgb(247,75,7)" fg:x="815" fg:w="1"/><text x="65.3458%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="65.0958%" y="181" width="0.0799%" height="15" fill="rgb(233,96,12)" fg:x="815" fg:w="1"/><text x="65.3458%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="65.0958%" y="165" width="0.0799%" height="15" fill="rgb(224,125,0)" fg:x="815" fg:w="1"/><text x="65.3458%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="65.3355%" y="181" width="0.0799%" height="15" fill="rgb(224,92,25)" fg:x="818" fg:w="1"/><text x="65.5855%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="65.3355%" y="165" width="0.0799%" height="15" fill="rgb(224,42,24)" fg:x="818" fg:w="1"/><text x="65.5855%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3355%" y="149" width="0.0799%" height="15" fill="rgb(234,132,49)" fg:x="818" fg:w="1"/><text x="65.5855%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="65.1757%" y="197" width="0.3195%" height="15" fill="rgb(248,100,35)" fg:x="816" fg:w="4"/><text x="65.4257%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.4153%" y="181" width="0.0799%" height="15" fill="rgb(239,94,40)" fg:x="819" fg:w="1"/><text x="65.6653%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (122 samples, 9.74%)</title><rect x="55.8307%" y="277" width="9.7444%" height="15" fill="rgb(235,139,28)" fg:x="699" fg:w="122"/><text x="56.0807%" y="287.50">&lt;regex::regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (122 samples, 9.74%)</title><rect x="55.8307%" y="261" width="9.7444%" height="15" fill="rgb(217,144,7)" fg:x="699" fg:w="122"/><text x="56.0807%" y="271.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (122 samples, 9.74%)</title><rect x="55.8307%" y="245" width="9.7444%" height="15" fill="rgb(227,55,4)" fg:x="699" fg:w="122"/><text x="56.0807%" y="255.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="65.0958%" y="229" width="0.4792%" height="15" fill="rgb(252,82,54)" fg:x="815" fg:w="6"/><text x="65.3458%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="65.0958%" y="213" width="0.4792%" height="15" fill="rgb(245,172,4)" fg:x="815" fg:w="6"/><text x="65.3458%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="65.4952%" y="197" width="0.0799%" height="15" fill="rgb(207,26,27)" fg:x="820" fg:w="1"/><text x="65.7452%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5751%" y="229" width="0.0799%" height="15" fill="rgb(252,98,18)" fg:x="821" fg:w="1"/><text x="65.8251%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="65.6550%" y="229" width="0.0799%" height="15" fill="rgb(244,8,26)" fg:x="822" fg:w="1"/><text x="65.9050%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6550%" y="213" width="0.0799%" height="15" fill="rgb(237,173,45)" fg:x="822" fg:w="1"/><text x="65.9050%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="65.5751%" y="277" width="0.2396%" height="15" fill="rgb(208,213,49)" fg:x="821" fg:w="3"/><text x="65.8251%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="65.5751%" y="261" width="0.2396%" height="15" fill="rgb(212,122,37)" fg:x="821" fg:w="3"/><text x="65.8251%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="65.5751%" y="245" width="0.2396%" height="15" fill="rgb(213,80,17)" fg:x="821" fg:w="3"/><text x="65.8251%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="65.7348%" y="229" width="0.0799%" height="15" fill="rgb(206,210,43)" fg:x="823" fg:w="1"/><text x="65.9848%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7348%" y="213" width="0.0799%" height="15" fill="rgb(229,214,3)" fg:x="823" fg:w="1"/><text x="65.9848%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.8946%" y="197" width="0.0799%" height="15" fill="rgb(235,213,29)" fg:x="825" fg:w="1"/><text x="66.1446%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="65.9744%" y="197" width="0.3195%" height="15" fill="rgb(248,135,26)" fg:x="826" fg:w="4"/><text x="66.2244%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="66.2141%" y="181" width="0.0799%" height="15" fill="rgb(242,188,12)" fg:x="829" fg:w="1"/><text x="66.4641%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (132 samples, 10.54%)</title><rect x="55.8307%" y="293" width="10.5431%" height="15" fill="rgb(245,38,12)" fg:x="699" fg:w="132"/><text x="56.0807%" y="303.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.56%)</title><rect x="65.8147%" y="277" width="0.5591%" height="15" fill="rgb(218,42,13)" fg:x="824" fg:w="7"/><text x="66.0647%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="65.8946%" y="261" width="0.4792%" height="15" fill="rgb(238,132,49)" fg:x="825" fg:w="6"/><text x="66.1446%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="65.8946%" y="245" width="0.4792%" height="15" fill="rgb(209,196,19)" fg:x="825" fg:w="6"/><text x="66.1446%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="65.8946%" y="229" width="0.4792%" height="15" fill="rgb(244,131,22)" fg:x="825" fg:w="6"/><text x="66.1446%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="65.8946%" y="213" width="0.4792%" height="15" fill="rgb(223,18,34)" fg:x="825" fg:w="6"/><text x="66.1446%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="66.2939%" y="197" width="0.0799%" height="15" fill="rgb(252,124,54)" fg:x="830" fg:w="1"/><text x="66.5439%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.2939%" y="181" width="0.0799%" height="15" fill="rgb(229,106,42)" fg:x="830" fg:w="1"/><text x="66.5439%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2939%" y="165" width="0.0799%" height="15" fill="rgb(221,129,1)" fg:x="830" fg:w="1"/><text x="66.5439%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.4537%" y="213" width="0.0799%" height="15" fill="rgb(229,74,15)" fg:x="832" fg:w="1"/><text x="66.7037%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.4537%" y="197" width="0.0799%" height="15" fill="rgb(210,206,50)" fg:x="832" fg:w="1"/><text x="66.7037%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4537%" y="181" width="0.0799%" height="15" fill="rgb(251,114,31)" fg:x="832" fg:w="1"/><text x="66.7037%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="66.5335%" y="213" width="0.1597%" height="15" fill="rgb(215,225,28)" fg:x="833" fg:w="2"/><text x="66.7835%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.6134%" y="197" width="0.0799%" height="15" fill="rgb(237,109,14)" fg:x="834" fg:w="1"/><text x="66.8634%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="66.6134%" y="181" width="0.0799%" height="15" fill="rgb(230,13,37)" fg:x="834" fg:w="1"/><text x="66.8634%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.6134%" y="165" width="0.0799%" height="15" fill="rgb(231,40,28)" fg:x="834" fg:w="1"/><text x="66.8634%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6134%" y="149" width="0.0799%" height="15" fill="rgb(231,202,18)" fg:x="834" fg:w="1"/><text x="66.8634%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="66.7732%" y="197" width="0.3195%" height="15" fill="rgb(225,33,18)" fg:x="836" fg:w="4"/><text x="67.0232%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="66.8530%" y="181" width="0.2396%" height="15" fill="rgb(223,64,47)" fg:x="837" fg:w="3"/><text x="67.1030%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1725%" y="165" width="0.0799%" height="15" fill="rgb(234,114,13)" fg:x="841" fg:w="1"/><text x="67.4225%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.64%)</title><rect x="66.6933%" y="213" width="0.6390%" height="15" fill="rgb(248,56,40)" fg:x="835" fg:w="8"/><text x="66.9433%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="67.0927%" y="197" width="0.2396%" height="15" fill="rgb(221,194,21)" fg:x="840" fg:w="3"/><text x="67.3427%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="67.0927%" y="181" width="0.2396%" height="15" fill="rgb(242,108,46)" fg:x="840" fg:w="3"/><text x="67.3427%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="67.2524%" y="165" width="0.0799%" height="15" fill="rgb(220,106,10)" fg:x="842" fg:w="1"/><text x="67.5024%" y="175.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="67.2524%" y="149" width="0.0799%" height="15" fill="rgb(211,88,4)" fg:x="842" fg:w="1"/><text x="67.5024%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.2524%" y="133" width="0.0799%" height="15" fill="rgb(214,95,34)" fg:x="842" fg:w="1"/><text x="67.5024%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2524%" y="117" width="0.0799%" height="15" fill="rgb(250,160,33)" fg:x="842" fg:w="1"/><text x="67.5024%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2524%" y="101" width="0.0799%" height="15" fill="rgb(225,29,10)" fg:x="842" fg:w="1"/><text x="67.5024%" y="111.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="67.4920%" y="181" width="0.2396%" height="15" fill="rgb(224,28,30)" fg:x="845" fg:w="3"/><text x="67.7420%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="67.6518%" y="165" width="0.0799%" height="15" fill="rgb(231,77,4)" fg:x="847" fg:w="1"/><text x="67.9018%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="67.6518%" y="149" width="0.0799%" height="15" fill="rgb(209,63,21)" fg:x="847" fg:w="1"/><text x="67.9018%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="67.3323%" y="213" width="0.4792%" height="15" fill="rgb(226,22,11)" fg:x="843" fg:w="6"/><text x="67.5823%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="67.4121%" y="197" width="0.3994%" height="15" fill="rgb(216,82,30)" fg:x="844" fg:w="5"/><text x="67.6621%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="67.7316%" y="181" width="0.0799%" height="15" fill="rgb(246,227,38)" fg:x="848" fg:w="1"/><text x="67.9816%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="67.7316%" y="165" width="0.0799%" height="15" fill="rgb(251,203,53)" fg:x="848" fg:w="1"/><text x="67.9816%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="67.8115%" y="165" width="0.0799%" height="15" fill="rgb(254,101,1)" fg:x="849" fg:w="1"/><text x="68.0615%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.8115%" y="149" width="0.0799%" height="15" fill="rgb(241,180,5)" fg:x="849" fg:w="1"/><text x="68.0615%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8115%" y="133" width="0.0799%" height="15" fill="rgb(218,168,4)" fg:x="849" fg:w="1"/><text x="68.0615%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="67.8115%" y="181" width="0.1597%" height="15" fill="rgb(224,223,32)" fg:x="849" fg:w="2"/><text x="68.0615%" y="191.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.8914%" y="165" width="0.0799%" height="15" fill="rgb(236,106,22)" fg:x="850" fg:w="1"/><text x="68.1414%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (20 samples, 1.60%)</title><rect x="66.4537%" y="261" width="1.5974%" height="15" fill="rgb(206,121,5)" fg:x="832" fg:w="20"/><text x="66.7037%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (20 samples, 1.60%)</title><rect x="66.4537%" y="245" width="1.5974%" height="15" fill="rgb(233,87,28)" fg:x="832" fg:w="20"/><text x="66.7037%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (20 samples, 1.60%)</title><rect x="66.4537%" y="229" width="1.5974%" height="15" fill="rgb(236,137,17)" fg:x="832" fg:w="20"/><text x="66.7037%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="67.8115%" y="213" width="0.2396%" height="15" fill="rgb(209,183,38)" fg:x="849" fg:w="3"/><text x="68.0615%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="67.8115%" y="197" width="0.2396%" height="15" fill="rgb(206,162,44)" fg:x="849" fg:w="3"/><text x="68.0615%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="67.9712%" y="181" width="0.0799%" height="15" fill="rgb(237,70,39)" fg:x="851" fg:w="1"/><text x="68.2212%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.9712%" y="165" width="0.0799%" height="15" fill="rgb(212,176,5)" fg:x="851" fg:w="1"/><text x="68.2212%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.9712%" y="149" width="0.0799%" height="15" fill="rgb(232,95,16)" fg:x="851" fg:w="1"/><text x="68.2212%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2109%" y="181" width="0.0799%" height="15" fill="rgb(219,115,35)" fg:x="854" fg:w="1"/><text x="68.4609%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.2109%" y="165" width="0.0799%" height="15" fill="rgb(251,67,27)" fg:x="854" fg:w="1"/><text x="68.4609%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="68.0511%" y="197" width="0.3195%" height="15" fill="rgb(222,95,40)" fg:x="852" fg:w="4"/><text x="68.3011%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="68.2907%" y="181" width="0.0799%" height="15" fill="rgb(250,35,16)" fg:x="855" fg:w="1"/><text x="68.5407%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="68.0511%" y="213" width="0.4792%" height="15" fill="rgb(224,86,44)" fg:x="852" fg:w="6"/><text x="68.3011%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="68.3706%" y="197" width="0.1597%" height="15" fill="rgb(237,53,53)" fg:x="856" fg:w="2"/><text x="68.6206%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.3706%" y="181" width="0.1597%" height="15" fill="rgb(208,171,33)" fg:x="856" fg:w="2"/><text x="68.6206%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.4505%" y="165" width="0.0799%" height="15" fill="rgb(222,64,27)" fg:x="857" fg:w="1"/><text x="68.7005%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4505%" y="149" width="0.0799%" height="15" fill="rgb(221,121,35)" fg:x="857" fg:w="1"/><text x="68.7005%" y="159.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (27 samples, 2.16%)</title><rect x="66.4537%" y="277" width="2.1565%" height="15" fill="rgb(228,137,42)" fg:x="832" fg:w="27"/><text x="66.7037%" y="287.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="68.0511%" y="261" width="0.5591%" height="15" fill="rgb(227,54,21)" fg:x="852" fg:w="7"/><text x="68.3011%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="68.0511%" y="245" width="0.5591%" height="15" fill="rgb(240,168,33)" fg:x="852" fg:w="7"/><text x="68.3011%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="68.0511%" y="229" width="0.5591%" height="15" fill="rgb(243,159,6)" fg:x="852" fg:w="7"/><text x="68.3011%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="68.5304%" y="213" width="0.0799%" height="15" fill="rgb(205,211,41)" fg:x="858" fg:w="1"/><text x="68.7804%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="68.5304%" y="197" width="0.0799%" height="15" fill="rgb(253,30,1)" fg:x="858" fg:w="1"/><text x="68.7804%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.5304%" y="181" width="0.0799%" height="15" fill="rgb(226,80,18)" fg:x="858" fg:w="1"/><text x="68.7804%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5304%" y="165" width="0.0799%" height="15" fill="rgb(253,156,46)" fg:x="858" fg:w="1"/><text x="68.7804%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5304%" y="149" width="0.0799%" height="15" fill="rgb(248,87,27)" fg:x="858" fg:w="1"/><text x="68.7804%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (301 samples, 24.04%)</title><rect x="44.6486%" y="373" width="24.0415%" height="15" fill="rgb(227,122,2)" fg:x="559" fg:w="301"/><text x="44.8986%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (274 samples, 21.88%)</title><rect x="46.8051%" y="357" width="21.8850%" height="15" fill="rgb(229,94,39)" fg:x="586" fg:w="274"/><text x="47.0551%" y="367.50">plugins_core::looking::model::Unqua..</text></g><g><title>indefinite::indefinite (274 samples, 21.88%)</title><rect x="46.8051%" y="341" width="21.8850%" height="15" fill="rgb(225,173,31)" fg:x="586" fg:w="274"/><text x="47.0551%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (274 samples, 21.88%)</title><rect x="46.8051%" y="325" width="21.8850%" height="15" fill="rgb(239,176,30)" fg:x="586" fg:w="274"/><text x="47.0551%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (272 samples, 21.73%)</title><rect x="46.9649%" y="309" width="21.7252%" height="15" fill="rgb(212,104,21)" fg:x="588" fg:w="272"/><text x="47.2149%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (29 samples, 2.32%)</title><rect x="66.3738%" y="293" width="2.3163%" height="15" fill="rgb(240,209,40)" fg:x="831" fg:w="29"/><text x="66.6238%" y="303.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="68.6102%" y="277" width="0.0799%" height="15" fill="rgb(234,195,5)" fg:x="859" fg:w="1"/><text x="68.8602%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6901%" y="357" width="0.0799%" height="15" fill="rgb(238,213,1)" fg:x="860" fg:w="1"/><text x="68.9401%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.6901%" y="341" width="0.0799%" height="15" fill="rgb(235,182,54)" fg:x="860" fg:w="1"/><text x="68.9401%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.6901%" y="325" width="0.0799%" height="15" fill="rgb(229,50,46)" fg:x="860" fg:w="1"/><text x="68.9401%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.0096%" y="245" width="0.0799%" height="15" fill="rgb(219,145,13)" fg:x="864" fg:w="1"/><text x="69.2596%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="68.8498%" y="325" width="0.3195%" height="15" fill="rgb(220,226,10)" fg:x="862" fg:w="4"/><text x="69.0998%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="68.8498%" y="309" width="0.3195%" height="15" fill="rgb(248,47,30)" fg:x="862" fg:w="4"/><text x="69.0998%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="68.8498%" y="293" width="0.3195%" height="15" fill="rgb(231,209,44)" fg:x="862" fg:w="4"/><text x="69.0998%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="68.8498%" y="277" width="0.3195%" height="15" fill="rgb(209,80,30)" fg:x="862" fg:w="4"/><text x="69.0998%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.8498%" y="261" width="0.3195%" height="15" fill="rgb(232,9,14)" fg:x="862" fg:w="4"/><text x="69.0998%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="69.0895%" y="245" width="0.0799%" height="15" fill="rgb(243,91,43)" fg:x="865" fg:w="1"/><text x="69.3395%" y="255.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="68.6901%" y="373" width="0.5591%" height="15" fill="rgb(231,90,52)" fg:x="860" fg:w="7"/><text x="68.9401%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="68.7700%" y="357" width="0.4792%" height="15" fill="rgb(253,192,44)" fg:x="861" fg:w="6"/><text x="69.0200%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="68.8498%" y="341" width="0.3994%" height="15" fill="rgb(241,66,31)" fg:x="862" fg:w="5"/><text x="69.0998%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.1693%" y="325" width="0.0799%" height="15" fill="rgb(235,81,37)" fg:x="866" fg:w="1"/><text x="69.4193%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1693%" y="309" width="0.0799%" height="15" fill="rgb(223,221,9)" fg:x="866" fg:w="1"/><text x="69.4193%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.1693%" y="293" width="0.0799%" height="15" fill="rgb(242,180,7)" fg:x="866" fg:w="1"/><text x="69.4193%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1693%" y="277" width="0.0799%" height="15" fill="rgb(243,78,19)" fg:x="866" fg:w="1"/><text x="69.4193%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="69.2492%" y="341" width="0.1597%" height="15" fill="rgb(233,23,17)" fg:x="867" fg:w="2"/><text x="69.4992%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.2492%" y="325" width="0.1597%" height="15" fill="rgb(252,122,45)" fg:x="867" fg:w="2"/><text x="69.4992%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3291%" y="309" width="0.0799%" height="15" fill="rgb(247,108,20)" fg:x="868" fg:w="1"/><text x="69.5791%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3291%" y="293" width="0.0799%" height="15" fill="rgb(235,84,21)" fg:x="868" fg:w="1"/><text x="69.5791%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3291%" y="277" width="0.0799%" height="15" fill="rgb(247,129,10)" fg:x="868" fg:w="1"/><text x="69.5791%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3291%" y="261" width="0.0799%" height="15" fill="rgb(208,173,14)" fg:x="868" fg:w="1"/><text x="69.5791%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3291%" y="245" width="0.0799%" height="15" fill="rgb(236,31,38)" fg:x="868" fg:w="1"/><text x="69.5791%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (3 samples, 0.24%)</title><rect x="69.2492%" y="357" width="0.2396%" height="15" fill="rgb(232,65,17)" fg:x="867" fg:w="3"/><text x="69.4992%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="69.4089%" y="341" width="0.0799%" height="15" fill="rgb(224,45,49)" fg:x="869" fg:w="1"/><text x="69.6589%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.4089%" y="325" width="0.0799%" height="15" fill="rgb(225,2,53)" fg:x="869" fg:w="1"/><text x="69.6589%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4089%" y="309" width="0.0799%" height="15" fill="rgb(248,210,53)" fg:x="869" fg:w="1"/><text x="69.6589%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4089%" y="293" width="0.0799%" height="15" fill="rgb(211,1,30)" fg:x="869" fg:w="1"/><text x="69.6589%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.4089%" y="277" width="0.0799%" height="15" fill="rgb(224,96,15)" fg:x="869" fg:w="1"/><text x="69.6589%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="69.4888%" y="293" width="0.2396%" height="15" fill="rgb(252,45,11)" fg:x="870" fg:w="3"/><text x="69.7388%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.6486%" y="277" width="0.0799%" height="15" fill="rgb(220,125,38)" fg:x="872" fg:w="1"/><text x="69.8986%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6486%" y="261" width="0.0799%" height="15" fill="rgb(243,161,33)" fg:x="872" fg:w="1"/><text x="69.8986%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7284%" y="277" width="0.0799%" height="15" fill="rgb(248,197,34)" fg:x="873" fg:w="1"/><text x="69.9784%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7284%" y="261" width="0.0799%" height="15" fill="rgb(228,165,23)" fg:x="873" fg:w="1"/><text x="69.9784%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7284%" y="245" width="0.0799%" height="15" fill="rgb(236,94,38)" fg:x="873" fg:w="1"/><text x="69.9784%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7284%" y="229" width="0.0799%" height="15" fill="rgb(220,13,23)" fg:x="873" fg:w="1"/><text x="69.9784%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7284%" y="213" width="0.0799%" height="15" fill="rgb(234,26,39)" fg:x="873" fg:w="1"/><text x="69.9784%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.7284%" y="197" width="0.0799%" height="15" fill="rgb(205,117,44)" fg:x="873" fg:w="1"/><text x="69.9784%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.7284%" y="181" width="0.0799%" height="15" fill="rgb(250,42,2)" fg:x="873" fg:w="1"/><text x="69.9784%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.7284%" y="165" width="0.0799%" height="15" fill="rgb(223,83,14)" fg:x="873" fg:w="1"/><text x="69.9784%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7284%" y="149" width="0.0799%" height="15" fill="rgb(241,147,50)" fg:x="873" fg:w="1"/><text x="69.9784%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.7284%" y="133" width="0.0799%" height="15" fill="rgb(218,90,6)" fg:x="873" fg:w="1"/><text x="69.9784%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.7284%" y="117" width="0.0799%" height="15" fill="rgb(210,191,5)" fg:x="873" fg:w="1"/><text x="69.9784%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.7284%" y="101" width="0.0799%" height="15" fill="rgb(225,139,19)" fg:x="873" fg:w="1"/><text x="69.9784%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.7284%" y="85" width="0.0799%" height="15" fill="rgb(210,1,33)" fg:x="873" fg:w="1"/><text x="69.9784%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.7284%" y="69" width="0.0799%" height="15" fill="rgb(213,50,3)" fg:x="873" fg:w="1"/><text x="69.9784%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7284%" y="53" width="0.0799%" height="15" fill="rgb(234,227,4)" fg:x="873" fg:w="1"/><text x="69.9784%" y="63.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.7284%" y="293" width="0.1597%" height="15" fill="rgb(246,63,5)" fg:x="873" fg:w="2"/><text x="69.9784%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8083%" y="277" width="0.0799%" height="15" fill="rgb(245,136,27)" fg:x="874" fg:w="1"/><text x="70.0583%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8083%" y="261" width="0.0799%" height="15" fill="rgb(247,199,27)" fg:x="874" fg:w="1"/><text x="70.0583%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.8083%" y="245" width="0.0799%" height="15" fill="rgb(252,158,49)" fg:x="874" fg:w="1"/><text x="70.0583%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8083%" y="229" width="0.0799%" height="15" fill="rgb(254,73,1)" fg:x="874" fg:w="1"/><text x="70.0583%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8083%" y="213" width="0.0799%" height="15" fill="rgb(248,93,19)" fg:x="874" fg:w="1"/><text x="70.0583%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.8083%" y="197" width="0.0799%" height="15" fill="rgb(206,67,5)" fg:x="874" fg:w="1"/><text x="70.0583%" y="207.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8882%" y="245" width="0.0799%" height="15" fill="rgb(209,210,4)" fg:x="875" fg:w="1"/><text x="70.1382%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8882%" y="229" width="0.0799%" height="15" fill="rgb(214,185,36)" fg:x="875" fg:w="1"/><text x="70.1382%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.8882%" y="213" width="0.0799%" height="15" fill="rgb(233,191,26)" fg:x="875" fg:w="1"/><text x="70.1382%" y="223.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.8882%" y="197" width="0.0799%" height="15" fill="rgb(248,94,17)" fg:x="875" fg:w="1"/><text x="70.1382%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9681%" y="213" width="0.0799%" height="15" fill="rgb(250,64,4)" fg:x="876" fg:w="1"/><text x="70.2181%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.9681%" y="197" width="0.0799%" height="15" fill="rgb(218,41,53)" fg:x="876" fg:w="1"/><text x="70.2181%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.9681%" y="181" width="0.0799%" height="15" fill="rgb(251,176,28)" fg:x="876" fg:w="1"/><text x="70.2181%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.0479%" y="197" width="0.0799%" height="15" fill="rgb(247,22,9)" fg:x="877" fg:w="1"/><text x="70.2979%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0479%" y="181" width="0.0799%" height="15" fill="rgb(218,201,14)" fg:x="877" fg:w="1"/><text x="70.2979%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.0479%" y="165" width="0.0799%" height="15" fill="rgb(218,94,10)" fg:x="877" fg:w="1"/><text x="70.2979%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.0479%" y="149" width="0.0799%" height="15" fill="rgb(222,183,52)" fg:x="877" fg:w="1"/><text x="70.2979%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.96%)</title><rect x="69.2492%" y="373" width="0.9585%" height="15" fill="rgb(242,140,25)" fg:x="867" fg:w="12"/><text x="69.4992%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.72%)</title><rect x="69.4888%" y="357" width="0.7188%" height="15" fill="rgb(235,197,38)" fg:x="870" fg:w="9"/><text x="69.7388%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.72%)</title><rect x="69.4888%" y="341" width="0.7188%" height="15" fill="rgb(237,136,15)" fg:x="870" fg:w="9"/><text x="69.7388%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="69.4888%" y="325" width="0.7188%" height="15" fill="rgb(223,44,49)" fg:x="870" fg:w="9"/><text x="69.7388%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="69.4888%" y="309" width="0.7188%" height="15" fill="rgb(227,71,15)" fg:x="870" fg:w="9"/><text x="69.7388%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="69.8882%" y="293" width="0.3195%" height="15" fill="rgb(225,153,20)" fg:x="875" fg:w="4"/><text x="70.1382%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.8882%" y="277" width="0.3195%" height="15" fill="rgb(210,190,26)" fg:x="875" fg:w="4"/><text x="70.1382%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.8882%" y="261" width="0.3195%" height="15" fill="rgb(223,147,5)" fg:x="875" fg:w="4"/><text x="70.1382%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="69.9681%" y="245" width="0.2396%" height="15" fill="rgb(207,14,23)" fg:x="876" fg:w="3"/><text x="70.2181%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.9681%" y="229" width="0.2396%" height="15" fill="rgb(211,195,53)" fg:x="876" fg:w="3"/><text x="70.2181%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.0479%" y="213" width="0.1597%" height="15" fill="rgb(237,75,46)" fg:x="877" fg:w="2"/><text x="70.2979%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1278%" y="197" width="0.0799%" height="15" fill="rgb(254,55,14)" fg:x="878" fg:w="1"/><text x="70.3778%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1278%" y="181" width="0.0799%" height="15" fill="rgb(230,185,30)" fg:x="878" fg:w="1"/><text x="70.3778%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.1278%" y="165" width="0.0799%" height="15" fill="rgb(220,14,11)" fg:x="878" fg:w="1"/><text x="70.3778%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1278%" y="149" width="0.0799%" height="15" fill="rgb(215,169,44)" fg:x="878" fg:w="1"/><text x="70.3778%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1278%" y="133" width="0.0799%" height="15" fill="rgb(253,203,20)" fg:x="878" fg:w="1"/><text x="70.3778%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.1278%" y="117" width="0.0799%" height="15" fill="rgb(229,225,17)" fg:x="878" fg:w="1"/><text x="70.3778%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1278%" y="101" width="0.0799%" height="15" fill="rgb(236,76,26)" fg:x="878" fg:w="1"/><text x="70.3778%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1278%" y="85" width="0.0799%" height="15" fill="rgb(234,15,30)" fg:x="878" fg:w="1"/><text x="70.3778%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.1278%" y="69" width="0.0799%" height="15" fill="rgb(211,113,48)" fg:x="878" fg:w="1"/><text x="70.3778%" y="79.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (337 samples, 26.92%)</title><rect x="43.3706%" y="533" width="26.9169%" height="15" fill="rgb(221,31,36)" fg:x="543" fg:w="337"/><text x="43.6206%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (337 samples, 26.92%)</title><rect x="43.3706%" y="517" width="26.9169%" height="15" fill="rgb(215,118,52)" fg:x="543" fg:w="337"/><text x="43.6206%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kerne..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (336 samples, 26.84%)</title><rect x="43.4505%" y="501" width="26.8371%" height="15" fill="rgb(241,151,27)" fg:x="544" fg:w="336"/><text x="43.7005%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (336 samples, 26.84%)</title><rect x="43.4505%" y="485" width="26.8371%" height="15" fill="rgb(253,51,3)" fg:x="544" fg:w="336"/><text x="43.7005%" y="495.50">core::ops::function::FnOnce::call_once{{vta..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (336 samples, 26.84%)</title><rect x="43.4505%" y="469" width="26.8371%" height="15" fill="rgb(216,201,24)" fg:x="544" fg:w="336"/><text x="43.7005%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (336 samples, 26.84%)</title><rect x="43.4505%" y="453" width="26.8371%" height="15" fill="rgb(231,107,4)" fg:x="544" fg:w="336"/><text x="43.7005%" y="463.50">core::ops::function::FnOnce::call_once{{vta..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (336 samples, 26.84%)</title><rect x="43.4505%" y="437" width="26.8371%" height="15" fill="rgb(243,97,54)" fg:x="544" fg:w="336"/><text x="43.7005%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::funct..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (336 samples, 26.84%)</title><rect x="43.4505%" y="421" width="26.8371%" height="15" fill="rgb(221,32,51)" fg:x="544" fg:w="336"/><text x="43.7005%" y="431.50">&lt;engine::session::state::State as kernel::a..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (336 samples, 26.84%)</title><rect x="43.4505%" y="405" width="26.8371%" height="15" fill="rgb(218,171,35)" fg:x="544" fg:w="336"/><text x="43.7005%" y="415.50">&lt;plugins_core::looking::actions::LookAction..</text></g><g><title>plugins_core::looking::model::new_area_observation (322 samples, 25.72%)</title><rect x="44.5687%" y="389" width="25.7188%" height="15" fill="rgb(214,20,53)" fg:x="558" fg:w="322"/><text x="44.8187%" y="399.50">plugins_core::looking::model::new_area_ob..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="70.2077%" y="373" width="0.0799%" height="15" fill="rgb(239,9,52)" fg:x="879" fg:w="1"/><text x="70.4577%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="70.2077%" y="357" width="0.0799%" height="15" fill="rgb(215,114,45)" fg:x="879" fg:w="1"/><text x="70.4577%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="70.2077%" y="341" width="0.0799%" height="15" fill="rgb(208,118,9)" fg:x="879" fg:w="1"/><text x="70.4577%" y="351.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="70.2077%" y="325" width="0.0799%" height="15" fill="rgb(235,7,39)" fg:x="879" fg:w="1"/><text x="70.4577%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.2077%" y="309" width="0.0799%" height="15" fill="rgb(243,225,15)" fg:x="879" fg:w="1"/><text x="70.4577%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.2077%" y="293" width="0.0799%" height="15" fill="rgb(225,216,18)" fg:x="879" fg:w="1"/><text x="70.4577%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.3674%" y="501" width="0.0799%" height="15" fill="rgb(233,36,38)" fg:x="881" fg:w="1"/><text x="70.6174%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.3674%" y="485" width="0.0799%" height="15" fill="rgb(239,88,23)" fg:x="881" fg:w="1"/><text x="70.6174%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5272%" y="469" width="0.0799%" height="15" fill="rgb(219,181,35)" fg:x="883" fg:w="1"/><text x="70.7772%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5272%" y="453" width="0.0799%" height="15" fill="rgb(215,18,46)" fg:x="883" fg:w="1"/><text x="70.7772%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5272%" y="437" width="0.0799%" height="15" fill="rgb(241,38,11)" fg:x="883" fg:w="1"/><text x="70.7772%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5272%" y="421" width="0.0799%" height="15" fill="rgb(248,169,45)" fg:x="883" fg:w="1"/><text x="70.7772%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5272%" y="405" width="0.0799%" height="15" fill="rgb(239,50,49)" fg:x="883" fg:w="1"/><text x="70.7772%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.5272%" y="389" width="0.0799%" height="15" fill="rgb(231,96,31)" fg:x="883" fg:w="1"/><text x="70.7772%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.5272%" y="373" width="0.0799%" height="15" fill="rgb(224,193,37)" fg:x="883" fg:w="1"/><text x="70.7772%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.5272%" y="357" width="0.0799%" height="15" fill="rgb(227,153,50)" fg:x="883" fg:w="1"/><text x="70.7772%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.5272%" y="341" width="0.0799%" height="15" fill="rgb(249,228,3)" fg:x="883" fg:w="1"/><text x="70.7772%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.5272%" y="325" width="0.0799%" height="15" fill="rgb(219,164,43)" fg:x="883" fg:w="1"/><text x="70.7772%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.5272%" y="309" width="0.0799%" height="15" fill="rgb(216,45,41)" fg:x="883" fg:w="1"/><text x="70.7772%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.5272%" y="293" width="0.0799%" height="15" fill="rgb(210,226,51)" fg:x="883" fg:w="1"/><text x="70.7772%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.5272%" y="277" width="0.0799%" height="15" fill="rgb(209,117,49)" fg:x="883" fg:w="1"/><text x="70.7772%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.5272%" y="261" width="0.0799%" height="15" fill="rgb(206,196,24)" fg:x="883" fg:w="1"/><text x="70.7772%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5272%" y="245" width="0.0799%" height="15" fill="rgb(253,218,3)" fg:x="883" fg:w="1"/><text x="70.7772%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.6070%" y="437" width="0.0799%" height="15" fill="rgb(252,166,2)" fg:x="884" fg:w="1"/><text x="70.8570%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6070%" y="421" width="0.0799%" height="15" fill="rgb(236,218,26)" fg:x="884" fg:w="1"/><text x="70.8570%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="70.5272%" y="485" width="0.2396%" height="15" fill="rgb(254,84,19)" fg:x="883" fg:w="3"/><text x="70.7772%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.6070%" y="469" width="0.1597%" height="15" fill="rgb(219,137,29)" fg:x="884" fg:w="2"/><text x="70.8570%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6070%" y="453" width="0.1597%" height="15" fill="rgb(227,47,52)" fg:x="884" fg:w="2"/><text x="70.8570%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.6869%" y="437" width="0.0799%" height="15" fill="rgb(229,167,24)" fg:x="885" fg:w="1"/><text x="70.9369%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.6869%" y="421" width="0.0799%" height="15" fill="rgb(233,164,1)" fg:x="885" fg:w="1"/><text x="70.9369%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.6869%" y="405" width="0.0799%" height="15" fill="rgb(218,88,48)" fg:x="885" fg:w="1"/><text x="70.9369%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6869%" y="389" width="0.0799%" height="15" fill="rgb(226,214,24)" fg:x="885" fg:w="1"/><text x="70.9369%" y="399.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="70.7668%" y="437" width="0.0799%" height="15" fill="rgb(233,29,12)" fg:x="886" fg:w="1"/><text x="71.0168%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8466%" y="421" width="0.0799%" height="15" fill="rgb(219,120,34)" fg:x="887" fg:w="1"/><text x="71.0966%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8466%" y="405" width="0.0799%" height="15" fill="rgb(226,78,44)" fg:x="887" fg:w="1"/><text x="71.0966%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8466%" y="389" width="0.0799%" height="15" fill="rgb(240,15,48)" fg:x="887" fg:w="1"/><text x="71.0966%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9265%" y="405" width="0.0799%" height="15" fill="rgb(253,176,7)" fg:x="888" fg:w="1"/><text x="71.1765%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9265%" y="389" width="0.0799%" height="15" fill="rgb(206,166,28)" fg:x="888" fg:w="1"/><text x="71.1765%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9265%" y="373" width="0.0799%" height="15" fill="rgb(241,53,51)" fg:x="888" fg:w="1"/><text x="71.1765%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9265%" y="357" width="0.0799%" height="15" fill="rgb(249,112,30)" fg:x="888" fg:w="1"/><text x="71.1765%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.9265%" y="341" width="0.0799%" height="15" fill="rgb(217,85,30)" fg:x="888" fg:w="1"/><text x="71.1765%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.9265%" y="325" width="0.0799%" height="15" fill="rgb(233,49,7)" fg:x="888" fg:w="1"/><text x="71.1765%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.9265%" y="309" width="0.0799%" height="15" fill="rgb(234,109,9)" fg:x="888" fg:w="1"/><text x="71.1765%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.9265%" y="293" width="0.0799%" height="15" fill="rgb(253,95,22)" fg:x="888" fg:w="1"/><text x="71.1765%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.9265%" y="277" width="0.0799%" height="15" fill="rgb(233,176,25)" fg:x="888" fg:w="1"/><text x="71.1765%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.9265%" y="261" width="0.0799%" height="15" fill="rgb(236,33,39)" fg:x="888" fg:w="1"/><text x="71.1765%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.9265%" y="245" width="0.0799%" height="15" fill="rgb(223,226,42)" fg:x="888" fg:w="1"/><text x="71.1765%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.9265%" y="229" width="0.0799%" height="15" fill="rgb(216,99,33)" fg:x="888" fg:w="1"/><text x="71.1765%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.9265%" y="213" width="0.0799%" height="15" fill="rgb(235,84,23)" fg:x="888" fg:w="1"/><text x="71.1765%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9265%" y="197" width="0.0799%" height="15" fill="rgb(232,2,27)" fg:x="888" fg:w="1"/><text x="71.1765%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="70.9265%" y="421" width="0.1597%" height="15" fill="rgb(241,23,22)" fg:x="888" fg:w="2"/><text x="71.1765%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0064%" y="405" width="0.0799%" height="15" fill="rgb(211,73,27)" fg:x="889" fg:w="1"/><text x="71.2564%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0863%" y="421" width="0.0799%" height="15" fill="rgb(235,109,49)" fg:x="890" fg:w="1"/><text x="71.3363%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="71.1661%" y="421" width="0.0799%" height="15" fill="rgb(230,99,29)" fg:x="891" fg:w="1"/><text x="71.4161%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1661%" y="405" width="0.0799%" height="15" fill="rgb(245,199,7)" fg:x="891" fg:w="1"/><text x="71.4161%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2460%" y="341" width="0.0799%" height="15" fill="rgb(217,179,10)" fg:x="892" fg:w="1"/><text x="71.4960%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.2460%" y="325" width="0.0799%" height="15" fill="rgb(254,99,47)" fg:x="892" fg:w="1"/><text x="71.4960%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.2460%" y="309" width="0.0799%" height="15" fill="rgb(251,121,7)" fg:x="892" fg:w="1"/><text x="71.4960%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.4856%" y="277" width="0.0799%" height="15" fill="rgb(250,177,26)" fg:x="895" fg:w="1"/><text x="71.7356%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.4856%" y="261" width="0.0799%" height="15" fill="rgb(232,88,15)" fg:x="895" fg:w="1"/><text x="71.7356%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4856%" y="245" width="0.0799%" height="15" fill="rgb(251,54,54)" fg:x="895" fg:w="1"/><text x="71.7356%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4856%" y="229" width="0.0799%" height="15" fill="rgb(208,177,15)" fg:x="895" fg:w="1"/><text x="71.7356%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.4856%" y="213" width="0.0799%" height="15" fill="rgb(205,97,32)" fg:x="895" fg:w="1"/><text x="71.7356%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="71.2460%" y="421" width="0.3994%" height="15" fill="rgb(217,192,13)" fg:x="892" fg:w="5"/><text x="71.4960%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="71.2460%" y="405" width="0.3994%" height="15" fill="rgb(215,163,41)" fg:x="892" fg:w="5"/><text x="71.4960%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="71.2460%" y="389" width="0.3994%" height="15" fill="rgb(246,83,29)" fg:x="892" fg:w="5"/><text x="71.4960%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="71.2460%" y="373" width="0.3994%" height="15" fill="rgb(219,2,45)" fg:x="892" fg:w="5"/><text x="71.4960%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="71.2460%" y="357" width="0.3994%" height="15" fill="rgb(242,215,33)" fg:x="892" fg:w="5"/><text x="71.4960%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="71.3259%" y="341" width="0.3195%" height="15" fill="rgb(217,1,6)" fg:x="893" fg:w="4"/><text x="71.5759%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="71.3259%" y="325" width="0.3195%" height="15" fill="rgb(207,85,52)" fg:x="893" fg:w="4"/><text x="71.5759%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="71.3259%" y="309" width="0.3195%" height="15" fill="rgb(231,171,19)" fg:x="893" fg:w="4"/><text x="71.5759%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="71.4856%" y="293" width="0.1597%" height="15" fill="rgb(207,128,4)" fg:x="895" fg:w="2"/><text x="71.7356%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5655%" y="277" width="0.0799%" height="15" fill="rgb(219,208,4)" fg:x="896" fg:w="1"/><text x="71.8155%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.5655%" y="261" width="0.0799%" height="15" fill="rgb(235,161,42)" fg:x="896" fg:w="1"/><text x="71.8155%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.5655%" y="245" width="0.0799%" height="15" fill="rgb(247,218,18)" fg:x="896" fg:w="1"/><text x="71.8155%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.5655%" y="229" width="0.0799%" height="15" fill="rgb(232,114,51)" fg:x="896" fg:w="1"/><text x="71.8155%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.5655%" y="213" width="0.0799%" height="15" fill="rgb(222,95,3)" fg:x="896" fg:w="1"/><text x="71.8155%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.6454%" y="293" width="0.0799%" height="15" fill="rgb(240,65,29)" fg:x="897" fg:w="1"/><text x="71.8954%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.6454%" y="277" width="0.0799%" height="15" fill="rgb(249,209,20)" fg:x="897" fg:w="1"/><text x="71.8954%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.7252%" y="293" width="0.0799%" height="15" fill="rgb(241,48,37)" fg:x="898" fg:w="1"/><text x="71.9752%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.7252%" y="277" width="0.0799%" height="15" fill="rgb(230,140,42)" fg:x="898" fg:w="1"/><text x="71.9752%" y="287.50"></text></g><g><title>plugins_core::tools::contained_by (18 samples, 1.44%)</title><rect x="70.4473%" y="501" width="1.4377%" height="15" fill="rgb(230,176,45)" fg:x="882" fg:w="18"/><text x="70.6973%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.12%)</title><rect x="70.7668%" y="485" width="1.1182%" height="15" fill="rgb(245,112,21)" fg:x="886" fg:w="14"/><text x="71.0168%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.12%)</title><rect x="70.7668%" y="469" width="1.1182%" height="15" fill="rgb(207,183,35)" fg:x="886" fg:w="14"/><text x="71.0168%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.12%)</title><rect x="70.7668%" y="453" width="1.1182%" height="15" fill="rgb(227,44,33)" fg:x="886" fg:w="14"/><text x="71.0168%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="70.8466%" y="437" width="1.0383%" height="15" fill="rgb(246,120,21)" fg:x="887" fg:w="13"/><text x="71.0966%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="71.6454%" y="421" width="0.2396%" height="15" fill="rgb(235,57,52)" fg:x="897" fg:w="3"/><text x="71.8954%" y="431.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="71.6454%" y="405" width="0.2396%" height="15" fill="rgb(238,84,10)" fg:x="897" fg:w="3"/><text x="71.8954%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.6454%" y="389" width="0.2396%" height="15" fill="rgb(251,200,32)" fg:x="897" fg:w="3"/><text x="71.8954%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.6454%" y="373" width="0.2396%" height="15" fill="rgb(247,159,13)" fg:x="897" fg:w="3"/><text x="71.8954%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.6454%" y="357" width="0.2396%" height="15" fill="rgb(238,64,4)" fg:x="897" fg:w="3"/><text x="71.8954%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.6454%" y="341" width="0.2396%" height="15" fill="rgb(221,131,51)" fg:x="897" fg:w="3"/><text x="71.8954%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.6454%" y="325" width="0.2396%" height="15" fill="rgb(242,5,29)" fg:x="897" fg:w="3"/><text x="71.8954%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.6454%" y="309" width="0.2396%" height="15" fill="rgb(214,130,32)" fg:x="897" fg:w="3"/><text x="71.8954%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8051%" y="293" width="0.0799%" height="15" fill="rgb(244,210,16)" fg:x="899" fg:w="1"/><text x="72.0551%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8051%" y="277" width="0.0799%" height="15" fill="rgb(234,48,26)" fg:x="899" fg:w="1"/><text x="72.0551%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8051%" y="261" width="0.0799%" height="15" fill="rgb(231,82,38)" fg:x="899" fg:w="1"/><text x="72.0551%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8850%" y="453" width="0.0799%" height="15" fill="rgb(254,128,41)" fg:x="900" fg:w="1"/><text x="72.1350%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8850%" y="437" width="0.0799%" height="15" fill="rgb(212,73,49)" fg:x="900" fg:w="1"/><text x="72.1350%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8850%" y="421" width="0.0799%" height="15" fill="rgb(205,62,54)" fg:x="900" fg:w="1"/><text x="72.1350%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8850%" y="405" width="0.0799%" height="15" fill="rgb(228,0,8)" fg:x="900" fg:w="1"/><text x="72.1350%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8850%" y="389" width="0.0799%" height="15" fill="rgb(251,28,17)" fg:x="900" fg:w="1"/><text x="72.1350%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8850%" y="373" width="0.0799%" height="15" fill="rgb(238,105,27)" fg:x="900" fg:w="1"/><text x="72.1350%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.8850%" y="357" width="0.0799%" height="15" fill="rgb(237,216,33)" fg:x="900" fg:w="1"/><text x="72.1350%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.8850%" y="341" width="0.0799%" height="15" fill="rgb(229,228,25)" fg:x="900" fg:w="1"/><text x="72.1350%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.8850%" y="469" width="0.1597%" height="15" fill="rgb(233,75,23)" fg:x="900" fg:w="2"/><text x="72.1350%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9649%" y="453" width="0.0799%" height="15" fill="rgb(231,207,16)" fg:x="901" fg:w="1"/><text x="72.2149%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9649%" y="437" width="0.0799%" height="15" fill="rgb(231,191,45)" fg:x="901" fg:w="1"/><text x="72.2149%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.9649%" y="421" width="0.0799%" height="15" fill="rgb(224,133,17)" fg:x="901" fg:w="1"/><text x="72.2149%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9649%" y="405" width="0.0799%" height="15" fill="rgb(209,178,27)" fg:x="901" fg:w="1"/><text x="72.2149%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.9649%" y="389" width="0.0799%" height="15" fill="rgb(218,37,11)" fg:x="901" fg:w="1"/><text x="72.2149%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.9649%" y="373" width="0.0799%" height="15" fill="rgb(251,226,25)" fg:x="901" fg:w="1"/><text x="72.2149%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.9649%" y="357" width="0.0799%" height="15" fill="rgb(209,222,27)" fg:x="901" fg:w="1"/><text x="72.2149%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.9649%" y="341" width="0.0799%" height="15" fill="rgb(238,22,21)" fg:x="901" fg:w="1"/><text x="72.2149%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9649%" y="325" width="0.0799%" height="15" fill="rgb(233,161,25)" fg:x="901" fg:w="1"/><text x="72.2149%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.9649%" y="309" width="0.0799%" height="15" fill="rgb(226,122,53)" fg:x="901" fg:w="1"/><text x="72.2149%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.9649%" y="293" width="0.0799%" height="15" fill="rgb(220,123,17)" fg:x="901" fg:w="1"/><text x="72.2149%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.9649%" y="277" width="0.0799%" height="15" fill="rgb(230,224,35)" fg:x="901" fg:w="1"/><text x="72.2149%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.9649%" y="261" width="0.0799%" height="15" fill="rgb(246,83,8)" fg:x="901" fg:w="1"/><text x="72.2149%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.9649%" y="245" width="0.0799%" height="15" fill="rgb(230,214,17)" fg:x="901" fg:w="1"/><text x="72.2149%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9649%" y="229" width="0.0799%" height="15" fill="rgb(222,97,18)" fg:x="901" fg:w="1"/><text x="72.2149%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0447%" y="469" width="0.0799%" height="15" fill="rgb(206,79,1)" fg:x="902" fg:w="1"/><text x="72.2947%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="72.2843%" y="373" width="0.0799%" height="15" fill="rgb(214,121,34)" fg:x="905" fg:w="1"/><text x="72.5343%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2843%" y="357" width="0.0799%" height="15" fill="rgb(249,199,46)" fg:x="905" fg:w="1"/><text x="72.5343%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3642%" y="373" width="0.0799%" height="15" fill="rgb(214,222,46)" fg:x="906" fg:w="1"/><text x="72.6142%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3642%" y="357" width="0.0799%" height="15" fill="rgb(248,168,30)" fg:x="906" fg:w="1"/><text x="72.6142%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.64%)</title><rect x="71.8850%" y="485" width="0.6390%" height="15" fill="rgb(226,14,28)" fg:x="900" fg:w="8"/><text x="72.1350%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="72.1246%" y="469" width="0.3994%" height="15" fill="rgb(253,123,1)" fg:x="903" fg:w="5"/><text x="72.3746%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="72.1246%" y="453" width="0.3994%" height="15" fill="rgb(225,24,42)" fg:x="903" fg:w="5"/><text x="72.3746%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="72.2843%" y="437" width="0.2396%" height="15" fill="rgb(216,161,37)" fg:x="905" fg:w="3"/><text x="72.5343%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="72.2843%" y="421" width="0.2396%" height="15" fill="rgb(251,164,26)" fg:x="905" fg:w="3"/><text x="72.5343%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="72.2843%" y="405" width="0.2396%" height="15" fill="rgb(219,177,3)" fg:x="905" fg:w="3"/><text x="72.5343%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.24%)</title><rect x="72.2843%" y="389" width="0.2396%" height="15" fill="rgb(222,65,0)" fg:x="905" fg:w="3"/><text x="72.5343%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4441%" y="373" width="0.0799%" height="15" fill="rgb(223,69,54)" fg:x="907" fg:w="1"/><text x="72.6941%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4441%" y="357" width="0.0799%" height="15" fill="rgb(235,30,27)" fg:x="907" fg:w="1"/><text x="72.6941%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4441%" y="341" width="0.0799%" height="15" fill="rgb(220,183,50)" fg:x="907" fg:w="1"/><text x="72.6941%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4441%" y="325" width="0.0799%" height="15" fill="rgb(248,198,15)" fg:x="907" fg:w="1"/><text x="72.6941%" y="335.50"></text></g><g><title>plugins_core::tools::occupied_by (9 samples, 0.72%)</title><rect x="71.8850%" y="501" width="0.7188%" height="15" fill="rgb(222,211,4)" fg:x="900" fg:w="9"/><text x="72.1350%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="72.5240%" y="485" width="0.0799%" height="15" fill="rgb(214,102,34)" fg:x="908" fg:w="1"/><text x="72.7740%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="72.5240%" y="469" width="0.0799%" height="15" fill="rgb(245,92,5)" fg:x="908" fg:w="1"/><text x="72.7740%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5240%" y="453" width="0.0799%" height="15" fill="rgb(252,72,51)" fg:x="908" fg:w="1"/><text x="72.7740%" y="463.50"></text></g><g><title>engine::session::Session::captured (397 samples, 31.71%)</title><rect x="40.9744%" y="677" width="31.7093%" height="15" fill="rgb(252,208,19)" fg:x="513" fg:w="397"/><text x="41.2244%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (392 samples, 31.31%)</title><rect x="41.3738%" y="661" width="31.3099%" height="15" fill="rgb(211,69,7)" fg:x="518" fg:w="392"/><text x="41.6238%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (388 samples, 30.99%)</title><rect x="41.6933%" y="645" width="30.9904%" height="15" fill="rgb(211,27,16)" fg:x="522" fg:w="388"/><text x="41.9433%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (388 samples, 30.99%)</title><rect x="41.6933%" y="629" width="30.9904%" height="15" fill="rgb(219,216,14)" fg:x="522" fg:w="388"/><text x="41.9433%" y="639.50">&lt;engine::session::Session as kernel::actions::Perf..</text></g><g><title>kernel::plugins::mw::apply_middleware (388 samples, 30.99%)</title><rect x="41.6933%" y="613" width="30.9904%" height="15" fill="rgb(219,71,8)" fg:x="522" fg:w="388"/><text x="41.9433%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (388 samples, 30.99%)</title><rect x="41.6933%" y="597" width="30.9904%" height="15" fill="rgb(223,170,53)" fg:x="522" fg:w="388"/><text x="41.9433%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (388 samples, 30.99%)</title><rect x="41.6933%" y="581" width="30.9904%" height="15" fill="rgb(246,21,26)" fg:x="522" fg:w="388"/><text x="41.9433%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as ..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (368 samples, 29.39%)</title><rect x="43.2907%" y="565" width="29.3930%" height="15" fill="rgb(248,20,46)" fg:x="542" fg:w="368"/><text x="43.5407%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (368 samples, 29.39%)</title><rect x="43.2907%" y="549" width="29.3930%" height="15" fill="rgb(252,94,11)" fg:x="542" fg:w="368"/><text x="43.5407%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugin..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (30 samples, 2.40%)</title><rect x="70.2875%" y="533" width="2.3962%" height="15" fill="rgb(236,163,8)" fg:x="880" fg:w="30"/><text x="70.5375%" y="543.50">pl..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (30 samples, 2.40%)</title><rect x="70.2875%" y="517" width="2.3962%" height="15" fill="rgb(217,221,45)" fg:x="880" fg:w="30"/><text x="70.5375%" y="527.50">pl..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="72.6038%" y="501" width="0.0799%" height="15" fill="rgb(238,38,17)" fg:x="909" fg:w="1"/><text x="72.8538%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="72.6038%" y="485" width="0.0799%" height="15" fill="rgb(242,210,23)" fg:x="909" fg:w="1"/><text x="72.8538%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6837%" y="581" width="0.0799%" height="15" fill="rgb(250,86,53)" fg:x="910" fg:w="1"/><text x="72.9337%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6837%" y="565" width="0.0799%" height="15" fill="rgb(223,168,25)" fg:x="910" fg:w="1"/><text x="72.9337%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6837%" y="549" width="0.0799%" height="15" fill="rgb(251,189,4)" fg:x="910" fg:w="1"/><text x="72.9337%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6837%" y="533" width="0.0799%" height="15" fill="rgb(245,19,28)" fg:x="910" fg:w="1"/><text x="72.9337%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.7636%" y="485" width="0.1597%" height="15" fill="rgb(207,10,34)" fg:x="911" fg:w="2"/><text x="73.0136%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8435%" y="469" width="0.0799%" height="15" fill="rgb(235,153,31)" fg:x="912" fg:w="1"/><text x="73.0935%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.9233%" y="437" width="0.0799%" height="15" fill="rgb(228,72,37)" fg:x="913" fg:w="1"/><text x="73.1733%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.9233%" y="421" width="0.0799%" height="15" fill="rgb(215,15,16)" fg:x="913" fg:w="1"/><text x="73.1733%" y="431.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="73.0831%" y="373" width="0.0799%" height="15" fill="rgb(250,119,29)" fg:x="915" fg:w="1"/><text x="73.3331%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="73.0831%" y="357" width="0.0799%" height="15" fill="rgb(214,59,1)" fg:x="915" fg:w="1"/><text x="73.3331%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0831%" y="341" width="0.0799%" height="15" fill="rgb(223,109,25)" fg:x="915" fg:w="1"/><text x="73.3331%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0831%" y="325" width="0.0799%" height="15" fill="rgb(230,198,22)" fg:x="915" fg:w="1"/><text x="73.3331%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0831%" y="309" width="0.0799%" height="15" fill="rgb(245,184,46)" fg:x="915" fg:w="1"/><text x="73.3331%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0831%" y="293" width="0.0799%" height="15" fill="rgb(253,73,16)" fg:x="915" fg:w="1"/><text x="73.3331%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0831%" y="277" width="0.0799%" height="15" fill="rgb(206,94,45)" fg:x="915" fg:w="1"/><text x="73.3331%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0831%" y="261" width="0.0799%" height="15" fill="rgb(236,83,27)" fg:x="915" fg:w="1"/><text x="73.3331%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0831%" y="245" width="0.0799%" height="15" fill="rgb(220,196,8)" fg:x="915" fg:w="1"/><text x="73.3331%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="73.0831%" y="389" width="0.1597%" height="15" fill="rgb(254,185,14)" fg:x="915" fg:w="2"/><text x="73.3331%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="73.1629%" y="373" width="0.0799%" height="15" fill="rgb(226,50,22)" fg:x="916" fg:w="1"/><text x="73.4129%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.1629%" y="357" width="0.0799%" height="15" fill="rgb(253,147,0)" fg:x="916" fg:w="1"/><text x="73.4129%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="73.1629%" y="341" width="0.0799%" height="15" fill="rgb(252,46,33)" fg:x="916" fg:w="1"/><text x="73.4129%" y="351.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="73.1629%" y="325" width="0.0799%" height="15" fill="rgb(242,22,54)" fg:x="916" fg:w="1"/><text x="73.4129%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="73.1629%" y="309" width="0.0799%" height="15" fill="rgb(223,178,32)" fg:x="916" fg:w="1"/><text x="73.4129%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="73.1629%" y="293" width="0.0799%" height="15" fill="rgb(214,106,53)" fg:x="916" fg:w="1"/><text x="73.4129%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="72.7636%" y="533" width="0.5591%" height="15" fill="rgb(232,65,50)" fg:x="911" fg:w="7"/><text x="73.0136%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="72.7636%" y="517" width="0.5591%" height="15" fill="rgb(231,110,28)" fg:x="911" fg:w="7"/><text x="73.0136%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="72.7636%" y="501" width="0.5591%" height="15" fill="rgb(216,71,40)" fg:x="911" fg:w="7"/><text x="73.0136%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="72.9233%" y="485" width="0.3994%" height="15" fill="rgb(229,89,53)" fg:x="913" fg:w="5"/><text x="73.1733%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="72.9233%" y="469" width="0.3994%" height="15" fill="rgb(210,124,14)" fg:x="913" fg:w="5"/><text x="73.1733%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (5 samples, 0.40%)</title><rect x="72.9233%" y="453" width="0.3994%" height="15" fill="rgb(236,213,6)" fg:x="913" fg:w="5"/><text x="73.1733%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (4 samples, 0.32%)</title><rect x="73.0032%" y="437" width="0.3195%" height="15" fill="rgb(228,41,5)" fg:x="914" fg:w="4"/><text x="73.2532%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (4 samples, 0.32%)</title><rect x="73.0032%" y="421" width="0.3195%" height="15" fill="rgb(221,167,25)" fg:x="914" fg:w="4"/><text x="73.2532%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (3 samples, 0.24%)</title><rect x="73.0831%" y="405" width="0.2396%" height="15" fill="rgb(228,144,37)" fg:x="915" fg:w="3"/><text x="73.3331%" y="415.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="73.2428%" y="389" width="0.0799%" height="15" fill="rgb(227,189,38)" fg:x="917" fg:w="1"/><text x="73.4928%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="72.7636%" y="565" width="0.6390%" height="15" fill="rgb(218,8,2)" fg:x="911" fg:w="8"/><text x="73.0136%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="72.7636%" y="549" width="0.6390%" height="15" fill="rgb(209,61,28)" fg:x="911" fg:w="8"/><text x="73.0136%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.3227%" y="533" width="0.0799%" height="15" fill="rgb(233,140,39)" fg:x="918" fg:w="1"/><text x="73.5727%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3227%" y="517" width="0.0799%" height="15" fill="rgb(251,66,48)" fg:x="918" fg:w="1"/><text x="73.5727%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3227%" y="501" width="0.0799%" height="15" fill="rgb(210,44,45)" fg:x="918" fg:w="1"/><text x="73.5727%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.3227%" y="485" width="0.0799%" height="15" fill="rgb(214,136,46)" fg:x="918" fg:w="1"/><text x="73.5727%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.3227%" y="469" width="0.0799%" height="15" fill="rgb(207,130,50)" fg:x="918" fg:w="1"/><text x="73.5727%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="72.7636%" y="581" width="0.7188%" height="15" fill="rgb(228,102,49)" fg:x="911" fg:w="9"/><text x="73.0136%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::flatten::FlatMap&lt;serde_json::map::Iter,core::option::Option&lt;alloc::vec::Vec&lt;kernel::model::entity_ref::EntityRef&gt;&gt;,kernel::model::entity_ref::find_entity_refs::{{closure}}&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="73.4026%" y="565" width="0.0799%" height="15" fill="rgb(253,55,1)" fg:x="919" fg:w="1"/><text x="73.6526%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="72.6837%" y="629" width="0.8786%" height="15" fill="rgb(238,222,9)" fg:x="910" fg:w="11"/><text x="72.9337%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="72.6837%" y="613" width="0.8786%" height="15" fill="rgb(246,99,6)" fg:x="910" fg:w="11"/><text x="72.9337%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.88%)</title><rect x="72.6837%" y="597" width="0.8786%" height="15" fill="rgb(219,110,26)" fg:x="910" fg:w="11"/><text x="72.9337%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.4824%" y="581" width="0.0799%" height="15" fill="rgb(239,160,33)" fg:x="920" fg:w="1"/><text x="73.7324%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.4824%" y="565" width="0.0799%" height="15" fill="rgb(220,202,23)" fg:x="920" fg:w="1"/><text x="73.7324%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.4824%" y="549" width="0.0799%" height="15" fill="rgb(208,80,26)" fg:x="920" fg:w="1"/><text x="73.7324%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4824%" y="533" width="0.0799%" height="15" fill="rgb(243,85,7)" fg:x="920" fg:w="1"/><text x="73.7324%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (12 samples, 0.96%)</title><rect x="72.6837%" y="661" width="0.9585%" height="15" fill="rgb(228,77,47)" fg:x="910" fg:w="12"/><text x="72.9337%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.96%)</title><rect x="72.6837%" y="645" width="0.9585%" height="15" fill="rgb(212,226,8)" fg:x="910" fg:w="12"/><text x="72.9337%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5623%" y="629" width="0.0799%" height="15" fill="rgb(241,120,54)" fg:x="921" fg:w="1"/><text x="73.8123%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5623%" y="613" width="0.0799%" height="15" fill="rgb(226,80,16)" fg:x="921" fg:w="1"/><text x="73.8123%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.5623%" y="597" width="0.0799%" height="15" fill="rgb(240,76,13)" fg:x="921" fg:w="1"/><text x="73.8123%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.5623%" y="581" width="0.0799%" height="15" fill="rgb(252,74,8)" fg:x="921" fg:w="1"/><text x="73.8123%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.5623%" y="565" width="0.0799%" height="15" fill="rgb(244,155,2)" fg:x="921" fg:w="1"/><text x="73.8123%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.5623%" y="549" width="0.0799%" height="15" fill="rgb(215,81,35)" fg:x="921" fg:w="1"/><text x="73.8123%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.5623%" y="533" width="0.0799%" height="15" fill="rgb(206,55,2)" fg:x="921" fg:w="1"/><text x="73.8123%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.8019%" y="581" width="0.1597%" height="15" fill="rgb(231,2,34)" fg:x="924" fg:w="2"/><text x="74.0519%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.8019%" y="565" width="0.1597%" height="15" fill="rgb(242,176,48)" fg:x="924" fg:w="2"/><text x="74.0519%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.8019%" y="549" width="0.1597%" height="15" fill="rgb(249,31,36)" fg:x="924" fg:w="2"/><text x="74.0519%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="73.8019%" y="533" width="0.1597%" height="15" fill="rgb(205,18,17)" fg:x="924" fg:w="2"/><text x="74.0519%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="73.8019%" y="517" width="0.1597%" height="15" fill="rgb(254,130,5)" fg:x="924" fg:w="2"/><text x="74.0519%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="73.8019%" y="501" width="0.1597%" height="15" fill="rgb(229,42,45)" fg:x="924" fg:w="2"/><text x="74.0519%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="73.8019%" y="485" width="0.1597%" height="15" fill="rgb(245,95,25)" fg:x="924" fg:w="2"/><text x="74.0519%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="73.8019%" y="469" width="0.1597%" height="15" fill="rgb(249,193,38)" fg:x="924" fg:w="2"/><text x="74.0519%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="73.8019%" y="453" width="0.1597%" height="15" fill="rgb(241,140,43)" fg:x="924" fg:w="2"/><text x="74.0519%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="73.8019%" y="437" width="0.1597%" height="15" fill="rgb(245,78,48)" fg:x="924" fg:w="2"/><text x="74.0519%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="73.8019%" y="421" width="0.1597%" height="15" fill="rgb(214,92,39)" fg:x="924" fg:w="2"/><text x="74.0519%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="73.8019%" y="405" width="0.1597%" height="15" fill="rgb(211,189,14)" fg:x="924" fg:w="2"/><text x="74.0519%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8818%" y="389" width="0.0799%" height="15" fill="rgb(218,7,24)" fg:x="925" fg:w="1"/><text x="74.1318%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="73.7220%" y="645" width="0.3195%" height="15" fill="rgb(224,200,49)" fg:x="923" fg:w="4"/><text x="73.9720%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.8019%" y="629" width="0.2396%" height="15" fill="rgb(218,210,14)" fg:x="924" fg:w="3"/><text x="74.0519%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.8019%" y="613" width="0.2396%" height="15" fill="rgb(234,142,31)" fg:x="924" fg:w="3"/><text x="74.0519%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.8019%" y="597" width="0.2396%" height="15" fill="rgb(227,165,2)" fg:x="924" fg:w="3"/><text x="74.0519%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9617%" y="581" width="0.0799%" height="15" fill="rgb(232,44,46)" fg:x="926" fg:w="1"/><text x="74.2117%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9617%" y="565" width="0.0799%" height="15" fill="rgb(236,149,47)" fg:x="926" fg:w="1"/><text x="74.2117%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9617%" y="549" width="0.0799%" height="15" fill="rgb(227,45,31)" fg:x="926" fg:w="1"/><text x="74.2117%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9617%" y="533" width="0.0799%" height="15" fill="rgb(240,176,51)" fg:x="926" fg:w="1"/><text x="74.2117%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9617%" y="517" width="0.0799%" height="15" fill="rgb(249,146,41)" fg:x="926" fg:w="1"/><text x="74.2117%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9617%" y="501" width="0.0799%" height="15" fill="rgb(213,208,4)" fg:x="926" fg:w="1"/><text x="74.2117%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9617%" y="485" width="0.0799%" height="15" fill="rgb(245,84,36)" fg:x="926" fg:w="1"/><text x="74.2117%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9617%" y="469" width="0.0799%" height="15" fill="rgb(254,84,18)" fg:x="926" fg:w="1"/><text x="74.2117%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9617%" y="453" width="0.0799%" height="15" fill="rgb(225,38,54)" fg:x="926" fg:w="1"/><text x="74.2117%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9617%" y="437" width="0.0799%" height="15" fill="rgb(246,50,30)" fg:x="926" fg:w="1"/><text x="74.2117%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9617%" y="421" width="0.0799%" height="15" fill="rgb(246,148,9)" fg:x="926" fg:w="1"/><text x="74.2117%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9617%" y="405" width="0.0799%" height="15" fill="rgb(223,75,4)" fg:x="926" fg:w="1"/><text x="74.2117%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0415%" y="597" width="0.0799%" height="15" fill="rgb(239,148,41)" fg:x="927" fg:w="1"/><text x="74.2915%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1214%" y="565" width="0.0799%" height="15" fill="rgb(205,195,3)" fg:x="928" fg:w="1"/><text x="74.3714%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.2013%" y="549" width="0.0799%" height="15" fill="rgb(254,161,1)" fg:x="929" fg:w="1"/><text x="74.4513%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2013%" y="533" width="0.0799%" height="15" fill="rgb(211,229,8)" fg:x="929" fg:w="1"/><text x="74.4513%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.2013%" y="517" width="0.0799%" height="15" fill="rgb(220,97,9)" fg:x="929" fg:w="1"/><text x="74.4513%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.2812%" y="549" width="0.0799%" height="15" fill="rgb(240,218,8)" fg:x="930" fg:w="1"/><text x="74.5312%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.3610%" y="517" width="0.0799%" height="15" fill="rgb(250,44,0)" fg:x="931" fg:w="1"/><text x="74.6110%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.3610%" y="501" width="0.0799%" height="15" fill="rgb(236,41,53)" fg:x="931" fg:w="1"/><text x="74.6110%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.3610%" y="485" width="0.0799%" height="15" fill="rgb(218,227,13)" fg:x="931" fg:w="1"/><text x="74.6110%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.4409%" y="501" width="0.0799%" height="15" fill="rgb(217,94,32)" fg:x="932" fg:w="1"/><text x="74.6909%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.4409%" y="485" width="0.0799%" height="15" fill="rgb(213,217,12)" fg:x="932" fg:w="1"/><text x="74.6909%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4409%" y="469" width="0.0799%" height="15" fill="rgb(229,13,46)" fg:x="932" fg:w="1"/><text x="74.6909%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.4409%" y="453" width="0.0799%" height="15" fill="rgb(243,139,5)" fg:x="932" fg:w="1"/><text x="74.6909%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4409%" y="437" width="0.0799%" height="15" fill="rgb(249,38,45)" fg:x="932" fg:w="1"/><text x="74.6909%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="74.1214%" y="597" width="0.4792%" height="15" fill="rgb(216,70,11)" fg:x="928" fg:w="6"/><text x="74.3714%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="74.1214%" y="581" width="0.4792%" height="15" fill="rgb(253,101,25)" fg:x="928" fg:w="6"/><text x="74.3714%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="74.2013%" y="565" width="0.3994%" height="15" fill="rgb(207,197,30)" fg:x="929" fg:w="5"/><text x="74.4513%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="74.3610%" y="549" width="0.2396%" height="15" fill="rgb(238,87,13)" fg:x="931" fg:w="3"/><text x="74.6110%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.3610%" y="533" width="0.2396%" height="15" fill="rgb(215,155,8)" fg:x="931" fg:w="3"/><text x="74.6110%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="74.4409%" y="517" width="0.1597%" height="15" fill="rgb(239,166,38)" fg:x="932" fg:w="2"/><text x="74.6909%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5208%" y="501" width="0.0799%" height="15" fill="rgb(240,194,35)" fg:x="933" fg:w="1"/><text x="74.7708%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5208%" y="485" width="0.0799%" height="15" fill="rgb(219,10,44)" fg:x="933" fg:w="1"/><text x="74.7708%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.5208%" y="469" width="0.0799%" height="15" fill="rgb(251,220,35)" fg:x="933" fg:w="1"/><text x="74.7708%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5208%" y="453" width="0.0799%" height="15" fill="rgb(218,117,13)" fg:x="933" fg:w="1"/><text x="74.7708%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5208%" y="437" width="0.0799%" height="15" fill="rgb(221,213,40)" fg:x="933" fg:w="1"/><text x="74.7708%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5208%" y="421" width="0.0799%" height="15" fill="rgb(251,224,35)" fg:x="933" fg:w="1"/><text x="74.7708%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="74.0415%" y="645" width="0.6390%" height="15" fill="rgb(241,33,39)" fg:x="927" fg:w="8"/><text x="74.2915%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="74.0415%" y="629" width="0.6390%" height="15" fill="rgb(222,74,17)" fg:x="927" fg:w="8"/><text x="74.2915%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="74.0415%" y="613" width="0.6390%" height="15" fill="rgb(225,103,0)" fg:x="927" fg:w="8"/><text x="74.2915%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6006%" y="597" width="0.0799%" height="15" fill="rgb(240,0,12)" fg:x="934" fg:w="1"/><text x="74.8506%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6006%" y="581" width="0.0799%" height="15" fill="rgb(233,213,37)" fg:x="934" fg:w="1"/><text x="74.8506%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6006%" y="565" width="0.0799%" height="15" fill="rgb(225,84,52)" fg:x="934" fg:w="1"/><text x="74.8506%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.6805%" y="501" width="0.0799%" height="15" fill="rgb(247,160,51)" fg:x="935" fg:w="1"/><text x="74.9305%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6805%" y="485" width="0.0799%" height="15" fill="rgb(244,60,51)" fg:x="935" fg:w="1"/><text x="74.9305%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7604%" y="485" width="0.0799%" height="15" fill="rgb(233,114,7)" fg:x="936" fg:w="1"/><text x="75.0104%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.7604%" y="469" width="0.0799%" height="15" fill="rgb(246,136,16)" fg:x="936" fg:w="1"/><text x="75.0104%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.6805%" y="581" width="0.2396%" height="15" fill="rgb(243,114,45)" fg:x="935" fg:w="3"/><text x="74.9305%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.6805%" y="565" width="0.2396%" height="15" fill="rgb(247,183,43)" fg:x="935" fg:w="3"/><text x="74.9305%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.6805%" y="549" width="0.2396%" height="15" fill="rgb(251,210,42)" fg:x="935" fg:w="3"/><text x="74.9305%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.6805%" y="533" width="0.2396%" height="15" fill="rgb(221,88,35)" fg:x="935" fg:w="3"/><text x="74.9305%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.6805%" y="517" width="0.2396%" height="15" fill="rgb(242,21,20)" fg:x="935" fg:w="3"/><text x="74.9305%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.7604%" y="501" width="0.1597%" height="15" fill="rgb(233,226,36)" fg:x="936" fg:w="2"/><text x="75.0104%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.8403%" y="485" width="0.0799%" height="15" fill="rgb(243,189,34)" fg:x="937" fg:w="1"/><text x="75.0903%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.8403%" y="469" width="0.0799%" height="15" fill="rgb(207,145,50)" fg:x="937" fg:w="1"/><text x="75.0903%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (29 samples, 2.32%)</title><rect x="72.6837%" y="677" width="2.3163%" height="15" fill="rgb(242,1,50)" fg:x="910" fg:w="29"/><text x="72.9337%" y="687.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.36%)</title><rect x="73.6422%" y="661" width="1.3578%" height="15" fill="rgb(231,65,32)" fg:x="922" fg:w="17"/><text x="73.8922%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="74.6805%" y="645" width="0.3195%" height="15" fill="rgb(208,68,49)" fg:x="935" fg:w="4"/><text x="74.9305%" y="655.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="74.6805%" y="629" width="0.3195%" height="15" fill="rgb(253,54,49)" fg:x="935" fg:w="4"/><text x="74.9305%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.6805%" y="613" width="0.3195%" height="15" fill="rgb(245,186,24)" fg:x="935" fg:w="4"/><text x="74.9305%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.6805%" y="597" width="0.3195%" height="15" fill="rgb(209,2,41)" fg:x="935" fg:w="4"/><text x="74.9305%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9201%" y="581" width="0.0799%" height="15" fill="rgb(242,208,54)" fg:x="938" fg:w="1"/><text x="75.1701%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0000%" y="645" width="0.0799%" height="15" fill="rgb(225,9,51)" fg:x="939" fg:w="1"/><text x="75.2500%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.0000%" y="629" width="0.0799%" height="15" fill="rgb(207,207,25)" fg:x="939" fg:w="1"/><text x="75.2500%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0799%" y="645" width="0.0799%" height="15" fill="rgb(253,96,18)" fg:x="940" fg:w="1"/><text x="75.3299%" y="655.50"></text></g><g><title>engine::users::model::username_to_key (5 samples, 0.40%)</title><rect x="75.0000%" y="677" width="0.3994%" height="15" fill="rgb(252,215,20)" fg:x="939" fg:w="5"/><text x="75.2500%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="75.0000%" y="661" width="0.3994%" height="15" fill="rgb(245,227,26)" fg:x="939" fg:w="5"/><text x="75.2500%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="75.1597%" y="645" width="0.2396%" height="15" fill="rgb(241,208,0)" fg:x="941" fg:w="3"/><text x="75.4097%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.1597%" y="629" width="0.2396%" height="15" fill="rgb(224,130,10)" fg:x="941" fg:w="3"/><text x="75.4097%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="75.1597%" y="613" width="0.2396%" height="15" fill="rgb(237,29,0)" fg:x="941" fg:w="3"/><text x="75.4097%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.2396%" y="597" width="0.1597%" height="15" fill="rgb(219,27,41)" fg:x="942" fg:w="2"/><text x="75.4896%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="75.2396%" y="581" width="0.1597%" height="15" fill="rgb(245,101,19)" fg:x="942" fg:w="2"/><text x="75.4896%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="75.3994%" y="629" width="0.1597%" height="15" fill="rgb(243,44,37)" fg:x="944" fg:w="2"/><text x="75.6494%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.4792%" y="613" width="0.0799%" height="15" fill="rgb(228,213,43)" fg:x="945" fg:w="1"/><text x="75.7292%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="75.5591%" y="629" width="0.0799%" height="15" fill="rgb(219,163,21)" fg:x="946" fg:w="1"/><text x="75.8091%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5591%" y="613" width="0.0799%" height="15" fill="rgb(234,86,24)" fg:x="946" fg:w="1"/><text x="75.8091%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.6390%" y="629" width="0.0799%" height="15" fill="rgb(225,10,24)" fg:x="947" fg:w="1"/><text x="75.8890%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6390%" y="613" width="0.0799%" height="15" fill="rgb(218,109,7)" fg:x="947" fg:w="1"/><text x="75.8890%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.6390%" y="597" width="0.0799%" height="15" fill="rgb(210,20,26)" fg:x="947" fg:w="1"/><text x="75.8890%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7188%" y="581" width="0.0799%" height="15" fill="rgb(216,18,1)" fg:x="948" fg:w="1"/><text x="75.9688%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.7987%" y="581" width="0.0799%" height="15" fill="rgb(206,163,23)" fg:x="949" fg:w="1"/><text x="76.0487%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7987%" y="565" width="0.0799%" height="15" fill="rgb(229,150,31)" fg:x="949" fg:w="1"/><text x="76.0487%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8786%" y="501" width="0.0799%" height="15" fill="rgb(231,10,5)" fg:x="950" fg:w="1"/><text x="76.1286%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="75.8786%" y="533" width="0.1597%" height="15" fill="rgb(250,40,50)" fg:x="950" fg:w="2"/><text x="76.1286%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.8786%" y="517" width="0.1597%" height="15" fill="rgb(217,119,7)" fg:x="950" fg:w="2"/><text x="76.1286%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.9585%" y="501" width="0.0799%" height="15" fill="rgb(245,214,40)" fg:x="951" fg:w="1"/><text x="76.2085%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.9585%" y="485" width="0.0799%" height="15" fill="rgb(216,187,1)" fg:x="951" fg:w="1"/><text x="76.2085%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="76.0383%" y="453" width="0.1597%" height="15" fill="rgb(237,146,21)" fg:x="952" fg:w="2"/><text x="76.2883%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.1182%" y="437" width="0.0799%" height="15" fill="rgb(210,174,47)" fg:x="953" fg:w="1"/><text x="76.3682%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.1182%" y="421" width="0.0799%" height="15" fill="rgb(218,111,39)" fg:x="953" fg:w="1"/><text x="76.3682%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.1182%" y="405" width="0.0799%" height="15" fill="rgb(224,95,19)" fg:x="953" fg:w="1"/><text x="76.3682%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="75.8786%" y="581" width="0.3994%" height="15" fill="rgb(234,15,38)" fg:x="950" fg:w="5"/><text x="76.1286%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="75.8786%" y="565" width="0.3994%" height="15" fill="rgb(246,56,12)" fg:x="950" fg:w="5"/><text x="76.1286%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="75.8786%" y="549" width="0.3994%" height="15" fill="rgb(247,16,17)" fg:x="950" fg:w="5"/><text x="76.1286%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.0383%" y="533" width="0.2396%" height="15" fill="rgb(215,151,11)" fg:x="952" fg:w="3"/><text x="76.2883%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.0383%" y="517" width="0.2396%" height="15" fill="rgb(225,16,24)" fg:x="952" fg:w="3"/><text x="76.2883%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="76.0383%" y="501" width="0.2396%" height="15" fill="rgb(217,117,5)" fg:x="952" fg:w="3"/><text x="76.2883%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.0383%" y="485" width="0.2396%" height="15" fill="rgb(246,187,53)" fg:x="952" fg:w="3"/><text x="76.2883%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.0383%" y="469" width="0.2396%" height="15" fill="rgb(241,71,40)" fg:x="952" fg:w="3"/><text x="76.2883%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1981%" y="453" width="0.0799%" height="15" fill="rgb(231,67,39)" fg:x="954" fg:w="1"/><text x="76.4481%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="75.7188%" y="629" width="0.6390%" height="15" fill="rgb(222,120,24)" fg:x="948" fg:w="8"/><text x="75.9688%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="75.7188%" y="613" width="0.6390%" height="15" fill="rgb(248,3,3)" fg:x="948" fg:w="8"/><text x="75.9688%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="75.7188%" y="597" width="0.6390%" height="15" fill="rgb(228,218,5)" fg:x="948" fg:w="8"/><text x="75.9688%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2780%" y="581" width="0.0799%" height="15" fill="rgb(212,202,43)" fg:x="955" fg:w="1"/><text x="76.5280%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2780%" y="565" width="0.0799%" height="15" fill="rgb(235,183,2)" fg:x="955" fg:w="1"/><text x="76.5280%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.2780%" y="549" width="0.0799%" height="15" fill="rgb(230,165,10)" fg:x="955" fg:w="1"/><text x="76.5280%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.2780%" y="533" width="0.0799%" height="15" fill="rgb(219,54,40)" fg:x="955" fg:w="1"/><text x="76.5280%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.3578%" y="533" width="0.0799%" height="15" fill="rgb(244,73,9)" fg:x="956" fg:w="1"/><text x="76.6078%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3578%" y="517" width="0.0799%" height="15" fill="rgb(212,32,45)" fg:x="956" fg:w="1"/><text x="76.6078%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="76.3578%" y="565" width="0.1597%" height="15" fill="rgb(205,58,31)" fg:x="956" fg:w="2"/><text x="76.6078%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.3578%" y="549" width="0.1597%" height="15" fill="rgb(250,120,43)" fg:x="956" fg:w="2"/><text x="76.6078%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4377%" y="533" width="0.0799%" height="15" fill="rgb(235,13,10)" fg:x="957" fg:w="1"/><text x="76.6877%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4377%" y="517" width="0.0799%" height="15" fill="rgb(232,219,31)" fg:x="957" fg:w="1"/><text x="76.6877%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4377%" y="501" width="0.0799%" height="15" fill="rgb(218,157,51)" fg:x="957" fg:w="1"/><text x="76.6877%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (959 samples, 76.60%)</title><rect x="0.0000%" y="757" width="76.5974%" height="15" fill="rgb(211,91,52)" fg:x="0" fg:w="959"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (959 samples, 76.60%)</title><rect x="0.0000%" y="741" width="76.5974%" height="15" fill="rgb(240,173,1)" fg:x="0" fg:w="959"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (959 samples, 76.60%)</title><rect x="0.0000%" y="725" width="76.5974%" height="15" fill="rgb(248,20,47)" fg:x="0" fg:w="959"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (448 samples, 35.78%)</title><rect x="40.8147%" y="709" width="35.7827%" height="15" fill="rgb(217,221,40)" fg:x="511" fg:w="448"/><text x="41.0647%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (448 samples, 35.78%)</title><rect x="40.8147%" y="693" width="35.7827%" height="15" fill="rgb(226,149,51)" fg:x="511" fg:w="448"/><text x="41.0647%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (15 samples, 1.20%)</title><rect x="75.3994%" y="677" width="1.1981%" height="15" fill="rgb(252,193,7)" fg:x="944" fg:w="15"/><text x="75.6494%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.20%)</title><rect x="75.3994%" y="661" width="1.1981%" height="15" fill="rgb(205,123,0)" fg:x="944" fg:w="15"/><text x="75.6494%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="75.3994%" y="645" width="1.1981%" height="15" fill="rgb(233,173,25)" fg:x="944" fg:w="15"/><text x="75.6494%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="76.3578%" y="629" width="0.2396%" height="15" fill="rgb(216,63,32)" fg:x="956" fg:w="3"/><text x="76.6078%" y="639.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="76.3578%" y="613" width="0.2396%" height="15" fill="rgb(209,56,45)" fg:x="956" fg:w="3"/><text x="76.6078%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="76.3578%" y="597" width="0.2396%" height="15" fill="rgb(226,111,49)" fg:x="956" fg:w="3"/><text x="76.6078%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="76.3578%" y="581" width="0.2396%" height="15" fill="rgb(244,181,21)" fg:x="956" fg:w="3"/><text x="76.6078%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.5176%" y="565" width="0.0799%" height="15" fill="rgb(222,126,15)" fg:x="958" fg:w="1"/><text x="76.7676%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5176%" y="549" width="0.0799%" height="15" fill="rgb(222,95,17)" fg:x="958" fg:w="1"/><text x="76.7676%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7572%" y="581" width="0.0799%" height="15" fill="rgb(254,46,5)" fg:x="961" fg:w="1"/><text x="77.0072%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7572%" y="565" width="0.0799%" height="15" fill="rgb(236,216,35)" fg:x="961" fg:w="1"/><text x="77.0072%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="76.8371%" y="565" width="0.1597%" height="15" fill="rgb(217,187,26)" fg:x="962" fg:w="2"/><text x="77.0871%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9968%" y="501" width="0.0799%" height="15" fill="rgb(207,192,25)" fg:x="964" fg:w="1"/><text x="77.2468%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="76.9968%" y="565" width="0.1597%" height="15" fill="rgb(253,135,27)" fg:x="964" fg:w="2"/><text x="77.2468%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.9968%" y="549" width="0.1597%" height="15" fill="rgb(211,122,29)" fg:x="964" fg:w="2"/><text x="77.2468%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.9968%" y="533" width="0.1597%" height="15" fill="rgb(233,162,40)" fg:x="964" fg:w="2"/><text x="77.2468%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.9968%" y="517" width="0.1597%" height="15" fill="rgb(222,184,47)" fg:x="964" fg:w="2"/><text x="77.2468%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.0767%" y="501" width="0.0799%" height="15" fill="rgb(249,99,23)" fg:x="965" fg:w="1"/><text x="77.3267%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="76.7572%" y="629" width="0.4792%" height="15" fill="rgb(214,60,12)" fg:x="961" fg:w="6"/><text x="77.0072%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (6 samples, 0.48%)</title><rect x="76.7572%" y="613" width="0.4792%" height="15" fill="rgb(250,229,36)" fg:x="961" fg:w="6"/><text x="77.0072%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="76.7572%" y="597" width="0.4792%" height="15" fill="rgb(232,195,10)" fg:x="961" fg:w="6"/><text x="77.0072%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="76.8371%" y="581" width="0.3994%" height="15" fill="rgb(205,213,31)" fg:x="962" fg:w="5"/><text x="77.0871%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1565%" y="565" width="0.0799%" height="15" fill="rgb(237,43,8)" fg:x="966" fg:w="1"/><text x="77.4065%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1565%" y="549" width="0.0799%" height="15" fill="rgb(216,208,3)" fg:x="966" fg:w="1"/><text x="77.4065%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="77.3163%" y="613" width="0.1597%" height="15" fill="rgb(228,179,44)" fg:x="968" fg:w="2"/><text x="77.5663%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4760%" y="597" width="0.0799%" height="15" fill="rgb(230,192,27)" fg:x="970" fg:w="1"/><text x="77.7260%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.6358%" y="549" width="0.0799%" height="15" fill="rgb(251,30,38)" fg:x="972" fg:w="1"/><text x="77.8858%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="76.5974%" y="709" width="1.1981%" height="15" fill="rgb(246,55,52)" fg:x="959" fg:w="15"/><text x="76.8474%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (15 samples, 1.20%)</title><rect x="76.5974%" y="693" width="1.1981%" height="15" fill="rgb(249,79,26)" fg:x="959" fg:w="15"/><text x="76.8474%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="76.5974%" y="677" width="1.1981%" height="15" fill="rgb(220,202,16)" fg:x="959" fg:w="15"/><text x="76.8474%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (15 samples, 1.20%)</title><rect x="76.5974%" y="661" width="1.1981%" height="15" fill="rgb(250,170,23)" fg:x="959" fg:w="15"/><text x="76.8474%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="76.5974%" y="645" width="1.1981%" height="15" fill="rgb(230,7,37)" fg:x="959" fg:w="15"/><text x="76.8474%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="77.2364%" y="629" width="0.5591%" height="15" fill="rgb(213,71,1)" fg:x="967" fg:w="7"/><text x="77.4864%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="77.4760%" y="613" width="0.3195%" height="15" fill="rgb(227,87,39)" fg:x="970" fg:w="4"/><text x="77.7260%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.5559%" y="597" width="0.2396%" height="15" fill="rgb(210,41,29)" fg:x="971" fg:w="3"/><text x="77.8059%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.5559%" y="581" width="0.2396%" height="15" fill="rgb(206,191,31)" fg:x="971" fg:w="3"/><text x="77.8059%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.6358%" y="565" width="0.1597%" height="15" fill="rgb(247,75,54)" fg:x="972" fg:w="2"/><text x="77.8858%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7157%" y="549" width="0.0799%" height="15" fill="rgb(208,54,50)" fg:x="973" fg:w="1"/><text x="77.9657%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7955%" y="661" width="0.0799%" height="15" fill="rgb(214,90,37)" fg:x="974" fg:w="1"/><text x="78.0455%" y="671.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="77.9553%" y="613" width="0.0799%" height="15" fill="rgb(220,132,6)" fg:x="976" fg:w="1"/><text x="78.2053%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="77.9553%" y="597" width="0.0799%" height="15" fill="rgb(213,167,7)" fg:x="976" fg:w="1"/><text x="78.2053%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="78.0351%" y="613" width="0.0799%" height="15" fill="rgb(243,36,27)" fg:x="977" fg:w="1"/><text x="78.2851%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="78.0351%" y="597" width="0.0799%" height="15" fill="rgb(235,147,12)" fg:x="977" fg:w="1"/><text x="78.2851%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="78.0351%" y="581" width="0.0799%" height="15" fill="rgb(212,198,44)" fg:x="977" fg:w="1"/><text x="78.2851%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="78.1150%" y="613" width="0.0799%" height="15" fill="rgb(218,68,50)" fg:x="978" fg:w="1"/><text x="78.3650%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="78.1150%" y="597" width="0.0799%" height="15" fill="rgb(224,79,48)" fg:x="978" fg:w="1"/><text x="78.3650%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="78.1150%" y="581" width="0.0799%" height="15" fill="rgb(213,191,50)" fg:x="978" fg:w="1"/><text x="78.3650%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1150%" y="565" width="0.0799%" height="15" fill="rgb(254,146,10)" fg:x="978" fg:w="1"/><text x="78.3650%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.32%)</title><rect x="77.9553%" y="629" width="0.3195%" height="15" fill="rgb(215,175,11)" fg:x="976" fg:w="4"/><text x="78.2053%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="78.1949%" y="613" width="0.0799%" height="15" fill="rgb(207,49,7)" fg:x="979" fg:w="1"/><text x="78.4449%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="78.1949%" y="597" width="0.0799%" height="15" fill="rgb(234,144,29)" fg:x="979" fg:w="1"/><text x="78.4449%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="78.1949%" y="581" width="0.0799%" height="15" fill="rgb(213,222,48)" fg:x="979" fg:w="1"/><text x="78.4449%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.1949%" y="565" width="0.0799%" height="15" fill="rgb(222,8,6)" fg:x="979" fg:w="1"/><text x="78.4449%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="78.2748%" y="629" width="0.0799%" height="15" fill="rgb(221,114,49)" fg:x="980" fg:w="1"/><text x="78.5248%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="78.2748%" y="613" width="0.0799%" height="15" fill="rgb(250,140,42)" fg:x="980" fg:w="1"/><text x="78.5248%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="78.2748%" y="597" width="0.0799%" height="15" fill="rgb(250,150,27)" fg:x="980" fg:w="1"/><text x="78.5248%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="78.2748%" y="581" width="0.0799%" height="15" fill="rgb(252,159,3)" fg:x="980" fg:w="1"/><text x="78.5248%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="78.2748%" y="565" width="0.0799%" height="15" fill="rgb(241,182,3)" fg:x="980" fg:w="1"/><text x="78.5248%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="78.2748%" y="549" width="0.0799%" height="15" fill="rgb(236,3,9)" fg:x="980" fg:w="1"/><text x="78.5248%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="78.2748%" y="533" width="0.0799%" height="15" fill="rgb(223,227,51)" fg:x="980" fg:w="1"/><text x="78.5248%" y="543.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="78.2748%" y="517" width="0.0799%" height="15" fill="rgb(232,133,30)" fg:x="980" fg:w="1"/><text x="78.5248%" y="527.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (3 samples, 0.24%)</title><rect x="78.3546%" y="613" width="0.2396%" height="15" fill="rgb(209,93,27)" fg:x="981" fg:w="3"/><text x="78.6046%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="78.3546%" y="597" width="0.2396%" height="15" fill="rgb(208,108,34)" fg:x="981" fg:w="3"/><text x="78.6046%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.4345%" y="581" width="0.1597%" height="15" fill="rgb(215,189,13)" fg:x="982" fg:w="2"/><text x="78.6845%" y="591.50"></text></g><g><title>glob::is_dir (2 samples, 0.16%)</title><rect x="78.5942%" y="565" width="0.1597%" height="15" fill="rgb(206,88,23)" fg:x="984" fg:w="2"/><text x="78.8442%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="78.5942%" y="549" width="0.1597%" height="15" fill="rgb(240,173,0)" fg:x="984" fg:w="2"/><text x="78.8442%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="78.5942%" y="533" width="0.1597%" height="15" fill="rgb(223,106,52)" fg:x="984" fg:w="2"/><text x="78.8442%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="78.5942%" y="517" width="0.1597%" height="15" fill="rgb(206,130,16)" fg:x="984" fg:w="2"/><text x="78.8442%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="78.5942%" y="501" width="0.1597%" height="15" fill="rgb(220,54,25)" fg:x="984" fg:w="2"/><text x="78.8442%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="78.5942%" y="485" width="0.1597%" height="15" fill="rgb(210,4,38)" fg:x="984" fg:w="2"/><text x="78.8442%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="78.5942%" y="469" width="0.1597%" height="15" fill="rgb(238,94,39)" fg:x="984" fg:w="2"/><text x="78.8442%" y="479.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="78.5942%" y="453" width="0.1597%" height="15" fill="rgb(234,124,34)" fg:x="984" fg:w="2"/><text x="78.8442%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="78.5942%" y="597" width="0.2396%" height="15" fill="rgb(221,91,40)" fg:x="984" fg:w="3"/><text x="78.8442%" y="607.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="78.5942%" y="581" width="0.2396%" height="15" fill="rgb(246,53,28)" fg:x="984" fg:w="3"/><text x="78.8442%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="78.7540%" y="565" width="0.0799%" height="15" fill="rgb(229,109,7)" fg:x="986" fg:w="1"/><text x="79.0040%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="78.7540%" y="549" width="0.0799%" height="15" fill="rgb(249,117,8)" fg:x="986" fg:w="1"/><text x="79.0040%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="78.7540%" y="533" width="0.0799%" height="15" fill="rgb(210,181,1)" fg:x="986" fg:w="1"/><text x="79.0040%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="78.7540%" y="517" width="0.0799%" height="15" fill="rgb(211,66,1)" fg:x="986" fg:w="1"/><text x="79.0040%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="78.7540%" y="501" width="0.0799%" height="15" fill="rgb(221,90,14)" fg:x="986" fg:w="1"/><text x="79.0040%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="78.7540%" y="485" width="0.0799%" height="15" fill="rgb(219,222,44)" fg:x="986" fg:w="1"/><text x="79.0040%" y="495.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="78.7540%" y="469" width="0.0799%" height="15" fill="rgb(246,34,33)" fg:x="986" fg:w="1"/><text x="79.0040%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.8339%" y="565" width="0.0799%" height="15" fill="rgb(227,135,41)" fg:x="987" fg:w="1"/><text x="79.0839%" y="575.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="78.8339%" y="549" width="0.0799%" height="15" fill="rgb(226,15,14)" fg:x="987" fg:w="1"/><text x="79.0839%" y="559.50"></text></g><g><title>std::path::Path::is_absolute (1 samples, 0.08%)</title><rect x="78.8339%" y="533" width="0.0799%" height="15" fill="rgb(236,148,47)" fg:x="987" fg:w="1"/><text x="79.0839%" y="543.50"></text></g><g><title>std::path::Path::has_root (1 samples, 0.08%)</title><rect x="78.8339%" y="517" width="0.0799%" height="15" fill="rgb(233,162,52)" fg:x="987" fg:w="1"/><text x="79.0839%" y="527.50"></text></g><g><title>std::path::Path::components (1 samples, 0.08%)</title><rect x="78.8339%" y="501" width="0.0799%" height="15" fill="rgb(244,35,28)" fg:x="987" fg:w="1"/><text x="79.0839%" y="511.50"></text></g><g><title>std::path::has_physical_root (1 samples, 0.08%)</title><rect x="78.8339%" y="485" width="0.0799%" height="15" fill="rgb(205,121,10)" fg:x="987" fg:w="1"/><text x="79.0839%" y="495.50"></text></g><g><title>std::sys::unix::path::is_sep_byte (1 samples, 0.08%)</title><rect x="78.8339%" y="469" width="0.0799%" height="15" fill="rgb(250,58,18)" fg:x="987" fg:w="1"/><text x="79.0839%" y="479.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="78.3546%" y="629" width="0.6390%" height="15" fill="rgb(216,37,13)" fg:x="981" fg:w="8"/><text x="78.6046%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.40%)</title><rect x="78.5942%" y="613" width="0.3994%" height="15" fill="rgb(221,215,42)" fg:x="984" fg:w="5"/><text x="78.8442%" y="623.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="78.8339%" y="597" width="0.1597%" height="15" fill="rgb(217,214,19)" fg:x="987" fg:w="2"/><text x="79.0839%" y="607.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="78.8339%" y="581" width="0.1597%" height="15" fill="rgb(233,139,13)" fg:x="987" fg:w="2"/><text x="79.0839%" y="591.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="78.9137%" y="565" width="0.0799%" height="15" fill="rgb(247,168,23)" fg:x="988" fg:w="1"/><text x="79.1637%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (15 samples, 1.20%)</title><rect x="77.8754%" y="645" width="1.1981%" height="15" fill="rgb(207,202,1)" fg:x="975" fg:w="15"/><text x="78.1254%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="78.9936%" y="629" width="0.0799%" height="15" fill="rgb(220,155,48)" fg:x="989" fg:w="1"/><text x="79.2436%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9936%" y="613" width="0.0799%" height="15" fill="rgb(250,43,26)" fg:x="989" fg:w="1"/><text x="79.2436%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.0735%" y="613" width="0.0799%" height="15" fill="rgb(212,190,23)" fg:x="990" fg:w="1"/><text x="79.3235%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1534%" y="613" width="0.0799%" height="15" fill="rgb(216,39,24)" fg:x="991" fg:w="1"/><text x="79.4034%" y="623.50"></text></g><g><title>engine::session::Session::initialize (20 samples, 1.60%)</title><rect x="77.8754%" y="661" width="1.5974%" height="15" fill="rgb(252,113,16)" fg:x="975" fg:w="20"/><text x="78.1254%" y="671.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (5 samples, 0.40%)</title><rect x="79.0735%" y="645" width="0.3994%" height="15" fill="rgb(208,113,19)" fg:x="990" fg:w="5"/><text x="79.3235%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="79.0735%" y="629" width="0.3994%" height="15" fill="rgb(234,107,25)" fg:x="990" fg:w="5"/><text x="79.3235%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="79.2332%" y="613" width="0.2396%" height="15" fill="rgb(234,217,51)" fg:x="992" fg:w="3"/><text x="79.4832%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="79.2332%" y="597" width="0.2396%" height="15" fill="rgb(251,29,42)" fg:x="992" fg:w="3"/><text x="79.4832%" y="607.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="79.3131%" y="581" width="0.1597%" height="15" fill="rgb(221,62,51)" fg:x="993" fg:w="2"/><text x="79.5631%" y="591.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (23 samples, 1.84%)</title><rect x="77.7955%" y="709" width="1.8371%" height="15" fill="rgb(240,192,43)" fg:x="974" fg:w="23"/><text x="78.0455%" y="719.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (23 samples, 1.84%)</title><rect x="77.7955%" y="693" width="1.8371%" height="15" fill="rgb(224,157,47)" fg:x="974" fg:w="23"/><text x="78.0455%" y="703.50">e..</text></g><g><title>engine::session::Session::new (23 samples, 1.84%)</title><rect x="77.7955%" y="677" width="1.8371%" height="15" fill="rgb(226,84,45)" fg:x="974" fg:w="23"/><text x="78.0455%" y="687.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="79.4728%" y="661" width="0.1597%" height="15" fill="rgb(208,207,23)" fg:x="995" fg:w="2"/><text x="79.7228%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.4728%" y="645" width="0.1597%" height="15" fill="rgb(253,34,51)" fg:x="995" fg:w="2"/><text x="79.7228%" y="655.50"></text></g><g><title>&lt;plugins_core::emote::actions::LaughAction as kernel::actions::Action&gt;::perform (1 samples, 0.08%)</title><rect x="79.5527%" y="629" width="0.0799%" height="15" fill="rgb(227,26,34)" fg:x="996" fg:w="1"/><text x="79.8027%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.6326%" y="661" width="0.0799%" height="15" fill="rgb(245,75,19)" fg:x="997" fg:w="1"/><text x="79.8826%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.6326%" y="645" width="0.0799%" height="15" fill="rgb(250,191,31)" fg:x="997" fg:w="1"/><text x="79.8826%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.6326%" y="693" width="0.1597%" height="15" fill="rgb(224,11,50)" fg:x="997" fg:w="2"/><text x="79.8826%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="79.6326%" y="677" width="0.1597%" height="15" fill="rgb(231,171,7)" fg:x="997" fg:w="2"/><text x="79.8826%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.7125%" y="661" width="0.0799%" height="15" fill="rgb(252,214,10)" fg:x="998" fg:w="1"/><text x="79.9625%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.8722%" y="549" width="0.0799%" height="15" fill="rgb(249,45,46)" fg:x="1000" fg:w="1"/><text x="80.1222%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8722%" y="533" width="0.0799%" height="15" fill="rgb(240,173,7)" fg:x="1000" fg:w="1"/><text x="80.1222%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.8722%" y="517" width="0.0799%" height="15" fill="rgb(235,214,13)" fg:x="1000" fg:w="1"/><text x="80.1222%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.8722%" y="501" width="0.0799%" height="15" fill="rgb(245,156,8)" fg:x="1000" fg:w="1"/><text x="80.1222%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9521%" y="533" width="0.0799%" height="15" fill="rgb(235,46,12)" fg:x="1001" fg:w="1"/><text x="80.2021%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.9521%" y="517" width="0.0799%" height="15" fill="rgb(221,81,14)" fg:x="1001" fg:w="1"/><text x="80.2021%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.9521%" y="501" width="0.0799%" height="15" fill="rgb(238,207,9)" fg:x="1001" fg:w="1"/><text x="80.2021%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.9521%" y="485" width="0.0799%" height="15" fill="rgb(224,129,35)" fg:x="1001" fg:w="1"/><text x="80.2021%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="79.9521%" y="469" width="0.0799%" height="15" fill="rgb(243,218,34)" fg:x="1001" fg:w="1"/><text x="80.2021%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="79.8722%" y="565" width="0.2396%" height="15" fill="rgb(220,166,13)" fg:x="1000" fg:w="3"/><text x="80.1222%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="79.9521%" y="549" width="0.1597%" height="15" fill="rgb(227,167,49)" fg:x="1001" fg:w="2"/><text x="80.2021%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.0319%" y="533" width="0.0799%" height="15" fill="rgb(234,142,12)" fg:x="1002" fg:w="1"/><text x="80.2819%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="79.8722%" y="597" width="0.3195%" height="15" fill="rgb(207,100,48)" fg:x="1000" fg:w="4"/><text x="80.1222%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="79.8722%" y="581" width="0.3195%" height="15" fill="rgb(210,25,14)" fg:x="1000" fg:w="4"/><text x="80.1222%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.1118%" y="565" width="0.0799%" height="15" fill="rgb(246,116,27)" fg:x="1003" fg:w="1"/><text x="80.3618%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.1118%" y="549" width="0.0799%" height="15" fill="rgb(214,193,42)" fg:x="1003" fg:w="1"/><text x="80.3618%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.1118%" y="533" width="0.0799%" height="15" fill="rgb(214,122,8)" fg:x="1003" fg:w="1"/><text x="80.3618%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.1917%" y="533" width="0.0799%" height="15" fill="rgb(244,173,18)" fg:x="1004" fg:w="1"/><text x="80.4417%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.1917%" y="597" width="0.1597%" height="15" fill="rgb(232,68,19)" fg:x="1004" fg:w="2"/><text x="80.4417%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="80.1917%" y="581" width="0.1597%" height="15" fill="rgb(236,224,1)" fg:x="1004" fg:w="2"/><text x="80.4417%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.1917%" y="565" width="0.1597%" height="15" fill="rgb(240,11,8)" fg:x="1004" fg:w="2"/><text x="80.4417%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.1917%" y="549" width="0.1597%" height="15" fill="rgb(244,159,20)" fg:x="1004" fg:w="2"/><text x="80.4417%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.2716%" y="533" width="0.0799%" height="15" fill="rgb(240,223,54)" fg:x="1005" fg:w="1"/><text x="80.5216%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2716%" y="517" width="0.0799%" height="15" fill="rgb(237,146,5)" fg:x="1005" fg:w="1"/><text x="80.5216%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.5112%" y="501" width="0.0799%" height="15" fill="rgb(218,221,32)" fg:x="1008" fg:w="1"/><text x="80.7612%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5112%" y="485" width="0.0799%" height="15" fill="rgb(244,96,26)" fg:x="1008" fg:w="1"/><text x="80.7612%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.5112%" y="469" width="0.0799%" height="15" fill="rgb(245,184,37)" fg:x="1008" fg:w="1"/><text x="80.7612%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.5112%" y="453" width="0.0799%" height="15" fill="rgb(248,91,47)" fg:x="1008" fg:w="1"/><text x="80.7612%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.5911%" y="485" width="0.0799%" height="15" fill="rgb(243,199,8)" fg:x="1009" fg:w="1"/><text x="80.8411%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="80.6709%" y="485" width="0.0799%" height="15" fill="rgb(249,12,15)" fg:x="1010" fg:w="1"/><text x="80.9209%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="80.4313%" y="517" width="0.3994%" height="15" fill="rgb(245,97,12)" fg:x="1007" fg:w="5"/><text x="80.6813%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="80.5911%" y="501" width="0.2396%" height="15" fill="rgb(244,61,1)" fg:x="1009" fg:w="3"/><text x="80.8411%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.7508%" y="485" width="0.0799%" height="15" fill="rgb(222,194,10)" fg:x="1011" fg:w="1"/><text x="81.0008%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.7508%" y="469" width="0.0799%" height="15" fill="rgb(226,178,8)" fg:x="1011" fg:w="1"/><text x="81.0008%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.7508%" y="453" width="0.0799%" height="15" fill="rgb(241,32,34)" fg:x="1011" fg:w="1"/><text x="81.0008%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7508%" y="437" width="0.0799%" height="15" fill="rgb(254,26,6)" fg:x="1011" fg:w="1"/><text x="81.0008%" y="447.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.12%)</title><rect x="79.7923%" y="693" width="1.1182%" height="15" fill="rgb(249,71,11)" fg:x="999" fg:w="14"/><text x="80.0423%" y="703.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.12%)</title><rect x="79.7923%" y="677" width="1.1182%" height="15" fill="rgb(232,170,27)" fg:x="999" fg:w="14"/><text x="80.0423%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.12%)</title><rect x="79.7923%" y="661" width="1.1182%" height="15" fill="rgb(214,223,17)" fg:x="999" fg:w="14"/><text x="80.0423%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.12%)</title><rect x="79.7923%" y="645" width="1.1182%" height="15" fill="rgb(250,18,15)" fg:x="999" fg:w="14"/><text x="80.0423%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.12%)</title><rect x="79.7923%" y="629" width="1.1182%" height="15" fill="rgb(212,153,51)" fg:x="999" fg:w="14"/><text x="80.0423%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.12%)</title><rect x="79.7923%" y="613" width="1.1182%" height="15" fill="rgb(219,194,12)" fg:x="999" fg:w="14"/><text x="80.0423%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="80.3514%" y="597" width="0.5591%" height="15" fill="rgb(212,58,17)" fg:x="1006" fg:w="7"/><text x="80.6014%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="80.3514%" y="581" width="0.5591%" height="15" fill="rgb(254,5,10)" fg:x="1006" fg:w="7"/><text x="80.6014%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="80.3514%" y="565" width="0.5591%" height="15" fill="rgb(246,91,7)" fg:x="1006" fg:w="7"/><text x="80.6014%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="80.3514%" y="549" width="0.5591%" height="15" fill="rgb(218,108,49)" fg:x="1006" fg:w="7"/><text x="80.6014%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="80.4313%" y="533" width="0.4792%" height="15" fill="rgb(238,123,20)" fg:x="1007" fg:w="6"/><text x="80.6813%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.8307%" y="517" width="0.0799%" height="15" fill="rgb(231,69,23)" fg:x="1012" fg:w="1"/><text x="81.0807%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.8307%" y="501" width="0.0799%" height="15" fill="rgb(230,209,3)" fg:x="1012" fg:w="1"/><text x="81.0807%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.9105%" y="661" width="0.0799%" height="15" fill="rgb(231,19,0)" fg:x="1013" fg:w="1"/><text x="81.1605%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="80.9105%" y="645" width="0.0799%" height="15" fill="rgb(226,192,25)" fg:x="1013" fg:w="1"/><text x="81.1605%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="80.9105%" y="693" width="0.1597%" height="15" fill="rgb(223,175,53)" fg:x="1013" fg:w="2"/><text x="81.1605%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="80.9105%" y="677" width="0.1597%" height="15" fill="rgb(248,35,51)" fg:x="1013" fg:w="2"/><text x="81.1605%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="80.9904%" y="661" width="0.0799%" height="15" fill="rgb(230,37,26)" fg:x="1014" fg:w="1"/><text x="81.2404%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9904%" y="645" width="0.0799%" height="15" fill="rgb(206,120,22)" fg:x="1014" fg:w="1"/><text x="81.2404%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.0703%" y="661" width="0.0799%" height="15" fill="rgb(207,165,28)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0703%" y="645" width="0.0799%" height="15" fill="rgb(226,23,46)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0703%" y="629" width="0.0799%" height="15" fill="rgb(208,130,44)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.0703%" y="613" width="0.0799%" height="15" fill="rgb(231,67,8)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.0703%" y="597" width="0.0799%" height="15" fill="rgb(205,183,22)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.0703%" y="581" width="0.0799%" height="15" fill="rgb(224,47,9)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.0703%" y="565" width="0.0799%" height="15" fill="rgb(250,183,49)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="81.0703%" y="549" width="0.0799%" height="15" fill="rgb(220,151,39)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.0703%" y="533" width="0.0799%" height="15" fill="rgb(220,118,20)" fg:x="1015" fg:w="1"/><text x="81.3203%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="81.1502%" y="661" width="0.0799%" height="15" fill="rgb(231,65,51)" fg:x="1016" fg:w="1"/><text x="81.4002%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.1502%" y="645" width="0.0799%" height="15" fill="rgb(253,125,37)" fg:x="1016" fg:w="1"/><text x="81.4002%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="81.1502%" y="629" width="0.0799%" height="15" fill="rgb(232,102,6)" fg:x="1016" fg:w="1"/><text x="81.4002%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.1502%" y="613" width="0.0799%" height="15" fill="rgb(251,105,13)" fg:x="1016" fg:w="1"/><text x="81.4002%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1502%" y="597" width="0.0799%" height="15" fill="rgb(222,179,29)" fg:x="1016" fg:w="1"/><text x="81.4002%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.2300%" y="613" width="0.0799%" height="15" fill="rgb(229,180,53)" fg:x="1017" fg:w="1"/><text x="81.4800%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.2300%" y="597" width="0.0799%" height="15" fill="rgb(238,104,13)" fg:x="1017" fg:w="1"/><text x="81.4800%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.2300%" y="581" width="0.0799%" height="15" fill="rgb(210,130,5)" fg:x="1017" fg:w="1"/><text x="81.4800%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="81.2300%" y="645" width="0.1597%" height="15" fill="rgb(233,87,49)" fg:x="1017" fg:w="2"/><text x="81.4800%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="81.2300%" y="629" width="0.1597%" height="15" fill="rgb(243,34,9)" fg:x="1017" fg:w="2"/><text x="81.4800%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="81.3099%" y="613" width="0.0799%" height="15" fill="rgb(235,225,10)" fg:x="1018" fg:w="1"/><text x="81.5599%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="81.3099%" y="597" width="0.0799%" height="15" fill="rgb(212,0,30)" fg:x="1018" fg:w="1"/><text x="81.5599%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="81.3099%" y="581" width="0.0799%" height="15" fill="rgb(211,177,0)" fg:x="1018" fg:w="1"/><text x="81.5599%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3099%" y="565" width="0.0799%" height="15" fill="rgb(225,220,11)" fg:x="1018" fg:w="1"/><text x="81.5599%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="81.3898%" y="645" width="0.0799%" height="15" fill="rgb(215,10,13)" fg:x="1019" fg:w="1"/><text x="81.6398%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3898%" y="629" width="0.0799%" height="15" fill="rgb(240,177,14)" fg:x="1019" fg:w="1"/><text x="81.6398%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="81.3898%" y="613" width="0.0799%" height="15" fill="rgb(243,7,39)" fg:x="1019" fg:w="1"/><text x="81.6398%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3898%" y="597" width="0.0799%" height="15" fill="rgb(212,99,0)" fg:x="1019" fg:w="1"/><text x="81.6398%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4696%" y="613" width="0.0799%" height="15" fill="rgb(225,162,48)" fg:x="1020" fg:w="1"/><text x="81.7196%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.4696%" y="597" width="0.0799%" height="15" fill="rgb(246,16,25)" fg:x="1020" fg:w="1"/><text x="81.7196%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4696%" y="581" width="0.0799%" height="15" fill="rgb(220,150,2)" fg:x="1020" fg:w="1"/><text x="81.7196%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4696%" y="565" width="0.0799%" height="15" fill="rgb(237,113,11)" fg:x="1020" fg:w="1"/><text x="81.7196%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.4696%" y="549" width="0.0799%" height="15" fill="rgb(236,70,20)" fg:x="1020" fg:w="1"/><text x="81.7196%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="81.0703%" y="693" width="0.5591%" height="15" fill="rgb(234,94,7)" fg:x="1015" fg:w="7"/><text x="81.3203%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="81.0703%" y="677" width="0.5591%" height="15" fill="rgb(250,221,0)" fg:x="1015" fg:w="7"/><text x="81.3203%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="81.2300%" y="661" width="0.3994%" height="15" fill="rgb(245,149,46)" fg:x="1017" fg:w="5"/><text x="81.4800%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="81.4696%" y="645" width="0.1597%" height="15" fill="rgb(215,37,27)" fg:x="1020" fg:w="2"/><text x="81.7196%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="81.4696%" y="629" width="0.1597%" height="15" fill="rgb(232,65,3)" fg:x="1020" fg:w="2"/><text x="81.7196%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="81.5495%" y="613" width="0.0799%" height="15" fill="rgb(214,2,16)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="81.5495%" y="597" width="0.0799%" height="15" fill="rgb(227,131,50)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.5495%" y="581" width="0.0799%" height="15" fill="rgb(247,131,45)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5495%" y="565" width="0.0799%" height="15" fill="rgb(215,97,47)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.5495%" y="549" width="0.0799%" height="15" fill="rgb(233,143,12)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5495%" y="533" width="0.0799%" height="15" fill="rgb(222,57,17)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.5495%" y="517" width="0.0799%" height="15" fill="rgb(214,119,38)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5495%" y="501" width="0.0799%" height="15" fill="rgb(217,28,47)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5495%" y="485" width="0.0799%" height="15" fill="rgb(231,14,52)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5495%" y="469" width="0.0799%" height="15" fill="rgb(220,158,18)" fg:x="1021" fg:w="1"/><text x="81.7995%" y="479.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.6294%" y="661" width="0.0799%" height="15" fill="rgb(222,143,46)" fg:x="1022" fg:w="1"/><text x="81.8794%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6294%" y="645" width="0.0799%" height="15" fill="rgb(227,165,5)" fg:x="1022" fg:w="1"/><text x="81.8794%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.6294%" y="629" width="0.0799%" height="15" fill="rgb(216,222,49)" fg:x="1022" fg:w="1"/><text x="81.8794%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.6294%" y="613" width="0.0799%" height="15" fill="rgb(238,73,39)" fg:x="1022" fg:w="1"/><text x="81.8794%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="81.6294%" y="597" width="0.0799%" height="15" fill="rgb(252,115,9)" fg:x="1022" fg:w="1"/><text x="81.8794%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.6294%" y="581" width="0.0799%" height="15" fill="rgb(238,202,4)" fg:x="1022" fg:w="1"/><text x="81.8794%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.6294%" y="565" width="0.0799%" height="15" fill="rgb(252,153,44)" fg:x="1022" fg:w="1"/><text x="81.8794%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.7093%" y="645" width="0.0799%" height="15" fill="rgb(235,128,27)" fg:x="1023" fg:w="1"/><text x="81.9593%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.7093%" y="629" width="0.0799%" height="15" fill="rgb(221,121,47)" fg:x="1023" fg:w="1"/><text x="81.9593%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.7093%" y="613" width="0.0799%" height="15" fill="rgb(247,211,47)" fg:x="1023" fg:w="1"/><text x="81.9593%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.7093%" y="597" width="0.0799%" height="15" fill="rgb(252,47,49)" fg:x="1023" fg:w="1"/><text x="81.9593%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.7093%" y="581" width="0.0799%" height="15" fill="rgb(219,119,53)" fg:x="1023" fg:w="1"/><text x="81.9593%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="81.7093%" y="565" width="0.0799%" height="15" fill="rgb(243,165,53)" fg:x="1023" fg:w="1"/><text x="81.9593%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="81.6294%" y="693" width="0.2396%" height="15" fill="rgb(230,12,35)" fg:x="1022" fg:w="3"/><text x="81.8794%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="81.6294%" y="677" width="0.2396%" height="15" fill="rgb(239,57,49)" fg:x="1022" fg:w="3"/><text x="81.8794%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="81.7093%" y="661" width="0.1597%" height="15" fill="rgb(231,154,7)" fg:x="1023" fg:w="2"/><text x="81.9593%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.7891%" y="645" width="0.0799%" height="15" fill="rgb(248,81,34)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.7891%" y="629" width="0.0799%" height="15" fill="rgb(247,9,5)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.7891%" y="613" width="0.0799%" height="15" fill="rgb(228,172,27)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.7891%" y="597" width="0.0799%" height="15" fill="rgb(230,57,44)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.7891%" y="581" width="0.0799%" height="15" fill="rgb(249,35,22)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.7891%" y="565" width="0.0799%" height="15" fill="rgb(250,137,27)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.7891%" y="549" width="0.0799%" height="15" fill="rgb(251,57,31)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.7891%" y="533" width="0.0799%" height="15" fill="rgb(238,60,0)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.7891%" y="517" width="0.0799%" height="15" fill="rgb(242,185,39)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.7891%" y="501" width="0.0799%" height="15" fill="rgb(240,63,43)" fg:x="1024" fg:w="1"/><text x="82.0391%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="81.8690%" y="645" width="0.1597%" height="15" fill="rgb(236,155,6)" fg:x="1025" fg:w="2"/><text x="82.1190%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.9489%" y="629" width="0.0799%" height="15" fill="rgb(215,11,29)" fg:x="1026" fg:w="1"/><text x="82.1989%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.9489%" y="613" width="0.0799%" height="15" fill="rgb(228,180,48)" fg:x="1026" fg:w="1"/><text x="82.1989%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (3 samples, 0.24%)</title><rect x="81.8690%" y="677" width="0.2396%" height="15" fill="rgb(241,102,12)" fg:x="1025" fg:w="3"/><text x="82.1190%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (3 samples, 0.24%)</title><rect x="81.8690%" y="661" width="0.2396%" height="15" fill="rgb(246,213,4)" fg:x="1025" fg:w="3"/><text x="82.1190%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="82.0288%" y="645" width="0.0799%" height="15" fill="rgb(218,134,35)" fg:x="1027" fg:w="1"/><text x="82.2788%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="82.0288%" y="629" width="0.0799%" height="15" fill="rgb(251,117,35)" fg:x="1027" fg:w="1"/><text x="82.2788%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.0288%" y="613" width="0.0799%" height="15" fill="rgb(206,156,45)" fg:x="1027" fg:w="1"/><text x="82.2788%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.0288%" y="597" width="0.0799%" height="15" fill="rgb(218,52,27)" fg:x="1027" fg:w="1"/><text x="82.2788%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="82.0288%" y="581" width="0.0799%" height="15" fill="rgb(238,83,36)" fg:x="1027" fg:w="1"/><text x="82.2788%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="82.1086%" y="677" width="0.0799%" height="15" fill="rgb(218,53,43)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="82.1086%" y="661" width="0.0799%" height="15" fill="rgb(239,54,39)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="82.1086%" y="645" width="0.0799%" height="15" fill="rgb(212,198,13)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="82.1086%" y="629" width="0.0799%" height="15" fill="rgb(234,54,46)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="82.1086%" y="613" width="0.0799%" height="15" fill="rgb(217,120,7)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="82.1086%" y="597" width="0.0799%" height="15" fill="rgb(246,39,15)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.1086%" y="581" width="0.0799%" height="15" fill="rgb(242,143,31)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.1086%" y="565" width="0.0799%" height="15" fill="rgb(252,60,24)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.1086%" y="549" width="0.0799%" height="15" fill="rgb(249,220,7)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.1086%" y="533" width="0.0799%" height="15" fill="rgb(236,67,13)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.1086%" y="517" width="0.0799%" height="15" fill="rgb(210,62,39)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.1086%" y="501" width="0.0799%" height="15" fill="rgb(219,122,53)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.1086%" y="485" width="0.0799%" height="15" fill="rgb(218,87,25)" fg:x="1028" fg:w="1"/><text x="82.3586%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.3482%" y="549" width="0.0799%" height="15" fill="rgb(234,179,48)" fg:x="1031" fg:w="1"/><text x="82.5982%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.3482%" y="533" width="0.0799%" height="15" fill="rgb(248,90,0)" fg:x="1031" fg:w="1"/><text x="82.5982%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.3482%" y="517" width="0.0799%" height="15" fill="rgb(207,228,37)" fg:x="1031" fg:w="1"/><text x="82.5982%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.3482%" y="501" width="0.0799%" height="15" fill="rgb(235,214,15)" fg:x="1031" fg:w="1"/><text x="82.5982%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.4281%" y="533" width="0.0799%" height="15" fill="rgb(210,144,39)" fg:x="1032" fg:w="1"/><text x="82.6781%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.4281%" y="517" width="0.0799%" height="15" fill="rgb(222,67,41)" fg:x="1032" fg:w="1"/><text x="82.6781%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.4281%" y="501" width="0.0799%" height="15" fill="rgb(205,35,37)" fg:x="1032" fg:w="1"/><text x="82.6781%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.4281%" y="485" width="0.0799%" height="15" fill="rgb(216,125,40)" fg:x="1032" fg:w="1"/><text x="82.6781%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.5080%" y="533" width="0.1597%" height="15" fill="rgb(228,227,20)" fg:x="1033" fg:w="2"/><text x="82.7580%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.5080%" y="517" width="0.1597%" height="15" fill="rgb(242,173,45)" fg:x="1033" fg:w="2"/><text x="82.7580%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="82.5080%" y="501" width="0.1597%" height="15" fill="rgb(215,79,24)" fg:x="1033" fg:w="2"/><text x="82.7580%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="82.5080%" y="485" width="0.1597%" height="15" fill="rgb(238,164,38)" fg:x="1033" fg:w="2"/><text x="82.7580%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.6677%" y="517" width="0.0799%" height="15" fill="rgb(245,196,38)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.6677%" y="501" width="0.0799%" height="15" fill="rgb(231,217,29)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.6677%" y="485" width="0.0799%" height="15" fill="rgb(245,6,4)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.6677%" y="469" width="0.0799%" height="15" fill="rgb(214,76,49)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.6677%" y="453" width="0.0799%" height="15" fill="rgb(205,96,12)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.6677%" y="437" width="0.0799%" height="15" fill="rgb(243,131,4)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.6677%" y="421" width="0.0799%" height="15" fill="rgb(214,114,4)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.6677%" y="405" width="0.0799%" height="15" fill="rgb(234,215,15)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.6677%" y="389" width="0.0799%" height="15" fill="rgb(250,216,45)" fg:x="1035" fg:w="1"/><text x="82.9177%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.7476%" y="501" width="0.1597%" height="15" fill="rgb(236,128,4)" fg:x="1036" fg:w="2"/><text x="82.9976%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.7476%" y="485" width="0.1597%" height="15" fill="rgb(234,50,33)" fg:x="1036" fg:w="2"/><text x="82.9976%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.8275%" y="469" width="0.0799%" height="15" fill="rgb(253,131,37)" fg:x="1037" fg:w="1"/><text x="83.0775%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.8275%" y="453" width="0.0799%" height="15" fill="rgb(218,55,27)" fg:x="1037" fg:w="1"/><text x="83.0775%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.8275%" y="437" width="0.0799%" height="15" fill="rgb(241,220,28)" fg:x="1037" fg:w="1"/><text x="83.0775%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.8275%" y="421" width="0.0799%" height="15" fill="rgb(241,90,48)" fg:x="1037" fg:w="1"/><text x="83.0775%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.8275%" y="405" width="0.0799%" height="15" fill="rgb(216,43,37)" fg:x="1037" fg:w="1"/><text x="83.0775%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.9073%" y="485" width="0.0799%" height="15" fill="rgb(207,173,9)" fg:x="1038" fg:w="1"/><text x="83.1573%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="82.2684%" y="565" width="0.7987%" height="15" fill="rgb(240,126,30)" fg:x="1030" fg:w="10"/><text x="82.5184%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="82.4281%" y="549" width="0.6390%" height="15" fill="rgb(228,178,53)" fg:x="1032" fg:w="8"/><text x="82.6781%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="82.6677%" y="533" width="0.3994%" height="15" fill="rgb(217,33,4)" fg:x="1035" fg:w="5"/><text x="82.9177%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="82.7476%" y="517" width="0.3195%" height="15" fill="rgb(206,124,34)" fg:x="1036" fg:w="4"/><text x="82.9976%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.9073%" y="501" width="0.1597%" height="15" fill="rgb(208,122,53)" fg:x="1038" fg:w="2"/><text x="83.1573%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.9872%" y="485" width="0.0799%" height="15" fill="rgb(215,202,26)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.9872%" y="469" width="0.0799%" height="15" fill="rgb(232,198,31)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.9872%" y="453" width="0.0799%" height="15" fill="rgb(222,23,35)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.9872%" y="437" width="0.0799%" height="15" fill="rgb(242,27,53)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.9872%" y="421" width="0.0799%" height="15" fill="rgb(210,216,42)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.9872%" y="405" width="0.0799%" height="15" fill="rgb(234,39,38)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.9872%" y="389" width="0.0799%" height="15" fill="rgb(235,126,54)" fg:x="1039" fg:w="1"/><text x="83.2372%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.0671%" y="517" width="0.0799%" height="15" fill="rgb(235,150,33)" fg:x="1040" fg:w="1"/><text x="83.3171%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1470%" y="485" width="0.0799%" height="15" fill="rgb(249,49,53)" fg:x="1041" fg:w="1"/><text x="83.3970%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="83.1470%" y="517" width="0.1597%" height="15" fill="rgb(238,60,50)" fg:x="1041" fg:w="2"/><text x="83.3970%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="83.1470%" y="501" width="0.1597%" height="15" fill="rgb(210,5,2)" fg:x="1041" fg:w="2"/><text x="83.3970%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2268%" y="485" width="0.0799%" height="15" fill="rgb(214,207,24)" fg:x="1042" fg:w="1"/><text x="83.4768%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.3067%" y="421" width="0.0799%" height="15" fill="rgb(228,173,2)" fg:x="1043" fg:w="1"/><text x="83.5567%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3067%" y="405" width="0.0799%" height="15" fill="rgb(244,26,8)" fg:x="1043" fg:w="1"/><text x="83.5567%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="83.3067%" y="469" width="0.2396%" height="15" fill="rgb(249,153,35)" fg:x="1043" fg:w="3"/><text x="83.5567%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="83.3067%" y="453" width="0.2396%" height="15" fill="rgb(221,215,40)" fg:x="1043" fg:w="3"/><text x="83.5567%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="83.3067%" y="437" width="0.2396%" height="15" fill="rgb(238,106,35)" fg:x="1043" fg:w="3"/><text x="83.5567%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="83.3866%" y="421" width="0.1597%" height="15" fill="rgb(207,195,21)" fg:x="1044" fg:w="2"/><text x="83.6366%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.4665%" y="405" width="0.0799%" height="15" fill="rgb(205,43,29)" fg:x="1045" fg:w="1"/><text x="83.7165%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.4665%" y="389" width="0.0799%" height="15" fill="rgb(236,35,21)" fg:x="1045" fg:w="1"/><text x="83.7165%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.4665%" y="373" width="0.0799%" height="15" fill="rgb(244,74,8)" fg:x="1045" fg:w="1"/><text x="83.7165%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4665%" y="357" width="0.0799%" height="15" fill="rgb(241,229,7)" fg:x="1045" fg:w="1"/><text x="83.7165%" y="367.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.44%)</title><rect x="82.1885%" y="677" width="1.4377%" height="15" fill="rgb(212,223,25)" fg:x="1029" fg:w="18"/><text x="82.4385%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (18 samples, 1.44%)</title><rect x="82.1885%" y="661" width="1.4377%" height="15" fill="rgb(234,58,53)" fg:x="1029" fg:w="18"/><text x="82.4385%" y="671.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.44%)</title><rect x="82.1885%" y="645" width="1.4377%" height="15" fill="rgb(244,36,1)" fg:x="1029" fg:w="18"/><text x="82.4385%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.44%)</title><rect x="82.1885%" y="629" width="1.4377%" height="15" fill="rgb(222,40,54)" fg:x="1029" fg:w="18"/><text x="82.4385%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.44%)</title><rect x="82.1885%" y="613" width="1.4377%" height="15" fill="rgb(210,207,39)" fg:x="1029" fg:w="18"/><text x="82.4385%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.44%)</title><rect x="82.1885%" y="597" width="1.4377%" height="15" fill="rgb(234,52,14)" fg:x="1029" fg:w="18"/><text x="82.4385%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.44%)</title><rect x="82.1885%" y="581" width="1.4377%" height="15" fill="rgb(239,108,46)" fg:x="1029" fg:w="18"/><text x="82.4385%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="83.0671%" y="565" width="0.5591%" height="15" fill="rgb(252,223,5)" fg:x="1040" fg:w="7"/><text x="83.3171%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="83.0671%" y="549" width="0.5591%" height="15" fill="rgb(227,181,11)" fg:x="1040" fg:w="7"/><text x="83.3171%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="83.0671%" y="533" width="0.5591%" height="15" fill="rgb(248,126,40)" fg:x="1040" fg:w="7"/><text x="83.3171%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="83.3067%" y="517" width="0.3195%" height="15" fill="rgb(243,1,18)" fg:x="1043" fg:w="4"/><text x="83.5567%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="83.3067%" y="501" width="0.3195%" height="15" fill="rgb(214,145,23)" fg:x="1043" fg:w="4"/><text x="83.5567%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="83.3067%" y="485" width="0.3195%" height="15" fill="rgb(241,218,11)" fg:x="1043" fg:w="4"/><text x="83.5567%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.5463%" y="469" width="0.0799%" height="15" fill="rgb(214,219,24)" fg:x="1046" fg:w="1"/><text x="83.7963%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.5463%" y="453" width="0.0799%" height="15" fill="rgb(235,32,7)" fg:x="1046" fg:w="1"/><text x="83.7963%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6262%" y="629" width="0.0799%" height="15" fill="rgb(227,121,28)" fg:x="1047" fg:w="1"/><text x="83.8762%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.7061%" y="629" width="0.0799%" height="15" fill="rgb(216,129,49)" fg:x="1048" fg:w="1"/><text x="83.9561%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (3 samples, 0.24%)</title><rect x="83.6262%" y="645" width="0.2396%" height="15" fill="rgb(207,194,50)" fg:x="1047" fg:w="3"/><text x="83.8762%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="83.7859%" y="629" width="0.0799%" height="15" fill="rgb(207,4,18)" fg:x="1049" fg:w="1"/><text x="84.0359%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (4 samples, 0.32%)</title><rect x="83.6262%" y="677" width="0.3195%" height="15" fill="rgb(213,50,30)" fg:x="1047" fg:w="4"/><text x="83.8762%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (4 samples, 0.32%)</title><rect x="83.6262%" y="661" width="0.3195%" height="15" fill="rgb(208,77,22)" fg:x="1047" fg:w="4"/><text x="83.8762%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="83.8658%" y="645" width="0.0799%" height="15" fill="rgb(244,204,34)" fg:x="1050" fg:w="1"/><text x="84.1158%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.8658%" y="629" width="0.0799%" height="15" fill="rgb(230,20,17)" fg:x="1050" fg:w="1"/><text x="84.1158%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="83.8658%" y="613" width="0.0799%" height="15" fill="rgb(237,83,15)" fg:x="1050" fg:w="1"/><text x="84.1158%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="83.8658%" y="597" width="0.0799%" height="15" fill="rgb(221,109,25)" fg:x="1050" fg:w="1"/><text x="84.1158%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8658%" y="581" width="0.0799%" height="15" fill="rgb(205,194,52)" fg:x="1050" fg:w="1"/><text x="84.1158%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="83.9457%" y="677" width="0.0799%" height="15" fill="rgb(244,173,54)" fg:x="1051" fg:w="1"/><text x="84.1957%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="83.9457%" y="661" width="0.0799%" height="15" fill="rgb(227,181,18)" fg:x="1051" fg:w="1"/><text x="84.1957%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="84.0256%" y="645" width="0.1597%" height="15" fill="rgb(238,36,30)" fg:x="1052" fg:w="2"/><text x="84.2756%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.1054%" y="629" width="0.0799%" height="15" fill="rgb(254,85,0)" fg:x="1053" fg:w="1"/><text x="84.3554%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.1054%" y="613" width="0.0799%" height="15" fill="rgb(247,63,33)" fg:x="1053" fg:w="1"/><text x="84.3554%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.1054%" y="597" width="0.0799%" height="15" fill="rgb(220,7,54)" fg:x="1053" fg:w="1"/><text x="84.3554%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.1054%" y="581" width="0.0799%" height="15" fill="rgb(238,227,21)" fg:x="1053" fg:w="1"/><text x="84.3554%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="84.1853%" y="645" width="0.1597%" height="15" fill="rgb(237,29,31)" fg:x="1054" fg:w="2"/><text x="84.4353%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="84.1853%" y="629" width="0.1597%" height="15" fill="rgb(211,21,50)" fg:x="1054" fg:w="2"/><text x="84.4353%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="84.2652%" y="613" width="0.0799%" height="15" fill="rgb(239,119,2)" fg:x="1055" fg:w="1"/><text x="84.5152%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="84.3450%" y="597" width="0.0799%" height="15" fill="rgb(250,2,39)" fg:x="1056" fg:w="1"/><text x="84.5950%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="84.3450%" y="581" width="0.0799%" height="15" fill="rgb(244,46,53)" fg:x="1056" fg:w="1"/><text x="84.5950%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="84.3450%" y="565" width="0.0799%" height="15" fill="rgb(209,21,19)" fg:x="1056" fg:w="1"/><text x="84.5950%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="84.0256%" y="677" width="0.4792%" height="15" fill="rgb(236,145,4)" fg:x="1052" fg:w="6"/><text x="84.2756%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="84.0256%" y="661" width="0.4792%" height="15" fill="rgb(220,133,36)" fg:x="1052" fg:w="6"/><text x="84.2756%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="84.3450%" y="645" width="0.1597%" height="15" fill="rgb(244,18,3)" fg:x="1056" fg:w="2"/><text x="84.5950%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="84.3450%" y="629" width="0.1597%" height="15" fill="rgb(232,171,48)" fg:x="1056" fg:w="2"/><text x="84.5950%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="84.3450%" y="613" width="0.1597%" height="15" fill="rgb(223,223,53)" fg:x="1056" fg:w="2"/><text x="84.5950%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="84.4249%" y="597" width="0.0799%" height="15" fill="rgb(246,92,13)" fg:x="1057" fg:w="1"/><text x="84.6749%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="84.5048%" y="677" width="0.0799%" height="15" fill="rgb(229,171,10)" fg:x="1058" fg:w="1"/><text x="84.7548%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="84.5048%" y="661" width="0.0799%" height="15" fill="rgb(213,131,26)" fg:x="1058" fg:w="1"/><text x="84.7548%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="84.5048%" y="645" width="0.0799%" height="15" fill="rgb(242,87,54)" fg:x="1058" fg:w="1"/><text x="84.7548%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="84.5048%" y="629" width="0.0799%" height="15" fill="rgb(237,21,35)" fg:x="1058" fg:w="1"/><text x="84.7548%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.5048%" y="613" width="0.0799%" height="15" fill="rgb(253,13,47)" fg:x="1058" fg:w="1"/><text x="84.7548%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="84.5048%" y="597" width="0.0799%" height="15" fill="rgb(215,122,49)" fg:x="1058" fg:w="1"/><text x="84.7548%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="84.5048%" y="581" width="0.0799%" height="15" fill="rgb(209,179,30)" fg:x="1058" fg:w="1"/><text x="84.7548%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.5847%" y="597" width="0.0799%" height="15" fill="rgb(235,100,24)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5847%" y="581" width="0.0799%" height="15" fill="rgb(209,67,24)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5847%" y="565" width="0.0799%" height="15" fill="rgb(206,74,32)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.5847%" y="549" width="0.0799%" height="15" fill="rgb(212,45,25)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.5847%" y="533" width="0.0799%" height="15" fill="rgb(239,26,3)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.5847%" y="517" width="0.0799%" height="15" fill="rgb(218,36,15)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.5847%" y="501" width="0.0799%" height="15" fill="rgb(206,108,24)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.5847%" y="485" width="0.0799%" height="15" fill="rgb(234,204,42)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.5847%" y="469" width="0.0799%" height="15" fill="rgb(229,2,11)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.5847%" y="453" width="0.0799%" height="15" fill="rgb(221,20,48)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.5847%" y="437" width="0.0799%" height="15" fill="rgb(244,164,10)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.5847%" y="421" width="0.0799%" height="15" fill="rgb(243,229,2)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.5847%" y="405" width="0.0799%" height="15" fill="rgb(232,131,37)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.5847%" y="389" width="0.0799%" height="15" fill="rgb(217,156,11)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.5847%" y="373" width="0.0799%" height="15" fill="rgb(239,99,48)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.5847%" y="357" width="0.0799%" height="15" fill="rgb(231,209,9)" fg:x="1059" fg:w="1"/><text x="84.8347%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="84.5847%" y="613" width="0.1597%" height="15" fill="rgb(254,97,27)" fg:x="1059" fg:w="2"/><text x="84.8347%" y="623.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="84.6645%" y="597" width="0.0799%" height="15" fill="rgb(223,151,38)" fg:x="1060" fg:w="1"/><text x="84.9145%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="84.6645%" y="581" width="0.0799%" height="15" fill="rgb(219,206,35)" fg:x="1060" fg:w="1"/><text x="84.9145%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="84.5847%" y="677" width="0.2396%" height="15" fill="rgb(216,130,31)" fg:x="1059" fg:w="3"/><text x="84.8347%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="84.5847%" y="661" width="0.2396%" height="15" fill="rgb(251,97,34)" fg:x="1059" fg:w="3"/><text x="84.8347%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="84.5847%" y="645" width="0.2396%" height="15" fill="rgb(246,159,47)" fg:x="1059" fg:w="3"/><text x="84.8347%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="84.5847%" y="629" width="0.2396%" height="15" fill="rgb(232,87,10)" fg:x="1059" fg:w="3"/><text x="84.8347%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="84.7444%" y="613" width="0.0799%" height="15" fill="rgb(249,1,37)" fg:x="1061" fg:w="1"/><text x="84.9944%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.7444%" y="597" width="0.0799%" height="15" fill="rgb(239,135,14)" fg:x="1061" fg:w="1"/><text x="84.9944%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.7444%" y="581" width="0.0799%" height="15" fill="rgb(253,116,46)" fg:x="1061" fg:w="1"/><text x="84.9944%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.7444%" y="565" width="0.0799%" height="15" fill="rgb(222,217,37)" fg:x="1061" fg:w="1"/><text x="84.9944%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.7444%" y="549" width="0.0799%" height="15" fill="rgb(252,96,8)" fg:x="1061" fg:w="1"/><text x="84.9944%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.7444%" y="533" width="0.0799%" height="15" fill="rgb(254,103,41)" fg:x="1061" fg:w="1"/><text x="84.9944%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="84.8243%" y="677" width="0.0799%" height="15" fill="rgb(218,213,19)" fg:x="1062" fg:w="1"/><text x="85.0743%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="84.8243%" y="661" width="0.0799%" height="15" fill="rgb(253,95,21)" fg:x="1062" fg:w="1"/><text x="85.0743%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="84.8243%" y="645" width="0.0799%" height="15" fill="rgb(229,26,28)" fg:x="1062" fg:w="1"/><text x="85.0743%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.8243%" y="629" width="0.0799%" height="15" fill="rgb(230,129,16)" fg:x="1062" fg:w="1"/><text x="85.0743%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="84.9042%" y="661" width="0.0799%" height="15" fill="rgb(236,126,17)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="84.9042%" y="645" width="0.0799%" height="15" fill="rgb(209,33,33)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="84.9042%" y="629" width="0.0799%" height="15" fill="rgb(227,85,29)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.9042%" y="613" width="0.0799%" height="15" fill="rgb(241,53,46)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.9042%" y="597" width="0.0799%" height="15" fill="rgb(228,167,53)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.9042%" y="581" width="0.0799%" height="15" fill="rgb(238,195,45)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.9042%" y="565" width="0.0799%" height="15" fill="rgb(252,124,45)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.9042%" y="549" width="0.0799%" height="15" fill="rgb(251,38,35)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="84.9042%" y="533" width="0.0799%" height="15" fill="rgb(227,33,2)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="84.9042%" y="517" width="0.0799%" height="15" fill="rgb(223,157,46)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="84.9042%" y="501" width="0.0799%" height="15" fill="rgb(222,78,41)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="84.9042%" y="485" width="0.0799%" height="15" fill="rgb(248,176,11)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.9042%" y="469" width="0.0799%" height="15" fill="rgb(241,221,18)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="84.9042%" y="453" width="0.0799%" height="15" fill="rgb(218,85,22)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="84.9042%" y="437" width="0.0799%" height="15" fill="rgb(222,223,7)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="84.9042%" y="421" width="0.0799%" height="15" fill="rgb(254,59,39)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="84.9042%" y="405" width="0.0799%" height="15" fill="rgb(247,100,27)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="84.9042%" y="389" width="0.0799%" height="15" fill="rgb(237,207,10)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9042%" y="373" width="0.0799%" height="15" fill="rgb(220,121,28)" fg:x="1063" fg:w="1"/><text x="85.1542%" y="383.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="84.9840%" y="661" width="0.0799%" height="15" fill="rgb(213,223,20)" fg:x="1064" fg:w="1"/><text x="85.2340%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="84.9840%" y="645" width="0.0799%" height="15" fill="rgb(205,121,27)" fg:x="1064" fg:w="1"/><text x="85.2340%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="84.9840%" y="629" width="0.0799%" height="15" fill="rgb(253,24,53)" fg:x="1064" fg:w="1"/><text x="85.2340%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="84.9840%" y="613" width="0.0799%" height="15" fill="rgb(224,224,47)" fg:x="1064" fg:w="1"/><text x="85.2340%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.0639%" y="645" width="0.0799%" height="15" fill="rgb(250,125,36)" fg:x="1065" fg:w="1"/><text x="85.3139%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.0639%" y="629" width="0.0799%" height="15" fill="rgb(240,144,38)" fg:x="1065" fg:w="1"/><text x="85.3139%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.0639%" y="613" width="0.0799%" height="15" fill="rgb(250,15,50)" fg:x="1065" fg:w="1"/><text x="85.3139%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.0639%" y="597" width="0.0799%" height="15" fill="rgb(210,24,26)" fg:x="1065" fg:w="1"/><text x="85.3139%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.0639%" y="581" width="0.0799%" height="15" fill="rgb(234,53,53)" fg:x="1065" fg:w="1"/><text x="85.3139%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.0639%" y="565" width="0.0799%" height="15" fill="rgb(208,108,28)" fg:x="1065" fg:w="1"/><text x="85.3139%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="85.1438%" y="613" width="0.0799%" height="15" fill="rgb(227,143,7)" fg:x="1066" fg:w="1"/><text x="85.3938%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (43 samples, 3.43%)</title><rect x="81.8690%" y="693" width="3.4345%" height="15" fill="rgb(238,189,38)" fg:x="1025" fg:w="43"/><text x="82.1190%" y="703.50">plu..</text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="84.9042%" y="677" width="0.3994%" height="15" fill="rgb(222,69,15)" fg:x="1063" fg:w="5"/><text x="85.1542%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="85.0639%" y="661" width="0.2396%" height="15" fill="rgb(213,169,7)" fg:x="1065" fg:w="3"/><text x="85.3139%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="85.1438%" y="645" width="0.1597%" height="15" fill="rgb(251,219,4)" fg:x="1066" fg:w="2"/><text x="85.3938%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="85.1438%" y="629" width="0.1597%" height="15" fill="rgb(241,55,40)" fg:x="1066" fg:w="2"/><text x="85.3938%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="85.2236%" y="613" width="0.0799%" height="15" fill="rgb(243,57,30)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="85.2236%" y="597" width="0.0799%" height="15" fill="rgb(234,50,30)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.2236%" y="581" width="0.0799%" height="15" fill="rgb(239,23,42)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2236%" y="565" width="0.0799%" height="15" fill="rgb(217,38,19)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.2236%" y="549" width="0.0799%" height="15" fill="rgb(215,179,16)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2236%" y="533" width="0.0799%" height="15" fill="rgb(254,21,37)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.2236%" y="517" width="0.0799%" height="15" fill="rgb(219,207,48)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2236%" y="501" width="0.0799%" height="15" fill="rgb(227,225,41)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2236%" y="485" width="0.0799%" height="15" fill="rgb(223,130,1)" fg:x="1067" fg:w="1"/><text x="85.4736%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="85.3035%" y="693" width="0.0799%" height="15" fill="rgb(249,54,42)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="85.3035%" y="677" width="0.0799%" height="15" fill="rgb(248,69,25)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="85.3035%" y="661" width="0.0799%" height="15" fill="rgb(234,21,32)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="85.3035%" y="645" width="0.0799%" height="15" fill="rgb(252,136,6)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="85.3035%" y="629" width="0.0799%" height="15" fill="rgb(245,87,12)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="85.3035%" y="613" width="0.0799%" height="15" fill="rgb(208,12,15)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="85.3035%" y="597" width="0.0799%" height="15" fill="rgb(250,98,2)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="85.3035%" y="581" width="0.0799%" height="15" fill="rgb(205,213,15)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="591.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="85.3035%" y="565" width="0.0799%" height="15" fill="rgb(248,192,44)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="575.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="85.3035%" y="549" width="0.0799%" height="15" fill="rgb(221,89,17)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.3035%" y="533" width="0.0799%" height="15" fill="rgb(209,55,3)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.3035%" y="517" width="0.0799%" height="15" fill="rgb(247,23,45)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="85.3035%" y="501" width="0.0799%" height="15" fill="rgb(235,152,23)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="85.3035%" y="485" width="0.0799%" height="15" fill="rgb(244,63,13)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.3035%" y="469" width="0.0799%" height="15" fill="rgb(227,30,37)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="85.3035%" y="453" width="0.0799%" height="15" fill="rgb(224,49,42)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="85.3035%" y="437" width="0.0799%" height="15" fill="rgb(218,129,5)" fg:x="1068" fg:w="1"/><text x="85.5535%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.3834%" y="661" width="0.0799%" height="15" fill="rgb(240,199,54)" fg:x="1069" fg:w="1"/><text x="85.6334%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.3834%" y="645" width="0.0799%" height="15" fill="rgb(234,31,13)" fg:x="1069" fg:w="1"/><text x="85.6334%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="85.3834%" y="629" width="0.0799%" height="15" fill="rgb(219,73,54)" fg:x="1069" fg:w="1"/><text x="85.6334%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.3834%" y="613" width="0.0799%" height="15" fill="rgb(251,162,10)" fg:x="1069" fg:w="1"/><text x="85.6334%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="85.3834%" y="597" width="0.0799%" height="15" fill="rgb(240,138,47)" fg:x="1069" fg:w="1"/><text x="85.6334%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.3834%" y="581" width="0.0799%" height="15" fill="rgb(216,138,26)" fg:x="1069" fg:w="1"/><text x="85.6334%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="85.4633%" y="661" width="0.0799%" height="15" fill="rgb(243,17,35)" fg:x="1070" fg:w="1"/><text x="85.7133%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="85.4633%" y="645" width="0.0799%" height="15" fill="rgb(241,60,18)" fg:x="1070" fg:w="1"/><text x="85.7133%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="85.4633%" y="629" width="0.0799%" height="15" fill="rgb(234,2,44)" fg:x="1070" fg:w="1"/><text x="85.7133%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="85.4633%" y="613" width="0.0799%" height="15" fill="rgb(225,225,33)" fg:x="1070" fg:w="1"/><text x="85.7133%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.4633%" y="597" width="0.0799%" height="15" fill="rgb(234,50,31)" fg:x="1070" fg:w="1"/><text x="85.7133%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.4633%" y="581" width="0.0799%" height="15" fill="rgb(249,6,25)" fg:x="1070" fg:w="1"/><text x="85.7133%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="85.5431%" y="645" width="0.0799%" height="15" fill="rgb(241,5,17)" fg:x="1071" fg:w="1"/><text x="85.7931%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="85.5431%" y="629" width="0.0799%" height="15" fill="rgb(207,116,10)" fg:x="1071" fg:w="1"/><text x="85.7931%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.5431%" y="613" width="0.0799%" height="15" fill="rgb(222,128,18)" fg:x="1071" fg:w="1"/><text x="85.7931%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="85.6230%" y="629" width="0.0799%" height="15" fill="rgb(229,109,25)" fg:x="1072" fg:w="1"/><text x="85.8730%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="85.6230%" y="613" width="0.0799%" height="15" fill="rgb(222,102,25)" fg:x="1072" fg:w="1"/><text x="85.8730%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="85.6230%" y="597" width="0.0799%" height="15" fill="rgb(239,211,5)" fg:x="1072" fg:w="1"/><text x="85.8730%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.6230%" y="581" width="0.0799%" height="15" fill="rgb(223,136,26)" fg:x="1072" fg:w="1"/><text x="85.8730%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="85.5431%" y="661" width="0.2396%" height="15" fill="rgb(227,30,15)" fg:x="1071" fg:w="3"/><text x="85.7931%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="85.6230%" y="645" width="0.1597%" height="15" fill="rgb(247,76,4)" fg:x="1072" fg:w="2"/><text x="85.8730%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="85.7029%" y="629" width="0.0799%" height="15" fill="rgb(245,38,48)" fg:x="1073" fg:w="1"/><text x="85.9529%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="85.7029%" y="613" width="0.0799%" height="15" fill="rgb(210,220,14)" fg:x="1073" fg:w="1"/><text x="85.9529%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.7029%" y="597" width="0.0799%" height="15" fill="rgb(224,60,51)" fg:x="1073" fg:w="1"/><text x="85.9529%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="85.7827%" y="629" width="0.0799%" height="15" fill="rgb(212,133,49)" fg:x="1074" fg:w="1"/><text x="86.0327%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="85.3834%" y="693" width="0.5591%" height="15" fill="rgb(231,39,22)" fg:x="1069" fg:w="7"/><text x="85.6334%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="85.3834%" y="677" width="0.5591%" height="15" fill="rgb(236,173,22)" fg:x="1069" fg:w="7"/><text x="85.6334%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (2 samples, 0.16%)</title><rect x="85.7827%" y="661" width="0.1597%" height="15" fill="rgb(210,70,0)" fg:x="1074" fg:w="2"/><text x="86.0327%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="85.7827%" y="645" width="0.1597%" height="15" fill="rgb(215,170,11)" fg:x="1074" fg:w="2"/><text x="86.0327%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="85.8626%" y="629" width="0.0799%" height="15" fill="rgb(220,154,28)" fg:x="1075" fg:w="1"/><text x="86.1126%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="85.8626%" y="613" width="0.0799%" height="15" fill="rgb(240,160,41)" fg:x="1075" fg:w="1"/><text x="86.1126%" y="623.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="85.9425%" y="677" width="0.0799%" height="15" fill="rgb(243,215,41)" fg:x="1076" fg:w="1"/><text x="86.1925%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="85.9425%" y="661" width="0.0799%" height="15" fill="rgb(214,208,31)" fg:x="1076" fg:w="1"/><text x="86.1925%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="86.0224%" y="661" width="0.0799%" height="15" fill="rgb(247,57,22)" fg:x="1077" fg:w="1"/><text x="86.2724%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="86.0224%" y="645" width="0.0799%" height="15" fill="rgb(228,73,52)" fg:x="1077" fg:w="1"/><text x="86.2724%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.0224%" y="629" width="0.0799%" height="15" fill="rgb(252,60,9)" fg:x="1077" fg:w="1"/><text x="86.2724%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.0224%" y="613" width="0.0799%" height="15" fill="rgb(233,9,51)" fg:x="1077" fg:w="1"/><text x="86.2724%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.0224%" y="597" width="0.0799%" height="15" fill="rgb(223,67,14)" fg:x="1077" fg:w="1"/><text x="86.2724%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0224%" y="581" width="0.0799%" height="15" fill="rgb(222,86,2)" fg:x="1077" fg:w="1"/><text x="86.2724%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="86.1821%" y="629" width="0.0799%" height="15" fill="rgb(243,58,54)" fg:x="1079" fg:w="1"/><text x="86.4321%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="86.1821%" y="613" width="0.0799%" height="15" fill="rgb(210,200,39)" fg:x="1079" fg:w="1"/><text x="86.4321%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="86.1821%" y="597" width="0.0799%" height="15" fill="rgb(238,135,9)" fg:x="1079" fg:w="1"/><text x="86.4321%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.1821%" y="581" width="0.0799%" height="15" fill="rgb(232,179,7)" fg:x="1079" fg:w="1"/><text x="86.4321%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.1821%" y="565" width="0.0799%" height="15" fill="rgb(245,65,41)" fg:x="1079" fg:w="1"/><text x="86.4321%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="86.1022%" y="661" width="0.3195%" height="15" fill="rgb(227,43,8)" fg:x="1078" fg:w="4"/><text x="86.3522%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="86.1821%" y="645" width="0.2396%" height="15" fill="rgb(235,91,14)" fg:x="1079" fg:w="3"/><text x="86.4321%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="86.2620%" y="629" width="0.1597%" height="15" fill="rgb(235,219,31)" fg:x="1080" fg:w="2"/><text x="86.5120%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="86.2620%" y="613" width="0.1597%" height="15" fill="rgb(227,121,25)" fg:x="1080" fg:w="2"/><text x="86.5120%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="86.3419%" y="597" width="0.0799%" height="15" fill="rgb(254,129,24)" fg:x="1081" fg:w="1"/><text x="86.5919%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (86 samples, 6.87%)</title><rect x="79.6326%" y="709" width="6.8690%" height="15" fill="rgb(226,144,49)" fg:x="997" fg:w="86"/><text x="79.8826%" y="719.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (7 samples, 0.56%)</title><rect x="85.9425%" y="693" width="0.5591%" height="15" fill="rgb(214,187,32)" fg:x="1076" fg:w="7"/><text x="86.1925%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="86.0224%" y="677" width="0.4792%" height="15" fill="rgb(243,129,46)" fg:x="1077" fg:w="6"/><text x="86.2724%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.4217%" y="661" width="0.0799%" height="15" fill="rgb(221,185,35)" fg:x="1082" fg:w="1"/><text x="86.6717%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.4217%" y="645" width="0.0799%" height="15" fill="rgb(205,0,32)" fg:x="1082" fg:w="1"/><text x="86.6717%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4217%" y="629" width="0.0799%" height="15" fill="rgb(229,179,12)" fg:x="1082" fg:w="1"/><text x="86.6717%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="86.5016%" y="709" width="0.1597%" height="15" fill="rgb(252,107,19)" fg:x="1083" fg:w="2"/><text x="86.7516%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.5815%" y="693" width="0.0799%" height="15" fill="rgb(220,95,27)" fg:x="1084" fg:w="1"/><text x="86.8315%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.5815%" y="677" width="0.0799%" height="15" fill="rgb(240,113,40)" fg:x="1084" fg:w="1"/><text x="86.8315%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="86.6613%" y="709" width="0.0799%" height="15" fill="rgb(208,4,43)" fg:x="1085" fg:w="1"/><text x="86.9113%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="86.6613%" y="693" width="0.0799%" height="15" fill="rgb(247,189,30)" fg:x="1085" fg:w="1"/><text x="86.9113%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="86.6613%" y="677" width="0.0799%" height="15" fill="rgb(231,157,17)" fg:x="1085" fg:w="1"/><text x="86.9113%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="86.6613%" y="661" width="0.0799%" height="15" fill="rgb(224,139,6)" fg:x="1085" fg:w="1"/><text x="86.9113%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="86.6613%" y="645" width="0.0799%" height="15" fill="rgb(223,83,16)" fg:x="1085" fg:w="1"/><text x="86.9113%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.6613%" y="629" width="0.0799%" height="15" fill="rgb(232,211,20)" fg:x="1085" fg:w="1"/><text x="86.9113%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="86.9010%" y="661" width="0.0799%" height="15" fill="rgb(225,203,35)" fg:x="1088" fg:w="1"/><text x="87.1510%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.9010%" y="645" width="0.0799%" height="15" fill="rgb(215,211,44)" fg:x="1088" fg:w="1"/><text x="87.1510%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="87.0607%" y="597" width="0.0799%" height="15" fill="rgb(248,213,26)" fg:x="1090" fg:w="1"/><text x="87.3107%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="87.0607%" y="581" width="0.0799%" height="15" fill="rgb(214,23,52)" fg:x="1090" fg:w="1"/><text x="87.3107%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="87.0607%" y="565" width="0.0799%" height="15" fill="rgb(225,173,50)" fg:x="1090" fg:w="1"/><text x="87.3107%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="87.0607%" y="549" width="0.0799%" height="15" fill="rgb(206,150,22)" fg:x="1090" fg:w="1"/><text x="87.3107%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="87.0607%" y="533" width="0.0799%" height="15" fill="rgb(239,64,23)" fg:x="1090" fg:w="1"/><text x="87.3107%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="87.2204%" y="533" width="0.0799%" height="15" fill="rgb(242,50,38)" fg:x="1092" fg:w="1"/><text x="87.4704%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="87.2204%" y="517" width="0.0799%" height="15" fill="rgb(217,91,15)" fg:x="1092" fg:w="1"/><text x="87.4704%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="87.2204%" y="501" width="0.0799%" height="15" fill="rgb(230,172,6)" fg:x="1092" fg:w="1"/><text x="87.4704%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="87.2204%" y="485" width="0.0799%" height="15" fill="rgb(221,98,26)" fg:x="1092" fg:w="1"/><text x="87.4704%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="87.2204%" y="565" width="0.1597%" height="15" fill="rgb(227,210,45)" fg:x="1092" fg:w="2"/><text x="87.4704%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="87.2204%" y="549" width="0.1597%" height="15" fill="rgb(206,8,30)" fg:x="1092" fg:w="2"/><text x="87.4704%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="87.3003%" y="533" width="0.0799%" height="15" fill="rgb(241,219,17)" fg:x="1093" fg:w="1"/><text x="87.5503%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="87.3003%" y="517" width="0.0799%" height="15" fill="rgb(247,121,29)" fg:x="1093" fg:w="1"/><text x="87.5503%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="87.3802%" y="565" width="0.0799%" height="15" fill="rgb(219,169,49)" fg:x="1094" fg:w="1"/><text x="87.6302%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="87.3802%" y="549" width="0.0799%" height="15" fill="rgb(253,49,49)" fg:x="1094" fg:w="1"/><text x="87.6302%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="87.4601%" y="549" width="0.0799%" height="15" fill="rgb(217,178,3)" fg:x="1095" fg:w="1"/><text x="87.7101%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="87.5399%" y="549" width="0.1597%" height="15" fill="rgb(234,73,37)" fg:x="1096" fg:w="2"/><text x="87.7899%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="87.5399%" y="533" width="0.1597%" height="15" fill="rgb(250,98,22)" fg:x="1096" fg:w="2"/><text x="87.7899%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="87.5399%" y="517" width="0.1597%" height="15" fill="rgb(220,108,37)" fg:x="1096" fg:w="2"/><text x="87.7899%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="87.5399%" y="501" width="0.1597%" height="15" fill="rgb(225,168,10)" fg:x="1096" fg:w="2"/><text x="87.7899%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="87.5399%" y="485" width="0.1597%" height="15" fill="rgb(247,215,21)" fg:x="1096" fg:w="2"/><text x="87.7899%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.5399%" y="469" width="0.1597%" height="15" fill="rgb(253,189,31)" fg:x="1096" fg:w="2"/><text x="87.7899%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="87.5399%" y="453" width="0.1597%" height="15" fill="rgb(241,54,22)" fg:x="1096" fg:w="2"/><text x="87.7899%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="87.4601%" y="565" width="0.3994%" height="15" fill="rgb(211,87,4)" fg:x="1095" fg:w="5"/><text x="87.7101%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="87.6997%" y="549" width="0.1597%" height="15" fill="rgb(245,112,24)" fg:x="1098" fg:w="2"/><text x="87.9497%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="87.6997%" y="533" width="0.1597%" height="15" fill="rgb(235,190,41)" fg:x="1098" fg:w="2"/><text x="87.9497%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="87.6997%" y="517" width="0.1597%" height="15" fill="rgb(214,89,8)" fg:x="1098" fg:w="2"/><text x="87.9497%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="87.7796%" y="501" width="0.0799%" height="15" fill="rgb(249,155,35)" fg:x="1099" fg:w="1"/><text x="88.0296%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.96%)</title><rect x="87.0607%" y="613" width="0.9585%" height="15" fill="rgb(249,88,26)" fg:x="1090" fg:w="12"/><text x="87.3107%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="87.1406%" y="597" width="0.8786%" height="15" fill="rgb(232,56,8)" fg:x="1091" fg:w="11"/><text x="87.3906%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="87.2204%" y="581" width="0.7987%" height="15" fill="rgb(240,95,3)" fg:x="1092" fg:w="10"/><text x="87.4704%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="87.8594%" y="565" width="0.1597%" height="15" fill="rgb(222,44,28)" fg:x="1100" fg:w="2"/><text x="88.1094%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="87.8594%" y="549" width="0.1597%" height="15" fill="rgb(234,16,30)" fg:x="1100" fg:w="2"/><text x="88.1094%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="87.9393%" y="533" width="0.0799%" height="15" fill="rgb(223,26,17)" fg:x="1101" fg:w="1"/><text x="88.1893%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="88.0192%" y="613" width="0.0799%" height="15" fill="rgb(239,187,47)" fg:x="1102" fg:w="1"/><text x="88.2692%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="88.0192%" y="597" width="0.0799%" height="15" fill="rgb(247,102,50)" fg:x="1102" fg:w="1"/><text x="88.2692%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="88.0192%" y="581" width="0.0799%" height="15" fill="rgb(231,216,22)" fg:x="1102" fg:w="1"/><text x="88.2692%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="88.0192%" y="565" width="0.0799%" height="15" fill="rgb(216,201,26)" fg:x="1102" fg:w="1"/><text x="88.2692%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.0192%" y="549" width="0.0799%" height="15" fill="rgb(214,186,23)" fg:x="1102" fg:w="1"/><text x="88.2692%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="88.0990%" y="517" width="0.0799%" height="15" fill="rgb(235,184,4)" fg:x="1103" fg:w="1"/><text x="88.3490%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="88.1789%" y="517" width="0.0799%" height="15" fill="rgb(244,46,17)" fg:x="1104" fg:w="1"/><text x="88.4289%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="88.1789%" y="501" width="0.0799%" height="15" fill="rgb(248,74,46)" fg:x="1104" fg:w="1"/><text x="88.4289%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.1789%" y="485" width="0.0799%" height="15" fill="rgb(243,79,5)" fg:x="1104" fg:w="1"/><text x="88.4289%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="88.0990%" y="581" width="0.2396%" height="15" fill="rgb(213,148,1)" fg:x="1103" fg:w="3"/><text x="88.3490%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="88.0990%" y="565" width="0.2396%" height="15" fill="rgb(221,30,0)" fg:x="1103" fg:w="3"/><text x="88.3490%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="88.0990%" y="549" width="0.2396%" height="15" fill="rgb(207,85,29)" fg:x="1103" fg:w="3"/><text x="88.3490%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="88.0990%" y="533" width="0.2396%" height="15" fill="rgb(239,31,46)" fg:x="1103" fg:w="3"/><text x="88.3490%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="88.2588%" y="517" width="0.0799%" height="15" fill="rgb(219,6,1)" fg:x="1105" fg:w="1"/><text x="88.5088%" y="527.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="88.3387%" y="581" width="0.0799%" height="15" fill="rgb(229,90,29)" fg:x="1106" fg:w="1"/><text x="88.5887%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="88.3387%" y="565" width="0.0799%" height="15" fill="rgb(242,201,42)" fg:x="1106" fg:w="1"/><text x="88.5887%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="88.4185%" y="581" width="0.0799%" height="15" fill="rgb(243,80,54)" fg:x="1107" fg:w="1"/><text x="88.6685%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="88.4185%" y="565" width="0.0799%" height="15" fill="rgb(223,166,15)" fg:x="1107" fg:w="1"/><text x="88.6685%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.4185%" y="549" width="0.0799%" height="15" fill="rgb(238,78,27)" fg:x="1107" fg:w="1"/><text x="88.6685%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="88.4185%" y="533" width="0.0799%" height="15" fill="rgb(235,28,43)" fg:x="1107" fg:w="1"/><text x="88.6685%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="88.0990%" y="597" width="0.4792%" height="15" fill="rgb(240,210,28)" fg:x="1103" fg:w="6"/><text x="88.3490%" y="607.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="88.4984%" y="581" width="0.0799%" height="15" fill="rgb(253,6,46)" fg:x="1108" fg:w="1"/><text x="88.7484%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="88.4984%" y="565" width="0.0799%" height="15" fill="rgb(250,159,47)" fg:x="1108" fg:w="1"/><text x="88.7484%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="88.4984%" y="549" width="0.0799%" height="15" fill="rgb(216,139,2)" fg:x="1108" fg:w="1"/><text x="88.7484%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="88.4984%" y="533" width="0.0799%" height="15" fill="rgb(221,124,44)" fg:x="1108" fg:w="1"/><text x="88.7484%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="88.4984%" y="517" width="0.0799%" height="15" fill="rgb(205,37,22)" fg:x="1108" fg:w="1"/><text x="88.7484%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="88.4984%" y="501" width="0.0799%" height="15" fill="rgb(250,55,8)" fg:x="1108" fg:w="1"/><text x="88.7484%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.5783%" y="565" width="0.0799%" height="15" fill="rgb(215,83,48)" fg:x="1109" fg:w="1"/><text x="88.8283%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.8978%" y="517" width="0.0799%" height="15" fill="rgb(253,2,32)" fg:x="1113" fg:w="1"/><text x="89.1478%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8978%" y="501" width="0.0799%" height="15" fill="rgb(236,67,28)" fg:x="1113" fg:w="1"/><text x="89.1478%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="88.9776%" y="517" width="0.2396%" height="15" fill="rgb(252,55,15)" fg:x="1114" fg:w="3"/><text x="89.2276%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="88.9776%" y="501" width="0.2396%" height="15" fill="rgb(243,173,17)" fg:x="1114" fg:w="3"/><text x="89.2276%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="88.9776%" y="485" width="0.2396%" height="15" fill="rgb(215,212,13)" fg:x="1114" fg:w="3"/><text x="89.2276%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="89.1374%" y="469" width="0.0799%" height="15" fill="rgb(253,176,6)" fg:x="1116" fg:w="1"/><text x="89.3874%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="89.1374%" y="453" width="0.0799%" height="15" fill="rgb(236,105,26)" fg:x="1116" fg:w="1"/><text x="89.3874%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="89.1374%" y="437" width="0.0799%" height="15" fill="rgb(239,226,32)" fg:x="1116" fg:w="1"/><text x="89.3874%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.2971%" y="485" width="0.0799%" height="15" fill="rgb(236,104,51)" fg:x="1118" fg:w="1"/><text x="89.5471%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="89.2173%" y="501" width="0.3195%" height="15" fill="rgb(220,172,33)" fg:x="1117" fg:w="4"/><text x="89.4673%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="89.3770%" y="485" width="0.1597%" height="15" fill="rgb(224,182,25)" fg:x="1119" fg:w="2"/><text x="89.6270%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="89.3770%" y="469" width="0.1597%" height="15" fill="rgb(236,184,24)" fg:x="1119" fg:w="2"/><text x="89.6270%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="89.3770%" y="453" width="0.1597%" height="15" fill="rgb(241,221,14)" fg:x="1119" fg:w="2"/><text x="89.6270%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.4569%" y="437" width="0.0799%" height="15" fill="rgb(227,146,5)" fg:x="1120" fg:w="1"/><text x="89.7069%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="88.8978%" y="533" width="0.7188%" height="15" fill="rgb(214,15,23)" fg:x="1113" fg:w="9"/><text x="89.1478%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="89.2173%" y="517" width="0.3994%" height="15" fill="rgb(233,157,31)" fg:x="1117" fg:w="5"/><text x="89.4673%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.5367%" y="501" width="0.0799%" height="15" fill="rgb(211,27,52)" fg:x="1121" fg:w="1"/><text x="89.7867%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="88.5783%" y="597" width="1.1182%" height="15" fill="rgb(212,223,15)" fg:x="1109" fg:w="14"/><text x="88.8283%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="88.5783%" y="581" width="1.1182%" height="15" fill="rgb(254,211,0)" fg:x="1109" fg:w="14"/><text x="88.8283%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.04%)</title><rect x="88.6581%" y="565" width="1.0383%" height="15" fill="rgb(205,43,38)" fg:x="1110" fg:w="13"/><text x="88.9081%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.88%)</title><rect x="88.8179%" y="549" width="0.8786%" height="15" fill="rgb(242,206,46)" fg:x="1112" fg:w="11"/><text x="89.0679%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="89.6166%" y="533" width="0.0799%" height="15" fill="rgb(220,221,12)" fg:x="1122" fg:w="1"/><text x="89.8666%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.6166%" y="517" width="0.0799%" height="15" fill="rgb(217,156,35)" fg:x="1122" fg:w="1"/><text x="89.8666%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="89.7764%" y="453" width="0.0799%" height="15" fill="rgb(207,181,49)" fg:x="1124" fg:w="1"/><text x="90.0264%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.7764%" y="437" width="0.0799%" height="15" fill="rgb(235,103,47)" fg:x="1124" fg:w="1"/><text x="90.0264%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="89.7764%" y="421" width="0.0799%" height="15" fill="rgb(222,63,28)" fg:x="1124" fg:w="1"/><text x="90.0264%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="89.8562%" y="437" width="0.0799%" height="15" fill="rgb(244,137,21)" fg:x="1125" fg:w="1"/><text x="90.1062%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.8562%" y="421" width="0.0799%" height="15" fill="rgb(228,35,27)" fg:x="1125" fg:w="1"/><text x="90.1062%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="89.6965%" y="501" width="0.3195%" height="15" fill="rgb(226,191,41)" fg:x="1123" fg:w="4"/><text x="89.9465%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="89.6965%" y="485" width="0.3195%" height="15" fill="rgb(210,154,3)" fg:x="1123" fg:w="4"/><text x="89.9465%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="89.7764%" y="469" width="0.2396%" height="15" fill="rgb(216,60,49)" fg:x="1124" fg:w="3"/><text x="90.0264%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="89.8562%" y="453" width="0.1597%" height="15" fill="rgb(226,17,20)" fg:x="1125" fg:w="2"/><text x="90.1062%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.9361%" y="437" width="0.0799%" height="15" fill="rgb(206,115,35)" fg:x="1126" fg:w="1"/><text x="90.1861%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.9361%" y="421" width="0.0799%" height="15" fill="rgb(227,88,1)" fg:x="1126" fg:w="1"/><text x="90.1861%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.9361%" y="405" width="0.0799%" height="15" fill="rgb(230,222,24)" fg:x="1126" fg:w="1"/><text x="90.1861%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="90.0160%" y="501" width="0.0799%" height="15" fill="rgb(214,124,32)" fg:x="1127" fg:w="1"/><text x="90.2660%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="90.0160%" y="485" width="0.0799%" height="15" fill="rgb(240,41,36)" fg:x="1127" fg:w="1"/><text x="90.2660%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="89.6965%" y="533" width="0.4792%" height="15" fill="rgb(221,17,52)" fg:x="1123" fg:w="6"/><text x="89.9465%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="89.6965%" y="517" width="0.4792%" height="15" fill="rgb(252,70,16)" fg:x="1123" fg:w="6"/><text x="89.9465%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.0958%" y="501" width="0.0799%" height="15" fill="rgb(250,177,4)" fg:x="1128" fg:w="1"/><text x="90.3458%" y="511.50"></text></g><g><title>engine::session::Session::close (44 samples, 3.51%)</title><rect x="86.7412%" y="709" width="3.5144%" height="15" fill="rgb(240,188,47)" fg:x="1086" fg:w="44"/><text x="86.9912%" y="719.50">eng..</text></g><g><title>engine::session::state::State::close (43 samples, 3.43%)</title><rect x="86.8211%" y="693" width="3.4345%" height="15" fill="rgb(215,92,12)" fg:x="1087" fg:w="43"/><text x="87.0711%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.35%)</title><rect x="86.9010%" y="677" width="3.3546%" height="15" fill="rgb(242,110,29)" fg:x="1088" fg:w="42"/><text x="87.1510%" y="687.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.27%)</title><rect x="86.9808%" y="661" width="3.2748%" height="15" fill="rgb(208,211,26)" fg:x="1089" fg:w="41"/><text x="87.2308%" y="671.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.27%)</title><rect x="86.9808%" y="645" width="3.2748%" height="15" fill="rgb(244,147,6)" fg:x="1089" fg:w="41"/><text x="87.2308%" y="655.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.19%)</title><rect x="87.0607%" y="629" width="3.1949%" height="15" fill="rgb(211,130,42)" fg:x="1090" fg:w="40"/><text x="87.3107%" y="639.50">eng..</text></g><g><title>kernel::model::any_entity_changes (27 samples, 2.16%)</title><rect x="88.0990%" y="613" width="2.1565%" height="15" fill="rgb(220,63,1)" fg:x="1103" fg:w="27"/><text x="88.3490%" y="623.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="89.6965%" y="597" width="0.5591%" height="15" fill="rgb(241,212,30)" fg:x="1123" fg:w="7"/><text x="89.9465%" y="607.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="89.6965%" y="581" width="0.5591%" height="15" fill="rgb(233,153,17)" fg:x="1123" fg:w="7"/><text x="89.9465%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="89.6965%" y="565" width="0.5591%" height="15" fill="rgb(236,3,10)" fg:x="1123" fg:w="7"/><text x="89.9465%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="89.6965%" y="549" width="0.5591%" height="15" fill="rgb(232,41,21)" fg:x="1123" fg:w="7"/><text x="89.9465%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.1757%" y="533" width="0.0799%" height="15" fill="rgb(206,63,51)" fg:x="1129" fg:w="1"/><text x="90.4257%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.1757%" y="517" width="0.0799%" height="15" fill="rgb(250,214,3)" fg:x="1129" fg:w="1"/><text x="90.4257%" y="527.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="90.2556%" y="517" width="0.0799%" height="15" fill="rgb(254,89,27)" fg:x="1130" fg:w="1"/><text x="90.5056%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple (1 samples, 0.08%)</title><rect x="90.2556%" y="501" width="0.0799%" height="15" fill="rgb(249,41,14)" fg:x="1130" fg:w="1"/><text x="90.5056%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="90.2556%" y="661" width="0.1597%" height="15" fill="rgb(221,196,51)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="90.2556%" y="645" width="0.1597%" height="15" fill="rgb(214,116,26)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="90.2556%" y="629" width="0.1597%" height="15" fill="rgb(236,67,7)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="90.2556%" y="613" width="0.1597%" height="15" fill="rgb(253,179,32)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="90.2556%" y="597" width="0.1597%" height="15" fill="rgb(218,33,15)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="90.2556%" y="581" width="0.1597%" height="15" fill="rgb(217,202,41)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="90.2556%" y="565" width="0.1597%" height="15" fill="rgb(234,133,5)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="90.2556%" y="549" width="0.1597%" height="15" fill="rgb(240,47,40)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="90.2556%" y="533" width="0.1597%" height="15" fill="rgb(234,166,26)" fg:x="1130" fg:w="2"/><text x="90.5056%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="90.3355%" y="517" width="0.0799%" height="15" fill="rgb(244,125,51)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="90.3355%" y="501" width="0.0799%" height="15" fill="rgb(229,171,11)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="90.3355%" y="485" width="0.0799%" height="15" fill="rgb(224,38,45)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="90.3355%" y="469" width="0.0799%" height="15" fill="rgb(237,27,7)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="90.3355%" y="453" width="0.0799%" height="15" fill="rgb(216,52,7)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="90.3355%" y="437" width="0.0799%" height="15" fill="rgb(243,11,11)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="90.3355%" y="421" width="0.0799%" height="15" fill="rgb(253,167,20)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="90.3355%" y="405" width="0.0799%" height="15" fill="rgb(215,207,5)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="90.3355%" y="389" width="0.0799%" height="15" fill="rgb(252,127,31)" fg:x="1131" fg:w="1"/><text x="90.5855%" y="399.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (1 samples, 0.08%)</title><rect x="90.4153%" y="645" width="0.0799%" height="15" fill="rgb(209,106,27)" fg:x="1132" fg:w="1"/><text x="90.6653%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="90.4153%" y="629" width="0.0799%" height="15" fill="rgb(214,220,18)" fg:x="1132" fg:w="1"/><text x="90.6653%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (1 samples, 0.08%)</title><rect x="90.4153%" y="613" width="0.0799%" height="15" fill="rgb(237,89,12)" fg:x="1132" fg:w="1"/><text x="90.6653%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (1 samples, 0.08%)</title><rect x="90.4153%" y="597" width="0.0799%" height="15" fill="rgb(209,167,36)" fg:x="1132" fg:w="1"/><text x="90.6653%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.5751%" y="469" width="0.0799%" height="15" fill="rgb(243,45,22)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.5751%" y="453" width="0.0799%" height="15" fill="rgb(239,2,46)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.5751%" y="437" width="0.0799%" height="15" fill="rgb(241,101,0)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.5751%" y="421" width="0.0799%" height="15" fill="rgb(244,34,31)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.5751%" y="405" width="0.0799%" height="15" fill="rgb(248,23,22)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="90.5751%" y="389" width="0.0799%" height="15" fill="rgb(218,27,48)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="90.5751%" y="373" width="0.0799%" height="15" fill="rgb(232,78,1)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="90.5751%" y="357" width="0.0799%" height="15" fill="rgb(233,169,12)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.5751%" y="341" width="0.0799%" height="15" fill="rgb(225,222,54)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.5751%" y="325" width="0.0799%" height="15" fill="rgb(245,126,29)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="90.5751%" y="309" width="0.0799%" height="15" fill="rgb(241,63,48)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="90.5751%" y="293" width="0.0799%" height="15" fill="rgb(235,126,38)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="90.5751%" y="277" width="0.0799%" height="15" fill="rgb(232,96,49)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="90.5751%" y="261" width="0.0799%" height="15" fill="rgb(211,146,40)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5751%" y="245" width="0.0799%" height="15" fill="rgb(247,93,44)" fg:x="1134" fg:w="1"/><text x="90.8251%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="90.6550%" y="469" width="0.1597%" height="15" fill="rgb(251,41,49)" fg:x="1135" fg:w="2"/><text x="90.9050%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.7348%" y="453" width="0.0799%" height="15" fill="rgb(218,155,12)" fg:x="1136" fg:w="1"/><text x="90.9848%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.7348%" y="437" width="0.0799%" height="15" fill="rgb(221,161,30)" fg:x="1136" fg:w="1"/><text x="90.9848%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.7348%" y="421" width="0.0799%" height="15" fill="rgb(221,179,11)" fg:x="1136" fg:w="1"/><text x="90.9848%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.7348%" y="405" width="0.0799%" height="15" fill="rgb(224,170,48)" fg:x="1136" fg:w="1"/><text x="90.9848%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="90.7348%" y="389" width="0.0799%" height="15" fill="rgb(223,117,5)" fg:x="1136" fg:w="1"/><text x="90.9848%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="90.7348%" y="373" width="0.0799%" height="15" fill="rgb(209,52,20)" fg:x="1136" fg:w="1"/><text x="90.9848%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="90.8147%" y="405" width="0.0799%" height="15" fill="rgb(209,19,41)" fg:x="1137" fg:w="1"/><text x="91.0647%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="90.8147%" y="389" width="0.0799%" height="15" fill="rgb(210,177,12)" fg:x="1137" fg:w="1"/><text x="91.0647%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="90.8147%" y="373" width="0.0799%" height="15" fill="rgb(211,159,37)" fg:x="1137" fg:w="1"/><text x="91.0647%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="90.8147%" y="357" width="0.0799%" height="15" fill="rgb(209,20,2)" fg:x="1137" fg:w="1"/><text x="91.0647%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.8147%" y="341" width="0.0799%" height="15" fill="rgb(244,3,46)" fg:x="1137" fg:w="1"/><text x="91.0647%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="90.8147%" y="325" width="0.0799%" height="15" fill="rgb(220,94,38)" fg:x="1137" fg:w="1"/><text x="91.0647%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.48%)</title><rect x="90.4952%" y="565" width="0.4792%" height="15" fill="rgb(253,14,31)" fg:x="1133" fg:w="6"/><text x="90.7452%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.48%)</title><rect x="90.4952%" y="549" width="0.4792%" height="15" fill="rgb(234,176,13)" fg:x="1133" fg:w="6"/><text x="90.7452%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="90.4952%" y="533" width="0.4792%" height="15" fill="rgb(218,62,25)" fg:x="1133" fg:w="6"/><text x="90.7452%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="90.4952%" y="517" width="0.4792%" height="15" fill="rgb(216,124,40)" fg:x="1133" fg:w="6"/><text x="90.7452%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="90.4952%" y="501" width="0.4792%" height="15" fill="rgb(228,170,12)" fg:x="1133" fg:w="6"/><text x="90.7452%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="90.5751%" y="485" width="0.3994%" height="15" fill="rgb(231,226,5)" fg:x="1134" fg:w="5"/><text x="90.8251%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="90.8147%" y="469" width="0.1597%" height="15" fill="rgb(237,122,22)" fg:x="1137" fg:w="2"/><text x="91.0647%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="90.8147%" y="453" width="0.1597%" height="15" fill="rgb(209,185,25)" fg:x="1137" fg:w="2"/><text x="91.0647%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="90.8147%" y="437" width="0.1597%" height="15" fill="rgb(228,200,32)" fg:x="1137" fg:w="2"/><text x="91.0647%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="90.8147%" y="421" width="0.1597%" height="15" fill="rgb(217,140,10)" fg:x="1137" fg:w="2"/><text x="91.0647%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="90.8946%" y="405" width="0.0799%" height="15" fill="rgb(253,17,24)" fg:x="1138" fg:w="1"/><text x="91.1446%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.8946%" y="389" width="0.0799%" height="15" fill="rgb(212,61,6)" fg:x="1138" fg:w="1"/><text x="91.1446%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.9744%" y="357" width="0.0799%" height="15" fill="rgb(205,14,25)" fg:x="1139" fg:w="1"/><text x="91.2244%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="91.0543%" y="357" width="0.1597%" height="15" fill="rgb(232,69,41)" fg:x="1140" fg:w="2"/><text x="91.3043%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="91.1342%" y="341" width="0.0799%" height="15" fill="rgb(241,106,47)" fg:x="1141" fg:w="1"/><text x="91.3842%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="91.1342%" y="325" width="0.0799%" height="15" fill="rgb(210,213,53)" fg:x="1141" fg:w="1"/><text x="91.3842%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="91.1342%" y="309" width="0.0799%" height="15" fill="rgb(253,175,27)" fg:x="1141" fg:w="1"/><text x="91.3842%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="91.1342%" y="293" width="0.0799%" height="15" fill="rgb(211,171,24)" fg:x="1141" fg:w="1"/><text x="91.3842%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.1342%" y="277" width="0.0799%" height="15" fill="rgb(229,80,7)" fg:x="1141" fg:w="1"/><text x="91.3842%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (4 samples, 0.32%)</title><rect x="90.9744%" y="389" width="0.3195%" height="15" fill="rgb(212,46,39)" fg:x="1139" fg:w="4"/><text x="91.2244%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="90.9744%" y="373" width="0.3195%" height="15" fill="rgb(240,80,45)" fg:x="1139" fg:w="4"/><text x="91.2244%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="91.2141%" y="357" width="0.0799%" height="15" fill="rgb(253,177,40)" fg:x="1142" fg:w="1"/><text x="91.4641%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="91.2141%" y="341" width="0.0799%" height="15" fill="rgb(249,200,15)" fg:x="1142" fg:w="1"/><text x="91.4641%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.2939%" y="325" width="0.0799%" height="15" fill="rgb(217,78,26)" fg:x="1143" fg:w="1"/><text x="91.5439%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="91.2939%" y="357" width="0.1597%" height="15" fill="rgb(254,151,32)" fg:x="1143" fg:w="2"/><text x="91.5439%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="91.2939%" y="341" width="0.1597%" height="15" fill="rgb(226,165,27)" fg:x="1143" fg:w="2"/><text x="91.5439%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.3738%" y="325" width="0.0799%" height="15" fill="rgb(250,206,4)" fg:x="1144" fg:w="1"/><text x="91.6238%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.3738%" y="309" width="0.0799%" height="15" fill="rgb(231,229,27)" fg:x="1144" fg:w="1"/><text x="91.6238%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="91.3738%" y="293" width="0.0799%" height="15" fill="rgb(239,217,8)" fg:x="1144" fg:w="1"/><text x="91.6238%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.3738%" y="277" width="0.0799%" height="15" fill="rgb(225,204,27)" fg:x="1144" fg:w="1"/><text x="91.6238%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.3738%" y="261" width="0.0799%" height="15" fill="rgb(230,56,32)" fg:x="1144" fg:w="1"/><text x="91.6238%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.4537%" y="341" width="0.0799%" height="15" fill="rgb(222,56,27)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.4537%" y="325" width="0.0799%" height="15" fill="rgb(253,108,27)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="91.4537%" y="309" width="0.0799%" height="15" fill="rgb(212,87,36)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.4537%" y="293" width="0.0799%" height="15" fill="rgb(247,82,36)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.4537%" y="277" width="0.0799%" height="15" fill="rgb(222,143,9)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="91.4537%" y="261" width="0.0799%" height="15" fill="rgb(238,162,48)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="91.4537%" y="245" width="0.0799%" height="15" fill="rgb(221,59,43)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="91.4537%" y="229" width="0.0799%" height="15" fill="rgb(205,166,41)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="91.4537%" y="213" width="0.0799%" height="15" fill="rgb(241,186,40)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="91.4537%" y="197" width="0.0799%" height="15" fill="rgb(216,119,35)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="91.4537%" y="181" width="0.0799%" height="15" fill="rgb(208,68,38)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="91.4537%" y="165" width="0.0799%" height="15" fill="rgb(217,113,1)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="91.4537%" y="149" width="0.0799%" height="15" fill="rgb(242,153,3)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="91.4537%" y="133" width="0.0799%" height="15" fill="rgb(229,76,35)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4537%" y="117" width="0.0799%" height="15" fill="rgb(229,125,34)" fg:x="1145" fg:w="1"/><text x="91.7037%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="91.4537%" y="357" width="0.1597%" height="15" fill="rgb(238,179,36)" fg:x="1145" fg:w="2"/><text x="91.7037%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.5335%" y="341" width="0.0799%" height="15" fill="rgb(244,183,19)" fg:x="1146" fg:w="1"/><text x="91.7835%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5335%" y="325" width="0.0799%" height="15" fill="rgb(216,85,49)" fg:x="1146" fg:w="1"/><text x="91.7835%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="91.6134%" y="325" width="0.0799%" height="15" fill="rgb(208,161,47)" fg:x="1147" fg:w="1"/><text x="91.8634%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="91.6134%" y="341" width="0.2396%" height="15" fill="rgb(233,210,18)" fg:x="1147" fg:w="3"/><text x="91.8634%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="91.6933%" y="325" width="0.1597%" height="15" fill="rgb(205,104,42)" fg:x="1148" fg:w="2"/><text x="91.9433%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="91.6933%" y="309" width="0.1597%" height="15" fill="rgb(248,90,43)" fg:x="1148" fg:w="2"/><text x="91.9433%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="91.6933%" y="293" width="0.1597%" height="15" fill="rgb(206,198,11)" fg:x="1148" fg:w="2"/><text x="91.9433%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="91.6933%" y="277" width="0.1597%" height="15" fill="rgb(239,165,27)" fg:x="1148" fg:w="2"/><text x="91.9433%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="91.7732%" y="261" width="0.0799%" height="15" fill="rgb(246,44,32)" fg:x="1149" fg:w="1"/><text x="92.0232%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="91.7732%" y="245" width="0.0799%" height="15" fill="rgb(252,65,42)" fg:x="1149" fg:w="1"/><text x="92.0232%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="91.7732%" y="229" width="0.0799%" height="15" fill="rgb(246,197,18)" fg:x="1149" fg:w="1"/><text x="92.0232%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.7732%" y="213" width="0.0799%" height="15" fill="rgb(216,192,4)" fg:x="1149" fg:w="1"/><text x="92.0232%" y="223.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="91.6134%" y="357" width="0.3195%" height="15" fill="rgb(208,117,10)" fg:x="1147" fg:w="4"/><text x="91.8634%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="91.8530%" y="341" width="0.0799%" height="15" fill="rgb(240,61,47)" fg:x="1150" fg:w="1"/><text x="92.1030%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="91.8530%" y="325" width="0.0799%" height="15" fill="rgb(228,178,21)" fg:x="1150" fg:w="1"/><text x="92.1030%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="92.0128%" y="213" width="0.0799%" height="15" fill="rgb(219,96,54)" fg:x="1152" fg:w="1"/><text x="92.2628%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="92.0128%" y="197" width="0.0799%" height="15" fill="rgb(250,177,24)" fg:x="1152" fg:w="1"/><text x="92.2628%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.0128%" y="181" width="0.0799%" height="15" fill="rgb(242,154,46)" fg:x="1152" fg:w="1"/><text x="92.2628%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="92.0927%" y="213" width="0.0799%" height="15" fill="rgb(226,176,29)" fg:x="1153" fg:w="1"/><text x="92.3427%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="92.0927%" y="197" width="0.0799%" height="15" fill="rgb(226,29,2)" fg:x="1153" fg:w="1"/><text x="92.3427%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="92.1725%" y="181" width="0.0799%" height="15" fill="rgb(237,104,14)" fg:x="1154" fg:w="1"/><text x="92.4225%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="92.2524%" y="149" width="0.1597%" height="15" fill="rgb(245,207,31)" fg:x="1155" fg:w="2"/><text x="92.5024%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.44%)</title><rect x="92.1725%" y="197" width="1.4377%" height="15" fill="rgb(229,211,45)" fg:x="1154" fg:w="18"/><text x="92.4225%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (17 samples, 1.36%)</title><rect x="92.2524%" y="181" width="1.3578%" height="15" fill="rgb(229,113,15)" fg:x="1155" fg:w="17"/><text x="92.5024%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.36%)</title><rect x="92.2524%" y="165" width="1.3578%" height="15" fill="rgb(237,147,15)" fg:x="1155" fg:w="17"/><text x="92.5024%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (15 samples, 1.20%)</title><rect x="92.4121%" y="149" width="1.1981%" height="15" fill="rgb(244,120,12)" fg:x="1157" fg:w="15"/><text x="92.6621%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (15 samples, 1.20%)</title><rect x="92.4121%" y="133" width="1.1981%" height="15" fill="rgb(205,120,12)" fg:x="1157" fg:w="15"/><text x="92.6621%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 1.20%)</title><rect x="92.4121%" y="117" width="1.1981%" height="15" fill="rgb(231,26,45)" fg:x="1157" fg:w="15"/><text x="92.6621%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="93.6102%" y="181" width="0.0799%" height="15" fill="rgb(246,98,1)" fg:x="1172" fg:w="1"/><text x="93.8602%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.6102%" y="165" width="0.0799%" height="15" fill="rgb(207,68,45)" fg:x="1172" fg:w="1"/><text x="93.8602%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.6102%" y="149" width="0.0799%" height="15" fill="rgb(231,27,38)" fg:x="1172" fg:w="1"/><text x="93.8602%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.6102%" y="133" width="0.0799%" height="15" fill="rgb(214,223,3)" fg:x="1172" fg:w="1"/><text x="93.8602%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="93.6102%" y="197" width="0.1597%" height="15" fill="rgb(228,195,46)" fg:x="1172" fg:w="2"/><text x="93.8602%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="93.6901%" y="181" width="0.0799%" height="15" fill="rgb(231,100,42)" fg:x="1173" fg:w="1"/><text x="93.9401%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (24 samples, 1.92%)</title><rect x="91.9329%" y="277" width="1.9169%" height="15" fill="rgb(236,53,4)" fg:x="1151" fg:w="24"/><text x="92.1829%" y="287.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (24 samples, 1.92%)</title><rect x="91.9329%" y="261" width="1.9169%" height="15" fill="rgb(230,152,12)" fg:x="1151" fg:w="24"/><text x="92.1829%" y="271.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.84%)</title><rect x="92.0128%" y="245" width="1.8371%" height="15" fill="rgb(226,101,19)" fg:x="1152" fg:w="23"/><text x="92.2628%" y="255.50">r..</text></g><g><title>regex_automata::meta::strategy::new (23 samples, 1.84%)</title><rect x="92.0128%" y="229" width="1.8371%" height="15" fill="rgb(250,149,32)" fg:x="1152" fg:w="23"/><text x="92.2628%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (21 samples, 1.68%)</title><rect x="92.1725%" y="213" width="1.6773%" height="15" fill="rgb(232,178,12)" fg:x="1154" fg:w="21"/><text x="92.4225%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="93.7700%" y="197" width="0.0799%" height="15" fill="rgb(246,151,17)" fg:x="1174" fg:w="1"/><text x="94.0200%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="93.7700%" y="181" width="0.0799%" height="15" fill="rgb(252,17,51)" fg:x="1174" fg:w="1"/><text x="94.0200%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.7700%" y="165" width="0.0799%" height="15" fill="rgb(250,207,23)" fg:x="1174" fg:w="1"/><text x="94.0200%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="93.8498%" y="277" width="0.0799%" height="15" fill="rgb(205,27,5)" fg:x="1175" fg:w="1"/><text x="94.0998%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="93.8498%" y="261" width="0.0799%" height="15" fill="rgb(224,32,19)" fg:x="1175" fg:w="1"/><text x="94.0998%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (26 samples, 2.08%)</title><rect x="91.9329%" y="293" width="2.0767%" height="15" fill="rgb(247,214,40)" fg:x="1151" fg:w="26"/><text x="92.1829%" y="303.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="93.9297%" y="277" width="0.0799%" height="15" fill="rgb(239,199,17)" fg:x="1176" fg:w="1"/><text x="94.1797%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="93.9297%" y="261" width="0.0799%" height="15" fill="rgb(251,159,9)" fg:x="1176" fg:w="1"/><text x="94.1797%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="93.9297%" y="245" width="0.0799%" height="15" fill="rgb(225,78,32)" fg:x="1176" fg:w="1"/><text x="94.1797%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="93.9297%" y="229" width="0.0799%" height="15" fill="rgb(206,97,47)" fg:x="1176" fg:w="1"/><text x="94.1797%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="93.9297%" y="213" width="0.0799%" height="15" fill="rgb(227,107,4)" fg:x="1176" fg:w="1"/><text x="94.1797%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="93.9297%" y="197" width="0.0799%" height="15" fill="rgb(241,146,50)" fg:x="1176" fg:w="1"/><text x="94.1797%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="94.0096%" y="229" width="0.0799%" height="15" fill="rgb(232,92,30)" fg:x="1177" fg:w="1"/><text x="94.2596%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.0096%" y="213" width="0.0799%" height="15" fill="rgb(222,0,40)" fg:x="1177" fg:w="1"/><text x="94.2596%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.0895%" y="213" width="0.0799%" height="15" fill="rgb(219,54,33)" fg:x="1178" fg:w="1"/><text x="94.3395%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="94.1693%" y="213" width="0.2396%" height="15" fill="rgb(226,209,28)" fg:x="1179" fg:w="3"/><text x="94.4193%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="94.1693%" y="197" width="0.2396%" height="15" fill="rgb(254,205,35)" fg:x="1179" fg:w="3"/><text x="94.4193%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="94.4089%" y="213" width="0.2396%" height="15" fill="rgb(230,159,3)" fg:x="1182" fg:w="3"/><text x="94.6589%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="94.4089%" y="197" width="0.2396%" height="15" fill="rgb(232,190,24)" fg:x="1182" fg:w="3"/><text x="94.6589%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="94.4888%" y="181" width="0.1597%" height="15" fill="rgb(217,227,44)" fg:x="1183" fg:w="2"/><text x="94.7388%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.5687%" y="165" width="0.0799%" height="15" fill="rgb(236,211,1)" fg:x="1184" fg:w="1"/><text x="94.8187%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.5687%" y="149" width="0.0799%" height="15" fill="rgb(250,127,46)" fg:x="1184" fg:w="1"/><text x="94.8187%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5687%" y="133" width="0.0799%" height="15" fill="rgb(229,213,6)" fg:x="1184" fg:w="1"/><text x="94.8187%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.5687%" y="117" width="0.0799%" height="15" fill="rgb(237,15,36)" fg:x="1184" fg:w="1"/><text x="94.8187%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="94.6486%" y="213" width="0.0799%" height="15" fill="rgb(213,131,41)" fg:x="1185" fg:w="1"/><text x="94.8986%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="94.7284%" y="101" width="0.2396%" height="15" fill="rgb(225,82,44)" fg:x="1186" fg:w="3"/><text x="94.9784%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8882%" y="85" width="0.0799%" height="15" fill="rgb(249,42,11)" fg:x="1188" fg:w="1"/><text x="95.1382%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="94.9681%" y="101" width="0.1597%" height="15" fill="rgb(253,11,29)" fg:x="1189" fg:w="2"/><text x="95.2181%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="94.9681%" y="85" width="0.1597%" height="15" fill="rgb(206,8,54)" fg:x="1189" fg:w="2"/><text x="95.2181%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.04%)</title><rect x="94.7284%" y="197" width="1.0383%" height="15" fill="rgb(222,186,2)" fg:x="1186" fg:w="13"/><text x="94.9784%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (13 samples, 1.04%)</title><rect x="94.7284%" y="181" width="1.0383%" height="15" fill="rgb(221,206,53)" fg:x="1186" fg:w="13"/><text x="94.9784%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (13 samples, 1.04%)</title><rect x="94.7284%" y="165" width="1.0383%" height="15" fill="rgb(230,150,21)" fg:x="1186" fg:w="13"/><text x="94.9784%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (13 samples, 1.04%)</title><rect x="94.7284%" y="149" width="1.0383%" height="15" fill="rgb(253,202,10)" fg:x="1186" fg:w="13"/><text x="94.9784%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (13 samples, 1.04%)</title><rect x="94.7284%" y="133" width="1.0383%" height="15" fill="rgb(238,109,40)" fg:x="1186" fg:w="13"/><text x="94.9784%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (13 samples, 1.04%)</title><rect x="94.7284%" y="117" width="1.0383%" height="15" fill="rgb(247,120,22)" fg:x="1186" fg:w="13"/><text x="94.9784%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (8 samples, 0.64%)</title><rect x="95.1278%" y="101" width="0.6390%" height="15" fill="rgb(207,43,30)" fg:x="1191" fg:w="8"/><text x="95.3778%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (8 samples, 0.64%)</title><rect x="95.1278%" y="85" width="0.6390%" height="15" fill="rgb(213,211,24)" fg:x="1191" fg:w="8"/><text x="95.3778%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (8 samples, 0.64%)</title><rect x="95.1278%" y="69" width="0.6390%" height="15" fill="rgb(239,73,39)" fg:x="1191" fg:w="8"/><text x="95.3778%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7668%" y="181" width="0.0799%" height="15" fill="rgb(245,182,19)" fg:x="1199" fg:w="1"/><text x="96.0168%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7668%" y="165" width="0.0799%" height="15" fill="rgb(247,143,26)" fg:x="1199" fg:w="1"/><text x="96.0168%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7668%" y="149" width="0.0799%" height="15" fill="rgb(228,191,23)" fg:x="1199" fg:w="1"/><text x="96.0168%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="95.8466%" y="181" width="0.1597%" height="15" fill="rgb(253,165,31)" fg:x="1200" fg:w="2"/><text x="96.0966%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.8466%" y="165" width="0.1597%" height="15" fill="rgb(234,138,20)" fg:x="1200" fg:w="2"/><text x="96.0966%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.8466%" y="149" width="0.1597%" height="15" fill="rgb(218,191,29)" fg:x="1200" fg:w="2"/><text x="96.0966%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="95.8466%" y="133" width="0.1597%" height="15" fill="rgb(221,157,19)" fg:x="1200" fg:w="2"/><text x="96.0966%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.0064%" y="181" width="0.0799%" height="15" fill="rgb(237,26,42)" fg:x="1202" fg:w="1"/><text x="96.2564%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (27 samples, 2.16%)</title><rect x="94.0895%" y="229" width="2.1565%" height="15" fill="rgb(220,163,24)" fg:x="1178" fg:w="27"/><text x="94.3395%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (19 samples, 1.52%)</title><rect x="94.7284%" y="213" width="1.5176%" height="15" fill="rgb(242,115,20)" fg:x="1186" fg:w="19"/><text x="94.9784%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="95.7668%" y="197" width="0.4792%" height="15" fill="rgb(210,206,9)" fg:x="1199" fg:w="6"/><text x="96.0168%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="96.0863%" y="181" width="0.1597%" height="15" fill="rgb(208,71,17)" fg:x="1203" fg:w="2"/><text x="96.3363%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.1661%" y="165" width="0.0799%" height="15" fill="rgb(233,7,5)" fg:x="1204" fg:w="1"/><text x="96.4161%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (29 samples, 2.32%)</title><rect x="94.0096%" y="277" width="2.3163%" height="15" fill="rgb(207,92,33)" fg:x="1177" fg:w="29"/><text x="94.2596%" y="287.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (29 samples, 2.32%)</title><rect x="94.0096%" y="261" width="2.3163%" height="15" fill="rgb(218,87,9)" fg:x="1177" fg:w="29"/><text x="94.2596%" y="271.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.32%)</title><rect x="94.0096%" y="245" width="2.3163%" height="15" fill="rgb(219,47,37)" fg:x="1177" fg:w="29"/><text x="94.2596%" y="255.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.2460%" y="229" width="0.0799%" height="15" fill="rgb(221,152,34)" fg:x="1205" fg:w="1"/><text x="96.4960%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.2460%" y="213" width="0.0799%" height="15" fill="rgb(235,176,21)" fg:x="1205" fg:w="1"/><text x="96.4960%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.2460%" y="197" width="0.0799%" height="15" fill="rgb(232,212,21)" fg:x="1205" fg:w="1"/><text x="96.4960%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.3259%" y="277" width="0.0799%" height="15" fill="rgb(245,82,39)" fg:x="1206" fg:w="1"/><text x="96.5759%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (33 samples, 2.64%)</title><rect x="94.0096%" y="293" width="2.6358%" height="15" fill="rgb(241,52,51)" fg:x="1177" fg:w="33"/><text x="94.2596%" y="303.50">in..</text></g><g><title>regex::regex::string::Regex::is_match_at (3 samples, 0.24%)</title><rect x="96.4058%" y="277" width="0.2396%" height="15" fill="rgb(219,91,24)" fg:x="1207" fg:w="3"/><text x="96.6558%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="96.4058%" y="261" width="0.2396%" height="15" fill="rgb(241,142,12)" fg:x="1207" fg:w="3"/><text x="96.6558%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="96.4058%" y="245" width="0.2396%" height="15" fill="rgb(230,27,9)" fg:x="1207" fg:w="3"/><text x="96.6558%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="96.4058%" y="229" width="0.2396%" height="15" fill="rgb(249,181,32)" fg:x="1207" fg:w="3"/><text x="96.6558%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="96.4058%" y="213" width="0.2396%" height="15" fill="rgb(230,107,3)" fg:x="1207" fg:w="3"/><text x="96.6558%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="96.4058%" y="197" width="0.2396%" height="15" fill="rgb(246,204,14)" fg:x="1207" fg:w="3"/><text x="96.6558%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="96.4856%" y="181" width="0.1597%" height="15" fill="rgb(213,192,47)" fg:x="1208" fg:w="2"/><text x="96.7356%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="96.6454%" y="197" width="0.1597%" height="15" fill="rgb(240,44,36)" fg:x="1210" fg:w="2"/><text x="96.8954%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.7252%" y="181" width="0.0799%" height="15" fill="rgb(244,209,38)" fg:x="1211" fg:w="1"/><text x="96.9752%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.7252%" y="165" width="0.0799%" height="15" fill="rgb(219,34,37)" fg:x="1211" fg:w="1"/><text x="96.9752%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.8051%" y="181" width="0.0799%" height="15" fill="rgb(210,28,6)" fg:x="1212" fg:w="1"/><text x="97.0551%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="96.8051%" y="165" width="0.0799%" height="15" fill="rgb(244,110,52)" fg:x="1212" fg:w="1"/><text x="97.0551%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.8051%" y="149" width="0.0799%" height="15" fill="rgb(254,124,47)" fg:x="1212" fg:w="1"/><text x="97.0551%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.8051%" y="133" width="0.0799%" height="15" fill="rgb(254,110,13)" fg:x="1212" fg:w="1"/><text x="97.0551%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.8051%" y="117" width="0.0799%" height="15" fill="rgb(252,57,21)" fg:x="1212" fg:w="1"/><text x="97.0551%" y="127.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (4 samples, 0.32%)</title><rect x="96.6454%" y="261" width="0.3195%" height="15" fill="rgb(242,60,45)" fg:x="1210" fg:w="4"/><text x="96.8954%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (4 samples, 0.32%)</title><rect x="96.6454%" y="245" width="0.3195%" height="15" fill="rgb(234,49,30)" fg:x="1210" fg:w="4"/><text x="96.8954%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4 samples, 0.32%)</title><rect x="96.6454%" y="229" width="0.3195%" height="15" fill="rgb(218,98,6)" fg:x="1210" fg:w="4"/><text x="96.8954%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="96.6454%" y="213" width="0.3195%" height="15" fill="rgb(220,174,29)" fg:x="1210" fg:w="4"/><text x="96.8954%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="96.8051%" y="197" width="0.1597%" height="15" fill="rgb(236,163,23)" fg:x="1212" fg:w="2"/><text x="97.0551%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="96.8850%" y="181" width="0.0799%" height="15" fill="rgb(242,114,45)" fg:x="1213" fg:w="1"/><text x="97.1350%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="96.8850%" y="165" width="0.0799%" height="15" fill="rgb(232,10,53)" fg:x="1213" fg:w="1"/><text x="97.1350%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="96.9649%" y="197" width="0.2396%" height="15" fill="rgb(245,108,29)" fg:x="1214" fg:w="3"/><text x="97.2149%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1246%" y="181" width="0.0799%" height="15" fill="rgb(240,89,53)" fg:x="1216" fg:w="1"/><text x="97.3746%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (8 samples, 0.64%)</title><rect x="96.6454%" y="277" width="0.6390%" height="15" fill="rgb(226,60,45)" fg:x="1210" fg:w="8"/><text x="96.8954%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="96.9649%" y="261" width="0.3195%" height="15" fill="rgb(230,41,44)" fg:x="1214" fg:w="4"/><text x="97.2149%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="96.9649%" y="245" width="0.3195%" height="15" fill="rgb(230,26,20)" fg:x="1214" fg:w="4"/><text x="97.2149%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="96.9649%" y="229" width="0.3195%" height="15" fill="rgb(237,170,32)" fg:x="1214" fg:w="4"/><text x="97.2149%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="96.9649%" y="213" width="0.3195%" height="15" fill="rgb(212,35,42)" fg:x="1214" fg:w="4"/><text x="97.2149%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.2045%" y="197" width="0.0799%" height="15" fill="rgb(227,31,34)" fg:x="1217" fg:w="1"/><text x="97.4545%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.2045%" y="181" width="0.0799%" height="15" fill="rgb(216,19,18)" fg:x="1217" fg:w="1"/><text x="97.4545%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2045%" y="165" width="0.0799%" height="15" fill="rgb(211,133,42)" fg:x="1217" fg:w="1"/><text x="97.4545%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2045%" y="149" width="0.0799%" height="15" fill="rgb(244,66,13)" fg:x="1217" fg:w="1"/><text x="97.4545%" y="159.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (76 samples, 6.07%)</title><rect x="91.2939%" y="373" width="6.0703%" height="15" fill="rgb(218,185,50)" fg:x="1143" fg:w="76"/><text x="91.5439%" y="383.50">&lt;&amp;kernel..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (68 samples, 5.43%)</title><rect x="91.9329%" y="357" width="5.4313%" height="15" fill="rgb(219,149,13)" fg:x="1151" fg:w="68"/><text x="92.1829%" y="367.50">plugins..</text></g><g><title>indefinite::indefinite (68 samples, 5.43%)</title><rect x="91.9329%" y="341" width="5.4313%" height="15" fill="rgb(221,125,0)" fg:x="1151" fg:w="68"/><text x="92.1829%" y="351.50">indefin..</text></g><g><title>indefinite::methods::indefinite (68 samples, 5.43%)</title><rect x="91.9329%" y="325" width="5.4313%" height="15" fill="rgb(247,126,27)" fg:x="1151" fg:w="68"/><text x="92.1829%" y="335.50">indefin..</text></g><g><title>indefinite::methods::apply_rules (68 samples, 5.43%)</title><rect x="91.9329%" y="309" width="5.4313%" height="15" fill="rgb(250,138,30)" fg:x="1151" fg:w="68"/><text x="92.1829%" y="319.50">indefin..</text></g><g><title>indefinite::rules::other::Other::run (9 samples, 0.72%)</title><rect x="96.6454%" y="293" width="0.7188%" height="15" fill="rgb(230,151,9)" fg:x="1210" fg:w="9"/><text x="96.8954%" y="303.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.2843%" y="277" width="0.0799%" height="15" fill="rgb(233,80,38)" fg:x="1218" fg:w="1"/><text x="97.5343%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="97.3642%" y="357" width="0.0799%" height="15" fill="rgb(232,68,43)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.3642%" y="341" width="0.0799%" height="15" fill="rgb(254,5,50)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3642%" y="325" width="0.0799%" height="15" fill="rgb(225,45,5)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3642%" y="309" width="0.0799%" height="15" fill="rgb(239,22,3)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.3642%" y="293" width="0.0799%" height="15" fill="rgb(243,129,0)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3642%" y="277" width="0.0799%" height="15" fill="rgb(223,164,0)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3642%" y="261" width="0.0799%" height="15" fill="rgb(221,46,29)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3642%" y="245" width="0.0799%" height="15" fill="rgb(205,97,47)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3642%" y="229" width="0.0799%" height="15" fill="rgb(249,14,8)" fg:x="1219" fg:w="1"/><text x="97.6142%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4441%" y="293" width="0.0799%" height="15" fill="rgb(216,77,3)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4441%" y="277" width="0.0799%" height="15" fill="rgb(206,168,54)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4441%" y="261" width="0.0799%" height="15" fill="rgb(236,3,41)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4441%" y="245" width="0.0799%" height="15" fill="rgb(231,132,24)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4441%" y="229" width="0.0799%" height="15" fill="rgb(227,221,40)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4441%" y="213" width="0.0799%" height="15" fill="rgb(233,151,11)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.4441%" y="197" width="0.0799%" height="15" fill="rgb(247,81,35)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.4441%" y="181" width="0.0799%" height="15" fill="rgb(243,128,48)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.4441%" y="165" width="0.0799%" height="15" fill="rgb(253,16,10)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.4441%" y="149" width="0.0799%" height="15" fill="rgb(228,67,27)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4441%" y="133" width="0.0799%" height="15" fill="rgb(231,105,25)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.4441%" y="117" width="0.0799%" height="15" fill="rgb(213,166,47)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.4441%" y="101" width="0.0799%" height="15" fill="rgb(209,27,10)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.4441%" y="85" width="0.0799%" height="15" fill="rgb(241,44,30)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.4441%" y="69" width="0.0799%" height="15" fill="rgb(223,216,15)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.4441%" y="53" width="0.0799%" height="15" fill="rgb(227,14,7)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4441%" y="37" width="0.0799%" height="15" fill="rgb(237,14,5)" fg:x="1220" fg:w="1"/><text x="97.6941%" y="47.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (83 samples, 6.63%)</title><rect x="90.9744%" y="533" width="6.6294%" height="15" fill="rgb(232,14,36)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="543.50">kernel::p..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (83 samples, 6.63%)</title><rect x="90.9744%" y="517" width="6.6294%" height="15" fill="rgb(234,0,38)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="527.50">&lt;plugins_..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (83 samples, 6.63%)</title><rect x="90.9744%" y="501" width="6.6294%" height="15" fill="rgb(207,170,14)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="511.50">kernel::p..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (83 samples, 6.63%)</title><rect x="90.9744%" y="485" width="6.6294%" height="15" fill="rgb(252,45,13)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="495.50">core::ops..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (83 samples, 6.63%)</title><rect x="90.9744%" y="469" width="6.6294%" height="15" fill="rgb(213,142,7)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="479.50">kernel::p..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (83 samples, 6.63%)</title><rect x="90.9744%" y="453" width="6.6294%" height="15" fill="rgb(216,157,23)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="463.50">core::ops..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (83 samples, 6.63%)</title><rect x="90.9744%" y="437" width="6.6294%" height="15" fill="rgb(212,145,33)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="447.50">&lt;alloc::b..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (83 samples, 6.63%)</title><rect x="90.9744%" y="421" width="6.6294%" height="15" fill="rgb(233,26,13)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="431.50">&lt;engine::..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (83 samples, 6.63%)</title><rect x="90.9744%" y="405" width="6.6294%" height="15" fill="rgb(219,196,19)" fg:x="1139" fg:w="83"/><text x="91.2244%" y="415.50">&lt;plugins_..</text></g><g><title>plugins_core::looking::model::new_area_observation (79 samples, 6.31%)</title><rect x="91.2939%" y="389" width="6.3099%" height="15" fill="rgb(246,56,21)" fg:x="1143" fg:w="79"/><text x="91.5439%" y="399.50">plugins_..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="97.3642%" y="373" width="0.2396%" height="15" fill="rgb(222,28,53)" fg:x="1219" fg:w="3"/><text x="97.6142%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="97.4441%" y="357" width="0.1597%" height="15" fill="rgb(224,5,27)" fg:x="1220" fg:w="2"/><text x="97.6941%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="97.4441%" y="341" width="0.1597%" height="15" fill="rgb(220,153,33)" fg:x="1220" fg:w="2"/><text x="97.6941%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="97.4441%" y="325" width="0.1597%" height="15" fill="rgb(226,58,19)" fg:x="1220" fg:w="2"/><text x="97.6941%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.4441%" y="309" width="0.1597%" height="15" fill="rgb(239,112,23)" fg:x="1220" fg:w="2"/><text x="97.6941%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.5240%" y="293" width="0.0799%" height="15" fill="rgb(251,213,20)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.5240%" y="277" width="0.0799%" height="15" fill="rgb(215,181,21)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5240%" y="261" width="0.0799%" height="15" fill="rgb(240,8,35)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.5240%" y="245" width="0.0799%" height="15" fill="rgb(232,203,3)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5240%" y="229" width="0.0799%" height="15" fill="rgb(214,202,43)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.5240%" y="213" width="0.0799%" height="15" fill="rgb(254,35,11)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5240%" y="197" width="0.0799%" height="15" fill="rgb(239,173,13)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5240%" y="181" width="0.0799%" height="15" fill="rgb(220,141,0)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.5240%" y="165" width="0.0799%" height="15" fill="rgb(210,98,12)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5240%" y="149" width="0.0799%" height="15" fill="rgb(254,153,22)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5240%" y="133" width="0.0799%" height="15" fill="rgb(247,223,17)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.5240%" y="117" width="0.0799%" height="15" fill="rgb(246,56,7)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5240%" y="101" width="0.0799%" height="15" fill="rgb(240,226,12)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5240%" y="85" width="0.0799%" height="15" fill="rgb(205,87,46)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.5240%" y="69" width="0.0799%" height="15" fill="rgb(245,214,51)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="79.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.5240%" y="53" width="0.0799%" height="15" fill="rgb(223,172,33)" fg:x="1221" fg:w="1"/><text x="97.7740%" y="63.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="97.6038%" y="469" width="0.0799%" height="15" fill="rgb(227,203,34)" fg:x="1222" fg:w="1"/><text x="97.8538%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.6038%" y="485" width="0.1597%" height="15" fill="rgb(248,143,44)" fg:x="1222" fg:w="2"/><text x="97.8538%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6837%" y="469" width="0.0799%" height="15" fill="rgb(226,162,5)" fg:x="1223" fg:w="1"/><text x="97.9337%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6837%" y="453" width="0.0799%" height="15" fill="rgb(211,143,1)" fg:x="1223" fg:w="1"/><text x="97.9337%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="97.7636%" y="437" width="0.0799%" height="15" fill="rgb(224,96,15)" fg:x="1224" fg:w="1"/><text x="98.0136%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8435%" y="421" width="0.0799%" height="15" fill="rgb(222,4,38)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8435%" y="405" width="0.0799%" height="15" fill="rgb(253,228,15)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8435%" y="389" width="0.0799%" height="15" fill="rgb(242,194,12)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8435%" y="373" width="0.0799%" height="15" fill="rgb(214,177,31)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.8435%" y="357" width="0.0799%" height="15" fill="rgb(226,58,51)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8435%" y="341" width="0.0799%" height="15" fill="rgb(250,119,16)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8435%" y="325" width="0.0799%" height="15" fill="rgb(223,128,53)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.8435%" y="309" width="0.0799%" height="15" fill="rgb(251,199,15)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.8435%" y="293" width="0.0799%" height="15" fill="rgb(235,168,42)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.8435%" y="277" width="0.0799%" height="15" fill="rgb(250,210,17)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8435%" y="261" width="0.0799%" height="15" fill="rgb(226,36,41)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8435%" y="245" width="0.0799%" height="15" fill="rgb(225,87,10)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.8435%" y="229" width="0.0799%" height="15" fill="rgb(228,83,9)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.8435%" y="213" width="0.0799%" height="15" fill="rgb(225,16,36)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.8435%" y="197" width="0.0799%" height="15" fill="rgb(242,198,13)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.8435%" y="181" width="0.0799%" height="15" fill="rgb(239,25,51)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8435%" y="165" width="0.0799%" height="15" fill="rgb(239,28,37)" fg:x="1225" fg:w="1"/><text x="98.0935%" y="175.50"></text></g><g><title>plugins_core::tools::contained_by (5 samples, 0.40%)</title><rect x="97.6038%" y="501" width="0.3994%" height="15" fill="rgb(234,70,17)" fg:x="1222" fg:w="5"/><text x="97.8538%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="97.7636%" y="485" width="0.2396%" height="15" fill="rgb(231,215,53)" fg:x="1224" fg:w="3"/><text x="98.0136%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="97.7636%" y="469" width="0.2396%" height="15" fill="rgb(218,140,42)" fg:x="1224" fg:w="3"/><text x="98.0136%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="97.7636%" y="453" width="0.2396%" height="15" fill="rgb(233,227,45)" fg:x="1224" fg:w="3"/><text x="98.0136%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.8435%" y="437" width="0.1597%" height="15" fill="rgb(225,189,21)" fg:x="1225" fg:w="2"/><text x="98.0935%" y="447.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="97.9233%" y="421" width="0.0799%" height="15" fill="rgb(237,176,54)" fg:x="1226" fg:w="1"/><text x="98.1733%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.9233%" y="405" width="0.0799%" height="15" fill="rgb(215,131,46)" fg:x="1226" fg:w="1"/><text x="98.1733%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="97.9233%" y="389" width="0.0799%" height="15" fill="rgb(218,95,20)" fg:x="1226" fg:w="1"/><text x="98.1733%" y="399.50"></text></g><g><title>engine::session::Session::captured (98 samples, 7.83%)</title><rect x="90.2556%" y="677" width="7.8275%" height="15" fill="rgb(208,198,12)" fg:x="1130" fg:w="98"/><text x="90.5056%" y="687.50">engine::ses..</text></g><g><title>engine::session::logs::capture (96 samples, 7.67%)</title><rect x="90.4153%" y="661" width="7.6677%" height="15" fill="rgb(239,107,50)" fg:x="1132" fg:w="96"/><text x="90.6653%" y="671.50">engine::se..</text></g><g><title>tracing_core::dispatcher::with_default (95 samples, 7.59%)</title><rect x="90.4952%" y="645" width="7.5879%" height="15" fill="rgb(240,217,37)" fg:x="1133" fg:w="95"/><text x="90.7452%" y="655.50">tracing_co..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (95 samples, 7.59%)</title><rect x="90.4952%" y="629" width="7.5879%" height="15" fill="rgb(242,197,49)" fg:x="1133" fg:w="95"/><text x="90.7452%" y="639.50">&lt;engine::s..</text></g><g><title>kernel::plugins::mw::apply_middleware (95 samples, 7.59%)</title><rect x="90.4952%" y="613" width="7.5879%" height="15" fill="rgb(219,171,17)" fg:x="1133" fg:w="95"/><text x="90.7452%" y="623.50">kernel::pl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (95 samples, 7.59%)</title><rect x="90.4952%" y="597" width="7.5879%" height="15" fill="rgb(209,81,40)" fg:x="1133" fg:w="95"/><text x="90.7452%" y="607.50">kernel::pl..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (95 samples, 7.59%)</title><rect x="90.4952%" y="581" width="7.5879%" height="15" fill="rgb(237,156,30)" fg:x="1133" fg:w="95"/><text x="90.7452%" y="591.50">&lt;engine::s..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (89 samples, 7.11%)</title><rect x="90.9744%" y="565" width="7.1086%" height="15" fill="rgb(212,127,16)" fg:x="1139" fg:w="89"/><text x="91.2244%" y="575.50">kernel::pl..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (89 samples, 7.11%)</title><rect x="90.9744%" y="549" width="7.1086%" height="15" fill="rgb(226,66,32)" fg:x="1139" fg:w="89"/><text x="91.2244%" y="559.50">&lt;plugins_r..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (6 samples, 0.48%)</title><rect x="97.6038%" y="533" width="0.4792%" height="15" fill="rgb(245,22,46)" fg:x="1222" fg:w="6"/><text x="97.8538%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (6 samples, 0.48%)</title><rect x="97.6038%" y="517" width="0.4792%" height="15" fill="rgb(210,112,21)" fg:x="1222" fg:w="6"/><text x="97.8538%" y="527.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="98.0032%" y="501" width="0.0799%" height="15" fill="rgb(207,118,39)" fg:x="1227" fg:w="1"/><text x="98.2532%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.0032%" y="485" width="0.0799%" height="15" fill="rgb(205,206,35)" fg:x="1227" fg:w="1"/><text x="98.2532%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0032%" y="469" width="0.0799%" height="15" fill="rgb(222,120,2)" fg:x="1227" fg:w="1"/><text x="98.2532%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0032%" y="453" width="0.0799%" height="15" fill="rgb(205,38,18)" fg:x="1227" fg:w="1"/><text x="98.2532%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0032%" y="437" width="0.0799%" height="15" fill="rgb(226,61,2)" fg:x="1227" fg:w="1"/><text x="98.2532%" y="447.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="98.0831%" y="661" width="0.0799%" height="15" fill="rgb(242,161,23)" fg:x="1228" fg:w="1"/><text x="98.3331%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1629%" y="629" width="0.0799%" height="15" fill="rgb(213,13,52)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1629%" y="613" width="0.0799%" height="15" fill="rgb(246,209,47)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1629%" y="597" width="0.0799%" height="15" fill="rgb(214,41,3)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1629%" y="581" width="0.0799%" height="15" fill="rgb(236,119,38)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.1629%" y="565" width="0.0799%" height="15" fill="rgb(218,50,11)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1629%" y="549" width="0.0799%" height="15" fill="rgb(228,38,11)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1629%" y="533" width="0.0799%" height="15" fill="rgb(212,13,9)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.1629%" y="517" width="0.0799%" height="15" fill="rgb(208,211,9)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.1629%" y="501" width="0.0799%" height="15" fill="rgb(239,39,32)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.1629%" y="485" width="0.0799%" height="15" fill="rgb(254,179,26)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1629%" y="469" width="0.0799%" height="15" fill="rgb(249,165,28)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.1629%" y="453" width="0.0799%" height="15" fill="rgb(225,59,50)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.1629%" y="437" width="0.0799%" height="15" fill="rgb(209,122,5)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.1629%" y="421" width="0.0799%" height="15" fill="rgb(214,65,34)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.1629%" y="405" width="0.0799%" height="15" fill="rgb(249,183,32)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.1629%" y="389" width="0.0799%" height="15" fill="rgb(218,122,24)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1629%" y="373" width="0.0799%" height="15" fill="rgb(224,109,18)" fg:x="1229" fg:w="1"/><text x="98.4129%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2428%" y="581" width="0.0799%" height="15" fill="rgb(210,68,50)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2428%" y="565" width="0.0799%" height="15" fill="rgb(212,184,34)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2428%" y="549" width="0.0799%" height="15" fill="rgb(238,105,48)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2428%" y="533" width="0.0799%" height="15" fill="rgb(222,134,54)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2428%" y="517" width="0.0799%" height="15" fill="rgb(246,24,43)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2428%" y="501" width="0.0799%" height="15" fill="rgb(227,169,22)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2428%" y="485" width="0.0799%" height="15" fill="rgb(253,152,4)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2428%" y="469" width="0.0799%" height="15" fill="rgb(219,158,36)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2428%" y="453" width="0.0799%" height="15" fill="rgb(251,128,40)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2428%" y="437" width="0.0799%" height="15" fill="rgb(254,101,39)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2428%" y="421" width="0.0799%" height="15" fill="rgb(221,168,40)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2428%" y="405" width="0.0799%" height="15" fill="rgb(221,14,27)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2428%" y="389" width="0.0799%" height="15" fill="rgb(207,36,43)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2428%" y="373" width="0.0799%" height="15" fill="rgb(240,172,53)" fg:x="1230" fg:w="1"/><text x="98.4928%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3227%" y="581" width="0.0799%" height="15" fill="rgb(241,138,43)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.3227%" y="565" width="0.0799%" height="15" fill="rgb(227,78,19)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.3227%" y="549" width="0.0799%" height="15" fill="rgb(215,127,44)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.3227%" y="533" width="0.0799%" height="15" fill="rgb(227,13,10)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.3227%" y="517" width="0.0799%" height="15" fill="rgb(249,177,6)" fg:x="1231" fg:w="1"/><text x="98.5727%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.2428%" y="629" width="0.2396%" height="15" fill="rgb(215,154,26)" fg:x="1230" fg:w="3"/><text x="98.4928%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.2428%" y="613" width="0.2396%" height="15" fill="rgb(250,168,20)" fg:x="1230" fg:w="3"/><text x="98.4928%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.2428%" y="597" width="0.2396%" height="15" fill="rgb(222,53,38)" fg:x="1230" fg:w="3"/><text x="98.4928%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4026%" y="581" width="0.0799%" height="15" fill="rgb(245,154,5)" fg:x="1232" fg:w="1"/><text x="98.6526%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4026%" y="565" width="0.0799%" height="15" fill="rgb(214,89,50)" fg:x="1232" fg:w="1"/><text x="98.6526%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.4026%" y="549" width="0.0799%" height="15" fill="rgb(232,73,14)" fg:x="1232" fg:w="1"/><text x="98.6526%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.4026%" y="533" width="0.0799%" height="15" fill="rgb(230,101,20)" fg:x="1232" fg:w="1"/><text x="98.6526%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.40%)</title><rect x="98.1629%" y="661" width="0.3994%" height="15" fill="rgb(208,56,28)" fg:x="1229" fg:w="5"/><text x="98.4129%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.1629%" y="645" width="0.3994%" height="15" fill="rgb(247,205,22)" fg:x="1229" fg:w="5"/><text x="98.4129%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4824%" y="629" width="0.0799%" height="15" fill="rgb(252,109,51)" fg:x="1233" fg:w="1"/><text x="98.7324%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4824%" y="613" width="0.0799%" height="15" fill="rgb(220,40,24)" fg:x="1233" fg:w="1"/><text x="98.7324%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5623%" y="645" width="0.0799%" height="15" fill="rgb(251,108,7)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5623%" y="629" width="0.0799%" height="15" fill="rgb(238,102,51)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5623%" y="613" width="0.0799%" height="15" fill="rgb(219,149,34)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.5623%" y="597" width="0.0799%" height="15" fill="rgb(239,70,0)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.5623%" y="581" width="0.0799%" height="15" fill="rgb(246,214,23)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.5623%" y="565" width="0.0799%" height="15" fill="rgb(239,221,51)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5623%" y="549" width="0.0799%" height="15" fill="rgb(254,62,14)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5623%" y="533" width="0.0799%" height="15" fill="rgb(253,57,33)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.5623%" y="517" width="0.0799%" height="15" fill="rgb(229,34,6)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.5623%" y="501" width="0.0799%" height="15" fill="rgb(235,191,23)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.5623%" y="485" width="0.0799%" height="15" fill="rgb(217,207,27)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.5623%" y="469" width="0.0799%" height="15" fill="rgb(232,41,44)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5623%" y="453" width="0.0799%" height="15" fill="rgb(221,188,19)" fg:x="1234" fg:w="1"/><text x="98.8123%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.6422%" y="549" width="0.0799%" height="15" fill="rgb(245,180,45)" fg:x="1235" fg:w="1"/><text x="98.8922%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.6422%" y="533" width="0.0799%" height="15" fill="rgb(250,220,42)" fg:x="1235" fg:w="1"/><text x="98.8922%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="98.6422%" y="517" width="0.0799%" height="15" fill="rgb(234,16,34)" fg:x="1235" fg:w="1"/><text x="98.8922%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="98.0831%" y="677" width="0.7188%" height="15" fill="rgb(233,217,23)" fg:x="1228" fg:w="9"/><text x="98.3331%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.5623%" y="661" width="0.2396%" height="15" fill="rgb(209,22,46)" fg:x="1234" fg:w="3"/><text x="98.8123%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.6422%" y="645" width="0.1597%" height="15" fill="rgb(213,101,18)" fg:x="1235" fg:w="2"/><text x="98.8922%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.6422%" y="629" width="0.1597%" height="15" fill="rgb(215,179,52)" fg:x="1235" fg:w="2"/><text x="98.8922%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6422%" y="613" width="0.1597%" height="15" fill="rgb(223,50,25)" fg:x="1235" fg:w="2"/><text x="98.8922%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.6422%" y="597" width="0.1597%" height="15" fill="rgb(224,51,44)" fg:x="1235" fg:w="2"/><text x="98.8922%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6422%" y="581" width="0.1597%" height="15" fill="rgb(224,13,54)" fg:x="1235" fg:w="2"/><text x="98.8922%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.6422%" y="565" width="0.1597%" height="15" fill="rgb(219,58,47)" fg:x="1235" fg:w="2"/><text x="98.8922%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7220%" y="549" width="0.0799%" height="15" fill="rgb(246,124,34)" fg:x="1236" fg:w="1"/><text x="98.9720%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7220%" y="533" width="0.0799%" height="15" fill="rgb(245,109,25)" fg:x="1236" fg:w="1"/><text x="98.9720%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.7220%" y="517" width="0.0799%" height="15" fill="rgb(235,48,23)" fg:x="1236" fg:w="1"/><text x="98.9720%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7220%" y="501" width="0.0799%" height="15" fill="rgb(229,203,36)" fg:x="1236" fg:w="1"/><text x="98.9720%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7220%" y="485" width="0.0799%" height="15" fill="rgb(234,180,9)" fg:x="1236" fg:w="1"/><text x="98.9720%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="98.8019%" y="645" width="0.0799%" height="15" fill="rgb(228,98,45)" fg:x="1237" fg:w="1"/><text x="99.0519%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8818%" y="597" width="0.0799%" height="15" fill="rgb(240,24,36)" fg:x="1238" fg:w="1"/><text x="99.1318%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8818%" y="581" width="0.0799%" height="15" fill="rgb(227,154,19)" fg:x="1238" fg:w="1"/><text x="99.1318%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8818%" y="629" width="0.1597%" height="15" fill="rgb(231,2,48)" fg:x="1238" fg:w="2"/><text x="99.1318%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8818%" y="613" width="0.1597%" height="15" fill="rgb(219,216,0)" fg:x="1238" fg:w="2"/><text x="99.1318%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.9617%" y="597" width="0.0799%" height="15" fill="rgb(251,88,0)" fg:x="1239" fg:w="1"/><text x="99.2117%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.9617%" y="581" width="0.0799%" height="15" fill="rgb(242,45,45)" fg:x="1239" fg:w="1"/><text x="99.2117%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.0415%" y="629" width="0.0799%" height="15" fill="rgb(218,149,45)" fg:x="1240" fg:w="1"/><text x="99.2915%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.0415%" y="613" width="0.0799%" height="15" fill="rgb(247,194,10)" fg:x="1240" fg:w="1"/><text x="99.2915%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.2013%" y="501" width="0.0799%" height="15" fill="rgb(234,33,37)" fg:x="1242" fg:w="1"/><text x="99.4513%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="99.2013%" y="533" width="0.1597%" height="15" fill="rgb(218,61,13)" fg:x="1242" fg:w="2"/><text x="99.4513%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="99.2013%" y="517" width="0.1597%" height="15" fill="rgb(210,80,52)" fg:x="1242" fg:w="2"/><text x="99.4513%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.2812%" y="501" width="0.0799%" height="15" fill="rgb(218,203,27)" fg:x="1243" fg:w="1"/><text x="99.5312%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="99.1214%" y="629" width="0.3994%" height="15" fill="rgb(209,126,33)" fg:x="1241" fg:w="5"/><text x="99.3714%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="99.1214%" y="613" width="0.3994%" height="15" fill="rgb(234,173,41)" fg:x="1241" fg:w="5"/><text x="99.3714%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="99.1214%" y="597" width="0.3994%" height="15" fill="rgb(228,166,9)" fg:x="1241" fg:w="5"/><text x="99.3714%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="99.2013%" y="581" width="0.3195%" height="15" fill="rgb(208,124,43)" fg:x="1242" fg:w="4"/><text x="99.4513%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.2013%" y="565" width="0.3195%" height="15" fill="rgb(212,154,38)" fg:x="1242" fg:w="4"/><text x="99.4513%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="99.2013%" y="549" width="0.3195%" height="15" fill="rgb(246,179,35)" fg:x="1242" fg:w="4"/><text x="99.4513%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3610%" y="533" width="0.1597%" height="15" fill="rgb(251,3,50)" fg:x="1244" fg:w="2"/><text x="99.6110%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3610%" y="517" width="0.1597%" height="15" fill="rgb(219,96,8)" fg:x="1244" fg:w="2"/><text x="99.6110%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.4409%" y="501" width="0.0799%" height="15" fill="rgb(251,216,33)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4409%" y="485" width="0.0799%" height="15" fill="rgb(243,145,29)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4409%" y="469" width="0.0799%" height="15" fill="rgb(210,75,20)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.4409%" y="453" width="0.0799%" height="15" fill="rgb(235,56,8)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4409%" y="437" width="0.0799%" height="15" fill="rgb(226,175,49)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4409%" y="421" width="0.0799%" height="15" fill="rgb(242,204,23)" fg:x="1245" fg:w="1"/><text x="99.6909%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.6006%" y="453" width="0.0799%" height="15" fill="rgb(225,104,24)" fg:x="1247" fg:w="1"/><text x="99.8506%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6006%" y="485" width="0.1597%" height="15" fill="rgb(253,34,1)" fg:x="1247" fg:w="2"/><text x="99.8506%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.6006%" y="469" width="0.1597%" height="15" fill="rgb(233,199,23)" fg:x="1247" fg:w="2"/><text x="99.8506%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6805%" y="453" width="0.0799%" height="15" fill="rgb(247,7,51)" fg:x="1248" fg:w="1"/><text x="99.9305%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6805%" y="437" width="0.0799%" height="15" fill="rgb(214,146,12)" fg:x="1248" fg:w="1"/><text x="99.9305%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="99.6805%" y="421" width="0.0799%" height="15" fill="rgb(234,181,43)" fg:x="1248" fg:w="1"/><text x="99.9305%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.6006%" y="533" width="0.2396%" height="15" fill="rgb(239,148,6)" fg:x="1247" fg:w="3"/><text x="99.8506%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.6006%" y="517" width="0.2396%" height="15" fill="rgb(206,151,17)" fg:x="1247" fg:w="3"/><text x="99.8506%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="99.6006%" y="501" width="0.2396%" height="15" fill="rgb(213,215,10)" fg:x="1247" fg:w="3"/><text x="99.8506%" y="511.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="99.7604%" y="485" width="0.0799%" height="15" fill="rgb(215,220,44)" fg:x="1249" fg:w="1"/><text x="100.0104%" y="495.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (121 samples, 9.66%)</title><rect x="90.2556%" y="709" width="9.6645%" height="15" fill="rgb(245,205,37)" fg:x="1130" fg:w="121"/><text x="90.5056%" y="719.50">engine::sessio..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (121 samples, 9.66%)</title><rect x="90.2556%" y="693" width="9.6645%" height="15" fill="rgb(245,130,43)" fg:x="1130" fg:w="121"/><text x="90.5056%" y="703.50">engine::sessio..</text></g><g><title>kernel::model::EntityPtrResolver::world (14 samples, 1.12%)</title><rect x="98.8019%" y="677" width="1.1182%" height="15" fill="rgb(231,227,38)" fg:x="1237" fg:w="14"/><text x="99.0519%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.12%)</title><rect x="98.8019%" y="661" width="1.1182%" height="15" fill="rgb(233,185,4)" fg:x="1237" fg:w="14"/><text x="99.0519%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="98.8818%" y="645" width="1.0383%" height="15" fill="rgb(224,154,43)" fg:x="1238" fg:w="13"/><text x="99.1318%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="99.5208%" y="629" width="0.3994%" height="15" fill="rgb(235,156,15)" fg:x="1246" fg:w="5"/><text x="99.7708%" y="639.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="99.5208%" y="613" width="0.3994%" height="15" fill="rgb(211,55,43)" fg:x="1246" fg:w="5"/><text x="99.7708%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="99.5208%" y="597" width="0.3994%" height="15" fill="rgb(247,149,40)" fg:x="1246" fg:w="5"/><text x="99.7708%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="99.5208%" y="581" width="0.3994%" height="15" fill="rgb(232,171,16)" fg:x="1246" fg:w="5"/><text x="99.7708%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="99.6006%" y="565" width="0.3195%" height="15" fill="rgb(215,117,49)" fg:x="1247" fg:w="4"/><text x="99.8506%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="99.6006%" y="549" width="0.3195%" height="15" fill="rgb(246,194,11)" fg:x="1247" fg:w="4"/><text x="99.8506%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8403%" y="533" width="0.0799%" height="15" fill="rgb(242,101,44)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.8403%" y="517" width="0.0799%" height="15" fill="rgb(226,174,6)" fg:x="1250" fg:w="1"/><text x="100.0903%" y="527.50"></text></g><g><title>all (1,252 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(213,150,20)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-fa9e39e2 (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(222,124,42)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1055.50">simple-fa9e39e2</text></g><g><title>_start (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(250,19,47)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,252 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(241,217,19)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,252 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(207,210,34)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,252 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(244,45,4)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,252 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(252,134,50)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,252 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(238,74,2)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,252 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(226,58,46)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,252 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(232,83,35)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,252 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(212,148,47)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,252 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(235,29,1)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,252 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(247,55,37)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,252 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(222,48,3)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,252 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(234,21,33)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,252 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(247,178,53)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,252 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(225,75,7)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,252 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(219,199,7)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,252 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(209,93,42)" fg:x="0" fg:w="1252"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (293 samples, 23.40%)</title><rect x="76.5974%" y="757" width="23.4026%" height="15" fill="rgb(240,175,17)" fg:x="959" fg:w="293"/><text x="76.8474%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (293 samples, 23.40%)</title><rect x="76.5974%" y="741" width="23.4026%" height="15" fill="rgb(232,106,7)" fg:x="959" fg:w="293"/><text x="76.8474%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (293 samples, 23.40%)</title><rect x="76.5974%" y="725" width="23.4026%" height="15" fill="rgb(242,106,43)" fg:x="959" fg:w="293"/><text x="76.8474%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9201%" y="709" width="0.0799%" height="15" fill="rgb(242,61,37)" fg:x="1251" fg:w="1"/><text x="100.1701%" y="719.50"></text></g></svg></svg>